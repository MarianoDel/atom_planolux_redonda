ARM GAS  /tmp/ccC8gCOe.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"stm32f0x_tim.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/stm32f0x_tim.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/stm32f0x_tim.o -g -gdwarf-2 -O0 -Wall
  24              	@ -fomit-frame-pointer -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccC8gCOe.s 			page 2


  58              		.type	NVIC_EnableIRQ, %function
  59              	NVIC_EnableIRQ:
  60              	.LFB11:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccC8gCOe.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccC8gCOe.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccC8gCOe.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccC8gCOe.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccC8gCOe.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccC8gCOe.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccC8gCOe.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccC8gCOe.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccC8gCOe.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccC8gCOe.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccC8gCOe.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccC8gCOe.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccC8gCOe.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccC8gCOe.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 812 0
  63              		.cfi_startproc
  64 0000 82B0     		sub	sp, sp, #8	@,,
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 8
  67 0002 0200     		movs	r2, r0	@ tmp116, IRQn
  68 0004 6B46     		mov	r3, sp	@ tmp122,
  69 0006 0733     		adds	r3, r3, #7	@ tmp117,
  70 0008 1A70     		strb	r2, [r3]	@ tmp118, IRQn
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  71              		.loc 1 813 0
  72 000a 074B     		ldr	r3, .L2	@ D.5355,
  73 000c 6A46     		mov	r2, sp	@ tmp123,
  74 000e 0732     		adds	r2, r2, #7	@ tmp119,
  75 0010 1278     		ldrb	r2, [r2]	@ D.5356, IRQn
  76 0012 1100     		movs	r1, r2	@ D.5357, D.5356
  77 0014 1F22     		movs	r2, #31	@ tmp120,
  78 0016 0A40     		ands	r2, r1	@ D.5357, D.5357
  79 0018 0121     		movs	r1, #1	@ tmp121,
  80 001a 9140     		lsls	r1, r1, r2	@ D.5358, D.5358, D.5357
  81 001c 0A00     		movs	r2, r1	@ D.5358, D.5358
  82 001e 1A60     		str	r2, [r3]	@ D.5357, _1->ISER
 814:./cmsis_core/core_cm0.h **** }
  83              		.loc 1 814 0
  84 0020 C046     		nop
  85 0022 02B0     		add	sp, sp, #8	@,,
  86              		@ sp needed	@
  87 0024 7047     		bx	lr
  88              	.L3:
  89 0026 C046     		.align	2
  90              	.L2:
  91 0028 00E100E0 		.word	-536813312
  92              		.cfi_endproc
  93              	.LFE11:
  94              		.size	NVIC_EnableIRQ, .-NVIC_EnableIRQ
  95              		.section	.text.NVIC_SetPriority,"ax",%progbits
  96              		.align	2
  97              		.code	16
  98              		.thumb_func
ARM GAS  /tmp/ccC8gCOe.s 			page 17


  99              		.type	NVIC_SetPriority, %function
 100              	NVIC_SetPriority:
 101              	.LFB16:
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccC8gCOe.s 			page 18


 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
 102              		.loc 1 893 0
 103              		.cfi_startproc
 104 0000 30B5     		push	{r4, r5, lr}	@
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 12
 107              		.cfi_offset 4, -12
 108              		.cfi_offset 5, -8
 109              		.cfi_offset 14, -4
 110 0002 83B0     		sub	sp, sp, #12	@,,
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 24
 113 0004 0200     		movs	r2, r0	@ tmp162, IRQn
 114 0006 0091     		str	r1, [sp]	@ priority, priority
 115 0008 6B46     		mov	r3, sp	@ tmp199,
 116 000a 0733     		adds	r3, r3, #7	@ tmp163,
 117 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 118              		.loc 1 894 0
 119 000e 6B46     		mov	r3, sp	@ tmp200,
 120 0010 0733     		adds	r3, r3, #7	@ tmp165,
 121 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
 122 0014 7F2B     		cmp	r3, #127	@ tmp166,
 123 0016 36D9     		bls	.L5	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 124              		.loc 1 895 0
 125 0018 324C     		ldr	r4, .L8	@ D.5359,
 126 001a 6B46     		mov	r3, sp	@ tmp201,
 127 001c 0733     		adds	r3, r3, #7	@ tmp167,
 128 001e 1B78     		ldrb	r3, [r3]	@ D.5360, IRQn
 129 0020 1A00     		movs	r2, r3	@ D.5361, D.5360
 130 0022 0F23     		movs	r3, #15	@ tmp168,
 131 0024 1340     		ands	r3, r2	@ D.5361, D.5361
ARM GAS  /tmp/ccC8gCOe.s 			page 19


 132 0026 083B     		subs	r3, r3, #8	@ D.5361,
 133 0028 9908     		lsrs	r1, r3, #2	@ D.5361, D.5361,
 134 002a 2E4A     		ldr	r2, .L8	@ D.5359,
 135 002c 6B46     		mov	r3, sp	@ tmp202,
 136 002e 0733     		adds	r3, r3, #7	@ tmp169,
 137 0030 1B78     		ldrb	r3, [r3]	@ D.5360, IRQn
 138 0032 1800     		movs	r0, r3	@ D.5361, D.5360
 139 0034 0F23     		movs	r3, #15	@ tmp170,
 140 0036 0340     		ands	r3, r0	@ D.5361, D.5361
 141 0038 083B     		subs	r3, r3, #8	@ D.5361,
 142 003a 9B08     		lsrs	r3, r3, #2	@ D.5361, D.5361,
 143 003c 0633     		adds	r3, r3, #6	@ tmp171,
 144 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 145 0040 D318     		adds	r3, r2, r3	@ tmp173, D.5359, tmp172
 146 0042 0433     		adds	r3, r3, #4	@ tmp174,
 147 0044 1B68     		ldr	r3, [r3]	@ D.5361, _9->SHP
 148 0046 6A46     		mov	r2, sp	@ tmp203,
 149 0048 0732     		adds	r2, r2, #7	@ tmp175,
 150 004a 1278     		ldrb	r2, [r2]	@ D.5360, IRQn
 151 004c 1000     		movs	r0, r2	@ D.5361, D.5360
 152 004e 0322     		movs	r2, #3	@ tmp176,
 153 0050 0240     		ands	r2, r0	@ D.5361, D.5361
 154 0052 D200     		lsls	r2, r2, #3	@ D.5361, D.5361,
 155 0054 FF20     		movs	r0, #255	@ tmp177,
 156 0056 9040     		lsls	r0, r0, r2	@ D.5362, D.5362, D.5361
 157 0058 0200     		movs	r2, r0	@ D.5362, D.5362
 158 005a D243     		mvns	r2, r2	@ D.5362, D.5362
 159 005c 1A40     		ands	r2, r3	@ D.5361, D.5361
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 160              		.loc 1 896 0
 161 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 162 0060 9B01     		lsls	r3, r3, #6	@ D.5361, tmp178,
 163 0062 FF20     		movs	r0, #255	@ tmp179,
 164 0064 1840     		ands	r0, r3	@ D.5361, D.5361
 165 0066 6B46     		mov	r3, sp	@ tmp205,
 166 0068 0733     		adds	r3, r3, #7	@ tmp180,
 167 006a 1B78     		ldrb	r3, [r3]	@ D.5360, IRQn
 168 006c 1D00     		movs	r5, r3	@ D.5361, D.5360
 169 006e 0323     		movs	r3, #3	@ tmp181,
 170 0070 2B40     		ands	r3, r5	@ D.5361, D.5361
 171 0072 DB00     		lsls	r3, r3, #3	@ D.5361, D.5361,
 172 0074 9840     		lsls	r0, r0, r3	@ D.5361, D.5361, D.5361
 173 0076 0300     		movs	r3, r0	@ D.5361, D.5361
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 174              		.loc 1 895 0
 175 0078 1A43     		orrs	r2, r3	@ D.5361, D.5361
 176 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.5361,
 177 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 178 007e E318     		adds	r3, r4, r3	@ tmp184, D.5359, tmp183
 179 0080 0433     		adds	r3, r3, #4	@ tmp185,
 180 0082 1A60     		str	r2, [r3]	@ D.5361, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 181              		.loc 1 900 0
 182 0084 2BE0     		b	.L7	@
ARM GAS  /tmp/ccC8gCOe.s 			page 20


 183              	.L5:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 184              		.loc 1 898 0
 185 0086 184C     		ldr	r4, .L8+4	@ D.5363,
 186 0088 6B46     		mov	r3, sp	@ tmp207,
 187 008a 0733     		adds	r3, r3, #7	@ tmp186,
 188 008c 1B78     		ldrb	r3, [r3]	@ D.5361, IRQn
 189 008e 5BB2     		sxtb	r3, r3	@ D.5361, D.5361
 190 0090 9B08     		lsrs	r3, r3, #2	@ D.5361, D.5361,
 191 0092 1549     		ldr	r1, .L8+4	@ D.5363,
 192 0094 6A46     		mov	r2, sp	@ tmp208,
 193 0096 0732     		adds	r2, r2, #7	@ tmp187,
 194 0098 1278     		ldrb	r2, [r2]	@ D.5361, IRQn
 195 009a 52B2     		sxtb	r2, r2	@ D.5361, D.5361
 196 009c 9208     		lsrs	r2, r2, #2	@ D.5361, D.5361,
 197 009e C032     		adds	r2, r2, #192	@ tmp188,
 198 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 199 00a2 5258     		ldr	r2, [r2, r1]	@ D.5361, _38->IP
 200 00a4 6946     		mov	r1, sp	@ tmp209,
 201 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 202 00a8 0978     		ldrb	r1, [r1]	@ D.5360, IRQn
 203 00aa 0800     		movs	r0, r1	@ D.5361, D.5360
 204 00ac 0321     		movs	r1, #3	@ tmp191,
 205 00ae 0140     		ands	r1, r0	@ D.5361, D.5361
 206 00b0 C900     		lsls	r1, r1, #3	@ D.5361, D.5361,
 207 00b2 FF20     		movs	r0, #255	@ tmp192,
 208 00b4 8840     		lsls	r0, r0, r1	@ D.5362, D.5362, D.5361
 209 00b6 0100     		movs	r1, r0	@ D.5362, D.5362
 210 00b8 C943     		mvns	r1, r1	@ D.5362, D.5362
 211 00ba 1140     		ands	r1, r2	@ D.5361, D.5361
 899:./cmsis_core/core_cm0.h **** }
 212              		.loc 1 899 0
 213 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 214 00be 9201     		lsls	r2, r2, #6	@ D.5361, tmp193,
 215 00c0 FF20     		movs	r0, #255	@ tmp194,
 216 00c2 1040     		ands	r0, r2	@ D.5361, D.5361
 217 00c4 6A46     		mov	r2, sp	@ tmp211,
 218 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 219 00c8 1278     		ldrb	r2, [r2]	@ D.5360, IRQn
 220 00ca 1500     		movs	r5, r2	@ D.5361, D.5360
 221 00cc 0322     		movs	r2, #3	@ tmp196,
 222 00ce 2A40     		ands	r2, r5	@ D.5361, D.5361
 223 00d0 D200     		lsls	r2, r2, #3	@ D.5361, D.5361,
 224 00d2 9040     		lsls	r0, r0, r2	@ D.5361, D.5361, D.5361
 225 00d4 0200     		movs	r2, r0	@ D.5361, D.5361
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 226              		.loc 1 898 0
 227 00d6 0A43     		orrs	r2, r1	@ D.5361, D.5361
 228 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 229 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 230 00dc 1A51     		str	r2, [r3, r4]	@ D.5361, _35->IP
 231              	.L7:
 232              		.loc 1 900 0
 233 00de C046     		nop
 234 00e0 03B0     		add	sp, sp, #12	@,,
 235              		@ sp needed	@
 236 00e2 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccC8gCOe.s 			page 21


 237              	.L9:
 238              		.align	2
 239              	.L8:
 240 00e4 00ED00E0 		.word	-536810240
 241 00e8 00E100E0 		.word	-536813312
 242              		.cfi_endproc
 243              	.LFE16:
 244              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 245              		.global	timer_1000
 246              		.section	.bss.timer_1000,"aw",%nobits
 247              		.align	1
 248              		.type	timer_1000, %object
 249              		.size	timer_1000, 2
 250              	timer_1000:
 251 0000 0000     		.space	2
 252              		.section	.text.Update_TIM3_CH1,"ax",%progbits
 253              		.align	2
 254              		.global	Update_TIM3_CH1
 255              		.code	16
 256              		.thumb_func
 257              		.type	Update_TIM3_CH1, %function
 258              	Update_TIM3_CH1:
 259              	.LFB20:
 260              		.file 2 "src/stm32f0x_tim.c"
   1:src/stm32f0x_tim.c **** /**
   2:src/stm32f0x_tim.c ****   ******************************************************************************
   3:src/stm32f0x_tim.c ****   * @file    Template_2/stm32f0x_tim.c
   4:src/stm32f0x_tim.c ****   * @author  Nahuel
   5:src/stm32f0x_tim.c ****   * @version V1.0
   6:src/stm32f0x_tim.c ****   * @date    22-August-2014
   7:src/stm32f0x_tim.c ****   * @brief   TIM functions.
   8:src/stm32f0x_tim.c ****   ******************************************************************************
   9:src/stm32f0x_tim.c ****   * @attention
  10:src/stm32f0x_tim.c ****   *
  11:src/stm32f0x_tim.c ****   * Use this functions to configure timers.
  12:src/stm32f0x_tim.c ****   *
  13:src/stm32f0x_tim.c ****   ******************************************************************************
  14:src/stm32f0x_tim.c ****   */
  15:src/stm32f0x_tim.c **** 
  16:src/stm32f0x_tim.c **** /* Includes ------------------------------------------------------------------*/
  17:src/stm32f0x_tim.c **** #include "stm32f0x_tim.h"
  18:src/stm32f0x_tim.c **** #include "stm32f0xx_tim.h"
  19:src/stm32f0x_tim.c **** #include "stm32f0xx_misc.h"
  20:src/stm32f0x_tim.c **** #include "uart.h"
  21:src/stm32f0x_tim.c **** #include "hard.h"
  22:src/stm32f0x_tim.c **** 
  23:src/stm32f0x_tim.c **** 
  24:src/stm32f0x_tim.c **** //--- VARIABLES EXTERNAS ---//
  25:src/stm32f0x_tim.c **** extern volatile unsigned char timer_1seg;
  26:src/stm32f0x_tim.c **** extern volatile unsigned short timer_led_comm;
  27:src/stm32f0x_tim.c **** extern volatile unsigned short wait_ms_var;
  28:src/stm32f0x_tim.c **** 
  29:src/stm32f0x_tim.c **** // ------- para determinar igrid -------
  30:src/stm32f0x_tim.c **** extern volatile unsigned char igrid_timer;
  31:src/stm32f0x_tim.c **** extern volatile unsigned char vgrid_timer;
  32:src/stm32f0x_tim.c **** 
  33:src/stm32f0x_tim.c **** //--- VARIABLES GLOBALES ---//
ARM GAS  /tmp/ccC8gCOe.s 			page 22


  34:src/stm32f0x_tim.c **** 
  35:src/stm32f0x_tim.c **** volatile unsigned short timer_1000 = 0;
  36:src/stm32f0x_tim.c **** 
  37:src/stm32f0x_tim.c **** 
  38:src/stm32f0x_tim.c **** 
  39:src/stm32f0x_tim.c **** //--- FUNCIONES DEL MODULO ---//
  40:src/stm32f0x_tim.c **** void Update_TIM3_CH1 (unsigned short a)
  41:src/stm32f0x_tim.c **** {
 261              		.loc 2 41 0
 262              		.cfi_startproc
 263 0000 82B0     		sub	sp, sp, #8	@,,
 264              	.LCFI3:
 265              		.cfi_def_cfa_offset 8
 266 0002 0200     		movs	r2, r0	@ tmp112, a
 267 0004 6B46     		mov	r3, sp	@ tmp116,
 268 0006 0633     		adds	r3, r3, #6	@ tmp113,
 269 0008 1A80     		strh	r2, [r3]	@ tmp114, a
  42:src/stm32f0x_tim.c **** 	TIM3->CCR1 = a;
 270              		.loc 2 42 0
 271 000a 044B     		ldr	r3, .L11	@ D.5364,
 272 000c 6A46     		mov	r2, sp	@ tmp117,
 273 000e 0632     		adds	r2, r2, #6	@ tmp115,
 274 0010 1288     		ldrh	r2, [r2]	@ D.5365, a
 275 0012 5A63     		str	r2, [r3, #52]	@ D.5365, _1->CCR1
  43:src/stm32f0x_tim.c **** }
 276              		.loc 2 43 0
 277 0014 C046     		nop
 278 0016 02B0     		add	sp, sp, #8	@,,
 279              		@ sp needed	@
 280 0018 7047     		bx	lr
 281              	.L12:
 282 001a C046     		.align	2
 283              	.L11:
 284 001c 00040040 		.word	1073742848
 285              		.cfi_endproc
 286              	.LFE20:
 287              		.size	Update_TIM3_CH1, .-Update_TIM3_CH1
 288              		.section	.text.Update_TIM3_CH2,"ax",%progbits
 289              		.align	2
 290              		.global	Update_TIM3_CH2
 291              		.code	16
 292              		.thumb_func
 293              		.type	Update_TIM3_CH2, %function
 294              	Update_TIM3_CH2:
 295              	.LFB21:
  44:src/stm32f0x_tim.c **** 
  45:src/stm32f0x_tim.c **** void Update_TIM3_CH2 (unsigned short a)
  46:src/stm32f0x_tim.c **** {
 296              		.loc 2 46 0
 297              		.cfi_startproc
 298 0000 82B0     		sub	sp, sp, #8	@,,
 299              	.LCFI4:
 300              		.cfi_def_cfa_offset 8
 301 0002 0200     		movs	r2, r0	@ tmp112, a
 302 0004 6B46     		mov	r3, sp	@ tmp116,
 303 0006 0633     		adds	r3, r3, #6	@ tmp113,
 304 0008 1A80     		strh	r2, [r3]	@ tmp114, a
ARM GAS  /tmp/ccC8gCOe.s 			page 23


  47:src/stm32f0x_tim.c **** 	TIM3->CCR2 = a;
 305              		.loc 2 47 0
 306 000a 044B     		ldr	r3, .L14	@ D.5366,
 307 000c 6A46     		mov	r2, sp	@ tmp117,
 308 000e 0632     		adds	r2, r2, #6	@ tmp115,
 309 0010 1288     		ldrh	r2, [r2]	@ D.5367, a
 310 0012 9A63     		str	r2, [r3, #56]	@ D.5367, _1->CCR2
  48:src/stm32f0x_tim.c **** }
 311              		.loc 2 48 0
 312 0014 C046     		nop
 313 0016 02B0     		add	sp, sp, #8	@,,
 314              		@ sp needed	@
 315 0018 7047     		bx	lr
 316              	.L15:
 317 001a C046     		.align	2
 318              	.L14:
 319 001c 00040040 		.word	1073742848
 320              		.cfi_endproc
 321              	.LFE21:
 322              		.size	Update_TIM3_CH2, .-Update_TIM3_CH2
 323              		.section	.text.Update_TIM3_CH3,"ax",%progbits
 324              		.align	2
 325              		.global	Update_TIM3_CH3
 326              		.code	16
 327              		.thumb_func
 328              		.type	Update_TIM3_CH3, %function
 329              	Update_TIM3_CH3:
 330              	.LFB22:
  49:src/stm32f0x_tim.c **** 
  50:src/stm32f0x_tim.c **** void Update_TIM3_CH3 (unsigned short a)
  51:src/stm32f0x_tim.c **** {
 331              		.loc 2 51 0
 332              		.cfi_startproc
 333 0000 82B0     		sub	sp, sp, #8	@,,
 334              	.LCFI5:
 335              		.cfi_def_cfa_offset 8
 336 0002 0200     		movs	r2, r0	@ tmp112, a
 337 0004 6B46     		mov	r3, sp	@ tmp116,
 338 0006 0633     		adds	r3, r3, #6	@ tmp113,
 339 0008 1A80     		strh	r2, [r3]	@ tmp114, a
  52:src/stm32f0x_tim.c **** 	TIM3->CCR3 = a;
 340              		.loc 2 52 0
 341 000a 044B     		ldr	r3, .L17	@ D.5368,
 342 000c 6A46     		mov	r2, sp	@ tmp117,
 343 000e 0632     		adds	r2, r2, #6	@ tmp115,
 344 0010 1288     		ldrh	r2, [r2]	@ D.5369, a
 345 0012 DA63     		str	r2, [r3, #60]	@ D.5369, _1->CCR3
  53:src/stm32f0x_tim.c **** }
 346              		.loc 2 53 0
 347 0014 C046     		nop
 348 0016 02B0     		add	sp, sp, #8	@,,
 349              		@ sp needed	@
 350 0018 7047     		bx	lr
 351              	.L18:
 352 001a C046     		.align	2
 353              	.L17:
 354 001c 00040040 		.word	1073742848
ARM GAS  /tmp/ccC8gCOe.s 			page 24


 355              		.cfi_endproc
 356              	.LFE22:
 357              		.size	Update_TIM3_CH3, .-Update_TIM3_CH3
 358              		.section	.text.Update_TIM3_CH4,"ax",%progbits
 359              		.align	2
 360              		.global	Update_TIM3_CH4
 361              		.code	16
 362              		.thumb_func
 363              		.type	Update_TIM3_CH4, %function
 364              	Update_TIM3_CH4:
 365              	.LFB23:
  54:src/stm32f0x_tim.c **** 
  55:src/stm32f0x_tim.c **** void Update_TIM3_CH4 (unsigned short a)
  56:src/stm32f0x_tim.c **** {
 366              		.loc 2 56 0
 367              		.cfi_startproc
 368 0000 82B0     		sub	sp, sp, #8	@,,
 369              	.LCFI6:
 370              		.cfi_def_cfa_offset 8
 371 0002 0200     		movs	r2, r0	@ tmp112, a
 372 0004 6B46     		mov	r3, sp	@ tmp116,
 373 0006 0633     		adds	r3, r3, #6	@ tmp113,
 374 0008 1A80     		strh	r2, [r3]	@ tmp114, a
  57:src/stm32f0x_tim.c **** 	TIM3->CCR4 = a;
 375              		.loc 2 57 0
 376 000a 044B     		ldr	r3, .L20	@ D.5370,
 377 000c 6A46     		mov	r2, sp	@ tmp117,
 378 000e 0632     		adds	r2, r2, #6	@ tmp115,
 379 0010 1288     		ldrh	r2, [r2]	@ D.5371, a
 380 0012 1A64     		str	r2, [r3, #64]	@ D.5371, _1->CCR4
  58:src/stm32f0x_tim.c **** }
 381              		.loc 2 58 0
 382 0014 C046     		nop
 383 0016 02B0     		add	sp, sp, #8	@,,
 384              		@ sp needed	@
 385 0018 7047     		bx	lr
 386              	.L21:
 387 001a C046     		.align	2
 388              	.L20:
 389 001c 00040040 		.word	1073742848
 390              		.cfi_endproc
 391              	.LFE23:
 392              		.size	Update_TIM3_CH4, .-Update_TIM3_CH4
 393              		.section	.text.Wait_ms,"ax",%progbits
 394              		.align	2
 395              		.global	Wait_ms
 396              		.code	16
 397              		.thumb_func
 398              		.type	Wait_ms, %function
 399              	Wait_ms:
 400              	.LFB24:
  59:src/stm32f0x_tim.c **** 
  60:src/stm32f0x_tim.c **** void Wait_ms (unsigned short wait)
  61:src/stm32f0x_tim.c **** {
 401              		.loc 2 61 0
 402              		.cfi_startproc
 403 0000 82B0     		sub	sp, sp, #8	@,,
ARM GAS  /tmp/ccC8gCOe.s 			page 25


 404              	.LCFI7:
 405              		.cfi_def_cfa_offset 8
 406 0002 0200     		movs	r2, r0	@ tmp111, wait
 407 0004 6B46     		mov	r3, sp	@ tmp119,
 408 0006 0633     		adds	r3, r3, #6	@ tmp112,
 409 0008 1A80     		strh	r2, [r3]	@ tmp113, wait
  62:src/stm32f0x_tim.c **** 	wait_ms_var = wait;
 410              		.loc 2 62 0
 411 000a 074B     		ldr	r3, .L24	@ tmp114,
 412 000c 6A46     		mov	r2, sp	@ tmp120,
 413 000e 0632     		adds	r2, r2, #6	@ tmp115,
 414 0010 1288     		ldrh	r2, [r2]	@ tmp116, wait
 415 0012 1A80     		strh	r2, [r3]	@ tmp116, wait_ms_var
  63:src/stm32f0x_tim.c **** 
  64:src/stm32f0x_tim.c **** 	while (wait_ms_var);
 416              		.loc 2 64 0
 417 0014 C046     		nop
 418              	.L23:
 419              		.loc 2 64 0 is_stmt 0 discriminator 1
 420 0016 044B     		ldr	r3, .L24	@ tmp117,
 421 0018 1B88     		ldrh	r3, [r3]	@ tmp118, wait_ms_var
 422 001a 9BB2     		uxth	r3, r3	@ D.5372, tmp118
 423 001c 002B     		cmp	r3, #0	@ D.5372,
 424 001e FAD1     		bne	.L23	@,
  65:src/stm32f0x_tim.c **** }
 425              		.loc 2 65 0 is_stmt 1
 426 0020 C046     		nop
 427 0022 02B0     		add	sp, sp, #8	@,,
 428              		@ sp needed	@
 429 0024 7047     		bx	lr
 430              	.L25:
 431 0026 C046     		.align	2
 432              	.L24:
 433 0028 00000000 		.word	wait_ms_var
 434              		.cfi_endproc
 435              	.LFE24:
 436              		.size	Wait_ms, .-Wait_ms
 437              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 438              		.align	2
 439              		.global	TIM3_IRQHandler
 440              		.code	16
 441              		.thumb_func
 442              		.type	TIM3_IRQHandler, %function
 443              	TIM3_IRQHandler:
 444              	.LFB25:
  66:src/stm32f0x_tim.c **** 
  67:src/stm32f0x_tim.c **** //-------------------------------------------//
  68:src/stm32f0x_tim.c **** // @brief  TIM configure.
  69:src/stm32f0x_tim.c **** // @param  None
  70:src/stm32f0x_tim.c **** // @retval None
  71:src/stm32f0x_tim.c **** //------------------------------------------//
  72:src/stm32f0x_tim.c **** void TIM3_IRQHandler (void)	//1 ms
  73:src/stm32f0x_tim.c **** {
 445              		.loc 2 73 0
 446              		.cfi_startproc
  74:src/stm32f0x_tim.c **** 	/*
  75:src/stm32f0x_tim.c **** 	Usart_Time_1ms ();
ARM GAS  /tmp/ccC8gCOe.s 			page 26


  76:src/stm32f0x_tim.c **** 
  77:src/stm32f0x_tim.c **** 	if (timer_1seg)
  78:src/stm32f0x_tim.c **** 	{
  79:src/stm32f0x_tim.c **** 		if (timer_1000)
  80:src/stm32f0x_tim.c **** 			timer_1000--;
  81:src/stm32f0x_tim.c **** 		else
  82:src/stm32f0x_tim.c **** 		{
  83:src/stm32f0x_tim.c **** 			timer_1seg--;
  84:src/stm32f0x_tim.c **** 			timer_1000 = 1000;
  85:src/stm32f0x_tim.c **** 		}
  86:src/stm32f0x_tim.c **** 	}
  87:src/stm32f0x_tim.c **** 
  88:src/stm32f0x_tim.c **** 	if (timer_led_comm)
  89:src/stm32f0x_tim.c **** 		timer_led_comm--;
  90:src/stm32f0x_tim.c **** 
  91:src/stm32f0x_tim.c **** 	if (timer_standby)
  92:src/stm32f0x_tim.c **** 		timer_standby--;
  93:src/stm32f0x_tim.c **** 	*/
  94:src/stm32f0x_tim.c **** 	//bajar flag
  95:src/stm32f0x_tim.c **** 	if (TIM3->SR & 0x01)	//bajo el flag
 447              		.loc 2 95 0
 448 0000 054B     		ldr	r3, .L29	@ D.5373,
 449 0002 1B8A     		ldrh	r3, [r3, #16]	@ tmp116,
 450 0004 9BB2     		uxth	r3, r3	@ D.5374, tmp116
 451 0006 1A00     		movs	r2, r3	@ D.5375, D.5374
 452 0008 0123     		movs	r3, #1	@ tmp117,
 453 000a 1340     		ands	r3, r2	@ D.5375, D.5375
 454 000c 02D0     		beq	.L28	@,
  96:src/stm32f0x_tim.c **** 		TIM3->SR = 0x00;
 455              		.loc 2 96 0
 456 000e 024B     		ldr	r3, .L29	@ D.5373,
 457 0010 0022     		movs	r2, #0	@ tmp118,
 458 0012 1A82     		strh	r2, [r3, #16]	@ tmp119, _7->SR
 459              	.L28:
  97:src/stm32f0x_tim.c **** }
 460              		.loc 2 97 0
 461 0014 C046     		nop
 462              		@ sp needed	@
 463 0016 7047     		bx	lr
 464              	.L30:
 465              		.align	2
 466              	.L29:
 467 0018 00040040 		.word	1073742848
 468              		.cfi_endproc
 469              	.LFE25:
 470              		.size	TIM3_IRQHandler, .-TIM3_IRQHandler
 471              		.section	.text.TIM_3_Init,"ax",%progbits
 472              		.align	2
 473              		.global	TIM_3_Init
 474              		.code	16
 475              		.thumb_func
 476              		.type	TIM_3_Init, %function
 477              	TIM_3_Init:
 478              	.LFB26:
  98:src/stm32f0x_tim.c **** 
  99:src/stm32f0x_tim.c **** 
 100:src/stm32f0x_tim.c **** void TIM_3_Init (void)
ARM GAS  /tmp/ccC8gCOe.s 			page 27


 101:src/stm32f0x_tim.c **** {
 479              		.loc 2 101 0
 480              		.cfi_startproc
 102:src/stm32f0x_tim.c **** 
 103:src/stm32f0x_tim.c **** 	//NVIC_InitTypeDef NVIC_InitStructure;
 104:src/stm32f0x_tim.c **** 
 105:src/stm32f0x_tim.c **** 	if (!RCC_TIM3_CLK)
 481              		.loc 2 105 0
 482 0000 1B4B     		ldr	r3, .L33	@ D.5376,
 483 0002 DB69     		ldr	r3, [r3, #28]	@ D.5377, _2->APB1ENR
 484 0004 0222     		movs	r2, #2	@ tmp133,
 485 0006 1340     		ands	r3, r2	@ D.5377, tmp133
 486 0008 05D1     		bne	.L32	@,
 106:src/stm32f0x_tim.c **** 		RCC_TIM3_CLK_ON;
 487              		.loc 2 106 0
 488 000a 194B     		ldr	r3, .L33	@ D.5376,
 489 000c 184A     		ldr	r2, .L33	@ D.5376,
 490 000e D269     		ldr	r2, [r2, #28]	@ D.5377, _7->APB1ENR
 491 0010 0221     		movs	r1, #2	@ tmp134,
 492 0012 0A43     		orrs	r2, r1	@ D.5377, tmp134
 493 0014 DA61     		str	r2, [r3, #28]	@ D.5377, _6->APB1ENR
 494              	.L32:
 107:src/stm32f0x_tim.c **** 
 108:src/stm32f0x_tim.c **** 	//Configuracion del timer.
 109:src/stm32f0x_tim.c **** 	TIM3->CR1 = 0x00;		//clk int / 1; upcounting
 495              		.loc 2 109 0
 496 0016 174B     		ldr	r3, .L33+4	@ D.5378,
 497 0018 0022     		movs	r2, #0	@ tmp135,
 498 001a 1A80     		strh	r2, [r3]	@ tmp136, _11->CR1
 110:src/stm32f0x_tim.c **** 	TIM3->CR2 = 0x00;		//igual al reset
 499              		.loc 2 110 0
 500 001c 154B     		ldr	r3, .L33+4	@ D.5378,
 501 001e 0022     		movs	r2, #0	@ tmp137,
 502 0020 9A80     		strh	r2, [r3, #4]	@ tmp138, _13->CR2
 111:src/stm32f0x_tim.c **** #ifdef VER_1_0
 112:src/stm32f0x_tim.c **** //	TIM3->CCMR2 = 0x7070;			//CH4 y CH3 output PWM mode 2
 113:src/stm32f0x_tim.c **** 	TIM3->CCMR1 = 0x0060;			//CH1 PWM mode 2
 503              		.loc 2 113 0
 504 0022 144B     		ldr	r3, .L33+4	@ D.5378,
 505 0024 6022     		movs	r2, #96	@ tmp139,
 506 0026 1A83     		strh	r2, [r3, #24]	@ tmp140, _15->CCMR1
 114:src/stm32f0x_tim.c **** 	TIM3->CCMR2 = 0x0000;			//
 507              		.loc 2 114 0
 508 0028 124B     		ldr	r3, .L33+4	@ D.5378,
 509 002a 0022     		movs	r2, #0	@ tmp141,
 510 002c 9A83     		strh	r2, [r3, #28]	@ tmp142, _17->CCMR2
 115:src/stm32f0x_tim.c **** 	TIM3->CCER |= TIM_CCER_CC1E;	//CH1 enable on pin
 511              		.loc 2 115 0
 512 002e 114A     		ldr	r2, .L33+4	@ D.5378,
 513 0030 104B     		ldr	r3, .L33+4	@ D.5378,
 514 0032 1B8C     		ldrh	r3, [r3, #32]	@ tmp144,
 515 0034 9BB2     		uxth	r3, r3	@ D.5379, tmp144
 516 0036 0121     		movs	r1, #1	@ tmp146,
 517 0038 0B43     		orrs	r3, r1	@ tmp145, tmp146
 518 003a 9BB2     		uxth	r3, r3	@ D.5379, tmp145
 519 003c 1384     		strh	r3, [r2, #32]	@ tmp147, _19->CCER
 116:src/stm32f0x_tim.c **** 	TIM3->ARR = 255;
ARM GAS  /tmp/ccC8gCOe.s 			page 28


 520              		.loc 2 116 0
 521 003e 0D4B     		ldr	r3, .L33+4	@ D.5378,
 522 0040 FF22     		movs	r2, #255	@ tmp148,
 523 0042 DA62     		str	r2, [r3, #44]	@ tmp148, _24->ARR
 117:src/stm32f0x_tim.c **** 	//TIM3->ARR = 1023;		//para probar parte baja de placa mosfet (comparar con placa china)
 118:src/stm32f0x_tim.c **** 	TIM3->CNT = 0;
 524              		.loc 2 118 0
 525 0044 0B4B     		ldr	r3, .L33+4	@ D.5378,
 526 0046 0022     		movs	r2, #0	@ tmp149,
 527 0048 5A62     		str	r2, [r3, #36]	@ tmp149, _26->CNT
 119:src/stm32f0x_tim.c **** 	//TIM3->PSC = 0;
 120:src/stm32f0x_tim.c **** 	TIM3->PSC = 11;
 528              		.loc 2 120 0
 529 004a 0A4B     		ldr	r3, .L33+4	@ D.5378,
 530 004c 0B22     		movs	r2, #11	@ tmp150,
 531 004e 1A85     		strh	r2, [r3, #40]	@ tmp151, _28->PSC
 121:src/stm32f0x_tim.c **** 	//TIM3->EGR = TIM_EGR_UG;
 122:src/stm32f0x_tim.c **** 
 123:src/stm32f0x_tim.c **** 	// Enable timer ver UDIS
 124:src/stm32f0x_tim.c **** 	//TIM3->DIER |= TIM_DIER_UIE;
 125:src/stm32f0x_tim.c **** 	TIM3->CR1 |= TIM_CR1_CEN;
 532              		.loc 2 125 0
 533 0050 084A     		ldr	r2, .L33+4	@ D.5378,
 534 0052 084B     		ldr	r3, .L33+4	@ D.5378,
 535 0054 1B88     		ldrh	r3, [r3]	@ tmp152, *_31
 536 0056 9BB2     		uxth	r3, r3	@ D.5379, tmp152
 537 0058 0121     		movs	r1, #1	@ tmp154,
 538 005a 0B43     		orrs	r3, r1	@ tmp153, tmp154
 539 005c 9BB2     		uxth	r3, r3	@ D.5379, tmp153
 540 005e 1380     		strh	r3, [r2]	@ tmp155, _30->CR1
 126:src/stm32f0x_tim.c **** 
 127:src/stm32f0x_tim.c **** 	//Timer sin Int
 128:src/stm32f0x_tim.c **** 	//NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 129:src/stm32f0x_tim.c **** 	//NVIC_InitStructure.NVIC_IRQChannelPriority = 5;
 130:src/stm32f0x_tim.c **** 	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 131:src/stm32f0x_tim.c **** 	//NVIC_Init(&NVIC_InitStructure);
 132:src/stm32f0x_tim.c **** 
 133:src/stm32f0x_tim.c **** 	//Configuracion Pines
 134:src/stm32f0x_tim.c **** 	//Alternate Fuction
 135:src/stm32f0x_tim.c **** 	GPIOA->AFR[0] = 0x01000000;	//PA6 -> AF1
 541              		.loc 2 135 0
 542 0060 9023     		movs	r3, #144	@ tmp157,
 543 0062 DB05     		lsls	r3, r3, #23	@ D.5380, tmp157,
 544 0064 8022     		movs	r2, #128	@ tmp158,
 545 0066 5204     		lsls	r2, r2, #17	@ tmp156, tmp158,
 546 0068 1A62     		str	r2, [r3, #32]	@ tmp156, _35->AFR
 136:src/stm32f0x_tim.c **** 	//GPIOB->AFR[0] = 0x00000011;	//PB1 -> AF1; PB0 -> AF1
 137:src/stm32f0x_tim.c **** #endif
 138:src/stm32f0x_tim.c **** 
 139:src/stm32f0x_tim.c **** }
 547              		.loc 2 139 0
 548 006a C046     		nop
 549              		@ sp needed	@
 550 006c 7047     		bx	lr
 551              	.L34:
 552 006e C046     		.align	2
 553              	.L33:
ARM GAS  /tmp/ccC8gCOe.s 			page 29


 554 0070 00100240 		.word	1073876992
 555 0074 00040040 		.word	1073742848
 556              		.cfi_endproc
 557              	.LFE26:
 558              		.size	TIM_3_Init, .-TIM_3_Init
 559              		.section	.text.TIM_6_Init,"ax",%progbits
 560              		.align	2
 561              		.global	TIM_6_Init
 562              		.code	16
 563              		.thumb_func
 564              		.type	TIM_6_Init, %function
 565              	TIM_6_Init:
 566              	.LFB27:
 140:src/stm32f0x_tim.c **** 
 141:src/stm32f0x_tim.c **** void TIM_6_Init (void)
 142:src/stm32f0x_tim.c **** {
 567              		.loc 2 142 0
 568              		.cfi_startproc
 143:src/stm32f0x_tim.c **** 	if (!RCC_TIM6_CLK)
 569              		.loc 2 143 0
 570 0000 0A4B     		ldr	r3, .L37	@ D.5381,
 571 0002 DB69     		ldr	r3, [r3, #28]	@ D.5382, _2->APB1ENR
 572 0004 1022     		movs	r2, #16	@ tmp120,
 573 0006 1340     		ands	r3, r2	@ D.5382, tmp120
 574 0008 05D1     		bne	.L36	@,
 144:src/stm32f0x_tim.c **** 		RCC_TIM6_CLK_ON;
 575              		.loc 2 144 0
 576 000a 084B     		ldr	r3, .L37	@ D.5381,
 577 000c 074A     		ldr	r2, .L37	@ D.5381,
 578 000e D269     		ldr	r2, [r2, #28]	@ D.5382, _7->APB1ENR
 579 0010 1021     		movs	r1, #16	@ tmp121,
 580 0012 0A43     		orrs	r2, r1	@ D.5382, tmp121
 581 0014 DA61     		str	r2, [r3, #28]	@ D.5382, _6->APB1ENR
 582              	.L36:
 145:src/stm32f0x_tim.c **** 
 146:src/stm32f0x_tim.c **** 	//Configuracion del timer.
 147:src/stm32f0x_tim.c **** 	TIM6->CR1 = 0x00;		//clk int / 1; upcounting
 583              		.loc 2 147 0
 584 0016 064B     		ldr	r3, .L37+4	@ D.5383,
 585 0018 0022     		movs	r2, #0	@ tmp122,
 586 001a 1A80     		strh	r2, [r3]	@ tmp123, _11->CR1
 148:src/stm32f0x_tim.c **** 	TIM6->PSC = 47;			//tick cada 1us
 587              		.loc 2 148 0
 588 001c 044B     		ldr	r3, .L37+4	@ D.5383,
 589 001e 2F22     		movs	r2, #47	@ tmp124,
 590 0020 1A85     		strh	r2, [r3, #40]	@ tmp125, _13->PSC
 149:src/stm32f0x_tim.c **** 	TIM6->ARR = 0xFFFF;			//para que arranque
 591              		.loc 2 149 0
 592 0022 034B     		ldr	r3, .L37+4	@ D.5383,
 593 0024 034A     		ldr	r2, .L37+8	@ tmp126,
 594 0026 DA62     		str	r2, [r3, #44]	@ tmp126, _15->ARR
 150:src/stm32f0x_tim.c **** 	//TIM6->CR1 |= TIM_CR1_CEN;
 151:src/stm32f0x_tim.c **** }
 595              		.loc 2 151 0
 596 0028 C046     		nop
 597              		@ sp needed	@
 598 002a 7047     		bx	lr
ARM GAS  /tmp/ccC8gCOe.s 			page 30


 599              	.L38:
 600              		.align	2
 601              	.L37:
 602 002c 00100240 		.word	1073876992
 603 0030 00100040 		.word	1073745920
 604 0034 FFFF0000 		.word	65535
 605              		.cfi_endproc
 606              	.LFE27:
 607              		.size	TIM_6_Init, .-TIM_6_Init
 608              		.section	.text.TIM14_IRQHandler,"ax",%progbits
 609              		.align	2
 610              		.global	TIM14_IRQHandler
 611              		.code	16
 612              		.thumb_func
 613              		.type	TIM14_IRQHandler, %function
 614              	TIM14_IRQHandler:
 615              	.LFB28:
 152:src/stm32f0x_tim.c **** 
 153:src/stm32f0x_tim.c **** void TIM14_IRQHandler (void)	//100uS
 154:src/stm32f0x_tim.c **** {
 616              		.loc 2 154 0
 617              		.cfi_startproc
 155:src/stm32f0x_tim.c **** 
 156:src/stm32f0x_tim.c **** 	if (TIM14->SR & 0x01)
 618              		.loc 2 156 0
 619 0000 054B     		ldr	r3, .L42	@ D.5384,
 620 0002 1B8A     		ldrh	r3, [r3, #16]	@ tmp116,
 621 0004 9BB2     		uxth	r3, r3	@ D.5385, tmp116
 622 0006 1A00     		movs	r2, r3	@ D.5386, D.5385
 623 0008 0123     		movs	r3, #1	@ tmp117,
 624 000a 1340     		ands	r3, r2	@ D.5386, D.5386
 625 000c 02D0     		beq	.L41	@,
 157:src/stm32f0x_tim.c **** 		//bajar flag
 158:src/stm32f0x_tim.c **** 		TIM14->SR = 0x00;
 626              		.loc 2 158 0
 627 000e 024B     		ldr	r3, .L42	@ D.5384,
 628 0010 0022     		movs	r2, #0	@ tmp118,
 629 0012 1A82     		strh	r2, [r3, #16]	@ tmp119, _7->SR
 630              	.L41:
 159:src/stm32f0x_tim.c **** }
 631              		.loc 2 159 0
 632 0014 C046     		nop
 633              		@ sp needed	@
 634 0016 7047     		bx	lr
 635              	.L43:
 636              		.align	2
 637              	.L42:
 638 0018 00200040 		.word	1073750016
 639              		.cfi_endproc
 640              	.LFE28:
 641              		.size	TIM14_IRQHandler, .-TIM14_IRQHandler
 642              		.section	.text.TIM_14_Init,"ax",%progbits
 643              		.align	2
 644              		.global	TIM_14_Init
 645              		.code	16
 646              		.thumb_func
 647              		.type	TIM_14_Init, %function
ARM GAS  /tmp/ccC8gCOe.s 			page 31


 648              	TIM_14_Init:
 649              	.LFB29:
 160:src/stm32f0x_tim.c **** 
 161:src/stm32f0x_tim.c **** 
 162:src/stm32f0x_tim.c **** void TIM_14_Init (void)
 163:src/stm32f0x_tim.c **** {
 650              		.loc 2 163 0
 651              		.cfi_startproc
 164:src/stm32f0x_tim.c **** 
 165:src/stm32f0x_tim.c **** 	//NVIC_InitTypeDef NVIC_InitStructure;
 166:src/stm32f0x_tim.c **** 
 167:src/stm32f0x_tim.c **** 	if (!RCC_TIM14_CLK)
 652              		.loc 2 167 0
 653 0000 0F4B     		ldr	r3, .L46	@ D.5387,
 654 0002 DA69     		ldr	r2, [r3, #28]	@ D.5388, _2->APB1ENR
 655 0004 8023     		movs	r3, #128	@ tmp137,
 656 0006 5B00     		lsls	r3, r3, #1	@ tmp124, tmp137,
 657 0008 1340     		ands	r3, r2	@ D.5388, D.5388
 658 000a 06D1     		bne	.L45	@,
 168:src/stm32f0x_tim.c **** 		RCC_TIM14_CLK_ON;
 659              		.loc 2 168 0
 660 000c 0C4B     		ldr	r3, .L46	@ D.5387,
 661 000e 0C4A     		ldr	r2, .L46	@ D.5387,
 662 0010 D269     		ldr	r2, [r2, #28]	@ D.5388, _7->APB1ENR
 663 0012 8021     		movs	r1, #128	@ tmp136,
 664 0014 4900     		lsls	r1, r1, #1	@ tmp125, tmp136,
 665 0016 0A43     		orrs	r2, r1	@ D.5388, tmp125
 666 0018 DA61     		str	r2, [r3, #28]	@ D.5388, _6->APB1ENR
 667              	.L45:
 169:src/stm32f0x_tim.c **** 
 170:src/stm32f0x_tim.c **** 	/*
 171:src/stm32f0x_tim.c **** 	//Configuracion del timer.
 172:src/stm32f0x_tim.c **** 	TIM14->ARR = 2000; //10m
 173:src/stm32f0x_tim.c **** 	TIM14->CNT = 0;
 174:src/stm32f0x_tim.c **** 	TIM14->PSC = 479;
 175:src/stm32f0x_tim.c **** 	TIM14->EGR = TIM_EGR_UG;
 176:src/stm32f0x_tim.c **** 
 177:src/stm32f0x_tim.c **** 	// Enable timer ver UDIS
 178:src/stm32f0x_tim.c **** 	TIM14->DIER |= TIM_DIER_UIE;
 179:src/stm32f0x_tim.c **** 	TIM14->CR1 |= TIM_CR1_CEN;
 180:src/stm32f0x_tim.c **** 
 181:src/stm32f0x_tim.c **** 	NVIC_InitStructure.NVIC_IRQChannel = TIM14_IRQn;
 182:src/stm32f0x_tim.c **** 	NVIC_InitStructure.NVIC_IRQChannelPriority = 5;
 183:src/stm32f0x_tim.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 184:src/stm32f0x_tim.c **** 	NVIC_Init(&NVIC_InitStructure);
 185:src/stm32f0x_tim.c **** 	*/
 186:src/stm32f0x_tim.c **** 
 187:src/stm32f0x_tim.c **** 	//Configuracion del timer.
 188:src/stm32f0x_tim.c **** 	TIM14->CR1 = 0x00;		//clk int / 1; upcounting; uev
 668              		.loc 2 188 0
 669 001a 0A4B     		ldr	r3, .L46+4	@ D.5389,
 670 001c 0022     		movs	r2, #0	@ tmp126,
 671 001e 1A80     		strh	r2, [r3]	@ tmp127, _11->CR1
 189:src/stm32f0x_tim.c **** 	TIM14->PSC = 47;			//tick cada 1us
 672              		.loc 2 189 0
 673 0020 084B     		ldr	r3, .L46+4	@ D.5389,
 674 0022 2F22     		movs	r2, #47	@ tmp128,
ARM GAS  /tmp/ccC8gCOe.s 			page 32


 675 0024 1A85     		strh	r2, [r3, #40]	@ tmp129, _13->PSC
 190:src/stm32f0x_tim.c **** 	TIM14->ARR = 0xFFFF;			//para que arranque
 676              		.loc 2 190 0
 677 0026 074B     		ldr	r3, .L46+4	@ D.5389,
 678 0028 074A     		ldr	r2, .L46+8	@ tmp130,
 679 002a DA62     		str	r2, [r3, #44]	@ tmp130, _15->ARR
 191:src/stm32f0x_tim.c **** 	TIM14->EGR |= 0x0001;
 680              		.loc 2 191 0
 681 002c 054A     		ldr	r2, .L46+4	@ D.5389,
 682 002e 054B     		ldr	r3, .L46+4	@ D.5389,
 683 0030 9B8A     		ldrh	r3, [r3, #20]	@ tmp132,
 684 0032 9BB2     		uxth	r3, r3	@ D.5390, tmp132
 685 0034 0121     		movs	r1, #1	@ tmp134,
 686 0036 0B43     		orrs	r3, r1	@ tmp133, tmp134
 687 0038 9BB2     		uxth	r3, r3	@ D.5390, tmp133
 688 003a 9382     		strh	r3, [r2, #20]	@ tmp135, _17->EGR
 192:src/stm32f0x_tim.c **** }
 689              		.loc 2 192 0
 690 003c C046     		nop
 691              		@ sp needed	@
 692 003e 7047     		bx	lr
 693              	.L47:
 694              		.align	2
 695              	.L46:
 696 0040 00100240 		.word	1073876992
 697 0044 00200040 		.word	1073750016
 698 0048 FFFF0000 		.word	65535
 699              		.cfi_endproc
 700              	.LFE29:
 701              		.size	TIM_14_Init, .-TIM_14_Init
 702              		.section	.text.TIM16_IRQHandler,"ax",%progbits
 703              		.align	2
 704              		.global	TIM16_IRQHandler
 705              		.code	16
 706              		.thumb_func
 707              		.type	TIM16_IRQHandler, %function
 708              	TIM16_IRQHandler:
 709              	.LFB30:
 193:src/stm32f0x_tim.c **** 
 194:src/stm32f0x_tim.c **** void TIM16_IRQHandler (void)	//es one shoot
 195:src/stm32f0x_tim.c **** {
 710              		.loc 2 195 0
 711              		.cfi_startproc
 196:src/stm32f0x_tim.c **** 	//SendDMXPacket(PCKT_UPDATE);
 197:src/stm32f0x_tim.c **** 
 198:src/stm32f0x_tim.c **** 	if (TIM16->SR & 0x01)
 712              		.loc 2 198 0
 713 0000 054B     		ldr	r3, .L51	@ D.5391,
 714 0002 1B8A     		ldrh	r3, [r3, #16]	@ tmp116,
 715 0004 9BB2     		uxth	r3, r3	@ D.5392, tmp116
 716 0006 1A00     		movs	r2, r3	@ D.5393, D.5392
 717 0008 0123     		movs	r3, #1	@ tmp117,
 718 000a 1340     		ands	r3, r2	@ D.5393, D.5393
 719 000c 02D0     		beq	.L50	@,
 199:src/stm32f0x_tim.c **** 		//bajar flag
 200:src/stm32f0x_tim.c **** 		TIM16->SR = 0x00;
 720              		.loc 2 200 0
ARM GAS  /tmp/ccC8gCOe.s 			page 33


 721 000e 024B     		ldr	r3, .L51	@ D.5391,
 722 0010 0022     		movs	r2, #0	@ tmp118,
 723 0012 1A82     		strh	r2, [r3, #16]	@ tmp119, _7->SR
 724              	.L50:
 201:src/stm32f0x_tim.c **** }
 725              		.loc 2 201 0
 726 0014 C046     		nop
 727              		@ sp needed	@
 728 0016 7047     		bx	lr
 729              	.L52:
 730              		.align	2
 731              	.L51:
 732 0018 00440140 		.word	1073824768
 733              		.cfi_endproc
 734              	.LFE30:
 735              		.size	TIM16_IRQHandler, .-TIM16_IRQHandler
 736              		.section	.text.TIM_16_Init,"ax",%progbits
 737              		.align	2
 738              		.global	TIM_16_Init
 739              		.code	16
 740              		.thumb_func
 741              		.type	TIM_16_Init, %function
 742              	TIM_16_Init:
 743              	.LFB31:
 202:src/stm32f0x_tim.c **** 
 203:src/stm32f0x_tim.c **** 
 204:src/stm32f0x_tim.c **** void TIM_16_Init (void)
 205:src/stm32f0x_tim.c **** {
 744              		.loc 2 205 0
 745              		.cfi_startproc
 746 0000 10B5     		push	{r4, lr}	@
 747              	.LCFI8:
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 4, -8
 750              		.cfi_offset 14, -4
 206:src/stm32f0x_tim.c **** 	if (!RCC_TIM16_CLK)
 751              		.loc 2 206 0
 752 0002 174B     		ldr	r3, .L55	@ D.5394,
 753 0004 9A69     		ldr	r2, [r3, #24]	@ D.5395, _2->APB2ENR
 754 0006 8023     		movs	r3, #128	@ tmp144,
 755 0008 9B02     		lsls	r3, r3, #10	@ tmp128, tmp144,
 756 000a 1340     		ands	r3, r2	@ D.5395, D.5395
 757 000c 06D1     		bne	.L54	@,
 207:src/stm32f0x_tim.c **** 		RCC_TIM16_CLK_ON;
 758              		.loc 2 207 0
 759 000e 144B     		ldr	r3, .L55	@ D.5394,
 760 0010 134A     		ldr	r2, .L55	@ D.5394,
 761 0012 9269     		ldr	r2, [r2, #24]	@ D.5395, _7->APB2ENR
 762 0014 8021     		movs	r1, #128	@ tmp143,
 763 0016 8902     		lsls	r1, r1, #10	@ tmp129, tmp143,
 764 0018 0A43     		orrs	r2, r1	@ D.5395, tmp129
 765 001a 9A61     		str	r2, [r3, #24]	@ D.5395, _6->APB2ENR
 766              	.L54:
 208:src/stm32f0x_tim.c **** 
 209:src/stm32f0x_tim.c **** 	//Configuracion del timer.
 210:src/stm32f0x_tim.c **** 	TIM16->ARR = 0;
 767              		.loc 2 210 0
ARM GAS  /tmp/ccC8gCOe.s 			page 34


 768 001c 114B     		ldr	r3, .L55+4	@ D.5396,
 769 001e 0022     		movs	r2, #0	@ tmp130,
 770 0020 DA62     		str	r2, [r3, #44]	@ tmp130, _11->ARR
 211:src/stm32f0x_tim.c **** 	TIM16->CNT = 0;
 771              		.loc 2 211 0
 772 0022 104B     		ldr	r3, .L55+4	@ D.5396,
 773 0024 0022     		movs	r2, #0	@ tmp131,
 774 0026 5A62     		str	r2, [r3, #36]	@ tmp131, _13->CNT
 212:src/stm32f0x_tim.c **** 	TIM16->PSC = 47;
 775              		.loc 2 212 0
 776 0028 0E4B     		ldr	r3, .L55+4	@ D.5396,
 777 002a 2F22     		movs	r2, #47	@ tmp132,
 778 002c 1A85     		strh	r2, [r3, #40]	@ tmp133, _15->PSC
 213:src/stm32f0x_tim.c **** 
 214:src/stm32f0x_tim.c **** 	// Enable timer interrupt ver UDIS
 215:src/stm32f0x_tim.c **** 	TIM16->DIER |= TIM_DIER_UIE;
 779              		.loc 2 215 0
 780 002e 0D4A     		ldr	r2, .L55+4	@ D.5396,
 781 0030 0C4B     		ldr	r3, .L55+4	@ D.5396,
 782 0032 9B89     		ldrh	r3, [r3, #12]	@ tmp135,
 783 0034 9BB2     		uxth	r3, r3	@ D.5397, tmp135
 784 0036 0121     		movs	r1, #1	@ tmp137,
 785 0038 0B43     		orrs	r3, r1	@ tmp136, tmp137
 786 003a 9BB2     		uxth	r3, r3	@ D.5397, tmp136
 787 003c 9381     		strh	r3, [r2, #12]	@ tmp138, _17->DIER
 216:src/stm32f0x_tim.c **** 	TIM16->CR1 |= TIM_CR1_URS | TIM_CR1_OPM;	//solo int cuando hay overflow y one shot
 788              		.loc 2 216 0
 789 003e 094A     		ldr	r2, .L55+4	@ D.5396,
 790 0040 084B     		ldr	r3, .L55+4	@ D.5396,
 791 0042 1B88     		ldrh	r3, [r3]	@ tmp139, *_23
 792 0044 9BB2     		uxth	r3, r3	@ D.5397, tmp139
 793 0046 0C21     		movs	r1, #12	@ tmp141,
 794 0048 0B43     		orrs	r3, r1	@ tmp140, tmp141
 795 004a 9BB2     		uxth	r3, r3	@ D.5397, tmp140
 796 004c 1380     		strh	r3, [r2]	@ tmp142, _22->CR1
 217:src/stm32f0x_tim.c **** 
 218:src/stm32f0x_tim.c **** 	NVIC_EnableIRQ(TIM16_IRQn);
 797              		.loc 2 218 0
 798 004e 1520     		movs	r0, #21	@,
 799 0050 FFF7FEFF 		bl	NVIC_EnableIRQ	@
 219:src/stm32f0x_tim.c **** 	NVIC_SetPriority(TIM16_IRQn, 7);
 800              		.loc 2 219 0
 801 0054 0721     		movs	r1, #7	@,
 802 0056 1520     		movs	r0, #21	@,
 803 0058 FFF7FEFF 		bl	NVIC_SetPriority	@
 220:src/stm32f0x_tim.c **** }
 804              		.loc 2 220 0
 805 005c C046     		nop
 806              		@ sp needed	@
 807 005e 10BD     		pop	{r4, pc}
 808              	.L56:
 809              		.align	2
 810              	.L55:
 811 0060 00100240 		.word	1073876992
 812 0064 00440140 		.word	1073824768
 813              		.cfi_endproc
 814              	.LFE31:
ARM GAS  /tmp/ccC8gCOe.s 			page 35


 815              		.size	TIM_16_Init, .-TIM_16_Init
 816              		.section	.text.OneShootTIM16,"ax",%progbits
 817              		.align	2
 818              		.global	OneShootTIM16
 819              		.code	16
 820              		.thumb_func
 821              		.type	OneShootTIM16, %function
 822              	OneShootTIM16:
 823              	.LFB32:
 221:src/stm32f0x_tim.c **** 
 222:src/stm32f0x_tim.c **** void OneShootTIM16 (unsigned short a)
 223:src/stm32f0x_tim.c **** {
 824              		.loc 2 223 0
 825              		.cfi_startproc
 826 0000 82B0     		sub	sp, sp, #8	@,,
 827              	.LCFI9:
 828              		.cfi_def_cfa_offset 8
 829 0002 0200     		movs	r2, r0	@ tmp116, a
 830 0004 6B46     		mov	r3, sp	@ tmp124,
 831 0006 0633     		adds	r3, r3, #6	@ tmp117,
 832 0008 1A80     		strh	r2, [r3]	@ tmp118, a
 224:src/stm32f0x_tim.c **** 	TIM16->ARR = a;
 833              		.loc 2 224 0
 834 000a 084B     		ldr	r3, .L58	@ D.5398,
 835 000c 6A46     		mov	r2, sp	@ tmp125,
 836 000e 0632     		adds	r2, r2, #6	@ tmp119,
 837 0010 1288     		ldrh	r2, [r2]	@ D.5399, a
 838 0012 DA62     		str	r2, [r3, #44]	@ D.5399, _1->ARR
 225:src/stm32f0x_tim.c **** 	TIM16->CR1 |= TIM_CR1_CEN;
 839              		.loc 2 225 0
 840 0014 054A     		ldr	r2, .L58	@ D.5398,
 841 0016 054B     		ldr	r3, .L58	@ D.5398,
 842 0018 1B88     		ldrh	r3, [r3]	@ tmp120, *_7
 843 001a 9BB2     		uxth	r3, r3	@ D.5400, tmp120
 844 001c 0121     		movs	r1, #1	@ tmp122,
 845 001e 0B43     		orrs	r3, r1	@ tmp121, tmp122
 846 0020 9BB2     		uxth	r3, r3	@ D.5400, tmp121
 847 0022 1380     		strh	r3, [r2]	@ tmp123, _6->CR1
 226:src/stm32f0x_tim.c **** }
 848              		.loc 2 226 0
 849 0024 C046     		nop
 850 0026 02B0     		add	sp, sp, #8	@,,
 851              		@ sp needed	@
 852 0028 7047     		bx	lr
 853              	.L59:
 854 002a C046     		.align	2
 855              	.L58:
 856 002c 00440140 		.word	1073824768
 857              		.cfi_endproc
 858              	.LFE32:
 859              		.size	OneShootTIM16, .-OneShootTIM16
 860              		.section	.text.TIM17_IRQHandler,"ax",%progbits
 861              		.align	2
 862              		.global	TIM17_IRQHandler
 863              		.code	16
 864              		.thumb_func
 865              		.type	TIM17_IRQHandler, %function
ARM GAS  /tmp/ccC8gCOe.s 			page 36


 866              	TIM17_IRQHandler:
 867              	.LFB33:
 227:src/stm32f0x_tim.c **** 
 228:src/stm32f0x_tim.c **** void TIM17_IRQHandler (void)	//200uS
 229:src/stm32f0x_tim.c **** {
 868              		.loc 2 229 0
 869              		.cfi_startproc
 230:src/stm32f0x_tim.c **** 	igrid_timer = 1;
 870              		.loc 2 230 0
 871 0000 084B     		ldr	r3, .L63	@ tmp115,
 872 0002 0122     		movs	r2, #1	@ tmp116,
 873 0004 1A70     		strb	r2, [r3]	@ tmp117, igrid_timer
 231:src/stm32f0x_tim.c **** 	vgrid_timer = 1;
 874              		.loc 2 231 0
 875 0006 084B     		ldr	r3, .L63+4	@ tmp118,
 876 0008 0122     		movs	r2, #1	@ tmp119,
 877 000a 1A70     		strb	r2, [r3]	@ tmp120, vgrid_timer
 232:src/stm32f0x_tim.c **** 
 233:src/stm32f0x_tim.c **** 	if (TIM17->SR & 0x01)
 878              		.loc 2 233 0
 879 000c 074B     		ldr	r3, .L63+8	@ D.5401,
 880 000e 1B8A     		ldrh	r3, [r3, #16]	@ tmp122,
 881 0010 9BB2     		uxth	r3, r3	@ D.5402, tmp122
 882 0012 1A00     		movs	r2, r3	@ D.5403, D.5402
 883 0014 0123     		movs	r3, #1	@ tmp123,
 884 0016 1340     		ands	r3, r2	@ D.5403, D.5403
 885 0018 02D0     		beq	.L62	@,
 234:src/stm32f0x_tim.c **** 		TIM17->SR = 0x00;		//bajar flag
 886              		.loc 2 234 0
 887 001a 044B     		ldr	r3, .L63+8	@ D.5401,
 888 001c 0022     		movs	r2, #0	@ tmp124,
 889 001e 1A82     		strh	r2, [r3, #16]	@ tmp125, _9->SR
 890              	.L62:
 235:src/stm32f0x_tim.c **** }
 891              		.loc 2 235 0
 892 0020 C046     		nop
 893              		@ sp needed	@
 894 0022 7047     		bx	lr
 895              	.L64:
 896              		.align	2
 897              	.L63:
 898 0024 00000000 		.word	igrid_timer
 899 0028 00000000 		.word	vgrid_timer
 900 002c 00480140 		.word	1073825792
 901              		.cfi_endproc
 902              	.LFE33:
 903              		.size	TIM17_IRQHandler, .-TIM17_IRQHandler
 904              		.section	.text.TIM_17_Init,"ax",%progbits
 905              		.align	2
 906              		.global	TIM_17_Init
 907              		.code	16
 908              		.thumb_func
 909              		.type	TIM_17_Init, %function
 910              	TIM_17_Init:
 911              	.LFB34:
 236:src/stm32f0x_tim.c **** 
 237:src/stm32f0x_tim.c **** 
ARM GAS  /tmp/ccC8gCOe.s 			page 37


 238:src/stm32f0x_tim.c **** void TIM_17_Init (void)
 239:src/stm32f0x_tim.c **** {
 912              		.loc 2 239 0
 913              		.cfi_startproc
 914 0000 10B5     		push	{r4, lr}	@
 915              	.LCFI10:
 916              		.cfi_def_cfa_offset 8
 917              		.cfi_offset 4, -8
 918              		.cfi_offset 14, -4
 240:src/stm32f0x_tim.c **** 	if (!RCC_TIM17_CLK)
 919              		.loc 2 240 0
 920 0002 184B     		ldr	r3, .L67	@ D.5404,
 921 0004 9A69     		ldr	r2, [r3, #24]	@ D.5405, _2->APB2ENR
 922 0006 8023     		movs	r3, #128	@ tmp145,
 923 0008 DB02     		lsls	r3, r3, #11	@ tmp128, tmp145,
 924 000a 1340     		ands	r3, r2	@ D.5405, D.5405
 925 000c 06D1     		bne	.L66	@,
 241:src/stm32f0x_tim.c **** 		RCC_TIM17_CLK_ON;
 926              		.loc 2 241 0
 927 000e 154B     		ldr	r3, .L67	@ D.5404,
 928 0010 144A     		ldr	r2, .L67	@ D.5404,
 929 0012 9269     		ldr	r2, [r2, #24]	@ D.5405, _7->APB2ENR
 930 0014 8021     		movs	r1, #128	@ tmp144,
 931 0016 C902     		lsls	r1, r1, #11	@ tmp129, tmp144,
 932 0018 0A43     		orrs	r2, r1	@ D.5405, tmp129
 933 001a 9A61     		str	r2, [r3, #24]	@ D.5405, _6->APB2ENR
 934              	.L66:
 242:src/stm32f0x_tim.c **** 
 243:src/stm32f0x_tim.c **** 	//Configuracion del timer.
 244:src/stm32f0x_tim.c **** 	TIM17->ARR = 400;		//400us
 935              		.loc 2 244 0
 936 001c 124B     		ldr	r3, .L67+4	@ D.5406,
 937 001e C822     		movs	r2, #200	@ tmp143,
 938 0020 5200     		lsls	r2, r2, #1	@ tmp130, tmp143,
 939 0022 DA62     		str	r2, [r3, #44]	@ tmp130, _11->ARR
 245:src/stm32f0x_tim.c **** 	TIM17->CNT = 0;
 940              		.loc 2 245 0
 941 0024 104B     		ldr	r3, .L67+4	@ D.5406,
 942 0026 0022     		movs	r2, #0	@ tmp131,
 943 0028 5A62     		str	r2, [r3, #36]	@ tmp131, _13->CNT
 246:src/stm32f0x_tim.c **** 	TIM17->PSC = 47;
 944              		.loc 2 246 0
 945 002a 0F4B     		ldr	r3, .L67+4	@ D.5406,
 946 002c 2F22     		movs	r2, #47	@ tmp132,
 947 002e 1A85     		strh	r2, [r3, #40]	@ tmp133, _15->PSC
 247:src/stm32f0x_tim.c **** 
 248:src/stm32f0x_tim.c **** 	// Enable timer interrupt ver UDIS
 249:src/stm32f0x_tim.c **** 	TIM17->DIER |= TIM_DIER_UIE;
 948              		.loc 2 249 0
 949 0030 0D4A     		ldr	r2, .L67+4	@ D.5406,
 950 0032 0D4B     		ldr	r3, .L67+4	@ D.5406,
 951 0034 9B89     		ldrh	r3, [r3, #12]	@ tmp135,
 952 0036 9BB2     		uxth	r3, r3	@ D.5407, tmp135
 953 0038 0121     		movs	r1, #1	@ tmp137,
 954 003a 0B43     		orrs	r3, r1	@ tmp136, tmp137
 955 003c 9BB2     		uxth	r3, r3	@ D.5407, tmp136
 956 003e 9381     		strh	r3, [r2, #12]	@ tmp138, _17->DIER
ARM GAS  /tmp/ccC8gCOe.s 			page 38


 250:src/stm32f0x_tim.c **** 	TIM17->CR1 |= TIM_CR1_URS | TIM_CR1_CEN;	//solo int cuando hay overflow y one shot
 957              		.loc 2 250 0
 958 0040 094A     		ldr	r2, .L67+4	@ D.5406,
 959 0042 094B     		ldr	r3, .L67+4	@ D.5406,
 960 0044 1B88     		ldrh	r3, [r3]	@ tmp139, *_23
 961 0046 9BB2     		uxth	r3, r3	@ D.5407, tmp139
 962 0048 0521     		movs	r1, #5	@ tmp141,
 963 004a 0B43     		orrs	r3, r1	@ tmp140, tmp141
 964 004c 9BB2     		uxth	r3, r3	@ D.5407, tmp140
 965 004e 1380     		strh	r3, [r2]	@ tmp142, _22->CR1
 251:src/stm32f0x_tim.c **** 
 252:src/stm32f0x_tim.c **** 	NVIC_EnableIRQ(TIM17_IRQn);
 966              		.loc 2 252 0
 967 0050 1620     		movs	r0, #22	@,
 968 0052 FFF7FEFF 		bl	NVIC_EnableIRQ	@
 253:src/stm32f0x_tim.c **** 	NVIC_SetPriority(TIM17_IRQn, 8);
 969              		.loc 2 253 0
 970 0056 0821     		movs	r1, #8	@,
 971 0058 1620     		movs	r0, #22	@,
 972 005a FFF7FEFF 		bl	NVIC_SetPriority	@
 254:src/stm32f0x_tim.c **** }
 973              		.loc 2 254 0
 974 005e C046     		nop
 975              		@ sp needed	@
 976 0060 10BD     		pop	{r4, pc}
 977              	.L68:
 978 0062 C046     		.align	2
 979              	.L67:
 980 0064 00100240 		.word	1073876992
 981 0068 00480140 		.word	1073825792
 982              		.cfi_endproc
 983              	.LFE34:
 984              		.size	TIM_17_Init, .-TIM_17_Init
 985              		.text
 986              	.Letext0:
 987              		.file 3 "./cmsis_boot/stm32f0xx.h"
 988              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 989              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 990              		.section	.debug_info,"",%progbits
 991              	.Ldebug_info0:
 992 0000 B0090000 		.4byte	0x9b0
 993 0004 0200     		.2byte	0x2
 994 0006 00000000 		.4byte	.Ldebug_abbrev0
 995 000a 04       		.byte	0x4
 996 000b 01       		.uleb128 0x1
 997 000c 71050000 		.4byte	.LASF130
 998 0010 0C       		.byte	0xc
 999 0011 B6040000 		.4byte	.LASF131
 1000 0015 61040000 		.4byte	.LASF132
 1001 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1002 001d 00000000 		.4byte	0
 1003 0021 00000000 		.4byte	0
 1004 0025 00000000 		.4byte	.Ldebug_line0
 1005 0029 02       		.uleb128 0x2
 1006 002a D3020000 		.4byte	.LASF108
 1007 002e 01       		.byte	0x1
 1008 002f 06010000 		.4byte	0x106
ARM GAS  /tmp/ccC8gCOe.s 			page 39


 1009 0033 03       		.byte	0x3
 1010 0034 C7       		.byte	0xc7
 1011 0035 06010000 		.4byte	0x106
 1012 0039 03       		.uleb128 0x3
 1013 003a 55030000 		.4byte	.LASF0
 1014 003e 72       		.sleb128 -14
 1015 003f 03       		.uleb128 0x3
 1016 0040 1C060000 		.4byte	.LASF1
 1017 0044 73       		.sleb128 -13
 1018 0045 03       		.uleb128 0x3
 1019 0046 42000000 		.4byte	.LASF2
 1020 004a 7B       		.sleb128 -5
 1021 004b 03       		.uleb128 0x3
 1022 004c A7000000 		.4byte	.LASF3
 1023 0050 7E       		.sleb128 -2
 1024 0051 03       		.uleb128 0x3
 1025 0052 D7030000 		.4byte	.LASF4
 1026 0056 7F       		.sleb128 -1
 1027 0057 04       		.uleb128 0x4
 1028 0058 44020000 		.4byte	.LASF5
 1029 005c 00       		.byte	0
 1030 005d 04       		.uleb128 0x4
 1031 005e 75020000 		.4byte	.LASF6
 1032 0062 01       		.byte	0x1
 1033 0063 04       		.uleb128 0x4
 1034 0064 D8020000 		.4byte	.LASF7
 1035 0068 02       		.byte	0x2
 1036 0069 04       		.uleb128 0x4
 1037 006a 79000000 		.4byte	.LASF8
 1038 006e 03       		.byte	0x3
 1039 006f 04       		.uleb128 0x4
 1040 0070 B3000000 		.4byte	.LASF9
 1041 0074 04       		.byte	0x4
 1042 0075 04       		.uleb128 0x4
 1043 0076 84000000 		.4byte	.LASF10
 1044 007a 05       		.byte	0x5
 1045 007b 04       		.uleb128 0x4
 1046 007c 2C000000 		.4byte	.LASF11
 1047 0080 06       		.byte	0x6
 1048 0081 04       		.uleb128 0x4
 1049 0082 08000000 		.4byte	.LASF12
 1050 0086 07       		.byte	0x7
 1051 0087 04       		.uleb128 0x4
 1052 0088 54020000 		.4byte	.LASF13
 1053 008c 08       		.byte	0x8
 1054 008d 04       		.uleb128 0x4
 1055 008e 00020000 		.4byte	.LASF14
 1056 0092 09       		.byte	0x9
 1057 0093 04       		.uleb128 0x4
 1058 0094 A1040000 		.4byte	.LASF15
 1059 0098 0A       		.byte	0xa
 1060 0099 04       		.uleb128 0x4
 1061 009a A2030000 		.4byte	.LASF16
 1062 009e 0B       		.byte	0xb
 1063 009f 04       		.uleb128 0x4
 1064 00a0 8F020000 		.4byte	.LASF17
 1065 00a4 0C       		.byte	0xc
ARM GAS  /tmp/ccC8gCOe.s 			page 40


 1066 00a5 04       		.uleb128 0x4
 1067 00a6 5C020000 		.4byte	.LASF18
 1068 00aa 0D       		.byte	0xd
 1069 00ab 04       		.uleb128 0x4
 1070 00ac 72030000 		.4byte	.LASF19
 1071 00b0 0E       		.byte	0xe
 1072 00b1 04       		.uleb128 0x4
 1073 00b2 17040000 		.4byte	.LASF20
 1074 00b6 0F       		.byte	0xf
 1075 00b7 04       		.uleb128 0x4
 1076 00b8 F6010000 		.4byte	.LASF21
 1077 00bc 10       		.byte	0x10
 1078 00bd 04       		.uleb128 0x4
 1079 00be C9040000 		.4byte	.LASF22
 1080 00c2 11       		.byte	0x11
 1081 00c3 04       		.uleb128 0x4
 1082 00c4 96040000 		.4byte	.LASF23
 1083 00c8 13       		.byte	0x13
 1084 00c9 04       		.uleb128 0x4
 1085 00ca 26020000 		.4byte	.LASF24
 1086 00ce 14       		.byte	0x14
 1087 00cf 04       		.uleb128 0x4
 1088 00d0 69000000 		.4byte	.LASF25
 1089 00d4 15       		.byte	0x15
 1090 00d5 04       		.uleb128 0x4
 1091 00d6 97030000 		.4byte	.LASF26
 1092 00da 16       		.byte	0x16
 1093 00db 04       		.uleb128 0x4
 1094 00dc 9D000000 		.4byte	.LASF27
 1095 00e0 17       		.byte	0x17
 1096 00e1 04       		.uleb128 0x4
 1097 00e2 FB030000 		.4byte	.LASF28
 1098 00e6 18       		.byte	0x18
 1099 00e7 04       		.uleb128 0x4
 1100 00e8 15010000 		.4byte	.LASF29
 1101 00ec 19       		.byte	0x19
 1102 00ed 04       		.uleb128 0x4
 1103 00ee 31050000 		.4byte	.LASF30
 1104 00f2 1A       		.byte	0x1a
 1105 00f3 04       		.uleb128 0x4
 1106 00f4 44030000 		.4byte	.LASF31
 1107 00f8 1B       		.byte	0x1b
 1108 00f9 04       		.uleb128 0x4
 1109 00fa 75010000 		.4byte	.LASF32
 1110 00fe 1C       		.byte	0x1c
 1111 00ff 04       		.uleb128 0x4
 1112 0100 E4030000 		.4byte	.LASF33
 1113 0104 1E       		.byte	0x1e
 1114 0105 00       		.byte	0
 1115 0106 05       		.uleb128 0x5
 1116 0107 01       		.byte	0x1
 1117 0108 06       		.byte	0x6
 1118 0109 47050000 		.4byte	.LASF34
 1119 010d 06       		.uleb128 0x6
 1120 010e 6B010000 		.4byte	.LASF37
 1121 0112 03       		.byte	0x3
 1122 0113 5F01     		.2byte	0x15f
ARM GAS  /tmp/ccC8gCOe.s 			page 41


 1123 0115 29000000 		.4byte	0x29
 1124 0119 05       		.uleb128 0x5
 1125 011a 01       		.byte	0x1
 1126 011b 08       		.byte	0x8
 1127 011c D7040000 		.4byte	.LASF35
 1128 0120 05       		.uleb128 0x5
 1129 0121 02       		.byte	0x2
 1130 0122 05       		.byte	0x5
 1131 0123 27030000 		.4byte	.LASF36
 1132 0127 07       		.uleb128 0x7
 1133 0128 5A010000 		.4byte	.LASF38
 1134 012c 04       		.byte	0x4
 1135 012d 2B       		.byte	0x2b
 1136 012e 32010000 		.4byte	0x132
 1137 0132 05       		.uleb128 0x5
 1138 0133 02       		.byte	0x2
 1139 0134 07       		.byte	0x7
 1140 0135 53050000 		.4byte	.LASF39
 1141 0139 05       		.uleb128 0x5
 1142 013a 04       		.byte	0x4
 1143 013b 05       		.byte	0x5
 1144 013c 3B030000 		.4byte	.LASF40
 1145 0140 07       		.uleb128 0x7
 1146 0141 E5040000 		.4byte	.LASF41
 1147 0145 04       		.byte	0x4
 1148 0146 41       		.byte	0x41
 1149 0147 4B010000 		.4byte	0x14b
 1150 014b 05       		.uleb128 0x5
 1151 014c 04       		.byte	0x4
 1152 014d 07       		.byte	0x7
 1153 014e 05040000 		.4byte	.LASF42
 1154 0152 05       		.uleb128 0x5
 1155 0153 08       		.byte	0x8
 1156 0154 05       		.byte	0x5
 1157 0155 36020000 		.4byte	.LASF43
 1158 0159 05       		.uleb128 0x5
 1159 015a 08       		.byte	0x8
 1160 015b 07       		.byte	0x7
 1161 015c 2E010000 		.4byte	.LASF44
 1162 0160 08       		.uleb128 0x8
 1163 0161 04       		.byte	0x4
 1164 0162 05       		.byte	0x5
 1165 0163 696E7400 		.ascii	"int\000"
 1166 0167 05       		.uleb128 0x5
 1167 0168 04       		.byte	0x4
 1168 0169 07       		.byte	0x7
 1169 016a 5C000000 		.4byte	.LASF45
 1170 016e 07       		.uleb128 0x7
 1171 016f CA020000 		.4byte	.LASF46
 1172 0173 05       		.byte	0x5
 1173 0174 1A       		.byte	0x1a
 1174 0175 27010000 		.4byte	0x127
 1175 0179 07       		.uleb128 0x7
 1176 017a C8000000 		.4byte	.LASF47
 1177 017e 05       		.byte	0x5
 1178 017f 20       		.byte	0x20
 1179 0180 40010000 		.4byte	0x140
ARM GAS  /tmp/ccC8gCOe.s 			page 42


 1180 0184 09       		.uleb128 0x9
 1181 0185 2003     		.2byte	0x320
 1182 0187 01       		.byte	0x1
 1183 0188 71       		.byte	0x71
 1184 0189 21020000 		.4byte	0x221
 1185 018d 0A       		.uleb128 0xa
 1186 018e EC000000 		.4byte	.LASF48
 1187 0192 01       		.byte	0x1
 1188 0193 73       		.byte	0x73
 1189 0194 38020000 		.4byte	0x238
 1190 0198 02       		.byte	0x2
 1191 0199 23       		.byte	0x23
 1192 019a 00       		.uleb128 0
 1193 019b 0A       		.uleb128 0xa
 1194 019c E1020000 		.4byte	.LASF49
 1195 01a0 01       		.byte	0x1
 1196 01a1 74       		.byte	0x74
 1197 01a2 3D020000 		.4byte	0x23d
 1198 01a6 02       		.byte	0x2
 1199 01a7 23       		.byte	0x23
 1200 01a8 04       		.uleb128 0x4
 1201 01a9 0A       		.uleb128 0xa
 1202 01aa 2C050000 		.4byte	.LASF50
 1203 01ae 01       		.byte	0x1
 1204 01af 75       		.byte	0x75
 1205 01b0 4D020000 		.4byte	0x24d
 1206 01b4 03       		.byte	0x3
 1207 01b5 23       		.byte	0x23
 1208 01b6 8001     		.uleb128 0x80
 1209 01b8 0A       		.uleb128 0xa
 1210 01b9 00010000 		.4byte	.LASF51
 1211 01bd 01       		.byte	0x1
 1212 01be 76       		.byte	0x76
 1213 01bf 3D020000 		.4byte	0x23d
 1214 01c3 03       		.byte	0x3
 1215 01c4 23       		.byte	0x23
 1216 01c5 8401     		.uleb128 0x84
 1217 01c7 0A       		.uleb128 0xa
 1218 01c8 2B060000 		.4byte	.LASF52
 1219 01cc 01       		.byte	0x1
 1220 01cd 77       		.byte	0x77
 1221 01ce 52020000 		.4byte	0x252
 1222 01d2 03       		.byte	0x3
 1223 01d3 23       		.byte	0x23
 1224 01d4 8002     		.uleb128 0x100
 1225 01d6 0A       		.uleb128 0xa
 1226 01d7 F5020000 		.4byte	.LASF53
 1227 01db 01       		.byte	0x1
 1228 01dc 78       		.byte	0x78
 1229 01dd 3D020000 		.4byte	0x23d
 1230 01e1 03       		.byte	0x3
 1231 01e2 23       		.byte	0x23
 1232 01e3 8402     		.uleb128 0x104
 1233 01e5 0A       		.uleb128 0xa
 1234 01e6 8A020000 		.4byte	.LASF54
 1235 01ea 01       		.byte	0x1
 1236 01eb 79       		.byte	0x79
ARM GAS  /tmp/ccC8gCOe.s 			page 43


 1237 01ec 57020000 		.4byte	0x257
 1238 01f0 03       		.byte	0x3
 1239 01f1 23       		.byte	0x23
 1240 01f2 8003     		.uleb128 0x180
 1241 01f4 0A       		.uleb128 0xa
 1242 01f5 FF020000 		.4byte	.LASF55
 1243 01f9 01       		.byte	0x1
 1244 01fa 7A       		.byte	0x7a
 1245 01fb 3D020000 		.4byte	0x23d
 1246 01ff 03       		.byte	0x3
 1247 0200 23       		.byte	0x23
 1248 0201 8403     		.uleb128 0x184
 1249 0203 0A       		.uleb128 0xa
 1250 0204 09030000 		.4byte	.LASF56
 1251 0208 01       		.byte	0x1
 1252 0209 7B       		.byte	0x7b
 1253 020a 5C020000 		.4byte	0x25c
 1254 020e 03       		.byte	0x3
 1255 020f 23       		.byte	0x23
 1256 0210 8004     		.uleb128 0x200
 1257 0212 0B       		.uleb128 0xb
 1258 0213 495000   		.ascii	"IP\000"
 1259 0216 01       		.byte	0x1
 1260 0217 7C       		.byte	0x7c
 1261 0218 7C020000 		.4byte	0x27c
 1262 021c 03       		.byte	0x3
 1263 021d 23       		.byte	0x23
 1264 021e 8006     		.uleb128 0x300
 1265 0220 00       		.byte	0
 1266 0221 0C       		.uleb128 0xc
 1267 0222 79010000 		.4byte	0x179
 1268 0226 31020000 		.4byte	0x231
 1269 022a 0D       		.uleb128 0xd
 1270 022b 31020000 		.4byte	0x231
 1271 022f 00       		.byte	0
 1272 0230 00       		.byte	0
 1273 0231 05       		.uleb128 0x5
 1274 0232 04       		.byte	0x4
 1275 0233 07       		.byte	0x7
 1276 0234 ED030000 		.4byte	.LASF57
 1277 0238 0E       		.uleb128 0xe
 1278 0239 21020000 		.4byte	0x221
 1279 023d 0C       		.uleb128 0xc
 1280 023e 79010000 		.4byte	0x179
 1281 0242 4D020000 		.4byte	0x24d
 1282 0246 0D       		.uleb128 0xd
 1283 0247 31020000 		.4byte	0x231
 1284 024b 1E       		.byte	0x1e
 1285 024c 00       		.byte	0
 1286 024d 0E       		.uleb128 0xe
 1287 024e 21020000 		.4byte	0x221
 1288 0252 0E       		.uleb128 0xe
 1289 0253 21020000 		.4byte	0x221
 1290 0257 0E       		.uleb128 0xe
 1291 0258 21020000 		.4byte	0x221
 1292 025c 0C       		.uleb128 0xc
 1293 025d 79010000 		.4byte	0x179
ARM GAS  /tmp/ccC8gCOe.s 			page 44


 1294 0261 6C020000 		.4byte	0x26c
 1295 0265 0D       		.uleb128 0xd
 1296 0266 31020000 		.4byte	0x231
 1297 026a 3F       		.byte	0x3f
 1298 026b 00       		.byte	0
 1299 026c 0C       		.uleb128 0xc
 1300 026d 79010000 		.4byte	0x179
 1301 0271 7C020000 		.4byte	0x27c
 1302 0275 0D       		.uleb128 0xd
 1303 0276 31020000 		.4byte	0x231
 1304 027a 07       		.byte	0x7
 1305 027b 00       		.byte	0
 1306 027c 0E       		.uleb128 0xe
 1307 027d 6C020000 		.4byte	0x26c
 1308 0281 07       		.uleb128 0x7
 1309 0282 B7030000 		.4byte	.LASF58
 1310 0286 01       		.byte	0x1
 1311 0287 7D       		.byte	0x7d
 1312 0288 84010000 		.4byte	0x184
 1313 028c 0F       		.uleb128 0xf
 1314 028d 34       		.byte	0x34
 1315 028e 01       		.byte	0x1
 1316 028f 86       		.byte	0x86
 1317 0290 2F030000 		.4byte	0x32f
 1318 0294 0A       		.uleb128 0xa
 1319 0295 81010000 		.4byte	.LASF59
 1320 0299 01       		.byte	0x1
 1321 029a 88       		.byte	0x88
 1322 029b 34030000 		.4byte	0x334
 1323 029f 02       		.byte	0x2
 1324 02a0 23       		.byte	0x23
 1325 02a1 00       		.uleb128 0
 1326 02a2 0A       		.uleb128 0xa
 1327 02a3 F6030000 		.4byte	.LASF60
 1328 02a7 01       		.byte	0x1
 1329 02a8 89       		.byte	0x89
 1330 02a9 2F030000 		.4byte	0x32f
 1331 02ad 02       		.byte	0x2
 1332 02ae 23       		.byte	0x23
 1333 02af 04       		.uleb128 0x4
 1334 02b0 0A       		.uleb128 0xa
 1335 02b1 E1020000 		.4byte	.LASF49
 1336 02b5 01       		.byte	0x1
 1337 02b6 8A       		.byte	0x8a
 1338 02b7 79010000 		.4byte	0x179
 1339 02bb 02       		.byte	0x2
 1340 02bc 23       		.byte	0x23
 1341 02bd 08       		.uleb128 0x8
 1342 02be 0A       		.uleb128 0xa
 1343 02bf F0010000 		.4byte	.LASF61
 1344 02c3 01       		.byte	0x1
 1345 02c4 8B       		.byte	0x8b
 1346 02c5 2F030000 		.4byte	0x32f
 1347 02c9 02       		.byte	0x2
 1348 02ca 23       		.byte	0x23
 1349 02cb 0C       		.uleb128 0xc
 1350 02cc 0B       		.uleb128 0xb
ARM GAS  /tmp/ccC8gCOe.s 			page 45


 1351 02cd 53435200 		.ascii	"SCR\000"
 1352 02d1 01       		.byte	0x1
 1353 02d2 8C       		.byte	0x8c
 1354 02d3 2F030000 		.4byte	0x32f
 1355 02d7 02       		.byte	0x2
 1356 02d8 23       		.byte	0x23
 1357 02d9 10       		.uleb128 0x10
 1358 02da 0B       		.uleb128 0xb
 1359 02db 43435200 		.ascii	"CCR\000"
 1360 02df 01       		.byte	0x1
 1361 02e0 8D       		.byte	0x8d
 1362 02e1 2F030000 		.4byte	0x32f
 1363 02e5 02       		.byte	0x2
 1364 02e6 23       		.byte	0x23
 1365 02e7 14       		.uleb128 0x14
 1366 02e8 0A       		.uleb128 0xa
 1367 02e9 EB020000 		.4byte	.LASF62
 1368 02ed 01       		.byte	0x1
 1369 02ee 8E       		.byte	0x8e
 1370 02ef 79010000 		.4byte	0x179
 1371 02f3 02       		.byte	0x2
 1372 02f4 23       		.byte	0x23
 1373 02f5 18       		.uleb128 0x18
 1374 02f6 0B       		.uleb128 0xb
 1375 02f7 53485000 		.ascii	"SHP\000"
 1376 02fb 01       		.byte	0x1
 1377 02fc 8F       		.byte	0x8f
 1378 02fd 49030000 		.4byte	0x349
 1379 0301 02       		.byte	0x2
 1380 0302 23       		.byte	0x23
 1381 0303 1C       		.uleb128 0x1c
 1382 0304 0A       		.uleb128 0xa
 1383 0305 4E020000 		.4byte	.LASF63
 1384 0309 01       		.byte	0x1
 1385 030a 90       		.byte	0x90
 1386 030b 2F030000 		.4byte	0x32f
 1387 030f 02       		.byte	0x2
 1388 0310 23       		.byte	0x23
 1389 0311 24       		.uleb128 0x24
 1390 0312 0A       		.uleb128 0xa
 1391 0313 F5020000 		.4byte	.LASF53
 1392 0317 01       		.byte	0x1
 1393 0318 91       		.byte	0x91
 1394 0319 39030000 		.4byte	0x339
 1395 031d 02       		.byte	0x2
 1396 031e 23       		.byte	0x23
 1397 031f 28       		.uleb128 0x28
 1398 0320 0A       		.uleb128 0xa
 1399 0321 45010000 		.4byte	.LASF64
 1400 0325 01       		.byte	0x1
 1401 0326 92       		.byte	0x92
 1402 0327 2F030000 		.4byte	0x32f
 1403 032b 02       		.byte	0x2
 1404 032c 23       		.byte	0x23
 1405 032d 30       		.uleb128 0x30
 1406 032e 00       		.byte	0
 1407 032f 0E       		.uleb128 0xe
ARM GAS  /tmp/ccC8gCOe.s 			page 46


 1408 0330 79010000 		.4byte	0x179
 1409 0334 10       		.uleb128 0x10
 1410 0335 2F030000 		.4byte	0x32f
 1411 0339 0C       		.uleb128 0xc
 1412 033a 79010000 		.4byte	0x179
 1413 033e 49030000 		.4byte	0x349
 1414 0342 0D       		.uleb128 0xd
 1415 0343 31020000 		.4byte	0x231
 1416 0347 01       		.byte	0x1
 1417 0348 00       		.byte	0
 1418 0349 0E       		.uleb128 0xe
 1419 034a 39030000 		.4byte	0x339
 1420 034e 07       		.uleb128 0x7
 1421 034f C1030000 		.4byte	.LASF65
 1422 0353 01       		.byte	0x1
 1423 0354 93       		.byte	0x93
 1424 0355 8C020000 		.4byte	0x28c
 1425 0359 0E       		.uleb128 0xe
 1426 035a 6E010000 		.4byte	0x16e
 1427 035e 11       		.uleb128 0x11
 1428 035f 2C       		.byte	0x2c
 1429 0360 03       		.byte	0x3
 1430 0361 6902     		.2byte	0x269
 1431 0363 3A040000 		.4byte	0x43a
 1432 0367 12       		.uleb128 0x12
 1433 0368 65010000 		.4byte	.LASF66
 1434 036c 03       		.byte	0x3
 1435 036d 6B02     		.2byte	0x26b
 1436 036f 2F030000 		.4byte	0x32f
 1437 0373 02       		.byte	0x2
 1438 0374 23       		.byte	0x23
 1439 0375 00       		.uleb128 0
 1440 0376 12       		.uleb128 0x12
 1441 0377 7F030000 		.4byte	.LASF67
 1442 037b 03       		.byte	0x3
 1443 037c 6C02     		.2byte	0x26c
 1444 037e 59030000 		.4byte	0x359
 1445 0382 02       		.byte	0x2
 1446 0383 23       		.byte	0x23
 1447 0384 04       		.uleb128 0x4
 1448 0385 12       		.uleb128 0x12
 1449 0386 E1020000 		.4byte	.LASF49
 1450 038a 03       		.byte	0x3
 1451 038b 6D02     		.2byte	0x26d
 1452 038d 6E010000 		.4byte	0x16e
 1453 0391 02       		.byte	0x2
 1454 0392 23       		.byte	0x23
 1455 0393 06       		.uleb128 0x6
 1456 0394 12       		.uleb128 0x12
 1457 0395 B6020000 		.4byte	.LASF68
 1458 0399 03       		.byte	0x3
 1459 039a 6E02     		.2byte	0x26e
 1460 039c 2F030000 		.4byte	0x32f
 1461 03a0 02       		.byte	0x2
 1462 03a1 23       		.byte	0x23
 1463 03a2 08       		.uleb128 0x8
 1464 03a3 12       		.uleb128 0x12
ARM GAS  /tmp/ccC8gCOe.s 			page 47


 1465 03a4 D1010000 		.4byte	.LASF69
 1466 03a8 03       		.byte	0x3
 1467 03a9 6F02     		.2byte	0x26f
 1468 03ab 2F030000 		.4byte	0x32f
 1469 03af 02       		.byte	0x2
 1470 03b0 23       		.byte	0x23
 1471 03b1 0C       		.uleb128 0xc
 1472 03b2 13       		.uleb128 0x13
 1473 03b3 49445200 		.ascii	"IDR\000"
 1474 03b7 03       		.byte	0x3
 1475 03b8 7002     		.2byte	0x270
 1476 03ba 59030000 		.4byte	0x359
 1477 03be 02       		.byte	0x2
 1478 03bf 23       		.byte	0x23
 1479 03c0 10       		.uleb128 0x10
 1480 03c1 12       		.uleb128 0x12
 1481 03c2 EB020000 		.4byte	.LASF62
 1482 03c6 03       		.byte	0x3
 1483 03c7 7102     		.2byte	0x271
 1484 03c9 6E010000 		.4byte	0x16e
 1485 03cd 02       		.byte	0x2
 1486 03ce 23       		.byte	0x23
 1487 03cf 12       		.uleb128 0x12
 1488 03d0 13       		.uleb128 0x13
 1489 03d1 4F445200 		.ascii	"ODR\000"
 1490 03d5 03       		.byte	0x3
 1491 03d6 7202     		.2byte	0x272
 1492 03d8 59030000 		.4byte	0x359
 1493 03dc 02       		.byte	0x2
 1494 03dd 23       		.byte	0x23
 1495 03de 14       		.uleb128 0x14
 1496 03df 12       		.uleb128 0x12
 1497 03e0 F5020000 		.4byte	.LASF53
 1498 03e4 03       		.byte	0x3
 1499 03e5 7302     		.2byte	0x273
 1500 03e7 6E010000 		.4byte	0x16e
 1501 03eb 02       		.byte	0x2
 1502 03ec 23       		.byte	0x23
 1503 03ed 16       		.uleb128 0x16
 1504 03ee 12       		.uleb128 0x12
 1505 03ef 16000000 		.4byte	.LASF70
 1506 03f3 03       		.byte	0x3
 1507 03f4 7402     		.2byte	0x274
 1508 03f6 2F030000 		.4byte	0x32f
 1509 03fa 02       		.byte	0x2
 1510 03fb 23       		.byte	0x23
 1511 03fc 18       		.uleb128 0x18
 1512 03fd 12       		.uleb128 0x12
 1513 03fe 42060000 		.4byte	.LASF71
 1514 0402 03       		.byte	0x3
 1515 0403 7502     		.2byte	0x275
 1516 0405 2F030000 		.4byte	0x32f
 1517 0409 02       		.byte	0x2
 1518 040a 23       		.byte	0x23
 1519 040b 1C       		.uleb128 0x1c
 1520 040c 13       		.uleb128 0x13
 1521 040d 41465200 		.ascii	"AFR\000"
ARM GAS  /tmp/ccC8gCOe.s 			page 48


 1522 0411 03       		.byte	0x3
 1523 0412 7602     		.2byte	0x276
 1524 0414 3A040000 		.4byte	0x43a
 1525 0418 02       		.byte	0x2
 1526 0419 23       		.byte	0x23
 1527 041a 20       		.uleb128 0x20
 1528 041b 13       		.uleb128 0x13
 1529 041c 42525200 		.ascii	"BRR\000"
 1530 0420 03       		.byte	0x3
 1531 0421 7702     		.2byte	0x277
 1532 0423 59030000 		.4byte	0x359
 1533 0427 02       		.byte	0x2
 1534 0428 23       		.byte	0x23
 1535 0429 28       		.uleb128 0x28
 1536 042a 12       		.uleb128 0x12
 1537 042b FF020000 		.4byte	.LASF55
 1538 042f 03       		.byte	0x3
 1539 0430 7802     		.2byte	0x278
 1540 0432 6E010000 		.4byte	0x16e
 1541 0436 02       		.byte	0x2
 1542 0437 23       		.byte	0x23
 1543 0438 2A       		.uleb128 0x2a
 1544 0439 00       		.byte	0
 1545 043a 0E       		.uleb128 0xe
 1546 043b 39030000 		.4byte	0x339
 1547 043f 06       		.uleb128 0x6
 1548 0440 CA030000 		.4byte	.LASF72
 1549 0444 03       		.byte	0x3
 1550 0445 7902     		.2byte	0x279
 1551 0447 5E030000 		.4byte	0x35e
 1552 044b 11       		.uleb128 0x11
 1553 044c 38       		.byte	0x38
 1554 044d 03       		.byte	0x3
 1555 044e B502     		.2byte	0x2b5
 1556 0450 26050000 		.4byte	0x526
 1557 0454 13       		.uleb128 0x13
 1558 0455 435200   		.ascii	"CR\000"
 1559 0458 03       		.byte	0x3
 1560 0459 B702     		.2byte	0x2b7
 1561 045b 2F030000 		.4byte	0x32f
 1562 045f 02       		.byte	0x2
 1563 0460 23       		.byte	0x23
 1564 0461 00       		.uleb128 0
 1565 0462 12       		.uleb128 0x12
 1566 0463 92030000 		.4byte	.LASF73
 1567 0467 03       		.byte	0x3
 1568 0468 B802     		.2byte	0x2b8
 1569 046a 2F030000 		.4byte	0x32f
 1570 046e 02       		.byte	0x2
 1571 046f 23       		.byte	0x23
 1572 0470 04       		.uleb128 0x4
 1573 0471 13       		.uleb128 0x13
 1574 0472 43495200 		.ascii	"CIR\000"
 1575 0476 03       		.byte	0x3
 1576 0477 B902     		.2byte	0x2b9
 1577 0479 2F030000 		.4byte	0x32f
 1578 047d 02       		.byte	0x2
ARM GAS  /tmp/ccC8gCOe.s 			page 49


 1579 047e 23       		.byte	0x23
 1580 047f 08       		.uleb128 0x8
 1581 0480 12       		.uleb128 0x12
 1582 0481 39000000 		.4byte	.LASF74
 1583 0485 03       		.byte	0x3
 1584 0486 BA02     		.2byte	0x2ba
 1585 0488 2F030000 		.4byte	0x32f
 1586 048c 02       		.byte	0x2
 1587 048d 23       		.byte	0x23
 1588 048e 0C       		.uleb128 0xc
 1589 048f 12       		.uleb128 0x12
 1590 0490 D7010000 		.4byte	.LASF75
 1591 0494 03       		.byte	0x3
 1592 0495 BB02     		.2byte	0x2bb
 1593 0497 2F030000 		.4byte	0x32f
 1594 049b 02       		.byte	0x2
 1595 049c 23       		.byte	0x23
 1596 049d 10       		.uleb128 0x10
 1597 049e 12       		.uleb128 0x12
 1598 049f 1F020000 		.4byte	.LASF76
 1599 04a3 03       		.byte	0x3
 1600 04a4 BC02     		.2byte	0x2bc
 1601 04a6 2F030000 		.4byte	0x32f
 1602 04aa 02       		.byte	0x2
 1603 04ab 23       		.byte	0x23
 1604 04ac 14       		.uleb128 0x14
 1605 04ad 12       		.uleb128 0x12
 1606 04ae 9E020000 		.4byte	.LASF77
 1607 04b2 03       		.byte	0x3
 1608 04b3 BD02     		.2byte	0x2bd
 1609 04b5 2F030000 		.4byte	0x32f
 1610 04b9 02       		.byte	0x2
 1611 04ba 23       		.byte	0x23
 1612 04bb 18       		.uleb128 0x18
 1613 04bc 12       		.uleb128 0x12
 1614 04bd 00000000 		.4byte	.LASF78
 1615 04c1 03       		.byte	0x3
 1616 04c2 BE02     		.2byte	0x2be
 1617 04c4 2F030000 		.4byte	0x32f
 1618 04c8 02       		.byte	0x2
 1619 04c9 23       		.byte	0x23
 1620 04ca 1C       		.uleb128 0x1c
 1621 04cb 12       		.uleb128 0x12
 1622 04cc 74000000 		.4byte	.LASF79
 1623 04d0 03       		.byte	0x3
 1624 04d1 BF02     		.2byte	0x2bf
 1625 04d3 2F030000 		.4byte	0x32f
 1626 04d7 02       		.byte	0x2
 1627 04d8 23       		.byte	0x23
 1628 04d9 20       		.uleb128 0x20
 1629 04da 13       		.uleb128 0x13
 1630 04db 43535200 		.ascii	"CSR\000"
 1631 04df 03       		.byte	0x3
 1632 04e0 C002     		.2byte	0x2c0
 1633 04e2 2F030000 		.4byte	0x32f
 1634 04e6 02       		.byte	0x2
 1635 04e7 23       		.byte	0x23
ARM GAS  /tmp/ccC8gCOe.s 			page 50


 1636 04e8 24       		.uleb128 0x24
 1637 04e9 12       		.uleb128 0x12
 1638 04ea DF000000 		.4byte	.LASF80
 1639 04ee 03       		.byte	0x3
 1640 04ef C102     		.2byte	0x2c1
 1641 04f1 2F030000 		.4byte	0x32f
 1642 04f5 02       		.byte	0x2
 1643 04f6 23       		.byte	0x23
 1644 04f7 28       		.uleb128 0x28
 1645 04f8 12       		.uleb128 0x12
 1646 04f9 7E020000 		.4byte	.LASF81
 1647 04fd 03       		.byte	0x3
 1648 04fe C202     		.2byte	0x2c2
 1649 0500 2F030000 		.4byte	0x32f
 1650 0504 02       		.byte	0x2
 1651 0505 23       		.byte	0x23
 1652 0506 2C       		.uleb128 0x2c
 1653 0507 12       		.uleb128 0x12
 1654 0508 84020000 		.4byte	.LASF82
 1655 050c 03       		.byte	0x3
 1656 050d C302     		.2byte	0x2c3
 1657 050f 2F030000 		.4byte	0x32f
 1658 0513 02       		.byte	0x2
 1659 0514 23       		.byte	0x23
 1660 0515 30       		.uleb128 0x30
 1661 0516 13       		.uleb128 0x13
 1662 0517 43523200 		.ascii	"CR2\000"
 1663 051b 03       		.byte	0x3
 1664 051c C402     		.2byte	0x2c4
 1665 051e 2F030000 		.4byte	0x32f
 1666 0522 02       		.byte	0x2
 1667 0523 23       		.byte	0x23
 1668 0524 34       		.uleb128 0x34
 1669 0525 00       		.byte	0
 1670 0526 06       		.uleb128 0x6
 1671 0527 93010000 		.4byte	.LASF83
 1672 052b 03       		.byte	0x3
 1673 052c C502     		.2byte	0x2c5
 1674 052e 4B040000 		.4byte	0x44b
 1675 0532 11       		.uleb128 0x11
 1676 0533 54       		.byte	0x54
 1677 0534 03       		.byte	0x3
 1678 0535 0903     		.2byte	0x309
 1679 0537 56070000 		.4byte	0x756
 1680 053b 13       		.uleb128 0x13
 1681 053c 43523100 		.ascii	"CR1\000"
 1682 0540 03       		.byte	0x3
 1683 0541 0B03     		.2byte	0x30b
 1684 0543 59030000 		.4byte	0x359
 1685 0547 02       		.byte	0x2
 1686 0548 23       		.byte	0x23
 1687 0549 00       		.uleb128 0
 1688 054a 12       		.uleb128 0x12
 1689 054b E1020000 		.4byte	.LASF49
 1690 054f 03       		.byte	0x3
 1691 0550 0C03     		.2byte	0x30c
 1692 0552 6E010000 		.4byte	0x16e
ARM GAS  /tmp/ccC8gCOe.s 			page 51


 1693 0556 02       		.byte	0x2
 1694 0557 23       		.byte	0x23
 1695 0558 02       		.uleb128 0x2
 1696 0559 13       		.uleb128 0x13
 1697 055a 43523200 		.ascii	"CR2\000"
 1698 055e 03       		.byte	0x3
 1699 055f 0D03     		.2byte	0x30d
 1700 0561 59030000 		.4byte	0x359
 1701 0565 02       		.byte	0x2
 1702 0566 23       		.byte	0x23
 1703 0567 04       		.uleb128 0x4
 1704 0568 12       		.uleb128 0x12
 1705 0569 EB020000 		.4byte	.LASF62
 1706 056d 03       		.byte	0x3
 1707 056e 0E03     		.2byte	0x30e
 1708 0570 6E010000 		.4byte	0x16e
 1709 0574 02       		.byte	0x2
 1710 0575 23       		.byte	0x23
 1711 0576 06       		.uleb128 0x6
 1712 0577 12       		.uleb128 0x12
 1713 0578 31020000 		.4byte	.LASF84
 1714 057c 03       		.byte	0x3
 1715 057d 0F03     		.2byte	0x30f
 1716 057f 59030000 		.4byte	0x359
 1717 0583 02       		.byte	0x2
 1718 0584 23       		.byte	0x23
 1719 0585 08       		.uleb128 0x8
 1720 0586 12       		.uleb128 0x12
 1721 0587 F5020000 		.4byte	.LASF53
 1722 058b 03       		.byte	0x3
 1723 058c 1003     		.2byte	0x310
 1724 058e 6E010000 		.4byte	0x16e
 1725 0592 02       		.byte	0x2
 1726 0593 23       		.byte	0x23
 1727 0594 0A       		.uleb128 0xa
 1728 0595 12       		.uleb128 0x12
 1729 0596 9F010000 		.4byte	.LASF85
 1730 059a 03       		.byte	0x3
 1731 059b 1103     		.2byte	0x311
 1732 059d 59030000 		.4byte	0x359
 1733 05a1 02       		.byte	0x2
 1734 05a2 23       		.byte	0x23
 1735 05a3 0C       		.uleb128 0xc
 1736 05a4 12       		.uleb128 0x12
 1737 05a5 FF020000 		.4byte	.LASF55
 1738 05a9 03       		.byte	0x3
 1739 05aa 1203     		.2byte	0x312
 1740 05ac 6E010000 		.4byte	0x16e
 1741 05b0 02       		.byte	0x2
 1742 05b1 23       		.byte	0x23
 1743 05b2 0E       		.uleb128 0xe
 1744 05b3 13       		.uleb128 0x13
 1745 05b4 535200   		.ascii	"SR\000"
 1746 05b7 03       		.byte	0x3
 1747 05b8 1303     		.2byte	0x313
 1748 05ba 59030000 		.4byte	0x359
 1749 05be 02       		.byte	0x2
ARM GAS  /tmp/ccC8gCOe.s 			page 52


 1750 05bf 23       		.byte	0x23
 1751 05c0 10       		.uleb128 0x10
 1752 05c1 12       		.uleb128 0x12
 1753 05c2 09030000 		.4byte	.LASF56
 1754 05c6 03       		.byte	0x3
 1755 05c7 1403     		.2byte	0x314
 1756 05c9 6E010000 		.4byte	0x16e
 1757 05cd 02       		.byte	0x2
 1758 05ce 23       		.byte	0x23
 1759 05cf 12       		.uleb128 0x12
 1760 05d0 13       		.uleb128 0x13
 1761 05d1 45475200 		.ascii	"EGR\000"
 1762 05d5 03       		.byte	0x3
 1763 05d6 1503     		.2byte	0x315
 1764 05d8 59030000 		.4byte	0x359
 1765 05dc 02       		.byte	0x2
 1766 05dd 23       		.byte	0x23
 1767 05de 14       		.uleb128 0x14
 1768 05df 12       		.uleb128 0x12
 1769 05e0 13030000 		.4byte	.LASF86
 1770 05e4 03       		.byte	0x3
 1771 05e5 1603     		.2byte	0x316
 1772 05e7 6E010000 		.4byte	0x16e
 1773 05eb 02       		.byte	0x2
 1774 05ec 23       		.byte	0x23
 1775 05ed 16       		.uleb128 0x16
 1776 05ee 12       		.uleb128 0x12
 1777 05ef 09010000 		.4byte	.LASF87
 1778 05f3 03       		.byte	0x3
 1779 05f4 1703     		.2byte	0x317
 1780 05f6 59030000 		.4byte	0x359
 1781 05fa 02       		.byte	0x2
 1782 05fb 23       		.byte	0x23
 1783 05fc 18       		.uleb128 0x18
 1784 05fd 12       		.uleb128 0x12
 1785 05fe 1D030000 		.4byte	.LASF88
 1786 0602 03       		.byte	0x3
 1787 0603 1803     		.2byte	0x318
 1788 0605 6E010000 		.4byte	0x16e
 1789 0609 02       		.byte	0x2
 1790 060a 23       		.byte	0x23
 1791 060b 1A       		.uleb128 0x1a
 1792 060c 12       		.uleb128 0x12
 1793 060d 0F010000 		.4byte	.LASF89
 1794 0611 03       		.byte	0x3
 1795 0612 1903     		.2byte	0x319
 1796 0614 59030000 		.4byte	0x359
 1797 0618 02       		.byte	0x2
 1798 0619 23       		.byte	0x23
 1799 061a 1C       		.uleb128 0x1c
 1800 061b 12       		.uleb128 0x12
 1801 061c 30060000 		.4byte	.LASF90
 1802 0620 03       		.byte	0x3
 1803 0621 1A03     		.2byte	0x31a
 1804 0623 6E010000 		.4byte	0x16e
 1805 0627 02       		.byte	0x2
 1806 0628 23       		.byte	0x23
ARM GAS  /tmp/ccC8gCOe.s 			page 53


 1807 0629 1E       		.uleb128 0x1e
 1808 062a 12       		.uleb128 0x12
 1809 062b E0010000 		.4byte	.LASF91
 1810 062f 03       		.byte	0x3
 1811 0630 1B03     		.2byte	0x31b
 1812 0632 59030000 		.4byte	0x359
 1813 0636 02       		.byte	0x2
 1814 0637 23       		.byte	0x23
 1815 0638 20       		.uleb128 0x20
 1816 0639 12       		.uleb128 0x12
 1817 063a 31030000 		.4byte	.LASF92
 1818 063e 03       		.byte	0x3
 1819 063f 1C03     		.2byte	0x31c
 1820 0641 6E010000 		.4byte	0x16e
 1821 0645 02       		.byte	0x2
 1822 0646 23       		.byte	0x23
 1823 0647 22       		.uleb128 0x22
 1824 0648 13       		.uleb128 0x13
 1825 0649 434E5400 		.ascii	"CNT\000"
 1826 064d 03       		.byte	0x3
 1827 064e 1D03     		.2byte	0x31d
 1828 0650 2F030000 		.4byte	0x32f
 1829 0654 02       		.byte	0x2
 1830 0655 23       		.byte	0x23
 1831 0656 24       		.uleb128 0x24
 1832 0657 13       		.uleb128 0x13
 1833 0658 50534300 		.ascii	"PSC\000"
 1834 065c 03       		.byte	0x3
 1835 065d 1E03     		.2byte	0x31e
 1836 065f 59030000 		.4byte	0x359
 1837 0663 02       		.byte	0x2
 1838 0664 23       		.byte	0x23
 1839 0665 28       		.uleb128 0x28
 1840 0666 12       		.uleb128 0x12
 1841 0667 F5040000 		.4byte	.LASF93
 1842 066b 03       		.byte	0x3
 1843 066c 1F03     		.2byte	0x31f
 1844 066e 6E010000 		.4byte	0x16e
 1845 0672 02       		.byte	0x2
 1846 0673 23       		.byte	0x23
 1847 0674 2A       		.uleb128 0x2a
 1848 0675 13       		.uleb128 0x13
 1849 0676 41525200 		.ascii	"ARR\000"
 1850 067a 03       		.byte	0x3
 1851 067b 2003     		.2byte	0x320
 1852 067d 2F030000 		.4byte	0x32f
 1853 0681 02       		.byte	0x2
 1854 0682 23       		.byte	0x23
 1855 0683 2C       		.uleb128 0x2c
 1856 0684 13       		.uleb128 0x13
 1857 0685 52435200 		.ascii	"RCR\000"
 1858 0689 03       		.byte	0x3
 1859 068a 2103     		.2byte	0x321
 1860 068c 59030000 		.4byte	0x359
 1861 0690 02       		.byte	0x2
 1862 0691 23       		.byte	0x23
 1863 0692 30       		.uleb128 0x30
ARM GAS  /tmp/ccC8gCOe.s 			page 54


 1864 0693 12       		.uleb128 0x12
 1865 0694 00050000 		.4byte	.LASF94
 1866 0698 03       		.byte	0x3
 1867 0699 2203     		.2byte	0x322
 1868 069b 6E010000 		.4byte	0x16e
 1869 069f 02       		.byte	0x2
 1870 06a0 23       		.byte	0x23
 1871 06a1 32       		.uleb128 0x32
 1872 06a2 12       		.uleb128 0x12
 1873 06a3 F1000000 		.4byte	.LASF95
 1874 06a7 03       		.byte	0x3
 1875 06a8 2303     		.2byte	0x323
 1876 06aa 2F030000 		.4byte	0x32f
 1877 06ae 02       		.byte	0x2
 1878 06af 23       		.byte	0x23
 1879 06b0 34       		.uleb128 0x34
 1880 06b1 12       		.uleb128 0x12
 1881 06b2 F6000000 		.4byte	.LASF96
 1882 06b6 03       		.byte	0x3
 1883 06b7 2403     		.2byte	0x324
 1884 06b9 2F030000 		.4byte	0x32f
 1885 06bd 02       		.byte	0x2
 1886 06be 23       		.byte	0x23
 1887 06bf 38       		.uleb128 0x38
 1888 06c0 12       		.uleb128 0x12
 1889 06c1 FB000000 		.4byte	.LASF97
 1890 06c5 03       		.byte	0x3
 1891 06c6 2503     		.2byte	0x325
 1892 06c8 2F030000 		.4byte	0x32f
 1893 06cc 02       		.byte	0x2
 1894 06cd 23       		.byte	0x23
 1895 06ce 3C       		.uleb128 0x3c
 1896 06cf 12       		.uleb128 0x12
 1897 06d0 F0040000 		.4byte	.LASF98
 1898 06d4 03       		.byte	0x3
 1899 06d5 2603     		.2byte	0x326
 1900 06d7 2F030000 		.4byte	0x32f
 1901 06db 02       		.byte	0x2
 1902 06dc 23       		.byte	0x23
 1903 06dd 40       		.uleb128 0x40
 1904 06de 12       		.uleb128 0x12
 1905 06df E7000000 		.4byte	.LASF99
 1906 06e3 03       		.byte	0x3
 1907 06e4 2703     		.2byte	0x327
 1908 06e6 59030000 		.4byte	0x359
 1909 06ea 02       		.byte	0x2
 1910 06eb 23       		.byte	0x23
 1911 06ec 44       		.uleb128 0x44
 1912 06ed 12       		.uleb128 0x12
 1913 06ee 0B050000 		.4byte	.LASF100
 1914 06f2 03       		.byte	0x3
 1915 06f3 2803     		.2byte	0x328
 1916 06f5 6E010000 		.4byte	0x16e
 1917 06f9 02       		.byte	0x2
 1918 06fa 23       		.byte	0x23
 1919 06fb 46       		.uleb128 0x46
 1920 06fc 13       		.uleb128 0x13
ARM GAS  /tmp/ccC8gCOe.s 			page 55


 1921 06fd 44435200 		.ascii	"DCR\000"
 1922 0701 03       		.byte	0x3
 1923 0702 2903     		.2byte	0x329
 1924 0704 59030000 		.4byte	0x359
 1925 0708 02       		.byte	0x2
 1926 0709 23       		.byte	0x23
 1927 070a 48       		.uleb128 0x48
 1928 070b 12       		.uleb128 0x12
 1929 070c 16050000 		.4byte	.LASF101
 1930 0710 03       		.byte	0x3
 1931 0711 2A03     		.2byte	0x32a
 1932 0713 6E010000 		.4byte	0x16e
 1933 0717 02       		.byte	0x2
 1934 0718 23       		.byte	0x23
 1935 0719 4A       		.uleb128 0x4a
 1936 071a 12       		.uleb128 0x12
 1937 071b 50030000 		.4byte	.LASF102
 1938 071f 03       		.byte	0x3
 1939 0720 2B03     		.2byte	0x32b
 1940 0722 59030000 		.4byte	0x359
 1941 0726 02       		.byte	0x2
 1942 0727 23       		.byte	0x23
 1943 0728 4C       		.uleb128 0x4c
 1944 0729 12       		.uleb128 0x12
 1945 072a 21050000 		.4byte	.LASF103
 1946 072e 03       		.byte	0x3
 1947 072f 2C03     		.2byte	0x32c
 1948 0731 6E010000 		.4byte	0x16e
 1949 0735 02       		.byte	0x2
 1950 0736 23       		.byte	0x23
 1951 0737 4E       		.uleb128 0x4e
 1952 0738 13       		.uleb128 0x13
 1953 0739 4F5200   		.ascii	"OR\000"
 1954 073c 03       		.byte	0x3
 1955 073d 2D03     		.2byte	0x32d
 1956 073f 59030000 		.4byte	0x359
 1957 0743 02       		.byte	0x2
 1958 0744 23       		.byte	0x23
 1959 0745 50       		.uleb128 0x50
 1960 0746 12       		.uleb128 0x12
 1961 0747 66050000 		.4byte	.LASF104
 1962 074b 03       		.byte	0x3
 1963 074c 2E03     		.2byte	0x32e
 1964 074e 6E010000 		.4byte	0x16e
 1965 0752 02       		.byte	0x2
 1966 0753 23       		.byte	0x23
 1967 0754 52       		.uleb128 0x52
 1968 0755 00       		.byte	0
 1969 0756 06       		.uleb128 0x6
 1970 0757 BC000000 		.4byte	.LASF105
 1971 075b 03       		.byte	0x3
 1972 075c 2F03     		.2byte	0x32f
 1973 075e 32050000 		.4byte	0x532
 1974 0762 14       		.uleb128 0x14
 1975 0763 1F010000 		.4byte	.LASF106
 1976 0767 01       		.byte	0x1
 1977 0768 2B03     		.2byte	0x32b
ARM GAS  /tmp/ccC8gCOe.s 			page 56


 1978 076a 01       		.byte	0x1
 1979 076b 00000000 		.4byte	.LFB11
 1980 076f 2C000000 		.4byte	.LFE11
 1981 0773 00000000 		.4byte	.LLST0
 1982 0777 01       		.byte	0x1
 1983 0778 8C070000 		.4byte	0x78c
 1984 077c 15       		.uleb128 0x15
 1985 077d D3020000 		.4byte	.LASF108
 1986 0781 01       		.byte	0x1
 1987 0782 2B03     		.2byte	0x32b
 1988 0784 0D010000 		.4byte	0x10d
 1989 0788 02       		.byte	0x2
 1990 0789 91       		.byte	0x91
 1991 078a 7F       		.sleb128 -1
 1992 078b 00       		.byte	0
 1993 078c 14       		.uleb128 0x14
 1994 078d 4B000000 		.4byte	.LASF107
 1995 0791 01       		.byte	0x1
 1996 0792 7C03     		.2byte	0x37c
 1997 0794 01       		.byte	0x1
 1998 0795 00000000 		.4byte	.LFB16
 1999 0799 EC000000 		.4byte	.LFE16
 2000 079d 20000000 		.4byte	.LLST1
 2001 07a1 01       		.byte	0x1
 2002 07a2 C5070000 		.4byte	0x7c5
 2003 07a6 15       		.uleb128 0x15
 2004 07a7 D3020000 		.4byte	.LASF108
 2005 07ab 01       		.byte	0x1
 2006 07ac 7C03     		.2byte	0x37c
 2007 07ae 0D010000 		.4byte	0x10d
 2008 07b2 02       		.byte	0x2
 2009 07b3 91       		.byte	0x91
 2010 07b4 6F       		.sleb128 -17
 2011 07b5 15       		.uleb128 0x15
 2012 07b6 69030000 		.4byte	.LASF109
 2013 07ba 01       		.byte	0x1
 2014 07bb 7C03     		.2byte	0x37c
 2015 07bd 79010000 		.4byte	0x179
 2016 07c1 02       		.byte	0x2
 2017 07c2 91       		.byte	0x91
 2018 07c3 68       		.sleb128 -24
 2019 07c4 00       		.byte	0
 2020 07c5 16       		.uleb128 0x16
 2021 07c6 01       		.byte	0x1
 2022 07c7 21040000 		.4byte	.LASF110
 2023 07cb 02       		.byte	0x2
 2024 07cc 28       		.byte	0x28
 2025 07cd 01       		.byte	0x1
 2026 07ce 00000000 		.4byte	.LFB20
 2027 07d2 20000000 		.4byte	.LFE20
 2028 07d6 4C000000 		.4byte	.LLST2
 2029 07da 01       		.byte	0x1
 2030 07db EC070000 		.4byte	0x7ec
 2031 07df 17       		.uleb128 0x17
 2032 07e0 6100     		.ascii	"a\000"
 2033 07e2 02       		.byte	0x2
 2034 07e3 28       		.byte	0x28
ARM GAS  /tmp/ccC8gCOe.s 			page 57


 2035 07e4 32010000 		.4byte	0x132
 2036 07e8 02       		.byte	0x2
 2037 07e9 91       		.byte	0x91
 2038 07ea 7E       		.sleb128 -2
 2039 07eb 00       		.byte	0
 2040 07ec 16       		.uleb128 0x16
 2041 07ed 01       		.byte	0x1
 2042 07ee 31040000 		.4byte	.LASF111
 2043 07f2 02       		.byte	0x2
 2044 07f3 2D       		.byte	0x2d
 2045 07f4 01       		.byte	0x1
 2046 07f5 00000000 		.4byte	.LFB21
 2047 07f9 20000000 		.4byte	.LFE21
 2048 07fd 6C000000 		.4byte	.LLST3
 2049 0801 01       		.byte	0x1
 2050 0802 13080000 		.4byte	0x813
 2051 0806 17       		.uleb128 0x17
 2052 0807 6100     		.ascii	"a\000"
 2053 0809 02       		.byte	0x2
 2054 080a 2D       		.byte	0x2d
 2055 080b 32010000 		.4byte	0x132
 2056 080f 02       		.byte	0x2
 2057 0810 91       		.byte	0x91
 2058 0811 7E       		.sleb128 -2
 2059 0812 00       		.byte	0
 2060 0813 16       		.uleb128 0x16
 2061 0814 01       		.byte	0x1
 2062 0815 41040000 		.4byte	.LASF112
 2063 0819 02       		.byte	0x2
 2064 081a 32       		.byte	0x32
 2065 081b 01       		.byte	0x1
 2066 081c 00000000 		.4byte	.LFB22
 2067 0820 20000000 		.4byte	.LFE22
 2068 0824 8C000000 		.4byte	.LLST4
 2069 0828 01       		.byte	0x1
 2070 0829 3A080000 		.4byte	0x83a
 2071 082d 17       		.uleb128 0x17
 2072 082e 6100     		.ascii	"a\000"
 2073 0830 02       		.byte	0x2
 2074 0831 32       		.byte	0x32
 2075 0832 32010000 		.4byte	0x132
 2076 0836 02       		.byte	0x2
 2077 0837 91       		.byte	0x91
 2078 0838 7E       		.sleb128 -2
 2079 0839 00       		.byte	0
 2080 083a 16       		.uleb128 0x16
 2081 083b 01       		.byte	0x1
 2082 083c 51040000 		.4byte	.LASF113
 2083 0840 02       		.byte	0x2
 2084 0841 37       		.byte	0x37
 2085 0842 01       		.byte	0x1
 2086 0843 00000000 		.4byte	.LFB23
 2087 0847 20000000 		.4byte	.LFE23
 2088 084b AC000000 		.4byte	.LLST5
 2089 084f 01       		.byte	0x1
 2090 0850 61080000 		.4byte	0x861
 2091 0854 17       		.uleb128 0x17
ARM GAS  /tmp/ccC8gCOe.s 			page 58


 2092 0855 6100     		.ascii	"a\000"
 2093 0857 02       		.byte	0x2
 2094 0858 37       		.byte	0x37
 2095 0859 32010000 		.4byte	0x132
 2096 085d 02       		.byte	0x2
 2097 085e 91       		.byte	0x91
 2098 085f 7E       		.sleb128 -2
 2099 0860 00       		.byte	0
 2100 0861 16       		.uleb128 0x16
 2101 0862 01       		.byte	0x1
 2102 0863 3A060000 		.4byte	.LASF114
 2103 0867 02       		.byte	0x2
 2104 0868 3C       		.byte	0x3c
 2105 0869 01       		.byte	0x1
 2106 086a 00000000 		.4byte	.LFB24
 2107 086e 2C000000 		.4byte	.LFE24
 2108 0872 CC000000 		.4byte	.LLST6
 2109 0876 01       		.byte	0x1
 2110 0877 8A080000 		.4byte	0x88a
 2111 087b 18       		.uleb128 0x18
 2112 087c A6020000 		.4byte	.LASF115
 2113 0880 02       		.byte	0x2
 2114 0881 3C       		.byte	0x3c
 2115 0882 32010000 		.4byte	0x132
 2116 0886 02       		.byte	0x2
 2117 0887 91       		.byte	0x91
 2118 0888 7E       		.sleb128 -2
 2119 0889 00       		.byte	0
 2120 088a 19       		.uleb128 0x19
 2121 088b 01       		.byte	0x1
 2122 088c 4A010000 		.4byte	.LASF116
 2123 0890 02       		.byte	0x2
 2124 0891 48       		.byte	0x48
 2125 0892 01       		.byte	0x1
 2126 0893 00000000 		.4byte	.LFB25
 2127 0897 1C000000 		.4byte	.LFE25
 2128 089b 02       		.byte	0x2
 2129 089c 7D       		.byte	0x7d
 2130 089d 00       		.sleb128 0
 2131 089e 01       		.byte	0x1
 2132 089f 19       		.uleb128 0x19
 2133 08a0 01       		.byte	0x1
 2134 08a1 AB020000 		.4byte	.LASF117
 2135 08a5 02       		.byte	0x2
 2136 08a6 64       		.byte	0x64
 2137 08a7 01       		.byte	0x1
 2138 08a8 00000000 		.4byte	.LFB26
 2139 08ac 78000000 		.4byte	.LFE26
 2140 08b0 02       		.byte	0x2
 2141 08b1 7D       		.byte	0x7d
 2142 08b2 00       		.sleb128 0
 2143 08b3 01       		.byte	0x1
 2144 08b4 19       		.uleb128 0x19
 2145 08b5 01       		.byte	0x1
 2146 08b6 E5010000 		.4byte	.LASF118
 2147 08ba 02       		.byte	0x2
 2148 08bb 8D       		.byte	0x8d
ARM GAS  /tmp/ccC8gCOe.s 			page 59


 2149 08bc 01       		.byte	0x1
 2150 08bd 00000000 		.4byte	.LFB27
 2151 08c1 38000000 		.4byte	.LFE27
 2152 08c5 02       		.byte	0x2
 2153 08c6 7D       		.byte	0x7d
 2154 08c7 00       		.sleb128 0
 2155 08c8 01       		.byte	0x1
 2156 08c9 19       		.uleb128 0x19
 2157 08ca 01       		.byte	0x1
 2158 08cb C0010000 		.4byte	.LASF119
 2159 08cf 02       		.byte	0x2
 2160 08d0 99       		.byte	0x99
 2161 08d1 01       		.byte	0x1
 2162 08d2 00000000 		.4byte	.LFB28
 2163 08d6 1C000000 		.4byte	.LFE28
 2164 08da 02       		.byte	0x2
 2165 08db 7D       		.byte	0x7d
 2166 08dc 00       		.sleb128 0
 2167 08dd 01       		.byte	0x1
 2168 08de 19       		.uleb128 0x19
 2169 08df 01       		.byte	0x1
 2170 08e0 BE020000 		.4byte	.LASF120
 2171 08e4 02       		.byte	0x2
 2172 08e5 A2       		.byte	0xa2
 2173 08e6 01       		.byte	0x1
 2174 08e7 00000000 		.4byte	.LFB29
 2175 08eb 4C000000 		.4byte	.LFE29
 2176 08ef 02       		.byte	0x2
 2177 08f0 7D       		.byte	0x7d
 2178 08f1 00       		.sleb128 0
 2179 08f2 01       		.byte	0x1
 2180 08f3 19       		.uleb128 0x19
 2181 08f4 01       		.byte	0x1
 2182 08f5 1B000000 		.4byte	.LASF121
 2183 08f9 02       		.byte	0x2
 2184 08fa C2       		.byte	0xc2
 2185 08fb 01       		.byte	0x1
 2186 08fc 00000000 		.4byte	.LFB30
 2187 0900 1C000000 		.4byte	.LFE30
 2188 0904 02       		.byte	0x2
 2189 0905 7D       		.byte	0x7d
 2190 0906 00       		.sleb128 0
 2191 0907 01       		.byte	0x1
 2192 0908 1A       		.uleb128 0x1a
 2193 0909 01       		.byte	0x1
 2194 090a 3B050000 		.4byte	.LASF122
 2195 090e 02       		.byte	0x2
 2196 090f CC       		.byte	0xcc
 2197 0910 01       		.byte	0x1
 2198 0911 00000000 		.4byte	.LFB31
 2199 0915 68000000 		.4byte	.LFE31
 2200 0919 EC000000 		.4byte	.LLST7
 2201 091d 01       		.byte	0x1
 2202 091e 16       		.uleb128 0x16
 2203 091f 01       		.byte	0x1
 2204 0920 D1000000 		.4byte	.LASF123
 2205 0924 02       		.byte	0x2
ARM GAS  /tmp/ccC8gCOe.s 			page 60


 2206 0925 DE       		.byte	0xde
 2207 0926 01       		.byte	0x1
 2208 0927 00000000 		.4byte	.LFB32
 2209 092b 30000000 		.4byte	.LFE32
 2210 092f 0C010000 		.4byte	.LLST8
 2211 0933 01       		.byte	0x1
 2212 0934 45090000 		.4byte	0x945
 2213 0938 17       		.uleb128 0x17
 2214 0939 6100     		.ascii	"a\000"
 2215 093b 02       		.byte	0x2
 2216 093c DE       		.byte	0xde
 2217 093d 32010000 		.4byte	0x132
 2218 0941 02       		.byte	0x2
 2219 0942 91       		.byte	0x91
 2220 0943 7E       		.sleb128 -2
 2221 0944 00       		.byte	0
 2222 0945 19       		.uleb128 0x19
 2223 0946 01       		.byte	0x1
 2224 0947 A4010000 		.4byte	.LASF124
 2225 094b 02       		.byte	0x2
 2226 094c E4       		.byte	0xe4
 2227 094d 01       		.byte	0x1
 2228 094e 00000000 		.4byte	.LFB33
 2229 0952 30000000 		.4byte	.LFE33
 2230 0956 02       		.byte	0x2
 2231 0957 7D       		.byte	0x7d
 2232 0958 00       		.sleb128 0
 2233 0959 01       		.byte	0x1
 2234 095a 1A       		.uleb128 0x1a
 2235 095b 01       		.byte	0x1
 2236 095c 13020000 		.4byte	.LASF125
 2237 0960 02       		.byte	0x2
 2238 0961 EE       		.byte	0xee
 2239 0962 01       		.byte	0x1
 2240 0963 00000000 		.4byte	.LFB34
 2241 0967 6C000000 		.4byte	.LFE34
 2242 096b 2C010000 		.4byte	.LLST9
 2243 096f 01       		.byte	0x1
 2244 0970 1B       		.uleb128 0x1b
 2245 0971 86030000 		.4byte	.LASF126
 2246 0975 02       		.byte	0x2
 2247 0976 1B       		.byte	0x1b
 2248 0977 7D090000 		.4byte	0x97d
 2249 097b 01       		.byte	0x1
 2250 097c 01       		.byte	0x1
 2251 097d 0E       		.uleb128 0xe
 2252 097e 32010000 		.4byte	0x132
 2253 0982 1B       		.uleb128 0x1b
 2254 0983 87010000 		.4byte	.LASF127
 2255 0987 02       		.byte	0x2
 2256 0988 1E       		.byte	0x1e
 2257 0989 8F090000 		.4byte	0x98f
 2258 098d 01       		.byte	0x1
 2259 098e 01       		.byte	0x1
 2260 098f 0E       		.uleb128 0xe
 2261 0990 19010000 		.4byte	0x119
 2262 0994 1B       		.uleb128 0x1b
ARM GAS  /tmp/ccC8gCOe.s 			page 61


 2263 0995 91000000 		.4byte	.LASF128
 2264 0999 02       		.byte	0x2
 2265 099a 1F       		.byte	0x1f
 2266 099b 8F090000 		.4byte	0x98f
 2267 099f 01       		.byte	0x1
 2268 09a0 01       		.byte	0x1
 2269 09a1 1C       		.uleb128 0x1c
 2270 09a2 B5010000 		.4byte	.LASF129
 2271 09a6 02       		.byte	0x2
 2272 09a7 23       		.byte	0x23
 2273 09a8 7D090000 		.4byte	0x97d
 2274 09ac 01       		.byte	0x1
 2275 09ad 05       		.byte	0x5
 2276 09ae 03       		.byte	0x3
 2277 09af 00000000 		.4byte	timer_1000
 2278 09b3 00       		.byte	0
 2279              		.section	.debug_abbrev,"",%progbits
 2280              	.Ldebug_abbrev0:
 2281 0000 01       		.uleb128 0x1
 2282 0001 11       		.uleb128 0x11
 2283 0002 01       		.byte	0x1
 2284 0003 25       		.uleb128 0x25
 2285 0004 0E       		.uleb128 0xe
 2286 0005 13       		.uleb128 0x13
 2287 0006 0B       		.uleb128 0xb
 2288 0007 03       		.uleb128 0x3
 2289 0008 0E       		.uleb128 0xe
 2290 0009 1B       		.uleb128 0x1b
 2291 000a 0E       		.uleb128 0xe
 2292 000b 55       		.uleb128 0x55
 2293 000c 06       		.uleb128 0x6
 2294 000d 11       		.uleb128 0x11
 2295 000e 01       		.uleb128 0x1
 2296 000f 52       		.uleb128 0x52
 2297 0010 01       		.uleb128 0x1
 2298 0011 10       		.uleb128 0x10
 2299 0012 06       		.uleb128 0x6
 2300 0013 00       		.byte	0
 2301 0014 00       		.byte	0
 2302 0015 02       		.uleb128 0x2
 2303 0016 04       		.uleb128 0x4
 2304 0017 01       		.byte	0x1
 2305 0018 03       		.uleb128 0x3
 2306 0019 0E       		.uleb128 0xe
 2307 001a 0B       		.uleb128 0xb
 2308 001b 0B       		.uleb128 0xb
 2309 001c 49       		.uleb128 0x49
 2310 001d 13       		.uleb128 0x13
 2311 001e 3A       		.uleb128 0x3a
 2312 001f 0B       		.uleb128 0xb
 2313 0020 3B       		.uleb128 0x3b
 2314 0021 0B       		.uleb128 0xb
 2315 0022 01       		.uleb128 0x1
 2316 0023 13       		.uleb128 0x13
 2317 0024 00       		.byte	0
 2318 0025 00       		.byte	0
 2319 0026 03       		.uleb128 0x3
ARM GAS  /tmp/ccC8gCOe.s 			page 62


 2320 0027 28       		.uleb128 0x28
 2321 0028 00       		.byte	0
 2322 0029 03       		.uleb128 0x3
 2323 002a 0E       		.uleb128 0xe
 2324 002b 1C       		.uleb128 0x1c
 2325 002c 0D       		.uleb128 0xd
 2326 002d 00       		.byte	0
 2327 002e 00       		.byte	0
 2328 002f 04       		.uleb128 0x4
 2329 0030 28       		.uleb128 0x28
 2330 0031 00       		.byte	0
 2331 0032 03       		.uleb128 0x3
 2332 0033 0E       		.uleb128 0xe
 2333 0034 1C       		.uleb128 0x1c
 2334 0035 0B       		.uleb128 0xb
 2335 0036 00       		.byte	0
 2336 0037 00       		.byte	0
 2337 0038 05       		.uleb128 0x5
 2338 0039 24       		.uleb128 0x24
 2339 003a 00       		.byte	0
 2340 003b 0B       		.uleb128 0xb
 2341 003c 0B       		.uleb128 0xb
 2342 003d 3E       		.uleb128 0x3e
 2343 003e 0B       		.uleb128 0xb
 2344 003f 03       		.uleb128 0x3
 2345 0040 0E       		.uleb128 0xe
 2346 0041 00       		.byte	0
 2347 0042 00       		.byte	0
 2348 0043 06       		.uleb128 0x6
 2349 0044 16       		.uleb128 0x16
 2350 0045 00       		.byte	0
 2351 0046 03       		.uleb128 0x3
 2352 0047 0E       		.uleb128 0xe
 2353 0048 3A       		.uleb128 0x3a
 2354 0049 0B       		.uleb128 0xb
 2355 004a 3B       		.uleb128 0x3b
 2356 004b 05       		.uleb128 0x5
 2357 004c 49       		.uleb128 0x49
 2358 004d 13       		.uleb128 0x13
 2359 004e 00       		.byte	0
 2360 004f 00       		.byte	0
 2361 0050 07       		.uleb128 0x7
 2362 0051 16       		.uleb128 0x16
 2363 0052 00       		.byte	0
 2364 0053 03       		.uleb128 0x3
 2365 0054 0E       		.uleb128 0xe
 2366 0055 3A       		.uleb128 0x3a
 2367 0056 0B       		.uleb128 0xb
 2368 0057 3B       		.uleb128 0x3b
 2369 0058 0B       		.uleb128 0xb
 2370 0059 49       		.uleb128 0x49
 2371 005a 13       		.uleb128 0x13
 2372 005b 00       		.byte	0
 2373 005c 00       		.byte	0
 2374 005d 08       		.uleb128 0x8
 2375 005e 24       		.uleb128 0x24
 2376 005f 00       		.byte	0
ARM GAS  /tmp/ccC8gCOe.s 			page 63


 2377 0060 0B       		.uleb128 0xb
 2378 0061 0B       		.uleb128 0xb
 2379 0062 3E       		.uleb128 0x3e
 2380 0063 0B       		.uleb128 0xb
 2381 0064 03       		.uleb128 0x3
 2382 0065 08       		.uleb128 0x8
 2383 0066 00       		.byte	0
 2384 0067 00       		.byte	0
 2385 0068 09       		.uleb128 0x9
 2386 0069 13       		.uleb128 0x13
 2387 006a 01       		.byte	0x1
 2388 006b 0B       		.uleb128 0xb
 2389 006c 05       		.uleb128 0x5
 2390 006d 3A       		.uleb128 0x3a
 2391 006e 0B       		.uleb128 0xb
 2392 006f 3B       		.uleb128 0x3b
 2393 0070 0B       		.uleb128 0xb
 2394 0071 01       		.uleb128 0x1
 2395 0072 13       		.uleb128 0x13
 2396 0073 00       		.byte	0
 2397 0074 00       		.byte	0
 2398 0075 0A       		.uleb128 0xa
 2399 0076 0D       		.uleb128 0xd
 2400 0077 00       		.byte	0
 2401 0078 03       		.uleb128 0x3
 2402 0079 0E       		.uleb128 0xe
 2403 007a 3A       		.uleb128 0x3a
 2404 007b 0B       		.uleb128 0xb
 2405 007c 3B       		.uleb128 0x3b
 2406 007d 0B       		.uleb128 0xb
 2407 007e 49       		.uleb128 0x49
 2408 007f 13       		.uleb128 0x13
 2409 0080 38       		.uleb128 0x38
 2410 0081 0A       		.uleb128 0xa
 2411 0082 00       		.byte	0
 2412 0083 00       		.byte	0
 2413 0084 0B       		.uleb128 0xb
 2414 0085 0D       		.uleb128 0xd
 2415 0086 00       		.byte	0
 2416 0087 03       		.uleb128 0x3
 2417 0088 08       		.uleb128 0x8
 2418 0089 3A       		.uleb128 0x3a
 2419 008a 0B       		.uleb128 0xb
 2420 008b 3B       		.uleb128 0x3b
 2421 008c 0B       		.uleb128 0xb
 2422 008d 49       		.uleb128 0x49
 2423 008e 13       		.uleb128 0x13
 2424 008f 38       		.uleb128 0x38
 2425 0090 0A       		.uleb128 0xa
 2426 0091 00       		.byte	0
 2427 0092 00       		.byte	0
 2428 0093 0C       		.uleb128 0xc
 2429 0094 01       		.uleb128 0x1
 2430 0095 01       		.byte	0x1
 2431 0096 49       		.uleb128 0x49
 2432 0097 13       		.uleb128 0x13
 2433 0098 01       		.uleb128 0x1
ARM GAS  /tmp/ccC8gCOe.s 			page 64


 2434 0099 13       		.uleb128 0x13
 2435 009a 00       		.byte	0
 2436 009b 00       		.byte	0
 2437 009c 0D       		.uleb128 0xd
 2438 009d 21       		.uleb128 0x21
 2439 009e 00       		.byte	0
 2440 009f 49       		.uleb128 0x49
 2441 00a0 13       		.uleb128 0x13
 2442 00a1 2F       		.uleb128 0x2f
 2443 00a2 0B       		.uleb128 0xb
 2444 00a3 00       		.byte	0
 2445 00a4 00       		.byte	0
 2446 00a5 0E       		.uleb128 0xe
 2447 00a6 35       		.uleb128 0x35
 2448 00a7 00       		.byte	0
 2449 00a8 49       		.uleb128 0x49
 2450 00a9 13       		.uleb128 0x13
 2451 00aa 00       		.byte	0
 2452 00ab 00       		.byte	0
 2453 00ac 0F       		.uleb128 0xf
 2454 00ad 13       		.uleb128 0x13
 2455 00ae 01       		.byte	0x1
 2456 00af 0B       		.uleb128 0xb
 2457 00b0 0B       		.uleb128 0xb
 2458 00b1 3A       		.uleb128 0x3a
 2459 00b2 0B       		.uleb128 0xb
 2460 00b3 3B       		.uleb128 0x3b
 2461 00b4 0B       		.uleb128 0xb
 2462 00b5 01       		.uleb128 0x1
 2463 00b6 13       		.uleb128 0x13
 2464 00b7 00       		.byte	0
 2465 00b8 00       		.byte	0
 2466 00b9 10       		.uleb128 0x10
 2467 00ba 26       		.uleb128 0x26
 2468 00bb 00       		.byte	0
 2469 00bc 49       		.uleb128 0x49
 2470 00bd 13       		.uleb128 0x13
 2471 00be 00       		.byte	0
 2472 00bf 00       		.byte	0
 2473 00c0 11       		.uleb128 0x11
 2474 00c1 13       		.uleb128 0x13
 2475 00c2 01       		.byte	0x1
 2476 00c3 0B       		.uleb128 0xb
 2477 00c4 0B       		.uleb128 0xb
 2478 00c5 3A       		.uleb128 0x3a
 2479 00c6 0B       		.uleb128 0xb
 2480 00c7 3B       		.uleb128 0x3b
 2481 00c8 05       		.uleb128 0x5
 2482 00c9 01       		.uleb128 0x1
 2483 00ca 13       		.uleb128 0x13
 2484 00cb 00       		.byte	0
 2485 00cc 00       		.byte	0
 2486 00cd 12       		.uleb128 0x12
 2487 00ce 0D       		.uleb128 0xd
 2488 00cf 00       		.byte	0
 2489 00d0 03       		.uleb128 0x3
 2490 00d1 0E       		.uleb128 0xe
ARM GAS  /tmp/ccC8gCOe.s 			page 65


 2491 00d2 3A       		.uleb128 0x3a
 2492 00d3 0B       		.uleb128 0xb
 2493 00d4 3B       		.uleb128 0x3b
 2494 00d5 05       		.uleb128 0x5
 2495 00d6 49       		.uleb128 0x49
 2496 00d7 13       		.uleb128 0x13
 2497 00d8 38       		.uleb128 0x38
 2498 00d9 0A       		.uleb128 0xa
 2499 00da 00       		.byte	0
 2500 00db 00       		.byte	0
 2501 00dc 13       		.uleb128 0x13
 2502 00dd 0D       		.uleb128 0xd
 2503 00de 00       		.byte	0
 2504 00df 03       		.uleb128 0x3
 2505 00e0 08       		.uleb128 0x8
 2506 00e1 3A       		.uleb128 0x3a
 2507 00e2 0B       		.uleb128 0xb
 2508 00e3 3B       		.uleb128 0x3b
 2509 00e4 05       		.uleb128 0x5
 2510 00e5 49       		.uleb128 0x49
 2511 00e6 13       		.uleb128 0x13
 2512 00e7 38       		.uleb128 0x38
 2513 00e8 0A       		.uleb128 0xa
 2514 00e9 00       		.byte	0
 2515 00ea 00       		.byte	0
 2516 00eb 14       		.uleb128 0x14
 2517 00ec 2E       		.uleb128 0x2e
 2518 00ed 01       		.byte	0x1
 2519 00ee 03       		.uleb128 0x3
 2520 00ef 0E       		.uleb128 0xe
 2521 00f0 3A       		.uleb128 0x3a
 2522 00f1 0B       		.uleb128 0xb
 2523 00f2 3B       		.uleb128 0x3b
 2524 00f3 05       		.uleb128 0x5
 2525 00f4 27       		.uleb128 0x27
 2526 00f5 0C       		.uleb128 0xc
 2527 00f6 11       		.uleb128 0x11
 2528 00f7 01       		.uleb128 0x1
 2529 00f8 12       		.uleb128 0x12
 2530 00f9 01       		.uleb128 0x1
 2531 00fa 40       		.uleb128 0x40
 2532 00fb 06       		.uleb128 0x6
 2533 00fc 9742     		.uleb128 0x2117
 2534 00fe 0C       		.uleb128 0xc
 2535 00ff 01       		.uleb128 0x1
 2536 0100 13       		.uleb128 0x13
 2537 0101 00       		.byte	0
 2538 0102 00       		.byte	0
 2539 0103 15       		.uleb128 0x15
 2540 0104 05       		.uleb128 0x5
 2541 0105 00       		.byte	0
 2542 0106 03       		.uleb128 0x3
 2543 0107 0E       		.uleb128 0xe
 2544 0108 3A       		.uleb128 0x3a
 2545 0109 0B       		.uleb128 0xb
 2546 010a 3B       		.uleb128 0x3b
 2547 010b 05       		.uleb128 0x5
ARM GAS  /tmp/ccC8gCOe.s 			page 66


 2548 010c 49       		.uleb128 0x49
 2549 010d 13       		.uleb128 0x13
 2550 010e 02       		.uleb128 0x2
 2551 010f 0A       		.uleb128 0xa
 2552 0110 00       		.byte	0
 2553 0111 00       		.byte	0
 2554 0112 16       		.uleb128 0x16
 2555 0113 2E       		.uleb128 0x2e
 2556 0114 01       		.byte	0x1
 2557 0115 3F       		.uleb128 0x3f
 2558 0116 0C       		.uleb128 0xc
 2559 0117 03       		.uleb128 0x3
 2560 0118 0E       		.uleb128 0xe
 2561 0119 3A       		.uleb128 0x3a
 2562 011a 0B       		.uleb128 0xb
 2563 011b 3B       		.uleb128 0x3b
 2564 011c 0B       		.uleb128 0xb
 2565 011d 27       		.uleb128 0x27
 2566 011e 0C       		.uleb128 0xc
 2567 011f 11       		.uleb128 0x11
 2568 0120 01       		.uleb128 0x1
 2569 0121 12       		.uleb128 0x12
 2570 0122 01       		.uleb128 0x1
 2571 0123 40       		.uleb128 0x40
 2572 0124 06       		.uleb128 0x6
 2573 0125 9742     		.uleb128 0x2117
 2574 0127 0C       		.uleb128 0xc
 2575 0128 01       		.uleb128 0x1
 2576 0129 13       		.uleb128 0x13
 2577 012a 00       		.byte	0
 2578 012b 00       		.byte	0
 2579 012c 17       		.uleb128 0x17
 2580 012d 05       		.uleb128 0x5
 2581 012e 00       		.byte	0
 2582 012f 03       		.uleb128 0x3
 2583 0130 08       		.uleb128 0x8
 2584 0131 3A       		.uleb128 0x3a
 2585 0132 0B       		.uleb128 0xb
 2586 0133 3B       		.uleb128 0x3b
 2587 0134 0B       		.uleb128 0xb
 2588 0135 49       		.uleb128 0x49
 2589 0136 13       		.uleb128 0x13
 2590 0137 02       		.uleb128 0x2
 2591 0138 0A       		.uleb128 0xa
 2592 0139 00       		.byte	0
 2593 013a 00       		.byte	0
 2594 013b 18       		.uleb128 0x18
 2595 013c 05       		.uleb128 0x5
 2596 013d 00       		.byte	0
 2597 013e 03       		.uleb128 0x3
 2598 013f 0E       		.uleb128 0xe
 2599 0140 3A       		.uleb128 0x3a
 2600 0141 0B       		.uleb128 0xb
 2601 0142 3B       		.uleb128 0x3b
 2602 0143 0B       		.uleb128 0xb
 2603 0144 49       		.uleb128 0x49
 2604 0145 13       		.uleb128 0x13
ARM GAS  /tmp/ccC8gCOe.s 			page 67


 2605 0146 02       		.uleb128 0x2
 2606 0147 0A       		.uleb128 0xa
 2607 0148 00       		.byte	0
 2608 0149 00       		.byte	0
 2609 014a 19       		.uleb128 0x19
 2610 014b 2E       		.uleb128 0x2e
 2611 014c 00       		.byte	0
 2612 014d 3F       		.uleb128 0x3f
 2613 014e 0C       		.uleb128 0xc
 2614 014f 03       		.uleb128 0x3
 2615 0150 0E       		.uleb128 0xe
 2616 0151 3A       		.uleb128 0x3a
 2617 0152 0B       		.uleb128 0xb
 2618 0153 3B       		.uleb128 0x3b
 2619 0154 0B       		.uleb128 0xb
 2620 0155 27       		.uleb128 0x27
 2621 0156 0C       		.uleb128 0xc
 2622 0157 11       		.uleb128 0x11
 2623 0158 01       		.uleb128 0x1
 2624 0159 12       		.uleb128 0x12
 2625 015a 01       		.uleb128 0x1
 2626 015b 40       		.uleb128 0x40
 2627 015c 0A       		.uleb128 0xa
 2628 015d 9742     		.uleb128 0x2117
 2629 015f 0C       		.uleb128 0xc
 2630 0160 00       		.byte	0
 2631 0161 00       		.byte	0
 2632 0162 1A       		.uleb128 0x1a
 2633 0163 2E       		.uleb128 0x2e
 2634 0164 00       		.byte	0
 2635 0165 3F       		.uleb128 0x3f
 2636 0166 0C       		.uleb128 0xc
 2637 0167 03       		.uleb128 0x3
 2638 0168 0E       		.uleb128 0xe
 2639 0169 3A       		.uleb128 0x3a
 2640 016a 0B       		.uleb128 0xb
 2641 016b 3B       		.uleb128 0x3b
 2642 016c 0B       		.uleb128 0xb
 2643 016d 27       		.uleb128 0x27
 2644 016e 0C       		.uleb128 0xc
 2645 016f 11       		.uleb128 0x11
 2646 0170 01       		.uleb128 0x1
 2647 0171 12       		.uleb128 0x12
 2648 0172 01       		.uleb128 0x1
 2649 0173 40       		.uleb128 0x40
 2650 0174 06       		.uleb128 0x6
 2651 0175 9642     		.uleb128 0x2116
 2652 0177 0C       		.uleb128 0xc
 2653 0178 00       		.byte	0
 2654 0179 00       		.byte	0
 2655 017a 1B       		.uleb128 0x1b
 2656 017b 34       		.uleb128 0x34
 2657 017c 00       		.byte	0
 2658 017d 03       		.uleb128 0x3
 2659 017e 0E       		.uleb128 0xe
 2660 017f 3A       		.uleb128 0x3a
 2661 0180 0B       		.uleb128 0xb
ARM GAS  /tmp/ccC8gCOe.s 			page 68


 2662 0181 3B       		.uleb128 0x3b
 2663 0182 0B       		.uleb128 0xb
 2664 0183 49       		.uleb128 0x49
 2665 0184 13       		.uleb128 0x13
 2666 0185 3F       		.uleb128 0x3f
 2667 0186 0C       		.uleb128 0xc
 2668 0187 3C       		.uleb128 0x3c
 2669 0188 0C       		.uleb128 0xc
 2670 0189 00       		.byte	0
 2671 018a 00       		.byte	0
 2672 018b 1C       		.uleb128 0x1c
 2673 018c 34       		.uleb128 0x34
 2674 018d 00       		.byte	0
 2675 018e 03       		.uleb128 0x3
 2676 018f 0E       		.uleb128 0xe
 2677 0190 3A       		.uleb128 0x3a
 2678 0191 0B       		.uleb128 0xb
 2679 0192 3B       		.uleb128 0x3b
 2680 0193 0B       		.uleb128 0xb
 2681 0194 49       		.uleb128 0x49
 2682 0195 13       		.uleb128 0x13
 2683 0196 3F       		.uleb128 0x3f
 2684 0197 0C       		.uleb128 0xc
 2685 0198 02       		.uleb128 0x2
 2686 0199 0A       		.uleb128 0xa
 2687 019a 00       		.byte	0
 2688 019b 00       		.byte	0
 2689 019c 00       		.byte	0
 2690              		.section	.debug_loc,"",%progbits
 2691              	.Ldebug_loc0:
 2692              	.LLST0:
 2693 0000 00000000 		.4byte	.LFB11
 2694 0004 02000000 		.4byte	.LCFI0
 2695 0008 0200     		.2byte	0x2
 2696 000a 7D       		.byte	0x7d
 2697 000b 00       		.sleb128 0
 2698 000c 02000000 		.4byte	.LCFI0
 2699 0010 2C000000 		.4byte	.LFE11
 2700 0014 0200     		.2byte	0x2
 2701 0016 7D       		.byte	0x7d
 2702 0017 08       		.sleb128 8
 2703 0018 00000000 		.4byte	0
 2704 001c 00000000 		.4byte	0
 2705              	.LLST1:
 2706 0020 00000000 		.4byte	.LFB16
 2707 0024 02000000 		.4byte	.LCFI1
 2708 0028 0200     		.2byte	0x2
 2709 002a 7D       		.byte	0x7d
 2710 002b 00       		.sleb128 0
 2711 002c 02000000 		.4byte	.LCFI1
 2712 0030 04000000 		.4byte	.LCFI2
 2713 0034 0200     		.2byte	0x2
 2714 0036 7D       		.byte	0x7d
 2715 0037 0C       		.sleb128 12
 2716 0038 04000000 		.4byte	.LCFI2
 2717 003c EC000000 		.4byte	.LFE16
 2718 0040 0200     		.2byte	0x2
ARM GAS  /tmp/ccC8gCOe.s 			page 69


 2719 0042 7D       		.byte	0x7d
 2720 0043 18       		.sleb128 24
 2721 0044 00000000 		.4byte	0
 2722 0048 00000000 		.4byte	0
 2723              	.LLST2:
 2724 004c 00000000 		.4byte	.LFB20
 2725 0050 02000000 		.4byte	.LCFI3
 2726 0054 0200     		.2byte	0x2
 2727 0056 7D       		.byte	0x7d
 2728 0057 00       		.sleb128 0
 2729 0058 02000000 		.4byte	.LCFI3
 2730 005c 20000000 		.4byte	.LFE20
 2731 0060 0200     		.2byte	0x2
 2732 0062 7D       		.byte	0x7d
 2733 0063 08       		.sleb128 8
 2734 0064 00000000 		.4byte	0
 2735 0068 00000000 		.4byte	0
 2736              	.LLST3:
 2737 006c 00000000 		.4byte	.LFB21
 2738 0070 02000000 		.4byte	.LCFI4
 2739 0074 0200     		.2byte	0x2
 2740 0076 7D       		.byte	0x7d
 2741 0077 00       		.sleb128 0
 2742 0078 02000000 		.4byte	.LCFI4
 2743 007c 20000000 		.4byte	.LFE21
 2744 0080 0200     		.2byte	0x2
 2745 0082 7D       		.byte	0x7d
 2746 0083 08       		.sleb128 8
 2747 0084 00000000 		.4byte	0
 2748 0088 00000000 		.4byte	0
 2749              	.LLST4:
 2750 008c 00000000 		.4byte	.LFB22
 2751 0090 02000000 		.4byte	.LCFI5
 2752 0094 0200     		.2byte	0x2
 2753 0096 7D       		.byte	0x7d
 2754 0097 00       		.sleb128 0
 2755 0098 02000000 		.4byte	.LCFI5
 2756 009c 20000000 		.4byte	.LFE22
 2757 00a0 0200     		.2byte	0x2
 2758 00a2 7D       		.byte	0x7d
 2759 00a3 08       		.sleb128 8
 2760 00a4 00000000 		.4byte	0
 2761 00a8 00000000 		.4byte	0
 2762              	.LLST5:
 2763 00ac 00000000 		.4byte	.LFB23
 2764 00b0 02000000 		.4byte	.LCFI6
 2765 00b4 0200     		.2byte	0x2
 2766 00b6 7D       		.byte	0x7d
 2767 00b7 00       		.sleb128 0
 2768 00b8 02000000 		.4byte	.LCFI6
 2769 00bc 20000000 		.4byte	.LFE23
 2770 00c0 0200     		.2byte	0x2
 2771 00c2 7D       		.byte	0x7d
 2772 00c3 08       		.sleb128 8
 2773 00c4 00000000 		.4byte	0
 2774 00c8 00000000 		.4byte	0
 2775              	.LLST6:
ARM GAS  /tmp/ccC8gCOe.s 			page 70


 2776 00cc 00000000 		.4byte	.LFB24
 2777 00d0 02000000 		.4byte	.LCFI7
 2778 00d4 0200     		.2byte	0x2
 2779 00d6 7D       		.byte	0x7d
 2780 00d7 00       		.sleb128 0
 2781 00d8 02000000 		.4byte	.LCFI7
 2782 00dc 2C000000 		.4byte	.LFE24
 2783 00e0 0200     		.2byte	0x2
 2784 00e2 7D       		.byte	0x7d
 2785 00e3 08       		.sleb128 8
 2786 00e4 00000000 		.4byte	0
 2787 00e8 00000000 		.4byte	0
 2788              	.LLST7:
 2789 00ec 00000000 		.4byte	.LFB31
 2790 00f0 02000000 		.4byte	.LCFI8
 2791 00f4 0200     		.2byte	0x2
 2792 00f6 7D       		.byte	0x7d
 2793 00f7 00       		.sleb128 0
 2794 00f8 02000000 		.4byte	.LCFI8
 2795 00fc 68000000 		.4byte	.LFE31
 2796 0100 0200     		.2byte	0x2
 2797 0102 7D       		.byte	0x7d
 2798 0103 08       		.sleb128 8
 2799 0104 00000000 		.4byte	0
 2800 0108 00000000 		.4byte	0
 2801              	.LLST8:
 2802 010c 00000000 		.4byte	.LFB32
 2803 0110 02000000 		.4byte	.LCFI9
 2804 0114 0200     		.2byte	0x2
 2805 0116 7D       		.byte	0x7d
 2806 0117 00       		.sleb128 0
 2807 0118 02000000 		.4byte	.LCFI9
 2808 011c 30000000 		.4byte	.LFE32
 2809 0120 0200     		.2byte	0x2
 2810 0122 7D       		.byte	0x7d
 2811 0123 08       		.sleb128 8
 2812 0124 00000000 		.4byte	0
 2813 0128 00000000 		.4byte	0
 2814              	.LLST9:
 2815 012c 00000000 		.4byte	.LFB34
 2816 0130 02000000 		.4byte	.LCFI10
 2817 0134 0200     		.2byte	0x2
 2818 0136 7D       		.byte	0x7d
 2819 0137 00       		.sleb128 0
 2820 0138 02000000 		.4byte	.LCFI10
 2821 013c 6C000000 		.4byte	.LFE34
 2822 0140 0200     		.2byte	0x2
 2823 0142 7D       		.byte	0x7d
 2824 0143 08       		.sleb128 8
 2825 0144 00000000 		.4byte	0
 2826 0148 00000000 		.4byte	0
 2827              		.section	.debug_aranges,"",%progbits
 2828 0000 9C000000 		.4byte	0x9c
 2829 0004 0200     		.2byte	0x2
 2830 0006 00000000 		.4byte	.Ldebug_info0
 2831 000a 04       		.byte	0x4
 2832 000b 00       		.byte	0
ARM GAS  /tmp/ccC8gCOe.s 			page 71


 2833 000c 0000     		.2byte	0
 2834 000e 0000     		.2byte	0
 2835 0010 00000000 		.4byte	.LFB11
 2836 0014 2C000000 		.4byte	.LFE11-.LFB11
 2837 0018 00000000 		.4byte	.LFB16
 2838 001c EC000000 		.4byte	.LFE16-.LFB16
 2839 0020 00000000 		.4byte	.LFB20
 2840 0024 20000000 		.4byte	.LFE20-.LFB20
 2841 0028 00000000 		.4byte	.LFB21
 2842 002c 20000000 		.4byte	.LFE21-.LFB21
 2843 0030 00000000 		.4byte	.LFB22
 2844 0034 20000000 		.4byte	.LFE22-.LFB22
 2845 0038 00000000 		.4byte	.LFB23
 2846 003c 20000000 		.4byte	.LFE23-.LFB23
 2847 0040 00000000 		.4byte	.LFB24
 2848 0044 2C000000 		.4byte	.LFE24-.LFB24
 2849 0048 00000000 		.4byte	.LFB25
 2850 004c 1C000000 		.4byte	.LFE25-.LFB25
 2851 0050 00000000 		.4byte	.LFB26
 2852 0054 78000000 		.4byte	.LFE26-.LFB26
 2853 0058 00000000 		.4byte	.LFB27
 2854 005c 38000000 		.4byte	.LFE27-.LFB27
 2855 0060 00000000 		.4byte	.LFB28
 2856 0064 1C000000 		.4byte	.LFE28-.LFB28
 2857 0068 00000000 		.4byte	.LFB29
 2858 006c 4C000000 		.4byte	.LFE29-.LFB29
 2859 0070 00000000 		.4byte	.LFB30
 2860 0074 1C000000 		.4byte	.LFE30-.LFB30
 2861 0078 00000000 		.4byte	.LFB31
 2862 007c 68000000 		.4byte	.LFE31-.LFB31
 2863 0080 00000000 		.4byte	.LFB32
 2864 0084 30000000 		.4byte	.LFE32-.LFB32
 2865 0088 00000000 		.4byte	.LFB33
 2866 008c 30000000 		.4byte	.LFE33-.LFB33
 2867 0090 00000000 		.4byte	.LFB34
 2868 0094 6C000000 		.4byte	.LFE34-.LFB34
 2869 0098 00000000 		.4byte	0
 2870 009c 00000000 		.4byte	0
 2871              		.section	.debug_ranges,"",%progbits
 2872              	.Ldebug_ranges0:
 2873 0000 00000000 		.4byte	.LFB11
 2874 0004 2C000000 		.4byte	.LFE11
 2875 0008 00000000 		.4byte	.LFB16
 2876 000c EC000000 		.4byte	.LFE16
 2877 0010 00000000 		.4byte	.LFB20
 2878 0014 20000000 		.4byte	.LFE20
 2879 0018 00000000 		.4byte	.LFB21
 2880 001c 20000000 		.4byte	.LFE21
 2881 0020 00000000 		.4byte	.LFB22
 2882 0024 20000000 		.4byte	.LFE22
 2883 0028 00000000 		.4byte	.LFB23
 2884 002c 20000000 		.4byte	.LFE23
 2885 0030 00000000 		.4byte	.LFB24
 2886 0034 2C000000 		.4byte	.LFE24
 2887 0038 00000000 		.4byte	.LFB25
 2888 003c 1C000000 		.4byte	.LFE25
 2889 0040 00000000 		.4byte	.LFB26
ARM GAS  /tmp/ccC8gCOe.s 			page 72


 2890 0044 78000000 		.4byte	.LFE26
 2891 0048 00000000 		.4byte	.LFB27
 2892 004c 38000000 		.4byte	.LFE27
 2893 0050 00000000 		.4byte	.LFB28
 2894 0054 1C000000 		.4byte	.LFE28
 2895 0058 00000000 		.4byte	.LFB29
 2896 005c 4C000000 		.4byte	.LFE29
 2897 0060 00000000 		.4byte	.LFB30
 2898 0064 1C000000 		.4byte	.LFE30
 2899 0068 00000000 		.4byte	.LFB31
 2900 006c 68000000 		.4byte	.LFE31
 2901 0070 00000000 		.4byte	.LFB32
 2902 0074 30000000 		.4byte	.LFE32
 2903 0078 00000000 		.4byte	.LFB33
 2904 007c 30000000 		.4byte	.LFE33
 2905 0080 00000000 		.4byte	.LFB34
 2906 0084 6C000000 		.4byte	.LFE34
 2907 0088 00000000 		.4byte	0
 2908 008c 00000000 		.4byte	0
 2909              		.section	.debug_line,"",%progbits
 2910              	.Ldebug_line0:
 2911 0000 A7020000 		.section	.debug_str,"MS",%progbits,1
 2911      02001301 
 2911      00000201 
 2911      FB0E0D00 
 2911      01010101 
 2912              	.LASF78:
 2913 0000 41504231 		.ascii	"APB1ENR\000"
 2913      454E5200 
 2914              	.LASF12:
 2915 0008 45585449 		.ascii	"EXTI4_15_IRQn\000"
 2915      345F3135 
 2915      5F495251 
 2915      6E00
 2916              	.LASF70:
 2917 0016 42535252 		.ascii	"BSRR\000"
 2917      00
 2918              	.LASF121:
 2919 001b 54494D31 		.ascii	"TIM16_IRQHandler\000"
 2919      365F4952 
 2919      5148616E 
 2919      646C6572 
 2919      00
 2920              	.LASF11:
 2921 002c 45585449 		.ascii	"EXTI2_3_IRQn\000"
 2921      325F335F 
 2921      4952516E 
 2921      00
 2922              	.LASF74:
 2923 0039 41504232 		.ascii	"APB2RSTR\000"
 2923      52535452 
 2923      00
 2924              	.LASF2:
 2925 0042 5356435F 		.ascii	"SVC_IRQn\000"
 2925      4952516E 
 2925      00
 2926              	.LASF107:
ARM GAS  /tmp/ccC8gCOe.s 			page 73


 2927 004b 4E564943 		.ascii	"NVIC_SetPriority\000"
 2927      5F536574 
 2927      5072696F 
 2927      72697479 
 2927      00
 2928              	.LASF45:
 2929 005c 756E7369 		.ascii	"unsigned int\000"
 2929      676E6564 
 2929      20696E74 
 2929      00
 2930              	.LASF25:
 2931 0069 54494D31 		.ascii	"TIM16_IRQn\000"
 2931      365F4952 
 2931      516E00
 2932              	.LASF79:
 2933 0074 42444352 		.ascii	"BDCR\000"
 2933      00
 2934              	.LASF8:
 2935 0079 464C4153 		.ascii	"FLASH_IRQn\000"
 2935      485F4952 
 2935      516E00
 2936              	.LASF10:
 2937 0084 45585449 		.ascii	"EXTI0_1_IRQn\000"
 2937      305F315F 
 2937      4952516E 
 2937      00
 2938              	.LASF128:
 2939 0091 76677269 		.ascii	"vgrid_timer\000"
 2939      645F7469 
 2939      6D657200 
 2940              	.LASF27:
 2941 009d 49324331 		.ascii	"I2C1_IRQn\000"
 2941      5F495251 
 2941      6E00
 2942              	.LASF3:
 2943 00a7 50656E64 		.ascii	"PendSV_IRQn\000"
 2943      53565F49 
 2943      52516E00 
 2944              	.LASF9:
 2945 00b3 5243435F 		.ascii	"RCC_IRQn\000"
 2945      4952516E 
 2945      00
 2946              	.LASF105:
 2947 00bc 54494D5F 		.ascii	"TIM_TypeDef\000"
 2947      54797065 
 2947      44656600 
 2948              	.LASF47:
 2949 00c8 75696E74 		.ascii	"uint32_t\000"
 2949      33325F74 
 2949      00
 2950              	.LASF123:
 2951 00d1 4F6E6553 		.ascii	"OneShootTIM16\000"
 2951      686F6F74 
 2951      54494D31 
 2951      3600
 2952              	.LASF80:
 2953 00df 41484252 		.ascii	"AHBRSTR\000"
ARM GAS  /tmp/ccC8gCOe.s 			page 74


 2953      53545200 
 2954              	.LASF99:
 2955 00e7 42445452 		.ascii	"BDTR\000"
 2955      00
 2956              	.LASF48:
 2957 00ec 49534552 		.ascii	"ISER\000"
 2957      00
 2958              	.LASF95:
 2959 00f1 43435231 		.ascii	"CCR1\000"
 2959      00
 2960              	.LASF96:
 2961 00f6 43435232 		.ascii	"CCR2\000"
 2961      00
 2962              	.LASF97:
 2963 00fb 43435233 		.ascii	"CCR3\000"
 2963      00
 2964              	.LASF51:
 2965 0100 52534552 		.ascii	"RSERVED1\000"
 2965      56454431 
 2965      00
 2966              	.LASF87:
 2967 0109 43434D52 		.ascii	"CCMR1\000"
 2967      3100
 2968              	.LASF89:
 2969 010f 43434D52 		.ascii	"CCMR2\000"
 2969      3200
 2970              	.LASF29:
 2971 0115 53504931 		.ascii	"SPI1_IRQn\000"
 2971      5F495251 
 2971      6E00
 2972              	.LASF106:
 2973 011f 4E564943 		.ascii	"NVIC_EnableIRQ\000"
 2973      5F456E61 
 2973      626C6549 
 2973      525100
 2974              	.LASF44:
 2975 012e 6C6F6E67 		.ascii	"long long unsigned int\000"
 2975      206C6F6E 
 2975      6720756E 
 2975      7369676E 
 2975      65642069 
 2976              	.LASF64:
 2977 0145 44465352 		.ascii	"DFSR\000"
 2977      00
 2978              	.LASF116:
 2979 014a 54494D33 		.ascii	"TIM3_IRQHandler\000"
 2979      5F495251 
 2979      48616E64 
 2979      6C657200 
 2980              	.LASF38:
 2981 015a 5F5F7569 		.ascii	"__uint16_t\000"
 2981      6E743136 
 2981      5F7400
 2982              	.LASF66:
 2983 0165 4D4F4445 		.ascii	"MODER\000"
 2983      5200
 2984              	.LASF37:
ARM GAS  /tmp/ccC8gCOe.s 			page 75


 2985 016b 4952516E 		.ascii	"IRQn_Type\000"
 2985      5F547970 
 2985      6500
 2986              	.LASF32:
 2987 0175 55534152 		.ascii	"USART2_IRQn\000"
 2987      54325F49 
 2987      52516E00 
 2988              	.LASF59:
 2989 0181 43505549 		.ascii	"CPUID\000"
 2989      4400
 2990              	.LASF127:
 2991 0187 69677269 		.ascii	"igrid_timer\000"
 2991      645F7469 
 2991      6D657200 
 2992              	.LASF83:
 2993 0193 5243435F 		.ascii	"RCC_TypeDef\000"
 2993      54797065 
 2993      44656600 
 2994              	.LASF85:
 2995 019f 44494552 		.ascii	"DIER\000"
 2995      00
 2996              	.LASF124:
 2997 01a4 54494D31 		.ascii	"TIM17_IRQHandler\000"
 2997      375F4952 
 2997      5148616E 
 2997      646C6572 
 2997      00
 2998              	.LASF129:
 2999 01b5 74696D65 		.ascii	"timer_1000\000"
 2999      725F3130 
 2999      303000
 3000              	.LASF119:
 3001 01c0 54494D31 		.ascii	"TIM14_IRQHandler\000"
 3001      345F4952 
 3001      5148616E 
 3001      646C6572 
 3001      00
 3002              	.LASF69:
 3003 01d1 50555044 		.ascii	"PUPDR\000"
 3003      5200
 3004              	.LASF75:
 3005 01d7 41504231 		.ascii	"APB1RSTR\000"
 3005      52535452 
 3005      00
 3006              	.LASF91:
 3007 01e0 43434552 		.ascii	"CCER\000"
 3007      00
 3008              	.LASF118:
 3009 01e5 54494D5F 		.ascii	"TIM_6_Init\000"
 3009      365F496E 
 3009      697400
 3010              	.LASF61:
 3011 01f0 41495243 		.ascii	"AIRCR\000"
 3011      5200
 3012              	.LASF21:
 3013 01f6 54494D33 		.ascii	"TIM3_IRQn\000"
 3013      5F495251 
ARM GAS  /tmp/ccC8gCOe.s 			page 76


 3013      6E00
 3014              	.LASF14:
 3015 0200 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 3015      5F436861 
 3015      6E6E656C 
 3015      315F4952 
 3015      516E00
 3016              	.LASF125:
 3017 0213 54494D5F 		.ascii	"TIM_17_Init\000"
 3017      31375F49 
 3017      6E697400 
 3018              	.LASF76:
 3019 021f 41484245 		.ascii	"AHBENR\000"
 3019      4E5200
 3020              	.LASF24:
 3021 0226 54494D31 		.ascii	"TIM15_IRQn\000"
 3021      355F4952 
 3021      516E00
 3022              	.LASF84:
 3023 0231 534D4352 		.ascii	"SMCR\000"
 3023      00
 3024              	.LASF43:
 3025 0236 6C6F6E67 		.ascii	"long long int\000"
 3025      206C6F6E 
 3025      6720696E 
 3025      7400
 3026              	.LASF5:
 3027 0244 57574447 		.ascii	"WWDG_IRQn\000"
 3027      5F495251 
 3027      6E00
 3028              	.LASF63:
 3029 024e 53484353 		.ascii	"SHCSR\000"
 3029      5200
 3030              	.LASF13:
 3031 0254 54535F49 		.ascii	"TS_IRQn\000"
 3031      52516E00 
 3032              	.LASF18:
 3033 025c 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 3033      5F42524B 
 3033      5F55505F 
 3033      5452475F 
 3033      434F4D5F 
 3034              	.LASF6:
 3035 0275 5056445F 		.ascii	"PVD_IRQn\000"
 3035      4952516E 
 3035      00
 3036              	.LASF81:
 3037 027e 43464752 		.ascii	"CFGR2\000"
 3037      3200
 3038              	.LASF82:
 3039 0284 43464752 		.ascii	"CFGR3\000"
 3039      3300
 3040              	.LASF54:
 3041 028a 49435052 		.ascii	"ICPR\000"
 3041      00
 3042              	.LASF17:
 3043 028f 41444331 		.ascii	"ADC1_COMP_IRQn\000"
ARM GAS  /tmp/ccC8gCOe.s 			page 77


 3043      5F434F4D 
 3043      505F4952 
 3043      516E00
 3044              	.LASF77:
 3045 029e 41504232 		.ascii	"APB2ENR\000"
 3045      454E5200 
 3046              	.LASF115:
 3047 02a6 77616974 		.ascii	"wait\000"
 3047      00
 3048              	.LASF117:
 3049 02ab 54494D5F 		.ascii	"TIM_3_Init\000"
 3049      335F496E 
 3049      697400
 3050              	.LASF68:
 3051 02b6 4F535045 		.ascii	"OSPEEDR\000"
 3051      45445200 
 3052              	.LASF120:
 3053 02be 54494D5F 		.ascii	"TIM_14_Init\000"
 3053      31345F49 
 3053      6E697400 
 3054              	.LASF46:
 3055 02ca 75696E74 		.ascii	"uint16_t\000"
 3055      31365F74 
 3055      00
 3056              	.LASF108:
 3057 02d3 4952516E 		.ascii	"IRQn\000"
 3057      00
 3058              	.LASF7:
 3059 02d8 5254435F 		.ascii	"RTC_IRQn\000"
 3059      4952516E 
 3059      00
 3060              	.LASF49:
 3061 02e1 52455345 		.ascii	"RESERVED0\000"
 3061      52564544 
 3061      3000
 3062              	.LASF62:
 3063 02eb 52455345 		.ascii	"RESERVED1\000"
 3063      52564544 
 3063      3100
 3064              	.LASF53:
 3065 02f5 52455345 		.ascii	"RESERVED2\000"
 3065      52564544 
 3065      3200
 3066              	.LASF55:
 3067 02ff 52455345 		.ascii	"RESERVED3\000"
 3067      52564544 
 3067      3300
 3068              	.LASF56:
 3069 0309 52455345 		.ascii	"RESERVED4\000"
 3069      52564544 
 3069      3400
 3070              	.LASF86:
 3071 0313 52455345 		.ascii	"RESERVED5\000"
 3071      52564544 
 3071      3500
 3072              	.LASF88:
 3073 031d 52455345 		.ascii	"RESERVED6\000"
ARM GAS  /tmp/ccC8gCOe.s 			page 78


 3073      52564544 
 3073      3600
 3074              	.LASF36:
 3075 0327 73686F72 		.ascii	"short int\000"
 3075      7420696E 
 3075      7400
 3076              	.LASF92:
 3077 0331 52455345 		.ascii	"RESERVED8\000"
 3077      52564544 
 3077      3800
 3078              	.LASF40:
 3079 033b 6C6F6E67 		.ascii	"long int\000"
 3079      20696E74 
 3079      00
 3080              	.LASF31:
 3081 0344 55534152 		.ascii	"USART1_IRQn\000"
 3081      54315F49 
 3081      52516E00 
 3082              	.LASF102:
 3083 0350 444D4152 		.ascii	"DMAR\000"
 3083      00
 3084              	.LASF0:
 3085 0355 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 3085      61736B61 
 3085      626C6549 
 3085      6E745F49 
 3085      52516E00 
 3086              	.LASF109:
 3087 0369 7072696F 		.ascii	"priority\000"
 3087      72697479 
 3087      00
 3088              	.LASF19:
 3089 0372 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 3089      5F43435F 
 3089      4952516E 
 3089      00
 3090              	.LASF67:
 3091 037f 4F545950 		.ascii	"OTYPER\000"
 3091      455200
 3092              	.LASF126:
 3093 0386 77616974 		.ascii	"wait_ms_var\000"
 3093      5F6D735F 
 3093      76617200 
 3094              	.LASF73:
 3095 0392 43464752 		.ascii	"CFGR\000"
 3095      00
 3096              	.LASF26:
 3097 0397 54494D31 		.ascii	"TIM17_IRQn\000"
 3097      375F4952 
 3097      516E00
 3098              	.LASF16:
 3099 03a2 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 3099      5F436861 
 3099      6E6E656C 
 3099      345F355F 
 3099      4952516E 
 3100              	.LASF58:
ARM GAS  /tmp/ccC8gCOe.s 			page 79


 3101 03b7 4E564943 		.ascii	"NVIC_Type\000"
 3101      5F547970 
 3101      6500
 3102              	.LASF65:
 3103 03c1 5343425F 		.ascii	"SCB_Type\000"
 3103      54797065 
 3103      00
 3104              	.LASF72:
 3105 03ca 4750494F 		.ascii	"GPIO_TypeDef\000"
 3105      5F547970 
 3105      65446566 
 3105      00
 3106              	.LASF4:
 3107 03d7 53797354 		.ascii	"SysTick_IRQn\000"
 3107      69636B5F 
 3107      4952516E 
 3107      00
 3108              	.LASF33:
 3109 03e4 4345435F 		.ascii	"CEC_IRQn\000"
 3109      4952516E 
 3109      00
 3110              	.LASF57:
 3111 03ed 73697A65 		.ascii	"sizetype\000"
 3111      74797065 
 3111      00
 3112              	.LASF60:
 3113 03f6 49435352 		.ascii	"ICSR\000"
 3113      00
 3114              	.LASF28:
 3115 03fb 49324332 		.ascii	"I2C2_IRQn\000"
 3115      5F495251 
 3115      6E00
 3116              	.LASF42:
 3117 0405 6C6F6E67 		.ascii	"long unsigned int\000"
 3117      20756E73 
 3117      69676E65 
 3117      6420696E 
 3117      7400
 3118              	.LASF20:
 3119 0417 54494D32 		.ascii	"TIM2_IRQn\000"
 3119      5F495251 
 3119      6E00
 3120              	.LASF110:
 3121 0421 55706461 		.ascii	"Update_TIM3_CH1\000"
 3121      74655F54 
 3121      494D335F 
 3121      43483100 
 3122              	.LASF111:
 3123 0431 55706461 		.ascii	"Update_TIM3_CH2\000"
 3123      74655F54 
 3123      494D335F 
 3123      43483200 
 3124              	.LASF112:
 3125 0441 55706461 		.ascii	"Update_TIM3_CH3\000"
 3125      74655F54 
 3125      494D335F 
 3125      43483300 
ARM GAS  /tmp/ccC8gCOe.s 			page 80


 3126              	.LASF113:
 3127 0451 55706461 		.ascii	"Update_TIM3_CH4\000"
 3127      74655F54 
 3127      494D335F 
 3127      43483400 
 3128              	.LASF132:
 3129 0461 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 3129      652F6D65 
 3129      642F446F 
 3129      63756D65 
 3129      6E74732F 
 3130 0494 6100     		.ascii	"a\000"
 3131              	.LASF23:
 3132 0496 54494D31 		.ascii	"TIM14_IRQn\000"
 3132      345F4952 
 3132      516E00
 3133              	.LASF15:
 3134 04a1 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 3134      5F436861 
 3134      6E6E656C 
 3134      325F335F 
 3134      4952516E 
 3135              	.LASF131:
 3136 04b6 7372632F 		.ascii	"src/stm32f0x_tim.c\000"
 3136      73746D33 
 3136      32663078 
 3136      5F74696D 
 3136      2E6300
 3137              	.LASF22:
 3138 04c9 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 3138      5F444143 
 3138      5F495251 
 3138      6E00
 3139              	.LASF35:
 3140 04d7 756E7369 		.ascii	"unsigned char\000"
 3140      676E6564 
 3140      20636861 
 3140      7200
 3141              	.LASF41:
 3142 04e5 5F5F7569 		.ascii	"__uint32_t\000"
 3142      6E743332 
 3142      5F7400
 3143              	.LASF98:
 3144 04f0 43435234 		.ascii	"CCR4\000"
 3144      00
 3145              	.LASF93:
 3146 04f5 52455345 		.ascii	"RESERVED10\000"
 3146      52564544 
 3146      313000
 3147              	.LASF94:
 3148 0500 52455345 		.ascii	"RESERVED12\000"
 3148      52564544 
 3148      313200
 3149              	.LASF100:
 3150 050b 52455345 		.ascii	"RESERVED17\000"
 3150      52564544 
 3150      313700
ARM GAS  /tmp/ccC8gCOe.s 			page 81


 3151              	.LASF101:
 3152 0516 52455345 		.ascii	"RESERVED18\000"
 3152      52564544 
 3152      313800
 3153              	.LASF103:
 3154 0521 52455345 		.ascii	"RESERVED19\000"
 3154      52564544 
 3154      313900
 3155              	.LASF50:
 3156 052c 49434552 		.ascii	"ICER\000"
 3156      00
 3157              	.LASF30:
 3158 0531 53504932 		.ascii	"SPI2_IRQn\000"
 3158      5F495251 
 3158      6E00
 3159              	.LASF122:
 3160 053b 54494D5F 		.ascii	"TIM_16_Init\000"
 3160      31365F49 
 3160      6E697400 
 3161              	.LASF34:
 3162 0547 7369676E 		.ascii	"signed char\000"
 3162      65642063 
 3162      68617200 
 3163              	.LASF39:
 3164 0553 73686F72 		.ascii	"short unsigned int\000"
 3164      7420756E 
 3164      7369676E 
 3164      65642069 
 3164      6E7400
 3165              	.LASF104:
 3166 0566 52455345 		.ascii	"RESERVED20\000"
 3166      52564544 
 3166      323000
 3167              	.LASF130:
 3168 0571 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 3168      43313120 
 3168      352E322E 
 3168      31203230 
 3168      31353132 
 3169 05a4 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 3169      20726576 
 3169      6973696F 
 3169      6E203233 
 3169      31383438 
 3170 05d7 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 3170      662D3220 
 3170      2D4F3020 
 3170      2D666F6D 
 3170      69742D66 
 3171 060a 66756E63 		.ascii	"function-sections\000"
 3171      74696F6E 
 3171      2D736563 
 3171      74696F6E 
 3171      7300
 3172              	.LASF1:
 3173 061c 48617264 		.ascii	"HardFault_IRQn\000"
 3173      4661756C 
ARM GAS  /tmp/ccC8gCOe.s 			page 82


 3173      745F4952 
 3173      516E00
 3174              	.LASF52:
 3175 062b 49535052 		.ascii	"ISPR\000"
 3175      00
 3176              	.LASF90:
 3177 0630 52455345 		.ascii	"RESERVED7\000"
 3177      52564544 
 3177      3700
 3178              	.LASF114:
 3179 063a 57616974 		.ascii	"Wait_ms\000"
 3179      5F6D7300 
 3180              	.LASF71:
 3181 0642 4C434B52 		.ascii	"LCKR\000"
 3181      00
 3182              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccC8gCOe.s 			page 83


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0x_tim.c
     /tmp/ccC8gCOe.s:55     .text.NVIC_EnableIRQ:00000000 $t
     /tmp/ccC8gCOe.s:59     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
     /tmp/ccC8gCOe.s:91     .text.NVIC_EnableIRQ:00000028 $d
     /tmp/ccC8gCOe.s:96     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccC8gCOe.s:100    .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccC8gCOe.s:240    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccC8gCOe.s:250    .bss.timer_1000:00000000 timer_1000
     /tmp/ccC8gCOe.s:247    .bss.timer_1000:00000000 $d
     /tmp/ccC8gCOe.s:253    .text.Update_TIM3_CH1:00000000 $t
     /tmp/ccC8gCOe.s:258    .text.Update_TIM3_CH1:00000000 Update_TIM3_CH1
     /tmp/ccC8gCOe.s:284    .text.Update_TIM3_CH1:0000001c $d
     /tmp/ccC8gCOe.s:289    .text.Update_TIM3_CH2:00000000 $t
     /tmp/ccC8gCOe.s:294    .text.Update_TIM3_CH2:00000000 Update_TIM3_CH2
     /tmp/ccC8gCOe.s:319    .text.Update_TIM3_CH2:0000001c $d
     /tmp/ccC8gCOe.s:324    .text.Update_TIM3_CH3:00000000 $t
     /tmp/ccC8gCOe.s:329    .text.Update_TIM3_CH3:00000000 Update_TIM3_CH3
     /tmp/ccC8gCOe.s:354    .text.Update_TIM3_CH3:0000001c $d
     /tmp/ccC8gCOe.s:359    .text.Update_TIM3_CH4:00000000 $t
     /tmp/ccC8gCOe.s:364    .text.Update_TIM3_CH4:00000000 Update_TIM3_CH4
     /tmp/ccC8gCOe.s:389    .text.Update_TIM3_CH4:0000001c $d
     /tmp/ccC8gCOe.s:394    .text.Wait_ms:00000000 $t
     /tmp/ccC8gCOe.s:399    .text.Wait_ms:00000000 Wait_ms
     /tmp/ccC8gCOe.s:433    .text.Wait_ms:00000028 $d
     /tmp/ccC8gCOe.s:438    .text.TIM3_IRQHandler:00000000 $t
     /tmp/ccC8gCOe.s:443    .text.TIM3_IRQHandler:00000000 TIM3_IRQHandler
     /tmp/ccC8gCOe.s:467    .text.TIM3_IRQHandler:00000018 $d
     /tmp/ccC8gCOe.s:472    .text.TIM_3_Init:00000000 $t
     /tmp/ccC8gCOe.s:477    .text.TIM_3_Init:00000000 TIM_3_Init
     /tmp/ccC8gCOe.s:554    .text.TIM_3_Init:00000070 $d
     /tmp/ccC8gCOe.s:560    .text.TIM_6_Init:00000000 $t
     /tmp/ccC8gCOe.s:565    .text.TIM_6_Init:00000000 TIM_6_Init
     /tmp/ccC8gCOe.s:602    .text.TIM_6_Init:0000002c $d
     /tmp/ccC8gCOe.s:609    .text.TIM14_IRQHandler:00000000 $t
     /tmp/ccC8gCOe.s:614    .text.TIM14_IRQHandler:00000000 TIM14_IRQHandler
     /tmp/ccC8gCOe.s:638    .text.TIM14_IRQHandler:00000018 $d
     /tmp/ccC8gCOe.s:643    .text.TIM_14_Init:00000000 $t
     /tmp/ccC8gCOe.s:648    .text.TIM_14_Init:00000000 TIM_14_Init
     /tmp/ccC8gCOe.s:696    .text.TIM_14_Init:00000040 $d
     /tmp/ccC8gCOe.s:703    .text.TIM16_IRQHandler:00000000 $t
     /tmp/ccC8gCOe.s:708    .text.TIM16_IRQHandler:00000000 TIM16_IRQHandler
     /tmp/ccC8gCOe.s:732    .text.TIM16_IRQHandler:00000018 $d
     /tmp/ccC8gCOe.s:737    .text.TIM_16_Init:00000000 $t
     /tmp/ccC8gCOe.s:742    .text.TIM_16_Init:00000000 TIM_16_Init
     /tmp/ccC8gCOe.s:811    .text.TIM_16_Init:00000060 $d
     /tmp/ccC8gCOe.s:817    .text.OneShootTIM16:00000000 $t
     /tmp/ccC8gCOe.s:822    .text.OneShootTIM16:00000000 OneShootTIM16
     /tmp/ccC8gCOe.s:856    .text.OneShootTIM16:0000002c $d
     /tmp/ccC8gCOe.s:861    .text.TIM17_IRQHandler:00000000 $t
     /tmp/ccC8gCOe.s:866    .text.TIM17_IRQHandler:00000000 TIM17_IRQHandler
     /tmp/ccC8gCOe.s:898    .text.TIM17_IRQHandler:00000024 $d
     /tmp/ccC8gCOe.s:905    .text.TIM_17_Init:00000000 $t
     /tmp/ccC8gCOe.s:910    .text.TIM_17_Init:00000000 TIM_17_Init
     /tmp/ccC8gCOe.s:980    .text.TIM_17_Init:00000064 $d
                     .debug_frame:00000010 $d

ARM GAS  /tmp/ccC8gCOe.s 			page 84


UNDEFINED SYMBOLS
wait_ms_var
igrid_timer
vgrid_timer
