ARM GAS  /tmp/cc8xR3gm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"uart.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/uart.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/uart.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/cc8xR3gm.s 			page 2


  58              		.type	NVIC_EnableIRQ, %function
  59              	NVIC_EnableIRQ:
  60              	.LFB11:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/cc8xR3gm.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/cc8xR3gm.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/cc8xR3gm.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/cc8xR3gm.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/cc8xR3gm.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc8xR3gm.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc8xR3gm.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/cc8xR3gm.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc8xR3gm.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/cc8xR3gm.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc8xR3gm.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/cc8xR3gm.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/cc8xR3gm.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/cc8xR3gm.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 812 0
  63              		.cfi_startproc
  64 0000 82B0     		sub	sp, sp, #8	@,,
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 8
  67 0002 0200     		movs	r2, r0	@ tmp116, IRQn
  68 0004 6B46     		mov	r3, sp	@ tmp122,
  69 0006 0733     		adds	r3, r3, #7	@ tmp117,
  70 0008 1A70     		strb	r2, [r3]	@ tmp118, IRQn
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  71              		.loc 1 813 0
  72 000a 074B     		ldr	r3, .L2	@ D.5472,
  73 000c 6A46     		mov	r2, sp	@ tmp123,
  74 000e 0732     		adds	r2, r2, #7	@ tmp119,
  75 0010 1278     		ldrb	r2, [r2]	@ D.5473, IRQn
  76 0012 1100     		movs	r1, r2	@ D.5474, D.5473
  77 0014 1F22     		movs	r2, #31	@ tmp120,
  78 0016 0A40     		ands	r2, r1	@ D.5474, D.5474
  79 0018 0121     		movs	r1, #1	@ tmp121,
  80 001a 9140     		lsls	r1, r1, r2	@ D.5475, D.5475, D.5474
  81 001c 0A00     		movs	r2, r1	@ D.5475, D.5475
  82 001e 1A60     		str	r2, [r3]	@ D.5474, _1->ISER
 814:./cmsis_core/core_cm0.h **** }
  83              		.loc 1 814 0
  84 0020 C046     		nop
  85 0022 02B0     		add	sp, sp, #8	@,,
  86              		@ sp needed	@
  87 0024 7047     		bx	lr
  88              	.L3:
  89 0026 C046     		.align	2
  90              	.L2:
  91 0028 00E100E0 		.word	-536813312
  92              		.cfi_endproc
  93              	.LFE11:
  94              		.size	NVIC_EnableIRQ, .-NVIC_EnableIRQ
  95              		.section	.text.NVIC_SetPriority,"ax",%progbits
  96              		.align	2
  97              		.code	16
  98              		.thumb_func
ARM GAS  /tmp/cc8xR3gm.s 			page 17


  99              		.type	NVIC_SetPriority, %function
 100              	NVIC_SetPriority:
 101              	.LFB16:
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc8xR3gm.s 			page 18


 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
 102              		.loc 1 893 0
 103              		.cfi_startproc
 104 0000 30B5     		push	{r4, r5, lr}	@
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 12
 107              		.cfi_offset 4, -12
 108              		.cfi_offset 5, -8
 109              		.cfi_offset 14, -4
 110 0002 83B0     		sub	sp, sp, #12	@,,
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 24
 113 0004 0200     		movs	r2, r0	@ tmp162, IRQn
 114 0006 0091     		str	r1, [sp]	@ priority, priority
 115 0008 6B46     		mov	r3, sp	@ tmp199,
 116 000a 0733     		adds	r3, r3, #7	@ tmp163,
 117 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 118              		.loc 1 894 0
 119 000e 6B46     		mov	r3, sp	@ tmp200,
 120 0010 0733     		adds	r3, r3, #7	@ tmp165,
 121 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
 122 0014 7F2B     		cmp	r3, #127	@ tmp166,
 123 0016 36D9     		bls	.L5	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 124              		.loc 1 895 0
 125 0018 324C     		ldr	r4, .L8	@ D.5476,
 126 001a 6B46     		mov	r3, sp	@ tmp201,
 127 001c 0733     		adds	r3, r3, #7	@ tmp167,
 128 001e 1B78     		ldrb	r3, [r3]	@ D.5477, IRQn
 129 0020 1A00     		movs	r2, r3	@ D.5478, D.5477
 130 0022 0F23     		movs	r3, #15	@ tmp168,
 131 0024 1340     		ands	r3, r2	@ D.5478, D.5478
ARM GAS  /tmp/cc8xR3gm.s 			page 19


 132 0026 083B     		subs	r3, r3, #8	@ D.5478,
 133 0028 9908     		lsrs	r1, r3, #2	@ D.5478, D.5478,
 134 002a 2E4A     		ldr	r2, .L8	@ D.5476,
 135 002c 6B46     		mov	r3, sp	@ tmp202,
 136 002e 0733     		adds	r3, r3, #7	@ tmp169,
 137 0030 1B78     		ldrb	r3, [r3]	@ D.5477, IRQn
 138 0032 1800     		movs	r0, r3	@ D.5478, D.5477
 139 0034 0F23     		movs	r3, #15	@ tmp170,
 140 0036 0340     		ands	r3, r0	@ D.5478, D.5478
 141 0038 083B     		subs	r3, r3, #8	@ D.5478,
 142 003a 9B08     		lsrs	r3, r3, #2	@ D.5478, D.5478,
 143 003c 0633     		adds	r3, r3, #6	@ tmp171,
 144 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 145 0040 D318     		adds	r3, r2, r3	@ tmp173, D.5476, tmp172
 146 0042 0433     		adds	r3, r3, #4	@ tmp174,
 147 0044 1B68     		ldr	r3, [r3]	@ D.5478, _9->SHP
 148 0046 6A46     		mov	r2, sp	@ tmp203,
 149 0048 0732     		adds	r2, r2, #7	@ tmp175,
 150 004a 1278     		ldrb	r2, [r2]	@ D.5477, IRQn
 151 004c 1000     		movs	r0, r2	@ D.5478, D.5477
 152 004e 0322     		movs	r2, #3	@ tmp176,
 153 0050 0240     		ands	r2, r0	@ D.5478, D.5478
 154 0052 D200     		lsls	r2, r2, #3	@ D.5478, D.5478,
 155 0054 FF20     		movs	r0, #255	@ tmp177,
 156 0056 9040     		lsls	r0, r0, r2	@ D.5479, D.5479, D.5478
 157 0058 0200     		movs	r2, r0	@ D.5479, D.5479
 158 005a D243     		mvns	r2, r2	@ D.5479, D.5479
 159 005c 1A40     		ands	r2, r3	@ D.5478, D.5478
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 160              		.loc 1 896 0
 161 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 162 0060 9B01     		lsls	r3, r3, #6	@ D.5478, tmp178,
 163 0062 FF20     		movs	r0, #255	@ tmp179,
 164 0064 1840     		ands	r0, r3	@ D.5478, D.5478
 165 0066 6B46     		mov	r3, sp	@ tmp205,
 166 0068 0733     		adds	r3, r3, #7	@ tmp180,
 167 006a 1B78     		ldrb	r3, [r3]	@ D.5477, IRQn
 168 006c 1D00     		movs	r5, r3	@ D.5478, D.5477
 169 006e 0323     		movs	r3, #3	@ tmp181,
 170 0070 2B40     		ands	r3, r5	@ D.5478, D.5478
 171 0072 DB00     		lsls	r3, r3, #3	@ D.5478, D.5478,
 172 0074 9840     		lsls	r0, r0, r3	@ D.5478, D.5478, D.5478
 173 0076 0300     		movs	r3, r0	@ D.5478, D.5478
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 174              		.loc 1 895 0
 175 0078 1A43     		orrs	r2, r3	@ D.5478, D.5478
 176 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.5478,
 177 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 178 007e E318     		adds	r3, r4, r3	@ tmp184, D.5476, tmp183
 179 0080 0433     		adds	r3, r3, #4	@ tmp185,
 180 0082 1A60     		str	r2, [r3]	@ D.5478, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 181              		.loc 1 900 0
 182 0084 2BE0     		b	.L7	@
ARM GAS  /tmp/cc8xR3gm.s 			page 20


 183              	.L5:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 184              		.loc 1 898 0
 185 0086 184C     		ldr	r4, .L8+4	@ D.5480,
 186 0088 6B46     		mov	r3, sp	@ tmp207,
 187 008a 0733     		adds	r3, r3, #7	@ tmp186,
 188 008c 1B78     		ldrb	r3, [r3]	@ D.5478, IRQn
 189 008e 5BB2     		sxtb	r3, r3	@ D.5478, D.5478
 190 0090 9B08     		lsrs	r3, r3, #2	@ D.5478, D.5478,
 191 0092 1549     		ldr	r1, .L8+4	@ D.5480,
 192 0094 6A46     		mov	r2, sp	@ tmp208,
 193 0096 0732     		adds	r2, r2, #7	@ tmp187,
 194 0098 1278     		ldrb	r2, [r2]	@ D.5478, IRQn
 195 009a 52B2     		sxtb	r2, r2	@ D.5478, D.5478
 196 009c 9208     		lsrs	r2, r2, #2	@ D.5478, D.5478,
 197 009e C032     		adds	r2, r2, #192	@ tmp188,
 198 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 199 00a2 5258     		ldr	r2, [r2, r1]	@ D.5478, _38->IP
 200 00a4 6946     		mov	r1, sp	@ tmp209,
 201 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 202 00a8 0978     		ldrb	r1, [r1]	@ D.5477, IRQn
 203 00aa 0800     		movs	r0, r1	@ D.5478, D.5477
 204 00ac 0321     		movs	r1, #3	@ tmp191,
 205 00ae 0140     		ands	r1, r0	@ D.5478, D.5478
 206 00b0 C900     		lsls	r1, r1, #3	@ D.5478, D.5478,
 207 00b2 FF20     		movs	r0, #255	@ tmp192,
 208 00b4 8840     		lsls	r0, r0, r1	@ D.5479, D.5479, D.5478
 209 00b6 0100     		movs	r1, r0	@ D.5479, D.5479
 210 00b8 C943     		mvns	r1, r1	@ D.5479, D.5479
 211 00ba 1140     		ands	r1, r2	@ D.5478, D.5478
 899:./cmsis_core/core_cm0.h **** }
 212              		.loc 1 899 0
 213 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 214 00be 9201     		lsls	r2, r2, #6	@ D.5478, tmp193,
 215 00c0 FF20     		movs	r0, #255	@ tmp194,
 216 00c2 1040     		ands	r0, r2	@ D.5478, D.5478
 217 00c4 6A46     		mov	r2, sp	@ tmp211,
 218 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 219 00c8 1278     		ldrb	r2, [r2]	@ D.5477, IRQn
 220 00ca 1500     		movs	r5, r2	@ D.5478, D.5477
 221 00cc 0322     		movs	r2, #3	@ tmp196,
 222 00ce 2A40     		ands	r2, r5	@ D.5478, D.5478
 223 00d0 D200     		lsls	r2, r2, #3	@ D.5478, D.5478,
 224 00d2 9040     		lsls	r0, r0, r2	@ D.5478, D.5478, D.5478
 225 00d4 0200     		movs	r2, r0	@ D.5478, D.5478
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 226              		.loc 1 898 0
 227 00d6 0A43     		orrs	r2, r1	@ D.5478, D.5478
 228 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 229 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 230 00dc 1A51     		str	r2, [r3, r4]	@ D.5478, _35->IP
 231              	.L7:
 232              		.loc 1 900 0
 233 00de C046     		nop
 234 00e0 03B0     		add	sp, sp, #12	@,,
 235              		@ sp needed	@
 236 00e2 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/cc8xR3gm.s 			page 21


 237              	.L9:
 238              		.align	2
 239              	.L8:
 240 00e4 00ED00E0 		.word	-536810240
 241 00e8 00E100E0 		.word	-536813312
 242              		.cfi_endproc
 243              	.LFE16:
 244              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 245              		.comm	ptx1,4,4
 246              		.comm	ptx1_pckt_index,4,4
 247              		.comm	prx1,4,4
 248              		.comm	ptx2,4,4
 249              		.comm	ptx2_pckt_index,4,4
 250              		.comm	prx2,4,4
 251              		.global	pckt_gps_ready
 252              		.section	.bss.pckt_gps_ready,"aw",%nobits
 253              		.type	pckt_gps_ready, %object
 254              		.size	pckt_gps_ready, 1
 255              	pckt_gps_ready:
 256 0000 00       		.space	1
 257              		.global	usart_mode
 258              		.section	.data.usart_mode,"aw",%progbits
 259              		.type	usart_mode, %object
 260              		.size	usart_mode, 1
 261              	usart_mode:
 262 0000 01       		.byte	1
 263              		.section	.text.Usart1Mode,"ax",%progbits
 264              		.align	2
 265              		.global	Usart1Mode
 266              		.code	16
 267              		.thumb_func
 268              		.type	Usart1Mode, %function
 269              	Usart1Mode:
 270              	.LFB20:
 271              		.file 2 "src/uart.c"
   1:src/uart.c    **** /**
   2:src/uart.c    ****   ******************************************************************************
   3:src/uart.c    ****   * @file    Template_2/stm32f0_uart.c
   4:src/uart.c    ****   * @author  Nahuel
   5:src/uart.c    ****   * @version V1.0
   6:src/uart.c    ****   * @date    22-August-2014
   7:src/uart.c    ****   * @brief   UART functions.
   8:src/uart.c    ****   ******************************************************************************
   9:src/uart.c    ****   * @attention
  10:src/uart.c    ****   *
  11:src/uart.c    ****   * Use this functions to configure serial comunication interface (UART).
  12:src/uart.c    ****   *
  13:src/uart.c    ****   ******************************************************************************
  14:src/uart.c    ****   */
  15:src/uart.c    **** 
  16:src/uart.c    **** /* Includes ------------------------------------------------------------------*/
  17:src/uart.c    **** #include "hard.h"
  18:src/uart.c    **** #include "stm32f0xx.h"
  19:src/uart.c    **** #include "uart.h"
  20:src/uart.c    **** 
  21:src/uart.c    **** #include "gps_vktel.h"
  22:src/uart.c    **** 
ARM GAS  /tmp/cc8xR3gm.s 			page 22


  23:src/uart.c    **** #include <string.h>
  24:src/uart.c    **** 
  25:src/uart.c    **** 
  26:src/uart.c    **** 
  27:src/uart.c    **** 
  28:src/uart.c    **** //--- Private typedef ---//
  29:src/uart.c    **** //--- Private define ---//
  30:src/uart.c    **** //--- Private macro ---//
  31:src/uart.c    **** 
  32:src/uart.c    **** //#define USE_USARTx_TIMEOUT
  33:src/uart.c    **** 
  34:src/uart.c    **** 
  35:src/uart.c    **** 
  36:src/uart.c    **** //--- Externals variables ---//
  37:src/uart.c    **** 
  38:src/uart.c    **** //--- Externals del GPS ---//
  39:src/uart.c    **** extern volatile unsigned char usart1_mini_timeout;
  40:src/uart.c    **** extern volatile unsigned char usart1_pckt_ready;
  41:src/uart.c    **** extern volatile unsigned char usart1_have_data;
  42:src/uart.c    **** 
  43:src/uart.c    **** #ifdef USE_GSM_GATEWAY
  44:src/uart.c    **** extern volatile unsigned char usart2_mini_timeout;
  45:src/uart.c    **** extern volatile unsigned char usart2_pckt_ready;
  46:src/uart.c    **** extern volatile unsigned char usart2_have_data;
  47:src/uart.c    **** #endif
  48:src/uart.c    **** 
  49:src/uart.c    **** //#define data512		data1		//en rx es la trama recibida; en tx es la trama a enviar
  50:src/uart.c    **** //#define data256		data		//en rx son los valores del channel elegido
  51:src/uart.c    **** //volatile unsigned char * pdmx;
  52:src/uart.c    **** 
  53:src/uart.c    **** extern volatile unsigned char tx1buff[];
  54:src/uart.c    **** extern volatile unsigned char rx1buff[];
  55:src/uart.c    **** 
  56:src/uart.c    **** extern volatile unsigned char tx2buff[];
  57:src/uart.c    **** extern volatile unsigned char rx2buff[];
  58:src/uart.c    **** 
  59:src/uart.c    **** //--- Private variables ---//
  60:src/uart.c    **** volatile unsigned char * ptx1;
  61:src/uart.c    **** volatile unsigned char * ptx1_pckt_index;
  62:src/uart.c    **** volatile unsigned char * prx1;
  63:src/uart.c    **** 
  64:src/uart.c    **** volatile unsigned char * ptx2;
  65:src/uart.c    **** volatile unsigned char * ptx2_pckt_index;
  66:src/uart.c    **** volatile unsigned char * prx2;
  67:src/uart.c    **** 
  68:src/uart.c    **** volatile unsigned char pckt_gps_ready = 0;
  69:src/uart.c    **** volatile unsigned char usart_mode = USART_GPS_MODE;
  70:src/uart.c    **** 
  71:src/uart.c    **** //Reception buffer.
  72:src/uart.c    **** 
  73:src/uart.c    **** //Transmission buffer.
  74:src/uart.c    **** 
  75:src/uart.c    **** //--- Private function prototypes ---//
  76:src/uart.c    **** //--- Private functions ---//
  77:src/uart.c    **** 
  78:src/uart.c    **** //cambio de modo al USART del GPS al GSM
  79:src/uart.c    **** //le paso el modo o le pregunto
ARM GAS  /tmp/cc8xR3gm.s 			page 23


  80:src/uart.c    **** //responde modo
  81:src/uart.c    **** unsigned char Usart1Mode (unsigned char new_mode)
  82:src/uart.c    **** {
 272              		.loc 2 82 0
 273              		.cfi_startproc
 274 0000 84B0     		sub	sp, sp, #16	@,,
 275              	.LCFI3:
 276              		.cfi_def_cfa_offset 16
 277 0002 0200     		movs	r2, r0	@ tmp142, new_mode
 278 0004 6B46     		mov	r3, sp	@ tmp202,
 279 0006 0733     		adds	r3, r3, #7	@ tmp143,
 280 0008 1A70     		strb	r2, [r3]	@ tmp144, new_mode
  83:src/uart.c    **** 	unsigned int temp_int;
  84:src/uart.c    **** 	unsigned int temp_gpio;
  85:src/uart.c    **** 
  86:src/uart.c    **** 	temp_int = USART1->CR1;
 281              		.loc 2 86 0
 282 000a 3A4B     		ldr	r3, .L14	@ D.5481,
 283 000c 1B68     		ldr	r3, [r3]	@ tmp145, _3->CR1
 284 000e 0393     		str	r3, [sp, #12]	@ tmp145, temp_int
  87:src/uart.c    **** 	USART1->CR1 &= 0xFFFFFF6F;		//limpio flags IE
 285              		.loc 2 87 0
 286 0010 384B     		ldr	r3, .L14	@ D.5481,
 287 0012 384A     		ldr	r2, .L14	@ D.5481,
 288 0014 1268     		ldr	r2, [r2]	@ D.5482, _7->CR1
 289 0016 9021     		movs	r1, #144	@ tmp146,
 290 0018 8A43     		bics	r2, r1	@ D.5482, tmp146
 291 001a 1A60     		str	r2, [r3]	@ D.5482, _6->CR1
  88:src/uart.c    **** 
  89:src/uart.c    **** 	if (new_mode == USART_GPS_MODE)
 292              		.loc 2 89 0
 293 001c 6B46     		mov	r3, sp	@ tmp203,
 294 001e 0733     		adds	r3, r3, #7	@ tmp147,
 295 0020 1B78     		ldrb	r3, [r3]	@ tmp148, new_mode
 296 0022 012B     		cmp	r3, #1	@ tmp148,
 297 0024 2BD1     		bne	.L11	@,
  90:src/uart.c    **** 	{
  91:src/uart.c    **** 		//config gpio A to Input
  92:src/uart.c    **** 		temp_gpio = GPIOA->MODER;		//2 bits por pin
 298              		.loc 2 92 0
 299 0026 9023     		movs	r3, #144	@ tmp197,
 300 0028 DB05     		lsls	r3, r3, #23	@ D.5483, tmp197,
 301 002a 1B68     		ldr	r3, [r3]	@ tmp149, _12->MODER
 302 002c 0293     		str	r3, [sp, #8]	@ tmp149, temp_gpio
  93:src/uart.c    **** 		temp_gpio &= 0xFFC3FFFF;		//PA9 PA10 input
 303              		.loc 2 93 0
 304 002e 029B     		ldr	r3, [sp, #8]	@ tmp151, temp_gpio
 305 0030 314A     		ldr	r2, .L14+4	@ tmp152,
 306 0032 1340     		ands	r3, r2	@ tmp150, tmp152
 307 0034 0293     		str	r3, [sp, #8]	@ tmp150, temp_gpio
  94:src/uart.c    **** 		temp_gpio |= 0x00000000;		//
  95:src/uart.c    **** 		GPIOA->MODER = temp_gpio;
 308              		.loc 2 95 0
 309 0036 9023     		movs	r3, #144	@ tmp198,
 310 0038 DB05     		lsls	r3, r3, #23	@ D.5483, tmp198,
 311 003a 029A     		ldr	r2, [sp, #8]	@ tmp153, temp_gpio
 312 003c 1A60     		str	r2, [r3]	@ tmp153, _16->MODER
ARM GAS  /tmp/cc8xR3gm.s 			page 24


  96:src/uart.c    **** 
  97:src/uart.c    **** 		GPIOA->AFR[1] &= 0xFFFFF00F;	//PA9 -> AF0 A10 -> AF0
 313              		.loc 2 97 0
 314 003e 9023     		movs	r3, #144	@ tmp199,
 315 0040 DB05     		lsls	r3, r3, #23	@ D.5483, tmp199,
 316 0042 9022     		movs	r2, #144	@ tmp200,
 317 0044 D205     		lsls	r2, r2, #23	@ D.5483, tmp200,
 318 0046 526A     		ldr	r2, [r2, #36]	@ D.5482, _19->AFR
 319 0048 2C49     		ldr	r1, .L14+8	@ tmp154,
 320 004a 0A40     		ands	r2, r1	@ D.5482, tmp154
 321 004c 5A62     		str	r2, [r3, #36]	@ D.5482, _18->AFR
  98:src/uart.c    **** 
  99:src/uart.c    **** 		//config gpio B to Alternative
 100:src/uart.c    **** 		temp_gpio = GPIOB->MODER;		//2 bits por pin
 322              		.loc 2 100 0
 323 004e 2C4B     		ldr	r3, .L14+12	@ D.5483,
 324 0050 1B68     		ldr	r3, [r3]	@ tmp155, _23->MODER
 325 0052 0293     		str	r3, [sp, #8]	@ tmp155, temp_gpio
 101:src/uart.c    **** 		temp_gpio &= 0xFFFF0FFF;		//PB6 PB7 alternative
 326              		.loc 2 101 0
 327 0054 029B     		ldr	r3, [sp, #8]	@ tmp157, temp_gpio
 328 0056 2B4A     		ldr	r2, .L14+16	@ tmp158,
 329 0058 1340     		ands	r3, r2	@ tmp156, tmp158
 330 005a 0293     		str	r3, [sp, #8]	@ tmp156, temp_gpio
 102:src/uart.c    **** 		temp_gpio |= 0x0000A000;		//
 331              		.loc 2 102 0
 332 005c 029B     		ldr	r3, [sp, #8]	@ tmp160, temp_gpio
 333 005e A022     		movs	r2, #160	@ tmp201,
 334 0060 1202     		lsls	r2, r2, #8	@ tmp161, tmp201,
 335 0062 1343     		orrs	r3, r2	@ tmp159, tmp161
 336 0064 0293     		str	r3, [sp, #8]	@ tmp159, temp_gpio
 103:src/uart.c    **** 		GPIOB->MODER = temp_gpio;
 337              		.loc 2 103 0
 338 0066 264B     		ldr	r3, .L14+12	@ D.5483,
 339 0068 029A     		ldr	r2, [sp, #8]	@ tmp162, temp_gpio
 340 006a 1A60     		str	r2, [r3]	@ tmp162, _27->MODER
 104:src/uart.c    **** 
 105:src/uart.c    **** 		GPIOB->AFR[0] &= 0x00FFFFFF;	//PB7 -> AF0 PB6 -> AF0
 341              		.loc 2 105 0
 342 006c 244B     		ldr	r3, .L14+12	@ D.5483,
 343 006e 244A     		ldr	r2, .L14+12	@ D.5483,
 344 0070 126A     		ldr	r2, [r2, #32]	@ D.5482, _30->AFR
 345 0072 1202     		lsls	r2, r2, #8	@ tmp163, D.5482,
 346 0074 120A     		lsrs	r2, r2, #8	@ D.5482, tmp163,
 347 0076 1A62     		str	r2, [r3, #32]	@ D.5482, _29->AFR
 106:src/uart.c    **** 
 107:src/uart.c    **** 		usart_mode = USART_GPS_MODE;
 348              		.loc 2 107 0
 349 0078 234B     		ldr	r3, .L14+20	@ tmp164,
 350 007a 0122     		movs	r2, #1	@ tmp165,
 351 007c 1A70     		strb	r2, [r3]	@ tmp166, usart_mode
 352              	.L11:
 108:src/uart.c    **** 	}
 109:src/uart.c    **** 
 110:src/uart.c    **** 	if (new_mode == USART_GSM_MODE)
 353              		.loc 2 110 0
 354 007e 6B46     		mov	r3, sp	@ tmp204,
ARM GAS  /tmp/cc8xR3gm.s 			page 25


 355 0080 0733     		adds	r3, r3, #7	@ tmp167,
 356 0082 1B78     		ldrb	r3, [r3]	@ tmp168, new_mode
 357 0084 022B     		cmp	r3, #2	@ tmp168,
 358 0086 2CD1     		bne	.L12	@,
 111:src/uart.c    **** 	{
 112:src/uart.c    **** 		//config gpio B to Input
 113:src/uart.c    **** 		temp_gpio = GPIOB->MODER;		//2 bits por pin
 359              		.loc 2 113 0
 360 0088 1D4B     		ldr	r3, .L14+12	@ D.5483,
 361 008a 1B68     		ldr	r3, [r3]	@ tmp169, _35->MODER
 362 008c 0293     		str	r3, [sp, #8]	@ tmp169, temp_gpio
 114:src/uart.c    **** 		temp_gpio &= 0xFFFF0FFF;		//PB6 PB7 input
 363              		.loc 2 114 0
 364 008e 029B     		ldr	r3, [sp, #8]	@ tmp171, temp_gpio
 365 0090 1C4A     		ldr	r2, .L14+16	@ tmp172,
 366 0092 1340     		ands	r3, r2	@ tmp170, tmp172
 367 0094 0293     		str	r3, [sp, #8]	@ tmp170, temp_gpio
 115:src/uart.c    **** 		temp_gpio |= 0x00000000;		//
 116:src/uart.c    **** 		GPIOB->MODER = temp_gpio;
 368              		.loc 2 116 0
 369 0096 1A4B     		ldr	r3, .L14+12	@ D.5483,
 370 0098 029A     		ldr	r2, [sp, #8]	@ tmp173, temp_gpio
 371 009a 1A60     		str	r2, [r3]	@ tmp173, _39->MODER
 117:src/uart.c    **** 
 118:src/uart.c    **** 		GPIOB->AFR[0] &= 0x00FFFFFF;	//PB7 -> AF0 PB6 -> AF0
 372              		.loc 2 118 0
 373 009c 184B     		ldr	r3, .L14+12	@ D.5483,
 374 009e 184A     		ldr	r2, .L14+12	@ D.5483,
 375 00a0 126A     		ldr	r2, [r2, #32]	@ D.5482, _42->AFR
 376 00a2 1202     		lsls	r2, r2, #8	@ tmp174, D.5482,
 377 00a4 120A     		lsrs	r2, r2, #8	@ D.5482, tmp174,
 378 00a6 1A62     		str	r2, [r3, #32]	@ D.5482, _41->AFR
 119:src/uart.c    **** 
 120:src/uart.c    **** 		//config gpio A to Alternative
 121:src/uart.c    **** 		temp_gpio = GPIOA->MODER;		//2 bits por pin
 379              		.loc 2 121 0
 380 00a8 9023     		movs	r3, #144	@ tmp191,
 381 00aa DB05     		lsls	r3, r3, #23	@ D.5483, tmp191,
 382 00ac 1B68     		ldr	r3, [r3]	@ tmp175, _46->MODER
 383 00ae 0293     		str	r3, [sp, #8]	@ tmp175, temp_gpio
 122:src/uart.c    **** 		temp_gpio &= 0xFFC3FFFF;		//PA9 PA10 alternative
 384              		.loc 2 122 0
 385 00b0 029B     		ldr	r3, [sp, #8]	@ tmp177, temp_gpio
 386 00b2 114A     		ldr	r2, .L14+4	@ tmp178,
 387 00b4 1340     		ands	r3, r2	@ tmp176, tmp178
 388 00b6 0293     		str	r3, [sp, #8]	@ tmp176, temp_gpio
 123:src/uart.c    **** 		temp_gpio |= 0x00280000;		//
 389              		.loc 2 123 0
 390 00b8 029B     		ldr	r3, [sp, #8]	@ tmp180, temp_gpio
 391 00ba A022     		movs	r2, #160	@ tmp192,
 392 00bc 9203     		lsls	r2, r2, #14	@ tmp181, tmp192,
 393 00be 1343     		orrs	r3, r2	@ tmp179, tmp181
 394 00c0 0293     		str	r3, [sp, #8]	@ tmp179, temp_gpio
 124:src/uart.c    **** 		GPIOA->MODER = temp_gpio;
 395              		.loc 2 124 0
 396 00c2 9023     		movs	r3, #144	@ tmp193,
 397 00c4 DB05     		lsls	r3, r3, #23	@ D.5483, tmp193,
ARM GAS  /tmp/cc8xR3gm.s 			page 26


 398 00c6 029A     		ldr	r2, [sp, #8]	@ tmp182, temp_gpio
 399 00c8 1A60     		str	r2, [r3]	@ tmp182, _50->MODER
 125:src/uart.c    **** 
 126:src/uart.c    **** 		GPIOA->AFR[1] |= 0x00000110;	//PA10 -> AF1 PA9 -> AF1
 400              		.loc 2 126 0
 401 00ca 9023     		movs	r3, #144	@ tmp194,
 402 00cc DB05     		lsls	r3, r3, #23	@ D.5483, tmp194,
 403 00ce 9022     		movs	r2, #144	@ tmp195,
 404 00d0 D205     		lsls	r2, r2, #23	@ D.5483, tmp195,
 405 00d2 526A     		ldr	r2, [r2, #36]	@ D.5482, _53->AFR
 406 00d4 8821     		movs	r1, #136	@ tmp196,
 407 00d6 4900     		lsls	r1, r1, #1	@ tmp183, tmp196,
 408 00d8 0A43     		orrs	r2, r1	@ D.5482, tmp183
 409 00da 5A62     		str	r2, [r3, #36]	@ D.5482, _52->AFR
 127:src/uart.c    **** 
 128:src/uart.c    **** 		usart_mode = USART_GSM_MODE;
 410              		.loc 2 128 0
 411 00dc 0A4B     		ldr	r3, .L14+20	@ tmp184,
 412 00de 0222     		movs	r2, #2	@ tmp185,
 413 00e0 1A70     		strb	r2, [r3]	@ tmp186, usart_mode
 414              	.L12:
 129:src/uart.c    **** 	}
 130:src/uart.c    **** 
 131:src/uart.c    **** 	USART1->CR1 = temp_int;
 415              		.loc 2 131 0
 416 00e2 044B     		ldr	r3, .L14	@ D.5481,
 417 00e4 039A     		ldr	r2, [sp, #12]	@ tmp187, temp_int
 418 00e6 1A60     		str	r2, [r3]	@ tmp187, _58->CR1
 132:src/uart.c    **** 	return usart_mode;
 419              		.loc 2 132 0
 420 00e8 074B     		ldr	r3, .L14+20	@ tmp188,
 421 00ea 1B78     		ldrb	r3, [r3]	@ tmp189, usart_mode
 422 00ec DBB2     		uxtb	r3, r3	@ D.5484, tmp189
 133:src/uart.c    **** }
 423              		.loc 2 133 0
 424 00ee 1800     		movs	r0, r3	@, <retval>
 425 00f0 04B0     		add	sp, sp, #16	@,,
 426              		@ sp needed	@
 427 00f2 7047     		bx	lr
 428              	.L15:
 429              		.align	2
 430              	.L14:
 431 00f4 00380140 		.word	1073821696
 432 00f8 FFFFC3FF 		.word	-3932161
 433 00fc 0FF0FFFF 		.word	-4081
 434 0100 00040048 		.word	1207960576
 435 0104 FF0FFFFF 		.word	-61441
 436 0108 00000000 		.word	usart_mode
 437              		.cfi_endproc
 438              	.LFE20:
 439              		.size	Usart1Mode, .-Usart1Mode
 440              		.section	.text.ReadUsart1Buffer,"ax",%progbits
 441              		.align	2
 442              		.global	ReadUsart1Buffer
 443              		.code	16
 444              		.thumb_func
 445              		.type	ReadUsart1Buffer, %function
ARM GAS  /tmp/cc8xR3gm.s 			page 27


 446              	ReadUsart1Buffer:
 447              	.LFB21:
 134:src/uart.c    **** 
 135:src/uart.c    **** unsigned char ReadUsart1Buffer (unsigned char * bout, unsigned short max_len)
 136:src/uart.c    **** {
 448              		.loc 2 136 0
 449              		.cfi_startproc
 450 0000 00B5     		push	{lr}	@
 451              	.LCFI4:
 452              		.cfi_def_cfa_offset 4
 453              		.cfi_offset 14, -4
 454 0002 85B0     		sub	sp, sp, #20	@,,
 455              	.LCFI5:
 456              		.cfi_def_cfa_offset 24
 457 0004 0190     		str	r0, [sp, #4]	@ bout, bout
 458 0006 0A00     		movs	r2, r1	@ tmp117, max_len
 459 0008 6B46     		mov	r3, sp	@ tmp136,
 460 000a 0233     		adds	r3, r3, #2	@ tmp118,
 461 000c 1A80     		strh	r2, [r3]	@ tmp119, max_len
 137:src/uart.c    **** 	unsigned int len;
 138:src/uart.c    **** 
 139:src/uart.c    **** 	len = prx1 - rx1buff;
 462              		.loc 2 139 0
 463 000e 124B     		ldr	r3, .L20	@ tmp120,
 464 0010 1B68     		ldr	r3, [r3]	@ D.5485, prx1
 465 0012 1A00     		movs	r2, r3	@ D.5486, D.5485
 466 0014 114B     		ldr	r3, .L20+4	@ D.5486,
 467 0016 D31A     		subs	r3, r2, r3	@ D.5486, D.5486, D.5486
 468 0018 0393     		str	r3, [sp, #12]	@ D.5486, len
 140:src/uart.c    **** 
 141:src/uart.c    **** 	if (len < max_len)
 469              		.loc 2 141 0
 470 001a 6B46     		mov	r3, sp	@ tmp137,
 471 001c 0233     		adds	r3, r3, #2	@ tmp121,
 472 001e 1A88     		ldrh	r2, [r3]	@ D.5487, max_len
 473 0020 039B     		ldr	r3, [sp, #12]	@ tmp122, len
 474 0022 9A42     		cmp	r2, r3	@ D.5487, tmp122
 475 0024 06D9     		bls	.L17	@,
 142:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx1buff, len);
 476              		.loc 2 142 0
 477 0026 039A     		ldr	r2, [sp, #12]	@ tmp123, len
 478 0028 0C49     		ldr	r1, .L20+4	@ tmp124,
 479 002a 019B     		ldr	r3, [sp, #4]	@ tmp125, bout
 480 002c 1800     		movs	r0, r3	@, tmp125
 481 002e FFF7FEFF 		bl	memcpy	@
 482 0032 09E0     		b	.L18	@
 483              	.L17:
 143:src/uart.c    **** 	else
 144:src/uart.c    **** 	{
 145:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx1buff, len);
 484              		.loc 2 145 0
 485 0034 039A     		ldr	r2, [sp, #12]	@ tmp126, len
 486 0036 0949     		ldr	r1, .L20+4	@ tmp127,
 487 0038 019B     		ldr	r3, [sp, #4]	@ tmp128, bout
 488 003a 1800     		movs	r0, r3	@, tmp128
 489 003c FFF7FEFF 		bl	memcpy	@
 146:src/uart.c    **** 		len = max_len;
ARM GAS  /tmp/cc8xR3gm.s 			page 28


 490              		.loc 2 146 0
 491 0040 6B46     		mov	r3, sp	@ tmp138,
 492 0042 0233     		adds	r3, r3, #2	@ tmp129,
 493 0044 1B88     		ldrh	r3, [r3]	@ tmp130, max_len
 494 0046 0393     		str	r3, [sp, #12]	@ tmp130, len
 495              	.L18:
 147:src/uart.c    **** 	}
 148:src/uart.c    **** 
 149:src/uart.c    **** 	//ajusto punteros de rx luego de la copia
 150:src/uart.c    **** 	prx1 = rx1buff;
 496              		.loc 2 150 0
 497 0048 034B     		ldr	r3, .L20	@ tmp131,
 498 004a 044A     		ldr	r2, .L20+4	@ tmp132,
 499 004c 1A60     		str	r2, [r3]	@ tmp132, prx1
 151:src/uart.c    **** 
 152:src/uart.c    **** 	return (unsigned char) len;
 500              		.loc 2 152 0
 501 004e 039B     		ldr	r3, [sp, #12]	@ tmp134, len
 502 0050 DBB2     		uxtb	r3, r3	@ D.5488, tmp133
 153:src/uart.c    **** }
 503              		.loc 2 153 0
 504 0052 1800     		movs	r0, r3	@, <retval>
 505 0054 05B0     		add	sp, sp, #20	@,,
 506              		@ sp needed	@
 507 0056 00BD     		pop	{pc}
 508              	.L21:
 509              		.align	2
 510              	.L20:
 511 0058 00000000 		.word	prx1
 512 005c 00000000 		.word	rx1buff
 513              		.cfi_endproc
 514              	.LFE21:
 515              		.size	ReadUsart1Buffer, .-ReadUsart1Buffer
 516              		.section	.text.USART1_IRQHandler,"ax",%progbits
 517              		.align	2
 518              		.global	USART1_IRQHandler
 519              		.code	16
 520              		.thumb_func
 521              		.type	USART1_IRQHandler, %function
 522              	USART1_IRQHandler:
 523              	.LFB22:
 154:src/uart.c    **** 
 155:src/uart.c    **** void USART1_IRQHandler(void)
 156:src/uart.c    **** {
 524              		.loc 2 156 0
 525              		.cfi_startproc
 526 0000 82B0     		sub	sp, sp, #8	@,,
 527              	.LCFI6:
 528              		.cfi_def_cfa_offset 8
 157:src/uart.c    **** 	unsigned char dummy;
 158:src/uart.c    **** 
 159:src/uart.c    **** 	/* USART in mode Receiver --------------------------------------------------*/
 160:src/uart.c    **** 	if (USART1->ISR & USART_ISR_RXNE)
 529              		.loc 2 160 0
 530 0002 3B4B     		ldr	r3, .L31	@ D.5489,
 531 0004 DB69     		ldr	r3, [r3, #28]	@ D.5490, _5->ISR
 532 0006 2022     		movs	r2, #32	@ tmp155,
ARM GAS  /tmp/cc8xR3gm.s 			page 29


 533 0008 1340     		ands	r3, r2	@ D.5490, tmp155
 534 000a 25D0     		beq	.L23	@,
 161:src/uart.c    **** 	{
 162:src/uart.c    **** 		dummy = USART1->RDR & 0x0FF;
 535              		.loc 2 162 0
 536 000c 384B     		ldr	r3, .L31	@ D.5489,
 537 000e 9B8C     		ldrh	r3, [r3, #36]	@ tmp157,
 538 0010 9AB2     		uxth	r2, r3	@ D.5491, tmp157
 539 0012 6B46     		mov	r3, sp	@ tmp201,
 540 0014 0733     		adds	r3, r3, #7	@ tmp158,
 541 0016 1A70     		strb	r2, [r3]	@ tmp159, dummy
 163:src/uart.c    **** 
 164:src/uart.c    **** 		//RX GPS & GSM
 165:src/uart.c    **** 		if ((usart_mode == USART_GPS_MODE) || (usart_mode == USART_GSM_MODE))
 542              		.loc 2 165 0
 543 0018 364B     		ldr	r3, .L31+4	@ tmp160,
 544 001a 1B78     		ldrb	r3, [r3]	@ tmp161, usart_mode
 545 001c DBB2     		uxtb	r3, r3	@ D.5492, tmp161
 546 001e 012B     		cmp	r3, #1	@ D.5492,
 547 0020 04D0     		beq	.L24	@,
 548              		.loc 2 165 0 is_stmt 0 discriminator 1
 549 0022 344B     		ldr	r3, .L31+4	@ tmp162,
 550 0024 1B78     		ldrb	r3, [r3]	@ tmp163, usart_mode
 551 0026 DBB2     		uxtb	r3, r3	@ D.5492, tmp163
 552 0028 022B     		cmp	r3, #2	@ D.5492,
 553 002a 15D1     		bne	.L23	@,
 554              	.L24:
 166:src/uart.c    **** 		{
 167:src/uart.c    **** 			if (prx1 < &rx1buff[SIZEOF_DATA])
 555              		.loc 2 167 0 is_stmt 1
 556 002c 324B     		ldr	r3, .L31+8	@ tmp164,
 557 002e 1A68     		ldr	r2, [r3]	@ D.5493, prx1
 558 0030 324B     		ldr	r3, .L31+12	@ tmp165,
 559 0032 9A42     		cmp	r2, r3	@ D.5493, tmp165
 560 0034 0DD2     		bcs	.L25	@,
 168:src/uart.c    **** 			{
 169:src/uart.c    **** 				*prx1 = dummy;
 561              		.loc 2 169 0
 562 0036 304B     		ldr	r3, .L31+8	@ tmp166,
 563 0038 1B68     		ldr	r3, [r3]	@ D.5493, prx1
 564 003a 6A46     		mov	r2, sp	@ tmp202,
 565 003c 0732     		adds	r2, r2, #7	@ tmp167,
 566 003e 1278     		ldrb	r2, [r2]	@ tmp168, dummy
 567 0040 1A70     		strb	r2, [r3]	@ tmp168, *_15
 170:src/uart.c    **** 				prx1++;
 568              		.loc 2 170 0
 569 0042 2D4B     		ldr	r3, .L31+8	@ tmp169,
 570 0044 1B68     		ldr	r3, [r3]	@ D.5493, prx1
 571 0046 5A1C     		adds	r2, r3, #1	@ D.5493, D.5493,
 572 0048 2B4B     		ldr	r3, .L31+8	@ tmp170,
 573 004a 1A60     		str	r2, [r3]	@ D.5493, prx1
 171:src/uart.c    **** 				usart1_have_data = 1;
 574              		.loc 2 171 0
 575 004c 2C4B     		ldr	r3, .L31+16	@ tmp171,
 576 004e 0122     		movs	r2, #1	@ tmp172,
 577 0050 1A70     		strb	r2, [r3]	@ tmp173, usart1_have_data
 578              	.L25:
ARM GAS  /tmp/cc8xR3gm.s 			page 30


 172:src/uart.c    **** 			}
 173:src/uart.c    **** 			usart1_mini_timeout = TT_GPS_MINI;
 579              		.loc 2 173 0
 580 0052 2C4B     		ldr	r3, .L31+20	@ tmp174,
 581 0054 0522     		movs	r2, #5	@ tmp175,
 582 0056 1A70     		strb	r2, [r3]	@ tmp176, usart1_mini_timeout
 583              	.L23:
 174:src/uart.c    **** 		}
 175:src/uart.c    **** 
 176:src/uart.c    **** //		//RX GSM
 177:src/uart.c    **** //		if (usart_mode == USART_GSM_MODE)
 178:src/uart.c    **** //		{
 179:src/uart.c    **** //			if (prx1 < &rx1buff[SIZEOF_DATA])
 180:src/uart.c    **** //			{
 181:src/uart.c    **** //				*prx1 = dummy;
 182:src/uart.c    **** //				prx1++;
 183:src/uart.c    **** //				gsm_have_data = 1;
 184:src/uart.c    **** //			}
 185:src/uart.c    **** //			gsm_mini_timeout = TT_GSM_MINI;
 186:src/uart.c    **** //		}
 187:src/uart.c    **** 	}
 188:src/uart.c    **** 
 189:src/uart.c    **** 	/* USART in mode Transmitter -------------------------------------------------*/
 190:src/uart.c    **** 
 191:src/uart.c    **** 	if (USART1->CR1 & USART_CR1_TXEIE)
 584              		.loc 2 191 0
 585 0058 254B     		ldr	r3, .L31	@ D.5489,
 586 005a 1B68     		ldr	r3, [r3]	@ D.5490, _22->CR1
 587 005c 8022     		movs	r2, #128	@ tmp177,
 588 005e 1340     		ands	r3, r2	@ D.5490, tmp177
 589 0060 28D0     		beq	.L26	@,
 192:src/uart.c    **** 	{
 193:src/uart.c    **** 		if (USART1->ISR & USART_ISR_TXE)
 590              		.loc 2 193 0
 591 0062 234B     		ldr	r3, .L31	@ D.5489,
 592 0064 DB69     		ldr	r3, [r3, #28]	@ D.5490, _25->ISR
 593 0066 8022     		movs	r2, #128	@ tmp178,
 594 0068 1340     		ands	r3, r2	@ D.5490, tmp178
 595 006a 23D0     		beq	.L26	@,
 194:src/uart.c    **** 		{
 195:src/uart.c    **** 			if ((ptx1 < &tx1buff[SIZEOF_DATA]) && (ptx1 < ptx1_pckt_index))
 596              		.loc 2 195 0
 597 006c 264B     		ldr	r3, .L31+24	@ tmp179,
 598 006e 1A68     		ldr	r2, [r3]	@ D.5493, ptx1
 599 0070 264B     		ldr	r3, .L31+28	@ tmp180,
 600 0072 9A42     		cmp	r2, r3	@ D.5493, tmp180
 601 0074 12D2     		bcs	.L27	@,
 602              		.loc 2 195 0 is_stmt 0 discriminator 1
 603 0076 244B     		ldr	r3, .L31+24	@ tmp181,
 604 0078 1A68     		ldr	r2, [r3]	@ D.5493, ptx1
 605 007a 254B     		ldr	r3, .L31+32	@ tmp182,
 606 007c 1B68     		ldr	r3, [r3]	@ D.5493, ptx1_pckt_index
 607 007e 9A42     		cmp	r2, r3	@ D.5493, D.5493
 608 0080 0CD2     		bcs	.L27	@,
 196:src/uart.c    **** 			{
 197:src/uart.c    **** 				USART1->TDR = *ptx1;
 609              		.loc 2 197 0 is_stmt 1
ARM GAS  /tmp/cc8xR3gm.s 			page 31


 610 0082 1B4A     		ldr	r2, .L31	@ D.5489,
 611 0084 204B     		ldr	r3, .L31+24	@ tmp183,
 612 0086 1B68     		ldr	r3, [r3]	@ D.5493, ptx1
 613 0088 1B78     		ldrb	r3, [r3]	@ tmp184, *_32
 614 008a DBB2     		uxtb	r3, r3	@ D.5492, tmp184
 615 008c 9BB2     		uxth	r3, r3	@ D.5491, D.5492
 616 008e 1385     		strh	r3, [r2, #40]	@ tmp185, _31->TDR
 198:src/uart.c    **** 				ptx1++;
 617              		.loc 2 198 0
 618 0090 1D4B     		ldr	r3, .L31+24	@ tmp186,
 619 0092 1B68     		ldr	r3, [r3]	@ D.5493, ptx1
 620 0094 5A1C     		adds	r2, r3, #1	@ D.5493, D.5493,
 621 0096 1C4B     		ldr	r3, .L31+24	@ tmp187,
 622 0098 1A60     		str	r2, [r3]	@ D.5493, ptx1
 623 009a 0BE0     		b	.L26	@
 624              	.L27:
 199:src/uart.c    **** 			}
 200:src/uart.c    **** 			else
 201:src/uart.c    **** 			{
 202:src/uart.c    **** 				ptx1 = tx1buff;
 625              		.loc 2 202 0
 626 009c 1A4B     		ldr	r3, .L31+24	@ tmp188,
 627 009e 1D4A     		ldr	r2, .L31+36	@ tmp189,
 628 00a0 1A60     		str	r2, [r3]	@ tmp189, ptx1
 203:src/uart.c    **** 				ptx1_pckt_index = tx1buff;
 629              		.loc 2 203 0
 630 00a2 1B4B     		ldr	r3, .L31+32	@ tmp190,
 631 00a4 1B4A     		ldr	r2, .L31+36	@ tmp191,
 632 00a6 1A60     		str	r2, [r3]	@ tmp191, ptx1_pckt_index
 204:src/uart.c    **** 				USART1->CR1 &= ~USART_CR1_TXEIE;
 633              		.loc 2 204 0
 634 00a8 114B     		ldr	r3, .L31	@ D.5489,
 635 00aa 114A     		ldr	r2, .L31	@ D.5489,
 636 00ac 1268     		ldr	r2, [r2]	@ D.5490, _42->CR1
 637 00ae 8021     		movs	r1, #128	@ tmp192,
 638 00b0 8A43     		bics	r2, r1	@ D.5490, tmp192
 639 00b2 1A60     		str	r2, [r3]	@ D.5490, _41->CR1
 640              	.L26:
 205:src/uart.c    **** 			}
 206:src/uart.c    **** 		}
 207:src/uart.c    **** 	}
 208:src/uart.c    **** 
 209:src/uart.c    **** 	if ((USART1->ISR & USART_ISR_ORE) || (USART1->ISR & USART_ISR_NE) || (USART1->ISR & USART_ISR_FE))
 641              		.loc 2 209 0
 642 00b4 0E4B     		ldr	r3, .L31	@ D.5489,
 643 00b6 DB69     		ldr	r3, [r3, #28]	@ D.5490, _46->ISR
 644 00b8 0822     		movs	r2, #8	@ tmp193,
 645 00ba 1340     		ands	r3, r2	@ D.5490, tmp193
 646 00bc 09D1     		bne	.L28	@,
 647              		.loc 2 209 0 is_stmt 0 discriminator 1
 648 00be 0C4B     		ldr	r3, .L31	@ D.5489,
 649 00c0 DB69     		ldr	r3, [r3, #28]	@ D.5490, _49->ISR
 650 00c2 0422     		movs	r2, #4	@ tmp194,
 651 00c4 1340     		ands	r3, r2	@ D.5490, tmp194
 652 00c6 04D1     		bne	.L28	@,
 653              		.loc 2 209 0 discriminator 2
 654 00c8 094B     		ldr	r3, .L31	@ D.5489,
ARM GAS  /tmp/cc8xR3gm.s 			page 32


 655 00ca DB69     		ldr	r3, [r3, #28]	@ D.5490, _52->ISR
 656 00cc 0222     		movs	r2, #2	@ tmp195,
 657 00ce 1340     		ands	r3, r2	@ D.5490, tmp195
 658 00d0 0BD0     		beq	.L30	@,
 659              	.L28:
 210:src/uart.c    **** 	{
 211:src/uart.c    **** 		USART1->ICR |= 0x0e;
 660              		.loc 2 211 0 is_stmt 1
 661 00d2 074B     		ldr	r3, .L31	@ D.5489,
 662 00d4 064A     		ldr	r2, .L31	@ D.5489,
 663 00d6 126A     		ldr	r2, [r2, #32]	@ D.5490, _56->ICR
 664 00d8 0E21     		movs	r1, #14	@ tmp196,
 665 00da 0A43     		orrs	r2, r1	@ D.5490, tmp196
 666 00dc 1A62     		str	r2, [r3, #32]	@ D.5490, _55->ICR
 212:src/uart.c    **** 		dummy = USART1->RDR;
 667              		.loc 2 212 0
 668 00de 044B     		ldr	r3, .L31	@ D.5489,
 669 00e0 9B8C     		ldrh	r3, [r3, #36]	@ tmp198,
 670 00e2 9AB2     		uxth	r2, r3	@ D.5491, tmp198
 671 00e4 6B46     		mov	r3, sp	@ tmp203,
 672 00e6 0733     		adds	r3, r3, #7	@ tmp199,
 673 00e8 1A70     		strb	r2, [r3]	@ tmp200, dummy
 674              	.L30:
 213:src/uart.c    **** 	}
 214:src/uart.c    **** }
 675              		.loc 2 214 0
 676 00ea C046     		nop
 677 00ec 02B0     		add	sp, sp, #8	@,,
 678              		@ sp needed	@
 679 00ee 7047     		bx	lr
 680              	.L32:
 681              		.align	2
 682              	.L31:
 683 00f0 00380140 		.word	1073821696
 684 00f4 00000000 		.word	usart_mode
 685 00f8 00000000 		.word	prx1
 686 00fc 00010000 		.word	rx1buff+256
 687 0100 00000000 		.word	usart1_have_data
 688 0104 00000000 		.word	usart1_mini_timeout
 689 0108 00000000 		.word	ptx1
 690 010c 00010000 		.word	tx1buff+256
 691 0110 00000000 		.word	ptx1_pckt_index
 692 0114 00000000 		.word	tx1buff
 693              		.cfi_endproc
 694              	.LFE22:
 695              		.size	USART1_IRQHandler, .-USART1_IRQHandler
 696              		.section	.text.USART2_IRQHandler,"ax",%progbits
 697              		.align	2
 698              		.global	USART2_IRQHandler
 699              		.code	16
 700              		.thumb_func
 701              		.type	USART2_IRQHandler, %function
 702              	USART2_IRQHandler:
 703              	.LFB23:
 215:src/uart.c    **** 
 216:src/uart.c    **** void USART2_IRQHandler(void)
 217:src/uart.c    **** {
ARM GAS  /tmp/cc8xR3gm.s 			page 33


 704              		.loc 2 217 0
 705              		.cfi_startproc
 706 0000 82B0     		sub	sp, sp, #8	@,,
 707              	.LCFI7:
 708              		.cfi_def_cfa_offset 8
 218:src/uart.c    **** 	unsigned char dummy;
 219:src/uart.c    **** 
 220:src/uart.c    **** 	/* USART in mode Receiver --------------------------------------------------*/
 221:src/uart.c    **** 	if (USART2->ISR & USART_ISR_RXNE)
 709              		.loc 2 221 0
 710 0002 364B     		ldr	r3, .L41	@ D.5494,
 711 0004 DB69     		ldr	r3, [r3, #28]	@ D.5495, _5->ISR
 712 0006 2022     		movs	r2, #32	@ tmp153,
 713 0008 1340     		ands	r3, r2	@ D.5495, tmp153
 714 000a 1BD0     		beq	.L34	@,
 222:src/uart.c    **** 	{
 223:src/uart.c    **** 		//RX WIFI
 224:src/uart.c    **** 		dummy = USART2->RDR & 0x0FF;
 715              		.loc 2 224 0
 716 000c 334B     		ldr	r3, .L41	@ D.5494,
 717 000e 9B8C     		ldrh	r3, [r3, #36]	@ tmp155,
 718 0010 9AB2     		uxth	r2, r3	@ D.5496, tmp155
 719 0012 6B46     		mov	r3, sp	@ tmp195,
 720 0014 0733     		adds	r3, r3, #7	@ tmp156,
 721 0016 1A70     		strb	r2, [r3]	@ tmp157, dummy
 225:src/uart.c    **** 
 226:src/uart.c    **** #ifdef USE_GSM_GATEWAY
 227:src/uart.c    **** 		if (prx2 < &rx2buff[SIZEOF_DATA])
 722              		.loc 2 227 0
 723 0018 314B     		ldr	r3, .L41+4	@ tmp158,
 724 001a 1A68     		ldr	r2, [r3]	@ D.5497, prx2
 725 001c 314B     		ldr	r3, .L41+8	@ tmp159,
 726 001e 9A42     		cmp	r2, r3	@ D.5497, tmp159
 727 0020 0DD2     		bcs	.L35	@,
 228:src/uart.c    **** 		{
 229:src/uart.c    **** 			*prx2 = dummy;
 728              		.loc 2 229 0
 729 0022 2F4B     		ldr	r3, .L41+4	@ tmp160,
 730 0024 1B68     		ldr	r3, [r3]	@ D.5497, prx2
 731 0026 6A46     		mov	r2, sp	@ tmp196,
 732 0028 0732     		adds	r2, r2, #7	@ tmp161,
 733 002a 1278     		ldrb	r2, [r2]	@ tmp162, dummy
 734 002c 1A70     		strb	r2, [r3]	@ tmp162, *_13
 230:src/uart.c    **** 			prx2++;
 735              		.loc 2 230 0
 736 002e 2C4B     		ldr	r3, .L41+4	@ tmp163,
 737 0030 1B68     		ldr	r3, [r3]	@ D.5497, prx2
 738 0032 5A1C     		adds	r2, r3, #1	@ D.5497, D.5497,
 739 0034 2A4B     		ldr	r3, .L41+4	@ tmp164,
 740 0036 1A60     		str	r2, [r3]	@ D.5497, prx2
 231:src/uart.c    **** 			usart2_have_data = 1;
 741              		.loc 2 231 0
 742 0038 2B4B     		ldr	r3, .L41+12	@ tmp165,
 743 003a 0122     		movs	r2, #1	@ tmp166,
 744 003c 1A70     		strb	r2, [r3]	@ tmp167, usart2_have_data
 745              	.L35:
 232:src/uart.c    **** 		}
ARM GAS  /tmp/cc8xR3gm.s 			page 34


 233:src/uart.c    **** 			usart2_mini_timeout = TT_GPS_MINI;
 746              		.loc 2 233 0
 747 003e 2B4B     		ldr	r3, .L41+16	@ tmp168,
 748 0040 0522     		movs	r2, #5	@ tmp169,
 749 0042 1A70     		strb	r2, [r3]	@ tmp170, usart2_mini_timeout
 750              	.L34:
 234:src/uart.c    **** #endif
 235:src/uart.c    **** 
 236:src/uart.c    **** 	}
 237:src/uart.c    **** 
 238:src/uart.c    **** 	/* USART in mode Transmitter -------------------------------------------------*/
 239:src/uart.c    **** 
 240:src/uart.c    **** 	if (USART2->CR1 & USART_CR1_TXEIE)
 751              		.loc 2 240 0
 752 0044 254B     		ldr	r3, .L41	@ D.5494,
 753 0046 1B68     		ldr	r3, [r3]	@ D.5495, _20->CR1
 754 0048 8022     		movs	r2, #128	@ tmp171,
 755 004a 1340     		ands	r3, r2	@ D.5495, tmp171
 756 004c 28D0     		beq	.L36	@,
 241:src/uart.c    **** 	{
 242:src/uart.c    **** 		if (USART2->ISR & USART_ISR_TXE)
 757              		.loc 2 242 0
 758 004e 234B     		ldr	r3, .L41	@ D.5494,
 759 0050 DB69     		ldr	r3, [r3, #28]	@ D.5495, _23->ISR
 760 0052 8022     		movs	r2, #128	@ tmp172,
 761 0054 1340     		ands	r3, r2	@ D.5495, tmp172
 762 0056 23D0     		beq	.L36	@,
 243:src/uart.c    **** 		{
 244:src/uart.c    **** 			if ((ptx2 < &tx2buff[SIZEOF_DATA]) && (ptx2 < ptx2_pckt_index))
 763              		.loc 2 244 0
 764 0058 254B     		ldr	r3, .L41+20	@ tmp173,
 765 005a 1A68     		ldr	r2, [r3]	@ D.5497, ptx2
 766 005c 254B     		ldr	r3, .L41+24	@ tmp174,
 767 005e 9A42     		cmp	r2, r3	@ D.5497, tmp174
 768 0060 12D2     		bcs	.L37	@,
 769              		.loc 2 244 0 is_stmt 0 discriminator 1
 770 0062 234B     		ldr	r3, .L41+20	@ tmp175,
 771 0064 1A68     		ldr	r2, [r3]	@ D.5497, ptx2
 772 0066 244B     		ldr	r3, .L41+28	@ tmp176,
 773 0068 1B68     		ldr	r3, [r3]	@ D.5497, ptx2_pckt_index
 774 006a 9A42     		cmp	r2, r3	@ D.5497, D.5497
 775 006c 0CD2     		bcs	.L37	@,
 245:src/uart.c    **** 			{
 246:src/uart.c    **** 				USART2->TDR = *ptx2;
 776              		.loc 2 246 0 is_stmt 1
 777 006e 1B4A     		ldr	r2, .L41	@ D.5494,
 778 0070 1F4B     		ldr	r3, .L41+20	@ tmp177,
 779 0072 1B68     		ldr	r3, [r3]	@ D.5497, ptx2
 780 0074 1B78     		ldrb	r3, [r3]	@ tmp178, *_30
 781 0076 DBB2     		uxtb	r3, r3	@ D.5498, tmp178
 782 0078 9BB2     		uxth	r3, r3	@ D.5496, D.5498
 783 007a 1385     		strh	r3, [r2, #40]	@ tmp179, _29->TDR
 247:src/uart.c    **** 				ptx2++;
 784              		.loc 2 247 0
 785 007c 1C4B     		ldr	r3, .L41+20	@ tmp180,
 786 007e 1B68     		ldr	r3, [r3]	@ D.5497, ptx2
 787 0080 5A1C     		adds	r2, r3, #1	@ D.5497, D.5497,
ARM GAS  /tmp/cc8xR3gm.s 			page 35


 788 0082 1B4B     		ldr	r3, .L41+20	@ tmp181,
 789 0084 1A60     		str	r2, [r3]	@ D.5497, ptx2
 790 0086 0BE0     		b	.L36	@
 791              	.L37:
 248:src/uart.c    **** 			}
 249:src/uart.c    **** 			else
 250:src/uart.c    **** 			{
 251:src/uart.c    **** 				ptx2 = tx2buff;
 792              		.loc 2 251 0
 793 0088 194B     		ldr	r3, .L41+20	@ tmp182,
 794 008a 1C4A     		ldr	r2, .L41+32	@ tmp183,
 795 008c 1A60     		str	r2, [r3]	@ tmp183, ptx2
 252:src/uart.c    **** 				ptx2_pckt_index = tx2buff;
 796              		.loc 2 252 0
 797 008e 1A4B     		ldr	r3, .L41+28	@ tmp184,
 798 0090 1A4A     		ldr	r2, .L41+32	@ tmp185,
 799 0092 1A60     		str	r2, [r3]	@ tmp185, ptx2_pckt_index
 253:src/uart.c    **** 				USART2->CR1 &= ~USART_CR1_TXEIE;
 800              		.loc 2 253 0
 801 0094 114B     		ldr	r3, .L41	@ D.5494,
 802 0096 114A     		ldr	r2, .L41	@ D.5494,
 803 0098 1268     		ldr	r2, [r2]	@ D.5495, _40->CR1
 804 009a 8021     		movs	r1, #128	@ tmp186,
 805 009c 8A43     		bics	r2, r1	@ D.5495, tmp186
 806 009e 1A60     		str	r2, [r3]	@ D.5495, _39->CR1
 807              	.L36:
 254:src/uart.c    **** 			}
 255:src/uart.c    **** 		}
 256:src/uart.c    **** 	}
 257:src/uart.c    **** 
 258:src/uart.c    **** 	if ((USART2->ISR & USART_ISR_ORE) || (USART2->ISR & USART_ISR_NE) || (USART2->ISR & USART_ISR_FE))
 808              		.loc 2 258 0
 809 00a0 0E4B     		ldr	r3, .L41	@ D.5494,
 810 00a2 DB69     		ldr	r3, [r3, #28]	@ D.5495, _44->ISR
 811 00a4 0822     		movs	r2, #8	@ tmp187,
 812 00a6 1340     		ands	r3, r2	@ D.5495, tmp187
 813 00a8 09D1     		bne	.L38	@,
 814              		.loc 2 258 0 is_stmt 0 discriminator 1
 815 00aa 0C4B     		ldr	r3, .L41	@ D.5494,
 816 00ac DB69     		ldr	r3, [r3, #28]	@ D.5495, _47->ISR
 817 00ae 0422     		movs	r2, #4	@ tmp188,
 818 00b0 1340     		ands	r3, r2	@ D.5495, tmp188
 819 00b2 04D1     		bne	.L38	@,
 820              		.loc 2 258 0 discriminator 2
 821 00b4 094B     		ldr	r3, .L41	@ D.5494,
 822 00b6 DB69     		ldr	r3, [r3, #28]	@ D.5495, _50->ISR
 823 00b8 0222     		movs	r2, #2	@ tmp189,
 824 00ba 1340     		ands	r3, r2	@ D.5495, tmp189
 825 00bc 0BD0     		beq	.L40	@,
 826              	.L38:
 259:src/uart.c    **** 	{
 260:src/uart.c    **** 		USART2->ICR |= 0x0e;
 827              		.loc 2 260 0 is_stmt 1
 828 00be 074B     		ldr	r3, .L41	@ D.5494,
 829 00c0 064A     		ldr	r2, .L41	@ D.5494,
 830 00c2 126A     		ldr	r2, [r2, #32]	@ D.5495, _54->ICR
 831 00c4 0E21     		movs	r1, #14	@ tmp190,
ARM GAS  /tmp/cc8xR3gm.s 			page 36


 832 00c6 0A43     		orrs	r2, r1	@ D.5495, tmp190
 833 00c8 1A62     		str	r2, [r3, #32]	@ D.5495, _53->ICR
 261:src/uart.c    **** 		dummy = USART2->RDR;
 834              		.loc 2 261 0
 835 00ca 044B     		ldr	r3, .L41	@ D.5494,
 836 00cc 9B8C     		ldrh	r3, [r3, #36]	@ tmp192,
 837 00ce 9AB2     		uxth	r2, r3	@ D.5496, tmp192
 838 00d0 6B46     		mov	r3, sp	@ tmp197,
 839 00d2 0733     		adds	r3, r3, #7	@ tmp193,
 840 00d4 1A70     		strb	r2, [r3]	@ tmp194, dummy
 841              	.L40:
 262:src/uart.c    **** 	}
 263:src/uart.c    **** }
 842              		.loc 2 263 0
 843 00d6 C046     		nop
 844 00d8 02B0     		add	sp, sp, #8	@,,
 845              		@ sp needed	@
 846 00da 7047     		bx	lr
 847              	.L42:
 848              		.align	2
 849              	.L41:
 850 00dc 00440040 		.word	1073759232
 851 00e0 00000000 		.word	prx2
 852 00e4 00010000 		.word	rx2buff+256
 853 00e8 00000000 		.word	usart2_have_data
 854 00ec 00000000 		.word	usart2_mini_timeout
 855 00f0 00000000 		.word	ptx2
 856 00f4 00010000 		.word	tx2buff+256
 857 00f8 00000000 		.word	ptx2_pckt_index
 858 00fc 00000000 		.word	tx2buff
 859              		.cfi_endproc
 860              	.LFE23:
 861              		.size	USART2_IRQHandler, .-USART2_IRQHandler
 862              		.section	.text.Usart2Send,"ax",%progbits
 863              		.align	2
 864              		.global	Usart2Send
 865              		.code	16
 866              		.thumb_func
 867              		.type	Usart2Send, %function
 868              	Usart2Send:
 869              	.LFB24:
 264:src/uart.c    **** 
 265:src/uart.c    **** void Usart2Send (char * send)
 266:src/uart.c    **** {
 870              		.loc 2 266 0
 871              		.cfi_startproc
 872 0000 00B5     		push	{lr}	@
 873              	.LCFI8:
 874              		.cfi_def_cfa_offset 4
 875              		.cfi_offset 14, -4
 876 0002 85B0     		sub	sp, sp, #20	@,,
 877              	.LCFI9:
 878              		.cfi_def_cfa_offset 24
 879 0004 0190     		str	r0, [sp, #4]	@ send, send
 267:src/uart.c    **** 	unsigned char i;
 268:src/uart.c    **** 
 269:src/uart.c    **** 	i = strlen(send);
ARM GAS  /tmp/cc8xR3gm.s 			page 37


 880              		.loc 2 269 0
 881 0006 019B     		ldr	r3, [sp, #4]	@ tmp111, send
 882 0008 1800     		movs	r0, r3	@, tmp111
 883 000a FFF7FEFF 		bl	strlen	@
 884 000e 0200     		movs	r2, r0	@ D.5499,
 885 0010 0F23     		movs	r3, #15	@ tmp112,
 886 0012 6B44     		add	r3, r3, sp	@ tmp112,
 887 0014 1A70     		strb	r2, [r3]	@ tmp113, i
 270:src/uart.c    **** 	Usart2SendUnsigned((unsigned char *) send, i);
 888              		.loc 2 270 0
 889 0016 0F23     		movs	r3, #15	@ tmp114,
 890 0018 6B44     		add	r3, r3, sp	@ tmp114,
 891 001a 1A78     		ldrb	r2, [r3]	@ tmp115, i
 892 001c 019B     		ldr	r3, [sp, #4]	@ tmp116, send
 893 001e 1100     		movs	r1, r2	@, tmp115
 894 0020 1800     		movs	r0, r3	@, tmp116
 895 0022 FFF7FEFF 		bl	Usart2SendUnsigned	@
 271:src/uart.c    **** }
 896              		.loc 2 271 0
 897 0026 C046     		nop
 898 0028 05B0     		add	sp, sp, #20	@,,
 899              		@ sp needed	@
 900 002a 00BD     		pop	{pc}
 901              		.cfi_endproc
 902              	.LFE24:
 903              		.size	Usart2Send, .-Usart2Send
 904              		.section	.text.Usart2SendUnsigned,"ax",%progbits
 905              		.align	2
 906              		.global	Usart2SendUnsigned
 907              		.code	16
 908              		.thumb_func
 909              		.type	Usart2SendUnsigned, %function
 910              	Usart2SendUnsigned:
 911              	.LFB25:
 272:src/uart.c    **** 
 273:src/uart.c    **** void Usart2SendUnsigned(unsigned char * send, unsigned char size)
 274:src/uart.c    **** {
 912              		.loc 2 274 0
 913              		.cfi_startproc
 914 0000 00B5     		push	{lr}	@
 915              	.LCFI10:
 916              		.cfi_def_cfa_offset 4
 917              		.cfi_offset 14, -4
 918 0002 83B0     		sub	sp, sp, #12	@,,
 919              	.LCFI11:
 920              		.cfi_def_cfa_offset 16
 921 0004 0190     		str	r0, [sp, #4]	@ send, send
 922 0006 0A00     		movs	r2, r1	@ tmp122, size
 923 0008 6B46     		mov	r3, sp	@ tmp135,
 924 000a 0333     		adds	r3, r3, #3	@ tmp123,
 925 000c 1A70     		strb	r2, [r3]	@ tmp124, size
 275:src/uart.c    **** 	if ((ptx2_pckt_index + size) < &tx2buff[SIZEOF_DATA])
 926              		.loc 2 275 0
 927 000e 114B     		ldr	r3, .L47	@ tmp125,
 928 0010 1A68     		ldr	r2, [r3]	@ D.5500, ptx2_pckt_index
 929 0012 6B46     		mov	r3, sp	@ tmp136,
 930 0014 0333     		adds	r3, r3, #3	@ tmp126,
ARM GAS  /tmp/cc8xR3gm.s 			page 38


 931 0016 1B78     		ldrb	r3, [r3]	@ D.5501, size
 932 0018 D218     		adds	r2, r2, r3	@ D.5500, D.5500, D.5501
 933 001a 0F4B     		ldr	r3, .L47+4	@ tmp127,
 934 001c 9A42     		cmp	r2, r3	@ D.5500, tmp127
 935 001e 16D2     		bcs	.L46	@,
 276:src/uart.c    **** 	{
 277:src/uart.c    **** 		memcpy((unsigned char *)ptx2_pckt_index, send, size);
 936              		.loc 2 277 0
 937 0020 0C4B     		ldr	r3, .L47	@ tmp128,
 938 0022 1868     		ldr	r0, [r3]	@ D.5500, ptx2_pckt_index
 939 0024 6B46     		mov	r3, sp	@ tmp137,
 940 0026 0333     		adds	r3, r3, #3	@ tmp129,
 941 0028 1A78     		ldrb	r2, [r3]	@ D.5502, size
 942 002a 019B     		ldr	r3, [sp, #4]	@ tmp130, send
 943 002c 1900     		movs	r1, r3	@, tmp130
 944 002e FFF7FEFF 		bl	memcpy	@
 278:src/uart.c    **** 		ptx2_pckt_index += size;
 945              		.loc 2 278 0
 946 0032 084B     		ldr	r3, .L47	@ tmp131,
 947 0034 1A68     		ldr	r2, [r3]	@ D.5500, ptx2_pckt_index
 948 0036 6B46     		mov	r3, sp	@ tmp138,
 949 0038 0333     		adds	r3, r3, #3	@ tmp132,
 950 003a 1B78     		ldrb	r3, [r3]	@ D.5501, size
 951 003c D218     		adds	r2, r2, r3	@ D.5500, D.5500, D.5501
 952 003e 054B     		ldr	r3, .L47	@ tmp133,
 953 0040 1A60     		str	r2, [r3]	@ D.5500, ptx2_pckt_index
 279:src/uart.c    **** 		USART2->CR1 |= USART_CR1_TXEIE;
 954              		.loc 2 279 0
 955 0042 064B     		ldr	r3, .L47+8	@ D.5503,
 956 0044 054A     		ldr	r2, .L47+8	@ D.5503,
 957 0046 1268     		ldr	r2, [r2]	@ D.5504, _16->CR1
 958 0048 8021     		movs	r1, #128	@ tmp134,
 959 004a 0A43     		orrs	r2, r1	@ D.5504, tmp134
 960 004c 1A60     		str	r2, [r3]	@ D.5504, _15->CR1
 961              	.L46:
 280:src/uart.c    **** 	}
 281:src/uart.c    **** }
 962              		.loc 2 281 0
 963 004e C046     		nop
 964 0050 03B0     		add	sp, sp, #12	@,,
 965              		@ sp needed	@
 966 0052 00BD     		pop	{pc}
 967              	.L48:
 968              		.align	2
 969              	.L47:
 970 0054 00000000 		.word	ptx2_pckt_index
 971 0058 00010000 		.word	tx2buff+256
 972 005c 00440040 		.word	1073759232
 973              		.cfi_endproc
 974              	.LFE25:
 975              		.size	Usart2SendUnsigned, .-Usart2SendUnsigned
 976              		.section	.text.Usart2SendSingle,"ax",%progbits
 977              		.align	2
 978              		.global	Usart2SendSingle
 979              		.code	16
 980              		.thumb_func
 981              		.type	Usart2SendSingle, %function
ARM GAS  /tmp/cc8xR3gm.s 			page 39


 982              	Usart2SendSingle:
 983              	.LFB26:
 282:src/uart.c    **** 
 283:src/uart.c    **** void Usart2SendSingle(unsigned char tosend)
 284:src/uart.c    **** {
 984              		.loc 2 284 0
 985              		.cfi_startproc
 986 0000 00B5     		push	{lr}	@
 987              	.LCFI12:
 988              		.cfi_def_cfa_offset 4
 989              		.cfi_offset 14, -4
 990 0002 83B0     		sub	sp, sp, #12	@,,
 991              	.LCFI13:
 992              		.cfi_def_cfa_offset 16
 993 0004 0200     		movs	r2, r0	@ tmp110, tosend
 994 0006 6B46     		mov	r3, sp	@ tmp114,
 995 0008 0733     		adds	r3, r3, #7	@ tmp111,
 996 000a 1A70     		strb	r2, [r3]	@ tmp112, tosend
 285:src/uart.c    **** 	Usart2SendUnsigned(&tosend, 1);
 997              		.loc 2 285 0
 998 000c 6B46     		mov	r3, sp	@ tmp115,
 999 000e 0733     		adds	r3, r3, #7	@ tmp113,
 1000 0010 0121     		movs	r1, #1	@,
 1001 0012 1800     		movs	r0, r3	@, tmp113
 1002 0014 FFF7FEFF 		bl	Usart2SendUnsigned	@
 286:src/uart.c    **** }
 1003              		.loc 2 286 0
 1004 0018 C046     		nop
 1005 001a 03B0     		add	sp, sp, #12	@,,
 1006              		@ sp needed	@
 1007 001c 00BD     		pop	{pc}
 1008              		.cfi_endproc
 1009              	.LFE26:
 1010              		.size	Usart2SendSingle, .-Usart2SendSingle
 1011 001e C046     		.section	.text.ReadUsart2Buffer,"ax",%progbits
 1012              		.align	2
 1013              		.global	ReadUsart2Buffer
 1014              		.code	16
 1015              		.thumb_func
 1016              		.type	ReadUsart2Buffer, %function
 1017              	ReadUsart2Buffer:
 1018              	.LFB27:
 287:src/uart.c    **** 
 288:src/uart.c    **** unsigned char ReadUsart2Buffer (unsigned char * bout, unsigned short max_len)
 289:src/uart.c    **** {
 1019              		.loc 2 289 0
 1020              		.cfi_startproc
 1021 0000 00B5     		push	{lr}	@
 1022              	.LCFI14:
 1023              		.cfi_def_cfa_offset 4
 1024              		.cfi_offset 14, -4
 1025 0002 85B0     		sub	sp, sp, #20	@,,
 1026              	.LCFI15:
 1027              		.cfi_def_cfa_offset 24
 1028 0004 0190     		str	r0, [sp, #4]	@ bout, bout
 1029 0006 0A00     		movs	r2, r1	@ tmp117, max_len
 1030 0008 6B46     		mov	r3, sp	@ tmp136,
ARM GAS  /tmp/cc8xR3gm.s 			page 40


 1031 000a 0233     		adds	r3, r3, #2	@ tmp118,
 1032 000c 1A80     		strh	r2, [r3]	@ tmp119, max_len
 290:src/uart.c    **** 	unsigned int len;
 291:src/uart.c    **** 
 292:src/uart.c    **** 	len = prx2 - rx2buff;
 1033              		.loc 2 292 0
 1034 000e 124B     		ldr	r3, .L54	@ tmp120,
 1035 0010 1B68     		ldr	r3, [r3]	@ D.5505, prx2
 1036 0012 1A00     		movs	r2, r3	@ D.5506, D.5505
 1037 0014 114B     		ldr	r3, .L54+4	@ D.5506,
 1038 0016 D31A     		subs	r3, r2, r3	@ D.5506, D.5506, D.5506
 1039 0018 0393     		str	r3, [sp, #12]	@ D.5506, len
 293:src/uart.c    **** 
 294:src/uart.c    **** 	if (len < max_len)
 1040              		.loc 2 294 0
 1041 001a 6B46     		mov	r3, sp	@ tmp137,
 1042 001c 0233     		adds	r3, r3, #2	@ tmp121,
 1043 001e 1A88     		ldrh	r2, [r3]	@ D.5507, max_len
 1044 0020 039B     		ldr	r3, [sp, #12]	@ tmp122, len
 1045 0022 9A42     		cmp	r2, r3	@ D.5507, tmp122
 1046 0024 06D9     		bls	.L51	@,
 295:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx2buff, len);
 1047              		.loc 2 295 0
 1048 0026 039A     		ldr	r2, [sp, #12]	@ tmp123, len
 1049 0028 0C49     		ldr	r1, .L54+4	@ tmp124,
 1050 002a 019B     		ldr	r3, [sp, #4]	@ tmp125, bout
 1051 002c 1800     		movs	r0, r3	@, tmp125
 1052 002e FFF7FEFF 		bl	memcpy	@
 1053 0032 09E0     		b	.L52	@
 1054              	.L51:
 296:src/uart.c    **** 	else
 297:src/uart.c    **** 	{
 298:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx2buff, len);
 1055              		.loc 2 298 0
 1056 0034 039A     		ldr	r2, [sp, #12]	@ tmp126, len
 1057 0036 0949     		ldr	r1, .L54+4	@ tmp127,
 1058 0038 019B     		ldr	r3, [sp, #4]	@ tmp128, bout
 1059 003a 1800     		movs	r0, r3	@, tmp128
 1060 003c FFF7FEFF 		bl	memcpy	@
 299:src/uart.c    **** 		len = max_len;
 1061              		.loc 2 299 0
 1062 0040 6B46     		mov	r3, sp	@ tmp138,
 1063 0042 0233     		adds	r3, r3, #2	@ tmp129,
 1064 0044 1B88     		ldrh	r3, [r3]	@ tmp130, max_len
 1065 0046 0393     		str	r3, [sp, #12]	@ tmp130, len
 1066              	.L52:
 300:src/uart.c    **** 	}
 301:src/uart.c    **** 
 302:src/uart.c    **** 	//ajusto punteros de rx luego de la copia
 303:src/uart.c    **** 	prx2 = rx2buff;
 1067              		.loc 2 303 0
 1068 0048 034B     		ldr	r3, .L54	@ tmp131,
 1069 004a 044A     		ldr	r2, .L54+4	@ tmp132,
 1070 004c 1A60     		str	r2, [r3]	@ tmp132, prx2
 304:src/uart.c    **** 
 305:src/uart.c    **** 	return (unsigned char) len;
 1071              		.loc 2 305 0
ARM GAS  /tmp/cc8xR3gm.s 			page 41


 1072 004e 039B     		ldr	r3, [sp, #12]	@ tmp134, len
 1073 0050 DBB2     		uxtb	r3, r3	@ D.5508, tmp133
 306:src/uart.c    **** }
 1074              		.loc 2 306 0
 1075 0052 1800     		movs	r0, r3	@, <retval>
 1076 0054 05B0     		add	sp, sp, #20	@,,
 1077              		@ sp needed	@
 1078 0056 00BD     		pop	{pc}
 1079              	.L55:
 1080              		.align	2
 1081              	.L54:
 1082 0058 00000000 		.word	prx2
 1083 005c 00000000 		.word	rx2buff
 1084              		.cfi_endproc
 1085              	.LFE27:
 1086              		.size	ReadUsart2Buffer, .-ReadUsart2Buffer
 1087              		.section	.text.Usart1Send,"ax",%progbits
 1088              		.align	2
 1089              		.global	Usart1Send
 1090              		.code	16
 1091              		.thumb_func
 1092              		.type	Usart1Send, %function
 1093              	Usart1Send:
 1094              	.LFB28:
 307:src/uart.c    **** 
 308:src/uart.c    **** void Usart1Send (char * send)
 309:src/uart.c    **** {
 1095              		.loc 2 309 0
 1096              		.cfi_startproc
 1097 0000 00B5     		push	{lr}	@
 1098              	.LCFI16:
 1099              		.cfi_def_cfa_offset 4
 1100              		.cfi_offset 14, -4
 1101 0002 85B0     		sub	sp, sp, #20	@,,
 1102              	.LCFI17:
 1103              		.cfi_def_cfa_offset 24
 1104 0004 0190     		str	r0, [sp, #4]	@ send, send
 310:src/uart.c    **** 	unsigned char i;
 311:src/uart.c    **** 
 312:src/uart.c    **** 	i = strlen(send);
 1105              		.loc 2 312 0
 1106 0006 019B     		ldr	r3, [sp, #4]	@ tmp111, send
 1107 0008 1800     		movs	r0, r3	@, tmp111
 1108 000a FFF7FEFF 		bl	strlen	@
 1109 000e 0200     		movs	r2, r0	@ D.5509,
 1110 0010 0F23     		movs	r3, #15	@ tmp112,
 1111 0012 6B44     		add	r3, r3, sp	@ tmp112,
 1112 0014 1A70     		strb	r2, [r3]	@ tmp113, i
 313:src/uart.c    **** 	Usart1SendUnsigned((unsigned char *) send, i);
 1113              		.loc 2 313 0
 1114 0016 0F23     		movs	r3, #15	@ tmp114,
 1115 0018 6B44     		add	r3, r3, sp	@ tmp114,
 1116 001a 1A78     		ldrb	r2, [r3]	@ tmp115, i
 1117 001c 019B     		ldr	r3, [sp, #4]	@ tmp116, send
 1118 001e 1100     		movs	r1, r2	@, tmp115
 1119 0020 1800     		movs	r0, r3	@, tmp116
 1120 0022 FFF7FEFF 		bl	Usart1SendUnsigned	@
ARM GAS  /tmp/cc8xR3gm.s 			page 42


 314:src/uart.c    **** }
 1121              		.loc 2 314 0
 1122 0026 C046     		nop
 1123 0028 05B0     		add	sp, sp, #20	@,,
 1124              		@ sp needed	@
 1125 002a 00BD     		pop	{pc}
 1126              		.cfi_endproc
 1127              	.LFE28:
 1128              		.size	Usart1Send, .-Usart1Send
 1129              		.section	.text.Usart1SendUnsigned,"ax",%progbits
 1130              		.align	2
 1131              		.global	Usart1SendUnsigned
 1132              		.code	16
 1133              		.thumb_func
 1134              		.type	Usart1SendUnsigned, %function
 1135              	Usart1SendUnsigned:
 1136              	.LFB29:
 315:src/uart.c    **** 
 316:src/uart.c    **** void Usart1SendUnsigned(unsigned char * send, unsigned char size)
 317:src/uart.c    **** {
 1137              		.loc 2 317 0
 1138              		.cfi_startproc
 1139 0000 00B5     		push	{lr}	@
 1140              	.LCFI18:
 1141              		.cfi_def_cfa_offset 4
 1142              		.cfi_offset 14, -4
 1143 0002 83B0     		sub	sp, sp, #12	@,,
 1144              	.LCFI19:
 1145              		.cfi_def_cfa_offset 16
 1146 0004 0190     		str	r0, [sp, #4]	@ send, send
 1147 0006 0A00     		movs	r2, r1	@ tmp122, size
 1148 0008 6B46     		mov	r3, sp	@ tmp135,
 1149 000a 0333     		adds	r3, r3, #3	@ tmp123,
 1150 000c 1A70     		strb	r2, [r3]	@ tmp124, size
 318:src/uart.c    **** 	if ((ptx1_pckt_index + size) < &tx1buff[SIZEOF_DATA])
 1151              		.loc 2 318 0
 1152 000e 114B     		ldr	r3, .L60	@ tmp125,
 1153 0010 1A68     		ldr	r2, [r3]	@ D.5510, ptx1_pckt_index
 1154 0012 6B46     		mov	r3, sp	@ tmp136,
 1155 0014 0333     		adds	r3, r3, #3	@ tmp126,
 1156 0016 1B78     		ldrb	r3, [r3]	@ D.5511, size
 1157 0018 D218     		adds	r2, r2, r3	@ D.5510, D.5510, D.5511
 1158 001a 0F4B     		ldr	r3, .L60+4	@ tmp127,
 1159 001c 9A42     		cmp	r2, r3	@ D.5510, tmp127
 1160 001e 16D2     		bcs	.L59	@,
 319:src/uart.c    **** 	{
 320:src/uart.c    **** 		memcpy((unsigned char *)ptx1_pckt_index, send, size);
 1161              		.loc 2 320 0
 1162 0020 0C4B     		ldr	r3, .L60	@ tmp128,
 1163 0022 1868     		ldr	r0, [r3]	@ D.5510, ptx1_pckt_index
 1164 0024 6B46     		mov	r3, sp	@ tmp137,
 1165 0026 0333     		adds	r3, r3, #3	@ tmp129,
 1166 0028 1A78     		ldrb	r2, [r3]	@ D.5512, size
 1167 002a 019B     		ldr	r3, [sp, #4]	@ tmp130, send
 1168 002c 1900     		movs	r1, r3	@, tmp130
 1169 002e FFF7FEFF 		bl	memcpy	@
 321:src/uart.c    **** 		ptx1_pckt_index += size;
ARM GAS  /tmp/cc8xR3gm.s 			page 43


 1170              		.loc 2 321 0
 1171 0032 084B     		ldr	r3, .L60	@ tmp131,
 1172 0034 1A68     		ldr	r2, [r3]	@ D.5510, ptx1_pckt_index
 1173 0036 6B46     		mov	r3, sp	@ tmp138,
 1174 0038 0333     		adds	r3, r3, #3	@ tmp132,
 1175 003a 1B78     		ldrb	r3, [r3]	@ D.5511, size
 1176 003c D218     		adds	r2, r2, r3	@ D.5510, D.5510, D.5511
 1177 003e 054B     		ldr	r3, .L60	@ tmp133,
 1178 0040 1A60     		str	r2, [r3]	@ D.5510, ptx1_pckt_index
 322:src/uart.c    **** 		USART1->CR1 |= USART_CR1_TXEIE;
 1179              		.loc 2 322 0
 1180 0042 064B     		ldr	r3, .L60+8	@ D.5513,
 1181 0044 054A     		ldr	r2, .L60+8	@ D.5513,
 1182 0046 1268     		ldr	r2, [r2]	@ D.5514, _16->CR1
 1183 0048 8021     		movs	r1, #128	@ tmp134,
 1184 004a 0A43     		orrs	r2, r1	@ D.5514, tmp134
 1185 004c 1A60     		str	r2, [r3]	@ D.5514, _15->CR1
 1186              	.L59:
 323:src/uart.c    **** 	}
 324:src/uart.c    **** }
 1187              		.loc 2 324 0
 1188 004e C046     		nop
 1189 0050 03B0     		add	sp, sp, #12	@,,
 1190              		@ sp needed	@
 1191 0052 00BD     		pop	{pc}
 1192              	.L61:
 1193              		.align	2
 1194              	.L60:
 1195 0054 00000000 		.word	ptx1_pckt_index
 1196 0058 00010000 		.word	tx1buff+256
 1197 005c 00380140 		.word	1073821696
 1198              		.cfi_endproc
 1199              	.LFE29:
 1200              		.size	Usart1SendUnsigned, .-Usart1SendUnsigned
 1201              		.section	.text.Usart1SendSingle,"ax",%progbits
 1202              		.align	2
 1203              		.global	Usart1SendSingle
 1204              		.code	16
 1205              		.thumb_func
 1206              		.type	Usart1SendSingle, %function
 1207              	Usart1SendSingle:
 1208              	.LFB30:
 325:src/uart.c    **** 
 326:src/uart.c    **** void Usart1SendSingle(unsigned char tosend)
 327:src/uart.c    **** {
 1209              		.loc 2 327 0
 1210              		.cfi_startproc
 1211 0000 00B5     		push	{lr}	@
 1212              	.LCFI20:
 1213              		.cfi_def_cfa_offset 4
 1214              		.cfi_offset 14, -4
 1215 0002 83B0     		sub	sp, sp, #12	@,,
 1216              	.LCFI21:
 1217              		.cfi_def_cfa_offset 16
 1218 0004 0200     		movs	r2, r0	@ tmp110, tosend
 1219 0006 6B46     		mov	r3, sp	@ tmp114,
 1220 0008 0733     		adds	r3, r3, #7	@ tmp111,
ARM GAS  /tmp/cc8xR3gm.s 			page 44


 1221 000a 1A70     		strb	r2, [r3]	@ tmp112, tosend
 328:src/uart.c    **** 	Usart1SendUnsigned(&tosend, 1);
 1222              		.loc 2 328 0
 1223 000c 6B46     		mov	r3, sp	@ tmp115,
 1224 000e 0733     		adds	r3, r3, #7	@ tmp113,
 1225 0010 0121     		movs	r1, #1	@,
 1226 0012 1800     		movs	r0, r3	@, tmp113
 1227 0014 FFF7FEFF 		bl	Usart1SendUnsigned	@
 329:src/uart.c    **** }
 1228              		.loc 2 329 0
 1229 0018 C046     		nop
 1230 001a 03B0     		add	sp, sp, #12	@,,
 1231              		@ sp needed	@
 1232 001c 00BD     		pop	{pc}
 1233              		.cfi_endproc
 1234              	.LFE30:
 1235              		.size	Usart1SendSingle, .-Usart1SendSingle
 1236 001e C046     		.section	.text.USART2Config,"ax",%progbits
 1237              		.align	2
 1238              		.global	USART2Config
 1239              		.code	16
 1240              		.thumb_func
 1241              		.type	USART2Config, %function
 1242              	USART2Config:
 1243              	.LFB31:
 330:src/uart.c    **** 
 331:src/uart.c    **** 
 332:src/uart.c    **** void USART2Config(void)
 333:src/uart.c    **** {
 1244              		.loc 2 333 0
 1245              		.cfi_startproc
 1246 0000 10B5     		push	{r4, lr}	@
 1247              	.LCFI22:
 1248              		.cfi_def_cfa_offset 8
 1249              		.cfi_offset 4, -8
 1250              		.cfi_offset 14, -4
 334:src/uart.c    **** 	if (!USART2_CLK)
 1251              		.loc 2 334 0
 1252 0002 174B     		ldr	r3, .L65	@ D.5515,
 1253 0004 DA69     		ldr	r2, [r3, #28]	@ D.5516, _2->APB1ENR
 1254 0006 8023     		movs	r3, #128	@ tmp140,
 1255 0008 9B02     		lsls	r3, r3, #10	@ tmp123, tmp140,
 1256 000a 1340     		ands	r3, r2	@ D.5516, D.5516
 1257 000c 06D1     		bne	.L64	@,
 335:src/uart.c    **** 		USART2_CLK_ON;
 1258              		.loc 2 335 0
 1259 000e 144B     		ldr	r3, .L65	@ D.5515,
 1260 0010 134A     		ldr	r2, .L65	@ D.5515,
 1261 0012 D269     		ldr	r2, [r2, #28]	@ D.5516, _7->APB1ENR
 1262 0014 8021     		movs	r1, #128	@ tmp139,
 1263 0016 8902     		lsls	r1, r1, #10	@ tmp124, tmp139,
 1264 0018 0A43     		orrs	r2, r1	@ D.5516, tmp124
 1265 001a DA61     		str	r2, [r3, #28]	@ D.5516, _6->APB1ENR
 1266              	.L64:
 336:src/uart.c    **** 
 337:src/uart.c    **** 	GPIOA->AFR[0] |= 0x0001100;	//PA2 -> AF1 PA3 -> AF1
 1267              		.loc 2 337 0
ARM GAS  /tmp/cc8xR3gm.s 			page 45


 1268 001c 9023     		movs	r3, #144	@ tmp135,
 1269 001e DB05     		lsls	r3, r3, #23	@ D.5517, tmp135,
 1270 0020 9022     		movs	r2, #144	@ tmp136,
 1271 0022 D205     		lsls	r2, r2, #23	@ D.5517, tmp136,
 1272 0024 126A     		ldr	r2, [r2, #32]	@ D.5516, _12->AFR
 1273 0026 8821     		movs	r1, #136	@ tmp137,
 1274 0028 4901     		lsls	r1, r1, #5	@ tmp125, tmp137,
 1275 002a 0A43     		orrs	r2, r1	@ D.5516, tmp125
 1276 002c 1A62     		str	r2, [r3, #32]	@ D.5516, _11->AFR
 338:src/uart.c    **** 
 339:src/uart.c    **** 	ptx2 = tx2buff;
 1277              		.loc 2 339 0
 1278 002e 0D4B     		ldr	r3, .L65+4	@ tmp126,
 1279 0030 0D4A     		ldr	r2, .L65+8	@ tmp127,
 1280 0032 1A60     		str	r2, [r3]	@ tmp127, ptx2
 340:src/uart.c    **** 	ptx2_pckt_index = tx2buff;
 1281              		.loc 2 340 0
 1282 0034 0D4B     		ldr	r3, .L65+12	@ tmp128,
 1283 0036 0C4A     		ldr	r2, .L65+8	@ tmp129,
 1284 0038 1A60     		str	r2, [r3]	@ tmp129, ptx2_pckt_index
 341:src/uart.c    **** 	prx2 = rx2buff;
 1285              		.loc 2 341 0
 1286 003a 0D4B     		ldr	r3, .L65+16	@ tmp130,
 1287 003c 0D4A     		ldr	r2, .L65+20	@ tmp131,
 1288 003e 1A60     		str	r2, [r3]	@ tmp131, prx2
 342:src/uart.c    **** 
 343:src/uart.c    **** 	USART2->BRR = USART_115200;
 1289              		.loc 2 343 0
 1290 0040 0D4B     		ldr	r3, .L65+24	@ D.5518,
 1291 0042 D022     		movs	r2, #208	@ tmp138,
 1292 0044 5200     		lsls	r2, r2, #1	@ tmp132, tmp138,
 1293 0046 9A81     		strh	r2, [r3, #12]	@ tmp133, _19->BRR
 344:src/uart.c    **** 	USART2->CR1 = USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 1294              		.loc 2 344 0
 1295 0048 0B4B     		ldr	r3, .L65+24	@ D.5518,
 1296 004a 2D22     		movs	r2, #45	@ tmp134,
 1297 004c 1A60     		str	r2, [r3]	@ tmp134, _21->CR1
 345:src/uart.c    **** 
 346:src/uart.c    **** 	NVIC_EnableIRQ(USART2_IRQn);
 1298              		.loc 2 346 0
 1299 004e 1C20     		movs	r0, #28	@,
 1300 0050 FFF7FEFF 		bl	NVIC_EnableIRQ	@
 347:src/uart.c    **** 	NVIC_SetPriority(USART2_IRQn, 7);
 1301              		.loc 2 347 0
 1302 0054 0721     		movs	r1, #7	@,
 1303 0056 1C20     		movs	r0, #28	@,
 1304 0058 FFF7FEFF 		bl	NVIC_SetPriority	@
 348:src/uart.c    **** }
 1305              		.loc 2 348 0
 1306 005c C046     		nop
 1307              		@ sp needed	@
 1308 005e 10BD     		pop	{r4, pc}
 1309              	.L66:
 1310              		.align	2
 1311              	.L65:
 1312 0060 00100240 		.word	1073876992
 1313 0064 00000000 		.word	ptx2
ARM GAS  /tmp/cc8xR3gm.s 			page 46


 1314 0068 00000000 		.word	tx2buff
 1315 006c 00000000 		.word	ptx2_pckt_index
 1316 0070 00000000 		.word	prx2
 1317 0074 00000000 		.word	rx2buff
 1318 0078 00440040 		.word	1073759232
 1319              		.cfi_endproc
 1320              	.LFE31:
 1321              		.size	USART2Config, .-USART2Config
 1322              		.section	.text.USART1Config,"ax",%progbits
 1323              		.align	2
 1324              		.global	USART1Config
 1325              		.code	16
 1326              		.thumb_func
 1327              		.type	USART1Config, %function
 1328              	USART1Config:
 1329              	.LFB32:
 349:src/uart.c    **** 
 350:src/uart.c    **** void USART1Config(void)
 351:src/uart.c    **** {
 1330              		.loc 2 351 0
 1331              		.cfi_startproc
 1332 0000 10B5     		push	{r4, lr}	@
 1333              	.LCFI23:
 1334              		.cfi_def_cfa_offset 8
 1335              		.cfi_offset 4, -8
 1336              		.cfi_offset 14, -4
 352:src/uart.c    **** 	if (!USART1_CLK)
 1337              		.loc 2 352 0
 1338 0002 154B     		ldr	r3, .L69	@ D.5519,
 1339 0004 9A69     		ldr	r2, [r3, #24]	@ D.5520, _2->APB2ENR
 1340 0006 8023     		movs	r3, #128	@ tmp136,
 1341 0008 DB01     		lsls	r3, r3, #7	@ tmp123, tmp136,
 1342 000a 1340     		ands	r3, r2	@ D.5520, D.5520
 1343 000c 06D1     		bne	.L68	@,
 353:src/uart.c    **** 		USART1_CLK_ON;
 1344              		.loc 2 353 0
 1345 000e 124B     		ldr	r3, .L69	@ D.5519,
 1346 0010 114A     		ldr	r2, .L69	@ D.5519,
 1347 0012 9269     		ldr	r2, [r2, #24]	@ D.5520, _7->APB2ENR
 1348 0014 8021     		movs	r1, #128	@ tmp135,
 1349 0016 C901     		lsls	r1, r1, #7	@ tmp124, tmp135,
 1350 0018 0A43     		orrs	r2, r1	@ D.5520, tmp124
 1351 001a 9A61     		str	r2, [r3, #24]	@ D.5520, _6->APB2ENR
 1352              	.L68:
 354:src/uart.c    **** 
 355:src/uart.c    **** #ifdef VER_1_0
 356:src/uart.c    **** 	//para empezar con el GPS
 357:src/uart.c    **** 	//GPIOB->AFR[0] |= 0x00000000;	//PB7 -> AF0 PB6 -> AF0
 358:src/uart.c    **** 	GPIOB->AFR[0] &= 0x00FFFFFF;	//PB7 -> AF0 PB6 -> AF0
 1353              		.loc 2 358 0
 1354 001c 0F4B     		ldr	r3, .L69+4	@ D.5521,
 1355 001e 0F4A     		ldr	r2, .L69+4	@ D.5521,
 1356 0020 126A     		ldr	r2, [r2, #32]	@ D.5520, _12->AFR
 1357 0022 1202     		lsls	r2, r2, #8	@ tmp125, D.5520,
 1358 0024 120A     		lsrs	r2, r2, #8	@ D.5520, tmp125,
 1359 0026 1A62     		str	r2, [r3, #32]	@ D.5520, _11->AFR
 359:src/uart.c    **** 	//para empezar con el GSM
ARM GAS  /tmp/cc8xR3gm.s 			page 47


 360:src/uart.c    **** 	//GPIOA->AFR[1] |= 0x00000110;	//PA10 -> AF1 PA9 -> AF1
 361:src/uart.c    **** #endif
 362:src/uart.c    **** 
 363:src/uart.c    **** 	ptx1 = tx1buff;
 1360              		.loc 2 363 0
 1361 0028 0D4B     		ldr	r3, .L69+8	@ tmp126,
 1362 002a 0E4A     		ldr	r2, .L69+12	@ tmp127,
 1363 002c 1A60     		str	r2, [r3]	@ tmp127, ptx1
 364:src/uart.c    **** 	ptx1_pckt_index = tx1buff;
 1364              		.loc 2 364 0
 1365 002e 0E4B     		ldr	r3, .L69+16	@ tmp128,
 1366 0030 0C4A     		ldr	r2, .L69+12	@ tmp129,
 1367 0032 1A60     		str	r2, [r3]	@ tmp129, ptx1_pckt_index
 365:src/uart.c    **** 	prx1 = rx1buff;
 1368              		.loc 2 365 0
 1369 0034 0D4B     		ldr	r3, .L69+20	@ tmp130,
 1370 0036 0E4A     		ldr	r2, .L69+24	@ tmp131,
 1371 0038 1A60     		str	r2, [r3]	@ tmp131, prx1
 366:src/uart.c    **** 
 367:src/uart.c    **** 	USART1->BRR = USART_9600;
 1372              		.loc 2 367 0
 1373 003a 0E4B     		ldr	r3, .L69+28	@ D.5522,
 1374 003c 0E4A     		ldr	r2, .L69+32	@ tmp132,
 1375 003e 9A81     		strh	r2, [r3, #12]	@ tmp133, _19->BRR
 368:src/uart.c    **** //	USART1->CR2 |= USART_CR2_STOP_1;	//2 bits stop
 369:src/uart.c    **** //	USART1->CR1 = USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 370:src/uart.c    **** //	USART1->CR1 = USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE;	//SIN TX
 371:src/uart.c    **** 	USART1->CR1 = USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;	//para pruebas TX
 1376              		.loc 2 371 0
 1377 0040 0C4B     		ldr	r3, .L69+28	@ D.5522,
 1378 0042 2D22     		movs	r2, #45	@ tmp134,
 1379 0044 1A60     		str	r2, [r3]	@ tmp134, _21->CR1
 372:src/uart.c    **** 
 373:src/uart.c    **** 	NVIC_EnableIRQ(USART1_IRQn);
 1380              		.loc 2 373 0
 1381 0046 1B20     		movs	r0, #27	@,
 1382 0048 FFF7FEFF 		bl	NVIC_EnableIRQ	@
 374:src/uart.c    **** 	NVIC_SetPriority(USART1_IRQn, 5);
 1383              		.loc 2 374 0
 1384 004c 0521     		movs	r1, #5	@,
 1385 004e 1B20     		movs	r0, #27	@,
 1386 0050 FFF7FEFF 		bl	NVIC_SetPriority	@
 375:src/uart.c    **** }
 1387              		.loc 2 375 0
 1388 0054 C046     		nop
 1389              		@ sp needed	@
 1390 0056 10BD     		pop	{r4, pc}
 1391              	.L70:
 1392              		.align	2
 1393              	.L69:
 1394 0058 00100240 		.word	1073876992
 1395 005c 00040048 		.word	1207960576
 1396 0060 00000000 		.word	ptx1
 1397 0064 00000000 		.word	tx1buff
 1398 0068 00000000 		.word	ptx1_pckt_index
 1399 006c 00000000 		.word	prx1
 1400 0070 00000000 		.word	rx1buff
ARM GAS  /tmp/cc8xR3gm.s 			page 48


 1401 0074 00380140 		.word	1073821696
 1402 0078 88130000 		.word	5000
 1403              		.cfi_endproc
 1404              	.LFE32:
 1405              		.size	USART1Config, .-USART1Config
 1406              		.text
 1407              	.Letext0:
 1408              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1409              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1410              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1411              		.section	.debug_info,"",%progbits
 1412              	.Ldebug_info0:
 1413 0000 6D0A0000 		.4byte	0xa6d
 1414 0004 0200     		.2byte	0x2
 1415 0006 00000000 		.4byte	.Ldebug_abbrev0
 1416 000a 04       		.byte	0x4
 1417 000b 01       		.uleb128 0x1
 1418 000c A2050000 		.4byte	.LASF132
 1419 0010 0C       		.byte	0xc
 1420 0011 90010000 		.4byte	.LASF133
 1421 0015 ED040000 		.4byte	.LASF134
 1422 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1423 001d 00000000 		.4byte	0
 1424 0021 00000000 		.4byte	0
 1425 0025 00000000 		.4byte	.Ldebug_line0
 1426 0029 02       		.uleb128 0x2
 1427 002a 70030000 		.4byte	.LASF92
 1428 002e 01       		.byte	0x1
 1429 002f 06010000 		.4byte	0x106
 1430 0033 03       		.byte	0x3
 1431 0034 C7       		.byte	0xc7
 1432 0035 06010000 		.4byte	0x106
 1433 0039 03       		.uleb128 0x3
 1434 003a FA030000 		.4byte	.LASF0
 1435 003e 72       		.sleb128 -14
 1436 003f 03       		.uleb128 0x3
 1437 0040 52060000 		.4byte	.LASF1
 1438 0044 73       		.sleb128 -13
 1439 0045 03       		.uleb128 0x3
 1440 0046 41000000 		.4byte	.LASF2
 1441 004a 7B       		.sleb128 -5
 1442 004b 03       		.uleb128 0x3
 1443 004c EF000000 		.4byte	.LASF3
 1444 0050 7E       		.sleb128 -2
 1445 0051 03       		.uleb128 0x3
 1446 0052 9C040000 		.4byte	.LASF4
 1447 0056 7F       		.sleb128 -1
 1448 0057 04       		.uleb128 0x4
 1449 0058 87020000 		.4byte	.LASF5
 1450 005c 00       		.byte	0
 1451 005d 04       		.uleb128 0x4
 1452 005e EA020000 		.4byte	.LASF6
 1453 0062 01       		.byte	0x1
 1454 0063 04       		.uleb128 0x4
 1455 0064 96030000 		.4byte	.LASF7
 1456 0068 02       		.byte	0x2
 1457 0069 04       		.uleb128 0x4
ARM GAS  /tmp/cc8xR3gm.s 			page 49


 1458 006a A4000000 		.4byte	.LASF8
 1459 006e 03       		.byte	0x3
 1460 006f 04       		.uleb128 0x4
 1461 0070 FB000000 		.4byte	.LASF9
 1462 0074 04       		.byte	0x4
 1463 0075 04       		.uleb128 0x4
 1464 0076 C7000000 		.4byte	.LASF10
 1465 007a 05       		.byte	0x5
 1466 007b 04       		.uleb128 0x4
 1467 007c 2B000000 		.4byte	.LASF11
 1468 0080 06       		.byte	0x6
 1469 0081 04       		.uleb128 0x4
 1470 0082 08000000 		.4byte	.LASF12
 1471 0086 07       		.byte	0x7
 1472 0087 04       		.uleb128 0x4
 1473 0088 BC020000 		.4byte	.LASF13
 1474 008c 08       		.byte	0x8
 1475 008d 04       		.uleb128 0x4
 1476 008e 1B020000 		.4byte	.LASF14
 1477 0092 09       		.byte	0x9
 1478 0093 04       		.uleb128 0x4
 1479 0094 2D050000 		.4byte	.LASF15
 1480 0098 0A       		.byte	0xa
 1481 0099 04       		.uleb128 0x4
 1482 009a 4B040000 		.4byte	.LASF16
 1483 009e 0B       		.byte	0xb
 1484 009f 04       		.uleb128 0x4
 1485 00a0 04030000 		.4byte	.LASF17
 1486 00a4 0C       		.byte	0xc
 1487 00a5 04       		.uleb128 0x4
 1488 00a6 C4020000 		.4byte	.LASF18
 1489 00aa 0D       		.byte	0xd
 1490 00ab 04       		.uleb128 0x4
 1491 00ac 27040000 		.4byte	.LASF19
 1492 00b0 0E       		.byte	0xe
 1493 00b1 04       		.uleb128 0x4
 1494 00b2 DC040000 		.4byte	.LASF20
 1495 00b6 0F       		.byte	0xf
 1496 00b7 04       		.uleb128 0x4
 1497 00b8 11020000 		.4byte	.LASF21
 1498 00bc 10       		.byte	0x10
 1499 00bd 04       		.uleb128 0x4
 1500 00be 42050000 		.4byte	.LASF22
 1501 00c2 11       		.byte	0x11
 1502 00c3 04       		.uleb128 0x4
 1503 00c4 22050000 		.4byte	.LASF23
 1504 00c8 13       		.byte	0x13
 1505 00c9 04       		.uleb128 0x4
 1506 00ca 3D020000 		.4byte	.LASF24
 1507 00ce 14       		.byte	0x14
 1508 00cf 04       		.uleb128 0x4
 1509 00d0 8C000000 		.4byte	.LASF25
 1510 00d4 15       		.byte	0x15
 1511 00d5 04       		.uleb128 0x4
 1512 00d6 40040000 		.4byte	.LASF26
 1513 00da 16       		.byte	0x16
 1514 00db 04       		.uleb128 0x4
ARM GAS  /tmp/cc8xR3gm.s 			page 50


 1515 00dc E5000000 		.4byte	.LASF27
 1516 00e0 17       		.byte	0x17
 1517 00e1 04       		.uleb128 0x4
 1518 00e2 C0040000 		.4byte	.LASF28
 1519 00e6 18       		.byte	0x18
 1520 00e7 04       		.uleb128 0x4
 1521 00e8 2D010000 		.4byte	.LASF29
 1522 00ec 19       		.byte	0x19
 1523 00ed 04       		.uleb128 0x4
 1524 00ee 79050000 		.4byte	.LASF30
 1525 00f2 1A       		.byte	0x1a
 1526 00f3 04       		.uleb128 0x4
 1527 00f4 EE030000 		.4byte	.LASF31
 1528 00f8 1B       		.byte	0x1b
 1529 00f9 04       		.uleb128 0x4
 1530 00fa B0010000 		.4byte	.LASF32
 1531 00fe 1C       		.byte	0x1c
 1532 00ff 04       		.uleb128 0x4
 1533 0100 A9040000 		.4byte	.LASF33
 1534 0104 1E       		.byte	0x1e
 1535 0105 00       		.byte	0
 1536 0106 05       		.uleb128 0x5
 1537 0107 01       		.byte	0x1
 1538 0108 06       		.byte	0x6
 1539 0109 83050000 		.4byte	.LASF34
 1540 010d 06       		.uleb128 0x6
 1541 010e A1010000 		.4byte	.LASF37
 1542 0112 03       		.byte	0x3
 1543 0113 5F01     		.2byte	0x15f
 1544 0115 29000000 		.4byte	0x29
 1545 0119 05       		.uleb128 0x5
 1546 011a 01       		.byte	0x1
 1547 011b 08       		.byte	0x8
 1548 011c 50050000 		.4byte	.LASF35
 1549 0120 05       		.uleb128 0x5
 1550 0121 02       		.byte	0x2
 1551 0122 05       		.byte	0x5
 1552 0123 DB030000 		.4byte	.LASF36
 1553 0127 07       		.uleb128 0x7
 1554 0128 85010000 		.4byte	.LASF38
 1555 012c 04       		.byte	0x4
 1556 012d 2B       		.byte	0x2b
 1557 012e 32010000 		.4byte	0x132
 1558 0132 05       		.uleb128 0x5
 1559 0133 02       		.byte	0x2
 1560 0134 07       		.byte	0x7
 1561 0135 8F050000 		.4byte	.LASF39
 1562 0139 05       		.uleb128 0x5
 1563 013a 04       		.byte	0x4
 1564 013b 05       		.byte	0x5
 1565 013c E5030000 		.4byte	.LASF40
 1566 0140 07       		.uleb128 0x7
 1567 0141 5E050000 		.4byte	.LASF41
 1568 0145 04       		.byte	0x4
 1569 0146 41       		.byte	0x41
 1570 0147 4B010000 		.4byte	0x14b
 1571 014b 05       		.uleb128 0x5
ARM GAS  /tmp/cc8xR3gm.s 			page 51


 1572 014c 04       		.byte	0x4
 1573 014d 07       		.byte	0x7
 1574 014e CA040000 		.4byte	.LASF42
 1575 0152 05       		.uleb128 0x5
 1576 0153 08       		.byte	0x8
 1577 0154 05       		.byte	0x5
 1578 0155 79020000 		.4byte	.LASF43
 1579 0159 05       		.uleb128 0x5
 1580 015a 08       		.byte	0x8
 1581 015b 07       		.byte	0x7
 1582 015c 46010000 		.4byte	.LASF44
 1583 0160 08       		.uleb128 0x8
 1584 0161 04       		.byte	0x4
 1585 0162 05       		.byte	0x5
 1586 0163 696E7400 		.ascii	"int\000"
 1587 0167 05       		.uleb128 0x5
 1588 0168 04       		.byte	0x4
 1589 0169 07       		.byte	0x7
 1590 016a 7F000000 		.4byte	.LASF45
 1591 016e 07       		.uleb128 0x7
 1592 016f 67030000 		.4byte	.LASF46
 1593 0173 05       		.byte	0x5
 1594 0174 1A       		.byte	0x1a
 1595 0175 27010000 		.4byte	0x127
 1596 0179 07       		.uleb128 0x7
 1597 017a 0E010000 		.4byte	.LASF47
 1598 017e 05       		.byte	0x5
 1599 017f 20       		.byte	0x20
 1600 0180 40010000 		.4byte	0x140
 1601 0184 09       		.uleb128 0x9
 1602 0185 2003     		.2byte	0x320
 1603 0187 01       		.byte	0x1
 1604 0188 71       		.byte	0x71
 1605 0189 21020000 		.4byte	0x221
 1606 018d 0A       		.uleb128 0xa
 1607 018e 1F010000 		.4byte	.LASF48
 1608 0192 01       		.byte	0x1
 1609 0193 73       		.byte	0x73
 1610 0194 38020000 		.4byte	0x238
 1611 0198 02       		.byte	0x2
 1612 0199 23       		.byte	0x23
 1613 019a 00       		.uleb128 0
 1614 019b 0A       		.uleb128 0xa
 1615 019c 9F030000 		.4byte	.LASF49
 1616 01a0 01       		.byte	0x1
 1617 01a1 74       		.byte	0x74
 1618 01a2 3D020000 		.4byte	0x23d
 1619 01a6 02       		.byte	0x2
 1620 01a7 23       		.byte	0x23
 1621 01a8 04       		.uleb128 0x4
 1622 01a9 0A       		.uleb128 0xa
 1623 01aa 74050000 		.4byte	.LASF50
 1624 01ae 01       		.byte	0x1
 1625 01af 75       		.byte	0x75
 1626 01b0 4D020000 		.4byte	0x24d
 1627 01b4 03       		.byte	0x3
 1628 01b5 23       		.byte	0x23
ARM GAS  /tmp/cc8xR3gm.s 			page 52


 1629 01b6 8001     		.uleb128 0x80
 1630 01b8 0A       		.uleb128 0xa
 1631 01b9 24010000 		.4byte	.LASF51
 1632 01bd 01       		.byte	0x1
 1633 01be 76       		.byte	0x76
 1634 01bf 3D020000 		.4byte	0x23d
 1635 01c3 03       		.byte	0x3
 1636 01c4 23       		.byte	0x23
 1637 01c5 8401     		.uleb128 0x84
 1638 01c7 0A       		.uleb128 0xa
 1639 01c8 61060000 		.4byte	.LASF52
 1640 01cc 01       		.byte	0x1
 1641 01cd 77       		.byte	0x77
 1642 01ce 52020000 		.4byte	0x252
 1643 01d2 03       		.byte	0x3
 1644 01d3 23       		.byte	0x23
 1645 01d4 8002     		.uleb128 0x100
 1646 01d6 0A       		.uleb128 0xa
 1647 01d7 B3030000 		.4byte	.LASF53
 1648 01db 01       		.byte	0x1
 1649 01dc 78       		.byte	0x78
 1650 01dd 3D020000 		.4byte	0x23d
 1651 01e1 03       		.byte	0x3
 1652 01e2 23       		.byte	0x23
 1653 01e3 8402     		.uleb128 0x104
 1654 01e5 0A       		.uleb128 0xa
 1655 01e6 FF020000 		.4byte	.LASF54
 1656 01ea 01       		.byte	0x1
 1657 01eb 79       		.byte	0x79
 1658 01ec 57020000 		.4byte	0x257
 1659 01f0 03       		.byte	0x3
 1660 01f1 23       		.byte	0x23
 1661 01f2 8003     		.uleb128 0x180
 1662 01f4 0A       		.uleb128 0xa
 1663 01f5 BD030000 		.4byte	.LASF55
 1664 01f9 01       		.byte	0x1
 1665 01fa 7A       		.byte	0x7a
 1666 01fb 3D020000 		.4byte	0x23d
 1667 01ff 03       		.byte	0x3
 1668 0200 23       		.byte	0x23
 1669 0201 8403     		.uleb128 0x184
 1670 0203 0A       		.uleb128 0xa
 1671 0204 C7030000 		.4byte	.LASF56
 1672 0208 01       		.byte	0x1
 1673 0209 7B       		.byte	0x7b
 1674 020a 5C020000 		.4byte	0x25c
 1675 020e 03       		.byte	0x3
 1676 020f 23       		.byte	0x23
 1677 0210 8004     		.uleb128 0x200
 1678 0212 0B       		.uleb128 0xb
 1679 0213 495000   		.ascii	"IP\000"
 1680 0216 01       		.byte	0x1
 1681 0217 7C       		.byte	0x7c
 1682 0218 7C020000 		.4byte	0x27c
 1683 021c 03       		.byte	0x3
 1684 021d 23       		.byte	0x23
 1685 021e 8006     		.uleb128 0x300
ARM GAS  /tmp/cc8xR3gm.s 			page 53


 1686 0220 00       		.byte	0
 1687 0221 0C       		.uleb128 0xc
 1688 0222 79010000 		.4byte	0x179
 1689 0226 31020000 		.4byte	0x231
 1690 022a 0D       		.uleb128 0xd
 1691 022b 31020000 		.4byte	0x231
 1692 022f 00       		.byte	0
 1693 0230 00       		.byte	0
 1694 0231 05       		.uleb128 0x5
 1695 0232 04       		.byte	0x4
 1696 0233 07       		.byte	0x7
 1697 0234 B2040000 		.4byte	.LASF57
 1698 0238 0E       		.uleb128 0xe
 1699 0239 21020000 		.4byte	0x221
 1700 023d 0C       		.uleb128 0xc
 1701 023e 79010000 		.4byte	0x179
 1702 0242 4D020000 		.4byte	0x24d
 1703 0246 0D       		.uleb128 0xd
 1704 0247 31020000 		.4byte	0x231
 1705 024b 1E       		.byte	0x1e
 1706 024c 00       		.byte	0
 1707 024d 0E       		.uleb128 0xe
 1708 024e 21020000 		.4byte	0x221
 1709 0252 0E       		.uleb128 0xe
 1710 0253 21020000 		.4byte	0x221
 1711 0257 0E       		.uleb128 0xe
 1712 0258 21020000 		.4byte	0x221
 1713 025c 0C       		.uleb128 0xc
 1714 025d 79010000 		.4byte	0x179
 1715 0261 6C020000 		.4byte	0x26c
 1716 0265 0D       		.uleb128 0xd
 1717 0266 31020000 		.4byte	0x231
 1718 026a 3F       		.byte	0x3f
 1719 026b 00       		.byte	0
 1720 026c 0C       		.uleb128 0xc
 1721 026d 79010000 		.4byte	0x179
 1722 0271 7C020000 		.4byte	0x27c
 1723 0275 0D       		.uleb128 0xd
 1724 0276 31020000 		.4byte	0x231
 1725 027a 07       		.byte	0x7
 1726 027b 00       		.byte	0
 1727 027c 0E       		.uleb128 0xe
 1728 027d 6C020000 		.4byte	0x26c
 1729 0281 07       		.uleb128 0x7
 1730 0282 60040000 		.4byte	.LASF58
 1731 0286 01       		.byte	0x1
 1732 0287 7D       		.byte	0x7d
 1733 0288 84010000 		.4byte	0x184
 1734 028c 0F       		.uleb128 0xf
 1735 028d 34       		.byte	0x34
 1736 028e 01       		.byte	0x1
 1737 028f 86       		.byte	0x86
 1738 0290 2F030000 		.4byte	0x32f
 1739 0294 0A       		.uleb128 0xa
 1740 0295 BC010000 		.4byte	.LASF59
 1741 0299 01       		.byte	0x1
 1742 029a 88       		.byte	0x88
ARM GAS  /tmp/cc8xR3gm.s 			page 54


 1743 029b 34030000 		.4byte	0x334
 1744 029f 02       		.byte	0x2
 1745 02a0 23       		.byte	0x23
 1746 02a1 00       		.uleb128 0
 1747 02a2 0A       		.uleb128 0xa
 1748 02a3 BB040000 		.4byte	.LASF60
 1749 02a7 01       		.byte	0x1
 1750 02a8 89       		.byte	0x89
 1751 02a9 2F030000 		.4byte	0x32f
 1752 02ad 02       		.byte	0x2
 1753 02ae 23       		.byte	0x23
 1754 02af 04       		.uleb128 0x4
 1755 02b0 0A       		.uleb128 0xa
 1756 02b1 9F030000 		.4byte	.LASF49
 1757 02b5 01       		.byte	0x1
 1758 02b6 8A       		.byte	0x8a
 1759 02b7 79010000 		.4byte	0x179
 1760 02bb 02       		.byte	0x2
 1761 02bc 23       		.byte	0x23
 1762 02bd 08       		.uleb128 0x8
 1763 02be 0A       		.uleb128 0xa
 1764 02bf 0B020000 		.4byte	.LASF61
 1765 02c3 01       		.byte	0x1
 1766 02c4 8B       		.byte	0x8b
 1767 02c5 2F030000 		.4byte	0x32f
 1768 02c9 02       		.byte	0x2
 1769 02ca 23       		.byte	0x23
 1770 02cb 0C       		.uleb128 0xc
 1771 02cc 0B       		.uleb128 0xb
 1772 02cd 53435200 		.ascii	"SCR\000"
 1773 02d1 01       		.byte	0x1
 1774 02d2 8C       		.byte	0x8c
 1775 02d3 2F030000 		.4byte	0x32f
 1776 02d7 02       		.byte	0x2
 1777 02d8 23       		.byte	0x23
 1778 02d9 10       		.uleb128 0x10
 1779 02da 0B       		.uleb128 0xb
 1780 02db 43435200 		.ascii	"CCR\000"
 1781 02df 01       		.byte	0x1
 1782 02e0 8D       		.byte	0x8d
 1783 02e1 2F030000 		.4byte	0x32f
 1784 02e5 02       		.byte	0x2
 1785 02e6 23       		.byte	0x23
 1786 02e7 14       		.uleb128 0x14
 1787 02e8 0A       		.uleb128 0xa
 1788 02e9 A9030000 		.4byte	.LASF62
 1789 02ed 01       		.byte	0x1
 1790 02ee 8E       		.byte	0x8e
 1791 02ef 79010000 		.4byte	0x179
 1792 02f3 02       		.byte	0x2
 1793 02f4 23       		.byte	0x23
 1794 02f5 18       		.uleb128 0x18
 1795 02f6 0B       		.uleb128 0xb
 1796 02f7 53485000 		.ascii	"SHP\000"
 1797 02fb 01       		.byte	0x1
 1798 02fc 8F       		.byte	0x8f
 1799 02fd 49030000 		.4byte	0x349
ARM GAS  /tmp/cc8xR3gm.s 			page 55


 1800 0301 02       		.byte	0x2
 1801 0302 23       		.byte	0x23
 1802 0303 1C       		.uleb128 0x1c
 1803 0304 0A       		.uleb128 0xa
 1804 0305 91020000 		.4byte	.LASF63
 1805 0309 01       		.byte	0x1
 1806 030a 90       		.byte	0x90
 1807 030b 2F030000 		.4byte	0x32f
 1808 030f 02       		.byte	0x2
 1809 0310 23       		.byte	0x23
 1810 0311 24       		.uleb128 0x24
 1811 0312 0A       		.uleb128 0xa
 1812 0313 B3030000 		.4byte	.LASF53
 1813 0317 01       		.byte	0x1
 1814 0318 91       		.byte	0x91
 1815 0319 39030000 		.4byte	0x339
 1816 031d 02       		.byte	0x2
 1817 031e 23       		.byte	0x23
 1818 031f 28       		.uleb128 0x28
 1819 0320 0A       		.uleb128 0xa
 1820 0321 73010000 		.4byte	.LASF64
 1821 0325 01       		.byte	0x1
 1822 0326 92       		.byte	0x92
 1823 0327 2F030000 		.4byte	0x32f
 1824 032b 02       		.byte	0x2
 1825 032c 23       		.byte	0x23
 1826 032d 30       		.uleb128 0x30
 1827 032e 00       		.byte	0
 1828 032f 0E       		.uleb128 0xe
 1829 0330 79010000 		.4byte	0x179
 1830 0334 10       		.uleb128 0x10
 1831 0335 2F030000 		.4byte	0x32f
 1832 0339 0C       		.uleb128 0xc
 1833 033a 79010000 		.4byte	0x179
 1834 033e 49030000 		.4byte	0x349
 1835 0342 0D       		.uleb128 0xd
 1836 0343 31020000 		.4byte	0x231
 1837 0347 01       		.byte	0x1
 1838 0348 00       		.byte	0
 1839 0349 0E       		.uleb128 0xe
 1840 034a 39030000 		.4byte	0x339
 1841 034e 07       		.uleb128 0x7
 1842 034f 6A040000 		.4byte	.LASF65
 1843 0353 01       		.byte	0x1
 1844 0354 93       		.byte	0x93
 1845 0355 8C020000 		.4byte	0x28c
 1846 0359 0E       		.uleb128 0xe
 1847 035a 6E010000 		.4byte	0x16e
 1848 035e 11       		.uleb128 0x11
 1849 035f 2C       		.byte	0x2c
 1850 0360 03       		.byte	0x3
 1851 0361 6902     		.2byte	0x269
 1852 0363 3A040000 		.4byte	0x43a
 1853 0367 12       		.uleb128 0x12
 1854 0368 9B010000 		.4byte	.LASF66
 1855 036c 03       		.byte	0x3
 1856 036d 6B02     		.2byte	0x26b
ARM GAS  /tmp/cc8xR3gm.s 			page 56


 1857 036f 2F030000 		.4byte	0x32f
 1858 0373 02       		.byte	0x2
 1859 0374 23       		.byte	0x23
 1860 0375 00       		.uleb128 0
 1861 0376 12       		.uleb128 0x12
 1862 0377 34040000 		.4byte	.LASF67
 1863 037b 03       		.byte	0x3
 1864 037c 6C02     		.2byte	0x26c
 1865 037e 59030000 		.4byte	0x359
 1866 0382 02       		.byte	0x2
 1867 0383 23       		.byte	0x23
 1868 0384 04       		.uleb128 0x4
 1869 0385 12       		.uleb128 0x12
 1870 0386 9F030000 		.4byte	.LASF49
 1871 038a 03       		.byte	0x3
 1872 038b 6D02     		.2byte	0x26d
 1873 038d 6E010000 		.4byte	0x16e
 1874 0391 02       		.byte	0x2
 1875 0392 23       		.byte	0x23
 1876 0393 06       		.uleb128 0x6
 1877 0394 12       		.uleb128 0x12
 1878 0395 48030000 		.4byte	.LASF68
 1879 0399 03       		.byte	0x3
 1880 039a 6E02     		.2byte	0x26e
 1881 039c 2F030000 		.4byte	0x32f
 1882 03a0 02       		.byte	0x2
 1883 03a1 23       		.byte	0x23
 1884 03a2 08       		.uleb128 0x8
 1885 03a3 12       		.uleb128 0x12
 1886 03a4 F7010000 		.4byte	.LASF69
 1887 03a8 03       		.byte	0x3
 1888 03a9 6F02     		.2byte	0x26f
 1889 03ab 2F030000 		.4byte	0x32f
 1890 03af 02       		.byte	0x2
 1891 03b0 23       		.byte	0x23
 1892 03b1 0C       		.uleb128 0xc
 1893 03b2 13       		.uleb128 0x13
 1894 03b3 49445200 		.ascii	"IDR\000"
 1895 03b7 03       		.byte	0x3
 1896 03b8 7002     		.2byte	0x270
 1897 03ba 59030000 		.4byte	0x359
 1898 03be 02       		.byte	0x2
 1899 03bf 23       		.byte	0x23
 1900 03c0 10       		.uleb128 0x10
 1901 03c1 12       		.uleb128 0x12
 1902 03c2 A9030000 		.4byte	.LASF62
 1903 03c6 03       		.byte	0x3
 1904 03c7 7102     		.2byte	0x271
 1905 03c9 6E010000 		.4byte	0x16e
 1906 03cd 02       		.byte	0x2
 1907 03ce 23       		.byte	0x23
 1908 03cf 12       		.uleb128 0x12
 1909 03d0 13       		.uleb128 0x13
 1910 03d1 4F445200 		.ascii	"ODR\000"
 1911 03d5 03       		.byte	0x3
 1912 03d6 7202     		.2byte	0x272
 1913 03d8 59030000 		.4byte	0x359
ARM GAS  /tmp/cc8xR3gm.s 			page 57


 1914 03dc 02       		.byte	0x2
 1915 03dd 23       		.byte	0x23
 1916 03de 14       		.uleb128 0x14
 1917 03df 12       		.uleb128 0x12
 1918 03e0 B3030000 		.4byte	.LASF53
 1919 03e4 03       		.byte	0x3
 1920 03e5 7302     		.2byte	0x273
 1921 03e7 6E010000 		.4byte	0x16e
 1922 03eb 02       		.byte	0x2
 1923 03ec 23       		.byte	0x23
 1924 03ed 16       		.uleb128 0x16
 1925 03ee 12       		.uleb128 0x12
 1926 03ef 16000000 		.4byte	.LASF70
 1927 03f3 03       		.byte	0x3
 1928 03f4 7402     		.2byte	0x274
 1929 03f6 2F030000 		.4byte	0x32f
 1930 03fa 02       		.byte	0x2
 1931 03fb 23       		.byte	0x23
 1932 03fc 18       		.uleb128 0x18
 1933 03fd 12       		.uleb128 0x12
 1934 03fe 78060000 		.4byte	.LASF71
 1935 0402 03       		.byte	0x3
 1936 0403 7502     		.2byte	0x275
 1937 0405 2F030000 		.4byte	0x32f
 1938 0409 02       		.byte	0x2
 1939 040a 23       		.byte	0x23
 1940 040b 1C       		.uleb128 0x1c
 1941 040c 13       		.uleb128 0x13
 1942 040d 41465200 		.ascii	"AFR\000"
 1943 0411 03       		.byte	0x3
 1944 0412 7602     		.2byte	0x276
 1945 0414 3A040000 		.4byte	0x43a
 1946 0418 02       		.byte	0x2
 1947 0419 23       		.byte	0x23
 1948 041a 20       		.uleb128 0x20
 1949 041b 13       		.uleb128 0x13
 1950 041c 42525200 		.ascii	"BRR\000"
 1951 0420 03       		.byte	0x3
 1952 0421 7702     		.2byte	0x277
 1953 0423 59030000 		.4byte	0x359
 1954 0427 02       		.byte	0x2
 1955 0428 23       		.byte	0x23
 1956 0429 28       		.uleb128 0x28
 1957 042a 12       		.uleb128 0x12
 1958 042b BD030000 		.4byte	.LASF55
 1959 042f 03       		.byte	0x3
 1960 0430 7802     		.2byte	0x278
 1961 0432 6E010000 		.4byte	0x16e
 1962 0436 02       		.byte	0x2
 1963 0437 23       		.byte	0x23
 1964 0438 2A       		.uleb128 0x2a
 1965 0439 00       		.byte	0
 1966 043a 0E       		.uleb128 0xe
 1967 043b 39030000 		.4byte	0x339
 1968 043f 06       		.uleb128 0x6
 1969 0440 84040000 		.4byte	.LASF72
 1970 0444 03       		.byte	0x3
ARM GAS  /tmp/cc8xR3gm.s 			page 58


 1971 0445 7902     		.2byte	0x279
 1972 0447 5E030000 		.4byte	0x35e
 1973 044b 11       		.uleb128 0x11
 1974 044c 38       		.byte	0x38
 1975 044d 03       		.byte	0x3
 1976 044e B502     		.2byte	0x2b5
 1977 0450 26050000 		.4byte	0x526
 1978 0454 13       		.uleb128 0x13
 1979 0455 435200   		.ascii	"CR\000"
 1980 0458 03       		.byte	0x3
 1981 0459 B702     		.2byte	0x2b7
 1982 045b 2F030000 		.4byte	0x32f
 1983 045f 02       		.byte	0x2
 1984 0460 23       		.byte	0x23
 1985 0461 00       		.uleb128 0
 1986 0462 12       		.uleb128 0x12
 1987 0463 3B040000 		.4byte	.LASF73
 1988 0467 03       		.byte	0x3
 1989 0468 B802     		.2byte	0x2b8
 1990 046a 2F030000 		.4byte	0x32f
 1991 046e 02       		.byte	0x2
 1992 046f 23       		.byte	0x23
 1993 0470 04       		.uleb128 0x4
 1994 0471 13       		.uleb128 0x13
 1995 0472 43495200 		.ascii	"CIR\000"
 1996 0476 03       		.byte	0x3
 1997 0477 B902     		.2byte	0x2b9
 1998 0479 2F030000 		.4byte	0x32f
 1999 047d 02       		.byte	0x2
 2000 047e 23       		.byte	0x23
 2001 047f 08       		.uleb128 0x8
 2002 0480 12       		.uleb128 0x12
 2003 0481 38000000 		.4byte	.LASF74
 2004 0485 03       		.byte	0x3
 2005 0486 BA02     		.2byte	0x2ba
 2006 0488 2F030000 		.4byte	0x32f
 2007 048c 02       		.byte	0x2
 2008 048d 23       		.byte	0x23
 2009 048e 0C       		.uleb128 0xc
 2010 048f 12       		.uleb128 0x12
 2011 0490 FD010000 		.4byte	.LASF75
 2012 0494 03       		.byte	0x3
 2013 0495 BB02     		.2byte	0x2bb
 2014 0497 2F030000 		.4byte	0x32f
 2015 049b 02       		.byte	0x2
 2016 049c 23       		.byte	0x23
 2017 049d 10       		.uleb128 0x10
 2018 049e 12       		.uleb128 0x12
 2019 049f 2E020000 		.4byte	.LASF76
 2020 04a3 03       		.byte	0x3
 2021 04a4 BC02     		.2byte	0x2bc
 2022 04a6 2F030000 		.4byte	0x32f
 2023 04aa 02       		.byte	0x2
 2024 04ab 23       		.byte	0x23
 2025 04ac 14       		.uleb128 0x14
 2026 04ad 12       		.uleb128 0x12
 2027 04ae 13030000 		.4byte	.LASF77
ARM GAS  /tmp/cc8xR3gm.s 			page 59


 2028 04b2 03       		.byte	0x3
 2029 04b3 BD02     		.2byte	0x2bd
 2030 04b5 2F030000 		.4byte	0x32f
 2031 04b9 02       		.byte	0x2
 2032 04ba 23       		.byte	0x23
 2033 04bb 18       		.uleb128 0x18
 2034 04bc 12       		.uleb128 0x12
 2035 04bd 00000000 		.4byte	.LASF78
 2036 04c1 03       		.byte	0x3
 2037 04c2 BE02     		.2byte	0x2be
 2038 04c4 2F030000 		.4byte	0x32f
 2039 04c8 02       		.byte	0x2
 2040 04c9 23       		.byte	0x23
 2041 04ca 1C       		.uleb128 0x1c
 2042 04cb 12       		.uleb128 0x12
 2043 04cc 97000000 		.4byte	.LASF79
 2044 04d0 03       		.byte	0x3
 2045 04d1 BF02     		.2byte	0x2bf
 2046 04d3 2F030000 		.4byte	0x32f
 2047 04d7 02       		.byte	0x2
 2048 04d8 23       		.byte	0x23
 2049 04d9 20       		.uleb128 0x20
 2050 04da 13       		.uleb128 0x13
 2051 04db 43535200 		.ascii	"CSR\000"
 2052 04df 03       		.byte	0x3
 2053 04e0 C002     		.2byte	0x2c0
 2054 04e2 2F030000 		.4byte	0x32f
 2055 04e6 02       		.byte	0x2
 2056 04e7 23       		.byte	0x23
 2057 04e8 24       		.uleb128 0x24
 2058 04e9 12       		.uleb128 0x12
 2059 04ea 17010000 		.4byte	.LASF80
 2060 04ee 03       		.byte	0x3
 2061 04ef C102     		.2byte	0x2c1
 2062 04f1 2F030000 		.4byte	0x32f
 2063 04f5 02       		.byte	0x2
 2064 04f6 23       		.byte	0x23
 2065 04f7 28       		.uleb128 0x28
 2066 04f8 12       		.uleb128 0x12
 2067 04f9 F3020000 		.4byte	.LASF81
 2068 04fd 03       		.byte	0x3
 2069 04fe C202     		.2byte	0x2c2
 2070 0500 2F030000 		.4byte	0x32f
 2071 0504 02       		.byte	0x2
 2072 0505 23       		.byte	0x23
 2073 0506 2C       		.uleb128 0x2c
 2074 0507 12       		.uleb128 0x12
 2075 0508 F9020000 		.4byte	.LASF82
 2076 050c 03       		.byte	0x3
 2077 050d C302     		.2byte	0x2c3
 2078 050f 2F030000 		.4byte	0x32f
 2079 0513 02       		.byte	0x2
 2080 0514 23       		.byte	0x23
 2081 0515 30       		.uleb128 0x30
 2082 0516 13       		.uleb128 0x13
 2083 0517 43523200 		.ascii	"CR2\000"
 2084 051b 03       		.byte	0x3
ARM GAS  /tmp/cc8xR3gm.s 			page 60


 2085 051c C402     		.2byte	0x2c4
 2086 051e 2F030000 		.4byte	0x32f
 2087 0522 02       		.byte	0x2
 2088 0523 23       		.byte	0x23
 2089 0524 34       		.uleb128 0x34
 2090 0525 00       		.byte	0
 2091 0526 06       		.uleb128 0x6
 2092 0527 C2010000 		.4byte	.LASF83
 2093 052b 03       		.byte	0x3
 2094 052c C502     		.2byte	0x2c5
 2095 052e 4B040000 		.4byte	0x44b
 2096 0532 11       		.uleb128 0x11
 2097 0533 2C       		.byte	0x2c
 2098 0534 03       		.byte	0x3
 2099 0535 4A03     		.2byte	0x34a
 2100 0537 2C060000 		.4byte	0x62c
 2101 053b 13       		.uleb128 0x13
 2102 053c 43523100 		.ascii	"CR1\000"
 2103 0540 03       		.byte	0x3
 2104 0541 4C03     		.2byte	0x34c
 2105 0543 2F030000 		.4byte	0x32f
 2106 0547 02       		.byte	0x2
 2107 0548 23       		.byte	0x23
 2108 0549 00       		.uleb128 0
 2109 054a 13       		.uleb128 0x13
 2110 054b 43523200 		.ascii	"CR2\000"
 2111 054f 03       		.byte	0x3
 2112 0550 4D03     		.2byte	0x34d
 2113 0552 2F030000 		.4byte	0x32f
 2114 0556 02       		.byte	0x2
 2115 0557 23       		.byte	0x23
 2116 0558 04       		.uleb128 0x4
 2117 0559 13       		.uleb128 0x13
 2118 055a 43523300 		.ascii	"CR3\000"
 2119 055e 03       		.byte	0x3
 2120 055f 4E03     		.2byte	0x34e
 2121 0561 2F030000 		.4byte	0x32f
 2122 0565 02       		.byte	0x2
 2123 0566 23       		.byte	0x23
 2124 0567 08       		.uleb128 0x8
 2125 0568 13       		.uleb128 0x13
 2126 0569 42525200 		.ascii	"BRR\000"
 2127 056d 03       		.byte	0x3
 2128 056e 4F03     		.2byte	0x34f
 2129 0570 59030000 		.4byte	0x359
 2130 0574 02       		.byte	0x2
 2131 0575 23       		.byte	0x23
 2132 0576 0C       		.uleb128 0xc
 2133 0577 12       		.uleb128 0x12
 2134 0578 A9030000 		.4byte	.LASF62
 2135 057c 03       		.byte	0x3
 2136 057d 5003     		.2byte	0x350
 2137 057f 6E010000 		.4byte	0x16e
 2138 0583 02       		.byte	0x2
 2139 0584 23       		.byte	0x23
 2140 0585 0E       		.uleb128 0xe
 2141 0586 12       		.uleb128 0x12
ARM GAS  /tmp/cc8xR3gm.s 			page 61


 2142 0587 04010000 		.4byte	.LASF84
 2143 058b 03       		.byte	0x3
 2144 058c 5103     		.2byte	0x351
 2145 058e 59030000 		.4byte	0x359
 2146 0592 02       		.byte	0x2
 2147 0593 23       		.byte	0x23
 2148 0594 10       		.uleb128 0x10
 2149 0595 12       		.uleb128 0x12
 2150 0596 B3030000 		.4byte	.LASF53
 2151 059a 03       		.byte	0x3
 2152 059b 5203     		.2byte	0x352
 2153 059d 6E010000 		.4byte	0x16e
 2154 05a1 02       		.byte	0x2
 2155 05a2 23       		.byte	0x23
 2156 05a3 12       		.uleb128 0x12
 2157 05a4 12       		.uleb128 0x12
 2158 05a5 48020000 		.4byte	.LASF85
 2159 05a9 03       		.byte	0x3
 2160 05aa 5303     		.2byte	0x353
 2161 05ac 2F030000 		.4byte	0x32f
 2162 05b0 02       		.byte	0x2
 2163 05b1 23       		.byte	0x23
 2164 05b2 14       		.uleb128 0x14
 2165 05b3 13       		.uleb128 0x13
 2166 05b4 52515200 		.ascii	"RQR\000"
 2167 05b8 03       		.byte	0x3
 2168 05b9 5403     		.2byte	0x354
 2169 05bb 59030000 		.4byte	0x359
 2170 05bf 02       		.byte	0x2
 2171 05c0 23       		.byte	0x23
 2172 05c1 18       		.uleb128 0x18
 2173 05c2 12       		.uleb128 0x12
 2174 05c3 BD030000 		.4byte	.LASF55
 2175 05c7 03       		.byte	0x3
 2176 05c8 5503     		.2byte	0x355
 2177 05ca 6E010000 		.4byte	0x16e
 2178 05ce 02       		.byte	0x2
 2179 05cf 23       		.byte	0x23
 2180 05d0 1A       		.uleb128 0x1a
 2181 05d1 13       		.uleb128 0x13
 2182 05d2 49535200 		.ascii	"ISR\000"
 2183 05d6 03       		.byte	0x3
 2184 05d7 5603     		.2byte	0x356
 2185 05d9 2F030000 		.4byte	0x32f
 2186 05dd 02       		.byte	0x2
 2187 05de 23       		.byte	0x23
 2188 05df 1C       		.uleb128 0x1c
 2189 05e0 13       		.uleb128 0x13
 2190 05e1 49435200 		.ascii	"ICR\000"
 2191 05e5 03       		.byte	0x3
 2192 05e6 5703     		.2byte	0x357
 2193 05e8 2F030000 		.4byte	0x32f
 2194 05ec 02       		.byte	0x2
 2195 05ed 23       		.byte	0x23
 2196 05ee 20       		.uleb128 0x20
 2197 05ef 13       		.uleb128 0x13
 2198 05f0 52445200 		.ascii	"RDR\000"
ARM GAS  /tmp/cc8xR3gm.s 			page 62


 2199 05f4 03       		.byte	0x3
 2200 05f5 5803     		.2byte	0x358
 2201 05f7 59030000 		.4byte	0x359
 2202 05fb 02       		.byte	0x2
 2203 05fc 23       		.byte	0x23
 2204 05fd 24       		.uleb128 0x24
 2205 05fe 12       		.uleb128 0x12
 2206 05ff C7030000 		.4byte	.LASF56
 2207 0603 03       		.byte	0x3
 2208 0604 5903     		.2byte	0x359
 2209 0606 6E010000 		.4byte	0x16e
 2210 060a 02       		.byte	0x2
 2211 060b 23       		.byte	0x23
 2212 060c 26       		.uleb128 0x26
 2213 060d 13       		.uleb128 0x13
 2214 060e 54445200 		.ascii	"TDR\000"
 2215 0612 03       		.byte	0x3
 2216 0613 5A03     		.2byte	0x35a
 2217 0615 59030000 		.4byte	0x359
 2218 0619 02       		.byte	0x2
 2219 061a 23       		.byte	0x23
 2220 061b 28       		.uleb128 0x28
 2221 061c 12       		.uleb128 0x12
 2222 061d D1030000 		.4byte	.LASF86
 2223 0621 03       		.byte	0x3
 2224 0622 5B03     		.2byte	0x35b
 2225 0624 6E010000 		.4byte	0x16e
 2226 0628 02       		.byte	0x2
 2227 0629 23       		.byte	0x23
 2228 062a 2A       		.uleb128 0x2a
 2229 062b 00       		.byte	0
 2230 062c 06       		.uleb128 0x6
 2231 062d D8010000 		.4byte	.LASF87
 2232 0631 03       		.byte	0x3
 2233 0632 5C03     		.2byte	0x35c
 2234 0634 32050000 		.4byte	0x532
 2235 0638 05       		.uleb128 0x5
 2236 0639 08       		.byte	0x8
 2237 063a 04       		.byte	0x4
 2238 063b 5B030000 		.4byte	.LASF88
 2239 063f 14       		.uleb128 0x14
 2240 0640 04       		.byte	0x4
 2241 0641 19010000 		.4byte	0x119
 2242 0645 14       		.uleb128 0x14
 2243 0646 04       		.byte	0x4
 2244 0647 4B060000 		.4byte	0x64b
 2245 064b 05       		.uleb128 0x5
 2246 064c 01       		.byte	0x1
 2247 064d 08       		.byte	0x8
 2248 064e 06020000 		.4byte	.LASF89
 2249 0652 15       		.uleb128 0x15
 2250 0653 37010000 		.4byte	.LASF90
 2251 0657 01       		.byte	0x1
 2252 0658 2B03     		.2byte	0x32b
 2253 065a 01       		.byte	0x1
 2254 065b 00000000 		.4byte	.LFB11
 2255 065f 2C000000 		.4byte	.LFE11
ARM GAS  /tmp/cc8xR3gm.s 			page 63


 2256 0663 00000000 		.4byte	.LLST0
 2257 0667 01       		.byte	0x1
 2258 0668 7C060000 		.4byte	0x67c
 2259 066c 16       		.uleb128 0x16
 2260 066d 70030000 		.4byte	.LASF92
 2261 0671 01       		.byte	0x1
 2262 0672 2B03     		.2byte	0x32b
 2263 0674 0D010000 		.4byte	0x10d
 2264 0678 02       		.byte	0x2
 2265 0679 91       		.byte	0x91
 2266 067a 7F       		.sleb128 -1
 2267 067b 00       		.byte	0
 2268 067c 15       		.uleb128 0x15
 2269 067d 6E000000 		.4byte	.LASF91
 2270 0681 01       		.byte	0x1
 2271 0682 7C03     		.2byte	0x37c
 2272 0684 01       		.byte	0x1
 2273 0685 00000000 		.4byte	.LFB16
 2274 0689 EC000000 		.4byte	.LFE16
 2275 068d 20000000 		.4byte	.LLST1
 2276 0691 01       		.byte	0x1
 2277 0692 B5060000 		.4byte	0x6b5
 2278 0696 16       		.uleb128 0x16
 2279 0697 70030000 		.4byte	.LASF92
 2280 069b 01       		.byte	0x1
 2281 069c 7C03     		.2byte	0x37c
 2282 069e 0D010000 		.4byte	0x10d
 2283 06a2 02       		.byte	0x2
 2284 06a3 91       		.byte	0x91
 2285 06a4 6F       		.sleb128 -17
 2286 06a5 16       		.uleb128 0x16
 2287 06a6 1E040000 		.4byte	.LASF93
 2288 06aa 01       		.byte	0x1
 2289 06ab 7C03     		.2byte	0x37c
 2290 06ad 79010000 		.4byte	0x179
 2291 06b1 02       		.byte	0x2
 2292 06b2 91       		.byte	0x91
 2293 06b3 68       		.sleb128 -24
 2294 06b4 00       		.byte	0
 2295 06b5 17       		.uleb128 0x17
 2296 06b6 01       		.byte	0x1
 2297 06b7 6E020000 		.4byte	.LASF97
 2298 06bb 02       		.byte	0x2
 2299 06bc 51       		.byte	0x51
 2300 06bd 01       		.byte	0x1
 2301 06be 19010000 		.4byte	0x119
 2302 06c2 00000000 		.4byte	.LFB20
 2303 06c6 0C010000 		.4byte	.LFE20
 2304 06ca 4C000000 		.4byte	.LLST2
 2305 06ce 01       		.byte	0x1
 2306 06cf FE060000 		.4byte	0x6fe
 2307 06d3 18       		.uleb128 0x18
 2308 06d4 5D010000 		.4byte	.LASF94
 2309 06d8 02       		.byte	0x2
 2310 06d9 51       		.byte	0x51
 2311 06da 19010000 		.4byte	0x119
 2312 06de 02       		.byte	0x2
ARM GAS  /tmp/cc8xR3gm.s 			page 64


 2313 06df 91       		.byte	0x91
 2314 06e0 77       		.sleb128 -9
 2315 06e1 19       		.uleb128 0x19
 2316 06e2 2E030000 		.4byte	.LASF95
 2317 06e6 02       		.byte	0x2
 2318 06e7 53       		.byte	0x53
 2319 06e8 67010000 		.4byte	0x167
 2320 06ec 02       		.byte	0x2
 2321 06ed 91       		.byte	0x91
 2322 06ee 7C       		.sleb128 -4
 2323 06ef 19       		.uleb128 0x19
 2324 06f0 CE010000 		.4byte	.LASF96
 2325 06f4 02       		.byte	0x2
 2326 06f5 54       		.byte	0x54
 2327 06f6 67010000 		.4byte	0x167
 2328 06fa 02       		.byte	0x2
 2329 06fb 91       		.byte	0x91
 2330 06fc 78       		.sleb128 -8
 2331 06fd 00       		.byte	0
 2332 06fe 1A       		.uleb128 0x1a
 2333 06ff 01       		.byte	0x1
 2334 0700 AB020000 		.4byte	.LASF98
 2335 0704 02       		.byte	0x2
 2336 0705 87       		.byte	0x87
 2337 0706 01       		.byte	0x1
 2338 0707 19010000 		.4byte	0x119
 2339 070b 00000000 		.4byte	.LFB21
 2340 070f 60000000 		.4byte	.LFE21
 2341 0713 6C000000 		.4byte	.LLST3
 2342 0717 01       		.byte	0x1
 2343 0718 47070000 		.4byte	0x747
 2344 071c 18       		.uleb128 0x18
 2345 071d 4D060000 		.4byte	.LASF99
 2346 0721 02       		.byte	0x2
 2347 0722 87       		.byte	0x87
 2348 0723 3F060000 		.4byte	0x63f
 2349 0727 02       		.byte	0x2
 2350 0728 91       		.byte	0x91
 2351 0729 6C       		.sleb128 -20
 2352 072a 18       		.uleb128 0x18
 2353 072b E2020000 		.4byte	.LASF100
 2354 072f 02       		.byte	0x2
 2355 0730 87       		.byte	0x87
 2356 0731 32010000 		.4byte	0x132
 2357 0735 02       		.byte	0x2
 2358 0736 91       		.byte	0x91
 2359 0737 6A       		.sleb128 -22
 2360 0738 1B       		.uleb128 0x1b
 2361 0739 6C656E00 		.ascii	"len\000"
 2362 073d 02       		.byte	0x2
 2363 073e 89       		.byte	0x89
 2364 073f 67010000 		.4byte	0x167
 2365 0743 02       		.byte	0x2
 2366 0744 91       		.byte	0x91
 2367 0745 74       		.sleb128 -12
 2368 0746 00       		.byte	0
 2369 0747 1C       		.uleb128 0x1c
ARM GAS  /tmp/cc8xR3gm.s 			page 65


 2370 0748 01       		.byte	0x1
 2371 0749 75030000 		.4byte	.LASF102
 2372 074d 02       		.byte	0x2
 2373 074e 9B       		.byte	0x9b
 2374 074f 01       		.byte	0x1
 2375 0750 00000000 		.4byte	.LFB22
 2376 0754 18010000 		.4byte	.LFE22
 2377 0758 98000000 		.4byte	.LLST4
 2378 075c 01       		.byte	0x1
 2379 075d 70070000 		.4byte	0x770
 2380 0761 19       		.uleb128 0x19
 2381 0762 AF000000 		.4byte	.LASF101
 2382 0766 02       		.byte	0x2
 2383 0767 9D       		.byte	0x9d
 2384 0768 19010000 		.4byte	0x119
 2385 076c 02       		.byte	0x2
 2386 076d 91       		.byte	0x91
 2387 076e 7F       		.sleb128 -1
 2388 076f 00       		.byte	0
 2389 0770 1C       		.uleb128 0x1c
 2390 0771 01       		.byte	0x1
 2391 0772 66060000 		.4byte	.LASF103
 2392 0776 02       		.byte	0x2
 2393 0777 D8       		.byte	0xd8
 2394 0778 01       		.byte	0x1
 2395 0779 00000000 		.4byte	.LFB23
 2396 077d 00010000 		.4byte	.LFE23
 2397 0781 B8000000 		.4byte	.LLST5
 2398 0785 01       		.byte	0x1
 2399 0786 99070000 		.4byte	0x799
 2400 078a 19       		.uleb128 0x19
 2401 078b AF000000 		.4byte	.LASF101
 2402 078f 02       		.byte	0x2
 2403 0790 DA       		.byte	0xda
 2404 0791 19010000 		.4byte	0x119
 2405 0795 02       		.byte	0x2
 2406 0796 91       		.byte	0x91
 2407 0797 7F       		.sleb128 -1
 2408 0798 00       		.byte	0
 2409 0799 1D       		.uleb128 0x1d
 2410 079a 01       		.byte	0x1
 2411 079b 69050000 		.4byte	.LASF104
 2412 079f 02       		.byte	0x2
 2413 07a0 0901     		.2byte	0x109
 2414 07a2 01       		.byte	0x1
 2415 07a3 00000000 		.4byte	.LFB24
 2416 07a7 2C000000 		.4byte	.LFE24
 2417 07ab D8000000 		.4byte	.LLST6
 2418 07af 01       		.byte	0x1
 2419 07b0 D1070000 		.4byte	0x7d1
 2420 07b4 16       		.uleb128 0x16
 2421 07b5 09010000 		.4byte	.LASF105
 2422 07b9 02       		.byte	0x2
 2423 07ba 0901     		.2byte	0x109
 2424 07bc 45060000 		.4byte	0x645
 2425 07c0 02       		.byte	0x2
 2426 07c1 91       		.byte	0x91
ARM GAS  /tmp/cc8xR3gm.s 			page 66


 2427 07c2 6C       		.sleb128 -20
 2428 07c3 1E       		.uleb128 0x1e
 2429 07c4 6900     		.ascii	"i\000"
 2430 07c6 02       		.byte	0x2
 2431 07c7 0B01     		.2byte	0x10b
 2432 07c9 19010000 		.4byte	0x119
 2433 07cd 02       		.byte	0x2
 2434 07ce 91       		.byte	0x91
 2435 07cf 77       		.sleb128 -9
 2436 07d0 00       		.byte	0
 2437 07d1 1D       		.uleb128 0x1d
 2438 07d2 01       		.byte	0x1
 2439 07d3 1B030000 		.4byte	.LASF106
 2440 07d7 02       		.byte	0x2
 2441 07d8 1101     		.2byte	0x111
 2442 07da 01       		.byte	0x1
 2443 07db 00000000 		.4byte	.LFB25
 2444 07df 60000000 		.4byte	.LFE25
 2445 07e3 04010000 		.4byte	.LLST7
 2446 07e7 01       		.byte	0x1
 2447 07e8 0B080000 		.4byte	0x80b
 2448 07ec 16       		.uleb128 0x16
 2449 07ed 09010000 		.4byte	.LASF105
 2450 07f1 02       		.byte	0x2
 2451 07f2 1101     		.2byte	0x111
 2452 07f4 3F060000 		.4byte	0x63f
 2453 07f8 02       		.byte	0x2
 2454 07f9 91       		.byte	0x91
 2455 07fa 74       		.sleb128 -12
 2456 07fb 16       		.uleb128 0x16
 2457 07fc DD020000 		.4byte	.LASF107
 2458 0800 02       		.byte	0x2
 2459 0801 1101     		.2byte	0x111
 2460 0803 19010000 		.4byte	0x119
 2461 0807 02       		.byte	0x2
 2462 0808 91       		.byte	0x91
 2463 0809 73       		.sleb128 -13
 2464 080a 00       		.byte	0
 2465 080b 1D       		.uleb128 0x1d
 2466 080c 01       		.byte	0x1
 2467 080d 37030000 		.4byte	.LASF108
 2468 0811 02       		.byte	0x2
 2469 0812 1B01     		.2byte	0x11b
 2470 0814 01       		.byte	0x1
 2471 0815 00000000 		.4byte	.LFB26
 2472 0819 1E000000 		.4byte	.LFE26
 2473 081d 30010000 		.4byte	.LLST8
 2474 0821 01       		.byte	0x1
 2475 0822 36080000 		.4byte	0x836
 2476 0826 16       		.uleb128 0x16
 2477 0827 E6040000 		.4byte	.LASF109
 2478 082b 02       		.byte	0x2
 2479 082c 1B01     		.2byte	0x11b
 2480 082e 19010000 		.4byte	0x119
 2481 0832 02       		.byte	0x2
 2482 0833 91       		.byte	0x91
 2483 0834 77       		.sleb128 -9
ARM GAS  /tmp/cc8xR3gm.s 			page 67


 2484 0835 00       		.byte	0
 2485 0836 1F       		.uleb128 0x1f
 2486 0837 01       		.byte	0x1
 2487 0838 4A000000 		.4byte	.LASF110
 2488 083c 02       		.byte	0x2
 2489 083d 2001     		.2byte	0x120
 2490 083f 01       		.byte	0x1
 2491 0840 19010000 		.4byte	0x119
 2492 0844 00000000 		.4byte	.LFB27
 2493 0848 60000000 		.4byte	.LFE27
 2494 084c 5C010000 		.4byte	.LLST9
 2495 0850 01       		.byte	0x1
 2496 0851 83080000 		.4byte	0x883
 2497 0855 16       		.uleb128 0x16
 2498 0856 4D060000 		.4byte	.LASF99
 2499 085a 02       		.byte	0x2
 2500 085b 2001     		.2byte	0x120
 2501 085d 3F060000 		.4byte	0x63f
 2502 0861 02       		.byte	0x2
 2503 0862 91       		.byte	0x91
 2504 0863 6C       		.sleb128 -20
 2505 0864 16       		.uleb128 0x16
 2506 0865 E2020000 		.4byte	.LASF100
 2507 0869 02       		.byte	0x2
 2508 086a 2001     		.2byte	0x120
 2509 086c 32010000 		.4byte	0x132
 2510 0870 02       		.byte	0x2
 2511 0871 91       		.byte	0x91
 2512 0872 6A       		.sleb128 -22
 2513 0873 1E       		.uleb128 0x1e
 2514 0874 6C656E00 		.ascii	"len\000"
 2515 0878 02       		.byte	0x2
 2516 0879 2201     		.2byte	0x122
 2517 087b 67010000 		.4byte	0x167
 2518 087f 02       		.byte	0x2
 2519 0880 91       		.byte	0x91
 2520 0881 74       		.sleb128 -12
 2521 0882 00       		.byte	0
 2522 0883 1D       		.uleb128 0x1d
 2523 0884 01       		.byte	0x1
 2524 0885 50030000 		.4byte	.LASF111
 2525 0889 02       		.byte	0x2
 2526 088a 3401     		.2byte	0x134
 2527 088c 01       		.byte	0x1
 2528 088d 00000000 		.4byte	.LFB28
 2529 0891 2C000000 		.4byte	.LFE28
 2530 0895 88010000 		.4byte	.LLST10
 2531 0899 01       		.byte	0x1
 2532 089a BB080000 		.4byte	0x8bb
 2533 089e 16       		.uleb128 0x16
 2534 089f 09010000 		.4byte	.LASF105
 2535 08a3 02       		.byte	0x2
 2536 08a4 3401     		.2byte	0x134
 2537 08a6 45060000 		.4byte	0x645
 2538 08aa 02       		.byte	0x2
 2539 08ab 91       		.byte	0x91
 2540 08ac 6C       		.sleb128 -20
ARM GAS  /tmp/cc8xR3gm.s 			page 68


 2541 08ad 1E       		.uleb128 0x1e
 2542 08ae 6900     		.ascii	"i\000"
 2543 08b0 02       		.byte	0x2
 2544 08b1 3601     		.2byte	0x136
 2545 08b3 19010000 		.4byte	0x119
 2546 08b7 02       		.byte	0x2
 2547 08b8 91       		.byte	0x91
 2548 08b9 77       		.sleb128 -9
 2549 08ba 00       		.byte	0
 2550 08bb 1D       		.uleb128 0x1d
 2551 08bc 01       		.byte	0x1
 2552 08bd 5B000000 		.4byte	.LASF112
 2553 08c1 02       		.byte	0x2
 2554 08c2 3C01     		.2byte	0x13c
 2555 08c4 01       		.byte	0x1
 2556 08c5 00000000 		.4byte	.LFB29
 2557 08c9 60000000 		.4byte	.LFE29
 2558 08cd B4010000 		.4byte	.LLST11
 2559 08d1 01       		.byte	0x1
 2560 08d2 F5080000 		.4byte	0x8f5
 2561 08d6 16       		.uleb128 0x16
 2562 08d7 09010000 		.4byte	.LASF105
 2563 08db 02       		.byte	0x2
 2564 08dc 3C01     		.2byte	0x13c
 2565 08de 3F060000 		.4byte	0x63f
 2566 08e2 02       		.byte	0x2
 2567 08e3 91       		.byte	0x91
 2568 08e4 74       		.sleb128 -12
 2569 08e5 16       		.uleb128 0x16
 2570 08e6 DD020000 		.4byte	.LASF107
 2571 08ea 02       		.byte	0x2
 2572 08eb 3C01     		.2byte	0x13c
 2573 08ed 19010000 		.4byte	0x119
 2574 08f1 02       		.byte	0x2
 2575 08f2 91       		.byte	0x91
 2576 08f3 73       		.sleb128 -13
 2577 08f4 00       		.byte	0
 2578 08f5 1D       		.uleb128 0x1d
 2579 08f6 01       		.byte	0x1
 2580 08f7 73040000 		.4byte	.LASF113
 2581 08fb 02       		.byte	0x2
 2582 08fc 4601     		.2byte	0x146
 2583 08fe 01       		.byte	0x1
 2584 08ff 00000000 		.4byte	.LFB30
 2585 0903 1E000000 		.4byte	.LFE30
 2586 0907 E0010000 		.4byte	.LLST12
 2587 090b 01       		.byte	0x1
 2588 090c 20090000 		.4byte	0x920
 2589 0910 16       		.uleb128 0x16
 2590 0911 E6040000 		.4byte	.LASF109
 2591 0915 02       		.byte	0x2
 2592 0916 4601     		.2byte	0x146
 2593 0918 19010000 		.4byte	0x119
 2594 091c 02       		.byte	0x2
 2595 091d 91       		.byte	0x91
 2596 091e 77       		.sleb128 -9
 2597 091f 00       		.byte	0
ARM GAS  /tmp/cc8xR3gm.s 			page 69


 2598 0920 20       		.uleb128 0x20
 2599 0921 01       		.byte	0x1
 2600 0922 78010000 		.4byte	.LASF114
 2601 0926 02       		.byte	0x2
 2602 0927 4C01     		.2byte	0x14c
 2603 0929 01       		.byte	0x1
 2604 092a 00000000 		.4byte	.LFB31
 2605 092e 7C000000 		.4byte	.LFE31
 2606 0932 0C020000 		.4byte	.LLST13
 2607 0936 01       		.byte	0x1
 2608 0937 20       		.uleb128 0x20
 2609 0938 01       		.byte	0x1
 2610 0939 66010000 		.4byte	.LASF115
 2611 093d 02       		.byte	0x2
 2612 093e 5E01     		.2byte	0x15e
 2613 0940 01       		.byte	0x1
 2614 0941 00000000 		.4byte	.LFB32
 2615 0945 7C000000 		.4byte	.LFE32
 2616 0949 2C020000 		.4byte	.LLST14
 2617 094d 01       		.byte	0x1
 2618 094e 21       		.uleb128 0x21
 2619 094f 97020000 		.4byte	.LASF116
 2620 0953 02       		.byte	0x2
 2621 0954 27       		.byte	0x27
 2622 0955 5B090000 		.4byte	0x95b
 2623 0959 01       		.byte	0x1
 2624 095a 01       		.byte	0x1
 2625 095b 0E       		.uleb128 0xe
 2626 095c 19010000 		.4byte	0x119
 2627 0960 21       		.uleb128 0x21
 2628 0961 E6010000 		.4byte	.LASF117
 2629 0965 02       		.byte	0x2
 2630 0966 29       		.byte	0x29
 2631 0967 5B090000 		.4byte	0x95b
 2632 096b 01       		.byte	0x1
 2633 096c 01       		.byte	0x1
 2634 096d 21       		.uleb128 0x21
 2635 096e 4D020000 		.4byte	.LASF118
 2636 0972 02       		.byte	0x2
 2637 0973 2C       		.byte	0x2c
 2638 0974 5B090000 		.4byte	0x95b
 2639 0978 01       		.byte	0x1
 2640 0979 01       		.byte	0x1
 2641 097a 21       		.uleb128 0x21
 2642 097b D4000000 		.4byte	.LASF119
 2643 097f 02       		.byte	0x2
 2644 0980 2E       		.byte	0x2e
 2645 0981 5B090000 		.4byte	0x95b
 2646 0985 01       		.byte	0x1
 2647 0986 01       		.byte	0x1
 2648 0987 0C       		.uleb128 0xc
 2649 0988 19010000 		.4byte	0x119
 2650 098c 92090000 		.4byte	0x992
 2651 0990 22       		.uleb128 0x22
 2652 0991 00       		.byte	0
 2653 0992 21       		.uleb128 0x21
 2654 0993 66020000 		.4byte	.LASF120
ARM GAS  /tmp/cc8xR3gm.s 			page 70


 2655 0997 02       		.byte	0x2
 2656 0998 35       		.byte	0x35
 2657 0999 9F090000 		.4byte	0x99f
 2658 099d 01       		.byte	0x1
 2659 099e 01       		.byte	0x1
 2660 099f 0E       		.uleb128 0xe
 2661 09a0 87090000 		.4byte	0x987
 2662 09a4 21       		.uleb128 0x21
 2663 09a5 35020000 		.4byte	.LASF121
 2664 09a9 02       		.byte	0x2
 2665 09aa 36       		.byte	0x36
 2666 09ab B1090000 		.4byte	0x9b1
 2667 09af 01       		.byte	0x1
 2668 09b0 01       		.byte	0x1
 2669 09b1 0E       		.uleb128 0xe
 2670 09b2 87090000 		.4byte	0x987
 2671 09b6 21       		.uleb128 0x21
 2672 09b7 BF000000 		.4byte	.LASF122
 2673 09bb 02       		.byte	0x2
 2674 09bc 38       		.byte	0x38
 2675 09bd C3090000 		.4byte	0x9c3
 2676 09c1 01       		.byte	0x1
 2677 09c2 01       		.byte	0x1
 2678 09c3 0E       		.uleb128 0xe
 2679 09c4 87090000 		.4byte	0x987
 2680 09c8 21       		.uleb128 0x21
 2681 09c9 9C000000 		.4byte	.LASF123
 2682 09cd 02       		.byte	0x2
 2683 09ce 39       		.byte	0x39
 2684 09cf D5090000 		.4byte	0x9d5
 2685 09d3 01       		.byte	0x1
 2686 09d4 01       		.byte	0x1
 2687 09d5 0E       		.uleb128 0xe
 2688 09d6 87090000 		.4byte	0x987
 2689 09da 23       		.uleb128 0x23
 2690 09db B5000000 		.4byte	.LASF124
 2691 09df 02       		.byte	0x2
 2692 09e0 3C       		.byte	0x3c
 2693 09e1 EC090000 		.4byte	0x9ec
 2694 09e5 01       		.byte	0x1
 2695 09e6 05       		.byte	0x5
 2696 09e7 03       		.byte	0x3
 2697 09e8 00000000 		.4byte	ptx1
 2698 09ec 14       		.uleb128 0x14
 2699 09ed 04       		.byte	0x4
 2700 09ee 5B090000 		.4byte	0x95b
 2701 09f2 23       		.uleb128 0x23
 2702 09f3 0E040000 		.4byte	.LASF125
 2703 09f7 02       		.byte	0x2
 2704 09f8 3D       		.byte	0x3d
 2705 09f9 EC090000 		.4byte	0x9ec
 2706 09fd 01       		.byte	0x1
 2707 09fe 05       		.byte	0x5
 2708 09ff 03       		.byte	0x3
 2709 0a00 00000000 		.4byte	ptx1_pckt_index
 2710 0a04 23       		.uleb128 0x23
 2711 0a05 AB010000 		.4byte	.LASF126
ARM GAS  /tmp/cc8xR3gm.s 			page 71


 2712 0a09 02       		.byte	0x2
 2713 0a0a 3E       		.byte	0x3e
 2714 0a0b EC090000 		.4byte	0x9ec
 2715 0a0f 01       		.byte	0x1
 2716 0a10 05       		.byte	0x5
 2717 0a11 03       		.byte	0x3
 2718 0a12 00000000 		.4byte	prx1
 2719 0a16 23       		.uleb128 0x23
 2720 0a17 BA000000 		.4byte	.LASF127
 2721 0a1b 02       		.byte	0x2
 2722 0a1c 40       		.byte	0x40
 2723 0a1d EC090000 		.4byte	0x9ec
 2724 0a21 01       		.byte	0x1
 2725 0a22 05       		.byte	0x5
 2726 0a23 03       		.byte	0x3
 2727 0a24 00000000 		.4byte	ptx2
 2728 0a28 23       		.uleb128 0x23
 2729 0a29 1B000000 		.4byte	.LASF128
 2730 0a2d 02       		.byte	0x2
 2731 0a2e 41       		.byte	0x41
 2732 0a2f EC090000 		.4byte	0x9ec
 2733 0a33 01       		.byte	0x1
 2734 0a34 05       		.byte	0x5
 2735 0a35 03       		.byte	0x3
 2736 0a36 00000000 		.4byte	ptx2_pckt_index
 2737 0a3a 23       		.uleb128 0x23
 2738 0a3b 61020000 		.4byte	.LASF129
 2739 0a3f 02       		.byte	0x2
 2740 0a40 42       		.byte	0x42
 2741 0a41 EC090000 		.4byte	0x9ec
 2742 0a45 01       		.byte	0x1
 2743 0a46 05       		.byte	0x5
 2744 0a47 03       		.byte	0x3
 2745 0a48 00000000 		.4byte	prx2
 2746 0a4c 23       		.uleb128 0x23
 2747 0a4d 87030000 		.4byte	.LASF130
 2748 0a51 02       		.byte	0x2
 2749 0a52 44       		.byte	0x44
 2750 0a53 5B090000 		.4byte	0x95b
 2751 0a57 01       		.byte	0x1
 2752 0a58 05       		.byte	0x5
 2753 0a59 03       		.byte	0x3
 2754 0a5a 00000000 		.4byte	pckt_gps_ready
 2755 0a5e 23       		.uleb128 0x23
 2756 0a5f 91040000 		.4byte	.LASF131
 2757 0a63 02       		.byte	0x2
 2758 0a64 45       		.byte	0x45
 2759 0a65 5B090000 		.4byte	0x95b
 2760 0a69 01       		.byte	0x1
 2761 0a6a 05       		.byte	0x5
 2762 0a6b 03       		.byte	0x3
 2763 0a6c 00000000 		.4byte	usart_mode
 2764 0a70 00       		.byte	0
 2765              		.section	.debug_abbrev,"",%progbits
 2766              	.Ldebug_abbrev0:
 2767 0000 01       		.uleb128 0x1
 2768 0001 11       		.uleb128 0x11
ARM GAS  /tmp/cc8xR3gm.s 			page 72


 2769 0002 01       		.byte	0x1
 2770 0003 25       		.uleb128 0x25
 2771 0004 0E       		.uleb128 0xe
 2772 0005 13       		.uleb128 0x13
 2773 0006 0B       		.uleb128 0xb
 2774 0007 03       		.uleb128 0x3
 2775 0008 0E       		.uleb128 0xe
 2776 0009 1B       		.uleb128 0x1b
 2777 000a 0E       		.uleb128 0xe
 2778 000b 55       		.uleb128 0x55
 2779 000c 06       		.uleb128 0x6
 2780 000d 11       		.uleb128 0x11
 2781 000e 01       		.uleb128 0x1
 2782 000f 52       		.uleb128 0x52
 2783 0010 01       		.uleb128 0x1
 2784 0011 10       		.uleb128 0x10
 2785 0012 06       		.uleb128 0x6
 2786 0013 00       		.byte	0
 2787 0014 00       		.byte	0
 2788 0015 02       		.uleb128 0x2
 2789 0016 04       		.uleb128 0x4
 2790 0017 01       		.byte	0x1
 2791 0018 03       		.uleb128 0x3
 2792 0019 0E       		.uleb128 0xe
 2793 001a 0B       		.uleb128 0xb
 2794 001b 0B       		.uleb128 0xb
 2795 001c 49       		.uleb128 0x49
 2796 001d 13       		.uleb128 0x13
 2797 001e 3A       		.uleb128 0x3a
 2798 001f 0B       		.uleb128 0xb
 2799 0020 3B       		.uleb128 0x3b
 2800 0021 0B       		.uleb128 0xb
 2801 0022 01       		.uleb128 0x1
 2802 0023 13       		.uleb128 0x13
 2803 0024 00       		.byte	0
 2804 0025 00       		.byte	0
 2805 0026 03       		.uleb128 0x3
 2806 0027 28       		.uleb128 0x28
 2807 0028 00       		.byte	0
 2808 0029 03       		.uleb128 0x3
 2809 002a 0E       		.uleb128 0xe
 2810 002b 1C       		.uleb128 0x1c
 2811 002c 0D       		.uleb128 0xd
 2812 002d 00       		.byte	0
 2813 002e 00       		.byte	0
 2814 002f 04       		.uleb128 0x4
 2815 0030 28       		.uleb128 0x28
 2816 0031 00       		.byte	0
 2817 0032 03       		.uleb128 0x3
 2818 0033 0E       		.uleb128 0xe
 2819 0034 1C       		.uleb128 0x1c
 2820 0035 0B       		.uleb128 0xb
 2821 0036 00       		.byte	0
 2822 0037 00       		.byte	0
 2823 0038 05       		.uleb128 0x5
 2824 0039 24       		.uleb128 0x24
 2825 003a 00       		.byte	0
ARM GAS  /tmp/cc8xR3gm.s 			page 73


 2826 003b 0B       		.uleb128 0xb
 2827 003c 0B       		.uleb128 0xb
 2828 003d 3E       		.uleb128 0x3e
 2829 003e 0B       		.uleb128 0xb
 2830 003f 03       		.uleb128 0x3
 2831 0040 0E       		.uleb128 0xe
 2832 0041 00       		.byte	0
 2833 0042 00       		.byte	0
 2834 0043 06       		.uleb128 0x6
 2835 0044 16       		.uleb128 0x16
 2836 0045 00       		.byte	0
 2837 0046 03       		.uleb128 0x3
 2838 0047 0E       		.uleb128 0xe
 2839 0048 3A       		.uleb128 0x3a
 2840 0049 0B       		.uleb128 0xb
 2841 004a 3B       		.uleb128 0x3b
 2842 004b 05       		.uleb128 0x5
 2843 004c 49       		.uleb128 0x49
 2844 004d 13       		.uleb128 0x13
 2845 004e 00       		.byte	0
 2846 004f 00       		.byte	0
 2847 0050 07       		.uleb128 0x7
 2848 0051 16       		.uleb128 0x16
 2849 0052 00       		.byte	0
 2850 0053 03       		.uleb128 0x3
 2851 0054 0E       		.uleb128 0xe
 2852 0055 3A       		.uleb128 0x3a
 2853 0056 0B       		.uleb128 0xb
 2854 0057 3B       		.uleb128 0x3b
 2855 0058 0B       		.uleb128 0xb
 2856 0059 49       		.uleb128 0x49
 2857 005a 13       		.uleb128 0x13
 2858 005b 00       		.byte	0
 2859 005c 00       		.byte	0
 2860 005d 08       		.uleb128 0x8
 2861 005e 24       		.uleb128 0x24
 2862 005f 00       		.byte	0
 2863 0060 0B       		.uleb128 0xb
 2864 0061 0B       		.uleb128 0xb
 2865 0062 3E       		.uleb128 0x3e
 2866 0063 0B       		.uleb128 0xb
 2867 0064 03       		.uleb128 0x3
 2868 0065 08       		.uleb128 0x8
 2869 0066 00       		.byte	0
 2870 0067 00       		.byte	0
 2871 0068 09       		.uleb128 0x9
 2872 0069 13       		.uleb128 0x13
 2873 006a 01       		.byte	0x1
 2874 006b 0B       		.uleb128 0xb
 2875 006c 05       		.uleb128 0x5
 2876 006d 3A       		.uleb128 0x3a
 2877 006e 0B       		.uleb128 0xb
 2878 006f 3B       		.uleb128 0x3b
 2879 0070 0B       		.uleb128 0xb
 2880 0071 01       		.uleb128 0x1
 2881 0072 13       		.uleb128 0x13
 2882 0073 00       		.byte	0
ARM GAS  /tmp/cc8xR3gm.s 			page 74


 2883 0074 00       		.byte	0
 2884 0075 0A       		.uleb128 0xa
 2885 0076 0D       		.uleb128 0xd
 2886 0077 00       		.byte	0
 2887 0078 03       		.uleb128 0x3
 2888 0079 0E       		.uleb128 0xe
 2889 007a 3A       		.uleb128 0x3a
 2890 007b 0B       		.uleb128 0xb
 2891 007c 3B       		.uleb128 0x3b
 2892 007d 0B       		.uleb128 0xb
 2893 007e 49       		.uleb128 0x49
 2894 007f 13       		.uleb128 0x13
 2895 0080 38       		.uleb128 0x38
 2896 0081 0A       		.uleb128 0xa
 2897 0082 00       		.byte	0
 2898 0083 00       		.byte	0
 2899 0084 0B       		.uleb128 0xb
 2900 0085 0D       		.uleb128 0xd
 2901 0086 00       		.byte	0
 2902 0087 03       		.uleb128 0x3
 2903 0088 08       		.uleb128 0x8
 2904 0089 3A       		.uleb128 0x3a
 2905 008a 0B       		.uleb128 0xb
 2906 008b 3B       		.uleb128 0x3b
 2907 008c 0B       		.uleb128 0xb
 2908 008d 49       		.uleb128 0x49
 2909 008e 13       		.uleb128 0x13
 2910 008f 38       		.uleb128 0x38
 2911 0090 0A       		.uleb128 0xa
 2912 0091 00       		.byte	0
 2913 0092 00       		.byte	0
 2914 0093 0C       		.uleb128 0xc
 2915 0094 01       		.uleb128 0x1
 2916 0095 01       		.byte	0x1
 2917 0096 49       		.uleb128 0x49
 2918 0097 13       		.uleb128 0x13
 2919 0098 01       		.uleb128 0x1
 2920 0099 13       		.uleb128 0x13
 2921 009a 00       		.byte	0
 2922 009b 00       		.byte	0
 2923 009c 0D       		.uleb128 0xd
 2924 009d 21       		.uleb128 0x21
 2925 009e 00       		.byte	0
 2926 009f 49       		.uleb128 0x49
 2927 00a0 13       		.uleb128 0x13
 2928 00a1 2F       		.uleb128 0x2f
 2929 00a2 0B       		.uleb128 0xb
 2930 00a3 00       		.byte	0
 2931 00a4 00       		.byte	0
 2932 00a5 0E       		.uleb128 0xe
 2933 00a6 35       		.uleb128 0x35
 2934 00a7 00       		.byte	0
 2935 00a8 49       		.uleb128 0x49
 2936 00a9 13       		.uleb128 0x13
 2937 00aa 00       		.byte	0
 2938 00ab 00       		.byte	0
 2939 00ac 0F       		.uleb128 0xf
ARM GAS  /tmp/cc8xR3gm.s 			page 75


 2940 00ad 13       		.uleb128 0x13
 2941 00ae 01       		.byte	0x1
 2942 00af 0B       		.uleb128 0xb
 2943 00b0 0B       		.uleb128 0xb
 2944 00b1 3A       		.uleb128 0x3a
 2945 00b2 0B       		.uleb128 0xb
 2946 00b3 3B       		.uleb128 0x3b
 2947 00b4 0B       		.uleb128 0xb
 2948 00b5 01       		.uleb128 0x1
 2949 00b6 13       		.uleb128 0x13
 2950 00b7 00       		.byte	0
 2951 00b8 00       		.byte	0
 2952 00b9 10       		.uleb128 0x10
 2953 00ba 26       		.uleb128 0x26
 2954 00bb 00       		.byte	0
 2955 00bc 49       		.uleb128 0x49
 2956 00bd 13       		.uleb128 0x13
 2957 00be 00       		.byte	0
 2958 00bf 00       		.byte	0
 2959 00c0 11       		.uleb128 0x11
 2960 00c1 13       		.uleb128 0x13
 2961 00c2 01       		.byte	0x1
 2962 00c3 0B       		.uleb128 0xb
 2963 00c4 0B       		.uleb128 0xb
 2964 00c5 3A       		.uleb128 0x3a
 2965 00c6 0B       		.uleb128 0xb
 2966 00c7 3B       		.uleb128 0x3b
 2967 00c8 05       		.uleb128 0x5
 2968 00c9 01       		.uleb128 0x1
 2969 00ca 13       		.uleb128 0x13
 2970 00cb 00       		.byte	0
 2971 00cc 00       		.byte	0
 2972 00cd 12       		.uleb128 0x12
 2973 00ce 0D       		.uleb128 0xd
 2974 00cf 00       		.byte	0
 2975 00d0 03       		.uleb128 0x3
 2976 00d1 0E       		.uleb128 0xe
 2977 00d2 3A       		.uleb128 0x3a
 2978 00d3 0B       		.uleb128 0xb
 2979 00d4 3B       		.uleb128 0x3b
 2980 00d5 05       		.uleb128 0x5
 2981 00d6 49       		.uleb128 0x49
 2982 00d7 13       		.uleb128 0x13
 2983 00d8 38       		.uleb128 0x38
 2984 00d9 0A       		.uleb128 0xa
 2985 00da 00       		.byte	0
 2986 00db 00       		.byte	0
 2987 00dc 13       		.uleb128 0x13
 2988 00dd 0D       		.uleb128 0xd
 2989 00de 00       		.byte	0
 2990 00df 03       		.uleb128 0x3
 2991 00e0 08       		.uleb128 0x8
 2992 00e1 3A       		.uleb128 0x3a
 2993 00e2 0B       		.uleb128 0xb
 2994 00e3 3B       		.uleb128 0x3b
 2995 00e4 05       		.uleb128 0x5
 2996 00e5 49       		.uleb128 0x49
ARM GAS  /tmp/cc8xR3gm.s 			page 76


 2997 00e6 13       		.uleb128 0x13
 2998 00e7 38       		.uleb128 0x38
 2999 00e8 0A       		.uleb128 0xa
 3000 00e9 00       		.byte	0
 3001 00ea 00       		.byte	0
 3002 00eb 14       		.uleb128 0x14
 3003 00ec 0F       		.uleb128 0xf
 3004 00ed 00       		.byte	0
 3005 00ee 0B       		.uleb128 0xb
 3006 00ef 0B       		.uleb128 0xb
 3007 00f0 49       		.uleb128 0x49
 3008 00f1 13       		.uleb128 0x13
 3009 00f2 00       		.byte	0
 3010 00f3 00       		.byte	0
 3011 00f4 15       		.uleb128 0x15
 3012 00f5 2E       		.uleb128 0x2e
 3013 00f6 01       		.byte	0x1
 3014 00f7 03       		.uleb128 0x3
 3015 00f8 0E       		.uleb128 0xe
 3016 00f9 3A       		.uleb128 0x3a
 3017 00fa 0B       		.uleb128 0xb
 3018 00fb 3B       		.uleb128 0x3b
 3019 00fc 05       		.uleb128 0x5
 3020 00fd 27       		.uleb128 0x27
 3021 00fe 0C       		.uleb128 0xc
 3022 00ff 11       		.uleb128 0x11
 3023 0100 01       		.uleb128 0x1
 3024 0101 12       		.uleb128 0x12
 3025 0102 01       		.uleb128 0x1
 3026 0103 40       		.uleb128 0x40
 3027 0104 06       		.uleb128 0x6
 3028 0105 9742     		.uleb128 0x2117
 3029 0107 0C       		.uleb128 0xc
 3030 0108 01       		.uleb128 0x1
 3031 0109 13       		.uleb128 0x13
 3032 010a 00       		.byte	0
 3033 010b 00       		.byte	0
 3034 010c 16       		.uleb128 0x16
 3035 010d 05       		.uleb128 0x5
 3036 010e 00       		.byte	0
 3037 010f 03       		.uleb128 0x3
 3038 0110 0E       		.uleb128 0xe
 3039 0111 3A       		.uleb128 0x3a
 3040 0112 0B       		.uleb128 0xb
 3041 0113 3B       		.uleb128 0x3b
 3042 0114 05       		.uleb128 0x5
 3043 0115 49       		.uleb128 0x49
 3044 0116 13       		.uleb128 0x13
 3045 0117 02       		.uleb128 0x2
 3046 0118 0A       		.uleb128 0xa
 3047 0119 00       		.byte	0
 3048 011a 00       		.byte	0
 3049 011b 17       		.uleb128 0x17
 3050 011c 2E       		.uleb128 0x2e
 3051 011d 01       		.byte	0x1
 3052 011e 3F       		.uleb128 0x3f
 3053 011f 0C       		.uleb128 0xc
ARM GAS  /tmp/cc8xR3gm.s 			page 77


 3054 0120 03       		.uleb128 0x3
 3055 0121 0E       		.uleb128 0xe
 3056 0122 3A       		.uleb128 0x3a
 3057 0123 0B       		.uleb128 0xb
 3058 0124 3B       		.uleb128 0x3b
 3059 0125 0B       		.uleb128 0xb
 3060 0126 27       		.uleb128 0x27
 3061 0127 0C       		.uleb128 0xc
 3062 0128 49       		.uleb128 0x49
 3063 0129 13       		.uleb128 0x13
 3064 012a 11       		.uleb128 0x11
 3065 012b 01       		.uleb128 0x1
 3066 012c 12       		.uleb128 0x12
 3067 012d 01       		.uleb128 0x1
 3068 012e 40       		.uleb128 0x40
 3069 012f 06       		.uleb128 0x6
 3070 0130 9742     		.uleb128 0x2117
 3071 0132 0C       		.uleb128 0xc
 3072 0133 01       		.uleb128 0x1
 3073 0134 13       		.uleb128 0x13
 3074 0135 00       		.byte	0
 3075 0136 00       		.byte	0
 3076 0137 18       		.uleb128 0x18
 3077 0138 05       		.uleb128 0x5
 3078 0139 00       		.byte	0
 3079 013a 03       		.uleb128 0x3
 3080 013b 0E       		.uleb128 0xe
 3081 013c 3A       		.uleb128 0x3a
 3082 013d 0B       		.uleb128 0xb
 3083 013e 3B       		.uleb128 0x3b
 3084 013f 0B       		.uleb128 0xb
 3085 0140 49       		.uleb128 0x49
 3086 0141 13       		.uleb128 0x13
 3087 0142 02       		.uleb128 0x2
 3088 0143 0A       		.uleb128 0xa
 3089 0144 00       		.byte	0
 3090 0145 00       		.byte	0
 3091 0146 19       		.uleb128 0x19
 3092 0147 34       		.uleb128 0x34
 3093 0148 00       		.byte	0
 3094 0149 03       		.uleb128 0x3
 3095 014a 0E       		.uleb128 0xe
 3096 014b 3A       		.uleb128 0x3a
 3097 014c 0B       		.uleb128 0xb
 3098 014d 3B       		.uleb128 0x3b
 3099 014e 0B       		.uleb128 0xb
 3100 014f 49       		.uleb128 0x49
 3101 0150 13       		.uleb128 0x13
 3102 0151 02       		.uleb128 0x2
 3103 0152 0A       		.uleb128 0xa
 3104 0153 00       		.byte	0
 3105 0154 00       		.byte	0
 3106 0155 1A       		.uleb128 0x1a
 3107 0156 2E       		.uleb128 0x2e
 3108 0157 01       		.byte	0x1
 3109 0158 3F       		.uleb128 0x3f
 3110 0159 0C       		.uleb128 0xc
ARM GAS  /tmp/cc8xR3gm.s 			page 78


 3111 015a 03       		.uleb128 0x3
 3112 015b 0E       		.uleb128 0xe
 3113 015c 3A       		.uleb128 0x3a
 3114 015d 0B       		.uleb128 0xb
 3115 015e 3B       		.uleb128 0x3b
 3116 015f 0B       		.uleb128 0xb
 3117 0160 27       		.uleb128 0x27
 3118 0161 0C       		.uleb128 0xc
 3119 0162 49       		.uleb128 0x49
 3120 0163 13       		.uleb128 0x13
 3121 0164 11       		.uleb128 0x11
 3122 0165 01       		.uleb128 0x1
 3123 0166 12       		.uleb128 0x12
 3124 0167 01       		.uleb128 0x1
 3125 0168 40       		.uleb128 0x40
 3126 0169 06       		.uleb128 0x6
 3127 016a 9642     		.uleb128 0x2116
 3128 016c 0C       		.uleb128 0xc
 3129 016d 01       		.uleb128 0x1
 3130 016e 13       		.uleb128 0x13
 3131 016f 00       		.byte	0
 3132 0170 00       		.byte	0
 3133 0171 1B       		.uleb128 0x1b
 3134 0172 34       		.uleb128 0x34
 3135 0173 00       		.byte	0
 3136 0174 03       		.uleb128 0x3
 3137 0175 08       		.uleb128 0x8
 3138 0176 3A       		.uleb128 0x3a
 3139 0177 0B       		.uleb128 0xb
 3140 0178 3B       		.uleb128 0x3b
 3141 0179 0B       		.uleb128 0xb
 3142 017a 49       		.uleb128 0x49
 3143 017b 13       		.uleb128 0x13
 3144 017c 02       		.uleb128 0x2
 3145 017d 0A       		.uleb128 0xa
 3146 017e 00       		.byte	0
 3147 017f 00       		.byte	0
 3148 0180 1C       		.uleb128 0x1c
 3149 0181 2E       		.uleb128 0x2e
 3150 0182 01       		.byte	0x1
 3151 0183 3F       		.uleb128 0x3f
 3152 0184 0C       		.uleb128 0xc
 3153 0185 03       		.uleb128 0x3
 3154 0186 0E       		.uleb128 0xe
 3155 0187 3A       		.uleb128 0x3a
 3156 0188 0B       		.uleb128 0xb
 3157 0189 3B       		.uleb128 0x3b
 3158 018a 0B       		.uleb128 0xb
 3159 018b 27       		.uleb128 0x27
 3160 018c 0C       		.uleb128 0xc
 3161 018d 11       		.uleb128 0x11
 3162 018e 01       		.uleb128 0x1
 3163 018f 12       		.uleb128 0x12
 3164 0190 01       		.uleb128 0x1
 3165 0191 40       		.uleb128 0x40
 3166 0192 06       		.uleb128 0x6
 3167 0193 9742     		.uleb128 0x2117
ARM GAS  /tmp/cc8xR3gm.s 			page 79


 3168 0195 0C       		.uleb128 0xc
 3169 0196 01       		.uleb128 0x1
 3170 0197 13       		.uleb128 0x13
 3171 0198 00       		.byte	0
 3172 0199 00       		.byte	0
 3173 019a 1D       		.uleb128 0x1d
 3174 019b 2E       		.uleb128 0x2e
 3175 019c 01       		.byte	0x1
 3176 019d 3F       		.uleb128 0x3f
 3177 019e 0C       		.uleb128 0xc
 3178 019f 03       		.uleb128 0x3
 3179 01a0 0E       		.uleb128 0xe
 3180 01a1 3A       		.uleb128 0x3a
 3181 01a2 0B       		.uleb128 0xb
 3182 01a3 3B       		.uleb128 0x3b
 3183 01a4 05       		.uleb128 0x5
 3184 01a5 27       		.uleb128 0x27
 3185 01a6 0C       		.uleb128 0xc
 3186 01a7 11       		.uleb128 0x11
 3187 01a8 01       		.uleb128 0x1
 3188 01a9 12       		.uleb128 0x12
 3189 01aa 01       		.uleb128 0x1
 3190 01ab 40       		.uleb128 0x40
 3191 01ac 06       		.uleb128 0x6
 3192 01ad 9642     		.uleb128 0x2116
 3193 01af 0C       		.uleb128 0xc
 3194 01b0 01       		.uleb128 0x1
 3195 01b1 13       		.uleb128 0x13
 3196 01b2 00       		.byte	0
 3197 01b3 00       		.byte	0
 3198 01b4 1E       		.uleb128 0x1e
 3199 01b5 34       		.uleb128 0x34
 3200 01b6 00       		.byte	0
 3201 01b7 03       		.uleb128 0x3
 3202 01b8 08       		.uleb128 0x8
 3203 01b9 3A       		.uleb128 0x3a
 3204 01ba 0B       		.uleb128 0xb
 3205 01bb 3B       		.uleb128 0x3b
 3206 01bc 05       		.uleb128 0x5
 3207 01bd 49       		.uleb128 0x49
 3208 01be 13       		.uleb128 0x13
 3209 01bf 02       		.uleb128 0x2
 3210 01c0 0A       		.uleb128 0xa
 3211 01c1 00       		.byte	0
 3212 01c2 00       		.byte	0
 3213 01c3 1F       		.uleb128 0x1f
 3214 01c4 2E       		.uleb128 0x2e
 3215 01c5 01       		.byte	0x1
 3216 01c6 3F       		.uleb128 0x3f
 3217 01c7 0C       		.uleb128 0xc
 3218 01c8 03       		.uleb128 0x3
 3219 01c9 0E       		.uleb128 0xe
 3220 01ca 3A       		.uleb128 0x3a
 3221 01cb 0B       		.uleb128 0xb
 3222 01cc 3B       		.uleb128 0x3b
 3223 01cd 05       		.uleb128 0x5
 3224 01ce 27       		.uleb128 0x27
ARM GAS  /tmp/cc8xR3gm.s 			page 80


 3225 01cf 0C       		.uleb128 0xc
 3226 01d0 49       		.uleb128 0x49
 3227 01d1 13       		.uleb128 0x13
 3228 01d2 11       		.uleb128 0x11
 3229 01d3 01       		.uleb128 0x1
 3230 01d4 12       		.uleb128 0x12
 3231 01d5 01       		.uleb128 0x1
 3232 01d6 40       		.uleb128 0x40
 3233 01d7 06       		.uleb128 0x6
 3234 01d8 9642     		.uleb128 0x2116
 3235 01da 0C       		.uleb128 0xc
 3236 01db 01       		.uleb128 0x1
 3237 01dc 13       		.uleb128 0x13
 3238 01dd 00       		.byte	0
 3239 01de 00       		.byte	0
 3240 01df 20       		.uleb128 0x20
 3241 01e0 2E       		.uleb128 0x2e
 3242 01e1 00       		.byte	0
 3243 01e2 3F       		.uleb128 0x3f
 3244 01e3 0C       		.uleb128 0xc
 3245 01e4 03       		.uleb128 0x3
 3246 01e5 0E       		.uleb128 0xe
 3247 01e6 3A       		.uleb128 0x3a
 3248 01e7 0B       		.uleb128 0xb
 3249 01e8 3B       		.uleb128 0x3b
 3250 01e9 05       		.uleb128 0x5
 3251 01ea 27       		.uleb128 0x27
 3252 01eb 0C       		.uleb128 0xc
 3253 01ec 11       		.uleb128 0x11
 3254 01ed 01       		.uleb128 0x1
 3255 01ee 12       		.uleb128 0x12
 3256 01ef 01       		.uleb128 0x1
 3257 01f0 40       		.uleb128 0x40
 3258 01f1 06       		.uleb128 0x6
 3259 01f2 9642     		.uleb128 0x2116
 3260 01f4 0C       		.uleb128 0xc
 3261 01f5 00       		.byte	0
 3262 01f6 00       		.byte	0
 3263 01f7 21       		.uleb128 0x21
 3264 01f8 34       		.uleb128 0x34
 3265 01f9 00       		.byte	0
 3266 01fa 03       		.uleb128 0x3
 3267 01fb 0E       		.uleb128 0xe
 3268 01fc 3A       		.uleb128 0x3a
 3269 01fd 0B       		.uleb128 0xb
 3270 01fe 3B       		.uleb128 0x3b
 3271 01ff 0B       		.uleb128 0xb
 3272 0200 49       		.uleb128 0x49
 3273 0201 13       		.uleb128 0x13
 3274 0202 3F       		.uleb128 0x3f
 3275 0203 0C       		.uleb128 0xc
 3276 0204 3C       		.uleb128 0x3c
 3277 0205 0C       		.uleb128 0xc
 3278 0206 00       		.byte	0
 3279 0207 00       		.byte	0
 3280 0208 22       		.uleb128 0x22
 3281 0209 21       		.uleb128 0x21
ARM GAS  /tmp/cc8xR3gm.s 			page 81


 3282 020a 00       		.byte	0
 3283 020b 00       		.byte	0
 3284 020c 00       		.byte	0
 3285 020d 23       		.uleb128 0x23
 3286 020e 34       		.uleb128 0x34
 3287 020f 00       		.byte	0
 3288 0210 03       		.uleb128 0x3
 3289 0211 0E       		.uleb128 0xe
 3290 0212 3A       		.uleb128 0x3a
 3291 0213 0B       		.uleb128 0xb
 3292 0214 3B       		.uleb128 0x3b
 3293 0215 0B       		.uleb128 0xb
 3294 0216 49       		.uleb128 0x49
 3295 0217 13       		.uleb128 0x13
 3296 0218 3F       		.uleb128 0x3f
 3297 0219 0C       		.uleb128 0xc
 3298 021a 02       		.uleb128 0x2
 3299 021b 0A       		.uleb128 0xa
 3300 021c 00       		.byte	0
 3301 021d 00       		.byte	0
 3302 021e 00       		.byte	0
 3303              		.section	.debug_loc,"",%progbits
 3304              	.Ldebug_loc0:
 3305              	.LLST0:
 3306 0000 00000000 		.4byte	.LFB11
 3307 0004 02000000 		.4byte	.LCFI0
 3308 0008 0200     		.2byte	0x2
 3309 000a 7D       		.byte	0x7d
 3310 000b 00       		.sleb128 0
 3311 000c 02000000 		.4byte	.LCFI0
 3312 0010 2C000000 		.4byte	.LFE11
 3313 0014 0200     		.2byte	0x2
 3314 0016 7D       		.byte	0x7d
 3315 0017 08       		.sleb128 8
 3316 0018 00000000 		.4byte	0
 3317 001c 00000000 		.4byte	0
 3318              	.LLST1:
 3319 0020 00000000 		.4byte	.LFB16
 3320 0024 02000000 		.4byte	.LCFI1
 3321 0028 0200     		.2byte	0x2
 3322 002a 7D       		.byte	0x7d
 3323 002b 00       		.sleb128 0
 3324 002c 02000000 		.4byte	.LCFI1
 3325 0030 04000000 		.4byte	.LCFI2
 3326 0034 0200     		.2byte	0x2
 3327 0036 7D       		.byte	0x7d
 3328 0037 0C       		.sleb128 12
 3329 0038 04000000 		.4byte	.LCFI2
 3330 003c EC000000 		.4byte	.LFE16
 3331 0040 0200     		.2byte	0x2
 3332 0042 7D       		.byte	0x7d
 3333 0043 18       		.sleb128 24
 3334 0044 00000000 		.4byte	0
 3335 0048 00000000 		.4byte	0
 3336              	.LLST2:
 3337 004c 00000000 		.4byte	.LFB20
 3338 0050 02000000 		.4byte	.LCFI3
ARM GAS  /tmp/cc8xR3gm.s 			page 82


 3339 0054 0200     		.2byte	0x2
 3340 0056 7D       		.byte	0x7d
 3341 0057 00       		.sleb128 0
 3342 0058 02000000 		.4byte	.LCFI3
 3343 005c 0C010000 		.4byte	.LFE20
 3344 0060 0200     		.2byte	0x2
 3345 0062 7D       		.byte	0x7d
 3346 0063 10       		.sleb128 16
 3347 0064 00000000 		.4byte	0
 3348 0068 00000000 		.4byte	0
 3349              	.LLST3:
 3350 006c 00000000 		.4byte	.LFB21
 3351 0070 02000000 		.4byte	.LCFI4
 3352 0074 0200     		.2byte	0x2
 3353 0076 7D       		.byte	0x7d
 3354 0077 00       		.sleb128 0
 3355 0078 02000000 		.4byte	.LCFI4
 3356 007c 04000000 		.4byte	.LCFI5
 3357 0080 0200     		.2byte	0x2
 3358 0082 7D       		.byte	0x7d
 3359 0083 04       		.sleb128 4
 3360 0084 04000000 		.4byte	.LCFI5
 3361 0088 60000000 		.4byte	.LFE21
 3362 008c 0200     		.2byte	0x2
 3363 008e 7D       		.byte	0x7d
 3364 008f 18       		.sleb128 24
 3365 0090 00000000 		.4byte	0
 3366 0094 00000000 		.4byte	0
 3367              	.LLST4:
 3368 0098 00000000 		.4byte	.LFB22
 3369 009c 02000000 		.4byte	.LCFI6
 3370 00a0 0200     		.2byte	0x2
 3371 00a2 7D       		.byte	0x7d
 3372 00a3 00       		.sleb128 0
 3373 00a4 02000000 		.4byte	.LCFI6
 3374 00a8 18010000 		.4byte	.LFE22
 3375 00ac 0200     		.2byte	0x2
 3376 00ae 7D       		.byte	0x7d
 3377 00af 08       		.sleb128 8
 3378 00b0 00000000 		.4byte	0
 3379 00b4 00000000 		.4byte	0
 3380              	.LLST5:
 3381 00b8 00000000 		.4byte	.LFB23
 3382 00bc 02000000 		.4byte	.LCFI7
 3383 00c0 0200     		.2byte	0x2
 3384 00c2 7D       		.byte	0x7d
 3385 00c3 00       		.sleb128 0
 3386 00c4 02000000 		.4byte	.LCFI7
 3387 00c8 00010000 		.4byte	.LFE23
 3388 00cc 0200     		.2byte	0x2
 3389 00ce 7D       		.byte	0x7d
 3390 00cf 08       		.sleb128 8
 3391 00d0 00000000 		.4byte	0
 3392 00d4 00000000 		.4byte	0
 3393              	.LLST6:
 3394 00d8 00000000 		.4byte	.LFB24
 3395 00dc 02000000 		.4byte	.LCFI8
ARM GAS  /tmp/cc8xR3gm.s 			page 83


 3396 00e0 0200     		.2byte	0x2
 3397 00e2 7D       		.byte	0x7d
 3398 00e3 00       		.sleb128 0
 3399 00e4 02000000 		.4byte	.LCFI8
 3400 00e8 04000000 		.4byte	.LCFI9
 3401 00ec 0200     		.2byte	0x2
 3402 00ee 7D       		.byte	0x7d
 3403 00ef 04       		.sleb128 4
 3404 00f0 04000000 		.4byte	.LCFI9
 3405 00f4 2C000000 		.4byte	.LFE24
 3406 00f8 0200     		.2byte	0x2
 3407 00fa 7D       		.byte	0x7d
 3408 00fb 18       		.sleb128 24
 3409 00fc 00000000 		.4byte	0
 3410 0100 00000000 		.4byte	0
 3411              	.LLST7:
 3412 0104 00000000 		.4byte	.LFB25
 3413 0108 02000000 		.4byte	.LCFI10
 3414 010c 0200     		.2byte	0x2
 3415 010e 7D       		.byte	0x7d
 3416 010f 00       		.sleb128 0
 3417 0110 02000000 		.4byte	.LCFI10
 3418 0114 04000000 		.4byte	.LCFI11
 3419 0118 0200     		.2byte	0x2
 3420 011a 7D       		.byte	0x7d
 3421 011b 04       		.sleb128 4
 3422 011c 04000000 		.4byte	.LCFI11
 3423 0120 60000000 		.4byte	.LFE25
 3424 0124 0200     		.2byte	0x2
 3425 0126 7D       		.byte	0x7d
 3426 0127 10       		.sleb128 16
 3427 0128 00000000 		.4byte	0
 3428 012c 00000000 		.4byte	0
 3429              	.LLST8:
 3430 0130 00000000 		.4byte	.LFB26
 3431 0134 02000000 		.4byte	.LCFI12
 3432 0138 0200     		.2byte	0x2
 3433 013a 7D       		.byte	0x7d
 3434 013b 00       		.sleb128 0
 3435 013c 02000000 		.4byte	.LCFI12
 3436 0140 04000000 		.4byte	.LCFI13
 3437 0144 0200     		.2byte	0x2
 3438 0146 7D       		.byte	0x7d
 3439 0147 04       		.sleb128 4
 3440 0148 04000000 		.4byte	.LCFI13
 3441 014c 1E000000 		.4byte	.LFE26
 3442 0150 0200     		.2byte	0x2
 3443 0152 7D       		.byte	0x7d
 3444 0153 10       		.sleb128 16
 3445 0154 00000000 		.4byte	0
 3446 0158 00000000 		.4byte	0
 3447              	.LLST9:
 3448 015c 00000000 		.4byte	.LFB27
 3449 0160 02000000 		.4byte	.LCFI14
 3450 0164 0200     		.2byte	0x2
 3451 0166 7D       		.byte	0x7d
 3452 0167 00       		.sleb128 0
ARM GAS  /tmp/cc8xR3gm.s 			page 84


 3453 0168 02000000 		.4byte	.LCFI14
 3454 016c 04000000 		.4byte	.LCFI15
 3455 0170 0200     		.2byte	0x2
 3456 0172 7D       		.byte	0x7d
 3457 0173 04       		.sleb128 4
 3458 0174 04000000 		.4byte	.LCFI15
 3459 0178 60000000 		.4byte	.LFE27
 3460 017c 0200     		.2byte	0x2
 3461 017e 7D       		.byte	0x7d
 3462 017f 18       		.sleb128 24
 3463 0180 00000000 		.4byte	0
 3464 0184 00000000 		.4byte	0
 3465              	.LLST10:
 3466 0188 00000000 		.4byte	.LFB28
 3467 018c 02000000 		.4byte	.LCFI16
 3468 0190 0200     		.2byte	0x2
 3469 0192 7D       		.byte	0x7d
 3470 0193 00       		.sleb128 0
 3471 0194 02000000 		.4byte	.LCFI16
 3472 0198 04000000 		.4byte	.LCFI17
 3473 019c 0200     		.2byte	0x2
 3474 019e 7D       		.byte	0x7d
 3475 019f 04       		.sleb128 4
 3476 01a0 04000000 		.4byte	.LCFI17
 3477 01a4 2C000000 		.4byte	.LFE28
 3478 01a8 0200     		.2byte	0x2
 3479 01aa 7D       		.byte	0x7d
 3480 01ab 18       		.sleb128 24
 3481 01ac 00000000 		.4byte	0
 3482 01b0 00000000 		.4byte	0
 3483              	.LLST11:
 3484 01b4 00000000 		.4byte	.LFB29
 3485 01b8 02000000 		.4byte	.LCFI18
 3486 01bc 0200     		.2byte	0x2
 3487 01be 7D       		.byte	0x7d
 3488 01bf 00       		.sleb128 0
 3489 01c0 02000000 		.4byte	.LCFI18
 3490 01c4 04000000 		.4byte	.LCFI19
 3491 01c8 0200     		.2byte	0x2
 3492 01ca 7D       		.byte	0x7d
 3493 01cb 04       		.sleb128 4
 3494 01cc 04000000 		.4byte	.LCFI19
 3495 01d0 60000000 		.4byte	.LFE29
 3496 01d4 0200     		.2byte	0x2
 3497 01d6 7D       		.byte	0x7d
 3498 01d7 10       		.sleb128 16
 3499 01d8 00000000 		.4byte	0
 3500 01dc 00000000 		.4byte	0
 3501              	.LLST12:
 3502 01e0 00000000 		.4byte	.LFB30
 3503 01e4 02000000 		.4byte	.LCFI20
 3504 01e8 0200     		.2byte	0x2
 3505 01ea 7D       		.byte	0x7d
 3506 01eb 00       		.sleb128 0
 3507 01ec 02000000 		.4byte	.LCFI20
 3508 01f0 04000000 		.4byte	.LCFI21
 3509 01f4 0200     		.2byte	0x2
ARM GAS  /tmp/cc8xR3gm.s 			page 85


 3510 01f6 7D       		.byte	0x7d
 3511 01f7 04       		.sleb128 4
 3512 01f8 04000000 		.4byte	.LCFI21
 3513 01fc 1E000000 		.4byte	.LFE30
 3514 0200 0200     		.2byte	0x2
 3515 0202 7D       		.byte	0x7d
 3516 0203 10       		.sleb128 16
 3517 0204 00000000 		.4byte	0
 3518 0208 00000000 		.4byte	0
 3519              	.LLST13:
 3520 020c 00000000 		.4byte	.LFB31
 3521 0210 02000000 		.4byte	.LCFI22
 3522 0214 0200     		.2byte	0x2
 3523 0216 7D       		.byte	0x7d
 3524 0217 00       		.sleb128 0
 3525 0218 02000000 		.4byte	.LCFI22
 3526 021c 7C000000 		.4byte	.LFE31
 3527 0220 0200     		.2byte	0x2
 3528 0222 7D       		.byte	0x7d
 3529 0223 08       		.sleb128 8
 3530 0224 00000000 		.4byte	0
 3531 0228 00000000 		.4byte	0
 3532              	.LLST14:
 3533 022c 00000000 		.4byte	.LFB32
 3534 0230 02000000 		.4byte	.LCFI23
 3535 0234 0200     		.2byte	0x2
 3536 0236 7D       		.byte	0x7d
 3537 0237 00       		.sleb128 0
 3538 0238 02000000 		.4byte	.LCFI23
 3539 023c 7C000000 		.4byte	.LFE32
 3540 0240 0200     		.2byte	0x2
 3541 0242 7D       		.byte	0x7d
 3542 0243 08       		.sleb128 8
 3543 0244 00000000 		.4byte	0
 3544 0248 00000000 		.4byte	0
 3545              		.section	.debug_aranges,"",%progbits
 3546 0000 8C000000 		.4byte	0x8c
 3547 0004 0200     		.2byte	0x2
 3548 0006 00000000 		.4byte	.Ldebug_info0
 3549 000a 04       		.byte	0x4
 3550 000b 00       		.byte	0
 3551 000c 0000     		.2byte	0
 3552 000e 0000     		.2byte	0
 3553 0010 00000000 		.4byte	.LFB11
 3554 0014 2C000000 		.4byte	.LFE11-.LFB11
 3555 0018 00000000 		.4byte	.LFB16
 3556 001c EC000000 		.4byte	.LFE16-.LFB16
 3557 0020 00000000 		.4byte	.LFB20
 3558 0024 0C010000 		.4byte	.LFE20-.LFB20
 3559 0028 00000000 		.4byte	.LFB21
 3560 002c 60000000 		.4byte	.LFE21-.LFB21
 3561 0030 00000000 		.4byte	.LFB22
 3562 0034 18010000 		.4byte	.LFE22-.LFB22
 3563 0038 00000000 		.4byte	.LFB23
 3564 003c 00010000 		.4byte	.LFE23-.LFB23
 3565 0040 00000000 		.4byte	.LFB24
 3566 0044 2C000000 		.4byte	.LFE24-.LFB24
ARM GAS  /tmp/cc8xR3gm.s 			page 86


 3567 0048 00000000 		.4byte	.LFB25
 3568 004c 60000000 		.4byte	.LFE25-.LFB25
 3569 0050 00000000 		.4byte	.LFB26
 3570 0054 1E000000 		.4byte	.LFE26-.LFB26
 3571 0058 00000000 		.4byte	.LFB27
 3572 005c 60000000 		.4byte	.LFE27-.LFB27
 3573 0060 00000000 		.4byte	.LFB28
 3574 0064 2C000000 		.4byte	.LFE28-.LFB28
 3575 0068 00000000 		.4byte	.LFB29
 3576 006c 60000000 		.4byte	.LFE29-.LFB29
 3577 0070 00000000 		.4byte	.LFB30
 3578 0074 1E000000 		.4byte	.LFE30-.LFB30
 3579 0078 00000000 		.4byte	.LFB31
 3580 007c 7C000000 		.4byte	.LFE31-.LFB31
 3581 0080 00000000 		.4byte	.LFB32
 3582 0084 7C000000 		.4byte	.LFE32-.LFB32
 3583 0088 00000000 		.4byte	0
 3584 008c 00000000 		.4byte	0
 3585              		.section	.debug_ranges,"",%progbits
 3586              	.Ldebug_ranges0:
 3587 0000 00000000 		.4byte	.LFB11
 3588 0004 2C000000 		.4byte	.LFE11
 3589 0008 00000000 		.4byte	.LFB16
 3590 000c EC000000 		.4byte	.LFE16
 3591 0010 00000000 		.4byte	.LFB20
 3592 0014 0C010000 		.4byte	.LFE20
 3593 0018 00000000 		.4byte	.LFB21
 3594 001c 60000000 		.4byte	.LFE21
 3595 0020 00000000 		.4byte	.LFB22
 3596 0024 18010000 		.4byte	.LFE22
 3597 0028 00000000 		.4byte	.LFB23
 3598 002c 00010000 		.4byte	.LFE23
 3599 0030 00000000 		.4byte	.LFB24
 3600 0034 2C000000 		.4byte	.LFE24
 3601 0038 00000000 		.4byte	.LFB25
 3602 003c 60000000 		.4byte	.LFE25
 3603 0040 00000000 		.4byte	.LFB26
 3604 0044 1E000000 		.4byte	.LFE26
 3605 0048 00000000 		.4byte	.LFB27
 3606 004c 60000000 		.4byte	.LFE27
 3607 0050 00000000 		.4byte	.LFB28
 3608 0054 2C000000 		.4byte	.LFE28
 3609 0058 00000000 		.4byte	.LFB29
 3610 005c 60000000 		.4byte	.LFE29
 3611 0060 00000000 		.4byte	.LFB30
 3612 0064 1E000000 		.4byte	.LFE30
 3613 0068 00000000 		.4byte	.LFB31
 3614 006c 7C000000 		.4byte	.LFE31
 3615 0070 00000000 		.4byte	.LFB32
 3616 0074 7C000000 		.4byte	.LFE32
 3617 0078 00000000 		.4byte	0
 3618 007c 00000000 		.4byte	0
 3619              		.section	.debug_line,"",%progbits
 3620              	.Ldebug_line0:
 3621 0000 D4020000 		.section	.debug_str,"MS",%progbits,1
 3621      02000B01 
 3621      00000201 
ARM GAS  /tmp/cc8xR3gm.s 			page 87


 3621      FB0E0D00 
 3621      01010101 
 3622              	.LASF78:
 3623 0000 41504231 		.ascii	"APB1ENR\000"
 3623      454E5200 
 3624              	.LASF12:
 3625 0008 45585449 		.ascii	"EXTI4_15_IRQn\000"
 3625      345F3135 
 3625      5F495251 
 3625      6E00
 3626              	.LASF70:
 3627 0016 42535252 		.ascii	"BSRR\000"
 3627      00
 3628              	.LASF128:
 3629 001b 70747832 		.ascii	"ptx2_pckt_index\000"
 3629      5F70636B 
 3629      745F696E 
 3629      64657800 
 3630              	.LASF11:
 3631 002b 45585449 		.ascii	"EXTI2_3_IRQn\000"
 3631      325F335F 
 3631      4952516E 
 3631      00
 3632              	.LASF74:
 3633 0038 41504232 		.ascii	"APB2RSTR\000"
 3633      52535452 
 3633      00
 3634              	.LASF2:
 3635 0041 5356435F 		.ascii	"SVC_IRQn\000"
 3635      4952516E 
 3635      00
 3636              	.LASF110:
 3637 004a 52656164 		.ascii	"ReadUsart2Buffer\000"
 3637      55736172 
 3637      74324275 
 3637      66666572 
 3637      00
 3638              	.LASF112:
 3639 005b 55736172 		.ascii	"Usart1SendUnsigned\000"
 3639      74315365 
 3639      6E64556E 
 3639      7369676E 
 3639      656400
 3640              	.LASF91:
 3641 006e 4E564943 		.ascii	"NVIC_SetPriority\000"
 3641      5F536574 
 3641      5072696F 
 3641      72697479 
 3641      00
 3642              	.LASF45:
 3643 007f 756E7369 		.ascii	"unsigned int\000"
 3643      676E6564 
 3643      20696E74 
 3643      00
 3644              	.LASF25:
 3645 008c 54494D31 		.ascii	"TIM16_IRQn\000"
 3645      365F4952 
ARM GAS  /tmp/cc8xR3gm.s 			page 88


 3645      516E00
 3646              	.LASF79:
 3647 0097 42444352 		.ascii	"BDCR\000"
 3647      00
 3648              	.LASF123:
 3649 009c 72783262 		.ascii	"rx2buff\000"
 3649      75666600 
 3650              	.LASF8:
 3651 00a4 464C4153 		.ascii	"FLASH_IRQn\000"
 3651      485F4952 
 3651      516E00
 3652              	.LASF101:
 3653 00af 64756D6D 		.ascii	"dummy\000"
 3653      7900
 3654              	.LASF124:
 3655 00b5 70747831 		.ascii	"ptx1\000"
 3655      00
 3656              	.LASF127:
 3657 00ba 70747832 		.ascii	"ptx2\000"
 3657      00
 3658              	.LASF122:
 3659 00bf 74783262 		.ascii	"tx2buff\000"
 3659      75666600 
 3660              	.LASF10:
 3661 00c7 45585449 		.ascii	"EXTI0_1_IRQn\000"
 3661      305F315F 
 3661      4952516E 
 3661      00
 3662              	.LASF119:
 3663 00d4 75736172 		.ascii	"usart2_have_data\000"
 3663      74325F68 
 3663      6176655F 
 3663      64617461 
 3663      00
 3664              	.LASF27:
 3665 00e5 49324331 		.ascii	"I2C1_IRQn\000"
 3665      5F495251 
 3665      6E00
 3666              	.LASF3:
 3667 00ef 50656E64 		.ascii	"PendSV_IRQn\000"
 3667      53565F49 
 3667      52516E00 
 3668              	.LASF9:
 3669 00fb 5243435F 		.ascii	"RCC_IRQn\000"
 3669      4952516E 
 3669      00
 3670              	.LASF84:
 3671 0104 47545052 		.ascii	"GTPR\000"
 3671      00
 3672              	.LASF105:
 3673 0109 73656E64 		.ascii	"send\000"
 3673      00
 3674              	.LASF47:
 3675 010e 75696E74 		.ascii	"uint32_t\000"
 3675      33325F74 
 3675      00
 3676              	.LASF80:
ARM GAS  /tmp/cc8xR3gm.s 			page 89


 3677 0117 41484252 		.ascii	"AHBRSTR\000"
 3677      53545200 
 3678              	.LASF48:
 3679 011f 49534552 		.ascii	"ISER\000"
 3679      00
 3680              	.LASF51:
 3681 0124 52534552 		.ascii	"RSERVED1\000"
 3681      56454431 
 3681      00
 3682              	.LASF29:
 3683 012d 53504931 		.ascii	"SPI1_IRQn\000"
 3683      5F495251 
 3683      6E00
 3684              	.LASF90:
 3685 0137 4E564943 		.ascii	"NVIC_EnableIRQ\000"
 3685      5F456E61 
 3685      626C6549 
 3685      525100
 3686              	.LASF44:
 3687 0146 6C6F6E67 		.ascii	"long long unsigned int\000"
 3687      206C6F6E 
 3687      6720756E 
 3687      7369676E 
 3687      65642069 
 3688              	.LASF94:
 3689 015d 6E65775F 		.ascii	"new_mode\000"
 3689      6D6F6465 
 3689      00
 3690              	.LASF115:
 3691 0166 55534152 		.ascii	"USART1Config\000"
 3691      5431436F 
 3691      6E666967 
 3691      00
 3692              	.LASF64:
 3693 0173 44465352 		.ascii	"DFSR\000"
 3693      00
 3694              	.LASF114:
 3695 0178 55534152 		.ascii	"USART2Config\000"
 3695      5432436F 
 3695      6E666967 
 3695      00
 3696              	.LASF38:
 3697 0185 5F5F7569 		.ascii	"__uint16_t\000"
 3697      6E743136 
 3697      5F7400
 3698              	.LASF133:
 3699 0190 7372632F 		.ascii	"src/uart.c\000"
 3699      75617274 
 3699      2E6300
 3700              	.LASF66:
 3701 019b 4D4F4445 		.ascii	"MODER\000"
 3701      5200
 3702              	.LASF37:
 3703 01a1 4952516E 		.ascii	"IRQn_Type\000"
 3703      5F547970 
 3703      6500
 3704              	.LASF126:
ARM GAS  /tmp/cc8xR3gm.s 			page 90


 3705 01ab 70727831 		.ascii	"prx1\000"
 3705      00
 3706              	.LASF32:
 3707 01b0 55534152 		.ascii	"USART2_IRQn\000"
 3707      54325F49 
 3707      52516E00 
 3708              	.LASF59:
 3709 01bc 43505549 		.ascii	"CPUID\000"
 3709      4400
 3710              	.LASF83:
 3711 01c2 5243435F 		.ascii	"RCC_TypeDef\000"
 3711      54797065 
 3711      44656600 
 3712              	.LASF96:
 3713 01ce 74656D70 		.ascii	"temp_gpio\000"
 3713      5F677069 
 3713      6F00
 3714              	.LASF87:
 3715 01d8 55534152 		.ascii	"USART_TypeDef\000"
 3715      545F5479 
 3715      70654465 
 3715      6600
 3716              	.LASF117:
 3717 01e6 75736172 		.ascii	"usart1_have_data\000"
 3717      74315F68 
 3717      6176655F 
 3717      64617461 
 3717      00
 3718              	.LASF69:
 3719 01f7 50555044 		.ascii	"PUPDR\000"
 3719      5200
 3720              	.LASF75:
 3721 01fd 41504231 		.ascii	"APB1RSTR\000"
 3721      52535452 
 3721      00
 3722              	.LASF89:
 3723 0206 63686172 		.ascii	"char\000"
 3723      00
 3724              	.LASF61:
 3725 020b 41495243 		.ascii	"AIRCR\000"
 3725      5200
 3726              	.LASF21:
 3727 0211 54494D33 		.ascii	"TIM3_IRQn\000"
 3727      5F495251 
 3727      6E00
 3728              	.LASF14:
 3729 021b 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 3729      5F436861 
 3729      6E6E656C 
 3729      315F4952 
 3729      516E00
 3730              	.LASF76:
 3731 022e 41484245 		.ascii	"AHBENR\000"
 3731      4E5200
 3732              	.LASF121:
 3733 0235 72783162 		.ascii	"rx1buff\000"
 3733      75666600 
ARM GAS  /tmp/cc8xR3gm.s 			page 91


 3734              	.LASF24:
 3735 023d 54494D31 		.ascii	"TIM15_IRQn\000"
 3735      355F4952 
 3735      516E00
 3736              	.LASF85:
 3737 0248 52544F52 		.ascii	"RTOR\000"
 3737      00
 3738              	.LASF118:
 3739 024d 75736172 		.ascii	"usart2_mini_timeout\000"
 3739      74325F6D 
 3739      696E695F 
 3739      74696D65 
 3739      6F757400 
 3740              	.LASF129:
 3741 0261 70727832 		.ascii	"prx2\000"
 3741      00
 3742              	.LASF120:
 3743 0266 74783162 		.ascii	"tx1buff\000"
 3743      75666600 
 3744              	.LASF97:
 3745 026e 55736172 		.ascii	"Usart1Mode\000"
 3745      74314D6F 
 3745      646500
 3746              	.LASF43:
 3747 0279 6C6F6E67 		.ascii	"long long int\000"
 3747      206C6F6E 
 3747      6720696E 
 3747      7400
 3748              	.LASF5:
 3749 0287 57574447 		.ascii	"WWDG_IRQn\000"
 3749      5F495251 
 3749      6E00
 3750              	.LASF63:
 3751 0291 53484353 		.ascii	"SHCSR\000"
 3751      5200
 3752              	.LASF116:
 3753 0297 75736172 		.ascii	"usart1_mini_timeout\000"
 3753      74315F6D 
 3753      696E695F 
 3753      74696D65 
 3753      6F757400 
 3754              	.LASF98:
 3755 02ab 52656164 		.ascii	"ReadUsart1Buffer\000"
 3755      55736172 
 3755      74314275 
 3755      66666572 
 3755      00
 3756              	.LASF13:
 3757 02bc 54535F49 		.ascii	"TS_IRQn\000"
 3757      52516E00 
 3758              	.LASF18:
 3759 02c4 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 3759      5F42524B 
 3759      5F55505F 
 3759      5452475F 
 3759      434F4D5F 
 3760              	.LASF107:
ARM GAS  /tmp/cc8xR3gm.s 			page 92


 3761 02dd 73697A65 		.ascii	"size\000"
 3761      00
 3762              	.LASF100:
 3763 02e2 6D61785F 		.ascii	"max_len\000"
 3763      6C656E00 
 3764              	.LASF6:
 3765 02ea 5056445F 		.ascii	"PVD_IRQn\000"
 3765      4952516E 
 3765      00
 3766              	.LASF81:
 3767 02f3 43464752 		.ascii	"CFGR2\000"
 3767      3200
 3768              	.LASF82:
 3769 02f9 43464752 		.ascii	"CFGR3\000"
 3769      3300
 3770              	.LASF54:
 3771 02ff 49435052 		.ascii	"ICPR\000"
 3771      00
 3772              	.LASF17:
 3773 0304 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 3773      5F434F4D 
 3773      505F4952 
 3773      516E00
 3774              	.LASF77:
 3775 0313 41504232 		.ascii	"APB2ENR\000"
 3775      454E5200 
 3776              	.LASF106:
 3777 031b 55736172 		.ascii	"Usart2SendUnsigned\000"
 3777      74325365 
 3777      6E64556E 
 3777      7369676E 
 3777      656400
 3778              	.LASF95:
 3779 032e 74656D70 		.ascii	"temp_int\000"
 3779      5F696E74 
 3779      00
 3780              	.LASF108:
 3781 0337 55736172 		.ascii	"Usart2SendSingle\000"
 3781      74325365 
 3781      6E645369 
 3781      6E676C65 
 3781      00
 3782              	.LASF68:
 3783 0348 4F535045 		.ascii	"OSPEEDR\000"
 3783      45445200 
 3784              	.LASF111:
 3785 0350 55736172 		.ascii	"Usart1Send\000"
 3785      74315365 
 3785      6E6400
 3786              	.LASF88:
 3787 035b 6C6F6E67 		.ascii	"long double\000"
 3787      20646F75 
 3787      626C6500 
 3788              	.LASF46:
 3789 0367 75696E74 		.ascii	"uint16_t\000"
 3789      31365F74 
 3789      00
ARM GAS  /tmp/cc8xR3gm.s 			page 93


 3790              	.LASF92:
 3791 0370 4952516E 		.ascii	"IRQn\000"
 3791      00
 3792              	.LASF102:
 3793 0375 55534152 		.ascii	"USART1_IRQHandler\000"
 3793      54315F49 
 3793      52514861 
 3793      6E646C65 
 3793      7200
 3794              	.LASF130:
 3795 0387 70636B74 		.ascii	"pckt_gps_ready\000"
 3795      5F677073 
 3795      5F726561 
 3795      647900
 3796              	.LASF7:
 3797 0396 5254435F 		.ascii	"RTC_IRQn\000"
 3797      4952516E 
 3797      00
 3798              	.LASF49:
 3799 039f 52455345 		.ascii	"RESERVED0\000"
 3799      52564544 
 3799      3000
 3800              	.LASF62:
 3801 03a9 52455345 		.ascii	"RESERVED1\000"
 3801      52564544 
 3801      3100
 3802              	.LASF53:
 3803 03b3 52455345 		.ascii	"RESERVED2\000"
 3803      52564544 
 3803      3200
 3804              	.LASF55:
 3805 03bd 52455345 		.ascii	"RESERVED3\000"
 3805      52564544 
 3805      3300
 3806              	.LASF56:
 3807 03c7 52455345 		.ascii	"RESERVED4\000"
 3807      52564544 
 3807      3400
 3808              	.LASF86:
 3809 03d1 52455345 		.ascii	"RESERVED5\000"
 3809      52564544 
 3809      3500
 3810              	.LASF36:
 3811 03db 73686F72 		.ascii	"short int\000"
 3811      7420696E 
 3811      7400
 3812              	.LASF40:
 3813 03e5 6C6F6E67 		.ascii	"long int\000"
 3813      20696E74 
 3813      00
 3814              	.LASF31:
 3815 03ee 55534152 		.ascii	"USART1_IRQn\000"
 3815      54315F49 
 3815      52516E00 
 3816              	.LASF0:
 3817 03fa 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 3817      61736B61 
ARM GAS  /tmp/cc8xR3gm.s 			page 94


 3817      626C6549 
 3817      6E745F49 
 3817      52516E00 
 3818              	.LASF125:
 3819 040e 70747831 		.ascii	"ptx1_pckt_index\000"
 3819      5F70636B 
 3819      745F696E 
 3819      64657800 
 3820              	.LASF93:
 3821 041e 7072696F 		.ascii	"priority\000"
 3821      72697479 
 3821      00
 3822              	.LASF19:
 3823 0427 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 3823      5F43435F 
 3823      4952516E 
 3823      00
 3824              	.LASF67:
 3825 0434 4F545950 		.ascii	"OTYPER\000"
 3825      455200
 3826              	.LASF73:
 3827 043b 43464752 		.ascii	"CFGR\000"
 3827      00
 3828              	.LASF26:
 3829 0440 54494D31 		.ascii	"TIM17_IRQn\000"
 3829      375F4952 
 3829      516E00
 3830              	.LASF16:
 3831 044b 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 3831      5F436861 
 3831      6E6E656C 
 3831      345F355F 
 3831      4952516E 
 3832              	.LASF58:
 3833 0460 4E564943 		.ascii	"NVIC_Type\000"
 3833      5F547970 
 3833      6500
 3834              	.LASF65:
 3835 046a 5343425F 		.ascii	"SCB_Type\000"
 3835      54797065 
 3835      00
 3836              	.LASF113:
 3837 0473 55736172 		.ascii	"Usart1SendSingle\000"
 3837      74315365 
 3837      6E645369 
 3837      6E676C65 
 3837      00
 3838              	.LASF72:
 3839 0484 4750494F 		.ascii	"GPIO_TypeDef\000"
 3839      5F547970 
 3839      65446566 
 3839      00
 3840              	.LASF131:
 3841 0491 75736172 		.ascii	"usart_mode\000"
 3841      745F6D6F 
 3841      646500
 3842              	.LASF4:
ARM GAS  /tmp/cc8xR3gm.s 			page 95


 3843 049c 53797354 		.ascii	"SysTick_IRQn\000"
 3843      69636B5F 
 3843      4952516E 
 3843      00
 3844              	.LASF33:
 3845 04a9 4345435F 		.ascii	"CEC_IRQn\000"
 3845      4952516E 
 3845      00
 3846              	.LASF57:
 3847 04b2 73697A65 		.ascii	"sizetype\000"
 3847      74797065 
 3847      00
 3848              	.LASF60:
 3849 04bb 49435352 		.ascii	"ICSR\000"
 3849      00
 3850              	.LASF28:
 3851 04c0 49324332 		.ascii	"I2C2_IRQn\000"
 3851      5F495251 
 3851      6E00
 3852              	.LASF42:
 3853 04ca 6C6F6E67 		.ascii	"long unsigned int\000"
 3853      20756E73 
 3853      69676E65 
 3853      6420696E 
 3853      7400
 3854              	.LASF20:
 3855 04dc 54494D32 		.ascii	"TIM2_IRQn\000"
 3855      5F495251 
 3855      6E00
 3856              	.LASF109:
 3857 04e6 746F7365 		.ascii	"tosend\000"
 3857      6E6400
 3858              	.LASF134:
 3859 04ed 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 3859      652F6D65 
 3859      642F446F 
 3859      63756D65 
 3859      6E74732F 
 3860 0520 6100     		.ascii	"a\000"
 3861              	.LASF23:
 3862 0522 54494D31 		.ascii	"TIM14_IRQn\000"
 3862      345F4952 
 3862      516E00
 3863              	.LASF15:
 3864 052d 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 3864      5F436861 
 3864      6E6E656C 
 3864      325F335F 
 3864      4952516E 
 3865              	.LASF22:
 3866 0542 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 3866      5F444143 
 3866      5F495251 
 3866      6E00
 3867              	.LASF35:
 3868 0550 756E7369 		.ascii	"unsigned char\000"
 3868      676E6564 
ARM GAS  /tmp/cc8xR3gm.s 			page 96


 3868      20636861 
 3868      7200
 3869              	.LASF41:
 3870 055e 5F5F7569 		.ascii	"__uint32_t\000"
 3870      6E743332 
 3870      5F7400
 3871              	.LASF104:
 3872 0569 55736172 		.ascii	"Usart2Send\000"
 3872      74325365 
 3872      6E6400
 3873              	.LASF50:
 3874 0574 49434552 		.ascii	"ICER\000"
 3874      00
 3875              	.LASF30:
 3876 0579 53504932 		.ascii	"SPI2_IRQn\000"
 3876      5F495251 
 3876      6E00
 3877              	.LASF34:
 3878 0583 7369676E 		.ascii	"signed char\000"
 3878      65642063 
 3878      68617200 
 3879              	.LASF39:
 3880 058f 73686F72 		.ascii	"short unsigned int\000"
 3880      7420756E 
 3880      7369676E 
 3880      65642069 
 3880      6E7400
 3881              	.LASF132:
 3882 05a2 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 3882      43313120 
 3882      352E322E 
 3882      31203230 
 3882      31353132 
 3883 05d5 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 3883      20726576 
 3883      6973696F 
 3883      6E203233 
 3883      31383438 
 3884 0608 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 3884      662D3220 
 3884      2D4F3020 
 3884      2D666F6D 
 3884      69742D66 
 3885 063b 66756E63 		.ascii	"function-sections\000"
 3885      74696F6E 
 3885      2D736563 
 3885      74696F6E 
 3885      7300
 3886              	.LASF99:
 3887 064d 626F7574 		.ascii	"bout\000"
 3887      00
 3888              	.LASF1:
 3889 0652 48617264 		.ascii	"HardFault_IRQn\000"
 3889      4661756C 
 3889      745F4952 
 3889      516E00
 3890              	.LASF52:
ARM GAS  /tmp/cc8xR3gm.s 			page 97


 3891 0661 49535052 		.ascii	"ISPR\000"
 3891      00
 3892              	.LASF103:
 3893 0666 55534152 		.ascii	"USART2_IRQHandler\000"
 3893      54325F49 
 3893      52514861 
 3893      6E646C65 
 3893      7200
 3894              	.LASF71:
 3895 0678 4C434B52 		.ascii	"LCKR\000"
 3895      00
 3896              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/cc8xR3gm.s 			page 98


DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
     /tmp/cc8xR3gm.s:55     .text.NVIC_EnableIRQ:00000000 $t
     /tmp/cc8xR3gm.s:59     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
     /tmp/cc8xR3gm.s:91     .text.NVIC_EnableIRQ:00000028 $d
     /tmp/cc8xR3gm.s:96     .text.NVIC_SetPriority:00000000 $t
     /tmp/cc8xR3gm.s:100    .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/cc8xR3gm.s:240    .text.NVIC_SetPriority:000000e4 $d
                            *COM*:00000004 ptx1
                            *COM*:00000004 ptx1_pckt_index
                            *COM*:00000004 prx1
                            *COM*:00000004 ptx2
                            *COM*:00000004 ptx2_pckt_index
                            *COM*:00000004 prx2
     /tmp/cc8xR3gm.s:255    .bss.pckt_gps_ready:00000000 pckt_gps_ready
     /tmp/cc8xR3gm.s:256    .bss.pckt_gps_ready:00000000 $d
     /tmp/cc8xR3gm.s:261    .data.usart_mode:00000000 usart_mode
     /tmp/cc8xR3gm.s:264    .text.Usart1Mode:00000000 $t
     /tmp/cc8xR3gm.s:269    .text.Usart1Mode:00000000 Usart1Mode
     /tmp/cc8xR3gm.s:431    .text.Usart1Mode:000000f4 $d
     /tmp/cc8xR3gm.s:441    .text.ReadUsart1Buffer:00000000 $t
     /tmp/cc8xR3gm.s:446    .text.ReadUsart1Buffer:00000000 ReadUsart1Buffer
     /tmp/cc8xR3gm.s:511    .text.ReadUsart1Buffer:00000058 $d
     /tmp/cc8xR3gm.s:517    .text.USART1_IRQHandler:00000000 $t
     /tmp/cc8xR3gm.s:522    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/cc8xR3gm.s:683    .text.USART1_IRQHandler:000000f0 $d
     /tmp/cc8xR3gm.s:697    .text.USART2_IRQHandler:00000000 $t
     /tmp/cc8xR3gm.s:702    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
     /tmp/cc8xR3gm.s:850    .text.USART2_IRQHandler:000000dc $d
     /tmp/cc8xR3gm.s:863    .text.Usart2Send:00000000 $t
     /tmp/cc8xR3gm.s:868    .text.Usart2Send:00000000 Usart2Send
     /tmp/cc8xR3gm.s:910    .text.Usart2SendUnsigned:00000000 Usart2SendUnsigned
     /tmp/cc8xR3gm.s:905    .text.Usart2SendUnsigned:00000000 $t
     /tmp/cc8xR3gm.s:970    .text.Usart2SendUnsigned:00000054 $d
     /tmp/cc8xR3gm.s:977    .text.Usart2SendSingle:00000000 $t
     /tmp/cc8xR3gm.s:982    .text.Usart2SendSingle:00000000 Usart2SendSingle
     /tmp/cc8xR3gm.s:1012   .text.ReadUsart2Buffer:00000000 $t
     /tmp/cc8xR3gm.s:1017   .text.ReadUsart2Buffer:00000000 ReadUsart2Buffer
     /tmp/cc8xR3gm.s:1082   .text.ReadUsart2Buffer:00000058 $d
     /tmp/cc8xR3gm.s:1088   .text.Usart1Send:00000000 $t
     /tmp/cc8xR3gm.s:1093   .text.Usart1Send:00000000 Usart1Send
     /tmp/cc8xR3gm.s:1135   .text.Usart1SendUnsigned:00000000 Usart1SendUnsigned
     /tmp/cc8xR3gm.s:1130   .text.Usart1SendUnsigned:00000000 $t
     /tmp/cc8xR3gm.s:1195   .text.Usart1SendUnsigned:00000054 $d
     /tmp/cc8xR3gm.s:1202   .text.Usart1SendSingle:00000000 $t
     /tmp/cc8xR3gm.s:1207   .text.Usart1SendSingle:00000000 Usart1SendSingle
     /tmp/cc8xR3gm.s:1237   .text.USART2Config:00000000 $t
     /tmp/cc8xR3gm.s:1242   .text.USART2Config:00000000 USART2Config
     /tmp/cc8xR3gm.s:1312   .text.USART2Config:00000060 $d
     /tmp/cc8xR3gm.s:1323   .text.USART1Config:00000000 $t
     /tmp/cc8xR3gm.s:1328   .text.USART1Config:00000000 USART1Config
     /tmp/cc8xR3gm.s:1394   .text.USART1Config:00000058 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcpy
rx1buff
ARM GAS  /tmp/cc8xR3gm.s 			page 99


usart1_have_data
usart1_mini_timeout
tx1buff
rx2buff
usart2_have_data
usart2_mini_timeout
tx2buff
strlen
