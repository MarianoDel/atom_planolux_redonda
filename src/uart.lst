ARM GAS  /tmp/ccfZifSa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"uart.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/uart.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/uart.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccfZifSa.s 			page 2


  58              		.type	NVIC_EnableIRQ, %function
  59              	NVIC_EnableIRQ:
  60              	.LFB11:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccfZifSa.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccfZifSa.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccfZifSa.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccfZifSa.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccfZifSa.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccfZifSa.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccfZifSa.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccfZifSa.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccfZifSa.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccfZifSa.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccfZifSa.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccfZifSa.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccfZifSa.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccfZifSa.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 812 0
  63              		.cfi_startproc
  64 0000 82B0     		sub	sp, sp, #8	@,,
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 8
  67 0002 0200     		movs	r2, r0	@ tmp116, IRQn
  68 0004 6B46     		mov	r3, sp	@ tmp122,
  69 0006 0733     		adds	r3, r3, #7	@ tmp117,
  70 0008 1A70     		strb	r2, [r3]	@ tmp118, IRQn
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  71              		.loc 1 813 0
  72 000a 074B     		ldr	r3, .L2	@ D.5522,
  73 000c 6A46     		mov	r2, sp	@ tmp123,
  74 000e 0732     		adds	r2, r2, #7	@ tmp119,
  75 0010 1278     		ldrb	r2, [r2]	@ D.5523, IRQn
  76 0012 1100     		movs	r1, r2	@ D.5524, D.5523
  77 0014 1F22     		movs	r2, #31	@ tmp120,
  78 0016 0A40     		ands	r2, r1	@ D.5524, D.5524
  79 0018 0121     		movs	r1, #1	@ tmp121,
  80 001a 9140     		lsls	r1, r1, r2	@ D.5525, D.5525, D.5524
  81 001c 0A00     		movs	r2, r1	@ D.5525, D.5525
  82 001e 1A60     		str	r2, [r3]	@ D.5524, _1->ISER
 814:./cmsis_core/core_cm0.h **** }
  83              		.loc 1 814 0
  84 0020 C046     		nop
  85 0022 02B0     		add	sp, sp, #8	@,,
  86              		@ sp needed	@
  87 0024 7047     		bx	lr
  88              	.L3:
  89 0026 C046     		.align	2
  90              	.L2:
  91 0028 00E100E0 		.word	-536813312
  92              		.cfi_endproc
  93              	.LFE11:
  94              		.size	NVIC_EnableIRQ, .-NVIC_EnableIRQ
  95              		.section	.text.NVIC_SetPriority,"ax",%progbits
  96              		.align	2
  97              		.code	16
  98              		.thumb_func
ARM GAS  /tmp/ccfZifSa.s 			page 17


  99              		.type	NVIC_SetPriority, %function
 100              	NVIC_SetPriority:
 101              	.LFB16:
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccfZifSa.s 			page 18


 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
 102              		.loc 1 893 0
 103              		.cfi_startproc
 104 0000 30B5     		push	{r4, r5, lr}	@
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 12
 107              		.cfi_offset 4, -12
 108              		.cfi_offset 5, -8
 109              		.cfi_offset 14, -4
 110 0002 83B0     		sub	sp, sp, #12	@,,
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 24
 113 0004 0200     		movs	r2, r0	@ tmp162, IRQn
 114 0006 0091     		str	r1, [sp]	@ priority, priority
 115 0008 6B46     		mov	r3, sp	@ tmp199,
 116 000a 0733     		adds	r3, r3, #7	@ tmp163,
 117 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 118              		.loc 1 894 0
 119 000e 6B46     		mov	r3, sp	@ tmp200,
 120 0010 0733     		adds	r3, r3, #7	@ tmp165,
 121 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
 122 0014 7F2B     		cmp	r3, #127	@ tmp166,
 123 0016 36D9     		bls	.L5	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 124              		.loc 1 895 0
 125 0018 324C     		ldr	r4, .L8	@ D.5526,
 126 001a 6B46     		mov	r3, sp	@ tmp201,
 127 001c 0733     		adds	r3, r3, #7	@ tmp167,
 128 001e 1B78     		ldrb	r3, [r3]	@ D.5527, IRQn
 129 0020 1A00     		movs	r2, r3	@ D.5528, D.5527
 130 0022 0F23     		movs	r3, #15	@ tmp168,
 131 0024 1340     		ands	r3, r2	@ D.5528, D.5528
ARM GAS  /tmp/ccfZifSa.s 			page 19


 132 0026 083B     		subs	r3, r3, #8	@ D.5528,
 133 0028 9908     		lsrs	r1, r3, #2	@ D.5528, D.5528,
 134 002a 2E4A     		ldr	r2, .L8	@ D.5526,
 135 002c 6B46     		mov	r3, sp	@ tmp202,
 136 002e 0733     		adds	r3, r3, #7	@ tmp169,
 137 0030 1B78     		ldrb	r3, [r3]	@ D.5527, IRQn
 138 0032 1800     		movs	r0, r3	@ D.5528, D.5527
 139 0034 0F23     		movs	r3, #15	@ tmp170,
 140 0036 0340     		ands	r3, r0	@ D.5528, D.5528
 141 0038 083B     		subs	r3, r3, #8	@ D.5528,
 142 003a 9B08     		lsrs	r3, r3, #2	@ D.5528, D.5528,
 143 003c 0633     		adds	r3, r3, #6	@ tmp171,
 144 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 145 0040 D318     		adds	r3, r2, r3	@ tmp173, D.5526, tmp172
 146 0042 0433     		adds	r3, r3, #4	@ tmp174,
 147 0044 1B68     		ldr	r3, [r3]	@ D.5528, _9->SHP
 148 0046 6A46     		mov	r2, sp	@ tmp203,
 149 0048 0732     		adds	r2, r2, #7	@ tmp175,
 150 004a 1278     		ldrb	r2, [r2]	@ D.5527, IRQn
 151 004c 1000     		movs	r0, r2	@ D.5528, D.5527
 152 004e 0322     		movs	r2, #3	@ tmp176,
 153 0050 0240     		ands	r2, r0	@ D.5528, D.5528
 154 0052 D200     		lsls	r2, r2, #3	@ D.5528, D.5528,
 155 0054 FF20     		movs	r0, #255	@ tmp177,
 156 0056 9040     		lsls	r0, r0, r2	@ D.5529, D.5529, D.5528
 157 0058 0200     		movs	r2, r0	@ D.5529, D.5529
 158 005a D243     		mvns	r2, r2	@ D.5529, D.5529
 159 005c 1A40     		ands	r2, r3	@ D.5528, D.5528
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 160              		.loc 1 896 0
 161 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 162 0060 9B01     		lsls	r3, r3, #6	@ D.5528, tmp178,
 163 0062 FF20     		movs	r0, #255	@ tmp179,
 164 0064 1840     		ands	r0, r3	@ D.5528, D.5528
 165 0066 6B46     		mov	r3, sp	@ tmp205,
 166 0068 0733     		adds	r3, r3, #7	@ tmp180,
 167 006a 1B78     		ldrb	r3, [r3]	@ D.5527, IRQn
 168 006c 1D00     		movs	r5, r3	@ D.5528, D.5527
 169 006e 0323     		movs	r3, #3	@ tmp181,
 170 0070 2B40     		ands	r3, r5	@ D.5528, D.5528
 171 0072 DB00     		lsls	r3, r3, #3	@ D.5528, D.5528,
 172 0074 9840     		lsls	r0, r0, r3	@ D.5528, D.5528, D.5528
 173 0076 0300     		movs	r3, r0	@ D.5528, D.5528
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 174              		.loc 1 895 0
 175 0078 1A43     		orrs	r2, r3	@ D.5528, D.5528
 176 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.5528,
 177 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 178 007e E318     		adds	r3, r4, r3	@ tmp184, D.5526, tmp183
 179 0080 0433     		adds	r3, r3, #4	@ tmp185,
 180 0082 1A60     		str	r2, [r3]	@ D.5528, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 181              		.loc 1 900 0
 182 0084 2BE0     		b	.L7	@
ARM GAS  /tmp/ccfZifSa.s 			page 20


 183              	.L5:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 184              		.loc 1 898 0
 185 0086 184C     		ldr	r4, .L8+4	@ D.5530,
 186 0088 6B46     		mov	r3, sp	@ tmp207,
 187 008a 0733     		adds	r3, r3, #7	@ tmp186,
 188 008c 1B78     		ldrb	r3, [r3]	@ D.5528, IRQn
 189 008e 5BB2     		sxtb	r3, r3	@ D.5528, D.5528
 190 0090 9B08     		lsrs	r3, r3, #2	@ D.5528, D.5528,
 191 0092 1549     		ldr	r1, .L8+4	@ D.5530,
 192 0094 6A46     		mov	r2, sp	@ tmp208,
 193 0096 0732     		adds	r2, r2, #7	@ tmp187,
 194 0098 1278     		ldrb	r2, [r2]	@ D.5528, IRQn
 195 009a 52B2     		sxtb	r2, r2	@ D.5528, D.5528
 196 009c 9208     		lsrs	r2, r2, #2	@ D.5528, D.5528,
 197 009e C032     		adds	r2, r2, #192	@ tmp188,
 198 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 199 00a2 5258     		ldr	r2, [r2, r1]	@ D.5528, _38->IP
 200 00a4 6946     		mov	r1, sp	@ tmp209,
 201 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 202 00a8 0978     		ldrb	r1, [r1]	@ D.5527, IRQn
 203 00aa 0800     		movs	r0, r1	@ D.5528, D.5527
 204 00ac 0321     		movs	r1, #3	@ tmp191,
 205 00ae 0140     		ands	r1, r0	@ D.5528, D.5528
 206 00b0 C900     		lsls	r1, r1, #3	@ D.5528, D.5528,
 207 00b2 FF20     		movs	r0, #255	@ tmp192,
 208 00b4 8840     		lsls	r0, r0, r1	@ D.5529, D.5529, D.5528
 209 00b6 0100     		movs	r1, r0	@ D.5529, D.5529
 210 00b8 C943     		mvns	r1, r1	@ D.5529, D.5529
 211 00ba 1140     		ands	r1, r2	@ D.5528, D.5528
 899:./cmsis_core/core_cm0.h **** }
 212              		.loc 1 899 0
 213 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 214 00be 9201     		lsls	r2, r2, #6	@ D.5528, tmp193,
 215 00c0 FF20     		movs	r0, #255	@ tmp194,
 216 00c2 1040     		ands	r0, r2	@ D.5528, D.5528
 217 00c4 6A46     		mov	r2, sp	@ tmp211,
 218 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 219 00c8 1278     		ldrb	r2, [r2]	@ D.5527, IRQn
 220 00ca 1500     		movs	r5, r2	@ D.5528, D.5527
 221 00cc 0322     		movs	r2, #3	@ tmp196,
 222 00ce 2A40     		ands	r2, r5	@ D.5528, D.5528
 223 00d0 D200     		lsls	r2, r2, #3	@ D.5528, D.5528,
 224 00d2 9040     		lsls	r0, r0, r2	@ D.5528, D.5528, D.5528
 225 00d4 0200     		movs	r2, r0	@ D.5528, D.5528
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 226              		.loc 1 898 0
 227 00d6 0A43     		orrs	r2, r1	@ D.5528, D.5528
 228 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 229 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 230 00dc 1A51     		str	r2, [r3, r4]	@ D.5528, _35->IP
 231              	.L7:
 232              		.loc 1 900 0
 233 00de C046     		nop
 234 00e0 03B0     		add	sp, sp, #12	@,,
 235              		@ sp needed	@
 236 00e2 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccfZifSa.s 			page 21


 237              	.L9:
 238              		.align	2
 239              	.L8:
 240 00e4 00ED00E0 		.word	-536810240
 241 00e8 00E100E0 		.word	-536813312
 242              		.cfi_endproc
 243              	.LFE16:
 244              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 245              		.comm	ptx1,4,4
 246              		.comm	ptx1_pckt_index,4,4
 247              		.comm	prx1,4,4
 248              		.comm	ptx2,4,4
 249              		.comm	ptx2_pckt_index,4,4
 250              		.comm	prx2,4,4
 251              		.global	pckt_gps_ready
 252              		.section	.bss.pckt_gps_ready,"aw",%nobits
 253              		.type	pckt_gps_ready, %object
 254              		.size	pckt_gps_ready, 1
 255              	pckt_gps_ready:
 256 0000 00       		.space	1
 257              		.global	usart_mode
 258              		.section	.data.usart_mode,"aw",%progbits
 259              		.type	usart_mode, %object
 260              		.size	usart_mode, 1
 261              	usart_mode:
 262 0000 01       		.byte	1
 263              		.section	.text.Usart1Mode,"ax",%progbits
 264              		.align	2
 265              		.global	Usart1Mode
 266              		.code	16
 267              		.thumb_func
 268              		.type	Usart1Mode, %function
 269              	Usart1Mode:
 270              	.LFB20:
 271              		.file 2 "src/uart.c"
   1:src/uart.c    **** /**
   2:src/uart.c    ****   ******************************************************************************
   3:src/uart.c    ****   * @file    Template_2/stm32f0_uart.c
   4:src/uart.c    ****   * @author  Nahuel
   5:src/uart.c    ****   * @version V1.0
   6:src/uart.c    ****   * @date    22-August-2014
   7:src/uart.c    ****   * @brief   UART functions.
   8:src/uart.c    ****   ******************************************************************************
   9:src/uart.c    ****   * @attention
  10:src/uart.c    ****   *
  11:src/uart.c    ****   * Use this functions to configure serial comunication interface (UART).
  12:src/uart.c    ****   *
  13:src/uart.c    ****   ******************************************************************************
  14:src/uart.c    ****   */
  15:src/uart.c    **** 
  16:src/uart.c    **** /* Includes ------------------------------------------------------------------*/
  17:src/uart.c    **** #include "hard.h"
  18:src/uart.c    **** #include "stm32f0xx.h"
  19:src/uart.c    **** #include "uart.h"
  20:src/uart.c    **** 
  21:src/uart.c    **** #include "gps_vktel.h"
  22:src/uart.c    **** 
ARM GAS  /tmp/ccfZifSa.s 			page 22


  23:src/uart.c    **** #include <string.h>
  24:src/uart.c    **** 
  25:src/uart.c    **** 
  26:src/uart.c    **** 
  27:src/uart.c    **** 
  28:src/uart.c    **** //--- Private typedef ---//
  29:src/uart.c    **** //--- Private define ---//
  30:src/uart.c    **** //--- Private macro ---//
  31:src/uart.c    **** 
  32:src/uart.c    **** //#define USE_USARTx_TIMEOUT
  33:src/uart.c    **** 
  34:src/uart.c    **** 
  35:src/uart.c    **** 
  36:src/uart.c    **** //--- Externals variables ---//
  37:src/uart.c    **** 
  38:src/uart.c    **** //--- Externals del GPS ---//
  39:src/uart.c    **** extern volatile unsigned char usart1_mini_timeout;
  40:src/uart.c    **** extern volatile unsigned char usart1_pckt_ready;
  41:src/uart.c    **** extern volatile unsigned char usart1_have_data;
  42:src/uart.c    **** 
  43:src/uart.c    **** #ifdef USE_GSM_GATEWAY
  44:src/uart.c    **** extern volatile unsigned char usart2_mini_timeout;
  45:src/uart.c    **** extern volatile unsigned char usart2_pckt_ready;
  46:src/uart.c    **** extern volatile unsigned char usart2_have_data;
  47:src/uart.c    **** #endif
  48:src/uart.c    **** 
  49:src/uart.c    **** //#define data512		data1		//en rx es la trama recibida; en tx es la trama a enviar
  50:src/uart.c    **** //#define data256		data		//en rx son los valores del channel elegido
  51:src/uart.c    **** //volatile unsigned char * pdmx;
  52:src/uart.c    **** 
  53:src/uart.c    **** extern volatile unsigned char tx1buff[];
  54:src/uart.c    **** extern volatile unsigned char rx1buff[];
  55:src/uart.c    **** 
  56:src/uart.c    **** extern volatile unsigned char tx2buff[];
  57:src/uart.c    **** extern volatile unsigned char rx2buff[];
  58:src/uart.c    **** 
  59:src/uart.c    **** //--- Private variables ---//
  60:src/uart.c    **** volatile unsigned char * ptx1;
  61:src/uart.c    **** volatile unsigned char * ptx1_pckt_index;
  62:src/uart.c    **** volatile unsigned char * prx1;
  63:src/uart.c    **** 
  64:src/uart.c    **** volatile unsigned char * ptx2;
  65:src/uart.c    **** volatile unsigned char * ptx2_pckt_index;
  66:src/uart.c    **** volatile unsigned char * prx2;
  67:src/uart.c    **** 
  68:src/uart.c    **** volatile unsigned char pckt_gps_ready = 0;
  69:src/uart.c    **** volatile unsigned char usart_mode = USART_GPS_MODE;
  70:src/uart.c    **** 
  71:src/uart.c    **** //Reception buffer.
  72:src/uart.c    **** 
  73:src/uart.c    **** //Transmission buffer.
  74:src/uart.c    **** 
  75:src/uart.c    **** //--- Private function prototypes ---//
  76:src/uart.c    **** //--- Private functions ---//
  77:src/uart.c    **** 
  78:src/uart.c    **** //cambio de modo al USART del GPS al GSM
  79:src/uart.c    **** //le paso el modo o le pregunto
ARM GAS  /tmp/ccfZifSa.s 			page 23


  80:src/uart.c    **** //responde modo
  81:src/uart.c    **** unsigned char Usart1Mode (unsigned char new_mode)
  82:src/uart.c    **** {
 272              		.loc 2 82 0
 273              		.cfi_startproc
 274 0000 84B0     		sub	sp, sp, #16	@,,
 275              	.LCFI3:
 276              		.cfi_def_cfa_offset 16
 277 0002 0200     		movs	r2, r0	@ tmp142, new_mode
 278 0004 6B46     		mov	r3, sp	@ tmp202,
 279 0006 0733     		adds	r3, r3, #7	@ tmp143,
 280 0008 1A70     		strb	r2, [r3]	@ tmp144, new_mode
  83:src/uart.c    **** 	unsigned int temp_int;
  84:src/uart.c    **** 	unsigned int temp_gpio;
  85:src/uart.c    **** 
  86:src/uart.c    **** 	temp_int = USART1->CR1;
 281              		.loc 2 86 0
 282 000a 3A4B     		ldr	r3, .L14	@ D.5531,
 283 000c 1B68     		ldr	r3, [r3]	@ tmp145, _3->CR1
 284 000e 0393     		str	r3, [sp, #12]	@ tmp145, temp_int
  87:src/uart.c    **** 	USART1->CR1 &= 0xFFFFFF6F;		//limpio flags IE
 285              		.loc 2 87 0
 286 0010 384B     		ldr	r3, .L14	@ D.5531,
 287 0012 384A     		ldr	r2, .L14	@ D.5531,
 288 0014 1268     		ldr	r2, [r2]	@ D.5532, _7->CR1
 289 0016 9021     		movs	r1, #144	@ tmp146,
 290 0018 8A43     		bics	r2, r1	@ D.5532, tmp146
 291 001a 1A60     		str	r2, [r3]	@ D.5532, _6->CR1
  88:src/uart.c    **** 
  89:src/uart.c    **** 	if (new_mode == USART_GPS_MODE)
 292              		.loc 2 89 0
 293 001c 6B46     		mov	r3, sp	@ tmp203,
 294 001e 0733     		adds	r3, r3, #7	@ tmp147,
 295 0020 1B78     		ldrb	r3, [r3]	@ tmp148, new_mode
 296 0022 012B     		cmp	r3, #1	@ tmp148,
 297 0024 2BD1     		bne	.L11	@,
  90:src/uart.c    **** 	{
  91:src/uart.c    **** 		//config gpio A to Input
  92:src/uart.c    **** 		temp_gpio = GPIOA->MODER;		//2 bits por pin
 298              		.loc 2 92 0
 299 0026 9023     		movs	r3, #144	@ tmp197,
 300 0028 DB05     		lsls	r3, r3, #23	@ D.5533, tmp197,
 301 002a 1B68     		ldr	r3, [r3]	@ tmp149, _12->MODER
 302 002c 0293     		str	r3, [sp, #8]	@ tmp149, temp_gpio
  93:src/uart.c    **** 		temp_gpio &= 0xFFC3FFFF;		//PA9 PA10 input
 303              		.loc 2 93 0
 304 002e 029B     		ldr	r3, [sp, #8]	@ tmp151, temp_gpio
 305 0030 314A     		ldr	r2, .L14+4	@ tmp152,
 306 0032 1340     		ands	r3, r2	@ tmp150, tmp152
 307 0034 0293     		str	r3, [sp, #8]	@ tmp150, temp_gpio
  94:src/uart.c    **** 		temp_gpio |= 0x00000000;		//
  95:src/uart.c    **** 		GPIOA->MODER = temp_gpio;
 308              		.loc 2 95 0
 309 0036 9023     		movs	r3, #144	@ tmp198,
 310 0038 DB05     		lsls	r3, r3, #23	@ D.5533, tmp198,
 311 003a 029A     		ldr	r2, [sp, #8]	@ tmp153, temp_gpio
 312 003c 1A60     		str	r2, [r3]	@ tmp153, _16->MODER
ARM GAS  /tmp/ccfZifSa.s 			page 24


  96:src/uart.c    **** 
  97:src/uart.c    **** 		GPIOA->AFR[1] &= 0xFFFFF00F;	//PA9 -> AF0 A10 -> AF0
 313              		.loc 2 97 0
 314 003e 9023     		movs	r3, #144	@ tmp199,
 315 0040 DB05     		lsls	r3, r3, #23	@ D.5533, tmp199,
 316 0042 9022     		movs	r2, #144	@ tmp200,
 317 0044 D205     		lsls	r2, r2, #23	@ D.5533, tmp200,
 318 0046 526A     		ldr	r2, [r2, #36]	@ D.5532, _19->AFR
 319 0048 2C49     		ldr	r1, .L14+8	@ tmp154,
 320 004a 0A40     		ands	r2, r1	@ D.5532, tmp154
 321 004c 5A62     		str	r2, [r3, #36]	@ D.5532, _18->AFR
  98:src/uart.c    **** 
  99:src/uart.c    **** 		//config gpio B to Alternative
 100:src/uart.c    **** 		temp_gpio = GPIOB->MODER;		//2 bits por pin
 322              		.loc 2 100 0
 323 004e 2C4B     		ldr	r3, .L14+12	@ D.5533,
 324 0050 1B68     		ldr	r3, [r3]	@ tmp155, _23->MODER
 325 0052 0293     		str	r3, [sp, #8]	@ tmp155, temp_gpio
 101:src/uart.c    **** 		temp_gpio &= 0xFFFF0FFF;		//PB6 PB7 alternative
 326              		.loc 2 101 0
 327 0054 029B     		ldr	r3, [sp, #8]	@ tmp157, temp_gpio
 328 0056 2B4A     		ldr	r2, .L14+16	@ tmp158,
 329 0058 1340     		ands	r3, r2	@ tmp156, tmp158
 330 005a 0293     		str	r3, [sp, #8]	@ tmp156, temp_gpio
 102:src/uart.c    **** 		temp_gpio |= 0x0000A000;		//
 331              		.loc 2 102 0
 332 005c 029B     		ldr	r3, [sp, #8]	@ tmp160, temp_gpio
 333 005e A022     		movs	r2, #160	@ tmp201,
 334 0060 1202     		lsls	r2, r2, #8	@ tmp161, tmp201,
 335 0062 1343     		orrs	r3, r2	@ tmp159, tmp161
 336 0064 0293     		str	r3, [sp, #8]	@ tmp159, temp_gpio
 103:src/uart.c    **** 		GPIOB->MODER = temp_gpio;
 337              		.loc 2 103 0
 338 0066 264B     		ldr	r3, .L14+12	@ D.5533,
 339 0068 029A     		ldr	r2, [sp, #8]	@ tmp162, temp_gpio
 340 006a 1A60     		str	r2, [r3]	@ tmp162, _27->MODER
 104:src/uart.c    **** 
 105:src/uart.c    **** 		GPIOB->AFR[0] &= 0x00FFFFFF;	//PB7 -> AF0 PB6 -> AF0
 341              		.loc 2 105 0
 342 006c 244B     		ldr	r3, .L14+12	@ D.5533,
 343 006e 244A     		ldr	r2, .L14+12	@ D.5533,
 344 0070 126A     		ldr	r2, [r2, #32]	@ D.5532, _30->AFR
 345 0072 1202     		lsls	r2, r2, #8	@ tmp163, D.5532,
 346 0074 120A     		lsrs	r2, r2, #8	@ D.5532, tmp163,
 347 0076 1A62     		str	r2, [r3, #32]	@ D.5532, _29->AFR
 106:src/uart.c    **** 
 107:src/uart.c    **** 		usart_mode = USART_GPS_MODE;
 348              		.loc 2 107 0
 349 0078 234B     		ldr	r3, .L14+20	@ tmp164,
 350 007a 0122     		movs	r2, #1	@ tmp165,
 351 007c 1A70     		strb	r2, [r3]	@ tmp166, usart_mode
 352              	.L11:
 108:src/uart.c    **** 	}
 109:src/uart.c    **** 
 110:src/uart.c    **** 	if (new_mode == USART_GSM_MODE)
 353              		.loc 2 110 0
 354 007e 6B46     		mov	r3, sp	@ tmp204,
ARM GAS  /tmp/ccfZifSa.s 			page 25


 355 0080 0733     		adds	r3, r3, #7	@ tmp167,
 356 0082 1B78     		ldrb	r3, [r3]	@ tmp168, new_mode
 357 0084 022B     		cmp	r3, #2	@ tmp168,
 358 0086 2CD1     		bne	.L12	@,
 111:src/uart.c    **** 	{
 112:src/uart.c    **** 		//config gpio B to Input
 113:src/uart.c    **** 		temp_gpio = GPIOB->MODER;		//2 bits por pin
 359              		.loc 2 113 0
 360 0088 1D4B     		ldr	r3, .L14+12	@ D.5533,
 361 008a 1B68     		ldr	r3, [r3]	@ tmp169, _35->MODER
 362 008c 0293     		str	r3, [sp, #8]	@ tmp169, temp_gpio
 114:src/uart.c    **** 		temp_gpio &= 0xFFFF0FFF;		//PB6 PB7 input
 363              		.loc 2 114 0
 364 008e 029B     		ldr	r3, [sp, #8]	@ tmp171, temp_gpio
 365 0090 1C4A     		ldr	r2, .L14+16	@ tmp172,
 366 0092 1340     		ands	r3, r2	@ tmp170, tmp172
 367 0094 0293     		str	r3, [sp, #8]	@ tmp170, temp_gpio
 115:src/uart.c    **** 		temp_gpio |= 0x00000000;		//
 116:src/uart.c    **** 		GPIOB->MODER = temp_gpio;
 368              		.loc 2 116 0
 369 0096 1A4B     		ldr	r3, .L14+12	@ D.5533,
 370 0098 029A     		ldr	r2, [sp, #8]	@ tmp173, temp_gpio
 371 009a 1A60     		str	r2, [r3]	@ tmp173, _39->MODER
 117:src/uart.c    **** 
 118:src/uart.c    **** 		GPIOB->AFR[0] &= 0x00FFFFFF;	//PB7 -> AF0 PB6 -> AF0
 372              		.loc 2 118 0
 373 009c 184B     		ldr	r3, .L14+12	@ D.5533,
 374 009e 184A     		ldr	r2, .L14+12	@ D.5533,
 375 00a0 126A     		ldr	r2, [r2, #32]	@ D.5532, _42->AFR
 376 00a2 1202     		lsls	r2, r2, #8	@ tmp174, D.5532,
 377 00a4 120A     		lsrs	r2, r2, #8	@ D.5532, tmp174,
 378 00a6 1A62     		str	r2, [r3, #32]	@ D.5532, _41->AFR
 119:src/uart.c    **** 
 120:src/uart.c    **** 		//config gpio A to Alternative
 121:src/uart.c    **** 		temp_gpio = GPIOA->MODER;		//2 bits por pin
 379              		.loc 2 121 0
 380 00a8 9023     		movs	r3, #144	@ tmp191,
 381 00aa DB05     		lsls	r3, r3, #23	@ D.5533, tmp191,
 382 00ac 1B68     		ldr	r3, [r3]	@ tmp175, _46->MODER
 383 00ae 0293     		str	r3, [sp, #8]	@ tmp175, temp_gpio
 122:src/uart.c    **** 		temp_gpio &= 0xFFC3FFFF;		//PA9 PA10 alternative
 384              		.loc 2 122 0
 385 00b0 029B     		ldr	r3, [sp, #8]	@ tmp177, temp_gpio
 386 00b2 114A     		ldr	r2, .L14+4	@ tmp178,
 387 00b4 1340     		ands	r3, r2	@ tmp176, tmp178
 388 00b6 0293     		str	r3, [sp, #8]	@ tmp176, temp_gpio
 123:src/uart.c    **** 		temp_gpio |= 0x00280000;		//
 389              		.loc 2 123 0
 390 00b8 029B     		ldr	r3, [sp, #8]	@ tmp180, temp_gpio
 391 00ba A022     		movs	r2, #160	@ tmp192,
 392 00bc 9203     		lsls	r2, r2, #14	@ tmp181, tmp192,
 393 00be 1343     		orrs	r3, r2	@ tmp179, tmp181
 394 00c0 0293     		str	r3, [sp, #8]	@ tmp179, temp_gpio
 124:src/uart.c    **** 		GPIOA->MODER = temp_gpio;
 395              		.loc 2 124 0
 396 00c2 9023     		movs	r3, #144	@ tmp193,
 397 00c4 DB05     		lsls	r3, r3, #23	@ D.5533, tmp193,
ARM GAS  /tmp/ccfZifSa.s 			page 26


 398 00c6 029A     		ldr	r2, [sp, #8]	@ tmp182, temp_gpio
 399 00c8 1A60     		str	r2, [r3]	@ tmp182, _50->MODER
 125:src/uart.c    **** 
 126:src/uart.c    **** 		GPIOA->AFR[1] |= 0x00000110;	//PA10 -> AF1 PA9 -> AF1
 400              		.loc 2 126 0
 401 00ca 9023     		movs	r3, #144	@ tmp194,
 402 00cc DB05     		lsls	r3, r3, #23	@ D.5533, tmp194,
 403 00ce 9022     		movs	r2, #144	@ tmp195,
 404 00d0 D205     		lsls	r2, r2, #23	@ D.5533, tmp195,
 405 00d2 526A     		ldr	r2, [r2, #36]	@ D.5532, _53->AFR
 406 00d4 8821     		movs	r1, #136	@ tmp196,
 407 00d6 4900     		lsls	r1, r1, #1	@ tmp183, tmp196,
 408 00d8 0A43     		orrs	r2, r1	@ D.5532, tmp183
 409 00da 5A62     		str	r2, [r3, #36]	@ D.5532, _52->AFR
 127:src/uart.c    **** 
 128:src/uart.c    **** 		usart_mode = USART_GSM_MODE;
 410              		.loc 2 128 0
 411 00dc 0A4B     		ldr	r3, .L14+20	@ tmp184,
 412 00de 0222     		movs	r2, #2	@ tmp185,
 413 00e0 1A70     		strb	r2, [r3]	@ tmp186, usart_mode
 414              	.L12:
 129:src/uart.c    **** 	}
 130:src/uart.c    **** 
 131:src/uart.c    **** 	USART1->CR1 = temp_int;
 415              		.loc 2 131 0
 416 00e2 044B     		ldr	r3, .L14	@ D.5531,
 417 00e4 039A     		ldr	r2, [sp, #12]	@ tmp187, temp_int
 418 00e6 1A60     		str	r2, [r3]	@ tmp187, _58->CR1
 132:src/uart.c    **** 	return usart_mode;
 419              		.loc 2 132 0
 420 00e8 074B     		ldr	r3, .L14+20	@ tmp188,
 421 00ea 1B78     		ldrb	r3, [r3]	@ tmp189, usart_mode
 422 00ec DBB2     		uxtb	r3, r3	@ D.5534, tmp189
 133:src/uart.c    **** }
 423              		.loc 2 133 0
 424 00ee 1800     		movs	r0, r3	@, <retval>
 425 00f0 04B0     		add	sp, sp, #16	@,,
 426              		@ sp needed	@
 427 00f2 7047     		bx	lr
 428              	.L15:
 429              		.align	2
 430              	.L14:
 431 00f4 00380140 		.word	1073821696
 432 00f8 FFFFC3FF 		.word	-3932161
 433 00fc 0FF0FFFF 		.word	-4081
 434 0100 00040048 		.word	1207960576
 435 0104 FF0FFFFF 		.word	-61441
 436 0108 00000000 		.word	usart_mode
 437              		.cfi_endproc
 438              	.LFE20:
 439              		.size	Usart1Mode, .-Usart1Mode
 440              		.section	.text.ReadUsart1Buffer,"ax",%progbits
 441              		.align	2
 442              		.global	ReadUsart1Buffer
 443              		.code	16
 444              		.thumb_func
 445              		.type	ReadUsart1Buffer, %function
ARM GAS  /tmp/ccfZifSa.s 			page 27


 446              	ReadUsart1Buffer:
 447              	.LFB21:
 134:src/uart.c    **** 
 135:src/uart.c    **** unsigned char ReadUsart1Buffer (unsigned char * bout, unsigned short max_len)
 136:src/uart.c    **** {
 448              		.loc 2 136 0
 449              		.cfi_startproc
 450 0000 00B5     		push	{lr}	@
 451              	.LCFI4:
 452              		.cfi_def_cfa_offset 4
 453              		.cfi_offset 14, -4
 454 0002 85B0     		sub	sp, sp, #20	@,,
 455              	.LCFI5:
 456              		.cfi_def_cfa_offset 24
 457 0004 0190     		str	r0, [sp, #4]	@ bout, bout
 458 0006 0A00     		movs	r2, r1	@ tmp120, max_len
 459 0008 6B46     		mov	r3, sp	@ tmp146,
 460 000a 0233     		adds	r3, r3, #2	@ tmp121,
 461 000c 1A80     		strh	r2, [r3]	@ tmp122, max_len
 137:src/uart.c    **** 	unsigned int len;
 138:src/uart.c    **** 
 139:src/uart.c    **** 	len = prx1 - rx1buff;
 462              		.loc 2 139 0
 463 000e 184B     		ldr	r3, .L20	@ tmp123,
 464 0010 1B68     		ldr	r3, [r3]	@ D.5535, prx1
 465 0012 1A00     		movs	r2, r3	@ D.5536, D.5535
 466 0014 174B     		ldr	r3, .L20+4	@ D.5536,
 467 0016 D31A     		subs	r3, r2, r3	@ D.5536, D.5536, D.5536
 468 0018 0393     		str	r3, [sp, #12]	@ D.5536, len
 140:src/uart.c    **** 
 141:src/uart.c    **** 	if (len < max_len)
 469              		.loc 2 141 0
 470 001a 6B46     		mov	r3, sp	@ tmp147,
 471 001c 0233     		adds	r3, r3, #2	@ tmp124,
 472 001e 1A88     		ldrh	r2, [r3]	@ D.5537, max_len
 473 0020 039B     		ldr	r3, [sp, #12]	@ tmp125, len
 474 0022 9A42     		cmp	r2, r3	@ D.5537, tmp125
 475 0024 12D9     		bls	.L17	@,
 142:src/uart.c    **** 	{
 143:src/uart.c    **** 		//el prx1 siempre llega adelantado desde la int, lo corto con un 0
 144:src/uart.c    **** 		*prx1 = '\0';
 476              		.loc 2 144 0
 477 0026 124B     		ldr	r3, .L20	@ tmp126,
 478 0028 1B68     		ldr	r3, [r3]	@ D.5535, prx1
 479 002a 0022     		movs	r2, #0	@ tmp127,
 480 002c 1A70     		strb	r2, [r3]	@ tmp128, *_11
 145:src/uart.c    **** 		prx1++;
 481              		.loc 2 145 0
 482 002e 104B     		ldr	r3, .L20	@ tmp129,
 483 0030 1B68     		ldr	r3, [r3]	@ D.5535, prx1
 484 0032 5A1C     		adds	r2, r3, #1	@ D.5535, D.5535,
 485 0034 0E4B     		ldr	r3, .L20	@ tmp130,
 486 0036 1A60     		str	r2, [r3]	@ D.5535, prx1
 146:src/uart.c    **** 		len += 1;
 487              		.loc 2 146 0
 488 0038 039B     		ldr	r3, [sp, #12]	@ tmp132, len
 489 003a 0133     		adds	r3, r3, #1	@ tmp131,
ARM GAS  /tmp/ccfZifSa.s 			page 28


 490 003c 0393     		str	r3, [sp, #12]	@ tmp131, len
 147:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx1buff, len);
 491              		.loc 2 147 0
 492 003e 039A     		ldr	r2, [sp, #12]	@ tmp133, len
 493 0040 0C49     		ldr	r1, .L20+4	@ tmp134,
 494 0042 019B     		ldr	r3, [sp, #4]	@ tmp135, bout
 495 0044 1800     		movs	r0, r3	@, tmp135
 496 0046 FFF7FEFF 		bl	memcpy	@
 497 004a 09E0     		b	.L18	@
 498              	.L17:
 148:src/uart.c    **** 	}
 149:src/uart.c    **** 	else
 150:src/uart.c    **** 	{
 151:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx1buff, len);
 499              		.loc 2 151 0
 500 004c 039A     		ldr	r2, [sp, #12]	@ tmp136, len
 501 004e 0949     		ldr	r1, .L20+4	@ tmp137,
 502 0050 019B     		ldr	r3, [sp, #4]	@ tmp138, bout
 503 0052 1800     		movs	r0, r3	@, tmp138
 504 0054 FFF7FEFF 		bl	memcpy	@
 152:src/uart.c    **** 		len = max_len;
 505              		.loc 2 152 0
 506 0058 6B46     		mov	r3, sp	@ tmp148,
 507 005a 0233     		adds	r3, r3, #2	@ tmp139,
 508 005c 1B88     		ldrh	r3, [r3]	@ tmp140, max_len
 509 005e 0393     		str	r3, [sp, #12]	@ tmp140, len
 510              	.L18:
 153:src/uart.c    **** 	}
 154:src/uart.c    **** 
 155:src/uart.c    **** 	//ajusto punteros de rx luego de la copia
 156:src/uart.c    **** 	prx1 = rx1buff;
 511              		.loc 2 156 0
 512 0060 034B     		ldr	r3, .L20	@ tmp141,
 513 0062 044A     		ldr	r2, .L20+4	@ tmp142,
 514 0064 1A60     		str	r2, [r3]	@ tmp142, prx1
 157:src/uart.c    **** 
 158:src/uart.c    **** 	return (unsigned char) len;
 515              		.loc 2 158 0
 516 0066 039B     		ldr	r3, [sp, #12]	@ tmp144, len
 517 0068 DBB2     		uxtb	r3, r3	@ D.5538, tmp143
 159:src/uart.c    **** }
 518              		.loc 2 159 0
 519 006a 1800     		movs	r0, r3	@, <retval>
 520 006c 05B0     		add	sp, sp, #20	@,,
 521              		@ sp needed	@
 522 006e 00BD     		pop	{pc}
 523              	.L21:
 524              		.align	2
 525              	.L20:
 526 0070 00000000 		.word	prx1
 527 0074 00000000 		.word	rx1buff
 528              		.cfi_endproc
 529              	.LFE21:
 530              		.size	ReadUsart1Buffer, .-ReadUsart1Buffer
 531              		.section	.text.USART1_IRQHandler,"ax",%progbits
 532              		.align	2
 533              		.global	USART1_IRQHandler
ARM GAS  /tmp/ccfZifSa.s 			page 29


 534              		.code	16
 535              		.thumb_func
 536              		.type	USART1_IRQHandler, %function
 537              	USART1_IRQHandler:
 538              	.LFB22:
 160:src/uart.c    **** 
 161:src/uart.c    **** void USART1_IRQHandler(void)
 162:src/uart.c    **** {
 539              		.loc 2 162 0
 540              		.cfi_startproc
 541 0000 82B0     		sub	sp, sp, #8	@,,
 542              	.LCFI6:
 543              		.cfi_def_cfa_offset 8
 163:src/uart.c    **** 	unsigned char dummy;
 164:src/uart.c    **** 
 165:src/uart.c    **** 	/* USART in mode Receiver --------------------------------------------------*/
 166:src/uart.c    **** 	if (USART1->ISR & USART_ISR_RXNE)
 544              		.loc 2 166 0
 545 0002 3B4B     		ldr	r3, .L31	@ D.5539,
 546 0004 DB69     		ldr	r3, [r3, #28]	@ D.5540, _5->ISR
 547 0006 2022     		movs	r2, #32	@ tmp155,
 548 0008 1340     		ands	r3, r2	@ D.5540, tmp155
 549 000a 25D0     		beq	.L23	@,
 167:src/uart.c    **** 	{
 168:src/uart.c    **** 		dummy = USART1->RDR & 0x0FF;
 550              		.loc 2 168 0
 551 000c 384B     		ldr	r3, .L31	@ D.5539,
 552 000e 9B8C     		ldrh	r3, [r3, #36]	@ tmp157,
 553 0010 9AB2     		uxth	r2, r3	@ D.5541, tmp157
 554 0012 6B46     		mov	r3, sp	@ tmp201,
 555 0014 0733     		adds	r3, r3, #7	@ tmp158,
 556 0016 1A70     		strb	r2, [r3]	@ tmp159, dummy
 169:src/uart.c    **** 
 170:src/uart.c    **** 		//RX GPS & GSM
 171:src/uart.c    **** 		if ((usart_mode == USART_GPS_MODE) || (usart_mode == USART_GSM_MODE))
 557              		.loc 2 171 0
 558 0018 364B     		ldr	r3, .L31+4	@ tmp160,
 559 001a 1B78     		ldrb	r3, [r3]	@ tmp161, usart_mode
 560 001c DBB2     		uxtb	r3, r3	@ D.5542, tmp161
 561 001e 012B     		cmp	r3, #1	@ D.5542,
 562 0020 04D0     		beq	.L24	@,
 563              		.loc 2 171 0 is_stmt 0 discriminator 1
 564 0022 344B     		ldr	r3, .L31+4	@ tmp162,
 565 0024 1B78     		ldrb	r3, [r3]	@ tmp163, usart_mode
 566 0026 DBB2     		uxtb	r3, r3	@ D.5542, tmp163
 567 0028 022B     		cmp	r3, #2	@ D.5542,
 568 002a 15D1     		bne	.L23	@,
 569              	.L24:
 172:src/uart.c    **** 		{
 173:src/uart.c    **** 			if (prx1 < &rx1buff[SIZEOF_DATA])
 570              		.loc 2 173 0 is_stmt 1
 571 002c 324B     		ldr	r3, .L31+8	@ tmp164,
 572 002e 1A68     		ldr	r2, [r3]	@ D.5543, prx1
 573 0030 324B     		ldr	r3, .L31+12	@ tmp165,
 574 0032 9A42     		cmp	r2, r3	@ D.5543, tmp165
 575 0034 0DD2     		bcs	.L25	@,
 174:src/uart.c    **** 			{
ARM GAS  /tmp/ccfZifSa.s 			page 30


 175:src/uart.c    **** 				*prx1 = dummy;
 576              		.loc 2 175 0
 577 0036 304B     		ldr	r3, .L31+8	@ tmp166,
 578 0038 1B68     		ldr	r3, [r3]	@ D.5543, prx1
 579 003a 6A46     		mov	r2, sp	@ tmp202,
 580 003c 0732     		adds	r2, r2, #7	@ tmp167,
 581 003e 1278     		ldrb	r2, [r2]	@ tmp168, dummy
 582 0040 1A70     		strb	r2, [r3]	@ tmp168, *_15
 176:src/uart.c    **** 				prx1++;
 583              		.loc 2 176 0
 584 0042 2D4B     		ldr	r3, .L31+8	@ tmp169,
 585 0044 1B68     		ldr	r3, [r3]	@ D.5543, prx1
 586 0046 5A1C     		adds	r2, r3, #1	@ D.5543, D.5543,
 587 0048 2B4B     		ldr	r3, .L31+8	@ tmp170,
 588 004a 1A60     		str	r2, [r3]	@ D.5543, prx1
 177:src/uart.c    **** 				usart1_have_data = 1;
 589              		.loc 2 177 0
 590 004c 2C4B     		ldr	r3, .L31+16	@ tmp171,
 591 004e 0122     		movs	r2, #1	@ tmp172,
 592 0050 1A70     		strb	r2, [r3]	@ tmp173, usart1_have_data
 593              	.L25:
 178:src/uart.c    **** 			}
 179:src/uart.c    **** 			usart1_mini_timeout = TT_GSM_MINI;
 594              		.loc 2 179 0
 595 0052 2C4B     		ldr	r3, .L31+20	@ tmp174,
 596 0054 0522     		movs	r2, #5	@ tmp175,
 597 0056 1A70     		strb	r2, [r3]	@ tmp176, usart1_mini_timeout
 598              	.L23:
 180:src/uart.c    **** 		}
 181:src/uart.c    **** 
 182:src/uart.c    **** //		//RX GSM
 183:src/uart.c    **** //		if (usart_mode == USART_GSM_MODE)
 184:src/uart.c    **** //		{
 185:src/uart.c    **** //			if (prx1 < &rx1buff[SIZEOF_DATA])
 186:src/uart.c    **** //			{
 187:src/uart.c    **** //				*prx1 = dummy;
 188:src/uart.c    **** //				prx1++;
 189:src/uart.c    **** //				gsm_have_data = 1;
 190:src/uart.c    **** //			}
 191:src/uart.c    **** //			gsm_mini_timeout = TT_GSM_MINI;
 192:src/uart.c    **** //		}
 193:src/uart.c    **** 	}
 194:src/uart.c    **** 
 195:src/uart.c    **** 	/* USART in mode Transmitter -------------------------------------------------*/
 196:src/uart.c    **** 
 197:src/uart.c    **** 	if (USART1->CR1 & USART_CR1_TXEIE)
 599              		.loc 2 197 0
 600 0058 254B     		ldr	r3, .L31	@ D.5539,
 601 005a 1B68     		ldr	r3, [r3]	@ D.5540, _22->CR1
 602 005c 8022     		movs	r2, #128	@ tmp177,
 603 005e 1340     		ands	r3, r2	@ D.5540, tmp177
 604 0060 28D0     		beq	.L26	@,
 198:src/uart.c    **** 	{
 199:src/uart.c    **** 		if (USART1->ISR & USART_ISR_TXE)
 605              		.loc 2 199 0
 606 0062 234B     		ldr	r3, .L31	@ D.5539,
 607 0064 DB69     		ldr	r3, [r3, #28]	@ D.5540, _25->ISR
ARM GAS  /tmp/ccfZifSa.s 			page 31


 608 0066 8022     		movs	r2, #128	@ tmp178,
 609 0068 1340     		ands	r3, r2	@ D.5540, tmp178
 610 006a 23D0     		beq	.L26	@,
 200:src/uart.c    **** 		{
 201:src/uart.c    **** 			if ((ptx1 < &tx1buff[SIZEOF_DATA]) && (ptx1 < ptx1_pckt_index))
 611              		.loc 2 201 0
 612 006c 264B     		ldr	r3, .L31+24	@ tmp179,
 613 006e 1A68     		ldr	r2, [r3]	@ D.5543, ptx1
 614 0070 264B     		ldr	r3, .L31+28	@ tmp180,
 615 0072 9A42     		cmp	r2, r3	@ D.5543, tmp180
 616 0074 12D2     		bcs	.L27	@,
 617              		.loc 2 201 0 is_stmt 0 discriminator 1
 618 0076 244B     		ldr	r3, .L31+24	@ tmp181,
 619 0078 1A68     		ldr	r2, [r3]	@ D.5543, ptx1
 620 007a 254B     		ldr	r3, .L31+32	@ tmp182,
 621 007c 1B68     		ldr	r3, [r3]	@ D.5543, ptx1_pckt_index
 622 007e 9A42     		cmp	r2, r3	@ D.5543, D.5543
 623 0080 0CD2     		bcs	.L27	@,
 202:src/uart.c    **** 			{
 203:src/uart.c    **** 				USART1->TDR = *ptx1;
 624              		.loc 2 203 0 is_stmt 1
 625 0082 1B4A     		ldr	r2, .L31	@ D.5539,
 626 0084 204B     		ldr	r3, .L31+24	@ tmp183,
 627 0086 1B68     		ldr	r3, [r3]	@ D.5543, ptx1
 628 0088 1B78     		ldrb	r3, [r3]	@ tmp184, *_32
 629 008a DBB2     		uxtb	r3, r3	@ D.5542, tmp184
 630 008c 9BB2     		uxth	r3, r3	@ D.5541, D.5542
 631 008e 1385     		strh	r3, [r2, #40]	@ tmp185, _31->TDR
 204:src/uart.c    **** 				ptx1++;
 632              		.loc 2 204 0
 633 0090 1D4B     		ldr	r3, .L31+24	@ tmp186,
 634 0092 1B68     		ldr	r3, [r3]	@ D.5543, ptx1
 635 0094 5A1C     		adds	r2, r3, #1	@ D.5543, D.5543,
 636 0096 1C4B     		ldr	r3, .L31+24	@ tmp187,
 637 0098 1A60     		str	r2, [r3]	@ D.5543, ptx1
 638 009a 0BE0     		b	.L26	@
 639              	.L27:
 205:src/uart.c    **** 			}
 206:src/uart.c    **** 			else
 207:src/uart.c    **** 			{
 208:src/uart.c    **** 				ptx1 = tx1buff;
 640              		.loc 2 208 0
 641 009c 1A4B     		ldr	r3, .L31+24	@ tmp188,
 642 009e 1D4A     		ldr	r2, .L31+36	@ tmp189,
 643 00a0 1A60     		str	r2, [r3]	@ tmp189, ptx1
 209:src/uart.c    **** 				ptx1_pckt_index = tx1buff;
 644              		.loc 2 209 0
 645 00a2 1B4B     		ldr	r3, .L31+32	@ tmp190,
 646 00a4 1B4A     		ldr	r2, .L31+36	@ tmp191,
 647 00a6 1A60     		str	r2, [r3]	@ tmp191, ptx1_pckt_index
 210:src/uart.c    **** 				USART1->CR1 &= ~USART_CR1_TXEIE;
 648              		.loc 2 210 0
 649 00a8 114B     		ldr	r3, .L31	@ D.5539,
 650 00aa 114A     		ldr	r2, .L31	@ D.5539,
 651 00ac 1268     		ldr	r2, [r2]	@ D.5540, _42->CR1
 652 00ae 8021     		movs	r1, #128	@ tmp192,
 653 00b0 8A43     		bics	r2, r1	@ D.5540, tmp192
ARM GAS  /tmp/ccfZifSa.s 			page 32


 654 00b2 1A60     		str	r2, [r3]	@ D.5540, _41->CR1
 655              	.L26:
 211:src/uart.c    **** 			}
 212:src/uart.c    **** 		}
 213:src/uart.c    **** 	}
 214:src/uart.c    **** 
 215:src/uart.c    **** 	if ((USART1->ISR & USART_ISR_ORE) || (USART1->ISR & USART_ISR_NE) || (USART1->ISR & USART_ISR_FE))
 656              		.loc 2 215 0
 657 00b4 0E4B     		ldr	r3, .L31	@ D.5539,
 658 00b6 DB69     		ldr	r3, [r3, #28]	@ D.5540, _46->ISR
 659 00b8 0822     		movs	r2, #8	@ tmp193,
 660 00ba 1340     		ands	r3, r2	@ D.5540, tmp193
 661 00bc 09D1     		bne	.L28	@,
 662              		.loc 2 215 0 is_stmt 0 discriminator 1
 663 00be 0C4B     		ldr	r3, .L31	@ D.5539,
 664 00c0 DB69     		ldr	r3, [r3, #28]	@ D.5540, _49->ISR
 665 00c2 0422     		movs	r2, #4	@ tmp194,
 666 00c4 1340     		ands	r3, r2	@ D.5540, tmp194
 667 00c6 04D1     		bne	.L28	@,
 668              		.loc 2 215 0 discriminator 2
 669 00c8 094B     		ldr	r3, .L31	@ D.5539,
 670 00ca DB69     		ldr	r3, [r3, #28]	@ D.5540, _52->ISR
 671 00cc 0222     		movs	r2, #2	@ tmp195,
 672 00ce 1340     		ands	r3, r2	@ D.5540, tmp195
 673 00d0 0BD0     		beq	.L30	@,
 674              	.L28:
 216:src/uart.c    **** 	{
 217:src/uart.c    **** 		USART1->ICR |= 0x0e;
 675              		.loc 2 217 0 is_stmt 1
 676 00d2 074B     		ldr	r3, .L31	@ D.5539,
 677 00d4 064A     		ldr	r2, .L31	@ D.5539,
 678 00d6 126A     		ldr	r2, [r2, #32]	@ D.5540, _56->ICR
 679 00d8 0E21     		movs	r1, #14	@ tmp196,
 680 00da 0A43     		orrs	r2, r1	@ D.5540, tmp196
 681 00dc 1A62     		str	r2, [r3, #32]	@ D.5540, _55->ICR
 218:src/uart.c    **** 		dummy = USART1->RDR;
 682              		.loc 2 218 0
 683 00de 044B     		ldr	r3, .L31	@ D.5539,
 684 00e0 9B8C     		ldrh	r3, [r3, #36]	@ tmp198,
 685 00e2 9AB2     		uxth	r2, r3	@ D.5541, tmp198
 686 00e4 6B46     		mov	r3, sp	@ tmp203,
 687 00e6 0733     		adds	r3, r3, #7	@ tmp199,
 688 00e8 1A70     		strb	r2, [r3]	@ tmp200, dummy
 689              	.L30:
 219:src/uart.c    **** 	}
 220:src/uart.c    **** }
 690              		.loc 2 220 0
 691 00ea C046     		nop
 692 00ec 02B0     		add	sp, sp, #8	@,,
 693              		@ sp needed	@
 694 00ee 7047     		bx	lr
 695              	.L32:
 696              		.align	2
 697              	.L31:
 698 00f0 00380140 		.word	1073821696
 699 00f4 00000000 		.word	usart_mode
 700 00f8 00000000 		.word	prx1
ARM GAS  /tmp/ccfZifSa.s 			page 33


 701 00fc 00010000 		.word	rx1buff+256
 702 0100 00000000 		.word	usart1_have_data
 703 0104 00000000 		.word	usart1_mini_timeout
 704 0108 00000000 		.word	ptx1
 705 010c 00010000 		.word	tx1buff+256
 706 0110 00000000 		.word	ptx1_pckt_index
 707 0114 00000000 		.word	tx1buff
 708              		.cfi_endproc
 709              	.LFE22:
 710              		.size	USART1_IRQHandler, .-USART1_IRQHandler
 711              		.section	.text.USART2_IRQHandler,"ax",%progbits
 712              		.align	2
 713              		.global	USART2_IRQHandler
 714              		.code	16
 715              		.thumb_func
 716              		.type	USART2_IRQHandler, %function
 717              	USART2_IRQHandler:
 718              	.LFB23:
 221:src/uart.c    **** 
 222:src/uart.c    **** void USART2_IRQHandler(void)
 223:src/uart.c    **** {
 719              		.loc 2 223 0
 720              		.cfi_startproc
 721 0000 82B0     		sub	sp, sp, #8	@,,
 722              	.LCFI7:
 723              		.cfi_def_cfa_offset 8
 224:src/uart.c    **** 	unsigned char dummy;
 225:src/uart.c    **** 
 226:src/uart.c    **** 	/* USART in mode Receiver --------------------------------------------------*/
 227:src/uart.c    **** 	if (USART2->ISR & USART_ISR_RXNE)
 724              		.loc 2 227 0
 725 0002 2B4B     		ldr	r3, .L40	@ D.5544,
 726 0004 DB69     		ldr	r3, [r3, #28]	@ D.5545, _3->ISR
 727 0006 2022     		movs	r2, #32	@ tmp149,
 728 0008 1340     		ands	r3, r2	@ D.5545, tmp149
 729 000a 05D0     		beq	.L34	@,
 228:src/uart.c    **** 	{
 229:src/uart.c    **** 		//RX WIFI
 230:src/uart.c    **** 		dummy = USART2->RDR & 0x0FF;
 730              		.loc 2 230 0
 731 000c 284B     		ldr	r3, .L40	@ D.5544,
 732 000e 9B8C     		ldrh	r3, [r3, #36]	@ tmp151,
 733 0010 9AB2     		uxth	r2, r3	@ D.5546, tmp151
 734 0012 6B46     		mov	r3, sp	@ tmp178,
 735 0014 0733     		adds	r3, r3, #7	@ tmp152,
 736 0016 1A70     		strb	r2, [r3]	@ tmp153, dummy
 737              	.L34:
 231:src/uart.c    **** 
 232:src/uart.c    **** #ifdef USE_GSM_GATEWAY
 233:src/uart.c    **** 		if (prx2 < &rx2buff[SIZEOF_DATA])
 234:src/uart.c    **** 		{
 235:src/uart.c    **** 			*prx2 = dummy;
 236:src/uart.c    **** 			prx2++;
 237:src/uart.c    **** 			usart2_have_data = 1;
 238:src/uart.c    **** 		}
 239:src/uart.c    **** 			usart2_mini_timeout = TT_GPS_MINI;
 240:src/uart.c    **** #endif
ARM GAS  /tmp/ccfZifSa.s 			page 34


 241:src/uart.c    **** 
 242:src/uart.c    **** 	}
 243:src/uart.c    **** 
 244:src/uart.c    **** 	/* USART in mode Transmitter -------------------------------------------------*/
 245:src/uart.c    **** 
 246:src/uart.c    **** 	if (USART2->CR1 & USART_CR1_TXEIE)
 738              		.loc 2 246 0
 739 0018 254B     		ldr	r3, .L40	@ D.5544,
 740 001a 1B68     		ldr	r3, [r3]	@ D.5545, _10->CR1
 741 001c 8022     		movs	r2, #128	@ tmp154,
 742 001e 1340     		ands	r3, r2	@ D.5545, tmp154
 743 0020 28D0     		beq	.L35	@,
 247:src/uart.c    **** 	{
 248:src/uart.c    **** 		if (USART2->ISR & USART_ISR_TXE)
 744              		.loc 2 248 0
 745 0022 234B     		ldr	r3, .L40	@ D.5544,
 746 0024 DB69     		ldr	r3, [r3, #28]	@ D.5545, _13->ISR
 747 0026 8022     		movs	r2, #128	@ tmp155,
 748 0028 1340     		ands	r3, r2	@ D.5545, tmp155
 749 002a 23D0     		beq	.L35	@,
 249:src/uart.c    **** 		{
 250:src/uart.c    **** 			if ((ptx2 < &tx2buff[SIZEOF_DATA]) && (ptx2 < ptx2_pckt_index))
 750              		.loc 2 250 0
 751 002c 214B     		ldr	r3, .L40+4	@ tmp156,
 752 002e 1A68     		ldr	r2, [r3]	@ D.5547, ptx2
 753 0030 214B     		ldr	r3, .L40+8	@ tmp157,
 754 0032 9A42     		cmp	r2, r3	@ D.5547, tmp157
 755 0034 12D2     		bcs	.L36	@,
 756              		.loc 2 250 0 is_stmt 0 discriminator 1
 757 0036 1F4B     		ldr	r3, .L40+4	@ tmp158,
 758 0038 1A68     		ldr	r2, [r3]	@ D.5547, ptx2
 759 003a 204B     		ldr	r3, .L40+12	@ tmp159,
 760 003c 1B68     		ldr	r3, [r3]	@ D.5547, ptx2_pckt_index
 761 003e 9A42     		cmp	r2, r3	@ D.5547, D.5547
 762 0040 0CD2     		bcs	.L36	@,
 251:src/uart.c    **** 			{
 252:src/uart.c    **** 				USART2->TDR = *ptx2;
 763              		.loc 2 252 0 is_stmt 1
 764 0042 1B4A     		ldr	r2, .L40	@ D.5544,
 765 0044 1B4B     		ldr	r3, .L40+4	@ tmp160,
 766 0046 1B68     		ldr	r3, [r3]	@ D.5547, ptx2
 767 0048 1B78     		ldrb	r3, [r3]	@ tmp161, *_20
 768 004a DBB2     		uxtb	r3, r3	@ D.5548, tmp161
 769 004c 9BB2     		uxth	r3, r3	@ D.5546, D.5548
 770 004e 1385     		strh	r3, [r2, #40]	@ tmp162, _19->TDR
 253:src/uart.c    **** 				ptx2++;
 771              		.loc 2 253 0
 772 0050 184B     		ldr	r3, .L40+4	@ tmp163,
 773 0052 1B68     		ldr	r3, [r3]	@ D.5547, ptx2
 774 0054 5A1C     		adds	r2, r3, #1	@ D.5547, D.5547,
 775 0056 174B     		ldr	r3, .L40+4	@ tmp164,
 776 0058 1A60     		str	r2, [r3]	@ D.5547, ptx2
 777 005a 0BE0     		b	.L35	@
 778              	.L36:
 254:src/uart.c    **** 			}
 255:src/uart.c    **** 			else
 256:src/uart.c    **** 			{
ARM GAS  /tmp/ccfZifSa.s 			page 35


 257:src/uart.c    **** 				ptx2 = tx2buff;
 779              		.loc 2 257 0
 780 005c 154B     		ldr	r3, .L40+4	@ tmp165,
 781 005e 184A     		ldr	r2, .L40+16	@ tmp166,
 782 0060 1A60     		str	r2, [r3]	@ tmp166, ptx2
 258:src/uart.c    **** 				ptx2_pckt_index = tx2buff;
 783              		.loc 2 258 0
 784 0062 164B     		ldr	r3, .L40+12	@ tmp167,
 785 0064 164A     		ldr	r2, .L40+16	@ tmp168,
 786 0066 1A60     		str	r2, [r3]	@ tmp168, ptx2_pckt_index
 259:src/uart.c    **** 				USART2->CR1 &= ~USART_CR1_TXEIE;
 787              		.loc 2 259 0
 788 0068 114B     		ldr	r3, .L40	@ D.5544,
 789 006a 114A     		ldr	r2, .L40	@ D.5544,
 790 006c 1268     		ldr	r2, [r2]	@ D.5545, _30->CR1
 791 006e 8021     		movs	r1, #128	@ tmp169,
 792 0070 8A43     		bics	r2, r1	@ D.5545, tmp169
 793 0072 1A60     		str	r2, [r3]	@ D.5545, _29->CR1
 794              	.L35:
 260:src/uart.c    **** 			}
 261:src/uart.c    **** 		}
 262:src/uart.c    **** 	}
 263:src/uart.c    **** 
 264:src/uart.c    **** 	if ((USART2->ISR & USART_ISR_ORE) || (USART2->ISR & USART_ISR_NE) || (USART2->ISR & USART_ISR_FE))
 795              		.loc 2 264 0
 796 0074 0E4B     		ldr	r3, .L40	@ D.5544,
 797 0076 DB69     		ldr	r3, [r3, #28]	@ D.5545, _34->ISR
 798 0078 0822     		movs	r2, #8	@ tmp170,
 799 007a 1340     		ands	r3, r2	@ D.5545, tmp170
 800 007c 09D1     		bne	.L37	@,
 801              		.loc 2 264 0 is_stmt 0 discriminator 1
 802 007e 0C4B     		ldr	r3, .L40	@ D.5544,
 803 0080 DB69     		ldr	r3, [r3, #28]	@ D.5545, _37->ISR
 804 0082 0422     		movs	r2, #4	@ tmp171,
 805 0084 1340     		ands	r3, r2	@ D.5545, tmp171
 806 0086 04D1     		bne	.L37	@,
 807              		.loc 2 264 0 discriminator 2
 808 0088 094B     		ldr	r3, .L40	@ D.5544,
 809 008a DB69     		ldr	r3, [r3, #28]	@ D.5545, _40->ISR
 810 008c 0222     		movs	r2, #2	@ tmp172,
 811 008e 1340     		ands	r3, r2	@ D.5545, tmp172
 812 0090 0BD0     		beq	.L39	@,
 813              	.L37:
 265:src/uart.c    **** 	{
 266:src/uart.c    **** 		USART2->ICR |= 0x0e;
 814              		.loc 2 266 0 is_stmt 1
 815 0092 074B     		ldr	r3, .L40	@ D.5544,
 816 0094 064A     		ldr	r2, .L40	@ D.5544,
 817 0096 126A     		ldr	r2, [r2, #32]	@ D.5545, _44->ICR
 818 0098 0E21     		movs	r1, #14	@ tmp173,
 819 009a 0A43     		orrs	r2, r1	@ D.5545, tmp173
 820 009c 1A62     		str	r2, [r3, #32]	@ D.5545, _43->ICR
 267:src/uart.c    **** 		dummy = USART2->RDR;
 821              		.loc 2 267 0
 822 009e 044B     		ldr	r3, .L40	@ D.5544,
 823 00a0 9B8C     		ldrh	r3, [r3, #36]	@ tmp175,
 824 00a2 9AB2     		uxth	r2, r3	@ D.5546, tmp175
ARM GAS  /tmp/ccfZifSa.s 			page 36


 825 00a4 6B46     		mov	r3, sp	@ tmp179,
 826 00a6 0733     		adds	r3, r3, #7	@ tmp176,
 827 00a8 1A70     		strb	r2, [r3]	@ tmp177, dummy
 828              	.L39:
 268:src/uart.c    **** 	}
 269:src/uart.c    **** }
 829              		.loc 2 269 0
 830 00aa C046     		nop
 831 00ac 02B0     		add	sp, sp, #8	@,,
 832              		@ sp needed	@
 833 00ae 7047     		bx	lr
 834              	.L41:
 835              		.align	2
 836              	.L40:
 837 00b0 00440040 		.word	1073759232
 838 00b4 00000000 		.word	ptx2
 839 00b8 00010000 		.word	tx2buff+256
 840 00bc 00000000 		.word	ptx2_pckt_index
 841 00c0 00000000 		.word	tx2buff
 842              		.cfi_endproc
 843              	.LFE23:
 844              		.size	USART2_IRQHandler, .-USART2_IRQHandler
 845              		.section	.text.Usart2Send,"ax",%progbits
 846              		.align	2
 847              		.global	Usart2Send
 848              		.code	16
 849              		.thumb_func
 850              		.type	Usart2Send, %function
 851              	Usart2Send:
 852              	.LFB24:
 270:src/uart.c    **** 
 271:src/uart.c    **** void Usart2Send (char * send)
 272:src/uart.c    **** {
 853              		.loc 2 272 0
 854              		.cfi_startproc
 855 0000 00B5     		push	{lr}	@
 856              	.LCFI8:
 857              		.cfi_def_cfa_offset 4
 858              		.cfi_offset 14, -4
 859 0002 85B0     		sub	sp, sp, #20	@,,
 860              	.LCFI9:
 861              		.cfi_def_cfa_offset 24
 862 0004 0190     		str	r0, [sp, #4]	@ send, send
 273:src/uart.c    **** 	unsigned char i;
 274:src/uart.c    **** 
 275:src/uart.c    **** 	i = strlen(send);
 863              		.loc 2 275 0
 864 0006 019B     		ldr	r3, [sp, #4]	@ tmp111, send
 865 0008 1800     		movs	r0, r3	@, tmp111
 866 000a FFF7FEFF 		bl	strlen	@
 867 000e 0200     		movs	r2, r0	@ D.5549,
 868 0010 0F23     		movs	r3, #15	@ tmp112,
 869 0012 6B44     		add	r3, r3, sp	@ tmp112,
 870 0014 1A70     		strb	r2, [r3]	@ tmp113, i
 276:src/uart.c    **** 	Usart2SendUnsigned((unsigned char *) send, i);
 871              		.loc 2 276 0
 872 0016 0F23     		movs	r3, #15	@ tmp114,
ARM GAS  /tmp/ccfZifSa.s 			page 37


 873 0018 6B44     		add	r3, r3, sp	@ tmp114,
 874 001a 1A78     		ldrb	r2, [r3]	@ tmp115, i
 875 001c 019B     		ldr	r3, [sp, #4]	@ tmp116, send
 876 001e 1100     		movs	r1, r2	@, tmp115
 877 0020 1800     		movs	r0, r3	@, tmp116
 878 0022 FFF7FEFF 		bl	Usart2SendUnsigned	@
 277:src/uart.c    **** }
 879              		.loc 2 277 0
 880 0026 C046     		nop
 881 0028 05B0     		add	sp, sp, #20	@,,
 882              		@ sp needed	@
 883 002a 00BD     		pop	{pc}
 884              		.cfi_endproc
 885              	.LFE24:
 886              		.size	Usart2Send, .-Usart2Send
 887              		.section	.text.Usart2SendUnsigned,"ax",%progbits
 888              		.align	2
 889              		.global	Usart2SendUnsigned
 890              		.code	16
 891              		.thumb_func
 892              		.type	Usart2SendUnsigned, %function
 893              	Usart2SendUnsigned:
 894              	.LFB25:
 278:src/uart.c    **** 
 279:src/uart.c    **** void Usart2SendUnsigned(unsigned char * send, unsigned char size)
 280:src/uart.c    **** {
 895              		.loc 2 280 0
 896              		.cfi_startproc
 897 0000 00B5     		push	{lr}	@
 898              	.LCFI10:
 899              		.cfi_def_cfa_offset 4
 900              		.cfi_offset 14, -4
 901 0002 83B0     		sub	sp, sp, #12	@,,
 902              	.LCFI11:
 903              		.cfi_def_cfa_offset 16
 904 0004 0190     		str	r0, [sp, #4]	@ send, send
 905 0006 0A00     		movs	r2, r1	@ tmp122, size
 906 0008 6B46     		mov	r3, sp	@ tmp135,
 907 000a 0333     		adds	r3, r3, #3	@ tmp123,
 908 000c 1A70     		strb	r2, [r3]	@ tmp124, size
 281:src/uart.c    **** 	if ((ptx2_pckt_index + size) < &tx2buff[SIZEOF_DATA])
 909              		.loc 2 281 0
 910 000e 114B     		ldr	r3, .L46	@ tmp125,
 911 0010 1A68     		ldr	r2, [r3]	@ D.5550, ptx2_pckt_index
 912 0012 6B46     		mov	r3, sp	@ tmp136,
 913 0014 0333     		adds	r3, r3, #3	@ tmp126,
 914 0016 1B78     		ldrb	r3, [r3]	@ D.5551, size
 915 0018 D218     		adds	r2, r2, r3	@ D.5550, D.5550, D.5551
 916 001a 0F4B     		ldr	r3, .L46+4	@ tmp127,
 917 001c 9A42     		cmp	r2, r3	@ D.5550, tmp127
 918 001e 16D2     		bcs	.L45	@,
 282:src/uart.c    **** 	{
 283:src/uart.c    **** 		memcpy((unsigned char *)ptx2_pckt_index, send, size);
 919              		.loc 2 283 0
 920 0020 0C4B     		ldr	r3, .L46	@ tmp128,
 921 0022 1868     		ldr	r0, [r3]	@ D.5550, ptx2_pckt_index
 922 0024 6B46     		mov	r3, sp	@ tmp137,
ARM GAS  /tmp/ccfZifSa.s 			page 38


 923 0026 0333     		adds	r3, r3, #3	@ tmp129,
 924 0028 1A78     		ldrb	r2, [r3]	@ D.5552, size
 925 002a 019B     		ldr	r3, [sp, #4]	@ tmp130, send
 926 002c 1900     		movs	r1, r3	@, tmp130
 927 002e FFF7FEFF 		bl	memcpy	@
 284:src/uart.c    **** 		ptx2_pckt_index += size;
 928              		.loc 2 284 0
 929 0032 084B     		ldr	r3, .L46	@ tmp131,
 930 0034 1A68     		ldr	r2, [r3]	@ D.5550, ptx2_pckt_index
 931 0036 6B46     		mov	r3, sp	@ tmp138,
 932 0038 0333     		adds	r3, r3, #3	@ tmp132,
 933 003a 1B78     		ldrb	r3, [r3]	@ D.5551, size
 934 003c D218     		adds	r2, r2, r3	@ D.5550, D.5550, D.5551
 935 003e 054B     		ldr	r3, .L46	@ tmp133,
 936 0040 1A60     		str	r2, [r3]	@ D.5550, ptx2_pckt_index
 285:src/uart.c    **** 		USART2->CR1 |= USART_CR1_TXEIE;
 937              		.loc 2 285 0
 938 0042 064B     		ldr	r3, .L46+8	@ D.5553,
 939 0044 054A     		ldr	r2, .L46+8	@ D.5553,
 940 0046 1268     		ldr	r2, [r2]	@ D.5554, _16->CR1
 941 0048 8021     		movs	r1, #128	@ tmp134,
 942 004a 0A43     		orrs	r2, r1	@ D.5554, tmp134
 943 004c 1A60     		str	r2, [r3]	@ D.5554, _15->CR1
 944              	.L45:
 286:src/uart.c    **** 	}
 287:src/uart.c    **** }
 945              		.loc 2 287 0
 946 004e C046     		nop
 947 0050 03B0     		add	sp, sp, #12	@,,
 948              		@ sp needed	@
 949 0052 00BD     		pop	{pc}
 950              	.L47:
 951              		.align	2
 952              	.L46:
 953 0054 00000000 		.word	ptx2_pckt_index
 954 0058 00010000 		.word	tx2buff+256
 955 005c 00440040 		.word	1073759232
 956              		.cfi_endproc
 957              	.LFE25:
 958              		.size	Usart2SendUnsigned, .-Usart2SendUnsigned
 959              		.section	.text.Usart2SendSingle,"ax",%progbits
 960              		.align	2
 961              		.global	Usart2SendSingle
 962              		.code	16
 963              		.thumb_func
 964              		.type	Usart2SendSingle, %function
 965              	Usart2SendSingle:
 966              	.LFB26:
 288:src/uart.c    **** 
 289:src/uart.c    **** void Usart2SendSingle(unsigned char tosend)
 290:src/uart.c    **** {
 967              		.loc 2 290 0
 968              		.cfi_startproc
 969 0000 00B5     		push	{lr}	@
 970              	.LCFI12:
 971              		.cfi_def_cfa_offset 4
 972              		.cfi_offset 14, -4
ARM GAS  /tmp/ccfZifSa.s 			page 39


 973 0002 83B0     		sub	sp, sp, #12	@,,
 974              	.LCFI13:
 975              		.cfi_def_cfa_offset 16
 976 0004 0200     		movs	r2, r0	@ tmp110, tosend
 977 0006 6B46     		mov	r3, sp	@ tmp114,
 978 0008 0733     		adds	r3, r3, #7	@ tmp111,
 979 000a 1A70     		strb	r2, [r3]	@ tmp112, tosend
 291:src/uart.c    **** 	Usart2SendUnsigned(&tosend, 1);
 980              		.loc 2 291 0
 981 000c 6B46     		mov	r3, sp	@ tmp115,
 982 000e 0733     		adds	r3, r3, #7	@ tmp113,
 983 0010 0121     		movs	r1, #1	@,
 984 0012 1800     		movs	r0, r3	@, tmp113
 985 0014 FFF7FEFF 		bl	Usart2SendUnsigned	@
 292:src/uart.c    **** }
 986              		.loc 2 292 0
 987 0018 C046     		nop
 988 001a 03B0     		add	sp, sp, #12	@,,
 989              		@ sp needed	@
 990 001c 00BD     		pop	{pc}
 991              		.cfi_endproc
 992              	.LFE26:
 993              		.size	Usart2SendSingle, .-Usart2SendSingle
 994 001e C046     		.section	.text.ReadUsart2Buffer,"ax",%progbits
 995              		.align	2
 996              		.global	ReadUsart2Buffer
 997              		.code	16
 998              		.thumb_func
 999              		.type	ReadUsart2Buffer, %function
 1000              	ReadUsart2Buffer:
 1001              	.LFB27:
 293:src/uart.c    **** 
 294:src/uart.c    **** unsigned char ReadUsart2Buffer (unsigned char * bout, unsigned short max_len)
 295:src/uart.c    **** {
 1002              		.loc 2 295 0
 1003              		.cfi_startproc
 1004 0000 00B5     		push	{lr}	@
 1005              	.LCFI14:
 1006              		.cfi_def_cfa_offset 4
 1007              		.cfi_offset 14, -4
 1008 0002 85B0     		sub	sp, sp, #20	@,,
 1009              	.LCFI15:
 1010              		.cfi_def_cfa_offset 24
 1011 0004 0190     		str	r0, [sp, #4]	@ bout, bout
 1012 0006 0A00     		movs	r2, r1	@ tmp117, max_len
 1013 0008 6B46     		mov	r3, sp	@ tmp136,
 1014 000a 0233     		adds	r3, r3, #2	@ tmp118,
 1015 000c 1A80     		strh	r2, [r3]	@ tmp119, max_len
 296:src/uart.c    **** 	unsigned int len;
 297:src/uart.c    **** 
 298:src/uart.c    **** 	len = prx2 - rx2buff;
 1016              		.loc 2 298 0
 1017 000e 124B     		ldr	r3, .L53	@ tmp120,
 1018 0010 1B68     		ldr	r3, [r3]	@ D.5555, prx2
 1019 0012 1A00     		movs	r2, r3	@ D.5556, D.5555
 1020 0014 114B     		ldr	r3, .L53+4	@ D.5556,
 1021 0016 D31A     		subs	r3, r2, r3	@ D.5556, D.5556, D.5556
ARM GAS  /tmp/ccfZifSa.s 			page 40


 1022 0018 0393     		str	r3, [sp, #12]	@ D.5556, len
 299:src/uart.c    **** 
 300:src/uart.c    **** 	if (len < max_len)
 1023              		.loc 2 300 0
 1024 001a 6B46     		mov	r3, sp	@ tmp137,
 1025 001c 0233     		adds	r3, r3, #2	@ tmp121,
 1026 001e 1A88     		ldrh	r2, [r3]	@ D.5557, max_len
 1027 0020 039B     		ldr	r3, [sp, #12]	@ tmp122, len
 1028 0022 9A42     		cmp	r2, r3	@ D.5557, tmp122
 1029 0024 06D9     		bls	.L50	@,
 301:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx2buff, len);
 1030              		.loc 2 301 0
 1031 0026 039A     		ldr	r2, [sp, #12]	@ tmp123, len
 1032 0028 0C49     		ldr	r1, .L53+4	@ tmp124,
 1033 002a 019B     		ldr	r3, [sp, #4]	@ tmp125, bout
 1034 002c 1800     		movs	r0, r3	@, tmp125
 1035 002e FFF7FEFF 		bl	memcpy	@
 1036 0032 09E0     		b	.L51	@
 1037              	.L50:
 302:src/uart.c    **** 	else
 303:src/uart.c    **** 	{
 304:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx2buff, len);
 1038              		.loc 2 304 0
 1039 0034 039A     		ldr	r2, [sp, #12]	@ tmp126, len
 1040 0036 0949     		ldr	r1, .L53+4	@ tmp127,
 1041 0038 019B     		ldr	r3, [sp, #4]	@ tmp128, bout
 1042 003a 1800     		movs	r0, r3	@, tmp128
 1043 003c FFF7FEFF 		bl	memcpy	@
 305:src/uart.c    **** 		len = max_len;
 1044              		.loc 2 305 0
 1045 0040 6B46     		mov	r3, sp	@ tmp138,
 1046 0042 0233     		adds	r3, r3, #2	@ tmp129,
 1047 0044 1B88     		ldrh	r3, [r3]	@ tmp130, max_len
 1048 0046 0393     		str	r3, [sp, #12]	@ tmp130, len
 1049              	.L51:
 306:src/uart.c    **** 	}
 307:src/uart.c    **** 
 308:src/uart.c    **** 	//ajusto punteros de rx luego de la copia
 309:src/uart.c    **** 	prx2 = rx2buff;
 1050              		.loc 2 309 0
 1051 0048 034B     		ldr	r3, .L53	@ tmp131,
 1052 004a 044A     		ldr	r2, .L53+4	@ tmp132,
 1053 004c 1A60     		str	r2, [r3]	@ tmp132, prx2
 310:src/uart.c    **** 
 311:src/uart.c    **** 	return (unsigned char) len;
 1054              		.loc 2 311 0
 1055 004e 039B     		ldr	r3, [sp, #12]	@ tmp134, len
 1056 0050 DBB2     		uxtb	r3, r3	@ D.5558, tmp133
 312:src/uart.c    **** }
 1057              		.loc 2 312 0
 1058 0052 1800     		movs	r0, r3	@, <retval>
 1059 0054 05B0     		add	sp, sp, #20	@,,
 1060              		@ sp needed	@
 1061 0056 00BD     		pop	{pc}
 1062              	.L54:
 1063              		.align	2
 1064              	.L53:
ARM GAS  /tmp/ccfZifSa.s 			page 41


 1065 0058 00000000 		.word	prx2
 1066 005c 00000000 		.word	rx2buff
 1067              		.cfi_endproc
 1068              	.LFE27:
 1069              		.size	ReadUsart2Buffer, .-ReadUsart2Buffer
 1070              		.section	.text.Usart1Send,"ax",%progbits
 1071              		.align	2
 1072              		.global	Usart1Send
 1073              		.code	16
 1074              		.thumb_func
 1075              		.type	Usart1Send, %function
 1076              	Usart1Send:
 1077              	.LFB28:
 313:src/uart.c    **** 
 314:src/uart.c    **** void Usart1Send (char * send)
 315:src/uart.c    **** {
 1078              		.loc 2 315 0
 1079              		.cfi_startproc
 1080 0000 00B5     		push	{lr}	@
 1081              	.LCFI16:
 1082              		.cfi_def_cfa_offset 4
 1083              		.cfi_offset 14, -4
 1084 0002 85B0     		sub	sp, sp, #20	@,,
 1085              	.LCFI17:
 1086              		.cfi_def_cfa_offset 24
 1087 0004 0190     		str	r0, [sp, #4]	@ send, send
 316:src/uart.c    **** 	unsigned char i;
 317:src/uart.c    **** 
 318:src/uart.c    **** 	i = strlen(send);
 1088              		.loc 2 318 0
 1089 0006 019B     		ldr	r3, [sp, #4]	@ tmp111, send
 1090 0008 1800     		movs	r0, r3	@, tmp111
 1091 000a FFF7FEFF 		bl	strlen	@
 1092 000e 0200     		movs	r2, r0	@ D.5559,
 1093 0010 0F23     		movs	r3, #15	@ tmp112,
 1094 0012 6B44     		add	r3, r3, sp	@ tmp112,
 1095 0014 1A70     		strb	r2, [r3]	@ tmp113, i
 319:src/uart.c    **** 	Usart1SendUnsigned((unsigned char *) send, i);
 1096              		.loc 2 319 0
 1097 0016 0F23     		movs	r3, #15	@ tmp114,
 1098 0018 6B44     		add	r3, r3, sp	@ tmp114,
 1099 001a 1A78     		ldrb	r2, [r3]	@ tmp115, i
 1100 001c 019B     		ldr	r3, [sp, #4]	@ tmp116, send
 1101 001e 1100     		movs	r1, r2	@, tmp115
 1102 0020 1800     		movs	r0, r3	@, tmp116
 1103 0022 FFF7FEFF 		bl	Usart1SendUnsigned	@
 320:src/uart.c    **** }
 1104              		.loc 2 320 0
 1105 0026 C046     		nop
 1106 0028 05B0     		add	sp, sp, #20	@,,
 1107              		@ sp needed	@
 1108 002a 00BD     		pop	{pc}
 1109              		.cfi_endproc
 1110              	.LFE28:
 1111              		.size	Usart1Send, .-Usart1Send
 1112              		.section	.text.Usart1SendUnsigned,"ax",%progbits
 1113              		.align	2
ARM GAS  /tmp/ccfZifSa.s 			page 42


 1114              		.global	Usart1SendUnsigned
 1115              		.code	16
 1116              		.thumb_func
 1117              		.type	Usart1SendUnsigned, %function
 1118              	Usart1SendUnsigned:
 1119              	.LFB29:
 321:src/uart.c    **** 
 322:src/uart.c    **** void Usart1SendUnsigned(unsigned char * send, unsigned char size)
 323:src/uart.c    **** {
 1120              		.loc 2 323 0
 1121              		.cfi_startproc
 1122 0000 00B5     		push	{lr}	@
 1123              	.LCFI18:
 1124              		.cfi_def_cfa_offset 4
 1125              		.cfi_offset 14, -4
 1126 0002 83B0     		sub	sp, sp, #12	@,,
 1127              	.LCFI19:
 1128              		.cfi_def_cfa_offset 16
 1129 0004 0190     		str	r0, [sp, #4]	@ send, send
 1130 0006 0A00     		movs	r2, r1	@ tmp122, size
 1131 0008 6B46     		mov	r3, sp	@ tmp135,
 1132 000a 0333     		adds	r3, r3, #3	@ tmp123,
 1133 000c 1A70     		strb	r2, [r3]	@ tmp124, size
 324:src/uart.c    **** 	if ((ptx1_pckt_index + size) < &tx1buff[SIZEOF_DATA])
 1134              		.loc 2 324 0
 1135 000e 114B     		ldr	r3, .L59	@ tmp125,
 1136 0010 1A68     		ldr	r2, [r3]	@ D.5560, ptx1_pckt_index
 1137 0012 6B46     		mov	r3, sp	@ tmp136,
 1138 0014 0333     		adds	r3, r3, #3	@ tmp126,
 1139 0016 1B78     		ldrb	r3, [r3]	@ D.5561, size
 1140 0018 D218     		adds	r2, r2, r3	@ D.5560, D.5560, D.5561
 1141 001a 0F4B     		ldr	r3, .L59+4	@ tmp127,
 1142 001c 9A42     		cmp	r2, r3	@ D.5560, tmp127
 1143 001e 16D2     		bcs	.L58	@,
 325:src/uart.c    **** 	{
 326:src/uart.c    **** 		memcpy((unsigned char *)ptx1_pckt_index, send, size);
 1144              		.loc 2 326 0
 1145 0020 0C4B     		ldr	r3, .L59	@ tmp128,
 1146 0022 1868     		ldr	r0, [r3]	@ D.5560, ptx1_pckt_index
 1147 0024 6B46     		mov	r3, sp	@ tmp137,
 1148 0026 0333     		adds	r3, r3, #3	@ tmp129,
 1149 0028 1A78     		ldrb	r2, [r3]	@ D.5562, size
 1150 002a 019B     		ldr	r3, [sp, #4]	@ tmp130, send
 1151 002c 1900     		movs	r1, r3	@, tmp130
 1152 002e FFF7FEFF 		bl	memcpy	@
 327:src/uart.c    **** 		ptx1_pckt_index += size;
 1153              		.loc 2 327 0
 1154 0032 084B     		ldr	r3, .L59	@ tmp131,
 1155 0034 1A68     		ldr	r2, [r3]	@ D.5560, ptx1_pckt_index
 1156 0036 6B46     		mov	r3, sp	@ tmp138,
 1157 0038 0333     		adds	r3, r3, #3	@ tmp132,
 1158 003a 1B78     		ldrb	r3, [r3]	@ D.5561, size
 1159 003c D218     		adds	r2, r2, r3	@ D.5560, D.5560, D.5561
 1160 003e 054B     		ldr	r3, .L59	@ tmp133,
 1161 0040 1A60     		str	r2, [r3]	@ D.5560, ptx1_pckt_index
 328:src/uart.c    **** 		USART1->CR1 |= USART_CR1_TXEIE;
 1162              		.loc 2 328 0
ARM GAS  /tmp/ccfZifSa.s 			page 43


 1163 0042 064B     		ldr	r3, .L59+8	@ D.5563,
 1164 0044 054A     		ldr	r2, .L59+8	@ D.5563,
 1165 0046 1268     		ldr	r2, [r2]	@ D.5564, _16->CR1
 1166 0048 8021     		movs	r1, #128	@ tmp134,
 1167 004a 0A43     		orrs	r2, r1	@ D.5564, tmp134
 1168 004c 1A60     		str	r2, [r3]	@ D.5564, _15->CR1
 1169              	.L58:
 329:src/uart.c    **** 	}
 330:src/uart.c    **** }
 1170              		.loc 2 330 0
 1171 004e C046     		nop
 1172 0050 03B0     		add	sp, sp, #12	@,,
 1173              		@ sp needed	@
 1174 0052 00BD     		pop	{pc}
 1175              	.L60:
 1176              		.align	2
 1177              	.L59:
 1178 0054 00000000 		.word	ptx1_pckt_index
 1179 0058 00010000 		.word	tx1buff+256
 1180 005c 00380140 		.word	1073821696
 1181              		.cfi_endproc
 1182              	.LFE29:
 1183              		.size	Usart1SendUnsigned, .-Usart1SendUnsigned
 1184              		.section	.text.Usart1SendSingle,"ax",%progbits
 1185              		.align	2
 1186              		.global	Usart1SendSingle
 1187              		.code	16
 1188              		.thumb_func
 1189              		.type	Usart1SendSingle, %function
 1190              	Usart1SendSingle:
 1191              	.LFB30:
 331:src/uart.c    **** 
 332:src/uart.c    **** void Usart1SendSingle(unsigned char tosend)
 333:src/uart.c    **** {
 1192              		.loc 2 333 0
 1193              		.cfi_startproc
 1194 0000 00B5     		push	{lr}	@
 1195              	.LCFI20:
 1196              		.cfi_def_cfa_offset 4
 1197              		.cfi_offset 14, -4
 1198 0002 83B0     		sub	sp, sp, #12	@,,
 1199              	.LCFI21:
 1200              		.cfi_def_cfa_offset 16
 1201 0004 0200     		movs	r2, r0	@ tmp110, tosend
 1202 0006 6B46     		mov	r3, sp	@ tmp114,
 1203 0008 0733     		adds	r3, r3, #7	@ tmp111,
 1204 000a 1A70     		strb	r2, [r3]	@ tmp112, tosend
 334:src/uart.c    **** 	Usart1SendUnsigned(&tosend, 1);
 1205              		.loc 2 334 0
 1206 000c 6B46     		mov	r3, sp	@ tmp115,
 1207 000e 0733     		adds	r3, r3, #7	@ tmp113,
 1208 0010 0121     		movs	r1, #1	@,
 1209 0012 1800     		movs	r0, r3	@, tmp113
 1210 0014 FFF7FEFF 		bl	Usart1SendUnsigned	@
 335:src/uart.c    **** }
 1211              		.loc 2 335 0
 1212 0018 C046     		nop
ARM GAS  /tmp/ccfZifSa.s 			page 44


 1213 001a 03B0     		add	sp, sp, #12	@,,
 1214              		@ sp needed	@
 1215 001c 00BD     		pop	{pc}
 1216              		.cfi_endproc
 1217              	.LFE30:
 1218              		.size	Usart1SendSingle, .-Usart1SendSingle
 1219 001e C046     		.section	.text.USART2Config,"ax",%progbits
 1220              		.align	2
 1221              		.global	USART2Config
 1222              		.code	16
 1223              		.thumb_func
 1224              		.type	USART2Config, %function
 1225              	USART2Config:
 1226              	.LFB31:
 336:src/uart.c    **** 
 337:src/uart.c    **** 
 338:src/uart.c    **** void USART2Config(void)
 339:src/uart.c    **** {
 1227              		.loc 2 339 0
 1228              		.cfi_startproc
 1229 0000 00B5     		push	{lr}	@
 1230              	.LCFI22:
 1231              		.cfi_def_cfa_offset 4
 1232              		.cfi_offset 14, -4
 1233 0002 83B0     		sub	sp, sp, #12	@,,
 1234              	.LCFI23:
 1235              		.cfi_def_cfa_offset 16
 340:src/uart.c    **** 	unsigned int temp;
 341:src/uart.c    **** 
 342:src/uart.c    **** 	if (!USART2_CLK)
 1236              		.loc 2 342 0
 1237 0004 1B4B     		ldr	r3, .L64	@ D.5565,
 1238 0006 DA69     		ldr	r2, [r3, #28]	@ D.5566, _2->APB1ENR
 1239 0008 8023     		movs	r3, #128	@ tmp144,
 1240 000a 9B02     		lsls	r3, r3, #10	@ tmp121, tmp144,
 1241 000c 1340     		ands	r3, r2	@ D.5566, D.5566
 1242 000e 06D1     		bne	.L63	@,
 343:src/uart.c    **** 		USART2_CLK_ON;
 1243              		.loc 2 343 0
 1244 0010 184B     		ldr	r3, .L64	@ D.5565,
 1245 0012 184A     		ldr	r2, .L64	@ D.5565,
 1246 0014 D269     		ldr	r2, [r2, #28]	@ D.5566, _7->APB1ENR
 1247 0016 8021     		movs	r1, #128	@ tmp143,
 1248 0018 8902     		lsls	r1, r1, #10	@ tmp122, tmp143,
 1249 001a 0A43     		orrs	r2, r1	@ D.5566, tmp122
 1250 001c DA61     		str	r2, [r3, #28]	@ D.5566, _6->APB1ENR
 1251              	.L63:
 344:src/uart.c    **** 
 345:src/uart.c    **** 	temp = GPIOA->AFR[0];
 1252              		.loc 2 345 0
 1253 001e 9023     		movs	r3, #144	@ tmp140,
 1254 0020 DB05     		lsls	r3, r3, #23	@ D.5567, tmp140,
 1255 0022 1B6A     		ldr	r3, [r3, #32]	@ tmp123, _11->AFR
 1256 0024 0193     		str	r3, [sp, #4]	@ tmp123, temp
 346:src/uart.c    **** 	temp &= 0xFFF00FF;
 1257              		.loc 2 346 0
 1258 0026 019B     		ldr	r3, [sp, #4]	@ tmp125, temp
ARM GAS  /tmp/ccfZifSa.s 			page 45


 1259 0028 134A     		ldr	r2, .L64+4	@ tmp126,
 1260 002a 1340     		ands	r3, r2	@ tmp124, tmp126
 1261 002c 0193     		str	r3, [sp, #4]	@ tmp124, temp
 347:src/uart.c    **** 	temp |= 0x0001100;	//PA2 -> AF1 PA3 -> AF1
 1262              		.loc 2 347 0
 1263 002e 019B     		ldr	r3, [sp, #4]	@ tmp128, temp
 1264 0030 8822     		movs	r2, #136	@ tmp141,
 1265 0032 5201     		lsls	r2, r2, #5	@ tmp129, tmp141,
 1266 0034 1343     		orrs	r3, r2	@ tmp127, tmp129
 1267 0036 0193     		str	r3, [sp, #4]	@ tmp127, temp
 348:src/uart.c    **** 	GPIOA->AFR[0] = temp;
 1268              		.loc 2 348 0
 1269 0038 9023     		movs	r3, #144	@ tmp142,
 1270 003a DB05     		lsls	r3, r3, #23	@ D.5567, tmp142,
 1271 003c 019A     		ldr	r2, [sp, #4]	@ tmp130, temp
 1272 003e 1A62     		str	r2, [r3, #32]	@ tmp130, _15->AFR
 349:src/uart.c    **** 
 350:src/uart.c    **** 	ptx2 = tx2buff;
 1273              		.loc 2 350 0
 1274 0040 0E4B     		ldr	r3, .L64+8	@ tmp131,
 1275 0042 0F4A     		ldr	r2, .L64+12	@ tmp132,
 1276 0044 1A60     		str	r2, [r3]	@ tmp132, ptx2
 351:src/uart.c    **** 	ptx2_pckt_index = tx2buff;
 1277              		.loc 2 351 0
 1278 0046 0F4B     		ldr	r3, .L64+16	@ tmp133,
 1279 0048 0D4A     		ldr	r2, .L64+12	@ tmp134,
 1280 004a 1A60     		str	r2, [r3]	@ tmp134, ptx2_pckt_index
 352:src/uart.c    **** 	prx2 = rx2buff;
 1281              		.loc 2 352 0
 1282 004c 0E4B     		ldr	r3, .L64+20	@ tmp135,
 1283 004e 0F4A     		ldr	r2, .L64+24	@ tmp136,
 1284 0050 1A60     		str	r2, [r3]	@ tmp136, prx2
 353:src/uart.c    **** 
 354:src/uart.c    **** 	USART2->BRR = USART_9600;
 1285              		.loc 2 354 0
 1286 0052 0F4B     		ldr	r3, .L64+28	@ D.5568,
 1287 0054 0F4A     		ldr	r2, .L64+32	@ tmp137,
 1288 0056 9A81     		strh	r2, [r3, #12]	@ tmp138, _20->BRR
 355:src/uart.c    **** 	USART2->CR1 = USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 1289              		.loc 2 355 0
 1290 0058 0D4B     		ldr	r3, .L64+28	@ D.5568,
 1291 005a 2D22     		movs	r2, #45	@ tmp139,
 1292 005c 1A60     		str	r2, [r3]	@ tmp139, _22->CR1
 356:src/uart.c    **** 
 357:src/uart.c    **** 	NVIC_EnableIRQ(USART2_IRQn);
 1293              		.loc 2 357 0
 1294 005e 1C20     		movs	r0, #28	@,
 1295 0060 FFF7FEFF 		bl	NVIC_EnableIRQ	@
 358:src/uart.c    **** 	NVIC_SetPriority(USART2_IRQn, 7);
 1296              		.loc 2 358 0
 1297 0064 0721     		movs	r1, #7	@,
 1298 0066 1C20     		movs	r0, #28	@,
 1299 0068 FFF7FEFF 		bl	NVIC_SetPriority	@
 359:src/uart.c    **** }
 1300              		.loc 2 359 0
 1301 006c C046     		nop
 1302 006e 03B0     		add	sp, sp, #12	@,,
ARM GAS  /tmp/ccfZifSa.s 			page 46


 1303              		@ sp needed	@
 1304 0070 00BD     		pop	{pc}
 1305              	.L65:
 1306 0072 C046     		.align	2
 1307              	.L64:
 1308 0074 00100240 		.word	1073876992
 1309 0078 FF00FF0F 		.word	268370175
 1310 007c 00000000 		.word	ptx2
 1311 0080 00000000 		.word	tx2buff
 1312 0084 00000000 		.word	ptx2_pckt_index
 1313 0088 00000000 		.word	prx2
 1314 008c 00000000 		.word	rx2buff
 1315 0090 00440040 		.word	1073759232
 1316 0094 88130000 		.word	5000
 1317              		.cfi_endproc
 1318              	.LFE31:
 1319              		.size	USART2Config, .-USART2Config
 1320              		.section	.text.USART1Config,"ax",%progbits
 1321              		.align	2
 1322              		.global	USART1Config
 1323              		.code	16
 1324              		.thumb_func
 1325              		.type	USART1Config, %function
 1326              	USART1Config:
 1327              	.LFB32:
 360:src/uart.c    **** 
 361:src/uart.c    **** void USART1Config(void)
 362:src/uart.c    **** {
 1328              		.loc 2 362 0
 1329              		.cfi_startproc
 1330 0000 10B5     		push	{r4, lr}	@
 1331              	.LCFI24:
 1332              		.cfi_def_cfa_offset 8
 1333              		.cfi_offset 4, -8
 1334              		.cfi_offset 14, -4
 363:src/uart.c    **** 	unsigned int temp;
 364:src/uart.c    **** 
 365:src/uart.c    **** 	if (!USART1_CLK)
 1335              		.loc 2 365 0
 1336 0002 124B     		ldr	r3, .L68	@ D.5569,
 1337 0004 9A69     		ldr	r2, [r3, #24]	@ D.5570, _2->APB2ENR
 1338 0006 8023     		movs	r3, #128	@ tmp131,
 1339 0008 DB01     		lsls	r3, r3, #7	@ tmp119, tmp131,
 1340 000a 1340     		ands	r3, r2	@ D.5570, D.5570
 1341 000c 06D1     		bne	.L67	@,
 366:src/uart.c    **** 		USART1_CLK_ON;
 1342              		.loc 2 366 0
 1343 000e 0F4B     		ldr	r3, .L68	@ D.5569,
 1344 0010 0E4A     		ldr	r2, .L68	@ D.5569,
 1345 0012 9269     		ldr	r2, [r2, #24]	@ D.5570, _7->APB2ENR
 1346 0014 8021     		movs	r1, #128	@ tmp130,
 1347 0016 C901     		lsls	r1, r1, #7	@ tmp120, tmp130,
 1348 0018 0A43     		orrs	r2, r1	@ D.5570, tmp120
 1349 001a 9A61     		str	r2, [r3, #24]	@ D.5570, _6->APB2ENR
 1350              	.L67:
 367:src/uart.c    **** 
 368:src/uart.c    **** #ifdef VER_1_0
ARM GAS  /tmp/ccfZifSa.s 			page 47


 369:src/uart.c    **** 	//para empezar con el GPS
 370:src/uart.c    **** 	//GPIOB->AFR[0] |= 0x00000000;	//PB7 -> AF0 PB6 -> AF0
 371:src/uart.c    **** 	GPIOB->AFR[0] &= 0x00FFFFFF;	//PB7 -> AF0 PB6 -> AF0
 372:src/uart.c    **** 	//para empezar con el GSM
 373:src/uart.c    **** 	//GPIOA->AFR[1] |= 0x00000110;	//PA10 -> AF1 PA9 -> AF1
 374:src/uart.c    **** 
 375:src/uart.c    **** 	// temp = GPIOA->AFR[0];
 376:src/uart.c    **** 	// temp &= 0xFFF00FF;
 377:src/uart.c    **** 	// temp |= 0x0001100;	//PA2 -> AF1 PA3 -> AF1
 378:src/uart.c    **** 	// GPIOA->AFR[0] = temp;
 379:src/uart.c    **** 
 380:src/uart.c    **** #endif
 381:src/uart.c    **** 
 382:src/uart.c    **** 	ptx1 = tx1buff;
 1351              		.loc 2 382 0
 1352 001c 0C4B     		ldr	r3, .L68+4	@ tmp121,
 1353 001e 0D4A     		ldr	r2, .L68+8	@ tmp122,
 1354 0020 1A60     		str	r2, [r3]	@ tmp122, ptx1
 383:src/uart.c    **** 	ptx1_pckt_index = tx1buff;
 1355              		.loc 2 383 0
 1356 0022 0D4B     		ldr	r3, .L68+12	@ tmp123,
 1357 0024 0B4A     		ldr	r2, .L68+8	@ tmp124,
 1358 0026 1A60     		str	r2, [r3]	@ tmp124, ptx1_pckt_index
 384:src/uart.c    **** 	prx1 = rx1buff;
 1359              		.loc 2 384 0
 1360 0028 0C4B     		ldr	r3, .L68+16	@ tmp125,
 1361 002a 0D4A     		ldr	r2, .L68+20	@ tmp126,
 1362 002c 1A60     		str	r2, [r3]	@ tmp126, prx1
 385:src/uart.c    **** 
 386:src/uart.c    **** 	USART1->BRR = USART_9600;
 1363              		.loc 2 386 0
 1364 002e 0D4B     		ldr	r3, .L68+24	@ D.5571,
 1365 0030 0D4A     		ldr	r2, .L68+28	@ tmp127,
 1366 0032 9A81     		strh	r2, [r3, #12]	@ tmp128, _14->BRR
 387:src/uart.c    **** //	USART1->CR2 |= USART_CR2_STOP_1;	//2 bits stop
 388:src/uart.c    **** //	USART1->CR1 = USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 389:src/uart.c    **** //	USART1->CR1 = USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE;	//SIN TX
 390:src/uart.c    **** 	USART1->CR1 = USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;	//para pruebas TX
 1367              		.loc 2 390 0
 1368 0034 0B4B     		ldr	r3, .L68+24	@ D.5571,
 1369 0036 2D22     		movs	r2, #45	@ tmp129,
 1370 0038 1A60     		str	r2, [r3]	@ tmp129, _16->CR1
 391:src/uart.c    **** 
 392:src/uart.c    **** 	NVIC_EnableIRQ(USART1_IRQn);
 1371              		.loc 2 392 0
 1372 003a 1B20     		movs	r0, #27	@,
 1373 003c FFF7FEFF 		bl	NVIC_EnableIRQ	@
 393:src/uart.c    **** 	NVIC_SetPriority(USART1_IRQn, 5);
 1374              		.loc 2 393 0
 1375 0040 0521     		movs	r1, #5	@,
 1376 0042 1B20     		movs	r0, #27	@,
 1377 0044 FFF7FEFF 		bl	NVIC_SetPriority	@
 394:src/uart.c    **** }
 1378              		.loc 2 394 0
 1379 0048 C046     		nop
 1380              		@ sp needed	@
 1381 004a 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccfZifSa.s 			page 48


 1382              	.L69:
 1383              		.align	2
 1384              	.L68:
 1385 004c 00100240 		.word	1073876992
 1386 0050 00000000 		.word	ptx1
 1387 0054 00000000 		.word	tx1buff
 1388 0058 00000000 		.word	ptx1_pckt_index
 1389 005c 00000000 		.word	prx1
 1390 0060 00000000 		.word	rx1buff
 1391 0064 00380140 		.word	1073821696
 1392 0068 88130000 		.word	5000
 1393              		.cfi_endproc
 1394              	.LFE32:
 1395              		.size	USART1Config, .-USART1Config
 1396              		.text
 1397              	.Letext0:
 1398              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1399              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1400              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1401              		.section	.debug_info,"",%progbits
 1402              	.Ldebug_info0:
 1403 0000 780A0000 		.4byte	0xa78
 1404 0004 0200     		.2byte	0x2
 1405 0006 00000000 		.4byte	.Ldebug_abbrev0
 1406 000a 04       		.byte	0x4
 1407 000b 01       		.uleb128 0x1
 1408 000c 82050000 		.4byte	.LASF131
 1409 0010 0C       		.byte	0xc
 1410 0011 84010000 		.4byte	.LASF132
 1411 0015 CD040000 		.4byte	.LASF133
 1412 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1413 001d 00000000 		.4byte	0
 1414 0021 00000000 		.4byte	0
 1415 0025 00000000 		.4byte	.Ldebug_line0
 1416 0029 02       		.uleb128 0x2
 1417 002a 01       		.byte	0x1
 1418 002b 08       		.byte	0x8
 1419 002c 30050000 		.4byte	.LASF34
 1420 0030 03       		.uleb128 0x3
 1421 0031 50030000 		.4byte	.LASF92
 1422 0035 01       		.byte	0x1
 1423 0036 0D010000 		.4byte	0x10d
 1424 003a 03       		.byte	0x3
 1425 003b C7       		.byte	0xc7
 1426 003c 0D010000 		.4byte	0x10d
 1427 0040 04       		.uleb128 0x4
 1428 0041 DA030000 		.4byte	.LASF0
 1429 0045 72       		.sleb128 -14
 1430 0046 04       		.uleb128 0x4
 1431 0047 32060000 		.4byte	.LASF1
 1432 004b 73       		.sleb128 -13
 1433 004c 04       		.uleb128 0x4
 1434 004d 46000000 		.4byte	.LASF2
 1435 0051 7B       		.sleb128 -5
 1436 0052 04       		.uleb128 0x4
 1437 0053 E3000000 		.4byte	.LASF3
 1438 0057 7E       		.sleb128 -2
ARM GAS  /tmp/ccfZifSa.s 			page 49


 1439 0058 04       		.uleb128 0x4
 1440 0059 7C040000 		.4byte	.LASF4
 1441 005d 7F       		.sleb128 -1
 1442 005e 05       		.uleb128 0x5
 1443 005f 67020000 		.4byte	.LASF5
 1444 0063 00       		.byte	0
 1445 0064 05       		.uleb128 0x5
 1446 0065 CA020000 		.4byte	.LASF6
 1447 0069 01       		.byte	0x1
 1448 006a 05       		.uleb128 0x5
 1449 006b 76030000 		.4byte	.LASF7
 1450 006f 02       		.byte	0x2
 1451 0070 05       		.uleb128 0x5
 1452 0071 A9000000 		.4byte	.LASF8
 1453 0075 03       		.byte	0x3
 1454 0076 05       		.uleb128 0x5
 1455 0077 EF000000 		.4byte	.LASF9
 1456 007b 04       		.byte	0x4
 1457 007c 05       		.uleb128 0x5
 1458 007d CC000000 		.4byte	.LASF10
 1459 0081 05       		.byte	0x5
 1460 0082 05       		.uleb128 0x5
 1461 0083 2B000000 		.4byte	.LASF11
 1462 0087 06       		.byte	0x6
 1463 0088 05       		.uleb128 0x5
 1464 0089 08000000 		.4byte	.LASF12
 1465 008d 07       		.byte	0x7
 1466 008e 05       		.uleb128 0x5
 1467 008f 9C020000 		.4byte	.LASF13
 1468 0093 08       		.byte	0x8
 1469 0094 05       		.uleb128 0x5
 1470 0095 0F020000 		.4byte	.LASF14
 1471 0099 09       		.byte	0x9
 1472 009a 05       		.uleb128 0x5
 1473 009b 0D050000 		.4byte	.LASF15
 1474 009f 0A       		.byte	0xa
 1475 00a0 05       		.uleb128 0x5
 1476 00a1 2B040000 		.4byte	.LASF16
 1477 00a5 0B       		.byte	0xb
 1478 00a6 05       		.uleb128 0x5
 1479 00a7 E4020000 		.4byte	.LASF17
 1480 00ab 0C       		.byte	0xc
 1481 00ac 05       		.uleb128 0x5
 1482 00ad A4020000 		.4byte	.LASF18
 1483 00b1 0D       		.byte	0xd
 1484 00b2 05       		.uleb128 0x5
 1485 00b3 07040000 		.4byte	.LASF19
 1486 00b7 0E       		.byte	0xe
 1487 00b8 05       		.uleb128 0x5
 1488 00b9 BC040000 		.4byte	.LASF20
 1489 00bd 0F       		.byte	0xf
 1490 00be 05       		.uleb128 0x5
 1491 00bf 05020000 		.4byte	.LASF21
 1492 00c3 10       		.byte	0x10
 1493 00c4 05       		.uleb128 0x5
 1494 00c5 22050000 		.4byte	.LASF22
 1495 00c9 11       		.byte	0x11
ARM GAS  /tmp/ccfZifSa.s 			page 50


 1496 00ca 05       		.uleb128 0x5
 1497 00cb 02050000 		.4byte	.LASF23
 1498 00cf 13       		.byte	0x13
 1499 00d0 05       		.uleb128 0x5
 1500 00d1 31020000 		.4byte	.LASF24
 1501 00d5 14       		.byte	0x14
 1502 00d6 05       		.uleb128 0x5
 1503 00d7 91000000 		.4byte	.LASF25
 1504 00db 15       		.byte	0x15
 1505 00dc 05       		.uleb128 0x5
 1506 00dd 20040000 		.4byte	.LASF26
 1507 00e1 16       		.byte	0x16
 1508 00e2 05       		.uleb128 0x5
 1509 00e3 D9000000 		.4byte	.LASF27
 1510 00e7 17       		.byte	0x17
 1511 00e8 05       		.uleb128 0x5
 1512 00e9 A0040000 		.4byte	.LASF28
 1513 00ed 18       		.byte	0x18
 1514 00ee 05       		.uleb128 0x5
 1515 00ef 21010000 		.4byte	.LASF29
 1516 00f3 19       		.byte	0x19
 1517 00f4 05       		.uleb128 0x5
 1518 00f5 59050000 		.4byte	.LASF30
 1519 00f9 1A       		.byte	0x1a
 1520 00fa 05       		.uleb128 0x5
 1521 00fb CE030000 		.4byte	.LASF31
 1522 00ff 1B       		.byte	0x1b
 1523 0100 05       		.uleb128 0x5
 1524 0101 A4010000 		.4byte	.LASF32
 1525 0105 1C       		.byte	0x1c
 1526 0106 05       		.uleb128 0x5
 1527 0107 89040000 		.4byte	.LASF33
 1528 010b 1E       		.byte	0x1e
 1529 010c 00       		.byte	0
 1530 010d 02       		.uleb128 0x2
 1531 010e 01       		.byte	0x1
 1532 010f 06       		.byte	0x6
 1533 0110 63050000 		.4byte	.LASF35
 1534 0114 06       		.uleb128 0x6
 1535 0115 95010000 		.4byte	.LASF37
 1536 0119 03       		.byte	0x3
 1537 011a 5F01     		.2byte	0x15f
 1538 011c 30000000 		.4byte	0x30
 1539 0120 02       		.uleb128 0x2
 1540 0121 02       		.byte	0x2
 1541 0122 05       		.byte	0x5
 1542 0123 BB030000 		.4byte	.LASF36
 1543 0127 07       		.uleb128 0x7
 1544 0128 79010000 		.4byte	.LASF38
 1545 012c 04       		.byte	0x4
 1546 012d 2B       		.byte	0x2b
 1547 012e 32010000 		.4byte	0x132
 1548 0132 02       		.uleb128 0x2
 1549 0133 02       		.byte	0x2
 1550 0134 07       		.byte	0x7
 1551 0135 6F050000 		.4byte	.LASF39
 1552 0139 02       		.uleb128 0x2
ARM GAS  /tmp/ccfZifSa.s 			page 51


 1553 013a 04       		.byte	0x4
 1554 013b 05       		.byte	0x5
 1555 013c C5030000 		.4byte	.LASF40
 1556 0140 07       		.uleb128 0x7
 1557 0141 3E050000 		.4byte	.LASF41
 1558 0145 04       		.byte	0x4
 1559 0146 41       		.byte	0x41
 1560 0147 4B010000 		.4byte	0x14b
 1561 014b 02       		.uleb128 0x2
 1562 014c 04       		.byte	0x4
 1563 014d 07       		.byte	0x7
 1564 014e AA040000 		.4byte	.LASF42
 1565 0152 02       		.uleb128 0x2
 1566 0153 08       		.byte	0x8
 1567 0154 05       		.byte	0x5
 1568 0155 59020000 		.4byte	.LASF43
 1569 0159 02       		.uleb128 0x2
 1570 015a 08       		.byte	0x8
 1571 015b 07       		.byte	0x7
 1572 015c 3A010000 		.4byte	.LASF44
 1573 0160 08       		.uleb128 0x8
 1574 0161 04       		.byte	0x4
 1575 0162 05       		.byte	0x5
 1576 0163 696E7400 		.ascii	"int\000"
 1577 0167 02       		.uleb128 0x2
 1578 0168 04       		.byte	0x4
 1579 0169 07       		.byte	0x7
 1580 016a 84000000 		.4byte	.LASF45
 1581 016e 07       		.uleb128 0x7
 1582 016f 47030000 		.4byte	.LASF46
 1583 0173 05       		.byte	0x5
 1584 0174 1A       		.byte	0x1a
 1585 0175 27010000 		.4byte	0x127
 1586 0179 07       		.uleb128 0x7
 1587 017a 02010000 		.4byte	.LASF47
 1588 017e 05       		.byte	0x5
 1589 017f 20       		.byte	0x20
 1590 0180 40010000 		.4byte	0x140
 1591 0184 09       		.uleb128 0x9
 1592 0185 2003     		.2byte	0x320
 1593 0187 01       		.byte	0x1
 1594 0188 71       		.byte	0x71
 1595 0189 21020000 		.4byte	0x221
 1596 018d 0A       		.uleb128 0xa
 1597 018e 13010000 		.4byte	.LASF48
 1598 0192 01       		.byte	0x1
 1599 0193 73       		.byte	0x73
 1600 0194 38020000 		.4byte	0x238
 1601 0198 02       		.byte	0x2
 1602 0199 23       		.byte	0x23
 1603 019a 00       		.uleb128 0
 1604 019b 0A       		.uleb128 0xa
 1605 019c 7F030000 		.4byte	.LASF49
 1606 01a0 01       		.byte	0x1
 1607 01a1 74       		.byte	0x74
 1608 01a2 3D020000 		.4byte	0x23d
 1609 01a6 02       		.byte	0x2
ARM GAS  /tmp/ccfZifSa.s 			page 52


 1610 01a7 23       		.byte	0x23
 1611 01a8 04       		.uleb128 0x4
 1612 01a9 0A       		.uleb128 0xa
 1613 01aa 54050000 		.4byte	.LASF50
 1614 01ae 01       		.byte	0x1
 1615 01af 75       		.byte	0x75
 1616 01b0 4D020000 		.4byte	0x24d
 1617 01b4 03       		.byte	0x3
 1618 01b5 23       		.byte	0x23
 1619 01b6 8001     		.uleb128 0x80
 1620 01b8 0A       		.uleb128 0xa
 1621 01b9 18010000 		.4byte	.LASF51
 1622 01bd 01       		.byte	0x1
 1623 01be 76       		.byte	0x76
 1624 01bf 3D020000 		.4byte	0x23d
 1625 01c3 03       		.byte	0x3
 1626 01c4 23       		.byte	0x23
 1627 01c5 8401     		.uleb128 0x84
 1628 01c7 0A       		.uleb128 0xa
 1629 01c8 41060000 		.4byte	.LASF52
 1630 01cc 01       		.byte	0x1
 1631 01cd 77       		.byte	0x77
 1632 01ce 52020000 		.4byte	0x252
 1633 01d2 03       		.byte	0x3
 1634 01d3 23       		.byte	0x23
 1635 01d4 8002     		.uleb128 0x100
 1636 01d6 0A       		.uleb128 0xa
 1637 01d7 93030000 		.4byte	.LASF53
 1638 01db 01       		.byte	0x1
 1639 01dc 78       		.byte	0x78
 1640 01dd 3D020000 		.4byte	0x23d
 1641 01e1 03       		.byte	0x3
 1642 01e2 23       		.byte	0x23
 1643 01e3 8402     		.uleb128 0x104
 1644 01e5 0A       		.uleb128 0xa
 1645 01e6 DF020000 		.4byte	.LASF54
 1646 01ea 01       		.byte	0x1
 1647 01eb 79       		.byte	0x79
 1648 01ec 57020000 		.4byte	0x257
 1649 01f0 03       		.byte	0x3
 1650 01f1 23       		.byte	0x23
 1651 01f2 8003     		.uleb128 0x180
 1652 01f4 0A       		.uleb128 0xa
 1653 01f5 9D030000 		.4byte	.LASF55
 1654 01f9 01       		.byte	0x1
 1655 01fa 7A       		.byte	0x7a
 1656 01fb 3D020000 		.4byte	0x23d
 1657 01ff 03       		.byte	0x3
 1658 0200 23       		.byte	0x23
 1659 0201 8403     		.uleb128 0x184
 1660 0203 0A       		.uleb128 0xa
 1661 0204 A7030000 		.4byte	.LASF56
 1662 0208 01       		.byte	0x1
 1663 0209 7B       		.byte	0x7b
 1664 020a 5C020000 		.4byte	0x25c
 1665 020e 03       		.byte	0x3
 1666 020f 23       		.byte	0x23
ARM GAS  /tmp/ccfZifSa.s 			page 53


 1667 0210 8004     		.uleb128 0x200
 1668 0212 0B       		.uleb128 0xb
 1669 0213 495000   		.ascii	"IP\000"
 1670 0216 01       		.byte	0x1
 1671 0217 7C       		.byte	0x7c
 1672 0218 7C020000 		.4byte	0x27c
 1673 021c 03       		.byte	0x3
 1674 021d 23       		.byte	0x23
 1675 021e 8006     		.uleb128 0x300
 1676 0220 00       		.byte	0
 1677 0221 0C       		.uleb128 0xc
 1678 0222 79010000 		.4byte	0x179
 1679 0226 31020000 		.4byte	0x231
 1680 022a 0D       		.uleb128 0xd
 1681 022b 31020000 		.4byte	0x231
 1682 022f 00       		.byte	0
 1683 0230 00       		.byte	0
 1684 0231 02       		.uleb128 0x2
 1685 0232 04       		.byte	0x4
 1686 0233 07       		.byte	0x7
 1687 0234 92040000 		.4byte	.LASF57
 1688 0238 0E       		.uleb128 0xe
 1689 0239 21020000 		.4byte	0x221
 1690 023d 0C       		.uleb128 0xc
 1691 023e 79010000 		.4byte	0x179
 1692 0242 4D020000 		.4byte	0x24d
 1693 0246 0D       		.uleb128 0xd
 1694 0247 31020000 		.4byte	0x231
 1695 024b 1E       		.byte	0x1e
 1696 024c 00       		.byte	0
 1697 024d 0E       		.uleb128 0xe
 1698 024e 21020000 		.4byte	0x221
 1699 0252 0E       		.uleb128 0xe
 1700 0253 21020000 		.4byte	0x221
 1701 0257 0E       		.uleb128 0xe
 1702 0258 21020000 		.4byte	0x221
 1703 025c 0C       		.uleb128 0xc
 1704 025d 79010000 		.4byte	0x179
 1705 0261 6C020000 		.4byte	0x26c
 1706 0265 0D       		.uleb128 0xd
 1707 0266 31020000 		.4byte	0x231
 1708 026a 3F       		.byte	0x3f
 1709 026b 00       		.byte	0
 1710 026c 0C       		.uleb128 0xc
 1711 026d 79010000 		.4byte	0x179
 1712 0271 7C020000 		.4byte	0x27c
 1713 0275 0D       		.uleb128 0xd
 1714 0276 31020000 		.4byte	0x231
 1715 027a 07       		.byte	0x7
 1716 027b 00       		.byte	0
 1717 027c 0E       		.uleb128 0xe
 1718 027d 6C020000 		.4byte	0x26c
 1719 0281 07       		.uleb128 0x7
 1720 0282 40040000 		.4byte	.LASF58
 1721 0286 01       		.byte	0x1
 1722 0287 7D       		.byte	0x7d
 1723 0288 84010000 		.4byte	0x184
ARM GAS  /tmp/ccfZifSa.s 			page 54


 1724 028c 0F       		.uleb128 0xf
 1725 028d 34       		.byte	0x34
 1726 028e 01       		.byte	0x1
 1727 028f 86       		.byte	0x86
 1728 0290 2F030000 		.4byte	0x32f
 1729 0294 0A       		.uleb128 0xa
 1730 0295 B0010000 		.4byte	.LASF59
 1731 0299 01       		.byte	0x1
 1732 029a 88       		.byte	0x88
 1733 029b 34030000 		.4byte	0x334
 1734 029f 02       		.byte	0x2
 1735 02a0 23       		.byte	0x23
 1736 02a1 00       		.uleb128 0
 1737 02a2 0A       		.uleb128 0xa
 1738 02a3 9B040000 		.4byte	.LASF60
 1739 02a7 01       		.byte	0x1
 1740 02a8 89       		.byte	0x89
 1741 02a9 2F030000 		.4byte	0x32f
 1742 02ad 02       		.byte	0x2
 1743 02ae 23       		.byte	0x23
 1744 02af 04       		.uleb128 0x4
 1745 02b0 0A       		.uleb128 0xa
 1746 02b1 7F030000 		.4byte	.LASF49
 1747 02b5 01       		.byte	0x1
 1748 02b6 8A       		.byte	0x8a
 1749 02b7 79010000 		.4byte	0x179
 1750 02bb 02       		.byte	0x2
 1751 02bc 23       		.byte	0x23
 1752 02bd 08       		.uleb128 0x8
 1753 02be 0A       		.uleb128 0xa
 1754 02bf FF010000 		.4byte	.LASF61
 1755 02c3 01       		.byte	0x1
 1756 02c4 8B       		.byte	0x8b
 1757 02c5 2F030000 		.4byte	0x32f
 1758 02c9 02       		.byte	0x2
 1759 02ca 23       		.byte	0x23
 1760 02cb 0C       		.uleb128 0xc
 1761 02cc 0B       		.uleb128 0xb
 1762 02cd 53435200 		.ascii	"SCR\000"
 1763 02d1 01       		.byte	0x1
 1764 02d2 8C       		.byte	0x8c
 1765 02d3 2F030000 		.4byte	0x32f
 1766 02d7 02       		.byte	0x2
 1767 02d8 23       		.byte	0x23
 1768 02d9 10       		.uleb128 0x10
 1769 02da 0B       		.uleb128 0xb
 1770 02db 43435200 		.ascii	"CCR\000"
 1771 02df 01       		.byte	0x1
 1772 02e0 8D       		.byte	0x8d
 1773 02e1 2F030000 		.4byte	0x32f
 1774 02e5 02       		.byte	0x2
 1775 02e6 23       		.byte	0x23
 1776 02e7 14       		.uleb128 0x14
 1777 02e8 0A       		.uleb128 0xa
 1778 02e9 89030000 		.4byte	.LASF62
 1779 02ed 01       		.byte	0x1
 1780 02ee 8E       		.byte	0x8e
ARM GAS  /tmp/ccfZifSa.s 			page 55


 1781 02ef 79010000 		.4byte	0x179
 1782 02f3 02       		.byte	0x2
 1783 02f4 23       		.byte	0x23
 1784 02f5 18       		.uleb128 0x18
 1785 02f6 0B       		.uleb128 0xb
 1786 02f7 53485000 		.ascii	"SHP\000"
 1787 02fb 01       		.byte	0x1
 1788 02fc 8F       		.byte	0x8f
 1789 02fd 49030000 		.4byte	0x349
 1790 0301 02       		.byte	0x2
 1791 0302 23       		.byte	0x23
 1792 0303 1C       		.uleb128 0x1c
 1793 0304 0A       		.uleb128 0xa
 1794 0305 71020000 		.4byte	.LASF63
 1795 0309 01       		.byte	0x1
 1796 030a 90       		.byte	0x90
 1797 030b 2F030000 		.4byte	0x32f
 1798 030f 02       		.byte	0x2
 1799 0310 23       		.byte	0x23
 1800 0311 24       		.uleb128 0x24
 1801 0312 0A       		.uleb128 0xa
 1802 0313 93030000 		.4byte	.LASF53
 1803 0317 01       		.byte	0x1
 1804 0318 91       		.byte	0x91
 1805 0319 39030000 		.4byte	0x339
 1806 031d 02       		.byte	0x2
 1807 031e 23       		.byte	0x23
 1808 031f 28       		.uleb128 0x28
 1809 0320 0A       		.uleb128 0xa
 1810 0321 67010000 		.4byte	.LASF64
 1811 0325 01       		.byte	0x1
 1812 0326 92       		.byte	0x92
 1813 0327 2F030000 		.4byte	0x32f
 1814 032b 02       		.byte	0x2
 1815 032c 23       		.byte	0x23
 1816 032d 30       		.uleb128 0x30
 1817 032e 00       		.byte	0
 1818 032f 0E       		.uleb128 0xe
 1819 0330 79010000 		.4byte	0x179
 1820 0334 10       		.uleb128 0x10
 1821 0335 2F030000 		.4byte	0x32f
 1822 0339 0C       		.uleb128 0xc
 1823 033a 79010000 		.4byte	0x179
 1824 033e 49030000 		.4byte	0x349
 1825 0342 0D       		.uleb128 0xd
 1826 0343 31020000 		.4byte	0x231
 1827 0347 01       		.byte	0x1
 1828 0348 00       		.byte	0
 1829 0349 0E       		.uleb128 0xe
 1830 034a 39030000 		.4byte	0x339
 1831 034e 07       		.uleb128 0x7
 1832 034f 4A040000 		.4byte	.LASF65
 1833 0353 01       		.byte	0x1
 1834 0354 93       		.byte	0x93
 1835 0355 8C020000 		.4byte	0x28c
 1836 0359 0E       		.uleb128 0xe
 1837 035a 6E010000 		.4byte	0x16e
ARM GAS  /tmp/ccfZifSa.s 			page 56


 1838 035e 11       		.uleb128 0x11
 1839 035f 2C       		.byte	0x2c
 1840 0360 03       		.byte	0x3
 1841 0361 6902     		.2byte	0x269
 1842 0363 3A040000 		.4byte	0x43a
 1843 0367 12       		.uleb128 0x12
 1844 0368 8F010000 		.4byte	.LASF66
 1845 036c 03       		.byte	0x3
 1846 036d 6B02     		.2byte	0x26b
 1847 036f 2F030000 		.4byte	0x32f
 1848 0373 02       		.byte	0x2
 1849 0374 23       		.byte	0x23
 1850 0375 00       		.uleb128 0
 1851 0376 12       		.uleb128 0x12
 1852 0377 14040000 		.4byte	.LASF67
 1853 037b 03       		.byte	0x3
 1854 037c 6C02     		.2byte	0x26c
 1855 037e 59030000 		.4byte	0x359
 1856 0382 02       		.byte	0x2
 1857 0383 23       		.byte	0x23
 1858 0384 04       		.uleb128 0x4
 1859 0385 12       		.uleb128 0x12
 1860 0386 7F030000 		.4byte	.LASF49
 1861 038a 03       		.byte	0x3
 1862 038b 6D02     		.2byte	0x26d
 1863 038d 6E010000 		.4byte	0x16e
 1864 0391 02       		.byte	0x2
 1865 0392 23       		.byte	0x23
 1866 0393 06       		.uleb128 0x6
 1867 0394 12       		.uleb128 0x12
 1868 0395 28030000 		.4byte	.LASF68
 1869 0399 03       		.byte	0x3
 1870 039a 6E02     		.2byte	0x26e
 1871 039c 2F030000 		.4byte	0x32f
 1872 03a0 02       		.byte	0x2
 1873 03a1 23       		.byte	0x23
 1874 03a2 08       		.uleb128 0x8
 1875 03a3 12       		.uleb128 0x12
 1876 03a4 EB010000 		.4byte	.LASF69
 1877 03a8 03       		.byte	0x3
 1878 03a9 6F02     		.2byte	0x26f
 1879 03ab 2F030000 		.4byte	0x32f
 1880 03af 02       		.byte	0x2
 1881 03b0 23       		.byte	0x23
 1882 03b1 0C       		.uleb128 0xc
 1883 03b2 13       		.uleb128 0x13
 1884 03b3 49445200 		.ascii	"IDR\000"
 1885 03b7 03       		.byte	0x3
 1886 03b8 7002     		.2byte	0x270
 1887 03ba 59030000 		.4byte	0x359
 1888 03be 02       		.byte	0x2
 1889 03bf 23       		.byte	0x23
 1890 03c0 10       		.uleb128 0x10
 1891 03c1 12       		.uleb128 0x12
 1892 03c2 89030000 		.4byte	.LASF62
 1893 03c6 03       		.byte	0x3
 1894 03c7 7102     		.2byte	0x271
ARM GAS  /tmp/ccfZifSa.s 			page 57


 1895 03c9 6E010000 		.4byte	0x16e
 1896 03cd 02       		.byte	0x2
 1897 03ce 23       		.byte	0x23
 1898 03cf 12       		.uleb128 0x12
 1899 03d0 13       		.uleb128 0x13
 1900 03d1 4F445200 		.ascii	"ODR\000"
 1901 03d5 03       		.byte	0x3
 1902 03d6 7202     		.2byte	0x272
 1903 03d8 59030000 		.4byte	0x359
 1904 03dc 02       		.byte	0x2
 1905 03dd 23       		.byte	0x23
 1906 03de 14       		.uleb128 0x14
 1907 03df 12       		.uleb128 0x12
 1908 03e0 93030000 		.4byte	.LASF53
 1909 03e4 03       		.byte	0x3
 1910 03e5 7302     		.2byte	0x273
 1911 03e7 6E010000 		.4byte	0x16e
 1912 03eb 02       		.byte	0x2
 1913 03ec 23       		.byte	0x23
 1914 03ed 16       		.uleb128 0x16
 1915 03ee 12       		.uleb128 0x12
 1916 03ef 16000000 		.4byte	.LASF70
 1917 03f3 03       		.byte	0x3
 1918 03f4 7402     		.2byte	0x274
 1919 03f6 2F030000 		.4byte	0x32f
 1920 03fa 02       		.byte	0x2
 1921 03fb 23       		.byte	0x23
 1922 03fc 18       		.uleb128 0x18
 1923 03fd 12       		.uleb128 0x12
 1924 03fe 58060000 		.4byte	.LASF71
 1925 0402 03       		.byte	0x3
 1926 0403 7502     		.2byte	0x275
 1927 0405 2F030000 		.4byte	0x32f
 1928 0409 02       		.byte	0x2
 1929 040a 23       		.byte	0x23
 1930 040b 1C       		.uleb128 0x1c
 1931 040c 13       		.uleb128 0x13
 1932 040d 41465200 		.ascii	"AFR\000"
 1933 0411 03       		.byte	0x3
 1934 0412 7602     		.2byte	0x276
 1935 0414 3A040000 		.4byte	0x43a
 1936 0418 02       		.byte	0x2
 1937 0419 23       		.byte	0x23
 1938 041a 20       		.uleb128 0x20
 1939 041b 13       		.uleb128 0x13
 1940 041c 42525200 		.ascii	"BRR\000"
 1941 0420 03       		.byte	0x3
 1942 0421 7702     		.2byte	0x277
 1943 0423 59030000 		.4byte	0x359
 1944 0427 02       		.byte	0x2
 1945 0428 23       		.byte	0x23
 1946 0429 28       		.uleb128 0x28
 1947 042a 12       		.uleb128 0x12
 1948 042b 9D030000 		.4byte	.LASF55
 1949 042f 03       		.byte	0x3
 1950 0430 7802     		.2byte	0x278
 1951 0432 6E010000 		.4byte	0x16e
ARM GAS  /tmp/ccfZifSa.s 			page 58


 1952 0436 02       		.byte	0x2
 1953 0437 23       		.byte	0x23
 1954 0438 2A       		.uleb128 0x2a
 1955 0439 00       		.byte	0
 1956 043a 0E       		.uleb128 0xe
 1957 043b 39030000 		.4byte	0x339
 1958 043f 06       		.uleb128 0x6
 1959 0440 64040000 		.4byte	.LASF72
 1960 0444 03       		.byte	0x3
 1961 0445 7902     		.2byte	0x279
 1962 0447 5E030000 		.4byte	0x35e
 1963 044b 11       		.uleb128 0x11
 1964 044c 38       		.byte	0x38
 1965 044d 03       		.byte	0x3
 1966 044e B502     		.2byte	0x2b5
 1967 0450 26050000 		.4byte	0x526
 1968 0454 13       		.uleb128 0x13
 1969 0455 435200   		.ascii	"CR\000"
 1970 0458 03       		.byte	0x3
 1971 0459 B702     		.2byte	0x2b7
 1972 045b 2F030000 		.4byte	0x32f
 1973 045f 02       		.byte	0x2
 1974 0460 23       		.byte	0x23
 1975 0461 00       		.uleb128 0
 1976 0462 12       		.uleb128 0x12
 1977 0463 1B040000 		.4byte	.LASF73
 1978 0467 03       		.byte	0x3
 1979 0468 B802     		.2byte	0x2b8
 1980 046a 2F030000 		.4byte	0x32f
 1981 046e 02       		.byte	0x2
 1982 046f 23       		.byte	0x23
 1983 0470 04       		.uleb128 0x4
 1984 0471 13       		.uleb128 0x13
 1985 0472 43495200 		.ascii	"CIR\000"
 1986 0476 03       		.byte	0x3
 1987 0477 B902     		.2byte	0x2b9
 1988 0479 2F030000 		.4byte	0x32f
 1989 047d 02       		.byte	0x2
 1990 047e 23       		.byte	0x23
 1991 047f 08       		.uleb128 0x8
 1992 0480 12       		.uleb128 0x12
 1993 0481 3D000000 		.4byte	.LASF74
 1994 0485 03       		.byte	0x3
 1995 0486 BA02     		.2byte	0x2ba
 1996 0488 2F030000 		.4byte	0x32f
 1997 048c 02       		.byte	0x2
 1998 048d 23       		.byte	0x23
 1999 048e 0C       		.uleb128 0xc
 2000 048f 12       		.uleb128 0x12
 2001 0490 F1010000 		.4byte	.LASF75
 2002 0494 03       		.byte	0x3
 2003 0495 BB02     		.2byte	0x2bb
 2004 0497 2F030000 		.4byte	0x32f
 2005 049b 02       		.byte	0x2
 2006 049c 23       		.byte	0x23
 2007 049d 10       		.uleb128 0x10
 2008 049e 12       		.uleb128 0x12
ARM GAS  /tmp/ccfZifSa.s 			page 59


 2009 049f 22020000 		.4byte	.LASF76
 2010 04a3 03       		.byte	0x3
 2011 04a4 BC02     		.2byte	0x2bc
 2012 04a6 2F030000 		.4byte	0x32f
 2013 04aa 02       		.byte	0x2
 2014 04ab 23       		.byte	0x23
 2015 04ac 14       		.uleb128 0x14
 2016 04ad 12       		.uleb128 0x12
 2017 04ae F3020000 		.4byte	.LASF77
 2018 04b2 03       		.byte	0x3
 2019 04b3 BD02     		.2byte	0x2bd
 2020 04b5 2F030000 		.4byte	0x32f
 2021 04b9 02       		.byte	0x2
 2022 04ba 23       		.byte	0x23
 2023 04bb 18       		.uleb128 0x18
 2024 04bc 12       		.uleb128 0x12
 2025 04bd 00000000 		.4byte	.LASF78
 2026 04c1 03       		.byte	0x3
 2027 04c2 BE02     		.2byte	0x2be
 2028 04c4 2F030000 		.4byte	0x32f
 2029 04c8 02       		.byte	0x2
 2030 04c9 23       		.byte	0x23
 2031 04ca 1C       		.uleb128 0x1c
 2032 04cb 12       		.uleb128 0x12
 2033 04cc 9C000000 		.4byte	.LASF79
 2034 04d0 03       		.byte	0x3
 2035 04d1 BF02     		.2byte	0x2bf
 2036 04d3 2F030000 		.4byte	0x32f
 2037 04d7 02       		.byte	0x2
 2038 04d8 23       		.byte	0x23
 2039 04d9 20       		.uleb128 0x20
 2040 04da 13       		.uleb128 0x13
 2041 04db 43535200 		.ascii	"CSR\000"
 2042 04df 03       		.byte	0x3
 2043 04e0 C002     		.2byte	0x2c0
 2044 04e2 2F030000 		.4byte	0x32f
 2045 04e6 02       		.byte	0x2
 2046 04e7 23       		.byte	0x23
 2047 04e8 24       		.uleb128 0x24
 2048 04e9 12       		.uleb128 0x12
 2049 04ea 0B010000 		.4byte	.LASF80
 2050 04ee 03       		.byte	0x3
 2051 04ef C102     		.2byte	0x2c1
 2052 04f1 2F030000 		.4byte	0x32f
 2053 04f5 02       		.byte	0x2
 2054 04f6 23       		.byte	0x23
 2055 04f7 28       		.uleb128 0x28
 2056 04f8 12       		.uleb128 0x12
 2057 04f9 D3020000 		.4byte	.LASF81
 2058 04fd 03       		.byte	0x3
 2059 04fe C202     		.2byte	0x2c2
 2060 0500 2F030000 		.4byte	0x32f
 2061 0504 02       		.byte	0x2
 2062 0505 23       		.byte	0x23
 2063 0506 2C       		.uleb128 0x2c
 2064 0507 12       		.uleb128 0x12
 2065 0508 D9020000 		.4byte	.LASF82
ARM GAS  /tmp/ccfZifSa.s 			page 60


 2066 050c 03       		.byte	0x3
 2067 050d C302     		.2byte	0x2c3
 2068 050f 2F030000 		.4byte	0x32f
 2069 0513 02       		.byte	0x2
 2070 0514 23       		.byte	0x23
 2071 0515 30       		.uleb128 0x30
 2072 0516 13       		.uleb128 0x13
 2073 0517 43523200 		.ascii	"CR2\000"
 2074 051b 03       		.byte	0x3
 2075 051c C402     		.2byte	0x2c4
 2076 051e 2F030000 		.4byte	0x32f
 2077 0522 02       		.byte	0x2
 2078 0523 23       		.byte	0x23
 2079 0524 34       		.uleb128 0x34
 2080 0525 00       		.byte	0
 2081 0526 06       		.uleb128 0x6
 2082 0527 B6010000 		.4byte	.LASF83
 2083 052b 03       		.byte	0x3
 2084 052c C502     		.2byte	0x2c5
 2085 052e 4B040000 		.4byte	0x44b
 2086 0532 11       		.uleb128 0x11
 2087 0533 2C       		.byte	0x2c
 2088 0534 03       		.byte	0x3
 2089 0535 4A03     		.2byte	0x34a
 2090 0537 2C060000 		.4byte	0x62c
 2091 053b 13       		.uleb128 0x13
 2092 053c 43523100 		.ascii	"CR1\000"
 2093 0540 03       		.byte	0x3
 2094 0541 4C03     		.2byte	0x34c
 2095 0543 2F030000 		.4byte	0x32f
 2096 0547 02       		.byte	0x2
 2097 0548 23       		.byte	0x23
 2098 0549 00       		.uleb128 0
 2099 054a 13       		.uleb128 0x13
 2100 054b 43523200 		.ascii	"CR2\000"
 2101 054f 03       		.byte	0x3
 2102 0550 4D03     		.2byte	0x34d
 2103 0552 2F030000 		.4byte	0x32f
 2104 0556 02       		.byte	0x2
 2105 0557 23       		.byte	0x23
 2106 0558 04       		.uleb128 0x4
 2107 0559 13       		.uleb128 0x13
 2108 055a 43523300 		.ascii	"CR3\000"
 2109 055e 03       		.byte	0x3
 2110 055f 4E03     		.2byte	0x34e
 2111 0561 2F030000 		.4byte	0x32f
 2112 0565 02       		.byte	0x2
 2113 0566 23       		.byte	0x23
 2114 0567 08       		.uleb128 0x8
 2115 0568 13       		.uleb128 0x13
 2116 0569 42525200 		.ascii	"BRR\000"
 2117 056d 03       		.byte	0x3
 2118 056e 4F03     		.2byte	0x34f
 2119 0570 59030000 		.4byte	0x359
 2120 0574 02       		.byte	0x2
 2121 0575 23       		.byte	0x23
 2122 0576 0C       		.uleb128 0xc
ARM GAS  /tmp/ccfZifSa.s 			page 61


 2123 0577 12       		.uleb128 0x12
 2124 0578 89030000 		.4byte	.LASF62
 2125 057c 03       		.byte	0x3
 2126 057d 5003     		.2byte	0x350
 2127 057f 6E010000 		.4byte	0x16e
 2128 0583 02       		.byte	0x2
 2129 0584 23       		.byte	0x23
 2130 0585 0E       		.uleb128 0xe
 2131 0586 12       		.uleb128 0x12
 2132 0587 F8000000 		.4byte	.LASF84
 2133 058b 03       		.byte	0x3
 2134 058c 5103     		.2byte	0x351
 2135 058e 59030000 		.4byte	0x359
 2136 0592 02       		.byte	0x2
 2137 0593 23       		.byte	0x23
 2138 0594 10       		.uleb128 0x10
 2139 0595 12       		.uleb128 0x12
 2140 0596 93030000 		.4byte	.LASF53
 2141 059a 03       		.byte	0x3
 2142 059b 5203     		.2byte	0x352
 2143 059d 6E010000 		.4byte	0x16e
 2144 05a1 02       		.byte	0x2
 2145 05a2 23       		.byte	0x23
 2146 05a3 12       		.uleb128 0x12
 2147 05a4 12       		.uleb128 0x12
 2148 05a5 3C020000 		.4byte	.LASF85
 2149 05a9 03       		.byte	0x3
 2150 05aa 5303     		.2byte	0x353
 2151 05ac 2F030000 		.4byte	0x32f
 2152 05b0 02       		.byte	0x2
 2153 05b1 23       		.byte	0x23
 2154 05b2 14       		.uleb128 0x14
 2155 05b3 13       		.uleb128 0x13
 2156 05b4 52515200 		.ascii	"RQR\000"
 2157 05b8 03       		.byte	0x3
 2158 05b9 5403     		.2byte	0x354
 2159 05bb 59030000 		.4byte	0x359
 2160 05bf 02       		.byte	0x2
 2161 05c0 23       		.byte	0x23
 2162 05c1 18       		.uleb128 0x18
 2163 05c2 12       		.uleb128 0x12
 2164 05c3 9D030000 		.4byte	.LASF55
 2165 05c7 03       		.byte	0x3
 2166 05c8 5503     		.2byte	0x355
 2167 05ca 6E010000 		.4byte	0x16e
 2168 05ce 02       		.byte	0x2
 2169 05cf 23       		.byte	0x23
 2170 05d0 1A       		.uleb128 0x1a
 2171 05d1 13       		.uleb128 0x13
 2172 05d2 49535200 		.ascii	"ISR\000"
 2173 05d6 03       		.byte	0x3
 2174 05d7 5603     		.2byte	0x356
 2175 05d9 2F030000 		.4byte	0x32f
 2176 05dd 02       		.byte	0x2
 2177 05de 23       		.byte	0x23
 2178 05df 1C       		.uleb128 0x1c
 2179 05e0 13       		.uleb128 0x13
ARM GAS  /tmp/ccfZifSa.s 			page 62


 2180 05e1 49435200 		.ascii	"ICR\000"
 2181 05e5 03       		.byte	0x3
 2182 05e6 5703     		.2byte	0x357
 2183 05e8 2F030000 		.4byte	0x32f
 2184 05ec 02       		.byte	0x2
 2185 05ed 23       		.byte	0x23
 2186 05ee 20       		.uleb128 0x20
 2187 05ef 13       		.uleb128 0x13
 2188 05f0 52445200 		.ascii	"RDR\000"
 2189 05f4 03       		.byte	0x3
 2190 05f5 5803     		.2byte	0x358
 2191 05f7 59030000 		.4byte	0x359
 2192 05fb 02       		.byte	0x2
 2193 05fc 23       		.byte	0x23
 2194 05fd 24       		.uleb128 0x24
 2195 05fe 12       		.uleb128 0x12
 2196 05ff A7030000 		.4byte	.LASF56
 2197 0603 03       		.byte	0x3
 2198 0604 5903     		.2byte	0x359
 2199 0606 6E010000 		.4byte	0x16e
 2200 060a 02       		.byte	0x2
 2201 060b 23       		.byte	0x23
 2202 060c 26       		.uleb128 0x26
 2203 060d 13       		.uleb128 0x13
 2204 060e 54445200 		.ascii	"TDR\000"
 2205 0612 03       		.byte	0x3
 2206 0613 5A03     		.2byte	0x35a
 2207 0615 59030000 		.4byte	0x359
 2208 0619 02       		.byte	0x2
 2209 061a 23       		.byte	0x23
 2210 061b 28       		.uleb128 0x28
 2211 061c 12       		.uleb128 0x12
 2212 061d B1030000 		.4byte	.LASF86
 2213 0621 03       		.byte	0x3
 2214 0622 5B03     		.2byte	0x35b
 2215 0624 6E010000 		.4byte	0x16e
 2216 0628 02       		.byte	0x2
 2217 0629 23       		.byte	0x23
 2218 062a 2A       		.uleb128 0x2a
 2219 062b 00       		.byte	0
 2220 062c 06       		.uleb128 0x6
 2221 062d CC010000 		.4byte	.LASF87
 2222 0631 03       		.byte	0x3
 2223 0632 5C03     		.2byte	0x35c
 2224 0634 32050000 		.4byte	0x532
 2225 0638 02       		.uleb128 0x2
 2226 0639 08       		.byte	0x8
 2227 063a 04       		.byte	0x4
 2228 063b 3B030000 		.4byte	.LASF88
 2229 063f 14       		.uleb128 0x14
 2230 0640 04       		.byte	0x4
 2231 0641 29000000 		.4byte	0x29
 2232 0645 14       		.uleb128 0x14
 2233 0646 04       		.byte	0x4
 2234 0647 4B060000 		.4byte	0x64b
 2235 064b 02       		.uleb128 0x2
 2236 064c 01       		.byte	0x1
ARM GAS  /tmp/ccfZifSa.s 			page 63


 2237 064d 08       		.byte	0x8
 2238 064e FA010000 		.4byte	.LASF89
 2239 0652 15       		.uleb128 0x15
 2240 0653 2B010000 		.4byte	.LASF90
 2241 0657 01       		.byte	0x1
 2242 0658 2B03     		.2byte	0x32b
 2243 065a 01       		.byte	0x1
 2244 065b 00000000 		.4byte	.LFB11
 2245 065f 2C000000 		.4byte	.LFE11
 2246 0663 00000000 		.4byte	.LLST0
 2247 0667 01       		.byte	0x1
 2248 0668 7C060000 		.4byte	0x67c
 2249 066c 16       		.uleb128 0x16
 2250 066d 50030000 		.4byte	.LASF92
 2251 0671 01       		.byte	0x1
 2252 0672 2B03     		.2byte	0x32b
 2253 0674 14010000 		.4byte	0x114
 2254 0678 02       		.byte	0x2
 2255 0679 91       		.byte	0x91
 2256 067a 7F       		.sleb128 -1
 2257 067b 00       		.byte	0
 2258 067c 15       		.uleb128 0x15
 2259 067d 73000000 		.4byte	.LASF91
 2260 0681 01       		.byte	0x1
 2261 0682 7C03     		.2byte	0x37c
 2262 0684 01       		.byte	0x1
 2263 0685 00000000 		.4byte	.LFB16
 2264 0689 EC000000 		.4byte	.LFE16
 2265 068d 20000000 		.4byte	.LLST1
 2266 0691 01       		.byte	0x1
 2267 0692 B5060000 		.4byte	0x6b5
 2268 0696 16       		.uleb128 0x16
 2269 0697 50030000 		.4byte	.LASF92
 2270 069b 01       		.byte	0x1
 2271 069c 7C03     		.2byte	0x37c
 2272 069e 14010000 		.4byte	0x114
 2273 06a2 02       		.byte	0x2
 2274 06a3 91       		.byte	0x91
 2275 06a4 6F       		.sleb128 -17
 2276 06a5 16       		.uleb128 0x16
 2277 06a6 FE030000 		.4byte	.LASF93
 2278 06aa 01       		.byte	0x1
 2279 06ab 7C03     		.2byte	0x37c
 2280 06ad 79010000 		.4byte	0x179
 2281 06b1 02       		.byte	0x2
 2282 06b2 91       		.byte	0x91
 2283 06b3 68       		.sleb128 -24
 2284 06b4 00       		.byte	0
 2285 06b5 17       		.uleb128 0x17
 2286 06b6 01       		.byte	0x1
 2287 06b7 4E020000 		.4byte	.LASF97
 2288 06bb 02       		.byte	0x2
 2289 06bc 51       		.byte	0x51
 2290 06bd 01       		.byte	0x1
 2291 06be 29000000 		.4byte	0x29
 2292 06c2 00000000 		.4byte	.LFB20
 2293 06c6 0C010000 		.4byte	.LFE20
ARM GAS  /tmp/ccfZifSa.s 			page 64


 2294 06ca 4C000000 		.4byte	.LLST2
 2295 06ce 01       		.byte	0x1
 2296 06cf FE060000 		.4byte	0x6fe
 2297 06d3 18       		.uleb128 0x18
 2298 06d4 51010000 		.4byte	.LASF94
 2299 06d8 02       		.byte	0x2
 2300 06d9 51       		.byte	0x51
 2301 06da 29000000 		.4byte	0x29
 2302 06de 02       		.byte	0x2
 2303 06df 91       		.byte	0x91
 2304 06e0 77       		.sleb128 -9
 2305 06e1 19       		.uleb128 0x19
 2306 06e2 0E030000 		.4byte	.LASF95
 2307 06e6 02       		.byte	0x2
 2308 06e7 53       		.byte	0x53
 2309 06e8 67010000 		.4byte	0x167
 2310 06ec 02       		.byte	0x2
 2311 06ed 91       		.byte	0x91
 2312 06ee 7C       		.sleb128 -4
 2313 06ef 19       		.uleb128 0x19
 2314 06f0 C2010000 		.4byte	.LASF96
 2315 06f4 02       		.byte	0x2
 2316 06f5 54       		.byte	0x54
 2317 06f6 67010000 		.4byte	0x167
 2318 06fa 02       		.byte	0x2
 2319 06fb 91       		.byte	0x91
 2320 06fc 78       		.sleb128 -8
 2321 06fd 00       		.byte	0
 2322 06fe 1A       		.uleb128 0x1a
 2323 06ff 01       		.byte	0x1
 2324 0700 8B020000 		.4byte	.LASF98
 2325 0704 02       		.byte	0x2
 2326 0705 87       		.byte	0x87
 2327 0706 01       		.byte	0x1
 2328 0707 29000000 		.4byte	0x29
 2329 070b 00000000 		.4byte	.LFB21
 2330 070f 78000000 		.4byte	.LFE21
 2331 0713 6C000000 		.4byte	.LLST3
 2332 0717 01       		.byte	0x1
 2333 0718 47070000 		.4byte	0x747
 2334 071c 18       		.uleb128 0x18
 2335 071d 2D060000 		.4byte	.LASF99
 2336 0721 02       		.byte	0x2
 2337 0722 87       		.byte	0x87
 2338 0723 3F060000 		.4byte	0x63f
 2339 0727 02       		.byte	0x2
 2340 0728 91       		.byte	0x91
 2341 0729 6C       		.sleb128 -20
 2342 072a 18       		.uleb128 0x18
 2343 072b C2020000 		.4byte	.LASF100
 2344 072f 02       		.byte	0x2
 2345 0730 87       		.byte	0x87
 2346 0731 32010000 		.4byte	0x132
 2347 0735 02       		.byte	0x2
 2348 0736 91       		.byte	0x91
 2349 0737 6A       		.sleb128 -22
 2350 0738 1B       		.uleb128 0x1b
ARM GAS  /tmp/ccfZifSa.s 			page 65


 2351 0739 6C656E00 		.ascii	"len\000"
 2352 073d 02       		.byte	0x2
 2353 073e 89       		.byte	0x89
 2354 073f 67010000 		.4byte	0x167
 2355 0743 02       		.byte	0x2
 2356 0744 91       		.byte	0x91
 2357 0745 74       		.sleb128 -12
 2358 0746 00       		.byte	0
 2359 0747 1C       		.uleb128 0x1c
 2360 0748 01       		.byte	0x1
 2361 0749 55030000 		.4byte	.LASF102
 2362 074d 02       		.byte	0x2
 2363 074e A1       		.byte	0xa1
 2364 074f 01       		.byte	0x1
 2365 0750 00000000 		.4byte	.LFB22
 2366 0754 18010000 		.4byte	.LFE22
 2367 0758 98000000 		.4byte	.LLST4
 2368 075c 01       		.byte	0x1
 2369 075d 70070000 		.4byte	0x770
 2370 0761 19       		.uleb128 0x19
 2371 0762 B4000000 		.4byte	.LASF101
 2372 0766 02       		.byte	0x2
 2373 0767 A3       		.byte	0xa3
 2374 0768 29000000 		.4byte	0x29
 2375 076c 02       		.byte	0x2
 2376 076d 91       		.byte	0x91
 2377 076e 7F       		.sleb128 -1
 2378 076f 00       		.byte	0
 2379 0770 1C       		.uleb128 0x1c
 2380 0771 01       		.byte	0x1
 2381 0772 46060000 		.4byte	.LASF103
 2382 0776 02       		.byte	0x2
 2383 0777 DE       		.byte	0xde
 2384 0778 01       		.byte	0x1
 2385 0779 00000000 		.4byte	.LFB23
 2386 077d C4000000 		.4byte	.LFE23
 2387 0781 B8000000 		.4byte	.LLST5
 2388 0785 01       		.byte	0x1
 2389 0786 99070000 		.4byte	0x799
 2390 078a 19       		.uleb128 0x19
 2391 078b B4000000 		.4byte	.LASF101
 2392 078f 02       		.byte	0x2
 2393 0790 E0       		.byte	0xe0
 2394 0791 29000000 		.4byte	0x29
 2395 0795 02       		.byte	0x2
 2396 0796 91       		.byte	0x91
 2397 0797 7F       		.sleb128 -1
 2398 0798 00       		.byte	0
 2399 0799 1D       		.uleb128 0x1d
 2400 079a 01       		.byte	0x1
 2401 079b 49050000 		.4byte	.LASF104
 2402 079f 02       		.byte	0x2
 2403 07a0 0F01     		.2byte	0x10f
 2404 07a2 01       		.byte	0x1
 2405 07a3 00000000 		.4byte	.LFB24
 2406 07a7 2C000000 		.4byte	.LFE24
 2407 07ab D8000000 		.4byte	.LLST6
ARM GAS  /tmp/ccfZifSa.s 			page 66


 2408 07af 01       		.byte	0x1
 2409 07b0 D1070000 		.4byte	0x7d1
 2410 07b4 16       		.uleb128 0x16
 2411 07b5 FD000000 		.4byte	.LASF105
 2412 07b9 02       		.byte	0x2
 2413 07ba 0F01     		.2byte	0x10f
 2414 07bc 45060000 		.4byte	0x645
 2415 07c0 02       		.byte	0x2
 2416 07c1 91       		.byte	0x91
 2417 07c2 6C       		.sleb128 -20
 2418 07c3 1E       		.uleb128 0x1e
 2419 07c4 6900     		.ascii	"i\000"
 2420 07c6 02       		.byte	0x2
 2421 07c7 1101     		.2byte	0x111
 2422 07c9 29000000 		.4byte	0x29
 2423 07cd 02       		.byte	0x2
 2424 07ce 91       		.byte	0x91
 2425 07cf 77       		.sleb128 -9
 2426 07d0 00       		.byte	0
 2427 07d1 1D       		.uleb128 0x1d
 2428 07d2 01       		.byte	0x1
 2429 07d3 FB020000 		.4byte	.LASF106
 2430 07d7 02       		.byte	0x2
 2431 07d8 1701     		.2byte	0x117
 2432 07da 01       		.byte	0x1
 2433 07db 00000000 		.4byte	.LFB25
 2434 07df 60000000 		.4byte	.LFE25
 2435 07e3 04010000 		.4byte	.LLST7
 2436 07e7 01       		.byte	0x1
 2437 07e8 0B080000 		.4byte	0x80b
 2438 07ec 16       		.uleb128 0x16
 2439 07ed FD000000 		.4byte	.LASF105
 2440 07f1 02       		.byte	0x2
 2441 07f2 1701     		.2byte	0x117
 2442 07f4 3F060000 		.4byte	0x63f
 2443 07f8 02       		.byte	0x2
 2444 07f9 91       		.byte	0x91
 2445 07fa 74       		.sleb128 -12
 2446 07fb 16       		.uleb128 0x16
 2447 07fc BD020000 		.4byte	.LASF107
 2448 0800 02       		.byte	0x2
 2449 0801 1701     		.2byte	0x117
 2450 0803 29000000 		.4byte	0x29
 2451 0807 02       		.byte	0x2
 2452 0808 91       		.byte	0x91
 2453 0809 73       		.sleb128 -13
 2454 080a 00       		.byte	0
 2455 080b 1D       		.uleb128 0x1d
 2456 080c 01       		.byte	0x1
 2457 080d 17030000 		.4byte	.LASF108
 2458 0811 02       		.byte	0x2
 2459 0812 2101     		.2byte	0x121
 2460 0814 01       		.byte	0x1
 2461 0815 00000000 		.4byte	.LFB26
 2462 0819 1E000000 		.4byte	.LFE26
 2463 081d 30010000 		.4byte	.LLST8
 2464 0821 01       		.byte	0x1
ARM GAS  /tmp/ccfZifSa.s 			page 67


 2465 0822 36080000 		.4byte	0x836
 2466 0826 16       		.uleb128 0x16
 2467 0827 C6040000 		.4byte	.LASF109
 2468 082b 02       		.byte	0x2
 2469 082c 2101     		.2byte	0x121
 2470 082e 29000000 		.4byte	0x29
 2471 0832 02       		.byte	0x2
 2472 0833 91       		.byte	0x91
 2473 0834 77       		.sleb128 -9
 2474 0835 00       		.byte	0
 2475 0836 1F       		.uleb128 0x1f
 2476 0837 01       		.byte	0x1
 2477 0838 4F000000 		.4byte	.LASF110
 2478 083c 02       		.byte	0x2
 2479 083d 2601     		.2byte	0x126
 2480 083f 01       		.byte	0x1
 2481 0840 29000000 		.4byte	0x29
 2482 0844 00000000 		.4byte	.LFB27
 2483 0848 60000000 		.4byte	.LFE27
 2484 084c 5C010000 		.4byte	.LLST9
 2485 0850 01       		.byte	0x1
 2486 0851 83080000 		.4byte	0x883
 2487 0855 16       		.uleb128 0x16
 2488 0856 2D060000 		.4byte	.LASF99
 2489 085a 02       		.byte	0x2
 2490 085b 2601     		.2byte	0x126
 2491 085d 3F060000 		.4byte	0x63f
 2492 0861 02       		.byte	0x2
 2493 0862 91       		.byte	0x91
 2494 0863 6C       		.sleb128 -20
 2495 0864 16       		.uleb128 0x16
 2496 0865 C2020000 		.4byte	.LASF100
 2497 0869 02       		.byte	0x2
 2498 086a 2601     		.2byte	0x126
 2499 086c 32010000 		.4byte	0x132
 2500 0870 02       		.byte	0x2
 2501 0871 91       		.byte	0x91
 2502 0872 6A       		.sleb128 -22
 2503 0873 1E       		.uleb128 0x1e
 2504 0874 6C656E00 		.ascii	"len\000"
 2505 0878 02       		.byte	0x2
 2506 0879 2801     		.2byte	0x128
 2507 087b 67010000 		.4byte	0x167
 2508 087f 02       		.byte	0x2
 2509 0880 91       		.byte	0x91
 2510 0881 74       		.sleb128 -12
 2511 0882 00       		.byte	0
 2512 0883 1D       		.uleb128 0x1d
 2513 0884 01       		.byte	0x1
 2514 0885 30030000 		.4byte	.LASF111
 2515 0889 02       		.byte	0x2
 2516 088a 3A01     		.2byte	0x13a
 2517 088c 01       		.byte	0x1
 2518 088d 00000000 		.4byte	.LFB28
 2519 0891 2C000000 		.4byte	.LFE28
 2520 0895 88010000 		.4byte	.LLST10
 2521 0899 01       		.byte	0x1
ARM GAS  /tmp/ccfZifSa.s 			page 68


 2522 089a BB080000 		.4byte	0x8bb
 2523 089e 16       		.uleb128 0x16
 2524 089f FD000000 		.4byte	.LASF105
 2525 08a3 02       		.byte	0x2
 2526 08a4 3A01     		.2byte	0x13a
 2527 08a6 45060000 		.4byte	0x645
 2528 08aa 02       		.byte	0x2
 2529 08ab 91       		.byte	0x91
 2530 08ac 6C       		.sleb128 -20
 2531 08ad 1E       		.uleb128 0x1e
 2532 08ae 6900     		.ascii	"i\000"
 2533 08b0 02       		.byte	0x2
 2534 08b1 3C01     		.2byte	0x13c
 2535 08b3 29000000 		.4byte	0x29
 2536 08b7 02       		.byte	0x2
 2537 08b8 91       		.byte	0x91
 2538 08b9 77       		.sleb128 -9
 2539 08ba 00       		.byte	0
 2540 08bb 1D       		.uleb128 0x1d
 2541 08bc 01       		.byte	0x1
 2542 08bd 60000000 		.4byte	.LASF112
 2543 08c1 02       		.byte	0x2
 2544 08c2 4201     		.2byte	0x142
 2545 08c4 01       		.byte	0x1
 2546 08c5 00000000 		.4byte	.LFB29
 2547 08c9 60000000 		.4byte	.LFE29
 2548 08cd B4010000 		.4byte	.LLST11
 2549 08d1 01       		.byte	0x1
 2550 08d2 F5080000 		.4byte	0x8f5
 2551 08d6 16       		.uleb128 0x16
 2552 08d7 FD000000 		.4byte	.LASF105
 2553 08db 02       		.byte	0x2
 2554 08dc 4201     		.2byte	0x142
 2555 08de 3F060000 		.4byte	0x63f
 2556 08e2 02       		.byte	0x2
 2557 08e3 91       		.byte	0x91
 2558 08e4 74       		.sleb128 -12
 2559 08e5 16       		.uleb128 0x16
 2560 08e6 BD020000 		.4byte	.LASF107
 2561 08ea 02       		.byte	0x2
 2562 08eb 4201     		.2byte	0x142
 2563 08ed 29000000 		.4byte	0x29
 2564 08f1 02       		.byte	0x2
 2565 08f2 91       		.byte	0x91
 2566 08f3 73       		.sleb128 -13
 2567 08f4 00       		.byte	0
 2568 08f5 1D       		.uleb128 0x1d
 2569 08f6 01       		.byte	0x1
 2570 08f7 53040000 		.4byte	.LASF113
 2571 08fb 02       		.byte	0x2
 2572 08fc 4C01     		.2byte	0x14c
 2573 08fe 01       		.byte	0x1
 2574 08ff 00000000 		.4byte	.LFB30
 2575 0903 1E000000 		.4byte	.LFE30
 2576 0907 E0010000 		.4byte	.LLST12
 2577 090b 01       		.byte	0x1
 2578 090c 20090000 		.4byte	0x920
ARM GAS  /tmp/ccfZifSa.s 			page 69


 2579 0910 16       		.uleb128 0x16
 2580 0911 C6040000 		.4byte	.LASF109
 2581 0915 02       		.byte	0x2
 2582 0916 4C01     		.2byte	0x14c
 2583 0918 29000000 		.4byte	0x29
 2584 091c 02       		.byte	0x2
 2585 091d 91       		.byte	0x91
 2586 091e 77       		.sleb128 -9
 2587 091f 00       		.byte	0
 2588 0920 1D       		.uleb128 0x1d
 2589 0921 01       		.byte	0x1
 2590 0922 6C010000 		.4byte	.LASF114
 2591 0926 02       		.byte	0x2
 2592 0927 5201     		.2byte	0x152
 2593 0929 01       		.byte	0x1
 2594 092a 00000000 		.4byte	.LFB31
 2595 092e 98000000 		.4byte	.LFE31
 2596 0932 0C020000 		.4byte	.LLST13
 2597 0936 01       		.byte	0x1
 2598 0937 4B090000 		.4byte	0x94b
 2599 093b 20       		.uleb128 0x20
 2600 093c 38000000 		.4byte	.LASF115
 2601 0940 02       		.byte	0x2
 2602 0941 5401     		.2byte	0x154
 2603 0943 67010000 		.4byte	0x167
 2604 0947 02       		.byte	0x2
 2605 0948 91       		.byte	0x91
 2606 0949 74       		.sleb128 -12
 2607 094a 00       		.byte	0
 2608 094b 1D       		.uleb128 0x1d
 2609 094c 01       		.byte	0x1
 2610 094d 5A010000 		.4byte	.LASF116
 2611 0951 02       		.byte	0x2
 2612 0952 6901     		.2byte	0x169
 2613 0954 01       		.byte	0x1
 2614 0955 00000000 		.4byte	.LFB32
 2615 0959 6C000000 		.4byte	.LFE32
 2616 095d 38020000 		.4byte	.LLST14
 2617 0961 01       		.byte	0x1
 2618 0962 73090000 		.4byte	0x973
 2619 0966 21       		.uleb128 0x21
 2620 0967 38000000 		.4byte	.LASF115
 2621 096b 02       		.byte	0x2
 2622 096c 6B01     		.2byte	0x16b
 2623 096e 67010000 		.4byte	0x167
 2624 0972 00       		.byte	0
 2625 0973 22       		.uleb128 0x22
 2626 0974 77020000 		.4byte	.LASF117
 2627 0978 02       		.byte	0x2
 2628 0979 27       		.byte	0x27
 2629 097a 80090000 		.4byte	0x980
 2630 097e 01       		.byte	0x1
 2631 097f 01       		.byte	0x1
 2632 0980 0E       		.uleb128 0xe
 2633 0981 29000000 		.4byte	0x29
 2634 0985 22       		.uleb128 0x22
 2635 0986 DA010000 		.4byte	.LASF118
ARM GAS  /tmp/ccfZifSa.s 			page 70


 2636 098a 02       		.byte	0x2
 2637 098b 29       		.byte	0x29
 2638 098c 80090000 		.4byte	0x980
 2639 0990 01       		.byte	0x1
 2640 0991 01       		.byte	0x1
 2641 0992 0C       		.uleb128 0xc
 2642 0993 29000000 		.4byte	0x29
 2643 0997 9D090000 		.4byte	0x99d
 2644 099b 23       		.uleb128 0x23
 2645 099c 00       		.byte	0
 2646 099d 22       		.uleb128 0x22
 2647 099e 46020000 		.4byte	.LASF119
 2648 09a2 02       		.byte	0x2
 2649 09a3 35       		.byte	0x35
 2650 09a4 AA090000 		.4byte	0x9aa
 2651 09a8 01       		.byte	0x1
 2652 09a9 01       		.byte	0x1
 2653 09aa 0E       		.uleb128 0xe
 2654 09ab 92090000 		.4byte	0x992
 2655 09af 22       		.uleb128 0x22
 2656 09b0 29020000 		.4byte	.LASF120
 2657 09b4 02       		.byte	0x2
 2658 09b5 36       		.byte	0x36
 2659 09b6 BC090000 		.4byte	0x9bc
 2660 09ba 01       		.byte	0x1
 2661 09bb 01       		.byte	0x1
 2662 09bc 0E       		.uleb128 0xe
 2663 09bd 92090000 		.4byte	0x992
 2664 09c1 22       		.uleb128 0x22
 2665 09c2 C4000000 		.4byte	.LASF121
 2666 09c6 02       		.byte	0x2
 2667 09c7 38       		.byte	0x38
 2668 09c8 CE090000 		.4byte	0x9ce
 2669 09cc 01       		.byte	0x1
 2670 09cd 01       		.byte	0x1
 2671 09ce 0E       		.uleb128 0xe
 2672 09cf 92090000 		.4byte	0x992
 2673 09d3 22       		.uleb128 0x22
 2674 09d4 A1000000 		.4byte	.LASF122
 2675 09d8 02       		.byte	0x2
 2676 09d9 39       		.byte	0x39
 2677 09da E0090000 		.4byte	0x9e0
 2678 09de 01       		.byte	0x1
 2679 09df 01       		.byte	0x1
 2680 09e0 0E       		.uleb128 0xe
 2681 09e1 92090000 		.4byte	0x992
 2682 09e5 24       		.uleb128 0x24
 2683 09e6 BA000000 		.4byte	.LASF123
 2684 09ea 02       		.byte	0x2
 2685 09eb 3C       		.byte	0x3c
 2686 09ec F7090000 		.4byte	0x9f7
 2687 09f0 01       		.byte	0x1
 2688 09f1 05       		.byte	0x5
 2689 09f2 03       		.byte	0x3
 2690 09f3 00000000 		.4byte	ptx1
 2691 09f7 14       		.uleb128 0x14
 2692 09f8 04       		.byte	0x4
ARM GAS  /tmp/ccfZifSa.s 			page 71


 2693 09f9 80090000 		.4byte	0x980
 2694 09fd 24       		.uleb128 0x24
 2695 09fe EE030000 		.4byte	.LASF124
 2696 0a02 02       		.byte	0x2
 2697 0a03 3D       		.byte	0x3d
 2698 0a04 F7090000 		.4byte	0x9f7
 2699 0a08 01       		.byte	0x1
 2700 0a09 05       		.byte	0x5
 2701 0a0a 03       		.byte	0x3
 2702 0a0b 00000000 		.4byte	ptx1_pckt_index
 2703 0a0f 24       		.uleb128 0x24
 2704 0a10 9F010000 		.4byte	.LASF125
 2705 0a14 02       		.byte	0x2
 2706 0a15 3E       		.byte	0x3e
 2707 0a16 F7090000 		.4byte	0x9f7
 2708 0a1a 01       		.byte	0x1
 2709 0a1b 05       		.byte	0x5
 2710 0a1c 03       		.byte	0x3
 2711 0a1d 00000000 		.4byte	prx1
 2712 0a21 24       		.uleb128 0x24
 2713 0a22 BF000000 		.4byte	.LASF126
 2714 0a26 02       		.byte	0x2
 2715 0a27 40       		.byte	0x40
 2716 0a28 F7090000 		.4byte	0x9f7
 2717 0a2c 01       		.byte	0x1
 2718 0a2d 05       		.byte	0x5
 2719 0a2e 03       		.byte	0x3
 2720 0a2f 00000000 		.4byte	ptx2
 2721 0a33 24       		.uleb128 0x24
 2722 0a34 1B000000 		.4byte	.LASF127
 2723 0a38 02       		.byte	0x2
 2724 0a39 41       		.byte	0x41
 2725 0a3a F7090000 		.4byte	0x9f7
 2726 0a3e 01       		.byte	0x1
 2727 0a3f 05       		.byte	0x5
 2728 0a40 03       		.byte	0x3
 2729 0a41 00000000 		.4byte	ptx2_pckt_index
 2730 0a45 24       		.uleb128 0x24
 2731 0a46 41020000 		.4byte	.LASF128
 2732 0a4a 02       		.byte	0x2
 2733 0a4b 42       		.byte	0x42
 2734 0a4c F7090000 		.4byte	0x9f7
 2735 0a50 01       		.byte	0x1
 2736 0a51 05       		.byte	0x5
 2737 0a52 03       		.byte	0x3
 2738 0a53 00000000 		.4byte	prx2
 2739 0a57 24       		.uleb128 0x24
 2740 0a58 67030000 		.4byte	.LASF129
 2741 0a5c 02       		.byte	0x2
 2742 0a5d 44       		.byte	0x44
 2743 0a5e 80090000 		.4byte	0x980
 2744 0a62 01       		.byte	0x1
 2745 0a63 05       		.byte	0x5
 2746 0a64 03       		.byte	0x3
 2747 0a65 00000000 		.4byte	pckt_gps_ready
 2748 0a69 24       		.uleb128 0x24
 2749 0a6a 71040000 		.4byte	.LASF130
ARM GAS  /tmp/ccfZifSa.s 			page 72


 2750 0a6e 02       		.byte	0x2
 2751 0a6f 45       		.byte	0x45
 2752 0a70 80090000 		.4byte	0x980
 2753 0a74 01       		.byte	0x1
 2754 0a75 05       		.byte	0x5
 2755 0a76 03       		.byte	0x3
 2756 0a77 00000000 		.4byte	usart_mode
 2757 0a7b 00       		.byte	0
 2758              		.section	.debug_abbrev,"",%progbits
 2759              	.Ldebug_abbrev0:
 2760 0000 01       		.uleb128 0x1
 2761 0001 11       		.uleb128 0x11
 2762 0002 01       		.byte	0x1
 2763 0003 25       		.uleb128 0x25
 2764 0004 0E       		.uleb128 0xe
 2765 0005 13       		.uleb128 0x13
 2766 0006 0B       		.uleb128 0xb
 2767 0007 03       		.uleb128 0x3
 2768 0008 0E       		.uleb128 0xe
 2769 0009 1B       		.uleb128 0x1b
 2770 000a 0E       		.uleb128 0xe
 2771 000b 55       		.uleb128 0x55
 2772 000c 06       		.uleb128 0x6
 2773 000d 11       		.uleb128 0x11
 2774 000e 01       		.uleb128 0x1
 2775 000f 52       		.uleb128 0x52
 2776 0010 01       		.uleb128 0x1
 2777 0011 10       		.uleb128 0x10
 2778 0012 06       		.uleb128 0x6
 2779 0013 00       		.byte	0
 2780 0014 00       		.byte	0
 2781 0015 02       		.uleb128 0x2
 2782 0016 24       		.uleb128 0x24
 2783 0017 00       		.byte	0
 2784 0018 0B       		.uleb128 0xb
 2785 0019 0B       		.uleb128 0xb
 2786 001a 3E       		.uleb128 0x3e
 2787 001b 0B       		.uleb128 0xb
 2788 001c 03       		.uleb128 0x3
 2789 001d 0E       		.uleb128 0xe
 2790 001e 00       		.byte	0
 2791 001f 00       		.byte	0
 2792 0020 03       		.uleb128 0x3
 2793 0021 04       		.uleb128 0x4
 2794 0022 01       		.byte	0x1
 2795 0023 03       		.uleb128 0x3
 2796 0024 0E       		.uleb128 0xe
 2797 0025 0B       		.uleb128 0xb
 2798 0026 0B       		.uleb128 0xb
 2799 0027 49       		.uleb128 0x49
 2800 0028 13       		.uleb128 0x13
 2801 0029 3A       		.uleb128 0x3a
 2802 002a 0B       		.uleb128 0xb
 2803 002b 3B       		.uleb128 0x3b
 2804 002c 0B       		.uleb128 0xb
 2805 002d 01       		.uleb128 0x1
 2806 002e 13       		.uleb128 0x13
ARM GAS  /tmp/ccfZifSa.s 			page 73


 2807 002f 00       		.byte	0
 2808 0030 00       		.byte	0
 2809 0031 04       		.uleb128 0x4
 2810 0032 28       		.uleb128 0x28
 2811 0033 00       		.byte	0
 2812 0034 03       		.uleb128 0x3
 2813 0035 0E       		.uleb128 0xe
 2814 0036 1C       		.uleb128 0x1c
 2815 0037 0D       		.uleb128 0xd
 2816 0038 00       		.byte	0
 2817 0039 00       		.byte	0
 2818 003a 05       		.uleb128 0x5
 2819 003b 28       		.uleb128 0x28
 2820 003c 00       		.byte	0
 2821 003d 03       		.uleb128 0x3
 2822 003e 0E       		.uleb128 0xe
 2823 003f 1C       		.uleb128 0x1c
 2824 0040 0B       		.uleb128 0xb
 2825 0041 00       		.byte	0
 2826 0042 00       		.byte	0
 2827 0043 06       		.uleb128 0x6
 2828 0044 16       		.uleb128 0x16
 2829 0045 00       		.byte	0
 2830 0046 03       		.uleb128 0x3
 2831 0047 0E       		.uleb128 0xe
 2832 0048 3A       		.uleb128 0x3a
 2833 0049 0B       		.uleb128 0xb
 2834 004a 3B       		.uleb128 0x3b
 2835 004b 05       		.uleb128 0x5
 2836 004c 49       		.uleb128 0x49
 2837 004d 13       		.uleb128 0x13
 2838 004e 00       		.byte	0
 2839 004f 00       		.byte	0
 2840 0050 07       		.uleb128 0x7
 2841 0051 16       		.uleb128 0x16
 2842 0052 00       		.byte	0
 2843 0053 03       		.uleb128 0x3
 2844 0054 0E       		.uleb128 0xe
 2845 0055 3A       		.uleb128 0x3a
 2846 0056 0B       		.uleb128 0xb
 2847 0057 3B       		.uleb128 0x3b
 2848 0058 0B       		.uleb128 0xb
 2849 0059 49       		.uleb128 0x49
 2850 005a 13       		.uleb128 0x13
 2851 005b 00       		.byte	0
 2852 005c 00       		.byte	0
 2853 005d 08       		.uleb128 0x8
 2854 005e 24       		.uleb128 0x24
 2855 005f 00       		.byte	0
 2856 0060 0B       		.uleb128 0xb
 2857 0061 0B       		.uleb128 0xb
 2858 0062 3E       		.uleb128 0x3e
 2859 0063 0B       		.uleb128 0xb
 2860 0064 03       		.uleb128 0x3
 2861 0065 08       		.uleb128 0x8
 2862 0066 00       		.byte	0
 2863 0067 00       		.byte	0
ARM GAS  /tmp/ccfZifSa.s 			page 74


 2864 0068 09       		.uleb128 0x9
 2865 0069 13       		.uleb128 0x13
 2866 006a 01       		.byte	0x1
 2867 006b 0B       		.uleb128 0xb
 2868 006c 05       		.uleb128 0x5
 2869 006d 3A       		.uleb128 0x3a
 2870 006e 0B       		.uleb128 0xb
 2871 006f 3B       		.uleb128 0x3b
 2872 0070 0B       		.uleb128 0xb
 2873 0071 01       		.uleb128 0x1
 2874 0072 13       		.uleb128 0x13
 2875 0073 00       		.byte	0
 2876 0074 00       		.byte	0
 2877 0075 0A       		.uleb128 0xa
 2878 0076 0D       		.uleb128 0xd
 2879 0077 00       		.byte	0
 2880 0078 03       		.uleb128 0x3
 2881 0079 0E       		.uleb128 0xe
 2882 007a 3A       		.uleb128 0x3a
 2883 007b 0B       		.uleb128 0xb
 2884 007c 3B       		.uleb128 0x3b
 2885 007d 0B       		.uleb128 0xb
 2886 007e 49       		.uleb128 0x49
 2887 007f 13       		.uleb128 0x13
 2888 0080 38       		.uleb128 0x38
 2889 0081 0A       		.uleb128 0xa
 2890 0082 00       		.byte	0
 2891 0083 00       		.byte	0
 2892 0084 0B       		.uleb128 0xb
 2893 0085 0D       		.uleb128 0xd
 2894 0086 00       		.byte	0
 2895 0087 03       		.uleb128 0x3
 2896 0088 08       		.uleb128 0x8
 2897 0089 3A       		.uleb128 0x3a
 2898 008a 0B       		.uleb128 0xb
 2899 008b 3B       		.uleb128 0x3b
 2900 008c 0B       		.uleb128 0xb
 2901 008d 49       		.uleb128 0x49
 2902 008e 13       		.uleb128 0x13
 2903 008f 38       		.uleb128 0x38
 2904 0090 0A       		.uleb128 0xa
 2905 0091 00       		.byte	0
 2906 0092 00       		.byte	0
 2907 0093 0C       		.uleb128 0xc
 2908 0094 01       		.uleb128 0x1
 2909 0095 01       		.byte	0x1
 2910 0096 49       		.uleb128 0x49
 2911 0097 13       		.uleb128 0x13
 2912 0098 01       		.uleb128 0x1
 2913 0099 13       		.uleb128 0x13
 2914 009a 00       		.byte	0
 2915 009b 00       		.byte	0
 2916 009c 0D       		.uleb128 0xd
 2917 009d 21       		.uleb128 0x21
 2918 009e 00       		.byte	0
 2919 009f 49       		.uleb128 0x49
 2920 00a0 13       		.uleb128 0x13
ARM GAS  /tmp/ccfZifSa.s 			page 75


 2921 00a1 2F       		.uleb128 0x2f
 2922 00a2 0B       		.uleb128 0xb
 2923 00a3 00       		.byte	0
 2924 00a4 00       		.byte	0
 2925 00a5 0E       		.uleb128 0xe
 2926 00a6 35       		.uleb128 0x35
 2927 00a7 00       		.byte	0
 2928 00a8 49       		.uleb128 0x49
 2929 00a9 13       		.uleb128 0x13
 2930 00aa 00       		.byte	0
 2931 00ab 00       		.byte	0
 2932 00ac 0F       		.uleb128 0xf
 2933 00ad 13       		.uleb128 0x13
 2934 00ae 01       		.byte	0x1
 2935 00af 0B       		.uleb128 0xb
 2936 00b0 0B       		.uleb128 0xb
 2937 00b1 3A       		.uleb128 0x3a
 2938 00b2 0B       		.uleb128 0xb
 2939 00b3 3B       		.uleb128 0x3b
 2940 00b4 0B       		.uleb128 0xb
 2941 00b5 01       		.uleb128 0x1
 2942 00b6 13       		.uleb128 0x13
 2943 00b7 00       		.byte	0
 2944 00b8 00       		.byte	0
 2945 00b9 10       		.uleb128 0x10
 2946 00ba 26       		.uleb128 0x26
 2947 00bb 00       		.byte	0
 2948 00bc 49       		.uleb128 0x49
 2949 00bd 13       		.uleb128 0x13
 2950 00be 00       		.byte	0
 2951 00bf 00       		.byte	0
 2952 00c0 11       		.uleb128 0x11
 2953 00c1 13       		.uleb128 0x13
 2954 00c2 01       		.byte	0x1
 2955 00c3 0B       		.uleb128 0xb
 2956 00c4 0B       		.uleb128 0xb
 2957 00c5 3A       		.uleb128 0x3a
 2958 00c6 0B       		.uleb128 0xb
 2959 00c7 3B       		.uleb128 0x3b
 2960 00c8 05       		.uleb128 0x5
 2961 00c9 01       		.uleb128 0x1
 2962 00ca 13       		.uleb128 0x13
 2963 00cb 00       		.byte	0
 2964 00cc 00       		.byte	0
 2965 00cd 12       		.uleb128 0x12
 2966 00ce 0D       		.uleb128 0xd
 2967 00cf 00       		.byte	0
 2968 00d0 03       		.uleb128 0x3
 2969 00d1 0E       		.uleb128 0xe
 2970 00d2 3A       		.uleb128 0x3a
 2971 00d3 0B       		.uleb128 0xb
 2972 00d4 3B       		.uleb128 0x3b
 2973 00d5 05       		.uleb128 0x5
 2974 00d6 49       		.uleb128 0x49
 2975 00d7 13       		.uleb128 0x13
 2976 00d8 38       		.uleb128 0x38
 2977 00d9 0A       		.uleb128 0xa
ARM GAS  /tmp/ccfZifSa.s 			page 76


 2978 00da 00       		.byte	0
 2979 00db 00       		.byte	0
 2980 00dc 13       		.uleb128 0x13
 2981 00dd 0D       		.uleb128 0xd
 2982 00de 00       		.byte	0
 2983 00df 03       		.uleb128 0x3
 2984 00e0 08       		.uleb128 0x8
 2985 00e1 3A       		.uleb128 0x3a
 2986 00e2 0B       		.uleb128 0xb
 2987 00e3 3B       		.uleb128 0x3b
 2988 00e4 05       		.uleb128 0x5
 2989 00e5 49       		.uleb128 0x49
 2990 00e6 13       		.uleb128 0x13
 2991 00e7 38       		.uleb128 0x38
 2992 00e8 0A       		.uleb128 0xa
 2993 00e9 00       		.byte	0
 2994 00ea 00       		.byte	0
 2995 00eb 14       		.uleb128 0x14
 2996 00ec 0F       		.uleb128 0xf
 2997 00ed 00       		.byte	0
 2998 00ee 0B       		.uleb128 0xb
 2999 00ef 0B       		.uleb128 0xb
 3000 00f0 49       		.uleb128 0x49
 3001 00f1 13       		.uleb128 0x13
 3002 00f2 00       		.byte	0
 3003 00f3 00       		.byte	0
 3004 00f4 15       		.uleb128 0x15
 3005 00f5 2E       		.uleb128 0x2e
 3006 00f6 01       		.byte	0x1
 3007 00f7 03       		.uleb128 0x3
 3008 00f8 0E       		.uleb128 0xe
 3009 00f9 3A       		.uleb128 0x3a
 3010 00fa 0B       		.uleb128 0xb
 3011 00fb 3B       		.uleb128 0x3b
 3012 00fc 05       		.uleb128 0x5
 3013 00fd 27       		.uleb128 0x27
 3014 00fe 0C       		.uleb128 0xc
 3015 00ff 11       		.uleb128 0x11
 3016 0100 01       		.uleb128 0x1
 3017 0101 12       		.uleb128 0x12
 3018 0102 01       		.uleb128 0x1
 3019 0103 40       		.uleb128 0x40
 3020 0104 06       		.uleb128 0x6
 3021 0105 9742     		.uleb128 0x2117
 3022 0107 0C       		.uleb128 0xc
 3023 0108 01       		.uleb128 0x1
 3024 0109 13       		.uleb128 0x13
 3025 010a 00       		.byte	0
 3026 010b 00       		.byte	0
 3027 010c 16       		.uleb128 0x16
 3028 010d 05       		.uleb128 0x5
 3029 010e 00       		.byte	0
 3030 010f 03       		.uleb128 0x3
 3031 0110 0E       		.uleb128 0xe
 3032 0111 3A       		.uleb128 0x3a
 3033 0112 0B       		.uleb128 0xb
 3034 0113 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccfZifSa.s 			page 77


 3035 0114 05       		.uleb128 0x5
 3036 0115 49       		.uleb128 0x49
 3037 0116 13       		.uleb128 0x13
 3038 0117 02       		.uleb128 0x2
 3039 0118 0A       		.uleb128 0xa
 3040 0119 00       		.byte	0
 3041 011a 00       		.byte	0
 3042 011b 17       		.uleb128 0x17
 3043 011c 2E       		.uleb128 0x2e
 3044 011d 01       		.byte	0x1
 3045 011e 3F       		.uleb128 0x3f
 3046 011f 0C       		.uleb128 0xc
 3047 0120 03       		.uleb128 0x3
 3048 0121 0E       		.uleb128 0xe
 3049 0122 3A       		.uleb128 0x3a
 3050 0123 0B       		.uleb128 0xb
 3051 0124 3B       		.uleb128 0x3b
 3052 0125 0B       		.uleb128 0xb
 3053 0126 27       		.uleb128 0x27
 3054 0127 0C       		.uleb128 0xc
 3055 0128 49       		.uleb128 0x49
 3056 0129 13       		.uleb128 0x13
 3057 012a 11       		.uleb128 0x11
 3058 012b 01       		.uleb128 0x1
 3059 012c 12       		.uleb128 0x12
 3060 012d 01       		.uleb128 0x1
 3061 012e 40       		.uleb128 0x40
 3062 012f 06       		.uleb128 0x6
 3063 0130 9742     		.uleb128 0x2117
 3064 0132 0C       		.uleb128 0xc
 3065 0133 01       		.uleb128 0x1
 3066 0134 13       		.uleb128 0x13
 3067 0135 00       		.byte	0
 3068 0136 00       		.byte	0
 3069 0137 18       		.uleb128 0x18
 3070 0138 05       		.uleb128 0x5
 3071 0139 00       		.byte	0
 3072 013a 03       		.uleb128 0x3
 3073 013b 0E       		.uleb128 0xe
 3074 013c 3A       		.uleb128 0x3a
 3075 013d 0B       		.uleb128 0xb
 3076 013e 3B       		.uleb128 0x3b
 3077 013f 0B       		.uleb128 0xb
 3078 0140 49       		.uleb128 0x49
 3079 0141 13       		.uleb128 0x13
 3080 0142 02       		.uleb128 0x2
 3081 0143 0A       		.uleb128 0xa
 3082 0144 00       		.byte	0
 3083 0145 00       		.byte	0
 3084 0146 19       		.uleb128 0x19
 3085 0147 34       		.uleb128 0x34
 3086 0148 00       		.byte	0
 3087 0149 03       		.uleb128 0x3
 3088 014a 0E       		.uleb128 0xe
 3089 014b 3A       		.uleb128 0x3a
 3090 014c 0B       		.uleb128 0xb
 3091 014d 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccfZifSa.s 			page 78


 3092 014e 0B       		.uleb128 0xb
 3093 014f 49       		.uleb128 0x49
 3094 0150 13       		.uleb128 0x13
 3095 0151 02       		.uleb128 0x2
 3096 0152 0A       		.uleb128 0xa
 3097 0153 00       		.byte	0
 3098 0154 00       		.byte	0
 3099 0155 1A       		.uleb128 0x1a
 3100 0156 2E       		.uleb128 0x2e
 3101 0157 01       		.byte	0x1
 3102 0158 3F       		.uleb128 0x3f
 3103 0159 0C       		.uleb128 0xc
 3104 015a 03       		.uleb128 0x3
 3105 015b 0E       		.uleb128 0xe
 3106 015c 3A       		.uleb128 0x3a
 3107 015d 0B       		.uleb128 0xb
 3108 015e 3B       		.uleb128 0x3b
 3109 015f 0B       		.uleb128 0xb
 3110 0160 27       		.uleb128 0x27
 3111 0161 0C       		.uleb128 0xc
 3112 0162 49       		.uleb128 0x49
 3113 0163 13       		.uleb128 0x13
 3114 0164 11       		.uleb128 0x11
 3115 0165 01       		.uleb128 0x1
 3116 0166 12       		.uleb128 0x12
 3117 0167 01       		.uleb128 0x1
 3118 0168 40       		.uleb128 0x40
 3119 0169 06       		.uleb128 0x6
 3120 016a 9642     		.uleb128 0x2116
 3121 016c 0C       		.uleb128 0xc
 3122 016d 01       		.uleb128 0x1
 3123 016e 13       		.uleb128 0x13
 3124 016f 00       		.byte	0
 3125 0170 00       		.byte	0
 3126 0171 1B       		.uleb128 0x1b
 3127 0172 34       		.uleb128 0x34
 3128 0173 00       		.byte	0
 3129 0174 03       		.uleb128 0x3
 3130 0175 08       		.uleb128 0x8
 3131 0176 3A       		.uleb128 0x3a
 3132 0177 0B       		.uleb128 0xb
 3133 0178 3B       		.uleb128 0x3b
 3134 0179 0B       		.uleb128 0xb
 3135 017a 49       		.uleb128 0x49
 3136 017b 13       		.uleb128 0x13
 3137 017c 02       		.uleb128 0x2
 3138 017d 0A       		.uleb128 0xa
 3139 017e 00       		.byte	0
 3140 017f 00       		.byte	0
 3141 0180 1C       		.uleb128 0x1c
 3142 0181 2E       		.uleb128 0x2e
 3143 0182 01       		.byte	0x1
 3144 0183 3F       		.uleb128 0x3f
 3145 0184 0C       		.uleb128 0xc
 3146 0185 03       		.uleb128 0x3
 3147 0186 0E       		.uleb128 0xe
 3148 0187 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccfZifSa.s 			page 79


 3149 0188 0B       		.uleb128 0xb
 3150 0189 3B       		.uleb128 0x3b
 3151 018a 0B       		.uleb128 0xb
 3152 018b 27       		.uleb128 0x27
 3153 018c 0C       		.uleb128 0xc
 3154 018d 11       		.uleb128 0x11
 3155 018e 01       		.uleb128 0x1
 3156 018f 12       		.uleb128 0x12
 3157 0190 01       		.uleb128 0x1
 3158 0191 40       		.uleb128 0x40
 3159 0192 06       		.uleb128 0x6
 3160 0193 9742     		.uleb128 0x2117
 3161 0195 0C       		.uleb128 0xc
 3162 0196 01       		.uleb128 0x1
 3163 0197 13       		.uleb128 0x13
 3164 0198 00       		.byte	0
 3165 0199 00       		.byte	0
 3166 019a 1D       		.uleb128 0x1d
 3167 019b 2E       		.uleb128 0x2e
 3168 019c 01       		.byte	0x1
 3169 019d 3F       		.uleb128 0x3f
 3170 019e 0C       		.uleb128 0xc
 3171 019f 03       		.uleb128 0x3
 3172 01a0 0E       		.uleb128 0xe
 3173 01a1 3A       		.uleb128 0x3a
 3174 01a2 0B       		.uleb128 0xb
 3175 01a3 3B       		.uleb128 0x3b
 3176 01a4 05       		.uleb128 0x5
 3177 01a5 27       		.uleb128 0x27
 3178 01a6 0C       		.uleb128 0xc
 3179 01a7 11       		.uleb128 0x11
 3180 01a8 01       		.uleb128 0x1
 3181 01a9 12       		.uleb128 0x12
 3182 01aa 01       		.uleb128 0x1
 3183 01ab 40       		.uleb128 0x40
 3184 01ac 06       		.uleb128 0x6
 3185 01ad 9642     		.uleb128 0x2116
 3186 01af 0C       		.uleb128 0xc
 3187 01b0 01       		.uleb128 0x1
 3188 01b1 13       		.uleb128 0x13
 3189 01b2 00       		.byte	0
 3190 01b3 00       		.byte	0
 3191 01b4 1E       		.uleb128 0x1e
 3192 01b5 34       		.uleb128 0x34
 3193 01b6 00       		.byte	0
 3194 01b7 03       		.uleb128 0x3
 3195 01b8 08       		.uleb128 0x8
 3196 01b9 3A       		.uleb128 0x3a
 3197 01ba 0B       		.uleb128 0xb
 3198 01bb 3B       		.uleb128 0x3b
 3199 01bc 05       		.uleb128 0x5
 3200 01bd 49       		.uleb128 0x49
 3201 01be 13       		.uleb128 0x13
 3202 01bf 02       		.uleb128 0x2
 3203 01c0 0A       		.uleb128 0xa
 3204 01c1 00       		.byte	0
 3205 01c2 00       		.byte	0
ARM GAS  /tmp/ccfZifSa.s 			page 80


 3206 01c3 1F       		.uleb128 0x1f
 3207 01c4 2E       		.uleb128 0x2e
 3208 01c5 01       		.byte	0x1
 3209 01c6 3F       		.uleb128 0x3f
 3210 01c7 0C       		.uleb128 0xc
 3211 01c8 03       		.uleb128 0x3
 3212 01c9 0E       		.uleb128 0xe
 3213 01ca 3A       		.uleb128 0x3a
 3214 01cb 0B       		.uleb128 0xb
 3215 01cc 3B       		.uleb128 0x3b
 3216 01cd 05       		.uleb128 0x5
 3217 01ce 27       		.uleb128 0x27
 3218 01cf 0C       		.uleb128 0xc
 3219 01d0 49       		.uleb128 0x49
 3220 01d1 13       		.uleb128 0x13
 3221 01d2 11       		.uleb128 0x11
 3222 01d3 01       		.uleb128 0x1
 3223 01d4 12       		.uleb128 0x12
 3224 01d5 01       		.uleb128 0x1
 3225 01d6 40       		.uleb128 0x40
 3226 01d7 06       		.uleb128 0x6
 3227 01d8 9642     		.uleb128 0x2116
 3228 01da 0C       		.uleb128 0xc
 3229 01db 01       		.uleb128 0x1
 3230 01dc 13       		.uleb128 0x13
 3231 01dd 00       		.byte	0
 3232 01de 00       		.byte	0
 3233 01df 20       		.uleb128 0x20
 3234 01e0 34       		.uleb128 0x34
 3235 01e1 00       		.byte	0
 3236 01e2 03       		.uleb128 0x3
 3237 01e3 0E       		.uleb128 0xe
 3238 01e4 3A       		.uleb128 0x3a
 3239 01e5 0B       		.uleb128 0xb
 3240 01e6 3B       		.uleb128 0x3b
 3241 01e7 05       		.uleb128 0x5
 3242 01e8 49       		.uleb128 0x49
 3243 01e9 13       		.uleb128 0x13
 3244 01ea 02       		.uleb128 0x2
 3245 01eb 0A       		.uleb128 0xa
 3246 01ec 00       		.byte	0
 3247 01ed 00       		.byte	0
 3248 01ee 21       		.uleb128 0x21
 3249 01ef 34       		.uleb128 0x34
 3250 01f0 00       		.byte	0
 3251 01f1 03       		.uleb128 0x3
 3252 01f2 0E       		.uleb128 0xe
 3253 01f3 3A       		.uleb128 0x3a
 3254 01f4 0B       		.uleb128 0xb
 3255 01f5 3B       		.uleb128 0x3b
 3256 01f6 05       		.uleb128 0x5
 3257 01f7 49       		.uleb128 0x49
 3258 01f8 13       		.uleb128 0x13
 3259 01f9 00       		.byte	0
 3260 01fa 00       		.byte	0
 3261 01fb 22       		.uleb128 0x22
 3262 01fc 34       		.uleb128 0x34
ARM GAS  /tmp/ccfZifSa.s 			page 81


 3263 01fd 00       		.byte	0
 3264 01fe 03       		.uleb128 0x3
 3265 01ff 0E       		.uleb128 0xe
 3266 0200 3A       		.uleb128 0x3a
 3267 0201 0B       		.uleb128 0xb
 3268 0202 3B       		.uleb128 0x3b
 3269 0203 0B       		.uleb128 0xb
 3270 0204 49       		.uleb128 0x49
 3271 0205 13       		.uleb128 0x13
 3272 0206 3F       		.uleb128 0x3f
 3273 0207 0C       		.uleb128 0xc
 3274 0208 3C       		.uleb128 0x3c
 3275 0209 0C       		.uleb128 0xc
 3276 020a 00       		.byte	0
 3277 020b 00       		.byte	0
 3278 020c 23       		.uleb128 0x23
 3279 020d 21       		.uleb128 0x21
 3280 020e 00       		.byte	0
 3281 020f 00       		.byte	0
 3282 0210 00       		.byte	0
 3283 0211 24       		.uleb128 0x24
 3284 0212 34       		.uleb128 0x34
 3285 0213 00       		.byte	0
 3286 0214 03       		.uleb128 0x3
 3287 0215 0E       		.uleb128 0xe
 3288 0216 3A       		.uleb128 0x3a
 3289 0217 0B       		.uleb128 0xb
 3290 0218 3B       		.uleb128 0x3b
 3291 0219 0B       		.uleb128 0xb
 3292 021a 49       		.uleb128 0x49
 3293 021b 13       		.uleb128 0x13
 3294 021c 3F       		.uleb128 0x3f
 3295 021d 0C       		.uleb128 0xc
 3296 021e 02       		.uleb128 0x2
 3297 021f 0A       		.uleb128 0xa
 3298 0220 00       		.byte	0
 3299 0221 00       		.byte	0
 3300 0222 00       		.byte	0
 3301              		.section	.debug_loc,"",%progbits
 3302              	.Ldebug_loc0:
 3303              	.LLST0:
 3304 0000 00000000 		.4byte	.LFB11
 3305 0004 02000000 		.4byte	.LCFI0
 3306 0008 0200     		.2byte	0x2
 3307 000a 7D       		.byte	0x7d
 3308 000b 00       		.sleb128 0
 3309 000c 02000000 		.4byte	.LCFI0
 3310 0010 2C000000 		.4byte	.LFE11
 3311 0014 0200     		.2byte	0x2
 3312 0016 7D       		.byte	0x7d
 3313 0017 08       		.sleb128 8
 3314 0018 00000000 		.4byte	0
 3315 001c 00000000 		.4byte	0
 3316              	.LLST1:
 3317 0020 00000000 		.4byte	.LFB16
 3318 0024 02000000 		.4byte	.LCFI1
 3319 0028 0200     		.2byte	0x2
ARM GAS  /tmp/ccfZifSa.s 			page 82


 3320 002a 7D       		.byte	0x7d
 3321 002b 00       		.sleb128 0
 3322 002c 02000000 		.4byte	.LCFI1
 3323 0030 04000000 		.4byte	.LCFI2
 3324 0034 0200     		.2byte	0x2
 3325 0036 7D       		.byte	0x7d
 3326 0037 0C       		.sleb128 12
 3327 0038 04000000 		.4byte	.LCFI2
 3328 003c EC000000 		.4byte	.LFE16
 3329 0040 0200     		.2byte	0x2
 3330 0042 7D       		.byte	0x7d
 3331 0043 18       		.sleb128 24
 3332 0044 00000000 		.4byte	0
 3333 0048 00000000 		.4byte	0
 3334              	.LLST2:
 3335 004c 00000000 		.4byte	.LFB20
 3336 0050 02000000 		.4byte	.LCFI3
 3337 0054 0200     		.2byte	0x2
 3338 0056 7D       		.byte	0x7d
 3339 0057 00       		.sleb128 0
 3340 0058 02000000 		.4byte	.LCFI3
 3341 005c 0C010000 		.4byte	.LFE20
 3342 0060 0200     		.2byte	0x2
 3343 0062 7D       		.byte	0x7d
 3344 0063 10       		.sleb128 16
 3345 0064 00000000 		.4byte	0
 3346 0068 00000000 		.4byte	0
 3347              	.LLST3:
 3348 006c 00000000 		.4byte	.LFB21
 3349 0070 02000000 		.4byte	.LCFI4
 3350 0074 0200     		.2byte	0x2
 3351 0076 7D       		.byte	0x7d
 3352 0077 00       		.sleb128 0
 3353 0078 02000000 		.4byte	.LCFI4
 3354 007c 04000000 		.4byte	.LCFI5
 3355 0080 0200     		.2byte	0x2
 3356 0082 7D       		.byte	0x7d
 3357 0083 04       		.sleb128 4
 3358 0084 04000000 		.4byte	.LCFI5
 3359 0088 78000000 		.4byte	.LFE21
 3360 008c 0200     		.2byte	0x2
 3361 008e 7D       		.byte	0x7d
 3362 008f 18       		.sleb128 24
 3363 0090 00000000 		.4byte	0
 3364 0094 00000000 		.4byte	0
 3365              	.LLST4:
 3366 0098 00000000 		.4byte	.LFB22
 3367 009c 02000000 		.4byte	.LCFI6
 3368 00a0 0200     		.2byte	0x2
 3369 00a2 7D       		.byte	0x7d
 3370 00a3 00       		.sleb128 0
 3371 00a4 02000000 		.4byte	.LCFI6
 3372 00a8 18010000 		.4byte	.LFE22
 3373 00ac 0200     		.2byte	0x2
 3374 00ae 7D       		.byte	0x7d
 3375 00af 08       		.sleb128 8
 3376 00b0 00000000 		.4byte	0
ARM GAS  /tmp/ccfZifSa.s 			page 83


 3377 00b4 00000000 		.4byte	0
 3378              	.LLST5:
 3379 00b8 00000000 		.4byte	.LFB23
 3380 00bc 02000000 		.4byte	.LCFI7
 3381 00c0 0200     		.2byte	0x2
 3382 00c2 7D       		.byte	0x7d
 3383 00c3 00       		.sleb128 0
 3384 00c4 02000000 		.4byte	.LCFI7
 3385 00c8 C4000000 		.4byte	.LFE23
 3386 00cc 0200     		.2byte	0x2
 3387 00ce 7D       		.byte	0x7d
 3388 00cf 08       		.sleb128 8
 3389 00d0 00000000 		.4byte	0
 3390 00d4 00000000 		.4byte	0
 3391              	.LLST6:
 3392 00d8 00000000 		.4byte	.LFB24
 3393 00dc 02000000 		.4byte	.LCFI8
 3394 00e0 0200     		.2byte	0x2
 3395 00e2 7D       		.byte	0x7d
 3396 00e3 00       		.sleb128 0
 3397 00e4 02000000 		.4byte	.LCFI8
 3398 00e8 04000000 		.4byte	.LCFI9
 3399 00ec 0200     		.2byte	0x2
 3400 00ee 7D       		.byte	0x7d
 3401 00ef 04       		.sleb128 4
 3402 00f0 04000000 		.4byte	.LCFI9
 3403 00f4 2C000000 		.4byte	.LFE24
 3404 00f8 0200     		.2byte	0x2
 3405 00fa 7D       		.byte	0x7d
 3406 00fb 18       		.sleb128 24
 3407 00fc 00000000 		.4byte	0
 3408 0100 00000000 		.4byte	0
 3409              	.LLST7:
 3410 0104 00000000 		.4byte	.LFB25
 3411 0108 02000000 		.4byte	.LCFI10
 3412 010c 0200     		.2byte	0x2
 3413 010e 7D       		.byte	0x7d
 3414 010f 00       		.sleb128 0
 3415 0110 02000000 		.4byte	.LCFI10
 3416 0114 04000000 		.4byte	.LCFI11
 3417 0118 0200     		.2byte	0x2
 3418 011a 7D       		.byte	0x7d
 3419 011b 04       		.sleb128 4
 3420 011c 04000000 		.4byte	.LCFI11
 3421 0120 60000000 		.4byte	.LFE25
 3422 0124 0200     		.2byte	0x2
 3423 0126 7D       		.byte	0x7d
 3424 0127 10       		.sleb128 16
 3425 0128 00000000 		.4byte	0
 3426 012c 00000000 		.4byte	0
 3427              	.LLST8:
 3428 0130 00000000 		.4byte	.LFB26
 3429 0134 02000000 		.4byte	.LCFI12
 3430 0138 0200     		.2byte	0x2
 3431 013a 7D       		.byte	0x7d
 3432 013b 00       		.sleb128 0
 3433 013c 02000000 		.4byte	.LCFI12
ARM GAS  /tmp/ccfZifSa.s 			page 84


 3434 0140 04000000 		.4byte	.LCFI13
 3435 0144 0200     		.2byte	0x2
 3436 0146 7D       		.byte	0x7d
 3437 0147 04       		.sleb128 4
 3438 0148 04000000 		.4byte	.LCFI13
 3439 014c 1E000000 		.4byte	.LFE26
 3440 0150 0200     		.2byte	0x2
 3441 0152 7D       		.byte	0x7d
 3442 0153 10       		.sleb128 16
 3443 0154 00000000 		.4byte	0
 3444 0158 00000000 		.4byte	0
 3445              	.LLST9:
 3446 015c 00000000 		.4byte	.LFB27
 3447 0160 02000000 		.4byte	.LCFI14
 3448 0164 0200     		.2byte	0x2
 3449 0166 7D       		.byte	0x7d
 3450 0167 00       		.sleb128 0
 3451 0168 02000000 		.4byte	.LCFI14
 3452 016c 04000000 		.4byte	.LCFI15
 3453 0170 0200     		.2byte	0x2
 3454 0172 7D       		.byte	0x7d
 3455 0173 04       		.sleb128 4
 3456 0174 04000000 		.4byte	.LCFI15
 3457 0178 60000000 		.4byte	.LFE27
 3458 017c 0200     		.2byte	0x2
 3459 017e 7D       		.byte	0x7d
 3460 017f 18       		.sleb128 24
 3461 0180 00000000 		.4byte	0
 3462 0184 00000000 		.4byte	0
 3463              	.LLST10:
 3464 0188 00000000 		.4byte	.LFB28
 3465 018c 02000000 		.4byte	.LCFI16
 3466 0190 0200     		.2byte	0x2
 3467 0192 7D       		.byte	0x7d
 3468 0193 00       		.sleb128 0
 3469 0194 02000000 		.4byte	.LCFI16
 3470 0198 04000000 		.4byte	.LCFI17
 3471 019c 0200     		.2byte	0x2
 3472 019e 7D       		.byte	0x7d
 3473 019f 04       		.sleb128 4
 3474 01a0 04000000 		.4byte	.LCFI17
 3475 01a4 2C000000 		.4byte	.LFE28
 3476 01a8 0200     		.2byte	0x2
 3477 01aa 7D       		.byte	0x7d
 3478 01ab 18       		.sleb128 24
 3479 01ac 00000000 		.4byte	0
 3480 01b0 00000000 		.4byte	0
 3481              	.LLST11:
 3482 01b4 00000000 		.4byte	.LFB29
 3483 01b8 02000000 		.4byte	.LCFI18
 3484 01bc 0200     		.2byte	0x2
 3485 01be 7D       		.byte	0x7d
 3486 01bf 00       		.sleb128 0
 3487 01c0 02000000 		.4byte	.LCFI18
 3488 01c4 04000000 		.4byte	.LCFI19
 3489 01c8 0200     		.2byte	0x2
 3490 01ca 7D       		.byte	0x7d
ARM GAS  /tmp/ccfZifSa.s 			page 85


 3491 01cb 04       		.sleb128 4
 3492 01cc 04000000 		.4byte	.LCFI19
 3493 01d0 60000000 		.4byte	.LFE29
 3494 01d4 0200     		.2byte	0x2
 3495 01d6 7D       		.byte	0x7d
 3496 01d7 10       		.sleb128 16
 3497 01d8 00000000 		.4byte	0
 3498 01dc 00000000 		.4byte	0
 3499              	.LLST12:
 3500 01e0 00000000 		.4byte	.LFB30
 3501 01e4 02000000 		.4byte	.LCFI20
 3502 01e8 0200     		.2byte	0x2
 3503 01ea 7D       		.byte	0x7d
 3504 01eb 00       		.sleb128 0
 3505 01ec 02000000 		.4byte	.LCFI20
 3506 01f0 04000000 		.4byte	.LCFI21
 3507 01f4 0200     		.2byte	0x2
 3508 01f6 7D       		.byte	0x7d
 3509 01f7 04       		.sleb128 4
 3510 01f8 04000000 		.4byte	.LCFI21
 3511 01fc 1E000000 		.4byte	.LFE30
 3512 0200 0200     		.2byte	0x2
 3513 0202 7D       		.byte	0x7d
 3514 0203 10       		.sleb128 16
 3515 0204 00000000 		.4byte	0
 3516 0208 00000000 		.4byte	0
 3517              	.LLST13:
 3518 020c 00000000 		.4byte	.LFB31
 3519 0210 02000000 		.4byte	.LCFI22
 3520 0214 0200     		.2byte	0x2
 3521 0216 7D       		.byte	0x7d
 3522 0217 00       		.sleb128 0
 3523 0218 02000000 		.4byte	.LCFI22
 3524 021c 04000000 		.4byte	.LCFI23
 3525 0220 0200     		.2byte	0x2
 3526 0222 7D       		.byte	0x7d
 3527 0223 04       		.sleb128 4
 3528 0224 04000000 		.4byte	.LCFI23
 3529 0228 98000000 		.4byte	.LFE31
 3530 022c 0200     		.2byte	0x2
 3531 022e 7D       		.byte	0x7d
 3532 022f 10       		.sleb128 16
 3533 0230 00000000 		.4byte	0
 3534 0234 00000000 		.4byte	0
 3535              	.LLST14:
 3536 0238 00000000 		.4byte	.LFB32
 3537 023c 02000000 		.4byte	.LCFI24
 3538 0240 0200     		.2byte	0x2
 3539 0242 7D       		.byte	0x7d
 3540 0243 00       		.sleb128 0
 3541 0244 02000000 		.4byte	.LCFI24
 3542 0248 6C000000 		.4byte	.LFE32
 3543 024c 0200     		.2byte	0x2
 3544 024e 7D       		.byte	0x7d
 3545 024f 08       		.sleb128 8
 3546 0250 00000000 		.4byte	0
 3547 0254 00000000 		.4byte	0
ARM GAS  /tmp/ccfZifSa.s 			page 86


 3548              		.section	.debug_aranges,"",%progbits
 3549 0000 8C000000 		.4byte	0x8c
 3550 0004 0200     		.2byte	0x2
 3551 0006 00000000 		.4byte	.Ldebug_info0
 3552 000a 04       		.byte	0x4
 3553 000b 00       		.byte	0
 3554 000c 0000     		.2byte	0
 3555 000e 0000     		.2byte	0
 3556 0010 00000000 		.4byte	.LFB11
 3557 0014 2C000000 		.4byte	.LFE11-.LFB11
 3558 0018 00000000 		.4byte	.LFB16
 3559 001c EC000000 		.4byte	.LFE16-.LFB16
 3560 0020 00000000 		.4byte	.LFB20
 3561 0024 0C010000 		.4byte	.LFE20-.LFB20
 3562 0028 00000000 		.4byte	.LFB21
 3563 002c 78000000 		.4byte	.LFE21-.LFB21
 3564 0030 00000000 		.4byte	.LFB22
 3565 0034 18010000 		.4byte	.LFE22-.LFB22
 3566 0038 00000000 		.4byte	.LFB23
 3567 003c C4000000 		.4byte	.LFE23-.LFB23
 3568 0040 00000000 		.4byte	.LFB24
 3569 0044 2C000000 		.4byte	.LFE24-.LFB24
 3570 0048 00000000 		.4byte	.LFB25
 3571 004c 60000000 		.4byte	.LFE25-.LFB25
 3572 0050 00000000 		.4byte	.LFB26
 3573 0054 1E000000 		.4byte	.LFE26-.LFB26
 3574 0058 00000000 		.4byte	.LFB27
 3575 005c 60000000 		.4byte	.LFE27-.LFB27
 3576 0060 00000000 		.4byte	.LFB28
 3577 0064 2C000000 		.4byte	.LFE28-.LFB28
 3578 0068 00000000 		.4byte	.LFB29
 3579 006c 60000000 		.4byte	.LFE29-.LFB29
 3580 0070 00000000 		.4byte	.LFB30
 3581 0074 1E000000 		.4byte	.LFE30-.LFB30
 3582 0078 00000000 		.4byte	.LFB31
 3583 007c 98000000 		.4byte	.LFE31-.LFB31
 3584 0080 00000000 		.4byte	.LFB32
 3585 0084 6C000000 		.4byte	.LFE32-.LFB32
 3586 0088 00000000 		.4byte	0
 3587 008c 00000000 		.4byte	0
 3588              		.section	.debug_ranges,"",%progbits
 3589              	.Ldebug_ranges0:
 3590 0000 00000000 		.4byte	.LFB11
 3591 0004 2C000000 		.4byte	.LFE11
 3592 0008 00000000 		.4byte	.LFB16
 3593 000c EC000000 		.4byte	.LFE16
 3594 0010 00000000 		.4byte	.LFB20
 3595 0014 0C010000 		.4byte	.LFE20
 3596 0018 00000000 		.4byte	.LFB21
 3597 001c 78000000 		.4byte	.LFE21
 3598 0020 00000000 		.4byte	.LFB22
 3599 0024 18010000 		.4byte	.LFE22
 3600 0028 00000000 		.4byte	.LFB23
 3601 002c C4000000 		.4byte	.LFE23
 3602 0030 00000000 		.4byte	.LFB24
 3603 0034 2C000000 		.4byte	.LFE24
 3604 0038 00000000 		.4byte	.LFB25
ARM GAS  /tmp/ccfZifSa.s 			page 87


 3605 003c 60000000 		.4byte	.LFE25
 3606 0040 00000000 		.4byte	.LFB26
 3607 0044 1E000000 		.4byte	.LFE26
 3608 0048 00000000 		.4byte	.LFB27
 3609 004c 60000000 		.4byte	.LFE27
 3610 0050 00000000 		.4byte	.LFB28
 3611 0054 2C000000 		.4byte	.LFE28
 3612 0058 00000000 		.4byte	.LFB29
 3613 005c 60000000 		.4byte	.LFE29
 3614 0060 00000000 		.4byte	.LFB30
 3615 0064 1E000000 		.4byte	.LFE30
 3616 0068 00000000 		.4byte	.LFB31
 3617 006c 98000000 		.4byte	.LFE31
 3618 0070 00000000 		.4byte	.LFB32
 3619 0074 6C000000 		.4byte	.LFE32
 3620 0078 00000000 		.4byte	0
 3621 007c 00000000 		.4byte	0
 3622              		.section	.debug_line,"",%progbits
 3623              	.Ldebug_line0:
 3624 0000 D8020000 		.section	.debug_str,"MS",%progbits,1
 3624      02000B01 
 3624      00000201 
 3624      FB0E0D00 
 3624      01010101 
 3625              	.LASF78:
 3626 0000 41504231 		.ascii	"APB1ENR\000"
 3626      454E5200 
 3627              	.LASF12:
 3628 0008 45585449 		.ascii	"EXTI4_15_IRQn\000"
 3628      345F3135 
 3628      5F495251 
 3628      6E00
 3629              	.LASF70:
 3630 0016 42535252 		.ascii	"BSRR\000"
 3630      00
 3631              	.LASF127:
 3632 001b 70747832 		.ascii	"ptx2_pckt_index\000"
 3632      5F70636B 
 3632      745F696E 
 3632      64657800 
 3633              	.LASF11:
 3634 002b 45585449 		.ascii	"EXTI2_3_IRQn\000"
 3634      325F335F 
 3634      4952516E 
 3634      00
 3635              	.LASF115:
 3636 0038 74656D70 		.ascii	"temp\000"
 3636      00
 3637              	.LASF74:
 3638 003d 41504232 		.ascii	"APB2RSTR\000"
 3638      52535452 
 3638      00
 3639              	.LASF2:
 3640 0046 5356435F 		.ascii	"SVC_IRQn\000"
 3640      4952516E 
 3640      00
 3641              	.LASF110:
ARM GAS  /tmp/ccfZifSa.s 			page 88


 3642 004f 52656164 		.ascii	"ReadUsart2Buffer\000"
 3642      55736172 
 3642      74324275 
 3642      66666572 
 3642      00
 3643              	.LASF112:
 3644 0060 55736172 		.ascii	"Usart1SendUnsigned\000"
 3644      74315365 
 3644      6E64556E 
 3644      7369676E 
 3644      656400
 3645              	.LASF91:
 3646 0073 4E564943 		.ascii	"NVIC_SetPriority\000"
 3646      5F536574 
 3646      5072696F 
 3646      72697479 
 3646      00
 3647              	.LASF45:
 3648 0084 756E7369 		.ascii	"unsigned int\000"
 3648      676E6564 
 3648      20696E74 
 3648      00
 3649              	.LASF25:
 3650 0091 54494D31 		.ascii	"TIM16_IRQn\000"
 3650      365F4952 
 3650      516E00
 3651              	.LASF79:
 3652 009c 42444352 		.ascii	"BDCR\000"
 3652      00
 3653              	.LASF122:
 3654 00a1 72783262 		.ascii	"rx2buff\000"
 3654      75666600 
 3655              	.LASF8:
 3656 00a9 464C4153 		.ascii	"FLASH_IRQn\000"
 3656      485F4952 
 3656      516E00
 3657              	.LASF101:
 3658 00b4 64756D6D 		.ascii	"dummy\000"
 3658      7900
 3659              	.LASF123:
 3660 00ba 70747831 		.ascii	"ptx1\000"
 3660      00
 3661              	.LASF126:
 3662 00bf 70747832 		.ascii	"ptx2\000"
 3662      00
 3663              	.LASF121:
 3664 00c4 74783262 		.ascii	"tx2buff\000"
 3664      75666600 
 3665              	.LASF10:
 3666 00cc 45585449 		.ascii	"EXTI0_1_IRQn\000"
 3666      305F315F 
 3666      4952516E 
 3666      00
 3667              	.LASF27:
 3668 00d9 49324331 		.ascii	"I2C1_IRQn\000"
 3668      5F495251 
 3668      6E00
ARM GAS  /tmp/ccfZifSa.s 			page 89


 3669              	.LASF3:
 3670 00e3 50656E64 		.ascii	"PendSV_IRQn\000"
 3670      53565F49 
 3670      52516E00 
 3671              	.LASF9:
 3672 00ef 5243435F 		.ascii	"RCC_IRQn\000"
 3672      4952516E 
 3672      00
 3673              	.LASF84:
 3674 00f8 47545052 		.ascii	"GTPR\000"
 3674      00
 3675              	.LASF105:
 3676 00fd 73656E64 		.ascii	"send\000"
 3676      00
 3677              	.LASF47:
 3678 0102 75696E74 		.ascii	"uint32_t\000"
 3678      33325F74 
 3678      00
 3679              	.LASF80:
 3680 010b 41484252 		.ascii	"AHBRSTR\000"
 3680      53545200 
 3681              	.LASF48:
 3682 0113 49534552 		.ascii	"ISER\000"
 3682      00
 3683              	.LASF51:
 3684 0118 52534552 		.ascii	"RSERVED1\000"
 3684      56454431 
 3684      00
 3685              	.LASF29:
 3686 0121 53504931 		.ascii	"SPI1_IRQn\000"
 3686      5F495251 
 3686      6E00
 3687              	.LASF90:
 3688 012b 4E564943 		.ascii	"NVIC_EnableIRQ\000"
 3688      5F456E61 
 3688      626C6549 
 3688      525100
 3689              	.LASF44:
 3690 013a 6C6F6E67 		.ascii	"long long unsigned int\000"
 3690      206C6F6E 
 3690      6720756E 
 3690      7369676E 
 3690      65642069 
 3691              	.LASF94:
 3692 0151 6E65775F 		.ascii	"new_mode\000"
 3692      6D6F6465 
 3692      00
 3693              	.LASF116:
 3694 015a 55534152 		.ascii	"USART1Config\000"
 3694      5431436F 
 3694      6E666967 
 3694      00
 3695              	.LASF64:
 3696 0167 44465352 		.ascii	"DFSR\000"
 3696      00
 3697              	.LASF114:
 3698 016c 55534152 		.ascii	"USART2Config\000"
ARM GAS  /tmp/ccfZifSa.s 			page 90


 3698      5432436F 
 3698      6E666967 
 3698      00
 3699              	.LASF38:
 3700 0179 5F5F7569 		.ascii	"__uint16_t\000"
 3700      6E743136 
 3700      5F7400
 3701              	.LASF132:
 3702 0184 7372632F 		.ascii	"src/uart.c\000"
 3702      75617274 
 3702      2E6300
 3703              	.LASF66:
 3704 018f 4D4F4445 		.ascii	"MODER\000"
 3704      5200
 3705              	.LASF37:
 3706 0195 4952516E 		.ascii	"IRQn_Type\000"
 3706      5F547970 
 3706      6500
 3707              	.LASF125:
 3708 019f 70727831 		.ascii	"prx1\000"
 3708      00
 3709              	.LASF32:
 3710 01a4 55534152 		.ascii	"USART2_IRQn\000"
 3710      54325F49 
 3710      52516E00 
 3711              	.LASF59:
 3712 01b0 43505549 		.ascii	"CPUID\000"
 3712      4400
 3713              	.LASF83:
 3714 01b6 5243435F 		.ascii	"RCC_TypeDef\000"
 3714      54797065 
 3714      44656600 
 3715              	.LASF96:
 3716 01c2 74656D70 		.ascii	"temp_gpio\000"
 3716      5F677069 
 3716      6F00
 3717              	.LASF87:
 3718 01cc 55534152 		.ascii	"USART_TypeDef\000"
 3718      545F5479 
 3718      70654465 
 3718      6600
 3719              	.LASF118:
 3720 01da 75736172 		.ascii	"usart1_have_data\000"
 3720      74315F68 
 3720      6176655F 
 3720      64617461 
 3720      00
 3721              	.LASF69:
 3722 01eb 50555044 		.ascii	"PUPDR\000"
 3722      5200
 3723              	.LASF75:
 3724 01f1 41504231 		.ascii	"APB1RSTR\000"
 3724      52535452 
 3724      00
 3725              	.LASF89:
 3726 01fa 63686172 		.ascii	"char\000"
 3726      00
ARM GAS  /tmp/ccfZifSa.s 			page 91


 3727              	.LASF61:
 3728 01ff 41495243 		.ascii	"AIRCR\000"
 3728      5200
 3729              	.LASF21:
 3730 0205 54494D33 		.ascii	"TIM3_IRQn\000"
 3730      5F495251 
 3730      6E00
 3731              	.LASF14:
 3732 020f 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 3732      5F436861 
 3732      6E6E656C 
 3732      315F4952 
 3732      516E00
 3733              	.LASF76:
 3734 0222 41484245 		.ascii	"AHBENR\000"
 3734      4E5200
 3735              	.LASF120:
 3736 0229 72783162 		.ascii	"rx1buff\000"
 3736      75666600 
 3737              	.LASF24:
 3738 0231 54494D31 		.ascii	"TIM15_IRQn\000"
 3738      355F4952 
 3738      516E00
 3739              	.LASF85:
 3740 023c 52544F52 		.ascii	"RTOR\000"
 3740      00
 3741              	.LASF128:
 3742 0241 70727832 		.ascii	"prx2\000"
 3742      00
 3743              	.LASF119:
 3744 0246 74783162 		.ascii	"tx1buff\000"
 3744      75666600 
 3745              	.LASF97:
 3746 024e 55736172 		.ascii	"Usart1Mode\000"
 3746      74314D6F 
 3746      646500
 3747              	.LASF43:
 3748 0259 6C6F6E67 		.ascii	"long long int\000"
 3748      206C6F6E 
 3748      6720696E 
 3748      7400
 3749              	.LASF5:
 3750 0267 57574447 		.ascii	"WWDG_IRQn\000"
 3750      5F495251 
 3750      6E00
 3751              	.LASF63:
 3752 0271 53484353 		.ascii	"SHCSR\000"
 3752      5200
 3753              	.LASF117:
 3754 0277 75736172 		.ascii	"usart1_mini_timeout\000"
 3754      74315F6D 
 3754      696E695F 
 3754      74696D65 
 3754      6F757400 
 3755              	.LASF98:
 3756 028b 52656164 		.ascii	"ReadUsart1Buffer\000"
 3756      55736172 
ARM GAS  /tmp/ccfZifSa.s 			page 92


 3756      74314275 
 3756      66666572 
 3756      00
 3757              	.LASF13:
 3758 029c 54535F49 		.ascii	"TS_IRQn\000"
 3758      52516E00 
 3759              	.LASF18:
 3760 02a4 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 3760      5F42524B 
 3760      5F55505F 
 3760      5452475F 
 3760      434F4D5F 
 3761              	.LASF107:
 3762 02bd 73697A65 		.ascii	"size\000"
 3762      00
 3763              	.LASF100:
 3764 02c2 6D61785F 		.ascii	"max_len\000"
 3764      6C656E00 
 3765              	.LASF6:
 3766 02ca 5056445F 		.ascii	"PVD_IRQn\000"
 3766      4952516E 
 3766      00
 3767              	.LASF81:
 3768 02d3 43464752 		.ascii	"CFGR2\000"
 3768      3200
 3769              	.LASF82:
 3770 02d9 43464752 		.ascii	"CFGR3\000"
 3770      3300
 3771              	.LASF54:
 3772 02df 49435052 		.ascii	"ICPR\000"
 3772      00
 3773              	.LASF17:
 3774 02e4 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 3774      5F434F4D 
 3774      505F4952 
 3774      516E00
 3775              	.LASF77:
 3776 02f3 41504232 		.ascii	"APB2ENR\000"
 3776      454E5200 
 3777              	.LASF106:
 3778 02fb 55736172 		.ascii	"Usart2SendUnsigned\000"
 3778      74325365 
 3778      6E64556E 
 3778      7369676E 
 3778      656400
 3779              	.LASF95:
 3780 030e 74656D70 		.ascii	"temp_int\000"
 3780      5F696E74 
 3780      00
 3781              	.LASF108:
 3782 0317 55736172 		.ascii	"Usart2SendSingle\000"
 3782      74325365 
 3782      6E645369 
 3782      6E676C65 
 3782      00
 3783              	.LASF68:
 3784 0328 4F535045 		.ascii	"OSPEEDR\000"
ARM GAS  /tmp/ccfZifSa.s 			page 93


 3784      45445200 
 3785              	.LASF111:
 3786 0330 55736172 		.ascii	"Usart1Send\000"
 3786      74315365 
 3786      6E6400
 3787              	.LASF88:
 3788 033b 6C6F6E67 		.ascii	"long double\000"
 3788      20646F75 
 3788      626C6500 
 3789              	.LASF46:
 3790 0347 75696E74 		.ascii	"uint16_t\000"
 3790      31365F74 
 3790      00
 3791              	.LASF92:
 3792 0350 4952516E 		.ascii	"IRQn\000"
 3792      00
 3793              	.LASF102:
 3794 0355 55534152 		.ascii	"USART1_IRQHandler\000"
 3794      54315F49 
 3794      52514861 
 3794      6E646C65 
 3794      7200
 3795              	.LASF129:
 3796 0367 70636B74 		.ascii	"pckt_gps_ready\000"
 3796      5F677073 
 3796      5F726561 
 3796      647900
 3797              	.LASF7:
 3798 0376 5254435F 		.ascii	"RTC_IRQn\000"
 3798      4952516E 
 3798      00
 3799              	.LASF49:
 3800 037f 52455345 		.ascii	"RESERVED0\000"
 3800      52564544 
 3800      3000
 3801              	.LASF62:
 3802 0389 52455345 		.ascii	"RESERVED1\000"
 3802      52564544 
 3802      3100
 3803              	.LASF53:
 3804 0393 52455345 		.ascii	"RESERVED2\000"
 3804      52564544 
 3804      3200
 3805              	.LASF55:
 3806 039d 52455345 		.ascii	"RESERVED3\000"
 3806      52564544 
 3806      3300
 3807              	.LASF56:
 3808 03a7 52455345 		.ascii	"RESERVED4\000"
 3808      52564544 
 3808      3400
 3809              	.LASF86:
 3810 03b1 52455345 		.ascii	"RESERVED5\000"
 3810      52564544 
 3810      3500
 3811              	.LASF36:
 3812 03bb 73686F72 		.ascii	"short int\000"
ARM GAS  /tmp/ccfZifSa.s 			page 94


 3812      7420696E 
 3812      7400
 3813              	.LASF40:
 3814 03c5 6C6F6E67 		.ascii	"long int\000"
 3814      20696E74 
 3814      00
 3815              	.LASF31:
 3816 03ce 55534152 		.ascii	"USART1_IRQn\000"
 3816      54315F49 
 3816      52516E00 
 3817              	.LASF0:
 3818 03da 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 3818      61736B61 
 3818      626C6549 
 3818      6E745F49 
 3818      52516E00 
 3819              	.LASF124:
 3820 03ee 70747831 		.ascii	"ptx1_pckt_index\000"
 3820      5F70636B 
 3820      745F696E 
 3820      64657800 
 3821              	.LASF93:
 3822 03fe 7072696F 		.ascii	"priority\000"
 3822      72697479 
 3822      00
 3823              	.LASF19:
 3824 0407 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 3824      5F43435F 
 3824      4952516E 
 3824      00
 3825              	.LASF67:
 3826 0414 4F545950 		.ascii	"OTYPER\000"
 3826      455200
 3827              	.LASF73:
 3828 041b 43464752 		.ascii	"CFGR\000"
 3828      00
 3829              	.LASF26:
 3830 0420 54494D31 		.ascii	"TIM17_IRQn\000"
 3830      375F4952 
 3830      516E00
 3831              	.LASF16:
 3832 042b 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 3832      5F436861 
 3832      6E6E656C 
 3832      345F355F 
 3832      4952516E 
 3833              	.LASF58:
 3834 0440 4E564943 		.ascii	"NVIC_Type\000"
 3834      5F547970 
 3834      6500
 3835              	.LASF65:
 3836 044a 5343425F 		.ascii	"SCB_Type\000"
 3836      54797065 
 3836      00
 3837              	.LASF113:
 3838 0453 55736172 		.ascii	"Usart1SendSingle\000"
 3838      74315365 
ARM GAS  /tmp/ccfZifSa.s 			page 95


 3838      6E645369 
 3838      6E676C65 
 3838      00
 3839              	.LASF72:
 3840 0464 4750494F 		.ascii	"GPIO_TypeDef\000"
 3840      5F547970 
 3840      65446566 
 3840      00
 3841              	.LASF130:
 3842 0471 75736172 		.ascii	"usart_mode\000"
 3842      745F6D6F 
 3842      646500
 3843              	.LASF4:
 3844 047c 53797354 		.ascii	"SysTick_IRQn\000"
 3844      69636B5F 
 3844      4952516E 
 3844      00
 3845              	.LASF33:
 3846 0489 4345435F 		.ascii	"CEC_IRQn\000"
 3846      4952516E 
 3846      00
 3847              	.LASF57:
 3848 0492 73697A65 		.ascii	"sizetype\000"
 3848      74797065 
 3848      00
 3849              	.LASF60:
 3850 049b 49435352 		.ascii	"ICSR\000"
 3850      00
 3851              	.LASF28:
 3852 04a0 49324332 		.ascii	"I2C2_IRQn\000"
 3852      5F495251 
 3852      6E00
 3853              	.LASF42:
 3854 04aa 6C6F6E67 		.ascii	"long unsigned int\000"
 3854      20756E73 
 3854      69676E65 
 3854      6420696E 
 3854      7400
 3855              	.LASF20:
 3856 04bc 54494D32 		.ascii	"TIM2_IRQn\000"
 3856      5F495251 
 3856      6E00
 3857              	.LASF109:
 3858 04c6 746F7365 		.ascii	"tosend\000"
 3858      6E6400
 3859              	.LASF133:
 3860 04cd 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 3860      652F6D65 
 3860      642F446F 
 3860      63756D65 
 3860      6E74732F 
 3861 0500 6100     		.ascii	"a\000"
 3862              	.LASF23:
 3863 0502 54494D31 		.ascii	"TIM14_IRQn\000"
 3863      345F4952 
 3863      516E00
 3864              	.LASF15:
ARM GAS  /tmp/ccfZifSa.s 			page 96


 3865 050d 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 3865      5F436861 
 3865      6E6E656C 
 3865      325F335F 
 3865      4952516E 
 3866              	.LASF22:
 3867 0522 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 3867      5F444143 
 3867      5F495251 
 3867      6E00
 3868              	.LASF34:
 3869 0530 756E7369 		.ascii	"unsigned char\000"
 3869      676E6564 
 3869      20636861 
 3869      7200
 3870              	.LASF41:
 3871 053e 5F5F7569 		.ascii	"__uint32_t\000"
 3871      6E743332 
 3871      5F7400
 3872              	.LASF104:
 3873 0549 55736172 		.ascii	"Usart2Send\000"
 3873      74325365 
 3873      6E6400
 3874              	.LASF50:
 3875 0554 49434552 		.ascii	"ICER\000"
 3875      00
 3876              	.LASF30:
 3877 0559 53504932 		.ascii	"SPI2_IRQn\000"
 3877      5F495251 
 3877      6E00
 3878              	.LASF35:
 3879 0563 7369676E 		.ascii	"signed char\000"
 3879      65642063 
 3879      68617200 
 3880              	.LASF39:
 3881 056f 73686F72 		.ascii	"short unsigned int\000"
 3881      7420756E 
 3881      7369676E 
 3881      65642069 
 3881      6E7400
 3882              	.LASF131:
 3883 0582 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 3883      43313120 
 3883      352E322E 
 3883      31203230 
 3883      31353132 
 3884 05b5 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 3884      20726576 
 3884      6973696F 
 3884      6E203233 
 3884      31383438 
 3885 05e8 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 3885      662D3220 
 3885      2D4F3020 
 3885      2D666F6D 
 3885      69742D66 
 3886 061b 66756E63 		.ascii	"function-sections\000"
ARM GAS  /tmp/ccfZifSa.s 			page 97


 3886      74696F6E 
 3886      2D736563 
 3886      74696F6E 
 3886      7300
 3887              	.LASF99:
 3888 062d 626F7574 		.ascii	"bout\000"
 3888      00
 3889              	.LASF1:
 3890 0632 48617264 		.ascii	"HardFault_IRQn\000"
 3890      4661756C 
 3890      745F4952 
 3890      516E00
 3891              	.LASF52:
 3892 0641 49535052 		.ascii	"ISPR\000"
 3892      00
 3893              	.LASF103:
 3894 0646 55534152 		.ascii	"USART2_IRQHandler\000"
 3894      54325F49 
 3894      52514861 
 3894      6E646C65 
 3894      7200
 3895              	.LASF71:
 3896 0658 4C434B52 		.ascii	"LCKR\000"
 3896      00
 3897              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccfZifSa.s 			page 98


DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
     /tmp/ccfZifSa.s:55     .text.NVIC_EnableIRQ:00000000 $t
     /tmp/ccfZifSa.s:59     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
     /tmp/ccfZifSa.s:91     .text.NVIC_EnableIRQ:00000028 $d
     /tmp/ccfZifSa.s:96     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccfZifSa.s:100    .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccfZifSa.s:240    .text.NVIC_SetPriority:000000e4 $d
                            *COM*:00000004 ptx1
                            *COM*:00000004 ptx1_pckt_index
                            *COM*:00000004 prx1
                            *COM*:00000004 ptx2
                            *COM*:00000004 ptx2_pckt_index
                            *COM*:00000004 prx2
     /tmp/ccfZifSa.s:255    .bss.pckt_gps_ready:00000000 pckt_gps_ready
     /tmp/ccfZifSa.s:256    .bss.pckt_gps_ready:00000000 $d
     /tmp/ccfZifSa.s:261    .data.usart_mode:00000000 usart_mode
     /tmp/ccfZifSa.s:264    .text.Usart1Mode:00000000 $t
     /tmp/ccfZifSa.s:269    .text.Usart1Mode:00000000 Usart1Mode
     /tmp/ccfZifSa.s:431    .text.Usart1Mode:000000f4 $d
     /tmp/ccfZifSa.s:441    .text.ReadUsart1Buffer:00000000 $t
     /tmp/ccfZifSa.s:446    .text.ReadUsart1Buffer:00000000 ReadUsart1Buffer
     /tmp/ccfZifSa.s:526    .text.ReadUsart1Buffer:00000070 $d
     /tmp/ccfZifSa.s:532    .text.USART1_IRQHandler:00000000 $t
     /tmp/ccfZifSa.s:537    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/ccfZifSa.s:698    .text.USART1_IRQHandler:000000f0 $d
     /tmp/ccfZifSa.s:712    .text.USART2_IRQHandler:00000000 $t
     /tmp/ccfZifSa.s:717    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
     /tmp/ccfZifSa.s:837    .text.USART2_IRQHandler:000000b0 $d
     /tmp/ccfZifSa.s:846    .text.Usart2Send:00000000 $t
     /tmp/ccfZifSa.s:851    .text.Usart2Send:00000000 Usart2Send
     /tmp/ccfZifSa.s:893    .text.Usart2SendUnsigned:00000000 Usart2SendUnsigned
     /tmp/ccfZifSa.s:888    .text.Usart2SendUnsigned:00000000 $t
     /tmp/ccfZifSa.s:953    .text.Usart2SendUnsigned:00000054 $d
     /tmp/ccfZifSa.s:960    .text.Usart2SendSingle:00000000 $t
     /tmp/ccfZifSa.s:965    .text.Usart2SendSingle:00000000 Usart2SendSingle
     /tmp/ccfZifSa.s:995    .text.ReadUsart2Buffer:00000000 $t
     /tmp/ccfZifSa.s:1000   .text.ReadUsart2Buffer:00000000 ReadUsart2Buffer
     /tmp/ccfZifSa.s:1065   .text.ReadUsart2Buffer:00000058 $d
     /tmp/ccfZifSa.s:1071   .text.Usart1Send:00000000 $t
     /tmp/ccfZifSa.s:1076   .text.Usart1Send:00000000 Usart1Send
     /tmp/ccfZifSa.s:1118   .text.Usart1SendUnsigned:00000000 Usart1SendUnsigned
     /tmp/ccfZifSa.s:1113   .text.Usart1SendUnsigned:00000000 $t
     /tmp/ccfZifSa.s:1178   .text.Usart1SendUnsigned:00000054 $d
     /tmp/ccfZifSa.s:1185   .text.Usart1SendSingle:00000000 $t
     /tmp/ccfZifSa.s:1190   .text.Usart1SendSingle:00000000 Usart1SendSingle
     /tmp/ccfZifSa.s:1220   .text.USART2Config:00000000 $t
     /tmp/ccfZifSa.s:1225   .text.USART2Config:00000000 USART2Config
     /tmp/ccfZifSa.s:1308   .text.USART2Config:00000074 $d
     /tmp/ccfZifSa.s:1321   .text.USART1Config:00000000 $t
     /tmp/ccfZifSa.s:1326   .text.USART1Config:00000000 USART1Config
     /tmp/ccfZifSa.s:1385   .text.USART1Config:0000004c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcpy
rx1buff
ARM GAS  /tmp/ccfZifSa.s 			page 99


usart1_have_data
usart1_mini_timeout
tx1buff
tx2buff
strlen
rx2buff
