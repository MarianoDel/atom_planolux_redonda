ARM GAS  /tmp/ccGefySF.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"uart.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/uart.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/uart.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccGefySF.s 			page 2


  58              		.type	NVIC_EnableIRQ, %function
  59              	NVIC_EnableIRQ:
  60              	.LFB11:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccGefySF.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccGefySF.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccGefySF.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccGefySF.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccGefySF.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccGefySF.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccGefySF.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccGefySF.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccGefySF.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccGefySF.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccGefySF.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccGefySF.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccGefySF.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccGefySF.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 812 0
  63              		.cfi_startproc
  64 0000 82B0     		sub	sp, sp, #8	@,,
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 8
  67 0002 0200     		movs	r2, r0	@ tmp116, IRQn
  68 0004 6B46     		mov	r3, sp	@ tmp122,
  69 0006 0733     		adds	r3, r3, #7	@ tmp117,
  70 0008 1A70     		strb	r2, [r3]	@ tmp118, IRQn
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  71              		.loc 1 813 0
  72 000a 074B     		ldr	r3, .L2	@ D.5489,
  73 000c 6A46     		mov	r2, sp	@ tmp123,
  74 000e 0732     		adds	r2, r2, #7	@ tmp119,
  75 0010 1278     		ldrb	r2, [r2]	@ D.5490, IRQn
  76 0012 1100     		movs	r1, r2	@ D.5491, D.5490
  77 0014 1F22     		movs	r2, #31	@ tmp120,
  78 0016 0A40     		ands	r2, r1	@ D.5491, D.5491
  79 0018 0121     		movs	r1, #1	@ tmp121,
  80 001a 9140     		lsls	r1, r1, r2	@ D.5492, D.5492, D.5491
  81 001c 0A00     		movs	r2, r1	@ D.5492, D.5492
  82 001e 1A60     		str	r2, [r3]	@ D.5491, _1->ISER
 814:./cmsis_core/core_cm0.h **** }
  83              		.loc 1 814 0
  84 0020 C046     		nop
  85 0022 02B0     		add	sp, sp, #8	@,,
  86              		@ sp needed	@
  87 0024 7047     		bx	lr
  88              	.L3:
  89 0026 C046     		.align	2
  90              	.L2:
  91 0028 00E100E0 		.word	-536813312
  92              		.cfi_endproc
  93              	.LFE11:
  94              		.size	NVIC_EnableIRQ, .-NVIC_EnableIRQ
  95              		.section	.text.NVIC_SetPriority,"ax",%progbits
  96              		.align	2
  97              		.code	16
  98              		.thumb_func
ARM GAS  /tmp/ccGefySF.s 			page 17


  99              		.type	NVIC_SetPriority, %function
 100              	NVIC_SetPriority:
 101              	.LFB16:
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccGefySF.s 			page 18


 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
 102              		.loc 1 893 0
 103              		.cfi_startproc
 104 0000 30B5     		push	{r4, r5, lr}	@
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 12
 107              		.cfi_offset 4, -12
 108              		.cfi_offset 5, -8
 109              		.cfi_offset 14, -4
 110 0002 83B0     		sub	sp, sp, #12	@,,
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 24
 113 0004 0200     		movs	r2, r0	@ tmp162, IRQn
 114 0006 0091     		str	r1, [sp]	@ priority, priority
 115 0008 6B46     		mov	r3, sp	@ tmp199,
 116 000a 0733     		adds	r3, r3, #7	@ tmp163,
 117 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 118              		.loc 1 894 0
 119 000e 6B46     		mov	r3, sp	@ tmp200,
 120 0010 0733     		adds	r3, r3, #7	@ tmp165,
 121 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
 122 0014 7F2B     		cmp	r3, #127	@ tmp166,
 123 0016 36D9     		bls	.L5	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 124              		.loc 1 895 0
 125 0018 324C     		ldr	r4, .L8	@ D.5493,
 126 001a 6B46     		mov	r3, sp	@ tmp201,
 127 001c 0733     		adds	r3, r3, #7	@ tmp167,
 128 001e 1B78     		ldrb	r3, [r3]	@ D.5494, IRQn
 129 0020 1A00     		movs	r2, r3	@ D.5495, D.5494
 130 0022 0F23     		movs	r3, #15	@ tmp168,
 131 0024 1340     		ands	r3, r2	@ D.5495, D.5495
ARM GAS  /tmp/ccGefySF.s 			page 19


 132 0026 083B     		subs	r3, r3, #8	@ D.5495,
 133 0028 9908     		lsrs	r1, r3, #2	@ D.5495, D.5495,
 134 002a 2E4A     		ldr	r2, .L8	@ D.5493,
 135 002c 6B46     		mov	r3, sp	@ tmp202,
 136 002e 0733     		adds	r3, r3, #7	@ tmp169,
 137 0030 1B78     		ldrb	r3, [r3]	@ D.5494, IRQn
 138 0032 1800     		movs	r0, r3	@ D.5495, D.5494
 139 0034 0F23     		movs	r3, #15	@ tmp170,
 140 0036 0340     		ands	r3, r0	@ D.5495, D.5495
 141 0038 083B     		subs	r3, r3, #8	@ D.5495,
 142 003a 9B08     		lsrs	r3, r3, #2	@ D.5495, D.5495,
 143 003c 0633     		adds	r3, r3, #6	@ tmp171,
 144 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 145 0040 D318     		adds	r3, r2, r3	@ tmp173, D.5493, tmp172
 146 0042 0433     		adds	r3, r3, #4	@ tmp174,
 147 0044 1B68     		ldr	r3, [r3]	@ D.5495, _9->SHP
 148 0046 6A46     		mov	r2, sp	@ tmp203,
 149 0048 0732     		adds	r2, r2, #7	@ tmp175,
 150 004a 1278     		ldrb	r2, [r2]	@ D.5494, IRQn
 151 004c 1000     		movs	r0, r2	@ D.5495, D.5494
 152 004e 0322     		movs	r2, #3	@ tmp176,
 153 0050 0240     		ands	r2, r0	@ D.5495, D.5495
 154 0052 D200     		lsls	r2, r2, #3	@ D.5495, D.5495,
 155 0054 FF20     		movs	r0, #255	@ tmp177,
 156 0056 9040     		lsls	r0, r0, r2	@ D.5496, D.5496, D.5495
 157 0058 0200     		movs	r2, r0	@ D.5496, D.5496
 158 005a D243     		mvns	r2, r2	@ D.5496, D.5496
 159 005c 1A40     		ands	r2, r3	@ D.5495, D.5495
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 160              		.loc 1 896 0
 161 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 162 0060 9B01     		lsls	r3, r3, #6	@ D.5495, tmp178,
 163 0062 FF20     		movs	r0, #255	@ tmp179,
 164 0064 1840     		ands	r0, r3	@ D.5495, D.5495
 165 0066 6B46     		mov	r3, sp	@ tmp205,
 166 0068 0733     		adds	r3, r3, #7	@ tmp180,
 167 006a 1B78     		ldrb	r3, [r3]	@ D.5494, IRQn
 168 006c 1D00     		movs	r5, r3	@ D.5495, D.5494
 169 006e 0323     		movs	r3, #3	@ tmp181,
 170 0070 2B40     		ands	r3, r5	@ D.5495, D.5495
 171 0072 DB00     		lsls	r3, r3, #3	@ D.5495, D.5495,
 172 0074 9840     		lsls	r0, r0, r3	@ D.5495, D.5495, D.5495
 173 0076 0300     		movs	r3, r0	@ D.5495, D.5495
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 174              		.loc 1 895 0
 175 0078 1A43     		orrs	r2, r3	@ D.5495, D.5495
 176 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.5495,
 177 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 178 007e E318     		adds	r3, r4, r3	@ tmp184, D.5493, tmp183
 179 0080 0433     		adds	r3, r3, #4	@ tmp185,
 180 0082 1A60     		str	r2, [r3]	@ D.5495, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 181              		.loc 1 900 0
 182 0084 2BE0     		b	.L7	@
ARM GAS  /tmp/ccGefySF.s 			page 20


 183              	.L5:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 184              		.loc 1 898 0
 185 0086 184C     		ldr	r4, .L8+4	@ D.5497,
 186 0088 6B46     		mov	r3, sp	@ tmp207,
 187 008a 0733     		adds	r3, r3, #7	@ tmp186,
 188 008c 1B78     		ldrb	r3, [r3]	@ D.5495, IRQn
 189 008e 5BB2     		sxtb	r3, r3	@ D.5495, D.5495
 190 0090 9B08     		lsrs	r3, r3, #2	@ D.5495, D.5495,
 191 0092 1549     		ldr	r1, .L8+4	@ D.5497,
 192 0094 6A46     		mov	r2, sp	@ tmp208,
 193 0096 0732     		adds	r2, r2, #7	@ tmp187,
 194 0098 1278     		ldrb	r2, [r2]	@ D.5495, IRQn
 195 009a 52B2     		sxtb	r2, r2	@ D.5495, D.5495
 196 009c 9208     		lsrs	r2, r2, #2	@ D.5495, D.5495,
 197 009e C032     		adds	r2, r2, #192	@ tmp188,
 198 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 199 00a2 5258     		ldr	r2, [r2, r1]	@ D.5495, _38->IP
 200 00a4 6946     		mov	r1, sp	@ tmp209,
 201 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 202 00a8 0978     		ldrb	r1, [r1]	@ D.5494, IRQn
 203 00aa 0800     		movs	r0, r1	@ D.5495, D.5494
 204 00ac 0321     		movs	r1, #3	@ tmp191,
 205 00ae 0140     		ands	r1, r0	@ D.5495, D.5495
 206 00b0 C900     		lsls	r1, r1, #3	@ D.5495, D.5495,
 207 00b2 FF20     		movs	r0, #255	@ tmp192,
 208 00b4 8840     		lsls	r0, r0, r1	@ D.5496, D.5496, D.5495
 209 00b6 0100     		movs	r1, r0	@ D.5496, D.5496
 210 00b8 C943     		mvns	r1, r1	@ D.5496, D.5496
 211 00ba 1140     		ands	r1, r2	@ D.5495, D.5495
 899:./cmsis_core/core_cm0.h **** }
 212              		.loc 1 899 0
 213 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 214 00be 9201     		lsls	r2, r2, #6	@ D.5495, tmp193,
 215 00c0 FF20     		movs	r0, #255	@ tmp194,
 216 00c2 1040     		ands	r0, r2	@ D.5495, D.5495
 217 00c4 6A46     		mov	r2, sp	@ tmp211,
 218 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 219 00c8 1278     		ldrb	r2, [r2]	@ D.5494, IRQn
 220 00ca 1500     		movs	r5, r2	@ D.5495, D.5494
 221 00cc 0322     		movs	r2, #3	@ tmp196,
 222 00ce 2A40     		ands	r2, r5	@ D.5495, D.5495
 223 00d0 D200     		lsls	r2, r2, #3	@ D.5495, D.5495,
 224 00d2 9040     		lsls	r0, r0, r2	@ D.5495, D.5495, D.5495
 225 00d4 0200     		movs	r2, r0	@ D.5495, D.5495
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 226              		.loc 1 898 0
 227 00d6 0A43     		orrs	r2, r1	@ D.5495, D.5495
 228 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 229 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 230 00dc 1A51     		str	r2, [r3, r4]	@ D.5495, _35->IP
 231              	.L7:
 232              		.loc 1 900 0
 233 00de C046     		nop
 234 00e0 03B0     		add	sp, sp, #12	@,,
 235              		@ sp needed	@
 236 00e2 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccGefySF.s 			page 21


 237              	.L9:
 238              		.align	2
 239              	.L8:
 240 00e4 00ED00E0 		.word	-536810240
 241 00e8 00E100E0 		.word	-536813312
 242              		.cfi_endproc
 243              	.LFE16:
 244              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 245              		.comm	ptx1,4,4
 246              		.comm	ptx1_pckt_index,4,4
 247              		.comm	prx1,4,4
 248              		.comm	ptx2,4,4
 249              		.comm	ptx2_pckt_index,4,4
 250              		.comm	prx2,4,4
 251              		.global	pckt_gps_ready
 252              		.section	.bss.pckt_gps_ready,"aw",%nobits
 253              		.type	pckt_gps_ready, %object
 254              		.size	pckt_gps_ready, 1
 255              	pckt_gps_ready:
 256 0000 00       		.space	1
 257              		.global	usart_mode
 258              		.section	.data.usart_mode,"aw",%progbits
 259              		.type	usart_mode, %object
 260              		.size	usart_mode, 1
 261              	usart_mode:
 262 0000 01       		.byte	1
 263              		.section	.text.Usart1Mode,"ax",%progbits
 264              		.align	2
 265              		.global	Usart1Mode
 266              		.code	16
 267              		.thumb_func
 268              		.type	Usart1Mode, %function
 269              	Usart1Mode:
 270              	.LFB20:
 271              		.file 2 "src/uart.c"
   1:src/uart.c    **** /**
   2:src/uart.c    ****   ******************************************************************************
   3:src/uart.c    ****   * @file    Template_2/stm32f0_uart.c
   4:src/uart.c    ****   * @author  Nahuel
   5:src/uart.c    ****   * @version V1.0
   6:src/uart.c    ****   * @date    22-August-2014
   7:src/uart.c    ****   * @brief   UART functions.
   8:src/uart.c    ****   ******************************************************************************
   9:src/uart.c    ****   * @attention
  10:src/uart.c    ****   *
  11:src/uart.c    ****   * Use this functions to configure serial comunication interface (UART).
  12:src/uart.c    ****   *
  13:src/uart.c    ****   ******************************************************************************
  14:src/uart.c    ****   */
  15:src/uart.c    **** 
  16:src/uart.c    **** /* Includes ------------------------------------------------------------------*/
  17:src/uart.c    **** #include "hard.h"
  18:src/uart.c    **** #include "stm32f0xx.h"
  19:src/uart.c    **** #include "uart.h"
  20:src/uart.c    **** 
  21:src/uart.c    **** #include "gps_vktel.h"
  22:src/uart.c    **** 
ARM GAS  /tmp/ccGefySF.s 			page 22


  23:src/uart.c    **** #include <string.h>
  24:src/uart.c    **** 
  25:src/uart.c    **** 
  26:src/uart.c    **** 
  27:src/uart.c    **** 
  28:src/uart.c    **** //--- Private typedef ---//
  29:src/uart.c    **** //--- Private define ---//
  30:src/uart.c    **** //--- Private macro ---//
  31:src/uart.c    **** 
  32:src/uart.c    **** //#define USE_USARTx_TIMEOUT
  33:src/uart.c    **** 
  34:src/uart.c    **** 
  35:src/uart.c    **** 
  36:src/uart.c    **** //--- Externals variables ---//
  37:src/uart.c    **** 
  38:src/uart.c    **** //--- Externals del GPS ---//
  39:src/uart.c    **** extern volatile unsigned char usart1_mini_timeout;
  40:src/uart.c    **** extern volatile unsigned char usart1_pckt_ready;
  41:src/uart.c    **** extern volatile unsigned char usart1_have_data;
  42:src/uart.c    **** 
  43:src/uart.c    **** #ifdef USE_GSM_GATEWAY
  44:src/uart.c    **** extern volatile unsigned char usart2_mini_timeout;
  45:src/uart.c    **** extern volatile unsigned char usart2_pckt_ready;
  46:src/uart.c    **** extern volatile unsigned char usart2_have_data;
  47:src/uart.c    **** #endif
  48:src/uart.c    **** 
  49:src/uart.c    **** //#define data512		data1		//en rx es la trama recibida; en tx es la trama a enviar
  50:src/uart.c    **** //#define data256		data		//en rx son los valores del channel elegido
  51:src/uart.c    **** //volatile unsigned char * pdmx;
  52:src/uart.c    **** 
  53:src/uart.c    **** extern volatile unsigned char tx1buff[];
  54:src/uart.c    **** extern volatile unsigned char rx1buff[];
  55:src/uart.c    **** 
  56:src/uart.c    **** extern volatile unsigned char tx2buff[];
  57:src/uart.c    **** extern volatile unsigned char rx2buff[];
  58:src/uart.c    **** 
  59:src/uart.c    **** //--- Private variables ---//
  60:src/uart.c    **** volatile unsigned char * ptx1;
  61:src/uart.c    **** volatile unsigned char * ptx1_pckt_index;
  62:src/uart.c    **** volatile unsigned char * prx1;
  63:src/uart.c    **** 
  64:src/uart.c    **** volatile unsigned char * ptx2;
  65:src/uart.c    **** volatile unsigned char * ptx2_pckt_index;
  66:src/uart.c    **** volatile unsigned char * prx2;
  67:src/uart.c    **** 
  68:src/uart.c    **** volatile unsigned char pckt_gps_ready = 0;
  69:src/uart.c    **** volatile unsigned char usart_mode = USART_GPS_MODE;
  70:src/uart.c    **** 
  71:src/uart.c    **** //Reception buffer.
  72:src/uart.c    **** 
  73:src/uart.c    **** //Transmission buffer.
  74:src/uart.c    **** 
  75:src/uart.c    **** //--- Private function prototypes ---//
  76:src/uart.c    **** //--- Private functions ---//
  77:src/uart.c    **** 
  78:src/uart.c    **** //cambio de modo al USART del GPS al GSM
  79:src/uart.c    **** //le paso el modo o le pregunto
ARM GAS  /tmp/ccGefySF.s 			page 23


  80:src/uart.c    **** //responde modo
  81:src/uart.c    **** unsigned char Usart1Mode (unsigned char new_mode)
  82:src/uart.c    **** {
 272              		.loc 2 82 0
 273              		.cfi_startproc
 274 0000 84B0     		sub	sp, sp, #16	@,,
 275              	.LCFI3:
 276              		.cfi_def_cfa_offset 16
 277 0002 0200     		movs	r2, r0	@ tmp142, new_mode
 278 0004 6B46     		mov	r3, sp	@ tmp202,
 279 0006 0733     		adds	r3, r3, #7	@ tmp143,
 280 0008 1A70     		strb	r2, [r3]	@ tmp144, new_mode
  83:src/uart.c    **** 	unsigned int temp_int;
  84:src/uart.c    **** 	unsigned int temp_gpio;
  85:src/uart.c    **** 
  86:src/uart.c    **** 	temp_int = USART1->CR1;
 281              		.loc 2 86 0
 282 000a 3A4B     		ldr	r3, .L14	@ D.5498,
 283 000c 1B68     		ldr	r3, [r3]	@ tmp145, _3->CR1
 284 000e 0393     		str	r3, [sp, #12]	@ tmp145, temp_int
  87:src/uart.c    **** 	USART1->CR1 &= 0xFFFFFF6F;		//limpio flags IE
 285              		.loc 2 87 0
 286 0010 384B     		ldr	r3, .L14	@ D.5498,
 287 0012 384A     		ldr	r2, .L14	@ D.5498,
 288 0014 1268     		ldr	r2, [r2]	@ D.5499, _7->CR1
 289 0016 9021     		movs	r1, #144	@ tmp146,
 290 0018 8A43     		bics	r2, r1	@ D.5499, tmp146
 291 001a 1A60     		str	r2, [r3]	@ D.5499, _6->CR1
  88:src/uart.c    **** 
  89:src/uart.c    **** 	if (new_mode == USART_GPS_MODE)
 292              		.loc 2 89 0
 293 001c 6B46     		mov	r3, sp	@ tmp203,
 294 001e 0733     		adds	r3, r3, #7	@ tmp147,
 295 0020 1B78     		ldrb	r3, [r3]	@ tmp148, new_mode
 296 0022 012B     		cmp	r3, #1	@ tmp148,
 297 0024 2BD1     		bne	.L11	@,
  90:src/uart.c    **** 	{
  91:src/uart.c    **** 		//config gpio A to Input
  92:src/uart.c    **** 		temp_gpio = GPIOA->MODER;		//2 bits por pin
 298              		.loc 2 92 0
 299 0026 9023     		movs	r3, #144	@ tmp197,
 300 0028 DB05     		lsls	r3, r3, #23	@ D.5500, tmp197,
 301 002a 1B68     		ldr	r3, [r3]	@ tmp149, _12->MODER
 302 002c 0293     		str	r3, [sp, #8]	@ tmp149, temp_gpio
  93:src/uart.c    **** 		temp_gpio &= 0xFFC3FFFF;		//PA9 PA10 input
 303              		.loc 2 93 0
 304 002e 029B     		ldr	r3, [sp, #8]	@ tmp151, temp_gpio
 305 0030 314A     		ldr	r2, .L14+4	@ tmp152,
 306 0032 1340     		ands	r3, r2	@ tmp150, tmp152
 307 0034 0293     		str	r3, [sp, #8]	@ tmp150, temp_gpio
  94:src/uart.c    **** 		temp_gpio |= 0x00000000;		//
  95:src/uart.c    **** 		GPIOA->MODER = temp_gpio;
 308              		.loc 2 95 0
 309 0036 9023     		movs	r3, #144	@ tmp198,
 310 0038 DB05     		lsls	r3, r3, #23	@ D.5500, tmp198,
 311 003a 029A     		ldr	r2, [sp, #8]	@ tmp153, temp_gpio
 312 003c 1A60     		str	r2, [r3]	@ tmp153, _16->MODER
ARM GAS  /tmp/ccGefySF.s 			page 24


  96:src/uart.c    **** 
  97:src/uart.c    **** 		GPIOA->AFR[1] &= 0xFFFFF00F;	//PA9 -> AF0 A10 -> AF0
 313              		.loc 2 97 0
 314 003e 9023     		movs	r3, #144	@ tmp199,
 315 0040 DB05     		lsls	r3, r3, #23	@ D.5500, tmp199,
 316 0042 9022     		movs	r2, #144	@ tmp200,
 317 0044 D205     		lsls	r2, r2, #23	@ D.5500, tmp200,
 318 0046 526A     		ldr	r2, [r2, #36]	@ D.5499, _19->AFR
 319 0048 2C49     		ldr	r1, .L14+8	@ tmp154,
 320 004a 0A40     		ands	r2, r1	@ D.5499, tmp154
 321 004c 5A62     		str	r2, [r3, #36]	@ D.5499, _18->AFR
  98:src/uart.c    **** 
  99:src/uart.c    **** 		//config gpio B to Alternative
 100:src/uart.c    **** 		temp_gpio = GPIOB->MODER;		//2 bits por pin
 322              		.loc 2 100 0
 323 004e 2C4B     		ldr	r3, .L14+12	@ D.5500,
 324 0050 1B68     		ldr	r3, [r3]	@ tmp155, _23->MODER
 325 0052 0293     		str	r3, [sp, #8]	@ tmp155, temp_gpio
 101:src/uart.c    **** 		temp_gpio &= 0xFFFF0FFF;		//PB6 PB7 alternative
 326              		.loc 2 101 0
 327 0054 029B     		ldr	r3, [sp, #8]	@ tmp157, temp_gpio
 328 0056 2B4A     		ldr	r2, .L14+16	@ tmp158,
 329 0058 1340     		ands	r3, r2	@ tmp156, tmp158
 330 005a 0293     		str	r3, [sp, #8]	@ tmp156, temp_gpio
 102:src/uart.c    **** 		temp_gpio |= 0x0000A000;		//
 331              		.loc 2 102 0
 332 005c 029B     		ldr	r3, [sp, #8]	@ tmp160, temp_gpio
 333 005e A022     		movs	r2, #160	@ tmp201,
 334 0060 1202     		lsls	r2, r2, #8	@ tmp161, tmp201,
 335 0062 1343     		orrs	r3, r2	@ tmp159, tmp161
 336 0064 0293     		str	r3, [sp, #8]	@ tmp159, temp_gpio
 103:src/uart.c    **** 		GPIOB->MODER = temp_gpio;
 337              		.loc 2 103 0
 338 0066 264B     		ldr	r3, .L14+12	@ D.5500,
 339 0068 029A     		ldr	r2, [sp, #8]	@ tmp162, temp_gpio
 340 006a 1A60     		str	r2, [r3]	@ tmp162, _27->MODER
 104:src/uart.c    **** 
 105:src/uart.c    **** 		GPIOB->AFR[0] &= 0x00FFFFFF;	//PB7 -> AF0 PB6 -> AF0
 341              		.loc 2 105 0
 342 006c 244B     		ldr	r3, .L14+12	@ D.5500,
 343 006e 244A     		ldr	r2, .L14+12	@ D.5500,
 344 0070 126A     		ldr	r2, [r2, #32]	@ D.5499, _30->AFR
 345 0072 1202     		lsls	r2, r2, #8	@ tmp163, D.5499,
 346 0074 120A     		lsrs	r2, r2, #8	@ D.5499, tmp163,
 347 0076 1A62     		str	r2, [r3, #32]	@ D.5499, _29->AFR
 106:src/uart.c    **** 
 107:src/uart.c    **** 		usart_mode = USART_GPS_MODE;
 348              		.loc 2 107 0
 349 0078 234B     		ldr	r3, .L14+20	@ tmp164,
 350 007a 0122     		movs	r2, #1	@ tmp165,
 351 007c 1A70     		strb	r2, [r3]	@ tmp166, usart_mode
 352              	.L11:
 108:src/uart.c    **** 	}
 109:src/uart.c    **** 
 110:src/uart.c    **** 	if (new_mode == USART_GSM_MODE)
 353              		.loc 2 110 0
 354 007e 6B46     		mov	r3, sp	@ tmp204,
ARM GAS  /tmp/ccGefySF.s 			page 25


 355 0080 0733     		adds	r3, r3, #7	@ tmp167,
 356 0082 1B78     		ldrb	r3, [r3]	@ tmp168, new_mode
 357 0084 022B     		cmp	r3, #2	@ tmp168,
 358 0086 2CD1     		bne	.L12	@,
 111:src/uart.c    **** 	{
 112:src/uart.c    **** 		//config gpio B to Input
 113:src/uart.c    **** 		temp_gpio = GPIOB->MODER;		//2 bits por pin
 359              		.loc 2 113 0
 360 0088 1D4B     		ldr	r3, .L14+12	@ D.5500,
 361 008a 1B68     		ldr	r3, [r3]	@ tmp169, _35->MODER
 362 008c 0293     		str	r3, [sp, #8]	@ tmp169, temp_gpio
 114:src/uart.c    **** 		temp_gpio &= 0xFFFF0FFF;		//PB6 PB7 input
 363              		.loc 2 114 0
 364 008e 029B     		ldr	r3, [sp, #8]	@ tmp171, temp_gpio
 365 0090 1C4A     		ldr	r2, .L14+16	@ tmp172,
 366 0092 1340     		ands	r3, r2	@ tmp170, tmp172
 367 0094 0293     		str	r3, [sp, #8]	@ tmp170, temp_gpio
 115:src/uart.c    **** 		temp_gpio |= 0x00000000;		//
 116:src/uart.c    **** 		GPIOB->MODER = temp_gpio;
 368              		.loc 2 116 0
 369 0096 1A4B     		ldr	r3, .L14+12	@ D.5500,
 370 0098 029A     		ldr	r2, [sp, #8]	@ tmp173, temp_gpio
 371 009a 1A60     		str	r2, [r3]	@ tmp173, _39->MODER
 117:src/uart.c    **** 
 118:src/uart.c    **** 		GPIOB->AFR[0] &= 0x00FFFFFF;	//PB7 -> AF0 PB6 -> AF0
 372              		.loc 2 118 0
 373 009c 184B     		ldr	r3, .L14+12	@ D.5500,
 374 009e 184A     		ldr	r2, .L14+12	@ D.5500,
 375 00a0 126A     		ldr	r2, [r2, #32]	@ D.5499, _42->AFR
 376 00a2 1202     		lsls	r2, r2, #8	@ tmp174, D.5499,
 377 00a4 120A     		lsrs	r2, r2, #8	@ D.5499, tmp174,
 378 00a6 1A62     		str	r2, [r3, #32]	@ D.5499, _41->AFR
 119:src/uart.c    **** 
 120:src/uart.c    **** 		//config gpio A to Alternative
 121:src/uart.c    **** 		temp_gpio = GPIOA->MODER;		//2 bits por pin
 379              		.loc 2 121 0
 380 00a8 9023     		movs	r3, #144	@ tmp191,
 381 00aa DB05     		lsls	r3, r3, #23	@ D.5500, tmp191,
 382 00ac 1B68     		ldr	r3, [r3]	@ tmp175, _46->MODER
 383 00ae 0293     		str	r3, [sp, #8]	@ tmp175, temp_gpio
 122:src/uart.c    **** 		temp_gpio &= 0xFFC3FFFF;		//PA9 PA10 alternative
 384              		.loc 2 122 0
 385 00b0 029B     		ldr	r3, [sp, #8]	@ tmp177, temp_gpio
 386 00b2 114A     		ldr	r2, .L14+4	@ tmp178,
 387 00b4 1340     		ands	r3, r2	@ tmp176, tmp178
 388 00b6 0293     		str	r3, [sp, #8]	@ tmp176, temp_gpio
 123:src/uart.c    **** 		temp_gpio |= 0x00280000;		//
 389              		.loc 2 123 0
 390 00b8 029B     		ldr	r3, [sp, #8]	@ tmp180, temp_gpio
 391 00ba A022     		movs	r2, #160	@ tmp192,
 392 00bc 9203     		lsls	r2, r2, #14	@ tmp181, tmp192,
 393 00be 1343     		orrs	r3, r2	@ tmp179, tmp181
 394 00c0 0293     		str	r3, [sp, #8]	@ tmp179, temp_gpio
 124:src/uart.c    **** 		GPIOA->MODER = temp_gpio;
 395              		.loc 2 124 0
 396 00c2 9023     		movs	r3, #144	@ tmp193,
 397 00c4 DB05     		lsls	r3, r3, #23	@ D.5500, tmp193,
ARM GAS  /tmp/ccGefySF.s 			page 26


 398 00c6 029A     		ldr	r2, [sp, #8]	@ tmp182, temp_gpio
 399 00c8 1A60     		str	r2, [r3]	@ tmp182, _50->MODER
 125:src/uart.c    **** 
 126:src/uart.c    **** 		GPIOA->AFR[1] |= 0x00000110;	//PA10 -> AF1 PA9 -> AF1
 400              		.loc 2 126 0
 401 00ca 9023     		movs	r3, #144	@ tmp194,
 402 00cc DB05     		lsls	r3, r3, #23	@ D.5500, tmp194,
 403 00ce 9022     		movs	r2, #144	@ tmp195,
 404 00d0 D205     		lsls	r2, r2, #23	@ D.5500, tmp195,
 405 00d2 526A     		ldr	r2, [r2, #36]	@ D.5499, _53->AFR
 406 00d4 8821     		movs	r1, #136	@ tmp196,
 407 00d6 4900     		lsls	r1, r1, #1	@ tmp183, tmp196,
 408 00d8 0A43     		orrs	r2, r1	@ D.5499, tmp183
 409 00da 5A62     		str	r2, [r3, #36]	@ D.5499, _52->AFR
 127:src/uart.c    **** 
 128:src/uart.c    **** 		usart_mode = USART_GSM_MODE;
 410              		.loc 2 128 0
 411 00dc 0A4B     		ldr	r3, .L14+20	@ tmp184,
 412 00de 0222     		movs	r2, #2	@ tmp185,
 413 00e0 1A70     		strb	r2, [r3]	@ tmp186, usart_mode
 414              	.L12:
 129:src/uart.c    **** 	}
 130:src/uart.c    **** 
 131:src/uart.c    **** 	USART1->CR1 = temp_int;
 415              		.loc 2 131 0
 416 00e2 044B     		ldr	r3, .L14	@ D.5498,
 417 00e4 039A     		ldr	r2, [sp, #12]	@ tmp187, temp_int
 418 00e6 1A60     		str	r2, [r3]	@ tmp187, _58->CR1
 132:src/uart.c    **** 	return usart_mode;
 419              		.loc 2 132 0
 420 00e8 074B     		ldr	r3, .L14+20	@ tmp188,
 421 00ea 1B78     		ldrb	r3, [r3]	@ tmp189, usart_mode
 422 00ec DBB2     		uxtb	r3, r3	@ D.5501, tmp189
 133:src/uart.c    **** }
 423              		.loc 2 133 0
 424 00ee 1800     		movs	r0, r3	@, <retval>
 425 00f0 04B0     		add	sp, sp, #16	@,,
 426              		@ sp needed	@
 427 00f2 7047     		bx	lr
 428              	.L15:
 429              		.align	2
 430              	.L14:
 431 00f4 00380140 		.word	1073821696
 432 00f8 FFFFC3FF 		.word	-3932161
 433 00fc 0FF0FFFF 		.word	-4081
 434 0100 00040048 		.word	1207960576
 435 0104 FF0FFFFF 		.word	-61441
 436 0108 00000000 		.word	usart_mode
 437              		.cfi_endproc
 438              	.LFE20:
 439              		.size	Usart1Mode, .-Usart1Mode
 440              		.section	.text.ReadUsart1Buffer,"ax",%progbits
 441              		.align	2
 442              		.global	ReadUsart1Buffer
 443              		.code	16
 444              		.thumb_func
 445              		.type	ReadUsart1Buffer, %function
ARM GAS  /tmp/ccGefySF.s 			page 27


 446              	ReadUsart1Buffer:
 447              	.LFB21:
 134:src/uart.c    **** 
 135:src/uart.c    **** unsigned char ReadUsart1Buffer (unsigned char * bout, unsigned short max_len)
 136:src/uart.c    **** {
 448              		.loc 2 136 0
 449              		.cfi_startproc
 450 0000 00B5     		push	{lr}	@
 451              	.LCFI4:
 452              		.cfi_def_cfa_offset 4
 453              		.cfi_offset 14, -4
 454 0002 85B0     		sub	sp, sp, #20	@,,
 455              	.LCFI5:
 456              		.cfi_def_cfa_offset 24
 457 0004 0190     		str	r0, [sp, #4]	@ bout, bout
 458 0006 0A00     		movs	r2, r1	@ tmp117, max_len
 459 0008 6B46     		mov	r3, sp	@ tmp136,
 460 000a 0233     		adds	r3, r3, #2	@ tmp118,
 461 000c 1A80     		strh	r2, [r3]	@ tmp119, max_len
 137:src/uart.c    **** 	unsigned int len;
 138:src/uart.c    **** 
 139:src/uart.c    **** 	len = prx1 - rx1buff;
 462              		.loc 2 139 0
 463 000e 124B     		ldr	r3, .L20	@ tmp120,
 464 0010 1B68     		ldr	r3, [r3]	@ D.5502, prx1
 465 0012 1A00     		movs	r2, r3	@ D.5503, D.5502
 466 0014 114B     		ldr	r3, .L20+4	@ D.5503,
 467 0016 D31A     		subs	r3, r2, r3	@ D.5503, D.5503, D.5503
 468 0018 0393     		str	r3, [sp, #12]	@ D.5503, len
 140:src/uart.c    **** 
 141:src/uart.c    **** 	if (len < max_len)
 469              		.loc 2 141 0
 470 001a 6B46     		mov	r3, sp	@ tmp137,
 471 001c 0233     		adds	r3, r3, #2	@ tmp121,
 472 001e 1A88     		ldrh	r2, [r3]	@ D.5504, max_len
 473 0020 039B     		ldr	r3, [sp, #12]	@ tmp122, len
 474 0022 9A42     		cmp	r2, r3	@ D.5504, tmp122
 475 0024 06D9     		bls	.L17	@,
 142:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx1buff, len);
 476              		.loc 2 142 0
 477 0026 039A     		ldr	r2, [sp, #12]	@ tmp123, len
 478 0028 0C49     		ldr	r1, .L20+4	@ tmp124,
 479 002a 019B     		ldr	r3, [sp, #4]	@ tmp125, bout
 480 002c 1800     		movs	r0, r3	@, tmp125
 481 002e FFF7FEFF 		bl	memcpy	@
 482 0032 09E0     		b	.L18	@
 483              	.L17:
 143:src/uart.c    **** 	else
 144:src/uart.c    **** 	{
 145:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx1buff, len);
 484              		.loc 2 145 0
 485 0034 039A     		ldr	r2, [sp, #12]	@ tmp126, len
 486 0036 0949     		ldr	r1, .L20+4	@ tmp127,
 487 0038 019B     		ldr	r3, [sp, #4]	@ tmp128, bout
 488 003a 1800     		movs	r0, r3	@, tmp128
 489 003c FFF7FEFF 		bl	memcpy	@
 146:src/uart.c    **** 		len = max_len;
ARM GAS  /tmp/ccGefySF.s 			page 28


 490              		.loc 2 146 0
 491 0040 6B46     		mov	r3, sp	@ tmp138,
 492 0042 0233     		adds	r3, r3, #2	@ tmp129,
 493 0044 1B88     		ldrh	r3, [r3]	@ tmp130, max_len
 494 0046 0393     		str	r3, [sp, #12]	@ tmp130, len
 495              	.L18:
 147:src/uart.c    **** 	}
 148:src/uart.c    **** 
 149:src/uart.c    **** 	//ajusto punteros de rx luego de la copia
 150:src/uart.c    **** 	prx1 = rx1buff;
 496              		.loc 2 150 0
 497 0048 034B     		ldr	r3, .L20	@ tmp131,
 498 004a 044A     		ldr	r2, .L20+4	@ tmp132,
 499 004c 1A60     		str	r2, [r3]	@ tmp132, prx1
 151:src/uart.c    **** 
 152:src/uart.c    **** 	return (unsigned char) len;
 500              		.loc 2 152 0
 501 004e 039B     		ldr	r3, [sp, #12]	@ tmp134, len
 502 0050 DBB2     		uxtb	r3, r3	@ D.5505, tmp133
 153:src/uart.c    **** }
 503              		.loc 2 153 0
 504 0052 1800     		movs	r0, r3	@, <retval>
 505 0054 05B0     		add	sp, sp, #20	@,,
 506              		@ sp needed	@
 507 0056 00BD     		pop	{pc}
 508              	.L21:
 509              		.align	2
 510              	.L20:
 511 0058 00000000 		.word	prx1
 512 005c 00000000 		.word	rx1buff
 513              		.cfi_endproc
 514              	.LFE21:
 515              		.size	ReadUsart1Buffer, .-ReadUsart1Buffer
 516              		.section	.text.USART1_IRQHandler,"ax",%progbits
 517              		.align	2
 518              		.global	USART1_IRQHandler
 519              		.code	16
 520              		.thumb_func
 521              		.type	USART1_IRQHandler, %function
 522              	USART1_IRQHandler:
 523              	.LFB22:
 154:src/uart.c    **** 
 155:src/uart.c    **** void USART1_IRQHandler(void)
 156:src/uart.c    **** {
 524              		.loc 2 156 0
 525              		.cfi_startproc
 526 0000 82B0     		sub	sp, sp, #8	@,,
 527              	.LCFI6:
 528              		.cfi_def_cfa_offset 8
 157:src/uart.c    **** 	unsigned char dummy;
 158:src/uart.c    **** 
 159:src/uart.c    **** 	/* USART in mode Receiver --------------------------------------------------*/
 160:src/uart.c    **** 	if (USART1->ISR & USART_ISR_RXNE)
 529              		.loc 2 160 0
 530 0002 3B4B     		ldr	r3, .L31	@ D.5506,
 531 0004 DB69     		ldr	r3, [r3, #28]	@ D.5507, _5->ISR
 532 0006 2022     		movs	r2, #32	@ tmp155,
ARM GAS  /tmp/ccGefySF.s 			page 29


 533 0008 1340     		ands	r3, r2	@ D.5507, tmp155
 534 000a 25D0     		beq	.L23	@,
 161:src/uart.c    **** 	{
 162:src/uart.c    **** 		dummy = USART1->RDR & 0x0FF;
 535              		.loc 2 162 0
 536 000c 384B     		ldr	r3, .L31	@ D.5506,
 537 000e 9B8C     		ldrh	r3, [r3, #36]	@ tmp157,
 538 0010 9AB2     		uxth	r2, r3	@ D.5508, tmp157
 539 0012 6B46     		mov	r3, sp	@ tmp201,
 540 0014 0733     		adds	r3, r3, #7	@ tmp158,
 541 0016 1A70     		strb	r2, [r3]	@ tmp159, dummy
 163:src/uart.c    **** 
 164:src/uart.c    **** 		//RX GPS & GSM
 165:src/uart.c    **** 		if ((usart_mode == USART_GPS_MODE) || (usart_mode == USART_GSM_MODE))
 542              		.loc 2 165 0
 543 0018 364B     		ldr	r3, .L31+4	@ tmp160,
 544 001a 1B78     		ldrb	r3, [r3]	@ tmp161, usart_mode
 545 001c DBB2     		uxtb	r3, r3	@ D.5509, tmp161
 546 001e 012B     		cmp	r3, #1	@ D.5509,
 547 0020 04D0     		beq	.L24	@,
 548              		.loc 2 165 0 is_stmt 0 discriminator 1
 549 0022 344B     		ldr	r3, .L31+4	@ tmp162,
 550 0024 1B78     		ldrb	r3, [r3]	@ tmp163, usart_mode
 551 0026 DBB2     		uxtb	r3, r3	@ D.5509, tmp163
 552 0028 022B     		cmp	r3, #2	@ D.5509,
 553 002a 15D1     		bne	.L23	@,
 554              	.L24:
 166:src/uart.c    **** 		{
 167:src/uart.c    **** 			if (prx1 < &rx1buff[SIZEOF_DATA])
 555              		.loc 2 167 0 is_stmt 1
 556 002c 324B     		ldr	r3, .L31+8	@ tmp164,
 557 002e 1A68     		ldr	r2, [r3]	@ D.5510, prx1
 558 0030 324B     		ldr	r3, .L31+12	@ tmp165,
 559 0032 9A42     		cmp	r2, r3	@ D.5510, tmp165
 560 0034 0DD2     		bcs	.L25	@,
 168:src/uart.c    **** 			{
 169:src/uart.c    **** 				*prx1 = dummy;
 561              		.loc 2 169 0
 562 0036 304B     		ldr	r3, .L31+8	@ tmp166,
 563 0038 1B68     		ldr	r3, [r3]	@ D.5510, prx1
 564 003a 6A46     		mov	r2, sp	@ tmp202,
 565 003c 0732     		adds	r2, r2, #7	@ tmp167,
 566 003e 1278     		ldrb	r2, [r2]	@ tmp168, dummy
 567 0040 1A70     		strb	r2, [r3]	@ tmp168, *_15
 170:src/uart.c    **** 				prx1++;
 568              		.loc 2 170 0
 569 0042 2D4B     		ldr	r3, .L31+8	@ tmp169,
 570 0044 1B68     		ldr	r3, [r3]	@ D.5510, prx1
 571 0046 5A1C     		adds	r2, r3, #1	@ D.5510, D.5510,
 572 0048 2B4B     		ldr	r3, .L31+8	@ tmp170,
 573 004a 1A60     		str	r2, [r3]	@ D.5510, prx1
 171:src/uart.c    **** 				usart1_have_data = 1;
 574              		.loc 2 171 0
 575 004c 2C4B     		ldr	r3, .L31+16	@ tmp171,
 576 004e 0122     		movs	r2, #1	@ tmp172,
 577 0050 1A70     		strb	r2, [r3]	@ tmp173, usart1_have_data
 578              	.L25:
ARM GAS  /tmp/ccGefySF.s 			page 30


 172:src/uart.c    **** 			}
 173:src/uart.c    **** 			usart1_mini_timeout = TT_GPS_MINI;
 579              		.loc 2 173 0
 580 0052 2C4B     		ldr	r3, .L31+20	@ tmp174,
 581 0054 0522     		movs	r2, #5	@ tmp175,
 582 0056 1A70     		strb	r2, [r3]	@ tmp176, usart1_mini_timeout
 583              	.L23:
 174:src/uart.c    **** 		}
 175:src/uart.c    **** 
 176:src/uart.c    **** //		//RX GSM
 177:src/uart.c    **** //		if (usart_mode == USART_GSM_MODE)
 178:src/uart.c    **** //		{
 179:src/uart.c    **** //			if (prx1 < &rx1buff[SIZEOF_DATA])
 180:src/uart.c    **** //			{
 181:src/uart.c    **** //				*prx1 = dummy;
 182:src/uart.c    **** //				prx1++;
 183:src/uart.c    **** //				gsm_have_data = 1;
 184:src/uart.c    **** //			}
 185:src/uart.c    **** //			gsm_mini_timeout = TT_GSM_MINI;
 186:src/uart.c    **** //		}
 187:src/uart.c    **** 	}
 188:src/uart.c    **** 
 189:src/uart.c    **** 	/* USART in mode Transmitter -------------------------------------------------*/
 190:src/uart.c    **** 
 191:src/uart.c    **** 	if (USART1->CR1 & USART_CR1_TXEIE)
 584              		.loc 2 191 0
 585 0058 254B     		ldr	r3, .L31	@ D.5506,
 586 005a 1B68     		ldr	r3, [r3]	@ D.5507, _22->CR1
 587 005c 8022     		movs	r2, #128	@ tmp177,
 588 005e 1340     		ands	r3, r2	@ D.5507, tmp177
 589 0060 28D0     		beq	.L26	@,
 192:src/uart.c    **** 	{
 193:src/uart.c    **** 		if (USART1->ISR & USART_ISR_TXE)
 590              		.loc 2 193 0
 591 0062 234B     		ldr	r3, .L31	@ D.5506,
 592 0064 DB69     		ldr	r3, [r3, #28]	@ D.5507, _25->ISR
 593 0066 8022     		movs	r2, #128	@ tmp178,
 594 0068 1340     		ands	r3, r2	@ D.5507, tmp178
 595 006a 23D0     		beq	.L26	@,
 194:src/uart.c    **** 		{
 195:src/uart.c    **** 			if ((ptx1 < &tx1buff[SIZEOF_DATA]) && (ptx1 < ptx1_pckt_index))
 596              		.loc 2 195 0
 597 006c 264B     		ldr	r3, .L31+24	@ tmp179,
 598 006e 1A68     		ldr	r2, [r3]	@ D.5510, ptx1
 599 0070 264B     		ldr	r3, .L31+28	@ tmp180,
 600 0072 9A42     		cmp	r2, r3	@ D.5510, tmp180
 601 0074 12D2     		bcs	.L27	@,
 602              		.loc 2 195 0 is_stmt 0 discriminator 1
 603 0076 244B     		ldr	r3, .L31+24	@ tmp181,
 604 0078 1A68     		ldr	r2, [r3]	@ D.5510, ptx1
 605 007a 254B     		ldr	r3, .L31+32	@ tmp182,
 606 007c 1B68     		ldr	r3, [r3]	@ D.5510, ptx1_pckt_index
 607 007e 9A42     		cmp	r2, r3	@ D.5510, D.5510
 608 0080 0CD2     		bcs	.L27	@,
 196:src/uart.c    **** 			{
 197:src/uart.c    **** 				USART1->TDR = *ptx1;
 609              		.loc 2 197 0 is_stmt 1
ARM GAS  /tmp/ccGefySF.s 			page 31


 610 0082 1B4A     		ldr	r2, .L31	@ D.5506,
 611 0084 204B     		ldr	r3, .L31+24	@ tmp183,
 612 0086 1B68     		ldr	r3, [r3]	@ D.5510, ptx1
 613 0088 1B78     		ldrb	r3, [r3]	@ tmp184, *_32
 614 008a DBB2     		uxtb	r3, r3	@ D.5509, tmp184
 615 008c 9BB2     		uxth	r3, r3	@ D.5508, D.5509
 616 008e 1385     		strh	r3, [r2, #40]	@ tmp185, _31->TDR
 198:src/uart.c    **** 				ptx1++;
 617              		.loc 2 198 0
 618 0090 1D4B     		ldr	r3, .L31+24	@ tmp186,
 619 0092 1B68     		ldr	r3, [r3]	@ D.5510, ptx1
 620 0094 5A1C     		adds	r2, r3, #1	@ D.5510, D.5510,
 621 0096 1C4B     		ldr	r3, .L31+24	@ tmp187,
 622 0098 1A60     		str	r2, [r3]	@ D.5510, ptx1
 623 009a 0BE0     		b	.L26	@
 624              	.L27:
 199:src/uart.c    **** 			}
 200:src/uart.c    **** 			else
 201:src/uart.c    **** 			{
 202:src/uart.c    **** 				ptx1 = tx1buff;
 625              		.loc 2 202 0
 626 009c 1A4B     		ldr	r3, .L31+24	@ tmp188,
 627 009e 1D4A     		ldr	r2, .L31+36	@ tmp189,
 628 00a0 1A60     		str	r2, [r3]	@ tmp189, ptx1
 203:src/uart.c    **** 				ptx1_pckt_index = tx1buff;
 629              		.loc 2 203 0
 630 00a2 1B4B     		ldr	r3, .L31+32	@ tmp190,
 631 00a4 1B4A     		ldr	r2, .L31+36	@ tmp191,
 632 00a6 1A60     		str	r2, [r3]	@ tmp191, ptx1_pckt_index
 204:src/uart.c    **** 				USART1->CR1 &= ~USART_CR1_TXEIE;
 633              		.loc 2 204 0
 634 00a8 114B     		ldr	r3, .L31	@ D.5506,
 635 00aa 114A     		ldr	r2, .L31	@ D.5506,
 636 00ac 1268     		ldr	r2, [r2]	@ D.5507, _42->CR1
 637 00ae 8021     		movs	r1, #128	@ tmp192,
 638 00b0 8A43     		bics	r2, r1	@ D.5507, tmp192
 639 00b2 1A60     		str	r2, [r3]	@ D.5507, _41->CR1
 640              	.L26:
 205:src/uart.c    **** 			}
 206:src/uart.c    **** 		}
 207:src/uart.c    **** 	}
 208:src/uart.c    **** 
 209:src/uart.c    **** 	if ((USART1->ISR & USART_ISR_ORE) || (USART1->ISR & USART_ISR_NE) || (USART1->ISR & USART_ISR_FE))
 641              		.loc 2 209 0
 642 00b4 0E4B     		ldr	r3, .L31	@ D.5506,
 643 00b6 DB69     		ldr	r3, [r3, #28]	@ D.5507, _46->ISR
 644 00b8 0822     		movs	r2, #8	@ tmp193,
 645 00ba 1340     		ands	r3, r2	@ D.5507, tmp193
 646 00bc 09D1     		bne	.L28	@,
 647              		.loc 2 209 0 is_stmt 0 discriminator 1
 648 00be 0C4B     		ldr	r3, .L31	@ D.5506,
 649 00c0 DB69     		ldr	r3, [r3, #28]	@ D.5507, _49->ISR
 650 00c2 0422     		movs	r2, #4	@ tmp194,
 651 00c4 1340     		ands	r3, r2	@ D.5507, tmp194
 652 00c6 04D1     		bne	.L28	@,
 653              		.loc 2 209 0 discriminator 2
 654 00c8 094B     		ldr	r3, .L31	@ D.5506,
ARM GAS  /tmp/ccGefySF.s 			page 32


 655 00ca DB69     		ldr	r3, [r3, #28]	@ D.5507, _52->ISR
 656 00cc 0222     		movs	r2, #2	@ tmp195,
 657 00ce 1340     		ands	r3, r2	@ D.5507, tmp195
 658 00d0 0BD0     		beq	.L30	@,
 659              	.L28:
 210:src/uart.c    **** 	{
 211:src/uart.c    **** 		USART1->ICR |= 0x0e;
 660              		.loc 2 211 0 is_stmt 1
 661 00d2 074B     		ldr	r3, .L31	@ D.5506,
 662 00d4 064A     		ldr	r2, .L31	@ D.5506,
 663 00d6 126A     		ldr	r2, [r2, #32]	@ D.5507, _56->ICR
 664 00d8 0E21     		movs	r1, #14	@ tmp196,
 665 00da 0A43     		orrs	r2, r1	@ D.5507, tmp196
 666 00dc 1A62     		str	r2, [r3, #32]	@ D.5507, _55->ICR
 212:src/uart.c    **** 		dummy = USART1->RDR;
 667              		.loc 2 212 0
 668 00de 044B     		ldr	r3, .L31	@ D.5506,
 669 00e0 9B8C     		ldrh	r3, [r3, #36]	@ tmp198,
 670 00e2 9AB2     		uxth	r2, r3	@ D.5508, tmp198
 671 00e4 6B46     		mov	r3, sp	@ tmp203,
 672 00e6 0733     		adds	r3, r3, #7	@ tmp199,
 673 00e8 1A70     		strb	r2, [r3]	@ tmp200, dummy
 674              	.L30:
 213:src/uart.c    **** 	}
 214:src/uart.c    **** }
 675              		.loc 2 214 0
 676 00ea C046     		nop
 677 00ec 02B0     		add	sp, sp, #8	@,,
 678              		@ sp needed	@
 679 00ee 7047     		bx	lr
 680              	.L32:
 681              		.align	2
 682              	.L31:
 683 00f0 00380140 		.word	1073821696
 684 00f4 00000000 		.word	usart_mode
 685 00f8 00000000 		.word	prx1
 686 00fc 00010000 		.word	rx1buff+256
 687 0100 00000000 		.word	usart1_have_data
 688 0104 00000000 		.word	usart1_mini_timeout
 689 0108 00000000 		.word	ptx1
 690 010c 00010000 		.word	tx1buff+256
 691 0110 00000000 		.word	ptx1_pckt_index
 692 0114 00000000 		.word	tx1buff
 693              		.cfi_endproc
 694              	.LFE22:
 695              		.size	USART1_IRQHandler, .-USART1_IRQHandler
 696              		.section	.text.USART2_IRQHandler,"ax",%progbits
 697              		.align	2
 698              		.global	USART2_IRQHandler
 699              		.code	16
 700              		.thumb_func
 701              		.type	USART2_IRQHandler, %function
 702              	USART2_IRQHandler:
 703              	.LFB23:
 215:src/uart.c    **** 
 216:src/uart.c    **** void USART2_IRQHandler(void)
 217:src/uart.c    **** {
ARM GAS  /tmp/ccGefySF.s 			page 33


 704              		.loc 2 217 0
 705              		.cfi_startproc
 706 0000 82B0     		sub	sp, sp, #8	@,,
 707              	.LCFI7:
 708              		.cfi_def_cfa_offset 8
 218:src/uart.c    **** 	unsigned char dummy;
 219:src/uart.c    **** 
 220:src/uart.c    **** 	/* USART in mode Receiver --------------------------------------------------*/
 221:src/uart.c    **** 	if (USART2->ISR & USART_ISR_RXNE)
 709              		.loc 2 221 0
 710 0002 2B4B     		ldr	r3, .L40	@ D.5511,
 711 0004 DB69     		ldr	r3, [r3, #28]	@ D.5512, _3->ISR
 712 0006 2022     		movs	r2, #32	@ tmp149,
 713 0008 1340     		ands	r3, r2	@ D.5512, tmp149
 714 000a 05D0     		beq	.L34	@,
 222:src/uart.c    **** 	{
 223:src/uart.c    **** 		//RX WIFI
 224:src/uart.c    **** 		dummy = USART2->RDR & 0x0FF;
 715              		.loc 2 224 0
 716 000c 284B     		ldr	r3, .L40	@ D.5511,
 717 000e 9B8C     		ldrh	r3, [r3, #36]	@ tmp151,
 718 0010 9AB2     		uxth	r2, r3	@ D.5513, tmp151
 719 0012 6B46     		mov	r3, sp	@ tmp178,
 720 0014 0733     		adds	r3, r3, #7	@ tmp152,
 721 0016 1A70     		strb	r2, [r3]	@ tmp153, dummy
 722              	.L34:
 225:src/uart.c    **** 
 226:src/uart.c    **** #ifdef USE_GSM_GATEWAY
 227:src/uart.c    **** 		if (prx2 < &rx2buff[SIZEOF_DATA])
 228:src/uart.c    **** 		{
 229:src/uart.c    **** 			*prx2 = dummy;
 230:src/uart.c    **** 			prx2++;
 231:src/uart.c    **** 			usart2_have_data = 1;
 232:src/uart.c    **** 		}
 233:src/uart.c    **** 			usart2_mini_timeout = TT_GPS_MINI;
 234:src/uart.c    **** #endif
 235:src/uart.c    **** 
 236:src/uart.c    **** 	}
 237:src/uart.c    **** 
 238:src/uart.c    **** 	/* USART in mode Transmitter -------------------------------------------------*/
 239:src/uart.c    **** 
 240:src/uart.c    **** 	if (USART2->CR1 & USART_CR1_TXEIE)
 723              		.loc 2 240 0
 724 0018 254B     		ldr	r3, .L40	@ D.5511,
 725 001a 1B68     		ldr	r3, [r3]	@ D.5512, _10->CR1
 726 001c 8022     		movs	r2, #128	@ tmp154,
 727 001e 1340     		ands	r3, r2	@ D.5512, tmp154
 728 0020 28D0     		beq	.L35	@,
 241:src/uart.c    **** 	{
 242:src/uart.c    **** 		if (USART2->ISR & USART_ISR_TXE)
 729              		.loc 2 242 0
 730 0022 234B     		ldr	r3, .L40	@ D.5511,
 731 0024 DB69     		ldr	r3, [r3, #28]	@ D.5512, _13->ISR
 732 0026 8022     		movs	r2, #128	@ tmp155,
 733 0028 1340     		ands	r3, r2	@ D.5512, tmp155
 734 002a 23D0     		beq	.L35	@,
 243:src/uart.c    **** 		{
ARM GAS  /tmp/ccGefySF.s 			page 34


 244:src/uart.c    **** 			if ((ptx2 < &tx2buff[SIZEOF_DATA]) && (ptx2 < ptx2_pckt_index))
 735              		.loc 2 244 0
 736 002c 214B     		ldr	r3, .L40+4	@ tmp156,
 737 002e 1A68     		ldr	r2, [r3]	@ D.5514, ptx2
 738 0030 214B     		ldr	r3, .L40+8	@ tmp157,
 739 0032 9A42     		cmp	r2, r3	@ D.5514, tmp157
 740 0034 12D2     		bcs	.L36	@,
 741              		.loc 2 244 0 is_stmt 0 discriminator 1
 742 0036 1F4B     		ldr	r3, .L40+4	@ tmp158,
 743 0038 1A68     		ldr	r2, [r3]	@ D.5514, ptx2
 744 003a 204B     		ldr	r3, .L40+12	@ tmp159,
 745 003c 1B68     		ldr	r3, [r3]	@ D.5514, ptx2_pckt_index
 746 003e 9A42     		cmp	r2, r3	@ D.5514, D.5514
 747 0040 0CD2     		bcs	.L36	@,
 245:src/uart.c    **** 			{
 246:src/uart.c    **** 				USART2->TDR = *ptx2;
 748              		.loc 2 246 0 is_stmt 1
 749 0042 1B4A     		ldr	r2, .L40	@ D.5511,
 750 0044 1B4B     		ldr	r3, .L40+4	@ tmp160,
 751 0046 1B68     		ldr	r3, [r3]	@ D.5514, ptx2
 752 0048 1B78     		ldrb	r3, [r3]	@ tmp161, *_20
 753 004a DBB2     		uxtb	r3, r3	@ D.5515, tmp161
 754 004c 9BB2     		uxth	r3, r3	@ D.5513, D.5515
 755 004e 1385     		strh	r3, [r2, #40]	@ tmp162, _19->TDR
 247:src/uart.c    **** 				ptx2++;
 756              		.loc 2 247 0
 757 0050 184B     		ldr	r3, .L40+4	@ tmp163,
 758 0052 1B68     		ldr	r3, [r3]	@ D.5514, ptx2
 759 0054 5A1C     		adds	r2, r3, #1	@ D.5514, D.5514,
 760 0056 174B     		ldr	r3, .L40+4	@ tmp164,
 761 0058 1A60     		str	r2, [r3]	@ D.5514, ptx2
 762 005a 0BE0     		b	.L35	@
 763              	.L36:
 248:src/uart.c    **** 			}
 249:src/uart.c    **** 			else
 250:src/uart.c    **** 			{
 251:src/uart.c    **** 				ptx2 = tx2buff;
 764              		.loc 2 251 0
 765 005c 154B     		ldr	r3, .L40+4	@ tmp165,
 766 005e 184A     		ldr	r2, .L40+16	@ tmp166,
 767 0060 1A60     		str	r2, [r3]	@ tmp166, ptx2
 252:src/uart.c    **** 				ptx2_pckt_index = tx2buff;
 768              		.loc 2 252 0
 769 0062 164B     		ldr	r3, .L40+12	@ tmp167,
 770 0064 164A     		ldr	r2, .L40+16	@ tmp168,
 771 0066 1A60     		str	r2, [r3]	@ tmp168, ptx2_pckt_index
 253:src/uart.c    **** 				USART2->CR1 &= ~USART_CR1_TXEIE;
 772              		.loc 2 253 0
 773 0068 114B     		ldr	r3, .L40	@ D.5511,
 774 006a 114A     		ldr	r2, .L40	@ D.5511,
 775 006c 1268     		ldr	r2, [r2]	@ D.5512, _30->CR1
 776 006e 8021     		movs	r1, #128	@ tmp169,
 777 0070 8A43     		bics	r2, r1	@ D.5512, tmp169
 778 0072 1A60     		str	r2, [r3]	@ D.5512, _29->CR1
 779              	.L35:
 254:src/uart.c    **** 			}
 255:src/uart.c    **** 		}
ARM GAS  /tmp/ccGefySF.s 			page 35


 256:src/uart.c    **** 	}
 257:src/uart.c    **** 
 258:src/uart.c    **** 	if ((USART2->ISR & USART_ISR_ORE) || (USART2->ISR & USART_ISR_NE) || (USART2->ISR & USART_ISR_FE))
 780              		.loc 2 258 0
 781 0074 0E4B     		ldr	r3, .L40	@ D.5511,
 782 0076 DB69     		ldr	r3, [r3, #28]	@ D.5512, _34->ISR
 783 0078 0822     		movs	r2, #8	@ tmp170,
 784 007a 1340     		ands	r3, r2	@ D.5512, tmp170
 785 007c 09D1     		bne	.L37	@,
 786              		.loc 2 258 0 is_stmt 0 discriminator 1
 787 007e 0C4B     		ldr	r3, .L40	@ D.5511,
 788 0080 DB69     		ldr	r3, [r3, #28]	@ D.5512, _37->ISR
 789 0082 0422     		movs	r2, #4	@ tmp171,
 790 0084 1340     		ands	r3, r2	@ D.5512, tmp171
 791 0086 04D1     		bne	.L37	@,
 792              		.loc 2 258 0 discriminator 2
 793 0088 094B     		ldr	r3, .L40	@ D.5511,
 794 008a DB69     		ldr	r3, [r3, #28]	@ D.5512, _40->ISR
 795 008c 0222     		movs	r2, #2	@ tmp172,
 796 008e 1340     		ands	r3, r2	@ D.5512, tmp172
 797 0090 0BD0     		beq	.L39	@,
 798              	.L37:
 259:src/uart.c    **** 	{
 260:src/uart.c    **** 		USART2->ICR |= 0x0e;
 799              		.loc 2 260 0 is_stmt 1
 800 0092 074B     		ldr	r3, .L40	@ D.5511,
 801 0094 064A     		ldr	r2, .L40	@ D.5511,
 802 0096 126A     		ldr	r2, [r2, #32]	@ D.5512, _44->ICR
 803 0098 0E21     		movs	r1, #14	@ tmp173,
 804 009a 0A43     		orrs	r2, r1	@ D.5512, tmp173
 805 009c 1A62     		str	r2, [r3, #32]	@ D.5512, _43->ICR
 261:src/uart.c    **** 		dummy = USART2->RDR;
 806              		.loc 2 261 0
 807 009e 044B     		ldr	r3, .L40	@ D.5511,
 808 00a0 9B8C     		ldrh	r3, [r3, #36]	@ tmp175,
 809 00a2 9AB2     		uxth	r2, r3	@ D.5513, tmp175
 810 00a4 6B46     		mov	r3, sp	@ tmp179,
 811 00a6 0733     		adds	r3, r3, #7	@ tmp176,
 812 00a8 1A70     		strb	r2, [r3]	@ tmp177, dummy
 813              	.L39:
 262:src/uart.c    **** 	}
 263:src/uart.c    **** }
 814              		.loc 2 263 0
 815 00aa C046     		nop
 816 00ac 02B0     		add	sp, sp, #8	@,,
 817              		@ sp needed	@
 818 00ae 7047     		bx	lr
 819              	.L41:
 820              		.align	2
 821              	.L40:
 822 00b0 00440040 		.word	1073759232
 823 00b4 00000000 		.word	ptx2
 824 00b8 00010000 		.word	tx2buff+256
 825 00bc 00000000 		.word	ptx2_pckt_index
 826 00c0 00000000 		.word	tx2buff
 827              		.cfi_endproc
 828              	.LFE23:
ARM GAS  /tmp/ccGefySF.s 			page 36


 829              		.size	USART2_IRQHandler, .-USART2_IRQHandler
 830              		.section	.text.Usart2Send,"ax",%progbits
 831              		.align	2
 832              		.global	Usart2Send
 833              		.code	16
 834              		.thumb_func
 835              		.type	Usart2Send, %function
 836              	Usart2Send:
 837              	.LFB24:
 264:src/uart.c    **** 
 265:src/uart.c    **** void Usart2Send (char * send)
 266:src/uart.c    **** {
 838              		.loc 2 266 0
 839              		.cfi_startproc
 840 0000 00B5     		push	{lr}	@
 841              	.LCFI8:
 842              		.cfi_def_cfa_offset 4
 843              		.cfi_offset 14, -4
 844 0002 85B0     		sub	sp, sp, #20	@,,
 845              	.LCFI9:
 846              		.cfi_def_cfa_offset 24
 847 0004 0190     		str	r0, [sp, #4]	@ send, send
 267:src/uart.c    **** 	unsigned char i;
 268:src/uart.c    **** 
 269:src/uart.c    **** 	i = strlen(send);
 848              		.loc 2 269 0
 849 0006 019B     		ldr	r3, [sp, #4]	@ tmp111, send
 850 0008 1800     		movs	r0, r3	@, tmp111
 851 000a FFF7FEFF 		bl	strlen	@
 852 000e 0200     		movs	r2, r0	@ D.5516,
 853 0010 0F23     		movs	r3, #15	@ tmp112,
 854 0012 6B44     		add	r3, r3, sp	@ tmp112,
 855 0014 1A70     		strb	r2, [r3]	@ tmp113, i
 270:src/uart.c    **** 	Usart2SendUnsigned((unsigned char *) send, i);
 856              		.loc 2 270 0
 857 0016 0F23     		movs	r3, #15	@ tmp114,
 858 0018 6B44     		add	r3, r3, sp	@ tmp114,
 859 001a 1A78     		ldrb	r2, [r3]	@ tmp115, i
 860 001c 019B     		ldr	r3, [sp, #4]	@ tmp116, send
 861 001e 1100     		movs	r1, r2	@, tmp115
 862 0020 1800     		movs	r0, r3	@, tmp116
 863 0022 FFF7FEFF 		bl	Usart2SendUnsigned	@
 271:src/uart.c    **** }
 864              		.loc 2 271 0
 865 0026 C046     		nop
 866 0028 05B0     		add	sp, sp, #20	@,,
 867              		@ sp needed	@
 868 002a 00BD     		pop	{pc}
 869              		.cfi_endproc
 870              	.LFE24:
 871              		.size	Usart2Send, .-Usart2Send
 872              		.section	.text.Usart2SendUnsigned,"ax",%progbits
 873              		.align	2
 874              		.global	Usart2SendUnsigned
 875              		.code	16
 876              		.thumb_func
 877              		.type	Usart2SendUnsigned, %function
ARM GAS  /tmp/ccGefySF.s 			page 37


 878              	Usart2SendUnsigned:
 879              	.LFB25:
 272:src/uart.c    **** 
 273:src/uart.c    **** void Usart2SendUnsigned(unsigned char * send, unsigned char size)
 274:src/uart.c    **** {
 880              		.loc 2 274 0
 881              		.cfi_startproc
 882 0000 00B5     		push	{lr}	@
 883              	.LCFI10:
 884              		.cfi_def_cfa_offset 4
 885              		.cfi_offset 14, -4
 886 0002 83B0     		sub	sp, sp, #12	@,,
 887              	.LCFI11:
 888              		.cfi_def_cfa_offset 16
 889 0004 0190     		str	r0, [sp, #4]	@ send, send
 890 0006 0A00     		movs	r2, r1	@ tmp122, size
 891 0008 6B46     		mov	r3, sp	@ tmp135,
 892 000a 0333     		adds	r3, r3, #3	@ tmp123,
 893 000c 1A70     		strb	r2, [r3]	@ tmp124, size
 275:src/uart.c    **** 	if ((ptx2_pckt_index + size) < &tx2buff[SIZEOF_DATA])
 894              		.loc 2 275 0
 895 000e 114B     		ldr	r3, .L46	@ tmp125,
 896 0010 1A68     		ldr	r2, [r3]	@ D.5517, ptx2_pckt_index
 897 0012 6B46     		mov	r3, sp	@ tmp136,
 898 0014 0333     		adds	r3, r3, #3	@ tmp126,
 899 0016 1B78     		ldrb	r3, [r3]	@ D.5518, size
 900 0018 D218     		adds	r2, r2, r3	@ D.5517, D.5517, D.5518
 901 001a 0F4B     		ldr	r3, .L46+4	@ tmp127,
 902 001c 9A42     		cmp	r2, r3	@ D.5517, tmp127
 903 001e 16D2     		bcs	.L45	@,
 276:src/uart.c    **** 	{
 277:src/uart.c    **** 		memcpy((unsigned char *)ptx2_pckt_index, send, size);
 904              		.loc 2 277 0
 905 0020 0C4B     		ldr	r3, .L46	@ tmp128,
 906 0022 1868     		ldr	r0, [r3]	@ D.5517, ptx2_pckt_index
 907 0024 6B46     		mov	r3, sp	@ tmp137,
 908 0026 0333     		adds	r3, r3, #3	@ tmp129,
 909 0028 1A78     		ldrb	r2, [r3]	@ D.5519, size
 910 002a 019B     		ldr	r3, [sp, #4]	@ tmp130, send
 911 002c 1900     		movs	r1, r3	@, tmp130
 912 002e FFF7FEFF 		bl	memcpy	@
 278:src/uart.c    **** 		ptx2_pckt_index += size;
 913              		.loc 2 278 0
 914 0032 084B     		ldr	r3, .L46	@ tmp131,
 915 0034 1A68     		ldr	r2, [r3]	@ D.5517, ptx2_pckt_index
 916 0036 6B46     		mov	r3, sp	@ tmp138,
 917 0038 0333     		adds	r3, r3, #3	@ tmp132,
 918 003a 1B78     		ldrb	r3, [r3]	@ D.5518, size
 919 003c D218     		adds	r2, r2, r3	@ D.5517, D.5517, D.5518
 920 003e 054B     		ldr	r3, .L46	@ tmp133,
 921 0040 1A60     		str	r2, [r3]	@ D.5517, ptx2_pckt_index
 279:src/uart.c    **** 		USART2->CR1 |= USART_CR1_TXEIE;
 922              		.loc 2 279 0
 923 0042 064B     		ldr	r3, .L46+8	@ D.5520,
 924 0044 054A     		ldr	r2, .L46+8	@ D.5520,
 925 0046 1268     		ldr	r2, [r2]	@ D.5521, _16->CR1
 926 0048 8021     		movs	r1, #128	@ tmp134,
ARM GAS  /tmp/ccGefySF.s 			page 38


 927 004a 0A43     		orrs	r2, r1	@ D.5521, tmp134
 928 004c 1A60     		str	r2, [r3]	@ D.5521, _15->CR1
 929              	.L45:
 280:src/uart.c    **** 	}
 281:src/uart.c    **** }
 930              		.loc 2 281 0
 931 004e C046     		nop
 932 0050 03B0     		add	sp, sp, #12	@,,
 933              		@ sp needed	@
 934 0052 00BD     		pop	{pc}
 935              	.L47:
 936              		.align	2
 937              	.L46:
 938 0054 00000000 		.word	ptx2_pckt_index
 939 0058 00010000 		.word	tx2buff+256
 940 005c 00440040 		.word	1073759232
 941              		.cfi_endproc
 942              	.LFE25:
 943              		.size	Usart2SendUnsigned, .-Usart2SendUnsigned
 944              		.section	.text.Usart2SendSingle,"ax",%progbits
 945              		.align	2
 946              		.global	Usart2SendSingle
 947              		.code	16
 948              		.thumb_func
 949              		.type	Usart2SendSingle, %function
 950              	Usart2SendSingle:
 951              	.LFB26:
 282:src/uart.c    **** 
 283:src/uart.c    **** void Usart2SendSingle(unsigned char tosend)
 284:src/uart.c    **** {
 952              		.loc 2 284 0
 953              		.cfi_startproc
 954 0000 00B5     		push	{lr}	@
 955              	.LCFI12:
 956              		.cfi_def_cfa_offset 4
 957              		.cfi_offset 14, -4
 958 0002 83B0     		sub	sp, sp, #12	@,,
 959              	.LCFI13:
 960              		.cfi_def_cfa_offset 16
 961 0004 0200     		movs	r2, r0	@ tmp110, tosend
 962 0006 6B46     		mov	r3, sp	@ tmp114,
 963 0008 0733     		adds	r3, r3, #7	@ tmp111,
 964 000a 1A70     		strb	r2, [r3]	@ tmp112, tosend
 285:src/uart.c    **** 	Usart2SendUnsigned(&tosend, 1);
 965              		.loc 2 285 0
 966 000c 6B46     		mov	r3, sp	@ tmp115,
 967 000e 0733     		adds	r3, r3, #7	@ tmp113,
 968 0010 0121     		movs	r1, #1	@,
 969 0012 1800     		movs	r0, r3	@, tmp113
 970 0014 FFF7FEFF 		bl	Usart2SendUnsigned	@
 286:src/uart.c    **** }
 971              		.loc 2 286 0
 972 0018 C046     		nop
 973 001a 03B0     		add	sp, sp, #12	@,,
 974              		@ sp needed	@
 975 001c 00BD     		pop	{pc}
 976              		.cfi_endproc
ARM GAS  /tmp/ccGefySF.s 			page 39


 977              	.LFE26:
 978              		.size	Usart2SendSingle, .-Usart2SendSingle
 979 001e C046     		.section	.text.ReadUsart2Buffer,"ax",%progbits
 980              		.align	2
 981              		.global	ReadUsart2Buffer
 982              		.code	16
 983              		.thumb_func
 984              		.type	ReadUsart2Buffer, %function
 985              	ReadUsart2Buffer:
 986              	.LFB27:
 287:src/uart.c    **** 
 288:src/uart.c    **** unsigned char ReadUsart2Buffer (unsigned char * bout, unsigned short max_len)
 289:src/uart.c    **** {
 987              		.loc 2 289 0
 988              		.cfi_startproc
 989 0000 00B5     		push	{lr}	@
 990              	.LCFI14:
 991              		.cfi_def_cfa_offset 4
 992              		.cfi_offset 14, -4
 993 0002 85B0     		sub	sp, sp, #20	@,,
 994              	.LCFI15:
 995              		.cfi_def_cfa_offset 24
 996 0004 0190     		str	r0, [sp, #4]	@ bout, bout
 997 0006 0A00     		movs	r2, r1	@ tmp117, max_len
 998 0008 6B46     		mov	r3, sp	@ tmp136,
 999 000a 0233     		adds	r3, r3, #2	@ tmp118,
 1000 000c 1A80     		strh	r2, [r3]	@ tmp119, max_len
 290:src/uart.c    **** 	unsigned int len;
 291:src/uart.c    **** 
 292:src/uart.c    **** 	len = prx2 - rx2buff;
 1001              		.loc 2 292 0
 1002 000e 124B     		ldr	r3, .L53	@ tmp120,
 1003 0010 1B68     		ldr	r3, [r3]	@ D.5522, prx2
 1004 0012 1A00     		movs	r2, r3	@ D.5523, D.5522
 1005 0014 114B     		ldr	r3, .L53+4	@ D.5523,
 1006 0016 D31A     		subs	r3, r2, r3	@ D.5523, D.5523, D.5523
 1007 0018 0393     		str	r3, [sp, #12]	@ D.5523, len
 293:src/uart.c    **** 
 294:src/uart.c    **** 	if (len < max_len)
 1008              		.loc 2 294 0
 1009 001a 6B46     		mov	r3, sp	@ tmp137,
 1010 001c 0233     		adds	r3, r3, #2	@ tmp121,
 1011 001e 1A88     		ldrh	r2, [r3]	@ D.5524, max_len
 1012 0020 039B     		ldr	r3, [sp, #12]	@ tmp122, len
 1013 0022 9A42     		cmp	r2, r3	@ D.5524, tmp122
 1014 0024 06D9     		bls	.L50	@,
 295:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx2buff, len);
 1015              		.loc 2 295 0
 1016 0026 039A     		ldr	r2, [sp, #12]	@ tmp123, len
 1017 0028 0C49     		ldr	r1, .L53+4	@ tmp124,
 1018 002a 019B     		ldr	r3, [sp, #4]	@ tmp125, bout
 1019 002c 1800     		movs	r0, r3	@, tmp125
 1020 002e FFF7FEFF 		bl	memcpy	@
 1021 0032 09E0     		b	.L51	@
 1022              	.L50:
 296:src/uart.c    **** 	else
 297:src/uart.c    **** 	{
ARM GAS  /tmp/ccGefySF.s 			page 40


 298:src/uart.c    **** 		memcpy(bout, (unsigned char *) rx2buff, len);
 1023              		.loc 2 298 0
 1024 0034 039A     		ldr	r2, [sp, #12]	@ tmp126, len
 1025 0036 0949     		ldr	r1, .L53+4	@ tmp127,
 1026 0038 019B     		ldr	r3, [sp, #4]	@ tmp128, bout
 1027 003a 1800     		movs	r0, r3	@, tmp128
 1028 003c FFF7FEFF 		bl	memcpy	@
 299:src/uart.c    **** 		len = max_len;
 1029              		.loc 2 299 0
 1030 0040 6B46     		mov	r3, sp	@ tmp138,
 1031 0042 0233     		adds	r3, r3, #2	@ tmp129,
 1032 0044 1B88     		ldrh	r3, [r3]	@ tmp130, max_len
 1033 0046 0393     		str	r3, [sp, #12]	@ tmp130, len
 1034              	.L51:
 300:src/uart.c    **** 	}
 301:src/uart.c    **** 
 302:src/uart.c    **** 	//ajusto punteros de rx luego de la copia
 303:src/uart.c    **** 	prx2 = rx2buff;
 1035              		.loc 2 303 0
 1036 0048 034B     		ldr	r3, .L53	@ tmp131,
 1037 004a 044A     		ldr	r2, .L53+4	@ tmp132,
 1038 004c 1A60     		str	r2, [r3]	@ tmp132, prx2
 304:src/uart.c    **** 
 305:src/uart.c    **** 	return (unsigned char) len;
 1039              		.loc 2 305 0
 1040 004e 039B     		ldr	r3, [sp, #12]	@ tmp134, len
 1041 0050 DBB2     		uxtb	r3, r3	@ D.5525, tmp133
 306:src/uart.c    **** }
 1042              		.loc 2 306 0
 1043 0052 1800     		movs	r0, r3	@, <retval>
 1044 0054 05B0     		add	sp, sp, #20	@,,
 1045              		@ sp needed	@
 1046 0056 00BD     		pop	{pc}
 1047              	.L54:
 1048              		.align	2
 1049              	.L53:
 1050 0058 00000000 		.word	prx2
 1051 005c 00000000 		.word	rx2buff
 1052              		.cfi_endproc
 1053              	.LFE27:
 1054              		.size	ReadUsart2Buffer, .-ReadUsart2Buffer
 1055              		.section	.text.Usart1Send,"ax",%progbits
 1056              		.align	2
 1057              		.global	Usart1Send
 1058              		.code	16
 1059              		.thumb_func
 1060              		.type	Usart1Send, %function
 1061              	Usart1Send:
 1062              	.LFB28:
 307:src/uart.c    **** 
 308:src/uart.c    **** void Usart1Send (char * send)
 309:src/uart.c    **** {
 1063              		.loc 2 309 0
 1064              		.cfi_startproc
 1065 0000 00B5     		push	{lr}	@
 1066              	.LCFI16:
 1067              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccGefySF.s 			page 41


 1068              		.cfi_offset 14, -4
 1069 0002 85B0     		sub	sp, sp, #20	@,,
 1070              	.LCFI17:
 1071              		.cfi_def_cfa_offset 24
 1072 0004 0190     		str	r0, [sp, #4]	@ send, send
 310:src/uart.c    **** 	unsigned char i;
 311:src/uart.c    **** 
 312:src/uart.c    **** 	i = strlen(send);
 1073              		.loc 2 312 0
 1074 0006 019B     		ldr	r3, [sp, #4]	@ tmp111, send
 1075 0008 1800     		movs	r0, r3	@, tmp111
 1076 000a FFF7FEFF 		bl	strlen	@
 1077 000e 0200     		movs	r2, r0	@ D.5526,
 1078 0010 0F23     		movs	r3, #15	@ tmp112,
 1079 0012 6B44     		add	r3, r3, sp	@ tmp112,
 1080 0014 1A70     		strb	r2, [r3]	@ tmp113, i
 313:src/uart.c    **** 	Usart1SendUnsigned((unsigned char *) send, i);
 1081              		.loc 2 313 0
 1082 0016 0F23     		movs	r3, #15	@ tmp114,
 1083 0018 6B44     		add	r3, r3, sp	@ tmp114,
 1084 001a 1A78     		ldrb	r2, [r3]	@ tmp115, i
 1085 001c 019B     		ldr	r3, [sp, #4]	@ tmp116, send
 1086 001e 1100     		movs	r1, r2	@, tmp115
 1087 0020 1800     		movs	r0, r3	@, tmp116
 1088 0022 FFF7FEFF 		bl	Usart1SendUnsigned	@
 314:src/uart.c    **** }
 1089              		.loc 2 314 0
 1090 0026 C046     		nop
 1091 0028 05B0     		add	sp, sp, #20	@,,
 1092              		@ sp needed	@
 1093 002a 00BD     		pop	{pc}
 1094              		.cfi_endproc
 1095              	.LFE28:
 1096              		.size	Usart1Send, .-Usart1Send
 1097              		.section	.text.Usart1SendUnsigned,"ax",%progbits
 1098              		.align	2
 1099              		.global	Usart1SendUnsigned
 1100              		.code	16
 1101              		.thumb_func
 1102              		.type	Usart1SendUnsigned, %function
 1103              	Usart1SendUnsigned:
 1104              	.LFB29:
 315:src/uart.c    **** 
 316:src/uart.c    **** void Usart1SendUnsigned(unsigned char * send, unsigned char size)
 317:src/uart.c    **** {
 1105              		.loc 2 317 0
 1106              		.cfi_startproc
 1107 0000 00B5     		push	{lr}	@
 1108              	.LCFI18:
 1109              		.cfi_def_cfa_offset 4
 1110              		.cfi_offset 14, -4
 1111 0002 83B0     		sub	sp, sp, #12	@,,
 1112              	.LCFI19:
 1113              		.cfi_def_cfa_offset 16
 1114 0004 0190     		str	r0, [sp, #4]	@ send, send
 1115 0006 0A00     		movs	r2, r1	@ tmp122, size
 1116 0008 6B46     		mov	r3, sp	@ tmp135,
ARM GAS  /tmp/ccGefySF.s 			page 42


 1117 000a 0333     		adds	r3, r3, #3	@ tmp123,
 1118 000c 1A70     		strb	r2, [r3]	@ tmp124, size
 318:src/uart.c    **** 	if ((ptx1_pckt_index + size) < &tx1buff[SIZEOF_DATA])
 1119              		.loc 2 318 0
 1120 000e 114B     		ldr	r3, .L59	@ tmp125,
 1121 0010 1A68     		ldr	r2, [r3]	@ D.5527, ptx1_pckt_index
 1122 0012 6B46     		mov	r3, sp	@ tmp136,
 1123 0014 0333     		adds	r3, r3, #3	@ tmp126,
 1124 0016 1B78     		ldrb	r3, [r3]	@ D.5528, size
 1125 0018 D218     		adds	r2, r2, r3	@ D.5527, D.5527, D.5528
 1126 001a 0F4B     		ldr	r3, .L59+4	@ tmp127,
 1127 001c 9A42     		cmp	r2, r3	@ D.5527, tmp127
 1128 001e 16D2     		bcs	.L58	@,
 319:src/uart.c    **** 	{
 320:src/uart.c    **** 		memcpy((unsigned char *)ptx1_pckt_index, send, size);
 1129              		.loc 2 320 0
 1130 0020 0C4B     		ldr	r3, .L59	@ tmp128,
 1131 0022 1868     		ldr	r0, [r3]	@ D.5527, ptx1_pckt_index
 1132 0024 6B46     		mov	r3, sp	@ tmp137,
 1133 0026 0333     		adds	r3, r3, #3	@ tmp129,
 1134 0028 1A78     		ldrb	r2, [r3]	@ D.5529, size
 1135 002a 019B     		ldr	r3, [sp, #4]	@ tmp130, send
 1136 002c 1900     		movs	r1, r3	@, tmp130
 1137 002e FFF7FEFF 		bl	memcpy	@
 321:src/uart.c    **** 		ptx1_pckt_index += size;
 1138              		.loc 2 321 0
 1139 0032 084B     		ldr	r3, .L59	@ tmp131,
 1140 0034 1A68     		ldr	r2, [r3]	@ D.5527, ptx1_pckt_index
 1141 0036 6B46     		mov	r3, sp	@ tmp138,
 1142 0038 0333     		adds	r3, r3, #3	@ tmp132,
 1143 003a 1B78     		ldrb	r3, [r3]	@ D.5528, size
 1144 003c D218     		adds	r2, r2, r3	@ D.5527, D.5527, D.5528
 1145 003e 054B     		ldr	r3, .L59	@ tmp133,
 1146 0040 1A60     		str	r2, [r3]	@ D.5527, ptx1_pckt_index
 322:src/uart.c    **** 		USART1->CR1 |= USART_CR1_TXEIE;
 1147              		.loc 2 322 0
 1148 0042 064B     		ldr	r3, .L59+8	@ D.5530,
 1149 0044 054A     		ldr	r2, .L59+8	@ D.5530,
 1150 0046 1268     		ldr	r2, [r2]	@ D.5531, _16->CR1
 1151 0048 8021     		movs	r1, #128	@ tmp134,
 1152 004a 0A43     		orrs	r2, r1	@ D.5531, tmp134
 1153 004c 1A60     		str	r2, [r3]	@ D.5531, _15->CR1
 1154              	.L58:
 323:src/uart.c    **** 	}
 324:src/uart.c    **** }
 1155              		.loc 2 324 0
 1156 004e C046     		nop
 1157 0050 03B0     		add	sp, sp, #12	@,,
 1158              		@ sp needed	@
 1159 0052 00BD     		pop	{pc}
 1160              	.L60:
 1161              		.align	2
 1162              	.L59:
 1163 0054 00000000 		.word	ptx1_pckt_index
 1164 0058 00010000 		.word	tx1buff+256
 1165 005c 00380140 		.word	1073821696
 1166              		.cfi_endproc
ARM GAS  /tmp/ccGefySF.s 			page 43


 1167              	.LFE29:
 1168              		.size	Usart1SendUnsigned, .-Usart1SendUnsigned
 1169              		.section	.text.Usart1SendSingle,"ax",%progbits
 1170              		.align	2
 1171              		.global	Usart1SendSingle
 1172              		.code	16
 1173              		.thumb_func
 1174              		.type	Usart1SendSingle, %function
 1175              	Usart1SendSingle:
 1176              	.LFB30:
 325:src/uart.c    **** 
 326:src/uart.c    **** void Usart1SendSingle(unsigned char tosend)
 327:src/uart.c    **** {
 1177              		.loc 2 327 0
 1178              		.cfi_startproc
 1179 0000 00B5     		push	{lr}	@
 1180              	.LCFI20:
 1181              		.cfi_def_cfa_offset 4
 1182              		.cfi_offset 14, -4
 1183 0002 83B0     		sub	sp, sp, #12	@,,
 1184              	.LCFI21:
 1185              		.cfi_def_cfa_offset 16
 1186 0004 0200     		movs	r2, r0	@ tmp110, tosend
 1187 0006 6B46     		mov	r3, sp	@ tmp114,
 1188 0008 0733     		adds	r3, r3, #7	@ tmp111,
 1189 000a 1A70     		strb	r2, [r3]	@ tmp112, tosend
 328:src/uart.c    **** 	Usart1SendUnsigned(&tosend, 1);
 1190              		.loc 2 328 0
 1191 000c 6B46     		mov	r3, sp	@ tmp115,
 1192 000e 0733     		adds	r3, r3, #7	@ tmp113,
 1193 0010 0121     		movs	r1, #1	@,
 1194 0012 1800     		movs	r0, r3	@, tmp113
 1195 0014 FFF7FEFF 		bl	Usart1SendUnsigned	@
 329:src/uart.c    **** }
 1196              		.loc 2 329 0
 1197 0018 C046     		nop
 1198 001a 03B0     		add	sp, sp, #12	@,,
 1199              		@ sp needed	@
 1200 001c 00BD     		pop	{pc}
 1201              		.cfi_endproc
 1202              	.LFE30:
 1203              		.size	Usart1SendSingle, .-Usart1SendSingle
 1204 001e C046     		.section	.text.USART2Config,"ax",%progbits
 1205              		.align	2
 1206              		.global	USART2Config
 1207              		.code	16
 1208              		.thumb_func
 1209              		.type	USART2Config, %function
 1210              	USART2Config:
 1211              	.LFB31:
 330:src/uart.c    **** 
 331:src/uart.c    **** 
 332:src/uart.c    **** void USART2Config(void)
 333:src/uart.c    **** {
 1212              		.loc 2 333 0
 1213              		.cfi_startproc
 1214 0000 10B5     		push	{r4, lr}	@
ARM GAS  /tmp/ccGefySF.s 			page 44


 1215              	.LCFI22:
 1216              		.cfi_def_cfa_offset 8
 1217              		.cfi_offset 4, -8
 1218              		.cfi_offset 14, -4
 334:src/uart.c    **** 	if (!USART2_CLK)
 1219              		.loc 2 334 0
 1220 0002 174B     		ldr	r3, .L64	@ D.5532,
 1221 0004 DA69     		ldr	r2, [r3, #28]	@ D.5533, _2->APB1ENR
 1222 0006 8023     		movs	r3, #128	@ tmp140,
 1223 0008 9B02     		lsls	r3, r3, #10	@ tmp123, tmp140,
 1224 000a 1340     		ands	r3, r2	@ D.5533, D.5533
 1225 000c 06D1     		bne	.L63	@,
 335:src/uart.c    **** 		USART2_CLK_ON;
 1226              		.loc 2 335 0
 1227 000e 144B     		ldr	r3, .L64	@ D.5532,
 1228 0010 134A     		ldr	r2, .L64	@ D.5532,
 1229 0012 D269     		ldr	r2, [r2, #28]	@ D.5533, _7->APB1ENR
 1230 0014 8021     		movs	r1, #128	@ tmp139,
 1231 0016 8902     		lsls	r1, r1, #10	@ tmp124, tmp139,
 1232 0018 0A43     		orrs	r2, r1	@ D.5533, tmp124
 1233 001a DA61     		str	r2, [r3, #28]	@ D.5533, _6->APB1ENR
 1234              	.L63:
 336:src/uart.c    **** 
 337:src/uart.c    **** 	GPIOA->AFR[0] |= 0x0001100;	//PA2 -> AF1 PA3 -> AF1
 1235              		.loc 2 337 0
 1236 001c 9023     		movs	r3, #144	@ tmp135,
 1237 001e DB05     		lsls	r3, r3, #23	@ D.5534, tmp135,
 1238 0020 9022     		movs	r2, #144	@ tmp136,
 1239 0022 D205     		lsls	r2, r2, #23	@ D.5534, tmp136,
 1240 0024 126A     		ldr	r2, [r2, #32]	@ D.5533, _12->AFR
 1241 0026 8821     		movs	r1, #136	@ tmp137,
 1242 0028 4901     		lsls	r1, r1, #5	@ tmp125, tmp137,
 1243 002a 0A43     		orrs	r2, r1	@ D.5533, tmp125
 1244 002c 1A62     		str	r2, [r3, #32]	@ D.5533, _11->AFR
 338:src/uart.c    **** 
 339:src/uart.c    **** 	ptx2 = tx2buff;
 1245              		.loc 2 339 0
 1246 002e 0D4B     		ldr	r3, .L64+4	@ tmp126,
 1247 0030 0D4A     		ldr	r2, .L64+8	@ tmp127,
 1248 0032 1A60     		str	r2, [r3]	@ tmp127, ptx2
 340:src/uart.c    **** 	ptx2_pckt_index = tx2buff;
 1249              		.loc 2 340 0
 1250 0034 0D4B     		ldr	r3, .L64+12	@ tmp128,
 1251 0036 0C4A     		ldr	r2, .L64+8	@ tmp129,
 1252 0038 1A60     		str	r2, [r3]	@ tmp129, ptx2_pckt_index
 341:src/uart.c    **** 	prx2 = rx2buff;
 1253              		.loc 2 341 0
 1254 003a 0D4B     		ldr	r3, .L64+16	@ tmp130,
 1255 003c 0D4A     		ldr	r2, .L64+20	@ tmp131,
 1256 003e 1A60     		str	r2, [r3]	@ tmp131, prx2
 342:src/uart.c    **** 
 343:src/uart.c    **** 	USART2->BRR = USART_115200;
 1257              		.loc 2 343 0
 1258 0040 0D4B     		ldr	r3, .L64+24	@ D.5535,
 1259 0042 D022     		movs	r2, #208	@ tmp138,
 1260 0044 5200     		lsls	r2, r2, #1	@ tmp132, tmp138,
 1261 0046 9A81     		strh	r2, [r3, #12]	@ tmp133, _19->BRR
ARM GAS  /tmp/ccGefySF.s 			page 45


 344:src/uart.c    **** 	USART2->CR1 = USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 1262              		.loc 2 344 0
 1263 0048 0B4B     		ldr	r3, .L64+24	@ D.5535,
 1264 004a 2D22     		movs	r2, #45	@ tmp134,
 1265 004c 1A60     		str	r2, [r3]	@ tmp134, _21->CR1
 345:src/uart.c    **** 
 346:src/uart.c    **** 	NVIC_EnableIRQ(USART2_IRQn);
 1266              		.loc 2 346 0
 1267 004e 1C20     		movs	r0, #28	@,
 1268 0050 FFF7FEFF 		bl	NVIC_EnableIRQ	@
 347:src/uart.c    **** 	NVIC_SetPriority(USART2_IRQn, 7);
 1269              		.loc 2 347 0
 1270 0054 0721     		movs	r1, #7	@,
 1271 0056 1C20     		movs	r0, #28	@,
 1272 0058 FFF7FEFF 		bl	NVIC_SetPriority	@
 348:src/uart.c    **** }
 1273              		.loc 2 348 0
 1274 005c C046     		nop
 1275              		@ sp needed	@
 1276 005e 10BD     		pop	{r4, pc}
 1277              	.L65:
 1278              		.align	2
 1279              	.L64:
 1280 0060 00100240 		.word	1073876992
 1281 0064 00000000 		.word	ptx2
 1282 0068 00000000 		.word	tx2buff
 1283 006c 00000000 		.word	ptx2_pckt_index
 1284 0070 00000000 		.word	prx2
 1285 0074 00000000 		.word	rx2buff
 1286 0078 00440040 		.word	1073759232
 1287              		.cfi_endproc
 1288              	.LFE31:
 1289              		.size	USART2Config, .-USART2Config
 1290              		.section	.text.USART1Config,"ax",%progbits
 1291              		.align	2
 1292              		.global	USART1Config
 1293              		.code	16
 1294              		.thumb_func
 1295              		.type	USART1Config, %function
 1296              	USART1Config:
 1297              	.LFB32:
 349:src/uart.c    **** 
 350:src/uart.c    **** void USART1Config(void)
 351:src/uart.c    **** {
 1298              		.loc 2 351 0
 1299              		.cfi_startproc
 1300 0000 10B5     		push	{r4, lr}	@
 1301              	.LCFI23:
 1302              		.cfi_def_cfa_offset 8
 1303              		.cfi_offset 4, -8
 1304              		.cfi_offset 14, -4
 352:src/uart.c    **** 	if (!USART1_CLK)
 1305              		.loc 2 352 0
 1306 0002 154B     		ldr	r3, .L68	@ D.5536,
 1307 0004 9A69     		ldr	r2, [r3, #24]	@ D.5537, _2->APB2ENR
 1308 0006 8023     		movs	r3, #128	@ tmp136,
 1309 0008 DB01     		lsls	r3, r3, #7	@ tmp123, tmp136,
ARM GAS  /tmp/ccGefySF.s 			page 46


 1310 000a 1340     		ands	r3, r2	@ D.5537, D.5537
 1311 000c 06D1     		bne	.L67	@,
 353:src/uart.c    **** 		USART1_CLK_ON;
 1312              		.loc 2 353 0
 1313 000e 124B     		ldr	r3, .L68	@ D.5536,
 1314 0010 114A     		ldr	r2, .L68	@ D.5536,
 1315 0012 9269     		ldr	r2, [r2, #24]	@ D.5537, _7->APB2ENR
 1316 0014 8021     		movs	r1, #128	@ tmp135,
 1317 0016 C901     		lsls	r1, r1, #7	@ tmp124, tmp135,
 1318 0018 0A43     		orrs	r2, r1	@ D.5537, tmp124
 1319 001a 9A61     		str	r2, [r3, #24]	@ D.5537, _6->APB2ENR
 1320              	.L67:
 354:src/uart.c    **** 
 355:src/uart.c    **** #ifdef VER_1_0
 356:src/uart.c    **** 	//para empezar con el GPS
 357:src/uart.c    **** 	//GPIOB->AFR[0] |= 0x00000000;	//PB7 -> AF0 PB6 -> AF0
 358:src/uart.c    **** 	GPIOB->AFR[0] &= 0x00FFFFFF;	//PB7 -> AF0 PB6 -> AF0
 1321              		.loc 2 358 0
 1322 001c 0F4B     		ldr	r3, .L68+4	@ D.5538,
 1323 001e 0F4A     		ldr	r2, .L68+4	@ D.5538,
 1324 0020 126A     		ldr	r2, [r2, #32]	@ D.5537, _12->AFR
 1325 0022 1202     		lsls	r2, r2, #8	@ tmp125, D.5537,
 1326 0024 120A     		lsrs	r2, r2, #8	@ D.5537, tmp125,
 1327 0026 1A62     		str	r2, [r3, #32]	@ D.5537, _11->AFR
 359:src/uart.c    **** 	//para empezar con el GSM
 360:src/uart.c    **** 	//GPIOA->AFR[1] |= 0x00000110;	//PA10 -> AF1 PA9 -> AF1
 361:src/uart.c    **** #endif
 362:src/uart.c    **** 
 363:src/uart.c    **** 	ptx1 = tx1buff;
 1328              		.loc 2 363 0
 1329 0028 0D4B     		ldr	r3, .L68+8	@ tmp126,
 1330 002a 0E4A     		ldr	r2, .L68+12	@ tmp127,
 1331 002c 1A60     		str	r2, [r3]	@ tmp127, ptx1
 364:src/uart.c    **** 	ptx1_pckt_index = tx1buff;
 1332              		.loc 2 364 0
 1333 002e 0E4B     		ldr	r3, .L68+16	@ tmp128,
 1334 0030 0C4A     		ldr	r2, .L68+12	@ tmp129,
 1335 0032 1A60     		str	r2, [r3]	@ tmp129, ptx1_pckt_index
 365:src/uart.c    **** 	prx1 = rx1buff;
 1336              		.loc 2 365 0
 1337 0034 0D4B     		ldr	r3, .L68+20	@ tmp130,
 1338 0036 0E4A     		ldr	r2, .L68+24	@ tmp131,
 1339 0038 1A60     		str	r2, [r3]	@ tmp131, prx1
 366:src/uart.c    **** 
 367:src/uart.c    **** 	USART1->BRR = USART_9600;
 1340              		.loc 2 367 0
 1341 003a 0E4B     		ldr	r3, .L68+28	@ D.5539,
 1342 003c 0E4A     		ldr	r2, .L68+32	@ tmp132,
 1343 003e 9A81     		strh	r2, [r3, #12]	@ tmp133, _19->BRR
 368:src/uart.c    **** //	USART1->CR2 |= USART_CR2_STOP_1;	//2 bits stop
 369:src/uart.c    **** //	USART1->CR1 = USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 370:src/uart.c    **** //	USART1->CR1 = USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE;	//SIN TX
 371:src/uart.c    **** 	USART1->CR1 = USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;	//para pruebas TX
 1344              		.loc 2 371 0
 1345 0040 0C4B     		ldr	r3, .L68+28	@ D.5539,
 1346 0042 2D22     		movs	r2, #45	@ tmp134,
 1347 0044 1A60     		str	r2, [r3]	@ tmp134, _21->CR1
ARM GAS  /tmp/ccGefySF.s 			page 47


 372:src/uart.c    **** 
 373:src/uart.c    **** 	NVIC_EnableIRQ(USART1_IRQn);
 1348              		.loc 2 373 0
 1349 0046 1B20     		movs	r0, #27	@,
 1350 0048 FFF7FEFF 		bl	NVIC_EnableIRQ	@
 374:src/uart.c    **** 	NVIC_SetPriority(USART1_IRQn, 5);
 1351              		.loc 2 374 0
 1352 004c 0521     		movs	r1, #5	@,
 1353 004e 1B20     		movs	r0, #27	@,
 1354 0050 FFF7FEFF 		bl	NVIC_SetPriority	@
 375:src/uart.c    **** }
 1355              		.loc 2 375 0
 1356 0054 C046     		nop
 1357              		@ sp needed	@
 1358 0056 10BD     		pop	{r4, pc}
 1359              	.L69:
 1360              		.align	2
 1361              	.L68:
 1362 0058 00100240 		.word	1073876992
 1363 005c 00040048 		.word	1207960576
 1364 0060 00000000 		.word	ptx1
 1365 0064 00000000 		.word	tx1buff
 1366 0068 00000000 		.word	ptx1_pckt_index
 1367 006c 00000000 		.word	prx1
 1368 0070 00000000 		.word	rx1buff
 1369 0074 00380140 		.word	1073821696
 1370 0078 88130000 		.word	5000
 1371              		.cfi_endproc
 1372              	.LFE32:
 1373              		.size	USART1Config, .-USART1Config
 1374              		.text
 1375              	.Letext0:
 1376              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1377              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1378              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1379              		.section	.debug_info,"",%progbits
 1380              	.Ldebug_info0:
 1381 0000 530A0000 		.4byte	0xa53
 1382 0004 0200     		.2byte	0x2
 1383 0006 00000000 		.4byte	.Ldebug_abbrev0
 1384 000a 04       		.byte	0x4
 1385 000b 01       		.uleb128 0x1
 1386 000c 7D050000 		.4byte	.LASF130
 1387 0010 0C       		.byte	0xc
 1388 0011 7F010000 		.4byte	.LASF131
 1389 0015 C8040000 		.4byte	.LASF132
 1390 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1391 001d 00000000 		.4byte	0
 1392 0021 00000000 		.4byte	0
 1393 0025 00000000 		.4byte	.Ldebug_line0
 1394 0029 02       		.uleb128 0x2
 1395 002a 01       		.byte	0x1
 1396 002b 08       		.byte	0x8
 1397 002c 2B050000 		.4byte	.LASF34
 1398 0030 03       		.uleb128 0x3
 1399 0031 4B030000 		.4byte	.LASF92
 1400 0035 01       		.byte	0x1
ARM GAS  /tmp/ccGefySF.s 			page 48


 1401 0036 0D010000 		.4byte	0x10d
 1402 003a 03       		.byte	0x3
 1403 003b C7       		.byte	0xc7
 1404 003c 0D010000 		.4byte	0x10d
 1405 0040 04       		.uleb128 0x4
 1406 0041 D5030000 		.4byte	.LASF0
 1407 0045 72       		.sleb128 -14
 1408 0046 04       		.uleb128 0x4
 1409 0047 2D060000 		.4byte	.LASF1
 1410 004b 73       		.sleb128 -13
 1411 004c 04       		.uleb128 0x4
 1412 004d 41000000 		.4byte	.LASF2
 1413 0051 7B       		.sleb128 -5
 1414 0052 04       		.uleb128 0x4
 1415 0053 DE000000 		.4byte	.LASF3
 1416 0057 7E       		.sleb128 -2
 1417 0058 04       		.uleb128 0x4
 1418 0059 77040000 		.4byte	.LASF4
 1419 005d 7F       		.sleb128 -1
 1420 005e 05       		.uleb128 0x5
 1421 005f 62020000 		.4byte	.LASF5
 1422 0063 00       		.byte	0
 1423 0064 05       		.uleb128 0x5
 1424 0065 C5020000 		.4byte	.LASF6
 1425 0069 01       		.byte	0x1
 1426 006a 05       		.uleb128 0x5
 1427 006b 71030000 		.4byte	.LASF7
 1428 006f 02       		.byte	0x2
 1429 0070 05       		.uleb128 0x5
 1430 0071 A4000000 		.4byte	.LASF8
 1431 0075 03       		.byte	0x3
 1432 0076 05       		.uleb128 0x5
 1433 0077 EA000000 		.4byte	.LASF9
 1434 007b 04       		.byte	0x4
 1435 007c 05       		.uleb128 0x5
 1436 007d C7000000 		.4byte	.LASF10
 1437 0081 05       		.byte	0x5
 1438 0082 05       		.uleb128 0x5
 1439 0083 2B000000 		.4byte	.LASF11
 1440 0087 06       		.byte	0x6
 1441 0088 05       		.uleb128 0x5
 1442 0089 08000000 		.4byte	.LASF12
 1443 008d 07       		.byte	0x7
 1444 008e 05       		.uleb128 0x5
 1445 008f 97020000 		.4byte	.LASF13
 1446 0093 08       		.byte	0x8
 1447 0094 05       		.uleb128 0x5
 1448 0095 0A020000 		.4byte	.LASF14
 1449 0099 09       		.byte	0x9
 1450 009a 05       		.uleb128 0x5
 1451 009b 08050000 		.4byte	.LASF15
 1452 009f 0A       		.byte	0xa
 1453 00a0 05       		.uleb128 0x5
 1454 00a1 26040000 		.4byte	.LASF16
 1455 00a5 0B       		.byte	0xb
 1456 00a6 05       		.uleb128 0x5
 1457 00a7 DF020000 		.4byte	.LASF17
ARM GAS  /tmp/ccGefySF.s 			page 49


 1458 00ab 0C       		.byte	0xc
 1459 00ac 05       		.uleb128 0x5
 1460 00ad 9F020000 		.4byte	.LASF18
 1461 00b1 0D       		.byte	0xd
 1462 00b2 05       		.uleb128 0x5
 1463 00b3 02040000 		.4byte	.LASF19
 1464 00b7 0E       		.byte	0xe
 1465 00b8 05       		.uleb128 0x5
 1466 00b9 B7040000 		.4byte	.LASF20
 1467 00bd 0F       		.byte	0xf
 1468 00be 05       		.uleb128 0x5
 1469 00bf 00020000 		.4byte	.LASF21
 1470 00c3 10       		.byte	0x10
 1471 00c4 05       		.uleb128 0x5
 1472 00c5 1D050000 		.4byte	.LASF22
 1473 00c9 11       		.byte	0x11
 1474 00ca 05       		.uleb128 0x5
 1475 00cb FD040000 		.4byte	.LASF23
 1476 00cf 13       		.byte	0x13
 1477 00d0 05       		.uleb128 0x5
 1478 00d1 2C020000 		.4byte	.LASF24
 1479 00d5 14       		.byte	0x14
 1480 00d6 05       		.uleb128 0x5
 1481 00d7 8C000000 		.4byte	.LASF25
 1482 00db 15       		.byte	0x15
 1483 00dc 05       		.uleb128 0x5
 1484 00dd 1B040000 		.4byte	.LASF26
 1485 00e1 16       		.byte	0x16
 1486 00e2 05       		.uleb128 0x5
 1487 00e3 D4000000 		.4byte	.LASF27
 1488 00e7 17       		.byte	0x17
 1489 00e8 05       		.uleb128 0x5
 1490 00e9 9B040000 		.4byte	.LASF28
 1491 00ed 18       		.byte	0x18
 1492 00ee 05       		.uleb128 0x5
 1493 00ef 1C010000 		.4byte	.LASF29
 1494 00f3 19       		.byte	0x19
 1495 00f4 05       		.uleb128 0x5
 1496 00f5 54050000 		.4byte	.LASF30
 1497 00f9 1A       		.byte	0x1a
 1498 00fa 05       		.uleb128 0x5
 1499 00fb C9030000 		.4byte	.LASF31
 1500 00ff 1B       		.byte	0x1b
 1501 0100 05       		.uleb128 0x5
 1502 0101 9F010000 		.4byte	.LASF32
 1503 0105 1C       		.byte	0x1c
 1504 0106 05       		.uleb128 0x5
 1505 0107 84040000 		.4byte	.LASF33
 1506 010b 1E       		.byte	0x1e
 1507 010c 00       		.byte	0
 1508 010d 02       		.uleb128 0x2
 1509 010e 01       		.byte	0x1
 1510 010f 06       		.byte	0x6
 1511 0110 5E050000 		.4byte	.LASF35
 1512 0114 06       		.uleb128 0x6
 1513 0115 90010000 		.4byte	.LASF37
 1514 0119 03       		.byte	0x3
ARM GAS  /tmp/ccGefySF.s 			page 50


 1515 011a 5F01     		.2byte	0x15f
 1516 011c 30000000 		.4byte	0x30
 1517 0120 02       		.uleb128 0x2
 1518 0121 02       		.byte	0x2
 1519 0122 05       		.byte	0x5
 1520 0123 B6030000 		.4byte	.LASF36
 1521 0127 07       		.uleb128 0x7
 1522 0128 74010000 		.4byte	.LASF38
 1523 012c 04       		.byte	0x4
 1524 012d 2B       		.byte	0x2b
 1525 012e 32010000 		.4byte	0x132
 1526 0132 02       		.uleb128 0x2
 1527 0133 02       		.byte	0x2
 1528 0134 07       		.byte	0x7
 1529 0135 6A050000 		.4byte	.LASF39
 1530 0139 02       		.uleb128 0x2
 1531 013a 04       		.byte	0x4
 1532 013b 05       		.byte	0x5
 1533 013c C0030000 		.4byte	.LASF40
 1534 0140 07       		.uleb128 0x7
 1535 0141 39050000 		.4byte	.LASF41
 1536 0145 04       		.byte	0x4
 1537 0146 41       		.byte	0x41
 1538 0147 4B010000 		.4byte	0x14b
 1539 014b 02       		.uleb128 0x2
 1540 014c 04       		.byte	0x4
 1541 014d 07       		.byte	0x7
 1542 014e A5040000 		.4byte	.LASF42
 1543 0152 02       		.uleb128 0x2
 1544 0153 08       		.byte	0x8
 1545 0154 05       		.byte	0x5
 1546 0155 54020000 		.4byte	.LASF43
 1547 0159 02       		.uleb128 0x2
 1548 015a 08       		.byte	0x8
 1549 015b 07       		.byte	0x7
 1550 015c 35010000 		.4byte	.LASF44
 1551 0160 08       		.uleb128 0x8
 1552 0161 04       		.byte	0x4
 1553 0162 05       		.byte	0x5
 1554 0163 696E7400 		.ascii	"int\000"
 1555 0167 02       		.uleb128 0x2
 1556 0168 04       		.byte	0x4
 1557 0169 07       		.byte	0x7
 1558 016a 7F000000 		.4byte	.LASF45
 1559 016e 07       		.uleb128 0x7
 1560 016f 42030000 		.4byte	.LASF46
 1561 0173 05       		.byte	0x5
 1562 0174 1A       		.byte	0x1a
 1563 0175 27010000 		.4byte	0x127
 1564 0179 07       		.uleb128 0x7
 1565 017a FD000000 		.4byte	.LASF47
 1566 017e 05       		.byte	0x5
 1567 017f 20       		.byte	0x20
 1568 0180 40010000 		.4byte	0x140
 1569 0184 09       		.uleb128 0x9
 1570 0185 2003     		.2byte	0x320
 1571 0187 01       		.byte	0x1
ARM GAS  /tmp/ccGefySF.s 			page 51


 1572 0188 71       		.byte	0x71
 1573 0189 21020000 		.4byte	0x221
 1574 018d 0A       		.uleb128 0xa
 1575 018e 0E010000 		.4byte	.LASF48
 1576 0192 01       		.byte	0x1
 1577 0193 73       		.byte	0x73
 1578 0194 38020000 		.4byte	0x238
 1579 0198 02       		.byte	0x2
 1580 0199 23       		.byte	0x23
 1581 019a 00       		.uleb128 0
 1582 019b 0A       		.uleb128 0xa
 1583 019c 7A030000 		.4byte	.LASF49
 1584 01a0 01       		.byte	0x1
 1585 01a1 74       		.byte	0x74
 1586 01a2 3D020000 		.4byte	0x23d
 1587 01a6 02       		.byte	0x2
 1588 01a7 23       		.byte	0x23
 1589 01a8 04       		.uleb128 0x4
 1590 01a9 0A       		.uleb128 0xa
 1591 01aa 4F050000 		.4byte	.LASF50
 1592 01ae 01       		.byte	0x1
 1593 01af 75       		.byte	0x75
 1594 01b0 4D020000 		.4byte	0x24d
 1595 01b4 03       		.byte	0x3
 1596 01b5 23       		.byte	0x23
 1597 01b6 8001     		.uleb128 0x80
 1598 01b8 0A       		.uleb128 0xa
 1599 01b9 13010000 		.4byte	.LASF51
 1600 01bd 01       		.byte	0x1
 1601 01be 76       		.byte	0x76
 1602 01bf 3D020000 		.4byte	0x23d
 1603 01c3 03       		.byte	0x3
 1604 01c4 23       		.byte	0x23
 1605 01c5 8401     		.uleb128 0x84
 1606 01c7 0A       		.uleb128 0xa
 1607 01c8 3C060000 		.4byte	.LASF52
 1608 01cc 01       		.byte	0x1
 1609 01cd 77       		.byte	0x77
 1610 01ce 52020000 		.4byte	0x252
 1611 01d2 03       		.byte	0x3
 1612 01d3 23       		.byte	0x23
 1613 01d4 8002     		.uleb128 0x100
 1614 01d6 0A       		.uleb128 0xa
 1615 01d7 8E030000 		.4byte	.LASF53
 1616 01db 01       		.byte	0x1
 1617 01dc 78       		.byte	0x78
 1618 01dd 3D020000 		.4byte	0x23d
 1619 01e1 03       		.byte	0x3
 1620 01e2 23       		.byte	0x23
 1621 01e3 8402     		.uleb128 0x104
 1622 01e5 0A       		.uleb128 0xa
 1623 01e6 DA020000 		.4byte	.LASF54
 1624 01ea 01       		.byte	0x1
 1625 01eb 79       		.byte	0x79
 1626 01ec 57020000 		.4byte	0x257
 1627 01f0 03       		.byte	0x3
 1628 01f1 23       		.byte	0x23
ARM GAS  /tmp/ccGefySF.s 			page 52


 1629 01f2 8003     		.uleb128 0x180
 1630 01f4 0A       		.uleb128 0xa
 1631 01f5 98030000 		.4byte	.LASF55
 1632 01f9 01       		.byte	0x1
 1633 01fa 7A       		.byte	0x7a
 1634 01fb 3D020000 		.4byte	0x23d
 1635 01ff 03       		.byte	0x3
 1636 0200 23       		.byte	0x23
 1637 0201 8403     		.uleb128 0x184
 1638 0203 0A       		.uleb128 0xa
 1639 0204 A2030000 		.4byte	.LASF56
 1640 0208 01       		.byte	0x1
 1641 0209 7B       		.byte	0x7b
 1642 020a 5C020000 		.4byte	0x25c
 1643 020e 03       		.byte	0x3
 1644 020f 23       		.byte	0x23
 1645 0210 8004     		.uleb128 0x200
 1646 0212 0B       		.uleb128 0xb
 1647 0213 495000   		.ascii	"IP\000"
 1648 0216 01       		.byte	0x1
 1649 0217 7C       		.byte	0x7c
 1650 0218 7C020000 		.4byte	0x27c
 1651 021c 03       		.byte	0x3
 1652 021d 23       		.byte	0x23
 1653 021e 8006     		.uleb128 0x300
 1654 0220 00       		.byte	0
 1655 0221 0C       		.uleb128 0xc
 1656 0222 79010000 		.4byte	0x179
 1657 0226 31020000 		.4byte	0x231
 1658 022a 0D       		.uleb128 0xd
 1659 022b 31020000 		.4byte	0x231
 1660 022f 00       		.byte	0
 1661 0230 00       		.byte	0
 1662 0231 02       		.uleb128 0x2
 1663 0232 04       		.byte	0x4
 1664 0233 07       		.byte	0x7
 1665 0234 8D040000 		.4byte	.LASF57
 1666 0238 0E       		.uleb128 0xe
 1667 0239 21020000 		.4byte	0x221
 1668 023d 0C       		.uleb128 0xc
 1669 023e 79010000 		.4byte	0x179
 1670 0242 4D020000 		.4byte	0x24d
 1671 0246 0D       		.uleb128 0xd
 1672 0247 31020000 		.4byte	0x231
 1673 024b 1E       		.byte	0x1e
 1674 024c 00       		.byte	0
 1675 024d 0E       		.uleb128 0xe
 1676 024e 21020000 		.4byte	0x221
 1677 0252 0E       		.uleb128 0xe
 1678 0253 21020000 		.4byte	0x221
 1679 0257 0E       		.uleb128 0xe
 1680 0258 21020000 		.4byte	0x221
 1681 025c 0C       		.uleb128 0xc
 1682 025d 79010000 		.4byte	0x179
 1683 0261 6C020000 		.4byte	0x26c
 1684 0265 0D       		.uleb128 0xd
 1685 0266 31020000 		.4byte	0x231
ARM GAS  /tmp/ccGefySF.s 			page 53


 1686 026a 3F       		.byte	0x3f
 1687 026b 00       		.byte	0
 1688 026c 0C       		.uleb128 0xc
 1689 026d 79010000 		.4byte	0x179
 1690 0271 7C020000 		.4byte	0x27c
 1691 0275 0D       		.uleb128 0xd
 1692 0276 31020000 		.4byte	0x231
 1693 027a 07       		.byte	0x7
 1694 027b 00       		.byte	0
 1695 027c 0E       		.uleb128 0xe
 1696 027d 6C020000 		.4byte	0x26c
 1697 0281 07       		.uleb128 0x7
 1698 0282 3B040000 		.4byte	.LASF58
 1699 0286 01       		.byte	0x1
 1700 0287 7D       		.byte	0x7d
 1701 0288 84010000 		.4byte	0x184
 1702 028c 0F       		.uleb128 0xf
 1703 028d 34       		.byte	0x34
 1704 028e 01       		.byte	0x1
 1705 028f 86       		.byte	0x86
 1706 0290 2F030000 		.4byte	0x32f
 1707 0294 0A       		.uleb128 0xa
 1708 0295 AB010000 		.4byte	.LASF59
 1709 0299 01       		.byte	0x1
 1710 029a 88       		.byte	0x88
 1711 029b 34030000 		.4byte	0x334
 1712 029f 02       		.byte	0x2
 1713 02a0 23       		.byte	0x23
 1714 02a1 00       		.uleb128 0
 1715 02a2 0A       		.uleb128 0xa
 1716 02a3 96040000 		.4byte	.LASF60
 1717 02a7 01       		.byte	0x1
 1718 02a8 89       		.byte	0x89
 1719 02a9 2F030000 		.4byte	0x32f
 1720 02ad 02       		.byte	0x2
 1721 02ae 23       		.byte	0x23
 1722 02af 04       		.uleb128 0x4
 1723 02b0 0A       		.uleb128 0xa
 1724 02b1 7A030000 		.4byte	.LASF49
 1725 02b5 01       		.byte	0x1
 1726 02b6 8A       		.byte	0x8a
 1727 02b7 79010000 		.4byte	0x179
 1728 02bb 02       		.byte	0x2
 1729 02bc 23       		.byte	0x23
 1730 02bd 08       		.uleb128 0x8
 1731 02be 0A       		.uleb128 0xa
 1732 02bf FA010000 		.4byte	.LASF61
 1733 02c3 01       		.byte	0x1
 1734 02c4 8B       		.byte	0x8b
 1735 02c5 2F030000 		.4byte	0x32f
 1736 02c9 02       		.byte	0x2
 1737 02ca 23       		.byte	0x23
 1738 02cb 0C       		.uleb128 0xc
 1739 02cc 0B       		.uleb128 0xb
 1740 02cd 53435200 		.ascii	"SCR\000"
 1741 02d1 01       		.byte	0x1
 1742 02d2 8C       		.byte	0x8c
ARM GAS  /tmp/ccGefySF.s 			page 54


 1743 02d3 2F030000 		.4byte	0x32f
 1744 02d7 02       		.byte	0x2
 1745 02d8 23       		.byte	0x23
 1746 02d9 10       		.uleb128 0x10
 1747 02da 0B       		.uleb128 0xb
 1748 02db 43435200 		.ascii	"CCR\000"
 1749 02df 01       		.byte	0x1
 1750 02e0 8D       		.byte	0x8d
 1751 02e1 2F030000 		.4byte	0x32f
 1752 02e5 02       		.byte	0x2
 1753 02e6 23       		.byte	0x23
 1754 02e7 14       		.uleb128 0x14
 1755 02e8 0A       		.uleb128 0xa
 1756 02e9 84030000 		.4byte	.LASF62
 1757 02ed 01       		.byte	0x1
 1758 02ee 8E       		.byte	0x8e
 1759 02ef 79010000 		.4byte	0x179
 1760 02f3 02       		.byte	0x2
 1761 02f4 23       		.byte	0x23
 1762 02f5 18       		.uleb128 0x18
 1763 02f6 0B       		.uleb128 0xb
 1764 02f7 53485000 		.ascii	"SHP\000"
 1765 02fb 01       		.byte	0x1
 1766 02fc 8F       		.byte	0x8f
 1767 02fd 49030000 		.4byte	0x349
 1768 0301 02       		.byte	0x2
 1769 0302 23       		.byte	0x23
 1770 0303 1C       		.uleb128 0x1c
 1771 0304 0A       		.uleb128 0xa
 1772 0305 6C020000 		.4byte	.LASF63
 1773 0309 01       		.byte	0x1
 1774 030a 90       		.byte	0x90
 1775 030b 2F030000 		.4byte	0x32f
 1776 030f 02       		.byte	0x2
 1777 0310 23       		.byte	0x23
 1778 0311 24       		.uleb128 0x24
 1779 0312 0A       		.uleb128 0xa
 1780 0313 8E030000 		.4byte	.LASF53
 1781 0317 01       		.byte	0x1
 1782 0318 91       		.byte	0x91
 1783 0319 39030000 		.4byte	0x339
 1784 031d 02       		.byte	0x2
 1785 031e 23       		.byte	0x23
 1786 031f 28       		.uleb128 0x28
 1787 0320 0A       		.uleb128 0xa
 1788 0321 62010000 		.4byte	.LASF64
 1789 0325 01       		.byte	0x1
 1790 0326 92       		.byte	0x92
 1791 0327 2F030000 		.4byte	0x32f
 1792 032b 02       		.byte	0x2
 1793 032c 23       		.byte	0x23
 1794 032d 30       		.uleb128 0x30
 1795 032e 00       		.byte	0
 1796 032f 0E       		.uleb128 0xe
 1797 0330 79010000 		.4byte	0x179
 1798 0334 10       		.uleb128 0x10
 1799 0335 2F030000 		.4byte	0x32f
ARM GAS  /tmp/ccGefySF.s 			page 55


 1800 0339 0C       		.uleb128 0xc
 1801 033a 79010000 		.4byte	0x179
 1802 033e 49030000 		.4byte	0x349
 1803 0342 0D       		.uleb128 0xd
 1804 0343 31020000 		.4byte	0x231
 1805 0347 01       		.byte	0x1
 1806 0348 00       		.byte	0
 1807 0349 0E       		.uleb128 0xe
 1808 034a 39030000 		.4byte	0x339
 1809 034e 07       		.uleb128 0x7
 1810 034f 45040000 		.4byte	.LASF65
 1811 0353 01       		.byte	0x1
 1812 0354 93       		.byte	0x93
 1813 0355 8C020000 		.4byte	0x28c
 1814 0359 0E       		.uleb128 0xe
 1815 035a 6E010000 		.4byte	0x16e
 1816 035e 11       		.uleb128 0x11
 1817 035f 2C       		.byte	0x2c
 1818 0360 03       		.byte	0x3
 1819 0361 6902     		.2byte	0x269
 1820 0363 3A040000 		.4byte	0x43a
 1821 0367 12       		.uleb128 0x12
 1822 0368 8A010000 		.4byte	.LASF66
 1823 036c 03       		.byte	0x3
 1824 036d 6B02     		.2byte	0x26b
 1825 036f 2F030000 		.4byte	0x32f
 1826 0373 02       		.byte	0x2
 1827 0374 23       		.byte	0x23
 1828 0375 00       		.uleb128 0
 1829 0376 12       		.uleb128 0x12
 1830 0377 0F040000 		.4byte	.LASF67
 1831 037b 03       		.byte	0x3
 1832 037c 6C02     		.2byte	0x26c
 1833 037e 59030000 		.4byte	0x359
 1834 0382 02       		.byte	0x2
 1835 0383 23       		.byte	0x23
 1836 0384 04       		.uleb128 0x4
 1837 0385 12       		.uleb128 0x12
 1838 0386 7A030000 		.4byte	.LASF49
 1839 038a 03       		.byte	0x3
 1840 038b 6D02     		.2byte	0x26d
 1841 038d 6E010000 		.4byte	0x16e
 1842 0391 02       		.byte	0x2
 1843 0392 23       		.byte	0x23
 1844 0393 06       		.uleb128 0x6
 1845 0394 12       		.uleb128 0x12
 1846 0395 23030000 		.4byte	.LASF68
 1847 0399 03       		.byte	0x3
 1848 039a 6E02     		.2byte	0x26e
 1849 039c 2F030000 		.4byte	0x32f
 1850 03a0 02       		.byte	0x2
 1851 03a1 23       		.byte	0x23
 1852 03a2 08       		.uleb128 0x8
 1853 03a3 12       		.uleb128 0x12
 1854 03a4 E6010000 		.4byte	.LASF69
 1855 03a8 03       		.byte	0x3
 1856 03a9 6F02     		.2byte	0x26f
ARM GAS  /tmp/ccGefySF.s 			page 56


 1857 03ab 2F030000 		.4byte	0x32f
 1858 03af 02       		.byte	0x2
 1859 03b0 23       		.byte	0x23
 1860 03b1 0C       		.uleb128 0xc
 1861 03b2 13       		.uleb128 0x13
 1862 03b3 49445200 		.ascii	"IDR\000"
 1863 03b7 03       		.byte	0x3
 1864 03b8 7002     		.2byte	0x270
 1865 03ba 59030000 		.4byte	0x359
 1866 03be 02       		.byte	0x2
 1867 03bf 23       		.byte	0x23
 1868 03c0 10       		.uleb128 0x10
 1869 03c1 12       		.uleb128 0x12
 1870 03c2 84030000 		.4byte	.LASF62
 1871 03c6 03       		.byte	0x3
 1872 03c7 7102     		.2byte	0x271
 1873 03c9 6E010000 		.4byte	0x16e
 1874 03cd 02       		.byte	0x2
 1875 03ce 23       		.byte	0x23
 1876 03cf 12       		.uleb128 0x12
 1877 03d0 13       		.uleb128 0x13
 1878 03d1 4F445200 		.ascii	"ODR\000"
 1879 03d5 03       		.byte	0x3
 1880 03d6 7202     		.2byte	0x272
 1881 03d8 59030000 		.4byte	0x359
 1882 03dc 02       		.byte	0x2
 1883 03dd 23       		.byte	0x23
 1884 03de 14       		.uleb128 0x14
 1885 03df 12       		.uleb128 0x12
 1886 03e0 8E030000 		.4byte	.LASF53
 1887 03e4 03       		.byte	0x3
 1888 03e5 7302     		.2byte	0x273
 1889 03e7 6E010000 		.4byte	0x16e
 1890 03eb 02       		.byte	0x2
 1891 03ec 23       		.byte	0x23
 1892 03ed 16       		.uleb128 0x16
 1893 03ee 12       		.uleb128 0x12
 1894 03ef 16000000 		.4byte	.LASF70
 1895 03f3 03       		.byte	0x3
 1896 03f4 7402     		.2byte	0x274
 1897 03f6 2F030000 		.4byte	0x32f
 1898 03fa 02       		.byte	0x2
 1899 03fb 23       		.byte	0x23
 1900 03fc 18       		.uleb128 0x18
 1901 03fd 12       		.uleb128 0x12
 1902 03fe 53060000 		.4byte	.LASF71
 1903 0402 03       		.byte	0x3
 1904 0403 7502     		.2byte	0x275
 1905 0405 2F030000 		.4byte	0x32f
 1906 0409 02       		.byte	0x2
 1907 040a 23       		.byte	0x23
 1908 040b 1C       		.uleb128 0x1c
 1909 040c 13       		.uleb128 0x13
 1910 040d 41465200 		.ascii	"AFR\000"
 1911 0411 03       		.byte	0x3
 1912 0412 7602     		.2byte	0x276
 1913 0414 3A040000 		.4byte	0x43a
ARM GAS  /tmp/ccGefySF.s 			page 57


 1914 0418 02       		.byte	0x2
 1915 0419 23       		.byte	0x23
 1916 041a 20       		.uleb128 0x20
 1917 041b 13       		.uleb128 0x13
 1918 041c 42525200 		.ascii	"BRR\000"
 1919 0420 03       		.byte	0x3
 1920 0421 7702     		.2byte	0x277
 1921 0423 59030000 		.4byte	0x359
 1922 0427 02       		.byte	0x2
 1923 0428 23       		.byte	0x23
 1924 0429 28       		.uleb128 0x28
 1925 042a 12       		.uleb128 0x12
 1926 042b 98030000 		.4byte	.LASF55
 1927 042f 03       		.byte	0x3
 1928 0430 7802     		.2byte	0x278
 1929 0432 6E010000 		.4byte	0x16e
 1930 0436 02       		.byte	0x2
 1931 0437 23       		.byte	0x23
 1932 0438 2A       		.uleb128 0x2a
 1933 0439 00       		.byte	0
 1934 043a 0E       		.uleb128 0xe
 1935 043b 39030000 		.4byte	0x339
 1936 043f 06       		.uleb128 0x6
 1937 0440 5F040000 		.4byte	.LASF72
 1938 0444 03       		.byte	0x3
 1939 0445 7902     		.2byte	0x279
 1940 0447 5E030000 		.4byte	0x35e
 1941 044b 11       		.uleb128 0x11
 1942 044c 38       		.byte	0x38
 1943 044d 03       		.byte	0x3
 1944 044e B502     		.2byte	0x2b5
 1945 0450 26050000 		.4byte	0x526
 1946 0454 13       		.uleb128 0x13
 1947 0455 435200   		.ascii	"CR\000"
 1948 0458 03       		.byte	0x3
 1949 0459 B702     		.2byte	0x2b7
 1950 045b 2F030000 		.4byte	0x32f
 1951 045f 02       		.byte	0x2
 1952 0460 23       		.byte	0x23
 1953 0461 00       		.uleb128 0
 1954 0462 12       		.uleb128 0x12
 1955 0463 16040000 		.4byte	.LASF73
 1956 0467 03       		.byte	0x3
 1957 0468 B802     		.2byte	0x2b8
 1958 046a 2F030000 		.4byte	0x32f
 1959 046e 02       		.byte	0x2
 1960 046f 23       		.byte	0x23
 1961 0470 04       		.uleb128 0x4
 1962 0471 13       		.uleb128 0x13
 1963 0472 43495200 		.ascii	"CIR\000"
 1964 0476 03       		.byte	0x3
 1965 0477 B902     		.2byte	0x2b9
 1966 0479 2F030000 		.4byte	0x32f
 1967 047d 02       		.byte	0x2
 1968 047e 23       		.byte	0x23
 1969 047f 08       		.uleb128 0x8
 1970 0480 12       		.uleb128 0x12
ARM GAS  /tmp/ccGefySF.s 			page 58


 1971 0481 38000000 		.4byte	.LASF74
 1972 0485 03       		.byte	0x3
 1973 0486 BA02     		.2byte	0x2ba
 1974 0488 2F030000 		.4byte	0x32f
 1975 048c 02       		.byte	0x2
 1976 048d 23       		.byte	0x23
 1977 048e 0C       		.uleb128 0xc
 1978 048f 12       		.uleb128 0x12
 1979 0490 EC010000 		.4byte	.LASF75
 1980 0494 03       		.byte	0x3
 1981 0495 BB02     		.2byte	0x2bb
 1982 0497 2F030000 		.4byte	0x32f
 1983 049b 02       		.byte	0x2
 1984 049c 23       		.byte	0x23
 1985 049d 10       		.uleb128 0x10
 1986 049e 12       		.uleb128 0x12
 1987 049f 1D020000 		.4byte	.LASF76
 1988 04a3 03       		.byte	0x3
 1989 04a4 BC02     		.2byte	0x2bc
 1990 04a6 2F030000 		.4byte	0x32f
 1991 04aa 02       		.byte	0x2
 1992 04ab 23       		.byte	0x23
 1993 04ac 14       		.uleb128 0x14
 1994 04ad 12       		.uleb128 0x12
 1995 04ae EE020000 		.4byte	.LASF77
 1996 04b2 03       		.byte	0x3
 1997 04b3 BD02     		.2byte	0x2bd
 1998 04b5 2F030000 		.4byte	0x32f
 1999 04b9 02       		.byte	0x2
 2000 04ba 23       		.byte	0x23
 2001 04bb 18       		.uleb128 0x18
 2002 04bc 12       		.uleb128 0x12
 2003 04bd 00000000 		.4byte	.LASF78
 2004 04c1 03       		.byte	0x3
 2005 04c2 BE02     		.2byte	0x2be
 2006 04c4 2F030000 		.4byte	0x32f
 2007 04c8 02       		.byte	0x2
 2008 04c9 23       		.byte	0x23
 2009 04ca 1C       		.uleb128 0x1c
 2010 04cb 12       		.uleb128 0x12
 2011 04cc 97000000 		.4byte	.LASF79
 2012 04d0 03       		.byte	0x3
 2013 04d1 BF02     		.2byte	0x2bf
 2014 04d3 2F030000 		.4byte	0x32f
 2015 04d7 02       		.byte	0x2
 2016 04d8 23       		.byte	0x23
 2017 04d9 20       		.uleb128 0x20
 2018 04da 13       		.uleb128 0x13
 2019 04db 43535200 		.ascii	"CSR\000"
 2020 04df 03       		.byte	0x3
 2021 04e0 C002     		.2byte	0x2c0
 2022 04e2 2F030000 		.4byte	0x32f
 2023 04e6 02       		.byte	0x2
 2024 04e7 23       		.byte	0x23
 2025 04e8 24       		.uleb128 0x24
 2026 04e9 12       		.uleb128 0x12
 2027 04ea 06010000 		.4byte	.LASF80
ARM GAS  /tmp/ccGefySF.s 			page 59


 2028 04ee 03       		.byte	0x3
 2029 04ef C102     		.2byte	0x2c1
 2030 04f1 2F030000 		.4byte	0x32f
 2031 04f5 02       		.byte	0x2
 2032 04f6 23       		.byte	0x23
 2033 04f7 28       		.uleb128 0x28
 2034 04f8 12       		.uleb128 0x12
 2035 04f9 CE020000 		.4byte	.LASF81
 2036 04fd 03       		.byte	0x3
 2037 04fe C202     		.2byte	0x2c2
 2038 0500 2F030000 		.4byte	0x32f
 2039 0504 02       		.byte	0x2
 2040 0505 23       		.byte	0x23
 2041 0506 2C       		.uleb128 0x2c
 2042 0507 12       		.uleb128 0x12
 2043 0508 D4020000 		.4byte	.LASF82
 2044 050c 03       		.byte	0x3
 2045 050d C302     		.2byte	0x2c3
 2046 050f 2F030000 		.4byte	0x32f
 2047 0513 02       		.byte	0x2
 2048 0514 23       		.byte	0x23
 2049 0515 30       		.uleb128 0x30
 2050 0516 13       		.uleb128 0x13
 2051 0517 43523200 		.ascii	"CR2\000"
 2052 051b 03       		.byte	0x3
 2053 051c C402     		.2byte	0x2c4
 2054 051e 2F030000 		.4byte	0x32f
 2055 0522 02       		.byte	0x2
 2056 0523 23       		.byte	0x23
 2057 0524 34       		.uleb128 0x34
 2058 0525 00       		.byte	0
 2059 0526 06       		.uleb128 0x6
 2060 0527 B1010000 		.4byte	.LASF83
 2061 052b 03       		.byte	0x3
 2062 052c C502     		.2byte	0x2c5
 2063 052e 4B040000 		.4byte	0x44b
 2064 0532 11       		.uleb128 0x11
 2065 0533 2C       		.byte	0x2c
 2066 0534 03       		.byte	0x3
 2067 0535 4A03     		.2byte	0x34a
 2068 0537 2C060000 		.4byte	0x62c
 2069 053b 13       		.uleb128 0x13
 2070 053c 43523100 		.ascii	"CR1\000"
 2071 0540 03       		.byte	0x3
 2072 0541 4C03     		.2byte	0x34c
 2073 0543 2F030000 		.4byte	0x32f
 2074 0547 02       		.byte	0x2
 2075 0548 23       		.byte	0x23
 2076 0549 00       		.uleb128 0
 2077 054a 13       		.uleb128 0x13
 2078 054b 43523200 		.ascii	"CR2\000"
 2079 054f 03       		.byte	0x3
 2080 0550 4D03     		.2byte	0x34d
 2081 0552 2F030000 		.4byte	0x32f
 2082 0556 02       		.byte	0x2
 2083 0557 23       		.byte	0x23
 2084 0558 04       		.uleb128 0x4
ARM GAS  /tmp/ccGefySF.s 			page 60


 2085 0559 13       		.uleb128 0x13
 2086 055a 43523300 		.ascii	"CR3\000"
 2087 055e 03       		.byte	0x3
 2088 055f 4E03     		.2byte	0x34e
 2089 0561 2F030000 		.4byte	0x32f
 2090 0565 02       		.byte	0x2
 2091 0566 23       		.byte	0x23
 2092 0567 08       		.uleb128 0x8
 2093 0568 13       		.uleb128 0x13
 2094 0569 42525200 		.ascii	"BRR\000"
 2095 056d 03       		.byte	0x3
 2096 056e 4F03     		.2byte	0x34f
 2097 0570 59030000 		.4byte	0x359
 2098 0574 02       		.byte	0x2
 2099 0575 23       		.byte	0x23
 2100 0576 0C       		.uleb128 0xc
 2101 0577 12       		.uleb128 0x12
 2102 0578 84030000 		.4byte	.LASF62
 2103 057c 03       		.byte	0x3
 2104 057d 5003     		.2byte	0x350
 2105 057f 6E010000 		.4byte	0x16e
 2106 0583 02       		.byte	0x2
 2107 0584 23       		.byte	0x23
 2108 0585 0E       		.uleb128 0xe
 2109 0586 12       		.uleb128 0x12
 2110 0587 F3000000 		.4byte	.LASF84
 2111 058b 03       		.byte	0x3
 2112 058c 5103     		.2byte	0x351
 2113 058e 59030000 		.4byte	0x359
 2114 0592 02       		.byte	0x2
 2115 0593 23       		.byte	0x23
 2116 0594 10       		.uleb128 0x10
 2117 0595 12       		.uleb128 0x12
 2118 0596 8E030000 		.4byte	.LASF53
 2119 059a 03       		.byte	0x3
 2120 059b 5203     		.2byte	0x352
 2121 059d 6E010000 		.4byte	0x16e
 2122 05a1 02       		.byte	0x2
 2123 05a2 23       		.byte	0x23
 2124 05a3 12       		.uleb128 0x12
 2125 05a4 12       		.uleb128 0x12
 2126 05a5 37020000 		.4byte	.LASF85
 2127 05a9 03       		.byte	0x3
 2128 05aa 5303     		.2byte	0x353
 2129 05ac 2F030000 		.4byte	0x32f
 2130 05b0 02       		.byte	0x2
 2131 05b1 23       		.byte	0x23
 2132 05b2 14       		.uleb128 0x14
 2133 05b3 13       		.uleb128 0x13
 2134 05b4 52515200 		.ascii	"RQR\000"
 2135 05b8 03       		.byte	0x3
 2136 05b9 5403     		.2byte	0x354
 2137 05bb 59030000 		.4byte	0x359
 2138 05bf 02       		.byte	0x2
 2139 05c0 23       		.byte	0x23
 2140 05c1 18       		.uleb128 0x18
 2141 05c2 12       		.uleb128 0x12
ARM GAS  /tmp/ccGefySF.s 			page 61


 2142 05c3 98030000 		.4byte	.LASF55
 2143 05c7 03       		.byte	0x3
 2144 05c8 5503     		.2byte	0x355
 2145 05ca 6E010000 		.4byte	0x16e
 2146 05ce 02       		.byte	0x2
 2147 05cf 23       		.byte	0x23
 2148 05d0 1A       		.uleb128 0x1a
 2149 05d1 13       		.uleb128 0x13
 2150 05d2 49535200 		.ascii	"ISR\000"
 2151 05d6 03       		.byte	0x3
 2152 05d7 5603     		.2byte	0x356
 2153 05d9 2F030000 		.4byte	0x32f
 2154 05dd 02       		.byte	0x2
 2155 05de 23       		.byte	0x23
 2156 05df 1C       		.uleb128 0x1c
 2157 05e0 13       		.uleb128 0x13
 2158 05e1 49435200 		.ascii	"ICR\000"
 2159 05e5 03       		.byte	0x3
 2160 05e6 5703     		.2byte	0x357
 2161 05e8 2F030000 		.4byte	0x32f
 2162 05ec 02       		.byte	0x2
 2163 05ed 23       		.byte	0x23
 2164 05ee 20       		.uleb128 0x20
 2165 05ef 13       		.uleb128 0x13
 2166 05f0 52445200 		.ascii	"RDR\000"
 2167 05f4 03       		.byte	0x3
 2168 05f5 5803     		.2byte	0x358
 2169 05f7 59030000 		.4byte	0x359
 2170 05fb 02       		.byte	0x2
 2171 05fc 23       		.byte	0x23
 2172 05fd 24       		.uleb128 0x24
 2173 05fe 12       		.uleb128 0x12
 2174 05ff A2030000 		.4byte	.LASF56
 2175 0603 03       		.byte	0x3
 2176 0604 5903     		.2byte	0x359
 2177 0606 6E010000 		.4byte	0x16e
 2178 060a 02       		.byte	0x2
 2179 060b 23       		.byte	0x23
 2180 060c 26       		.uleb128 0x26
 2181 060d 13       		.uleb128 0x13
 2182 060e 54445200 		.ascii	"TDR\000"
 2183 0612 03       		.byte	0x3
 2184 0613 5A03     		.2byte	0x35a
 2185 0615 59030000 		.4byte	0x359
 2186 0619 02       		.byte	0x2
 2187 061a 23       		.byte	0x23
 2188 061b 28       		.uleb128 0x28
 2189 061c 12       		.uleb128 0x12
 2190 061d AC030000 		.4byte	.LASF86
 2191 0621 03       		.byte	0x3
 2192 0622 5B03     		.2byte	0x35b
 2193 0624 6E010000 		.4byte	0x16e
 2194 0628 02       		.byte	0x2
 2195 0629 23       		.byte	0x23
 2196 062a 2A       		.uleb128 0x2a
 2197 062b 00       		.byte	0
 2198 062c 06       		.uleb128 0x6
ARM GAS  /tmp/ccGefySF.s 			page 62


 2199 062d C7010000 		.4byte	.LASF87
 2200 0631 03       		.byte	0x3
 2201 0632 5C03     		.2byte	0x35c
 2202 0634 32050000 		.4byte	0x532
 2203 0638 02       		.uleb128 0x2
 2204 0639 08       		.byte	0x8
 2205 063a 04       		.byte	0x4
 2206 063b 36030000 		.4byte	.LASF88
 2207 063f 14       		.uleb128 0x14
 2208 0640 04       		.byte	0x4
 2209 0641 29000000 		.4byte	0x29
 2210 0645 14       		.uleb128 0x14
 2211 0646 04       		.byte	0x4
 2212 0647 4B060000 		.4byte	0x64b
 2213 064b 02       		.uleb128 0x2
 2214 064c 01       		.byte	0x1
 2215 064d 08       		.byte	0x8
 2216 064e F5010000 		.4byte	.LASF89
 2217 0652 15       		.uleb128 0x15
 2218 0653 26010000 		.4byte	.LASF90
 2219 0657 01       		.byte	0x1
 2220 0658 2B03     		.2byte	0x32b
 2221 065a 01       		.byte	0x1
 2222 065b 00000000 		.4byte	.LFB11
 2223 065f 2C000000 		.4byte	.LFE11
 2224 0663 00000000 		.4byte	.LLST0
 2225 0667 01       		.byte	0x1
 2226 0668 7C060000 		.4byte	0x67c
 2227 066c 16       		.uleb128 0x16
 2228 066d 4B030000 		.4byte	.LASF92
 2229 0671 01       		.byte	0x1
 2230 0672 2B03     		.2byte	0x32b
 2231 0674 14010000 		.4byte	0x114
 2232 0678 02       		.byte	0x2
 2233 0679 91       		.byte	0x91
 2234 067a 7F       		.sleb128 -1
 2235 067b 00       		.byte	0
 2236 067c 15       		.uleb128 0x15
 2237 067d 6E000000 		.4byte	.LASF91
 2238 0681 01       		.byte	0x1
 2239 0682 7C03     		.2byte	0x37c
 2240 0684 01       		.byte	0x1
 2241 0685 00000000 		.4byte	.LFB16
 2242 0689 EC000000 		.4byte	.LFE16
 2243 068d 20000000 		.4byte	.LLST1
 2244 0691 01       		.byte	0x1
 2245 0692 B5060000 		.4byte	0x6b5
 2246 0696 16       		.uleb128 0x16
 2247 0697 4B030000 		.4byte	.LASF92
 2248 069b 01       		.byte	0x1
 2249 069c 7C03     		.2byte	0x37c
 2250 069e 14010000 		.4byte	0x114
 2251 06a2 02       		.byte	0x2
 2252 06a3 91       		.byte	0x91
 2253 06a4 6F       		.sleb128 -17
 2254 06a5 16       		.uleb128 0x16
 2255 06a6 F9030000 		.4byte	.LASF93
ARM GAS  /tmp/ccGefySF.s 			page 63


 2256 06aa 01       		.byte	0x1
 2257 06ab 7C03     		.2byte	0x37c
 2258 06ad 79010000 		.4byte	0x179
 2259 06b1 02       		.byte	0x2
 2260 06b2 91       		.byte	0x91
 2261 06b3 68       		.sleb128 -24
 2262 06b4 00       		.byte	0
 2263 06b5 17       		.uleb128 0x17
 2264 06b6 01       		.byte	0x1
 2265 06b7 49020000 		.4byte	.LASF97
 2266 06bb 02       		.byte	0x2
 2267 06bc 51       		.byte	0x51
 2268 06bd 01       		.byte	0x1
 2269 06be 29000000 		.4byte	0x29
 2270 06c2 00000000 		.4byte	.LFB20
 2271 06c6 0C010000 		.4byte	.LFE20
 2272 06ca 4C000000 		.4byte	.LLST2
 2273 06ce 01       		.byte	0x1
 2274 06cf FE060000 		.4byte	0x6fe
 2275 06d3 18       		.uleb128 0x18
 2276 06d4 4C010000 		.4byte	.LASF94
 2277 06d8 02       		.byte	0x2
 2278 06d9 51       		.byte	0x51
 2279 06da 29000000 		.4byte	0x29
 2280 06de 02       		.byte	0x2
 2281 06df 91       		.byte	0x91
 2282 06e0 77       		.sleb128 -9
 2283 06e1 19       		.uleb128 0x19
 2284 06e2 09030000 		.4byte	.LASF95
 2285 06e6 02       		.byte	0x2
 2286 06e7 53       		.byte	0x53
 2287 06e8 67010000 		.4byte	0x167
 2288 06ec 02       		.byte	0x2
 2289 06ed 91       		.byte	0x91
 2290 06ee 7C       		.sleb128 -4
 2291 06ef 19       		.uleb128 0x19
 2292 06f0 BD010000 		.4byte	.LASF96
 2293 06f4 02       		.byte	0x2
 2294 06f5 54       		.byte	0x54
 2295 06f6 67010000 		.4byte	0x167
 2296 06fa 02       		.byte	0x2
 2297 06fb 91       		.byte	0x91
 2298 06fc 78       		.sleb128 -8
 2299 06fd 00       		.byte	0
 2300 06fe 1A       		.uleb128 0x1a
 2301 06ff 01       		.byte	0x1
 2302 0700 86020000 		.4byte	.LASF98
 2303 0704 02       		.byte	0x2
 2304 0705 87       		.byte	0x87
 2305 0706 01       		.byte	0x1
 2306 0707 29000000 		.4byte	0x29
 2307 070b 00000000 		.4byte	.LFB21
 2308 070f 60000000 		.4byte	.LFE21
 2309 0713 6C000000 		.4byte	.LLST3
 2310 0717 01       		.byte	0x1
 2311 0718 47070000 		.4byte	0x747
 2312 071c 18       		.uleb128 0x18
ARM GAS  /tmp/ccGefySF.s 			page 64


 2313 071d 28060000 		.4byte	.LASF99
 2314 0721 02       		.byte	0x2
 2315 0722 87       		.byte	0x87
 2316 0723 3F060000 		.4byte	0x63f
 2317 0727 02       		.byte	0x2
 2318 0728 91       		.byte	0x91
 2319 0729 6C       		.sleb128 -20
 2320 072a 18       		.uleb128 0x18
 2321 072b BD020000 		.4byte	.LASF100
 2322 072f 02       		.byte	0x2
 2323 0730 87       		.byte	0x87
 2324 0731 32010000 		.4byte	0x132
 2325 0735 02       		.byte	0x2
 2326 0736 91       		.byte	0x91
 2327 0737 6A       		.sleb128 -22
 2328 0738 1B       		.uleb128 0x1b
 2329 0739 6C656E00 		.ascii	"len\000"
 2330 073d 02       		.byte	0x2
 2331 073e 89       		.byte	0x89
 2332 073f 67010000 		.4byte	0x167
 2333 0743 02       		.byte	0x2
 2334 0744 91       		.byte	0x91
 2335 0745 74       		.sleb128 -12
 2336 0746 00       		.byte	0
 2337 0747 1C       		.uleb128 0x1c
 2338 0748 01       		.byte	0x1
 2339 0749 50030000 		.4byte	.LASF102
 2340 074d 02       		.byte	0x2
 2341 074e 9B       		.byte	0x9b
 2342 074f 01       		.byte	0x1
 2343 0750 00000000 		.4byte	.LFB22
 2344 0754 18010000 		.4byte	.LFE22
 2345 0758 98000000 		.4byte	.LLST4
 2346 075c 01       		.byte	0x1
 2347 075d 70070000 		.4byte	0x770
 2348 0761 19       		.uleb128 0x19
 2349 0762 AF000000 		.4byte	.LASF101
 2350 0766 02       		.byte	0x2
 2351 0767 9D       		.byte	0x9d
 2352 0768 29000000 		.4byte	0x29
 2353 076c 02       		.byte	0x2
 2354 076d 91       		.byte	0x91
 2355 076e 7F       		.sleb128 -1
 2356 076f 00       		.byte	0
 2357 0770 1C       		.uleb128 0x1c
 2358 0771 01       		.byte	0x1
 2359 0772 41060000 		.4byte	.LASF103
 2360 0776 02       		.byte	0x2
 2361 0777 D8       		.byte	0xd8
 2362 0778 01       		.byte	0x1
 2363 0779 00000000 		.4byte	.LFB23
 2364 077d C4000000 		.4byte	.LFE23
 2365 0781 B8000000 		.4byte	.LLST5
 2366 0785 01       		.byte	0x1
 2367 0786 99070000 		.4byte	0x799
 2368 078a 19       		.uleb128 0x19
 2369 078b AF000000 		.4byte	.LASF101
ARM GAS  /tmp/ccGefySF.s 			page 65


 2370 078f 02       		.byte	0x2
 2371 0790 DA       		.byte	0xda
 2372 0791 29000000 		.4byte	0x29
 2373 0795 02       		.byte	0x2
 2374 0796 91       		.byte	0x91
 2375 0797 7F       		.sleb128 -1
 2376 0798 00       		.byte	0
 2377 0799 1D       		.uleb128 0x1d
 2378 079a 01       		.byte	0x1
 2379 079b 44050000 		.4byte	.LASF104
 2380 079f 02       		.byte	0x2
 2381 07a0 0901     		.2byte	0x109
 2382 07a2 01       		.byte	0x1
 2383 07a3 00000000 		.4byte	.LFB24
 2384 07a7 2C000000 		.4byte	.LFE24
 2385 07ab D8000000 		.4byte	.LLST6
 2386 07af 01       		.byte	0x1
 2387 07b0 D1070000 		.4byte	0x7d1
 2388 07b4 16       		.uleb128 0x16
 2389 07b5 F8000000 		.4byte	.LASF105
 2390 07b9 02       		.byte	0x2
 2391 07ba 0901     		.2byte	0x109
 2392 07bc 45060000 		.4byte	0x645
 2393 07c0 02       		.byte	0x2
 2394 07c1 91       		.byte	0x91
 2395 07c2 6C       		.sleb128 -20
 2396 07c3 1E       		.uleb128 0x1e
 2397 07c4 6900     		.ascii	"i\000"
 2398 07c6 02       		.byte	0x2
 2399 07c7 0B01     		.2byte	0x10b
 2400 07c9 29000000 		.4byte	0x29
 2401 07cd 02       		.byte	0x2
 2402 07ce 91       		.byte	0x91
 2403 07cf 77       		.sleb128 -9
 2404 07d0 00       		.byte	0
 2405 07d1 1D       		.uleb128 0x1d
 2406 07d2 01       		.byte	0x1
 2407 07d3 F6020000 		.4byte	.LASF106
 2408 07d7 02       		.byte	0x2
 2409 07d8 1101     		.2byte	0x111
 2410 07da 01       		.byte	0x1
 2411 07db 00000000 		.4byte	.LFB25
 2412 07df 60000000 		.4byte	.LFE25
 2413 07e3 04010000 		.4byte	.LLST7
 2414 07e7 01       		.byte	0x1
 2415 07e8 0B080000 		.4byte	0x80b
 2416 07ec 16       		.uleb128 0x16
 2417 07ed F8000000 		.4byte	.LASF105
 2418 07f1 02       		.byte	0x2
 2419 07f2 1101     		.2byte	0x111
 2420 07f4 3F060000 		.4byte	0x63f
 2421 07f8 02       		.byte	0x2
 2422 07f9 91       		.byte	0x91
 2423 07fa 74       		.sleb128 -12
 2424 07fb 16       		.uleb128 0x16
 2425 07fc B8020000 		.4byte	.LASF107
 2426 0800 02       		.byte	0x2
ARM GAS  /tmp/ccGefySF.s 			page 66


 2427 0801 1101     		.2byte	0x111
 2428 0803 29000000 		.4byte	0x29
 2429 0807 02       		.byte	0x2
 2430 0808 91       		.byte	0x91
 2431 0809 73       		.sleb128 -13
 2432 080a 00       		.byte	0
 2433 080b 1D       		.uleb128 0x1d
 2434 080c 01       		.byte	0x1
 2435 080d 12030000 		.4byte	.LASF108
 2436 0811 02       		.byte	0x2
 2437 0812 1B01     		.2byte	0x11b
 2438 0814 01       		.byte	0x1
 2439 0815 00000000 		.4byte	.LFB26
 2440 0819 1E000000 		.4byte	.LFE26
 2441 081d 30010000 		.4byte	.LLST8
 2442 0821 01       		.byte	0x1
 2443 0822 36080000 		.4byte	0x836
 2444 0826 16       		.uleb128 0x16
 2445 0827 C1040000 		.4byte	.LASF109
 2446 082b 02       		.byte	0x2
 2447 082c 1B01     		.2byte	0x11b
 2448 082e 29000000 		.4byte	0x29
 2449 0832 02       		.byte	0x2
 2450 0833 91       		.byte	0x91
 2451 0834 77       		.sleb128 -9
 2452 0835 00       		.byte	0
 2453 0836 1F       		.uleb128 0x1f
 2454 0837 01       		.byte	0x1
 2455 0838 4A000000 		.4byte	.LASF110
 2456 083c 02       		.byte	0x2
 2457 083d 2001     		.2byte	0x120
 2458 083f 01       		.byte	0x1
 2459 0840 29000000 		.4byte	0x29
 2460 0844 00000000 		.4byte	.LFB27
 2461 0848 60000000 		.4byte	.LFE27
 2462 084c 5C010000 		.4byte	.LLST9
 2463 0850 01       		.byte	0x1
 2464 0851 83080000 		.4byte	0x883
 2465 0855 16       		.uleb128 0x16
 2466 0856 28060000 		.4byte	.LASF99
 2467 085a 02       		.byte	0x2
 2468 085b 2001     		.2byte	0x120
 2469 085d 3F060000 		.4byte	0x63f
 2470 0861 02       		.byte	0x2
 2471 0862 91       		.byte	0x91
 2472 0863 6C       		.sleb128 -20
 2473 0864 16       		.uleb128 0x16
 2474 0865 BD020000 		.4byte	.LASF100
 2475 0869 02       		.byte	0x2
 2476 086a 2001     		.2byte	0x120
 2477 086c 32010000 		.4byte	0x132
 2478 0870 02       		.byte	0x2
 2479 0871 91       		.byte	0x91
 2480 0872 6A       		.sleb128 -22
 2481 0873 1E       		.uleb128 0x1e
 2482 0874 6C656E00 		.ascii	"len\000"
 2483 0878 02       		.byte	0x2
ARM GAS  /tmp/ccGefySF.s 			page 67


 2484 0879 2201     		.2byte	0x122
 2485 087b 67010000 		.4byte	0x167
 2486 087f 02       		.byte	0x2
 2487 0880 91       		.byte	0x91
 2488 0881 74       		.sleb128 -12
 2489 0882 00       		.byte	0
 2490 0883 1D       		.uleb128 0x1d
 2491 0884 01       		.byte	0x1
 2492 0885 2B030000 		.4byte	.LASF111
 2493 0889 02       		.byte	0x2
 2494 088a 3401     		.2byte	0x134
 2495 088c 01       		.byte	0x1
 2496 088d 00000000 		.4byte	.LFB28
 2497 0891 2C000000 		.4byte	.LFE28
 2498 0895 88010000 		.4byte	.LLST10
 2499 0899 01       		.byte	0x1
 2500 089a BB080000 		.4byte	0x8bb
 2501 089e 16       		.uleb128 0x16
 2502 089f F8000000 		.4byte	.LASF105
 2503 08a3 02       		.byte	0x2
 2504 08a4 3401     		.2byte	0x134
 2505 08a6 45060000 		.4byte	0x645
 2506 08aa 02       		.byte	0x2
 2507 08ab 91       		.byte	0x91
 2508 08ac 6C       		.sleb128 -20
 2509 08ad 1E       		.uleb128 0x1e
 2510 08ae 6900     		.ascii	"i\000"
 2511 08b0 02       		.byte	0x2
 2512 08b1 3601     		.2byte	0x136
 2513 08b3 29000000 		.4byte	0x29
 2514 08b7 02       		.byte	0x2
 2515 08b8 91       		.byte	0x91
 2516 08b9 77       		.sleb128 -9
 2517 08ba 00       		.byte	0
 2518 08bb 1D       		.uleb128 0x1d
 2519 08bc 01       		.byte	0x1
 2520 08bd 5B000000 		.4byte	.LASF112
 2521 08c1 02       		.byte	0x2
 2522 08c2 3C01     		.2byte	0x13c
 2523 08c4 01       		.byte	0x1
 2524 08c5 00000000 		.4byte	.LFB29
 2525 08c9 60000000 		.4byte	.LFE29
 2526 08cd B4010000 		.4byte	.LLST11
 2527 08d1 01       		.byte	0x1
 2528 08d2 F5080000 		.4byte	0x8f5
 2529 08d6 16       		.uleb128 0x16
 2530 08d7 F8000000 		.4byte	.LASF105
 2531 08db 02       		.byte	0x2
 2532 08dc 3C01     		.2byte	0x13c
 2533 08de 3F060000 		.4byte	0x63f
 2534 08e2 02       		.byte	0x2
 2535 08e3 91       		.byte	0x91
 2536 08e4 74       		.sleb128 -12
 2537 08e5 16       		.uleb128 0x16
 2538 08e6 B8020000 		.4byte	.LASF107
 2539 08ea 02       		.byte	0x2
 2540 08eb 3C01     		.2byte	0x13c
ARM GAS  /tmp/ccGefySF.s 			page 68


 2541 08ed 29000000 		.4byte	0x29
 2542 08f1 02       		.byte	0x2
 2543 08f2 91       		.byte	0x91
 2544 08f3 73       		.sleb128 -13
 2545 08f4 00       		.byte	0
 2546 08f5 1D       		.uleb128 0x1d
 2547 08f6 01       		.byte	0x1
 2548 08f7 4E040000 		.4byte	.LASF113
 2549 08fb 02       		.byte	0x2
 2550 08fc 4601     		.2byte	0x146
 2551 08fe 01       		.byte	0x1
 2552 08ff 00000000 		.4byte	.LFB30
 2553 0903 1E000000 		.4byte	.LFE30
 2554 0907 E0010000 		.4byte	.LLST12
 2555 090b 01       		.byte	0x1
 2556 090c 20090000 		.4byte	0x920
 2557 0910 16       		.uleb128 0x16
 2558 0911 C1040000 		.4byte	.LASF109
 2559 0915 02       		.byte	0x2
 2560 0916 4601     		.2byte	0x146
 2561 0918 29000000 		.4byte	0x29
 2562 091c 02       		.byte	0x2
 2563 091d 91       		.byte	0x91
 2564 091e 77       		.sleb128 -9
 2565 091f 00       		.byte	0
 2566 0920 20       		.uleb128 0x20
 2567 0921 01       		.byte	0x1
 2568 0922 67010000 		.4byte	.LASF114
 2569 0926 02       		.byte	0x2
 2570 0927 4C01     		.2byte	0x14c
 2571 0929 01       		.byte	0x1
 2572 092a 00000000 		.4byte	.LFB31
 2573 092e 7C000000 		.4byte	.LFE31
 2574 0932 0C020000 		.4byte	.LLST13
 2575 0936 01       		.byte	0x1
 2576 0937 20       		.uleb128 0x20
 2577 0938 01       		.byte	0x1
 2578 0939 55010000 		.4byte	.LASF115
 2579 093d 02       		.byte	0x2
 2580 093e 5E01     		.2byte	0x15e
 2581 0940 01       		.byte	0x1
 2582 0941 00000000 		.4byte	.LFB32
 2583 0945 7C000000 		.4byte	.LFE32
 2584 0949 2C020000 		.4byte	.LLST14
 2585 094d 01       		.byte	0x1
 2586 094e 21       		.uleb128 0x21
 2587 094f 72020000 		.4byte	.LASF116
 2588 0953 02       		.byte	0x2
 2589 0954 27       		.byte	0x27
 2590 0955 5B090000 		.4byte	0x95b
 2591 0959 01       		.byte	0x1
 2592 095a 01       		.byte	0x1
 2593 095b 0E       		.uleb128 0xe
 2594 095c 29000000 		.4byte	0x29
 2595 0960 21       		.uleb128 0x21
 2596 0961 D5010000 		.4byte	.LASF117
 2597 0965 02       		.byte	0x2
ARM GAS  /tmp/ccGefySF.s 			page 69


 2598 0966 29       		.byte	0x29
 2599 0967 5B090000 		.4byte	0x95b
 2600 096b 01       		.byte	0x1
 2601 096c 01       		.byte	0x1
 2602 096d 0C       		.uleb128 0xc
 2603 096e 29000000 		.4byte	0x29
 2604 0972 78090000 		.4byte	0x978
 2605 0976 22       		.uleb128 0x22
 2606 0977 00       		.byte	0
 2607 0978 21       		.uleb128 0x21
 2608 0979 41020000 		.4byte	.LASF118
 2609 097d 02       		.byte	0x2
 2610 097e 35       		.byte	0x35
 2611 097f 85090000 		.4byte	0x985
 2612 0983 01       		.byte	0x1
 2613 0984 01       		.byte	0x1
 2614 0985 0E       		.uleb128 0xe
 2615 0986 6D090000 		.4byte	0x96d
 2616 098a 21       		.uleb128 0x21
 2617 098b 24020000 		.4byte	.LASF119
 2618 098f 02       		.byte	0x2
 2619 0990 36       		.byte	0x36
 2620 0991 97090000 		.4byte	0x997
 2621 0995 01       		.byte	0x1
 2622 0996 01       		.byte	0x1
 2623 0997 0E       		.uleb128 0xe
 2624 0998 6D090000 		.4byte	0x96d
 2625 099c 21       		.uleb128 0x21
 2626 099d BF000000 		.4byte	.LASF120
 2627 09a1 02       		.byte	0x2
 2628 09a2 38       		.byte	0x38
 2629 09a3 A9090000 		.4byte	0x9a9
 2630 09a7 01       		.byte	0x1
 2631 09a8 01       		.byte	0x1
 2632 09a9 0E       		.uleb128 0xe
 2633 09aa 6D090000 		.4byte	0x96d
 2634 09ae 21       		.uleb128 0x21
 2635 09af 9C000000 		.4byte	.LASF121
 2636 09b3 02       		.byte	0x2
 2637 09b4 39       		.byte	0x39
 2638 09b5 BB090000 		.4byte	0x9bb
 2639 09b9 01       		.byte	0x1
 2640 09ba 01       		.byte	0x1
 2641 09bb 0E       		.uleb128 0xe
 2642 09bc 6D090000 		.4byte	0x96d
 2643 09c0 23       		.uleb128 0x23
 2644 09c1 B5000000 		.4byte	.LASF122
 2645 09c5 02       		.byte	0x2
 2646 09c6 3C       		.byte	0x3c
 2647 09c7 D2090000 		.4byte	0x9d2
 2648 09cb 01       		.byte	0x1
 2649 09cc 05       		.byte	0x5
 2650 09cd 03       		.byte	0x3
 2651 09ce 00000000 		.4byte	ptx1
 2652 09d2 14       		.uleb128 0x14
 2653 09d3 04       		.byte	0x4
 2654 09d4 5B090000 		.4byte	0x95b
ARM GAS  /tmp/ccGefySF.s 			page 70


 2655 09d8 23       		.uleb128 0x23
 2656 09d9 E9030000 		.4byte	.LASF123
 2657 09dd 02       		.byte	0x2
 2658 09de 3D       		.byte	0x3d
 2659 09df D2090000 		.4byte	0x9d2
 2660 09e3 01       		.byte	0x1
 2661 09e4 05       		.byte	0x5
 2662 09e5 03       		.byte	0x3
 2663 09e6 00000000 		.4byte	ptx1_pckt_index
 2664 09ea 23       		.uleb128 0x23
 2665 09eb 9A010000 		.4byte	.LASF124
 2666 09ef 02       		.byte	0x2
 2667 09f0 3E       		.byte	0x3e
 2668 09f1 D2090000 		.4byte	0x9d2
 2669 09f5 01       		.byte	0x1
 2670 09f6 05       		.byte	0x5
 2671 09f7 03       		.byte	0x3
 2672 09f8 00000000 		.4byte	prx1
 2673 09fc 23       		.uleb128 0x23
 2674 09fd BA000000 		.4byte	.LASF125
 2675 0a01 02       		.byte	0x2
 2676 0a02 40       		.byte	0x40
 2677 0a03 D2090000 		.4byte	0x9d2
 2678 0a07 01       		.byte	0x1
 2679 0a08 05       		.byte	0x5
 2680 0a09 03       		.byte	0x3
 2681 0a0a 00000000 		.4byte	ptx2
 2682 0a0e 23       		.uleb128 0x23
 2683 0a0f 1B000000 		.4byte	.LASF126
 2684 0a13 02       		.byte	0x2
 2685 0a14 41       		.byte	0x41
 2686 0a15 D2090000 		.4byte	0x9d2
 2687 0a19 01       		.byte	0x1
 2688 0a1a 05       		.byte	0x5
 2689 0a1b 03       		.byte	0x3
 2690 0a1c 00000000 		.4byte	ptx2_pckt_index
 2691 0a20 23       		.uleb128 0x23
 2692 0a21 3C020000 		.4byte	.LASF127
 2693 0a25 02       		.byte	0x2
 2694 0a26 42       		.byte	0x42
 2695 0a27 D2090000 		.4byte	0x9d2
 2696 0a2b 01       		.byte	0x1
 2697 0a2c 05       		.byte	0x5
 2698 0a2d 03       		.byte	0x3
 2699 0a2e 00000000 		.4byte	prx2
 2700 0a32 23       		.uleb128 0x23
 2701 0a33 62030000 		.4byte	.LASF128
 2702 0a37 02       		.byte	0x2
 2703 0a38 44       		.byte	0x44
 2704 0a39 5B090000 		.4byte	0x95b
 2705 0a3d 01       		.byte	0x1
 2706 0a3e 05       		.byte	0x5
 2707 0a3f 03       		.byte	0x3
 2708 0a40 00000000 		.4byte	pckt_gps_ready
 2709 0a44 23       		.uleb128 0x23
 2710 0a45 6C040000 		.4byte	.LASF129
 2711 0a49 02       		.byte	0x2
ARM GAS  /tmp/ccGefySF.s 			page 71


 2712 0a4a 45       		.byte	0x45
 2713 0a4b 5B090000 		.4byte	0x95b
 2714 0a4f 01       		.byte	0x1
 2715 0a50 05       		.byte	0x5
 2716 0a51 03       		.byte	0x3
 2717 0a52 00000000 		.4byte	usart_mode
 2718 0a56 00       		.byte	0
 2719              		.section	.debug_abbrev,"",%progbits
 2720              	.Ldebug_abbrev0:
 2721 0000 01       		.uleb128 0x1
 2722 0001 11       		.uleb128 0x11
 2723 0002 01       		.byte	0x1
 2724 0003 25       		.uleb128 0x25
 2725 0004 0E       		.uleb128 0xe
 2726 0005 13       		.uleb128 0x13
 2727 0006 0B       		.uleb128 0xb
 2728 0007 03       		.uleb128 0x3
 2729 0008 0E       		.uleb128 0xe
 2730 0009 1B       		.uleb128 0x1b
 2731 000a 0E       		.uleb128 0xe
 2732 000b 55       		.uleb128 0x55
 2733 000c 06       		.uleb128 0x6
 2734 000d 11       		.uleb128 0x11
 2735 000e 01       		.uleb128 0x1
 2736 000f 52       		.uleb128 0x52
 2737 0010 01       		.uleb128 0x1
 2738 0011 10       		.uleb128 0x10
 2739 0012 06       		.uleb128 0x6
 2740 0013 00       		.byte	0
 2741 0014 00       		.byte	0
 2742 0015 02       		.uleb128 0x2
 2743 0016 24       		.uleb128 0x24
 2744 0017 00       		.byte	0
 2745 0018 0B       		.uleb128 0xb
 2746 0019 0B       		.uleb128 0xb
 2747 001a 3E       		.uleb128 0x3e
 2748 001b 0B       		.uleb128 0xb
 2749 001c 03       		.uleb128 0x3
 2750 001d 0E       		.uleb128 0xe
 2751 001e 00       		.byte	0
 2752 001f 00       		.byte	0
 2753 0020 03       		.uleb128 0x3
 2754 0021 04       		.uleb128 0x4
 2755 0022 01       		.byte	0x1
 2756 0023 03       		.uleb128 0x3
 2757 0024 0E       		.uleb128 0xe
 2758 0025 0B       		.uleb128 0xb
 2759 0026 0B       		.uleb128 0xb
 2760 0027 49       		.uleb128 0x49
 2761 0028 13       		.uleb128 0x13
 2762 0029 3A       		.uleb128 0x3a
 2763 002a 0B       		.uleb128 0xb
 2764 002b 3B       		.uleb128 0x3b
 2765 002c 0B       		.uleb128 0xb
 2766 002d 01       		.uleb128 0x1
 2767 002e 13       		.uleb128 0x13
 2768 002f 00       		.byte	0
ARM GAS  /tmp/ccGefySF.s 			page 72


 2769 0030 00       		.byte	0
 2770 0031 04       		.uleb128 0x4
 2771 0032 28       		.uleb128 0x28
 2772 0033 00       		.byte	0
 2773 0034 03       		.uleb128 0x3
 2774 0035 0E       		.uleb128 0xe
 2775 0036 1C       		.uleb128 0x1c
 2776 0037 0D       		.uleb128 0xd
 2777 0038 00       		.byte	0
 2778 0039 00       		.byte	0
 2779 003a 05       		.uleb128 0x5
 2780 003b 28       		.uleb128 0x28
 2781 003c 00       		.byte	0
 2782 003d 03       		.uleb128 0x3
 2783 003e 0E       		.uleb128 0xe
 2784 003f 1C       		.uleb128 0x1c
 2785 0040 0B       		.uleb128 0xb
 2786 0041 00       		.byte	0
 2787 0042 00       		.byte	0
 2788 0043 06       		.uleb128 0x6
 2789 0044 16       		.uleb128 0x16
 2790 0045 00       		.byte	0
 2791 0046 03       		.uleb128 0x3
 2792 0047 0E       		.uleb128 0xe
 2793 0048 3A       		.uleb128 0x3a
 2794 0049 0B       		.uleb128 0xb
 2795 004a 3B       		.uleb128 0x3b
 2796 004b 05       		.uleb128 0x5
 2797 004c 49       		.uleb128 0x49
 2798 004d 13       		.uleb128 0x13
 2799 004e 00       		.byte	0
 2800 004f 00       		.byte	0
 2801 0050 07       		.uleb128 0x7
 2802 0051 16       		.uleb128 0x16
 2803 0052 00       		.byte	0
 2804 0053 03       		.uleb128 0x3
 2805 0054 0E       		.uleb128 0xe
 2806 0055 3A       		.uleb128 0x3a
 2807 0056 0B       		.uleb128 0xb
 2808 0057 3B       		.uleb128 0x3b
 2809 0058 0B       		.uleb128 0xb
 2810 0059 49       		.uleb128 0x49
 2811 005a 13       		.uleb128 0x13
 2812 005b 00       		.byte	0
 2813 005c 00       		.byte	0
 2814 005d 08       		.uleb128 0x8
 2815 005e 24       		.uleb128 0x24
 2816 005f 00       		.byte	0
 2817 0060 0B       		.uleb128 0xb
 2818 0061 0B       		.uleb128 0xb
 2819 0062 3E       		.uleb128 0x3e
 2820 0063 0B       		.uleb128 0xb
 2821 0064 03       		.uleb128 0x3
 2822 0065 08       		.uleb128 0x8
 2823 0066 00       		.byte	0
 2824 0067 00       		.byte	0
 2825 0068 09       		.uleb128 0x9
ARM GAS  /tmp/ccGefySF.s 			page 73


 2826 0069 13       		.uleb128 0x13
 2827 006a 01       		.byte	0x1
 2828 006b 0B       		.uleb128 0xb
 2829 006c 05       		.uleb128 0x5
 2830 006d 3A       		.uleb128 0x3a
 2831 006e 0B       		.uleb128 0xb
 2832 006f 3B       		.uleb128 0x3b
 2833 0070 0B       		.uleb128 0xb
 2834 0071 01       		.uleb128 0x1
 2835 0072 13       		.uleb128 0x13
 2836 0073 00       		.byte	0
 2837 0074 00       		.byte	0
 2838 0075 0A       		.uleb128 0xa
 2839 0076 0D       		.uleb128 0xd
 2840 0077 00       		.byte	0
 2841 0078 03       		.uleb128 0x3
 2842 0079 0E       		.uleb128 0xe
 2843 007a 3A       		.uleb128 0x3a
 2844 007b 0B       		.uleb128 0xb
 2845 007c 3B       		.uleb128 0x3b
 2846 007d 0B       		.uleb128 0xb
 2847 007e 49       		.uleb128 0x49
 2848 007f 13       		.uleb128 0x13
 2849 0080 38       		.uleb128 0x38
 2850 0081 0A       		.uleb128 0xa
 2851 0082 00       		.byte	0
 2852 0083 00       		.byte	0
 2853 0084 0B       		.uleb128 0xb
 2854 0085 0D       		.uleb128 0xd
 2855 0086 00       		.byte	0
 2856 0087 03       		.uleb128 0x3
 2857 0088 08       		.uleb128 0x8
 2858 0089 3A       		.uleb128 0x3a
 2859 008a 0B       		.uleb128 0xb
 2860 008b 3B       		.uleb128 0x3b
 2861 008c 0B       		.uleb128 0xb
 2862 008d 49       		.uleb128 0x49
 2863 008e 13       		.uleb128 0x13
 2864 008f 38       		.uleb128 0x38
 2865 0090 0A       		.uleb128 0xa
 2866 0091 00       		.byte	0
 2867 0092 00       		.byte	0
 2868 0093 0C       		.uleb128 0xc
 2869 0094 01       		.uleb128 0x1
 2870 0095 01       		.byte	0x1
 2871 0096 49       		.uleb128 0x49
 2872 0097 13       		.uleb128 0x13
 2873 0098 01       		.uleb128 0x1
 2874 0099 13       		.uleb128 0x13
 2875 009a 00       		.byte	0
 2876 009b 00       		.byte	0
 2877 009c 0D       		.uleb128 0xd
 2878 009d 21       		.uleb128 0x21
 2879 009e 00       		.byte	0
 2880 009f 49       		.uleb128 0x49
 2881 00a0 13       		.uleb128 0x13
 2882 00a1 2F       		.uleb128 0x2f
ARM GAS  /tmp/ccGefySF.s 			page 74


 2883 00a2 0B       		.uleb128 0xb
 2884 00a3 00       		.byte	0
 2885 00a4 00       		.byte	0
 2886 00a5 0E       		.uleb128 0xe
 2887 00a6 35       		.uleb128 0x35
 2888 00a7 00       		.byte	0
 2889 00a8 49       		.uleb128 0x49
 2890 00a9 13       		.uleb128 0x13
 2891 00aa 00       		.byte	0
 2892 00ab 00       		.byte	0
 2893 00ac 0F       		.uleb128 0xf
 2894 00ad 13       		.uleb128 0x13
 2895 00ae 01       		.byte	0x1
 2896 00af 0B       		.uleb128 0xb
 2897 00b0 0B       		.uleb128 0xb
 2898 00b1 3A       		.uleb128 0x3a
 2899 00b2 0B       		.uleb128 0xb
 2900 00b3 3B       		.uleb128 0x3b
 2901 00b4 0B       		.uleb128 0xb
 2902 00b5 01       		.uleb128 0x1
 2903 00b6 13       		.uleb128 0x13
 2904 00b7 00       		.byte	0
 2905 00b8 00       		.byte	0
 2906 00b9 10       		.uleb128 0x10
 2907 00ba 26       		.uleb128 0x26
 2908 00bb 00       		.byte	0
 2909 00bc 49       		.uleb128 0x49
 2910 00bd 13       		.uleb128 0x13
 2911 00be 00       		.byte	0
 2912 00bf 00       		.byte	0
 2913 00c0 11       		.uleb128 0x11
 2914 00c1 13       		.uleb128 0x13
 2915 00c2 01       		.byte	0x1
 2916 00c3 0B       		.uleb128 0xb
 2917 00c4 0B       		.uleb128 0xb
 2918 00c5 3A       		.uleb128 0x3a
 2919 00c6 0B       		.uleb128 0xb
 2920 00c7 3B       		.uleb128 0x3b
 2921 00c8 05       		.uleb128 0x5
 2922 00c9 01       		.uleb128 0x1
 2923 00ca 13       		.uleb128 0x13
 2924 00cb 00       		.byte	0
 2925 00cc 00       		.byte	0
 2926 00cd 12       		.uleb128 0x12
 2927 00ce 0D       		.uleb128 0xd
 2928 00cf 00       		.byte	0
 2929 00d0 03       		.uleb128 0x3
 2930 00d1 0E       		.uleb128 0xe
 2931 00d2 3A       		.uleb128 0x3a
 2932 00d3 0B       		.uleb128 0xb
 2933 00d4 3B       		.uleb128 0x3b
 2934 00d5 05       		.uleb128 0x5
 2935 00d6 49       		.uleb128 0x49
 2936 00d7 13       		.uleb128 0x13
 2937 00d8 38       		.uleb128 0x38
 2938 00d9 0A       		.uleb128 0xa
 2939 00da 00       		.byte	0
ARM GAS  /tmp/ccGefySF.s 			page 75


 2940 00db 00       		.byte	0
 2941 00dc 13       		.uleb128 0x13
 2942 00dd 0D       		.uleb128 0xd
 2943 00de 00       		.byte	0
 2944 00df 03       		.uleb128 0x3
 2945 00e0 08       		.uleb128 0x8
 2946 00e1 3A       		.uleb128 0x3a
 2947 00e2 0B       		.uleb128 0xb
 2948 00e3 3B       		.uleb128 0x3b
 2949 00e4 05       		.uleb128 0x5
 2950 00e5 49       		.uleb128 0x49
 2951 00e6 13       		.uleb128 0x13
 2952 00e7 38       		.uleb128 0x38
 2953 00e8 0A       		.uleb128 0xa
 2954 00e9 00       		.byte	0
 2955 00ea 00       		.byte	0
 2956 00eb 14       		.uleb128 0x14
 2957 00ec 0F       		.uleb128 0xf
 2958 00ed 00       		.byte	0
 2959 00ee 0B       		.uleb128 0xb
 2960 00ef 0B       		.uleb128 0xb
 2961 00f0 49       		.uleb128 0x49
 2962 00f1 13       		.uleb128 0x13
 2963 00f2 00       		.byte	0
 2964 00f3 00       		.byte	0
 2965 00f4 15       		.uleb128 0x15
 2966 00f5 2E       		.uleb128 0x2e
 2967 00f6 01       		.byte	0x1
 2968 00f7 03       		.uleb128 0x3
 2969 00f8 0E       		.uleb128 0xe
 2970 00f9 3A       		.uleb128 0x3a
 2971 00fa 0B       		.uleb128 0xb
 2972 00fb 3B       		.uleb128 0x3b
 2973 00fc 05       		.uleb128 0x5
 2974 00fd 27       		.uleb128 0x27
 2975 00fe 0C       		.uleb128 0xc
 2976 00ff 11       		.uleb128 0x11
 2977 0100 01       		.uleb128 0x1
 2978 0101 12       		.uleb128 0x12
 2979 0102 01       		.uleb128 0x1
 2980 0103 40       		.uleb128 0x40
 2981 0104 06       		.uleb128 0x6
 2982 0105 9742     		.uleb128 0x2117
 2983 0107 0C       		.uleb128 0xc
 2984 0108 01       		.uleb128 0x1
 2985 0109 13       		.uleb128 0x13
 2986 010a 00       		.byte	0
 2987 010b 00       		.byte	0
 2988 010c 16       		.uleb128 0x16
 2989 010d 05       		.uleb128 0x5
 2990 010e 00       		.byte	0
 2991 010f 03       		.uleb128 0x3
 2992 0110 0E       		.uleb128 0xe
 2993 0111 3A       		.uleb128 0x3a
 2994 0112 0B       		.uleb128 0xb
 2995 0113 3B       		.uleb128 0x3b
 2996 0114 05       		.uleb128 0x5
ARM GAS  /tmp/ccGefySF.s 			page 76


 2997 0115 49       		.uleb128 0x49
 2998 0116 13       		.uleb128 0x13
 2999 0117 02       		.uleb128 0x2
 3000 0118 0A       		.uleb128 0xa
 3001 0119 00       		.byte	0
 3002 011a 00       		.byte	0
 3003 011b 17       		.uleb128 0x17
 3004 011c 2E       		.uleb128 0x2e
 3005 011d 01       		.byte	0x1
 3006 011e 3F       		.uleb128 0x3f
 3007 011f 0C       		.uleb128 0xc
 3008 0120 03       		.uleb128 0x3
 3009 0121 0E       		.uleb128 0xe
 3010 0122 3A       		.uleb128 0x3a
 3011 0123 0B       		.uleb128 0xb
 3012 0124 3B       		.uleb128 0x3b
 3013 0125 0B       		.uleb128 0xb
 3014 0126 27       		.uleb128 0x27
 3015 0127 0C       		.uleb128 0xc
 3016 0128 49       		.uleb128 0x49
 3017 0129 13       		.uleb128 0x13
 3018 012a 11       		.uleb128 0x11
 3019 012b 01       		.uleb128 0x1
 3020 012c 12       		.uleb128 0x12
 3021 012d 01       		.uleb128 0x1
 3022 012e 40       		.uleb128 0x40
 3023 012f 06       		.uleb128 0x6
 3024 0130 9742     		.uleb128 0x2117
 3025 0132 0C       		.uleb128 0xc
 3026 0133 01       		.uleb128 0x1
 3027 0134 13       		.uleb128 0x13
 3028 0135 00       		.byte	0
 3029 0136 00       		.byte	0
 3030 0137 18       		.uleb128 0x18
 3031 0138 05       		.uleb128 0x5
 3032 0139 00       		.byte	0
 3033 013a 03       		.uleb128 0x3
 3034 013b 0E       		.uleb128 0xe
 3035 013c 3A       		.uleb128 0x3a
 3036 013d 0B       		.uleb128 0xb
 3037 013e 3B       		.uleb128 0x3b
 3038 013f 0B       		.uleb128 0xb
 3039 0140 49       		.uleb128 0x49
 3040 0141 13       		.uleb128 0x13
 3041 0142 02       		.uleb128 0x2
 3042 0143 0A       		.uleb128 0xa
 3043 0144 00       		.byte	0
 3044 0145 00       		.byte	0
 3045 0146 19       		.uleb128 0x19
 3046 0147 34       		.uleb128 0x34
 3047 0148 00       		.byte	0
 3048 0149 03       		.uleb128 0x3
 3049 014a 0E       		.uleb128 0xe
 3050 014b 3A       		.uleb128 0x3a
 3051 014c 0B       		.uleb128 0xb
 3052 014d 3B       		.uleb128 0x3b
 3053 014e 0B       		.uleb128 0xb
ARM GAS  /tmp/ccGefySF.s 			page 77


 3054 014f 49       		.uleb128 0x49
 3055 0150 13       		.uleb128 0x13
 3056 0151 02       		.uleb128 0x2
 3057 0152 0A       		.uleb128 0xa
 3058 0153 00       		.byte	0
 3059 0154 00       		.byte	0
 3060 0155 1A       		.uleb128 0x1a
 3061 0156 2E       		.uleb128 0x2e
 3062 0157 01       		.byte	0x1
 3063 0158 3F       		.uleb128 0x3f
 3064 0159 0C       		.uleb128 0xc
 3065 015a 03       		.uleb128 0x3
 3066 015b 0E       		.uleb128 0xe
 3067 015c 3A       		.uleb128 0x3a
 3068 015d 0B       		.uleb128 0xb
 3069 015e 3B       		.uleb128 0x3b
 3070 015f 0B       		.uleb128 0xb
 3071 0160 27       		.uleb128 0x27
 3072 0161 0C       		.uleb128 0xc
 3073 0162 49       		.uleb128 0x49
 3074 0163 13       		.uleb128 0x13
 3075 0164 11       		.uleb128 0x11
 3076 0165 01       		.uleb128 0x1
 3077 0166 12       		.uleb128 0x12
 3078 0167 01       		.uleb128 0x1
 3079 0168 40       		.uleb128 0x40
 3080 0169 06       		.uleb128 0x6
 3081 016a 9642     		.uleb128 0x2116
 3082 016c 0C       		.uleb128 0xc
 3083 016d 01       		.uleb128 0x1
 3084 016e 13       		.uleb128 0x13
 3085 016f 00       		.byte	0
 3086 0170 00       		.byte	0
 3087 0171 1B       		.uleb128 0x1b
 3088 0172 34       		.uleb128 0x34
 3089 0173 00       		.byte	0
 3090 0174 03       		.uleb128 0x3
 3091 0175 08       		.uleb128 0x8
 3092 0176 3A       		.uleb128 0x3a
 3093 0177 0B       		.uleb128 0xb
 3094 0178 3B       		.uleb128 0x3b
 3095 0179 0B       		.uleb128 0xb
 3096 017a 49       		.uleb128 0x49
 3097 017b 13       		.uleb128 0x13
 3098 017c 02       		.uleb128 0x2
 3099 017d 0A       		.uleb128 0xa
 3100 017e 00       		.byte	0
 3101 017f 00       		.byte	0
 3102 0180 1C       		.uleb128 0x1c
 3103 0181 2E       		.uleb128 0x2e
 3104 0182 01       		.byte	0x1
 3105 0183 3F       		.uleb128 0x3f
 3106 0184 0C       		.uleb128 0xc
 3107 0185 03       		.uleb128 0x3
 3108 0186 0E       		.uleb128 0xe
 3109 0187 3A       		.uleb128 0x3a
 3110 0188 0B       		.uleb128 0xb
ARM GAS  /tmp/ccGefySF.s 			page 78


 3111 0189 3B       		.uleb128 0x3b
 3112 018a 0B       		.uleb128 0xb
 3113 018b 27       		.uleb128 0x27
 3114 018c 0C       		.uleb128 0xc
 3115 018d 11       		.uleb128 0x11
 3116 018e 01       		.uleb128 0x1
 3117 018f 12       		.uleb128 0x12
 3118 0190 01       		.uleb128 0x1
 3119 0191 40       		.uleb128 0x40
 3120 0192 06       		.uleb128 0x6
 3121 0193 9742     		.uleb128 0x2117
 3122 0195 0C       		.uleb128 0xc
 3123 0196 01       		.uleb128 0x1
 3124 0197 13       		.uleb128 0x13
 3125 0198 00       		.byte	0
 3126 0199 00       		.byte	0
 3127 019a 1D       		.uleb128 0x1d
 3128 019b 2E       		.uleb128 0x2e
 3129 019c 01       		.byte	0x1
 3130 019d 3F       		.uleb128 0x3f
 3131 019e 0C       		.uleb128 0xc
 3132 019f 03       		.uleb128 0x3
 3133 01a0 0E       		.uleb128 0xe
 3134 01a1 3A       		.uleb128 0x3a
 3135 01a2 0B       		.uleb128 0xb
 3136 01a3 3B       		.uleb128 0x3b
 3137 01a4 05       		.uleb128 0x5
 3138 01a5 27       		.uleb128 0x27
 3139 01a6 0C       		.uleb128 0xc
 3140 01a7 11       		.uleb128 0x11
 3141 01a8 01       		.uleb128 0x1
 3142 01a9 12       		.uleb128 0x12
 3143 01aa 01       		.uleb128 0x1
 3144 01ab 40       		.uleb128 0x40
 3145 01ac 06       		.uleb128 0x6
 3146 01ad 9642     		.uleb128 0x2116
 3147 01af 0C       		.uleb128 0xc
 3148 01b0 01       		.uleb128 0x1
 3149 01b1 13       		.uleb128 0x13
 3150 01b2 00       		.byte	0
 3151 01b3 00       		.byte	0
 3152 01b4 1E       		.uleb128 0x1e
 3153 01b5 34       		.uleb128 0x34
 3154 01b6 00       		.byte	0
 3155 01b7 03       		.uleb128 0x3
 3156 01b8 08       		.uleb128 0x8
 3157 01b9 3A       		.uleb128 0x3a
 3158 01ba 0B       		.uleb128 0xb
 3159 01bb 3B       		.uleb128 0x3b
 3160 01bc 05       		.uleb128 0x5
 3161 01bd 49       		.uleb128 0x49
 3162 01be 13       		.uleb128 0x13
 3163 01bf 02       		.uleb128 0x2
 3164 01c0 0A       		.uleb128 0xa
 3165 01c1 00       		.byte	0
 3166 01c2 00       		.byte	0
 3167 01c3 1F       		.uleb128 0x1f
ARM GAS  /tmp/ccGefySF.s 			page 79


 3168 01c4 2E       		.uleb128 0x2e
 3169 01c5 01       		.byte	0x1
 3170 01c6 3F       		.uleb128 0x3f
 3171 01c7 0C       		.uleb128 0xc
 3172 01c8 03       		.uleb128 0x3
 3173 01c9 0E       		.uleb128 0xe
 3174 01ca 3A       		.uleb128 0x3a
 3175 01cb 0B       		.uleb128 0xb
 3176 01cc 3B       		.uleb128 0x3b
 3177 01cd 05       		.uleb128 0x5
 3178 01ce 27       		.uleb128 0x27
 3179 01cf 0C       		.uleb128 0xc
 3180 01d0 49       		.uleb128 0x49
 3181 01d1 13       		.uleb128 0x13
 3182 01d2 11       		.uleb128 0x11
 3183 01d3 01       		.uleb128 0x1
 3184 01d4 12       		.uleb128 0x12
 3185 01d5 01       		.uleb128 0x1
 3186 01d6 40       		.uleb128 0x40
 3187 01d7 06       		.uleb128 0x6
 3188 01d8 9642     		.uleb128 0x2116
 3189 01da 0C       		.uleb128 0xc
 3190 01db 01       		.uleb128 0x1
 3191 01dc 13       		.uleb128 0x13
 3192 01dd 00       		.byte	0
 3193 01de 00       		.byte	0
 3194 01df 20       		.uleb128 0x20
 3195 01e0 2E       		.uleb128 0x2e
 3196 01e1 00       		.byte	0
 3197 01e2 3F       		.uleb128 0x3f
 3198 01e3 0C       		.uleb128 0xc
 3199 01e4 03       		.uleb128 0x3
 3200 01e5 0E       		.uleb128 0xe
 3201 01e6 3A       		.uleb128 0x3a
 3202 01e7 0B       		.uleb128 0xb
 3203 01e8 3B       		.uleb128 0x3b
 3204 01e9 05       		.uleb128 0x5
 3205 01ea 27       		.uleb128 0x27
 3206 01eb 0C       		.uleb128 0xc
 3207 01ec 11       		.uleb128 0x11
 3208 01ed 01       		.uleb128 0x1
 3209 01ee 12       		.uleb128 0x12
 3210 01ef 01       		.uleb128 0x1
 3211 01f0 40       		.uleb128 0x40
 3212 01f1 06       		.uleb128 0x6
 3213 01f2 9642     		.uleb128 0x2116
 3214 01f4 0C       		.uleb128 0xc
 3215 01f5 00       		.byte	0
 3216 01f6 00       		.byte	0
 3217 01f7 21       		.uleb128 0x21
 3218 01f8 34       		.uleb128 0x34
 3219 01f9 00       		.byte	0
 3220 01fa 03       		.uleb128 0x3
 3221 01fb 0E       		.uleb128 0xe
 3222 01fc 3A       		.uleb128 0x3a
 3223 01fd 0B       		.uleb128 0xb
 3224 01fe 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccGefySF.s 			page 80


 3225 01ff 0B       		.uleb128 0xb
 3226 0200 49       		.uleb128 0x49
 3227 0201 13       		.uleb128 0x13
 3228 0202 3F       		.uleb128 0x3f
 3229 0203 0C       		.uleb128 0xc
 3230 0204 3C       		.uleb128 0x3c
 3231 0205 0C       		.uleb128 0xc
 3232 0206 00       		.byte	0
 3233 0207 00       		.byte	0
 3234 0208 22       		.uleb128 0x22
 3235 0209 21       		.uleb128 0x21
 3236 020a 00       		.byte	0
 3237 020b 00       		.byte	0
 3238 020c 00       		.byte	0
 3239 020d 23       		.uleb128 0x23
 3240 020e 34       		.uleb128 0x34
 3241 020f 00       		.byte	0
 3242 0210 03       		.uleb128 0x3
 3243 0211 0E       		.uleb128 0xe
 3244 0212 3A       		.uleb128 0x3a
 3245 0213 0B       		.uleb128 0xb
 3246 0214 3B       		.uleb128 0x3b
 3247 0215 0B       		.uleb128 0xb
 3248 0216 49       		.uleb128 0x49
 3249 0217 13       		.uleb128 0x13
 3250 0218 3F       		.uleb128 0x3f
 3251 0219 0C       		.uleb128 0xc
 3252 021a 02       		.uleb128 0x2
 3253 021b 0A       		.uleb128 0xa
 3254 021c 00       		.byte	0
 3255 021d 00       		.byte	0
 3256 021e 00       		.byte	0
 3257              		.section	.debug_loc,"",%progbits
 3258              	.Ldebug_loc0:
 3259              	.LLST0:
 3260 0000 00000000 		.4byte	.LFB11
 3261 0004 02000000 		.4byte	.LCFI0
 3262 0008 0200     		.2byte	0x2
 3263 000a 7D       		.byte	0x7d
 3264 000b 00       		.sleb128 0
 3265 000c 02000000 		.4byte	.LCFI0
 3266 0010 2C000000 		.4byte	.LFE11
 3267 0014 0200     		.2byte	0x2
 3268 0016 7D       		.byte	0x7d
 3269 0017 08       		.sleb128 8
 3270 0018 00000000 		.4byte	0
 3271 001c 00000000 		.4byte	0
 3272              	.LLST1:
 3273 0020 00000000 		.4byte	.LFB16
 3274 0024 02000000 		.4byte	.LCFI1
 3275 0028 0200     		.2byte	0x2
 3276 002a 7D       		.byte	0x7d
 3277 002b 00       		.sleb128 0
 3278 002c 02000000 		.4byte	.LCFI1
 3279 0030 04000000 		.4byte	.LCFI2
 3280 0034 0200     		.2byte	0x2
 3281 0036 7D       		.byte	0x7d
ARM GAS  /tmp/ccGefySF.s 			page 81


 3282 0037 0C       		.sleb128 12
 3283 0038 04000000 		.4byte	.LCFI2
 3284 003c EC000000 		.4byte	.LFE16
 3285 0040 0200     		.2byte	0x2
 3286 0042 7D       		.byte	0x7d
 3287 0043 18       		.sleb128 24
 3288 0044 00000000 		.4byte	0
 3289 0048 00000000 		.4byte	0
 3290              	.LLST2:
 3291 004c 00000000 		.4byte	.LFB20
 3292 0050 02000000 		.4byte	.LCFI3
 3293 0054 0200     		.2byte	0x2
 3294 0056 7D       		.byte	0x7d
 3295 0057 00       		.sleb128 0
 3296 0058 02000000 		.4byte	.LCFI3
 3297 005c 0C010000 		.4byte	.LFE20
 3298 0060 0200     		.2byte	0x2
 3299 0062 7D       		.byte	0x7d
 3300 0063 10       		.sleb128 16
 3301 0064 00000000 		.4byte	0
 3302 0068 00000000 		.4byte	0
 3303              	.LLST3:
 3304 006c 00000000 		.4byte	.LFB21
 3305 0070 02000000 		.4byte	.LCFI4
 3306 0074 0200     		.2byte	0x2
 3307 0076 7D       		.byte	0x7d
 3308 0077 00       		.sleb128 0
 3309 0078 02000000 		.4byte	.LCFI4
 3310 007c 04000000 		.4byte	.LCFI5
 3311 0080 0200     		.2byte	0x2
 3312 0082 7D       		.byte	0x7d
 3313 0083 04       		.sleb128 4
 3314 0084 04000000 		.4byte	.LCFI5
 3315 0088 60000000 		.4byte	.LFE21
 3316 008c 0200     		.2byte	0x2
 3317 008e 7D       		.byte	0x7d
 3318 008f 18       		.sleb128 24
 3319 0090 00000000 		.4byte	0
 3320 0094 00000000 		.4byte	0
 3321              	.LLST4:
 3322 0098 00000000 		.4byte	.LFB22
 3323 009c 02000000 		.4byte	.LCFI6
 3324 00a0 0200     		.2byte	0x2
 3325 00a2 7D       		.byte	0x7d
 3326 00a3 00       		.sleb128 0
 3327 00a4 02000000 		.4byte	.LCFI6
 3328 00a8 18010000 		.4byte	.LFE22
 3329 00ac 0200     		.2byte	0x2
 3330 00ae 7D       		.byte	0x7d
 3331 00af 08       		.sleb128 8
 3332 00b0 00000000 		.4byte	0
 3333 00b4 00000000 		.4byte	0
 3334              	.LLST5:
 3335 00b8 00000000 		.4byte	.LFB23
 3336 00bc 02000000 		.4byte	.LCFI7
 3337 00c0 0200     		.2byte	0x2
 3338 00c2 7D       		.byte	0x7d
ARM GAS  /tmp/ccGefySF.s 			page 82


 3339 00c3 00       		.sleb128 0
 3340 00c4 02000000 		.4byte	.LCFI7
 3341 00c8 C4000000 		.4byte	.LFE23
 3342 00cc 0200     		.2byte	0x2
 3343 00ce 7D       		.byte	0x7d
 3344 00cf 08       		.sleb128 8
 3345 00d0 00000000 		.4byte	0
 3346 00d4 00000000 		.4byte	0
 3347              	.LLST6:
 3348 00d8 00000000 		.4byte	.LFB24
 3349 00dc 02000000 		.4byte	.LCFI8
 3350 00e0 0200     		.2byte	0x2
 3351 00e2 7D       		.byte	0x7d
 3352 00e3 00       		.sleb128 0
 3353 00e4 02000000 		.4byte	.LCFI8
 3354 00e8 04000000 		.4byte	.LCFI9
 3355 00ec 0200     		.2byte	0x2
 3356 00ee 7D       		.byte	0x7d
 3357 00ef 04       		.sleb128 4
 3358 00f0 04000000 		.4byte	.LCFI9
 3359 00f4 2C000000 		.4byte	.LFE24
 3360 00f8 0200     		.2byte	0x2
 3361 00fa 7D       		.byte	0x7d
 3362 00fb 18       		.sleb128 24
 3363 00fc 00000000 		.4byte	0
 3364 0100 00000000 		.4byte	0
 3365              	.LLST7:
 3366 0104 00000000 		.4byte	.LFB25
 3367 0108 02000000 		.4byte	.LCFI10
 3368 010c 0200     		.2byte	0x2
 3369 010e 7D       		.byte	0x7d
 3370 010f 00       		.sleb128 0
 3371 0110 02000000 		.4byte	.LCFI10
 3372 0114 04000000 		.4byte	.LCFI11
 3373 0118 0200     		.2byte	0x2
 3374 011a 7D       		.byte	0x7d
 3375 011b 04       		.sleb128 4
 3376 011c 04000000 		.4byte	.LCFI11
 3377 0120 60000000 		.4byte	.LFE25
 3378 0124 0200     		.2byte	0x2
 3379 0126 7D       		.byte	0x7d
 3380 0127 10       		.sleb128 16
 3381 0128 00000000 		.4byte	0
 3382 012c 00000000 		.4byte	0
 3383              	.LLST8:
 3384 0130 00000000 		.4byte	.LFB26
 3385 0134 02000000 		.4byte	.LCFI12
 3386 0138 0200     		.2byte	0x2
 3387 013a 7D       		.byte	0x7d
 3388 013b 00       		.sleb128 0
 3389 013c 02000000 		.4byte	.LCFI12
 3390 0140 04000000 		.4byte	.LCFI13
 3391 0144 0200     		.2byte	0x2
 3392 0146 7D       		.byte	0x7d
 3393 0147 04       		.sleb128 4
 3394 0148 04000000 		.4byte	.LCFI13
 3395 014c 1E000000 		.4byte	.LFE26
ARM GAS  /tmp/ccGefySF.s 			page 83


 3396 0150 0200     		.2byte	0x2
 3397 0152 7D       		.byte	0x7d
 3398 0153 10       		.sleb128 16
 3399 0154 00000000 		.4byte	0
 3400 0158 00000000 		.4byte	0
 3401              	.LLST9:
 3402 015c 00000000 		.4byte	.LFB27
 3403 0160 02000000 		.4byte	.LCFI14
 3404 0164 0200     		.2byte	0x2
 3405 0166 7D       		.byte	0x7d
 3406 0167 00       		.sleb128 0
 3407 0168 02000000 		.4byte	.LCFI14
 3408 016c 04000000 		.4byte	.LCFI15
 3409 0170 0200     		.2byte	0x2
 3410 0172 7D       		.byte	0x7d
 3411 0173 04       		.sleb128 4
 3412 0174 04000000 		.4byte	.LCFI15
 3413 0178 60000000 		.4byte	.LFE27
 3414 017c 0200     		.2byte	0x2
 3415 017e 7D       		.byte	0x7d
 3416 017f 18       		.sleb128 24
 3417 0180 00000000 		.4byte	0
 3418 0184 00000000 		.4byte	0
 3419              	.LLST10:
 3420 0188 00000000 		.4byte	.LFB28
 3421 018c 02000000 		.4byte	.LCFI16
 3422 0190 0200     		.2byte	0x2
 3423 0192 7D       		.byte	0x7d
 3424 0193 00       		.sleb128 0
 3425 0194 02000000 		.4byte	.LCFI16
 3426 0198 04000000 		.4byte	.LCFI17
 3427 019c 0200     		.2byte	0x2
 3428 019e 7D       		.byte	0x7d
 3429 019f 04       		.sleb128 4
 3430 01a0 04000000 		.4byte	.LCFI17
 3431 01a4 2C000000 		.4byte	.LFE28
 3432 01a8 0200     		.2byte	0x2
 3433 01aa 7D       		.byte	0x7d
 3434 01ab 18       		.sleb128 24
 3435 01ac 00000000 		.4byte	0
 3436 01b0 00000000 		.4byte	0
 3437              	.LLST11:
 3438 01b4 00000000 		.4byte	.LFB29
 3439 01b8 02000000 		.4byte	.LCFI18
 3440 01bc 0200     		.2byte	0x2
 3441 01be 7D       		.byte	0x7d
 3442 01bf 00       		.sleb128 0
 3443 01c0 02000000 		.4byte	.LCFI18
 3444 01c4 04000000 		.4byte	.LCFI19
 3445 01c8 0200     		.2byte	0x2
 3446 01ca 7D       		.byte	0x7d
 3447 01cb 04       		.sleb128 4
 3448 01cc 04000000 		.4byte	.LCFI19
 3449 01d0 60000000 		.4byte	.LFE29
 3450 01d4 0200     		.2byte	0x2
 3451 01d6 7D       		.byte	0x7d
 3452 01d7 10       		.sleb128 16
ARM GAS  /tmp/ccGefySF.s 			page 84


 3453 01d8 00000000 		.4byte	0
 3454 01dc 00000000 		.4byte	0
 3455              	.LLST12:
 3456 01e0 00000000 		.4byte	.LFB30
 3457 01e4 02000000 		.4byte	.LCFI20
 3458 01e8 0200     		.2byte	0x2
 3459 01ea 7D       		.byte	0x7d
 3460 01eb 00       		.sleb128 0
 3461 01ec 02000000 		.4byte	.LCFI20
 3462 01f0 04000000 		.4byte	.LCFI21
 3463 01f4 0200     		.2byte	0x2
 3464 01f6 7D       		.byte	0x7d
 3465 01f7 04       		.sleb128 4
 3466 01f8 04000000 		.4byte	.LCFI21
 3467 01fc 1E000000 		.4byte	.LFE30
 3468 0200 0200     		.2byte	0x2
 3469 0202 7D       		.byte	0x7d
 3470 0203 10       		.sleb128 16
 3471 0204 00000000 		.4byte	0
 3472 0208 00000000 		.4byte	0
 3473              	.LLST13:
 3474 020c 00000000 		.4byte	.LFB31
 3475 0210 02000000 		.4byte	.LCFI22
 3476 0214 0200     		.2byte	0x2
 3477 0216 7D       		.byte	0x7d
 3478 0217 00       		.sleb128 0
 3479 0218 02000000 		.4byte	.LCFI22
 3480 021c 7C000000 		.4byte	.LFE31
 3481 0220 0200     		.2byte	0x2
 3482 0222 7D       		.byte	0x7d
 3483 0223 08       		.sleb128 8
 3484 0224 00000000 		.4byte	0
 3485 0228 00000000 		.4byte	0
 3486              	.LLST14:
 3487 022c 00000000 		.4byte	.LFB32
 3488 0230 02000000 		.4byte	.LCFI23
 3489 0234 0200     		.2byte	0x2
 3490 0236 7D       		.byte	0x7d
 3491 0237 00       		.sleb128 0
 3492 0238 02000000 		.4byte	.LCFI23
 3493 023c 7C000000 		.4byte	.LFE32
 3494 0240 0200     		.2byte	0x2
 3495 0242 7D       		.byte	0x7d
 3496 0243 08       		.sleb128 8
 3497 0244 00000000 		.4byte	0
 3498 0248 00000000 		.4byte	0
 3499              		.section	.debug_aranges,"",%progbits
 3500 0000 8C000000 		.4byte	0x8c
 3501 0004 0200     		.2byte	0x2
 3502 0006 00000000 		.4byte	.Ldebug_info0
 3503 000a 04       		.byte	0x4
 3504 000b 00       		.byte	0
 3505 000c 0000     		.2byte	0
 3506 000e 0000     		.2byte	0
 3507 0010 00000000 		.4byte	.LFB11
 3508 0014 2C000000 		.4byte	.LFE11-.LFB11
 3509 0018 00000000 		.4byte	.LFB16
ARM GAS  /tmp/ccGefySF.s 			page 85


 3510 001c EC000000 		.4byte	.LFE16-.LFB16
 3511 0020 00000000 		.4byte	.LFB20
 3512 0024 0C010000 		.4byte	.LFE20-.LFB20
 3513 0028 00000000 		.4byte	.LFB21
 3514 002c 60000000 		.4byte	.LFE21-.LFB21
 3515 0030 00000000 		.4byte	.LFB22
 3516 0034 18010000 		.4byte	.LFE22-.LFB22
 3517 0038 00000000 		.4byte	.LFB23
 3518 003c C4000000 		.4byte	.LFE23-.LFB23
 3519 0040 00000000 		.4byte	.LFB24
 3520 0044 2C000000 		.4byte	.LFE24-.LFB24
 3521 0048 00000000 		.4byte	.LFB25
 3522 004c 60000000 		.4byte	.LFE25-.LFB25
 3523 0050 00000000 		.4byte	.LFB26
 3524 0054 1E000000 		.4byte	.LFE26-.LFB26
 3525 0058 00000000 		.4byte	.LFB27
 3526 005c 60000000 		.4byte	.LFE27-.LFB27
 3527 0060 00000000 		.4byte	.LFB28
 3528 0064 2C000000 		.4byte	.LFE28-.LFB28
 3529 0068 00000000 		.4byte	.LFB29
 3530 006c 60000000 		.4byte	.LFE29-.LFB29
 3531 0070 00000000 		.4byte	.LFB30
 3532 0074 1E000000 		.4byte	.LFE30-.LFB30
 3533 0078 00000000 		.4byte	.LFB31
 3534 007c 7C000000 		.4byte	.LFE31-.LFB31
 3535 0080 00000000 		.4byte	.LFB32
 3536 0084 7C000000 		.4byte	.LFE32-.LFB32
 3537 0088 00000000 		.4byte	0
 3538 008c 00000000 		.4byte	0
 3539              		.section	.debug_ranges,"",%progbits
 3540              	.Ldebug_ranges0:
 3541 0000 00000000 		.4byte	.LFB11
 3542 0004 2C000000 		.4byte	.LFE11
 3543 0008 00000000 		.4byte	.LFB16
 3544 000c EC000000 		.4byte	.LFE16
 3545 0010 00000000 		.4byte	.LFB20
 3546 0014 0C010000 		.4byte	.LFE20
 3547 0018 00000000 		.4byte	.LFB21
 3548 001c 60000000 		.4byte	.LFE21
 3549 0020 00000000 		.4byte	.LFB22
 3550 0024 18010000 		.4byte	.LFE22
 3551 0028 00000000 		.4byte	.LFB23
 3552 002c C4000000 		.4byte	.LFE23
 3553 0030 00000000 		.4byte	.LFB24
 3554 0034 2C000000 		.4byte	.LFE24
 3555 0038 00000000 		.4byte	.LFB25
 3556 003c 60000000 		.4byte	.LFE25
 3557 0040 00000000 		.4byte	.LFB26
 3558 0044 1E000000 		.4byte	.LFE26
 3559 0048 00000000 		.4byte	.LFB27
 3560 004c 60000000 		.4byte	.LFE27
 3561 0050 00000000 		.4byte	.LFB28
 3562 0054 2C000000 		.4byte	.LFE28
 3563 0058 00000000 		.4byte	.LFB29
 3564 005c 60000000 		.4byte	.LFE29
 3565 0060 00000000 		.4byte	.LFB30
 3566 0064 1E000000 		.4byte	.LFE30
ARM GAS  /tmp/ccGefySF.s 			page 86


 3567 0068 00000000 		.4byte	.LFB31
 3568 006c 7C000000 		.4byte	.LFE31
 3569 0070 00000000 		.4byte	.LFB32
 3570 0074 7C000000 		.4byte	.LFE32
 3571 0078 00000000 		.4byte	0
 3572 007c 00000000 		.4byte	0
 3573              		.section	.debug_line,"",%progbits
 3574              	.Ldebug_line0:
 3575 0000 D1020000 		.section	.debug_str,"MS",%progbits,1
 3575      02000B01 
 3575      00000201 
 3575      FB0E0D00 
 3575      01010101 
 3576              	.LASF78:
 3577 0000 41504231 		.ascii	"APB1ENR\000"
 3577      454E5200 
 3578              	.LASF12:
 3579 0008 45585449 		.ascii	"EXTI4_15_IRQn\000"
 3579      345F3135 
 3579      5F495251 
 3579      6E00
 3580              	.LASF70:
 3581 0016 42535252 		.ascii	"BSRR\000"
 3581      00
 3582              	.LASF126:
 3583 001b 70747832 		.ascii	"ptx2_pckt_index\000"
 3583      5F70636B 
 3583      745F696E 
 3583      64657800 
 3584              	.LASF11:
 3585 002b 45585449 		.ascii	"EXTI2_3_IRQn\000"
 3585      325F335F 
 3585      4952516E 
 3585      00
 3586              	.LASF74:
 3587 0038 41504232 		.ascii	"APB2RSTR\000"
 3587      52535452 
 3587      00
 3588              	.LASF2:
 3589 0041 5356435F 		.ascii	"SVC_IRQn\000"
 3589      4952516E 
 3589      00
 3590              	.LASF110:
 3591 004a 52656164 		.ascii	"ReadUsart2Buffer\000"
 3591      55736172 
 3591      74324275 
 3591      66666572 
 3591      00
 3592              	.LASF112:
 3593 005b 55736172 		.ascii	"Usart1SendUnsigned\000"
 3593      74315365 
 3593      6E64556E 
 3593      7369676E 
 3593      656400
 3594              	.LASF91:
 3595 006e 4E564943 		.ascii	"NVIC_SetPriority\000"
 3595      5F536574 
ARM GAS  /tmp/ccGefySF.s 			page 87


 3595      5072696F 
 3595      72697479 
 3595      00
 3596              	.LASF45:
 3597 007f 756E7369 		.ascii	"unsigned int\000"
 3597      676E6564 
 3597      20696E74 
 3597      00
 3598              	.LASF25:
 3599 008c 54494D31 		.ascii	"TIM16_IRQn\000"
 3599      365F4952 
 3599      516E00
 3600              	.LASF79:
 3601 0097 42444352 		.ascii	"BDCR\000"
 3601      00
 3602              	.LASF121:
 3603 009c 72783262 		.ascii	"rx2buff\000"
 3603      75666600 
 3604              	.LASF8:
 3605 00a4 464C4153 		.ascii	"FLASH_IRQn\000"
 3605      485F4952 
 3605      516E00
 3606              	.LASF101:
 3607 00af 64756D6D 		.ascii	"dummy\000"
 3607      7900
 3608              	.LASF122:
 3609 00b5 70747831 		.ascii	"ptx1\000"
 3609      00
 3610              	.LASF125:
 3611 00ba 70747832 		.ascii	"ptx2\000"
 3611      00
 3612              	.LASF120:
 3613 00bf 74783262 		.ascii	"tx2buff\000"
 3613      75666600 
 3614              	.LASF10:
 3615 00c7 45585449 		.ascii	"EXTI0_1_IRQn\000"
 3615      305F315F 
 3615      4952516E 
 3615      00
 3616              	.LASF27:
 3617 00d4 49324331 		.ascii	"I2C1_IRQn\000"
 3617      5F495251 
 3617      6E00
 3618              	.LASF3:
 3619 00de 50656E64 		.ascii	"PendSV_IRQn\000"
 3619      53565F49 
 3619      52516E00 
 3620              	.LASF9:
 3621 00ea 5243435F 		.ascii	"RCC_IRQn\000"
 3621      4952516E 
 3621      00
 3622              	.LASF84:
 3623 00f3 47545052 		.ascii	"GTPR\000"
 3623      00
 3624              	.LASF105:
 3625 00f8 73656E64 		.ascii	"send\000"
 3625      00
ARM GAS  /tmp/ccGefySF.s 			page 88


 3626              	.LASF47:
 3627 00fd 75696E74 		.ascii	"uint32_t\000"
 3627      33325F74 
 3627      00
 3628              	.LASF80:
 3629 0106 41484252 		.ascii	"AHBRSTR\000"
 3629      53545200 
 3630              	.LASF48:
 3631 010e 49534552 		.ascii	"ISER\000"
 3631      00
 3632              	.LASF51:
 3633 0113 52534552 		.ascii	"RSERVED1\000"
 3633      56454431 
 3633      00
 3634              	.LASF29:
 3635 011c 53504931 		.ascii	"SPI1_IRQn\000"
 3635      5F495251 
 3635      6E00
 3636              	.LASF90:
 3637 0126 4E564943 		.ascii	"NVIC_EnableIRQ\000"
 3637      5F456E61 
 3637      626C6549 
 3637      525100
 3638              	.LASF44:
 3639 0135 6C6F6E67 		.ascii	"long long unsigned int\000"
 3639      206C6F6E 
 3639      6720756E 
 3639      7369676E 
 3639      65642069 
 3640              	.LASF94:
 3641 014c 6E65775F 		.ascii	"new_mode\000"
 3641      6D6F6465 
 3641      00
 3642              	.LASF115:
 3643 0155 55534152 		.ascii	"USART1Config\000"
 3643      5431436F 
 3643      6E666967 
 3643      00
 3644              	.LASF64:
 3645 0162 44465352 		.ascii	"DFSR\000"
 3645      00
 3646              	.LASF114:
 3647 0167 55534152 		.ascii	"USART2Config\000"
 3647      5432436F 
 3647      6E666967 
 3647      00
 3648              	.LASF38:
 3649 0174 5F5F7569 		.ascii	"__uint16_t\000"
 3649      6E743136 
 3649      5F7400
 3650              	.LASF131:
 3651 017f 7372632F 		.ascii	"src/uart.c\000"
 3651      75617274 
 3651      2E6300
 3652              	.LASF66:
 3653 018a 4D4F4445 		.ascii	"MODER\000"
 3653      5200
ARM GAS  /tmp/ccGefySF.s 			page 89


 3654              	.LASF37:
 3655 0190 4952516E 		.ascii	"IRQn_Type\000"
 3655      5F547970 
 3655      6500
 3656              	.LASF124:
 3657 019a 70727831 		.ascii	"prx1\000"
 3657      00
 3658              	.LASF32:
 3659 019f 55534152 		.ascii	"USART2_IRQn\000"
 3659      54325F49 
 3659      52516E00 
 3660              	.LASF59:
 3661 01ab 43505549 		.ascii	"CPUID\000"
 3661      4400
 3662              	.LASF83:
 3663 01b1 5243435F 		.ascii	"RCC_TypeDef\000"
 3663      54797065 
 3663      44656600 
 3664              	.LASF96:
 3665 01bd 74656D70 		.ascii	"temp_gpio\000"
 3665      5F677069 
 3665      6F00
 3666              	.LASF87:
 3667 01c7 55534152 		.ascii	"USART_TypeDef\000"
 3667      545F5479 
 3667      70654465 
 3667      6600
 3668              	.LASF117:
 3669 01d5 75736172 		.ascii	"usart1_have_data\000"
 3669      74315F68 
 3669      6176655F 
 3669      64617461 
 3669      00
 3670              	.LASF69:
 3671 01e6 50555044 		.ascii	"PUPDR\000"
 3671      5200
 3672              	.LASF75:
 3673 01ec 41504231 		.ascii	"APB1RSTR\000"
 3673      52535452 
 3673      00
 3674              	.LASF89:
 3675 01f5 63686172 		.ascii	"char\000"
 3675      00
 3676              	.LASF61:
 3677 01fa 41495243 		.ascii	"AIRCR\000"
 3677      5200
 3678              	.LASF21:
 3679 0200 54494D33 		.ascii	"TIM3_IRQn\000"
 3679      5F495251 
 3679      6E00
 3680              	.LASF14:
 3681 020a 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 3681      5F436861 
 3681      6E6E656C 
 3681      315F4952 
 3681      516E00
 3682              	.LASF76:
ARM GAS  /tmp/ccGefySF.s 			page 90


 3683 021d 41484245 		.ascii	"AHBENR\000"
 3683      4E5200
 3684              	.LASF119:
 3685 0224 72783162 		.ascii	"rx1buff\000"
 3685      75666600 
 3686              	.LASF24:
 3687 022c 54494D31 		.ascii	"TIM15_IRQn\000"
 3687      355F4952 
 3687      516E00
 3688              	.LASF85:
 3689 0237 52544F52 		.ascii	"RTOR\000"
 3689      00
 3690              	.LASF127:
 3691 023c 70727832 		.ascii	"prx2\000"
 3691      00
 3692              	.LASF118:
 3693 0241 74783162 		.ascii	"tx1buff\000"
 3693      75666600 
 3694              	.LASF97:
 3695 0249 55736172 		.ascii	"Usart1Mode\000"
 3695      74314D6F 
 3695      646500
 3696              	.LASF43:
 3697 0254 6C6F6E67 		.ascii	"long long int\000"
 3697      206C6F6E 
 3697      6720696E 
 3697      7400
 3698              	.LASF5:
 3699 0262 57574447 		.ascii	"WWDG_IRQn\000"
 3699      5F495251 
 3699      6E00
 3700              	.LASF63:
 3701 026c 53484353 		.ascii	"SHCSR\000"
 3701      5200
 3702              	.LASF116:
 3703 0272 75736172 		.ascii	"usart1_mini_timeout\000"
 3703      74315F6D 
 3703      696E695F 
 3703      74696D65 
 3703      6F757400 
 3704              	.LASF98:
 3705 0286 52656164 		.ascii	"ReadUsart1Buffer\000"
 3705      55736172 
 3705      74314275 
 3705      66666572 
 3705      00
 3706              	.LASF13:
 3707 0297 54535F49 		.ascii	"TS_IRQn\000"
 3707      52516E00 
 3708              	.LASF18:
 3709 029f 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 3709      5F42524B 
 3709      5F55505F 
 3709      5452475F 
 3709      434F4D5F 
 3710              	.LASF107:
 3711 02b8 73697A65 		.ascii	"size\000"
ARM GAS  /tmp/ccGefySF.s 			page 91


 3711      00
 3712              	.LASF100:
 3713 02bd 6D61785F 		.ascii	"max_len\000"
 3713      6C656E00 
 3714              	.LASF6:
 3715 02c5 5056445F 		.ascii	"PVD_IRQn\000"
 3715      4952516E 
 3715      00
 3716              	.LASF81:
 3717 02ce 43464752 		.ascii	"CFGR2\000"
 3717      3200
 3718              	.LASF82:
 3719 02d4 43464752 		.ascii	"CFGR3\000"
 3719      3300
 3720              	.LASF54:
 3721 02da 49435052 		.ascii	"ICPR\000"
 3721      00
 3722              	.LASF17:
 3723 02df 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 3723      5F434F4D 
 3723      505F4952 
 3723      516E00
 3724              	.LASF77:
 3725 02ee 41504232 		.ascii	"APB2ENR\000"
 3725      454E5200 
 3726              	.LASF106:
 3727 02f6 55736172 		.ascii	"Usart2SendUnsigned\000"
 3727      74325365 
 3727      6E64556E 
 3727      7369676E 
 3727      656400
 3728              	.LASF95:
 3729 0309 74656D70 		.ascii	"temp_int\000"
 3729      5F696E74 
 3729      00
 3730              	.LASF108:
 3731 0312 55736172 		.ascii	"Usart2SendSingle\000"
 3731      74325365 
 3731      6E645369 
 3731      6E676C65 
 3731      00
 3732              	.LASF68:
 3733 0323 4F535045 		.ascii	"OSPEEDR\000"
 3733      45445200 
 3734              	.LASF111:
 3735 032b 55736172 		.ascii	"Usart1Send\000"
 3735      74315365 
 3735      6E6400
 3736              	.LASF88:
 3737 0336 6C6F6E67 		.ascii	"long double\000"
 3737      20646F75 
 3737      626C6500 
 3738              	.LASF46:
 3739 0342 75696E74 		.ascii	"uint16_t\000"
 3739      31365F74 
 3739      00
 3740              	.LASF92:
ARM GAS  /tmp/ccGefySF.s 			page 92


 3741 034b 4952516E 		.ascii	"IRQn\000"
 3741      00
 3742              	.LASF102:
 3743 0350 55534152 		.ascii	"USART1_IRQHandler\000"
 3743      54315F49 
 3743      52514861 
 3743      6E646C65 
 3743      7200
 3744              	.LASF128:
 3745 0362 70636B74 		.ascii	"pckt_gps_ready\000"
 3745      5F677073 
 3745      5F726561 
 3745      647900
 3746              	.LASF7:
 3747 0371 5254435F 		.ascii	"RTC_IRQn\000"
 3747      4952516E 
 3747      00
 3748              	.LASF49:
 3749 037a 52455345 		.ascii	"RESERVED0\000"
 3749      52564544 
 3749      3000
 3750              	.LASF62:
 3751 0384 52455345 		.ascii	"RESERVED1\000"
 3751      52564544 
 3751      3100
 3752              	.LASF53:
 3753 038e 52455345 		.ascii	"RESERVED2\000"
 3753      52564544 
 3753      3200
 3754              	.LASF55:
 3755 0398 52455345 		.ascii	"RESERVED3\000"
 3755      52564544 
 3755      3300
 3756              	.LASF56:
 3757 03a2 52455345 		.ascii	"RESERVED4\000"
 3757      52564544 
 3757      3400
 3758              	.LASF86:
 3759 03ac 52455345 		.ascii	"RESERVED5\000"
 3759      52564544 
 3759      3500
 3760              	.LASF36:
 3761 03b6 73686F72 		.ascii	"short int\000"
 3761      7420696E 
 3761      7400
 3762              	.LASF40:
 3763 03c0 6C6F6E67 		.ascii	"long int\000"
 3763      20696E74 
 3763      00
 3764              	.LASF31:
 3765 03c9 55534152 		.ascii	"USART1_IRQn\000"
 3765      54315F49 
 3765      52516E00 
 3766              	.LASF0:
 3767 03d5 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 3767      61736B61 
 3767      626C6549 
ARM GAS  /tmp/ccGefySF.s 			page 93


 3767      6E745F49 
 3767      52516E00 
 3768              	.LASF123:
 3769 03e9 70747831 		.ascii	"ptx1_pckt_index\000"
 3769      5F70636B 
 3769      745F696E 
 3769      64657800 
 3770              	.LASF93:
 3771 03f9 7072696F 		.ascii	"priority\000"
 3771      72697479 
 3771      00
 3772              	.LASF19:
 3773 0402 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 3773      5F43435F 
 3773      4952516E 
 3773      00
 3774              	.LASF67:
 3775 040f 4F545950 		.ascii	"OTYPER\000"
 3775      455200
 3776              	.LASF73:
 3777 0416 43464752 		.ascii	"CFGR\000"
 3777      00
 3778              	.LASF26:
 3779 041b 54494D31 		.ascii	"TIM17_IRQn\000"
 3779      375F4952 
 3779      516E00
 3780              	.LASF16:
 3781 0426 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 3781      5F436861 
 3781      6E6E656C 
 3781      345F355F 
 3781      4952516E 
 3782              	.LASF58:
 3783 043b 4E564943 		.ascii	"NVIC_Type\000"
 3783      5F547970 
 3783      6500
 3784              	.LASF65:
 3785 0445 5343425F 		.ascii	"SCB_Type\000"
 3785      54797065 
 3785      00
 3786              	.LASF113:
 3787 044e 55736172 		.ascii	"Usart1SendSingle\000"
 3787      74315365 
 3787      6E645369 
 3787      6E676C65 
 3787      00
 3788              	.LASF72:
 3789 045f 4750494F 		.ascii	"GPIO_TypeDef\000"
 3789      5F547970 
 3789      65446566 
 3789      00
 3790              	.LASF129:
 3791 046c 75736172 		.ascii	"usart_mode\000"
 3791      745F6D6F 
 3791      646500
 3792              	.LASF4:
 3793 0477 53797354 		.ascii	"SysTick_IRQn\000"
ARM GAS  /tmp/ccGefySF.s 			page 94


 3793      69636B5F 
 3793      4952516E 
 3793      00
 3794              	.LASF33:
 3795 0484 4345435F 		.ascii	"CEC_IRQn\000"
 3795      4952516E 
 3795      00
 3796              	.LASF57:
 3797 048d 73697A65 		.ascii	"sizetype\000"
 3797      74797065 
 3797      00
 3798              	.LASF60:
 3799 0496 49435352 		.ascii	"ICSR\000"
 3799      00
 3800              	.LASF28:
 3801 049b 49324332 		.ascii	"I2C2_IRQn\000"
 3801      5F495251 
 3801      6E00
 3802              	.LASF42:
 3803 04a5 6C6F6E67 		.ascii	"long unsigned int\000"
 3803      20756E73 
 3803      69676E65 
 3803      6420696E 
 3803      7400
 3804              	.LASF20:
 3805 04b7 54494D32 		.ascii	"TIM2_IRQn\000"
 3805      5F495251 
 3805      6E00
 3806              	.LASF109:
 3807 04c1 746F7365 		.ascii	"tosend\000"
 3807      6E6400
 3808              	.LASF132:
 3809 04c8 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 3809      652F6D65 
 3809      642F446F 
 3809      63756D65 
 3809      6E74732F 
 3810 04fb 6100     		.ascii	"a\000"
 3811              	.LASF23:
 3812 04fd 54494D31 		.ascii	"TIM14_IRQn\000"
 3812      345F4952 
 3812      516E00
 3813              	.LASF15:
 3814 0508 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 3814      5F436861 
 3814      6E6E656C 
 3814      325F335F 
 3814      4952516E 
 3815              	.LASF22:
 3816 051d 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 3816      5F444143 
 3816      5F495251 
 3816      6E00
 3817              	.LASF34:
 3818 052b 756E7369 		.ascii	"unsigned char\000"
 3818      676E6564 
 3818      20636861 
ARM GAS  /tmp/ccGefySF.s 			page 95


 3818      7200
 3819              	.LASF41:
 3820 0539 5F5F7569 		.ascii	"__uint32_t\000"
 3820      6E743332 
 3820      5F7400
 3821              	.LASF104:
 3822 0544 55736172 		.ascii	"Usart2Send\000"
 3822      74325365 
 3822      6E6400
 3823              	.LASF50:
 3824 054f 49434552 		.ascii	"ICER\000"
 3824      00
 3825              	.LASF30:
 3826 0554 53504932 		.ascii	"SPI2_IRQn\000"
 3826      5F495251 
 3826      6E00
 3827              	.LASF35:
 3828 055e 7369676E 		.ascii	"signed char\000"
 3828      65642063 
 3828      68617200 
 3829              	.LASF39:
 3830 056a 73686F72 		.ascii	"short unsigned int\000"
 3830      7420756E 
 3830      7369676E 
 3830      65642069 
 3830      6E7400
 3831              	.LASF130:
 3832 057d 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 3832      43313120 
 3832      352E322E 
 3832      31203230 
 3832      31353132 
 3833 05b0 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 3833      20726576 
 3833      6973696F 
 3833      6E203233 
 3833      31383438 
 3834 05e3 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 3834      662D3220 
 3834      2D4F3020 
 3834      2D666F6D 
 3834      69742D66 
 3835 0616 66756E63 		.ascii	"function-sections\000"
 3835      74696F6E 
 3835      2D736563 
 3835      74696F6E 
 3835      7300
 3836              	.LASF99:
 3837 0628 626F7574 		.ascii	"bout\000"
 3837      00
 3838              	.LASF1:
 3839 062d 48617264 		.ascii	"HardFault_IRQn\000"
 3839      4661756C 
 3839      745F4952 
 3839      516E00
 3840              	.LASF52:
 3841 063c 49535052 		.ascii	"ISPR\000"
ARM GAS  /tmp/ccGefySF.s 			page 96


 3841      00
 3842              	.LASF103:
 3843 0641 55534152 		.ascii	"USART2_IRQHandler\000"
 3843      54325F49 
 3843      52514861 
 3843      6E646C65 
 3843      7200
 3844              	.LASF71:
 3845 0653 4C434B52 		.ascii	"LCKR\000"
 3845      00
 3846              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccGefySF.s 			page 97


DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
     /tmp/ccGefySF.s:55     .text.NVIC_EnableIRQ:00000000 $t
     /tmp/ccGefySF.s:59     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
     /tmp/ccGefySF.s:91     .text.NVIC_EnableIRQ:00000028 $d
     /tmp/ccGefySF.s:96     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccGefySF.s:100    .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccGefySF.s:240    .text.NVIC_SetPriority:000000e4 $d
                            *COM*:00000004 ptx1
                            *COM*:00000004 ptx1_pckt_index
                            *COM*:00000004 prx1
                            *COM*:00000004 ptx2
                            *COM*:00000004 ptx2_pckt_index
                            *COM*:00000004 prx2
     /tmp/ccGefySF.s:255    .bss.pckt_gps_ready:00000000 pckt_gps_ready
     /tmp/ccGefySF.s:256    .bss.pckt_gps_ready:00000000 $d
     /tmp/ccGefySF.s:261    .data.usart_mode:00000000 usart_mode
     /tmp/ccGefySF.s:264    .text.Usart1Mode:00000000 $t
     /tmp/ccGefySF.s:269    .text.Usart1Mode:00000000 Usart1Mode
     /tmp/ccGefySF.s:431    .text.Usart1Mode:000000f4 $d
     /tmp/ccGefySF.s:441    .text.ReadUsart1Buffer:00000000 $t
     /tmp/ccGefySF.s:446    .text.ReadUsart1Buffer:00000000 ReadUsart1Buffer
     /tmp/ccGefySF.s:511    .text.ReadUsart1Buffer:00000058 $d
     /tmp/ccGefySF.s:517    .text.USART1_IRQHandler:00000000 $t
     /tmp/ccGefySF.s:522    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/ccGefySF.s:683    .text.USART1_IRQHandler:000000f0 $d
     /tmp/ccGefySF.s:697    .text.USART2_IRQHandler:00000000 $t
     /tmp/ccGefySF.s:702    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
     /tmp/ccGefySF.s:822    .text.USART2_IRQHandler:000000b0 $d
     /tmp/ccGefySF.s:831    .text.Usart2Send:00000000 $t
     /tmp/ccGefySF.s:836    .text.Usart2Send:00000000 Usart2Send
     /tmp/ccGefySF.s:878    .text.Usart2SendUnsigned:00000000 Usart2SendUnsigned
     /tmp/ccGefySF.s:873    .text.Usart2SendUnsigned:00000000 $t
     /tmp/ccGefySF.s:938    .text.Usart2SendUnsigned:00000054 $d
     /tmp/ccGefySF.s:945    .text.Usart2SendSingle:00000000 $t
     /tmp/ccGefySF.s:950    .text.Usart2SendSingle:00000000 Usart2SendSingle
     /tmp/ccGefySF.s:980    .text.ReadUsart2Buffer:00000000 $t
     /tmp/ccGefySF.s:985    .text.ReadUsart2Buffer:00000000 ReadUsart2Buffer
     /tmp/ccGefySF.s:1050   .text.ReadUsart2Buffer:00000058 $d
     /tmp/ccGefySF.s:1056   .text.Usart1Send:00000000 $t
     /tmp/ccGefySF.s:1061   .text.Usart1Send:00000000 Usart1Send
     /tmp/ccGefySF.s:1103   .text.Usart1SendUnsigned:00000000 Usart1SendUnsigned
     /tmp/ccGefySF.s:1098   .text.Usart1SendUnsigned:00000000 $t
     /tmp/ccGefySF.s:1163   .text.Usart1SendUnsigned:00000054 $d
     /tmp/ccGefySF.s:1170   .text.Usart1SendSingle:00000000 $t
     /tmp/ccGefySF.s:1175   .text.Usart1SendSingle:00000000 Usart1SendSingle
     /tmp/ccGefySF.s:1205   .text.USART2Config:00000000 $t
     /tmp/ccGefySF.s:1210   .text.USART2Config:00000000 USART2Config
     /tmp/ccGefySF.s:1280   .text.USART2Config:00000060 $d
     /tmp/ccGefySF.s:1291   .text.USART1Config:00000000 $t
     /tmp/ccGefySF.s:1296   .text.USART1Config:00000000 USART1Config
     /tmp/ccGefySF.s:1362   .text.USART1Config:00000058 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcpy
rx1buff
ARM GAS  /tmp/ccGefySF.s 			page 98


usart1_have_data
usart1_mini_timeout
tx1buff
tx2buff
strlen
rx2buff
