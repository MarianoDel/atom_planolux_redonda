ARM GAS  /tmp/ccC0Akiw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccC0Akiw.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccC0Akiw.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccC0Akiw.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccC0Akiw.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccC0Akiw.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccC0Akiw.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccC0Akiw.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccC0Akiw.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccC0Akiw.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccC0Akiw.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccC0Akiw.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccC0Akiw.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccC0Akiw.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccC0Akiw.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccC0Akiw.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccC0Akiw.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccC0Akiw.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7159,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7160, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7161, D.7160
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7161, D.7161
  92 0026 083B     		subs	r3, r3, #8	@ D.7161,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7161, D.7161,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7159,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7160, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7161, D.7160
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7161, D.7161
 101 0038 083B     		subs	r3, r3, #8	@ D.7161,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7161, D.7161,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7159, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7161, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7160, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7161, D.7160
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7161, D.7161
 114 0052 D200     		lsls	r2, r2, #3	@ D.7161, D.7161,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7162, D.7162, D.7161
 117 0058 0200     		movs	r2, r0	@ D.7162, D.7162
 118 005a D243     		mvns	r2, r2	@ D.7162, D.7162
 119 005c 1A40     		ands	r2, r3	@ D.7161, D.7161
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7161, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7161, D.7161
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7160, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7161, D.7160
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7161, D.7161
ARM GAS  /tmp/ccC0Akiw.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7161, D.7161,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7161, D.7161, D.7161
 133 0076 0300     		movs	r3, r0	@ D.7161, D.7161
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7161, D.7161
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7161,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7159, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7161, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7163,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7161, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7161, D.7161
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7161, D.7161,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7163,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7161, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7161, D.7161
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7161, D.7161,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7161, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7160, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7161, D.7160
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7161, D.7161
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7161, D.7161,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7162, D.7162, D.7161
 169 00b6 0100     		movs	r1, r0	@ D.7162, D.7162
 170 00b8 C943     		mvns	r1, r1	@ D.7162, D.7162
 171 00ba 1140     		ands	r1, r2	@ D.7161, D.7161
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7161, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7161, D.7161
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7160, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7161, D.7160
ARM GAS  /tmp/ccC0Akiw.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7161, D.7161
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7161, D.7161,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7161, D.7161, D.7161
 185 00d4 0200     		movs	r2, r0	@ D.7161, D.7161
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7161, D.7161
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7161, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccC0Akiw.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7164,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7165,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7166, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7166,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7166, _6->LOAD
ARM GAS  /tmp/ccC0Akiw.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7165,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7165,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7164,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	show_select_timer
 273              		.section	.bss.show_select_timer,"aw",%nobits
 274              		.align	1
 275              		.type	show_select_timer, %object
 276              		.size	show_select_timer, 2
 277              	show_select_timer:
 278 0000 0000     		.space	2
 279              		.global	switches_timer
 280              		.section	.bss.switches_timer,"aw",%nobits
 281              		.type	switches_timer, %object
 282              		.size	switches_timer, 1
 283              	switches_timer:
 284 0000 00       		.space	1
 285              		.global	acswitch_timer
 286              		.section	.bss.acswitch_timer,"aw",%nobits
 287              		.type	acswitch_timer, %object
ARM GAS  /tmp/ccC0Akiw.s 			page 23


 288              		.size	acswitch_timer, 1
 289              	acswitch_timer:
 290 0000 00       		.space	1
 291              		.global	scroll1_timer
 292              		.section	.bss.scroll1_timer,"aw",%nobits
 293              		.align	1
 294              		.type	scroll1_timer, %object
 295              		.size	scroll1_timer, 2
 296              	scroll1_timer:
 297 0000 0000     		.space	2
 298              		.global	scroll2_timer
 299              		.section	.bss.scroll2_timer,"aw",%nobits
 300              		.align	1
 301              		.type	scroll2_timer, %object
 302              		.size	scroll2_timer, 2
 303              	scroll2_timer:
 304 0000 0000     		.space	2
 305              		.comm	standalone_timer,2,2
 306              		.comm	standalone_enable_menu_timer,2,2
 307              		.comm	grouped_master_timeout_timer,1,1
 308              		.global	take_temp_sample
 309              		.section	.bss.take_temp_sample,"aw",%nobits
 310              		.align	1
 311              		.type	take_temp_sample, %object
 312              		.size	take_temp_sample, 2
 313              	take_temp_sample:
 314 0000 0000     		.space	2
 315              		.global	timer_wifi_bright
 316              		.section	.bss.timer_wifi_bright,"aw",%nobits
 317              		.type	timer_wifi_bright, %object
 318              		.size	timer_wifi_bright, 1
 319              	timer_wifi_bright:
 320 0000 00       		.space	1
 321              		.global	timer_relay
 322              		.section	.bss.timer_relay,"aw",%nobits
 323              		.align	1
 324              		.type	timer_relay, %object
 325              		.size	timer_relay, 2
 326              	timer_relay:
 327 0000 0000     		.space	2
 328              		.comm	tt_take_photo_sample,2,2
 329              		.comm	tt_relay_on_off,2,2
 330              		.comm	saved_mode,1,1
 331              		.comm	s1,2,2
 332              		.comm	s2,2,2
 333              		.comm	sac,2,2
 334              		.comm	sac_aux,1,1
 335              		.comm	adc_ch,6,4
 336              		.global	seq_ready
 337              		.section	.bss.seq_ready,"aw",%nobits
 338              		.type	seq_ready, %object
 339              		.size	seq_ready, 1
 340              	seq_ready:
 341 0000 00       		.space	1
 342              		.comm	zero_current,2,2
 343              		.comm	usart1_mini_timeout,1,1
 344              		.comm	usart1_pckt_ready,1,1
ARM GAS  /tmp/ccC0Akiw.s 			page 24


 345              		.comm	usart1_have_data,1,1
 346              		.comm	usart1_pckt_bytes,1,1
 347              		.comm	usart2_mini_timeout,1,1
 348              		.comm	usart2_pckt_ready,1,1
 349              		.comm	usart2_have_data,1,1
 350              		.comm	usart2_pckt_bytes,1,1
 351              		.comm	param_struct,12,4
 352              		.global	power_2secs_acum
 353              		.section	.bss.power_2secs_acum,"aw",%nobits
 354              		.align	2
 355              		.type	power_2secs_acum, %object
 356              		.size	power_2secs_acum, 4
 357              	power_2secs_acum:
 358 0000 00000000 		.space	4
 359              		.global	power_2secs_index
 360              		.section	.bss.power_2secs_index,"aw",%nobits
 361              		.type	power_2secs_index, %object
 362              		.size	power_2secs_index, 1
 363              	power_2secs_index:
 364 0000 00       		.space	1
 365              		.global	power_minutes
 366              		.section	.bss.power_minutes,"aw",%nobits
 367              		.align	1
 368              		.type	power_minutes, %object
 369              		.size	power_minutes, 2
 370              	power_minutes:
 371 0000 0000     		.space	2
 372              		.global	power_minutes_index
 373              		.section	.bss.power_minutes_index,"aw",%nobits
 374              		.type	power_minutes_index, %object
 375              		.size	power_minutes_index, 1
 376              	power_minutes_index:
 377 0000 00       		.space	1
 378              		.global	power_hours
 379              		.section	.bss.power_hours,"aw",%nobits
 380              		.align	1
 381              		.type	power_hours, %object
 382              		.size	power_hours, 2
 383              	power_hours:
 384 0000 0000     		.space	2
 385              		.comm	gsmNUM,20,4
 386              		.comm	gsmMSG,180,4
 387              		.global	wait_ms_var
 388              		.section	.bss.wait_ms_var,"aw",%nobits
 389              		.align	1
 390              		.type	wait_ms_var, %object
 391              		.size	wait_ms_var, 2
 392              	wait_ms_var:
 393 0000 0000     		.space	2
 394              		.comm	timer_standby,2,2
 395              		.comm	tcp_kalive_timer,2,2
 396              		.comm	filter_timer,1,1
 397              		.global	secs
 398              		.section	.bss.secs,"aw",%nobits
 399              		.align	1
 400              		.type	secs, %object
 401              		.size	secs, 2
ARM GAS  /tmp/ccC0Akiw.s 			page 25


 402              	secs:
 403 0000 0000     		.space	2
 404              		.global	hours
 405              		.section	.bss.hours,"aw",%nobits
 406              		.type	hours, %object
 407              		.size	hours, 1
 408              	hours:
 409 0000 00       		.space	1
 410              		.global	minutes
 411              		.section	.bss.minutes,"aw",%nobits
 412              		.type	minutes, %object
 413              		.size	minutes, 1
 414              	minutes:
 415 0000 00       		.space	1
 416              		.comm	power_vect,20,4
 417              		.comm	vtemp,34,4
 418              		.comm	vpote,34,4
 419              		.section	.rodata
 420              		.align	2
 421              	.LC0:
 422 0000 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 422      726E6F20 
 422      506C6163 
 422      61205265 
 422      646F6E64 
 423 0025 000000   		.align	2
 424              	.LC2:
 425 0028 20204665 		.ascii	"  Features:\015\012\000"
 425      61747572 
 425      65733A0D 
 425      0A00
 426 0036 0000     		.align	2
 427              	.LC4:
 428 0038 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 428      6D6D6572 
 428      20312074 
 428      6F203130 
 428      560D0A00 
 429              		.align	2
 430              	.LC6:
 431 004c 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 431      67687420 
 431      48797374 
 431      65726573 
 431      69730D0A 
 432 0061 000000   		.align	2
 433              	.LC8:
 434 0064 20205379 		.ascii	"  Sync by ADC\015\012\000"
 434      6E632062 
 434      79204144 
 434      430D0A00 
 435              		.align	2
 436              	.LC10:
 437 0074 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 437      65732047 
 437      534D2066 
 437      6F722053 
ARM GAS  /tmp/ccC0Akiw.s 			page 26


 437      4D532064 
 438 008e 0000     		.align	2
 439              	.LC15:
 440 0090 47657474 		.ascii	"Getted\015\012\000"
 440      65640D0A 
 440      00
 441 0099 000000   		.align	2
 442              	.LC17:
 443 009c 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 443      696E6720 
 443      47534D20 
 443      53746172 
 443      74757020 
 444              		.global	__aeabi_ui2f
 445              		.global	__aeabi_i2d
 446              		.global	__aeabi_dmul
 447              		.global	__aeabi_d2f
 448              		.global	__aeabi_f2uiz
 449              		.global	__aeabi_i2f
 450              		.global	__aeabi_fsub
 451              		.global	__aeabi_fmul
 452 00c3 00       		.align	2
 453              	.LC24:
 454 00c4 703A2025 		.ascii	"p: %3d.%02d d: %d\015\012\000"
 454      33642E25 
 454      30326420 
 454      643A2025 
 454      640D0A00 
 455              		.align	2
 456              	.LC29:
 457 00d8 4C6C616D 		.ascii	"Llamadas Listas!\015\012\000"
 457      61646173 
 457      204C6973 
 457      74617321 
 457      0D0A00
 458 00eb 00       		.align	2
 459              	.LC31:
 460 00ec 534D5320 		.ascii	"SMS Listo!\015\012\000"
 460      4C697374 
 460      6F210D0A 
 460      00
 461 00f9 000000   		.align	2
 462              	.LC33:
 463 00fc 31313435 		.ascii	"1145376762\000"
 463      33373637 
 463      363200
 464 0107 00       		.align	2
 465              	.LC35:
 466 0108 486F6C61 		.ascii	"Hola\000"
 466      00
 467              		.section	.text.main,"ax",%progbits
 468              		.align	2
 469              		.global	main
 470              		.code	16
 471              		.thumb_func
 472              		.type	main, %function
 473              	main:
ARM GAS  /tmp/ccC0Akiw.s 			page 27


 474              	.LFB20:
 475              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
ARM GAS  /tmp/ccC0Akiw.s 			page 28


  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** //volatile unsigned short prog_timer = 0;
  72:src/main.c    **** //volatile unsigned short mainmenu_timer = 0;
  73:src/main.c    **** volatile unsigned short show_select_timer = 0;
  74:src/main.c    **** volatile unsigned char switches_timer = 0;
  75:src/main.c    **** volatile unsigned char acswitch_timer = 0;
  76:src/main.c    **** 
  77:src/main.c    **** volatile unsigned short scroll1_timer = 0;
  78:src/main.c    **** volatile unsigned short scroll2_timer = 0;
  79:src/main.c    **** 
  80:src/main.c    **** volatile unsigned short standalone_timer;
  81:src/main.c    **** volatile unsigned short standalone_enable_menu_timer;
  82:src/main.c    **** //volatile unsigned short standalone_menu_timer;
  83:src/main.c    **** volatile unsigned char grouped_master_timeout_timer;
  84:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  85:src/main.c    **** volatile unsigned char timer_wifi_bright = 0;
  86:src/main.c    **** 
  87:src/main.c    **** #ifdef USE_REDONDA_BASIC
  88:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  89:src/main.c    **** 
  90:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  91:src/main.c    **** volatile unsigned short tt_relay_on_off;
  92:src/main.c    **** #endif
  93:src/main.c    **** 
  94:src/main.c    **** 
  95:src/main.c    **** unsigned char saved_mode;
  96:src/main.c    **** 
  97:src/main.c    **** 
  98:src/main.c    **** // ------- Externals de los switches -------
  99:src/main.c    **** unsigned short s1;
 100:src/main.c    **** unsigned short s2;
 101:src/main.c    **** unsigned short sac;
 102:src/main.c    **** unsigned char sac_aux;
 103:src/main.c    **** 
 104:src/main.c    **** // ------- Externals de los switches -------
 105:src/main.c    **** #ifdef ADC_WITH_INT
 106:src/main.c    **** volatile unsigned short adc_ch[3];
 107:src/main.c    **** volatile unsigned char seq_ready = 0;
 108:src/main.c    **** unsigned short zero_current;
 109:src/main.c    **** #endif
 110:src/main.c    **** 
 111:src/main.c    **** // ------- Externals del GPS & GSM -------
 112:src/main.c    **** volatile unsigned char usart1_mini_timeout;
ARM GAS  /tmp/ccC0Akiw.s 			page 29


 113:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 114:src/main.c    **** volatile unsigned char usart1_have_data;
 115:src/main.c    **** unsigned char usart1_pckt_bytes;
 116:src/main.c    **** 
 117:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 118:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 119:src/main.c    **** #define gps_have_data		usart1_have_data
 120:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 121:src/main.c    **** 
 122:src/main.c    **** #ifdef USE_GPS
 123:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 124:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 125:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 126:src/main.c    **** volatile unsigned char usart2_have_data;
 127:src/main.c    **** unsigned char usart2_pckt_bytes;
 128:src/main.c    **** 
 129:src/main.c    **** #endif
 130:src/main.c    **** 
 131:src/main.c    **** // ------- Externals del GSM -------
 132:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 133:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 134:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 135:src/main.c    **** #define gsm_have_data		usart1_have_data
 136:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 137:src/main.c    **** 
 138:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 139:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 140:src/main.c    **** volatile unsigned char usart2_have_data;
 141:src/main.c    **** unsigned char usart2_pckt_bytes;
 142:src/main.c    **** 
 143:src/main.c    **** //unsigned char AlertasReportar[5] = {0,0,0,0,0};
 144:src/main.c    **** //unsigned char ActDact = 0;
 145:src/main.c    **** //unsigned char claveAct[5] = {0,0,0,0,0};
 146:src/main.c    **** //volatile char USERCODE[8] = "123456";
 147:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 148:src/main.c    **** #endif
 149:src/main.c    **** 
 150:src/main.c    **** //--- VARIABLES GLOBALES ---//
 151:src/main.c    **** parameters_typedef param_struct;
 152:src/main.c    **** 
 153:src/main.c    **** //para las mediciones
 154:src/main.c    **** unsigned int power_2secs_acum = 0;
 155:src/main.c    **** unsigned char power_2secs_index = 0;
 156:src/main.c    **** unsigned short power_minutes = 0;
 157:src/main.c    **** unsigned char power_minutes_index = 0;
 158:src/main.c    **** unsigned short power_hours = 0;
 159:src/main.c    **** 
 160:src/main.c    **** //para los msjs GSM
 161:src/main.c    **** char gsmNUM [20];
 162:src/main.c    **** char gsmMSG [180];
 163:src/main.c    **** 
 164:src/main.c    **** 
 165:src/main.c    **** 
 166:src/main.c    **** 
 167:src/main.c    **** 
 168:src/main.c    **** 
 169:src/main.c    **** // ------- de los timers -------
ARM GAS  /tmp/ccC0Akiw.s 			page 30


 170:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 171:src/main.c    **** volatile unsigned short timer_standby;
 172:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 173:src/main.c    **** //volatile unsigned char display_timer;
 174:src/main.c    **** volatile unsigned char filter_timer;
 175:src/main.c    **** 
 176:src/main.c    **** //volatile unsigned char door_filter;
 177:src/main.c    **** //volatile unsigned char take_sample;
 178:src/main.c    **** //volatile unsigned char move_relay;
 179:src/main.c    **** volatile unsigned short secs = 0;
 180:src/main.c    **** volatile unsigned char hours = 0;
 181:src/main.c    **** volatile unsigned char minutes = 0;
 182:src/main.c    **** 
 183:src/main.c    **** #define SIZEOF_POWER_VECT		10
 184:src/main.c    **** 
 185:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 186:src/main.c    **** 
 187:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 188:src/main.c    **** void TimingDelay_Decrement(void);
 189:src/main.c    **** 
 190:src/main.c    **** // ------- del DMX -------
 191:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 192:src/main.c    **** #define DMX_TIMEOUT	20
 193:src/main.c    **** 
 194:src/main.c    **** //--- FILTROS DE SENSORES ---//
 195:src/main.c    **** #define LARGO_FILTRO 16
 196:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 197:src/main.c    **** //#define LARGO_FILTRO 32
 198:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 199:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 200:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 201:src/main.c    **** 
 202:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 203:src/main.c    **** 
 204:src/main.c    **** // #define KW			0.009721
 205:src/main.c    **** // #define KW			0.00945
 206:src/main.c    **** // #define KW			0.00959
 207:src/main.c    **** #define KW			0.01013
 208:src/main.c    **** 
 209:src/main.c    **** 
 210:src/main.c    **** //-------------------------------------------//
 211:src/main.c    **** // @brief  Main program.
 212:src/main.c    **** // @param  None
 213:src/main.c    **** // @retval None
 214:src/main.c    **** //------------------------------------------//
 215:src/main.c    **** int main(void)
 216:src/main.c    **** {
 476              		.loc 2 216 0
 477              		.cfi_startproc
 478 0000 30B5     		push	{r4, r5, lr}	@
 479              	.LCFI4:
 480              		.cfi_def_cfa_offset 12
 481              		.cfi_offset 4, -12
 482              		.cfi_offset 5, -8
 483              		.cfi_offset 14, -4
 484 0002 91B0     		sub	sp, sp, #68	@,,
 485              	.LCFI5:
ARM GAS  /tmp/ccC0Akiw.s 			page 31


 486              		.cfi_def_cfa_offset 80
 217:src/main.c    **** 	unsigned char i, ii;
 218:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 487              		.loc 2 218 0
 488 0004 3523     		movs	r3, #53	@ tmp181,
 489 0006 6B44     		add	r3, r3, sp	@ tmp181,
 490 0008 0022     		movs	r2, #0	@ tmp182,
 491 000a 1A70     		strb	r2, [r3]	@ tmp183, need_ack
 219:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 492              		.loc 2 219 0
 493 000c 0DAB     		add	r3, sp, #52	@ tmp184,,
 494 000e 0022     		movs	r2, #0	@ tmp185,
 495 0010 1A70     		strb	r2, [r3]	@ tmp186, resp
 220:src/main.c    **** 	unsigned short power_int, power_dec;
 221:src/main.c    **** 	unsigned short power;
 222:src/main.c    **** 	float fcalc = 1.0;
 496              		.loc 2 222 0
 497 0012 FE23     		movs	r3, #254	@ tmp187,
 498 0014 9B05     		lsls	r3, r3, #22	@ tmp187, tmp187,
 499 0016 0C93     		str	r3, [sp, #48]	@ tmp187, fcalc
 223:src/main.c    **** 	unsigned int zero_current_loc = 0;
 500              		.loc 2 223 0
 501 0018 0023     		movs	r3, #0	@ tmp188,
 502 001a 0E93     		str	r3, [sp, #56]	@ tmp188, zero_current_loc
 224:src/main.c    **** 
 225:src/main.c    **** #ifdef USE_REDONDA_BASIC
 226:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 503              		.loc 2 226 0
 504 001c 3723     		movs	r3, #55	@ tmp189,
 505 001e 6B44     		add	r3, r3, sp	@ tmp189,
 506 0020 0022     		movs	r2, #0	@ tmp190,
 507 0022 1A70     		strb	r2, [r3]	@ tmp191, main_state
 227:src/main.c    **** 	unsigned char sended = 0;
 508              		.loc 2 227 0
 509 0024 3623     		movs	r3, #54	@ tmp192,
 510 0026 6B44     		add	r3, r3, sp	@ tmp192,
 511 0028 0022     		movs	r2, #0	@ tmp193,
 512 002a 1A70     		strb	r2, [r3]	@ tmp194, sended
 228:src/main.c    **** #ifdef WITH_HYST
 229:src/main.c    **** 	unsigned short hyst;
 230:src/main.c    **** #endif
 231:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 232:src/main.c    **** 	unsigned char one_to_ten;
 233:src/main.c    **** #endif
 234:src/main.c    **** 
 235:src/main.c    **** #else		//USE_REDONDA_BASIC
 236:src/main.c    **** 	unsigned char main_state = 0;
 237:src/main.c    **** #endif
 238:src/main.c    **** 	char s_lcd [20];
 239:src/main.c    **** 	enum TcpMessages tcp_msg = NONE_MSG;
 513              		.loc 2 239 0
 514 002c 2F23     		movs	r3, #47	@ tmp195,
 515 002e 6B44     		add	r3, r3, sp	@ tmp195,
 516 0030 0022     		movs	r2, #0	@ tmp196,
 517 0032 1A70     		strb	r2, [r3]	@ tmp197, tcp_msg
 240:src/main.c    **** 	unsigned char new_room = 0;
 518              		.loc 2 240 0
ARM GAS  /tmp/ccC0Akiw.s 			page 32


 519 0034 2E23     		movs	r3, #46	@ tmp198,
 520 0036 6B44     		add	r3, r3, sp	@ tmp198,
 521 0038 0022     		movs	r2, #0	@ tmp199,
 522 003a 1A70     		strb	r2, [r3]	@ tmp200, new_room
 241:src/main.c    **** 	unsigned char new_lamp = 0;
 523              		.loc 2 241 0
 524 003c 2D23     		movs	r3, #45	@ tmp201,
 525 003e 6B44     		add	r3, r3, sp	@ tmp201,
 526 0040 0022     		movs	r2, #0	@ tmp202,
 527 0042 1A70     		strb	r2, [r3]	@ tmp203, new_lamp
 242:src/main.c    **** 	unsigned char last_bright = 0;
 528              		.loc 2 242 0
 529 0044 0BAB     		add	r3, sp, #44	@ tmp204,,
 530 0046 0022     		movs	r2, #0	@ tmp205,
 531 0048 1A70     		strb	r2, [r3]	@ tmp206, last_bright
 243:src/main.c    **** 	unsigned char show_ldr = 0;
 532              		.loc 2 243 0
 533 004a 2B23     		movs	r3, #43	@ tmp207,
 534 004c 6B44     		add	r3, r3, sp	@ tmp207,
 535 004e 0022     		movs	r2, #0	@ tmp208,
 536 0050 1A70     		strb	r2, [r3]	@ tmp209, show_ldr
 244:src/main.c    **** 	int dummy_resp = 0;
 537              		.loc 2 244 0
 538 0052 0023     		movs	r3, #0	@ tmp210,
 539 0054 0993     		str	r3, [sp, #36]	@ tmp210, dummy_resp
 245:src/main.c    **** 	unsigned char pps_one = 0;
 540              		.loc 2 245 0
 541 0056 2323     		movs	r3, #35	@ tmp211,
 542 0058 6B44     		add	r3, r3, sp	@ tmp211,
 543 005a 0022     		movs	r2, #0	@ tmp212,
 544 005c 1A70     		strb	r2, [r3]	@ tmp213, pps_one
 246:src/main.c    **** 
 247:src/main.c    **** #ifdef USE_PROD_PROGRAM
 248:src/main.c    **** 	unsigned char jump_the_menu = 0;
 249:src/main.c    **** #endif
 250:src/main.c    **** 	parameters_typedef * p_mem_init;
 251:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 252:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 253:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 254:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 255:src/main.c    ****     //   system_stm32f0xx.c file
 256:src/main.c    **** 
 257:src/main.c    **** 	//GPIO Configuration.
 258:src/main.c    **** 	GPIO_Config();
 545              		.loc 2 258 0
 546 005e FFF7FEFF 		bl	GPIO_Config	@
 259:src/main.c    **** 
 260:src/main.c    **** 
 261:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 262:src/main.c    **** 	if (SysTick_Config(48000))
 547              		.loc 2 262 0
 548 0062 974B     		ldr	r3, .L47	@ tmp214,
 549 0064 1800     		movs	r0, r3	@, tmp214
 550 0066 FFF7FEFF 		bl	SysTick_Config	@
 551 006a 031E     		subs	r3, r0, #0	@ D.7167,,
 552 006c 28D0     		beq	.L13	@,
 553              	.L18:
ARM GAS  /tmp/ccC0Akiw.s 			page 33


 263:src/main.c    **** 	{
 264:src/main.c    **** 		while (1)	/* Capture error */
 265:src/main.c    **** 		{
 266:src/main.c    **** 			if (LED)
 554              		.loc 2 266 0
 555 006e 9023     		movs	r3, #144	@ tmp455,
 556 0070 DB05     		lsls	r3, r3, #23	@ D.7168, tmp455,
 557 0072 9B8A     		ldrh	r3, [r3, #20]	@ tmp216,
 558 0074 9BB2     		uxth	r3, r3	@ D.7169, tmp216
 559 0076 1A00     		movs	r2, r3	@ D.7170, D.7169
 560 0078 8023     		movs	r3, #128	@ tmp456,
 561 007a 5B01     		lsls	r3, r3, #5	@ tmp217, tmp456,
 562 007c 1340     		ands	r3, r2	@ D.7170, D.7170
 563 007e 05D0     		beq	.L14	@,
 267:src/main.c    **** 				LED_OFF;
 564              		.loc 2 267 0
 565 0080 9023     		movs	r3, #144	@ tmp453,
 566 0082 DB05     		lsls	r3, r3, #23	@ D.7168, tmp453,
 567 0084 8022     		movs	r2, #128	@ tmp454,
 568 0086 5205     		lsls	r2, r2, #21	@ tmp218, tmp454,
 569 0088 9A61     		str	r2, [r3, #24]	@ tmp218, _60->BSRR
 570 008a 04E0     		b	.L15	@
 571              	.L14:
 268:src/main.c    **** 			else
 269:src/main.c    **** 				LED_ON;
 572              		.loc 2 269 0
 573 008c 9023     		movs	r3, #144	@ tmp451,
 574 008e DB05     		lsls	r3, r3, #23	@ D.7168, tmp451,
 575 0090 8022     		movs	r2, #128	@ tmp452,
 576 0092 5201     		lsls	r2, r2, #5	@ tmp219, tmp452,
 577 0094 9A61     		str	r2, [r3, #24]	@ tmp219, _62->BSRR
 578              	.L15:
 270:src/main.c    **** 
 271:src/main.c    **** 			for (i = 0; i < 255; i++)
 579              		.loc 2 271 0
 580 0096 3F23     		movs	r3, #63	@ tmp220,
 581 0098 6B44     		add	r3, r3, sp	@ tmp220,
 582 009a 0022     		movs	r2, #0	@ tmp221,
 583 009c 1A70     		strb	r2, [r3]	@ tmp222, i
 584 009e 09E0     		b	.L16	@
 585              	.L17:
 272:src/main.c    **** 			{
 273:src/main.c    **** 				asm (	"nop \n\t"
 586              		.loc 2 273 0 discriminator 3
 587              		.syntax divided
 588              	@ 273 "src/main.c" 1
 589 00a0 C046     		nop 
 590 00a2 C046     		nop 
 591 00a4 C046     		nop 
 592              		
 593              	@ 0 "" 2
 271:src/main.c    **** 			{
 594              		.loc 2 271 0 discriminator 3
 595              		.thumb
 596              		.syntax unified
 597 00a6 3F23     		movs	r3, #63	@ tmp223,
 598 00a8 6B44     		add	r3, r3, sp	@ tmp223,
ARM GAS  /tmp/ccC0Akiw.s 			page 34


 599 00aa 1A78     		ldrb	r2, [r3]	@ D.7171, i
 600 00ac 3F23     		movs	r3, #63	@ tmp224,
 601 00ae 6B44     		add	r3, r3, sp	@ tmp224,
 602 00b0 0132     		adds	r2, r2, #1	@ tmp225,
 603 00b2 1A70     		strb	r2, [r3]	@ tmp226, i
 604              	.L16:
 271:src/main.c    **** 			{
 605              		.loc 2 271 0 is_stmt 0 discriminator 1
 606 00b4 3F23     		movs	r3, #63	@ tmp227,
 607 00b6 6B44     		add	r3, r3, sp	@ tmp227,
 608 00b8 1B78     		ldrb	r3, [r3]	@ tmp228, i
 609 00ba FF2B     		cmp	r3, #255	@ tmp228,
 610 00bc F0D1     		bne	.L17	@,
 274:src/main.c    **** 						"nop \n\t"
 275:src/main.c    **** 						"nop \n\t" );
 276:src/main.c    **** 			}
 277:src/main.c    **** 		}
 611              		.loc 2 277 0 is_stmt 1
 612 00be D6E7     		b	.L18	@
 613              	.L13:
 278:src/main.c    **** 	}
 279:src/main.c    **** 
 280:src/main.c    **** 
 281:src/main.c    **** 	//ADC Configuration
 282:src/main.c    **** //	AdcConfig();
 283:src/main.c    **** 
 284:src/main.c    **** 	//TIM Configuration.
 285:src/main.c    **** 	// TIM_3_Init();
 286:src/main.c    **** //	TIM_14_Init();
 287:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 288:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 289:src/main.c    **** 
 290:src/main.c    **** //	EXTIOff ();
 291:src/main.c    **** 
 292:src/main.c    **** 	// while (1)
 293:src/main.c    **** 	// {
 294:src/main.c    **** 	// 	// if (SYNCP)
 295:src/main.c    **** 	// 	// {
 296:src/main.c    **** 	// 	// 	SYNCP_OFF;
 297:src/main.c    **** 	// 	// 	LED_OFF;
 298:src/main.c    **** 	// 	// }
 299:src/main.c    **** 	// 	// else
 300:src/main.c    **** 	// 	// {
 301:src/main.c    **** 	// 	// 	SYNCP_ON;
 302:src/main.c    **** 	// 	// 	LED_ON;
 303:src/main.c    **** 	// 	// }
 304:src/main.c    **** 	// 	// Wait_ms(10);
 305:src/main.c    **** 	//
 306:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 307:src/main.c    **** 	// 	// {
 308:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 309:src/main.c    **** 	// 	// 	Wait_ms (10);
 310:src/main.c    **** 	// 	// }
 311:src/main.c    **** 	// }
 312:src/main.c    **** 
 313:src/main.c    **** //		while (1)
 314:src/main.c    **** //		{
ARM GAS  /tmp/ccC0Akiw.s 			page 35


 315:src/main.c    **** //			PIN3_OFF;
 316:src/main.c    **** //			Wait_ms (10);
 317:src/main.c    **** //			PIN3_ON;
 318:src/main.c    **** //			Wait_ms (10);
 319:src/main.c    **** //		}
 320:src/main.c    **** 
 321:src/main.c    **** 	//--- Welcome code ---//
 322:src/main.c    **** 	LED_OFF;
 614              		.loc 2 322 0
 615 00c0 9023     		movs	r3, #144	@ tmp445,
 616 00c2 DB05     		lsls	r3, r3, #23	@ D.7168, tmp445,
 617 00c4 8022     		movs	r2, #128	@ tmp446,
 618 00c6 5205     		lsls	r2, r2, #21	@ tmp229, tmp446,
 619 00c8 9A61     		str	r2, [r3, #24]	@ tmp229, _67->BSRR
 323:src/main.c    **** //	EN_GPS_OFF;
 324:src/main.c    **** 	EN_GPS_ON;
 620              		.loc 2 324 0
 621 00ca 9023     		movs	r3, #144	@ tmp447,
 622 00cc DB05     		lsls	r3, r3, #23	@ D.7168, tmp447,
 623 00ce 8022     		movs	r2, #128	@ tmp448,
 624 00d0 1202     		lsls	r2, r2, #8	@ tmp230, tmp448,
 625 00d2 9A61     		str	r2, [r3, #24]	@ tmp230, _69->BSRR
 325:src/main.c    **** 	//RELAY_ON;
 326:src/main.c    **** 	RELAY_OFF;
 626              		.loc 2 326 0
 627 00d4 9023     		movs	r3, #144	@ tmp449,
 628 00d6 DB05     		lsls	r3, r3, #23	@ D.7168, tmp449,
 629 00d8 8022     		movs	r2, #128	@ tmp450,
 630 00da 1205     		lsls	r2, r2, #20	@ tmp231, tmp450,
 631 00dc 9A61     		str	r2, [r3, #24]	@ tmp231, _71->BSRR
 327:src/main.c    **** 
 328:src/main.c    **** 	USART1Config();
 632              		.loc 2 328 0
 633 00de FFF7FEFF 		bl	USART1Config	@
 329:src/main.c    **** 	USART2Config();
 634              		.loc 2 329 0
 635 00e2 FFF7FEFF 		bl	USART2Config	@
 330:src/main.c    **** 
 331:src/main.c    **** 	EXTIOff();
 636              		.loc 2 331 0
 637 00e6 FFF7FEFF 		bl	EXTIOff	@
 332:src/main.c    **** 
 333:src/main.c    **** 
 334:src/main.c    **** #ifdef USE_REDONDA_BASIC
 335:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 336:src/main.c    **** 	// USART1Config();
 337:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 638              		.loc 2 337 0
 639 00ea FFF7FEFF 		bl	AdcConfig	@
 338:src/main.c    **** 
 339:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 340:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 640              		.loc 2 340 0
 641 00ee FFF7FEFF 		bl	TIM_3_Init	@
 341:src/main.c    **** #endif
 342:src/main.c    **** 
 343:src/main.c    **** 	TIM_16_Init();					//o tuilizo para synchro de relay
ARM GAS  /tmp/ccC0Akiw.s 			page 36


 642              		.loc 2 343 0
 643 00f2 FFF7FEFF 		bl	TIM_16_Init	@
 344:src/main.c    **** 	TIM16Enable();
 644              		.loc 2 344 0
 645 00f6 FFF7FEFF 		bl	TIM16Enable	@
 345:src/main.c    **** 
 346:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 646              		.loc 2 346 0
 647 00fa 724B     		ldr	r3, .L47+4	@ tmp232,
 648 00fc 1800     		movs	r0, r3	@, tmp232
 649 00fe FFF7FEFF 		bl	Usart2Send	@
 347:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 650              		.loc 2 347 0
 651 0102 714B     		ldr	r3, .L47+8	@ tmp233,
 652 0104 1800     		movs	r0, r3	@, tmp233
 653 0106 FFF7FEFF 		bl	Usart2Send	@
 348:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 349:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 654              		.loc 2 349 0
 655 010a 704B     		ldr	r3, .L47+12	@ tmp234,
 656 010c 1800     		movs	r0, r3	@, tmp234
 657 010e FFF7FEFF 		bl	Usart2Send	@
 350:src/main.c    **** 	#endif
 351:src/main.c    **** 	#ifdef WITH_HYST
 352:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 658              		.loc 2 352 0
 659 0112 6F4B     		ldr	r3, .L47+16	@ tmp235,
 660 0114 1800     		movs	r0, r3	@, tmp235
 661 0116 FFF7FEFF 		bl	Usart2Send	@
 353:src/main.c    **** 	#endif
 354:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 355:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 356:src/main.c    **** 	#endif
 357:src/main.c    **** 	#ifdef USE_WITH_SYNC
 358:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 359:src/main.c    **** 	#else
 360:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 662              		.loc 2 360 0
 663 011a 6E4B     		ldr	r3, .L47+20	@ tmp236,
 664 011c 1800     		movs	r0, r3	@, tmp236
 665 011e FFF7FEFF 		bl	Usart2Send	@
 361:src/main.c    **** 	#endif
 362:src/main.c    **** 	#ifdef USE_GSM
 363:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 666              		.loc 2 363 0
 667 0122 6D4B     		ldr	r3, .L47+24	@ tmp237,
 668 0124 1800     		movs	r0, r3	@, tmp237
 669 0126 FFF7FEFF 		bl	Usart2Send	@
 364:src/main.c    **** 	#endif
 365:src/main.c    **** 
 366:src/main.c    **** 
 367:src/main.c    **** 
 368:src/main.c    **** 	for (i = 0; i < 8; i++)
 670              		.loc 2 368 0
 671 012a 3F23     		movs	r3, #63	@ tmp238,
 672 012c 6B44     		add	r3, r3, sp	@ tmp238,
 673 012e 0022     		movs	r2, #0	@ tmp239,
ARM GAS  /tmp/ccC0Akiw.s 			page 37


 674 0130 1A70     		strb	r2, [r3]	@ tmp240, i
 675 0132 1DE0     		b	.L19	@
 676              	.L22:
 369:src/main.c    **** 	{
 370:src/main.c    **** 		if (LED)
 677              		.loc 2 370 0
 678 0134 9023     		movs	r3, #144	@ tmp443,
 679 0136 DB05     		lsls	r3, r3, #23	@ D.7168, tmp443,
 680 0138 9B8A     		ldrh	r3, [r3, #20]	@ tmp242,
 681 013a 9BB2     		uxth	r3, r3	@ D.7169, tmp242
 682 013c 1A00     		movs	r2, r3	@ D.7170, D.7169
 683 013e 8023     		movs	r3, #128	@ tmp444,
 684 0140 5B01     		lsls	r3, r3, #5	@ tmp243, tmp444,
 685 0142 1340     		ands	r3, r2	@ D.7170, D.7170
 686 0144 05D0     		beq	.L20	@,
 371:src/main.c    **** 			LED_OFF;
 687              		.loc 2 371 0
 688 0146 9023     		movs	r3, #144	@ tmp441,
 689 0148 DB05     		lsls	r3, r3, #23	@ D.7168, tmp441,
 690 014a 8022     		movs	r2, #128	@ tmp442,
 691 014c 5205     		lsls	r2, r2, #21	@ tmp244, tmp442,
 692 014e 9A61     		str	r2, [r3, #24]	@ tmp244, _91->BSRR
 693 0150 04E0     		b	.L21	@
 694              	.L20:
 372:src/main.c    **** 		else
 373:src/main.c    **** 			LED_ON;
 695              		.loc 2 373 0
 696 0152 9023     		movs	r3, #144	@ tmp439,
 697 0154 DB05     		lsls	r3, r3, #23	@ D.7168, tmp439,
 698 0156 8022     		movs	r2, #128	@ tmp440,
 699 0158 5201     		lsls	r2, r2, #5	@ tmp245, tmp440,
 700 015a 9A61     		str	r2, [r3, #24]	@ tmp245, _93->BSRR
 701              	.L21:
 374:src/main.c    **** 
 375:src/main.c    **** 		Wait_ms (250);
 702              		.loc 2 375 0 discriminator 2
 703 015c FA20     		movs	r0, #250	@,
 704 015e FFF7FEFF 		bl	Wait_ms	@
 368:src/main.c    **** 	{
 705              		.loc 2 368 0 discriminator 2
 706 0162 3F23     		movs	r3, #63	@ tmp246,
 707 0164 6B44     		add	r3, r3, sp	@ tmp246,
 708 0166 1A78     		ldrb	r2, [r3]	@ D.7171, i
 709 0168 3F23     		movs	r3, #63	@ tmp247,
 710 016a 6B44     		add	r3, r3, sp	@ tmp247,
 711 016c 0132     		adds	r2, r2, #1	@ tmp248,
 712 016e 1A70     		strb	r2, [r3]	@ tmp249, i
 713              	.L19:
 368:src/main.c    **** 	{
 714              		.loc 2 368 0 is_stmt 0 discriminator 1
 715 0170 3F23     		movs	r3, #63	@ tmp250,
 716 0172 6B44     		add	r3, r3, sp	@ tmp250,
 717 0174 1B78     		ldrb	r3, [r3]	@ tmp251, i
 718 0176 072B     		cmp	r3, #7	@ tmp251,
 719 0178 DCD9     		bls	.L22	@,
 376:src/main.c    **** 	}
 377:src/main.c    **** 
ARM GAS  /tmp/ccC0Akiw.s 			page 38


 378:src/main.c    **** 	timer_standby = 2000;
 720              		.loc 2 378 0 is_stmt 1
 721 017a 584B     		ldr	r3, .L47+28	@ tmp252,
 722 017c FA22     		movs	r2, #250	@ tmp438,
 723 017e D200     		lsls	r2, r2, #3	@ tmp253, tmp438,
 724 0180 1A80     		strh	r2, [r3]	@ tmp254, timer_standby
 379:src/main.c    **** 	FuncsGSMReset();
 725              		.loc 2 379 0
 726 0182 FFF7FEFF 		bl	FuncsGSMReset	@
 380:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 727              		.loc 2 380 0
 728 0186 0220     		movs	r0, #2	@,
 729 0188 FFF7FEFF 		bl	Usart1Mode	@
 730              	.L42:
 381:src/main.c    **** 
 382:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 383:src/main.c    **** 	// while (1)
 384:src/main.c    **** 	// {
 385:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 386:src/main.c    **** 	// 	{
 387:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 388:src/main.c    **** 	// 		Wait_ms(10);
 389:src/main.c    **** 	// 	}
 390:src/main.c    **** 	//
 391:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 392:src/main.c    **** 	// 	{
 393:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 394:src/main.c    **** 	// 		Wait_ms(10);
 395:src/main.c    **** 	// 	}
 396:src/main.c    **** 	// }
 397:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 398:src/main.c    **** 
 399:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 400:src/main.c    **** 	// i = 0;
 401:src/main.c    **** 	// while (1)
 402:src/main.c    **** 	// {
 403:src/main.c    **** 	// 	switch (i)
 404:src/main.c    **** 	// 	{
 405:src/main.c    **** 	// 		case 0:
 406:src/main.c    **** 	// 			RelayOn();
 407:src/main.c    **** 	// 			timer_standby = 50;
 408:src/main.c    **** 	// 			LED_ON;
 409:src/main.c    **** 	// 			i++;
 410:src/main.c    **** 	// 			break;
 411:src/main.c    **** 	//
 412:src/main.c    **** 	// 		case 1:
 413:src/main.c    **** 	// 			if (!timer_standby)
 414:src/main.c    **** 	// 			{
 415:src/main.c    **** 	// 				RelayOff();
 416:src/main.c    **** 	// 				LED_OFF;
 417:src/main.c    **** 	// 				i++;
 418:src/main.c    **** 	// 				timer_standby = 10000;
 419:src/main.c    **** 	// 			}
 420:src/main.c    **** 	// 			break;
 421:src/main.c    **** 	//
 422:src/main.c    **** 	// 		case 2:
 423:src/main.c    **** 	// 			if (!timer_standby)
ARM GAS  /tmp/ccC0Akiw.s 			page 39


 424:src/main.c    **** 	// 			{
 425:src/main.c    **** 	// 				i = 0;
 426:src/main.c    **** 	// 			}
 427:src/main.c    **** 	// 			break;
 428:src/main.c    **** 	// 	}
 429:src/main.c    **** 	//
 430:src/main.c    **** 	// 	UpdateRelay ();
 431:src/main.c    **** 	// }
 432:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 433:src/main.c    **** 
 434:src/main.c    **** 
 435:src/main.c    **** //--- Programa de pruebas I meas -----
 436:src/main.c    **** 	while (1)
 437:src/main.c    **** 	{
 438:src/main.c    **** 		switch (main_state)
 731              		.loc 2 438 0
 732 018c 3723     		movs	r3, #55	@ tmp255,
 733 018e 6B44     		add	r3, r3, sp	@ tmp255,
 734 0190 1B78     		ldrb	r3, [r3]	@ D.7170, main_state
 735 0192 072B     		cmp	r3, #7	@ D.7170,
 736 0194 00D9     		bls	.LCB424	@
 737 0196 84E1     		b	.L23	@long jump	@
 738              	.LCB424:
 739 0198 9A00     		lsls	r2, r3, #2	@ tmp256, D.7170,
 740 019a 514B     		ldr	r3, .L47+32	@ tmp258,
 741 019c D318     		adds	r3, r2, r3	@ tmp257, tmp256, tmp258
 742 019e 1B68     		ldr	r3, [r3]	@ tmp259,
 743 01a0 9F46     		mov	pc, r3	@ tmp259
 744              		.section	.rodata.main,"a",%progbits
 745              		.align	2
 746              	.L25:
 747 0000 A2010000 		.word	.L24
 748 0004 C4010000 		.word	.L26
 749 0008 FC010000 		.word	.L27
 750 000c AC040000 		.word	.L43
 751 0010 A2040000 		.word	.L23
 752 0014 A2040000 		.word	.L23
 753 0018 A2040000 		.word	.L23
 754 001c 72020000 		.word	.L29
 755              		.section	.text.main
 756              	.L24:
 439:src/main.c    **** 		{
 440:src/main.c    **** 			case MAIN_INIT:
 441:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 757              		.loc 2 441 0
 758 01a2 0A20     		movs	r0, #10	@,
 759 01a4 FFF7FEFF 		bl	Update_TIM3_CH1	@
 442:src/main.c    **** 				main_state = SYNCHRO_ADC;
 760              		.loc 2 442 0
 761 01a8 3723     		movs	r3, #55	@ tmp260,
 762 01aa 6B44     		add	r3, r3, sp	@ tmp260,
 763 01ac 0122     		movs	r2, #1	@ tmp261,
 764 01ae 1A70     		strb	r2, [r3]	@ tmp262, main_state
 443:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 765              		.loc 2 443 0
 766 01b0 4C4B     		ldr	r3, .L47+36	@ D.7172,
 767 01b2 4C4A     		ldr	r2, .L47+36	@ D.7172,
ARM GAS  /tmp/ccC0Akiw.s 			page 40


 768 01b4 9268     		ldr	r2, [r2, #8]	@ D.7167, _105->CR
 769 01b6 0421     		movs	r1, #4	@ tmp263,
 770 01b8 0A43     		orrs	r2, r1	@ D.7167, tmp263
 771 01ba 9A60     		str	r2, [r3, #8]	@ D.7167, _104->CR
 444:src/main.c    **** 				seq_ready = 0;
 772              		.loc 2 444 0
 773 01bc 4A4B     		ldr	r3, .L47+40	@ tmp264,
 774 01be 0022     		movs	r2, #0	@ tmp265,
 775 01c0 1A70     		strb	r2, [r3]	@ tmp266, seq_ready
 445:src/main.c    **** 				break;
 776              		.loc 2 445 0
 777 01c2 7AE1     		b	.L30	@
 778              	.L26:
 446:src/main.c    **** 
 447:src/main.c    **** 			case SYNCHRO_ADC:
 448:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 779              		.loc 2 448 0
 780 01c4 484B     		ldr	r3, .L47+40	@ tmp267,
 781 01c6 1B78     		ldrb	r3, [r3]	@ tmp268, seq_ready
 782 01c8 DBB2     		uxtb	r3, r3	@ D.7171, tmp268
 783 01ca 002B     		cmp	r3, #0	@ D.7171,
 784 01cc 00D1     		bne	.LCB459	@
 785 01ce 6FE1     		b	.L44	@long jump	@
 786              	.LCB459:
 449:src/main.c    **** 				{
 450:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 787              		.loc 2 450 0
 788 01d0 464B     		ldr	r3, .L47+44	@ tmp269,
 789 01d2 1800     		movs	r0, r3	@, tmp269
 790 01d4 FFF7FEFF 		bl	Usart2Send	@
 451:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 791              		.loc 2 451 0
 792 01d8 454B     		ldr	r3, .L47+48	@ tmp270,
 793 01da 1800     		movs	r0, r3	@, tmp270
 794 01dc FFF7FEFF 		bl	Usart2Send	@
 452:src/main.c    **** #ifdef USE_GSM
 453:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 795              		.loc 2 453 0
 796 01e0 3723     		movs	r3, #55	@ tmp271,
 797 01e2 6B44     		add	r3, r3, sp	@ tmp271,
 798 01e4 0222     		movs	r2, #2	@ tmp272,
 799 01e6 1A70     		strb	r2, [r3]	@ tmp273, main_state
 454:src/main.c    **** 					timer_standby = 0;
 800              		.loc 2 454 0
 801 01e8 3C4B     		ldr	r3, .L47+28	@ tmp274,
 802 01ea 0022     		movs	r2, #0	@ tmp275,
 803 01ec 1A80     		strh	r2, [r3]	@ tmp276, timer_standby
 455:src/main.c    **** 					zero_current_loc = 0;
 804              		.loc 2 455 0
 805 01ee 0023     		movs	r3, #0	@ tmp277,
 806 01f0 0E93     		str	r3, [sp, #56]	@ tmp277, zero_current_loc
 456:src/main.c    **** 					i = 0;
 807              		.loc 2 456 0
 808 01f2 3F23     		movs	r3, #63	@ tmp278,
 809 01f4 6B44     		add	r3, r3, sp	@ tmp278,
 810 01f6 0022     		movs	r2, #0	@ tmp279,
 811 01f8 1A70     		strb	r2, [r3]	@ tmp280, i
ARM GAS  /tmp/ccC0Akiw.s 			page 41


 457:src/main.c    **** #else
 458:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 459:src/main.c    **** 					timer_standby = 60000;
 460:src/main.c    **** 					zero_current_loc = 0;
 461:src/main.c    **** 					i = 0;
 462:src/main.c    **** #endif
 463:src/main.c    **** 				}
 464:src/main.c    **** 				break;
 812              		.loc 2 464 0
 813 01fa 59E1     		b	.L44	@
 814              	.L27:
 465:src/main.c    **** 
 466:src/main.c    **** 			case SET_ZERO_CURRENT:
 467:src/main.c    **** 				if (!timer_standby)
 815              		.loc 2 467 0
 816 01fc 374B     		ldr	r3, .L47+28	@ tmp281,
 817 01fe 1B88     		ldrh	r3, [r3]	@ tmp282, timer_standby
 818 0200 9BB2     		uxth	r3, r3	@ D.7169, tmp282
 819 0202 002B     		cmp	r3, #0	@ D.7169,
 820 0204 00D0     		beq	.LCB487	@
 821 0206 55E1     		b	.L45	@long jump	@
 822              	.LCB487:
 468:src/main.c    **** 				{
 469:src/main.c    **** 					if (i < 32)
 823              		.loc 2 469 0
 824 0208 3F23     		movs	r3, #63	@ tmp283,
 825 020a 6B44     		add	r3, r3, sp	@ tmp283,
 826 020c 1B78     		ldrb	r3, [r3]	@ tmp284, i
 827 020e 1F2B     		cmp	r3, #31	@ tmp284,
 828 0210 1AD8     		bhi	.L33	@,
 470:src/main.c    **** 					// if (i < 4)
 471:src/main.c    **** 					{
 472:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 829              		.loc 2 472 0
 830 0212 354B     		ldr	r3, .L47+40	@ tmp285,
 831 0214 1B78     		ldrb	r3, [r3]	@ tmp286, seq_ready
 832 0216 DBB2     		uxtb	r3, r3	@ D.7171, tmp286
 833 0218 002B     		cmp	r3, #0	@ D.7171,
 834 021a 00D1     		bne	.LCB497	@
 835 021c 4AE1     		b	.L45	@long jump	@
 836              	.LCB497:
 473:src/main.c    **** 						{
 474:src/main.c    **** 							seq_ready = 0;
 837              		.loc 2 474 0
 838 021e 324B     		ldr	r3, .L47+40	@ tmp287,
 839 0220 0022     		movs	r2, #0	@ tmp288,
 840 0222 1A70     		strb	r2, [r3]	@ tmp289, seq_ready
 475:src/main.c    **** 							zero_current_loc += I_Sense;
 841              		.loc 2 475 0
 842 0224 334B     		ldr	r3, .L47+52	@ tmp290,
 843 0226 9B88     		ldrh	r3, [r3, #4]	@ tmp292,
 844 0228 9BB2     		uxth	r3, r3	@ D.7169, tmp292
 845 022a 1A00     		movs	r2, r3	@ D.7173, D.7169
 846 022c 0E9B     		ldr	r3, [sp, #56]	@ tmp294, zero_current_loc
 847 022e 9B18     		adds	r3, r3, r2	@ tmp293, tmp294, D.7173
 848 0230 0E93     		str	r3, [sp, #56]	@ tmp293, zero_current_loc
 476:src/main.c    **** 							i++;
ARM GAS  /tmp/ccC0Akiw.s 			page 42


 849              		.loc 2 476 0
 850 0232 3F23     		movs	r3, #63	@ tmp295,
 851 0234 6B44     		add	r3, r3, sp	@ tmp295,
 852 0236 1A78     		ldrb	r2, [r3]	@ D.7171, i
 853 0238 3F23     		movs	r3, #63	@ tmp296,
 854 023a 6B44     		add	r3, r3, sp	@ tmp296,
 855 023c 0132     		adds	r2, r2, #1	@ tmp297,
 856 023e 1A70     		strb	r2, [r3]	@ tmp298, i
 477:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 857              		.loc 2 477 0
 858 0240 264B     		ldr	r3, .L47+28	@ tmp299,
 859 0242 0222     		movs	r2, #2	@ tmp300,
 860 0244 1A80     		strh	r2, [r3]	@ tmp301, timer_standby
 478:src/main.c    **** 						}
 479:src/main.c    **** 					}
 480:src/main.c    **** 					else
 481:src/main.c    **** 					{
 482:src/main.c    **** 						zero_current_loc >>= 5;
 483:src/main.c    **** 						// zero_current_loc >>= 2;
 484:src/main.c    **** 						zero_current = zero_current_loc;
 485:src/main.c    **** 						main_state = LAMP_ON;
 486:src/main.c    **** 						RELAY_ON;
 487:src/main.c    **** 						i = 0;
 488:src/main.c    **** 					}
 489:src/main.c    **** 				}
 490:src/main.c    **** 				break;
 861              		.loc 2 490 0
 862 0246 35E1     		b	.L45	@
 863              	.L33:
 482:src/main.c    **** 						// zero_current_loc >>= 2;
 864              		.loc 2 482 0
 865 0248 0E9B     		ldr	r3, [sp, #56]	@ tmp303, zero_current_loc
 866 024a 5B09     		lsrs	r3, r3, #5	@ tmp302, tmp303,
 867 024c 0E93     		str	r3, [sp, #56]	@ tmp302, zero_current_loc
 484:src/main.c    **** 						main_state = LAMP_ON;
 868              		.loc 2 484 0
 869 024e 0E9B     		ldr	r3, [sp, #56]	@ tmp305, zero_current_loc
 870 0250 9AB2     		uxth	r2, r3	@ D.7169, tmp304
 871 0252 294B     		ldr	r3, .L47+56	@ tmp306,
 872 0254 1A80     		strh	r2, [r3]	@ tmp307, zero_current
 485:src/main.c    **** 						RELAY_ON;
 873              		.loc 2 485 0
 874 0256 3723     		movs	r3, #55	@ tmp308,
 875 0258 6B44     		add	r3, r3, sp	@ tmp308,
 876 025a 0722     		movs	r2, #7	@ tmp309,
 877 025c 1A70     		strb	r2, [r3]	@ tmp310, main_state
 486:src/main.c    **** 						i = 0;
 878              		.loc 2 486 0
 879 025e 9023     		movs	r3, #144	@ tmp436,
 880 0260 DB05     		lsls	r3, r3, #23	@ D.7168, tmp436,
 881 0262 8022     		movs	r2, #128	@ tmp437,
 882 0264 1201     		lsls	r2, r2, #4	@ tmp311, tmp437,
 883 0266 9A61     		str	r2, [r3, #24]	@ tmp311, _130->BSRR
 487:src/main.c    **** 					}
 884              		.loc 2 487 0
 885 0268 3F23     		movs	r3, #63	@ tmp312,
 886 026a 6B44     		add	r3, r3, sp	@ tmp312,
ARM GAS  /tmp/ccC0Akiw.s 			page 43


 887 026c 0022     		movs	r2, #0	@ tmp313,
 888 026e 1A70     		strb	r2, [r3]	@ tmp314, i
 889              		.loc 2 490 0
 890 0270 20E1     		b	.L45	@
 891              	.L29:
 491:src/main.c    **** 
 492:src/main.c    **** 			case LAMP_OFF:
 493:src/main.c    **** 				break;
 494:src/main.c    **** 
 495:src/main.c    **** 			case LAMP_ON:
 496:src/main.c    **** 				if (!timer_standby)
 892              		.loc 2 496 0
 893 0272 1A4B     		ldr	r3, .L47+28	@ tmp315,
 894 0274 1B88     		ldrh	r3, [r3]	@ tmp316, timer_standby
 895 0276 9BB2     		uxth	r3, r3	@ D.7169, tmp316
 896 0278 002B     		cmp	r3, #0	@ D.7169,
 897 027a 00D0     		beq	.LCB550	@
 898 027c 1CE1     		b	.L46	@long jump	@
 899              	.LCB550:
 497:src/main.c    **** 				{
 498:src/main.c    **** 					if (i < SIZEOF_POWER_VECT)
 900              		.loc 2 498 0
 901 027e 3F23     		movs	r3, #63	@ tmp317,
 902 0280 6B44     		add	r3, r3, sp	@ tmp317,
 903 0282 1B78     		ldrb	r3, [r3]	@ tmp318, i
 904 0284 092B     		cmp	r3, #9	@ tmp318,
 905 0286 3BD8     		bhi	.L36	@,
 499:src/main.c    **** 					{
 500:src/main.c    **** 						power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 906              		.loc 2 500 0
 907 0288 3F23     		movs	r3, #63	@ tmp319,
 908 028a 6B44     		add	r3, r3, sp	@ tmp319,
 909 028c 1C78     		ldrb	r4, [r3]	@ D.7170, i
 910 028e FFF7FEFF 		bl	GetVGrid	@
 911 0292 0300     		movs	r3, r0	@ tmp320,
 912 0294 1D00     		movs	r5, r3	@ D.7169, tmp321
 913 0296 FFF7FEFF 		bl	GetIGrid	@
 914 029a 0300     		movs	r3, r0	@ tmp322,
 915 029c 1900     		movs	r1, r3	@, D.7169
 916 029e 2800     		movs	r0, r5	@, D.7169
 917 02a0 FFF7FEFF 		bl	PowerCalc	@
 918 02a4 0300     		movs	r3, r0	@ tmp324,
 919 02a6 1900     		movs	r1, r3	@ D.7169, tmp325
 920 02a8 144B     		ldr	r3, .L47+60	@ tmp326,
 921 02aa 6200     		lsls	r2, r4, #1	@ tmp327, D.7170,
 922 02ac D152     		strh	r1, [r2, r3]	@ tmp328, power_vect
 501:src/main.c    **** 						i++;
 923              		.loc 2 501 0
 924 02ae 3F23     		movs	r3, #63	@ tmp329,
 925 02b0 6B44     		add	r3, r3, sp	@ tmp329,
 926 02b2 1A78     		ldrb	r2, [r3]	@ D.7171, i
 927 02b4 3F23     		movs	r3, #63	@ tmp330,
 928 02b6 6B44     		add	r3, r3, sp	@ tmp330,
 929 02b8 0132     		adds	r2, r2, #1	@ tmp331,
 930 02ba 1A70     		strb	r2, [r3]	@ tmp332, i
 931 02bc A8E0     		b	.L37	@
 932              	.L48:
ARM GAS  /tmp/ccC0Akiw.s 			page 44


 933 02be C046     		.align	2
 934              	.L47:
 935 02c0 80BB0000 		.word	48000
 936 02c4 00000000 		.word	.LC0
 937 02c8 28000000 		.word	.LC2
 938 02cc 38000000 		.word	.LC4
 939 02d0 4C000000 		.word	.LC6
 940 02d4 64000000 		.word	.LC8
 941 02d8 74000000 		.word	.LC10
 942 02dc 00000000 		.word	timer_standby
 943 02e0 00000000 		.word	.L25
 944 02e4 00240140 		.word	1073816576
 945 02e8 00000000 		.word	seq_ready
 946 02ec 90000000 		.word	.LC15
 947 02f0 9C000000 		.word	.LC17
 948 02f4 00000000 		.word	adc_ch
 949 02f8 00000000 		.word	zero_current
 950 02fc 00000000 		.word	power_vect
 951              	.L36:
 502:src/main.c    **** 					}
 503:src/main.c    **** 					else
 504:src/main.c    **** 					{
 505:src/main.c    **** 						//termine de cargar el vector, muestro info
 506:src/main.c    **** 						power = PowerCalcMean8(power_vect);
 952              		.loc 2 506 0
 953 0300 08AC     		add	r4, sp, #32	@ tmp333,,
 954 0302 764B     		ldr	r3, .L49	@ tmp334,
 955 0304 1800     		movs	r0, r3	@, tmp334
 956 0306 FFF7FEFF 		bl	PowerCalcMean8	@
 957 030a 0300     		movs	r3, r0	@ tmp335,
 958 030c 2380     		strh	r3, [r4]	@ tmp337, power
 507:src/main.c    **** 						power_2secs_acum += power;
 959              		.loc 2 507 0
 960 030e 08AB     		add	r3, sp, #32	@ tmp338,,
 961 0310 1A88     		ldrh	r2, [r3]	@ D.7173, power
 962 0312 734B     		ldr	r3, .L49+4	@ tmp339,
 963 0314 1B68     		ldr	r3, [r3]	@ D.7173, power_2secs_acum
 964 0316 D218     		adds	r2, r2, r3	@ D.7173, D.7173, D.7173
 965 0318 714B     		ldr	r3, .L49+4	@ tmp340,
 966 031a 1A60     		str	r2, [r3]	@ D.7173, power_2secs_acum
 508:src/main.c    **** 						power_2secs_index++;
 967              		.loc 2 508 0
 968 031c 714B     		ldr	r3, .L49+8	@ tmp341,
 969 031e 1B78     		ldrb	r3, [r3]	@ D.7171, power_2secs_index
 970 0320 0133     		adds	r3, r3, #1	@ tmp342,
 971 0322 DAB2     		uxtb	r2, r3	@ D.7171, tmp342
 972 0324 6F4B     		ldr	r3, .L49+8	@ tmp343,
 973 0326 1A70     		strb	r2, [r3]	@ tmp344, power_2secs_index
 509:src/main.c    **** 						fcalc = power;
 974              		.loc 2 509 0
 975 0328 08AB     		add	r3, sp, #32	@ tmp345,,
 976 032a 1B88     		ldrh	r3, [r3]	@ tmp346, power
 977 032c 1800     		movs	r0, r3	@, tmp346
 978 032e FFF7FEFF 		bl	__aeabi_ui2f	@
 979 0332 031C     		adds	r3, r0, #0	@ tmp347,
 980 0334 0C93     		str	r3, [sp, #48]	@ tmp347, fcalc
 510:src/main.c    **** 						fcalc = power * KW;
ARM GAS  /tmp/ccC0Akiw.s 			page 45


 981              		.loc 2 510 0
 982 0336 08AB     		add	r3, sp, #32	@ tmp348,,
 983 0338 1B88     		ldrh	r3, [r3]	@ D.7170, power
 984 033a 1800     		movs	r0, r3	@, D.7170
 985 033c FFF7FEFF 		bl	__aeabi_i2d	@
 986 0340 694A     		ldr	r2, .L49+12	@,
 987 0342 6A4B     		ldr	r3, .L49+16	@,
 988 0344 FFF7FEFF 		bl	__aeabi_dmul	@
 989 0348 0300     		movs	r3, r0	@ tmp349,
 990 034a 0C00     		movs	r4, r1	@,
 991 034c 1800     		movs	r0, r3	@, D.7174
 992 034e 2100     		movs	r1, r4	@, D.7174
 993 0350 FFF7FEFF 		bl	__aeabi_d2f	@
 994 0354 031C     		adds	r3, r0, #0	@ tmp350,
 995 0356 0C93     		str	r3, [sp, #48]	@ tmp350, fcalc
 511:src/main.c    **** 						power_int = (unsigned short) fcalc;
 996              		.loc 2 511 0
 997 0358 1E24     		movs	r4, #30	@ tmp351,
 998 035a 6C44     		add	r4, r4, sp	@ tmp351,
 999 035c 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1000 035e FFF7FEFF 		bl	__aeabi_f2uiz	@
 1001 0362 0300     		movs	r3, r0	@ tmp352,
 1002 0364 2380     		strh	r3, [r4]	@ tmp353, power_int
 512:src/main.c    **** 						fcalc = fcalc - power_int;
 1003              		.loc 2 512 0
 1004 0366 1E23     		movs	r3, #30	@ tmp354,
 1005 0368 6B44     		add	r3, r3, sp	@ tmp354,
 1006 036a 1B88     		ldrh	r3, [r3]	@ D.7170, power_int
 1007 036c 1800     		movs	r0, r3	@, D.7170
 1008 036e FFF7FEFF 		bl	__aeabi_i2f	@
 1009 0372 031C     		adds	r3, r0, #0	@ D.7175,
 1010 0374 191C     		adds	r1, r3, #0	@, D.7175
 1011 0376 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1012 0378 FFF7FEFF 		bl	__aeabi_fsub	@
 1013 037c 031C     		adds	r3, r0, #0	@ tmp355,
 1014 037e 0C93     		str	r3, [sp, #48]	@ tmp355, fcalc
 513:src/main.c    **** 						fcalc = fcalc * 100;
 1015              		.loc 2 513 0
 1016 0380 5B49     		ldr	r1, .L49+20	@,
 1017 0382 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1018 0384 FFF7FEFF 		bl	__aeabi_fmul	@
 1019 0388 031C     		adds	r3, r0, #0	@ tmp356,
 1020 038a 0C93     		str	r3, [sp, #48]	@ tmp356, fcalc
 514:src/main.c    **** 						power_dec = (unsigned short) fcalc;
 1021              		.loc 2 514 0
 1022 038c 07AC     		add	r4, sp, #28	@ tmp357,,
 1023 038e 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1024 0390 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1025 0394 0300     		movs	r3, r0	@ tmp358,
 1026 0396 2380     		strh	r3, [r4]	@ tmp359, power_dec
 515:src/main.c    **** 						sprintf(s_lcd, "p: %3d.%02d d: %d\r\n", power_int, power_dec, power);
 1027              		.loc 2 515 0
 1028 0398 1E23     		movs	r3, #30	@ tmp360,
 1029 039a 6B44     		add	r3, r3, sp	@ tmp360,
 1030 039c 1A88     		ldrh	r2, [r3]	@ D.7170, power_int
 1031 039e 07AB     		add	r3, sp, #28	@ tmp361,,
 1032 03a0 1C88     		ldrh	r4, [r3]	@ D.7170, power_dec
ARM GAS  /tmp/ccC0Akiw.s 			page 46


 1033 03a2 08AB     		add	r3, sp, #32	@ tmp362,,
 1034 03a4 1B88     		ldrh	r3, [r3]	@ D.7170, power
 1035 03a6 5349     		ldr	r1, .L49+24	@ tmp363,
 1036 03a8 02A8     		add	r0, sp, #8	@ tmp364,,
 1037 03aa 0093     		str	r3, [sp]	@ D.7170,
 1038 03ac 2300     		movs	r3, r4	@, D.7170
 1039 03ae FFF7FEFF 		bl	sprintf	@
 516:src/main.c    **** 
 517:src/main.c    **** 						// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, V_Sense, I_Sense);
 518:src/main.c    **** 						// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, GetVGrid(), GetIGrid());
 519:src/main.c    **** 						//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 520:src/main.c    **** 						//TODO: para debug no envio datos
 521:src/main.c    **** 						Usart2Send(s_lcd);
 1040              		.loc 2 521 0
 1041 03b2 02AB     		add	r3, sp, #8	@ tmp365,,
 1042 03b4 1800     		movs	r0, r3	@, tmp365
 1043 03b6 FFF7FEFF 		bl	Usart2Send	@
 522:src/main.c    **** 						i = 0;
 1044              		.loc 2 522 0
 1045 03ba 3F23     		movs	r3, #63	@ tmp366,
 1046 03bc 6B44     		add	r3, r3, sp	@ tmp366,
 1047 03be 0022     		movs	r2, #0	@ tmp367,
 1048 03c0 1A70     		strb	r2, [r3]	@ tmp368, i
 523:src/main.c    **** 
 524:src/main.c    **** 						if (power_2secs_index >= 30)	//1 a 30 es el contador
 1049              		.loc 2 524 0
 1050 03c2 484B     		ldr	r3, .L49+8	@ tmp369,
 1051 03c4 1B78     		ldrb	r3, [r3]	@ D.7171, power_2secs_index
 1052 03c6 1D2B     		cmp	r3, #29	@ D.7171,
 1053 03c8 10D9     		bls	.L38	@,
 525:src/main.c    **** 						{
 526:src/main.c    **** 							power_2secs_index = 0;
 1054              		.loc 2 526 0
 1055 03ca 464B     		ldr	r3, .L49+8	@ tmp370,
 1056 03cc 0022     		movs	r2, #0	@ tmp371,
 1057 03ce 1A70     		strb	r2, [r3]	@ tmp372, power_2secs_index
 527:src/main.c    **** 							power_minutes += power;		//TODO: supongo todo el minuto el mismo consumo ver power_2secs_acu
 1058              		.loc 2 527 0
 1059 03d0 494B     		ldr	r3, .L49+28	@ tmp373,
 1060 03d2 1A88     		ldrh	r2, [r3]	@ D.7169, power_minutes
 1061 03d4 08AB     		add	r3, sp, #32	@ tmp374,,
 1062 03d6 1B88     		ldrh	r3, [r3]	@ tmp375, power
 1063 03d8 D318     		adds	r3, r2, r3	@ tmp376, D.7169, tmp375
 1064 03da 9AB2     		uxth	r2, r3	@ D.7169, tmp376
 1065 03dc 464B     		ldr	r3, .L49+28	@ tmp377,
 1066 03de 1A80     		strh	r2, [r3]	@ tmp378, power_minutes
 528:src/main.c    **** 							power_minutes_index++;
 1067              		.loc 2 528 0
 1068 03e0 464B     		ldr	r3, .L49+32	@ tmp379,
 1069 03e2 1B78     		ldrb	r3, [r3]	@ D.7171, power_minutes_index
 1070 03e4 0133     		adds	r3, r3, #1	@ tmp380,
 1071 03e6 DAB2     		uxtb	r2, r3	@ D.7171, tmp380
 1072 03e8 444B     		ldr	r3, .L49+32	@ tmp381,
 1073 03ea 1A70     		strb	r2, [r3]	@ tmp382, power_minutes_index
 1074              	.L38:
 529:src/main.c    **** 						}
 530:src/main.c    **** 
ARM GAS  /tmp/ccC0Akiw.s 			page 47


 531:src/main.c    **** 						if (power_minutes_index >= 60)	//1 a 60 es el contador
 1075              		.loc 2 531 0
 1076 03ec 434B     		ldr	r3, .L49+32	@ tmp383,
 1077 03ee 1B78     		ldrb	r3, [r3]	@ D.7171, power_minutes_index
 1078 03f0 3B2B     		cmp	r3, #59	@ D.7171,
 1079 03f2 0DD9     		bls	.L37	@,
 532:src/main.c    **** 						{
 533:src/main.c    **** 							power_minutes_index = 0;
 1080              		.loc 2 533 0
 1081 03f4 414B     		ldr	r3, .L49+32	@ tmp384,
 1082 03f6 0022     		movs	r2, #0	@ tmp385,
 1083 03f8 1A70     		strb	r2, [r3]	@ tmp386, power_minutes_index
 534:src/main.c    **** 							power_hours += power_minutes;		//TODO: OJO se supuso todo el minuto el mismo consumo
 1084              		.loc 2 534 0
 1085 03fa 414B     		ldr	r3, .L49+36	@ tmp387,
 1086 03fc 1A88     		ldrh	r2, [r3]	@ D.7169, power_hours
 1087 03fe 3E4B     		ldr	r3, .L49+28	@ tmp388,
 1088 0400 1B88     		ldrh	r3, [r3]	@ D.7169, power_minutes
 1089 0402 D318     		adds	r3, r2, r3	@ tmp389, D.7169, D.7169
 1090 0404 9AB2     		uxth	r2, r3	@ D.7169, tmp389
 1091 0406 3E4B     		ldr	r3, .L49+36	@ tmp390,
 1092 0408 1A80     		strh	r2, [r3]	@ tmp391, power_hours
 535:src/main.c    **** 							power_minutes = 0;
 1093              		.loc 2 535 0
 1094 040a 3B4B     		ldr	r3, .L49+28	@ tmp392,
 1095 040c 0022     		movs	r2, #0	@ tmp393,
 1096 040e 1A80     		strh	r2, [r3]	@ tmp394, power_minutes
 1097              	.L37:
 536:src/main.c    **** 						}
 537:src/main.c    **** 
 538:src/main.c    **** 
 539:src/main.c    **** 					}
 540:src/main.c    **** 					timer_standby = 200;		//10 veces 200ms
 1098              		.loc 2 540 0
 1099 0410 3C4B     		ldr	r3, .L49+40	@ tmp395,
 1100 0412 C822     		movs	r2, #200	@ tmp396,
 1101 0414 1A80     		strh	r2, [r3]	@ tmp397, timer_standby
 541:src/main.c    **** 
 542:src/main.c    **** 					// if ((FuncsGSMReady() == resp_gsm_ok) && (!sended))
 543:src/main.c    **** 					if ((FuncsGSMMessageFlagsAsk () & GSM_SET_CALL) && (!sended))
 1102              		.loc 2 543 0
 1103 0416 FFF7FEFF 		bl	FuncsGSMMessageFlagsAsk	@
 1104 041a 0300     		movs	r3, r0	@ tmp398,
 1105 041c 1A00     		movs	r2, r3	@ D.7170, D.7169
 1106 041e 0123     		movs	r3, #1	@ tmp400,
 1107 0420 1340     		ands	r3, r2	@ D.7170, D.7170
 1108 0422 0FD0     		beq	.L39	@,
 1109              		.loc 2 543 0 is_stmt 0 discriminator 1
 1110 0424 3623     		movs	r3, #54	@ tmp401,
 1111 0426 6B44     		add	r3, r3, sp	@ tmp401,
 1112 0428 1B78     		ldrb	r3, [r3]	@ tmp402, sended
 1113 042a 002B     		cmp	r3, #0	@ tmp402,
 1114 042c 0AD1     		bne	.L39	@,
 544:src/main.c    **** 					{
 545:src/main.c    **** 						Usart2Send((char *) (const char *) "Llamadas Listas!\r\n");
 1115              		.loc 2 545 0 is_stmt 1
 1116 042e 364B     		ldr	r3, .L49+44	@ tmp403,
ARM GAS  /tmp/ccC0Akiw.s 			page 48


 1117 0430 1800     		movs	r0, r3	@, tmp403
 1118 0432 FFF7FEFF 		bl	Usart2Send	@
 546:src/main.c    **** 						sended++;
 1119              		.loc 2 546 0
 1120 0436 3623     		movs	r3, #54	@ tmp404,
 1121 0438 6B44     		add	r3, r3, sp	@ tmp404,
 1122 043a 1A78     		ldrb	r2, [r3]	@ D.7171, sended
 1123 043c 3623     		movs	r3, #54	@ tmp405,
 1124 043e 6B44     		add	r3, r3, sp	@ tmp405,
 1125 0440 0132     		adds	r2, r2, #1	@ tmp406,
 1126 0442 1A70     		strb	r2, [r3]	@ tmp407, sended
 1127              	.L39:
 547:src/main.c    **** 					}
 548:src/main.c    **** 
 549:src/main.c    **** 					if ((FuncsGSMMessageFlagsAsk () & GSM_SET_SMS) && (sended == 1))
 1128              		.loc 2 549 0
 1129 0444 FFF7FEFF 		bl	FuncsGSMMessageFlagsAsk	@
 1130 0448 0300     		movs	r3, r0	@ tmp408,
 1131 044a 1A00     		movs	r2, r3	@ D.7170, D.7169
 1132 044c 0223     		movs	r3, #2	@ tmp410,
 1133 044e 1340     		ands	r3, r2	@ D.7170, D.7170
 1134 0450 0FD0     		beq	.L40	@,
 1135              		.loc 2 549 0 is_stmt 0 discriminator 1
 1136 0452 3623     		movs	r3, #54	@ tmp411,
 1137 0454 6B44     		add	r3, r3, sp	@ tmp411,
 1138 0456 1B78     		ldrb	r3, [r3]	@ tmp412, sended
 1139 0458 012B     		cmp	r3, #1	@ tmp412,
 1140 045a 0AD1     		bne	.L40	@,
 550:src/main.c    **** 					{
 551:src/main.c    **** 						Usart2Send((char *) (const char *) "SMS Listo!\r\n");
 1141              		.loc 2 551 0 is_stmt 1
 1142 045c 2B4B     		ldr	r3, .L49+48	@ tmp413,
 1143 045e 1800     		movs	r0, r3	@, tmp413
 1144 0460 FFF7FEFF 		bl	Usart2Send	@
 552:src/main.c    **** 						sended++;
 1145              		.loc 2 552 0
 1146 0464 3623     		movs	r3, #54	@ tmp414,
 1147 0466 6B44     		add	r3, r3, sp	@ tmp414,
 1148 0468 1A78     		ldrb	r2, [r3]	@ D.7171, sended
 1149 046a 3623     		movs	r3, #54	@ tmp415,
 1150 046c 6B44     		add	r3, r3, sp	@ tmp415,
 1151 046e 0132     		adds	r2, r2, #1	@ tmp416,
 1152 0470 1A70     		strb	r2, [r3]	@ tmp417, sended
 1153              	.L40:
 553:src/main.c    **** 					}
 554:src/main.c    **** 
 555:src/main.c    **** 					if ((FuncsGSMReady() == resp_gsm_ok) && (sended == 2))
 1154              		.loc 2 555 0
 1155 0472 FFF7FEFF 		bl	FuncsGSMReady	@
 1156 0476 031E     		subs	r3, r0, #0	@ tmp418,,
 1157 0478 012B     		cmp	r3, #1	@ tmp418,
 1158 047a 1DD1     		bne	.L46	@,
 1159              		.loc 2 555 0 is_stmt 0 discriminator 1
 1160 047c 3623     		movs	r3, #54	@ tmp420,
 1161 047e 6B44     		add	r3, r3, sp	@ tmp420,
 1162 0480 1B78     		ldrb	r3, [r3]	@ tmp421, sended
 1163 0482 022B     		cmp	r3, #2	@ tmp421,
ARM GAS  /tmp/ccC0Akiw.s 			page 49


 1164 0484 18D1     		bne	.L46	@,
 556:src/main.c    **** 					{
 557:src/main.c    **** 						FuncsGSMSendSMS("Hola", "1145376762");
 1165              		.loc 2 557 0 is_stmt 1
 1166 0486 224A     		ldr	r2, .L49+52	@ tmp422,
 1167 0488 224B     		ldr	r3, .L49+56	@ tmp423,
 1168 048a 1100     		movs	r1, r2	@, tmp422
 1169 048c 1800     		movs	r0, r3	@, tmp423
 1170 048e FFF7FEFF 		bl	FuncsGSMSendSMS	@
 558:src/main.c    **** 						sended++;
 1171              		.loc 2 558 0
 1172 0492 3623     		movs	r3, #54	@ tmp424,
 1173 0494 6B44     		add	r3, r3, sp	@ tmp424,
 1174 0496 1A78     		ldrb	r2, [r3]	@ D.7171, sended
 1175 0498 3623     		movs	r3, #54	@ tmp425,
 1176 049a 6B44     		add	r3, r3, sp	@ tmp425,
 1177 049c 0132     		adds	r2, r2, #1	@ tmp426,
 1178 049e 1A70     		strb	r2, [r3]	@ tmp427, sended
 559:src/main.c    **** 					}
 560:src/main.c    **** 
 561:src/main.c    **** 					// if (sended == 2)
 562:src/main.c    **** 					// {
 563:src/main.c    **** 					// 	Wait_ms(10000);
 564:src/main.c    **** 					// 	//apago modulo
 565:src/main.c    **** 					// 	FuncsGSMShutdown ();
 566:src/main.c    **** 					// 	sended++;
 567:src/main.c    **** 					// }
 568:src/main.c    **** 					//
 569:src/main.c    **** 					// if ((FuncsGSMMessageFlagsAsk () & GSM_SET_POWER_DOWN) && (sended == 3))
 570:src/main.c    **** 					// {
 571:src/main.c    **** 					// 	Usart2Send((char *) (const char *) "Pwr down!\r\n");
 572:src/main.c    **** 					// 	Wait_ms(60000);
 573:src/main.c    **** 					// 	sended = 0;
 574:src/main.c    **** 					// }
 575:src/main.c    **** 
 576:src/main.c    **** 					// fcalc = voltage;
 577:src/main.c    **** 					// fcalc = fcalc * KV;
 578:src/main.c    **** 					// volt_int = (short) fcalc;
 579:src/main.c    **** 					// fcalc = fcalc - volt_int;
 580:src/main.c    **** 					// fcalc = fcalc * 100;
 581:src/main.c    **** 					// volt_dec = (short) fcalc;
 582:src/main.c    **** 					//
 583:src/main.c    **** 					// sprintf(str, "%2d.%02d", volt_int, volt_dec);
 584:src/main.c    **** 					//
 585:src/main.c    **** 					// //sprintf(str, "%4d        ", voltage);
 586:src/main.c    **** 					// LCDTransmitStr(str);
 587:src/main.c    **** 
 588:src/main.c    **** 				}
 589:src/main.c    **** 
 590:src/main.c    **** 				break;
 1179              		.loc 2 590 0
 1180 04a0 0AE0     		b	.L46	@
 1181              	.L23:
 591:src/main.c    **** 
 592:src/main.c    **** 			default:
 593:src/main.c    **** 				main_state = MAIN_INIT;
 1182              		.loc 2 593 0
ARM GAS  /tmp/ccC0Akiw.s 			page 50


 1183 04a2 3723     		movs	r3, #55	@ tmp428,
 1184 04a4 6B44     		add	r3, r3, sp	@ tmp428,
 1185 04a6 0022     		movs	r2, #0	@ tmp429,
 1186 04a8 1A70     		strb	r2, [r3]	@ tmp430, main_state
 594:src/main.c    **** 				break;
 1187              		.loc 2 594 0
 1188 04aa 06E0     		b	.L30	@
 1189              	.L43:
 493:src/main.c    **** 
 1190              		.loc 2 493 0
 1191 04ac C046     		nop
 1192 04ae 04E0     		b	.L30	@
 1193              	.L44:
 464:src/main.c    **** 
 1194              		.loc 2 464 0
 1195 04b0 C046     		nop
 1196 04b2 02E0     		b	.L30	@
 1197              	.L45:
 490:src/main.c    **** 
 1198              		.loc 2 490 0
 1199 04b4 C046     		nop
 1200 04b6 00E0     		b	.L30	@
 1201              	.L46:
 590:src/main.c    **** 
 1202              		.loc 2 590 0
 1203 04b8 C046     		nop
 1204              	.L30:
 595:src/main.c    **** 		}
 596:src/main.c    **** 
 597:src/main.c    **** 		//Cosas que dependen de las muestras
 598:src/main.c    **** 		if (seq_ready)
 1205              		.loc 2 598 0
 1206 04ba 174B     		ldr	r3, .L49+60	@ tmp431,
 1207 04bc 1B78     		ldrb	r3, [r3]	@ tmp432, seq_ready
 1208 04be DBB2     		uxtb	r3, r3	@ D.7171, tmp432
 1209 04c0 002B     		cmp	r3, #0	@ D.7171,
 1210 04c2 06D0     		beq	.L41	@,
 599:src/main.c    **** 		{
 600:src/main.c    **** 			seq_ready = 0;
 1211              		.loc 2 600 0
 1212 04c4 144B     		ldr	r3, .L49+60	@ tmp433,
 1213 04c6 0022     		movs	r2, #0	@ tmp434,
 1214 04c8 1A70     		strb	r2, [r3]	@ tmp435, seq_ready
 601:src/main.c    **** 			UpdateVGrid ();
 1215              		.loc 2 601 0
 1216 04ca FFF7FEFF 		bl	UpdateVGrid	@
 602:src/main.c    **** 			UpdateIGrid ();
 1217              		.loc 2 602 0
 1218 04ce FFF7FEFF 		bl	UpdateIGrid	@
 1219              	.L41:
 603:src/main.c    **** 		}
 604:src/main.c    **** 
 605:src/main.c    **** 		//Cosas que no dependen del estado del programa
 606:src/main.c    **** 		UpdateRelay ();
 1220              		.loc 2 606 0
 1221 04d2 FFF7FEFF 		bl	UpdateRelay	@
 607:src/main.c    **** 		// UpdatePhotoTransistor();
ARM GAS  /tmp/ccC0Akiw.s 			page 51


 608:src/main.c    **** #ifdef USE_GSM
 609:src/main.c    **** 		FuncsGSM();
 1222              		.loc 2 609 0
 1223 04d6 FFF7FEFF 		bl	FuncsGSM	@
 610:src/main.c    **** #endif
 611:src/main.c    **** 	}	//end while 1
 1224              		.loc 2 611 0
 1225 04da 57E6     		b	.L42	@
 1226              	.L50:
 1227              		.align	2
 1228              	.L49:
 1229 04dc 00000000 		.word	power_vect
 1230 04e0 00000000 		.word	power_2secs_acum
 1231 04e4 00000000 		.word	power_2secs_index
 1232 04e8 90F7AA95 		.word	-1783957616
 1233 04ec 09BF843F 		.word	1065664265
 1234 04f0 0000C842 		.word	1120403456
 1235 04f4 C4000000 		.word	.LC24
 1236 04f8 00000000 		.word	power_minutes
 1237 04fc 00000000 		.word	power_minutes_index
 1238 0500 00000000 		.word	power_hours
 1239 0504 00000000 		.word	timer_standby
 1240 0508 D8000000 		.word	.LC29
 1241 050c EC000000 		.word	.LC31
 1242 0510 FC000000 		.word	.LC33
 1243 0514 08010000 		.word	.LC35
 1244 0518 00000000 		.word	seq_ready
 1245              		.cfi_endproc
 1246              	.LFE20:
 1247              		.size	main, .-main
 1248              		.section	.rodata
 1249 010d 000000   		.align	2
 1250              	.LC37:
 1251 0110 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1251      3A7B226D 
 1251      794E616D 
 1251      65223A22 
 1251      4E75636C 
 1252              		.align	2
 1253              	.LC39:
 1254 0128 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1254      54656D70 
 1254      65726174 
 1254      75726522 
 1254      3A256C75 
 1255 0141 000000   		.align	2
 1256              	.LC41:
 1257 0144 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1257      48756D69 
 1257      64697479 
 1257      223A256C 
 1257      752E256C 
 1258 015a 0000     		.align	2
 1259              	.LC43:
 1260 015c 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1260      50726573 
 1260      73757265 
ARM GAS  /tmp/ccC0Akiw.s 			page 52


 1260      223A256C 
 1260      752E256C 
 1261 0172 0000     		.align	2
 1262              	.LC45:
 1263 0174 7D7D00   		.ascii	"}}\000"
 1264              		.section	.text.prepare_json_pkt,"ax",%progbits
 1265              		.align	2
 1266              		.global	prepare_json_pkt
 1267              		.code	16
 1268              		.thumb_func
 1269              		.type	prepare_json_pkt, %function
 1270              	prepare_json_pkt:
 1271              	.LFB21:
 612:src/main.c    **** 
 613:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 614:src/main.c    **** 
 615:src/main.c    **** 	while (1)
 616:src/main.c    **** 	{
 617:src/main.c    **** 		switch (main_state)
 618:src/main.c    **** 		{
 619:src/main.c    **** 			case MAIN_INIT:
 620:src/main.c    **** 				RelayOff();
 621:src/main.c    **** 				LED_OFF;
 622:src/main.c    **** 				FillPhotoBuffer();
 623:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 624:src/main.c    **** 				FillTempBuffer();
 625:src/main.c    **** #endif
 626:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 627:src/main.c    **** 				Update_TIM3_CH1 (0);
 628:src/main.c    **** #endif
 629:src/main.c    **** 				main_state = SYNCHRO_ADC;
 630:src/main.c    **** #ifdef ADC_WITH_INT
 631:src/main.c    **** 				seq_ready = 0;
 632:src/main.c    **** #endif
 633:src/main.c    **** 				break;
 634:src/main.c    **** 
 635:src/main.c    **** 			case SYNCHRO_ADC:
 636:src/main.c    **** #ifdef ADC_WITH_INT
 637:src/main.c    **** 				if (seq_ready)
 638:src/main.c    **** #endif
 639:src/main.c    **** 				{
 640:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 641:src/main.c    **** 				}
 642:src/main.c    **** 				break;
 643:src/main.c    **** 
 644:src/main.c    **** 			case SET_ZERO_CURRENT:
 645:src/main.c    **** 				main_state = LAMP_OFF;
 646:src/main.c    **** 				break;
 647:src/main.c    **** 
 648:src/main.c    **** 			case LAMP_OFF:
 649:src/main.c    **** 				if (!tt_relay_on_off)
 650:src/main.c    **** 				{
 651:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 652:src/main.c    **** 					{
 653:src/main.c    **** 						main_state = LAMP_ON;
 654:src/main.c    **** 						tt_relay_on_off = 10000;
 655:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
ARM GAS  /tmp/ccC0Akiw.s 			page 53


 656:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 657:src/main.c    **** 	#endif
 658:src/main.c    **** 
 659:src/main.c    **** 						RelayOn();
 660:src/main.c    **** 						LED_ON;
 661:src/main.c    **** 	#ifdef WITH_HYST
 662:src/main.c    **** 						hours = 0;
 663:src/main.c    **** 	#endif
 664:src/main.c    **** 					}
 665:src/main.c    **** 				}
 666:src/main.c    **** 				break;
 667:src/main.c    **** 
 668:src/main.c    **** 			case LAMP_ON:
 669:src/main.c    **** 				if (!tt_relay_on_off)
 670:src/main.c    **** 				{
 671:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 672:src/main.c    **** 					hyst = GetHysteresis (hours);
 673:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 674:src/main.c    **** 	#else
 675:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 676:src/main.c    **** 	#endif
 677:src/main.c    **** 					{
 678:src/main.c    **** 						main_state = LAMP_OFF;
 679:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 680:src/main.c    **** 						Update_TIM3_CH1 (0);
 681:src/main.c    **** 	#endif
 682:src/main.c    **** 						tt_relay_on_off = 10000;
 683:src/main.c    **** 						RelayOff();
 684:src/main.c    **** 						LED_OFF;
 685:src/main.c    **** 					}
 686:src/main.c    **** 				}
 687:src/main.c    **** 
 688:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 689:src/main.c    **** 				if (main_state == LAMP_ON)
 690:src/main.c    **** 				{
 691:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
 692:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
 693:src/main.c    **** 				}
 694:src/main.c    **** 	#endif
 695:src/main.c    **** 				break;
 696:src/main.c    **** 
 697:src/main.c    **** 			default:
 698:src/main.c    **** 				main_state = MAIN_INIT;
 699:src/main.c    **** 				break;
 700:src/main.c    **** 		}
 701:src/main.c    **** 
 702:src/main.c    **** 		if (!timer_standby)
 703:src/main.c    **** 		{
 704:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 705:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
 706:src/main.c    **** #else
 707:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
 708:src/main.c    **** #endif
 709:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 710:src/main.c    **** 			Usart2Send(s_lcd);
 711:src/main.c    **** 			timer_standby = 2000;
 712:src/main.c    **** 		}
ARM GAS  /tmp/ccC0Akiw.s 			page 54


 713:src/main.c    **** 
 714:src/main.c    **** 		//Cosas que no dependen del estado del programa
 715:src/main.c    **** 		UpdateRelay ();
 716:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 717:src/main.c    **** 		UpdateTemp();
 718:src/main.c    **** #endif
 719:src/main.c    **** 		UpdatePhotoTransistor();
 720:src/main.c    **** 	}	//end while 1
 721:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
 722:src/main.c    **** #endif	//USE_REDONDA_BASIC
 723:src/main.c    **** 
 724:src/main.c    **** 
 725:src/main.c    **** #ifdef USE_MQTT_LIB
 726:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 727:src/main.c    **** 	int rc = 0;
 728:src/main.c    **** 	char buf[200];
 729:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
 730:src/main.c    **** 	char* payload = "mypayload";
 731:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
 732:src/main.c    **** 	int len = 0;
 733:src/main.c    **** 
 734:src/main.c    **** 	data.clientID.cstring = "me";
 735:src/main.c    **** 	data.keepAliveInterval = 20;
 736:src/main.c    **** 	data.cleansession = 1;
 737:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
 738:src/main.c    **** 
 739:src/main.c    **** 	topicString.cstring = "mytopic";
 740:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
 741:src/main.c    **** 
 742:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
 743:src/main.c    **** 	//falta abrir puerto
 744:src/main.c    **** 	//falta enviar al socket
 745:src/main.c    **** 	//falta cerrar socket
 746:src/main.c    **** #endif
 747:src/main.c    **** 
 748:src/main.c    **** //	//---------- Prueba USART2 --------//
 749:src/main.c    **** //
 750:src/main.c    **** //    while( 1 )
 751:src/main.c    **** //    {
 752:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 753:src/main.c    **** //        Wait_ms(3000);
 754:src/main.c    **** //    }
 755:src/main.c    **** //
 756:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
 757:src/main.c    **** 
 758:src/main.c    **** 	//---------- Prueba con GPS --------//
 759:src/main.c    **** #ifdef USE_GPS
 760:src/main.c    **** 	Usart2SendSingle('M');
 761:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 762:src/main.c    **** 	Wait_ms(1000);
 763:src/main.c    **** 
 764:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
 765:src/main.c    **** 
 766:src/main.c    **** 	//mando reset al gps
 767:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
 768:src/main.c    **** 	GPSStartResetSM ();
 769:src/main.c    **** 	while (GPSStart() != RESP_OK);
ARM GAS  /tmp/ccC0Akiw.s 			page 55


 770:src/main.c    **** 
 771:src/main.c    **** 	//mando conf al gps
 772:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
 773:src/main.c    **** 	GPSConfigResetSM ();
 774:src/main.c    **** 	while (GPSConfig() != RESP_OK);
 775:src/main.c    **** 
 776:src/main.c    **** //	//mando reset factory al gps
 777:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
 778:src/main.c    **** //	GPSResetFactoryResetSM ();
 779:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
 780:src/main.c    **** 
 781:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
 782:src/main.c    **** //	timer_standby = 60000;
 783:src/main.c    **** //	while( timer_standby )
 784:src/main.c    **** 	while( 1 )
 785:src/main.c    **** 	{
 786:src/main.c    **** 		if (gps_pckt_ready)
 787:src/main.c    **** 		{
 788:src/main.c    **** 			gps_pckt_ready = 0;
 789:src/main.c    **** 			//Usart2SendSingle('P');
 790:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
 791:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
 792:src/main.c    **** 		}
 793:src/main.c    **** 
 794:src/main.c    **** 		GPSProcess();
 795:src/main.c    **** 	}
 796:src/main.c    **** #endif
 797:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
 798:src/main.c    **** 
 799:src/main.c    **** 	//---------- Prueba con GSM --------//
 800:src/main.c    **** #ifdef USE_GSM
 801:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
 802:src/main.c    **** 
 803:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 804:src/main.c    **** 
 805:src/main.c    **** 
 806:src/main.c    **** 	//Pruebo USART1
 807:src/main.c    **** //	while (1)
 808:src/main.c    **** //	{
 809:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
 810:src/main.c    **** //			Wait_ms(50);
 811:src/main.c    **** //	}
 812:src/main.c    **** 
 813:src/main.c    **** 
 814:src/main.c    **** 	//mando start al gsm
 815:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 816:src/main.c    **** 	//GPSStartResetSM ();
 817:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 818:src/main.c    **** 	while (timer_standby)
 819:src/main.c    **** 	{
 820:src/main.c    **** 		i = GSM_Start();
 821:src/main.c    **** 		if (i == 2)
 822:src/main.c    **** 		{
 823:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 824:src/main.c    **** 			timer_standby = 0;
 825:src/main.c    **** 		}
 826:src/main.c    **** 
ARM GAS  /tmp/ccC0Akiw.s 			page 56


 827:src/main.c    **** 		if (i == 4)
 828:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 829:src/main.c    **** 	}
 830:src/main.c    **** 
 831:src/main.c    **** 	//mando conf al gsm
 832:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
 833:src/main.c    **** 	//GPSConfigResetSM ();
 834:src/main.c    **** 
 835:src/main.c    **** 	i = 0;
 836:src/main.c    **** 	while (i == 0)
 837:src/main.c    **** 	{
 838:src/main.c    **** 		ii = GSM_Config(1000);
 839:src/main.c    **** 
 840:src/main.c    **** 		if (ii == 2)
 841:src/main.c    **** 			i = 0;
 842:src/main.c    **** 		else if (ii > 2)
 843:src/main.c    **** 		{
 844:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
 845:src/main.c    **** 			while (1);
 846:src/main.c    **** 		}
 847:src/main.c    **** 
 848:src/main.c    **** 		GSMProcess();
 849:src/main.c    **** 		GSMReceive ();
 850:src/main.c    **** 
 851:src/main.c    **** 		if (gsm_pckt_ready)
 852:src/main.c    **** 		{
 853:src/main.c    **** 			gsm_pckt_ready = 0;
 854:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 855:src/main.c    **** 		}
 856:src/main.c    **** 
 857:src/main.c    **** 		if (LIGHT)
 858:src/main.c    **** 			LED_ON;
 859:src/main.c    **** 		else
 860:src/main.c    **** 			LED_OFF;
 861:src/main.c    **** 	}
 862:src/main.c    **** 
 863:src/main.c    **** 
 864:src/main.c    **** 	while( 1 )
 865:src/main.c    **** 	{
 866:src/main.c    **** 		if (gsm_pckt_ready)
 867:src/main.c    **** 		{
 868:src/main.c    **** 			gsm_pckt_ready = 0;
 869:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 870:src/main.c    **** 		}
 871:src/main.c    **** 
 872:src/main.c    **** 		GSMProcess();
 873:src/main.c    **** 
 874:src/main.c    **** 		if (LIGHT)
 875:src/main.c    **** 			LED_ON;
 876:src/main.c    **** 
 877:src/main.c    **** 	}
 878:src/main.c    **** #endif
 879:src/main.c    **** 
 880:src/main.c    **** 	//---------- Pruebas con GSM GATEWAY --------//
 881:src/main.c    **** #ifdef USE_GSM_GATEWAY
 882:src/main.c    **** 	LED_OFF;
 883:src/main.c    **** 	for (i = 0; i < 6; i++)
ARM GAS  /tmp/ccC0Akiw.s 			page 57


 884:src/main.c    **** 	{
 885:src/main.c    **** 		if (LED)
 886:src/main.c    **** 			LED_OFF;
 887:src/main.c    **** 		else
 888:src/main.c    **** 			LED_ON;
 889:src/main.c    **** 
 890:src/main.c    **** 		Wait_ms (300);
 891:src/main.c    **** 	}
 892:src/main.c    **** 	Wait_ms (3000);
 893:src/main.c    **** 
 894:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 895:src/main.c    **** 
 896:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 897:src/main.c    **** 
 898:src/main.c    **** 
 899:src/main.c    **** 	//mando start al gsm
 900:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 901:src/main.c    **** 	//GPSStartResetSM ();
 902:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 903:src/main.c    **** 	while (timer_standby)
 904:src/main.c    **** 	{
 905:src/main.c    **** 		i = GSM_Start();
 906:src/main.c    **** 		if (i == 2)
 907:src/main.c    **** 		{
 908:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 909:src/main.c    **** 			timer_standby = 0;
 910:src/main.c    **** 		}
 911:src/main.c    **** 		else
 912:src/main.c    **** 
 913:src/main.c    **** 		if (i == 4)
 914:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 915:src/main.c    **** 	}
 916:src/main.c    **** 
 917:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 918:src/main.c    **** 
 919:src/main.c    **** 	while (1)
 920:src/main.c    **** 	{
 921:src/main.c    **** 		GSMProcess();
 922:src/main.c    **** 
 923:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 924:src/main.c    **** 		{
 925:src/main.c    **** 			usart2_pckt_ready = 0;
 926:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 927:src/main.c    **** 		}
 928:src/main.c    **** 
 929:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 930:src/main.c    **** 		{
 931:src/main.c    **** 			gsm_pckt_ready = 0;
 932:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 933:src/main.c    **** 		}
 934:src/main.c    **** 
 935:src/main.c    **** 		if (LIGHT)
 936:src/main.c    **** 			LED_ON;
 937:src/main.c    **** 		else
 938:src/main.c    **** 			LED_OFF;
 939:src/main.c    **** 	}
 940:src/main.c    **** #endif
ARM GAS  /tmp/ccC0Akiw.s 			page 58


 941:src/main.c    **** 
 942:src/main.c    **** 	//---------- Fin Prueba con GSM GATEWAY --------//
 943:src/main.c    **** 
 944:src/main.c    **** 
 945:src/main.c    **** 
 946:src/main.c    **** 	//---------- Prueba temp --------//
 947:src/main.c    **** 	/*
 948:src/main.c    **** 	while (1)
 949:src/main.c    **** 	{
 950:src/main.c    **** 		local_meas = GetTemp();
 951:src/main.c    **** 		if (local_meas != local_meas_last)
 952:src/main.c    **** 		{
 953:src/main.c    **** 			LED_ON;
 954:src/main.c    **** 			local_meas_last = local_meas;
 955:src/main.c    **** 			LCD_2DO_RENGLON;
 956:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
 957:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
 958:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
 959:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
 960:src/main.c    **** 			LCDTransmitStr(s_lcd);
 961:src/main.c    **** 			LED_OFF;
 962:src/main.c    **** 		}
 963:src/main.c    **** 
 964:src/main.c    **** 		UpdateTemp();
 965:src/main.c    **** 	}
 966:src/main.c    **** 	*/
 967:src/main.c    **** 	//---------- Fin prueba temp --------//
 968:src/main.c    **** 
 969:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
 970:src/main.c    **** 	/*
 971:src/main.c    **** 	local_meas = 0;
 972:src/main.c    **** 	while (1)
 973:src/main.c    **** 	{
 974:src/main.c    **** 		LCD_2DO_RENGLON;
 975:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
 976:src/main.c    **** 		fcalc = local_meas;
 977:src/main.c    **** 		fcalc = fcalc * K_1TO10;
 978:src/main.c    **** 		one_int = (short) fcalc;
 979:src/main.c    **** 		fcalc = fcalc - one_int;
 980:src/main.c    **** 		fcalc = fcalc * 10;
 981:src/main.c    **** 		one_dec = (short) fcalc;
 982:src/main.c    **** 
 983:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
 984:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
 985:src/main.c    **** 		LCDTransmitStr(s_lcd);
 986:src/main.c    **** 
 987:src/main.c    **** 		Wait_ms (1000);
 988:src/main.c    **** 		if (local_meas <= 255)
 989:src/main.c    **** 			local_meas = 0;
 990:src/main.c    **** 		else
 991:src/main.c    **** 			local_meas++;
 992:src/main.c    **** 	}
 993:src/main.c    **** 	*/
 994:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
 995:src/main.c    **** 
 996:src/main.c    **** 
 997:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
ARM GAS  /tmp/ccC0Akiw.s 			page 59


 998:src/main.c    **** 
 999:src/main.c    **** 	return 0;
1000:src/main.c    **** }
1001:src/main.c    **** 
1002:src/main.c    **** //--- End of Main ---//
1003:src/main.c    **** 
1004:src/main.c    **** 
1005:src/main.c    **** 
1006:src/main.c    **** 
1007:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
1008:src/main.c    **** {
 1272              		.loc 2 1008 0
 1273              		.cfi_startproc
 1274 0000 00B5     		push	{lr}	@
 1275              	.LCFI6:
 1276              		.cfi_def_cfa_offset 4
 1277              		.cfi_offset 14, -4
 1278 0002 97B0     		sub	sp, sp, #92	@,,
 1279              	.LCFI7:
 1280              		.cfi_def_cfa_offset 96
 1281 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
1009:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1282              		.loc 2 1009 0
 1283 0006 0123     		movs	r3, #1	@ tmp112,
 1284 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1285 000a 0223     		movs	r3, #2	@ tmp113,
 1286 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1287 000e 0323     		movs	r3, #3	@ tmp114,
 1288 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1289 0012 0423     		movs	r3, #4	@ tmp115,
 1290 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1291 0016 0523     		movs	r3, #5	@ tmp116,
 1292 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1293 001a 0623     		movs	r3, #6	@ tmp117,
 1294 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
1010:src/main.c    ****       char tempbuff[40];
1011:src/main.c    ****       volatile float HUMIDITY_Value;
1012:src/main.c    ****       volatile float TEMPERATURE_Value;
1013:src/main.c    ****       volatile float PRESSURE_Value;
1014:src/main.c    **** 
1015:src/main.c    **** 
1016:src/main.c    **** 
1017:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1295              		.loc 2 1017 0
 1296 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1297 0020 1E4B     		ldr	r3, .L53	@ tmp119,
 1298 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1299 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1300 0026 1823     		movs	r3, #24	@ tmp122,
 1301 0028 1A00     		movs	r2, r3	@, tmp122
 1302 002a FFF7FEFF 		bl	memcpy	@
1018:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1019:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1020:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1303              		.loc 2 1020 0
 1304 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1305 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
ARM GAS  /tmp/ccC0Akiw.s 			page 60


 1306 0032 1B49     		ldr	r1, .L53+4	@ tmp127,
 1307 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1308 0036 FFF7FEFF 		bl	sprintf	@
1021:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1309              		.loc 2 1021 0
 1310 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1311 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1312 003e 1100     		movs	r1, r2	@, tmp129
 1313 0040 1800     		movs	r0, r3	@, tmp130
 1314 0042 FFF7FEFF 		bl	strcat	@
1022:src/main.c    **** 
1023:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1024:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1025:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1315              		.loc 2 1025 0
 1316 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1317 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1318 004a 1649     		ldr	r1, .L53+8	@ tmp133,
 1319 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1320 004e FFF7FEFF 		bl	sprintf	@
1026:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1321              		.loc 2 1026 0
 1322 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1323 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1324 0056 1100     		movs	r1, r2	@, tmp135
 1325 0058 1800     		movs	r0, r3	@, tmp136
 1326 005a FFF7FEFF 		bl	strcat	@
1027:src/main.c    **** 
1028:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1029:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1030:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1327              		.loc 2 1030 0
 1328 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1329 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1330 0062 1149     		ldr	r1, .L53+12	@ tmp139,
 1331 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1332 0066 FFF7FEFF 		bl	sprintf	@
1031:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1333              		.loc 2 1031 0
 1334 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1335 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1336 006e 1100     		movs	r1, r2	@, tmp141
 1337 0070 1800     		movs	r0, r3	@, tmp142
 1338 0072 FFF7FEFF 		bl	strcat	@
1032:src/main.c    **** 
1033:src/main.c    **** 
1034:src/main.c    ****       strcat((char *)buffer,"}}");
 1339              		.loc 2 1034 0
 1340 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1341 0078 1800     		movs	r0, r3	@, tmp143
 1342 007a FFF7FEFF 		bl	strlen	@
 1343 007e 0300     		movs	r3, r0	@ tmp144,
 1344 0080 1A00     		movs	r2, r3	@ D.7190, tmp145
 1345 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1346 0084 9A18     		adds	r2, r3, r2	@ D.7191, tmp146, D.7190
 1347 0086 094B     		ldr	r3, .L53+16	@ tmp147,
 1348 0088 1000     		movs	r0, r2	@ tmp148, D.7191
ARM GAS  /tmp/ccC0Akiw.s 			page 61


 1349 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1350 008c 0323     		movs	r3, #3	@ tmp150,
 1351 008e 1A00     		movs	r2, r3	@, tmp150
 1352 0090 FFF7FEFF 		bl	memcpy	@
1035:src/main.c    **** 
1036:src/main.c    ****       return;
 1353              		.loc 2 1036 0
 1354 0094 C046     		nop
1037:src/main.c    **** }
 1355              		.loc 2 1037 0
 1356 0096 17B0     		add	sp, sp, #92	@,,
 1357              		@ sp needed	@
 1358 0098 00BD     		pop	{pc}
 1359              	.L54:
 1360 009a C046     		.align	2
 1361              	.L53:
 1362 009c 10010000 		.word	.LC37
 1363 00a0 28010000 		.word	.LC39
 1364 00a4 44010000 		.word	.LC41
 1365 00a8 5C010000 		.word	.LC43
 1366 00ac 74010000 		.word	.LC45
 1367              		.cfi_endproc
 1368              	.LFE21:
 1369              		.size	prepare_json_pkt, .-prepare_json_pkt
 1370              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1371              		.align	2
 1372              		.global	TimingDelay_Decrement
 1373              		.code	16
 1374              		.thumb_func
 1375              		.type	TimingDelay_Decrement, %function
 1376              	TimingDelay_Decrement:
 1377              	.LFB22:
1038:src/main.c    **** 
1039:src/main.c    **** //void EXTI4_15_IRQHandler(void)
1040:src/main.c    **** //{
1041:src/main.c    **** //	unsigned short aux;
1042:src/main.c    **** //
1043:src/main.c    **** ////--- SOLO PRUEBA DE INTERRUPCIONES ---//
1044:src/main.c    **** ////	if (DMX_INPUT)
1045:src/main.c    **** ////		LED_ON;
1046:src/main.c    **** ////	else
1047:src/main.c    **** ////		LED_OFF;
1048:src/main.c    **** ////
1049:src/main.c    **** ////	EXTI->PR |= 0x0100;
1050:src/main.c    **** //
1051:src/main.c    **** //	if(EXTI->PR & 0x0100)	//Line8
1052:src/main.c    **** //	{
1053:src/main.c    **** //
1054:src/main.c    **** //		//si no esta con el USART detecta el flanco	PONER TIMEOUT ACA?????
1055:src/main.c    **** //		if ((dmx_receive_flag == 0) || (dmx_timeout_timer == 0))
1056:src/main.c    **** //		//if (dmx_receive_flag == 0)
1057:src/main.c    **** //		{
1058:src/main.c    **** //			switch (signal_state)
1059:src/main.c    **** //			{
1060:src/main.c    **** //				case IDLE:
1061:src/main.c    **** //					if (!(DMX_INPUT))
1062:src/main.c    **** //					{
ARM GAS  /tmp/ccC0Akiw.s 			page 62


1063:src/main.c    **** //						//Activo timer en Falling.
1064:src/main.c    **** //						TIM14->CNT = 0;
1065:src/main.c    **** //						TIM14->CR1 |= 0x0001;
1066:src/main.c    **** //						signal_state++;
1067:src/main.c    **** //					}
1068:src/main.c    **** //					break;
1069:src/main.c    **** //
1070:src/main.c    **** //				case LOOK_FOR_BREAK:
1071:src/main.c    **** //					if (DMX_INPUT)
1072:src/main.c    **** //					{
1073:src/main.c    **** //						//Desactivo timer en Rising.
1074:src/main.c    **** //						aux = TIM14->CNT;
1075:src/main.c    **** //
1076:src/main.c    **** //						//reviso BREAK
1077:src/main.c    **** //						//if (((tim_counter_65ms) || (aux > 88)) && (tim_counter_65ms <= 20))
1078:src/main.c    **** //						if ((aux > 87) && (aux < 210))	//Consola STARLET 6
1079:src/main.c    **** //						//if ((aux > 87) && (aux < 2000))		//Consola marca CODE tiene break 1.88ms
1080:src/main.c    **** //						{
1081:src/main.c    **** //							LED_ON;
1082:src/main.c    **** //							//Activo timer para ver MARK.
1083:src/main.c    **** //							//TIM2->CNT = 0;
1084:src/main.c    **** //							//TIM2->CR1 |= 0x0001;
1085:src/main.c    **** //
1086:src/main.c    **** //							signal_state++;
1087:src/main.c    **** //							//tengo el break, activo el puerto serie
1088:src/main.c    **** //							DMX_channel_received = 0;
1089:src/main.c    **** //							//dmx_receive_flag = 1;
1090:src/main.c    **** //
1091:src/main.c    **** //							dmx_timeout_timer = DMX_TIMEOUT;		//activo el timer cuando prendo el puerto serie
1092:src/main.c    **** //							//USARTx_RX_ENA;
1093:src/main.c    **** //						}
1094:src/main.c    **** //						else	//falso disparo
1095:src/main.c    **** //							signal_state = IDLE;
1096:src/main.c    **** //					}
1097:src/main.c    **** //					else	//falso disparo
1098:src/main.c    **** //						signal_state = IDLE;
1099:src/main.c    **** //
1100:src/main.c    **** //					TIM14->CR1 &= 0xFFFE;
1101:src/main.c    **** //					break;
1102:src/main.c    **** //
1103:src/main.c    **** //				case LOOK_FOR_MARK:
1104:src/main.c    **** //					if ((!(DMX_INPUT)) && (dmx_timeout_timer))	//termino Mark after break
1105:src/main.c    **** //					{
1106:src/main.c    **** //						//ya tenia el serie habilitado
1107:src/main.c    **** //						//if ((aux > 7) && (aux < 12))
1108:src/main.c    **** //						dmx_receive_flag = 1;
1109:src/main.c    **** //					}
1110:src/main.c    **** //					else	//falso disparo
1111:src/main.c    **** //					{
1112:src/main.c    **** //						//termine por timeout
1113:src/main.c    **** //						dmx_receive_flag = 0;
1114:src/main.c    **** //						//USARTx_RX_DISA;
1115:src/main.c    **** //					}
1116:src/main.c    **** //					signal_state = IDLE;
1117:src/main.c    **** //					LED_OFF;
1118:src/main.c    **** //					break;
1119:src/main.c    **** //
ARM GAS  /tmp/ccC0Akiw.s 			page 63


1120:src/main.c    **** //				default:
1121:src/main.c    **** //					signal_state = IDLE;
1122:src/main.c    **** //					break;
1123:src/main.c    **** //			}
1124:src/main.c    **** //		}
1125:src/main.c    **** //
1126:src/main.c    **** //		EXTI->PR |= 0x0100;
1127:src/main.c    **** //	}
1128:src/main.c    **** //}
1129:src/main.c    **** 
1130:src/main.c    **** void TimingDelay_Decrement(void)
1131:src/main.c    **** {
 1378              		.loc 2 1131 0
 1379              		.cfi_startproc
 1380 0000 10B5     		push	{r4, lr}	@
 1381              	.LCFI8:
 1382              		.cfi_def_cfa_offset 8
 1383              		.cfi_offset 4, -8
 1384              		.cfi_offset 14, -4
1132:src/main.c    **** 	if (wait_ms_var)
 1385              		.loc 2 1132 0
 1386 0002 4B4B     		ldr	r3, .L68	@ tmp145,
 1387 0004 1B88     		ldrh	r3, [r3]	@ tmp146, wait_ms_var
 1388 0006 9BB2     		uxth	r3, r3	@ D.7204, tmp146
 1389 0008 002B     		cmp	r3, #0	@ D.7204,
 1390 000a 06D0     		beq	.L56	@,
1133:src/main.c    **** 		wait_ms_var--;
 1391              		.loc 2 1133 0
 1392 000c 484B     		ldr	r3, .L68	@ tmp147,
 1393 000e 1B88     		ldrh	r3, [r3]	@ tmp148, wait_ms_var
 1394 0010 9BB2     		uxth	r3, r3	@ D.7204, tmp148
 1395 0012 013B     		subs	r3, r3, #1	@ tmp149,
 1396 0014 9AB2     		uxth	r2, r3	@ D.7204, tmp149
 1397 0016 464B     		ldr	r3, .L68	@ tmp150,
 1398 0018 1A80     		strh	r2, [r3]	@ tmp151, wait_ms_var
 1399              	.L56:
1134:src/main.c    **** 
1135:src/main.c    **** //	if (display_timer)
1136:src/main.c    **** //		display_timer--;
1137:src/main.c    **** 
1138:src/main.c    **** 	if (timer_standby)
 1400              		.loc 2 1138 0
 1401 001a 464B     		ldr	r3, .L68+4	@ tmp152,
 1402 001c 1B88     		ldrh	r3, [r3]	@ tmp153, timer_standby
 1403 001e 9BB2     		uxth	r3, r3	@ D.7204, tmp153
 1404 0020 002B     		cmp	r3, #0	@ D.7204,
 1405 0022 06D0     		beq	.L57	@,
1139:src/main.c    **** 		timer_standby--;
 1406              		.loc 2 1139 0
 1407 0024 434B     		ldr	r3, .L68+4	@ tmp154,
 1408 0026 1B88     		ldrh	r3, [r3]	@ tmp155, timer_standby
 1409 0028 9BB2     		uxth	r3, r3	@ D.7204, tmp155
 1410 002a 013B     		subs	r3, r3, #1	@ tmp156,
 1411 002c 9AB2     		uxth	r2, r3	@ D.7204, tmp156
 1412 002e 414B     		ldr	r3, .L68+4	@ tmp157,
 1413 0030 1A80     		strh	r2, [r3]	@ tmp158, timer_standby
 1414              	.L57:
ARM GAS  /tmp/ccC0Akiw.s 			page 64


1140:src/main.c    **** 
1141:src/main.c    **** 	if (acswitch_timer)
 1415              		.loc 2 1141 0
 1416 0032 414B     		ldr	r3, .L68+8	@ tmp159,
 1417 0034 1B78     		ldrb	r3, [r3]	@ tmp160, acswitch_timer
 1418 0036 DBB2     		uxtb	r3, r3	@ D.7205, tmp160
 1419 0038 002B     		cmp	r3, #0	@ D.7205,
 1420 003a 06D0     		beq	.L58	@,
1142:src/main.c    **** 		acswitch_timer--;
 1421              		.loc 2 1142 0
 1422 003c 3E4B     		ldr	r3, .L68+8	@ tmp161,
 1423 003e 1B78     		ldrb	r3, [r3]	@ tmp162, acswitch_timer
 1424 0040 DBB2     		uxtb	r3, r3	@ D.7205, tmp162
 1425 0042 013B     		subs	r3, r3, #1	@ tmp163,
 1426 0044 DAB2     		uxtb	r2, r3	@ D.7205, tmp163
 1427 0046 3C4B     		ldr	r3, .L68+8	@ tmp164,
 1428 0048 1A70     		strb	r2, [r3]	@ tmp165, acswitch_timer
 1429              	.L58:
1143:src/main.c    **** 
1144:src/main.c    **** #ifdef USE_REDONDA_BASIC
1145:src/main.c    **** 	if (tt_take_photo_sample)
 1430              		.loc 2 1145 0
 1431 004a 3C4B     		ldr	r3, .L68+12	@ tmp166,
 1432 004c 1B88     		ldrh	r3, [r3]	@ tmp167, tt_take_photo_sample
 1433 004e 9BB2     		uxth	r3, r3	@ D.7204, tmp167
 1434 0050 002B     		cmp	r3, #0	@ D.7204,
 1435 0052 06D0     		beq	.L59	@,
1146:src/main.c    **** 		tt_take_photo_sample--;
 1436              		.loc 2 1146 0
 1437 0054 394B     		ldr	r3, .L68+12	@ tmp168,
 1438 0056 1B88     		ldrh	r3, [r3]	@ tmp169, tt_take_photo_sample
 1439 0058 9BB2     		uxth	r3, r3	@ D.7204, tmp169
 1440 005a 013B     		subs	r3, r3, #1	@ tmp170,
 1441 005c 9AB2     		uxth	r2, r3	@ D.7204, tmp170
 1442 005e 374B     		ldr	r3, .L68+12	@ tmp171,
 1443 0060 1A80     		strh	r2, [r3]	@ tmp172, tt_take_photo_sample
 1444              	.L59:
1147:src/main.c    **** 
1148:src/main.c    **** 	if (tt_relay_on_off)
 1445              		.loc 2 1148 0
 1446 0062 374B     		ldr	r3, .L68+16	@ tmp173,
 1447 0064 1B88     		ldrh	r3, [r3]	@ tmp174, tt_relay_on_off
 1448 0066 9BB2     		uxth	r3, r3	@ D.7204, tmp174
 1449 0068 002B     		cmp	r3, #0	@ D.7204,
 1450 006a 06D0     		beq	.L60	@,
1149:src/main.c    **** 		tt_relay_on_off--;
 1451              		.loc 2 1149 0
 1452 006c 344B     		ldr	r3, .L68+16	@ tmp175,
 1453 006e 1B88     		ldrh	r3, [r3]	@ tmp176, tt_relay_on_off
 1454 0070 9BB2     		uxth	r3, r3	@ D.7204, tmp176
 1455 0072 013B     		subs	r3, r3, #1	@ tmp177,
 1456 0074 9AB2     		uxth	r2, r3	@ D.7204, tmp177
 1457 0076 324B     		ldr	r3, .L68+16	@ tmp178,
 1458 0078 1A80     		strh	r2, [r3]	@ tmp179, tt_relay_on_off
 1459              	.L60:
1150:src/main.c    **** #endif
1151:src/main.c    **** 
ARM GAS  /tmp/ccC0Akiw.s 			page 65


1152:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1153:src/main.c    **** 	if (tt_take_temp_sample)
1154:src/main.c    **** 		tt_take_temp_sample--;
1155:src/main.c    **** #endif
1156:src/main.c    **** 
1157:src/main.c    **** 	if (take_temp_sample)
 1460              		.loc 2 1157 0
 1461 007a 324B     		ldr	r3, .L68+20	@ tmp180,
 1462 007c 1B88     		ldrh	r3, [r3]	@ tmp181, take_temp_sample
 1463 007e 9BB2     		uxth	r3, r3	@ D.7204, tmp181
 1464 0080 002B     		cmp	r3, #0	@ D.7204,
 1465 0082 06D0     		beq	.L61	@,
1158:src/main.c    **** 		take_temp_sample--;
 1466              		.loc 2 1158 0
 1467 0084 2F4B     		ldr	r3, .L68+20	@ tmp182,
 1468 0086 1B88     		ldrh	r3, [r3]	@ tmp183, take_temp_sample
 1469 0088 9BB2     		uxth	r3, r3	@ D.7204, tmp183
 1470 008a 013B     		subs	r3, r3, #1	@ tmp184,
 1471 008c 9AB2     		uxth	r2, r3	@ D.7204, tmp184
 1472 008e 2D4B     		ldr	r3, .L68+20	@ tmp185,
 1473 0090 1A80     		strh	r2, [r3]	@ tmp186, take_temp_sample
 1474              	.L61:
1159:src/main.c    **** 
1160:src/main.c    **** 	if (filter_timer)
 1475              		.loc 2 1160 0
 1476 0092 2D4B     		ldr	r3, .L68+24	@ tmp187,
 1477 0094 1B78     		ldrb	r3, [r3]	@ tmp188, filter_timer
 1478 0096 DBB2     		uxtb	r3, r3	@ D.7205, tmp188
 1479 0098 002B     		cmp	r3, #0	@ D.7205,
 1480 009a 06D0     		beq	.L62	@,
1161:src/main.c    **** 		filter_timer--;
 1481              		.loc 2 1161 0
 1482 009c 2A4B     		ldr	r3, .L68+24	@ tmp189,
 1483 009e 1B78     		ldrb	r3, [r3]	@ tmp190, filter_timer
 1484 00a0 DBB2     		uxtb	r3, r3	@ D.7205, tmp190
 1485 00a2 013B     		subs	r3, r3, #1	@ tmp191,
 1486 00a4 DAB2     		uxtb	r2, r3	@ D.7205, tmp191
 1487 00a6 284B     		ldr	r3, .L68+24	@ tmp192,
 1488 00a8 1A70     		strb	r2, [r3]	@ tmp193, filter_timer
 1489              	.L62:
1162:src/main.c    **** 
1163:src/main.c    **** 	//cuenta de a 1 minuto
1164:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 1490              		.loc 2 1164 0
 1491 00aa 284B     		ldr	r3, .L68+28	@ tmp194,
 1492 00ac 1B88     		ldrh	r3, [r3]	@ tmp195, secs
 1493 00ae 9BB2     		uxth	r3, r3	@ D.7204, tmp195
 1494 00b0 274A     		ldr	r2, .L68+32	@ tmp196,
 1495 00b2 9342     		cmp	r3, r2	@ D.7204, tmp196
 1496 00b4 0AD9     		bls	.L63	@,
1165:src/main.c    **** 	{
1166:src/main.c    **** 		minutes++;
 1497              		.loc 2 1166 0
 1498 00b6 274B     		ldr	r3, .L68+36	@ tmp197,
 1499 00b8 1B78     		ldrb	r3, [r3]	@ tmp198, minutes
 1500 00ba DBB2     		uxtb	r3, r3	@ D.7205, tmp198
 1501 00bc 0133     		adds	r3, r3, #1	@ tmp199,
ARM GAS  /tmp/ccC0Akiw.s 			page 66


 1502 00be DAB2     		uxtb	r2, r3	@ D.7205, tmp199
 1503 00c0 244B     		ldr	r3, .L68+36	@ tmp200,
 1504 00c2 1A70     		strb	r2, [r3]	@ tmp201, minutes
1167:src/main.c    **** 		secs = 0;
 1505              		.loc 2 1167 0
 1506 00c4 214B     		ldr	r3, .L68+28	@ tmp202,
 1507 00c6 0022     		movs	r2, #0	@ tmp203,
 1508 00c8 1A80     		strh	r2, [r3]	@ tmp204, secs
 1509 00ca 06E0     		b	.L64	@
 1510              	.L63:
1168:src/main.c    **** 	}
1169:src/main.c    **** 	else
1170:src/main.c    **** 		secs++;
 1511              		.loc 2 1170 0
 1512 00cc 1F4B     		ldr	r3, .L68+28	@ tmp205,
 1513 00ce 1B88     		ldrh	r3, [r3]	@ tmp206, secs
 1514 00d0 9BB2     		uxth	r3, r3	@ D.7204, tmp206
 1515 00d2 0133     		adds	r3, r3, #1	@ tmp207,
 1516 00d4 9AB2     		uxth	r2, r3	@ D.7204, tmp207
 1517 00d6 1D4B     		ldr	r3, .L68+28	@ tmp208,
 1518 00d8 1A80     		strh	r2, [r3]	@ tmp209, secs
 1519              	.L64:
1171:src/main.c    **** 
1172:src/main.c    **** 	if (minutes > 60)
 1520              		.loc 2 1172 0
 1521 00da 1E4B     		ldr	r3, .L68+36	@ tmp210,
 1522 00dc 1B78     		ldrb	r3, [r3]	@ tmp211, minutes
 1523 00de DBB2     		uxtb	r3, r3	@ D.7205, tmp211
 1524 00e0 3C2B     		cmp	r3, #60	@ D.7205,
 1525 00e2 09D9     		bls	.L65	@,
1173:src/main.c    **** 	{
1174:src/main.c    **** 		hours++;
 1526              		.loc 2 1174 0
 1527 00e4 1C4B     		ldr	r3, .L68+40	@ tmp212,
 1528 00e6 1B78     		ldrb	r3, [r3]	@ tmp213, hours
 1529 00e8 DBB2     		uxtb	r3, r3	@ D.7205, tmp213
 1530 00ea 0133     		adds	r3, r3, #1	@ tmp214,
 1531 00ec DAB2     		uxtb	r2, r3	@ D.7205, tmp214
 1532 00ee 1A4B     		ldr	r3, .L68+40	@ tmp215,
 1533 00f0 1A70     		strb	r2, [r3]	@ tmp216, hours
1175:src/main.c    **** 		minutes = 0;
 1534              		.loc 2 1175 0
 1535 00f2 184B     		ldr	r3, .L68+36	@ tmp217,
 1536 00f4 0022     		movs	r2, #0	@ tmp218,
 1537 00f6 1A70     		strb	r2, [r3]	@ tmp219, minutes
 1538              	.L65:
1176:src/main.c    **** 	}
1177:src/main.c    **** 
1178:src/main.c    **** 
1179:src/main.c    **** #ifdef USE_MQTT_LIB
1180:src/main.c    **** 	//timer del MQTT
1181:src/main.c    **** 	SysTickIntHandler();
1182:src/main.c    **** #endif
1183:src/main.c    **** 
1184:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1185:src/main.c    **** 	if (usart1_mini_timeout)
 1539              		.loc 2 1185 0
ARM GAS  /tmp/ccC0Akiw.s 			page 67


 1540 00f8 184B     		ldr	r3, .L68+44	@ tmp220,
 1541 00fa 1B78     		ldrb	r3, [r3]	@ tmp221, usart1_mini_timeout
 1542 00fc DBB2     		uxtb	r3, r3	@ D.7205, tmp221
 1543 00fe 002B     		cmp	r3, #0	@ D.7205,
 1544 0100 06D0     		beq	.L66	@,
1186:src/main.c    **** 		usart1_mini_timeout--;
 1545              		.loc 2 1186 0
 1546 0102 164B     		ldr	r3, .L68+44	@ tmp222,
 1547 0104 1B78     		ldrb	r3, [r3]	@ tmp223, usart1_mini_timeout
 1548 0106 DBB2     		uxtb	r3, r3	@ D.7205, tmp223
 1549 0108 013B     		subs	r3, r3, #1	@ tmp224,
 1550 010a DAB2     		uxtb	r2, r3	@ D.7205, tmp224
 1551 010c 134B     		ldr	r3, .L68+44	@ tmp225,
 1552 010e 1A70     		strb	r2, [r3]	@ tmp226, usart1_mini_timeout
 1553              	.L66:
1187:src/main.c    **** 	if (usart2_mini_timeout)
 1554              		.loc 2 1187 0
 1555 0110 134B     		ldr	r3, .L68+48	@ tmp227,
 1556 0112 1B78     		ldrb	r3, [r3]	@ tmp228, usart2_mini_timeout
 1557 0114 DBB2     		uxtb	r3, r3	@ D.7205, tmp228
 1558 0116 002B     		cmp	r3, #0	@ D.7205,
 1559 0118 06D0     		beq	.L67	@,
1188:src/main.c    **** 		usart2_mini_timeout--;
 1560              		.loc 2 1188 0
 1561 011a 114B     		ldr	r3, .L68+48	@ tmp229,
 1562 011c 1B78     		ldrb	r3, [r3]	@ tmp230, usart2_mini_timeout
 1563 011e DBB2     		uxtb	r3, r3	@ D.7205, tmp230
 1564 0120 013B     		subs	r3, r3, #1	@ tmp231,
 1565 0122 DAB2     		uxtb	r2, r3	@ D.7205, tmp231
 1566 0124 0E4B     		ldr	r3, .L68+48	@ tmp232,
 1567 0126 1A70     		strb	r2, [r3]	@ tmp233, usart2_mini_timeout
 1568              	.L67:
1189:src/main.c    **** #endif
1190:src/main.c    **** #ifdef USE_GPS
1191:src/main.c    **** 	GPSTimeoutCounters ();
1192:src/main.c    **** #endif
1193:src/main.c    **** 
1194:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1195:src/main.c    **** 	GSMTimeoutCounters ();
 1569              		.loc 2 1195 0
 1570 0128 FFF7FEFF 		bl	GSMTimeoutCounters	@
1196:src/main.c    **** #endif
1197:src/main.c    **** }
 1571              		.loc 2 1197 0
 1572 012c C046     		nop
 1573              		@ sp needed	@
 1574 012e 10BD     		pop	{r4, pc}
 1575              	.L69:
 1576              		.align	2
 1577              	.L68:
 1578 0130 00000000 		.word	wait_ms_var
 1579 0134 00000000 		.word	timer_standby
 1580 0138 00000000 		.word	acswitch_timer
 1581 013c 00000000 		.word	tt_take_photo_sample
 1582 0140 00000000 		.word	tt_relay_on_off
 1583 0144 00000000 		.word	take_temp_sample
 1584 0148 00000000 		.word	filter_timer
ARM GAS  /tmp/ccC0Akiw.s 			page 68


 1585 014c 00000000 		.word	secs
 1586 0150 5FEA0000 		.word	59999
 1587 0154 00000000 		.word	minutes
 1588 0158 00000000 		.word	hours
 1589 015c 00000000 		.word	usart1_mini_timeout
 1590 0160 00000000 		.word	usart2_mini_timeout
 1591              		.cfi_endproc
 1592              	.LFE22:
 1593              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1594              		.text
 1595              	.Letext0:
 1596              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1597              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1598              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1599              		.file 6 "src/hard.h"
 1600              		.file 7 "src/flash_program.h"
 1601              		.file 8 "src/tcp_transceiver.h"
 1602              		.file 9 "src/funcs_gsm.h"
 1603              		.section	.debug_info,"",%progbits
 1604              	.Ldebug_info0:
 1605 0000 060E0000 		.4byte	0xe06
 1606 0004 0200     		.2byte	0x2
 1607 0006 00000000 		.4byte	.Ldebug_abbrev0
 1608 000a 04       		.byte	0x4
 1609 000b 01       		.uleb128 0x1
 1610 000c 17090000 		.4byte	.LASF201
 1611 0010 0C       		.byte	0xc
 1612 0011 E4080000 		.4byte	.LASF202
 1613 0015 4B070000 		.4byte	.LASF203
 1614 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1615 001d 00000000 		.4byte	0
 1616 0021 00000000 		.4byte	0
 1617 0025 00000000 		.4byte	.Ldebug_line0
 1618 0029 02       		.uleb128 0x2
 1619 002a AC050000 		.4byte	.LASF109
 1620 002e 01       		.byte	0x1
 1621 002f 06010000 		.4byte	0x106
 1622 0033 03       		.byte	0x3
 1623 0034 C7       		.byte	0xc7
 1624 0035 06010000 		.4byte	0x106
 1625 0039 03       		.uleb128 0x3
 1626 003a 36060000 		.4byte	.LASF0
 1627 003e 72       		.sleb128 -14
 1628 003f 03       		.uleb128 0x3
 1629 0040 D8090000 		.4byte	.LASF1
 1630 0044 73       		.sleb128 -13
 1631 0045 03       		.uleb128 0x3
 1632 0046 D3000000 		.4byte	.LASF2
 1633 004a 7B       		.sleb128 -5
 1634 004b 03       		.uleb128 0x3
 1635 004c B2010000 		.4byte	.LASF3
 1636 0050 7E       		.sleb128 -2
 1637 0051 03       		.uleb128 0x3
 1638 0052 F2060000 		.4byte	.LASF4
 1639 0056 7F       		.sleb128 -1
 1640 0057 04       		.uleb128 0x4
 1641 0058 48040000 		.4byte	.LASF5
ARM GAS  /tmp/ccC0Akiw.s 			page 69


 1642 005c 00       		.byte	0
 1643 005d 04       		.uleb128 0x4
 1644 005e 17050000 		.4byte	.LASF6
 1645 0062 01       		.byte	0x1
 1646 0063 04       		.uleb128 0x4
 1647 0064 DC050000 		.4byte	.LASF7
 1648 0068 02       		.byte	0x2
 1649 0069 04       		.uleb128 0x4
 1650 006a 3A010000 		.4byte	.LASF8
 1651 006e 03       		.byte	0x3
 1652 006f 04       		.uleb128 0x4
 1653 0070 CF010000 		.4byte	.LASF9
 1654 0074 04       		.byte	0x4
 1655 0075 04       		.uleb128 0x4
 1656 0076 7E010000 		.4byte	.LASF10
 1657 007a 05       		.byte	0x5
 1658 007b 04       		.uleb128 0x4
 1659 007c B0000000 		.4byte	.LASF11
 1660 0080 06       		.byte	0x6
 1661 0081 04       		.uleb128 0x4
 1662 0082 86000000 		.4byte	.LASF12
 1663 0086 07       		.byte	0x7
 1664 0087 04       		.uleb128 0x4
 1665 0088 E2040000 		.4byte	.LASF13
 1666 008c 08       		.byte	0x8
 1667 008d 04       		.uleb128 0x4
 1668 008e 7C030000 		.4byte	.LASF14
 1669 0092 09       		.byte	0x9
 1670 0093 04       		.uleb128 0x4
 1671 0094 C6070000 		.4byte	.LASF15
 1672 0098 0A       		.byte	0xa
 1673 0099 04       		.uleb128 0x4
 1674 009a 93060000 		.4byte	.LASF16
 1675 009e 0B       		.byte	0xb
 1676 009f 04       		.uleb128 0x4
 1677 00a0 3B050000 		.4byte	.LASF17
 1678 00a4 0C       		.byte	0xc
 1679 00a5 04       		.uleb128 0x4
 1680 00a6 F5040000 		.4byte	.LASF18
 1681 00aa 0D       		.byte	0xd
 1682 00ab 04       		.uleb128 0x4
 1683 00ac 53060000 		.4byte	.LASF19
 1684 00b0 0E       		.byte	0xe
 1685 00b1 04       		.uleb128 0x4
 1686 00b2 32070000 		.4byte	.LASF20
 1687 00b6 0F       		.byte	0xf
 1688 00b7 04       		.uleb128 0x4
 1689 00b8 72030000 		.4byte	.LASF21
 1690 00bc 10       		.byte	0x10
 1691 00bd 04       		.uleb128 0x4
 1692 00be E3070000 		.4byte	.LASF22
 1693 00c2 11       		.byte	0x11
 1694 00c3 04       		.uleb128 0x4
 1695 00c4 BB070000 		.4byte	.LASF23
 1696 00c8 13       		.byte	0x13
 1697 00c9 04       		.uleb128 0x4
 1698 00ca A7030000 		.4byte	.LASF24
ARM GAS  /tmp/ccC0Akiw.s 			page 70


 1699 00ce 14       		.byte	0x14
 1700 00cf 04       		.uleb128 0x4
 1701 00d0 0C010000 		.4byte	.LASF25
 1702 00d4 15       		.byte	0x15
 1703 00d5 04       		.uleb128 0x4
 1704 00d6 7C060000 		.4byte	.LASF26
 1705 00da 16       		.byte	0x16
 1706 00db 04       		.uleb128 0x4
 1707 00dc A8010000 		.4byte	.LASF27
 1708 00e0 17       		.byte	0x17
 1709 00e1 04       		.uleb128 0x4
 1710 00e2 16070000 		.4byte	.LASF28
 1711 00e6 18       		.byte	0x18
 1712 00e7 04       		.uleb128 0x4
 1713 00e8 1A020000 		.4byte	.LASF29
 1714 00ec 19       		.byte	0x19
 1715 00ed 04       		.uleb128 0x4
 1716 00ee 87080000 		.4byte	.LASF30
 1717 00f2 1A       		.byte	0x1a
 1718 00f3 04       		.uleb128 0x4
 1719 00f4 2A060000 		.4byte	.LASF31
 1720 00f8 1B       		.byte	0x1b
 1721 00f9 04       		.uleb128 0x4
 1722 00fa 9A020000 		.4byte	.LASF32
 1723 00fe 1C       		.byte	0x1c
 1724 00ff 04       		.uleb128 0x4
 1725 0100 FF060000 		.4byte	.LASF33
 1726 0104 1E       		.byte	0x1e
 1727 0105 00       		.byte	0
 1728 0106 05       		.uleb128 0x5
 1729 0107 01       		.byte	0x1
 1730 0108 06       		.byte	0x6
 1731 0109 D8080000 		.4byte	.LASF36
 1732 010d 06       		.uleb128 0x6
 1733 010e 84020000 		.4byte	.LASF34
 1734 0112 03       		.byte	0x3
 1735 0113 5F01     		.2byte	0x15f
 1736 0115 29000000 		.4byte	0x29
 1737 0119 07       		.uleb128 0x7
 1738 011a B5060000 		.4byte	.LASF35
 1739 011e 04       		.byte	0x4
 1740 011f 1D       		.byte	0x1d
 1741 0120 24010000 		.4byte	0x124
 1742 0124 05       		.uleb128 0x5
 1743 0125 01       		.byte	0x1
 1744 0126 08       		.byte	0x8
 1745 0127 F1070000 		.4byte	.LASF37
 1746 012b 05       		.uleb128 0x5
 1747 012c 02       		.byte	0x2
 1748 012d 05       		.byte	0x5
 1749 012e 17060000 		.4byte	.LASF38
 1750 0132 07       		.uleb128 0x7
 1751 0133 52020000 		.4byte	.LASF39
 1752 0137 04       		.byte	0x4
 1753 0138 2B       		.byte	0x2b
 1754 0139 3D010000 		.4byte	0x13d
 1755 013d 05       		.uleb128 0x5
ARM GAS  /tmp/ccC0Akiw.s 			page 71


 1756 013e 02       		.byte	0x2
 1757 013f 07       		.byte	0x7
 1758 0140 04090000 		.4byte	.LASF40
 1759 0144 07       		.uleb128 0x7
 1760 0145 28010000 		.4byte	.LASF41
 1761 0149 04       		.byte	0x4
 1762 014a 3F       		.byte	0x3f
 1763 014b 4F010000 		.4byte	0x14f
 1764 014f 05       		.uleb128 0x5
 1765 0150 04       		.byte	0x4
 1766 0151 05       		.byte	0x5
 1767 0152 21060000 		.4byte	.LASF42
 1768 0156 07       		.uleb128 0x7
 1769 0157 08080000 		.4byte	.LASF43
 1770 015b 04       		.byte	0x4
 1771 015c 41       		.byte	0x41
 1772 015d 61010000 		.4byte	0x161
 1773 0161 05       		.uleb128 0x5
 1774 0162 04       		.byte	0x4
 1775 0163 07       		.byte	0x7
 1776 0164 20070000 		.4byte	.LASF44
 1777 0168 05       		.uleb128 0x5
 1778 0169 08       		.byte	0x8
 1779 016a 05       		.byte	0x5
 1780 016b 3A040000 		.4byte	.LASF45
 1781 016f 05       		.uleb128 0x5
 1782 0170 08       		.byte	0x8
 1783 0171 07       		.byte	0x7
 1784 0172 24020000 		.4byte	.LASF46
 1785 0176 08       		.uleb128 0x8
 1786 0177 04       		.byte	0x4
 1787 0178 05       		.byte	0x5
 1788 0179 696E7400 		.ascii	"int\000"
 1789 017d 05       		.uleb128 0x5
 1790 017e 04       		.byte	0x4
 1791 017f 07       		.byte	0x7
 1792 0180 FA000000 		.4byte	.LASF47
 1793 0184 07       		.uleb128 0x7
 1794 0185 B2030000 		.4byte	.LASF48
 1795 0189 05       		.byte	0x5
 1796 018a 14       		.byte	0x14
 1797 018b 19010000 		.4byte	0x119
 1798 018f 07       		.uleb128 0x7
 1799 0190 94050000 		.4byte	.LASF49
 1800 0194 05       		.byte	0x5
 1801 0195 1A       		.byte	0x1a
 1802 0196 32010000 		.4byte	0x132
 1803 019a 07       		.uleb128 0x7
 1804 019b 8F070000 		.4byte	.LASF50
 1805 019f 05       		.byte	0x5
 1806 01a0 1F       		.byte	0x1f
 1807 01a1 44010000 		.4byte	0x144
 1808 01a5 07       		.uleb128 0x7
 1809 01a6 E7010000 		.4byte	.LASF51
 1810 01aa 05       		.byte	0x5
 1811 01ab 20       		.byte	0x20
 1812 01ac 56010000 		.4byte	0x156
ARM GAS  /tmp/ccC0Akiw.s 			page 72


 1813 01b0 09       		.uleb128 0x9
 1814 01b1 2003     		.2byte	0x320
 1815 01b3 01       		.byte	0x1
 1816 01b4 71       		.byte	0x71
 1817 01b5 4D020000 		.4byte	0x24d
 1818 01b9 0A       		.uleb128 0xa
 1819 01ba F0010000 		.4byte	.LASF52
 1820 01be 01       		.byte	0x1
 1821 01bf 73       		.byte	0x73
 1822 01c0 64020000 		.4byte	0x264
 1823 01c4 02       		.byte	0x2
 1824 01c5 23       		.byte	0x23
 1825 01c6 00       		.uleb128 0
 1826 01c7 0A       		.uleb128 0xa
 1827 01c8 E5050000 		.4byte	.LASF53
 1828 01cc 01       		.byte	0x1
 1829 01cd 74       		.byte	0x74
 1830 01ce 69020000 		.4byte	0x269
 1831 01d2 02       		.byte	0x2
 1832 01d3 23       		.byte	0x23
 1833 01d4 04       		.uleb128 0x4
 1834 01d5 0A       		.uleb128 0xa
 1835 01d6 77080000 		.4byte	.LASF54
 1836 01da 01       		.byte	0x1
 1837 01db 75       		.byte	0x75
 1838 01dc 79020000 		.4byte	0x279
 1839 01e0 03       		.byte	0x3
 1840 01e1 23       		.byte	0x23
 1841 01e2 8001     		.uleb128 0x80
 1842 01e4 0A       		.uleb128 0xa
 1843 01e5 11020000 		.4byte	.LASF55
 1844 01e9 01       		.byte	0x1
 1845 01ea 76       		.byte	0x76
 1846 01eb 69020000 		.4byte	0x269
 1847 01ef 03       		.byte	0x3
 1848 01f0 23       		.byte	0x23
 1849 01f1 8401     		.uleb128 0x84
 1850 01f3 0A       		.uleb128 0xa
 1851 01f4 070A0000 		.4byte	.LASF56
 1852 01f8 01       		.byte	0x1
 1853 01f9 77       		.byte	0x77
 1854 01fa 7E020000 		.4byte	0x27e
 1855 01fe 03       		.byte	0x3
 1856 01ff 23       		.byte	0x23
 1857 0200 8002     		.uleb128 0x100
 1858 0202 0A       		.uleb128 0xa
 1859 0203 F9050000 		.4byte	.LASF57
 1860 0207 01       		.byte	0x1
 1861 0208 78       		.byte	0x78
 1862 0209 69020000 		.4byte	0x269
 1863 020d 03       		.byte	0x3
 1864 020e 23       		.byte	0x23
 1865 020f 8402     		.uleb128 0x104
 1866 0211 0A       		.uleb128 0xa
 1867 0212 36050000 		.4byte	.LASF58
 1868 0216 01       		.byte	0x1
 1869 0217 79       		.byte	0x79
ARM GAS  /tmp/ccC0Akiw.s 			page 73


 1870 0218 83020000 		.4byte	0x283
 1871 021c 03       		.byte	0x3
 1872 021d 23       		.byte	0x23
 1873 021e 8003     		.uleb128 0x180
 1874 0220 0A       		.uleb128 0xa
 1875 0221 03060000 		.4byte	.LASF59
 1876 0225 01       		.byte	0x1
 1877 0226 7A       		.byte	0x7a
 1878 0227 69020000 		.4byte	0x269
 1879 022b 03       		.byte	0x3
 1880 022c 23       		.byte	0x23
 1881 022d 8403     		.uleb128 0x184
 1882 022f 0A       		.uleb128 0xa
 1883 0230 0D060000 		.4byte	.LASF60
 1884 0234 01       		.byte	0x1
 1885 0235 7B       		.byte	0x7b
 1886 0236 88020000 		.4byte	0x288
 1887 023a 03       		.byte	0x3
 1888 023b 23       		.byte	0x23
 1889 023c 8004     		.uleb128 0x200
 1890 023e 0B       		.uleb128 0xb
 1891 023f 495000   		.ascii	"IP\000"
 1892 0242 01       		.byte	0x1
 1893 0243 7C       		.byte	0x7c
 1894 0244 A8020000 		.4byte	0x2a8
 1895 0248 03       		.byte	0x3
 1896 0249 23       		.byte	0x23
 1897 024a 8006     		.uleb128 0x300
 1898 024c 00       		.byte	0
 1899 024d 0C       		.uleb128 0xc
 1900 024e A5010000 		.4byte	0x1a5
 1901 0252 5D020000 		.4byte	0x25d
 1902 0256 0D       		.uleb128 0xd
 1903 0257 5D020000 		.4byte	0x25d
 1904 025b 00       		.byte	0
 1905 025c 00       		.byte	0
 1906 025d 05       		.uleb128 0x5
 1907 025e 04       		.byte	0x4
 1908 025f 07       		.byte	0x7
 1909 0260 08070000 		.4byte	.LASF61
 1910 0264 0E       		.uleb128 0xe
 1911 0265 4D020000 		.4byte	0x24d
 1912 0269 0C       		.uleb128 0xc
 1913 026a A5010000 		.4byte	0x1a5
 1914 026e 79020000 		.4byte	0x279
 1915 0272 0D       		.uleb128 0xd
 1916 0273 5D020000 		.4byte	0x25d
 1917 0277 1E       		.byte	0x1e
 1918 0278 00       		.byte	0
 1919 0279 0E       		.uleb128 0xe
 1920 027a 4D020000 		.4byte	0x24d
 1921 027e 0E       		.uleb128 0xe
 1922 027f 4D020000 		.4byte	0x24d
 1923 0283 0E       		.uleb128 0xe
 1924 0284 4D020000 		.4byte	0x24d
 1925 0288 0C       		.uleb128 0xc
 1926 0289 A5010000 		.4byte	0x1a5
ARM GAS  /tmp/ccC0Akiw.s 			page 74


 1927 028d 98020000 		.4byte	0x298
 1928 0291 0D       		.uleb128 0xd
 1929 0292 5D020000 		.4byte	0x25d
 1930 0296 3F       		.byte	0x3f
 1931 0297 00       		.byte	0
 1932 0298 0C       		.uleb128 0xc
 1933 0299 A5010000 		.4byte	0x1a5
 1934 029d A8020000 		.4byte	0x2a8
 1935 02a1 0D       		.uleb128 0xd
 1936 02a2 5D020000 		.4byte	0x25d
 1937 02a6 07       		.byte	0x7
 1938 02a7 00       		.byte	0
 1939 02a8 0E       		.uleb128 0xe
 1940 02a9 98020000 		.4byte	0x298
 1941 02ad 07       		.uleb128 0x7
 1942 02ae CB060000 		.4byte	.LASF62
 1943 02b2 01       		.byte	0x1
 1944 02b3 7D       		.byte	0x7d
 1945 02b4 B0010000 		.4byte	0x1b0
 1946 02b8 0F       		.uleb128 0xf
 1947 02b9 34       		.byte	0x34
 1948 02ba 01       		.byte	0x1
 1949 02bb 86       		.byte	0x86
 1950 02bc 5B030000 		.4byte	0x35b
 1951 02c0 0A       		.uleb128 0xa
 1952 02c1 A6020000 		.4byte	.LASF63
 1953 02c5 01       		.byte	0x1
 1954 02c6 88       		.byte	0x88
 1955 02c7 60030000 		.4byte	0x360
 1956 02cb 02       		.byte	0x2
 1957 02cc 23       		.byte	0x23
 1958 02cd 00       		.uleb128 0
 1959 02ce 0A       		.uleb128 0xa
 1960 02cf 11070000 		.4byte	.LASF64
 1961 02d3 01       		.byte	0x1
 1962 02d4 89       		.byte	0x89
 1963 02d5 5B030000 		.4byte	0x35b
 1964 02d9 02       		.byte	0x2
 1965 02da 23       		.byte	0x23
 1966 02db 04       		.uleb128 0x4
 1967 02dc 0A       		.uleb128 0xa
 1968 02dd E5050000 		.4byte	.LASF53
 1969 02e1 01       		.byte	0x1
 1970 02e2 8A       		.byte	0x8a
 1971 02e3 A5010000 		.4byte	0x1a5
 1972 02e7 02       		.byte	0x2
 1973 02e8 23       		.byte	0x23
 1974 02e9 08       		.uleb128 0x8
 1975 02ea 0A       		.uleb128 0xa
 1976 02eb 5B030000 		.4byte	.LASF65
 1977 02ef 01       		.byte	0x1
 1978 02f0 8B       		.byte	0x8b
 1979 02f1 5B030000 		.4byte	0x35b
 1980 02f5 02       		.byte	0x2
 1981 02f6 23       		.byte	0x23
 1982 02f7 0C       		.uleb128 0xc
 1983 02f8 0B       		.uleb128 0xb
ARM GAS  /tmp/ccC0Akiw.s 			page 75


 1984 02f9 53435200 		.ascii	"SCR\000"
 1985 02fd 01       		.byte	0x1
 1986 02fe 8C       		.byte	0x8c
 1987 02ff 5B030000 		.4byte	0x35b
 1988 0303 02       		.byte	0x2
 1989 0304 23       		.byte	0x23
 1990 0305 10       		.uleb128 0x10
 1991 0306 0B       		.uleb128 0xb
 1992 0307 43435200 		.ascii	"CCR\000"
 1993 030b 01       		.byte	0x1
 1994 030c 8D       		.byte	0x8d
 1995 030d 5B030000 		.4byte	0x35b
 1996 0311 02       		.byte	0x2
 1997 0312 23       		.byte	0x23
 1998 0313 14       		.uleb128 0x14
 1999 0314 0A       		.uleb128 0xa
 2000 0315 EF050000 		.4byte	.LASF66
 2001 0319 01       		.byte	0x1
 2002 031a 8E       		.byte	0x8e
 2003 031b A5010000 		.4byte	0x1a5
 2004 031f 02       		.byte	0x2
 2005 0320 23       		.byte	0x23
 2006 0321 18       		.uleb128 0x18
 2007 0322 0B       		.uleb128 0xb
 2008 0323 53485000 		.ascii	"SHP\000"
 2009 0327 01       		.byte	0x1
 2010 0328 8F       		.byte	0x8f
 2011 0329 75030000 		.4byte	0x375
 2012 032d 02       		.byte	0x2
 2013 032e 23       		.byte	0x23
 2014 032f 1C       		.uleb128 0x1c
 2015 0330 0A       		.uleb128 0xa
 2016 0331 52040000 		.4byte	.LASF67
 2017 0335 01       		.byte	0x1
 2018 0336 90       		.byte	0x90
 2019 0337 5B030000 		.4byte	0x35b
 2020 033b 02       		.byte	0x2
 2021 033c 23       		.byte	0x23
 2022 033d 24       		.uleb128 0x24
 2023 033e 0A       		.uleb128 0xa
 2024 033f F9050000 		.4byte	.LASF57
 2025 0343 01       		.byte	0x1
 2026 0344 91       		.byte	0x91
 2027 0345 65030000 		.4byte	0x365
 2028 0349 02       		.byte	0x2
 2029 034a 23       		.byte	0x23
 2030 034b 28       		.uleb128 0x28
 2031 034c 0A       		.uleb128 0xa
 2032 034d 3B020000 		.4byte	.LASF68
 2033 0351 01       		.byte	0x1
 2034 0352 92       		.byte	0x92
 2035 0353 5B030000 		.4byte	0x35b
 2036 0357 02       		.byte	0x2
 2037 0358 23       		.byte	0x23
 2038 0359 30       		.uleb128 0x30
 2039 035a 00       		.byte	0
 2040 035b 0E       		.uleb128 0xe
ARM GAS  /tmp/ccC0Akiw.s 			page 76


 2041 035c A5010000 		.4byte	0x1a5
 2042 0360 10       		.uleb128 0x10
 2043 0361 5B030000 		.4byte	0x35b
 2044 0365 0C       		.uleb128 0xc
 2045 0366 A5010000 		.4byte	0x1a5
 2046 036a 75030000 		.4byte	0x375
 2047 036e 0D       		.uleb128 0xd
 2048 036f 5D020000 		.4byte	0x25d
 2049 0373 01       		.byte	0x1
 2050 0374 00       		.byte	0
 2051 0375 0E       		.uleb128 0xe
 2052 0376 65030000 		.4byte	0x365
 2053 037a 07       		.uleb128 0x7
 2054 037b D5060000 		.4byte	.LASF69
 2055 037f 01       		.byte	0x1
 2056 0380 93       		.byte	0x93
 2057 0381 B8020000 		.4byte	0x2b8
 2058 0385 0F       		.uleb128 0xf
 2059 0386 10       		.byte	0x10
 2060 0387 01       		.byte	0x1
 2061 0388 FC       		.byte	0xfc
 2062 0389 C8030000 		.4byte	0x3c8
 2063 038d 0A       		.uleb128 0xa
 2064 038e 4F0A0000 		.4byte	.LASF70
 2065 0392 01       		.byte	0x1
 2066 0393 FE       		.byte	0xfe
 2067 0394 5B030000 		.4byte	0x35b
 2068 0398 02       		.byte	0x2
 2069 0399 23       		.byte	0x23
 2070 039a 00       		.uleb128 0
 2071 039b 0A       		.uleb128 0xa
 2072 039c 07010000 		.4byte	.LASF71
 2073 03a0 01       		.byte	0x1
 2074 03a1 FF       		.byte	0xff
 2075 03a2 5B030000 		.4byte	0x35b
 2076 03a6 02       		.byte	0x2
 2077 03a7 23       		.byte	0x23
 2078 03a8 04       		.uleb128 0x4
 2079 03a9 11       		.uleb128 0x11
 2080 03aa 56414C00 		.ascii	"VAL\000"
 2081 03ae 01       		.byte	0x1
 2082 03af 0001     		.2byte	0x100
 2083 03b1 5B030000 		.4byte	0x35b
 2084 03b5 02       		.byte	0x2
 2085 03b6 23       		.byte	0x23
 2086 03b7 08       		.uleb128 0x8
 2087 03b8 12       		.uleb128 0x12
 2088 03b9 5E010000 		.4byte	.LASF72
 2089 03bd 01       		.byte	0x1
 2090 03be 0101     		.2byte	0x101
 2091 03c0 60030000 		.4byte	0x360
 2092 03c4 02       		.byte	0x2
 2093 03c5 23       		.byte	0x23
 2094 03c6 0C       		.uleb128 0xc
 2095 03c7 00       		.byte	0
 2096 03c8 06       		.uleb128 0x6
 2097 03c9 7B050000 		.4byte	.LASF73
ARM GAS  /tmp/ccC0Akiw.s 			page 77


 2098 03cd 01       		.byte	0x1
 2099 03ce 0201     		.2byte	0x102
 2100 03d0 85030000 		.4byte	0x385
 2101 03d4 13       		.uleb128 0x13
 2102 03d5 44       		.byte	0x44
 2103 03d6 03       		.byte	0x3
 2104 03d7 7C01     		.2byte	0x17c
 2105 03d9 9E040000 		.4byte	0x49e
 2106 03dd 11       		.uleb128 0x11
 2107 03de 49535200 		.ascii	"ISR\000"
 2108 03e2 03       		.byte	0x3
 2109 03e3 7E01     		.2byte	0x17e
 2110 03e5 5B030000 		.4byte	0x35b
 2111 03e9 02       		.byte	0x2
 2112 03ea 23       		.byte	0x23
 2113 03eb 00       		.uleb128 0
 2114 03ec 11       		.uleb128 0x11
 2115 03ed 49455200 		.ascii	"IER\000"
 2116 03f1 03       		.byte	0x3
 2117 03f2 7F01     		.2byte	0x17f
 2118 03f4 5B030000 		.4byte	0x35b
 2119 03f8 02       		.byte	0x2
 2120 03f9 23       		.byte	0x23
 2121 03fa 04       		.uleb128 0x4
 2122 03fb 11       		.uleb128 0x11
 2123 03fc 435200   		.ascii	"CR\000"
 2124 03ff 03       		.byte	0x3
 2125 0400 8001     		.2byte	0x180
 2126 0402 5B030000 		.4byte	0x35b
 2127 0406 02       		.byte	0x2
 2128 0407 23       		.byte	0x23
 2129 0408 08       		.uleb128 0x8
 2130 0409 12       		.uleb128 0x12
 2131 040a 20050000 		.4byte	.LASF74
 2132 040e 03       		.byte	0x3
 2133 040f 8101     		.2byte	0x181
 2134 0411 5B030000 		.4byte	0x35b
 2135 0415 02       		.byte	0x2
 2136 0416 23       		.byte	0x23
 2137 0417 0C       		.uleb128 0xc
 2138 0418 12       		.uleb128 0x12
 2139 0419 26050000 		.4byte	.LASF75
 2140 041d 03       		.byte	0x3
 2141 041e 8201     		.2byte	0x182
 2142 0420 5B030000 		.4byte	0x35b
 2143 0424 02       		.byte	0x2
 2144 0425 23       		.byte	0x23
 2145 0426 10       		.uleb128 0x10
 2146 0427 12       		.uleb128 0x12
 2147 0428 D0020000 		.4byte	.LASF76
 2148 042c 03       		.byte	0x3
 2149 042d 8301     		.2byte	0x183
 2150 042f 5B030000 		.4byte	0x35b
 2151 0433 02       		.byte	0x2
 2152 0434 23       		.byte	0x23
 2153 0435 14       		.uleb128 0x14
 2154 0436 12       		.uleb128 0x12
ARM GAS  /tmp/ccC0Akiw.s 			page 78


 2155 0437 EF050000 		.4byte	.LASF66
 2156 043b 03       		.byte	0x3
 2157 043c 8401     		.2byte	0x184
 2158 043e A5010000 		.4byte	0x1a5
 2159 0442 02       		.byte	0x2
 2160 0443 23       		.byte	0x23
 2161 0444 18       		.uleb128 0x18
 2162 0445 12       		.uleb128 0x12
 2163 0446 F9050000 		.4byte	.LASF57
 2164 044a 03       		.byte	0x3
 2165 044b 8501     		.2byte	0x185
 2166 044d A5010000 		.4byte	0x1a5
 2167 0451 02       		.byte	0x2
 2168 0452 23       		.byte	0x23
 2169 0453 1C       		.uleb128 0x1c
 2170 0454 11       		.uleb128 0x11
 2171 0455 545200   		.ascii	"TR\000"
 2172 0458 03       		.byte	0x3
 2173 0459 8601     		.2byte	0x186
 2174 045b 5B030000 		.4byte	0x35b
 2175 045f 02       		.byte	0x2
 2176 0460 23       		.byte	0x23
 2177 0461 20       		.uleb128 0x20
 2178 0462 12       		.uleb128 0x12
 2179 0463 03060000 		.4byte	.LASF59
 2180 0467 03       		.byte	0x3
 2181 0468 8701     		.2byte	0x187
 2182 046a A5010000 		.4byte	0x1a5
 2183 046e 02       		.byte	0x2
 2184 046f 23       		.byte	0x23
 2185 0470 24       		.uleb128 0x24
 2186 0471 12       		.uleb128 0x12
 2187 0472 6B020000 		.4byte	.LASF77
 2188 0476 03       		.byte	0x3
 2189 0477 8801     		.2byte	0x188
 2190 0479 5B030000 		.4byte	0x35b
 2191 047d 02       		.byte	0x2
 2192 047e 23       		.byte	0x23
 2193 047f 28       		.uleb128 0x28
 2194 0480 12       		.uleb128 0x12
 2195 0481 0D060000 		.4byte	.LASF60
 2196 0485 03       		.byte	0x3
 2197 0486 8901     		.2byte	0x189
 2198 0488 9E040000 		.4byte	0x49e
 2199 048c 02       		.byte	0x2
 2200 048d 23       		.byte	0x23
 2201 048e 2C       		.uleb128 0x2c
 2202 048f 11       		.uleb128 0x11
 2203 0490 445200   		.ascii	"DR\000"
 2204 0493 03       		.byte	0x3
 2205 0494 8A01     		.2byte	0x18a
 2206 0496 5B030000 		.4byte	0x35b
 2207 049a 02       		.byte	0x2
 2208 049b 23       		.byte	0x23
 2209 049c 40       		.uleb128 0x40
 2210 049d 00       		.byte	0
 2211 049e 0C       		.uleb128 0xc
ARM GAS  /tmp/ccC0Akiw.s 			page 79


 2212 049f A5010000 		.4byte	0x1a5
 2213 04a3 AE040000 		.4byte	0x4ae
 2214 04a7 0D       		.uleb128 0xd
 2215 04a8 5D020000 		.4byte	0x25d
 2216 04ac 04       		.byte	0x4
 2217 04ad 00       		.byte	0
 2218 04ae 06       		.uleb128 0x6
 2219 04af 2E040000 		.4byte	.LASF78
 2220 04b3 03       		.byte	0x3
 2221 04b4 8B01     		.2byte	0x18b
 2222 04b6 D4030000 		.4byte	0x3d4
 2223 04ba 0E       		.uleb128 0xe
 2224 04bb 8F010000 		.4byte	0x18f
 2225 04bf 13       		.uleb128 0x13
 2226 04c0 2C       		.byte	0x2c
 2227 04c1 03       		.byte	0x3
 2228 04c2 6902     		.2byte	0x269
 2229 04c4 9B050000 		.4byte	0x59b
 2230 04c8 12       		.uleb128 0x12
 2231 04c9 65020000 		.4byte	.LASF79
 2232 04cd 03       		.byte	0x3
 2233 04ce 6B02     		.2byte	0x26b
 2234 04d0 5B030000 		.4byte	0x35b
 2235 04d4 02       		.byte	0x2
 2236 04d5 23       		.byte	0x23
 2237 04d6 00       		.uleb128 0
 2238 04d7 12       		.uleb128 0x12
 2239 04d8 60060000 		.4byte	.LASF80
 2240 04dc 03       		.byte	0x3
 2241 04dd 6C02     		.2byte	0x26c
 2242 04df BA040000 		.4byte	0x4ba
 2243 04e3 02       		.byte	0x2
 2244 04e4 23       		.byte	0x23
 2245 04e5 04       		.uleb128 0x4
 2246 04e6 12       		.uleb128 0x12
 2247 04e7 E5050000 		.4byte	.LASF53
 2248 04eb 03       		.byte	0x3
 2249 04ec 6D02     		.2byte	0x26d
 2250 04ee 8F010000 		.4byte	0x18f
 2251 04f2 02       		.byte	0x2
 2252 04f3 23       		.byte	0x23
 2253 04f4 06       		.uleb128 0x6
 2254 04f5 12       		.uleb128 0x12
 2255 04f6 73050000 		.4byte	.LASF81
 2256 04fa 03       		.byte	0x3
 2257 04fb 6E02     		.2byte	0x26e
 2258 04fd 5B030000 		.4byte	0x35b
 2259 0501 02       		.byte	0x2
 2260 0502 23       		.byte	0x23
 2261 0503 08       		.uleb128 0x8
 2262 0504 12       		.uleb128 0x12
 2263 0505 0E030000 		.4byte	.LASF82
 2264 0509 03       		.byte	0x3
 2265 050a 6F02     		.2byte	0x26f
 2266 050c 5B030000 		.4byte	0x35b
 2267 0510 02       		.byte	0x2
 2268 0511 23       		.byte	0x23
ARM GAS  /tmp/ccC0Akiw.s 			page 80


 2269 0512 0C       		.uleb128 0xc
 2270 0513 11       		.uleb128 0x11
 2271 0514 49445200 		.ascii	"IDR\000"
 2272 0518 03       		.byte	0x3
 2273 0519 7002     		.2byte	0x270
 2274 051b BA040000 		.4byte	0x4ba
 2275 051f 02       		.byte	0x2
 2276 0520 23       		.byte	0x23
 2277 0521 10       		.uleb128 0x10
 2278 0522 12       		.uleb128 0x12
 2279 0523 EF050000 		.4byte	.LASF66
 2280 0527 03       		.byte	0x3
 2281 0528 7102     		.2byte	0x271
 2282 052a 8F010000 		.4byte	0x18f
 2283 052e 02       		.byte	0x2
 2284 052f 23       		.byte	0x23
 2285 0530 12       		.uleb128 0x12
 2286 0531 11       		.uleb128 0x11
 2287 0532 4F445200 		.ascii	"ODR\000"
 2288 0536 03       		.byte	0x3
 2289 0537 7202     		.2byte	0x272
 2290 0539 BA040000 		.4byte	0x4ba
 2291 053d 02       		.byte	0x2
 2292 053e 23       		.byte	0x23
 2293 053f 14       		.uleb128 0x14
 2294 0540 12       		.uleb128 0x12
 2295 0541 F9050000 		.4byte	.LASF57
 2296 0545 03       		.byte	0x3
 2297 0546 7302     		.2byte	0x273
 2298 0548 8F010000 		.4byte	0x18f
 2299 054c 02       		.byte	0x2
 2300 054d 23       		.byte	0x23
 2301 054e 16       		.uleb128 0x16
 2302 054f 12       		.uleb128 0x12
 2303 0550 94000000 		.4byte	.LASF83
 2304 0554 03       		.byte	0x3
 2305 0555 7402     		.2byte	0x274
 2306 0557 5B030000 		.4byte	0x35b
 2307 055b 02       		.byte	0x2
 2308 055c 23       		.byte	0x23
 2309 055d 18       		.uleb128 0x18
 2310 055e 12       		.uleb128 0x12
 2311 055f 4A0A0000 		.4byte	.LASF84
 2312 0563 03       		.byte	0x3
 2313 0564 7502     		.2byte	0x275
 2314 0566 5B030000 		.4byte	0x35b
 2315 056a 02       		.byte	0x2
 2316 056b 23       		.byte	0x23
 2317 056c 1C       		.uleb128 0x1c
 2318 056d 11       		.uleb128 0x11
 2319 056e 41465200 		.ascii	"AFR\000"
 2320 0572 03       		.byte	0x3
 2321 0573 7602     		.2byte	0x276
 2322 0575 9B050000 		.4byte	0x59b
 2323 0579 02       		.byte	0x2
 2324 057a 23       		.byte	0x23
 2325 057b 20       		.uleb128 0x20
ARM GAS  /tmp/ccC0Akiw.s 			page 81


 2326 057c 11       		.uleb128 0x11
 2327 057d 42525200 		.ascii	"BRR\000"
 2328 0581 03       		.byte	0x3
 2329 0582 7702     		.2byte	0x277
 2330 0584 BA040000 		.4byte	0x4ba
 2331 0588 02       		.byte	0x2
 2332 0589 23       		.byte	0x23
 2333 058a 28       		.uleb128 0x28
 2334 058b 12       		.uleb128 0x12
 2335 058c 03060000 		.4byte	.LASF59
 2336 0590 03       		.byte	0x3
 2337 0591 7802     		.2byte	0x278
 2338 0593 8F010000 		.4byte	0x18f
 2339 0597 02       		.byte	0x2
 2340 0598 23       		.byte	0x23
 2341 0599 2A       		.uleb128 0x2a
 2342 059a 00       		.byte	0
 2343 059b 0E       		.uleb128 0xe
 2344 059c 65030000 		.4byte	0x365
 2345 05a0 06       		.uleb128 0x6
 2346 05a1 DE060000 		.4byte	.LASF85
 2347 05a5 03       		.byte	0x3
 2348 05a6 7902     		.2byte	0x279
 2349 05a8 BF040000 		.4byte	0x4bf
 2350 05ac 05       		.uleb128 0x5
 2351 05ad 08       		.byte	0x8
 2352 05ae 04       		.byte	0x4
 2353 05af 88050000 		.4byte	.LASF86
 2354 05b3 05       		.uleb128 0x5
 2355 05b4 01       		.byte	0x1
 2356 05b5 08       		.byte	0x8
 2357 05b6 3A030000 		.4byte	.LASF87
 2358 05ba 0C       		.uleb128 0xc
 2359 05bb 3D010000 		.4byte	0x13d
 2360 05bf CA050000 		.4byte	0x5ca
 2361 05c3 0D       		.uleb128 0xd
 2362 05c4 5D020000 		.4byte	0x25d
 2363 05c8 02       		.byte	0x2
 2364 05c9 00       		.byte	0
 2365 05ca 14       		.uleb128 0x14
 2366 05cb 01       		.byte	0x1
 2367 05cc 24010000 		.4byte	0x124
 2368 05d0 06       		.byte	0x6
 2369 05d1 B9       		.byte	0xb9
 2370 05d2 07060000 		.4byte	0x607
 2371 05d6 04       		.uleb128 0x4
 2372 05d7 A5040000 		.4byte	.LASF88
 2373 05db 00       		.byte	0
 2374 05dc 04       		.uleb128 0x4
 2375 05dd 87060000 		.4byte	.LASF89
 2376 05e1 01       		.byte	0x1
 2377 05e2 04       		.uleb128 0x4
 2378 05e3 EC020000 		.4byte	.LASF90
 2379 05e7 02       		.byte	0x2
 2380 05e8 04       		.uleb128 0x4
 2381 05e9 FF070000 		.4byte	.LASF91
 2382 05ed 03       		.byte	0x3
ARM GAS  /tmp/ccC0Akiw.s 			page 82


 2383 05ee 04       		.uleb128 0x4
 2384 05ef 6C040000 		.4byte	.LASF92
 2385 05f3 04       		.byte	0x4
 2386 05f4 04       		.uleb128 0x4
 2387 05f5 BE040000 		.4byte	.LASF93
 2388 05f9 05       		.byte	0x5
 2389 05fa 04       		.uleb128 0x4
 2390 05fb BA030000 		.4byte	.LASF94
 2391 05ff 06       		.byte	0x6
 2392 0600 04       		.uleb128 0x4
 2393 0601 26040000 		.4byte	.LASF95
 2394 0605 07       		.byte	0x7
 2395 0606 00       		.byte	0
 2396 0607 07       		.uleb128 0x7
 2397 0608 9A030000 		.4byte	.LASF96
 2398 060c 06       		.byte	0x6
 2399 060d C5       		.byte	0xc5
 2400 060e CA050000 		.4byte	0x5ca
 2401 0612 15       		.uleb128 0x15
 2402 0613 8E040000 		.4byte	.LASF204
 2403 0617 0C       		.byte	0xc
 2404 0618 07       		.byte	0x7
 2405 0619 34       		.byte	0x34
 2406 061a B9060000 		.4byte	0x6b9
 2407 061e 0A       		.uleb128 0xa
 2408 061f 99000000 		.4byte	.LASF97
 2409 0623 07       		.byte	0x7
 2410 0624 36       		.byte	0x36
 2411 0625 24010000 		.4byte	0x124
 2412 0629 02       		.byte	0x2
 2413 062a 23       		.byte	0x23
 2414 062b 00       		.uleb128 0
 2415 062c 0A       		.uleb128 0xa
 2416 062d 28080000 		.4byte	.LASF98
 2417 0631 07       		.byte	0x7
 2418 0632 38       		.byte	0x38
 2419 0633 24010000 		.4byte	0x124
 2420 0637 02       		.byte	0x2
 2421 0638 23       		.byte	0x23
 2422 0639 01       		.uleb128 0x1
 2423 063a 0A       		.uleb128 0xa
 2424 063b 6B000000 		.4byte	.LASF99
 2425 063f 07       		.byte	0x7
 2426 0640 39       		.byte	0x39
 2427 0641 24010000 		.4byte	0x124
 2428 0645 02       		.byte	0x2
 2429 0646 23       		.byte	0x23
 2430 0647 02       		.uleb128 0x2
 2431 0648 0A       		.uleb128 0xa
 2432 0649 58010000 		.4byte	.LASF100
 2433 064d 07       		.byte	0x7
 2434 064e 3A       		.byte	0x3a
 2435 064f 24010000 		.4byte	0x124
 2436 0653 02       		.byte	0x2
 2437 0654 23       		.byte	0x23
 2438 0655 03       		.uleb128 0x3
 2439 0656 0A       		.uleb128 0xa
ARM GAS  /tmp/ccC0Akiw.s 			page 83


 2440 0657 B1050000 		.4byte	.LASF101
 2441 065b 07       		.byte	0x7
 2442 065c 3C       		.byte	0x3c
 2443 065d 3D010000 		.4byte	0x13d
 2444 0661 02       		.byte	0x2
 2445 0662 23       		.byte	0x23
 2446 0663 04       		.uleb128 0x4
 2447 0664 0A       		.uleb128 0xa
 2448 0665 2C030000 		.4byte	.LASF102
 2449 0669 07       		.byte	0x7
 2450 066a 3D       		.byte	0x3d
 2451 066b 24010000 		.4byte	0x124
 2452 066f 02       		.byte	0x2
 2453 0670 23       		.byte	0x23
 2454 0671 06       		.uleb128 0x6
 2455 0672 0A       		.uleb128 0xa
 2456 0673 33030000 		.4byte	.LASF103
 2457 0677 07       		.byte	0x7
 2458 0678 3E       		.byte	0x3e
 2459 0679 24010000 		.4byte	0x124
 2460 067d 02       		.byte	0x2
 2461 067e 23       		.byte	0x23
 2462 067f 07       		.uleb128 0x7
 2463 0680 0A       		.uleb128 0xa
 2464 0681 06000000 		.4byte	.LASF104
 2465 0685 07       		.byte	0x7
 2466 0686 41       		.byte	0x41
 2467 0687 24010000 		.4byte	0x124
 2468 068b 02       		.byte	0x2
 2469 068c 23       		.byte	0x23
 2470 068d 08       		.uleb128 0x8
 2471 068e 0A       		.uleb128 0xa
 2472 068f 14000000 		.4byte	.LASF105
 2473 0693 07       		.byte	0x7
 2474 0694 42       		.byte	0x42
 2475 0695 24010000 		.4byte	0x124
 2476 0699 02       		.byte	0x2
 2477 069a 23       		.byte	0x23
 2478 069b 09       		.uleb128 0x9
 2479 069c 0A       		.uleb128 0xa
 2480 069d 22000000 		.4byte	.LASF106
 2481 06a1 07       		.byte	0x7
 2482 06a2 43       		.byte	0x43
 2483 06a3 24010000 		.4byte	0x124
 2484 06a7 02       		.byte	0x2
 2485 06a8 23       		.byte	0x23
 2486 06a9 0A       		.uleb128 0xa
 2487 06aa 0A       		.uleb128 0xa
 2488 06ab 30000000 		.4byte	.LASF107
 2489 06af 07       		.byte	0x7
 2490 06b0 44       		.byte	0x44
 2491 06b1 24010000 		.4byte	0x124
 2492 06b5 02       		.byte	0x2
 2493 06b6 23       		.byte	0x23
 2494 06b7 0B       		.uleb128 0xb
 2495 06b8 00       		.byte	0
 2496 06b9 07       		.uleb128 0x7
ARM GAS  /tmp/ccC0Akiw.s 			page 84


 2497 06ba C5080000 		.4byte	.LASF108
 2498 06be 07       		.byte	0x7
 2499 06bf 46       		.byte	0x46
 2500 06c0 12060000 		.4byte	0x612
 2501 06c4 02       		.uleb128 0x2
 2502 06c5 8E020000 		.4byte	.LASF110
 2503 06c9 01       		.byte	0x1
 2504 06ca 24010000 		.4byte	0x124
 2505 06ce 08       		.byte	0x8
 2506 06cf 0D       		.byte	0xd
 2507 06d0 FF060000 		.4byte	0x6ff
 2508 06d4 04       		.uleb128 0x4
 2509 06d5 E3020000 		.4byte	.LASF111
 2510 06d9 00       		.byte	0
 2511 06da 04       		.uleb128 0x4
 2512 06db B4080000 		.4byte	.LASF112
 2513 06df 01       		.byte	0x1
 2514 06e0 04       		.uleb128 0x4
 2515 06e1 C9040000 		.4byte	.LASF113
 2516 06e5 02       		.byte	0x2
 2517 06e6 04       		.uleb128 0x4
 2518 06e7 BF060000 		.4byte	.LASF114
 2519 06eb 03       		.byte	0x3
 2520 06ec 04       		.uleb128 0x4
 2521 06ed 540A0000 		.4byte	.LASF115
 2522 06f1 04       		.byte	0x4
 2523 06f2 04       		.uleb128 0x4
 2524 06f3 F9080000 		.4byte	.LASF116
 2525 06f7 05       		.byte	0x5
 2526 06f8 04       		.uleb128 0x4
 2527 06f9 2C050000 		.4byte	.LASF117
 2528 06fd 06       		.byte	0x6
 2529 06fe 00       		.byte	0
 2530 06ff 14       		.uleb128 0x14
 2531 0700 01       		.byte	0x1
 2532 0701 24010000 		.4byte	0x124
 2533 0705 09       		.byte	0x9
 2534 0706 1B       		.byte	0x1b
 2535 0707 24070000 		.4byte	0x724
 2536 070b 04       		.uleb128 0x4
 2537 070c 91080000 		.4byte	.LASF118
 2538 0710 00       		.byte	0
 2539 0711 04       		.uleb128 0x4
 2540 0712 E7090000 		.4byte	.LASF119
 2541 0716 01       		.byte	0x1
 2542 0717 04       		.uleb128 0x4
 2543 0718 AF040000 		.4byte	.LASF120
 2544 071c 02       		.byte	0x2
 2545 071d 04       		.uleb128 0x4
 2546 071e E6030000 		.4byte	.LASF121
 2547 0722 03       		.byte	0x3
 2548 0723 00       		.byte	0
 2549 0724 16       		.uleb128 0x16
 2550 0725 E9000000 		.4byte	.LASF205
 2551 0729 01       		.byte	0x1
 2552 072a 7C03     		.2byte	0x37c
 2553 072c 01       		.byte	0x1
ARM GAS  /tmp/ccC0Akiw.s 			page 85


 2554 072d 00000000 		.4byte	.LFB16
 2555 0731 EC000000 		.4byte	.LFE16
 2556 0735 00000000 		.4byte	.LLST0
 2557 0739 01       		.byte	0x1
 2558 073a 5D070000 		.4byte	0x75d
 2559 073e 17       		.uleb128 0x17
 2560 073f AC050000 		.4byte	.LASF109
 2561 0743 01       		.byte	0x1
 2562 0744 7C03     		.2byte	0x37c
 2563 0746 0D010000 		.4byte	0x10d
 2564 074a 02       		.byte	0x2
 2565 074b 91       		.byte	0x91
 2566 074c 6F       		.sleb128 -17
 2567 074d 17       		.uleb128 0x17
 2568 074e 4A060000 		.4byte	.LASF122
 2569 0752 01       		.byte	0x1
 2570 0753 7C03     		.2byte	0x37c
 2571 0755 A5010000 		.4byte	0x1a5
 2572 0759 02       		.byte	0x2
 2573 075a 91       		.byte	0x91
 2574 075b 68       		.sleb128 -24
 2575 075c 00       		.byte	0
 2576 075d 18       		.uleb128 0x18
 2577 075e C1020000 		.4byte	.LASF206
 2578 0762 01       		.byte	0x1
 2579 0763 B803     		.2byte	0x3b8
 2580 0765 01       		.byte	0x1
 2581 0766 A5010000 		.4byte	0x1a5
 2582 076a 00000000 		.4byte	.LFB18
 2583 076e 48000000 		.4byte	.LFE18
 2584 0772 2C000000 		.4byte	.LLST1
 2585 0776 01       		.byte	0x1
 2586 0777 8B070000 		.4byte	0x78b
 2587 077b 17       		.uleb128 0x17
 2588 077c 14030000 		.4byte	.LASF123
 2589 0780 01       		.byte	0x1
 2590 0781 B803     		.2byte	0x3b8
 2591 0783 A5010000 		.4byte	0x1a5
 2592 0787 02       		.byte	0x2
 2593 0788 91       		.byte	0x91
 2594 0789 74       		.sleb128 -12
 2595 078a 00       		.byte	0
 2596 078b 19       		.uleb128 0x19
 2597 078c 01       		.byte	0x1
 2598 078d D3090000 		.4byte	.LASF207
 2599 0791 02       		.byte	0x2
 2600 0792 D7       		.byte	0xd7
 2601 0793 01       		.byte	0x1
 2602 0794 76010000 		.4byte	0x176
 2603 0798 00000000 		.4byte	.LFB20
 2604 079c 1C050000 		.4byte	.LFE20
 2605 07a0 58000000 		.4byte	.LLST2
 2606 07a4 01       		.byte	0x1
 2607 07a5 E6080000 		.4byte	0x8e6
 2608 07a9 1A       		.uleb128 0x1a
 2609 07aa 6900     		.ascii	"i\000"
 2610 07ac 02       		.byte	0x2
ARM GAS  /tmp/ccC0Akiw.s 			page 86


 2611 07ad D9       		.byte	0xd9
 2612 07ae 24010000 		.4byte	0x124
 2613 07b2 02       		.byte	0x2
 2614 07b3 91       		.byte	0x91
 2615 07b4 6F       		.sleb128 -17
 2616 07b5 1B       		.uleb128 0x1b
 2617 07b6 696900   		.ascii	"ii\000"
 2618 07b9 02       		.byte	0x2
 2619 07ba D9       		.byte	0xd9
 2620 07bb 24010000 		.4byte	0x124
 2621 07bf 1C       		.uleb128 0x1c
 2622 07c0 3D0A0000 		.4byte	.LASF124
 2623 07c4 02       		.byte	0x2
 2624 07c5 DA       		.byte	0xda
 2625 07c6 24010000 		.4byte	0x124
 2626 07ca 1C       		.uleb128 0x1c
 2627 07cb 8F030000 		.4byte	.LASF125
 2628 07cf 02       		.byte	0x2
 2629 07d0 DA       		.byte	0xda
 2630 07d1 24010000 		.4byte	0x124
 2631 07d5 1D       		.uleb128 0x1d
 2632 07d6 1F080000 		.4byte	.LASF126
 2633 07da 02       		.byte	0x2
 2634 07db DA       		.byte	0xda
 2635 07dc 24010000 		.4byte	0x124
 2636 07e0 02       		.byte	0x2
 2637 07e1 91       		.byte	0x91
 2638 07e2 65       		.sleb128 -27
 2639 07e3 1D       		.uleb128 0x1d
 2640 07e4 0C0A0000 		.4byte	.LASF127
 2641 07e8 02       		.byte	0x2
 2642 07e9 DB       		.byte	0xdb
 2643 07ea 24010000 		.4byte	0x124
 2644 07ee 02       		.byte	0x2
 2645 07ef 91       		.byte	0x91
 2646 07f0 64       		.sleb128 -28
 2647 07f1 1D       		.uleb128 0x1d
 2648 07f2 EF080000 		.4byte	.LASF128
 2649 07f6 02       		.byte	0x2
 2650 07f7 DC       		.byte	0xdc
 2651 07f8 3D010000 		.4byte	0x13d
 2652 07fc 02       		.byte	0x2
 2653 07fd 91       		.byte	0x91
 2654 07fe 4E       		.sleb128 -50
 2655 07ff 1D       		.uleb128 0x1d
 2656 0800 51030000 		.4byte	.LASF129
 2657 0804 02       		.byte	0x2
 2658 0805 DC       		.byte	0xdc
 2659 0806 3D010000 		.4byte	0x13d
 2660 080a 02       		.byte	0x2
 2661 080b 91       		.byte	0x91
 2662 080c 4C       		.sleb128 -52
 2663 080d 1D       		.uleb128 0x1d
 2664 080e BF080000 		.4byte	.LASF130
 2665 0812 02       		.byte	0x2
 2666 0813 DD       		.byte	0xdd
 2667 0814 3D010000 		.4byte	0x13d
ARM GAS  /tmp/ccC0Akiw.s 			page 87


 2668 0818 02       		.byte	0x2
 2669 0819 91       		.byte	0x91
 2670 081a 50       		.sleb128 -48
 2671 081b 1D       		.uleb128 0x1d
 2672 081c D8010000 		.4byte	.LASF131
 2673 0820 02       		.byte	0x2
 2674 0821 DE       		.byte	0xde
 2675 0822 E6080000 		.4byte	0x8e6
 2676 0826 02       		.byte	0x2
 2677 0827 91       		.byte	0x91
 2678 0828 60       		.sleb128 -32
 2679 0829 1D       		.uleb128 0x1d
 2680 082a 3E000000 		.4byte	.LASF132
 2681 082e 02       		.byte	0x2
 2682 082f DF       		.byte	0xdf
 2683 0830 7D010000 		.4byte	0x17d
 2684 0834 02       		.byte	0x2
 2685 0835 91       		.byte	0x91
 2686 0836 68       		.sleb128 -24
 2687 0837 1D       		.uleb128 0x1d
 2688 0838 BD000000 		.4byte	.LASF133
 2689 083c 02       		.byte	0x2
 2690 083d E2       		.byte	0xe2
 2691 083e 07060000 		.4byte	0x607
 2692 0842 02       		.byte	0x2
 2693 0843 91       		.byte	0x91
 2694 0844 67       		.sleb128 -25
 2695 0845 1D       		.uleb128 0x1d
 2696 0846 EB060000 		.4byte	.LASF134
 2697 084a 02       		.byte	0x2
 2698 084b E3       		.byte	0xe3
 2699 084c 24010000 		.4byte	0x124
 2700 0850 02       		.byte	0x2
 2701 0851 91       		.byte	0x91
 2702 0852 66       		.sleb128 -26
 2703 0853 1C       		.uleb128 0x1c
 2704 0854 0C020000 		.4byte	.LASF135
 2705 0858 02       		.byte	0x2
 2706 0859 E5       		.byte	0xe5
 2707 085a 3D010000 		.4byte	0x13d
 2708 085e 1C       		.uleb128 0x1c
 2709 085f 7C080000 		.4byte	.LASF136
 2710 0863 02       		.byte	0x2
 2711 0864 E8       		.byte	0xe8
 2712 0865 24010000 		.4byte	0x124
 2713 0869 1D       		.uleb128 0x1d
 2714 086a 00000000 		.4byte	.LASF137
 2715 086e 02       		.byte	0x2
 2716 086f EE       		.byte	0xee
 2717 0870 ED080000 		.4byte	0x8ed
 2718 0874 03       		.byte	0x3
 2719 0875 91       		.byte	0x91
 2720 0876 B87F     		.sleb128 -72
 2721 0878 1D       		.uleb128 0x1d
 2722 0879 6B050000 		.4byte	.LASF138
 2723 087d 02       		.byte	0x2
 2724 087e EF       		.byte	0xef
ARM GAS  /tmp/ccC0Akiw.s 			page 88


 2725 087f C4060000 		.4byte	0x6c4
 2726 0883 02       		.byte	0x2
 2727 0884 91       		.byte	0x91
 2728 0885 5F       		.sleb128 -33
 2729 0886 1D       		.uleb128 0x1d
 2730 0887 46080000 		.4byte	.LASF139
 2731 088b 02       		.byte	0x2
 2732 088c F0       		.byte	0xf0
 2733 088d 24010000 		.4byte	0x124
 2734 0891 02       		.byte	0x2
 2735 0892 91       		.byte	0x91
 2736 0893 5E       		.sleb128 -34
 2737 0894 1D       		.uleb128 0x1d
 2738 0895 67060000 		.4byte	.LASF140
 2739 0899 02       		.byte	0x2
 2740 089a F1       		.byte	0xf1
 2741 089b 24010000 		.4byte	0x124
 2742 089f 02       		.byte	0x2
 2743 08a0 91       		.byte	0x91
 2744 08a1 5D       		.sleb128 -35
 2745 08a2 1D       		.uleb128 0x1d
 2746 08a3 13080000 		.4byte	.LASF141
 2747 08a7 02       		.byte	0x2
 2748 08a8 F2       		.byte	0xf2
 2749 08a9 24010000 		.4byte	0x124
 2750 08ad 02       		.byte	0x2
 2751 08ae 91       		.byte	0x91
 2752 08af 5C       		.sleb128 -36
 2753 08b0 1D       		.uleb128 0x1d
 2754 08b1 DE010000 		.4byte	.LASF142
 2755 08b5 02       		.byte	0x2
 2756 08b6 F3       		.byte	0xf3
 2757 08b7 24010000 		.4byte	0x124
 2758 08bb 02       		.byte	0x2
 2759 08bc 91       		.byte	0x91
 2760 08bd 5B       		.sleb128 -37
 2761 08be 1D       		.uleb128 0x1d
 2762 08bf EA040000 		.4byte	.LASF143
 2763 08c3 02       		.byte	0x2
 2764 08c4 F4       		.byte	0xf4
 2765 08c5 76010000 		.4byte	0x176
 2766 08c9 02       		.byte	0x2
 2767 08ca 91       		.byte	0x91
 2768 08cb 54       		.sleb128 -44
 2769 08cc 1D       		.uleb128 0x1d
 2770 08cd DB070000 		.4byte	.LASF144
 2771 08d1 02       		.byte	0x2
 2772 08d2 F5       		.byte	0xf5
 2773 08d3 24010000 		.4byte	0x124
 2774 08d7 02       		.byte	0x2
 2775 08d8 91       		.byte	0x91
 2776 08d9 53       		.sleb128 -45
 2777 08da 1C       		.uleb128 0x1c
 2778 08db C8000000 		.4byte	.LASF145
 2779 08df 02       		.byte	0x2
 2780 08e0 FA       		.byte	0xfa
 2781 08e1 FD080000 		.4byte	0x8fd
ARM GAS  /tmp/ccC0Akiw.s 			page 89


 2782 08e5 00       		.byte	0
 2783 08e6 05       		.uleb128 0x5
 2784 08e7 04       		.byte	0x4
 2785 08e8 04       		.byte	0x4
 2786 08e9 06020000 		.4byte	.LASF146
 2787 08ed 0C       		.uleb128 0xc
 2788 08ee B3050000 		.4byte	0x5b3
 2789 08f2 FD080000 		.4byte	0x8fd
 2790 08f6 0D       		.uleb128 0xd
 2791 08f7 5D020000 		.4byte	0x25d
 2792 08fb 13       		.byte	0x13
 2793 08fc 00       		.byte	0
 2794 08fd 1E       		.uleb128 0x1e
 2795 08fe 04       		.byte	0x4
 2796 08ff B9060000 		.4byte	0x6b9
 2797 0903 1F       		.uleb128 0x1f
 2798 0904 01       		.byte	0x1
 2799 0905 A3080000 		.4byte	.LASF208
 2800 0909 02       		.byte	0x2
 2801 090a EF03     		.2byte	0x3ef
 2802 090c 01       		.byte	0x1
 2803 090d 00000000 		.4byte	.LFB21
 2804 0911 B0000000 		.4byte	.LFE21
 2805 0915 85000000 		.4byte	.LLST3
 2806 0919 01       		.byte	0x1
 2807 091a C3090000 		.4byte	0x9c3
 2808 091e 17       		.uleb128 0x17
 2809 091f DC000000 		.4byte	.LASF147
 2810 0923 02       		.byte	0x2
 2811 0924 EF03     		.2byte	0x3ef
 2812 0926 C3090000 		.4byte	0x9c3
 2813 092a 03       		.byte	0x3
 2814 092b 91       		.byte	0x91
 2815 092c A47F     		.sleb128 -92
 2816 092e 20       		.uleb128 0x20
 2817 092f 643100   		.ascii	"d1\000"
 2818 0932 02       		.byte	0x2
 2819 0933 F103     		.2byte	0x3f1
 2820 0935 9A010000 		.4byte	0x19a
 2821 0939 02       		.byte	0x2
 2822 093a 91       		.byte	0x91
 2823 093b 74       		.sleb128 -12
 2824 093c 20       		.uleb128 0x20
 2825 093d 643200   		.ascii	"d2\000"
 2826 0940 02       		.byte	0x2
 2827 0941 F103     		.2byte	0x3f1
 2828 0943 9A010000 		.4byte	0x19a
 2829 0947 02       		.byte	0x2
 2830 0948 91       		.byte	0x91
 2831 0949 70       		.sleb128 -16
 2832 094a 20       		.uleb128 0x20
 2833 094b 643300   		.ascii	"d3\000"
 2834 094e 02       		.byte	0x2
 2835 094f F103     		.2byte	0x3f1
 2836 0951 9A010000 		.4byte	0x19a
 2837 0955 02       		.byte	0x2
 2838 0956 91       		.byte	0x91
ARM GAS  /tmp/ccC0Akiw.s 			page 90


 2839 0957 6C       		.sleb128 -20
 2840 0958 20       		.uleb128 0x20
 2841 0959 643400   		.ascii	"d4\000"
 2842 095c 02       		.byte	0x2
 2843 095d F103     		.2byte	0x3f1
 2844 095f 9A010000 		.4byte	0x19a
 2845 0963 02       		.byte	0x2
 2846 0964 91       		.byte	0x91
 2847 0965 68       		.sleb128 -24
 2848 0966 20       		.uleb128 0x20
 2849 0967 643500   		.ascii	"d5\000"
 2850 096a 02       		.byte	0x2
 2851 096b F103     		.2byte	0x3f1
 2852 096d 9A010000 		.4byte	0x19a
 2853 0971 02       		.byte	0x2
 2854 0972 91       		.byte	0x91
 2855 0973 64       		.sleb128 -28
 2856 0974 20       		.uleb128 0x20
 2857 0975 643600   		.ascii	"d6\000"
 2858 0978 02       		.byte	0x2
 2859 0979 F103     		.2byte	0x3f1
 2860 097b 9A010000 		.4byte	0x19a
 2861 097f 02       		.byte	0x2
 2862 0980 91       		.byte	0x91
 2863 0981 60       		.sleb128 -32
 2864 0982 21       		.uleb128 0x21
 2865 0983 0E050000 		.4byte	.LASF148
 2866 0987 02       		.byte	0x2
 2867 0988 F203     		.2byte	0x3f2
 2868 098a C9090000 		.4byte	0x9c9
 2869 098e 03       		.byte	0x3
 2870 098f 91       		.byte	0x91
 2871 0990 B87F     		.sleb128 -72
 2872 0992 21       		.uleb128 0x21
 2873 0993 80070000 		.4byte	.LASF149
 2874 0997 02       		.byte	0x2
 2875 0998 F303     		.2byte	0x3f3
 2876 099a D9090000 		.4byte	0x9d9
 2877 099e 03       		.byte	0x3
 2878 099f 91       		.byte	0x91
 2879 09a0 B47F     		.sleb128 -76
 2880 09a2 21       		.uleb128 0x21
 2881 09a3 3F030000 		.4byte	.LASF150
 2882 09a7 02       		.byte	0x2
 2883 09a8 F403     		.2byte	0x3f4
 2884 09aa D9090000 		.4byte	0x9d9
 2885 09ae 03       		.byte	0x3
 2886 09af 91       		.byte	0x91
 2887 09b0 B07F     		.sleb128 -80
 2888 09b2 21       		.uleb128 0x21
 2889 09b3 3C070000 		.4byte	.LASF151
 2890 09b7 02       		.byte	0x2
 2891 09b8 F503     		.2byte	0x3f5
 2892 09ba D9090000 		.4byte	0x9d9
 2893 09be 03       		.byte	0x3
 2894 09bf 91       		.byte	0x91
 2895 09c0 AC7F     		.sleb128 -84
ARM GAS  /tmp/ccC0Akiw.s 			page 91


 2896 09c2 00       		.byte	0
 2897 09c3 1E       		.uleb128 0x1e
 2898 09c4 04       		.byte	0x4
 2899 09c5 84010000 		.4byte	0x184
 2900 09c9 0C       		.uleb128 0xc
 2901 09ca B3050000 		.4byte	0x5b3
 2902 09ce D9090000 		.4byte	0x9d9
 2903 09d2 0D       		.uleb128 0xd
 2904 09d3 5D020000 		.4byte	0x25d
 2905 09d7 27       		.byte	0x27
 2906 09d8 00       		.byte	0
 2907 09d9 0E       		.uleb128 0xe
 2908 09da E6080000 		.4byte	0x8e6
 2909 09de 22       		.uleb128 0x22
 2910 09df 01       		.byte	0x1
 2911 09e0 4F080000 		.4byte	.LASF209
 2912 09e4 02       		.byte	0x2
 2913 09e5 6A04     		.2byte	0x46a
 2914 09e7 01       		.byte	0x1
 2915 09e8 00000000 		.4byte	.LFB22
 2916 09ec 64010000 		.4byte	.LFE22
 2917 09f0 B2000000 		.4byte	.LLST4
 2918 09f4 01       		.byte	0x1
 2919 09f5 0C       		.uleb128 0xc
 2920 09f6 24010000 		.4byte	0x124
 2921 09fa 050A0000 		.4byte	0xa05
 2922 09fe 0D       		.uleb128 0xd
 2923 09ff 5D020000 		.4byte	0x25d
 2924 0a03 FF       		.byte	0xff
 2925 0a04 00       		.byte	0
 2926 0a05 23       		.uleb128 0x23
 2927 0a06 76010000 		.4byte	.LASF152
 2928 0a0a 02       		.byte	0x2
 2929 0a0b 3B       		.byte	0x3b
 2930 0a0c 170A0000 		.4byte	0xa17
 2931 0a10 01       		.byte	0x1
 2932 0a11 05       		.byte	0x5
 2933 0a12 03       		.byte	0x3
 2934 0a13 00000000 		.4byte	tx2buff
 2935 0a17 0E       		.uleb128 0xe
 2936 0a18 F5090000 		.4byte	0x9f5
 2937 0a1c 23       		.uleb128 0x23
 2938 0a1d 32010000 		.4byte	.LASF153
 2939 0a21 02       		.byte	0x2
 2940 0a22 3C       		.byte	0x3c
 2941 0a23 2E0A0000 		.4byte	0xa2e
 2942 0a27 01       		.byte	0x1
 2943 0a28 05       		.byte	0x5
 2944 0a29 03       		.byte	0x3
 2945 0a2a 00000000 		.4byte	rx2buff
 2946 0a2e 0E       		.uleb128 0xe
 2947 0a2f F5090000 		.4byte	0x9f5
 2948 0a33 23       		.uleb128 0x23
 2949 0a34 F7030000 		.4byte	.LASF154
 2950 0a38 02       		.byte	0x2
 2951 0a39 3E       		.byte	0x3e
 2952 0a3a 450A0000 		.4byte	0xa45
ARM GAS  /tmp/ccC0Akiw.s 			page 92


 2953 0a3e 01       		.byte	0x1
 2954 0a3f 05       		.byte	0x5
 2955 0a40 03       		.byte	0x3
 2956 0a41 00000000 		.4byte	tx1buff
 2957 0a45 0E       		.uleb128 0xe
 2958 0a46 F5090000 		.4byte	0x9f5
 2959 0a4a 23       		.uleb128 0x23
 2960 0a4b 45010000 		.4byte	.LASF155
 2961 0a4f 02       		.byte	0x2
 2962 0a50 3F       		.byte	0x3f
 2963 0a51 5C0A0000 		.4byte	0xa5c
 2964 0a55 01       		.byte	0x1
 2965 0a56 05       		.byte	0x5
 2966 0a57 03       		.byte	0x3
 2967 0a58 00000000 		.4byte	rx1buff
 2968 0a5c 0E       		.uleb128 0xe
 2969 0a5d F5090000 		.4byte	0x9f5
 2970 0a61 23       		.uleb128 0x23
 2971 0a62 1A030000 		.4byte	.LASF156
 2972 0a66 02       		.byte	0x2
 2973 0a67 49       		.byte	0x49
 2974 0a68 730A0000 		.4byte	0xa73
 2975 0a6c 01       		.byte	0x1
 2976 0a6d 05       		.byte	0x5
 2977 0a6e 03       		.byte	0x3
 2978 0a6f 00000000 		.4byte	show_select_timer
 2979 0a73 0E       		.uleb128 0xe
 2980 0a74 3D010000 		.4byte	0x13d
 2981 0a78 23       		.uleb128 0x23
 2982 0a79 5C050000 		.4byte	.LASF157
 2983 0a7d 02       		.byte	0x2
 2984 0a7e 4A       		.byte	0x4a
 2985 0a7f 8A0A0000 		.4byte	0xa8a
 2986 0a83 01       		.byte	0x1
 2987 0a84 05       		.byte	0x5
 2988 0a85 03       		.byte	0x3
 2989 0a86 00000000 		.4byte	switches_timer
 2990 0a8a 0E       		.uleb128 0xe
 2991 0a8b 24010000 		.4byte	0x124
 2992 0a8f 23       		.uleb128 0x23
 2993 0a90 4F000000 		.4byte	.LASF158
 2994 0a94 02       		.byte	0x2
 2995 0a95 4B       		.byte	0x4b
 2996 0a96 8A0A0000 		.4byte	0xa8a
 2997 0a9a 01       		.byte	0x1
 2998 0a9b 05       		.byte	0x5
 2999 0a9c 03       		.byte	0x3
 3000 0a9d 00000000 		.4byte	acswitch_timer
 3001 0aa1 23       		.uleb128 0x23
 3002 0aa2 CE050000 		.4byte	.LASF159
 3003 0aa6 02       		.byte	0x2
 3004 0aa7 4D       		.byte	0x4d
 3005 0aa8 730A0000 		.4byte	0xa73
 3006 0aac 01       		.byte	0x1
 3007 0aad 05       		.byte	0x5
 3008 0aae 03       		.byte	0x3
 3009 0aaf 00000000 		.4byte	scroll1_timer
ARM GAS  /tmp/ccC0Akiw.s 			page 93


 3010 0ab3 23       		.uleb128 0x23
 3011 0ab4 210A0000 		.4byte	.LASF160
 3012 0ab8 02       		.byte	0x2
 3013 0ab9 4E       		.byte	0x4e
 3014 0aba 730A0000 		.4byte	0xa73
 3015 0abe 01       		.byte	0x1
 3016 0abf 05       		.byte	0x5
 3017 0ac0 03       		.byte	0x3
 3018 0ac1 00000000 		.4byte	scroll2_timer
 3019 0ac5 23       		.uleb128 0x23
 3020 0ac6 C2090000 		.4byte	.LASF161
 3021 0aca 02       		.byte	0x2
 3022 0acb 50       		.byte	0x50
 3023 0acc 730A0000 		.4byte	0xa73
 3024 0ad0 01       		.byte	0x1
 3025 0ad1 05       		.byte	0x5
 3026 0ad2 03       		.byte	0x3
 3027 0ad3 00000000 		.4byte	standalone_timer
 3028 0ad7 23       		.uleb128 0x23
 3029 0ad8 97070000 		.4byte	.LASF162
 3030 0adc 02       		.byte	0x2
 3031 0add 51       		.byte	0x51
 3032 0ade 730A0000 		.4byte	0xa73
 3033 0ae2 01       		.byte	0x1
 3034 0ae3 05       		.byte	0x5
 3035 0ae4 03       		.byte	0x3
 3036 0ae5 00000000 		.4byte	standalone_enable_menu_timer
 3037 0ae9 23       		.uleb128 0x23
 3038 0aea 8B010000 		.4byte	.LASF163
 3039 0aee 02       		.byte	0x2
 3040 0aef 53       		.byte	0x53
 3041 0af0 8A0A0000 		.4byte	0xa8a
 3042 0af4 01       		.byte	0x1
 3043 0af5 05       		.byte	0x5
 3044 0af6 03       		.byte	0x3
 3045 0af7 00000000 		.4byte	grouped_master_timeout_timer
 3046 0afb 23       		.uleb128 0x23
 3047 0afc 61030000 		.4byte	.LASF164
 3048 0b00 02       		.byte	0x2
 3049 0b01 54       		.byte	0x54
 3050 0b02 730A0000 		.4byte	0xa73
 3051 0b06 01       		.byte	0x1
 3052 0b07 05       		.byte	0x5
 3053 0b08 03       		.byte	0x3
 3054 0b09 00000000 		.4byte	take_temp_sample
 3055 0b0d 23       		.uleb128 0x23
 3056 0b0e 65080000 		.4byte	.LASF165
 3057 0b12 02       		.byte	0x2
 3058 0b13 55       		.byte	0x55
 3059 0b14 8A0A0000 		.4byte	0xa8a
 3060 0b18 01       		.byte	0x1
 3061 0b19 05       		.byte	0x5
 3062 0b1a 03       		.byte	0x3
 3063 0b1b 00000000 		.4byte	timer_wifi_bright
 3064 0b1f 23       		.uleb128 0x23
 3065 0b20 99040000 		.4byte	.LASF166
 3066 0b24 02       		.byte	0x2
ARM GAS  /tmp/ccC0Akiw.s 			page 94


 3067 0b25 58       		.byte	0x58
 3068 0b26 730A0000 		.4byte	0xa73
 3069 0b2a 01       		.byte	0x1
 3070 0b2b 05       		.byte	0x5
 3071 0b2c 03       		.byte	0x3
 3072 0b2d 00000000 		.4byte	timer_relay
 3073 0b31 23       		.uleb128 0x23
 3074 0b32 AC020000 		.4byte	.LASF167
 3075 0b36 02       		.byte	0x2
 3076 0b37 5A       		.byte	0x5a
 3077 0b38 730A0000 		.4byte	0xa73
 3078 0b3c 01       		.byte	0x1
 3079 0b3d 05       		.byte	0x5
 3080 0b3e 03       		.byte	0x3
 3081 0b3f 00000000 		.4byte	tt_take_photo_sample
 3082 0b43 23       		.uleb128 0x23
 3083 0b44 11040000 		.4byte	.LASF168
 3084 0b48 02       		.byte	0x2
 3085 0b49 5B       		.byte	0x5b
 3086 0b4a 730A0000 		.4byte	0xa73
 3087 0b4e 01       		.byte	0x1
 3088 0b4f 05       		.byte	0x5
 3089 0b50 03       		.byte	0x3
 3090 0b51 00000000 		.4byte	tt_relay_on_off
 3091 0b55 23       		.uleb128 0x23
 3092 0b56 76040000 		.4byte	.LASF169
 3093 0b5a 02       		.byte	0x2
 3094 0b5b 5F       		.byte	0x5f
 3095 0b5c 24010000 		.4byte	0x124
 3096 0b60 01       		.byte	0x1
 3097 0b61 05       		.byte	0x5
 3098 0b62 03       		.byte	0x3
 3099 0b63 00000000 		.4byte	saved_mode
 3100 0b67 24       		.uleb128 0x24
 3101 0b68 733100   		.ascii	"s1\000"
 3102 0b6b 02       		.byte	0x2
 3103 0b6c 63       		.byte	0x63
 3104 0b6d 3D010000 		.4byte	0x13d
 3105 0b71 01       		.byte	0x1
 3106 0b72 05       		.byte	0x5
 3107 0b73 03       		.byte	0x3
 3108 0b74 00000000 		.4byte	s1
 3109 0b78 24       		.uleb128 0x24
 3110 0b79 733200   		.ascii	"s2\000"
 3111 0b7c 02       		.byte	0x2
 3112 0b7d 64       		.byte	0x64
 3113 0b7e 3D010000 		.4byte	0x13d
 3114 0b82 01       		.byte	0x1
 3115 0b83 05       		.byte	0x5
 3116 0b84 03       		.byte	0x3
 3117 0b85 00000000 		.4byte	s2
 3118 0b89 24       		.uleb128 0x24
 3119 0b8a 73616300 		.ascii	"sac\000"
 3120 0b8e 02       		.byte	0x2
 3121 0b8f 65       		.byte	0x65
 3122 0b90 3D010000 		.4byte	0x13d
 3123 0b94 01       		.byte	0x1
ARM GAS  /tmp/ccC0Akiw.s 			page 95


 3124 0b95 05       		.byte	0x5
 3125 0b96 03       		.byte	0x3
 3126 0b97 00000000 		.4byte	sac
 3127 0b9b 23       		.uleb128 0x23
 3128 0b9c 3E080000 		.4byte	.LASF170
 3129 0ba0 02       		.byte	0x2
 3130 0ba1 66       		.byte	0x66
 3131 0ba2 24010000 		.4byte	0x124
 3132 0ba6 01       		.byte	0x1
 3133 0ba7 05       		.byte	0x5
 3134 0ba8 03       		.byte	0x3
 3135 0ba9 00000000 		.4byte	sac_aux
 3136 0bad 23       		.uleb128 0x23
 3137 0bae B4070000 		.4byte	.LASF171
 3138 0bb2 02       		.byte	0x2
 3139 0bb3 6A       		.byte	0x6a
 3140 0bb4 BF0B0000 		.4byte	0xbbf
 3141 0bb8 01       		.byte	0x1
 3142 0bb9 05       		.byte	0x5
 3143 0bba 03       		.byte	0x3
 3144 0bbb 00000000 		.4byte	adc_ch
 3145 0bbf 0E       		.uleb128 0xe
 3146 0bc0 BA050000 		.4byte	0x5ba
 3147 0bc4 23       		.uleb128 0x23
 3148 0bc5 110A0000 		.4byte	.LASF172
 3149 0bc9 02       		.byte	0x2
 3150 0bca 6B       		.byte	0x6b
 3151 0bcb 8A0A0000 		.4byte	0xa8a
 3152 0bcf 01       		.byte	0x1
 3153 0bd0 05       		.byte	0x5
 3154 0bd1 03       		.byte	0x3
 3155 0bd2 00000000 		.4byte	seq_ready
 3156 0bd6 23       		.uleb128 0x23
 3157 0bd7 D5040000 		.4byte	.LASF173
 3158 0bdb 02       		.byte	0x2
 3159 0bdc 6C       		.byte	0x6c
 3160 0bdd 3D010000 		.4byte	0x13d
 3161 0be1 01       		.byte	0x1
 3162 0be2 05       		.byte	0x5
 3163 0be3 03       		.byte	0x3
 3164 0be4 00000000 		.4byte	zero_current
 3165 0be8 23       		.uleb128 0x23
 3166 0be9 58040000 		.4byte	.LASF174
 3167 0bed 02       		.byte	0x2
 3168 0bee 70       		.byte	0x70
 3169 0bef 8A0A0000 		.4byte	0xa8a
 3170 0bf3 01       		.byte	0x1
 3171 0bf4 05       		.byte	0x5
 3172 0bf5 03       		.byte	0x3
 3173 0bf6 00000000 		.4byte	usart1_mini_timeout
 3174 0bfa 23       		.uleb128 0x23
 3175 0bfb 72020000 		.4byte	.LASF175
 3176 0bff 02       		.byte	0x2
 3177 0c00 71       		.byte	0x71
 3178 0c01 8A0A0000 		.4byte	0xa8a
 3179 0c05 01       		.byte	0x1
 3180 0c06 05       		.byte	0x5
ARM GAS  /tmp/ccC0Akiw.s 			page 96


 3181 0c07 03       		.byte	0x3
 3182 0c08 00000000 		.4byte	usart1_pckt_ready
 3183 0c0c 23       		.uleb128 0x23
 3184 0c0d FD020000 		.4byte	.LASF176
 3185 0c11 02       		.byte	0x2
 3186 0c12 72       		.byte	0x72
 3187 0c13 8A0A0000 		.4byte	0xa8a
 3188 0c17 01       		.byte	0x1
 3189 0c18 05       		.byte	0x5
 3190 0c19 03       		.byte	0x3
 3191 0c1a 00000000 		.4byte	usart1_have_data
 3192 0c1e 23       		.uleb128 0x23
 3193 0c1f 40020000 		.4byte	.LASF177
 3194 0c23 02       		.byte	0x2
 3195 0c24 73       		.byte	0x73
 3196 0c25 24010000 		.4byte	0x124
 3197 0c29 01       		.byte	0x1
 3198 0c2a 05       		.byte	0x5
 3199 0c2b 03       		.byte	0x3
 3200 0c2c 00000000 		.4byte	usart1_pckt_bytes
 3201 0c30 23       		.uleb128 0x23
 3202 0c31 C6030000 		.4byte	.LASF178
 3203 0c35 02       		.byte	0x2
 3204 0c36 8A       		.byte	0x8a
 3205 0c37 8A0A0000 		.4byte	0xa8a
 3206 0c3b 01       		.byte	0x1
 3207 0c3c 05       		.byte	0x5
 3208 0c3d 03       		.byte	0x3
 3209 0c3e 00000000 		.4byte	usart2_mini_timeout
 3210 0c42 23       		.uleb128 0x23
 3211 0c43 64010000 		.4byte	.LASF179
 3212 0c47 02       		.byte	0x2
 3213 0c48 8B       		.byte	0x8b
 3214 0c49 8A0A0000 		.4byte	0xa8a
 3215 0c4d 01       		.byte	0x1
 3216 0c4e 05       		.byte	0x5
 3217 0c4f 03       		.byte	0x3
 3218 0c50 00000000 		.4byte	usart2_pckt_ready
 3219 0c54 23       		.uleb128 0x23
 3220 0c55 BE010000 		.4byte	.LASF180
 3221 0c59 02       		.byte	0x2
 3222 0c5a 8C       		.byte	0x8c
 3223 0c5b 8A0A0000 		.4byte	0xa8a
 3224 0c5f 01       		.byte	0x1
 3225 0c60 05       		.byte	0x5
 3226 0c61 03       		.byte	0x3
 3227 0c62 00000000 		.4byte	usart2_have_data
 3228 0c66 23       		.uleb128 0x23
 3229 0c67 FF030000 		.4byte	.LASF181
 3230 0c6b 02       		.byte	0x2
 3231 0c6c 8D       		.byte	0x8d
 3232 0c6d 24010000 		.4byte	0x124
 3233 0c71 01       		.byte	0x1
 3234 0c72 05       		.byte	0x5
 3235 0c73 03       		.byte	0x3
 3236 0c74 00000000 		.4byte	usart2_pckt_bytes
 3237 0c78 0C       		.uleb128 0xc
ARM GAS  /tmp/ccC0Akiw.s 			page 97


 3238 0c79 B3050000 		.4byte	0x5b3
 3239 0c7d 830C0000 		.4byte	0xc83
 3240 0c81 25       		.uleb128 0x25
 3241 0c82 00       		.byte	0
 3242 0c83 26       		.uleb128 0x26
 3243 0c84 9D050000 		.4byte	.LASF182
 3244 0c88 02       		.byte	0x2
 3245 0c89 93       		.byte	0x93
 3246 0c8a 900C0000 		.4byte	0xc90
 3247 0c8e 01       		.byte	0x1
 3248 0c8f 01       		.byte	0x1
 3249 0c90 0E       		.uleb128 0xe
 3250 0c91 780C0000 		.4byte	0xc78
 3251 0c95 23       		.uleb128 0x23
 3252 0c96 5E000000 		.4byte	.LASF183
 3253 0c9a 02       		.byte	0x2
 3254 0c9b 97       		.byte	0x97
 3255 0c9c B9060000 		.4byte	0x6b9
 3256 0ca0 01       		.byte	0x1
 3257 0ca1 05       		.byte	0x5
 3258 0ca2 03       		.byte	0x3
 3259 0ca3 00000000 		.4byte	param_struct
 3260 0ca7 23       		.uleb128 0x23
 3261 0ca8 F5010000 		.4byte	.LASF184
 3262 0cac 02       		.byte	0x2
 3263 0cad 9A       		.byte	0x9a
 3264 0cae 7D010000 		.4byte	0x17d
 3265 0cb2 01       		.byte	0x1
 3266 0cb3 05       		.byte	0x5
 3267 0cb4 03       		.byte	0x3
 3268 0cb5 00000000 		.4byte	power_2secs_acum
 3269 0cb9 23       		.uleb128 0x23
 3270 0cba 4A050000 		.4byte	.LASF185
 3271 0cbe 02       		.byte	0x2
 3272 0cbf 9B       		.byte	0x9b
 3273 0cc0 24010000 		.4byte	0x124
 3274 0cc4 01       		.byte	0x1
 3275 0cc5 05       		.byte	0x5
 3276 0cc6 03       		.byte	0x3
 3277 0cc7 00000000 		.4byte	power_2secs_index
 3278 0ccb 23       		.uleb128 0x23
 3279 0ccc D5020000 		.4byte	.LASF186
 3280 0cd0 02       		.byte	0x2
 3281 0cd1 9C       		.byte	0x9c
 3282 0cd2 3D010000 		.4byte	0x13d
 3283 0cd6 01       		.byte	0x1
 3284 0cd7 05       		.byte	0x5
 3285 0cd8 03       		.byte	0x3
 3286 0cd9 00000000 		.4byte	power_minutes
 3287 0cdd 23       		.uleb128 0x23
 3288 0cde F3090000 		.4byte	.LASF187
 3289 0ce2 02       		.byte	0x2
 3290 0ce3 9D       		.byte	0x9d
 3291 0ce4 24010000 		.4byte	0x124
 3292 0ce8 01       		.byte	0x1
 3293 0ce9 05       		.byte	0x5
 3294 0cea 03       		.byte	0x3
ARM GAS  /tmp/ccC0Akiw.s 			page 98


 3295 0ceb 00000000 		.4byte	power_minutes_index
 3296 0cef 23       		.uleb128 0x23
 3297 0cf0 DA030000 		.4byte	.LASF188
 3298 0cf4 02       		.byte	0x2
 3299 0cf5 9E       		.byte	0x9e
 3300 0cf6 3D010000 		.4byte	0x13d
 3301 0cfa 01       		.byte	0x1
 3302 0cfb 05       		.byte	0x5
 3303 0cfc 03       		.byte	0x3
 3304 0cfd 00000000 		.4byte	power_hours
 3305 0d01 23       		.uleb128 0x23
 3306 0d02 C7050000 		.4byte	.LASF189
 3307 0d06 02       		.byte	0x2
 3308 0d07 A1       		.byte	0xa1
 3309 0d08 ED080000 		.4byte	0x8ed
 3310 0d0c 01       		.byte	0x1
 3311 0d0d 05       		.byte	0x5
 3312 0d0e 03       		.byte	0x3
 3313 0d0f 00000000 		.4byte	gsmNUM
 3314 0d13 0C       		.uleb128 0xc
 3315 0d14 B3050000 		.4byte	0x5b3
 3316 0d18 230D0000 		.4byte	0xd23
 3317 0d1c 0D       		.uleb128 0xd
 3318 0d1d 5D020000 		.4byte	0x25d
 3319 0d21 B3       		.byte	0xb3
 3320 0d22 00       		.byte	0
 3321 0d23 23       		.uleb128 0x23
 3322 0d24 A8060000 		.4byte	.LASF190
 3323 0d28 02       		.byte	0x2
 3324 0d29 A2       		.byte	0xa2
 3325 0d2a 130D0000 		.4byte	0xd13
 3326 0d2e 01       		.byte	0x1
 3327 0d2f 05       		.byte	0x5
 3328 0d30 03       		.byte	0x3
 3329 0d31 00000000 		.4byte	gsmMSG
 3330 0d35 23       		.uleb128 0x23
 3331 0d36 70060000 		.4byte	.LASF191
 3332 0d3a 02       		.byte	0x2
 3333 0d3b AA       		.byte	0xaa
 3334 0d3c 730A0000 		.4byte	0xa73
 3335 0d40 01       		.byte	0x1
 3336 0d41 05       		.byte	0x5
 3337 0d42 03       		.byte	0x3
 3338 0d43 00000000 		.4byte	wait_ms_var
 3339 0d47 23       		.uleb128 0x23
 3340 0d48 2F0A0000 		.4byte	.LASF192
 3341 0d4c 02       		.byte	0x2
 3342 0d4d AB       		.byte	0xab
 3343 0d4e 730A0000 		.4byte	0xa73
 3344 0d52 01       		.byte	0x1
 3345 0d53 05       		.byte	0x5
 3346 0d54 03       		.byte	0x3
 3347 0d55 00000000 		.4byte	timer_standby
 3348 0d59 23       		.uleb128 0x23
 3349 0d5a 17010000 		.4byte	.LASF193
 3350 0d5e 02       		.byte	0x2
 3351 0d5f AC       		.byte	0xac
ARM GAS  /tmp/ccC0Akiw.s 			page 99


 3352 0d60 730A0000 		.4byte	0xa73
 3353 0d64 01       		.byte	0x1
 3354 0d65 05       		.byte	0x5
 3355 0d66 03       		.byte	0x3
 3356 0d67 00000000 		.4byte	tcp_kalive_timer
 3357 0d6b 23       		.uleb128 0x23
 3358 0d6c 81040000 		.4byte	.LASF194
 3359 0d70 02       		.byte	0x2
 3360 0d71 AE       		.byte	0xae
 3361 0d72 8A0A0000 		.4byte	0xa8a
 3362 0d76 01       		.byte	0x1
 3363 0d77 05       		.byte	0x5
 3364 0d78 03       		.byte	0x3
 3365 0d79 00000000 		.4byte	filter_timer
 3366 0d7d 23       		.uleb128 0x23
 3367 0d7e 21040000 		.4byte	.LASF195
 3368 0d82 02       		.byte	0x2
 3369 0d83 B3       		.byte	0xb3
 3370 0d84 730A0000 		.4byte	0xa73
 3371 0d88 01       		.byte	0x1
 3372 0d89 05       		.byte	0x5
 3373 0d8a 03       		.byte	0x3
 3374 0d8b 00000000 		.4byte	secs
 3375 0d8f 23       		.uleb128 0x23
 3376 0d90 AF060000 		.4byte	.LASF196
 3377 0d94 02       		.byte	0x2
 3378 0d95 B4       		.byte	0xb4
 3379 0d96 8A0A0000 		.4byte	0xa8a
 3380 0d9a 01       		.byte	0x1
 3381 0d9b 05       		.byte	0x5
 3382 0d9c 03       		.byte	0x3
 3383 0d9d 00000000 		.4byte	hours
 3384 0da1 23       		.uleb128 0x23
 3385 0da2 5D020000 		.4byte	.LASF197
 3386 0da6 02       		.byte	0x2
 3387 0da7 B5       		.byte	0xb5
 3388 0da8 8A0A0000 		.4byte	0xa8a
 3389 0dac 01       		.byte	0x1
 3390 0dad 05       		.byte	0x5
 3391 0dae 03       		.byte	0x3
 3392 0daf 00000000 		.4byte	minutes
 3393 0db3 0C       		.uleb128 0xc
 3394 0db4 3D010000 		.4byte	0x13d
 3395 0db8 C30D0000 		.4byte	0xdc3
 3396 0dbc 0D       		.uleb128 0xd
 3397 0dbd 5D020000 		.4byte	0x25d
 3398 0dc1 09       		.byte	0x9
 3399 0dc2 00       		.byte	0
 3400 0dc3 23       		.uleb128 0x23
 3401 0dc4 4D010000 		.4byte	.LASF198
 3402 0dc8 02       		.byte	0x2
 3403 0dc9 B9       		.byte	0xb9
 3404 0dca B30D0000 		.4byte	0xdb3
 3405 0dce 01       		.byte	0x1
 3406 0dcf 05       		.byte	0x5
 3407 0dd0 03       		.byte	0x3
 3408 0dd1 00000000 		.4byte	power_vect
ARM GAS  /tmp/ccC0Akiw.s 			page 100


 3409 0dd5 0C       		.uleb128 0xc
 3410 0dd6 3D010000 		.4byte	0x13d
 3411 0dda E50D0000 		.4byte	0xde5
 3412 0dde 0D       		.uleb128 0xd
 3413 0ddf 5D020000 		.4byte	0x25d
 3414 0de3 10       		.byte	0x10
 3415 0de4 00       		.byte	0
 3416 0de5 23       		.uleb128 0x23
 3417 0de6 1B0A0000 		.4byte	.LASF199
 3418 0dea 02       		.byte	0x2
 3419 0deb C7       		.byte	0xc7
 3420 0dec D50D0000 		.4byte	0xdd5
 3421 0df0 01       		.byte	0x1
 3422 0df1 05       		.byte	0x5
 3423 0df2 03       		.byte	0x3
 3424 0df3 00000000 		.4byte	vtemp
 3425 0df7 23       		.uleb128 0x23
 3426 0df8 E3000000 		.4byte	.LASF200
 3427 0dfc 02       		.byte	0x2
 3428 0dfd C8       		.byte	0xc8
 3429 0dfe D50D0000 		.4byte	0xdd5
 3430 0e02 01       		.byte	0x1
 3431 0e03 05       		.byte	0x5
 3432 0e04 03       		.byte	0x3
 3433 0e05 00000000 		.4byte	vpote
 3434 0e09 00       		.byte	0
 3435              		.section	.debug_abbrev,"",%progbits
 3436              	.Ldebug_abbrev0:
 3437 0000 01       		.uleb128 0x1
 3438 0001 11       		.uleb128 0x11
 3439 0002 01       		.byte	0x1
 3440 0003 25       		.uleb128 0x25
 3441 0004 0E       		.uleb128 0xe
 3442 0005 13       		.uleb128 0x13
 3443 0006 0B       		.uleb128 0xb
 3444 0007 03       		.uleb128 0x3
 3445 0008 0E       		.uleb128 0xe
 3446 0009 1B       		.uleb128 0x1b
 3447 000a 0E       		.uleb128 0xe
 3448 000b 55       		.uleb128 0x55
 3449 000c 06       		.uleb128 0x6
 3450 000d 11       		.uleb128 0x11
 3451 000e 01       		.uleb128 0x1
 3452 000f 52       		.uleb128 0x52
 3453 0010 01       		.uleb128 0x1
 3454 0011 10       		.uleb128 0x10
 3455 0012 06       		.uleb128 0x6
 3456 0013 00       		.byte	0
 3457 0014 00       		.byte	0
 3458 0015 02       		.uleb128 0x2
 3459 0016 04       		.uleb128 0x4
 3460 0017 01       		.byte	0x1
 3461 0018 03       		.uleb128 0x3
 3462 0019 0E       		.uleb128 0xe
 3463 001a 0B       		.uleb128 0xb
 3464 001b 0B       		.uleb128 0xb
 3465 001c 49       		.uleb128 0x49
ARM GAS  /tmp/ccC0Akiw.s 			page 101


 3466 001d 13       		.uleb128 0x13
 3467 001e 3A       		.uleb128 0x3a
 3468 001f 0B       		.uleb128 0xb
 3469 0020 3B       		.uleb128 0x3b
 3470 0021 0B       		.uleb128 0xb
 3471 0022 01       		.uleb128 0x1
 3472 0023 13       		.uleb128 0x13
 3473 0024 00       		.byte	0
 3474 0025 00       		.byte	0
 3475 0026 03       		.uleb128 0x3
 3476 0027 28       		.uleb128 0x28
 3477 0028 00       		.byte	0
 3478 0029 03       		.uleb128 0x3
 3479 002a 0E       		.uleb128 0xe
 3480 002b 1C       		.uleb128 0x1c
 3481 002c 0D       		.uleb128 0xd
 3482 002d 00       		.byte	0
 3483 002e 00       		.byte	0
 3484 002f 04       		.uleb128 0x4
 3485 0030 28       		.uleb128 0x28
 3486 0031 00       		.byte	0
 3487 0032 03       		.uleb128 0x3
 3488 0033 0E       		.uleb128 0xe
 3489 0034 1C       		.uleb128 0x1c
 3490 0035 0B       		.uleb128 0xb
 3491 0036 00       		.byte	0
 3492 0037 00       		.byte	0
 3493 0038 05       		.uleb128 0x5
 3494 0039 24       		.uleb128 0x24
 3495 003a 00       		.byte	0
 3496 003b 0B       		.uleb128 0xb
 3497 003c 0B       		.uleb128 0xb
 3498 003d 3E       		.uleb128 0x3e
 3499 003e 0B       		.uleb128 0xb
 3500 003f 03       		.uleb128 0x3
 3501 0040 0E       		.uleb128 0xe
 3502 0041 00       		.byte	0
 3503 0042 00       		.byte	0
 3504 0043 06       		.uleb128 0x6
 3505 0044 16       		.uleb128 0x16
 3506 0045 00       		.byte	0
 3507 0046 03       		.uleb128 0x3
 3508 0047 0E       		.uleb128 0xe
 3509 0048 3A       		.uleb128 0x3a
 3510 0049 0B       		.uleb128 0xb
 3511 004a 3B       		.uleb128 0x3b
 3512 004b 05       		.uleb128 0x5
 3513 004c 49       		.uleb128 0x49
 3514 004d 13       		.uleb128 0x13
 3515 004e 00       		.byte	0
 3516 004f 00       		.byte	0
 3517 0050 07       		.uleb128 0x7
 3518 0051 16       		.uleb128 0x16
 3519 0052 00       		.byte	0
 3520 0053 03       		.uleb128 0x3
 3521 0054 0E       		.uleb128 0xe
 3522 0055 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccC0Akiw.s 			page 102


 3523 0056 0B       		.uleb128 0xb
 3524 0057 3B       		.uleb128 0x3b
 3525 0058 0B       		.uleb128 0xb
 3526 0059 49       		.uleb128 0x49
 3527 005a 13       		.uleb128 0x13
 3528 005b 00       		.byte	0
 3529 005c 00       		.byte	0
 3530 005d 08       		.uleb128 0x8
 3531 005e 24       		.uleb128 0x24
 3532 005f 00       		.byte	0
 3533 0060 0B       		.uleb128 0xb
 3534 0061 0B       		.uleb128 0xb
 3535 0062 3E       		.uleb128 0x3e
 3536 0063 0B       		.uleb128 0xb
 3537 0064 03       		.uleb128 0x3
 3538 0065 08       		.uleb128 0x8
 3539 0066 00       		.byte	0
 3540 0067 00       		.byte	0
 3541 0068 09       		.uleb128 0x9
 3542 0069 13       		.uleb128 0x13
 3543 006a 01       		.byte	0x1
 3544 006b 0B       		.uleb128 0xb
 3545 006c 05       		.uleb128 0x5
 3546 006d 3A       		.uleb128 0x3a
 3547 006e 0B       		.uleb128 0xb
 3548 006f 3B       		.uleb128 0x3b
 3549 0070 0B       		.uleb128 0xb
 3550 0071 01       		.uleb128 0x1
 3551 0072 13       		.uleb128 0x13
 3552 0073 00       		.byte	0
 3553 0074 00       		.byte	0
 3554 0075 0A       		.uleb128 0xa
 3555 0076 0D       		.uleb128 0xd
 3556 0077 00       		.byte	0
 3557 0078 03       		.uleb128 0x3
 3558 0079 0E       		.uleb128 0xe
 3559 007a 3A       		.uleb128 0x3a
 3560 007b 0B       		.uleb128 0xb
 3561 007c 3B       		.uleb128 0x3b
 3562 007d 0B       		.uleb128 0xb
 3563 007e 49       		.uleb128 0x49
 3564 007f 13       		.uleb128 0x13
 3565 0080 38       		.uleb128 0x38
 3566 0081 0A       		.uleb128 0xa
 3567 0082 00       		.byte	0
 3568 0083 00       		.byte	0
 3569 0084 0B       		.uleb128 0xb
 3570 0085 0D       		.uleb128 0xd
 3571 0086 00       		.byte	0
 3572 0087 03       		.uleb128 0x3
 3573 0088 08       		.uleb128 0x8
 3574 0089 3A       		.uleb128 0x3a
 3575 008a 0B       		.uleb128 0xb
 3576 008b 3B       		.uleb128 0x3b
 3577 008c 0B       		.uleb128 0xb
 3578 008d 49       		.uleb128 0x49
 3579 008e 13       		.uleb128 0x13
ARM GAS  /tmp/ccC0Akiw.s 			page 103


 3580 008f 38       		.uleb128 0x38
 3581 0090 0A       		.uleb128 0xa
 3582 0091 00       		.byte	0
 3583 0092 00       		.byte	0
 3584 0093 0C       		.uleb128 0xc
 3585 0094 01       		.uleb128 0x1
 3586 0095 01       		.byte	0x1
 3587 0096 49       		.uleb128 0x49
 3588 0097 13       		.uleb128 0x13
 3589 0098 01       		.uleb128 0x1
 3590 0099 13       		.uleb128 0x13
 3591 009a 00       		.byte	0
 3592 009b 00       		.byte	0
 3593 009c 0D       		.uleb128 0xd
 3594 009d 21       		.uleb128 0x21
 3595 009e 00       		.byte	0
 3596 009f 49       		.uleb128 0x49
 3597 00a0 13       		.uleb128 0x13
 3598 00a1 2F       		.uleb128 0x2f
 3599 00a2 0B       		.uleb128 0xb
 3600 00a3 00       		.byte	0
 3601 00a4 00       		.byte	0
 3602 00a5 0E       		.uleb128 0xe
 3603 00a6 35       		.uleb128 0x35
 3604 00a7 00       		.byte	0
 3605 00a8 49       		.uleb128 0x49
 3606 00a9 13       		.uleb128 0x13
 3607 00aa 00       		.byte	0
 3608 00ab 00       		.byte	0
 3609 00ac 0F       		.uleb128 0xf
 3610 00ad 13       		.uleb128 0x13
 3611 00ae 01       		.byte	0x1
 3612 00af 0B       		.uleb128 0xb
 3613 00b0 0B       		.uleb128 0xb
 3614 00b1 3A       		.uleb128 0x3a
 3615 00b2 0B       		.uleb128 0xb
 3616 00b3 3B       		.uleb128 0x3b
 3617 00b4 0B       		.uleb128 0xb
 3618 00b5 01       		.uleb128 0x1
 3619 00b6 13       		.uleb128 0x13
 3620 00b7 00       		.byte	0
 3621 00b8 00       		.byte	0
 3622 00b9 10       		.uleb128 0x10
 3623 00ba 26       		.uleb128 0x26
 3624 00bb 00       		.byte	0
 3625 00bc 49       		.uleb128 0x49
 3626 00bd 13       		.uleb128 0x13
 3627 00be 00       		.byte	0
 3628 00bf 00       		.byte	0
 3629 00c0 11       		.uleb128 0x11
 3630 00c1 0D       		.uleb128 0xd
 3631 00c2 00       		.byte	0
 3632 00c3 03       		.uleb128 0x3
 3633 00c4 08       		.uleb128 0x8
 3634 00c5 3A       		.uleb128 0x3a
 3635 00c6 0B       		.uleb128 0xb
 3636 00c7 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccC0Akiw.s 			page 104


 3637 00c8 05       		.uleb128 0x5
 3638 00c9 49       		.uleb128 0x49
 3639 00ca 13       		.uleb128 0x13
 3640 00cb 38       		.uleb128 0x38
 3641 00cc 0A       		.uleb128 0xa
 3642 00cd 00       		.byte	0
 3643 00ce 00       		.byte	0
 3644 00cf 12       		.uleb128 0x12
 3645 00d0 0D       		.uleb128 0xd
 3646 00d1 00       		.byte	0
 3647 00d2 03       		.uleb128 0x3
 3648 00d3 0E       		.uleb128 0xe
 3649 00d4 3A       		.uleb128 0x3a
 3650 00d5 0B       		.uleb128 0xb
 3651 00d6 3B       		.uleb128 0x3b
 3652 00d7 05       		.uleb128 0x5
 3653 00d8 49       		.uleb128 0x49
 3654 00d9 13       		.uleb128 0x13
 3655 00da 38       		.uleb128 0x38
 3656 00db 0A       		.uleb128 0xa
 3657 00dc 00       		.byte	0
 3658 00dd 00       		.byte	0
 3659 00de 13       		.uleb128 0x13
 3660 00df 13       		.uleb128 0x13
 3661 00e0 01       		.byte	0x1
 3662 00e1 0B       		.uleb128 0xb
 3663 00e2 0B       		.uleb128 0xb
 3664 00e3 3A       		.uleb128 0x3a
 3665 00e4 0B       		.uleb128 0xb
 3666 00e5 3B       		.uleb128 0x3b
 3667 00e6 05       		.uleb128 0x5
 3668 00e7 01       		.uleb128 0x1
 3669 00e8 13       		.uleb128 0x13
 3670 00e9 00       		.byte	0
 3671 00ea 00       		.byte	0
 3672 00eb 14       		.uleb128 0x14
 3673 00ec 04       		.uleb128 0x4
 3674 00ed 01       		.byte	0x1
 3675 00ee 0B       		.uleb128 0xb
 3676 00ef 0B       		.uleb128 0xb
 3677 00f0 49       		.uleb128 0x49
 3678 00f1 13       		.uleb128 0x13
 3679 00f2 3A       		.uleb128 0x3a
 3680 00f3 0B       		.uleb128 0xb
 3681 00f4 3B       		.uleb128 0x3b
 3682 00f5 0B       		.uleb128 0xb
 3683 00f6 01       		.uleb128 0x1
 3684 00f7 13       		.uleb128 0x13
 3685 00f8 00       		.byte	0
 3686 00f9 00       		.byte	0
 3687 00fa 15       		.uleb128 0x15
 3688 00fb 13       		.uleb128 0x13
 3689 00fc 01       		.byte	0x1
 3690 00fd 03       		.uleb128 0x3
 3691 00fe 0E       		.uleb128 0xe
 3692 00ff 0B       		.uleb128 0xb
 3693 0100 0B       		.uleb128 0xb
ARM GAS  /tmp/ccC0Akiw.s 			page 105


 3694 0101 3A       		.uleb128 0x3a
 3695 0102 0B       		.uleb128 0xb
 3696 0103 3B       		.uleb128 0x3b
 3697 0104 0B       		.uleb128 0xb
 3698 0105 01       		.uleb128 0x1
 3699 0106 13       		.uleb128 0x13
 3700 0107 00       		.byte	0
 3701 0108 00       		.byte	0
 3702 0109 16       		.uleb128 0x16
 3703 010a 2E       		.uleb128 0x2e
 3704 010b 01       		.byte	0x1
 3705 010c 03       		.uleb128 0x3
 3706 010d 0E       		.uleb128 0xe
 3707 010e 3A       		.uleb128 0x3a
 3708 010f 0B       		.uleb128 0xb
 3709 0110 3B       		.uleb128 0x3b
 3710 0111 05       		.uleb128 0x5
 3711 0112 27       		.uleb128 0x27
 3712 0113 0C       		.uleb128 0xc
 3713 0114 11       		.uleb128 0x11
 3714 0115 01       		.uleb128 0x1
 3715 0116 12       		.uleb128 0x12
 3716 0117 01       		.uleb128 0x1
 3717 0118 40       		.uleb128 0x40
 3718 0119 06       		.uleb128 0x6
 3719 011a 9742     		.uleb128 0x2117
 3720 011c 0C       		.uleb128 0xc
 3721 011d 01       		.uleb128 0x1
 3722 011e 13       		.uleb128 0x13
 3723 011f 00       		.byte	0
 3724 0120 00       		.byte	0
 3725 0121 17       		.uleb128 0x17
 3726 0122 05       		.uleb128 0x5
 3727 0123 00       		.byte	0
 3728 0124 03       		.uleb128 0x3
 3729 0125 0E       		.uleb128 0xe
 3730 0126 3A       		.uleb128 0x3a
 3731 0127 0B       		.uleb128 0xb
 3732 0128 3B       		.uleb128 0x3b
 3733 0129 05       		.uleb128 0x5
 3734 012a 49       		.uleb128 0x49
 3735 012b 13       		.uleb128 0x13
 3736 012c 02       		.uleb128 0x2
 3737 012d 0A       		.uleb128 0xa
 3738 012e 00       		.byte	0
 3739 012f 00       		.byte	0
 3740 0130 18       		.uleb128 0x18
 3741 0131 2E       		.uleb128 0x2e
 3742 0132 01       		.byte	0x1
 3743 0133 03       		.uleb128 0x3
 3744 0134 0E       		.uleb128 0xe
 3745 0135 3A       		.uleb128 0x3a
 3746 0136 0B       		.uleb128 0xb
 3747 0137 3B       		.uleb128 0x3b
 3748 0138 05       		.uleb128 0x5
 3749 0139 27       		.uleb128 0x27
 3750 013a 0C       		.uleb128 0xc
ARM GAS  /tmp/ccC0Akiw.s 			page 106


 3751 013b 49       		.uleb128 0x49
 3752 013c 13       		.uleb128 0x13
 3753 013d 11       		.uleb128 0x11
 3754 013e 01       		.uleb128 0x1
 3755 013f 12       		.uleb128 0x12
 3756 0140 01       		.uleb128 0x1
 3757 0141 40       		.uleb128 0x40
 3758 0142 06       		.uleb128 0x6
 3759 0143 9642     		.uleb128 0x2116
 3760 0145 0C       		.uleb128 0xc
 3761 0146 01       		.uleb128 0x1
 3762 0147 13       		.uleb128 0x13
 3763 0148 00       		.byte	0
 3764 0149 00       		.byte	0
 3765 014a 19       		.uleb128 0x19
 3766 014b 2E       		.uleb128 0x2e
 3767 014c 01       		.byte	0x1
 3768 014d 3F       		.uleb128 0x3f
 3769 014e 0C       		.uleb128 0xc
 3770 014f 03       		.uleb128 0x3
 3771 0150 0E       		.uleb128 0xe
 3772 0151 3A       		.uleb128 0x3a
 3773 0152 0B       		.uleb128 0xb
 3774 0153 3B       		.uleb128 0x3b
 3775 0154 0B       		.uleb128 0xb
 3776 0155 27       		.uleb128 0x27
 3777 0156 0C       		.uleb128 0xc
 3778 0157 49       		.uleb128 0x49
 3779 0158 13       		.uleb128 0x13
 3780 0159 11       		.uleb128 0x11
 3781 015a 01       		.uleb128 0x1
 3782 015b 12       		.uleb128 0x12
 3783 015c 01       		.uleb128 0x1
 3784 015d 40       		.uleb128 0x40
 3785 015e 06       		.uleb128 0x6
 3786 015f 9642     		.uleb128 0x2116
 3787 0161 0C       		.uleb128 0xc
 3788 0162 01       		.uleb128 0x1
 3789 0163 13       		.uleb128 0x13
 3790 0164 00       		.byte	0
 3791 0165 00       		.byte	0
 3792 0166 1A       		.uleb128 0x1a
 3793 0167 34       		.uleb128 0x34
 3794 0168 00       		.byte	0
 3795 0169 03       		.uleb128 0x3
 3796 016a 08       		.uleb128 0x8
 3797 016b 3A       		.uleb128 0x3a
 3798 016c 0B       		.uleb128 0xb
 3799 016d 3B       		.uleb128 0x3b
 3800 016e 0B       		.uleb128 0xb
 3801 016f 49       		.uleb128 0x49
 3802 0170 13       		.uleb128 0x13
 3803 0171 02       		.uleb128 0x2
 3804 0172 0A       		.uleb128 0xa
 3805 0173 00       		.byte	0
 3806 0174 00       		.byte	0
 3807 0175 1B       		.uleb128 0x1b
ARM GAS  /tmp/ccC0Akiw.s 			page 107


 3808 0176 34       		.uleb128 0x34
 3809 0177 00       		.byte	0
 3810 0178 03       		.uleb128 0x3
 3811 0179 08       		.uleb128 0x8
 3812 017a 3A       		.uleb128 0x3a
 3813 017b 0B       		.uleb128 0xb
 3814 017c 3B       		.uleb128 0x3b
 3815 017d 0B       		.uleb128 0xb
 3816 017e 49       		.uleb128 0x49
 3817 017f 13       		.uleb128 0x13
 3818 0180 00       		.byte	0
 3819 0181 00       		.byte	0
 3820 0182 1C       		.uleb128 0x1c
 3821 0183 34       		.uleb128 0x34
 3822 0184 00       		.byte	0
 3823 0185 03       		.uleb128 0x3
 3824 0186 0E       		.uleb128 0xe
 3825 0187 3A       		.uleb128 0x3a
 3826 0188 0B       		.uleb128 0xb
 3827 0189 3B       		.uleb128 0x3b
 3828 018a 0B       		.uleb128 0xb
 3829 018b 49       		.uleb128 0x49
 3830 018c 13       		.uleb128 0x13
 3831 018d 00       		.byte	0
 3832 018e 00       		.byte	0
 3833 018f 1D       		.uleb128 0x1d
 3834 0190 34       		.uleb128 0x34
 3835 0191 00       		.byte	0
 3836 0192 03       		.uleb128 0x3
 3837 0193 0E       		.uleb128 0xe
 3838 0194 3A       		.uleb128 0x3a
 3839 0195 0B       		.uleb128 0xb
 3840 0196 3B       		.uleb128 0x3b
 3841 0197 0B       		.uleb128 0xb
 3842 0198 49       		.uleb128 0x49
 3843 0199 13       		.uleb128 0x13
 3844 019a 02       		.uleb128 0x2
 3845 019b 0A       		.uleb128 0xa
 3846 019c 00       		.byte	0
 3847 019d 00       		.byte	0
 3848 019e 1E       		.uleb128 0x1e
 3849 019f 0F       		.uleb128 0xf
 3850 01a0 00       		.byte	0
 3851 01a1 0B       		.uleb128 0xb
 3852 01a2 0B       		.uleb128 0xb
 3853 01a3 49       		.uleb128 0x49
 3854 01a4 13       		.uleb128 0x13
 3855 01a5 00       		.byte	0
 3856 01a6 00       		.byte	0
 3857 01a7 1F       		.uleb128 0x1f
 3858 01a8 2E       		.uleb128 0x2e
 3859 01a9 01       		.byte	0x1
 3860 01aa 3F       		.uleb128 0x3f
 3861 01ab 0C       		.uleb128 0xc
 3862 01ac 03       		.uleb128 0x3
 3863 01ad 0E       		.uleb128 0xe
 3864 01ae 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccC0Akiw.s 			page 108


 3865 01af 0B       		.uleb128 0xb
 3866 01b0 3B       		.uleb128 0x3b
 3867 01b1 05       		.uleb128 0x5
 3868 01b2 27       		.uleb128 0x27
 3869 01b3 0C       		.uleb128 0xc
 3870 01b4 11       		.uleb128 0x11
 3871 01b5 01       		.uleb128 0x1
 3872 01b6 12       		.uleb128 0x12
 3873 01b7 01       		.uleb128 0x1
 3874 01b8 40       		.uleb128 0x40
 3875 01b9 06       		.uleb128 0x6
 3876 01ba 9642     		.uleb128 0x2116
 3877 01bc 0C       		.uleb128 0xc
 3878 01bd 01       		.uleb128 0x1
 3879 01be 13       		.uleb128 0x13
 3880 01bf 00       		.byte	0
 3881 01c0 00       		.byte	0
 3882 01c1 20       		.uleb128 0x20
 3883 01c2 34       		.uleb128 0x34
 3884 01c3 00       		.byte	0
 3885 01c4 03       		.uleb128 0x3
 3886 01c5 08       		.uleb128 0x8
 3887 01c6 3A       		.uleb128 0x3a
 3888 01c7 0B       		.uleb128 0xb
 3889 01c8 3B       		.uleb128 0x3b
 3890 01c9 05       		.uleb128 0x5
 3891 01ca 49       		.uleb128 0x49
 3892 01cb 13       		.uleb128 0x13
 3893 01cc 02       		.uleb128 0x2
 3894 01cd 0A       		.uleb128 0xa
 3895 01ce 00       		.byte	0
 3896 01cf 00       		.byte	0
 3897 01d0 21       		.uleb128 0x21
 3898 01d1 34       		.uleb128 0x34
 3899 01d2 00       		.byte	0
 3900 01d3 03       		.uleb128 0x3
 3901 01d4 0E       		.uleb128 0xe
 3902 01d5 3A       		.uleb128 0x3a
 3903 01d6 0B       		.uleb128 0xb
 3904 01d7 3B       		.uleb128 0x3b
 3905 01d8 05       		.uleb128 0x5
 3906 01d9 49       		.uleb128 0x49
 3907 01da 13       		.uleb128 0x13
 3908 01db 02       		.uleb128 0x2
 3909 01dc 0A       		.uleb128 0xa
 3910 01dd 00       		.byte	0
 3911 01de 00       		.byte	0
 3912 01df 22       		.uleb128 0x22
 3913 01e0 2E       		.uleb128 0x2e
 3914 01e1 00       		.byte	0
 3915 01e2 3F       		.uleb128 0x3f
 3916 01e3 0C       		.uleb128 0xc
 3917 01e4 03       		.uleb128 0x3
 3918 01e5 0E       		.uleb128 0xe
 3919 01e6 3A       		.uleb128 0x3a
 3920 01e7 0B       		.uleb128 0xb
 3921 01e8 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccC0Akiw.s 			page 109


 3922 01e9 05       		.uleb128 0x5
 3923 01ea 27       		.uleb128 0x27
 3924 01eb 0C       		.uleb128 0xc
 3925 01ec 11       		.uleb128 0x11
 3926 01ed 01       		.uleb128 0x1
 3927 01ee 12       		.uleb128 0x12
 3928 01ef 01       		.uleb128 0x1
 3929 01f0 40       		.uleb128 0x40
 3930 01f1 06       		.uleb128 0x6
 3931 01f2 9642     		.uleb128 0x2116
 3932 01f4 0C       		.uleb128 0xc
 3933 01f5 00       		.byte	0
 3934 01f6 00       		.byte	0
 3935 01f7 23       		.uleb128 0x23
 3936 01f8 34       		.uleb128 0x34
 3937 01f9 00       		.byte	0
 3938 01fa 03       		.uleb128 0x3
 3939 01fb 0E       		.uleb128 0xe
 3940 01fc 3A       		.uleb128 0x3a
 3941 01fd 0B       		.uleb128 0xb
 3942 01fe 3B       		.uleb128 0x3b
 3943 01ff 0B       		.uleb128 0xb
 3944 0200 49       		.uleb128 0x49
 3945 0201 13       		.uleb128 0x13
 3946 0202 3F       		.uleb128 0x3f
 3947 0203 0C       		.uleb128 0xc
 3948 0204 02       		.uleb128 0x2
 3949 0205 0A       		.uleb128 0xa
 3950 0206 00       		.byte	0
 3951 0207 00       		.byte	0
 3952 0208 24       		.uleb128 0x24
 3953 0209 34       		.uleb128 0x34
 3954 020a 00       		.byte	0
 3955 020b 03       		.uleb128 0x3
 3956 020c 08       		.uleb128 0x8
 3957 020d 3A       		.uleb128 0x3a
 3958 020e 0B       		.uleb128 0xb
 3959 020f 3B       		.uleb128 0x3b
 3960 0210 0B       		.uleb128 0xb
 3961 0211 49       		.uleb128 0x49
 3962 0212 13       		.uleb128 0x13
 3963 0213 3F       		.uleb128 0x3f
 3964 0214 0C       		.uleb128 0xc
 3965 0215 02       		.uleb128 0x2
 3966 0216 0A       		.uleb128 0xa
 3967 0217 00       		.byte	0
 3968 0218 00       		.byte	0
 3969 0219 25       		.uleb128 0x25
 3970 021a 21       		.uleb128 0x21
 3971 021b 00       		.byte	0
 3972 021c 00       		.byte	0
 3973 021d 00       		.byte	0
 3974 021e 26       		.uleb128 0x26
 3975 021f 34       		.uleb128 0x34
 3976 0220 00       		.byte	0
 3977 0221 03       		.uleb128 0x3
 3978 0222 0E       		.uleb128 0xe
ARM GAS  /tmp/ccC0Akiw.s 			page 110


 3979 0223 3A       		.uleb128 0x3a
 3980 0224 0B       		.uleb128 0xb
 3981 0225 3B       		.uleb128 0x3b
 3982 0226 0B       		.uleb128 0xb
 3983 0227 49       		.uleb128 0x49
 3984 0228 13       		.uleb128 0x13
 3985 0229 3F       		.uleb128 0x3f
 3986 022a 0C       		.uleb128 0xc
 3987 022b 3C       		.uleb128 0x3c
 3988 022c 0C       		.uleb128 0xc
 3989 022d 00       		.byte	0
 3990 022e 00       		.byte	0
 3991 022f 00       		.byte	0
 3992              		.section	.debug_loc,"",%progbits
 3993              	.Ldebug_loc0:
 3994              	.LLST0:
 3995 0000 00000000 		.4byte	.LFB16
 3996 0004 02000000 		.4byte	.LCFI0
 3997 0008 0200     		.2byte	0x2
 3998 000a 7D       		.byte	0x7d
 3999 000b 00       		.sleb128 0
 4000 000c 02000000 		.4byte	.LCFI0
 4001 0010 04000000 		.4byte	.LCFI1
 4002 0014 0200     		.2byte	0x2
 4003 0016 7D       		.byte	0x7d
 4004 0017 0C       		.sleb128 12
 4005 0018 04000000 		.4byte	.LCFI1
 4006 001c EC000000 		.4byte	.LFE16
 4007 0020 0200     		.2byte	0x2
 4008 0022 7D       		.byte	0x7d
 4009 0023 18       		.sleb128 24
 4010 0024 00000000 		.4byte	0
 4011 0028 00000000 		.4byte	0
 4012              	.LLST1:
 4013 002c 00000000 		.4byte	.LFB18
 4014 0030 02000000 		.4byte	.LCFI2
 4015 0034 0200     		.2byte	0x2
 4016 0036 7D       		.byte	0x7d
 4017 0037 00       		.sleb128 0
 4018 0038 02000000 		.4byte	.LCFI2
 4019 003c 04000000 		.4byte	.LCFI3
 4020 0040 0200     		.2byte	0x2
 4021 0042 7D       		.byte	0x7d
 4022 0043 04       		.sleb128 4
 4023 0044 04000000 		.4byte	.LCFI3
 4024 0048 48000000 		.4byte	.LFE18
 4025 004c 0200     		.2byte	0x2
 4026 004e 7D       		.byte	0x7d
 4027 004f 10       		.sleb128 16
 4028 0050 00000000 		.4byte	0
 4029 0054 00000000 		.4byte	0
 4030              	.LLST2:
 4031 0058 00000000 		.4byte	.LFB20
 4032 005c 02000000 		.4byte	.LCFI4
 4033 0060 0200     		.2byte	0x2
 4034 0062 7D       		.byte	0x7d
 4035 0063 00       		.sleb128 0
ARM GAS  /tmp/ccC0Akiw.s 			page 111


 4036 0064 02000000 		.4byte	.LCFI4
 4037 0068 04000000 		.4byte	.LCFI5
 4038 006c 0200     		.2byte	0x2
 4039 006e 7D       		.byte	0x7d
 4040 006f 0C       		.sleb128 12
 4041 0070 04000000 		.4byte	.LCFI5
 4042 0074 1C050000 		.4byte	.LFE20
 4043 0078 0300     		.2byte	0x3
 4044 007a 7D       		.byte	0x7d
 4045 007b D000     		.sleb128 80
 4046 007d 00000000 		.4byte	0
 4047 0081 00000000 		.4byte	0
 4048              	.LLST3:
 4049 0085 00000000 		.4byte	.LFB21
 4050 0089 02000000 		.4byte	.LCFI6
 4051 008d 0200     		.2byte	0x2
 4052 008f 7D       		.byte	0x7d
 4053 0090 00       		.sleb128 0
 4054 0091 02000000 		.4byte	.LCFI6
 4055 0095 04000000 		.4byte	.LCFI7
 4056 0099 0200     		.2byte	0x2
 4057 009b 7D       		.byte	0x7d
 4058 009c 04       		.sleb128 4
 4059 009d 04000000 		.4byte	.LCFI7
 4060 00a1 B0000000 		.4byte	.LFE21
 4061 00a5 0300     		.2byte	0x3
 4062 00a7 7D       		.byte	0x7d
 4063 00a8 E000     		.sleb128 96
 4064 00aa 00000000 		.4byte	0
 4065 00ae 00000000 		.4byte	0
 4066              	.LLST4:
 4067 00b2 00000000 		.4byte	.LFB22
 4068 00b6 02000000 		.4byte	.LCFI8
 4069 00ba 0200     		.2byte	0x2
 4070 00bc 7D       		.byte	0x7d
 4071 00bd 00       		.sleb128 0
 4072 00be 02000000 		.4byte	.LCFI8
 4073 00c2 64010000 		.4byte	.LFE22
 4074 00c6 0200     		.2byte	0x2
 4075 00c8 7D       		.byte	0x7d
 4076 00c9 08       		.sleb128 8
 4077 00ca 00000000 		.4byte	0
 4078 00ce 00000000 		.4byte	0
 4079              		.section	.debug_aranges,"",%progbits
 4080 0000 3C000000 		.4byte	0x3c
 4081 0004 0200     		.2byte	0x2
 4082 0006 00000000 		.4byte	.Ldebug_info0
 4083 000a 04       		.byte	0x4
 4084 000b 00       		.byte	0
 4085 000c 0000     		.2byte	0
 4086 000e 0000     		.2byte	0
 4087 0010 00000000 		.4byte	.LFB16
 4088 0014 EC000000 		.4byte	.LFE16-.LFB16
 4089 0018 00000000 		.4byte	.LFB18
 4090 001c 48000000 		.4byte	.LFE18-.LFB18
 4091 0020 00000000 		.4byte	.LFB20
 4092 0024 1C050000 		.4byte	.LFE20-.LFB20
ARM GAS  /tmp/ccC0Akiw.s 			page 112


 4093 0028 00000000 		.4byte	.LFB21
 4094 002c B0000000 		.4byte	.LFE21-.LFB21
 4095 0030 00000000 		.4byte	.LFB22
 4096 0034 64010000 		.4byte	.LFE22-.LFB22
 4097 0038 00000000 		.4byte	0
 4098 003c 00000000 		.4byte	0
 4099              		.section	.debug_ranges,"",%progbits
 4100              	.Ldebug_ranges0:
 4101 0000 00000000 		.4byte	.LFB16
 4102 0004 EC000000 		.4byte	.LFE16
 4103 0008 00000000 		.4byte	.LFB18
 4104 000c 48000000 		.4byte	.LFE18
 4105 0010 00000000 		.4byte	.LFB20
 4106 0014 1C050000 		.4byte	.LFE20
 4107 0018 00000000 		.4byte	.LFB21
 4108 001c B0000000 		.4byte	.LFE21
 4109 0020 00000000 		.4byte	.LFB22
 4110 0024 64010000 		.4byte	.LFE22
 4111 0028 00000000 		.4byte	0
 4112 002c 00000000 		.4byte	0
 4113              		.section	.debug_line,"",%progbits
 4114              	.Ldebug_line0:
 4115 0000 B8020000 		.section	.debug_str,"MS",%progbits,1
 4115      02004C01 
 4115      00000201 
 4115      FB0E0D00 
 4115      01010101 
 4116              	.LASF137:
 4117 0000 735F6C63 		.ascii	"s_lcd\000"
 4117      6400
 4118              	.LASF104:
 4119 0006 70776D5F 		.ascii	"pwm_channel_1\000"
 4119      6368616E 
 4119      6E656C5F 
 4119      3100
 4120              	.LASF105:
 4121 0014 70776D5F 		.ascii	"pwm_channel_2\000"
 4121      6368616E 
 4121      6E656C5F 
 4121      3200
 4122              	.LASF106:
 4123 0022 70776D5F 		.ascii	"pwm_channel_3\000"
 4123      6368616E 
 4123      6E656C5F 
 4123      3300
 4124              	.LASF107:
 4125 0030 70776D5F 		.ascii	"pwm_channel_4\000"
 4125      6368616E 
 4125      6E656C5F 
 4125      3400
 4126              	.LASF132:
 4127 003e 7A65726F 		.ascii	"zero_current_loc\000"
 4127      5F637572 
 4127      72656E74 
 4127      5F6C6F63 
 4127      00
 4128              	.LASF158:
ARM GAS  /tmp/ccC0Akiw.s 			page 113


 4129 004f 61637377 		.ascii	"acswitch_timer\000"
 4129      69746368 
 4129      5F74696D 
 4129      657200
 4130              	.LASF183:
 4131 005e 70617261 		.ascii	"param_struct\000"
 4131      6D5F7374 
 4131      72756374 
 4131      00
 4132              	.LASF99:
 4133 006b 6C617374 		.ascii	"last_program_deep_in_flash\000"
 4133      5F70726F 
 4133      6772616D 
 4133      5F646565 
 4133      705F696E 
 4134              	.LASF12:
 4135 0086 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4135      345F3135 
 4135      5F495251 
 4135      6E00
 4136              	.LASF83:
 4137 0094 42535252 		.ascii	"BSRR\000"
 4137      00
 4138              	.LASF97:
 4139 0099 6C617374 		.ascii	"last_function_in_flash\000"
 4139      5F66756E 
 4139      6374696F 
 4139      6E5F696E 
 4139      5F666C61 
 4140              	.LASF11:
 4141 00b0 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4141      325F335F 
 4141      4952516E 
 4141      00
 4142              	.LASF133:
 4143 00bd 6D61696E 		.ascii	"main_state\000"
 4143      5F737461 
 4143      746500
 4144              	.LASF145:
 4145 00c8 705F6D65 		.ascii	"p_mem_init\000"
 4145      6D5F696E 
 4145      697400
 4146              	.LASF2:
 4147 00d3 5356435F 		.ascii	"SVC_IRQn\000"
 4147      4952516E 
 4147      00
 4148              	.LASF147:
 4149 00dc 62756666 		.ascii	"buffer\000"
 4149      657200
 4150              	.LASF200:
 4151 00e3 76706F74 		.ascii	"vpote\000"
 4151      6500
 4152              	.LASF205:
 4153 00e9 4E564943 		.ascii	"NVIC_SetPriority\000"
 4153      5F536574 
 4153      5072696F 
 4153      72697479 
ARM GAS  /tmp/ccC0Akiw.s 			page 114


 4153      00
 4154              	.LASF47:
 4155 00fa 756E7369 		.ascii	"unsigned int\000"
 4155      676E6564 
 4155      20696E74 
 4155      00
 4156              	.LASF71:
 4157 0107 4C4F4144 		.ascii	"LOAD\000"
 4157      00
 4158              	.LASF25:
 4159 010c 54494D31 		.ascii	"TIM16_IRQn\000"
 4159      365F4952 
 4159      516E00
 4160              	.LASF193:
 4161 0117 7463705F 		.ascii	"tcp_kalive_timer\000"
 4161      6B616C69 
 4161      76655F74 
 4161      696D6572 
 4161      00
 4162              	.LASF41:
 4163 0128 5F5F696E 		.ascii	"__int32_t\000"
 4163      7433325F 
 4163      7400
 4164              	.LASF153:
 4165 0132 72783262 		.ascii	"rx2buff\000"
 4165      75666600 
 4166              	.LASF8:
 4167 013a 464C4153 		.ascii	"FLASH_IRQn\000"
 4167      485F4952 
 4167      516E00
 4168              	.LASF155:
 4169 0145 72783162 		.ascii	"rx1buff\000"
 4169      75666600 
 4170              	.LASF198:
 4171 014d 706F7765 		.ascii	"power_vect\000"
 4171      725F7665 
 4171      637400
 4172              	.LASF100:
 4173 0158 64756D6D 		.ascii	"dummy\000"
 4173      7900
 4174              	.LASF72:
 4175 015e 43414C49 		.ascii	"CALIB\000"
 4175      4200
 4176              	.LASF179:
 4177 0164 75736172 		.ascii	"usart2_pckt_ready\000"
 4177      74325F70 
 4177      636B745F 
 4177      72656164 
 4177      7900
 4178              	.LASF152:
 4179 0176 74783262 		.ascii	"tx2buff\000"
 4179      75666600 
 4180              	.LASF10:
 4181 017e 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4181      305F315F 
 4181      4952516E 
 4181      00
ARM GAS  /tmp/ccC0Akiw.s 			page 115


 4182              	.LASF163:
 4183 018b 67726F75 		.ascii	"grouped_master_timeout_timer\000"
 4183      7065645F 
 4183      6D617374 
 4183      65725F74 
 4183      696D656F 
 4184              	.LASF27:
 4185 01a8 49324331 		.ascii	"I2C1_IRQn\000"
 4185      5F495251 
 4185      6E00
 4186              	.LASF3:
 4187 01b2 50656E64 		.ascii	"PendSV_IRQn\000"
 4187      53565F49 
 4187      52516E00 
 4188              	.LASF180:
 4189 01be 75736172 		.ascii	"usart2_have_data\000"
 4189      74325F68 
 4189      6176655F 
 4189      64617461 
 4189      00
 4190              	.LASF9:
 4191 01cf 5243435F 		.ascii	"RCC_IRQn\000"
 4191      4952516E 
 4191      00
 4192              	.LASF131:
 4193 01d8 6663616C 		.ascii	"fcalc\000"
 4193      6300
 4194              	.LASF142:
 4195 01de 73686F77 		.ascii	"show_ldr\000"
 4195      5F6C6472 
 4195      00
 4196              	.LASF51:
 4197 01e7 75696E74 		.ascii	"uint32_t\000"
 4197      33325F74 
 4197      00
 4198              	.LASF52:
 4199 01f0 49534552 		.ascii	"ISER\000"
 4199      00
 4200              	.LASF184:
 4201 01f5 706F7765 		.ascii	"power_2secs_acum\000"
 4201      725F3273 
 4201      6563735F 
 4201      6163756D 
 4201      00
 4202              	.LASF146:
 4203 0206 666C6F61 		.ascii	"float\000"
 4203      7400
 4204              	.LASF135:
 4205 020c 68797374 		.ascii	"hyst\000"
 4205      00
 4206              	.LASF55:
 4207 0211 52534552 		.ascii	"RSERVED1\000"
 4207      56454431 
 4207      00
 4208              	.LASF29:
 4209 021a 53504931 		.ascii	"SPI1_IRQn\000"
 4209      5F495251 
ARM GAS  /tmp/ccC0Akiw.s 			page 116


 4209      6E00
 4210              	.LASF46:
 4211 0224 6C6F6E67 		.ascii	"long long unsigned int\000"
 4211      206C6F6E 
 4211      6720756E 
 4211      7369676E 
 4211      65642069 
 4212              	.LASF68:
 4213 023b 44465352 		.ascii	"DFSR\000"
 4213      00
 4214              	.LASF177:
 4215 0240 75736172 		.ascii	"usart1_pckt_bytes\000"
 4215      74315F70 
 4215      636B745F 
 4215      62797465 
 4215      7300
 4216              	.LASF39:
 4217 0252 5F5F7569 		.ascii	"__uint16_t\000"
 4217      6E743136 
 4217      5F7400
 4218              	.LASF197:
 4219 025d 6D696E75 		.ascii	"minutes\000"
 4219      74657300 
 4220              	.LASF79:
 4221 0265 4D4F4445 		.ascii	"MODER\000"
 4221      5200
 4222              	.LASF77:
 4223 026b 43485345 		.ascii	"CHSELR\000"
 4223      4C5200
 4224              	.LASF175:
 4225 0272 75736172 		.ascii	"usart1_pckt_ready\000"
 4225      74315F70 
 4225      636B745F 
 4225      72656164 
 4225      7900
 4226              	.LASF34:
 4227 0284 4952516E 		.ascii	"IRQn_Type\000"
 4227      5F547970 
 4227      6500
 4228              	.LASF110:
 4229 028e 5463704D 		.ascii	"TcpMessages\000"
 4229      65737361 
 4229      67657300 
 4230              	.LASF32:
 4231 029a 55534152 		.ascii	"USART2_IRQn\000"
 4231      54325F49 
 4231      52516E00 
 4232              	.LASF63:
 4233 02a6 43505549 		.ascii	"CPUID\000"
 4233      4400
 4234              	.LASF167:
 4235 02ac 74745F74 		.ascii	"tt_take_photo_sample\000"
 4235      616B655F 
 4235      70686F74 
 4235      6F5F7361 
 4235      6D706C65 
 4236              	.LASF206:
ARM GAS  /tmp/ccC0Akiw.s 			page 117


 4237 02c1 53797354 		.ascii	"SysTick_Config\000"
 4237      69636B5F 
 4237      436F6E66 
 4237      696700
 4238              	.LASF76:
 4239 02d0 534D5052 		.ascii	"SMPR\000"
 4239      00
 4240              	.LASF186:
 4241 02d5 706F7765 		.ascii	"power_minutes\000"
 4241      725F6D69 
 4241      6E757465 
 4241      7300
 4242              	.LASF111:
 4243 02e3 4E4F4E45 		.ascii	"NONE_MSG\000"
 4243      5F4D5347 
 4243      00
 4244              	.LASF90:
 4245 02ec 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4245      5A45524F 
 4245      5F435552 
 4245      52454E54 
 4245      00
 4246              	.LASF176:
 4247 02fd 75736172 		.ascii	"usart1_have_data\000"
 4247      74315F68 
 4247      6176655F 
 4247      64617461 
 4247      00
 4248              	.LASF82:
 4249 030e 50555044 		.ascii	"PUPDR\000"
 4249      5200
 4250              	.LASF123:
 4251 0314 7469636B 		.ascii	"ticks\000"
 4251      7300
 4252              	.LASF156:
 4253 031a 73686F77 		.ascii	"show_select_timer\000"
 4253      5F73656C 
 4253      6563745F 
 4253      74696D65 
 4253      7200
 4254              	.LASF102:
 4255 032c 64756D6D 		.ascii	"dummy1\000"
 4255      793100
 4256              	.LASF103:
 4257 0333 64756D6D 		.ascii	"dummy2\000"
 4257      793200
 4258              	.LASF87:
 4259 033a 63686172 		.ascii	"char\000"
 4259      00
 4260              	.LASF150:
 4261 033f 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4261      45524154 
 4261      5552455F 
 4261      56616C75 
 4261      6500
 4262              	.LASF129:
 4263 0351 706F7765 		.ascii	"power_dec\000"
ARM GAS  /tmp/ccC0Akiw.s 			page 118


 4263      725F6465 
 4263      6300
 4264              	.LASF65:
 4265 035b 41495243 		.ascii	"AIRCR\000"
 4265      5200
 4266              	.LASF164:
 4267 0361 74616B65 		.ascii	"take_temp_sample\000"
 4267      5F74656D 
 4267      705F7361 
 4267      6D706C65 
 4267      00
 4268              	.LASF21:
 4269 0372 54494D33 		.ascii	"TIM3_IRQn\000"
 4269      5F495251 
 4269      6E00
 4270              	.LASF14:
 4271 037c 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4271      5F436861 
 4271      6E6E656C 
 4271      315F4952 
 4271      516E00
 4272              	.LASF125:
 4273 038f 62797465 		.ascii	"bytes_read\000"
 4273      735F7265 
 4273      616400
 4274              	.LASF96:
 4275 039a 6D61696E 		.ascii	"main_state_t\000"
 4275      5F737461 
 4275      74655F74 
 4275      00
 4276              	.LASF24:
 4277 03a7 54494D31 		.ascii	"TIM15_IRQn\000"
 4277      355F4952 
 4277      516E00
 4278              	.LASF48:
 4279 03b2 75696E74 		.ascii	"uint8_t\000"
 4279      385F7400 
 4280              	.LASF94:
 4281 03ba 57454C43 		.ascii	"WELCOME_GSM\000"
 4281      4F4D455F 
 4281      47534D00 
 4282              	.LASF178:
 4283 03c6 75736172 		.ascii	"usart2_mini_timeout\000"
 4283      74325F6D 
 4283      696E695F 
 4283      74696D65 
 4283      6F757400 
 4284              	.LASF188:
 4285 03da 706F7765 		.ascii	"power_hours\000"
 4285      725F686F 
 4285      75727300 
 4286              	.LASF121:
 4287 03e6 72657370 		.ascii	"resp_gsm_timeout\000"
 4287      5F67736D 
 4287      5F74696D 
 4287      656F7574 
 4287      00
ARM GAS  /tmp/ccC0Akiw.s 			page 119


 4288              	.LASF154:
 4289 03f7 74783162 		.ascii	"tx1buff\000"
 4289      75666600 
 4290              	.LASF181:
 4291 03ff 75736172 		.ascii	"usart2_pckt_bytes\000"
 4291      74325F70 
 4291      636B745F 
 4291      62797465 
 4291      7300
 4292              	.LASF168:
 4293 0411 74745F72 		.ascii	"tt_relay_on_off\000"
 4293      656C6179 
 4293      5F6F6E5F 
 4293      6F666600 
 4294              	.LASF195:
 4295 0421 73656373 		.ascii	"secs\000"
 4295      00
 4296              	.LASF95:
 4297 0426 4C414D50 		.ascii	"LAMP_ON\000"
 4297      5F4F4E00 
 4298              	.LASF78:
 4299 042e 4144435F 		.ascii	"ADC_TypeDef\000"
 4299      54797065 
 4299      44656600 
 4300              	.LASF45:
 4301 043a 6C6F6E67 		.ascii	"long long int\000"
 4301      206C6F6E 
 4301      6720696E 
 4301      7400
 4302              	.LASF5:
 4303 0448 57574447 		.ascii	"WWDG_IRQn\000"
 4303      5F495251 
 4303      6E00
 4304              	.LASF67:
 4305 0452 53484353 		.ascii	"SHCSR\000"
 4305      5200
 4306              	.LASF174:
 4307 0458 75736172 		.ascii	"usart1_mini_timeout\000"
 4307      74315F6D 
 4307      696E695F 
 4307      74696D65 
 4307      6F757400 
 4308              	.LASF92:
 4309 046c 53544152 		.ascii	"START_GSM\000"
 4309      545F4753 
 4309      4D00
 4310              	.LASF169:
 4311 0476 73617665 		.ascii	"saved_mode\000"
 4311      645F6D6F 
 4311      646500
 4312              	.LASF194:
 4313 0481 66696C74 		.ascii	"filter_timer\000"
 4313      65725F74 
 4313      696D6572 
 4313      00
 4314              	.LASF204:
 4315 048e 70617261 		.ascii	"parameters\000"
ARM GAS  /tmp/ccC0Akiw.s 			page 120


 4315      6D657465 
 4315      727300
 4316              	.LASF166:
 4317 0499 74696D65 		.ascii	"timer_relay\000"
 4317      725F7265 
 4317      6C617900 
 4318              	.LASF88:
 4319 04a5 4D41494E 		.ascii	"MAIN_INIT\000"
 4319      5F494E49 
 4319      5400
 4320              	.LASF120:
 4321 04af 72657370 		.ascii	"resp_gsm_error\000"
 4321      5F67736D 
 4321      5F657272 
 4321      6F7200
 4322              	.LASF93:
 4323 04be 434F4E46 		.ascii	"CONFIG_GSM\000"
 4323      49475F47 
 4323      534D00
 4324              	.LASF113:
 4325 04c9 524F4F4D 		.ascii	"ROOM_BRIGHT\000"
 4325      5F425249 
 4325      47485400 
 4326              	.LASF173:
 4327 04d5 7A65726F 		.ascii	"zero_current\000"
 4327      5F637572 
 4327      72656E74 
 4327      00
 4328              	.LASF13:
 4329 04e2 54535F49 		.ascii	"TS_IRQn\000"
 4329      52516E00 
 4330              	.LASF143:
 4331 04ea 64756D6D 		.ascii	"dummy_resp\000"
 4331      795F7265 
 4331      737000
 4332              	.LASF18:
 4333 04f5 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4333      5F42524B 
 4333      5F55505F 
 4333      5452475F 
 4333      434F4D5F 
 4334              	.LASF148:
 4335 050e 74656D70 		.ascii	"tempbuff\000"
 4335      62756666 
 4335      00
 4336              	.LASF6:
 4337 0517 5056445F 		.ascii	"PVD_IRQn\000"
 4337      4952516E 
 4337      00
 4338              	.LASF74:
 4339 0520 43464752 		.ascii	"CFGR1\000"
 4339      3100
 4340              	.LASF75:
 4341 0526 43464752 		.ascii	"CFGR2\000"
 4341      3200
 4342              	.LASF117:
 4343 052c 4C494748 		.ascii	"LIGHTS_ON\000"
ARM GAS  /tmp/ccC0Akiw.s 			page 121


 4343      54535F4F 
 4343      4E00
 4344              	.LASF58:
 4345 0536 49435052 		.ascii	"ICPR\000"
 4345      00
 4346              	.LASF17:
 4347 053b 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4347      5F434F4D 
 4347      505F4952 
 4347      516E00
 4348              	.LASF185:
 4349 054a 706F7765 		.ascii	"power_2secs_index\000"
 4349      725F3273 
 4349      6563735F 
 4349      696E6465 
 4349      7800
 4350              	.LASF157:
 4351 055c 73776974 		.ascii	"switches_timer\000"
 4351      63686573 
 4351      5F74696D 
 4351      657200
 4352              	.LASF138:
 4353 056b 7463705F 		.ascii	"tcp_msg\000"
 4353      6D736700 
 4354              	.LASF81:
 4355 0573 4F535045 		.ascii	"OSPEEDR\000"
 4355      45445200 
 4356              	.LASF73:
 4357 057b 53797354 		.ascii	"SysTick_Type\000"
 4357      69636B5F 
 4357      54797065 
 4357      00
 4358              	.LASF86:
 4359 0588 6C6F6E67 		.ascii	"long double\000"
 4359      20646F75 
 4359      626C6500 
 4360              	.LASF49:
 4361 0594 75696E74 		.ascii	"uint16_t\000"
 4361      31365F74 
 4361      00
 4362              	.LASF182:
 4363 059d 62756666 		.ascii	"buffUARTGSMrx2\000"
 4363      55415254 
 4363      47534D72 
 4363      783200
 4364              	.LASF109:
 4365 05ac 4952516E 		.ascii	"IRQn\000"
 4365      00
 4366              	.LASF101:
 4367 05b1 6C617374 		.ascii	"last_channel_in_flash\000"
 4367      5F636861 
 4367      6E6E656C 
 4367      5F696E5F 
 4367      666C6173 
 4368              	.LASF189:
 4369 05c7 67736D4E 		.ascii	"gsmNUM\000"
 4369      554D00
ARM GAS  /tmp/ccC0Akiw.s 			page 122


 4370              	.LASF159:
 4371 05ce 7363726F 		.ascii	"scroll1_timer\000"
 4371      6C6C315F 
 4371      74696D65 
 4371      7200
 4372              	.LASF7:
 4373 05dc 5254435F 		.ascii	"RTC_IRQn\000"
 4373      4952516E 
 4373      00
 4374              	.LASF53:
 4375 05e5 52455345 		.ascii	"RESERVED0\000"
 4375      52564544 
 4375      3000
 4376              	.LASF66:
 4377 05ef 52455345 		.ascii	"RESERVED1\000"
 4377      52564544 
 4377      3100
 4378              	.LASF57:
 4379 05f9 52455345 		.ascii	"RESERVED2\000"
 4379      52564544 
 4379      3200
 4380              	.LASF59:
 4381 0603 52455345 		.ascii	"RESERVED3\000"
 4381      52564544 
 4381      3300
 4382              	.LASF60:
 4383 060d 52455345 		.ascii	"RESERVED4\000"
 4383      52564544 
 4383      3400
 4384              	.LASF38:
 4385 0617 73686F72 		.ascii	"short int\000"
 4385      7420696E 
 4385      7400
 4386              	.LASF42:
 4387 0621 6C6F6E67 		.ascii	"long int\000"
 4387      20696E74 
 4387      00
 4388              	.LASF31:
 4389 062a 55534152 		.ascii	"USART1_IRQn\000"
 4389      54315F49 
 4389      52516E00 
 4390              	.LASF0:
 4391 0636 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4391      61736B61 
 4391      626C6549 
 4391      6E745F49 
 4391      52516E00 
 4392              	.LASF122:
 4393 064a 7072696F 		.ascii	"priority\000"
 4393      72697479 
 4393      00
 4394              	.LASF19:
 4395 0653 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4395      5F43435F 
 4395      4952516E 
 4395      00
 4396              	.LASF80:
ARM GAS  /tmp/ccC0Akiw.s 			page 123


 4397 0660 4F545950 		.ascii	"OTYPER\000"
 4397      455200
 4398              	.LASF140:
 4399 0667 6E65775F 		.ascii	"new_lamp\000"
 4399      6C616D70 
 4399      00
 4400              	.LASF191:
 4401 0670 77616974 		.ascii	"wait_ms_var\000"
 4401      5F6D735F 
 4401      76617200 
 4402              	.LASF26:
 4403 067c 54494D31 		.ascii	"TIM17_IRQn\000"
 4403      375F4952 
 4403      516E00
 4404              	.LASF89:
 4405 0687 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4405      48524F5F 
 4405      41444300 
 4406              	.LASF16:
 4407 0693 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4407      5F436861 
 4407      6E6E656C 
 4407      345F355F 
 4407      4952516E 
 4408              	.LASF190:
 4409 06a8 67736D4D 		.ascii	"gsmMSG\000"
 4409      534700
 4410              	.LASF196:
 4411 06af 686F7572 		.ascii	"hours\000"
 4411      7300
 4412              	.LASF35:
 4413 06b5 5F5F7569 		.ascii	"__uint8_t\000"
 4413      6E74385F 
 4413      7400
 4414              	.LASF114:
 4415 06bf 4C414D50 		.ascii	"LAMP_BRIGHT\000"
 4415      5F425249 
 4415      47485400 
 4416              	.LASF62:
 4417 06cb 4E564943 		.ascii	"NVIC_Type\000"
 4417      5F547970 
 4417      6500
 4418              	.LASF69:
 4419 06d5 5343425F 		.ascii	"SCB_Type\000"
 4419      54797065 
 4419      00
 4420              	.LASF85:
 4421 06de 4750494F 		.ascii	"GPIO_TypeDef\000"
 4421      5F547970 
 4421      65446566 
 4421      00
 4422              	.LASF134:
 4423 06eb 73656E64 		.ascii	"sended\000"
 4423      656400
 4424              	.LASF4:
 4425 06f2 53797354 		.ascii	"SysTick_IRQn\000"
 4425      69636B5F 
ARM GAS  /tmp/ccC0Akiw.s 			page 124


 4425      4952516E 
 4425      00
 4426              	.LASF33:
 4427 06ff 4345435F 		.ascii	"CEC_IRQn\000"
 4427      4952516E 
 4427      00
 4428              	.LASF61:
 4429 0708 73697A65 		.ascii	"sizetype\000"
 4429      74797065 
 4429      00
 4430              	.LASF64:
 4431 0711 49435352 		.ascii	"ICSR\000"
 4431      00
 4432              	.LASF28:
 4433 0716 49324332 		.ascii	"I2C2_IRQn\000"
 4433      5F495251 
 4433      6E00
 4434              	.LASF44:
 4435 0720 6C6F6E67 		.ascii	"long unsigned int\000"
 4435      20756E73 
 4435      69676E65 
 4435      6420696E 
 4435      7400
 4436              	.LASF20:
 4437 0732 54494D32 		.ascii	"TIM2_IRQn\000"
 4437      5F495251 
 4437      6E00
 4438              	.LASF151:
 4439 073c 50524553 		.ascii	"PRESSURE_Value\000"
 4439      53555245 
 4439      5F56616C 
 4439      756500
 4440              	.LASF203:
 4441 074b 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4441      652F6D65 
 4441      642F446F 
 4441      63756D65 
 4441      6E74732F 
 4442 077e 6100     		.ascii	"a\000"
 4443              	.LASF149:
 4444 0780 48554D49 		.ascii	"HUMIDITY_Value\000"
 4444      44495459 
 4444      5F56616C 
 4444      756500
 4445              	.LASF50:
 4446 078f 696E7433 		.ascii	"int32_t\000"
 4446      325F7400 
 4447              	.LASF162:
 4448 0797 7374616E 		.ascii	"standalone_enable_menu_timer\000"
 4448      64616C6F 
 4448      6E655F65 
 4448      6E61626C 
 4448      655F6D65 
 4449              	.LASF171:
 4450 07b4 6164635F 		.ascii	"adc_ch\000"
 4450      636800
 4451              	.LASF23:
ARM GAS  /tmp/ccC0Akiw.s 			page 125


 4452 07bb 54494D31 		.ascii	"TIM14_IRQn\000"
 4452      345F4952 
 4452      516E00
 4453              	.LASF15:
 4454 07c6 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4454      5F436861 
 4454      6E6E656C 
 4454      325F335F 
 4454      4952516E 
 4455              	.LASF144:
 4456 07db 7070735F 		.ascii	"pps_one\000"
 4456      6F6E6500 
 4457              	.LASF22:
 4458 07e3 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4458      5F444143 
 4458      5F495251 
 4458      6E00
 4459              	.LASF37:
 4460 07f1 756E7369 		.ascii	"unsigned char\000"
 4460      676E6564 
 4460      20636861 
 4460      7200
 4461              	.LASF91:
 4462 07ff 4C414D50 		.ascii	"LAMP_OFF\000"
 4462      5F4F4646 
 4462      00
 4463              	.LASF43:
 4464 0808 5F5F7569 		.ascii	"__uint32_t\000"
 4464      6E743332 
 4464      5F7400
 4465              	.LASF141:
 4466 0813 6C617374 		.ascii	"last_bright\000"
 4466      5F627269 
 4466      67687400 
 4467              	.LASF126:
 4468 081f 6E656564 		.ascii	"need_ack\000"
 4468      5F61636B 
 4468      00
 4469              	.LASF98:
 4470 0828 6C617374 		.ascii	"last_program_in_flash\000"
 4470      5F70726F 
 4470      6772616D 
 4470      5F696E5F 
 4470      666C6173 
 4471              	.LASF170:
 4472 083e 7361635F 		.ascii	"sac_aux\000"
 4472      61757800 
 4473              	.LASF139:
 4474 0846 6E65775F 		.ascii	"new_room\000"
 4474      726F6F6D 
 4474      00
 4475              	.LASF209:
 4476 084f 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4476      6E674465 
 4476      6C61795F 
 4476      44656372 
 4476      656D656E 
ARM GAS  /tmp/ccC0Akiw.s 			page 126


 4477              	.LASF165:
 4478 0865 74696D65 		.ascii	"timer_wifi_bright\000"
 4478      725F7769 
 4478      66695F62 
 4478      72696768 
 4478      7400
 4479              	.LASF54:
 4480 0877 49434552 		.ascii	"ICER\000"
 4480      00
 4481              	.LASF136:
 4482 087c 6F6E655F 		.ascii	"one_to_ten\000"
 4482      746F5F74 
 4482      656E00
 4483              	.LASF30:
 4484 0887 53504932 		.ascii	"SPI2_IRQn\000"
 4484      5F495251 
 4484      6E00
 4485              	.LASF118:
 4486 0891 72657370 		.ascii	"resp_gsm_continue\000"
 4486      5F67736D 
 4486      5F636F6E 
 4486      74696E75 
 4486      6500
 4487              	.LASF208:
 4488 08a3 70726570 		.ascii	"prepare_json_pkt\000"
 4488      6172655F 
 4488      6A736F6E 
 4488      5F706B74 
 4488      00
 4489              	.LASF112:
 4490 08b4 4B454550 		.ascii	"KEEP_ALIVE\000"
 4490      5F414C49 
 4490      564500
 4491              	.LASF130:
 4492 08bf 706F7765 		.ascii	"power\000"
 4492      7200
 4493              	.LASF108:
 4494 08c5 70617261 		.ascii	"parameters_typedef\000"
 4494      6D657465 
 4494      72735F74 
 4494      79706564 
 4494      656600
 4495              	.LASF36:
 4496 08d8 7369676E 		.ascii	"signed char\000"
 4496      65642063 
 4496      68617200 
 4497              	.LASF202:
 4498 08e4 7372632F 		.ascii	"src/main.c\000"
 4498      6D61696E 
 4498      2E6300
 4499              	.LASF128:
 4500 08ef 706F7765 		.ascii	"power_int\000"
 4500      725F696E 
 4500      7400
 4501              	.LASF116:
 4502 08f9 4C494748 		.ascii	"LIGHTS_OFF\000"
 4502      54535F4F 
ARM GAS  /tmp/ccC0Akiw.s 			page 127


 4502      464600
 4503              	.LASF40:
 4504 0904 73686F72 		.ascii	"short unsigned int\000"
 4504      7420756E 
 4504      7369676E 
 4504      65642069 
 4504      6E7400
 4505              	.LASF201:
 4506 0917 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4506      43313120 
 4506      352E322E 
 4506      31203230 
 4506      31353132 
 4507 094a 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4507      20726576 
 4507      6973696F 
 4507      6E203233 
 4507      31383438 
 4508 097d 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4508      662D3220 
 4508      2D4F3020 
 4508      2D666F6D 
 4508      69742D66 
 4509 09b0 66756E63 		.ascii	"function-sections\000"
 4509      74696F6E 
 4509      2D736563 
 4509      74696F6E 
 4509      7300
 4510              	.LASF161:
 4511 09c2 7374616E 		.ascii	"standalone_timer\000"
 4511      64616C6F 
 4511      6E655F74 
 4511      696D6572 
 4511      00
 4512              	.LASF207:
 4513 09d3 6D61696E 		.ascii	"main\000"
 4513      00
 4514              	.LASF1:
 4515 09d8 48617264 		.ascii	"HardFault_IRQn\000"
 4515      4661756C 
 4515      745F4952 
 4515      516E00
 4516              	.LASF119:
 4517 09e7 72657370 		.ascii	"resp_gsm_ok\000"
 4517      5F67736D 
 4517      5F6F6B00 
 4518              	.LASF187:
 4519 09f3 706F7765 		.ascii	"power_minutes_index\000"
 4519      725F6D69 
 4519      6E757465 
 4519      735F696E 
 4519      64657800 
 4520              	.LASF56:
 4521 0a07 49535052 		.ascii	"ISPR\000"
 4521      00
 4522              	.LASF127:
 4523 0a0c 72657370 		.ascii	"resp\000"
ARM GAS  /tmp/ccC0Akiw.s 			page 128


 4523      00
 4524              	.LASF172:
 4525 0a11 7365715F 		.ascii	"seq_ready\000"
 4525      72656164 
 4525      7900
 4526              	.LASF199:
 4527 0a1b 7674656D 		.ascii	"vtemp\000"
 4527      7000
 4528              	.LASF160:
 4529 0a21 7363726F 		.ascii	"scroll2_timer\000"
 4529      6C6C325F 
 4529      74696D65 
 4529      7200
 4530              	.LASF192:
 4531 0a2f 74696D65 		.ascii	"timer_standby\000"
 4531      725F7374 
 4531      616E6462 
 4531      7900
 4532              	.LASF124:
 4533 0a3d 62797465 		.ascii	"bytes_remain\000"
 4533      735F7265 
 4533      6D61696E 
 4533      00
 4534              	.LASF84:
 4535 0a4a 4C434B52 		.ascii	"LCKR\000"
 4535      00
 4536              	.LASF70:
 4537 0a4f 4354524C 		.ascii	"CTRL\000"
 4537      00
 4538              	.LASF115:
 4539 0a54 4745545F 		.ascii	"GET_A\000"
 4539      4100
 4540              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccC0Akiw.s 			page 129


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccC0Akiw.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccC0Akiw.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccC0Akiw.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccC0Akiw.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccC0Akiw.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccC0Akiw.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/ccC0Akiw.s:277    .bss.show_select_timer:00000000 show_select_timer
     /tmp/ccC0Akiw.s:274    .bss.show_select_timer:00000000 $d
     /tmp/ccC0Akiw.s:283    .bss.switches_timer:00000000 switches_timer
     /tmp/ccC0Akiw.s:284    .bss.switches_timer:00000000 $d
     /tmp/ccC0Akiw.s:289    .bss.acswitch_timer:00000000 acswitch_timer
     /tmp/ccC0Akiw.s:290    .bss.acswitch_timer:00000000 $d
     /tmp/ccC0Akiw.s:296    .bss.scroll1_timer:00000000 scroll1_timer
     /tmp/ccC0Akiw.s:293    .bss.scroll1_timer:00000000 $d
     /tmp/ccC0Akiw.s:303    .bss.scroll2_timer:00000000 scroll2_timer
     /tmp/ccC0Akiw.s:300    .bss.scroll2_timer:00000000 $d
                            *COM*:00000002 standalone_timer
                            *COM*:00000002 standalone_enable_menu_timer
                            *COM*:00000001 grouped_master_timeout_timer
     /tmp/ccC0Akiw.s:313    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccC0Akiw.s:310    .bss.take_temp_sample:00000000 $d
     /tmp/ccC0Akiw.s:319    .bss.timer_wifi_bright:00000000 timer_wifi_bright
     /tmp/ccC0Akiw.s:320    .bss.timer_wifi_bright:00000000 $d
     /tmp/ccC0Akiw.s:326    .bss.timer_relay:00000000 timer_relay
     /tmp/ccC0Akiw.s:323    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000006 adc_ch
     /tmp/ccC0Akiw.s:340    .bss.seq_ready:00000000 seq_ready
     /tmp/ccC0Akiw.s:341    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:0000000c param_struct
     /tmp/ccC0Akiw.s:357    .bss.power_2secs_acum:00000000 power_2secs_acum
     /tmp/ccC0Akiw.s:354    .bss.power_2secs_acum:00000000 $d
     /tmp/ccC0Akiw.s:363    .bss.power_2secs_index:00000000 power_2secs_index
     /tmp/ccC0Akiw.s:364    .bss.power_2secs_index:00000000 $d
     /tmp/ccC0Akiw.s:370    .bss.power_minutes:00000000 power_minutes
     /tmp/ccC0Akiw.s:367    .bss.power_minutes:00000000 $d
ARM GAS  /tmp/ccC0Akiw.s 			page 130


     /tmp/ccC0Akiw.s:376    .bss.power_minutes_index:00000000 power_minutes_index
     /tmp/ccC0Akiw.s:377    .bss.power_minutes_index:00000000 $d
     /tmp/ccC0Akiw.s:383    .bss.power_hours:00000000 power_hours
     /tmp/ccC0Akiw.s:380    .bss.power_hours:00000000 $d
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/ccC0Akiw.s:392    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccC0Akiw.s:389    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/ccC0Akiw.s:402    .bss.secs:00000000 secs
     /tmp/ccC0Akiw.s:399    .bss.secs:00000000 $d
     /tmp/ccC0Akiw.s:408    .bss.hours:00000000 hours
     /tmp/ccC0Akiw.s:409    .bss.hours:00000000 $d
     /tmp/ccC0Akiw.s:414    .bss.minutes:00000000 minutes
     /tmp/ccC0Akiw.s:415    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccC0Akiw.s:420    .rodata:00000000 $d
     /tmp/ccC0Akiw.s:468    .text.main:00000000 $t
     /tmp/ccC0Akiw.s:473    .text.main:00000000 main
     /tmp/ccC0Akiw.s:745    .rodata.main:00000000 $d
     /tmp/ccC0Akiw.s:935    .text.main:000002c0 $d
     /tmp/ccC0Akiw.s:953    .text.main:00000300 $t
     /tmp/ccC0Akiw.s:1229   .text.main:000004dc $d
     /tmp/ccC0Akiw.s:1265   .text.prepare_json_pkt:00000000 $t
     /tmp/ccC0Akiw.s:1270   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccC0Akiw.s:1362   .text.prepare_json_pkt:0000009c $d
     /tmp/ccC0Akiw.s:1371   .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccC0Akiw.s:1376   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccC0Akiw.s:1578   .text.TimingDelay_Decrement:00000130 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_ui2f
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2uiz
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
GPIO_Config
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
ARM GAS  /tmp/ccC0Akiw.s 			page 131


GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
sprintf
FuncsGSMMessageFlagsAsk
FuncsGSMReady
FuncsGSMSendSMS
UpdateVGrid
UpdateIGrid
UpdateRelay
FuncsGSM
memcpy
strcat
strlen
GSMTimeoutCounters
