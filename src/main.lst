ARM GAS  /tmp/ccvvhbBy.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccvvhbBy.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccvvhbBy.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccvvhbBy.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccvvhbBy.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccvvhbBy.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccvvhbBy.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccvvhbBy.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccvvhbBy.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccvvhbBy.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccvvhbBy.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccvvhbBy.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccvvhbBy.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccvvhbBy.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccvvhbBy.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccvvhbBy.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccvvhbBy.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccvvhbBy.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7177,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7178, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7179, D.7178
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7179, D.7179
  92 0026 083B     		subs	r3, r3, #8	@ D.7179,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7179, D.7179,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7177,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7178, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7179, D.7178
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7179, D.7179
 101 0038 083B     		subs	r3, r3, #8	@ D.7179,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7179, D.7179,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7177, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7179, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7178, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7179, D.7178
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7179, D.7179
 114 0052 D200     		lsls	r2, r2, #3	@ D.7179, D.7179,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7180, D.7180, D.7179
 117 0058 0200     		movs	r2, r0	@ D.7180, D.7180
 118 005a D243     		mvns	r2, r2	@ D.7180, D.7180
 119 005c 1A40     		ands	r2, r3	@ D.7179, D.7179
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7179, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7179, D.7179
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7178, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7179, D.7178
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7179, D.7179
ARM GAS  /tmp/ccvvhbBy.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7179, D.7179,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7179, D.7179, D.7179
 133 0076 0300     		movs	r3, r0	@ D.7179, D.7179
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7179, D.7179
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7179,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7177, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7179, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7181,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7179, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7179, D.7179
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7179, D.7179,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7181,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7179, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7179, D.7179
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7179, D.7179,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7179, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7178, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7179, D.7178
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7179, D.7179
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7179, D.7179,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7180, D.7180, D.7179
 169 00b6 0100     		movs	r1, r0	@ D.7180, D.7180
 170 00b8 C943     		mvns	r1, r1	@ D.7180, D.7180
 171 00ba 1140     		ands	r1, r2	@ D.7179, D.7179
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7179, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7179, D.7179
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7178, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7179, D.7178
ARM GAS  /tmp/ccvvhbBy.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7179, D.7179
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7179, D.7179,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7179, D.7179, D.7179
 185 00d4 0200     		movs	r2, r0	@ D.7179, D.7179
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7179, D.7179
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7179, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccvvhbBy.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7182,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7183,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7184, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7184,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7184, _6->LOAD
ARM GAS  /tmp/ccvvhbBy.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7183,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7183,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7182,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	take_temp_sample
 273              		.section	.bss.take_temp_sample,"aw",%nobits
 274              		.align	1
 275              		.type	take_temp_sample, %object
 276              		.size	take_temp_sample, 2
 277              	take_temp_sample:
 278 0000 0000     		.space	2
 279              		.global	timer_rep
 280              		.section	.bss.timer_rep,"aw",%nobits
 281              		.align	1
 282              		.type	timer_rep, %object
 283              		.size	timer_rep, 2
 284              	timer_rep:
 285 0000 0000     		.space	2
 286              		.global	timer_relay
 287              		.section	.bss.timer_relay,"aw",%nobits
ARM GAS  /tmp/ccvvhbBy.s 			page 23


 288              		.align	1
 289              		.type	timer_relay, %object
 290              		.size	timer_relay, 2
 291              	timer_relay:
 292 0000 0000     		.space	2
 293              		.comm	tt_take_photo_sample,2,2
 294              		.comm	tt_relay_on_off,2,2
 295              		.comm	saved_mode,1,1
 296              		.comm	s1,2,2
 297              		.comm	s2,2,2
 298              		.comm	sac,2,2
 299              		.comm	sac_aux,1,1
 300              		.comm	adc_ch,6,4
 301              		.global	seq_ready
 302              		.section	.bss.seq_ready,"aw",%nobits
 303              		.type	seq_ready, %object
 304              		.size	seq_ready, 1
 305              	seq_ready:
 306 0000 00       		.space	1
 307              		.comm	zero_current,2,2
 308              		.comm	usart1_mini_timeout,1,1
 309              		.comm	usart1_pckt_ready,1,1
 310              		.comm	usart1_have_data,1,1
 311              		.comm	usart1_pckt_bytes,1,1
 312              		.comm	usart2_mini_timeout,1,1
 313              		.comm	usart2_pckt_ready,1,1
 314              		.comm	usart2_have_data,1,1
 315              		.comm	usart2_pckt_bytes,1,1
 316              		.comm	param_struct,84,4
 317              		.global	show_power_index
 318              		.section	.bss.show_power_index,"aw",%nobits
 319              		.align	1
 320              		.type	show_power_index, %object
 321              		.size	show_power_index, 2
 322              	show_power_index:
 323 0000 0000     		.space	2
 324              		.comm	gsmNUM,20,4
 325              		.comm	gsmMSG,180,4
 326              		.global	wait_ms_var
 327              		.section	.bss.wait_ms_var,"aw",%nobits
 328              		.align	1
 329              		.type	wait_ms_var, %object
 330              		.size	wait_ms_var, 2
 331              	wait_ms_var:
 332 0000 0000     		.space	2
 333              		.comm	timer_standby,2,2
 334              		.comm	tcp_kalive_timer,2,2
 335              		.comm	timer_meas,1,1
 336              		.global	secs
 337              		.section	.bss.secs,"aw",%nobits
 338              		.align	1
 339              		.type	secs, %object
 340              		.size	secs, 2
 341              	secs:
 342 0000 0000     		.space	2
 343              		.global	hours
 344              		.section	.bss.hours,"aw",%nobits
ARM GAS  /tmp/ccvvhbBy.s 			page 24


 345              		.type	hours, %object
 346              		.size	hours, 1
 347              	hours:
 348 0000 00       		.space	1
 349              		.global	minutes
 350              		.section	.bss.minutes,"aw",%nobits
 351              		.type	minutes, %object
 352              		.size	minutes, 1
 353              	minutes:
 354 0000 00       		.space	1
 355              		.comm	power_vect,20,4
 356              		.comm	vtemp,34,4
 357              		.comm	vpote,34,4
 358              		.section	.rodata
 359              		.align	2
 360              	.LC1:
 361 0000 31313439 		.ascii	"1149867843\000"
 361      38363738 
 361      343300
 362 000b 00       		.align	2
 363              	.LC3:
 364 000c 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 364      726E6F20 
 364      506C6163 
 364      61205265 
 364      646F6E64 
 365 0031 000000   		.align	2
 366              	.LC5:
 367 0034 20204665 		.ascii	"  Features:\015\012\000"
 367      61747572 
 367      65733A0D 
 367      0A00
 368 0042 0000     		.align	2
 369              	.LC7:
 370 0044 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 370      6D6D6572 
 370      20312074 
 370      6F203130 
 370      560D0A00 
 371              		.align	2
 372              	.LC9:
 373 0058 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 373      67687420 
 373      48797374 
 373      65726573 
 373      69730D0A 
 374 006d 000000   		.align	2
 375              	.LC11:
 376 0070 20205379 		.ascii	"  Sync by ADC\015\012\000"
 376      6E632062 
 376      79204144 
 376      430D0A00 
 377              		.align	2
 378              	.LC13:
 379 0080 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 379      65732047 
 379      534D2066 
ARM GAS  /tmp/ccvvhbBy.s 			page 25


 379      6F722053 
 379      4D532064 
 380 009a 0000     		.align	2
 381              	.LC18:
 382 009c 47657474 		.ascii	"Getted\015\012\000"
 382      65640D0A 
 382      00
 383 00a5 000000   		.align	2
 384              	.LC20:
 385 00a8 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 385      696E6720 
 385      47534D20 
 385      53746172 
 385      74757020 
 386 00cf 00       		.align	2
 387              	.LC24:
 388 00d0 5265706F 		.ascii	"Reports by SMS\015\012\000"
 388      72747320 
 388      62792053 
 388      4D530D0A 
 388      00
 389 00e1 000000   		.align	2
 390              	.LC26:
 391 00e4 41542B47 		.ascii	"AT+GSN\015\012\000"
 391      534E0D0A 
 391      00
 392 00ed 000000   		.align	2
 393              	.LC29:
 394 00f0 494D4549 		.ascii	"IMEI: \000"
 394      3A2000
 395 00f7 00       		.align	2
 396              	.LC31:
 397 00f8 0D0A00   		.ascii	"\015\012\000"
 398 00fb 00       		.align	2
 399              	.LC33:
 400 00fc 2C204143 		.ascii	", ACTIVO\000"
 400      5449564F 
 400      00
 401 0105 000000   		.align	2
 402              	.LC36:
 403 0108 5052454E 		.ascii	"PRENDIDO\015\012\000"
 403      4449444F 
 403      0D0A00
 404 0113 00       		.align	2
 405              	.LC38:
 406 0114 5052454E 		.ascii	"PRENDIDO\000"
 406      4449444F 
 406      00
 407 011d 000000   		.align	2
 408              	.LC44:
 409 0120 41504147 		.ascii	"APAGADO\000"
 409      41444F00 
 410              		.global	__aeabi_uidiv
 411              		.section	.text.main,"ax",%progbits
 412              		.align	2
 413              		.global	main
 414              		.code	16
ARM GAS  /tmp/ccvvhbBy.s 			page 26


 415              		.thumb_func
 416              		.type	main, %function
 417              	main:
 418              	.LFB20:
 419              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
ARM GAS  /tmp/ccvvhbBy.s 			page 27


  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** // volatile unsigned char switches_timer = 0;
  72:src/main.c    **** //
  73:src/main.c    **** //
  74:src/main.c    **** // volatile unsigned short scroll1_timer = 0;
  75:src/main.c    **** // volatile unsigned short scroll2_timer = 0;
  76:src/main.c    **** //
  77:src/main.c    **** // volatile unsigned short standalone_timer;
  78:src/main.c    **** // volatile unsigned short standalone_enable_menu_timer;
  79:src/main.c    **** // //volatile unsigned short standalone_menu_timer;
  80:src/main.c    **** // volatile unsigned char grouped_master_timeout_timer;
  81:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  82:src/main.c    **** unsigned short timer_rep = 0;
  83:src/main.c    **** // volatile unsigned char timer_wifi_bright = 0;
  84:src/main.c    **** 
  85:src/main.c    **** #ifdef USE_REDONDA_BASIC
  86:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  87:src/main.c    **** 
  88:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  89:src/main.c    **** volatile unsigned short tt_relay_on_off;
  90:src/main.c    **** #endif
  91:src/main.c    **** 
  92:src/main.c    **** 
  93:src/main.c    **** unsigned char saved_mode;
  94:src/main.c    **** 
  95:src/main.c    **** 
  96:src/main.c    **** // ------- Externals de los switches -------
  97:src/main.c    **** unsigned short s1;
  98:src/main.c    **** unsigned short s2;
  99:src/main.c    **** unsigned short sac;
 100:src/main.c    **** unsigned char sac_aux;
 101:src/main.c    **** 
 102:src/main.c    **** // ------- Externals de los switches -------
 103:src/main.c    **** #ifdef ADC_WITH_INT
 104:src/main.c    **** volatile unsigned short adc_ch[3];
 105:src/main.c    **** volatile unsigned char seq_ready = 0;
 106:src/main.c    **** unsigned short zero_current;
 107:src/main.c    **** #endif
 108:src/main.c    **** 
 109:src/main.c    **** // ------- Externals del GPS & GSM -------
ARM GAS  /tmp/ccvvhbBy.s 			page 28


 110:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 111:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 112:src/main.c    **** volatile unsigned char usart1_have_data;
 113:src/main.c    **** unsigned char usart1_pckt_bytes;
 114:src/main.c    **** 
 115:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 116:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 117:src/main.c    **** #define gps_have_data		usart1_have_data
 118:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 119:src/main.c    **** 
 120:src/main.c    **** #ifdef USE_GPS
 121:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 122:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 123:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 124:src/main.c    **** volatile unsigned char usart2_have_data;
 125:src/main.c    **** unsigned char usart2_pckt_bytes;
 126:src/main.c    **** 
 127:src/main.c    **** #endif
 128:src/main.c    **** 
 129:src/main.c    **** // ------- Externals del GSM -------
 130:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 131:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 132:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 133:src/main.c    **** #define gsm_have_data		usart1_have_data
 134:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 135:src/main.c    **** 
 136:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 137:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 138:src/main.c    **** volatile unsigned char usart2_have_data;
 139:src/main.c    **** unsigned char usart2_pckt_bytes;
 140:src/main.c    **** 
 141:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 142:src/main.c    **** #endif
 143:src/main.c    **** 
 144:src/main.c    **** parameters_typedef param_struct;
 145:src/main.c    **** 
 146:src/main.c    **** //--- VARIABLES GLOBALES ---//
 147:src/main.c    **** unsigned short show_power_index = 0;	//lo uso como timer sincronizado con la mediciontick 2 secs.
 148:src/main.c    **** 
 149:src/main.c    **** //para las mediciones
 150:src/main.c    **** // unsigned int power_2secs_acum = 0;
 151:src/main.c    **** // unsigned char power_2secs_index = 0;
 152:src/main.c    **** // unsigned short power_minutes = 0;
 153:src/main.c    **** // unsigned char power_minutes_index = 0;
 154:src/main.c    **** // unsigned short power_hours = 0;
 155:src/main.c    **** 
 156:src/main.c    **** //para los msjs GSM
 157:src/main.c    **** char gsmNUM [20];
 158:src/main.c    **** char gsmMSG [180];
 159:src/main.c    **** 
 160:src/main.c    **** 
 161:src/main.c    **** 
 162:src/main.c    **** 
 163:src/main.c    **** 
 164:src/main.c    **** 
 165:src/main.c    **** // ------- de los timers -------
 166:src/main.c    **** volatile unsigned short wait_ms_var = 0;
ARM GAS  /tmp/ccvvhbBy.s 			page 29


 167:src/main.c    **** volatile unsigned short timer_standby;
 168:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 169:src/main.c    **** //volatile unsigned char display_timer;
 170:src/main.c    **** volatile unsigned char timer_meas;
 171:src/main.c    **** 
 172:src/main.c    **** //volatile unsigned char door_filter;
 173:src/main.c    **** //volatile unsigned char take_sample;
 174:src/main.c    **** //volatile unsigned char move_relay;
 175:src/main.c    **** #ifdef WITH_HYST
 176:src/main.c    **** volatile unsigned short secs = 0;
 177:src/main.c    **** volatile unsigned char hours = 0;
 178:src/main.c    **** volatile unsigned char minutes = 0;
 179:src/main.c    **** #endif
 180:src/main.c    **** 
 181:src/main.c    **** #define SIZEOF_POWER_VECT		10
 182:src/main.c    **** 
 183:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 184:src/main.c    **** 
 185:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 186:src/main.c    **** void TimingDelay_Decrement(void);
 187:src/main.c    **** 
 188:src/main.c    **** // ------- del DMX -------
 189:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 190:src/main.c    **** #define DMX_TIMEOUT	20
 191:src/main.c    **** 
 192:src/main.c    **** //--- FILTROS DE SENSORES ---//
 193:src/main.c    **** #define LARGO_FILTRO 16
 194:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 195:src/main.c    **** //#define LARGO_FILTRO 32
 196:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 197:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 198:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 199:src/main.c    **** 
 200:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 201:src/main.c    **** 
 202:src/main.c    **** 
 203:src/main.c    **** //--- Private Definitions ---//
 204:src/main.c    **** #define num_tel_rep		param_struct.num_reportar
 205:src/main.c    **** 
 206:src/main.c    **** 
 207:src/main.c    **** //-------------------------------------------//
 208:src/main.c    **** // @brief  Main program.
 209:src/main.c    **** // @param  None
 210:src/main.c    **** // @retval None
 211:src/main.c    **** //------------------------------------------//
 212:src/main.c    **** int main(void)
 213:src/main.c    **** {
 420              		.loc 2 213 0
 421              		.cfi_startproc
 422 0000 30B5     		push	{r4, r5, lr}	@
 423              	.LCFI4:
 424              		.cfi_def_cfa_offset 12
 425              		.cfi_offset 4, -12
 426              		.cfi_offset 5, -8
 427              		.cfi_offset 14, -4
 428 0002 A5B0     		sub	sp, sp, #148	@,,
 429              	.LCFI5:
ARM GAS  /tmp/ccvvhbBy.s 			page 30


 430              		.cfi_def_cfa_offset 160
 214:src/main.c    **** 	unsigned char i, ii;
 215:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 431              		.loc 2 215 0
 432 0004 7323     		movs	r3, #115	@ tmp188,
 433 0006 6B44     		add	r3, r3, sp	@ tmp188,
 434 0008 0022     		movs	r2, #0	@ tmp189,
 435 000a 1A70     		strb	r2, [r3]	@ tmp190, need_ack
 216:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 436              		.loc 2 216 0
 437 000c 7223     		movs	r3, #114	@ tmp191,
 438 000e 6B44     		add	r3, r3, sp	@ tmp191,
 439 0010 0022     		movs	r2, #0	@ tmp192,
 440 0012 1A70     		strb	r2, [r3]	@ tmp193, resp
 217:src/main.c    **** 	// unsigned short power_int, power_dec;
 218:src/main.c    **** 	// unsigned short wh_int, wh_dec;
 219:src/main.c    **** 	// float fcalc = 1.0;
 220:src/main.c    **** 	unsigned short power, last_power;
 221:src/main.c    **** 	unsigned int zero_current_loc = 0;
 441              		.loc 2 221 0
 442 0014 0023     		movs	r3, #0	@ tmp194,
 443 0016 2193     		str	r3, [sp, #132]	@ tmp194, zero_current_loc
 222:src/main.c    **** 
 223:src/main.c    **** 	unsigned short acum_secs_index;
 224:src/main.c    **** 	unsigned int acum_secs, acum_hours;
 225:src/main.c    **** 	unsigned char show_power = 0;
 444              		.loc 2 225 0
 445 0018 7123     		movs	r3, #113	@ tmp195,
 446 001a 6B44     		add	r3, r3, sp	@ tmp195,
 447 001c 0022     		movs	r2, #0	@ tmp196,
 448 001e 1A70     		strb	r2, [r3]	@ tmp197, show_power
 226:src/main.c    **** 
 227:src/main.c    **** #ifdef USE_REDONDA_BASIC
 228:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 449              		.loc 2 228 0
 450 0020 7723     		movs	r3, #119	@ tmp198,
 451 0022 6B44     		add	r3, r3, sp	@ tmp198,
 452 0024 0022     		movs	r2, #0	@ tmp199,
 453 0026 1A70     		strb	r2, [r3]	@ tmp200, main_state
 229:src/main.c    **** 	unsigned char reportar_SMS = 0;
 454              		.loc 2 229 0
 455 0028 1CAB     		add	r3, sp, #112	@ tmp201,,
 456 002a 0022     		movs	r2, #0	@ tmp202,
 457 002c 1A70     		strb	r2, [r3]	@ tmp203, reportar_SMS
 230:src/main.c    **** 	unsigned char sended = 0;
 458              		.loc 2 230 0
 459 002e 6F23     		movs	r3, #111	@ tmp204,
 460 0030 6B44     		add	r3, r3, sp	@ tmp204,
 461 0032 0022     		movs	r2, #0	@ tmp205,
 462 0034 1A70     		strb	r2, [r3]	@ tmp206, sended
 231:src/main.c    **** 	lamp_on_state_t lamp_on_state = init_airplane0;
 463              		.loc 2 231 0
 464 0036 7623     		movs	r3, #118	@ tmp207,
 465 0038 6B44     		add	r3, r3, sp	@ tmp207,
 466 003a 0022     		movs	r2, #0	@ tmp208,
 467 003c 1A70     		strb	r2, [r3]	@ tmp209, lamp_on_state
 232:src/main.c    **** 	unsigned char counters_mode = 0;
ARM GAS  /tmp/ccvvhbBy.s 			page 31


 468              		.loc 2 232 0
 469 003e 7523     		movs	r3, #117	@ tmp210,
 470 0040 6B44     		add	r3, r3, sp	@ tmp210,
 471 0042 0022     		movs	r2, #0	@ tmp211,
 472 0044 1A70     		strb	r2, [r3]	@ tmp212, counters_mode
 233:src/main.c    **** 	unsigned char meas_end = 0;
 473              		.loc 2 233 0
 474 0046 1DAB     		add	r3, sp, #116	@ tmp213,,
 475 0048 0022     		movs	r2, #0	@ tmp214,
 476 004a 1A70     		strb	r2, [r3]	@ tmp215, meas_end
 234:src/main.c    **** 
 235:src/main.c    **** #ifdef WITH_HYST
 236:src/main.c    **** 	unsigned short hyst;
 237:src/main.c    **** #endif
 238:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 239:src/main.c    **** 	unsigned char one_to_ten;
 240:src/main.c    **** #endif
 241:src/main.c    **** 
 242:src/main.c    **** #else		//USE_REDONDA_BASIC
 243:src/main.c    **** 	unsigned char main_state = 0;
 244:src/main.c    **** #endif
 245:src/main.c    **** 	char s_lcd [100];		//lo agrando porque lo uso tambien para enviar SMS
 246:src/main.c    **** 	// enum TcpMessages tcp_msg = NONE_MSG;
 247:src/main.c    **** 	// unsigned char new_room = 0;
 248:src/main.c    **** 	// unsigned char new_lamp = 0;
 249:src/main.c    **** 	// unsigned char last_bright = 0;
 250:src/main.c    **** 	// unsigned char show_ldr = 0;
 251:src/main.c    **** 	// int dummy_resp = 0;
 252:src/main.c    **** 	// unsigned char pps_one = 0;
 253:src/main.c    **** 
 254:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 255:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 256:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 257:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 258:src/main.c    ****     //   system_stm32f0xx.c file
 259:src/main.c    **** 
 260:src/main.c    **** 	//GPIO Configuration.
 261:src/main.c    **** 	GPIO_Config();
 477              		.loc 2 261 0
 478 004c FFF7FEFF 		bl	GPIO_Config	@
 262:src/main.c    **** 
 263:src/main.c    **** 
 264:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 265:src/main.c    **** 	if (SysTick_Config(48000))
 479              		.loc 2 265 0
 480 0050 D04B     		ldr	r3, .L71	@ tmp216,
 481 0052 1800     		movs	r0, r3	@, tmp216
 482 0054 FFF7FEFF 		bl	SysTick_Config	@
 483 0058 031E     		subs	r3, r0, #0	@ D.7185,,
 484 005a 28D0     		beq	.L13	@,
 485              	.L18:
 266:src/main.c    **** 	{
 267:src/main.c    **** 		while (1)	/* Capture error */
 268:src/main.c    **** 		{
 269:src/main.c    **** 			if (LED)
 486              		.loc 2 269 0
 487 005c 9023     		movs	r3, #144	@ tmp626,
ARM GAS  /tmp/ccvvhbBy.s 			page 32


 488 005e DB05     		lsls	r3, r3, #23	@ D.7186, tmp626,
 489 0060 9B8A     		ldrh	r3, [r3, #20]	@ tmp218,
 490 0062 9BB2     		uxth	r3, r3	@ D.7187, tmp218
 491 0064 1A00     		movs	r2, r3	@ D.7188, D.7187
 492 0066 8023     		movs	r3, #128	@ tmp627,
 493 0068 5B01     		lsls	r3, r3, #5	@ tmp219, tmp627,
 494 006a 1340     		ands	r3, r2	@ D.7188, D.7188
 495 006c 05D0     		beq	.L14	@,
 270:src/main.c    **** 				LED_OFF;
 496              		.loc 2 270 0
 497 006e 9023     		movs	r3, #144	@ tmp624,
 498 0070 DB05     		lsls	r3, r3, #23	@ D.7186, tmp624,
 499 0072 8022     		movs	r2, #128	@ tmp625,
 500 0074 5205     		lsls	r2, r2, #21	@ tmp220, tmp625,
 501 0076 9A61     		str	r2, [r3, #24]	@ tmp220, _108->BSRR
 502 0078 04E0     		b	.L15	@
 503              	.L14:
 271:src/main.c    **** 			else
 272:src/main.c    **** 				LED_ON;
 504              		.loc 2 272 0
 505 007a 9023     		movs	r3, #144	@ tmp622,
 506 007c DB05     		lsls	r3, r3, #23	@ D.7186, tmp622,
 507 007e 8022     		movs	r2, #128	@ tmp623,
 508 0080 5201     		lsls	r2, r2, #5	@ tmp221, tmp623,
 509 0082 9A61     		str	r2, [r3, #24]	@ tmp221, _110->BSRR
 510              	.L15:
 273:src/main.c    **** 
 274:src/main.c    **** 			for (i = 0; i < 255; i++)
 511              		.loc 2 274 0
 512 0084 8F23     		movs	r3, #143	@ tmp222,
 513 0086 6B44     		add	r3, r3, sp	@ tmp222,
 514 0088 0022     		movs	r2, #0	@ tmp223,
 515 008a 1A70     		strb	r2, [r3]	@ tmp224, i
 516 008c 09E0     		b	.L16	@
 517              	.L17:
 275:src/main.c    **** 			{
 276:src/main.c    **** 				asm (	"nop \n\t"
 518              		.loc 2 276 0 discriminator 3
 519              		.syntax divided
 520              	@ 276 "src/main.c" 1
 521 008e C046     		nop 
 522 0090 C046     		nop 
 523 0092 C046     		nop 
 524              		
 525              	@ 0 "" 2
 274:src/main.c    **** 			{
 526              		.loc 2 274 0 discriminator 3
 527              		.thumb
 528              		.syntax unified
 529 0094 8F23     		movs	r3, #143	@ tmp225,
 530 0096 6B44     		add	r3, r3, sp	@ tmp225,
 531 0098 1A78     		ldrb	r2, [r3]	@ D.7189, i
 532 009a 8F23     		movs	r3, #143	@ tmp226,
 533 009c 6B44     		add	r3, r3, sp	@ tmp226,
 534 009e 0132     		adds	r2, r2, #1	@ tmp227,
 535 00a0 1A70     		strb	r2, [r3]	@ tmp228, i
 536              	.L16:
ARM GAS  /tmp/ccvvhbBy.s 			page 33


 274:src/main.c    **** 			{
 537              		.loc 2 274 0 is_stmt 0 discriminator 1
 538 00a2 8F23     		movs	r3, #143	@ tmp229,
 539 00a4 6B44     		add	r3, r3, sp	@ tmp229,
 540 00a6 1B78     		ldrb	r3, [r3]	@ tmp230, i
 541 00a8 FF2B     		cmp	r3, #255	@ tmp230,
 542 00aa F0D1     		bne	.L17	@,
 277:src/main.c    **** 						"nop \n\t"
 278:src/main.c    **** 						"nop \n\t" );
 279:src/main.c    **** 			}
 280:src/main.c    **** 		}
 543              		.loc 2 280 0 is_stmt 1
 544 00ac D6E7     		b	.L18	@
 545              	.L13:
 281:src/main.c    **** 	}
 282:src/main.c    **** 
 283:src/main.c    **** 
 284:src/main.c    **** 	//ADC Configuration
 285:src/main.c    **** //	AdcConfig();
 286:src/main.c    **** 
 287:src/main.c    **** 	//TIM Configuration.
 288:src/main.c    **** 	// TIM_3_Init();
 289:src/main.c    **** //	TIM_14_Init();
 290:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 291:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 292:src/main.c    **** 
 293:src/main.c    **** //	EXTIOff ();
 294:src/main.c    **** 
 295:src/main.c    **** 
 296:src/main.c    **** //		while (1)
 297:src/main.c    **** //		{
 298:src/main.c    **** //			PIN3_OFF;
 299:src/main.c    **** //			Wait_ms (10);
 300:src/main.c    **** //			PIN3_ON;
 301:src/main.c    **** //			Wait_ms (10);
 302:src/main.c    **** //		}
 303:src/main.c    **** 
 304:src/main.c    **** 	//--- Leo los parametros de memoria ---//
 305:src/main.c    **** #ifdef USE_REDONDA_BASIC
 306:src/main.c    **** 	param_struct.acumm_historico = ((parameters_typedef *) (unsigned int *) PAGE63)->acumm_historico;
 546              		.loc 2 306 0
 547 00ae BA4B     		ldr	r3, .L71+4	@ D.7190,
 548 00b0 9A6C     		ldr	r2, [r3, #72]	@ D.7191, _115->acumm_historico
 549 00b2 BA4B     		ldr	r3, .L71+8	@ tmp231,
 550 00b4 9A64     		str	r2, [r3, #72]	@ D.7191, param_struct.acumm_historico
 307:src/main.c    **** 	if (param_struct.acumm_historico != 0xFFFFFFFF)
 551              		.loc 2 307 0
 552 00b6 B94B     		ldr	r3, .L71+8	@ tmp232,
 553 00b8 9B6C     		ldr	r3, [r3, #72]	@ D.7191, param_struct.acumm_historico
 554 00ba 0133     		adds	r3, r3, #1	@ tmp628, D.7191,
 555 00bc 0FD0     		beq	.L19	@,
 308:src/main.c    **** 	{
 309:src/main.c    **** 		//memoria no vacia
 310:src/main.c    **** 		strncpy( param_struct.num_reportar,
 556              		.loc 2 310 0
 557 00be B649     		ldr	r1, .L71+4	@ tmp233,
 558 00c0 B64B     		ldr	r3, .L71+8	@ tmp234,
ARM GAS  /tmp/ccvvhbBy.s 			page 34


 559 00c2 1822     		movs	r2, #24	@,
 560 00c4 1800     		movs	r0, r3	@, tmp234
 561 00c6 FFF7FEFF 		bl	strncpy	@
 311:src/main.c    **** 					((parameters_typedef *) (char *) PAGE63)->num_reportar,
 312:src/main.c    **** 					sizeof(param_struct.num_reportar));
 313:src/main.c    **** 
 314:src/main.c    **** 
 315:src/main.c    **** 		param_struct.timer_reportar = ((parameters_typedef *) (unsigned int *) PAGE63)->timer_reportar;
 562              		.loc 2 315 0
 563 00ca B34A     		ldr	r2, .L71+4	@ D.7190,
 564 00cc 5223     		movs	r3, #82	@ tmp235,
 565 00ce D15C     		ldrb	r1, [r2, r3]	@ D.7189,
 566 00d0 B24B     		ldr	r3, .L71+8	@ tmp236,
 567 00d2 5222     		movs	r2, #82	@ tmp237,
 568 00d4 9954     		strb	r1, [r3, r2]	@ tmp238, param_struct.timer_reportar
 316:src/main.c    **** 		reportar_SMS = 1;
 569              		.loc 2 316 0
 570 00d6 1CAB     		add	r3, sp, #112	@ tmp239,,
 571 00d8 0122     		movs	r2, #1	@ tmp240,
 572 00da 1A70     		strb	r2, [r3]	@ tmp241, reportar_SMS
 573 00dc 11E0     		b	.L20	@
 574              	.L19:
 317:src/main.c    **** 	}
 318:src/main.c    **** 	else
 319:src/main.c    **** 	{
 320:src/main.c    **** 		//memoria vacia
 321:src/main.c    **** 		param_struct.acumm_historico = 0;
 575              		.loc 2 321 0
 576 00de AF4B     		ldr	r3, .L71+8	@ tmp242,
 577 00e0 0022     		movs	r2, #0	@ tmp243,
 578 00e2 9A64     		str	r2, [r3, #72]	@ tmp243, param_struct.acumm_historico
 322:src/main.c    **** 		param_struct.timer_reportar = 2;
 579              		.loc 2 322 0
 580 00e4 AD4B     		ldr	r3, .L71+8	@ tmp244,
 581 00e6 5222     		movs	r2, #82	@ tmp245,
 582 00e8 0221     		movs	r1, #2	@ tmp246,
 583 00ea 9954     		strb	r1, [r3, r2]	@ tmp247, param_struct.timer_reportar
 323:src/main.c    **** 		//el timer a reportar esta n minutos, yo tengo tick cada 2 segundos
 324:src/main.c    **** 
 325:src/main.c    **** 		reportar_SMS = 0;
 584              		.loc 2 325 0
 585 00ec 1CAB     		add	r3, sp, #112	@ tmp248,,
 586 00ee 0022     		movs	r2, #0	@ tmp249,
 587 00f0 1A70     		strb	r2, [r3]	@ tmp250, reportar_SMS
 326:src/main.c    **** 		strcpy( param_struct.num_reportar, "1149867843");	//segund asim de claro
 588              		.loc 2 326 0
 589 00f2 AA4B     		ldr	r3, .L71+8	@ tmp251,
 590 00f4 AA4A     		ldr	r2, .L71+12	@ tmp252,
 591 00f6 03CA     		ldmia	r2!, {r0, r1}	@ tmp254, tmp630, tmp629
 592 00f8 03C3     		stmia	r3!, {r0, r1}	@ tmp253, tmp630, tmp629
 593 00fa 1188     		ldrh	r1, [r2]	@ tmp255,
 594 00fc 1980     		strh	r1, [r3]	@ tmp255,
 595 00fe 9278     		ldrb	r2, [r2, #2]	@ tmp256,
 596 0100 9A70     		strb	r2, [r3, #2]	@ tmp256,
 597              	.L20:
 327:src/main.c    **** 	}
 328:src/main.c    **** #endif
ARM GAS  /tmp/ccvvhbBy.s 			page 35


 329:src/main.c    **** 
 330:src/main.c    **** 
 331:src/main.c    **** 	//--- Welcome code ---//
 332:src/main.c    **** 	LED_OFF;
 598              		.loc 2 332 0
 599 0102 9023     		movs	r3, #144	@ tmp616,
 600 0104 DB05     		lsls	r3, r3, #23	@ D.7186, tmp616,
 601 0106 8022     		movs	r2, #128	@ tmp617,
 602 0108 5205     		lsls	r2, r2, #21	@ tmp257, tmp617,
 603 010a 9A61     		str	r2, [r3, #24]	@ tmp257, _128->BSRR
 333:src/main.c    **** //	EN_GPS_OFF;
 334:src/main.c    **** 	EN_GPS_ON;
 604              		.loc 2 334 0
 605 010c 9023     		movs	r3, #144	@ tmp618,
 606 010e DB05     		lsls	r3, r3, #23	@ D.7186, tmp618,
 607 0110 8022     		movs	r2, #128	@ tmp619,
 608 0112 1202     		lsls	r2, r2, #8	@ tmp258, tmp619,
 609 0114 9A61     		str	r2, [r3, #24]	@ tmp258, _130->BSRR
 335:src/main.c    **** 	//RELAY_ON;
 336:src/main.c    **** 	RELAY_OFF;
 610              		.loc 2 336 0
 611 0116 9023     		movs	r3, #144	@ tmp620,
 612 0118 DB05     		lsls	r3, r3, #23	@ D.7186, tmp620,
 613 011a 8022     		movs	r2, #128	@ tmp621,
 614 011c 1205     		lsls	r2, r2, #20	@ tmp259, tmp621,
 615 011e 9A61     		str	r2, [r3, #24]	@ tmp259, _132->BSRR
 337:src/main.c    **** 
 338:src/main.c    **** 	USART1Config();
 616              		.loc 2 338 0
 617 0120 FFF7FEFF 		bl	USART1Config	@
 339:src/main.c    **** 	USART2Config();
 618              		.loc 2 339 0
 619 0124 FFF7FEFF 		bl	USART2Config	@
 340:src/main.c    **** 
 341:src/main.c    **** 	EXTIOff();
 620              		.loc 2 341 0
 621 0128 FFF7FEFF 		bl	EXTIOff	@
 342:src/main.c    **** 
 343:src/main.c    **** 
 344:src/main.c    **** 
 345:src/main.c    **** //---------- Pruebas con GSM GATEWAY --------//
 346:src/main.c    **** #ifdef USE_GSM_GATEWAY
 347:src/main.c    **** 	LED_OFF;
 348:src/main.c    **** 	for (i = 0; i < 6; i++)
 349:src/main.c    **** 	{
 350:src/main.c    **** 		if (LED)
 351:src/main.c    **** 			LED_OFF;
 352:src/main.c    **** 		else
 353:src/main.c    **** 			LED_ON;
 354:src/main.c    **** 
 355:src/main.c    **** 		Wait_ms (300);
 356:src/main.c    **** 	}
 357:src/main.c    **** 
 358:src/main.c    **** 	Wait_ms (3000);
 359:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 360:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 361:src/main.c    **** 
ARM GAS  /tmp/ccvvhbBy.s 			page 36


 362:src/main.c    **** 	//mando start al gsm
 363:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 364:src/main.c    **** 	//GPSStartResetSM ();
 365:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 366:src/main.c    **** 	while (timer_standby)
 367:src/main.c    **** 	{
 368:src/main.c    **** 		i = GSM_Start();
 369:src/main.c    **** 		if (i == 1)
 370:src/main.c    **** 		{
 371:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 372:src/main.c    **** 			timer_standby = 0;
 373:src/main.c    **** 		}
 374:src/main.c    **** 		else
 375:src/main.c    **** 
 376:src/main.c    **** 		if (i > 1)
 377:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 378:src/main.c    **** 	}
 379:src/main.c    **** 
 380:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 381:src/main.c    **** 
 382:src/main.c    **** 	while (1)
 383:src/main.c    **** 	{
 384:src/main.c    **** 		GSMProcess();
 385:src/main.c    **** 
 386:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 387:src/main.c    **** 		{
 388:src/main.c    **** 			usart2_pckt_ready = 0;
 389:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 390:src/main.c    **** 		}
 391:src/main.c    **** 
 392:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 393:src/main.c    **** 		{
 394:src/main.c    **** 			gsm_pckt_ready = 0;
 395:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 396:src/main.c    **** 		}
 397:src/main.c    **** 
 398:src/main.c    **** 		if (LIGHT)
 399:src/main.c    **** 			LED_ON;
 400:src/main.c    **** 		else
 401:src/main.c    **** 			LED_OFF;
 402:src/main.c    **** 	}
 403:src/main.c    **** #endif
 404:src/main.c    **** //---------- Fin Prueba con GSM GATEWAY --------//
 405:src/main.c    **** 
 406:src/main.c    **** 
 407:src/main.c    **** 
 408:src/main.c    **** 
 409:src/main.c    **** 
 410:src/main.c    **** #ifdef USE_REDONDA_BASIC
 411:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 412:src/main.c    **** 	// USART1Config();
 413:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 622              		.loc 2 413 0
 623 012c FFF7FEFF 		bl	AdcConfig	@
 414:src/main.c    **** 
 415:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 416:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
ARM GAS  /tmp/ccvvhbBy.s 			page 37


 624              		.loc 2 416 0
 625 0130 FFF7FEFF 		bl	TIM_3_Init	@
 417:src/main.c    **** #endif
 418:src/main.c    **** 
 419:src/main.c    **** 	TIM_16_Init();					//o utilizo para synchro de relay
 626              		.loc 2 419 0
 627 0134 FFF7FEFF 		bl	TIM_16_Init	@
 420:src/main.c    **** 	TIM16Enable();
 628              		.loc 2 420 0
 629 0138 FFF7FEFF 		bl	TIM16Enable	@
 421:src/main.c    **** 
 422:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 630              		.loc 2 422 0
 631 013c 994B     		ldr	r3, .L71+16	@ tmp260,
 632 013e 1800     		movs	r0, r3	@, tmp260
 633 0140 FFF7FEFF 		bl	Usart2Send	@
 423:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 634              		.loc 2 423 0
 635 0144 984B     		ldr	r3, .L71+20	@ tmp261,
 636 0146 1800     		movs	r0, r3	@, tmp261
 637 0148 FFF7FEFF 		bl	Usart2Send	@
 424:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 425:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 638              		.loc 2 425 0
 639 014c 974B     		ldr	r3, .L71+24	@ tmp262,
 640 014e 1800     		movs	r0, r3	@, tmp262
 641 0150 FFF7FEFF 		bl	Usart2Send	@
 426:src/main.c    **** 	#endif
 427:src/main.c    **** 	#ifdef WITH_HYST
 428:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 642              		.loc 2 428 0
 643 0154 964B     		ldr	r3, .L71+28	@ tmp263,
 644 0156 1800     		movs	r0, r3	@, tmp263
 645 0158 FFF7FEFF 		bl	Usart2Send	@
 429:src/main.c    **** 	#endif
 430:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 431:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 432:src/main.c    **** 	#endif
 433:src/main.c    **** 	#ifdef USE_WITH_SYNC
 434:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 435:src/main.c    **** 	#else
 436:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 646              		.loc 2 436 0
 647 015c 954B     		ldr	r3, .L71+32	@ tmp264,
 648 015e 1800     		movs	r0, r3	@, tmp264
 649 0160 FFF7FEFF 		bl	Usart2Send	@
 437:src/main.c    **** 	#endif
 438:src/main.c    **** 	#ifdef USE_GSM
 439:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 650              		.loc 2 439 0
 651 0164 944B     		ldr	r3, .L71+36	@ tmp265,
 652 0166 1800     		movs	r0, r3	@, tmp265
 653 0168 FFF7FEFF 		bl	Usart2Send	@
 440:src/main.c    **** 	#endif
 441:src/main.c    **** 
 442:src/main.c    **** 
 443:src/main.c    **** 
ARM GAS  /tmp/ccvvhbBy.s 			page 38


 444:src/main.c    **** 	for (i = 0; i < 8; i++)
 654              		.loc 2 444 0
 655 016c 8F23     		movs	r3, #143	@ tmp266,
 656 016e 6B44     		add	r3, r3, sp	@ tmp266,
 657 0170 0022     		movs	r2, #0	@ tmp267,
 658 0172 1A70     		strb	r2, [r3]	@ tmp268, i
 659 0174 1DE0     		b	.L21	@
 660              	.L24:
 445:src/main.c    **** 	{
 446:src/main.c    **** 		if (LED)
 661              		.loc 2 446 0
 662 0176 9023     		movs	r3, #144	@ tmp614,
 663 0178 DB05     		lsls	r3, r3, #23	@ D.7186, tmp614,
 664 017a 9B8A     		ldrh	r3, [r3, #20]	@ tmp270,
 665 017c 9BB2     		uxth	r3, r3	@ D.7187, tmp270
 666 017e 1A00     		movs	r2, r3	@ D.7188, D.7187
 667 0180 8023     		movs	r3, #128	@ tmp615,
 668 0182 5B01     		lsls	r3, r3, #5	@ tmp271, tmp615,
 669 0184 1340     		ands	r3, r2	@ D.7188, D.7188
 670 0186 05D0     		beq	.L22	@,
 447:src/main.c    **** 			LED_OFF;
 671              		.loc 2 447 0
 672 0188 9023     		movs	r3, #144	@ tmp612,
 673 018a DB05     		lsls	r3, r3, #23	@ D.7186, tmp612,
 674 018c 8022     		movs	r2, #128	@ tmp613,
 675 018e 5205     		lsls	r2, r2, #21	@ tmp272, tmp613,
 676 0190 9A61     		str	r2, [r3, #24]	@ tmp272, _152->BSRR
 677 0192 04E0     		b	.L23	@
 678              	.L22:
 448:src/main.c    **** 		else
 449:src/main.c    **** 			LED_ON;
 679              		.loc 2 449 0
 680 0194 9023     		movs	r3, #144	@ tmp610,
 681 0196 DB05     		lsls	r3, r3, #23	@ D.7186, tmp610,
 682 0198 8022     		movs	r2, #128	@ tmp611,
 683 019a 5201     		lsls	r2, r2, #5	@ tmp273, tmp611,
 684 019c 9A61     		str	r2, [r3, #24]	@ tmp273, _154->BSRR
 685              	.L23:
 450:src/main.c    **** 
 451:src/main.c    **** 		Wait_ms (250);
 686              		.loc 2 451 0 discriminator 2
 687 019e FA20     		movs	r0, #250	@,
 688 01a0 FFF7FEFF 		bl	Wait_ms	@
 444:src/main.c    **** 	{
 689              		.loc 2 444 0 discriminator 2
 690 01a4 8F23     		movs	r3, #143	@ tmp274,
 691 01a6 6B44     		add	r3, r3, sp	@ tmp274,
 692 01a8 1A78     		ldrb	r2, [r3]	@ D.7189, i
 693 01aa 8F23     		movs	r3, #143	@ tmp275,
 694 01ac 6B44     		add	r3, r3, sp	@ tmp275,
 695 01ae 0132     		adds	r2, r2, #1	@ tmp276,
 696 01b0 1A70     		strb	r2, [r3]	@ tmp277, i
 697              	.L21:
 444:src/main.c    **** 	{
 698              		.loc 2 444 0 is_stmt 0 discriminator 1
 699 01b2 8F23     		movs	r3, #143	@ tmp278,
 700 01b4 6B44     		add	r3, r3, sp	@ tmp278,
ARM GAS  /tmp/ccvvhbBy.s 			page 39


 701 01b6 1B78     		ldrb	r3, [r3]	@ tmp279, i
 702 01b8 072B     		cmp	r3, #7	@ tmp279,
 703 01ba DCD9     		bls	.L24	@,
 452:src/main.c    **** 	}
 453:src/main.c    **** 
 454:src/main.c    **** 
 455:src/main.c    **** 	timer_standby = 2000;
 704              		.loc 2 455 0 is_stmt 1
 705 01bc 7F4B     		ldr	r3, .L71+40	@ tmp280,
 706 01be FA22     		movs	r2, #250	@ tmp609,
 707 01c0 D200     		lsls	r2, r2, #3	@ tmp281, tmp609,
 708 01c2 1A80     		strh	r2, [r3]	@ tmp282, timer_standby
 456:src/main.c    **** 	FuncsGSMReset();
 709              		.loc 2 456 0
 710 01c4 FFF7FEFF 		bl	FuncsGSMReset	@
 457:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 711              		.loc 2 457 0
 712 01c8 0220     		movs	r0, #2	@,
 713 01ca FFF7FEFF 		bl	Usart1Mode	@
 714              	.L62:
 458:src/main.c    **** 
 459:src/main.c    **** 	// while (1)
 460:src/main.c    **** 	// {
 461:src/main.c    **** 	// 	if (SYNCP)
 462:src/main.c    **** 	// 	{
 463:src/main.c    **** 	// 		SYNCP_OFF;
 464:src/main.c    **** 	// 		LED_OFF;
 465:src/main.c    **** 	// 	}
 466:src/main.c    **** 	// 	else
 467:src/main.c    **** 	// 	{
 468:src/main.c    **** 	// 		SYNCP_ON;
 469:src/main.c    **** 	// 		LED_ON;
 470:src/main.c    **** 	// 	}
 471:src/main.c    **** 	// 	Wait_ms(10);
 472:src/main.c    **** 	//
 473:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 474:src/main.c    **** 	// 	// {
 475:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 476:src/main.c    **** 	// 	// 	Wait_ms (10);
 477:src/main.c    **** 	// 	// }
 478:src/main.c    **** 	// }
 479:src/main.c    **** 
 480:src/main.c    **** 
 481:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 482:src/main.c    **** 	// while (1)
 483:src/main.c    **** 	// {
 484:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 485:src/main.c    **** 	// 	{
 486:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 487:src/main.c    **** 	// 		Wait_ms(10);
 488:src/main.c    **** 	// 	}
 489:src/main.c    **** 	//
 490:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 491:src/main.c    **** 	// 	{
 492:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 493:src/main.c    **** 	// 		Wait_ms(10);
 494:src/main.c    **** 	// 	}
ARM GAS  /tmp/ccvvhbBy.s 			page 40


 495:src/main.c    **** 	// }
 496:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 497:src/main.c    **** 
 498:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 499:src/main.c    **** 	// i = 0;
 500:src/main.c    **** 	// while (1)
 501:src/main.c    **** 	// {
 502:src/main.c    **** 	// 	switch (i)
 503:src/main.c    **** 	// 	{
 504:src/main.c    **** 	// 		case 0:
 505:src/main.c    **** 	// 			//habilitar y esperar el final de la secuencia
 506:src/main.c    **** 	// 			ADC1->CR |= ADC_CR_ADSTART;
 507:src/main.c    **** 	// 			seq_ready = 0;
 508:src/main.c    **** 	// 			i++;
 509:src/main.c    **** 	// 			break;
 510:src/main.c    **** 	//
 511:src/main.c    **** 	// 		case 1:
 512:src/main.c    **** 	// 			if (seq_ready)		//esoty sincronizado
 513:src/main.c    **** 	// 				i++;
 514:src/main.c    **** 	// 			break;
 515:src/main.c    **** 	//
 516:src/main.c    **** 	// 		case 2:
 517:src/main.c    **** 	// 			RelayOn();
 518:src/main.c    **** 	// 			timer_standby = 50;
 519:src/main.c    **** 	// 			LED_ON;
 520:src/main.c    **** 	// 			i++;
 521:src/main.c    **** 	// 			break;
 522:src/main.c    **** 	//
 523:src/main.c    **** 	// 		case 3:
 524:src/main.c    **** 	// 			if (!timer_standby)
 525:src/main.c    **** 	// 			{
 526:src/main.c    **** 	// 				RelayOff();
 527:src/main.c    **** 	// 				LED_OFF;
 528:src/main.c    **** 	// 				i++;
 529:src/main.c    **** 	// 				timer_standby = 10000;
 530:src/main.c    **** 	// 			}
 531:src/main.c    **** 	// 			break;
 532:src/main.c    **** 	//
 533:src/main.c    **** 	// 		case 4:
 534:src/main.c    **** 	// 			if (!timer_standby)
 535:src/main.c    **** 	// 			{
 536:src/main.c    **** 	// 				i = 2;
 537:src/main.c    **** 	// 			}
 538:src/main.c    **** 	// 			break;
 539:src/main.c    **** 	// 	}
 540:src/main.c    **** 	//
 541:src/main.c    **** 	// 	UpdateRelay ();
 542:src/main.c    **** 	// }
 543:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 544:src/main.c    **** 
 545:src/main.c    **** 
 546:src/main.c    **** //--- Programa de pruebas I meas -----
 547:src/main.c    **** 	while (1)
 548:src/main.c    **** 	{
 549:src/main.c    **** 		switch (main_state)
 715              		.loc 2 549 0
 716 01ce 7723     		movs	r3, #119	@ tmp283,
ARM GAS  /tmp/ccvvhbBy.s 			page 41


 717 01d0 6B44     		add	r3, r3, sp	@ tmp283,
 718 01d2 1B78     		ldrb	r3, [r3]	@ D.7188, main_state
 719 01d4 092B     		cmp	r3, #9	@ D.7188,
 720 01d6 00D9     		bls	.LCB460	@
 721 01d8 7EE2     		b	.L25	@long jump	@
 722              	.LCB460:
 723 01da 9A00     		lsls	r2, r3, #2	@ tmp284, D.7188,
 724 01dc 784B     		ldr	r3, .L71+44	@ tmp286,
 725 01de D318     		adds	r3, r2, r3	@ tmp285, tmp284, tmp286
 726 01e0 1B68     		ldr	r3, [r3]	@ tmp287,
 727 01e2 9F46     		mov	pc, r3	@ tmp287
 728              		.section	.rodata.main,"a",%progbits
 729              		.align	2
 730              	.L27:
 731 0000 E4010000 		.word	.L26
 732 0004 06020000 		.word	.L28
 733 0008 3E020000 		.word	.L29
 734 000c AA020000 		.word	.L30
 735 0010 FC020000 		.word	.L31
 736 0014 F4030000 		.word	.L32
 737 0018 D8060000 		.word	.L25
 738 001c D8060000 		.word	.L25
 739 0020 D8060000 		.word	.L25
 740 0024 4A040000 		.word	.L33
 741              		.section	.text.main
 742              	.L26:
 550:src/main.c    **** 		{
 551:src/main.c    **** 			case MAIN_INIT:
 552:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 743              		.loc 2 552 0
 744 01e4 0A20     		movs	r0, #10	@,
 745 01e6 FFF7FEFF 		bl	Update_TIM3_CH1	@
 553:src/main.c    **** 				main_state = SYNCHRO_ADC;
 746              		.loc 2 553 0
 747 01ea 7723     		movs	r3, #119	@ tmp288,
 748 01ec 6B44     		add	r3, r3, sp	@ tmp288,
 749 01ee 0122     		movs	r2, #1	@ tmp289,
 750 01f0 1A70     		strb	r2, [r3]	@ tmp290, main_state
 554:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 751              		.loc 2 554 0
 752 01f2 744B     		ldr	r3, .L71+48	@ D.7192,
 753 01f4 734A     		ldr	r2, .L71+48	@ D.7192,
 754 01f6 9268     		ldr	r2, [r2, #8]	@ D.7185, _171->CR
 755 01f8 0421     		movs	r1, #4	@ tmp291,
 756 01fa 0A43     		orrs	r2, r1	@ D.7185, tmp291
 757 01fc 9A60     		str	r2, [r3, #8]	@ D.7185, _170->CR
 555:src/main.c    **** 				seq_ready = 0;
 758              		.loc 2 555 0
 759 01fe 724B     		ldr	r3, .L71+52	@ tmp292,
 760 0200 0022     		movs	r2, #0	@ tmp293,
 761 0202 1A70     		strb	r2, [r3]	@ tmp294, seq_ready
 556:src/main.c    **** 				break;
 762              		.loc 2 556 0
 763 0204 78E2     		b	.L34	@
 764              	.L28:
 557:src/main.c    **** 
 558:src/main.c    **** 			case SYNCHRO_ADC:
ARM GAS  /tmp/ccvvhbBy.s 			page 42


 559:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 765              		.loc 2 559 0
 766 0206 704B     		ldr	r3, .L71+52	@ tmp295,
 767 0208 1B78     		ldrb	r3, [r3]	@ tmp296, seq_ready
 768 020a DBB2     		uxtb	r3, r3	@ D.7189, tmp296
 769 020c 002B     		cmp	r3, #0	@ D.7189,
 770 020e 00D1     		bne	.LCB495	@
 771 0210 67E2     		b	.L63	@long jump	@
 772              	.LCB495:
 560:src/main.c    **** 				{
 561:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 773              		.loc 2 561 0
 774 0212 6E4B     		ldr	r3, .L71+56	@ tmp297,
 775 0214 1800     		movs	r0, r3	@, tmp297
 776 0216 FFF7FEFF 		bl	Usart2Send	@
 562:src/main.c    **** 
 563:src/main.c    **** #ifdef USE_GSM
 564:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 777              		.loc 2 564 0
 778 021a 6D4B     		ldr	r3, .L71+60	@ tmp298,
 779 021c 1800     		movs	r0, r3	@, tmp298
 780 021e FFF7FEFF 		bl	Usart2Send	@
 565:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 781              		.loc 2 565 0
 782 0222 7723     		movs	r3, #119	@ tmp299,
 783 0224 6B44     		add	r3, r3, sp	@ tmp299,
 784 0226 0222     		movs	r2, #2	@ tmp300,
 785 0228 1A70     		strb	r2, [r3]	@ tmp301, main_state
 566:src/main.c    **** 					timer_standby = 0;
 786              		.loc 2 566 0
 787 022a 644B     		ldr	r3, .L71+40	@ tmp302,
 788 022c 0022     		movs	r2, #0	@ tmp303,
 789 022e 1A80     		strh	r2, [r3]	@ tmp304, timer_standby
 567:src/main.c    **** 					zero_current_loc = 0;
 790              		.loc 2 567 0
 791 0230 0023     		movs	r3, #0	@ tmp305,
 792 0232 2193     		str	r3, [sp, #132]	@ tmp305, zero_current_loc
 568:src/main.c    **** 					i = 0;
 793              		.loc 2 568 0
 794 0234 8F23     		movs	r3, #143	@ tmp306,
 795 0236 6B44     		add	r3, r3, sp	@ tmp306,
 796 0238 0022     		movs	r2, #0	@ tmp307,
 797 023a 1A70     		strb	r2, [r3]	@ tmp308, i
 569:src/main.c    **** #else
 570:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 571:src/main.c    **** 					timer_standby = 60000;
 572:src/main.c    **** 					zero_current_loc = 0;
 573:src/main.c    **** 					i = 0;
 574:src/main.c    **** #endif
 575:src/main.c    **** 				}
 576:src/main.c    **** 				break;
 798              		.loc 2 576 0
 799 023c 51E2     		b	.L63	@
 800              	.L29:
 577:src/main.c    **** 
 578:src/main.c    **** 			case SET_ZERO_CURRENT:
 579:src/main.c    **** 				if (!timer_standby)
ARM GAS  /tmp/ccvvhbBy.s 			page 43


 801              		.loc 2 579 0
 802 023e 5F4B     		ldr	r3, .L71+40	@ tmp309,
 803 0240 1B88     		ldrh	r3, [r3]	@ tmp310, timer_standby
 804 0242 9BB2     		uxth	r3, r3	@ D.7187, tmp310
 805 0244 002B     		cmp	r3, #0	@ D.7187,
 806 0246 00D0     		beq	.LCB523	@
 807 0248 4DE2     		b	.L64	@long jump	@
 808              	.LCB523:
 580:src/main.c    **** 				{
 581:src/main.c    **** 					if (i < 32)
 809              		.loc 2 581 0
 810 024a 8F23     		movs	r3, #143	@ tmp311,
 811 024c 6B44     		add	r3, r3, sp	@ tmp311,
 812 024e 1B78     		ldrb	r3, [r3]	@ tmp312, i
 813 0250 1F2B     		cmp	r3, #31	@ tmp312,
 814 0252 1AD8     		bhi	.L37	@,
 582:src/main.c    **** 					{
 583:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 815              		.loc 2 583 0
 816 0254 5C4B     		ldr	r3, .L71+52	@ tmp313,
 817 0256 1B78     		ldrb	r3, [r3]	@ tmp314, seq_ready
 818 0258 DBB2     		uxtb	r3, r3	@ D.7189, tmp314
 819 025a 002B     		cmp	r3, #0	@ D.7189,
 820 025c 00D1     		bne	.LCB533	@
 821 025e 42E2     		b	.L64	@long jump	@
 822              	.LCB533:
 584:src/main.c    **** 						{
 585:src/main.c    **** 							seq_ready = 0;
 823              		.loc 2 585 0
 824 0260 594B     		ldr	r3, .L71+52	@ tmp315,
 825 0262 0022     		movs	r2, #0	@ tmp316,
 826 0264 1A70     		strb	r2, [r3]	@ tmp317, seq_ready
 586:src/main.c    **** 							zero_current_loc += I_Sense;
 827              		.loc 2 586 0
 828 0266 5B4B     		ldr	r3, .L71+64	@ tmp318,
 829 0268 9B88     		ldrh	r3, [r3, #4]	@ tmp320,
 830 026a 9BB2     		uxth	r3, r3	@ D.7187, tmp320
 831 026c 1A00     		movs	r2, r3	@ D.7191, D.7187
 832 026e 219B     		ldr	r3, [sp, #132]	@ tmp322, zero_current_loc
 833 0270 9B18     		adds	r3, r3, r2	@ tmp321, tmp322, D.7191
 834 0272 2193     		str	r3, [sp, #132]	@ tmp321, zero_current_loc
 587:src/main.c    **** 							i++;
 835              		.loc 2 587 0
 836 0274 8F23     		movs	r3, #143	@ tmp323,
 837 0276 6B44     		add	r3, r3, sp	@ tmp323,
 838 0278 1A78     		ldrb	r2, [r3]	@ D.7189, i
 839 027a 8F23     		movs	r3, #143	@ tmp324,
 840 027c 6B44     		add	r3, r3, sp	@ tmp324,
 841 027e 0132     		adds	r2, r2, #1	@ tmp325,
 842 0280 1A70     		strb	r2, [r3]	@ tmp326, i
 588:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 843              		.loc 2 588 0
 844 0282 4E4B     		ldr	r3, .L71+40	@ tmp327,
 845 0284 0222     		movs	r2, #2	@ tmp328,
 846 0286 1A80     		strh	r2, [r3]	@ tmp329, timer_standby
 589:src/main.c    **** 						}
 590:src/main.c    **** 					}
ARM GAS  /tmp/ccvvhbBy.s 			page 44


 591:src/main.c    **** 					else
 592:src/main.c    **** 					{
 593:src/main.c    **** 						zero_current_loc >>= 5;
 594:src/main.c    **** 						zero_current = zero_current_loc;
 595:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
 596:src/main.c    **** 						i = 0;
 597:src/main.c    **** 					}
 598:src/main.c    **** 				}
 599:src/main.c    **** 				break;
 847              		.loc 2 599 0
 848 0288 2DE2     		b	.L64	@
 849              	.L37:
 593:src/main.c    **** 						zero_current = zero_current_loc;
 850              		.loc 2 593 0
 851 028a 219B     		ldr	r3, [sp, #132]	@ tmp331, zero_current_loc
 852 028c 5B09     		lsrs	r3, r3, #5	@ tmp330, tmp331,
 853 028e 2193     		str	r3, [sp, #132]	@ tmp330, zero_current_loc
 594:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
 854              		.loc 2 594 0
 855 0290 219B     		ldr	r3, [sp, #132]	@ tmp333, zero_current_loc
 856 0292 9AB2     		uxth	r2, r3	@ D.7187, tmp332
 857 0294 504B     		ldr	r3, .L71+68	@ tmp334,
 858 0296 1A80     		strh	r2, [r3]	@ tmp335, zero_current
 595:src/main.c    **** 						i = 0;
 859              		.loc 2 595 0
 860 0298 7723     		movs	r3, #119	@ tmp336,
 861 029a 6B44     		add	r3, r3, sp	@ tmp336,
 862 029c 0322     		movs	r2, #3	@ tmp337,
 863 029e 1A70     		strb	r2, [r3]	@ tmp338, main_state
 596:src/main.c    **** 					}
 864              		.loc 2 596 0
 865 02a0 8F23     		movs	r3, #143	@ tmp339,
 866 02a2 6B44     		add	r3, r3, sp	@ tmp339,
 867 02a4 0022     		movs	r2, #0	@ tmp340,
 868 02a6 1A70     		strb	r2, [r3]	@ tmp341, i
 869              		.loc 2 599 0
 870 02a8 1DE2     		b	.L64	@
 871              	.L30:
 600:src/main.c    **** 
 601:src/main.c    **** 			case SET_COUNTERS_AND_PHONE0:
 602:src/main.c    **** 				acum_secs = 0;
 872              		.loc 2 602 0
 873 02aa 0023     		movs	r3, #0	@ tmp342,
 874 02ac 1F93     		str	r3, [sp, #124]	@ tmp342, acum_secs
 603:src/main.c    **** 				acum_secs_index = 0;
 875              		.loc 2 603 0
 876 02ae 8223     		movs	r3, #130	@ tmp343,
 877 02b0 6B44     		add	r3, r3, sp	@ tmp343,
 878 02b2 0022     		movs	r2, #0	@ tmp344,
 879 02b4 1A80     		strh	r2, [r3]	@ tmp345, acum_secs_index
 604:src/main.c    **** 				acum_hours = 0;
 880              		.loc 2 604 0
 881 02b6 0023     		movs	r3, #0	@ tmp346,
 882 02b8 1E93     		str	r3, [sp, #120]	@ tmp346, acum_hours
 605:src/main.c    **** 
 606:src/main.c    **** 				counters_mode = 0;
 883              		.loc 2 606 0
ARM GAS  /tmp/ccvvhbBy.s 			page 45


 884 02ba 7523     		movs	r3, #117	@ tmp347,
 885 02bc 6B44     		add	r3, r3, sp	@ tmp347,
 886 02be 0022     		movs	r2, #0	@ tmp348,
 887 02c0 1A70     		strb	r2, [r3]	@ tmp349, counters_mode
 607:src/main.c    **** 				LED_OFF;
 888              		.loc 2 607 0
 889 02c2 9023     		movs	r3, #144	@ tmp607,
 890 02c4 DB05     		lsls	r3, r3, #23	@ D.7186, tmp607,
 891 02c6 8022     		movs	r2, #128	@ tmp608,
 892 02c8 5205     		lsls	r2, r2, #21	@ tmp350, tmp608,
 893 02ca 9A61     		str	r2, [r3, #24]	@ tmp350, _201->BSRR
 608:src/main.c    **** 
 609:src/main.c    **** 				//espero que el telefono este libre
 610:src/main.c    **** 				//TODO: timeout aca
 611:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_ready)
 894              		.loc 2 611 0
 895 02cc FFF7FEFF 		bl	FuncsGSMStateAsk	@
 896 02d0 031E     		subs	r3, r0, #0	@ tmp351,,
 897 02d2 052B     		cmp	r3, #5	@ tmp351,
 898 02d4 00D0     		beq	.LCB597	@
 899 02d6 08E2     		b	.L65	@long jump	@
 900              	.LCB597:
 612:src/main.c    **** 				{
 613:src/main.c    **** 					Usart2Send((char *) (const char *) "Reports by SMS\r\n");
 901              		.loc 2 613 0
 902 02d8 404B     		ldr	r3, .L71+72	@ tmp353,
 903 02da 1800     		movs	r0, r3	@, tmp353
 904 02dc FFF7FEFF 		bl	Usart2Send	@
 614:src/main.c    **** 					main_state = SET_COUNTERS_AND_PHONE1;
 905              		.loc 2 614 0
 906 02e0 7723     		movs	r3, #119	@ tmp354,
 907 02e2 6B44     		add	r3, r3, sp	@ tmp354,
 908 02e4 0422     		movs	r2, #4	@ tmp355,
 909 02e6 1A70     		strb	r2, [r3]	@ tmp356, main_state
 615:src/main.c    **** 
 616:src/main.c    **** 					//pido imei
 617:src/main.c    **** 					s_lcd[0] = '\0';
 910              		.loc 2 617 0
 911 02e8 01AB     		add	r3, sp, #4	@ tmp357,,
 912 02ea 0022     		movs	r2, #0	@ tmp358,
 913 02ec 1A70     		strb	r2, [r3]	@ tmp359, s_lcd
 618:src/main.c    **** 					FuncsGSMCommandAnswer ("AT+GSN\r\n" , s_lcd);
 914              		.loc 2 618 0
 915 02ee 01AA     		add	r2, sp, #4	@ tmp360,,
 916 02f0 3B4B     		ldr	r3, .L71+76	@ tmp361,
 917 02f2 1100     		movs	r1, r2	@, tmp360
 918 02f4 1800     		movs	r0, r3	@, tmp361
 919 02f6 FFF7FEFF 		bl	FuncsGSMCommandAnswer	@
 619:src/main.c    **** 				}
 620:src/main.c    **** 				break;
 920              		.loc 2 620 0
 921 02fa F6E1     		b	.L65	@
 922              	.L31:
 621:src/main.c    **** 
 622:src/main.c    **** 			case SET_COUNTERS_AND_PHONE1:
 623:src/main.c    **** 				//espero que el telefono este libre
 624:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_ready)
ARM GAS  /tmp/ccvvhbBy.s 			page 46


 923              		.loc 2 624 0
 924 02fc FFF7FEFF 		bl	FuncsGSMStateAsk	@
 925 0300 031E     		subs	r3, r0, #0	@ tmp362,,
 926 0302 052B     		cmp	r3, #5	@ tmp362,
 927 0304 00D0     		beq	.LCB620	@
 928 0306 F2E1     		b	.L66	@long jump	@
 929              	.LCB620:
 625:src/main.c    **** 				{
 626:src/main.c    **** 					i = strlen(s_lcd);
 930              		.loc 2 626 0
 931 0308 01AB     		add	r3, sp, #4	@ tmp364,,
 932 030a 1800     		movs	r0, r3	@, tmp364
 933 030c FFF7FEFF 		bl	strlen	@
 934 0310 0200     		movs	r2, r0	@ D.7191,
 935 0312 8F23     		movs	r3, #143	@ tmp365,
 936 0314 6B44     		add	r3, r3, sp	@ tmp365,
 937 0316 1A70     		strb	r2, [r3]	@ tmp366, i
 627:src/main.c    **** 					strncpy(param_struct.imei, s_lcd, (i - 2));
 938              		.loc 2 627 0
 939 0318 8F23     		movs	r3, #143	@ tmp367,
 940 031a 6B44     		add	r3, r3, sp	@ tmp367,
 941 031c 1B78     		ldrb	r3, [r3]	@ D.7188, i
 942 031e 023B     		subs	r3, r3, #2	@ D.7188,
 943 0320 1A00     		movs	r2, r3	@ D.7191, D.7188
 944 0322 01A9     		add	r1, sp, #4	@ tmp368,,
 945 0324 2F4B     		ldr	r3, .L71+80	@ tmp369,
 946 0326 1800     		movs	r0, r3	@, tmp369
 947 0328 FFF7FEFF 		bl	strncpy	@
 628:src/main.c    **** 					Usart2Send("IMEI: ");
 948              		.loc 2 628 0
 949 032c 2E4B     		ldr	r3, .L71+84	@ tmp370,
 950 032e 1800     		movs	r0, r3	@, tmp370
 951 0330 FFF7FEFF 		bl	Usart2Send	@
 629:src/main.c    **** 					Usart2Send(param_struct.imei);
 952              		.loc 2 629 0
 953 0334 2B4B     		ldr	r3, .L71+80	@ tmp371,
 954 0336 1800     		movs	r0, r3	@, tmp371
 955 0338 FFF7FEFF 		bl	Usart2Send	@
 630:src/main.c    **** 					Usart2Send("\r\n");
 956              		.loc 2 630 0
 957 033c 2B4B     		ldr	r3, .L71+88	@ tmp372,
 958 033e 1800     		movs	r0, r3	@, tmp372
 959 0340 FFF7FEFF 		bl	Usart2Send	@
 631:src/main.c    **** 
 632:src/main.c    **** 					//mando SMS con mi info
 633:src/main.c    **** 					strcpy(s_lcd, "IMEI: ");
 960              		.loc 2 633 0
 961 0344 01AB     		add	r3, sp, #4	@ tmp373,,
 962 0346 284A     		ldr	r2, .L71+84	@ tmp374,
 963 0348 1168     		ldr	r1, [r2]	@ tmp377,
 964 034a 1960     		str	r1, [r3]	@ tmp377,
 965 034c 9188     		ldrh	r1, [r2, #4]	@ tmp378,
 966 034e 9980     		strh	r1, [r3, #4]	@ tmp378,
 967 0350 9279     		ldrb	r2, [r2, #6]	@ tmp379,
 968 0352 9A71     		strb	r2, [r3, #6]	@ tmp379,
 634:src/main.c    **** 					strcat(s_lcd, param_struct.imei);
 969              		.loc 2 634 0
ARM GAS  /tmp/ccvvhbBy.s 			page 47


 970 0354 234A     		ldr	r2, .L71+80	@ tmp380,
 971 0356 01AB     		add	r3, sp, #4	@ tmp381,,
 972 0358 1100     		movs	r1, r2	@, tmp380
 973 035a 1800     		movs	r0, r3	@, tmp381
 974 035c FFF7FEFF 		bl	strcat	@
 635:src/main.c    **** 					strcat(s_lcd, ", ACTIVO");
 975              		.loc 2 635 0
 976 0360 01AB     		add	r3, sp, #4	@ tmp382,,
 977 0362 1800     		movs	r0, r3	@, tmp382
 978 0364 FFF7FEFF 		bl	strlen	@
 979 0368 0300     		movs	r3, r0	@ tmp383,
 980 036a 1A00     		movs	r2, r3	@ D.7191, tmp384
 981 036c 01AB     		add	r3, sp, #4	@ tmp385,,
 982 036e 9A18     		adds	r2, r3, r2	@ D.7193, tmp385, D.7191
 983 0370 1F4B     		ldr	r3, .L71+92	@ tmp386,
 984 0372 1000     		movs	r0, r2	@ tmp387, D.7193
 985 0374 1900     		movs	r1, r3	@ tmp388, tmp386
 986 0376 0923     		movs	r3, #9	@ tmp389,
 987 0378 1A00     		movs	r2, r3	@, tmp389
 988 037a FFF7FEFF 		bl	memcpy	@
 636:src/main.c    **** 
 637:src/main.c    **** 					FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 989              		.loc 2 637 0
 990 037e 074A     		ldr	r2, .L71+8	@ tmp392,
 991 0380 01AB     		add	r3, sp, #4	@ tmp393,,
 992 0382 1100     		movs	r1, r2	@, tmp392
 993 0384 1800     		movs	r0, r3	@, tmp393
 994 0386 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 638:src/main.c    **** 					// FuncsGSMSendSMS("forro", param_struct.num_reportar);
 639:src/main.c    **** 					main_state = LAMP_OFF;
 995              		.loc 2 639 0
 996 038a 7723     		movs	r3, #119	@ tmp394,
 997 038c 6B44     		add	r3, r3, sp	@ tmp394,
 998 038e 0522     		movs	r2, #5	@ tmp395,
 999 0390 1A70     		strb	r2, [r3]	@ tmp396, main_state
 640:src/main.c    **** 				}
 641:src/main.c    **** 				break;
 1000              		.loc 2 641 0
 1001 0392 ACE1     		b	.L66	@
 1002              	.L72:
 1003              		.align	2
 1004              	.L71:
 1005 0394 80BB0000 		.word	48000
 1006 0398 00FC0008 		.word	134282240
 1007 039c 00000000 		.word	param_struct
 1008 03a0 00000000 		.word	.LC1
 1009 03a4 0C000000 		.word	.LC3
 1010 03a8 34000000 		.word	.LC5
 1011 03ac 44000000 		.word	.LC7
 1012 03b0 58000000 		.word	.LC9
 1013 03b4 70000000 		.word	.LC11
 1014 03b8 80000000 		.word	.LC13
 1015 03bc 00000000 		.word	timer_standby
 1016 03c0 00000000 		.word	.L27
 1017 03c4 00240140 		.word	1073816576
 1018 03c8 00000000 		.word	seq_ready
 1019 03cc 9C000000 		.word	.LC18
ARM GAS  /tmp/ccvvhbBy.s 			page 48


 1020 03d0 A8000000 		.word	.LC20
 1021 03d4 00000000 		.word	adc_ch
 1022 03d8 00000000 		.word	zero_current
 1023 03dc D0000000 		.word	.LC24
 1024 03e0 E4000000 		.word	.LC26
 1025 03e4 18000000 		.word	param_struct+24
 1026 03e8 F0000000 		.word	.LC29
 1027 03ec F8000000 		.word	.LC31
 1028 03f0 FC000000 		.word	.LC33
 1029              	.L32:
 642:src/main.c    **** 
 643:src/main.c    **** 			case LAMP_OFF:
 644:src/main.c    **** 				if (!tt_relay_on_off)
 1030              		.loc 2 644 0
 1031 03f4 CA4B     		ldr	r3, .L73	@ tmp397,
 1032 03f6 1B88     		ldrh	r3, [r3]	@ tmp398, tt_relay_on_off
 1033 03f8 9BB2     		uxth	r3, r3	@ D.7187, tmp398
 1034 03fa 002B     		cmp	r3, #0	@ D.7187,
 1035 03fc 00D0     		beq	.LCB718	@
 1036 03fe 78E1     		b	.L67	@long jump	@
 1037              	.LCB718:
 645:src/main.c    **** 				{
 646:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 1038              		.loc 2 646 0
 1039 0400 FFF7FEFF 		bl	GetPhoto	@
 1040 0404 0300     		movs	r3, r0	@ tmp399,
 1041 0406 1A1E     		subs	r2, r3, #0	@ D.7187, tmp400,
 1042 0408 C64B     		ldr	r3, .L73+4	@ tmp401,
 1043 040a 9A42     		cmp	r2, r3	@ D.7187, tmp401
 1044 040c 00D8     		bhi	.LCB724	@
 1045 040e 70E1     		b	.L67	@long jump	@
 1046              	.LCB724:
 647:src/main.c    **** 					{
 648:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 649:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 1047              		.loc 2 649 0
 1048 0410 1A20     		movs	r0, #26	@,
 1049 0412 FFF7FEFF 		bl	Update_TIM3_CH1	@
 650:src/main.c    **** #else
 651:src/main.c    **** 						Update_TIM3_CH1 (PWM_MAX);
 652:src/main.c    **** #endif
 653:src/main.c    **** 						// RelayOn();
 654:src/main.c    **** 						main_state = LAMP_ON;
 1050              		.loc 2 654 0
 1051 0416 7723     		movs	r3, #119	@ tmp402,
 1052 0418 6B44     		add	r3, r3, sp	@ tmp402,
 1053 041a 0922     		movs	r2, #9	@ tmp403,
 1054 041c 1A70     		strb	r2, [r3]	@ tmp404, main_state
 655:src/main.c    **** 						tt_relay_on_off = 10000;
 1055              		.loc 2 655 0
 1056 041e C04B     		ldr	r3, .L73	@ tmp405,
 1057 0420 C14A     		ldr	r2, .L73+8	@ tmp406,
 1058 0422 1A80     		strh	r2, [r3]	@ tmp407, tt_relay_on_off
 656:src/main.c    **** 						Usart2Send("PRENDIDO\r\n");
 1059              		.loc 2 656 0
 1060 0424 C14B     		ldr	r3, .L73+12	@ tmp408,
 1061 0426 1800     		movs	r0, r3	@, tmp408
ARM GAS  /tmp/ccvvhbBy.s 			page 49


 1062 0428 FFF7FEFF 		bl	Usart2Send	@
 657:src/main.c    **** 						FuncsGSMSendSMS("PRENDIDO", param_struct.num_reportar);
 1063              		.loc 2 657 0
 1064 042c C04A     		ldr	r2, .L73+16	@ tmp409,
 1065 042e C14B     		ldr	r3, .L73+20	@ tmp410,
 1066 0430 1100     		movs	r1, r2	@, tmp409
 1067 0432 1800     		movs	r0, r3	@, tmp410
 1068 0434 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 658:src/main.c    **** 						LED_ON;
 1069              		.loc 2 658 0
 1070 0438 9023     		movs	r3, #144	@ tmp605,
 1071 043a DB05     		lsls	r3, r3, #23	@ D.7186, tmp605,
 1072 043c 8022     		movs	r2, #128	@ tmp606,
 1073 043e 5201     		lsls	r2, r2, #5	@ tmp411, tmp606,
 1074 0440 9A61     		str	r2, [r3, #24]	@ tmp411, _235->BSRR
 659:src/main.c    **** #ifdef WITH_HYST
 660:src/main.c    **** 						hours = 0;
 1075              		.loc 2 660 0
 1076 0442 BD4B     		ldr	r3, .L73+24	@ tmp412,
 1077 0444 0022     		movs	r2, #0	@ tmp413,
 1078 0446 1A70     		strb	r2, [r3]	@ tmp414, hours
 661:src/main.c    **** #endif
 662:src/main.c    **** 					}
 663:src/main.c    **** 				}
 664:src/main.c    **** 				break;
 1079              		.loc 2 664 0
 1080 0448 53E1     		b	.L67	@
 1081              	.L33:
 665:src/main.c    **** 
 666:src/main.c    **** 			case LAMP_ON:
 667:src/main.c    **** #if defined REPORTS_AIRPLANE_MODE
 668:src/main.c    **** 				switch (lamp_on_state)
 669:src/main.c    **** 				{
 670:src/main.c    **** 					case init_airplane0:
 671:src/main.c    **** 						if (FuncsGSMStateAsk() == gsm_state_ready)
 672:src/main.c    **** 						{
 673:src/main.c    **** 							//lo paso a modo avion
 674:src/main.c    **** 							s_lcd[0] = '\0';
 675:src/main.c    **** 							FuncsGSMCommandAnswer ("AT+CFUN=4\r\n" , s_lcd);
 676:src/main.c    **** 							lamp_on_state = init_airplane1;
 677:src/main.c    **** 						}
 678:src/main.c    **** 						break;
 679:src/main.c    **** 
 680:src/main.c    **** 					case init_airplane1:
 681:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 682:src/main.c    **** 						{
 683:src/main.c    **** 							//en modo avion, prendo y mido
 684:src/main.c    **** 							RelayOn();
 685:src/main.c    **** 							lamp_on_state = meas_init;
 686:src/main.c    **** 						}
 687:src/main.c    **** 						break;
 688:src/main.c    **** 
 689:src/main.c    **** 					case meas_init:
 690:src/main.c    **** 						if (RelayIsOn())
 691:src/main.c    **** 						{
 692:src/main.c    **** 							lamp_on_state = meas_meas;
 693:src/main.c    **** 							counters_mode = 1;
ARM GAS  /tmp/ccvvhbBy.s 			page 50


 694:src/main.c    **** 						}
 695:src/main.c    **** 						break;
 696:src/main.c    **** 
 697:src/main.c    **** 					case meas_meas:
 698:src/main.c    **** 						if (meas_end)
 699:src/main.c    **** 						{
 700:src/main.c    **** 							meas_end = 0;
 701:src/main.c    **** 
 702:src/main.c    **** 							if (!tt_relay_on_off)
 703:src/main.c    **** 							{
 704:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 705:src/main.c    **** 								hyst = GetHysteresis (hours);
 706:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 707:src/main.c    **** #else
 708:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 709:src/main.c    **** #endif
 710:src/main.c    **** 								{
 711:src/main.c    **** 									main_state = LAMP_OFF;
 712:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 713:src/main.c    **** 									Update_TIM3_CH1 (0);
 714:src/main.c    **** #endif
 715:src/main.c    **** 									lamp_on_state = init_airplane0;
 716:src/main.c    **** 									counters_mode = 0;
 717:src/main.c    **** 									Usart2Send("APAGADO\r\n");
 718:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 719:src/main.c    **** 									tt_relay_on_off = 10000;
 720:src/main.c    **** 									RelayOff();
 721:src/main.c    **** 									LED_OFF;
 722:src/main.c    **** 								}
 723:src/main.c    **** 								else
 724:src/main.c    **** 								{
 725:src/main.c    **** 									//No apago, tengo que reportar?
 726:src/main.c    **** 									if (show_power_index >= timer_rep)
 727:src/main.c    **** 									{
 728:src/main.c    **** 										show_power_index = 0;
 729:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 730:src/main.c    **** 										lamp_on_state = meas_reporting0;
 731:src/main.c    **** 									}
 732:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 733:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 734:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 735:src/main.c    **** #endif
 736:src/main.c    **** 								}
 737:src/main.c    **** 							}
 738:src/main.c    **** 						}
 739:src/main.c    **** 						break;
 740:src/main.c    **** 
 741:src/main.c    **** 					case meas_reporting0:
 742:src/main.c    **** 						//lo saco de modo avion
 743:src/main.c    **** 						s_lcd[0] = '\0';
 744:src/main.c    **** 						FuncsGSMCommandAnswer ("AT+CFUN=1\r\n" , s_lcd);
 745:src/main.c    **** 						lamp_on_state = meas_reporting1;
 746:src/main.c    **** 						break;
 747:src/main.c    **** 
 748:src/main.c    **** 					case meas_reporting1:
 749:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 750:src/main.c    **** 						{
ARM GAS  /tmp/ccvvhbBy.s 			page 51


 751:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 752:src/main.c    **** 							{
 753:src/main.c    **** 								ShowPower(s_lcd, power, acum_hours, acum_secs);
 754:src/main.c    **** 								Usart2Send(s_lcd);
 755:src/main.c    **** 								FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 756:src/main.c    **** 							}
 757:src/main.c    **** 							lamp_on_state = init_airplane0;
 758:src/main.c    **** 						}
 759:src/main.c    **** 						break;
 760:src/main.c    **** 
 761:src/main.c    **** 					default:
 762:src/main.c    **** 						lamp_on_state = init_airplane0;
 763:src/main.c    **** 						break;
 764:src/main.c    **** 				}
 765:src/main.c    **** 
 766:src/main.c    **** #elif defined REPORTS_NORMAL_MODE
 767:src/main.c    **** 				switch (lamp_on_state)
 1082              		.loc 2 767 0
 1083 044a 7623     		movs	r3, #118	@ tmp415,
 1084 044c 6B44     		add	r3, r3, sp	@ tmp415,
 1085 044e 1B78     		ldrb	r3, [r3]	@ D.7188, lamp_on_state
 1086 0450 052B     		cmp	r3, #5	@ D.7188,
 1087 0452 00D9     		bls	.LCB758	@
 1088 0454 C1E0     		b	.L42	@long jump	@
 1089              	.LCB758:
 1090 0456 9A00     		lsls	r2, r3, #2	@ tmp416, D.7188,
 1091 0458 B84B     		ldr	r3, .L73+28	@ tmp418,
 1092 045a D318     		adds	r3, r2, r3	@ tmp417, tmp416, tmp418
 1093 045c 1B68     		ldr	r3, [r3]	@ tmp419,
 1094 045e 9F46     		mov	pc, r3	@ tmp419
 1095              		.section	.rodata.main
 1096              		.align	2
 1097              	.L44:
 1098 0028 60040000 		.word	.L43
 1099 002c 70040000 		.word	.L45
 1100 0030 80040000 		.word	.L46
 1101 0034 B2040000 		.word	.L47
 1102 0038 82050000 		.word	.L48
 1103 003c B0050000 		.word	.L49
 1104              		.section	.text.main
 1105              	.L43:
 768:src/main.c    **** 				{
 769:src/main.c    **** 					case init_airplane0:
 770:src/main.c    **** 						lamp_on_state++;
 1106              		.loc 2 770 0
 1107 0460 7623     		movs	r3, #118	@ tmp420,
 1108 0462 6B44     		add	r3, r3, sp	@ tmp420,
 1109 0464 1A78     		ldrb	r2, [r3]	@ D.7194, lamp_on_state
 1110 0466 7623     		movs	r3, #118	@ tmp421,
 1111 0468 6B44     		add	r3, r3, sp	@ tmp421,
 1112 046a 0132     		adds	r2, r2, #1	@ tmp422,
 1113 046c 1A70     		strb	r2, [r3]	@ tmp423, lamp_on_state
 771:src/main.c    **** 						break;
 1114              		.loc 2 771 0
 1115 046e BCE0     		b	.L50	@
 1116              	.L45:
 772:src/main.c    **** 
ARM GAS  /tmp/ccvvhbBy.s 			page 52


 773:src/main.c    **** 					case init_airplane1:
 774:src/main.c    **** 						lamp_on_state++;
 1117              		.loc 2 774 0
 1118 0470 7623     		movs	r3, #118	@ tmp424,
 1119 0472 6B44     		add	r3, r3, sp	@ tmp424,
 1120 0474 1A78     		ldrb	r2, [r3]	@ D.7194, lamp_on_state
 1121 0476 7623     		movs	r3, #118	@ tmp425,
 1122 0478 6B44     		add	r3, r3, sp	@ tmp425,
 1123 047a 0132     		adds	r2, r2, #1	@ tmp426,
 1124 047c 1A70     		strb	r2, [r3]	@ tmp427, lamp_on_state
 775:src/main.c    **** 						break;
 1125              		.loc 2 775 0
 1126 047e B4E0     		b	.L50	@
 1127              	.L46:
 776:src/main.c    **** 
 777:src/main.c    **** 					case meas_init:
 778:src/main.c    **** 						RelayOn();
 1128              		.loc 2 778 0
 1129 0480 FFF7FEFF 		bl	RelayOn	@
 779:src/main.c    **** 						lamp_on_state = meas_meas;
 1130              		.loc 2 779 0
 1131 0484 7623     		movs	r3, #118	@ tmp428,
 1132 0486 6B44     		add	r3, r3, sp	@ tmp428,
 1133 0488 0322     		movs	r2, #3	@ tmp429,
 1134 048a 1A70     		strb	r2, [r3]	@ tmp430, lamp_on_state
 780:src/main.c    **** 						counters_mode = 1;
 1135              		.loc 2 780 0
 1136 048c 7523     		movs	r3, #117	@ tmp431,
 1137 048e 6B44     		add	r3, r3, sp	@ tmp431,
 1138 0490 0122     		movs	r2, #1	@ tmp432,
 1139 0492 1A70     		strb	r2, [r3]	@ tmp433, counters_mode
 781:src/main.c    **** 						timer_meas = 200;		//le doy 200ms de buffer a la medicion
 1140              		.loc 2 781 0
 1141 0494 AA4B     		ldr	r3, .L73+32	@ tmp434,
 1142 0496 C822     		movs	r2, #200	@ tmp435,
 1143 0498 1A70     		strb	r2, [r3]	@ tmp436, timer_meas
 782:src/main.c    **** 						//esto en realidad es un indice de 2 segundos de tick, la info esta en minutos
 783:src/main.c    **** 						timer_rep = param_struct.timer_reportar * 30;
 1144              		.loc 2 783 0
 1145 049a A54B     		ldr	r3, .L73+16	@ tmp437,
 1146 049c 5222     		movs	r2, #82	@ tmp438,
 1147 049e 9B5C     		ldrb	r3, [r3, r2]	@ D.7189,
 1148 04a0 9BB2     		uxth	r3, r3	@ D.7187, D.7189
 1149 04a2 1A1C     		adds	r2, r3, #0	@ tmp440, tmp439
 1150 04a4 1201     		lsls	r2, r2, #4	@ tmp441, tmp440,
 1151 04a6 D31A     		subs	r3, r2, r3	@ tmp443, tmp442, tmp439
 1152 04a8 DB18     		adds	r3, r3, r3	@ tmp445, tmp444, tmp444
 1153 04aa 9AB2     		uxth	r2, r3	@ D.7187, tmp443
 1154 04ac A54B     		ldr	r3, .L73+36	@ tmp446,
 1155 04ae 1A80     		strh	r2, [r3]	@ tmp447, timer_rep
 784:src/main.c    **** 						break;
 1156              		.loc 2 784 0
 1157 04b0 9BE0     		b	.L50	@
 1158              	.L47:
 785:src/main.c    **** 
 786:src/main.c    **** 					case meas_meas:
 787:src/main.c    **** 						if (meas_end)		//termino una vuelta de mediciones, generalmente 2 segundos
ARM GAS  /tmp/ccvvhbBy.s 			page 53


 1159              		.loc 2 787 0
 1160 04b2 1DAB     		add	r3, sp, #116	@ tmp448,,
 1161 04b4 1B78     		ldrb	r3, [r3]	@ tmp449, meas_end
 1162 04b6 002B     		cmp	r3, #0	@ tmp449,
 1163 04b8 00D1     		bne	.LCB822	@
 1164 04ba 93E0     		b	.L68	@long jump	@
 1165              	.LCB822:
 788:src/main.c    **** 						{
 789:src/main.c    **** 							meas_end = 0;
 1166              		.loc 2 789 0
 1167 04bc 1DAB     		add	r3, sp, #116	@ tmp450,,
 1168 04be 0022     		movs	r2, #0	@ tmp451,
 1169 04c0 1A70     		strb	r2, [r3]	@ tmp452, meas_end
 790:src/main.c    **** 
 791:src/main.c    **** 							if (!tt_relay_on_off)
 1170              		.loc 2 791 0
 1171 04c2 974B     		ldr	r3, .L73	@ tmp453,
 1172 04c4 1B88     		ldrh	r3, [r3]	@ tmp454, tt_relay_on_off
 1173 04c6 9BB2     		uxth	r3, r3	@ D.7187, tmp454
 1174 04c8 002B     		cmp	r3, #0	@ D.7187,
 1175 04ca 00D0     		beq	.LCB830	@
 1176 04cc 8AE0     		b	.L68	@long jump	@
 1177              	.LCB830:
 792:src/main.c    **** 							{
 793:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 794:src/main.c    **** 								hyst = GetHysteresis (hours);
 1178              		.loc 2 794 0
 1179 04ce 9A4B     		ldr	r3, .L73+24	@ tmp455,
 1180 04d0 1B78     		ldrb	r3, [r3]	@ tmp456, hours
 1181 04d2 DBB2     		uxtb	r3, r3	@ D.7189, tmp456
 1182 04d4 1BAC     		add	r4, sp, #108	@ tmp457,,
 1183 04d6 1800     		movs	r0, r3	@, D.7189
 1184 04d8 FFF7FEFF 		bl	GetHysteresis	@
 1185 04dc 0300     		movs	r3, r0	@ tmp458,
 1186 04de 2380     		strh	r3, [r4]	@ tmp460, hyst
 795:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 1187              		.loc 2 795 0
 1188 04e0 FFF7FEFF 		bl	GetPhoto	@
 1189 04e4 0300     		movs	r3, r0	@ tmp461,
 1190 04e6 1900     		movs	r1, r3	@ D.7188, D.7187
 1191 04e8 1BAB     		add	r3, sp, #108	@ tmp463,,
 1192 04ea 1B88     		ldrh	r3, [r3]	@ D.7188, hyst
 1193 04ec 8D4A     		ldr	r2, .L73+4	@ tmp464,
 1194 04ee D31A     		subs	r3, r2, r3	@ D.7188, tmp464, D.7188
 1195 04f0 9942     		cmp	r1, r3	@ D.7188, D.7188
 1196 04f2 23DA     		bge	.L52	@,
 796:src/main.c    **** #else
 797:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 798:src/main.c    **** #endif
 799:src/main.c    **** 								{
 800:src/main.c    **** 									main_state = LAMP_OFF;
 1197              		.loc 2 800 0
 1198 04f4 7723     		movs	r3, #119	@ tmp465,
 1199 04f6 6B44     		add	r3, r3, sp	@ tmp465,
 1200 04f8 0522     		movs	r2, #5	@ tmp466,
 1201 04fa 1A70     		strb	r2, [r3]	@ tmp467, main_state
 801:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
ARM GAS  /tmp/ccvvhbBy.s 			page 54


 802:src/main.c    **** 									Update_TIM3_CH1 (0);
 1202              		.loc 2 802 0
 1203 04fc 0020     		movs	r0, #0	@,
 1204 04fe FFF7FEFF 		bl	Update_TIM3_CH1	@
 803:src/main.c    **** #endif
 804:src/main.c    **** 									lamp_on_state = init_airplane0;
 1205              		.loc 2 804 0
 1206 0502 7623     		movs	r3, #118	@ tmp468,
 1207 0504 6B44     		add	r3, r3, sp	@ tmp468,
 1208 0506 0022     		movs	r2, #0	@ tmp469,
 1209 0508 1A70     		strb	r2, [r3]	@ tmp470, lamp_on_state
 805:src/main.c    **** 									counters_mode = 0;
 1210              		.loc 2 805 0
 1211 050a 7523     		movs	r3, #117	@ tmp471,
 1212 050c 6B44     		add	r3, r3, sp	@ tmp471,
 1213 050e 0022     		movs	r2, #0	@ tmp472,
 1214 0510 1A70     		strb	r2, [r3]	@ tmp473, counters_mode
 806:src/main.c    **** 									Usart2Send("APAGADO");
 1215              		.loc 2 806 0
 1216 0512 8D4B     		ldr	r3, .L73+40	@ tmp474,
 1217 0514 1800     		movs	r0, r3	@, tmp474
 1218 0516 FFF7FEFF 		bl	Usart2Send	@
 807:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 1219              		.loc 2 807 0
 1220 051a 854A     		ldr	r2, .L73+16	@ tmp475,
 1221 051c 8A4B     		ldr	r3, .L73+40	@ tmp476,
 1222 051e 1100     		movs	r1, r2	@, tmp475
 1223 0520 1800     		movs	r0, r3	@, tmp476
 1224 0522 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 808:src/main.c    **** 									tt_relay_on_off = 10000;
 1225              		.loc 2 808 0
 1226 0526 7E4B     		ldr	r3, .L73	@ tmp477,
 1227 0528 7F4A     		ldr	r2, .L73+8	@ tmp478,
 1228 052a 1A80     		strh	r2, [r3]	@ tmp479, tt_relay_on_off
 809:src/main.c    **** 									RelayOff();
 1229              		.loc 2 809 0
 1230 052c FFF7FEFF 		bl	RelayOff	@
 810:src/main.c    **** 									LED_OFF;
 1231              		.loc 2 810 0
 1232 0530 9023     		movs	r3, #144	@ tmp603,
 1233 0532 DB05     		lsls	r3, r3, #23	@ D.7186, tmp603,
 1234 0534 8022     		movs	r2, #128	@ tmp604,
 1235 0536 5205     		lsls	r2, r2, #21	@ tmp480, tmp604,
 1236 0538 9A61     		str	r2, [r3, #24]	@ tmp480, _269->BSRR
 811:src/main.c    **** 								}
 812:src/main.c    **** 								else
 813:src/main.c    **** 								{
 814:src/main.c    **** 									//No apago, tengo que reportar?
 815:src/main.c    **** 									if (show_power_index >= timer_rep)
 816:src/main.c    **** 									{
 817:src/main.c    **** 										show_power_index = 0;
 818:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 819:src/main.c    **** 										lamp_on_state = meas_reporting0;
 820:src/main.c    **** 									}
 821:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 822:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 823:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
ARM GAS  /tmp/ccvvhbBy.s 			page 55


 824:src/main.c    **** #endif
 825:src/main.c    **** 								}
 826:src/main.c    **** 							}
 827:src/main.c    **** 						}
 828:src/main.c    **** 						break;
 1237              		.loc 2 828 0
 1238 053a 53E0     		b	.L68	@
 1239              	.L52:
 815:src/main.c    **** 									{
 1240              		.loc 2 815 0
 1241 053c 834B     		ldr	r3, .L73+44	@ tmp481,
 1242 053e 1A88     		ldrh	r2, [r3]	@ D.7187, show_power_index
 1243 0540 804B     		ldr	r3, .L73+36	@ tmp482,
 1244 0542 1B88     		ldrh	r3, [r3]	@ D.7187, timer_rep
 1245 0544 9A42     		cmp	r2, r3	@ D.7187, D.7187
 1246 0546 0AD3     		bcc	.L53	@,
 817:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 1247              		.loc 2 817 0
 1248 0548 804B     		ldr	r3, .L73+44	@ tmp483,
 1249 054a 0022     		movs	r2, #0	@ tmp484,
 1250 054c 1A80     		strh	r2, [r3]	@ tmp485, show_power_index
 818:src/main.c    **** 										lamp_on_state = meas_reporting0;
 1251              		.loc 2 818 0
 1252 054e 7523     		movs	r3, #117	@ tmp486,
 1253 0550 6B44     		add	r3, r3, sp	@ tmp486,
 1254 0552 0222     		movs	r2, #2	@ tmp487,
 1255 0554 1A70     		strb	r2, [r3]	@ tmp488, counters_mode
 819:src/main.c    **** 									}
 1256              		.loc 2 819 0
 1257 0556 7623     		movs	r3, #118	@ tmp489,
 1258 0558 6B44     		add	r3, r3, sp	@ tmp489,
 1259 055a 0422     		movs	r2, #4	@ tmp490,
 1260 055c 1A70     		strb	r2, [r3]	@ tmp491, lamp_on_state
 1261              	.L53:
 822:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 1262              		.loc 2 822 0
 1263 055e FFF7FEFF 		bl	GetPhoto	@
 1264 0562 0300     		movs	r3, r0	@ tmp492,
 1265 0564 6B24     		movs	r4, #107	@ tmp494,
 1266 0566 6C44     		add	r4, r4, sp	@ tmp494,
 1267 0568 1800     		movs	r0, r3	@, D.7187
 1268 056a FFF7FEFF 		bl	GetNew1to10	@
 1269 056e 0300     		movs	r3, r0	@ tmp495,
 1270 0570 2370     		strb	r3, [r4]	@ tmp497, one_to_ten
 823:src/main.c    **** #endif
 1271              		.loc 2 823 0
 1272 0572 6B23     		movs	r3, #107	@ tmp498,
 1273 0574 6B44     		add	r3, r3, sp	@ tmp498,
 1274 0576 1B78     		ldrb	r3, [r3]	@ tmp500, one_to_ten
 1275 0578 9BB2     		uxth	r3, r3	@ D.7187, tmp499
 1276 057a 1800     		movs	r0, r3	@, D.7187
 1277 057c FFF7FEFF 		bl	Update_TIM3_CH1	@
 1278              		.loc 2 828 0
 1279 0580 30E0     		b	.L68	@
 1280              	.L48:
 829:src/main.c    **** 
 830:src/main.c    **** 					case meas_reporting0:
ARM GAS  /tmp/ccvvhbBy.s 			page 56


 831:src/main.c    **** 						ShowPower(s_lcd, power, acum_hours, acum_secs);
 1281              		.loc 2 831 0
 1282 0582 1F9C     		ldr	r4, [sp, #124]	@ tmp501, acum_secs
 1283 0584 1E9A     		ldr	r2, [sp, #120]	@ tmp502, acum_hours
 1284 0586 23AB     		add	r3, sp, #140	@ tmp503,,
 1285 0588 1988     		ldrh	r1, [r3]	@ tmp504, power
 1286 058a 01A8     		add	r0, sp, #4	@ tmp505,,
 1287 058c 2300     		movs	r3, r4	@, tmp501
 1288 058e FFF7FEFF 		bl	ShowPower	@
 832:src/main.c    **** 						Usart2Send(s_lcd);
 1289              		.loc 2 832 0
 1290 0592 01AB     		add	r3, sp, #4	@ tmp506,,
 1291 0594 1800     		movs	r0, r3	@, tmp506
 1292 0596 FFF7FEFF 		bl	Usart2Send	@
 833:src/main.c    **** 						FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 1293              		.loc 2 833 0
 1294 059a 654A     		ldr	r2, .L73+16	@ tmp507,
 1295 059c 01AB     		add	r3, sp, #4	@ tmp508,,
 1296 059e 1100     		movs	r1, r2	@, tmp507
 1297 05a0 1800     		movs	r0, r3	@, tmp508
 1298 05a2 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 834:src/main.c    **** 						lamp_on_state = meas_reporting1;
 1299              		.loc 2 834 0
 1300 05a6 7623     		movs	r3, #118	@ tmp509,
 1301 05a8 6B44     		add	r3, r3, sp	@ tmp509,
 1302 05aa 0522     		movs	r2, #5	@ tmp510,
 1303 05ac 1A70     		strb	r2, [r3]	@ tmp511, lamp_on_state
 835:src/main.c    **** 						break;
 1304              		.loc 2 835 0
 1305 05ae 1CE0     		b	.L50	@
 1306              	.L49:
 836:src/main.c    **** 
 837:src/main.c    **** 					case meas_reporting1:
 838:src/main.c    **** 						if (meas_end)		//me sincronizo nuevamente con la medicion
 1307              		.loc 2 838 0
 1308 05b0 1DAB     		add	r3, sp, #116	@ tmp512,,
 1309 05b2 1B78     		ldrb	r3, [r3]	@ tmp513, meas_end
 1310 05b4 002B     		cmp	r3, #0	@ tmp513,
 1311 05b6 17D0     		beq	.L69	@,
 839:src/main.c    **** 						{
 840:src/main.c    **** 							meas_end = 0;
 1312              		.loc 2 840 0
 1313 05b8 1DAB     		add	r3, sp, #116	@ tmp514,,
 1314 05ba 0022     		movs	r2, #0	@ tmp515,
 1315 05bc 1A70     		strb	r2, [r3]	@ tmp516, meas_end
 841:src/main.c    **** 
 842:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 1316              		.loc 2 842 0
 1317 05be FFF7FEFF 		bl	FuncsGSMStateAsk	@
 1318 05c2 031E     		subs	r3, r0, #0	@ tmp517,,
 1319 05c4 052B     		cmp	r3, #5	@ tmp517,
 1320 05c6 0FD1     		bne	.L69	@,
 843:src/main.c    **** 							{
 844:src/main.c    **** 								counters_mode = 1;
 1321              		.loc 2 844 0
 1322 05c8 7523     		movs	r3, #117	@ tmp519,
 1323 05ca 6B44     		add	r3, r3, sp	@ tmp519,
ARM GAS  /tmp/ccvvhbBy.s 			page 57


 1324 05cc 0122     		movs	r2, #1	@ tmp520,
 1325 05ce 1A70     		strb	r2, [r3]	@ tmp521, counters_mode
 845:src/main.c    **** 								lamp_on_state = meas_meas;
 1326              		.loc 2 845 0
 1327 05d0 7623     		movs	r3, #118	@ tmp522,
 1328 05d2 6B44     		add	r3, r3, sp	@ tmp522,
 1329 05d4 0322     		movs	r2, #3	@ tmp523,
 1330 05d6 1A70     		strb	r2, [r3]	@ tmp524, lamp_on_state
 846:src/main.c    **** 							}
 847:src/main.c    **** 						}
 848:src/main.c    **** 						break;
 1331              		.loc 2 848 0
 1332 05d8 06E0     		b	.L69	@
 1333              	.L42:
 849:src/main.c    **** 
 850:src/main.c    **** 					default:
 851:src/main.c    **** 						lamp_on_state = init_airplane0;
 1334              		.loc 2 851 0
 1335 05da 7623     		movs	r3, #118	@ tmp525,
 1336 05dc 6B44     		add	r3, r3, sp	@ tmp525,
 1337 05de 0022     		movs	r2, #0	@ tmp526,
 1338 05e0 1A70     		strb	r2, [r3]	@ tmp527, lamp_on_state
 852:src/main.c    **** 						break;
 1339              		.loc 2 852 0
 1340 05e2 02E0     		b	.L50	@
 1341              	.L68:
 828:src/main.c    **** 
 1342              		.loc 2 828 0
 1343 05e4 C046     		nop
 1344 05e6 00E0     		b	.L50	@
 1345              	.L69:
 848:src/main.c    **** 
 1346              		.loc 2 848 0
 1347 05e8 C046     		nop
 1348              	.L50:
 853:src/main.c    **** 				}
 854:src/main.c    **** 
 855:src/main.c    **** #else
 856:src/main.c    **** #error "Debe elegir la forma de reportar Normal / Airplane"
 857:src/main.c    **** #endif
 858:src/main.c    **** 
 859:src/main.c    **** 				if (counters_mode)	//si esta activo el modo de contadores mido
 1349              		.loc 2 859 0
 1350 05ea 7523     		movs	r3, #117	@ tmp528,
 1351 05ec 6B44     		add	r3, r3, sp	@ tmp528,
 1352 05ee 1B78     		ldrb	r3, [r3]	@ tmp529, counters_mode
 1353 05f0 002B     		cmp	r3, #0	@ tmp529,
 1354 05f2 00D1     		bne	.LCB986	@
 1355 05f4 7FE0     		b	.L70	@long jump	@
 1356              	.LCB986:
 860:src/main.c    **** 				{
 861:src/main.c    **** 					if (!timer_meas)	//update cada 200ms
 1357              		.loc 2 861 0
 1358 05f6 524B     		ldr	r3, .L73+32	@ tmp530,
 1359 05f8 1B78     		ldrb	r3, [r3]	@ tmp531, timer_meas
 1360 05fa DBB2     		uxtb	r3, r3	@ D.7189, tmp531
 1361 05fc 002B     		cmp	r3, #0	@ D.7189,
ARM GAS  /tmp/ccvvhbBy.s 			page 58


 1362 05fe 00D0     		beq	.LCB991	@
 1363 0600 79E0     		b	.L70	@long jump	@
 1364              	.LCB991:
 862:src/main.c    **** 					{
 863:src/main.c    **** 						if (i < SIZEOF_POWER_VECT)
 1365              		.loc 2 863 0
 1366 0602 8F23     		movs	r3, #143	@ tmp532,
 1367 0604 6B44     		add	r3, r3, sp	@ tmp532,
 1368 0606 1B78     		ldrb	r3, [r3]	@ tmp533, i
 1369 0608 092B     		cmp	r3, #9	@ tmp533,
 1370 060a 1AD8     		bhi	.L56	@,
 864:src/main.c    **** 						{
 865:src/main.c    **** 							power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 1371              		.loc 2 865 0
 1372 060c 8F23     		movs	r3, #143	@ tmp534,
 1373 060e 6B44     		add	r3, r3, sp	@ tmp534,
 1374 0610 1C78     		ldrb	r4, [r3]	@ D.7188, i
 1375 0612 FFF7FEFF 		bl	GetVGrid	@
 1376 0616 0300     		movs	r3, r0	@ tmp535,
 1377 0618 1D00     		movs	r5, r3	@ D.7187, tmp536
 1378 061a FFF7FEFF 		bl	GetIGrid	@
 1379 061e 0300     		movs	r3, r0	@ tmp537,
 1380 0620 1900     		movs	r1, r3	@, D.7187
 1381 0622 2800     		movs	r0, r5	@, D.7187
 1382 0624 FFF7FEFF 		bl	PowerCalc	@
 1383 0628 0300     		movs	r3, r0	@ tmp539,
 1384 062a 1900     		movs	r1, r3	@ D.7187, tmp540
 1385 062c 484B     		ldr	r3, .L73+48	@ tmp541,
 1386 062e 6200     		lsls	r2, r4, #1	@ tmp542, D.7188,
 1387 0630 D152     		strh	r1, [r2, r3]	@ tmp543, power_vect
 866:src/main.c    **** 							i++;
 1388              		.loc 2 866 0
 1389 0632 8F23     		movs	r3, #143	@ tmp544,
 1390 0634 6B44     		add	r3, r3, sp	@ tmp544,
 1391 0636 1A78     		ldrb	r2, [r3]	@ D.7189, i
 1392 0638 8F23     		movs	r3, #143	@ tmp545,
 1393 063a 6B44     		add	r3, r3, sp	@ tmp545,
 1394 063c 0132     		adds	r2, r2, #1	@ tmp546,
 1395 063e 1A70     		strb	r2, [r3]	@ tmp547, i
 1396 0640 46E0     		b	.L57	@
 1397              	.L56:
 867:src/main.c    **** 						}
 868:src/main.c    **** 						else
 869:src/main.c    **** 						{		//termine de cargar el vector, guardo muestro info
 870:src/main.c    **** 							i = 0;
 1398              		.loc 2 870 0
 1399 0642 8F23     		movs	r3, #143	@ tmp548,
 1400 0644 6B44     		add	r3, r3, sp	@ tmp548,
 1401 0646 0022     		movs	r2, #0	@ tmp549,
 1402 0648 1A70     		strb	r2, [r3]	@ tmp550, i
 871:src/main.c    **** 
 872:src/main.c    **** 							if (counters_mode == 1)	//mido normalmente
 1403              		.loc 2 872 0
 1404 064a 7523     		movs	r3, #117	@ tmp551,
 1405 064c 6B44     		add	r3, r3, sp	@ tmp551,
 1406 064e 1B78     		ldrb	r3, [r3]	@ tmp552, counters_mode
 1407 0650 012B     		cmp	r3, #1	@ tmp552,
ARM GAS  /tmp/ccvvhbBy.s 			page 59


 1408 0652 07D1     		bne	.L58	@,
 873:src/main.c    **** 							{
 874:src/main.c    **** 								// power = PowerCalcMean8(power_vect);
 875:src/main.c    **** 								power = 9871;
 1409              		.loc 2 875 0
 1410 0654 23AB     		add	r3, sp, #140	@ tmp553,,
 1411 0656 3F4A     		ldr	r2, .L73+52	@ tmp554,
 1412 0658 1A80     		strh	r2, [r3]	@ tmp555, power
 876:src/main.c    **** 								last_power = power;
 1413              		.loc 2 876 0
 1414 065a 8A23     		movs	r3, #138	@ tmp556,
 1415 065c 6B44     		add	r3, r3, sp	@ tmp556,
 1416 065e 23AA     		add	r2, sp, #140	@ tmp557,,
 1417 0660 1288     		ldrh	r2, [r2]	@ tmp558, power
 1418 0662 1A80     		strh	r2, [r3]	@ tmp558, last_power
 1419              	.L58:
 877:src/main.c    **** 							}
 878:src/main.c    **** 
 879:src/main.c    **** 							if (counters_mode == 2)	//no mido solo update de lo viejo
 1420              		.loc 2 879 0
 1421 0664 7523     		movs	r3, #117	@ tmp559,
 1422 0666 6B44     		add	r3, r3, sp	@ tmp559,
 1423 0668 1B78     		ldrb	r3, [r3]	@ tmp560, counters_mode
 1424 066a 022B     		cmp	r3, #2	@ tmp560,
 1425 066c 04D1     		bne	.L59	@,
 880:src/main.c    **** 								power = last_power;
 1426              		.loc 2 880 0
 1427 066e 23AB     		add	r3, sp, #140	@ tmp561,,
 1428 0670 8A22     		movs	r2, #138	@ tmp562,
 1429 0672 6A44     		add	r2, r2, sp	@ tmp562,
 1430 0674 1288     		ldrh	r2, [r2]	@ tmp563, last_power
 1431 0676 1A80     		strh	r2, [r3]	@ tmp563, power
 1432              	.L59:
 881:src/main.c    **** 
 882:src/main.c    **** 							acum_secs += power;
 1433              		.loc 2 882 0
 1434 0678 23AB     		add	r3, sp, #140	@ tmp564,,
 1435 067a 1B88     		ldrh	r3, [r3]	@ D.7191, power
 1436 067c 1F9A     		ldr	r2, [sp, #124]	@ tmp566, acum_secs
 1437 067e D318     		adds	r3, r2, r3	@ tmp565, tmp566, D.7191
 1438 0680 1F93     		str	r3, [sp, #124]	@ tmp565, acum_secs
 883:src/main.c    **** 							acum_secs_index++;
 1439              		.loc 2 883 0
 1440 0682 8223     		movs	r3, #130	@ tmp567,
 1441 0684 6B44     		add	r3, r3, sp	@ tmp567,
 1442 0686 1A88     		ldrh	r2, [r3]	@ D.7187, acum_secs_index
 1443 0688 8223     		movs	r3, #130	@ tmp568,
 1444 068a 6B44     		add	r3, r3, sp	@ tmp568,
 1445 068c 0132     		adds	r2, r2, #1	@ tmp569,
 1446 068e 1A80     		strh	r2, [r3]	@ tmp570, acum_secs_index
 884:src/main.c    **** 							show_power_index++;
 1447              		.loc 2 884 0
 1448 0690 2E4B     		ldr	r3, .L73+44	@ tmp571,
 1449 0692 1B88     		ldrh	r3, [r3]	@ D.7187, show_power_index
 1450 0694 0133     		adds	r3, r3, #1	@ tmp572,
 1451 0696 9AB2     		uxth	r2, r3	@ D.7187, tmp572
 1452 0698 2C4B     		ldr	r3, .L73+44	@ tmp573,
ARM GAS  /tmp/ccvvhbBy.s 			page 60


 1453 069a 1A80     		strh	r2, [r3]	@ tmp574, show_power_index
 885:src/main.c    **** 
 886:src/main.c    **** 							if (acum_secs_index >= 1800)
 1454              		.loc 2 886 0
 1455 069c 8223     		movs	r3, #130	@ tmp575,
 1456 069e 6B44     		add	r3, r3, sp	@ tmp575,
 1457 06a0 1B88     		ldrh	r3, [r3]	@ tmp576, acum_secs_index
 1458 06a2 2D4A     		ldr	r2, .L73+56	@ tmp577,
 1459 06a4 9342     		cmp	r3, r2	@ tmp576, tmp577
 1460 06a6 10D9     		bls	.L60	@,
 887:src/main.c    **** 							{
 888:src/main.c    **** 								acum_hours += (acum_secs / 1800);	//lo convierto a Wh, para no perder bits en cada cuenta
 1461              		.loc 2 888 0
 1462 06a8 1F9A     		ldr	r2, [sp, #124]	@ tmp578, acum_secs
 1463 06aa E123     		movs	r3, #225	@ tmp602,
 1464 06ac D900     		lsls	r1, r3, #3	@, tmp602,
 1465 06ae 1000     		movs	r0, r2	@, tmp578
 1466 06b0 FFF7FEFF 		bl	__aeabi_uidiv	@
 1467 06b4 0300     		movs	r3, r0	@ tmp581,
 1468 06b6 1A00     		movs	r2, r3	@ D.7191, tmp581
 1469 06b8 1E9B     		ldr	r3, [sp, #120]	@ tmp583, acum_hours
 1470 06ba 9B18     		adds	r3, r3, r2	@ tmp582, tmp583, D.7191
 1471 06bc 1E93     		str	r3, [sp, #120]	@ tmp582, acum_hours
 889:src/main.c    **** 								acum_secs = 0;
 1472              		.loc 2 889 0
 1473 06be 0023     		movs	r3, #0	@ tmp584,
 1474 06c0 1F93     		str	r3, [sp, #124]	@ tmp584, acum_secs
 890:src/main.c    **** 								acum_secs_index = 0;
 1475              		.loc 2 890 0
 1476 06c2 8223     		movs	r3, #130	@ tmp585,
 1477 06c4 6B44     		add	r3, r3, sp	@ tmp585,
 1478 06c6 0022     		movs	r2, #0	@ tmp586,
 1479 06c8 1A80     		strh	r2, [r3]	@ tmp587, acum_secs_index
 1480              	.L60:
 891:src/main.c    **** 							}
 892:src/main.c    **** 							//cuando termino una medicion completa aviso con meas_end
 893:src/main.c    **** 							meas_end = 1;
 1481              		.loc 2 893 0
 1482 06ca 1DAB     		add	r3, sp, #116	@ tmp588,,
 1483 06cc 0122     		movs	r2, #1	@ tmp589,
 1484 06ce 1A70     		strb	r2, [r3]	@ tmp590, meas_end
 1485              	.L57:
 894:src/main.c    **** 						}
 895:src/main.c    **** 						timer_meas = 200;		//10 veces 200ms
 1486              		.loc 2 895 0
 1487 06d0 1B4B     		ldr	r3, .L73+32	@ tmp591,
 1488 06d2 C822     		movs	r2, #200	@ tmp592,
 1489 06d4 1A70     		strb	r2, [r3]	@ tmp593, timer_meas
 896:src/main.c    **** 					}
 897:src/main.c    **** 				}
 898:src/main.c    **** 				break;
 1490              		.loc 2 898 0
 1491 06d6 0EE0     		b	.L70	@
 1492              	.L25:
 899:src/main.c    **** 
 900:src/main.c    **** 			default:
 901:src/main.c    **** 				main_state = MAIN_INIT;
ARM GAS  /tmp/ccvvhbBy.s 			page 61


 1493              		.loc 2 901 0
 1494 06d8 7723     		movs	r3, #119	@ tmp594,
 1495 06da 6B44     		add	r3, r3, sp	@ tmp594,
 1496 06dc 0022     		movs	r2, #0	@ tmp595,
 1497 06de 1A70     		strb	r2, [r3]	@ tmp596, main_state
 902:src/main.c    **** 				break;
 1498              		.loc 2 902 0
 1499 06e0 0AE0     		b	.L34	@
 1500              	.L63:
 576:src/main.c    **** 
 1501              		.loc 2 576 0
 1502 06e2 C046     		nop
 1503 06e4 08E0     		b	.L34	@
 1504              	.L64:
 599:src/main.c    **** 
 1505              		.loc 2 599 0
 1506 06e6 C046     		nop
 1507 06e8 06E0     		b	.L34	@
 1508              	.L65:
 620:src/main.c    **** 
 1509              		.loc 2 620 0
 1510 06ea C046     		nop
 1511 06ec 04E0     		b	.L34	@
 1512              	.L66:
 641:src/main.c    **** 
 1513              		.loc 2 641 0
 1514 06ee C046     		nop
 1515 06f0 02E0     		b	.L34	@
 1516              	.L67:
 664:src/main.c    **** 
 1517              		.loc 2 664 0
 1518 06f2 C046     		nop
 1519 06f4 00E0     		b	.L34	@
 1520              	.L70:
 898:src/main.c    **** 
 1521              		.loc 2 898 0
 1522 06f6 C046     		nop
 1523              	.L34:
 903:src/main.c    **** 		}
 904:src/main.c    **** 
 905:src/main.c    **** 		//Cosas que dependen de las muestras
 906:src/main.c    **** 		if (seq_ready)
 1524              		.loc 2 906 0
 1525 06f8 184B     		ldr	r3, .L73+60	@ tmp597,
 1526 06fa 1B78     		ldrb	r3, [r3]	@ tmp598, seq_ready
 1527 06fc DBB2     		uxtb	r3, r3	@ D.7189, tmp598
 1528 06fe 002B     		cmp	r3, #0	@ D.7189,
 1529 0700 06D0     		beq	.L61	@,
 907:src/main.c    **** 		{
 908:src/main.c    **** 			seq_ready = 0;
 1530              		.loc 2 908 0
 1531 0702 164B     		ldr	r3, .L73+60	@ tmp599,
 1532 0704 0022     		movs	r2, #0	@ tmp600,
 1533 0706 1A70     		strb	r2, [r3]	@ tmp601, seq_ready
 909:src/main.c    **** 			UpdateVGrid ();
 1534              		.loc 2 909 0
 1535 0708 FFF7FEFF 		bl	UpdateVGrid	@
ARM GAS  /tmp/ccvvhbBy.s 			page 62


 910:src/main.c    **** 			UpdateIGrid ();
 1536              		.loc 2 910 0
 1537 070c FFF7FEFF 		bl	UpdateIGrid	@
 1538              	.L61:
 911:src/main.c    **** 		}
 912:src/main.c    **** 
 913:src/main.c    **** 		//Cosas que no dependen del estado del programa
 914:src/main.c    **** 		UpdateRelay ();
 1539              		.loc 2 914 0
 1540 0710 FFF7FEFF 		bl	UpdateRelay	@
 915:src/main.c    **** 		UpdatePhotoTransistor();
 1541              		.loc 2 915 0
 1542 0714 FFF7FEFF 		bl	UpdatePhotoTransistor	@
 916:src/main.c    **** #ifdef USE_GSM
 917:src/main.c    **** 		FuncsGSM();
 1543              		.loc 2 917 0
 1544 0718 FFF7FEFF 		bl	FuncsGSM	@
 918:src/main.c    **** #endif
 919:src/main.c    **** 	}	//end while 1
 1545              		.loc 2 919 0
 1546 071c 57E5     		b	.L62	@
 1547              	.L74:
 1548 071e C046     		.align	2
 1549              	.L73:
 1550 0720 00000000 		.word	tt_relay_on_off
 1551 0724 8A0E0000 		.word	3722
 1552 0728 10270000 		.word	10000
 1553 072c 08010000 		.word	.LC36
 1554 0730 00000000 		.word	param_struct
 1555 0734 14010000 		.word	.LC38
 1556 0738 00000000 		.word	hours
 1557 073c 28000000 		.word	.L44
 1558 0740 00000000 		.word	timer_meas
 1559 0744 00000000 		.word	timer_rep
 1560 0748 20010000 		.word	.LC44
 1561 074c 00000000 		.word	show_power_index
 1562 0750 00000000 		.word	power_vect
 1563 0754 8F260000 		.word	9871
 1564 0758 07070000 		.word	1799
 1565 075c 00000000 		.word	seq_ready
 1566              		.cfi_endproc
 1567              	.LFE20:
 1568              		.size	main, .-main
 1569              		.section	.rodata
 1570              		.align	2
 1571              	.LC48:
 1572 0128 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1572      3A7B226D 
 1572      794E616D 
 1572      65223A22 
 1572      4E75636C 
 1573              		.align	2
 1574              	.LC50:
 1575 0140 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1575      54656D70 
 1575      65726174 
 1575      75726522 
ARM GAS  /tmp/ccvvhbBy.s 			page 63


 1575      3A256C75 
 1576 0159 000000   		.align	2
 1577              	.LC52:
 1578 015c 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1578      48756D69 
 1578      64697479 
 1578      223A256C 
 1578      752E256C 
 1579 0172 0000     		.align	2
 1580              	.LC54:
 1581 0174 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1581      50726573 
 1581      73757265 
 1581      223A256C 
 1581      752E256C 
 1582 018a 0000     		.align	2
 1583              	.LC56:
 1584 018c 7D7D00   		.ascii	"}}\000"
 1585              		.section	.text.prepare_json_pkt,"ax",%progbits
 1586              		.align	2
 1587              		.global	prepare_json_pkt
 1588              		.code	16
 1589              		.thumb_func
 1590              		.type	prepare_json_pkt, %function
 1591              	prepare_json_pkt:
 1592              	.LFB21:
 920:src/main.c    **** 
 921:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 922:src/main.c    **** 
 923:src/main.c    **** 	while (1)
 924:src/main.c    **** 	{
 925:src/main.c    **** 		switch (main_state)
 926:src/main.c    **** 		{
 927:src/main.c    **** 			case MAIN_INIT:
 928:src/main.c    **** 				RelayOff();
 929:src/main.c    **** 				LED_OFF;
 930:src/main.c    **** 				FillPhotoBuffer();
 931:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 932:src/main.c    **** 				FillTempBuffer();
 933:src/main.c    **** #endif
 934:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 935:src/main.c    **** 				Update_TIM3_CH1 (0);
 936:src/main.c    **** #endif
 937:src/main.c    **** 				main_state = SYNCHRO_ADC;
 938:src/main.c    **** #ifdef ADC_WITH_INT
 939:src/main.c    **** 				seq_ready = 0;
 940:src/main.c    **** #endif
 941:src/main.c    **** 				break;
 942:src/main.c    **** 
 943:src/main.c    **** 			case SYNCHRO_ADC:
 944:src/main.c    **** #ifdef ADC_WITH_INT
 945:src/main.c    **** 				if (seq_ready)
 946:src/main.c    **** #endif
 947:src/main.c    **** 				{
 948:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 949:src/main.c    **** 				}
 950:src/main.c    **** 				break;
ARM GAS  /tmp/ccvvhbBy.s 			page 64


 951:src/main.c    **** 
 952:src/main.c    **** 			case SET_ZERO_CURRENT:
 953:src/main.c    **** 				main_state = LAMP_OFF;
 954:src/main.c    **** 				break;
 955:src/main.c    **** 
 956:src/main.c    **** 			case LAMP_OFF:
 957:src/main.c    **** 				if (!tt_relay_on_off)
 958:src/main.c    **** 				{
 959:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 960:src/main.c    **** 					{
 961:src/main.c    **** 						main_state = LAMP_ON;
 962:src/main.c    **** 						tt_relay_on_off = 10000;
 963:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 964:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 965:src/main.c    **** 	#endif
 966:src/main.c    **** 
 967:src/main.c    **** 						RelayOn();
 968:src/main.c    **** 						LED_ON;
 969:src/main.c    **** 	#ifdef WITH_HYST
 970:src/main.c    **** 						hours = 0;
 971:src/main.c    **** 	#endif
 972:src/main.c    **** 					}
 973:src/main.c    **** 				}
 974:src/main.c    **** 				break;
 975:src/main.c    **** 
 976:src/main.c    **** 			case LAMP_ON:
 977:src/main.c    **** 				if (!tt_relay_on_off)
 978:src/main.c    **** 				{
 979:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 980:src/main.c    **** 					hyst = GetHysteresis (hours);
 981:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 982:src/main.c    **** 	#else
 983:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 984:src/main.c    **** 	#endif
 985:src/main.c    **** 					{
 986:src/main.c    **** 						main_state = LAMP_OFF;
 987:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 988:src/main.c    **** 						Update_TIM3_CH1 (0);
 989:src/main.c    **** 	#endif
 990:src/main.c    **** 						tt_relay_on_off = 10000;
 991:src/main.c    **** 						RelayOff();
 992:src/main.c    **** 						LED_OFF;
 993:src/main.c    **** 					}
 994:src/main.c    **** 				}
 995:src/main.c    **** 
 996:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 997:src/main.c    **** 				if (main_state == LAMP_ON)
 998:src/main.c    **** 				{
 999:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
1000:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
1001:src/main.c    **** 				}
1002:src/main.c    **** 	#endif
1003:src/main.c    **** 				break;
1004:src/main.c    **** 
1005:src/main.c    **** 			default:
1006:src/main.c    **** 				main_state = MAIN_INIT;
1007:src/main.c    **** 				break;
ARM GAS  /tmp/ccvvhbBy.s 			page 65


1008:src/main.c    **** 		}
1009:src/main.c    **** 
1010:src/main.c    **** 		if (!timer_standby)
1011:src/main.c    **** 		{
1012:src/main.c    **** #ifdef WITH_TEMP_CONTROL
1013:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
1014:src/main.c    **** #else
1015:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
1016:src/main.c    **** #endif
1017:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
1018:src/main.c    **** 			Usart2Send(s_lcd);
1019:src/main.c    **** 			timer_standby = 2000;
1020:src/main.c    **** 		}
1021:src/main.c    **** 
1022:src/main.c    **** 		//Cosas que no dependen del estado del programa
1023:src/main.c    **** 		UpdateRelay ();
1024:src/main.c    **** #ifdef WITH_TEMP_CONTROL
1025:src/main.c    **** 		UpdateTemp();
1026:src/main.c    **** #endif
1027:src/main.c    **** 		UpdatePhotoTransistor();
1028:src/main.c    **** 	}	//end while 1
1029:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
1030:src/main.c    **** #endif	//USE_REDONDA_BASIC
1031:src/main.c    **** 
1032:src/main.c    **** 
1033:src/main.c    **** #ifdef USE_MQTT_LIB
1034:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
1035:src/main.c    **** 	int rc = 0;
1036:src/main.c    **** 	char buf[200];
1037:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
1038:src/main.c    **** 	char* payload = "mypayload";
1039:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
1040:src/main.c    **** 	int len = 0;
1041:src/main.c    **** 
1042:src/main.c    **** 	data.clientID.cstring = "me";
1043:src/main.c    **** 	data.keepAliveInterval = 20;
1044:src/main.c    **** 	data.cleansession = 1;
1045:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
1046:src/main.c    **** 
1047:src/main.c    **** 	topicString.cstring = "mytopic";
1048:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
1049:src/main.c    **** 
1050:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
1051:src/main.c    **** 	//falta abrir puerto
1052:src/main.c    **** 	//falta enviar al socket
1053:src/main.c    **** 	//falta cerrar socket
1054:src/main.c    **** #endif
1055:src/main.c    **** 
1056:src/main.c    **** //	//---------- Prueba USART2 --------//
1057:src/main.c    **** //
1058:src/main.c    **** //    while( 1 )
1059:src/main.c    **** //    {
1060:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1061:src/main.c    **** //        Wait_ms(3000);
1062:src/main.c    **** //    }
1063:src/main.c    **** //
1064:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
ARM GAS  /tmp/ccvvhbBy.s 			page 66


1065:src/main.c    **** 
1066:src/main.c    **** 	//---------- Prueba con GPS --------//
1067:src/main.c    **** #ifdef USE_GPS
1068:src/main.c    **** 	Usart2SendSingle('M');
1069:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1070:src/main.c    **** 	Wait_ms(1000);
1071:src/main.c    **** 
1072:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
1073:src/main.c    **** 
1074:src/main.c    **** 	//mando reset al gps
1075:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
1076:src/main.c    **** 	GPSStartResetSM ();
1077:src/main.c    **** 	while (GPSStart() != RESP_OK);
1078:src/main.c    **** 
1079:src/main.c    **** 	//mando conf al gps
1080:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
1081:src/main.c    **** 	GPSConfigResetSM ();
1082:src/main.c    **** 	while (GPSConfig() != RESP_OK);
1083:src/main.c    **** 
1084:src/main.c    **** //	//mando reset factory al gps
1085:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
1086:src/main.c    **** //	GPSResetFactoryResetSM ();
1087:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
1088:src/main.c    **** 
1089:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
1090:src/main.c    **** //	timer_standby = 60000;
1091:src/main.c    **** //	while( timer_standby )
1092:src/main.c    **** 	while( 1 )
1093:src/main.c    **** 	{
1094:src/main.c    **** 		if (gps_pckt_ready)
1095:src/main.c    **** 		{
1096:src/main.c    **** 			gps_pckt_ready = 0;
1097:src/main.c    **** 			//Usart2SendSingle('P');
1098:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
1099:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
1100:src/main.c    **** 		}
1101:src/main.c    **** 
1102:src/main.c    **** 		GPSProcess();
1103:src/main.c    **** 	}
1104:src/main.c    **** #endif
1105:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
1106:src/main.c    **** 
1107:src/main.c    **** 	//---------- Prueba con GSM --------//
1108:src/main.c    **** #ifdef USE_GSM
1109:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
1110:src/main.c    **** 
1111:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
1112:src/main.c    **** 
1113:src/main.c    **** 
1114:src/main.c    **** 	//Pruebo USART1
1115:src/main.c    **** //	while (1)
1116:src/main.c    **** //	{
1117:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
1118:src/main.c    **** //			Wait_ms(50);
1119:src/main.c    **** //	}
1120:src/main.c    **** 
1121:src/main.c    **** 
ARM GAS  /tmp/ccvvhbBy.s 			page 67


1122:src/main.c    **** 	//mando start al gsm
1123:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
1124:src/main.c    **** 	//GPSStartResetSM ();
1125:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
1126:src/main.c    **** 	while (timer_standby)
1127:src/main.c    **** 	{
1128:src/main.c    **** 		i = GSM_Start();
1129:src/main.c    **** 		if (i == 2)
1130:src/main.c    **** 		{
1131:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
1132:src/main.c    **** 			timer_standby = 0;
1133:src/main.c    **** 		}
1134:src/main.c    **** 
1135:src/main.c    **** 		if (i == 4)
1136:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
1137:src/main.c    **** 	}
1138:src/main.c    **** 
1139:src/main.c    **** 	//mando conf al gsm
1140:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
1141:src/main.c    **** 	//GPSConfigResetSM ();
1142:src/main.c    **** 
1143:src/main.c    **** 	i = 0;
1144:src/main.c    **** 	while (i == 0)
1145:src/main.c    **** 	{
1146:src/main.c    **** 		ii = GSM_Config(1000);
1147:src/main.c    **** 
1148:src/main.c    **** 		if (ii == 2)
1149:src/main.c    **** 			i = 0;
1150:src/main.c    **** 		else if (ii > 2)
1151:src/main.c    **** 		{
1152:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
1153:src/main.c    **** 			while (1);
1154:src/main.c    **** 		}
1155:src/main.c    **** 
1156:src/main.c    **** 		GSMProcess();
1157:src/main.c    **** 		GSMReceive ();
1158:src/main.c    **** 
1159:src/main.c    **** 		if (gsm_pckt_ready)
1160:src/main.c    **** 		{
1161:src/main.c    **** 			gsm_pckt_ready = 0;
1162:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1163:src/main.c    **** 		}
1164:src/main.c    **** 
1165:src/main.c    **** 		if (LIGHT)
1166:src/main.c    **** 			LED_ON;
1167:src/main.c    **** 		else
1168:src/main.c    **** 			LED_OFF;
1169:src/main.c    **** 	}
1170:src/main.c    **** 
1171:src/main.c    **** 
1172:src/main.c    **** 	while( 1 )
1173:src/main.c    **** 	{
1174:src/main.c    **** 		if (gsm_pckt_ready)
1175:src/main.c    **** 		{
1176:src/main.c    **** 			gsm_pckt_ready = 0;
1177:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1178:src/main.c    **** 		}
ARM GAS  /tmp/ccvvhbBy.s 			page 68


1179:src/main.c    **** 
1180:src/main.c    **** 		GSMProcess();
1181:src/main.c    **** 
1182:src/main.c    **** 		if (LIGHT)
1183:src/main.c    **** 			LED_ON;
1184:src/main.c    **** 
1185:src/main.c    **** 	}
1186:src/main.c    **** #endif
1187:src/main.c    **** 
1188:src/main.c    **** 
1189:src/main.c    **** 
1190:src/main.c    **** 
1191:src/main.c    **** 	//---------- Prueba temp --------//
1192:src/main.c    **** 	/*
1193:src/main.c    **** 	while (1)
1194:src/main.c    **** 	{
1195:src/main.c    **** 		local_meas = GetTemp();
1196:src/main.c    **** 		if (local_meas != local_meas_last)
1197:src/main.c    **** 		{
1198:src/main.c    **** 			LED_ON;
1199:src/main.c    **** 			local_meas_last = local_meas;
1200:src/main.c    **** 			LCD_2DO_RENGLON;
1201:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
1202:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
1203:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
1204:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
1205:src/main.c    **** 			LCDTransmitStr(s_lcd);
1206:src/main.c    **** 			LED_OFF;
1207:src/main.c    **** 		}
1208:src/main.c    **** 
1209:src/main.c    **** 		UpdateTemp();
1210:src/main.c    **** 	}
1211:src/main.c    **** 	*/
1212:src/main.c    **** 	//---------- Fin prueba temp --------//
1213:src/main.c    **** 
1214:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
1215:src/main.c    **** 	/*
1216:src/main.c    **** 	local_meas = 0;
1217:src/main.c    **** 	while (1)
1218:src/main.c    **** 	{
1219:src/main.c    **** 		LCD_2DO_RENGLON;
1220:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
1221:src/main.c    **** 		fcalc = local_meas;
1222:src/main.c    **** 		fcalc = fcalc * K_1TO10;
1223:src/main.c    **** 		one_int = (short) fcalc;
1224:src/main.c    **** 		fcalc = fcalc - one_int;
1225:src/main.c    **** 		fcalc = fcalc * 10;
1226:src/main.c    **** 		one_dec = (short) fcalc;
1227:src/main.c    **** 
1228:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
1229:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
1230:src/main.c    **** 		LCDTransmitStr(s_lcd);
1231:src/main.c    **** 
1232:src/main.c    **** 		Wait_ms (1000);
1233:src/main.c    **** 		if (local_meas <= 255)
1234:src/main.c    **** 			local_meas = 0;
1235:src/main.c    **** 		else
ARM GAS  /tmp/ccvvhbBy.s 			page 69


1236:src/main.c    **** 			local_meas++;
1237:src/main.c    **** 	}
1238:src/main.c    **** 	*/
1239:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
1240:src/main.c    **** 
1241:src/main.c    **** 
1242:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
1243:src/main.c    **** 
1244:src/main.c    **** 	return 0;
1245:src/main.c    **** }
1246:src/main.c    **** 
1247:src/main.c    **** //--- End of Main ---//
1248:src/main.c    **** 
1249:src/main.c    **** 
1250:src/main.c    **** 
1251:src/main.c    **** 
1252:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
1253:src/main.c    **** {
 1593              		.loc 2 1253 0
 1594              		.cfi_startproc
 1595 0000 00B5     		push	{lr}	@
 1596              	.LCFI6:
 1597              		.cfi_def_cfa_offset 4
 1598              		.cfi_offset 14, -4
 1599 0002 97B0     		sub	sp, sp, #92	@,,
 1600              	.LCFI7:
 1601              		.cfi_def_cfa_offset 96
 1602 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
1254:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1603              		.loc 2 1254 0
 1604 0006 0123     		movs	r3, #1	@ tmp112,
 1605 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1606 000a 0223     		movs	r3, #2	@ tmp113,
 1607 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1608 000e 0323     		movs	r3, #3	@ tmp114,
 1609 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1610 0012 0423     		movs	r3, #4	@ tmp115,
 1611 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1612 0016 0523     		movs	r3, #5	@ tmp116,
 1613 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1614 001a 0623     		movs	r3, #6	@ tmp117,
 1615 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
1255:src/main.c    ****       char tempbuff[40];
1256:src/main.c    ****       volatile float HUMIDITY_Value;
1257:src/main.c    ****       volatile float TEMPERATURE_Value;
1258:src/main.c    ****       volatile float PRESSURE_Value;
1259:src/main.c    **** 
1260:src/main.c    **** 
1261:src/main.c    **** 
1262:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1616              		.loc 2 1262 0
 1617 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1618 0020 1E4B     		ldr	r3, .L77	@ tmp119,
 1619 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1620 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1621 0026 1823     		movs	r3, #24	@ tmp122,
 1622 0028 1A00     		movs	r2, r3	@, tmp122
ARM GAS  /tmp/ccvvhbBy.s 			page 70


 1623 002a FFF7FEFF 		bl	memcpy	@
1263:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1264:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1265:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1624              		.loc 2 1265 0
 1625 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1626 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1627 0032 1B49     		ldr	r1, .L77+4	@ tmp127,
 1628 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1629 0036 FFF7FEFF 		bl	sprintf	@
1266:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1630              		.loc 2 1266 0
 1631 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1632 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1633 003e 1100     		movs	r1, r2	@, tmp129
 1634 0040 1800     		movs	r0, r3	@, tmp130
 1635 0042 FFF7FEFF 		bl	strcat	@
1267:src/main.c    **** 
1268:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1269:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1270:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1636              		.loc 2 1270 0
 1637 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1638 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1639 004a 1649     		ldr	r1, .L77+8	@ tmp133,
 1640 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1641 004e FFF7FEFF 		bl	sprintf	@
1271:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1642              		.loc 2 1271 0
 1643 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1644 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1645 0056 1100     		movs	r1, r2	@, tmp135
 1646 0058 1800     		movs	r0, r3	@, tmp136
 1647 005a FFF7FEFF 		bl	strcat	@
1272:src/main.c    **** 
1273:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1274:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1275:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1648              		.loc 2 1275 0
 1649 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1650 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1651 0062 1149     		ldr	r1, .L77+12	@ tmp139,
 1652 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1653 0066 FFF7FEFF 		bl	sprintf	@
1276:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1654              		.loc 2 1276 0
 1655 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1656 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1657 006e 1100     		movs	r1, r2	@, tmp141
 1658 0070 1800     		movs	r0, r3	@, tmp142
 1659 0072 FFF7FEFF 		bl	strcat	@
1277:src/main.c    **** 
1278:src/main.c    **** 
1279:src/main.c    ****       strcat((char *)buffer,"}}");
 1660              		.loc 2 1279 0
 1661 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1662 0078 1800     		movs	r0, r3	@, tmp143
ARM GAS  /tmp/ccvvhbBy.s 			page 71


 1663 007a FFF7FEFF 		bl	strlen	@
 1664 007e 0300     		movs	r3, r0	@ tmp144,
 1665 0080 1A00     		movs	r2, r3	@ D.7218, tmp145
 1666 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1667 0084 9A18     		adds	r2, r3, r2	@ D.7219, tmp146, D.7218
 1668 0086 094B     		ldr	r3, .L77+16	@ tmp147,
 1669 0088 1000     		movs	r0, r2	@ tmp148, D.7219
 1670 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1671 008c 0323     		movs	r3, #3	@ tmp150,
 1672 008e 1A00     		movs	r2, r3	@, tmp150
 1673 0090 FFF7FEFF 		bl	memcpy	@
1280:src/main.c    **** 
1281:src/main.c    ****       return;
 1674              		.loc 2 1281 0
 1675 0094 C046     		nop
1282:src/main.c    **** }
 1676              		.loc 2 1282 0
 1677 0096 17B0     		add	sp, sp, #92	@,,
 1678              		@ sp needed	@
 1679 0098 00BD     		pop	{pc}
 1680              	.L78:
 1681 009a C046     		.align	2
 1682              	.L77:
 1683 009c 28010000 		.word	.LC48
 1684 00a0 40010000 		.word	.LC50
 1685 00a4 5C010000 		.word	.LC52
 1686 00a8 74010000 		.word	.LC54
 1687 00ac 8C010000 		.word	.LC56
 1688              		.cfi_endproc
 1689              	.LFE21:
 1690              		.size	prepare_json_pkt, .-prepare_json_pkt
 1691              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1692              		.align	2
 1693              		.global	TimingDelay_Decrement
 1694              		.code	16
 1695              		.thumb_func
 1696              		.type	TimingDelay_Decrement, %function
 1697              	TimingDelay_Decrement:
 1698              	.LFB22:
1283:src/main.c    **** 
1284:src/main.c    **** void TimingDelay_Decrement(void)
1285:src/main.c    **** {
 1699              		.loc 2 1285 0
 1700              		.cfi_startproc
 1701 0000 10B5     		push	{r4, lr}	@
 1702              	.LCFI8:
 1703              		.cfi_def_cfa_offset 8
 1704              		.cfi_offset 4, -8
 1705              		.cfi_offset 14, -4
1286:src/main.c    **** 	if (wait_ms_var)
 1706              		.loc 2 1286 0
 1707 0002 324B     		ldr	r3, .L88	@ tmp134,
 1708 0004 1B88     		ldrh	r3, [r3]	@ tmp135, wait_ms_var
 1709 0006 9BB2     		uxth	r3, r3	@ D.7231, tmp135
 1710 0008 002B     		cmp	r3, #0	@ D.7231,
 1711 000a 06D0     		beq	.L80	@,
1287:src/main.c    **** 		wait_ms_var--;
ARM GAS  /tmp/ccvvhbBy.s 			page 72


 1712              		.loc 2 1287 0
 1713 000c 2F4B     		ldr	r3, .L88	@ tmp136,
 1714 000e 1B88     		ldrh	r3, [r3]	@ tmp137, wait_ms_var
 1715 0010 9BB2     		uxth	r3, r3	@ D.7231, tmp137
 1716 0012 013B     		subs	r3, r3, #1	@ tmp138,
 1717 0014 9AB2     		uxth	r2, r3	@ D.7231, tmp138
 1718 0016 2D4B     		ldr	r3, .L88	@ tmp139,
 1719 0018 1A80     		strh	r2, [r3]	@ tmp140, wait_ms_var
 1720              	.L80:
1288:src/main.c    **** 
1289:src/main.c    **** 	if (timer_standby)
 1721              		.loc 2 1289 0
 1722 001a 2D4B     		ldr	r3, .L88+4	@ tmp141,
 1723 001c 1B88     		ldrh	r3, [r3]	@ tmp142, timer_standby
 1724 001e 9BB2     		uxth	r3, r3	@ D.7231, tmp142
 1725 0020 002B     		cmp	r3, #0	@ D.7231,
 1726 0022 06D0     		beq	.L81	@,
1290:src/main.c    **** 		timer_standby--;
 1727              		.loc 2 1290 0
 1728 0024 2A4B     		ldr	r3, .L88+4	@ tmp143,
 1729 0026 1B88     		ldrh	r3, [r3]	@ tmp144, timer_standby
 1730 0028 9BB2     		uxth	r3, r3	@ D.7231, tmp144
 1731 002a 013B     		subs	r3, r3, #1	@ tmp145,
 1732 002c 9AB2     		uxth	r2, r3	@ D.7231, tmp145
 1733 002e 284B     		ldr	r3, .L88+4	@ tmp146,
 1734 0030 1A80     		strh	r2, [r3]	@ tmp147, timer_standby
 1735              	.L81:
1291:src/main.c    **** 
1292:src/main.c    **** #ifdef USE_REDONDA_BASIC
1293:src/main.c    **** 	if (tt_take_photo_sample)
 1736              		.loc 2 1293 0
 1737 0032 284B     		ldr	r3, .L88+8	@ tmp148,
 1738 0034 1B88     		ldrh	r3, [r3]	@ tmp149, tt_take_photo_sample
 1739 0036 9BB2     		uxth	r3, r3	@ D.7231, tmp149
 1740 0038 002B     		cmp	r3, #0	@ D.7231,
 1741 003a 06D0     		beq	.L82	@,
1294:src/main.c    **** 		tt_take_photo_sample--;
 1742              		.loc 2 1294 0
 1743 003c 254B     		ldr	r3, .L88+8	@ tmp150,
 1744 003e 1B88     		ldrh	r3, [r3]	@ tmp151, tt_take_photo_sample
 1745 0040 9BB2     		uxth	r3, r3	@ D.7231, tmp151
 1746 0042 013B     		subs	r3, r3, #1	@ tmp152,
 1747 0044 9AB2     		uxth	r2, r3	@ D.7231, tmp152
 1748 0046 234B     		ldr	r3, .L88+8	@ tmp153,
 1749 0048 1A80     		strh	r2, [r3]	@ tmp154, tt_take_photo_sample
 1750              	.L82:
1295:src/main.c    **** 
1296:src/main.c    **** 	if (tt_relay_on_off)
 1751              		.loc 2 1296 0
 1752 004a 234B     		ldr	r3, .L88+12	@ tmp155,
 1753 004c 1B88     		ldrh	r3, [r3]	@ tmp156, tt_relay_on_off
 1754 004e 9BB2     		uxth	r3, r3	@ D.7231, tmp156
 1755 0050 002B     		cmp	r3, #0	@ D.7231,
 1756 0052 06D0     		beq	.L83	@,
1297:src/main.c    **** 		tt_relay_on_off--;
 1757              		.loc 2 1297 0
 1758 0054 204B     		ldr	r3, .L88+12	@ tmp157,
ARM GAS  /tmp/ccvvhbBy.s 			page 73


 1759 0056 1B88     		ldrh	r3, [r3]	@ tmp158, tt_relay_on_off
 1760 0058 9BB2     		uxth	r3, r3	@ D.7231, tmp158
 1761 005a 013B     		subs	r3, r3, #1	@ tmp159,
 1762 005c 9AB2     		uxth	r2, r3	@ D.7231, tmp159
 1763 005e 1E4B     		ldr	r3, .L88+12	@ tmp160,
 1764 0060 1A80     		strh	r2, [r3]	@ tmp161, tt_relay_on_off
 1765              	.L83:
1298:src/main.c    **** #endif
1299:src/main.c    **** 
1300:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1301:src/main.c    **** 	if (tt_take_temp_sample)
1302:src/main.c    **** 		tt_take_temp_sample--;
1303:src/main.c    **** #endif
1304:src/main.c    **** 
1305:src/main.c    **** 	if (take_temp_sample)
 1766              		.loc 2 1305 0
 1767 0062 1E4B     		ldr	r3, .L88+16	@ tmp162,
 1768 0064 1B88     		ldrh	r3, [r3]	@ tmp163, take_temp_sample
 1769 0066 9BB2     		uxth	r3, r3	@ D.7231, tmp163
 1770 0068 002B     		cmp	r3, #0	@ D.7231,
 1771 006a 06D0     		beq	.L84	@,
1306:src/main.c    **** 		take_temp_sample--;
 1772              		.loc 2 1306 0
 1773 006c 1B4B     		ldr	r3, .L88+16	@ tmp164,
 1774 006e 1B88     		ldrh	r3, [r3]	@ tmp165, take_temp_sample
 1775 0070 9BB2     		uxth	r3, r3	@ D.7231, tmp165
 1776 0072 013B     		subs	r3, r3, #1	@ tmp166,
 1777 0074 9AB2     		uxth	r2, r3	@ D.7231, tmp166
 1778 0076 194B     		ldr	r3, .L88+16	@ tmp167,
 1779 0078 1A80     		strh	r2, [r3]	@ tmp168, take_temp_sample
 1780              	.L84:
1307:src/main.c    **** 
1308:src/main.c    **** 	if (timer_meas)
 1781              		.loc 2 1308 0
 1782 007a 194B     		ldr	r3, .L88+20	@ tmp169,
 1783 007c 1B78     		ldrb	r3, [r3]	@ tmp170, timer_meas
 1784 007e DBB2     		uxtb	r3, r3	@ D.7232, tmp170
 1785 0080 002B     		cmp	r3, #0	@ D.7232,
 1786 0082 06D0     		beq	.L85	@,
1309:src/main.c    **** 		timer_meas--;
 1787              		.loc 2 1309 0
 1788 0084 164B     		ldr	r3, .L88+20	@ tmp171,
 1789 0086 1B78     		ldrb	r3, [r3]	@ tmp172, timer_meas
 1790 0088 DBB2     		uxtb	r3, r3	@ D.7232, tmp172
 1791 008a 013B     		subs	r3, r3, #1	@ tmp173,
 1792 008c DAB2     		uxtb	r2, r3	@ D.7232, tmp173
 1793 008e 144B     		ldr	r3, .L88+20	@ tmp174,
 1794 0090 1A70     		strb	r2, [r3]	@ tmp175, timer_meas
 1795              	.L85:
1310:src/main.c    **** 
1311:src/main.c    **** 	// //cuenta de a 1 minuto
1312:src/main.c    **** 	// if (secs > 59999)	//pasaron 1 min
1313:src/main.c    **** 	// {
1314:src/main.c    **** 	// 	minutes++;
1315:src/main.c    **** 	// 	secs = 0;
1316:src/main.c    **** 	// }
1317:src/main.c    **** 	// else
ARM GAS  /tmp/ccvvhbBy.s 			page 74


1318:src/main.c    **** 	// 	secs++;
1319:src/main.c    **** 	//
1320:src/main.c    **** 	// if (minutes > 60)
1321:src/main.c    **** 	// {
1322:src/main.c    **** 	// 	hours++;
1323:src/main.c    **** 	// 	minutes = 0;
1324:src/main.c    **** 	// }
1325:src/main.c    **** 
1326:src/main.c    **** #ifdef USE_MQTT_LIB
1327:src/main.c    **** 	//timer del MQTT
1328:src/main.c    **** 	SysTickIntHandler();
1329:src/main.c    **** #endif
1330:src/main.c    **** 
1331:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1332:src/main.c    **** 	if (usart1_mini_timeout)
 1796              		.loc 2 1332 0
 1797 0092 144B     		ldr	r3, .L88+24	@ tmp176,
 1798 0094 1B78     		ldrb	r3, [r3]	@ tmp177, usart1_mini_timeout
 1799 0096 DBB2     		uxtb	r3, r3	@ D.7232, tmp177
 1800 0098 002B     		cmp	r3, #0	@ D.7232,
 1801 009a 06D0     		beq	.L86	@,
1333:src/main.c    **** 		usart1_mini_timeout--;
 1802              		.loc 2 1333 0
 1803 009c 114B     		ldr	r3, .L88+24	@ tmp178,
 1804 009e 1B78     		ldrb	r3, [r3]	@ tmp179, usart1_mini_timeout
 1805 00a0 DBB2     		uxtb	r3, r3	@ D.7232, tmp179
 1806 00a2 013B     		subs	r3, r3, #1	@ tmp180,
 1807 00a4 DAB2     		uxtb	r2, r3	@ D.7232, tmp180
 1808 00a6 0F4B     		ldr	r3, .L88+24	@ tmp181,
 1809 00a8 1A70     		strb	r2, [r3]	@ tmp182, usart1_mini_timeout
 1810              	.L86:
1334:src/main.c    **** 	if (usart2_mini_timeout)
 1811              		.loc 2 1334 0
 1812 00aa 0F4B     		ldr	r3, .L88+28	@ tmp183,
 1813 00ac 1B78     		ldrb	r3, [r3]	@ tmp184, usart2_mini_timeout
 1814 00ae DBB2     		uxtb	r3, r3	@ D.7232, tmp184
 1815 00b0 002B     		cmp	r3, #0	@ D.7232,
 1816 00b2 06D0     		beq	.L87	@,
1335:src/main.c    **** 		usart2_mini_timeout--;
 1817              		.loc 2 1335 0
 1818 00b4 0C4B     		ldr	r3, .L88+28	@ tmp185,
 1819 00b6 1B78     		ldrb	r3, [r3]	@ tmp186, usart2_mini_timeout
 1820 00b8 DBB2     		uxtb	r3, r3	@ D.7232, tmp186
 1821 00ba 013B     		subs	r3, r3, #1	@ tmp187,
 1822 00bc DAB2     		uxtb	r2, r3	@ D.7232, tmp187
 1823 00be 0A4B     		ldr	r3, .L88+28	@ tmp188,
 1824 00c0 1A70     		strb	r2, [r3]	@ tmp189, usart2_mini_timeout
 1825              	.L87:
1336:src/main.c    **** #endif
1337:src/main.c    **** #ifdef USE_GPS
1338:src/main.c    **** 	GPSTimeoutCounters ();
1339:src/main.c    **** #endif
1340:src/main.c    **** 
1341:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1342:src/main.c    **** 	GSMTimeoutCounters ();
 1826              		.loc 2 1342 0
 1827 00c2 FFF7FEFF 		bl	GSMTimeoutCounters	@
ARM GAS  /tmp/ccvvhbBy.s 			page 75


1343:src/main.c    **** #endif
1344:src/main.c    **** }
 1828              		.loc 2 1344 0
 1829 00c6 C046     		nop
 1830              		@ sp needed	@
 1831 00c8 10BD     		pop	{r4, pc}
 1832              	.L89:
 1833 00ca C046     		.align	2
 1834              	.L88:
 1835 00cc 00000000 		.word	wait_ms_var
 1836 00d0 00000000 		.word	timer_standby
 1837 00d4 00000000 		.word	tt_take_photo_sample
 1838 00d8 00000000 		.word	tt_relay_on_off
 1839 00dc 00000000 		.word	take_temp_sample
 1840 00e0 00000000 		.word	timer_meas
 1841 00e4 00000000 		.word	usart1_mini_timeout
 1842 00e8 00000000 		.word	usart2_mini_timeout
 1843              		.cfi_endproc
 1844              	.LFE22:
 1845              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1846              		.text
 1847              	.Letext0:
 1848              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1849              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1850              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1851              		.file 6 "src/hard.h"
 1852              		.file 7 "src/flash_program.h"
 1853              		.file 8 "src/funcs_gsm.h"
 1854              		.section	.debug_info,"",%progbits
 1855              	.Ldebug_info0:
 1856 0000 600D0000 		.4byte	0xd60
 1857 0004 0200     		.2byte	0x2
 1858 0006 00000000 		.4byte	.Ldebug_abbrev0
 1859 000a 04       		.byte	0x4
 1860 000b 01       		.uleb128 0x1
 1861 000c 4A090000 		.4byte	.LASF197
 1862 0010 0C       		.byte	0xc
 1863 0011 2C090000 		.4byte	.LASF198
 1864 0015 6C070000 		.4byte	.LASF199
 1865 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1866 001d 00000000 		.4byte	0
 1867 0021 00000000 		.4byte	0
 1868 0025 00000000 		.4byte	.Ldebug_line0
 1869 0029 02       		.uleb128 0x2
 1870 002a AE050000 		.4byte	.LASF131
 1871 002e 01       		.byte	0x1
 1872 002f 06010000 		.4byte	0x106
 1873 0033 03       		.byte	0x3
 1874 0034 C7       		.byte	0xc7
 1875 0035 06010000 		.4byte	0x106
 1876 0039 03       		.uleb128 0x3
 1877 003a 45060000 		.4byte	.LASF0
 1878 003e 72       		.sleb128 -14
 1879 003f 03       		.uleb128 0x3
 1880 0040 FA090000 		.4byte	.LASF1
 1881 0044 73       		.sleb128 -13
 1882 0045 03       		.uleb128 0x3
ARM GAS  /tmp/ccvvhbBy.s 			page 76


 1883 0046 7C000000 		.4byte	.LASF2
 1884 004a 7B       		.sleb128 -5
 1885 004b 03       		.uleb128 0x3
 1886 004c 90010000 		.4byte	.LASF3
 1887 0050 7E       		.sleb128 -2
 1888 0051 03       		.uleb128 0x3
 1889 0052 06070000 		.4byte	.LASF4
 1890 0056 7F       		.sleb128 -1
 1891 0057 04       		.uleb128 0x4
 1892 0058 75040000 		.4byte	.LASF5
 1893 005c 00       		.byte	0
 1894 005d 04       		.uleb128 0x4
 1895 005e 3E050000 		.4byte	.LASF6
 1896 0062 01       		.byte	0x1
 1897 0063 04       		.uleb128 0x4
 1898 0064 C7050000 		.4byte	.LASF7
 1899 0068 02       		.byte	0x2
 1900 0069 04       		.uleb128 0x4
 1901 006a 06010000 		.4byte	.LASF8
 1902 006e 03       		.byte	0x3
 1903 006f 04       		.uleb128 0x4
 1904 0070 AC010000 		.4byte	.LASF9
 1905 0074 04       		.byte	0x4
 1906 0075 04       		.uleb128 0x4
 1907 0076 46010000 		.4byte	.LASF10
 1908 007a 05       		.byte	0x5
 1909 007b 04       		.uleb128 0x4
 1910 007c 46000000 		.4byte	.LASF11
 1911 0080 06       		.byte	0x6
 1912 0081 04       		.uleb128 0x4
 1913 0082 33000000 		.4byte	.LASF12
 1914 0086 07       		.byte	0x7
 1915 0087 04       		.uleb128 0x4
 1916 0088 03050000 		.4byte	.LASF13
 1917 008c 08       		.byte	0x8
 1918 008d 04       		.uleb128 0x4
 1919 008e A8030000 		.4byte	.LASF14
 1920 0092 09       		.byte	0x9
 1921 0093 04       		.uleb128 0x4
 1922 0094 D5070000 		.4byte	.LASF15
 1923 0098 0A       		.byte	0xa
 1924 0099 04       		.uleb128 0x4
 1925 009a A9060000 		.4byte	.LASF16
 1926 009e 0B       		.byte	0xb
 1927 009f 04       		.uleb128 0x4
 1928 00a0 58050000 		.4byte	.LASF17
 1929 00a4 0C       		.byte	0xc
 1930 00a5 04       		.uleb128 0x4
 1931 00a6 0B050000 		.4byte	.LASF18
 1932 00aa 0D       		.byte	0xd
 1933 00ab 04       		.uleb128 0x4
 1934 00ac 62060000 		.4byte	.LASF19
 1935 00b0 0E       		.byte	0xe
 1936 00b1 04       		.uleb128 0x4
 1937 00b2 53070000 		.4byte	.LASF20
 1938 00b6 0F       		.byte	0xf
 1939 00b7 04       		.uleb128 0x4
ARM GAS  /tmp/ccvvhbBy.s 			page 77


 1940 00b8 9E030000 		.4byte	.LASF21
 1941 00bc 10       		.byte	0x10
 1942 00bd 04       		.uleb128 0x4
 1943 00be F8070000 		.4byte	.LASF22
 1944 00c2 11       		.byte	0x11
 1945 00c3 04       		.uleb128 0x4
 1946 00c4 CA070000 		.4byte	.LASF23
 1947 00c8 13       		.byte	0x13
 1948 00c9 04       		.uleb128 0x4
 1949 00ca DE030000 		.4byte	.LASF24
 1950 00ce 14       		.byte	0x14
 1951 00cf 04       		.uleb128 0x4
 1952 00d0 D8000000 		.4byte	.LASF25
 1953 00d4 15       		.byte	0x15
 1954 00d5 04       		.uleb128 0x4
 1955 00d6 92060000 		.4byte	.LASF26
 1956 00da 16       		.byte	0x16
 1957 00db 04       		.uleb128 0x4
 1958 00dc 86010000 		.4byte	.LASF27
 1959 00e0 17       		.byte	0x17
 1960 00e1 04       		.uleb128 0x4
 1961 00e2 2A070000 		.4byte	.LASF28
 1962 00e6 18       		.byte	0x18
 1963 00e7 04       		.uleb128 0x4
 1964 00e8 F0010000 		.4byte	.LASF29
 1965 00ec 19       		.byte	0x19
 1966 00ed 04       		.uleb128 0x4
 1967 00ee BD080000 		.4byte	.LASF30
 1968 00f2 1A       		.byte	0x1a
 1969 00f3 04       		.uleb128 0x4
 1970 00f4 15060000 		.4byte	.LASF31
 1971 00f8 1B       		.byte	0x1b
 1972 00f9 04       		.uleb128 0x4
 1973 00fa B6020000 		.4byte	.LASF32
 1974 00fe 1C       		.byte	0x1c
 1975 00ff 04       		.uleb128 0x4
 1976 0100 13070000 		.4byte	.LASF33
 1977 0104 1E       		.byte	0x1e
 1978 0105 00       		.byte	0
 1979 0106 05       		.uleb128 0x5
 1980 0107 01       		.byte	0x1
 1981 0108 06       		.byte	0x6
 1982 0109 20090000 		.4byte	.LASF36
 1983 010d 06       		.uleb128 0x6
 1984 010e 9D020000 		.4byte	.LASF34
 1985 0112 03       		.byte	0x3
 1986 0113 5F01     		.2byte	0x15f
 1987 0115 29000000 		.4byte	0x29
 1988 0119 07       		.uleb128 0x7
 1989 011a CB060000 		.4byte	.LASF35
 1990 011e 04       		.byte	0x4
 1991 011f 1D       		.byte	0x1d
 1992 0120 24010000 		.4byte	0x124
 1993 0124 05       		.uleb128 0x5
 1994 0125 01       		.byte	0x1
 1995 0126 08       		.byte	0x8
 1996 0127 06080000 		.4byte	.LASF37
ARM GAS  /tmp/ccvvhbBy.s 			page 78


 1997 012b 05       		.uleb128 0x5
 1998 012c 02       		.byte	0x2
 1999 012d 05       		.byte	0x5
 2000 012e 02060000 		.4byte	.LASF38
 2001 0132 07       		.uleb128 0x7
 2002 0133 43020000 		.4byte	.LASF39
 2003 0137 04       		.byte	0x4
 2004 0138 2B       		.byte	0x2b
 2005 0139 3D010000 		.4byte	0x13d
 2006 013d 05       		.uleb128 0x5
 2007 013e 02       		.byte	0x2
 2008 013f 07       		.byte	0x7
 2009 0140 37090000 		.4byte	.LASF40
 2010 0144 07       		.uleb128 0x7
 2011 0145 F4000000 		.4byte	.LASF41
 2012 0149 04       		.byte	0x4
 2013 014a 3F       		.byte	0x3f
 2014 014b 4F010000 		.4byte	0x14f
 2015 014f 05       		.uleb128 0x5
 2016 0150 04       		.byte	0x4
 2017 0151 05       		.byte	0x5
 2018 0152 0C060000 		.4byte	.LASF42
 2019 0156 07       		.uleb128 0x7
 2020 0157 1D080000 		.4byte	.LASF43
 2021 015b 04       		.byte	0x4
 2022 015c 41       		.byte	0x41
 2023 015d 61010000 		.4byte	0x161
 2024 0161 05       		.uleb128 0x5
 2025 0162 04       		.byte	0x4
 2026 0163 07       		.byte	0x7
 2027 0164 34070000 		.4byte	.LASF44
 2028 0168 05       		.uleb128 0x5
 2029 0169 08       		.byte	0x8
 2030 016a 05       		.byte	0x5
 2031 016b 67040000 		.4byte	.LASF45
 2032 016f 05       		.uleb128 0x5
 2033 0170 08       		.byte	0x8
 2034 0171 07       		.byte	0x7
 2035 0172 FA010000 		.4byte	.LASF46
 2036 0176 08       		.uleb128 0x8
 2037 0177 04       		.byte	0x4
 2038 0178 05       		.byte	0x5
 2039 0179 696E7400 		.ascii	"int\000"
 2040 017d 05       		.uleb128 0x5
 2041 017e 04       		.byte	0x4
 2042 017f 07       		.byte	0x7
 2043 0180 C6000000 		.4byte	.LASF47
 2044 0184 07       		.uleb128 0x7
 2045 0185 E9030000 		.4byte	.LASF48
 2046 0189 05       		.byte	0x5
 2047 018a 14       		.byte	0x14
 2048 018b 19010000 		.4byte	0x119
 2049 018f 07       		.uleb128 0x7
 2050 0190 96050000 		.4byte	.LASF49
 2051 0194 05       		.byte	0x5
 2052 0195 1A       		.byte	0x1a
 2053 0196 32010000 		.4byte	0x132
ARM GAS  /tmp/ccvvhbBy.s 			page 79


 2054 019a 07       		.uleb128 0x7
 2055 019b B0070000 		.4byte	.LASF50
 2056 019f 05       		.byte	0x5
 2057 01a0 1F       		.byte	0x1f
 2058 01a1 44010000 		.4byte	0x144
 2059 01a5 07       		.uleb128 0x7
 2060 01a6 C5010000 		.4byte	.LASF51
 2061 01aa 05       		.byte	0x5
 2062 01ab 20       		.byte	0x20
 2063 01ac 56010000 		.4byte	0x156
 2064 01b0 09       		.uleb128 0x9
 2065 01b1 2003     		.2byte	0x320
 2066 01b3 01       		.byte	0x1
 2067 01b4 71       		.byte	0x71
 2068 01b5 4D020000 		.4byte	0x24d
 2069 01b9 0A       		.uleb128 0xa
 2070 01ba D7010000 		.4byte	.LASF52
 2071 01be 01       		.byte	0x1
 2072 01bf 73       		.byte	0x73
 2073 01c0 64020000 		.4byte	0x264
 2074 01c4 02       		.byte	0x2
 2075 01c5 23       		.byte	0x23
 2076 01c6 00       		.uleb128 0
 2077 01c7 0A       		.uleb128 0xa
 2078 01c8 D0050000 		.4byte	.LASF53
 2079 01cc 01       		.byte	0x1
 2080 01cd 74       		.byte	0x74
 2081 01ce 69020000 		.4byte	0x269
 2082 01d2 02       		.byte	0x2
 2083 01d3 23       		.byte	0x23
 2084 01d4 04       		.uleb128 0x4
 2085 01d5 0A       		.uleb128 0xa
 2086 01d6 AD080000 		.4byte	.LASF54
 2087 01da 01       		.byte	0x1
 2088 01db 75       		.byte	0x75
 2089 01dc 79020000 		.4byte	0x279
 2090 01e0 03       		.byte	0x3
 2091 01e1 23       		.byte	0x23
 2092 01e2 8001     		.uleb128 0x80
 2093 01e4 0A       		.uleb128 0xa
 2094 01e5 E7010000 		.4byte	.LASF55
 2095 01e9 01       		.byte	0x1
 2096 01ea 76       		.byte	0x76
 2097 01eb 69020000 		.4byte	0x269
 2098 01ef 03       		.byte	0x3
 2099 01f0 23       		.byte	0x23
 2100 01f1 8401     		.uleb128 0x84
 2101 01f3 0A       		.uleb128 0xa
 2102 01f4 130A0000 		.4byte	.LASF56
 2103 01f8 01       		.byte	0x1
 2104 01f9 77       		.byte	0x77
 2105 01fa 7E020000 		.4byte	0x27e
 2106 01fe 03       		.byte	0x3
 2107 01ff 23       		.byte	0x23
 2108 0200 8002     		.uleb128 0x100
 2109 0202 0A       		.uleb128 0xa
 2110 0203 E4050000 		.4byte	.LASF57
ARM GAS  /tmp/ccvvhbBy.s 			page 80


 2111 0207 01       		.byte	0x1
 2112 0208 78       		.byte	0x78
 2113 0209 69020000 		.4byte	0x269
 2114 020d 03       		.byte	0x3
 2115 020e 23       		.byte	0x23
 2116 020f 8402     		.uleb128 0x104
 2117 0211 0A       		.uleb128 0xa
 2118 0212 53050000 		.4byte	.LASF58
 2119 0216 01       		.byte	0x1
 2120 0217 79       		.byte	0x79
 2121 0218 83020000 		.4byte	0x283
 2122 021c 03       		.byte	0x3
 2123 021d 23       		.byte	0x23
 2124 021e 8003     		.uleb128 0x180
 2125 0220 0A       		.uleb128 0xa
 2126 0221 EE050000 		.4byte	.LASF59
 2127 0225 01       		.byte	0x1
 2128 0226 7A       		.byte	0x7a
 2129 0227 69020000 		.4byte	0x269
 2130 022b 03       		.byte	0x3
 2131 022c 23       		.byte	0x23
 2132 022d 8403     		.uleb128 0x184
 2133 022f 0A       		.uleb128 0xa
 2134 0230 F8050000 		.4byte	.LASF60
 2135 0234 01       		.byte	0x1
 2136 0235 7B       		.byte	0x7b
 2137 0236 88020000 		.4byte	0x288
 2138 023a 03       		.byte	0x3
 2139 023b 23       		.byte	0x23
 2140 023c 8004     		.uleb128 0x200
 2141 023e 0B       		.uleb128 0xb
 2142 023f 495000   		.ascii	"IP\000"
 2143 0242 01       		.byte	0x1
 2144 0243 7C       		.byte	0x7c
 2145 0244 A8020000 		.4byte	0x2a8
 2146 0248 03       		.byte	0x3
 2147 0249 23       		.byte	0x23
 2148 024a 8006     		.uleb128 0x300
 2149 024c 00       		.byte	0
 2150 024d 0C       		.uleb128 0xc
 2151 024e A5010000 		.4byte	0x1a5
 2152 0252 5D020000 		.4byte	0x25d
 2153 0256 0D       		.uleb128 0xd
 2154 0257 5D020000 		.4byte	0x25d
 2155 025b 00       		.byte	0
 2156 025c 00       		.byte	0
 2157 025d 05       		.uleb128 0x5
 2158 025e 04       		.byte	0x4
 2159 025f 07       		.byte	0x7
 2160 0260 1C070000 		.4byte	.LASF61
 2161 0264 0E       		.uleb128 0xe
 2162 0265 4D020000 		.4byte	0x24d
 2163 0269 0C       		.uleb128 0xc
 2164 026a A5010000 		.4byte	0x1a5
 2165 026e 79020000 		.4byte	0x279
 2166 0272 0D       		.uleb128 0xd
 2167 0273 5D020000 		.4byte	0x25d
ARM GAS  /tmp/ccvvhbBy.s 			page 81


 2168 0277 1E       		.byte	0x1e
 2169 0278 00       		.byte	0
 2170 0279 0E       		.uleb128 0xe
 2171 027a 4D020000 		.4byte	0x24d
 2172 027e 0E       		.uleb128 0xe
 2173 027f 4D020000 		.4byte	0x24d
 2174 0283 0E       		.uleb128 0xe
 2175 0284 4D020000 		.4byte	0x24d
 2176 0288 0C       		.uleb128 0xc
 2177 0289 A5010000 		.4byte	0x1a5
 2178 028d 98020000 		.4byte	0x298
 2179 0291 0D       		.uleb128 0xd
 2180 0292 5D020000 		.4byte	0x25d
 2181 0296 3F       		.byte	0x3f
 2182 0297 00       		.byte	0
 2183 0298 0C       		.uleb128 0xc
 2184 0299 A5010000 		.4byte	0x1a5
 2185 029d A8020000 		.4byte	0x2a8
 2186 02a1 0D       		.uleb128 0xd
 2187 02a2 5D020000 		.4byte	0x25d
 2188 02a6 07       		.byte	0x7
 2189 02a7 00       		.byte	0
 2190 02a8 0E       		.uleb128 0xe
 2191 02a9 98020000 		.4byte	0x298
 2192 02ad 07       		.uleb128 0x7
 2193 02ae D5060000 		.4byte	.LASF62
 2194 02b2 01       		.byte	0x1
 2195 02b3 7D       		.byte	0x7d
 2196 02b4 B0010000 		.4byte	0x1b0
 2197 02b8 0F       		.uleb128 0xf
 2198 02b9 34       		.byte	0x34
 2199 02ba 01       		.byte	0x1
 2200 02bb 86       		.byte	0x86
 2201 02bc 5B030000 		.4byte	0x35b
 2202 02c0 0A       		.uleb128 0xa
 2203 02c1 C2020000 		.4byte	.LASF63
 2204 02c5 01       		.byte	0x1
 2205 02c6 88       		.byte	0x88
 2206 02c7 60030000 		.4byte	0x360
 2207 02cb 02       		.byte	0x2
 2208 02cc 23       		.byte	0x23
 2209 02cd 00       		.uleb128 0
 2210 02ce 0A       		.uleb128 0xa
 2211 02cf 25070000 		.4byte	.LASF64
 2212 02d3 01       		.byte	0x1
 2213 02d4 89       		.byte	0x89
 2214 02d5 5B030000 		.4byte	0x35b
 2215 02d9 02       		.byte	0x2
 2216 02da 23       		.byte	0x23
 2217 02db 04       		.uleb128 0x4
 2218 02dc 0A       		.uleb128 0xa
 2219 02dd D0050000 		.4byte	.LASF53
 2220 02e1 01       		.byte	0x1
 2221 02e2 8A       		.byte	0x8a
 2222 02e3 A5010000 		.4byte	0x1a5
 2223 02e7 02       		.byte	0x2
 2224 02e8 23       		.byte	0x23
ARM GAS  /tmp/ccvvhbBy.s 			page 82


 2225 02e9 08       		.uleb128 0x8
 2226 02ea 0A       		.uleb128 0xa
 2227 02eb 87030000 		.4byte	.LASF65
 2228 02ef 01       		.byte	0x1
 2229 02f0 8B       		.byte	0x8b
 2230 02f1 5B030000 		.4byte	0x35b
 2231 02f5 02       		.byte	0x2
 2232 02f6 23       		.byte	0x23
 2233 02f7 0C       		.uleb128 0xc
 2234 02f8 0B       		.uleb128 0xb
 2235 02f9 53435200 		.ascii	"SCR\000"
 2236 02fd 01       		.byte	0x1
 2237 02fe 8C       		.byte	0x8c
 2238 02ff 5B030000 		.4byte	0x35b
 2239 0303 02       		.byte	0x2
 2240 0304 23       		.byte	0x23
 2241 0305 10       		.uleb128 0x10
 2242 0306 0B       		.uleb128 0xb
 2243 0307 43435200 		.ascii	"CCR\000"
 2244 030b 01       		.byte	0x1
 2245 030c 8D       		.byte	0x8d
 2246 030d 5B030000 		.4byte	0x35b
 2247 0311 02       		.byte	0x2
 2248 0312 23       		.byte	0x23
 2249 0313 14       		.uleb128 0x14
 2250 0314 0A       		.uleb128 0xa
 2251 0315 DA050000 		.4byte	.LASF66
 2252 0319 01       		.byte	0x1
 2253 031a 8E       		.byte	0x8e
 2254 031b A5010000 		.4byte	0x1a5
 2255 031f 02       		.byte	0x2
 2256 0320 23       		.byte	0x23
 2257 0321 18       		.uleb128 0x18
 2258 0322 0B       		.uleb128 0xb
 2259 0323 53485000 		.ascii	"SHP\000"
 2260 0327 01       		.byte	0x1
 2261 0328 8F       		.byte	0x8f
 2262 0329 75030000 		.4byte	0x375
 2263 032d 02       		.byte	0x2
 2264 032e 23       		.byte	0x23
 2265 032f 1C       		.uleb128 0x1c
 2266 0330 0A       		.uleb128 0xa
 2267 0331 7F040000 		.4byte	.LASF67
 2268 0335 01       		.byte	0x1
 2269 0336 90       		.byte	0x90
 2270 0337 5B030000 		.4byte	0x35b
 2271 033b 02       		.byte	0x2
 2272 033c 23       		.byte	0x23
 2273 033d 24       		.uleb128 0x24
 2274 033e 0A       		.uleb128 0xa
 2275 033f E4050000 		.4byte	.LASF57
 2276 0343 01       		.byte	0x1
 2277 0344 91       		.byte	0x91
 2278 0345 65030000 		.4byte	0x365
 2279 0349 02       		.byte	0x2
 2280 034a 23       		.byte	0x23
 2281 034b 28       		.uleb128 0x28
ARM GAS  /tmp/ccvvhbBy.s 			page 83


 2282 034c 0A       		.uleb128 0xa
 2283 034d 11020000 		.4byte	.LASF68
 2284 0351 01       		.byte	0x1
 2285 0352 92       		.byte	0x92
 2286 0353 5B030000 		.4byte	0x35b
 2287 0357 02       		.byte	0x2
 2288 0358 23       		.byte	0x23
 2289 0359 30       		.uleb128 0x30
 2290 035a 00       		.byte	0
 2291 035b 0E       		.uleb128 0xe
 2292 035c A5010000 		.4byte	0x1a5
 2293 0360 10       		.uleb128 0x10
 2294 0361 5B030000 		.4byte	0x35b
 2295 0365 0C       		.uleb128 0xc
 2296 0366 A5010000 		.4byte	0x1a5
 2297 036a 75030000 		.4byte	0x375
 2298 036e 0D       		.uleb128 0xd
 2299 036f 5D020000 		.4byte	0x25d
 2300 0373 01       		.byte	0x1
 2301 0374 00       		.byte	0
 2302 0375 0E       		.uleb128 0xe
 2303 0376 65030000 		.4byte	0x365
 2304 037a 07       		.uleb128 0x7
 2305 037b DF060000 		.4byte	.LASF69
 2306 037f 01       		.byte	0x1
 2307 0380 93       		.byte	0x93
 2308 0381 B8020000 		.4byte	0x2b8
 2309 0385 0F       		.uleb128 0xf
 2310 0386 10       		.byte	0x10
 2311 0387 01       		.byte	0x1
 2312 0388 FC       		.byte	0xfc
 2313 0389 C8030000 		.4byte	0x3c8
 2314 038d 0A       		.uleb128 0xa
 2315 038e 730A0000 		.4byte	.LASF70
 2316 0392 01       		.byte	0x1
 2317 0393 FE       		.byte	0xfe
 2318 0394 5B030000 		.4byte	0x35b
 2319 0398 02       		.byte	0x2
 2320 0399 23       		.byte	0x23
 2321 039a 00       		.uleb128 0
 2322 039b 0A       		.uleb128 0xa
 2323 039c D3000000 		.4byte	.LASF71
 2324 03a0 01       		.byte	0x1
 2325 03a1 FF       		.byte	0xff
 2326 03a2 5B030000 		.4byte	0x35b
 2327 03a6 02       		.byte	0x2
 2328 03a7 23       		.byte	0x23
 2329 03a8 04       		.uleb128 0x4
 2330 03a9 11       		.uleb128 0x11
 2331 03aa 56414C00 		.ascii	"VAL\000"
 2332 03ae 01       		.byte	0x1
 2333 03af 0001     		.2byte	0x100
 2334 03b1 5B030000 		.4byte	0x35b
 2335 03b5 02       		.byte	0x2
 2336 03b6 23       		.byte	0x23
 2337 03b7 08       		.uleb128 0x8
 2338 03b8 12       		.uleb128 0x12
ARM GAS  /tmp/ccvvhbBy.s 			page 84


 2339 03b9 19010000 		.4byte	.LASF72
 2340 03bd 01       		.byte	0x1
 2341 03be 0101     		.2byte	0x101
 2342 03c0 60030000 		.4byte	0x360
 2343 03c4 02       		.byte	0x2
 2344 03c5 23       		.byte	0x23
 2345 03c6 0C       		.uleb128 0xc
 2346 03c7 00       		.byte	0
 2347 03c8 06       		.uleb128 0x6
 2348 03c9 7D050000 		.4byte	.LASF73
 2349 03cd 01       		.byte	0x1
 2350 03ce 0201     		.2byte	0x102
 2351 03d0 85030000 		.4byte	0x385
 2352 03d4 13       		.uleb128 0x13
 2353 03d5 44       		.byte	0x44
 2354 03d6 03       		.byte	0x3
 2355 03d7 7C01     		.2byte	0x17c
 2356 03d9 9E040000 		.4byte	0x49e
 2357 03dd 11       		.uleb128 0x11
 2358 03de 49535200 		.ascii	"ISR\000"
 2359 03e2 03       		.byte	0x3
 2360 03e3 7E01     		.2byte	0x17e
 2361 03e5 5B030000 		.4byte	0x35b
 2362 03e9 02       		.byte	0x2
 2363 03ea 23       		.byte	0x23
 2364 03eb 00       		.uleb128 0
 2365 03ec 11       		.uleb128 0x11
 2366 03ed 49455200 		.ascii	"IER\000"
 2367 03f1 03       		.byte	0x3
 2368 03f2 7F01     		.2byte	0x17f
 2369 03f4 5B030000 		.4byte	0x35b
 2370 03f8 02       		.byte	0x2
 2371 03f9 23       		.byte	0x23
 2372 03fa 04       		.uleb128 0x4
 2373 03fb 11       		.uleb128 0x11
 2374 03fc 435200   		.ascii	"CR\000"
 2375 03ff 03       		.byte	0x3
 2376 0400 8001     		.2byte	0x180
 2377 0402 5B030000 		.4byte	0x35b
 2378 0406 02       		.byte	0x2
 2379 0407 23       		.byte	0x23
 2380 0408 08       		.uleb128 0x8
 2381 0409 12       		.uleb128 0x12
 2382 040a 47050000 		.4byte	.LASF74
 2383 040e 03       		.byte	0x3
 2384 040f 8101     		.2byte	0x181
 2385 0411 5B030000 		.4byte	0x35b
 2386 0415 02       		.byte	0x2
 2387 0416 23       		.byte	0x23
 2388 0417 0C       		.uleb128 0xc
 2389 0418 12       		.uleb128 0x12
 2390 0419 4D050000 		.4byte	.LASF75
 2391 041d 03       		.byte	0x3
 2392 041e 8201     		.2byte	0x182
 2393 0420 5B030000 		.4byte	0x35b
 2394 0424 02       		.byte	0x2
 2395 0425 23       		.byte	0x23
ARM GAS  /tmp/ccvvhbBy.s 			page 85


 2396 0426 10       		.uleb128 0x10
 2397 0427 12       		.uleb128 0x12
 2398 0428 0D030000 		.4byte	.LASF76
 2399 042c 03       		.byte	0x3
 2400 042d 8301     		.2byte	0x183
 2401 042f 5B030000 		.4byte	0x35b
 2402 0433 02       		.byte	0x2
 2403 0434 23       		.byte	0x23
 2404 0435 14       		.uleb128 0x14
 2405 0436 12       		.uleb128 0x12
 2406 0437 DA050000 		.4byte	.LASF66
 2407 043b 03       		.byte	0x3
 2408 043c 8401     		.2byte	0x184
 2409 043e A5010000 		.4byte	0x1a5
 2410 0442 02       		.byte	0x2
 2411 0443 23       		.byte	0x23
 2412 0444 18       		.uleb128 0x18
 2413 0445 12       		.uleb128 0x12
 2414 0446 E4050000 		.4byte	.LASF57
 2415 044a 03       		.byte	0x3
 2416 044b 8501     		.2byte	0x185
 2417 044d A5010000 		.4byte	0x1a5
 2418 0451 02       		.byte	0x2
 2419 0452 23       		.byte	0x23
 2420 0453 1C       		.uleb128 0x1c
 2421 0454 11       		.uleb128 0x11
 2422 0455 545200   		.ascii	"TR\000"
 2423 0458 03       		.byte	0x3
 2424 0459 8601     		.2byte	0x186
 2425 045b 5B030000 		.4byte	0x35b
 2426 045f 02       		.byte	0x2
 2427 0460 23       		.byte	0x23
 2428 0461 20       		.uleb128 0x20
 2429 0462 12       		.uleb128 0x12
 2430 0463 EE050000 		.4byte	.LASF59
 2431 0467 03       		.byte	0x3
 2432 0468 8701     		.2byte	0x187
 2433 046a A5010000 		.4byte	0x1a5
 2434 046e 02       		.byte	0x2
 2435 046f 23       		.byte	0x23
 2436 0470 24       		.uleb128 0x24
 2437 0471 12       		.uleb128 0x12
 2438 0472 84020000 		.4byte	.LASF77
 2439 0476 03       		.byte	0x3
 2440 0477 8801     		.2byte	0x188
 2441 0479 5B030000 		.4byte	0x35b
 2442 047d 02       		.byte	0x2
 2443 047e 23       		.byte	0x23
 2444 047f 28       		.uleb128 0x28
 2445 0480 12       		.uleb128 0x12
 2446 0481 F8050000 		.4byte	.LASF60
 2447 0485 03       		.byte	0x3
 2448 0486 8901     		.2byte	0x189
 2449 0488 9E040000 		.4byte	0x49e
 2450 048c 02       		.byte	0x2
 2451 048d 23       		.byte	0x23
 2452 048e 2C       		.uleb128 0x2c
ARM GAS  /tmp/ccvvhbBy.s 			page 86


 2453 048f 11       		.uleb128 0x11
 2454 0490 445200   		.ascii	"DR\000"
 2455 0493 03       		.byte	0x3
 2456 0494 8A01     		.2byte	0x18a
 2457 0496 5B030000 		.4byte	0x35b
 2458 049a 02       		.byte	0x2
 2459 049b 23       		.byte	0x23
 2460 049c 40       		.uleb128 0x40
 2461 049d 00       		.byte	0
 2462 049e 0C       		.uleb128 0xc
 2463 049f A5010000 		.4byte	0x1a5
 2464 04a3 AE040000 		.4byte	0x4ae
 2465 04a7 0D       		.uleb128 0xd
 2466 04a8 5D020000 		.4byte	0x25d
 2467 04ac 04       		.byte	0x4
 2468 04ad 00       		.byte	0
 2469 04ae 06       		.uleb128 0x6
 2470 04af 5B040000 		.4byte	.LASF78
 2471 04b3 03       		.byte	0x3
 2472 04b4 8B01     		.2byte	0x18b
 2473 04b6 D4030000 		.4byte	0x3d4
 2474 04ba 0E       		.uleb128 0xe
 2475 04bb 8F010000 		.4byte	0x18f
 2476 04bf 13       		.uleb128 0x13
 2477 04c0 2C       		.byte	0x2c
 2478 04c1 03       		.byte	0x3
 2479 04c2 6902     		.2byte	0x269
 2480 04c4 9B050000 		.4byte	0x59b
 2481 04c8 12       		.uleb128 0x12
 2482 04c9 7E020000 		.4byte	.LASF79
 2483 04cd 03       		.byte	0x3
 2484 04ce 6B02     		.2byte	0x26b
 2485 04d0 5B030000 		.4byte	0x35b
 2486 04d4 02       		.byte	0x2
 2487 04d5 23       		.byte	0x23
 2488 04d6 00       		.uleb128 0
 2489 04d7 12       		.uleb128 0x12
 2490 04d8 6F060000 		.4byte	.LASF80
 2491 04dc 03       		.byte	0x3
 2492 04dd 6C02     		.2byte	0x26c
 2493 04df BA040000 		.4byte	0x4ba
 2494 04e3 02       		.byte	0x2
 2495 04e4 23       		.byte	0x23
 2496 04e5 04       		.uleb128 0x4
 2497 04e6 12       		.uleb128 0x12
 2498 04e7 D0050000 		.4byte	.LASF53
 2499 04eb 03       		.byte	0x3
 2500 04ec 6D02     		.2byte	0x26d
 2501 04ee 8F010000 		.4byte	0x18f
 2502 04f2 02       		.byte	0x2
 2503 04f3 23       		.byte	0x23
 2504 04f4 06       		.uleb128 0x6
 2505 04f5 12       		.uleb128 0x12
 2506 04f6 75050000 		.4byte	.LASF81
 2507 04fa 03       		.byte	0x3
 2508 04fb 6E02     		.2byte	0x26e
 2509 04fd 5B030000 		.4byte	0x35b
ARM GAS  /tmp/ccvvhbBy.s 			page 87


 2510 0501 02       		.byte	0x2
 2511 0502 23       		.byte	0x23
 2512 0503 08       		.uleb128 0x8
 2513 0504 12       		.uleb128 0x12
 2514 0505 34030000 		.4byte	.LASF82
 2515 0509 03       		.byte	0x3
 2516 050a 6F02     		.2byte	0x26f
 2517 050c 5B030000 		.4byte	0x35b
 2518 0510 02       		.byte	0x2
 2519 0511 23       		.byte	0x23
 2520 0512 0C       		.uleb128 0xc
 2521 0513 11       		.uleb128 0x11
 2522 0514 49445200 		.ascii	"IDR\000"
 2523 0518 03       		.byte	0x3
 2524 0519 7002     		.2byte	0x270
 2525 051b BA040000 		.4byte	0x4ba
 2526 051f 02       		.byte	0x2
 2527 0520 23       		.byte	0x23
 2528 0521 10       		.uleb128 0x10
 2529 0522 12       		.uleb128 0x12
 2530 0523 DA050000 		.4byte	.LASF66
 2531 0527 03       		.byte	0x3
 2532 0528 7102     		.2byte	0x271
 2533 052a 8F010000 		.4byte	0x18f
 2534 052e 02       		.byte	0x2
 2535 052f 23       		.byte	0x23
 2536 0530 12       		.uleb128 0x12
 2537 0531 11       		.uleb128 0x11
 2538 0532 4F445200 		.ascii	"ODR\000"
 2539 0536 03       		.byte	0x3
 2540 0537 7202     		.2byte	0x272
 2541 0539 BA040000 		.4byte	0x4ba
 2542 053d 02       		.byte	0x2
 2543 053e 23       		.byte	0x23
 2544 053f 14       		.uleb128 0x14
 2545 0540 12       		.uleb128 0x12
 2546 0541 E4050000 		.4byte	.LASF57
 2547 0545 03       		.byte	0x3
 2548 0546 7302     		.2byte	0x273
 2549 0548 8F010000 		.4byte	0x18f
 2550 054c 02       		.byte	0x2
 2551 054d 23       		.byte	0x23
 2552 054e 16       		.uleb128 0x16
 2553 054f 12       		.uleb128 0x12
 2554 0550 41000000 		.4byte	.LASF83
 2555 0554 03       		.byte	0x3
 2556 0555 7402     		.2byte	0x274
 2557 0557 5B030000 		.4byte	0x35b
 2558 055b 02       		.byte	0x2
 2559 055c 23       		.byte	0x23
 2560 055d 18       		.uleb128 0x18
 2561 055e 12       		.uleb128 0x12
 2562 055f 6E0A0000 		.4byte	.LASF84
 2563 0563 03       		.byte	0x3
 2564 0564 7502     		.2byte	0x275
 2565 0566 5B030000 		.4byte	0x35b
 2566 056a 02       		.byte	0x2
ARM GAS  /tmp/ccvvhbBy.s 			page 88


 2567 056b 23       		.byte	0x23
 2568 056c 1C       		.uleb128 0x1c
 2569 056d 11       		.uleb128 0x11
 2570 056e 41465200 		.ascii	"AFR\000"
 2571 0572 03       		.byte	0x3
 2572 0573 7602     		.2byte	0x276
 2573 0575 9B050000 		.4byte	0x59b
 2574 0579 02       		.byte	0x2
 2575 057a 23       		.byte	0x23
 2576 057b 20       		.uleb128 0x20
 2577 057c 11       		.uleb128 0x11
 2578 057d 42525200 		.ascii	"BRR\000"
 2579 0581 03       		.byte	0x3
 2580 0582 7702     		.2byte	0x277
 2581 0584 BA040000 		.4byte	0x4ba
 2582 0588 02       		.byte	0x2
 2583 0589 23       		.byte	0x23
 2584 058a 28       		.uleb128 0x28
 2585 058b 12       		.uleb128 0x12
 2586 058c EE050000 		.4byte	.LASF59
 2587 0590 03       		.byte	0x3
 2588 0591 7802     		.2byte	0x278
 2589 0593 8F010000 		.4byte	0x18f
 2590 0597 02       		.byte	0x2
 2591 0598 23       		.byte	0x23
 2592 0599 2A       		.uleb128 0x2a
 2593 059a 00       		.byte	0
 2594 059b 0E       		.uleb128 0xe
 2595 059c 65030000 		.4byte	0x365
 2596 05a0 06       		.uleb128 0x6
 2597 05a1 E8060000 		.4byte	.LASF85
 2598 05a5 03       		.byte	0x3
 2599 05a6 7902     		.2byte	0x279
 2600 05a8 BF040000 		.4byte	0x4bf
 2601 05ac 05       		.uleb128 0x5
 2602 05ad 08       		.byte	0x8
 2603 05ae 04       		.byte	0x4
 2604 05af 8A050000 		.4byte	.LASF86
 2605 05b3 05       		.uleb128 0x5
 2606 05b4 01       		.byte	0x1
 2607 05b5 08       		.byte	0x8
 2608 05b6 5C030000 		.4byte	.LASF87
 2609 05ba 0C       		.uleb128 0xc
 2610 05bb 3D010000 		.4byte	0x13d
 2611 05bf CA050000 		.4byte	0x5ca
 2612 05c3 0D       		.uleb128 0xd
 2613 05c4 5D020000 		.4byte	0x25d
 2614 05c8 02       		.byte	0x2
 2615 05c9 00       		.byte	0
 2616 05ca 0C       		.uleb128 0xc
 2617 05cb B3050000 		.4byte	0x5b3
 2618 05cf DA050000 		.4byte	0x5da
 2619 05d3 0D       		.uleb128 0xd
 2620 05d4 5D020000 		.4byte	0x25d
 2621 05d8 17       		.byte	0x17
 2622 05d9 00       		.byte	0
 2623 05da 14       		.uleb128 0x14
ARM GAS  /tmp/ccvvhbBy.s 			page 89


 2624 05db 01       		.byte	0x1
 2625 05dc 24010000 		.4byte	0x124
 2626 05e0 06       		.byte	0x6
 2627 05e1 BF       		.byte	0xbf
 2628 05e2 23060000 		.4byte	0x623
 2629 05e6 04       		.uleb128 0x4
 2630 05e7 C5040000 		.4byte	.LASF88
 2631 05eb 00       		.byte	0
 2632 05ec 04       		.uleb128 0x4
 2633 05ed 9D060000 		.4byte	.LASF89
 2634 05f1 01       		.byte	0x1
 2635 05f2 04       		.uleb128 0x4
 2636 05f3 12030000 		.4byte	.LASF90
 2637 05f7 02       		.byte	0x2
 2638 05f8 04       		.uleb128 0x4
 2639 05f9 4E020000 		.4byte	.LASF91
 2640 05fd 03       		.byte	0x3
 2641 05fe 04       		.uleb128 0x4
 2642 05ff 66020000 		.4byte	.LASF92
 2643 0603 04       		.byte	0x4
 2644 0604 04       		.uleb128 0x4
 2645 0605 14080000 		.4byte	.LASF93
 2646 0609 05       		.byte	0x5
 2647 060a 04       		.uleb128 0x4
 2648 060b 99040000 		.4byte	.LASF94
 2649 060f 06       		.byte	0x6
 2650 0610 04       		.uleb128 0x4
 2651 0611 CF040000 		.4byte	.LASF95
 2652 0615 07       		.byte	0x7
 2653 0616 04       		.uleb128 0x4
 2654 0617 F1030000 		.4byte	.LASF96
 2655 061b 08       		.byte	0x8
 2656 061c 04       		.uleb128 0x4
 2657 061d 40040000 		.4byte	.LASF97
 2658 0621 09       		.byte	0x9
 2659 0622 00       		.byte	0
 2660 0623 07       		.uleb128 0x7
 2661 0624 D1030000 		.4byte	.LASF98
 2662 0628 06       		.byte	0x6
 2663 0629 CD       		.byte	0xcd
 2664 062a DA050000 		.4byte	0x5da
 2665 062e 14       		.uleb128 0x14
 2666 062f 01       		.byte	0x1
 2667 0630 24010000 		.4byte	0x124
 2668 0634 06       		.byte	0x6
 2669 0635 D1       		.byte	0xd1
 2670 0636 65060000 		.4byte	0x665
 2671 063a 04       		.uleb128 0x4
 2672 063b 5E000000 		.4byte	.LASF99
 2673 063f 00       		.byte	0
 2674 0640 04       		.uleb128 0x4
 2675 0641 6D000000 		.4byte	.LASF100
 2676 0645 01       		.byte	0x1
 2677 0646 04       		.uleb128 0x4
 2678 0647 F5060000 		.4byte	.LASF101
 2679 064b 02       		.byte	0x2
 2680 064c 04       		.uleb128 0x4
ARM GAS  /tmp/ccvvhbBy.s 			page 90


 2681 064d 490A0000 		.4byte	.LASF102
 2682 0651 03       		.byte	0x3
 2683 0652 04       		.uleb128 0x4
 2684 0653 82060000 		.4byte	.LASF103
 2685 0657 04       		.byte	0x4
 2686 0658 04       		.uleb128 0x4
 2687 0659 B5010000 		.4byte	.LASF104
 2688 065d 05       		.byte	0x5
 2689 065e 04       		.uleb128 0x4
 2690 065f B5000000 		.4byte	.LASF105
 2691 0663 06       		.byte	0x6
 2692 0664 00       		.byte	0
 2693 0665 07       		.uleb128 0x7
 2694 0666 28080000 		.4byte	.LASF106
 2695 066a 06       		.byte	0x6
 2696 066b DA       		.byte	0xda
 2697 066c 2E060000 		.4byte	0x62e
 2698 0670 15       		.uleb128 0x15
 2699 0671 AE040000 		.4byte	.LASF200
 2700 0675 54       		.byte	0x54
 2701 0676 07       		.byte	0x7
 2702 0677 36       		.byte	0x36
 2703 0678 ED060000 		.4byte	0x6ed
 2704 067c 0A       		.uleb128 0xa
 2705 067d BA050000 		.4byte	.LASF107
 2706 0681 07       		.byte	0x7
 2707 0682 38       		.byte	0x38
 2708 0683 CA050000 		.4byte	0x5ca
 2709 0687 02       		.byte	0x2
 2710 0688 23       		.byte	0x23
 2711 0689 00       		.uleb128 0
 2712 068a 0A       		.uleb128 0xa
 2713 068b 1F010000 		.4byte	.LASF108
 2714 068f 07       		.byte	0x7
 2715 0690 39       		.byte	0x39
 2716 0691 CA050000 		.4byte	0x5ca
 2717 0695 02       		.byte	0x2
 2718 0696 23       		.byte	0x23
 2719 0697 18       		.uleb128 0x18
 2720 0698 0A       		.uleb128 0xa
 2721 0699 1D0A0000 		.4byte	.LASF109
 2722 069d 07       		.byte	0x7
 2723 069e 3A       		.byte	0x3a
 2724 069f CA050000 		.4byte	0x5ca
 2725 06a3 02       		.byte	0x2
 2726 06a4 23       		.byte	0x23
 2727 06a5 30       		.uleb128 0x30
 2728 06a6 0A       		.uleb128 0xa
 2729 06a7 7F080000 		.4byte	.LASF110
 2730 06ab 07       		.byte	0x7
 2731 06ac 3C       		.byte	0x3c
 2732 06ad 7D010000 		.4byte	0x17d
 2733 06b1 02       		.byte	0x2
 2734 06b2 23       		.byte	0x23
 2735 06b3 48       		.uleb128 0x48
 2736 06b4 0A       		.uleb128 0xa
 2737 06b5 46070000 		.4byte	.LASF111
ARM GAS  /tmp/ccvvhbBy.s 			page 91


 2738 06b9 07       		.byte	0x7
 2739 06ba 3D       		.byte	0x3d
 2740 06bb 7D010000 		.4byte	0x17d
 2741 06bf 02       		.byte	0x2
 2742 06c0 23       		.byte	0x23
 2743 06c1 4C       		.uleb128 0x4c
 2744 06c2 0A       		.uleb128 0xa
 2745 06c3 21060000 		.4byte	.LASF112
 2746 06c7 07       		.byte	0x7
 2747 06c8 3E       		.byte	0x3e
 2748 06c9 3D010000 		.4byte	0x13d
 2749 06cd 02       		.byte	0x2
 2750 06ce 23       		.byte	0x23
 2751 06cf 50       		.uleb128 0x50
 2752 06d0 0A       		.uleb128 0xa
 2753 06d1 A7020000 		.4byte	.LASF113
 2754 06d5 07       		.byte	0x7
 2755 06d6 40       		.byte	0x40
 2756 06d7 24010000 		.4byte	0x124
 2757 06db 02       		.byte	0x2
 2758 06dc 23       		.byte	0x23
 2759 06dd 52       		.uleb128 0x52
 2760 06de 0A       		.uleb128 0xa
 2761 06df 380A0000 		.4byte	.LASF114
 2762 06e3 07       		.byte	0x7
 2763 06e4 41       		.byte	0x41
 2764 06e5 24010000 		.4byte	0x124
 2765 06e9 02       		.byte	0x2
 2766 06ea 23       		.byte	0x23
 2767 06eb 53       		.uleb128 0x53
 2768 06ec 00       		.byte	0
 2769 06ed 07       		.uleb128 0x7
 2770 06ee 0D090000 		.4byte	.LASF115
 2771 06f2 07       		.byte	0x7
 2772 06f3 47       		.byte	0x47
 2773 06f4 70060000 		.4byte	0x670
 2774 06f8 14       		.uleb128 0x14
 2775 06f9 01       		.byte	0x1
 2776 06fa 24010000 		.4byte	0x124
 2777 06fe 08       		.byte	0x8
 2778 06ff 0A       		.byte	0xa
 2779 0700 5F070000 		.4byte	0x75f
 2780 0704 04       		.uleb128 0x4
 2781 0705 28020000 		.4byte	.LASF116
 2782 0709 00       		.byte	0
 2783 070a 04       		.uleb128 0x4
 2784 070b 31060000 		.4byte	.LASF117
 2785 070f 01       		.byte	0x1
 2786 0710 04       		.uleb128 0x4
 2787 0711 40030000 		.4byte	.LASF118
 2788 0715 02       		.byte	0x2
 2789 0716 04       		.uleb128 0x4
 2790 0717 48040000 		.4byte	.LASF119
 2791 071b 03       		.byte	0x3
 2792 071c 04       		.uleb128 0x4
 2793 071d 55080000 		.4byte	.LASF120
 2794 0721 04       		.byte	0x4
ARM GAS  /tmp/ccvvhbBy.s 			page 92


 2795 0722 04       		.uleb128 0x4
 2796 0723 8C000000 		.4byte	.LASF121
 2797 0727 05       		.byte	0x5
 2798 0728 04       		.uleb128 0x4
 2799 0729 6F010000 		.4byte	.LASF122
 2800 072d 06       		.byte	0x6
 2801 072e 04       		.uleb128 0x4
 2802 072f C7080000 		.4byte	.LASF123
 2803 0733 07       		.byte	0x7
 2804 0734 04       		.uleb128 0x4
 2805 0735 F4080000 		.4byte	.LASF124
 2806 0739 08       		.byte	0x8
 2807 073a 04       		.uleb128 0x4
 2808 073b 06000000 		.4byte	.LASF125
 2809 073f 09       		.byte	0x9
 2810 0740 04       		.uleb128 0x4
 2811 0741 6A080000 		.4byte	.LASF126
 2812 0745 0A       		.byte	0xa
 2813 0746 04       		.uleb128 0x4
 2814 0747 38080000 		.4byte	.LASF127
 2815 074b 0B       		.byte	0xb
 2816 074c 04       		.uleb128 0x4
 2817 074d DD020000 		.4byte	.LASF128
 2818 0751 0C       		.byte	0xc
 2819 0752 04       		.uleb128 0x4
 2820 0753 9C000000 		.4byte	.LASF129
 2821 0757 0D       		.byte	0xd
 2822 0758 04       		.uleb128 0x4
 2823 0759 61030000 		.4byte	.LASF130
 2824 075d 0E       		.byte	0xe
 2825 075e 00       		.byte	0
 2826 075f 16       		.uleb128 0x16
 2827 0760 2D050000 		.4byte	.LASF201
 2828 0764 01       		.byte	0x1
 2829 0765 7C03     		.2byte	0x37c
 2830 0767 01       		.byte	0x1
 2831 0768 00000000 		.4byte	.LFB16
 2832 076c EC000000 		.4byte	.LFE16
 2833 0770 00000000 		.4byte	.LLST0
 2834 0774 01       		.byte	0x1
 2835 0775 98070000 		.4byte	0x798
 2836 0779 17       		.uleb128 0x17
 2837 077a AE050000 		.4byte	.LASF131
 2838 077e 01       		.byte	0x1
 2839 077f 7C03     		.2byte	0x37c
 2840 0781 0D010000 		.4byte	0x10d
 2841 0785 02       		.byte	0x2
 2842 0786 91       		.byte	0x91
 2843 0787 6F       		.sleb128 -17
 2844 0788 17       		.uleb128 0x17
 2845 0789 59060000 		.4byte	.LASF132
 2846 078d 01       		.byte	0x1
 2847 078e 7C03     		.2byte	0x37c
 2848 0790 A5010000 		.4byte	0x1a5
 2849 0794 02       		.byte	0x2
 2850 0795 91       		.byte	0x91
 2851 0796 68       		.sleb128 -24
ARM GAS  /tmp/ccvvhbBy.s 			page 93


 2852 0797 00       		.byte	0
 2853 0798 18       		.uleb128 0x18
 2854 0799 FE020000 		.4byte	.LASF202
 2855 079d 01       		.byte	0x1
 2856 079e B803     		.2byte	0x3b8
 2857 07a0 01       		.byte	0x1
 2858 07a1 A5010000 		.4byte	0x1a5
 2859 07a5 00000000 		.4byte	.LFB18
 2860 07a9 48000000 		.4byte	.LFE18
 2861 07ad 2C000000 		.4byte	.LLST1
 2862 07b1 01       		.byte	0x1
 2863 07b2 C6070000 		.4byte	0x7c6
 2864 07b6 17       		.uleb128 0x17
 2865 07b7 3A030000 		.4byte	.LASF133
 2866 07bb 01       		.byte	0x1
 2867 07bc B803     		.2byte	0x3b8
 2868 07be A5010000 		.4byte	0x1a5
 2869 07c2 02       		.byte	0x2
 2870 07c3 91       		.byte	0x91
 2871 07c4 74       		.sleb128 -12
 2872 07c5 00       		.byte	0
 2873 07c6 19       		.uleb128 0x19
 2874 07c7 01       		.byte	0x1
 2875 07c8 F5090000 		.4byte	.LASF203
 2876 07cc 02       		.byte	0x2
 2877 07cd D4       		.byte	0xd4
 2878 07ce 01       		.byte	0x1
 2879 07cf 76010000 		.4byte	0x176
 2880 07d3 00000000 		.4byte	.LFB20
 2881 07d7 60070000 		.4byte	.LFE20
 2882 07db 58000000 		.4byte	.LLST2
 2883 07df 01       		.byte	0x1
 2884 07e0 0E090000 		.4byte	0x90e
 2885 07e4 1A       		.uleb128 0x1a
 2886 07e5 6900     		.ascii	"i\000"
 2887 07e7 02       		.byte	0x2
 2888 07e8 D6       		.byte	0xd6
 2889 07e9 24010000 		.4byte	0x124
 2890 07ed 02       		.byte	0x2
 2891 07ee 91       		.byte	0x91
 2892 07ef 6F       		.sleb128 -17
 2893 07f0 1B       		.uleb128 0x1b
 2894 07f1 696900   		.ascii	"ii\000"
 2895 07f4 02       		.byte	0x2
 2896 07f5 D6       		.byte	0xd6
 2897 07f6 24010000 		.4byte	0x124
 2898 07fa 1C       		.uleb128 0x1c
 2899 07fb 610A0000 		.4byte	.LASF134
 2900 07ff 02       		.byte	0x2
 2901 0800 D7       		.byte	0xd7
 2902 0801 24010000 		.4byte	0x124
 2903 0805 1C       		.uleb128 0x1c
 2904 0806 C6030000 		.4byte	.LASF135
 2905 080a 02       		.byte	0x2
 2906 080b D7       		.byte	0xd7
 2907 080c 24010000 		.4byte	0x124
 2908 0810 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccvvhbBy.s 			page 94


 2909 0811 4C080000 		.4byte	.LASF136
 2910 0815 02       		.byte	0x2
 2911 0816 D7       		.byte	0xd7
 2912 0817 24010000 		.4byte	0x124
 2913 081b 02       		.byte	0x2
 2914 081c 91       		.byte	0x91
 2915 081d 53       		.sleb128 -45
 2916 081e 1D       		.uleb128 0x1d
 2917 081f 180A0000 		.4byte	.LASF137
 2918 0823 02       		.byte	0x2
 2919 0824 D8       		.byte	0xd8
 2920 0825 24010000 		.4byte	0x124
 2921 0829 02       		.byte	0x2
 2922 082a 91       		.byte	0x91
 2923 082b 52       		.sleb128 -46
 2924 082c 1D       		.uleb128 0x1d
 2925 082d EE080000 		.4byte	.LASF138
 2926 0831 02       		.byte	0x2
 2927 0832 DC       		.byte	0xdc
 2928 0833 3D010000 		.4byte	0x13d
 2929 0837 02       		.byte	0x2
 2930 0838 91       		.byte	0x91
 2931 0839 6C       		.sleb128 -20
 2932 083a 1D       		.uleb128 0x1d
 2933 083b DA040000 		.4byte	.LASF139
 2934 083f 02       		.byte	0x2
 2935 0840 DC       		.byte	0xdc
 2936 0841 3D010000 		.4byte	0x13d
 2937 0845 02       		.byte	0x2
 2938 0846 91       		.byte	0x91
 2939 0847 6A       		.sleb128 -22
 2940 0848 1D       		.uleb128 0x1d
 2941 0849 15000000 		.4byte	.LASF140
 2942 084d 02       		.byte	0x2
 2943 084e DD       		.byte	0xdd
 2944 084f 7D010000 		.4byte	0x17d
 2945 0853 02       		.byte	0x2
 2946 0854 91       		.byte	0x91
 2947 0855 64       		.sleb128 -28
 2948 0856 1D       		.uleb128 0x1d
 2949 0857 9C010000 		.4byte	.LASF141
 2950 085b 02       		.byte	0x2
 2951 085c DF       		.byte	0xdf
 2952 085d 3D010000 		.4byte	0x13d
 2953 0861 02       		.byte	0x2
 2954 0862 91       		.byte	0x91
 2955 0863 62       		.sleb128 -30
 2956 0864 1D       		.uleb128 0x1d
 2957 0865 090A0000 		.4byte	.LASF142
 2958 0869 02       		.byte	0x2
 2959 086a E0       		.byte	0xe0
 2960 086b 7D010000 		.4byte	0x17d
 2961 086f 02       		.byte	0x2
 2962 0870 91       		.byte	0x91
 2963 0871 5C       		.sleb128 -36
 2964 0872 1D       		.uleb128 0x1d
 2965 0873 38020000 		.4byte	.LASF143
ARM GAS  /tmp/ccvvhbBy.s 			page 95


 2966 0877 02       		.byte	0x2
 2967 0878 E0       		.byte	0xe0
 2968 0879 7D010000 		.4byte	0x17d
 2969 087d 02       		.byte	0x2
 2970 087e 91       		.byte	0x91
 2971 087f 58       		.sleb128 -40
 2972 0880 1D       		.uleb128 0x1d
 2973 0881 BB030000 		.4byte	.LASF144
 2974 0885 02       		.byte	0x2
 2975 0886 E1       		.byte	0xe1
 2976 0887 24010000 		.4byte	0x124
 2977 088b 02       		.byte	0x2
 2978 088c 91       		.byte	0x91
 2979 088d 51       		.sleb128 -47
 2980 088e 1D       		.uleb128 0x1d
 2981 088f 53000000 		.4byte	.LASF145
 2982 0893 02       		.byte	0x2
 2983 0894 E4       		.byte	0xe4
 2984 0895 23060000 		.4byte	0x623
 2985 0899 02       		.byte	0x2
 2986 089a 91       		.byte	0x91
 2987 089b 57       		.sleb128 -41
 2988 089c 1D       		.uleb128 0x1d
 2989 089d 780A0000 		.4byte	.LASF146
 2990 08a1 02       		.byte	0x2
 2991 08a2 E5       		.byte	0xe5
 2992 08a3 24010000 		.4byte	0x124
 2993 08a7 02       		.byte	0x2
 2994 08a8 91       		.byte	0x91
 2995 08a9 50       		.sleb128 -48
 2996 08aa 1D       		.uleb128 0x1d
 2997 08ab FF060000 		.4byte	.LASF147
 2998 08af 02       		.byte	0x2
 2999 08b0 E6       		.byte	0xe6
 3000 08b1 24010000 		.4byte	0x124
 3001 08b5 02       		.byte	0x2
 3002 08b6 91       		.byte	0x91
 3003 08b7 4F       		.sleb128 -49
 3004 08b8 1D       		.uleb128 0x1d
 3005 08b9 EA070000 		.4byte	.LASF148
 3006 08bd 02       		.byte	0x2
 3007 08be E7       		.byte	0xe7
 3008 08bf 65060000 		.4byte	0x665
 3009 08c3 02       		.byte	0x2
 3010 08c4 91       		.byte	0x91
 3011 08c5 56       		.sleb128 -42
 3012 08c6 1D       		.uleb128 0x1d
 3013 08c7 67050000 		.4byte	.LASF149
 3014 08cb 02       		.byte	0x2
 3015 08cc E8       		.byte	0xe8
 3016 08cd 24010000 		.4byte	0x124
 3017 08d1 02       		.byte	0x2
 3018 08d2 91       		.byte	0x91
 3019 08d3 55       		.sleb128 -43
 3020 08d4 1D       		.uleb128 0x1d
 3021 08d5 CE010000 		.4byte	.LASF150
 3022 08d9 02       		.byte	0x2
ARM GAS  /tmp/ccvvhbBy.s 			page 96


 3023 08da E9       		.byte	0xe9
 3024 08db 24010000 		.4byte	0x124
 3025 08df 02       		.byte	0x2
 3026 08e0 91       		.byte	0x91
 3027 08e1 54       		.sleb128 -44
 3028 08e2 1D       		.uleb128 0x1d
 3029 08e3 E2010000 		.4byte	.LASF151
 3030 08e7 02       		.byte	0x2
 3031 08e8 EC       		.byte	0xec
 3032 08e9 3D010000 		.4byte	0x13d
 3033 08ed 02       		.byte	0x2
 3034 08ee 91       		.byte	0x91
 3035 08ef 4C       		.sleb128 -52
 3036 08f0 1D       		.uleb128 0x1d
 3037 08f1 B2080000 		.4byte	.LASF152
 3038 08f5 02       		.byte	0x2
 3039 08f6 EF       		.byte	0xef
 3040 08f7 24010000 		.4byte	0x124
 3041 08fb 02       		.byte	0x2
 3042 08fc 91       		.byte	0x91
 3043 08fd 4B       		.sleb128 -53
 3044 08fe 1D       		.uleb128 0x1d
 3045 08ff 00000000 		.4byte	.LASF153
 3046 0903 02       		.byte	0x2
 3047 0904 F5       		.byte	0xf5
 3048 0905 0E090000 		.4byte	0x90e
 3049 0909 03       		.byte	0x3
 3050 090a 91       		.byte	0x91
 3051 090b E47E     		.sleb128 -156
 3052 090d 00       		.byte	0
 3053 090e 0C       		.uleb128 0xc
 3054 090f B3050000 		.4byte	0x5b3
 3055 0913 1E090000 		.4byte	0x91e
 3056 0917 0D       		.uleb128 0xd
 3057 0918 5D020000 		.4byte	0x25d
 3058 091c 63       		.byte	0x63
 3059 091d 00       		.byte	0
 3060 091e 1E       		.uleb128 0x1e
 3061 091f 01       		.byte	0x1
 3062 0920 DD080000 		.4byte	.LASF204
 3063 0924 02       		.byte	0x2
 3064 0925 E404     		.2byte	0x4e4
 3065 0927 01       		.byte	0x1
 3066 0928 00000000 		.4byte	.LFB21
 3067 092c B0000000 		.4byte	.LFE21
 3068 0930 85000000 		.4byte	.LLST3
 3069 0934 01       		.byte	0x1
 3070 0935 DE090000 		.4byte	0x9de
 3071 0939 17       		.uleb128 0x17
 3072 093a 85000000 		.4byte	.LASF154
 3073 093e 02       		.byte	0x2
 3074 093f E404     		.2byte	0x4e4
 3075 0941 DE090000 		.4byte	0x9de
 3076 0945 03       		.byte	0x3
 3077 0946 91       		.byte	0x91
 3078 0947 A47F     		.sleb128 -92
 3079 0949 1F       		.uleb128 0x1f
ARM GAS  /tmp/ccvvhbBy.s 			page 97


 3080 094a 643100   		.ascii	"d1\000"
 3081 094d 02       		.byte	0x2
 3082 094e E604     		.2byte	0x4e6
 3083 0950 9A010000 		.4byte	0x19a
 3084 0954 02       		.byte	0x2
 3085 0955 91       		.byte	0x91
 3086 0956 74       		.sleb128 -12
 3087 0957 1F       		.uleb128 0x1f
 3088 0958 643200   		.ascii	"d2\000"
 3089 095b 02       		.byte	0x2
 3090 095c E604     		.2byte	0x4e6
 3091 095e 9A010000 		.4byte	0x19a
 3092 0962 02       		.byte	0x2
 3093 0963 91       		.byte	0x91
 3094 0964 70       		.sleb128 -16
 3095 0965 1F       		.uleb128 0x1f
 3096 0966 643300   		.ascii	"d3\000"
 3097 0969 02       		.byte	0x2
 3098 096a E604     		.2byte	0x4e6
 3099 096c 9A010000 		.4byte	0x19a
 3100 0970 02       		.byte	0x2
 3101 0971 91       		.byte	0x91
 3102 0972 6C       		.sleb128 -20
 3103 0973 1F       		.uleb128 0x1f
 3104 0974 643400   		.ascii	"d4\000"
 3105 0977 02       		.byte	0x2
 3106 0978 E604     		.2byte	0x4e6
 3107 097a 9A010000 		.4byte	0x19a
 3108 097e 02       		.byte	0x2
 3109 097f 91       		.byte	0x91
 3110 0980 68       		.sleb128 -24
 3111 0981 1F       		.uleb128 0x1f
 3112 0982 643500   		.ascii	"d5\000"
 3113 0985 02       		.byte	0x2
 3114 0986 E604     		.2byte	0x4e6
 3115 0988 9A010000 		.4byte	0x19a
 3116 098c 02       		.byte	0x2
 3117 098d 91       		.byte	0x91
 3118 098e 64       		.sleb128 -28
 3119 098f 1F       		.uleb128 0x1f
 3120 0990 643600   		.ascii	"d6\000"
 3121 0993 02       		.byte	0x2
 3122 0994 E604     		.2byte	0x4e6
 3123 0996 9A010000 		.4byte	0x19a
 3124 099a 02       		.byte	0x2
 3125 099b 91       		.byte	0x91
 3126 099c 60       		.sleb128 -32
 3127 099d 20       		.uleb128 0x20
 3128 099e 24050000 		.4byte	.LASF155
 3129 09a2 02       		.byte	0x2
 3130 09a3 E704     		.2byte	0x4e7
 3131 09a5 E4090000 		.4byte	0x9e4
 3132 09a9 03       		.byte	0x3
 3133 09aa 91       		.byte	0x91
 3134 09ab B87F     		.sleb128 -72
 3135 09ad 20       		.uleb128 0x20
 3136 09ae A1070000 		.4byte	.LASF156
ARM GAS  /tmp/ccvvhbBy.s 			page 98


 3137 09b2 02       		.byte	0x2
 3138 09b3 E804     		.2byte	0x4e8
 3139 09b5 FB090000 		.4byte	0x9fb
 3140 09b9 03       		.byte	0x3
 3141 09ba 91       		.byte	0x91
 3142 09bb B47F     		.sleb128 -76
 3143 09bd 20       		.uleb128 0x20
 3144 09be 75030000 		.4byte	.LASF157
 3145 09c2 02       		.byte	0x2
 3146 09c3 E904     		.2byte	0x4e9
 3147 09c5 FB090000 		.4byte	0x9fb
 3148 09c9 03       		.byte	0x3
 3149 09ca 91       		.byte	0x91
 3150 09cb B07F     		.sleb128 -80
 3151 09cd 20       		.uleb128 0x20
 3152 09ce 5D070000 		.4byte	.LASF158
 3153 09d2 02       		.byte	0x2
 3154 09d3 EA04     		.2byte	0x4ea
 3155 09d5 FB090000 		.4byte	0x9fb
 3156 09d9 03       		.byte	0x3
 3157 09da 91       		.byte	0x91
 3158 09db AC7F     		.sleb128 -84
 3159 09dd 00       		.byte	0
 3160 09de 21       		.uleb128 0x21
 3161 09df 04       		.byte	0x4
 3162 09e0 84010000 		.4byte	0x184
 3163 09e4 0C       		.uleb128 0xc
 3164 09e5 B3050000 		.4byte	0x5b3
 3165 09e9 F4090000 		.4byte	0x9f4
 3166 09ed 0D       		.uleb128 0xd
 3167 09ee 5D020000 		.4byte	0x25d
 3168 09f2 27       		.byte	0x27
 3169 09f3 00       		.byte	0
 3170 09f4 05       		.uleb128 0x5
 3171 09f5 04       		.byte	0x4
 3172 09f6 04       		.byte	0x4
 3173 09f7 DC010000 		.4byte	.LASF159
 3174 09fb 0E       		.uleb128 0xe
 3175 09fc F4090000 		.4byte	0x9f4
 3176 0a00 22       		.uleb128 0x22
 3177 0a01 01       		.byte	0x1
 3178 0a02 97080000 		.4byte	.LASF205
 3179 0a06 02       		.byte	0x2
 3180 0a07 0405     		.2byte	0x504
 3181 0a09 01       		.byte	0x1
 3182 0a0a 00000000 		.4byte	.LFB22
 3183 0a0e EC000000 		.4byte	.LFE22
 3184 0a12 B2000000 		.4byte	.LLST4
 3185 0a16 01       		.byte	0x1
 3186 0a17 0C       		.uleb128 0xc
 3187 0a18 24010000 		.4byte	0x124
 3188 0a1c 270A0000 		.4byte	0xa27
 3189 0a20 0D       		.uleb128 0xd
 3190 0a21 5D020000 		.4byte	0x25d
 3191 0a25 FF       		.byte	0xff
 3192 0a26 00       		.byte	0
 3193 0a27 23       		.uleb128 0x23
ARM GAS  /tmp/ccvvhbBy.s 			page 99


 3194 0a28 3E010000 		.4byte	.LASF160
 3195 0a2c 02       		.byte	0x2
 3196 0a2d 3B       		.byte	0x3b
 3197 0a2e 390A0000 		.4byte	0xa39
 3198 0a32 01       		.byte	0x1
 3199 0a33 05       		.byte	0x5
 3200 0a34 03       		.byte	0x3
 3201 0a35 00000000 		.4byte	tx2buff
 3202 0a39 0E       		.uleb128 0xe
 3203 0a3a 170A0000 		.4byte	0xa17
 3204 0a3e 23       		.uleb128 0x23
 3205 0a3f FE000000 		.4byte	.LASF161
 3206 0a43 02       		.byte	0x2
 3207 0a44 3C       		.byte	0x3c
 3208 0a45 500A0000 		.4byte	0xa50
 3209 0a49 01       		.byte	0x1
 3210 0a4a 05       		.byte	0x5
 3211 0a4b 03       		.byte	0x3
 3212 0a4c 00000000 		.4byte	rx2buff
 3213 0a50 0E       		.uleb128 0xe
 3214 0a51 170A0000 		.4byte	0xa17
 3215 0a55 23       		.uleb128 0x23
 3216 0a56 11040000 		.4byte	.LASF162
 3217 0a5a 02       		.byte	0x2
 3218 0a5b 3E       		.byte	0x3e
 3219 0a5c 670A0000 		.4byte	0xa67
 3220 0a60 01       		.byte	0x1
 3221 0a61 05       		.byte	0x5
 3222 0a62 03       		.byte	0x3
 3223 0a63 00000000 		.4byte	tx1buff
 3224 0a67 0E       		.uleb128 0xe
 3225 0a68 170A0000 		.4byte	0xa17
 3226 0a6c 23       		.uleb128 0x23
 3227 0a6d 11010000 		.4byte	.LASF163
 3228 0a71 02       		.byte	0x2
 3229 0a72 3F       		.byte	0x3f
 3230 0a73 7E0A0000 		.4byte	0xa7e
 3231 0a77 01       		.byte	0x1
 3232 0a78 05       		.byte	0x5
 3233 0a79 03       		.byte	0x3
 3234 0a7a 00000000 		.4byte	rx1buff
 3235 0a7e 0E       		.uleb128 0xe
 3236 0a7f 170A0000 		.4byte	0xa17
 3237 0a83 23       		.uleb128 0x23
 3238 0a84 8D030000 		.4byte	.LASF164
 3239 0a88 02       		.byte	0x2
 3240 0a89 51       		.byte	0x51
 3241 0a8a 950A0000 		.4byte	0xa95
 3242 0a8e 01       		.byte	0x1
 3243 0a8f 05       		.byte	0x5
 3244 0a90 03       		.byte	0x3
 3245 0a91 00000000 		.4byte	take_temp_sample
 3246 0a95 0E       		.uleb128 0xe
 3247 0a96 3D010000 		.4byte	0x13d
 3248 0a9a 23       		.uleb128 0x23
 3249 0a9b F4020000 		.4byte	.LASF165
 3250 0a9f 02       		.byte	0x2
ARM GAS  /tmp/ccvvhbBy.s 			page 100


 3251 0aa0 52       		.byte	0x52
 3252 0aa1 3D010000 		.4byte	0x13d
 3253 0aa5 01       		.byte	0x1
 3254 0aa6 05       		.byte	0x5
 3255 0aa7 03       		.byte	0x3
 3256 0aa8 00000000 		.4byte	timer_rep
 3257 0aac 23       		.uleb128 0x23
 3258 0aad B9040000 		.4byte	.LASF166
 3259 0ab1 02       		.byte	0x2
 3260 0ab2 56       		.byte	0x56
 3261 0ab3 950A0000 		.4byte	0xa95
 3262 0ab7 01       		.byte	0x1
 3263 0ab8 05       		.byte	0x5
 3264 0ab9 03       		.byte	0x3
 3265 0aba 00000000 		.4byte	timer_relay
 3266 0abe 23       		.uleb128 0x23
 3267 0abf C8020000 		.4byte	.LASF167
 3268 0ac3 02       		.byte	0x2
 3269 0ac4 58       		.byte	0x58
 3270 0ac5 950A0000 		.4byte	0xa95
 3271 0ac9 01       		.byte	0x1
 3272 0aca 05       		.byte	0x5
 3273 0acb 03       		.byte	0x3
 3274 0acc 00000000 		.4byte	tt_take_photo_sample
 3275 0ad0 23       		.uleb128 0x23
 3276 0ad1 2B040000 		.4byte	.LASF168
 3277 0ad5 02       		.byte	0x2
 3278 0ad6 59       		.byte	0x59
 3279 0ad7 950A0000 		.4byte	0xa95
 3280 0adb 01       		.byte	0x1
 3281 0adc 05       		.byte	0x5
 3282 0add 03       		.byte	0x3
 3283 0ade 00000000 		.4byte	tt_relay_on_off
 3284 0ae2 23       		.uleb128 0x23
 3285 0ae3 A3040000 		.4byte	.LASF169
 3286 0ae7 02       		.byte	0x2
 3287 0ae8 5D       		.byte	0x5d
 3288 0ae9 24010000 		.4byte	0x124
 3289 0aed 01       		.byte	0x1
 3290 0aee 05       		.byte	0x5
 3291 0aef 03       		.byte	0x3
 3292 0af0 00000000 		.4byte	saved_mode
 3293 0af4 24       		.uleb128 0x24
 3294 0af5 733100   		.ascii	"s1\000"
 3295 0af8 02       		.byte	0x2
 3296 0af9 61       		.byte	0x61
 3297 0afa 3D010000 		.4byte	0x13d
 3298 0afe 01       		.byte	0x1
 3299 0aff 05       		.byte	0x5
 3300 0b00 03       		.byte	0x3
 3301 0b01 00000000 		.4byte	s1
 3302 0b05 24       		.uleb128 0x24
 3303 0b06 733200   		.ascii	"s2\000"
 3304 0b09 02       		.byte	0x2
 3305 0b0a 62       		.byte	0x62
 3306 0b0b 3D010000 		.4byte	0x13d
 3307 0b0f 01       		.byte	0x1
ARM GAS  /tmp/ccvvhbBy.s 			page 101


 3308 0b10 05       		.byte	0x5
 3309 0b11 03       		.byte	0x3
 3310 0b12 00000000 		.4byte	s2
 3311 0b16 24       		.uleb128 0x24
 3312 0b17 73616300 		.ascii	"sac\000"
 3313 0b1b 02       		.byte	0x2
 3314 0b1c 63       		.byte	0x63
 3315 0b1d 3D010000 		.4byte	0x13d
 3316 0b21 01       		.byte	0x1
 3317 0b22 05       		.byte	0x5
 3318 0b23 03       		.byte	0x3
 3319 0b24 00000000 		.4byte	sac
 3320 0b28 23       		.uleb128 0x23
 3321 0b29 8F080000 		.4byte	.LASF170
 3322 0b2d 02       		.byte	0x2
 3323 0b2e 64       		.byte	0x64
 3324 0b2f 24010000 		.4byte	0x124
 3325 0b33 01       		.byte	0x1
 3326 0b34 05       		.byte	0x5
 3327 0b35 03       		.byte	0x3
 3328 0b36 00000000 		.4byte	sac_aux
 3329 0b3a 23       		.uleb128 0x23
 3330 0b3b C3070000 		.4byte	.LASF171
 3331 0b3f 02       		.byte	0x2
 3332 0b40 68       		.byte	0x68
 3333 0b41 4C0B0000 		.4byte	0xb4c
 3334 0b45 01       		.byte	0x1
 3335 0b46 05       		.byte	0x5
 3336 0b47 03       		.byte	0x3
 3337 0b48 00000000 		.4byte	adc_ch
 3338 0b4c 0E       		.uleb128 0xe
 3339 0b4d BA050000 		.4byte	0x5ba
 3340 0b51 23       		.uleb128 0x23
 3341 0b52 280A0000 		.4byte	.LASF172
 3342 0b56 02       		.byte	0x2
 3343 0b57 69       		.byte	0x69
 3344 0b58 630B0000 		.4byte	0xb63
 3345 0b5c 01       		.byte	0x1
 3346 0b5d 05       		.byte	0x5
 3347 0b5e 03       		.byte	0x3
 3348 0b5f 00000000 		.4byte	seq_ready
 3349 0b63 0E       		.uleb128 0xe
 3350 0b64 24010000 		.4byte	0x124
 3351 0b68 23       		.uleb128 0x23
 3352 0b69 F6040000 		.4byte	.LASF173
 3353 0b6d 02       		.byte	0x2
 3354 0b6e 6A       		.byte	0x6a
 3355 0b6f 3D010000 		.4byte	0x13d
 3356 0b73 01       		.byte	0x1
 3357 0b74 05       		.byte	0x5
 3358 0b75 03       		.byte	0x3
 3359 0b76 00000000 		.4byte	zero_current
 3360 0b7a 23       		.uleb128 0x23
 3361 0b7b 85040000 		.4byte	.LASF174
 3362 0b7f 02       		.byte	0x2
 3363 0b80 6E       		.byte	0x6e
 3364 0b81 630B0000 		.4byte	0xb63
ARM GAS  /tmp/ccvvhbBy.s 			page 102


 3365 0b85 01       		.byte	0x1
 3366 0b86 05       		.byte	0x5
 3367 0b87 03       		.byte	0x3
 3368 0b88 00000000 		.4byte	usart1_mini_timeout
 3369 0b8c 23       		.uleb128 0x23
 3370 0b8d 8B020000 		.4byte	.LASF175
 3371 0b91 02       		.byte	0x2
 3372 0b92 6F       		.byte	0x6f
 3373 0b93 630B0000 		.4byte	0xb63
 3374 0b97 01       		.byte	0x1
 3375 0b98 05       		.byte	0x5
 3376 0b99 03       		.byte	0x3
 3377 0b9a 00000000 		.4byte	usart1_pckt_ready
 3378 0b9e 23       		.uleb128 0x23
 3379 0b9f 23030000 		.4byte	.LASF176
 3380 0ba3 02       		.byte	0x2
 3381 0ba4 70       		.byte	0x70
 3382 0ba5 630B0000 		.4byte	0xb63
 3383 0ba9 01       		.byte	0x1
 3384 0baa 05       		.byte	0x5
 3385 0bab 03       		.byte	0x3
 3386 0bac 00000000 		.4byte	usart1_have_data
 3387 0bb0 23       		.uleb128 0x23
 3388 0bb1 16020000 		.4byte	.LASF177
 3389 0bb5 02       		.byte	0x2
 3390 0bb6 71       		.byte	0x71
 3391 0bb7 24010000 		.4byte	0x124
 3392 0bbb 01       		.byte	0x1
 3393 0bbc 05       		.byte	0x5
 3394 0bbd 03       		.byte	0x3
 3395 0bbe 00000000 		.4byte	usart1_pckt_bytes
 3396 0bc2 23       		.uleb128 0x23
 3397 0bc3 FD030000 		.4byte	.LASF178
 3398 0bc7 02       		.byte	0x2
 3399 0bc8 88       		.byte	0x88
 3400 0bc9 630B0000 		.4byte	0xb63
 3401 0bcd 01       		.byte	0x1
 3402 0bce 05       		.byte	0x5
 3403 0bcf 03       		.byte	0x3
 3404 0bd0 00000000 		.4byte	usart2_mini_timeout
 3405 0bd4 23       		.uleb128 0x23
 3406 0bd5 2C010000 		.4byte	.LASF179
 3407 0bd9 02       		.byte	0x2
 3408 0bda 89       		.byte	0x89
 3409 0bdb 630B0000 		.4byte	0xb63
 3410 0bdf 01       		.byte	0x1
 3411 0be0 05       		.byte	0x5
 3412 0be1 03       		.byte	0x3
 3413 0be2 00000000 		.4byte	usart2_pckt_ready
 3414 0be6 23       		.uleb128 0x23
 3415 0be7 5E010000 		.4byte	.LASF180
 3416 0beb 02       		.byte	0x2
 3417 0bec 8A       		.byte	0x8a
 3418 0bed 630B0000 		.4byte	0xb63
 3419 0bf1 01       		.byte	0x1
 3420 0bf2 05       		.byte	0x5
 3421 0bf3 03       		.byte	0x3
ARM GAS  /tmp/ccvvhbBy.s 			page 103


 3422 0bf4 00000000 		.4byte	usart2_have_data
 3423 0bf8 23       		.uleb128 0x23
 3424 0bf9 19040000 		.4byte	.LASF181
 3425 0bfd 02       		.byte	0x2
 3426 0bfe 8B       		.byte	0x8b
 3427 0bff 24010000 		.4byte	0x124
 3428 0c03 01       		.byte	0x1
 3429 0c04 05       		.byte	0x5
 3430 0c05 03       		.byte	0x3
 3431 0c06 00000000 		.4byte	usart2_pckt_bytes
 3432 0c0a 0C       		.uleb128 0xc
 3433 0c0b B3050000 		.4byte	0x5b3
 3434 0c0f 150C0000 		.4byte	0xc15
 3435 0c13 25       		.uleb128 0x25
 3436 0c14 00       		.byte	0
 3437 0c15 26       		.uleb128 0x26
 3438 0c16 9F050000 		.4byte	.LASF182
 3439 0c1a 02       		.byte	0x2
 3440 0c1b 8D       		.byte	0x8d
 3441 0c1c 220C0000 		.4byte	0xc22
 3442 0c20 01       		.byte	0x1
 3443 0c21 01       		.byte	0x1
 3444 0c22 0E       		.uleb128 0xe
 3445 0c23 0A0C0000 		.4byte	0xc0a
 3446 0c27 23       		.uleb128 0x23
 3447 0c28 26000000 		.4byte	.LASF183
 3448 0c2c 02       		.byte	0x2
 3449 0c2d 90       		.byte	0x90
 3450 0c2e ED060000 		.4byte	0x6ed
 3451 0c32 01       		.byte	0x1
 3452 0c33 05       		.byte	0x5
 3453 0c34 03       		.byte	0x3
 3454 0c35 00000000 		.4byte	param_struct
 3455 0c39 23       		.uleb128 0x23
 3456 0c3a E5040000 		.4byte	.LASF184
 3457 0c3e 02       		.byte	0x2
 3458 0c3f 93       		.byte	0x93
 3459 0c40 3D010000 		.4byte	0x13d
 3460 0c44 01       		.byte	0x1
 3461 0c45 05       		.byte	0x5
 3462 0c46 03       		.byte	0x3
 3463 0c47 00000000 		.4byte	show_power_index
 3464 0c4b 0C       		.uleb128 0xc
 3465 0c4c B3050000 		.4byte	0x5b3
 3466 0c50 5B0C0000 		.4byte	0xc5b
 3467 0c54 0D       		.uleb128 0xd
 3468 0c55 5D020000 		.4byte	0x25d
 3469 0c59 13       		.byte	0x13
 3470 0c5a 00       		.byte	0
 3471 0c5b 23       		.uleb128 0x23
 3472 0c5c B3050000 		.4byte	.LASF185
 3473 0c60 02       		.byte	0x2
 3474 0c61 9D       		.byte	0x9d
 3475 0c62 4B0C0000 		.4byte	0xc4b
 3476 0c66 01       		.byte	0x1
 3477 0c67 05       		.byte	0x5
 3478 0c68 03       		.byte	0x3
ARM GAS  /tmp/ccvvhbBy.s 			page 104


 3479 0c69 00000000 		.4byte	gsmNUM
 3480 0c6d 0C       		.uleb128 0xc
 3481 0c6e B3050000 		.4byte	0x5b3
 3482 0c72 7D0C0000 		.4byte	0xc7d
 3483 0c76 0D       		.uleb128 0xd
 3484 0c77 5D020000 		.4byte	0x25d
 3485 0c7b B3       		.byte	0xb3
 3486 0c7c 00       		.byte	0
 3487 0c7d 23       		.uleb128 0x23
 3488 0c7e BE060000 		.4byte	.LASF186
 3489 0c82 02       		.byte	0x2
 3490 0c83 9E       		.byte	0x9e
 3491 0c84 6D0C0000 		.4byte	0xc6d
 3492 0c88 01       		.byte	0x1
 3493 0c89 05       		.byte	0x5
 3494 0c8a 03       		.byte	0x3
 3495 0c8b 00000000 		.4byte	gsmMSG
 3496 0c8f 23       		.uleb128 0x23
 3497 0c90 76060000 		.4byte	.LASF187
 3498 0c94 02       		.byte	0x2
 3499 0c95 A6       		.byte	0xa6
 3500 0c96 950A0000 		.4byte	0xa95
 3501 0c9a 01       		.byte	0x1
 3502 0c9b 05       		.byte	0x5
 3503 0c9c 03       		.byte	0x3
 3504 0c9d 00000000 		.4byte	wait_ms_var
 3505 0ca1 23       		.uleb128 0x23
 3506 0ca2 530A0000 		.4byte	.LASF188
 3507 0ca6 02       		.byte	0x2
 3508 0ca7 A7       		.byte	0xa7
 3509 0ca8 950A0000 		.4byte	0xa95
 3510 0cac 01       		.byte	0x1
 3511 0cad 05       		.byte	0x5
 3512 0cae 03       		.byte	0x3
 3513 0caf 00000000 		.4byte	timer_standby
 3514 0cb3 23       		.uleb128 0x23
 3515 0cb4 E3000000 		.4byte	.LASF189
 3516 0cb8 02       		.byte	0x2
 3517 0cb9 A8       		.byte	0xa8
 3518 0cba 950A0000 		.4byte	0xa95
 3519 0cbe 01       		.byte	0x1
 3520 0cbf 05       		.byte	0x5
 3521 0cc0 03       		.byte	0x3
 3522 0cc1 00000000 		.4byte	tcp_kalive_timer
 3523 0cc5 23       		.uleb128 0x23
 3524 0cc6 53010000 		.4byte	.LASF190
 3525 0cca 02       		.byte	0x2
 3526 0ccb AA       		.byte	0xaa
 3527 0ccc 630B0000 		.4byte	0xb63
 3528 0cd0 01       		.byte	0x1
 3529 0cd1 05       		.byte	0x5
 3530 0cd2 03       		.byte	0x3
 3531 0cd3 00000000 		.4byte	timer_meas
 3532 0cd7 23       		.uleb128 0x23
 3533 0cd8 3B040000 		.4byte	.LASF191
 3534 0cdc 02       		.byte	0x2
 3535 0cdd B0       		.byte	0xb0
ARM GAS  /tmp/ccvvhbBy.s 			page 105


 3536 0cde 950A0000 		.4byte	0xa95
 3537 0ce2 01       		.byte	0x1
 3538 0ce3 05       		.byte	0x5
 3539 0ce4 03       		.byte	0x3
 3540 0ce5 00000000 		.4byte	secs
 3541 0ce9 23       		.uleb128 0x23
 3542 0cea C5060000 		.4byte	.LASF192
 3543 0cee 02       		.byte	0x2
 3544 0cef B1       		.byte	0xb1
 3545 0cf0 630B0000 		.4byte	0xb63
 3546 0cf4 01       		.byte	0x1
 3547 0cf5 05       		.byte	0x5
 3548 0cf6 03       		.byte	0x3
 3549 0cf7 00000000 		.4byte	hours
 3550 0cfb 23       		.uleb128 0x23
 3551 0cfc 24010000 		.4byte	.LASF193
 3552 0d00 02       		.byte	0x2
 3553 0d01 B2       		.byte	0xb2
 3554 0d02 630B0000 		.4byte	0xb63
 3555 0d06 01       		.byte	0x1
 3556 0d07 05       		.byte	0x5
 3557 0d08 03       		.byte	0x3
 3558 0d09 00000000 		.4byte	minutes
 3559 0d0d 0C       		.uleb128 0xc
 3560 0d0e 3D010000 		.4byte	0x13d
 3561 0d12 1D0D0000 		.4byte	0xd1d
 3562 0d16 0D       		.uleb128 0xd
 3563 0d17 5D020000 		.4byte	0x25d
 3564 0d1b 09       		.byte	0x9
 3565 0d1c 00       		.byte	0
 3566 0d1d 23       		.uleb128 0x23
 3567 0d1e B8070000 		.4byte	.LASF194
 3568 0d22 02       		.byte	0x2
 3569 0d23 B7       		.byte	0xb7
 3570 0d24 0D0D0000 		.4byte	0xd0d
 3571 0d28 01       		.byte	0x1
 3572 0d29 05       		.byte	0x5
 3573 0d2a 03       		.byte	0x3
 3574 0d2b 00000000 		.4byte	power_vect
 3575 0d2f 0C       		.uleb128 0xc
 3576 0d30 3D010000 		.4byte	0x13d
 3577 0d34 3F0D0000 		.4byte	0xd3f
 3578 0d38 0D       		.uleb128 0xd
 3579 0d39 5D020000 		.4byte	0x25d
 3580 0d3d 10       		.byte	0x10
 3581 0d3e 00       		.byte	0
 3582 0d3f 23       		.uleb128 0x23
 3583 0d40 320A0000 		.4byte	.LASF195
 3584 0d44 02       		.byte	0x2
 3585 0d45 C5       		.byte	0xc5
 3586 0d46 2F0D0000 		.4byte	0xd2f
 3587 0d4a 01       		.byte	0x1
 3588 0d4b 05       		.byte	0x5
 3589 0d4c 03       		.byte	0x3
 3590 0d4d 00000000 		.4byte	vtemp
 3591 0d51 23       		.uleb128 0x23
 3592 0d52 AF000000 		.4byte	.LASF196
ARM GAS  /tmp/ccvvhbBy.s 			page 106


 3593 0d56 02       		.byte	0x2
 3594 0d57 C6       		.byte	0xc6
 3595 0d58 2F0D0000 		.4byte	0xd2f
 3596 0d5c 01       		.byte	0x1
 3597 0d5d 05       		.byte	0x5
 3598 0d5e 03       		.byte	0x3
 3599 0d5f 00000000 		.4byte	vpote
 3600 0d63 00       		.byte	0
 3601              		.section	.debug_abbrev,"",%progbits
 3602              	.Ldebug_abbrev0:
 3603 0000 01       		.uleb128 0x1
 3604 0001 11       		.uleb128 0x11
 3605 0002 01       		.byte	0x1
 3606 0003 25       		.uleb128 0x25
 3607 0004 0E       		.uleb128 0xe
 3608 0005 13       		.uleb128 0x13
 3609 0006 0B       		.uleb128 0xb
 3610 0007 03       		.uleb128 0x3
 3611 0008 0E       		.uleb128 0xe
 3612 0009 1B       		.uleb128 0x1b
 3613 000a 0E       		.uleb128 0xe
 3614 000b 55       		.uleb128 0x55
 3615 000c 06       		.uleb128 0x6
 3616 000d 11       		.uleb128 0x11
 3617 000e 01       		.uleb128 0x1
 3618 000f 52       		.uleb128 0x52
 3619 0010 01       		.uleb128 0x1
 3620 0011 10       		.uleb128 0x10
 3621 0012 06       		.uleb128 0x6
 3622 0013 00       		.byte	0
 3623 0014 00       		.byte	0
 3624 0015 02       		.uleb128 0x2
 3625 0016 04       		.uleb128 0x4
 3626 0017 01       		.byte	0x1
 3627 0018 03       		.uleb128 0x3
 3628 0019 0E       		.uleb128 0xe
 3629 001a 0B       		.uleb128 0xb
 3630 001b 0B       		.uleb128 0xb
 3631 001c 49       		.uleb128 0x49
 3632 001d 13       		.uleb128 0x13
 3633 001e 3A       		.uleb128 0x3a
 3634 001f 0B       		.uleb128 0xb
 3635 0020 3B       		.uleb128 0x3b
 3636 0021 0B       		.uleb128 0xb
 3637 0022 01       		.uleb128 0x1
 3638 0023 13       		.uleb128 0x13
 3639 0024 00       		.byte	0
 3640 0025 00       		.byte	0
 3641 0026 03       		.uleb128 0x3
 3642 0027 28       		.uleb128 0x28
 3643 0028 00       		.byte	0
 3644 0029 03       		.uleb128 0x3
 3645 002a 0E       		.uleb128 0xe
 3646 002b 1C       		.uleb128 0x1c
 3647 002c 0D       		.uleb128 0xd
 3648 002d 00       		.byte	0
 3649 002e 00       		.byte	0
ARM GAS  /tmp/ccvvhbBy.s 			page 107


 3650 002f 04       		.uleb128 0x4
 3651 0030 28       		.uleb128 0x28
 3652 0031 00       		.byte	0
 3653 0032 03       		.uleb128 0x3
 3654 0033 0E       		.uleb128 0xe
 3655 0034 1C       		.uleb128 0x1c
 3656 0035 0B       		.uleb128 0xb
 3657 0036 00       		.byte	0
 3658 0037 00       		.byte	0
 3659 0038 05       		.uleb128 0x5
 3660 0039 24       		.uleb128 0x24
 3661 003a 00       		.byte	0
 3662 003b 0B       		.uleb128 0xb
 3663 003c 0B       		.uleb128 0xb
 3664 003d 3E       		.uleb128 0x3e
 3665 003e 0B       		.uleb128 0xb
 3666 003f 03       		.uleb128 0x3
 3667 0040 0E       		.uleb128 0xe
 3668 0041 00       		.byte	0
 3669 0042 00       		.byte	0
 3670 0043 06       		.uleb128 0x6
 3671 0044 16       		.uleb128 0x16
 3672 0045 00       		.byte	0
 3673 0046 03       		.uleb128 0x3
 3674 0047 0E       		.uleb128 0xe
 3675 0048 3A       		.uleb128 0x3a
 3676 0049 0B       		.uleb128 0xb
 3677 004a 3B       		.uleb128 0x3b
 3678 004b 05       		.uleb128 0x5
 3679 004c 49       		.uleb128 0x49
 3680 004d 13       		.uleb128 0x13
 3681 004e 00       		.byte	0
 3682 004f 00       		.byte	0
 3683 0050 07       		.uleb128 0x7
 3684 0051 16       		.uleb128 0x16
 3685 0052 00       		.byte	0
 3686 0053 03       		.uleb128 0x3
 3687 0054 0E       		.uleb128 0xe
 3688 0055 3A       		.uleb128 0x3a
 3689 0056 0B       		.uleb128 0xb
 3690 0057 3B       		.uleb128 0x3b
 3691 0058 0B       		.uleb128 0xb
 3692 0059 49       		.uleb128 0x49
 3693 005a 13       		.uleb128 0x13
 3694 005b 00       		.byte	0
 3695 005c 00       		.byte	0
 3696 005d 08       		.uleb128 0x8
 3697 005e 24       		.uleb128 0x24
 3698 005f 00       		.byte	0
 3699 0060 0B       		.uleb128 0xb
 3700 0061 0B       		.uleb128 0xb
 3701 0062 3E       		.uleb128 0x3e
 3702 0063 0B       		.uleb128 0xb
 3703 0064 03       		.uleb128 0x3
 3704 0065 08       		.uleb128 0x8
 3705 0066 00       		.byte	0
 3706 0067 00       		.byte	0
ARM GAS  /tmp/ccvvhbBy.s 			page 108


 3707 0068 09       		.uleb128 0x9
 3708 0069 13       		.uleb128 0x13
 3709 006a 01       		.byte	0x1
 3710 006b 0B       		.uleb128 0xb
 3711 006c 05       		.uleb128 0x5
 3712 006d 3A       		.uleb128 0x3a
 3713 006e 0B       		.uleb128 0xb
 3714 006f 3B       		.uleb128 0x3b
 3715 0070 0B       		.uleb128 0xb
 3716 0071 01       		.uleb128 0x1
 3717 0072 13       		.uleb128 0x13
 3718 0073 00       		.byte	0
 3719 0074 00       		.byte	0
 3720 0075 0A       		.uleb128 0xa
 3721 0076 0D       		.uleb128 0xd
 3722 0077 00       		.byte	0
 3723 0078 03       		.uleb128 0x3
 3724 0079 0E       		.uleb128 0xe
 3725 007a 3A       		.uleb128 0x3a
 3726 007b 0B       		.uleb128 0xb
 3727 007c 3B       		.uleb128 0x3b
 3728 007d 0B       		.uleb128 0xb
 3729 007e 49       		.uleb128 0x49
 3730 007f 13       		.uleb128 0x13
 3731 0080 38       		.uleb128 0x38
 3732 0081 0A       		.uleb128 0xa
 3733 0082 00       		.byte	0
 3734 0083 00       		.byte	0
 3735 0084 0B       		.uleb128 0xb
 3736 0085 0D       		.uleb128 0xd
 3737 0086 00       		.byte	0
 3738 0087 03       		.uleb128 0x3
 3739 0088 08       		.uleb128 0x8
 3740 0089 3A       		.uleb128 0x3a
 3741 008a 0B       		.uleb128 0xb
 3742 008b 3B       		.uleb128 0x3b
 3743 008c 0B       		.uleb128 0xb
 3744 008d 49       		.uleb128 0x49
 3745 008e 13       		.uleb128 0x13
 3746 008f 38       		.uleb128 0x38
 3747 0090 0A       		.uleb128 0xa
 3748 0091 00       		.byte	0
 3749 0092 00       		.byte	0
 3750 0093 0C       		.uleb128 0xc
 3751 0094 01       		.uleb128 0x1
 3752 0095 01       		.byte	0x1
 3753 0096 49       		.uleb128 0x49
 3754 0097 13       		.uleb128 0x13
 3755 0098 01       		.uleb128 0x1
 3756 0099 13       		.uleb128 0x13
 3757 009a 00       		.byte	0
 3758 009b 00       		.byte	0
 3759 009c 0D       		.uleb128 0xd
 3760 009d 21       		.uleb128 0x21
 3761 009e 00       		.byte	0
 3762 009f 49       		.uleb128 0x49
 3763 00a0 13       		.uleb128 0x13
ARM GAS  /tmp/ccvvhbBy.s 			page 109


 3764 00a1 2F       		.uleb128 0x2f
 3765 00a2 0B       		.uleb128 0xb
 3766 00a3 00       		.byte	0
 3767 00a4 00       		.byte	0
 3768 00a5 0E       		.uleb128 0xe
 3769 00a6 35       		.uleb128 0x35
 3770 00a7 00       		.byte	0
 3771 00a8 49       		.uleb128 0x49
 3772 00a9 13       		.uleb128 0x13
 3773 00aa 00       		.byte	0
 3774 00ab 00       		.byte	0
 3775 00ac 0F       		.uleb128 0xf
 3776 00ad 13       		.uleb128 0x13
 3777 00ae 01       		.byte	0x1
 3778 00af 0B       		.uleb128 0xb
 3779 00b0 0B       		.uleb128 0xb
 3780 00b1 3A       		.uleb128 0x3a
 3781 00b2 0B       		.uleb128 0xb
 3782 00b3 3B       		.uleb128 0x3b
 3783 00b4 0B       		.uleb128 0xb
 3784 00b5 01       		.uleb128 0x1
 3785 00b6 13       		.uleb128 0x13
 3786 00b7 00       		.byte	0
 3787 00b8 00       		.byte	0
 3788 00b9 10       		.uleb128 0x10
 3789 00ba 26       		.uleb128 0x26
 3790 00bb 00       		.byte	0
 3791 00bc 49       		.uleb128 0x49
 3792 00bd 13       		.uleb128 0x13
 3793 00be 00       		.byte	0
 3794 00bf 00       		.byte	0
 3795 00c0 11       		.uleb128 0x11
 3796 00c1 0D       		.uleb128 0xd
 3797 00c2 00       		.byte	0
 3798 00c3 03       		.uleb128 0x3
 3799 00c4 08       		.uleb128 0x8
 3800 00c5 3A       		.uleb128 0x3a
 3801 00c6 0B       		.uleb128 0xb
 3802 00c7 3B       		.uleb128 0x3b
 3803 00c8 05       		.uleb128 0x5
 3804 00c9 49       		.uleb128 0x49
 3805 00ca 13       		.uleb128 0x13
 3806 00cb 38       		.uleb128 0x38
 3807 00cc 0A       		.uleb128 0xa
 3808 00cd 00       		.byte	0
 3809 00ce 00       		.byte	0
 3810 00cf 12       		.uleb128 0x12
 3811 00d0 0D       		.uleb128 0xd
 3812 00d1 00       		.byte	0
 3813 00d2 03       		.uleb128 0x3
 3814 00d3 0E       		.uleb128 0xe
 3815 00d4 3A       		.uleb128 0x3a
 3816 00d5 0B       		.uleb128 0xb
 3817 00d6 3B       		.uleb128 0x3b
 3818 00d7 05       		.uleb128 0x5
 3819 00d8 49       		.uleb128 0x49
 3820 00d9 13       		.uleb128 0x13
ARM GAS  /tmp/ccvvhbBy.s 			page 110


 3821 00da 38       		.uleb128 0x38
 3822 00db 0A       		.uleb128 0xa
 3823 00dc 00       		.byte	0
 3824 00dd 00       		.byte	0
 3825 00de 13       		.uleb128 0x13
 3826 00df 13       		.uleb128 0x13
 3827 00e0 01       		.byte	0x1
 3828 00e1 0B       		.uleb128 0xb
 3829 00e2 0B       		.uleb128 0xb
 3830 00e3 3A       		.uleb128 0x3a
 3831 00e4 0B       		.uleb128 0xb
 3832 00e5 3B       		.uleb128 0x3b
 3833 00e6 05       		.uleb128 0x5
 3834 00e7 01       		.uleb128 0x1
 3835 00e8 13       		.uleb128 0x13
 3836 00e9 00       		.byte	0
 3837 00ea 00       		.byte	0
 3838 00eb 14       		.uleb128 0x14
 3839 00ec 04       		.uleb128 0x4
 3840 00ed 01       		.byte	0x1
 3841 00ee 0B       		.uleb128 0xb
 3842 00ef 0B       		.uleb128 0xb
 3843 00f0 49       		.uleb128 0x49
 3844 00f1 13       		.uleb128 0x13
 3845 00f2 3A       		.uleb128 0x3a
 3846 00f3 0B       		.uleb128 0xb
 3847 00f4 3B       		.uleb128 0x3b
 3848 00f5 0B       		.uleb128 0xb
 3849 00f6 01       		.uleb128 0x1
 3850 00f7 13       		.uleb128 0x13
 3851 00f8 00       		.byte	0
 3852 00f9 00       		.byte	0
 3853 00fa 15       		.uleb128 0x15
 3854 00fb 13       		.uleb128 0x13
 3855 00fc 01       		.byte	0x1
 3856 00fd 03       		.uleb128 0x3
 3857 00fe 0E       		.uleb128 0xe
 3858 00ff 0B       		.uleb128 0xb
 3859 0100 0B       		.uleb128 0xb
 3860 0101 3A       		.uleb128 0x3a
 3861 0102 0B       		.uleb128 0xb
 3862 0103 3B       		.uleb128 0x3b
 3863 0104 0B       		.uleb128 0xb
 3864 0105 01       		.uleb128 0x1
 3865 0106 13       		.uleb128 0x13
 3866 0107 00       		.byte	0
 3867 0108 00       		.byte	0
 3868 0109 16       		.uleb128 0x16
 3869 010a 2E       		.uleb128 0x2e
 3870 010b 01       		.byte	0x1
 3871 010c 03       		.uleb128 0x3
 3872 010d 0E       		.uleb128 0xe
 3873 010e 3A       		.uleb128 0x3a
 3874 010f 0B       		.uleb128 0xb
 3875 0110 3B       		.uleb128 0x3b
 3876 0111 05       		.uleb128 0x5
 3877 0112 27       		.uleb128 0x27
ARM GAS  /tmp/ccvvhbBy.s 			page 111


 3878 0113 0C       		.uleb128 0xc
 3879 0114 11       		.uleb128 0x11
 3880 0115 01       		.uleb128 0x1
 3881 0116 12       		.uleb128 0x12
 3882 0117 01       		.uleb128 0x1
 3883 0118 40       		.uleb128 0x40
 3884 0119 06       		.uleb128 0x6
 3885 011a 9742     		.uleb128 0x2117
 3886 011c 0C       		.uleb128 0xc
 3887 011d 01       		.uleb128 0x1
 3888 011e 13       		.uleb128 0x13
 3889 011f 00       		.byte	0
 3890 0120 00       		.byte	0
 3891 0121 17       		.uleb128 0x17
 3892 0122 05       		.uleb128 0x5
 3893 0123 00       		.byte	0
 3894 0124 03       		.uleb128 0x3
 3895 0125 0E       		.uleb128 0xe
 3896 0126 3A       		.uleb128 0x3a
 3897 0127 0B       		.uleb128 0xb
 3898 0128 3B       		.uleb128 0x3b
 3899 0129 05       		.uleb128 0x5
 3900 012a 49       		.uleb128 0x49
 3901 012b 13       		.uleb128 0x13
 3902 012c 02       		.uleb128 0x2
 3903 012d 0A       		.uleb128 0xa
 3904 012e 00       		.byte	0
 3905 012f 00       		.byte	0
 3906 0130 18       		.uleb128 0x18
 3907 0131 2E       		.uleb128 0x2e
 3908 0132 01       		.byte	0x1
 3909 0133 03       		.uleb128 0x3
 3910 0134 0E       		.uleb128 0xe
 3911 0135 3A       		.uleb128 0x3a
 3912 0136 0B       		.uleb128 0xb
 3913 0137 3B       		.uleb128 0x3b
 3914 0138 05       		.uleb128 0x5
 3915 0139 27       		.uleb128 0x27
 3916 013a 0C       		.uleb128 0xc
 3917 013b 49       		.uleb128 0x49
 3918 013c 13       		.uleb128 0x13
 3919 013d 11       		.uleb128 0x11
 3920 013e 01       		.uleb128 0x1
 3921 013f 12       		.uleb128 0x12
 3922 0140 01       		.uleb128 0x1
 3923 0141 40       		.uleb128 0x40
 3924 0142 06       		.uleb128 0x6
 3925 0143 9642     		.uleb128 0x2116
 3926 0145 0C       		.uleb128 0xc
 3927 0146 01       		.uleb128 0x1
 3928 0147 13       		.uleb128 0x13
 3929 0148 00       		.byte	0
 3930 0149 00       		.byte	0
 3931 014a 19       		.uleb128 0x19
 3932 014b 2E       		.uleb128 0x2e
 3933 014c 01       		.byte	0x1
 3934 014d 3F       		.uleb128 0x3f
ARM GAS  /tmp/ccvvhbBy.s 			page 112


 3935 014e 0C       		.uleb128 0xc
 3936 014f 03       		.uleb128 0x3
 3937 0150 0E       		.uleb128 0xe
 3938 0151 3A       		.uleb128 0x3a
 3939 0152 0B       		.uleb128 0xb
 3940 0153 3B       		.uleb128 0x3b
 3941 0154 0B       		.uleb128 0xb
 3942 0155 27       		.uleb128 0x27
 3943 0156 0C       		.uleb128 0xc
 3944 0157 49       		.uleb128 0x49
 3945 0158 13       		.uleb128 0x13
 3946 0159 11       		.uleb128 0x11
 3947 015a 01       		.uleb128 0x1
 3948 015b 12       		.uleb128 0x12
 3949 015c 01       		.uleb128 0x1
 3950 015d 40       		.uleb128 0x40
 3951 015e 06       		.uleb128 0x6
 3952 015f 9642     		.uleb128 0x2116
 3953 0161 0C       		.uleb128 0xc
 3954 0162 01       		.uleb128 0x1
 3955 0163 13       		.uleb128 0x13
 3956 0164 00       		.byte	0
 3957 0165 00       		.byte	0
 3958 0166 1A       		.uleb128 0x1a
 3959 0167 34       		.uleb128 0x34
 3960 0168 00       		.byte	0
 3961 0169 03       		.uleb128 0x3
 3962 016a 08       		.uleb128 0x8
 3963 016b 3A       		.uleb128 0x3a
 3964 016c 0B       		.uleb128 0xb
 3965 016d 3B       		.uleb128 0x3b
 3966 016e 0B       		.uleb128 0xb
 3967 016f 49       		.uleb128 0x49
 3968 0170 13       		.uleb128 0x13
 3969 0171 02       		.uleb128 0x2
 3970 0172 0A       		.uleb128 0xa
 3971 0173 00       		.byte	0
 3972 0174 00       		.byte	0
 3973 0175 1B       		.uleb128 0x1b
 3974 0176 34       		.uleb128 0x34
 3975 0177 00       		.byte	0
 3976 0178 03       		.uleb128 0x3
 3977 0179 08       		.uleb128 0x8
 3978 017a 3A       		.uleb128 0x3a
 3979 017b 0B       		.uleb128 0xb
 3980 017c 3B       		.uleb128 0x3b
 3981 017d 0B       		.uleb128 0xb
 3982 017e 49       		.uleb128 0x49
 3983 017f 13       		.uleb128 0x13
 3984 0180 00       		.byte	0
 3985 0181 00       		.byte	0
 3986 0182 1C       		.uleb128 0x1c
 3987 0183 34       		.uleb128 0x34
 3988 0184 00       		.byte	0
 3989 0185 03       		.uleb128 0x3
 3990 0186 0E       		.uleb128 0xe
 3991 0187 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccvvhbBy.s 			page 113


 3992 0188 0B       		.uleb128 0xb
 3993 0189 3B       		.uleb128 0x3b
 3994 018a 0B       		.uleb128 0xb
 3995 018b 49       		.uleb128 0x49
 3996 018c 13       		.uleb128 0x13
 3997 018d 00       		.byte	0
 3998 018e 00       		.byte	0
 3999 018f 1D       		.uleb128 0x1d
 4000 0190 34       		.uleb128 0x34
 4001 0191 00       		.byte	0
 4002 0192 03       		.uleb128 0x3
 4003 0193 0E       		.uleb128 0xe
 4004 0194 3A       		.uleb128 0x3a
 4005 0195 0B       		.uleb128 0xb
 4006 0196 3B       		.uleb128 0x3b
 4007 0197 0B       		.uleb128 0xb
 4008 0198 49       		.uleb128 0x49
 4009 0199 13       		.uleb128 0x13
 4010 019a 02       		.uleb128 0x2
 4011 019b 0A       		.uleb128 0xa
 4012 019c 00       		.byte	0
 4013 019d 00       		.byte	0
 4014 019e 1E       		.uleb128 0x1e
 4015 019f 2E       		.uleb128 0x2e
 4016 01a0 01       		.byte	0x1
 4017 01a1 3F       		.uleb128 0x3f
 4018 01a2 0C       		.uleb128 0xc
 4019 01a3 03       		.uleb128 0x3
 4020 01a4 0E       		.uleb128 0xe
 4021 01a5 3A       		.uleb128 0x3a
 4022 01a6 0B       		.uleb128 0xb
 4023 01a7 3B       		.uleb128 0x3b
 4024 01a8 05       		.uleb128 0x5
 4025 01a9 27       		.uleb128 0x27
 4026 01aa 0C       		.uleb128 0xc
 4027 01ab 11       		.uleb128 0x11
 4028 01ac 01       		.uleb128 0x1
 4029 01ad 12       		.uleb128 0x12
 4030 01ae 01       		.uleb128 0x1
 4031 01af 40       		.uleb128 0x40
 4032 01b0 06       		.uleb128 0x6
 4033 01b1 9642     		.uleb128 0x2116
 4034 01b3 0C       		.uleb128 0xc
 4035 01b4 01       		.uleb128 0x1
 4036 01b5 13       		.uleb128 0x13
 4037 01b6 00       		.byte	0
 4038 01b7 00       		.byte	0
 4039 01b8 1F       		.uleb128 0x1f
 4040 01b9 34       		.uleb128 0x34
 4041 01ba 00       		.byte	0
 4042 01bb 03       		.uleb128 0x3
 4043 01bc 08       		.uleb128 0x8
 4044 01bd 3A       		.uleb128 0x3a
 4045 01be 0B       		.uleb128 0xb
 4046 01bf 3B       		.uleb128 0x3b
 4047 01c0 05       		.uleb128 0x5
 4048 01c1 49       		.uleb128 0x49
ARM GAS  /tmp/ccvvhbBy.s 			page 114


 4049 01c2 13       		.uleb128 0x13
 4050 01c3 02       		.uleb128 0x2
 4051 01c4 0A       		.uleb128 0xa
 4052 01c5 00       		.byte	0
 4053 01c6 00       		.byte	0
 4054 01c7 20       		.uleb128 0x20
 4055 01c8 34       		.uleb128 0x34
 4056 01c9 00       		.byte	0
 4057 01ca 03       		.uleb128 0x3
 4058 01cb 0E       		.uleb128 0xe
 4059 01cc 3A       		.uleb128 0x3a
 4060 01cd 0B       		.uleb128 0xb
 4061 01ce 3B       		.uleb128 0x3b
 4062 01cf 05       		.uleb128 0x5
 4063 01d0 49       		.uleb128 0x49
 4064 01d1 13       		.uleb128 0x13
 4065 01d2 02       		.uleb128 0x2
 4066 01d3 0A       		.uleb128 0xa
 4067 01d4 00       		.byte	0
 4068 01d5 00       		.byte	0
 4069 01d6 21       		.uleb128 0x21
 4070 01d7 0F       		.uleb128 0xf
 4071 01d8 00       		.byte	0
 4072 01d9 0B       		.uleb128 0xb
 4073 01da 0B       		.uleb128 0xb
 4074 01db 49       		.uleb128 0x49
 4075 01dc 13       		.uleb128 0x13
 4076 01dd 00       		.byte	0
 4077 01de 00       		.byte	0
 4078 01df 22       		.uleb128 0x22
 4079 01e0 2E       		.uleb128 0x2e
 4080 01e1 00       		.byte	0
 4081 01e2 3F       		.uleb128 0x3f
 4082 01e3 0C       		.uleb128 0xc
 4083 01e4 03       		.uleb128 0x3
 4084 01e5 0E       		.uleb128 0xe
 4085 01e6 3A       		.uleb128 0x3a
 4086 01e7 0B       		.uleb128 0xb
 4087 01e8 3B       		.uleb128 0x3b
 4088 01e9 05       		.uleb128 0x5
 4089 01ea 27       		.uleb128 0x27
 4090 01eb 0C       		.uleb128 0xc
 4091 01ec 11       		.uleb128 0x11
 4092 01ed 01       		.uleb128 0x1
 4093 01ee 12       		.uleb128 0x12
 4094 01ef 01       		.uleb128 0x1
 4095 01f0 40       		.uleb128 0x40
 4096 01f1 06       		.uleb128 0x6
 4097 01f2 9642     		.uleb128 0x2116
 4098 01f4 0C       		.uleb128 0xc
 4099 01f5 00       		.byte	0
 4100 01f6 00       		.byte	0
 4101 01f7 23       		.uleb128 0x23
 4102 01f8 34       		.uleb128 0x34
 4103 01f9 00       		.byte	0
 4104 01fa 03       		.uleb128 0x3
 4105 01fb 0E       		.uleb128 0xe
ARM GAS  /tmp/ccvvhbBy.s 			page 115


 4106 01fc 3A       		.uleb128 0x3a
 4107 01fd 0B       		.uleb128 0xb
 4108 01fe 3B       		.uleb128 0x3b
 4109 01ff 0B       		.uleb128 0xb
 4110 0200 49       		.uleb128 0x49
 4111 0201 13       		.uleb128 0x13
 4112 0202 3F       		.uleb128 0x3f
 4113 0203 0C       		.uleb128 0xc
 4114 0204 02       		.uleb128 0x2
 4115 0205 0A       		.uleb128 0xa
 4116 0206 00       		.byte	0
 4117 0207 00       		.byte	0
 4118 0208 24       		.uleb128 0x24
 4119 0209 34       		.uleb128 0x34
 4120 020a 00       		.byte	0
 4121 020b 03       		.uleb128 0x3
 4122 020c 08       		.uleb128 0x8
 4123 020d 3A       		.uleb128 0x3a
 4124 020e 0B       		.uleb128 0xb
 4125 020f 3B       		.uleb128 0x3b
 4126 0210 0B       		.uleb128 0xb
 4127 0211 49       		.uleb128 0x49
 4128 0212 13       		.uleb128 0x13
 4129 0213 3F       		.uleb128 0x3f
 4130 0214 0C       		.uleb128 0xc
 4131 0215 02       		.uleb128 0x2
 4132 0216 0A       		.uleb128 0xa
 4133 0217 00       		.byte	0
 4134 0218 00       		.byte	0
 4135 0219 25       		.uleb128 0x25
 4136 021a 21       		.uleb128 0x21
 4137 021b 00       		.byte	0
 4138 021c 00       		.byte	0
 4139 021d 00       		.byte	0
 4140 021e 26       		.uleb128 0x26
 4141 021f 34       		.uleb128 0x34
 4142 0220 00       		.byte	0
 4143 0221 03       		.uleb128 0x3
 4144 0222 0E       		.uleb128 0xe
 4145 0223 3A       		.uleb128 0x3a
 4146 0224 0B       		.uleb128 0xb
 4147 0225 3B       		.uleb128 0x3b
 4148 0226 0B       		.uleb128 0xb
 4149 0227 49       		.uleb128 0x49
 4150 0228 13       		.uleb128 0x13
 4151 0229 3F       		.uleb128 0x3f
 4152 022a 0C       		.uleb128 0xc
 4153 022b 3C       		.uleb128 0x3c
 4154 022c 0C       		.uleb128 0xc
 4155 022d 00       		.byte	0
 4156 022e 00       		.byte	0
 4157 022f 00       		.byte	0
 4158              		.section	.debug_loc,"",%progbits
 4159              	.Ldebug_loc0:
 4160              	.LLST0:
 4161 0000 00000000 		.4byte	.LFB16
 4162 0004 02000000 		.4byte	.LCFI0
ARM GAS  /tmp/ccvvhbBy.s 			page 116


 4163 0008 0200     		.2byte	0x2
 4164 000a 7D       		.byte	0x7d
 4165 000b 00       		.sleb128 0
 4166 000c 02000000 		.4byte	.LCFI0
 4167 0010 04000000 		.4byte	.LCFI1
 4168 0014 0200     		.2byte	0x2
 4169 0016 7D       		.byte	0x7d
 4170 0017 0C       		.sleb128 12
 4171 0018 04000000 		.4byte	.LCFI1
 4172 001c EC000000 		.4byte	.LFE16
 4173 0020 0200     		.2byte	0x2
 4174 0022 7D       		.byte	0x7d
 4175 0023 18       		.sleb128 24
 4176 0024 00000000 		.4byte	0
 4177 0028 00000000 		.4byte	0
 4178              	.LLST1:
 4179 002c 00000000 		.4byte	.LFB18
 4180 0030 02000000 		.4byte	.LCFI2
 4181 0034 0200     		.2byte	0x2
 4182 0036 7D       		.byte	0x7d
 4183 0037 00       		.sleb128 0
 4184 0038 02000000 		.4byte	.LCFI2
 4185 003c 04000000 		.4byte	.LCFI3
 4186 0040 0200     		.2byte	0x2
 4187 0042 7D       		.byte	0x7d
 4188 0043 04       		.sleb128 4
 4189 0044 04000000 		.4byte	.LCFI3
 4190 0048 48000000 		.4byte	.LFE18
 4191 004c 0200     		.2byte	0x2
 4192 004e 7D       		.byte	0x7d
 4193 004f 10       		.sleb128 16
 4194 0050 00000000 		.4byte	0
 4195 0054 00000000 		.4byte	0
 4196              	.LLST2:
 4197 0058 00000000 		.4byte	.LFB20
 4198 005c 02000000 		.4byte	.LCFI4
 4199 0060 0200     		.2byte	0x2
 4200 0062 7D       		.byte	0x7d
 4201 0063 00       		.sleb128 0
 4202 0064 02000000 		.4byte	.LCFI4
 4203 0068 04000000 		.4byte	.LCFI5
 4204 006c 0200     		.2byte	0x2
 4205 006e 7D       		.byte	0x7d
 4206 006f 0C       		.sleb128 12
 4207 0070 04000000 		.4byte	.LCFI5
 4208 0074 60070000 		.4byte	.LFE20
 4209 0078 0300     		.2byte	0x3
 4210 007a 7D       		.byte	0x7d
 4211 007b A001     		.sleb128 160
 4212 007d 00000000 		.4byte	0
 4213 0081 00000000 		.4byte	0
 4214              	.LLST3:
 4215 0085 00000000 		.4byte	.LFB21
 4216 0089 02000000 		.4byte	.LCFI6
 4217 008d 0200     		.2byte	0x2
 4218 008f 7D       		.byte	0x7d
 4219 0090 00       		.sleb128 0
ARM GAS  /tmp/ccvvhbBy.s 			page 117


 4220 0091 02000000 		.4byte	.LCFI6
 4221 0095 04000000 		.4byte	.LCFI7
 4222 0099 0200     		.2byte	0x2
 4223 009b 7D       		.byte	0x7d
 4224 009c 04       		.sleb128 4
 4225 009d 04000000 		.4byte	.LCFI7
 4226 00a1 B0000000 		.4byte	.LFE21
 4227 00a5 0300     		.2byte	0x3
 4228 00a7 7D       		.byte	0x7d
 4229 00a8 E000     		.sleb128 96
 4230 00aa 00000000 		.4byte	0
 4231 00ae 00000000 		.4byte	0
 4232              	.LLST4:
 4233 00b2 00000000 		.4byte	.LFB22
 4234 00b6 02000000 		.4byte	.LCFI8
 4235 00ba 0200     		.2byte	0x2
 4236 00bc 7D       		.byte	0x7d
 4237 00bd 00       		.sleb128 0
 4238 00be 02000000 		.4byte	.LCFI8
 4239 00c2 EC000000 		.4byte	.LFE22
 4240 00c6 0200     		.2byte	0x2
 4241 00c8 7D       		.byte	0x7d
 4242 00c9 08       		.sleb128 8
 4243 00ca 00000000 		.4byte	0
 4244 00ce 00000000 		.4byte	0
 4245              		.section	.debug_aranges,"",%progbits
 4246 0000 3C000000 		.4byte	0x3c
 4247 0004 0200     		.2byte	0x2
 4248 0006 00000000 		.4byte	.Ldebug_info0
 4249 000a 04       		.byte	0x4
 4250 000b 00       		.byte	0
 4251 000c 0000     		.2byte	0
 4252 000e 0000     		.2byte	0
 4253 0010 00000000 		.4byte	.LFB16
 4254 0014 EC000000 		.4byte	.LFE16-.LFB16
 4255 0018 00000000 		.4byte	.LFB18
 4256 001c 48000000 		.4byte	.LFE18-.LFB18
 4257 0020 00000000 		.4byte	.LFB20
 4258 0024 60070000 		.4byte	.LFE20-.LFB20
 4259 0028 00000000 		.4byte	.LFB21
 4260 002c B0000000 		.4byte	.LFE21-.LFB21
 4261 0030 00000000 		.4byte	.LFB22
 4262 0034 EC000000 		.4byte	.LFE22-.LFB22
 4263 0038 00000000 		.4byte	0
 4264 003c 00000000 		.4byte	0
 4265              		.section	.debug_ranges,"",%progbits
 4266              	.Ldebug_ranges0:
 4267 0000 00000000 		.4byte	.LFB16
 4268 0004 EC000000 		.4byte	.LFE16
 4269 0008 00000000 		.4byte	.LFB18
 4270 000c 48000000 		.4byte	.LFE18
 4271 0010 00000000 		.4byte	.LFB20
 4272 0014 60070000 		.4byte	.LFE20
 4273 0018 00000000 		.4byte	.LFB21
 4274 001c B0000000 		.4byte	.LFE21
 4275 0020 00000000 		.4byte	.LFB22
 4276 0024 EC000000 		.4byte	.LFE22
ARM GAS  /tmp/ccvvhbBy.s 			page 118


 4277 0028 00000000 		.4byte	0
 4278 002c 00000000 		.4byte	0
 4279              		.section	.debug_line,"",%progbits
 4280              	.Ldebug_line0:
 4281 0000 E0020000 		.section	.debug_str,"MS",%progbits,1
 4281      02003701 
 4281      00000201 
 4281      FB0E0D00 
 4281      01010101 
 4282              	.LASF153:
 4283 0000 735F6C63 		.ascii	"s_lcd\000"
 4283      6400
 4284              	.LASF125:
 4285 0006 67736D5F 		.ascii	"gsm_state_idle\000"
 4285      73746174 
 4285      655F6964 
 4285      6C6500
 4286              	.LASF140:
 4287 0015 7A65726F 		.ascii	"zero_current_loc\000"
 4287      5F637572 
 4287      72656E74 
 4287      5F6C6F63 
 4287      00
 4288              	.LASF183:
 4289 0026 70617261 		.ascii	"param_struct\000"
 4289      6D5F7374 
 4289      72756374 
 4289      00
 4290              	.LASF12:
 4291 0033 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4291      345F3135 
 4291      5F495251 
 4291      6E00
 4292              	.LASF83:
 4293 0041 42535252 		.ascii	"BSRR\000"
 4293      00
 4294              	.LASF11:
 4295 0046 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4295      325F335F 
 4295      4952516E 
 4295      00
 4296              	.LASF145:
 4297 0053 6D61696E 		.ascii	"main_state\000"
 4297      5F737461 
 4297      746500
 4298              	.LASF99:
 4299 005e 696E6974 		.ascii	"init_airplane0\000"
 4299      5F616972 
 4299      706C616E 
 4299      653000
 4300              	.LASF100:
 4301 006d 696E6974 		.ascii	"init_airplane1\000"
 4301      5F616972 
 4301      706C616E 
 4301      653100
 4302              	.LASF2:
 4303 007c 5356435F 		.ascii	"SVC_IRQn\000"
ARM GAS  /tmp/ccvvhbBy.s 			page 119


 4303      4952516E 
 4303      00
 4304              	.LASF154:
 4305 0085 62756666 		.ascii	"buffer\000"
 4305      657200
 4306              	.LASF121:
 4307 008c 67736D5F 		.ascii	"gsm_state_ready\000"
 4307      73746174 
 4307      655F7265 
 4307      61647900 
 4308              	.LASF129:
 4309 009c 67736D5F 		.ascii	"gsm_state_shutdown\000"
 4309      73746174 
 4309      655F7368 
 4309      7574646F 
 4309      776E00
 4310              	.LASF196:
 4311 00af 76706F74 		.ascii	"vpote\000"
 4311      6500
 4312              	.LASF105:
 4313 00b5 6D656173 		.ascii	"meas_go_airplane\000"
 4313      5F676F5F 
 4313      61697270 
 4313      6C616E65 
 4313      00
 4314              	.LASF47:
 4315 00c6 756E7369 		.ascii	"unsigned int\000"
 4315      676E6564 
 4315      20696E74 
 4315      00
 4316              	.LASF71:
 4317 00d3 4C4F4144 		.ascii	"LOAD\000"
 4317      00
 4318              	.LASF25:
 4319 00d8 54494D31 		.ascii	"TIM16_IRQn\000"
 4319      365F4952 
 4319      516E00
 4320              	.LASF189:
 4321 00e3 7463705F 		.ascii	"tcp_kalive_timer\000"
 4321      6B616C69 
 4321      76655F74 
 4321      696D6572 
 4321      00
 4322              	.LASF41:
 4323 00f4 5F5F696E 		.ascii	"__int32_t\000"
 4323      7433325F 
 4323      7400
 4324              	.LASF161:
 4325 00fe 72783262 		.ascii	"rx2buff\000"
 4325      75666600 
 4326              	.LASF8:
 4327 0106 464C4153 		.ascii	"FLASH_IRQn\000"
 4327      485F4952 
 4327      516E00
 4328              	.LASF163:
 4329 0111 72783162 		.ascii	"rx1buff\000"
 4329      75666600 
ARM GAS  /tmp/ccvvhbBy.s 			page 120


 4330              	.LASF72:
 4331 0119 43414C49 		.ascii	"CALIB\000"
 4331      4200
 4332              	.LASF108:
 4333 011f 696D6569 		.ascii	"imei\000"
 4333      00
 4334              	.LASF193:
 4335 0124 6D696E75 		.ascii	"minutes\000"
 4335      74657300 
 4336              	.LASF179:
 4337 012c 75736172 		.ascii	"usart2_pckt_ready\000"
 4337      74325F70 
 4337      636B745F 
 4337      72656164 
 4337      7900
 4338              	.LASF160:
 4339 013e 74783262 		.ascii	"tx2buff\000"
 4339      75666600 
 4340              	.LASF10:
 4341 0146 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4341      305F315F 
 4341      4952516E 
 4341      00
 4342              	.LASF190:
 4343 0153 74696D65 		.ascii	"timer_meas\000"
 4343      725F6D65 
 4343      617300
 4344              	.LASF180:
 4345 015e 75736172 		.ascii	"usart2_have_data\000"
 4345      74325F68 
 4345      6176655F 
 4345      64617461 
 4345      00
 4346              	.LASF122:
 4347 016f 67736D5F 		.ascii	"gsm_state_sending_conf\000"
 4347      73746174 
 4347      655F7365 
 4347      6E64696E 
 4347      675F636F 
 4348              	.LASF27:
 4349 0186 49324331 		.ascii	"I2C1_IRQn\000"
 4349      5F495251 
 4349      6E00
 4350              	.LASF3:
 4351 0190 50656E64 		.ascii	"PendSV_IRQn\000"
 4351      53565F49 
 4351      52516E00 
 4352              	.LASF141:
 4353 019c 6163756D 		.ascii	"acum_secs_index\000"
 4353      5F736563 
 4353      735F696E 
 4353      64657800 
 4354              	.LASF9:
 4355 01ac 5243435F 		.ascii	"RCC_IRQn\000"
 4355      4952516E 
 4355      00
 4356              	.LASF104:
ARM GAS  /tmp/ccvvhbBy.s 			page 121


 4357 01b5 6D656173 		.ascii	"meas_reporting1\000"
 4357      5F726570 
 4357      6F727469 
 4357      6E673100 
 4358              	.LASF51:
 4359 01c5 75696E74 		.ascii	"uint32_t\000"
 4359      33325F74 
 4359      00
 4360              	.LASF150:
 4361 01ce 6D656173 		.ascii	"meas_end\000"
 4361      5F656E64 
 4361      00
 4362              	.LASF52:
 4363 01d7 49534552 		.ascii	"ISER\000"
 4363      00
 4364              	.LASF159:
 4365 01dc 666C6F61 		.ascii	"float\000"
 4365      7400
 4366              	.LASF151:
 4367 01e2 68797374 		.ascii	"hyst\000"
 4367      00
 4368              	.LASF55:
 4369 01e7 52534552 		.ascii	"RSERVED1\000"
 4369      56454431 
 4369      00
 4370              	.LASF29:
 4371 01f0 53504931 		.ascii	"SPI1_IRQn\000"
 4371      5F495251 
 4371      6E00
 4372              	.LASF46:
 4373 01fa 6C6F6E67 		.ascii	"long long unsigned int\000"
 4373      206C6F6E 
 4373      6720756E 
 4373      7369676E 
 4373      65642069 
 4374              	.LASF68:
 4375 0211 44465352 		.ascii	"DFSR\000"
 4375      00
 4376              	.LASF177:
 4377 0216 75736172 		.ascii	"usart1_pckt_bytes\000"
 4377      74315F70 
 4377      636B745F 
 4377      62797465 
 4377      7300
 4378              	.LASF116:
 4379 0228 67736D5F 		.ascii	"gsm_state_reset\000"
 4379      73746174 
 4379      655F7265 
 4379      73657400 
 4380              	.LASF143:
 4381 0238 6163756D 		.ascii	"acum_hours\000"
 4381      5F686F75 
 4381      727300
 4382              	.LASF39:
 4383 0243 5F5F7569 		.ascii	"__uint16_t\000"
 4383      6E743136 
 4383      5F7400
ARM GAS  /tmp/ccvvhbBy.s 			page 122


 4384              	.LASF91:
 4385 024e 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE0\000"
 4385      434F554E 
 4385      54455253 
 4385      5F414E44 
 4385      5F50484F 
 4386              	.LASF92:
 4387 0266 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE1\000"
 4387      434F554E 
 4387      54455253 
 4387      5F414E44 
 4387      5F50484F 
 4388              	.LASF79:
 4389 027e 4D4F4445 		.ascii	"MODER\000"
 4389      5200
 4390              	.LASF77:
 4391 0284 43485345 		.ascii	"CHSELR\000"
 4391      4C5200
 4392              	.LASF175:
 4393 028b 75736172 		.ascii	"usart1_pckt_ready\000"
 4393      74315F70 
 4393      636B745F 
 4393      72656164 
 4393      7900
 4394              	.LASF34:
 4395 029d 4952516E 		.ascii	"IRQn_Type\000"
 4395      5F547970 
 4395      6500
 4396              	.LASF113:
 4397 02a7 74696D65 		.ascii	"timer_reportar\000"
 4397      725F7265 
 4397      706F7274 
 4397      617200
 4398              	.LASF32:
 4399 02b6 55534152 		.ascii	"USART2_IRQn\000"
 4399      54325F49 
 4399      52516E00 
 4400              	.LASF63:
 4401 02c2 43505549 		.ascii	"CPUID\000"
 4401      4400
 4402              	.LASF167:
 4403 02c8 74745F74 		.ascii	"tt_take_photo_sample\000"
 4403      616B655F 
 4403      70686F74 
 4403      6F5F7361 
 4403      6D706C65 
 4404              	.LASF128:
 4405 02dd 67736D5F 		.ascii	"gsm_state_disconnected\000"
 4405      73746174 
 4405      655F6469 
 4405      73636F6E 
 4405      6E656374 
 4406              	.LASF165:
 4407 02f4 74696D65 		.ascii	"timer_rep\000"
 4407      725F7265 
 4407      7000
 4408              	.LASF202:
ARM GAS  /tmp/ccvvhbBy.s 			page 123


 4409 02fe 53797354 		.ascii	"SysTick_Config\000"
 4409      69636B5F 
 4409      436F6E66 
 4409      696700
 4410              	.LASF76:
 4411 030d 534D5052 		.ascii	"SMPR\000"
 4411      00
 4412              	.LASF90:
 4413 0312 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4413      5A45524F 
 4413      5F435552 
 4413      52454E54 
 4413      00
 4414              	.LASF176:
 4415 0323 75736172 		.ascii	"usart1_have_data\000"
 4415      74315F68 
 4415      6176655F 
 4415      64617461 
 4415      00
 4416              	.LASF82:
 4417 0334 50555044 		.ascii	"PUPDR\000"
 4417      5200
 4418              	.LASF133:
 4419 033a 7469636B 		.ascii	"ticks\000"
 4419      7300
 4420              	.LASF118:
 4421 0340 67736D5F 		.ascii	"gsm_state_verify_fully_func\000"
 4421      73746174 
 4421      655F7665 
 4421      72696679 
 4421      5F66756C 
 4422              	.LASF87:
 4423 035c 63686172 		.ascii	"char\000"
 4423      00
 4424              	.LASF130:
 4425 0361 67736D5F 		.ascii	"gsm_state_stop_wait\000"
 4425      73746174 
 4425      655F7374 
 4425      6F705F77 
 4425      61697400 
 4426              	.LASF157:
 4427 0375 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4427      45524154 
 4427      5552455F 
 4427      56616C75 
 4427      6500
 4428              	.LASF65:
 4429 0387 41495243 		.ascii	"AIRCR\000"
 4429      5200
 4430              	.LASF164:
 4431 038d 74616B65 		.ascii	"take_temp_sample\000"
 4431      5F74656D 
 4431      705F7361 
 4431      6D706C65 
 4431      00
 4432              	.LASF21:
 4433 039e 54494D33 		.ascii	"TIM3_IRQn\000"
ARM GAS  /tmp/ccvvhbBy.s 			page 124


 4433      5F495251 
 4433      6E00
 4434              	.LASF14:
 4435 03a8 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4435      5F436861 
 4435      6E6E656C 
 4435      315F4952 
 4435      516E00
 4436              	.LASF144:
 4437 03bb 73686F77 		.ascii	"show_power\000"
 4437      5F706F77 
 4437      657200
 4438              	.LASF135:
 4439 03c6 62797465 		.ascii	"bytes_read\000"
 4439      735F7265 
 4439      616400
 4440              	.LASF98:
 4441 03d1 6D61696E 		.ascii	"main_state_t\000"
 4441      5F737461 
 4441      74655F74 
 4441      00
 4442              	.LASF24:
 4443 03de 54494D31 		.ascii	"TIM15_IRQn\000"
 4443      355F4952 
 4443      516E00
 4444              	.LASF48:
 4445 03e9 75696E74 		.ascii	"uint8_t\000"
 4445      385F7400 
 4446              	.LASF96:
 4447 03f1 57454C43 		.ascii	"WELCOME_GSM\000"
 4447      4F4D455F 
 4447      47534D00 
 4448              	.LASF178:
 4449 03fd 75736172 		.ascii	"usart2_mini_timeout\000"
 4449      74325F6D 
 4449      696E695F 
 4449      74696D65 
 4449      6F757400 
 4450              	.LASF162:
 4451 0411 74783162 		.ascii	"tx1buff\000"
 4451      75666600 
 4452              	.LASF181:
 4453 0419 75736172 		.ascii	"usart2_pckt_bytes\000"
 4453      74325F70 
 4453      636B745F 
 4453      62797465 
 4453      7300
 4454              	.LASF168:
 4455 042b 74745F72 		.ascii	"tt_relay_on_off\000"
 4455      656C6179 
 4455      5F6F6E5F 
 4455      6F666600 
 4456              	.LASF191:
 4457 043b 73656373 		.ascii	"secs\000"
 4457      00
 4458              	.LASF97:
 4459 0440 4C414D50 		.ascii	"LAMP_ON\000"
ARM GAS  /tmp/ccvvhbBy.s 			page 125


 4459      5F4F4E00 
 4460              	.LASF119:
 4461 0448 67736D5F 		.ascii	"gsm_state_wait_reg\000"
 4461      73746174 
 4461      655F7761 
 4461      69745F72 
 4461      656700
 4462              	.LASF78:
 4463 045b 4144435F 		.ascii	"ADC_TypeDef\000"
 4463      54797065 
 4463      44656600 
 4464              	.LASF45:
 4465 0467 6C6F6E67 		.ascii	"long long int\000"
 4465      206C6F6E 
 4465      6720696E 
 4465      7400
 4466              	.LASF5:
 4467 0475 57574447 		.ascii	"WWDG_IRQn\000"
 4467      5F495251 
 4467      6E00
 4468              	.LASF67:
 4469 047f 53484353 		.ascii	"SHCSR\000"
 4469      5200
 4470              	.LASF174:
 4471 0485 75736172 		.ascii	"usart1_mini_timeout\000"
 4471      74315F6D 
 4471      696E695F 
 4471      74696D65 
 4471      6F757400 
 4472              	.LASF94:
 4473 0499 53544152 		.ascii	"START_GSM\000"
 4473      545F4753 
 4473      4D00
 4474              	.LASF169:
 4475 04a3 73617665 		.ascii	"saved_mode\000"
 4475      645F6D6F 
 4475      646500
 4476              	.LASF200:
 4477 04ae 70617261 		.ascii	"parameters\000"
 4477      6D657465 
 4477      727300
 4478              	.LASF166:
 4479 04b9 74696D65 		.ascii	"timer_relay\000"
 4479      725F7265 
 4479      6C617900 
 4480              	.LASF88:
 4481 04c5 4D41494E 		.ascii	"MAIN_INIT\000"
 4481      5F494E49 
 4481      5400
 4482              	.LASF95:
 4483 04cf 434F4E46 		.ascii	"CONFIG_GSM\000"
 4483      49475F47 
 4483      534D00
 4484              	.LASF139:
 4485 04da 6C617374 		.ascii	"last_power\000"
 4485      5F706F77 
 4485      657200
ARM GAS  /tmp/ccvvhbBy.s 			page 126


 4486              	.LASF184:
 4487 04e5 73686F77 		.ascii	"show_power_index\000"
 4487      5F706F77 
 4487      65725F69 
 4487      6E646578 
 4487      00
 4488              	.LASF173:
 4489 04f6 7A65726F 		.ascii	"zero_current\000"
 4489      5F637572 
 4489      72656E74 
 4489      00
 4490              	.LASF13:
 4491 0503 54535F49 		.ascii	"TS_IRQn\000"
 4491      52516E00 
 4492              	.LASF18:
 4493 050b 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4493      5F42524B 
 4493      5F55505F 
 4493      5452475F 
 4493      434F4D5F 
 4494              	.LASF155:
 4495 0524 74656D70 		.ascii	"tempbuff\000"
 4495      62756666 
 4495      00
 4496              	.LASF201:
 4497 052d 4E564943 		.ascii	"NVIC_SetPriority\000"
 4497      5F536574 
 4497      5072696F 
 4497      72697479 
 4497      00
 4498              	.LASF6:
 4499 053e 5056445F 		.ascii	"PVD_IRQn\000"
 4499      4952516E 
 4499      00
 4500              	.LASF74:
 4501 0547 43464752 		.ascii	"CFGR1\000"
 4501      3100
 4502              	.LASF75:
 4503 054d 43464752 		.ascii	"CFGR2\000"
 4503      3200
 4504              	.LASF58:
 4505 0553 49435052 		.ascii	"ICPR\000"
 4505      00
 4506              	.LASF17:
 4507 0558 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4507      5F434F4D 
 4507      505F4952 
 4507      516E00
 4508              	.LASF149:
 4509 0567 636F756E 		.ascii	"counters_mode\000"
 4509      74657273 
 4509      5F6D6F64 
 4509      6500
 4510              	.LASF81:
 4511 0575 4F535045 		.ascii	"OSPEEDR\000"
 4511      45445200 
 4512              	.LASF73:
ARM GAS  /tmp/ccvvhbBy.s 			page 127


 4513 057d 53797354 		.ascii	"SysTick_Type\000"
 4513      69636B5F 
 4513      54797065 
 4513      00
 4514              	.LASF86:
 4515 058a 6C6F6E67 		.ascii	"long double\000"
 4515      20646F75 
 4515      626C6500 
 4516              	.LASF49:
 4517 0596 75696E74 		.ascii	"uint16_t\000"
 4517      31365F74 
 4517      00
 4518              	.LASF182:
 4519 059f 62756666 		.ascii	"buffUARTGSMrx2\000"
 4519      55415254 
 4519      47534D72 
 4519      783200
 4520              	.LASF131:
 4521 05ae 4952516E 		.ascii	"IRQn\000"
 4521      00
 4522              	.LASF185:
 4523 05b3 67736D4E 		.ascii	"gsmNUM\000"
 4523      554D00
 4524              	.LASF107:
 4525 05ba 6E756D5F 		.ascii	"num_reportar\000"
 4525      7265706F 
 4525      72746172 
 4525      00
 4526              	.LASF7:
 4527 05c7 5254435F 		.ascii	"RTC_IRQn\000"
 4527      4952516E 
 4527      00
 4528              	.LASF53:
 4529 05d0 52455345 		.ascii	"RESERVED0\000"
 4529      52564544 
 4529      3000
 4530              	.LASF66:
 4531 05da 52455345 		.ascii	"RESERVED1\000"
 4531      52564544 
 4531      3100
 4532              	.LASF57:
 4533 05e4 52455345 		.ascii	"RESERVED2\000"
 4533      52564544 
 4533      3200
 4534              	.LASF59:
 4535 05ee 52455345 		.ascii	"RESERVED3\000"
 4535      52564544 
 4535      3300
 4536              	.LASF60:
 4537 05f8 52455345 		.ascii	"RESERVED4\000"
 4537      52564544 
 4537      3400
 4538              	.LASF38:
 4539 0602 73686F72 		.ascii	"short int\000"
 4539      7420696E 
 4539      7400
 4540              	.LASF42:
ARM GAS  /tmp/ccvvhbBy.s 			page 128


 4541 060c 6C6F6E67 		.ascii	"long int\000"
 4541      20696E74 
 4541      00
 4542              	.LASF31:
 4543 0615 55534152 		.ascii	"USART1_IRQn\000"
 4543      54315F49 
 4543      52516E00 
 4544              	.LASF112:
 4545 0621 706F745F 		.ascii	"pot_instantanea\000"
 4545      696E7374 
 4545      616E7461 
 4545      6E656100 
 4546              	.LASF117:
 4547 0631 67736D5F 		.ascii	"gsm_state_verify_at\000"
 4547      73746174 
 4547      655F7665 
 4547      72696679 
 4547      5F617400 
 4548              	.LASF0:
 4549 0645 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4549      61736B61 
 4549      626C6549 
 4549      6E745F49 
 4549      52516E00 
 4550              	.LASF132:
 4551 0659 7072696F 		.ascii	"priority\000"
 4551      72697479 
 4551      00
 4552              	.LASF19:
 4553 0662 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4553      5F43435F 
 4553      4952516E 
 4553      00
 4554              	.LASF80:
 4555 066f 4F545950 		.ascii	"OTYPER\000"
 4555      455200
 4556              	.LASF187:
 4557 0676 77616974 		.ascii	"wait_ms_var\000"
 4557      5F6D735F 
 4557      76617200 
 4558              	.LASF103:
 4559 0682 6D656173 		.ascii	"meas_reporting0\000"
 4559      5F726570 
 4559      6F727469 
 4559      6E673000 
 4560              	.LASF26:
 4561 0692 54494D31 		.ascii	"TIM17_IRQn\000"
 4561      375F4952 
 4561      516E00
 4562              	.LASF89:
 4563 069d 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4563      48524F5F 
 4563      41444300 
 4564              	.LASF16:
 4565 06a9 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4565      5F436861 
 4565      6E6E656C 
ARM GAS  /tmp/ccvvhbBy.s 			page 129


 4565      345F355F 
 4565      4952516E 
 4566              	.LASF186:
 4567 06be 67736D4D 		.ascii	"gsmMSG\000"
 4567      534700
 4568              	.LASF192:
 4569 06c5 686F7572 		.ascii	"hours\000"
 4569      7300
 4570              	.LASF35:
 4571 06cb 5F5F7569 		.ascii	"__uint8_t\000"
 4571      6E74385F 
 4571      7400
 4572              	.LASF62:
 4573 06d5 4E564943 		.ascii	"NVIC_Type\000"
 4573      5F547970 
 4573      6500
 4574              	.LASF69:
 4575 06df 5343425F 		.ascii	"SCB_Type\000"
 4575      54797065 
 4575      00
 4576              	.LASF85:
 4577 06e8 4750494F 		.ascii	"GPIO_TypeDef\000"
 4577      5F547970 
 4577      65446566 
 4577      00
 4578              	.LASF101:
 4579 06f5 6D656173 		.ascii	"meas_init\000"
 4579      5F696E69 
 4579      7400
 4580              	.LASF147:
 4581 06ff 73656E64 		.ascii	"sended\000"
 4581      656400
 4582              	.LASF4:
 4583 0706 53797354 		.ascii	"SysTick_IRQn\000"
 4583      69636B5F 
 4583      4952516E 
 4583      00
 4584              	.LASF33:
 4585 0713 4345435F 		.ascii	"CEC_IRQn\000"
 4585      4952516E 
 4585      00
 4586              	.LASF61:
 4587 071c 73697A65 		.ascii	"sizetype\000"
 4587      74797065 
 4587      00
 4588              	.LASF64:
 4589 0725 49435352 		.ascii	"ICSR\000"
 4589      00
 4590              	.LASF28:
 4591 072a 49324332 		.ascii	"I2C2_IRQn\000"
 4591      5F495251 
 4591      6E00
 4592              	.LASF44:
 4593 0734 6C6F6E67 		.ascii	"long unsigned int\000"
 4593      20756E73 
 4593      69676E65 
 4593      6420696E 
ARM GAS  /tmp/ccvvhbBy.s 			page 130


 4593      7400
 4594              	.LASF111:
 4595 0746 6163756D 		.ascii	"acumm_diario\000"
 4595      6D5F6469 
 4595      6172696F 
 4595      00
 4596              	.LASF20:
 4597 0753 54494D32 		.ascii	"TIM2_IRQn\000"
 4597      5F495251 
 4597      6E00
 4598              	.LASF158:
 4599 075d 50524553 		.ascii	"PRESSURE_Value\000"
 4599      53555245 
 4599      5F56616C 
 4599      756500
 4600              	.LASF199:
 4601 076c 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4601      652F6D65 
 4601      642F446F 
 4601      63756D65 
 4601      6E74732F 
 4602 079f 6100     		.ascii	"a\000"
 4603              	.LASF156:
 4604 07a1 48554D49 		.ascii	"HUMIDITY_Value\000"
 4604      44495459 
 4604      5F56616C 
 4604      756500
 4605              	.LASF50:
 4606 07b0 696E7433 		.ascii	"int32_t\000"
 4606      325F7400 
 4607              	.LASF194:
 4608 07b8 706F7765 		.ascii	"power_vect\000"
 4608      725F7665 
 4608      637400
 4609              	.LASF171:
 4610 07c3 6164635F 		.ascii	"adc_ch\000"
 4610      636800
 4611              	.LASF23:
 4612 07ca 54494D31 		.ascii	"TIM14_IRQn\000"
 4612      345F4952 
 4612      516E00
 4613              	.LASF15:
 4614 07d5 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4614      5F436861 
 4614      6E6E656C 
 4614      325F335F 
 4614      4952516E 
 4615              	.LASF148:
 4616 07ea 6C616D70 		.ascii	"lamp_on_state\000"
 4616      5F6F6E5F 
 4616      73746174 
 4616      6500
 4617              	.LASF22:
 4618 07f8 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4618      5F444143 
 4618      5F495251 
 4618      6E00
ARM GAS  /tmp/ccvvhbBy.s 			page 131


 4619              	.LASF37:
 4620 0806 756E7369 		.ascii	"unsigned char\000"
 4620      676E6564 
 4620      20636861 
 4620      7200
 4621              	.LASF93:
 4622 0814 4C414D50 		.ascii	"LAMP_OFF\000"
 4622      5F4F4646 
 4622      00
 4623              	.LASF43:
 4624 081d 5F5F7569 		.ascii	"__uint32_t\000"
 4624      6E743332 
 4624      5F7400
 4625              	.LASF106:
 4626 0828 6C616D70 		.ascii	"lamp_on_state_t\000"
 4626      5F6F6E5F 
 4626      73746174 
 4626      655F7400 
 4627              	.LASF127:
 4628 0838 67736D5F 		.ascii	"gsm_state_connected\000"
 4628      73746174 
 4628      655F636F 
 4628      6E6E6563 
 4628      74656400 
 4629              	.LASF136:
 4630 084c 6E656564 		.ascii	"need_ack\000"
 4630      5F61636B 
 4630      00
 4631              	.LASF120:
 4632 0855 67736D5F 		.ascii	"gsm_state_verify_reg\000"
 4632      73746174 
 4632      655F7665 
 4632      72696679 
 4632      5F726567 
 4633              	.LASF126:
 4634 086a 67736D5F 		.ascii	"gsm_state_connecting\000"
 4634      73746174 
 4634      655F636F 
 4634      6E6E6563 
 4634      74696E67 
 4635              	.LASF110:
 4636 087f 6163756D 		.ascii	"acumm_historico\000"
 4636      6D5F6869 
 4636      73746F72 
 4636      69636F00 
 4637              	.LASF170:
 4638 088f 7361635F 		.ascii	"sac_aux\000"
 4638      61757800 
 4639              	.LASF205:
 4640 0897 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4640      6E674465 
 4640      6C61795F 
 4640      44656372 
 4640      656D656E 
 4641              	.LASF54:
 4642 08ad 49434552 		.ascii	"ICER\000"
 4642      00
ARM GAS  /tmp/ccvvhbBy.s 			page 132


 4643              	.LASF152:
 4644 08b2 6F6E655F 		.ascii	"one_to_ten\000"
 4644      746F5F74 
 4644      656E00
 4645              	.LASF30:
 4646 08bd 53504932 		.ascii	"SPI2_IRQn\000"
 4646      5F495251 
 4646      6E00
 4647              	.LASF123:
 4648 08c7 67736D5F 		.ascii	"gsm_state_sending_sms\000"
 4648      73746174 
 4648      655F7365 
 4648      6E64696E 
 4648      675F736D 
 4649              	.LASF204:
 4650 08dd 70726570 		.ascii	"prepare_json_pkt\000"
 4650      6172655F 
 4650      6A736F6E 
 4650      5F706B74 
 4650      00
 4651              	.LASF138:
 4652 08ee 706F7765 		.ascii	"power\000"
 4652      7200
 4653              	.LASF124:
 4654 08f4 67736D5F 		.ascii	"gsm_state_command_answer\000"
 4654      73746174 
 4654      655F636F 
 4654      6D6D616E 
 4654      645F616E 
 4655              	.LASF115:
 4656 090d 70617261 		.ascii	"parameters_typedef\000"
 4656      6D657465 
 4656      72735F74 
 4656      79706564 
 4656      656600
 4657              	.LASF36:
 4658 0920 7369676E 		.ascii	"signed char\000"
 4658      65642063 
 4658      68617200 
 4659              	.LASF198:
 4660 092c 7372632F 		.ascii	"src/main.c\000"
 4660      6D61696E 
 4660      2E6300
 4661              	.LASF40:
 4662 0937 73686F72 		.ascii	"short unsigned int\000"
 4662      7420756E 
 4662      7369676E 
 4662      65642069 
 4662      6E7400
 4663              	.LASF197:
 4664 094a 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4664      43313120 
 4664      352E322E 
 4664      31203230 
 4664      31353132 
 4665 097d 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4665      20726576 
ARM GAS  /tmp/ccvvhbBy.s 			page 133


 4665      6973696F 
 4665      6E203233 
 4665      31383438 
 4666 09b0 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4666      662D3220 
 4666      2D4F3020 
 4666      2D666F6D 
 4666      69742D66 
 4667 09e3 66756E63 		.ascii	"function-sections\000"
 4667      74696F6E 
 4667      2D736563 
 4667      74696F6E 
 4667      7300
 4668              	.LASF203:
 4669 09f5 6D61696E 		.ascii	"main\000"
 4669      00
 4670              	.LASF1:
 4671 09fa 48617264 		.ascii	"HardFault_IRQn\000"
 4671      4661756C 
 4671      745F4952 
 4671      516E00
 4672              	.LASF142:
 4673 0a09 6163756D 		.ascii	"acum_secs\000"
 4673      5F736563 
 4673      7300
 4674              	.LASF56:
 4675 0a13 49535052 		.ascii	"ISPR\000"
 4675      00
 4676              	.LASF137:
 4677 0a18 72657370 		.ascii	"resp\000"
 4677      00
 4678              	.LASF109:
 4679 0a1d 6E756D5F 		.ascii	"num_propio\000"
 4679      70726F70 
 4679      696F00
 4680              	.LASF172:
 4681 0a28 7365715F 		.ascii	"seq_ready\000"
 4681      72656164 
 4681      7900
 4682              	.LASF195:
 4683 0a32 7674656D 		.ascii	"vtemp\000"
 4683      7000
 4684              	.LASF114:
 4685 0a38 73656E64 		.ascii	"send_energy_flag\000"
 4685      5F656E65 
 4685      7267795F 
 4685      666C6167 
 4685      00
 4686              	.LASF102:
 4687 0a49 6D656173 		.ascii	"meas_meas\000"
 4687      5F6D6561 
 4687      7300
 4688              	.LASF188:
 4689 0a53 74696D65 		.ascii	"timer_standby\000"
 4689      725F7374 
 4689      616E6462 
 4689      7900
ARM GAS  /tmp/ccvvhbBy.s 			page 134


 4690              	.LASF134:
 4691 0a61 62797465 		.ascii	"bytes_remain\000"
 4691      735F7265 
 4691      6D61696E 
 4691      00
 4692              	.LASF84:
 4693 0a6e 4C434B52 		.ascii	"LCKR\000"
 4693      00
 4694              	.LASF70:
 4695 0a73 4354524C 		.ascii	"CTRL\000"
 4695      00
 4696              	.LASF146:
 4697 0a78 7265706F 		.ascii	"reportar_SMS\000"
 4697      72746172 
 4697      5F534D53 
 4697      00
 4698              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccvvhbBy.s 			page 135


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccvvhbBy.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccvvhbBy.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccvvhbBy.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccvvhbBy.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccvvhbBy.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccvvhbBy.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/ccvvhbBy.s:277    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccvvhbBy.s:274    .bss.take_temp_sample:00000000 $d
     /tmp/ccvvhbBy.s:284    .bss.timer_rep:00000000 timer_rep
     /tmp/ccvvhbBy.s:281    .bss.timer_rep:00000000 $d
     /tmp/ccvvhbBy.s:291    .bss.timer_relay:00000000 timer_relay
     /tmp/ccvvhbBy.s:288    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000006 adc_ch
     /tmp/ccvvhbBy.s:305    .bss.seq_ready:00000000 seq_ready
     /tmp/ccvvhbBy.s:306    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:00000054 param_struct
     /tmp/ccvvhbBy.s:322    .bss.show_power_index:00000000 show_power_index
     /tmp/ccvvhbBy.s:319    .bss.show_power_index:00000000 $d
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/ccvvhbBy.s:331    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccvvhbBy.s:328    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 timer_meas
     /tmp/ccvvhbBy.s:341    .bss.secs:00000000 secs
     /tmp/ccvvhbBy.s:338    .bss.secs:00000000 $d
     /tmp/ccvvhbBy.s:347    .bss.hours:00000000 hours
     /tmp/ccvvhbBy.s:348    .bss.hours:00000000 $d
     /tmp/ccvvhbBy.s:353    .bss.minutes:00000000 minutes
     /tmp/ccvvhbBy.s:354    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccvvhbBy.s:359    .rodata:00000000 $d
ARM GAS  /tmp/ccvvhbBy.s 			page 136


     /tmp/ccvvhbBy.s:412    .text.main:00000000 $t
     /tmp/ccvvhbBy.s:417    .text.main:00000000 main
     /tmp/ccvvhbBy.s:729    .rodata.main:00000000 $d
     /tmp/ccvvhbBy.s:1005   .text.main:00000394 $d
     /tmp/ccvvhbBy.s:1031   .text.main:000003f4 $t
     /tmp/ccvvhbBy.s:1550   .text.main:00000720 $d
     /tmp/ccvvhbBy.s:1586   .text.prepare_json_pkt:00000000 $t
     /tmp/ccvvhbBy.s:1591   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccvvhbBy.s:1683   .text.prepare_json_pkt:0000009c $d
     /tmp/ccvvhbBy.s:1692   .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccvvhbBy.s:1697   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccvvhbBy.s:1835   .text.TimingDelay_Decrement:000000cc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
GPIO_Config
strncpy
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
FuncsGSMStateAsk
FuncsGSMCommandAnswer
strlen
strcat
memcpy
FuncsGSMSendSMS
GetPhoto
RelayOn
GetHysteresis
RelayOff
GetNew1to10
ShowPower
GetVGrid
GetIGrid
PowerCalc
UpdateVGrid
UpdateIGrid
UpdateRelay
UpdatePhotoTransistor
FuncsGSM
sprintf
GSMTimeoutCounters
