ARM GAS  /tmp/ccZOHcVn.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccZOHcVn.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccZOHcVn.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccZOHcVn.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccZOHcVn.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccZOHcVn.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccZOHcVn.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccZOHcVn.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccZOHcVn.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccZOHcVn.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccZOHcVn.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccZOHcVn.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccZOHcVn.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccZOHcVn.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccZOHcVn.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccZOHcVn.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccZOHcVn.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccZOHcVn.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7205,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7206, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7207, D.7206
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7207, D.7207
  92 0026 083B     		subs	r3, r3, #8	@ D.7207,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7207, D.7207,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7205,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7206, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7207, D.7206
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7207, D.7207
 101 0038 083B     		subs	r3, r3, #8	@ D.7207,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7207, D.7207,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7205, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7207, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7206, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7207, D.7206
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7207, D.7207
 114 0052 D200     		lsls	r2, r2, #3	@ D.7207, D.7207,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7208, D.7208, D.7207
 117 0058 0200     		movs	r2, r0	@ D.7208, D.7208
 118 005a D243     		mvns	r2, r2	@ D.7208, D.7208
 119 005c 1A40     		ands	r2, r3	@ D.7207, D.7207
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7207, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7207, D.7207
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7206, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7207, D.7206
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7207, D.7207
ARM GAS  /tmp/ccZOHcVn.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7207, D.7207,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7207, D.7207, D.7207
 133 0076 0300     		movs	r3, r0	@ D.7207, D.7207
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7207, D.7207
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7207,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7205, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7207, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7209,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7207, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7207, D.7207
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7207, D.7207,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7209,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7207, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7207, D.7207
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7207, D.7207,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7207, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7206, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7207, D.7206
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7207, D.7207
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7207, D.7207,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7208, D.7208, D.7207
 169 00b6 0100     		movs	r1, r0	@ D.7208, D.7208
 170 00b8 C943     		mvns	r1, r1	@ D.7208, D.7208
 171 00ba 1140     		ands	r1, r2	@ D.7207, D.7207
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7207, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7207, D.7207
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7206, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7207, D.7206
ARM GAS  /tmp/ccZOHcVn.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7207, D.7207
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7207, D.7207,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7207, D.7207, D.7207
 185 00d4 0200     		movs	r2, r0	@ D.7207, D.7207
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7207, D.7207
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7207, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccZOHcVn.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7210,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7211,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7212, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7212,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7212, _6->LOAD
ARM GAS  /tmp/ccZOHcVn.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7211,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7211,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7210,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	take_temp_sample
 273              		.section	.bss.take_temp_sample,"aw",%nobits
 274              		.align	1
 275              		.type	take_temp_sample, %object
 276              		.size	take_temp_sample, 2
 277              	take_temp_sample:
 278 0000 0000     		.space	2
 279              		.global	timer_rep
 280              		.section	.bss.timer_rep,"aw",%nobits
 281              		.align	1
 282              		.type	timer_rep, %object
 283              		.size	timer_rep, 2
 284              	timer_rep:
 285 0000 0000     		.space	2
 286              		.global	timer_relay
 287              		.section	.bss.timer_relay,"aw",%nobits
ARM GAS  /tmp/ccZOHcVn.s 			page 23


 288              		.align	1
 289              		.type	timer_relay, %object
 290              		.size	timer_relay, 2
 291              	timer_relay:
 292 0000 0000     		.space	2
 293              		.comm	tt_take_photo_sample,2,2
 294              		.comm	tt_relay_on_off,2,2
 295              		.comm	saved_mode,1,1
 296              		.comm	s1,2,2
 297              		.comm	s2,2,2
 298              		.comm	sac,2,2
 299              		.comm	sac_aux,1,1
 300              		.comm	adc_ch,6,4
 301              		.global	seq_ready
 302              		.section	.bss.seq_ready,"aw",%nobits
 303              		.type	seq_ready, %object
 304              		.size	seq_ready, 1
 305              	seq_ready:
 306 0000 00       		.space	1
 307              		.comm	zero_current,2,2
 308              		.comm	usart1_mini_timeout,1,1
 309              		.comm	usart1_pckt_ready,1,1
 310              		.comm	usart1_have_data,1,1
 311              		.comm	usart1_pckt_bytes,1,1
 312              		.comm	usart2_mini_timeout,1,1
 313              		.comm	usart2_pckt_ready,1,1
 314              		.comm	usart2_have_data,1,1
 315              		.comm	usart2_pckt_bytes,1,1
 316              		.comm	param_struct,84,4
 317              		.comm	gsmNUM,20,4
 318              		.comm	gsmMSG,180,4
 319              		.global	wait_ms_var
 320              		.section	.bss.wait_ms_var,"aw",%nobits
 321              		.align	1
 322              		.type	wait_ms_var, %object
 323              		.size	wait_ms_var, 2
 324              	wait_ms_var:
 325 0000 0000     		.space	2
 326              		.comm	timer_standby,2,2
 327              		.comm	tcp_kalive_timer,2,2
 328              		.comm	filter_timer,1,1
 329              		.global	secs
 330              		.section	.bss.secs,"aw",%nobits
 331              		.align	1
 332              		.type	secs, %object
 333              		.size	secs, 2
 334              	secs:
 335 0000 0000     		.space	2
 336              		.global	hours
 337              		.section	.bss.hours,"aw",%nobits
 338              		.type	hours, %object
 339              		.size	hours, 1
 340              	hours:
 341 0000 00       		.space	1
 342              		.global	minutes
 343              		.section	.bss.minutes,"aw",%nobits
 344              		.type	minutes, %object
ARM GAS  /tmp/ccZOHcVn.s 			page 24


 345              		.size	minutes, 1
 346              	minutes:
 347 0000 00       		.space	1
 348              		.comm	power_vect,20,4
 349              		.comm	vtemp,34,4
 350              		.comm	vpote,34,4
 351              		.section	.rodata
 352              		.align	2
 353              	.LC1:
 354 0000 31313439 		.ascii	"1149867843\000"
 354      38363738 
 354      343300
 355 000b 00       		.align	2
 356              	.LC3:
 357 000c 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 357      726E6F20 
 357      506C6163 
 357      61205265 
 357      646F6E64 
 358 0031 000000   		.align	2
 359              	.LC5:
 360 0034 20204665 		.ascii	"  Features:\015\012\000"
 360      61747572 
 360      65733A0D 
 360      0A00
 361 0042 0000     		.align	2
 362              	.LC7:
 363 0044 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 363      6D6D6572 
 363      20312074 
 363      6F203130 
 363      560D0A00 
 364              		.align	2
 365              	.LC9:
 366 0058 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 366      67687420 
 366      48797374 
 366      65726573 
 366      69730D0A 
 367 006d 000000   		.align	2
 368              	.LC11:
 369 0070 20205379 		.ascii	"  Sync by ADC\015\012\000"
 369      6E632062 
 369      79204144 
 369      430D0A00 
 370              		.align	2
 371              	.LC13:
 372 0080 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 372      65732047 
 372      534D2066 
 372      6F722053 
 372      4D532064 
 373 009a 0000     		.align	2
 374              	.LC18:
 375 009c 47657474 		.ascii	"Getted\015\012\000"
 375      65640D0A 
 375      00
ARM GAS  /tmp/ccZOHcVn.s 			page 25


 376 00a5 000000   		.align	2
 377              	.LC20:
 378 00a8 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 378      696E6720 
 378      47534D20 
 378      53746172 
 378      74757020 
 379 00cf 00       		.align	2
 380              	.LC24:
 381 00d0 5265706F 		.ascii	"Reports by SMS\015\012\000"
 381      72747320 
 381      62792053 
 381      4D530D0A 
 381      00
 382 00e1 000000   		.align	2
 383              	.LC26:
 384 00e4 41542B47 		.ascii	"AT+GSN\015\012\000"
 384      534E0D0A 
 384      00
 385 00ed 000000   		.align	2
 386              	.LC29:
 387 00f0 494D4549 		.ascii	"IMEI: \000"
 387      3A2000
 388 00f7 00       		.align	2
 389              	.LC31:
 390 00f8 0D0A00   		.ascii	"\015\012\000"
 391 00fb 00       		.align	2
 392              	.LC33:
 393 00fc 2C204143 		.ascii	", ACTIVO\000"
 393      5449564F 
 393      00
 394 0105 000000   		.align	2
 395              	.LC36:
 396 0108 5052454E 		.ascii	"PRENDIDO\000"
 396      4449444F 
 396      00
 397 0111 000000   		.align	2
 398              	.LC40:
 399 0114 41504147 		.ascii	"APAGADO\000"
 399      41444F00 
 400              		.global	__aeabi_i2d
 401              		.global	__aeabi_dmul
 402              		.global	__aeabi_d2f
 403              		.global	__aeabi_f2uiz
 404              		.global	__aeabi_i2f
 405              		.global	__aeabi_fsub
 406              		.global	__aeabi_fmul
 407              		.global	__aeabi_uidiv
 408              		.global	__aeabi_ui2d
 409              		.align	2
 410              	.LC43:
 411 011c 70693A20 		.ascii	"pi: %3d.%02d wh: %3d.%01d\015\012\000"
 411      2533642E 
 411      25303264 
 411      2077683A 
 411      20253364 
 412              		.section	.text.main,"ax",%progbits
ARM GAS  /tmp/ccZOHcVn.s 			page 26


 413              		.align	2
 414              		.global	main
 415              		.code	16
 416              		.thumb_func
 417              		.type	main, %function
 418              	main:
 419              	.LFB20:
 420              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
ARM GAS  /tmp/ccZOHcVn.s 			page 27


  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** // volatile unsigned char switches_timer = 0;
  72:src/main.c    **** //
  73:src/main.c    **** //
  74:src/main.c    **** // volatile unsigned short scroll1_timer = 0;
  75:src/main.c    **** // volatile unsigned short scroll2_timer = 0;
  76:src/main.c    **** //
  77:src/main.c    **** // volatile unsigned short standalone_timer;
  78:src/main.c    **** // volatile unsigned short standalone_enable_menu_timer;
  79:src/main.c    **** // //volatile unsigned short standalone_menu_timer;
  80:src/main.c    **** // volatile unsigned char grouped_master_timeout_timer;
  81:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  82:src/main.c    **** volatile unsigned short timer_rep = 0;
  83:src/main.c    **** // volatile unsigned char timer_wifi_bright = 0;
  84:src/main.c    **** 
  85:src/main.c    **** #ifdef USE_REDONDA_BASIC
  86:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  87:src/main.c    **** 
  88:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  89:src/main.c    **** volatile unsigned short tt_relay_on_off;
  90:src/main.c    **** #endif
  91:src/main.c    **** 
  92:src/main.c    **** 
  93:src/main.c    **** unsigned char saved_mode;
  94:src/main.c    **** 
  95:src/main.c    **** 
  96:src/main.c    **** // ------- Externals de los switches -------
  97:src/main.c    **** unsigned short s1;
  98:src/main.c    **** unsigned short s2;
  99:src/main.c    **** unsigned short sac;
 100:src/main.c    **** unsigned char sac_aux;
 101:src/main.c    **** 
 102:src/main.c    **** // ------- Externals de los switches -------
 103:src/main.c    **** #ifdef ADC_WITH_INT
 104:src/main.c    **** volatile unsigned short adc_ch[3];
 105:src/main.c    **** volatile unsigned char seq_ready = 0;
 106:src/main.c    **** unsigned short zero_current;
ARM GAS  /tmp/ccZOHcVn.s 			page 28


 107:src/main.c    **** #endif
 108:src/main.c    **** 
 109:src/main.c    **** // ------- Externals del GPS & GSM -------
 110:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 111:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 112:src/main.c    **** volatile unsigned char usart1_have_data;
 113:src/main.c    **** unsigned char usart1_pckt_bytes;
 114:src/main.c    **** 
 115:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 116:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 117:src/main.c    **** #define gps_have_data		usart1_have_data
 118:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 119:src/main.c    **** 
 120:src/main.c    **** #ifdef USE_GPS
 121:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 122:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 123:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 124:src/main.c    **** volatile unsigned char usart2_have_data;
 125:src/main.c    **** unsigned char usart2_pckt_bytes;
 126:src/main.c    **** 
 127:src/main.c    **** #endif
 128:src/main.c    **** 
 129:src/main.c    **** // ------- Externals del GSM -------
 130:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 131:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 132:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 133:src/main.c    **** #define gsm_have_data		usart1_have_data
 134:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 135:src/main.c    **** 
 136:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 137:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 138:src/main.c    **** volatile unsigned char usart2_have_data;
 139:src/main.c    **** unsigned char usart2_pckt_bytes;
 140:src/main.c    **** 
 141:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 142:src/main.c    **** #endif
 143:src/main.c    **** 
 144:src/main.c    **** parameters_typedef param_struct;
 145:src/main.c    **** 
 146:src/main.c    **** //--- VARIABLES GLOBALES ---//
 147:src/main.c    **** 
 148:src/main.c    **** 
 149:src/main.c    **** //para las mediciones
 150:src/main.c    **** // unsigned int power_2secs_acum = 0;
 151:src/main.c    **** // unsigned char power_2secs_index = 0;
 152:src/main.c    **** // unsigned short power_minutes = 0;
 153:src/main.c    **** // unsigned char power_minutes_index = 0;
 154:src/main.c    **** // unsigned short power_hours = 0;
 155:src/main.c    **** 
 156:src/main.c    **** //para los msjs GSM
 157:src/main.c    **** char gsmNUM [20];
 158:src/main.c    **** char gsmMSG [180];
 159:src/main.c    **** 
 160:src/main.c    **** 
 161:src/main.c    **** 
 162:src/main.c    **** 
 163:src/main.c    **** 
ARM GAS  /tmp/ccZOHcVn.s 			page 29


 164:src/main.c    **** 
 165:src/main.c    **** // ------- de los timers -------
 166:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 167:src/main.c    **** volatile unsigned short timer_standby;
 168:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 169:src/main.c    **** //volatile unsigned char display_timer;
 170:src/main.c    **** volatile unsigned char filter_timer;
 171:src/main.c    **** 
 172:src/main.c    **** //volatile unsigned char door_filter;
 173:src/main.c    **** //volatile unsigned char take_sample;
 174:src/main.c    **** //volatile unsigned char move_relay;
 175:src/main.c    **** #ifdef WITH_HYST
 176:src/main.c    **** volatile unsigned short secs = 0;
 177:src/main.c    **** volatile unsigned char hours = 0;
 178:src/main.c    **** volatile unsigned char minutes = 0;
 179:src/main.c    **** #endif
 180:src/main.c    **** 
 181:src/main.c    **** #define SIZEOF_POWER_VECT		10
 182:src/main.c    **** 
 183:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 184:src/main.c    **** 
 185:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 186:src/main.c    **** void TimingDelay_Decrement(void);
 187:src/main.c    **** 
 188:src/main.c    **** // ------- del DMX -------
 189:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 190:src/main.c    **** #define DMX_TIMEOUT	20
 191:src/main.c    **** 
 192:src/main.c    **** //--- FILTROS DE SENSORES ---//
 193:src/main.c    **** #define LARGO_FILTRO 16
 194:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 195:src/main.c    **** //#define LARGO_FILTRO 32
 196:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 197:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 198:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 199:src/main.c    **** 
 200:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 201:src/main.c    **** 
 202:src/main.c    **** // #define KW			0.009721
 203:src/main.c    **** // #define KW			0.00945
 204:src/main.c    **** // #define KW			0.00959
 205:src/main.c    **** #define KW			0.01013
 206:src/main.c    **** 
 207:src/main.c    **** //--- Private Definitions ---//
 208:src/main.c    **** #define num_tel_rep		param_struct.num_reportar
 209:src/main.c    **** 
 210:src/main.c    **** 
 211:src/main.c    **** //-------------------------------------------//
 212:src/main.c    **** // @brief  Main program.
 213:src/main.c    **** // @param  None
 214:src/main.c    **** // @retval None
 215:src/main.c    **** //------------------------------------------//
 216:src/main.c    **** int main(void)
 217:src/main.c    **** {
 421              		.loc 2 217 0
 422              		.cfi_startproc
 423 0000 30B5     		push	{r4, r5, lr}	@
ARM GAS  /tmp/ccZOHcVn.s 			page 30


 424              	.LCFI4:
 425              		.cfi_def_cfa_offset 12
 426              		.cfi_offset 4, -12
 427              		.cfi_offset 5, -8
 428              		.cfi_offset 14, -4
 429 0002 A9B0     		sub	sp, sp, #164	@,,
 430              	.LCFI5:
 431              		.cfi_def_cfa_offset 176
 218:src/main.c    **** 	unsigned char i, ii;
 219:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 432              		.loc 2 219 0
 433 0004 8223     		movs	r3, #130	@ tmp199,
 434 0006 6B44     		add	r3, r3, sp	@ tmp199,
 435 0008 0022     		movs	r2, #0	@ tmp200,
 436 000a 1A70     		strb	r2, [r3]	@ tmp201, need_ack
 220:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 437              		.loc 2 220 0
 438 000c 8123     		movs	r3, #129	@ tmp202,
 439 000e 6B44     		add	r3, r3, sp	@ tmp202,
 440 0010 0022     		movs	r2, #0	@ tmp203,
 441 0012 1A70     		strb	r2, [r3]	@ tmp204, resp
 221:src/main.c    **** 	unsigned short power_int, power_dec;
 222:src/main.c    **** 	unsigned short wh_int, wh_dec;
 223:src/main.c    **** 	unsigned short power, last_power;
 224:src/main.c    **** 	float fcalc = 1.0;
 442              		.loc 2 224 0
 443 0014 FE23     		movs	r3, #254	@ tmp205,
 444 0016 9B05     		lsls	r3, r3, #22	@ tmp205, tmp205,
 445 0018 1F93     		str	r3, [sp, #124]	@ tmp205, fcalc
 225:src/main.c    **** 	unsigned int zero_current_loc = 0;
 446              		.loc 2 225 0
 447 001a 0023     		movs	r3, #0	@ tmp206,
 448 001c 2593     		str	r3, [sp, #148]	@ tmp206, zero_current_loc
 226:src/main.c    **** 
 227:src/main.c    **** 	unsigned short acum_secs_index;
 228:src/main.c    **** 	unsigned int acum_secs, acum_hours;
 229:src/main.c    **** 	unsigned char show_power_index = 0;
 449              		.loc 2 229 0
 450 001e 8723     		movs	r3, #135	@ tmp207,
 451 0020 6B44     		add	r3, r3, sp	@ tmp207,
 452 0022 0022     		movs	r2, #0	@ tmp208,
 453 0024 1A70     		strb	r2, [r3]	@ tmp209, show_power_index
 230:src/main.c    **** 	unsigned char show_power = 0;
 454              		.loc 2 230 0
 455 0026 7B23     		movs	r3, #123	@ tmp210,
 456 0028 6B44     		add	r3, r3, sp	@ tmp210,
 457 002a 0022     		movs	r2, #0	@ tmp211,
 458 002c 1A70     		strb	r2, [r3]	@ tmp212, show_power
 231:src/main.c    **** 
 232:src/main.c    **** #ifdef USE_REDONDA_BASIC
 233:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 459              		.loc 2 233 0
 460 002e 8623     		movs	r3, #134	@ tmp213,
 461 0030 6B44     		add	r3, r3, sp	@ tmp213,
 462 0032 0022     		movs	r2, #0	@ tmp214,
 463 0034 1A70     		strb	r2, [r3]	@ tmp215, main_state
 234:src/main.c    **** 	unsigned char reportar_SMS = 0;
ARM GAS  /tmp/ccZOHcVn.s 			page 31


 464              		.loc 2 234 0
 465 0036 7A23     		movs	r3, #122	@ tmp216,
 466 0038 6B44     		add	r3, r3, sp	@ tmp216,
 467 003a 0022     		movs	r2, #0	@ tmp217,
 468 003c 1A70     		strb	r2, [r3]	@ tmp218, reportar_SMS
 235:src/main.c    **** 	unsigned char sended = 0;
 469              		.loc 2 235 0
 470 003e 7923     		movs	r3, #121	@ tmp219,
 471 0040 6B44     		add	r3, r3, sp	@ tmp219,
 472 0042 0022     		movs	r2, #0	@ tmp220,
 473 0044 1A70     		strb	r2, [r3]	@ tmp221, sended
 236:src/main.c    **** 	lamp_on_state_t lamp_on_state = init_airplane0;
 474              		.loc 2 236 0
 475 0046 8523     		movs	r3, #133	@ tmp222,
 476 0048 6B44     		add	r3, r3, sp	@ tmp222,
 477 004a 0022     		movs	r2, #0	@ tmp223,
 478 004c 1A70     		strb	r2, [r3]	@ tmp224, lamp_on_state
 237:src/main.c    **** 	unsigned char counters_mode = 0;
 479              		.loc 2 237 0
 480 004e 21AB     		add	r3, sp, #132	@ tmp225,,
 481 0050 0022     		movs	r2, #0	@ tmp226,
 482 0052 1A70     		strb	r2, [r3]	@ tmp227, counters_mode
 238:src/main.c    **** 	unsigned char meas_end = 0;
 483              		.loc 2 238 0
 484 0054 8323     		movs	r3, #131	@ tmp228,
 485 0056 6B44     		add	r3, r3, sp	@ tmp228,
 486 0058 0022     		movs	r2, #0	@ tmp229,
 487 005a 1A70     		strb	r2, [r3]	@ tmp230, meas_end
 239:src/main.c    **** 
 240:src/main.c    **** #ifdef WITH_HYST
 241:src/main.c    **** 	unsigned short hyst;
 242:src/main.c    **** #endif
 243:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 244:src/main.c    **** 	unsigned char one_to_ten;
 245:src/main.c    **** #endif
 246:src/main.c    **** 
 247:src/main.c    **** #else		//USE_REDONDA_BASIC
 248:src/main.c    **** 	unsigned char main_state = 0;
 249:src/main.c    **** #endif
 250:src/main.c    **** 	char s_lcd [100];		//lo agrando porque lo uso tambien para enviar SMS
 251:src/main.c    **** 	// enum TcpMessages tcp_msg = NONE_MSG;
 252:src/main.c    **** 	// unsigned char new_room = 0;
 253:src/main.c    **** 	// unsigned char new_lamp = 0;
 254:src/main.c    **** 	// unsigned char last_bright = 0;
 255:src/main.c    **** 	// unsigned char show_ldr = 0;
 256:src/main.c    **** 	// int dummy_resp = 0;
 257:src/main.c    **** 	// unsigned char pps_one = 0;
 258:src/main.c    **** 
 259:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 260:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 261:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 262:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 263:src/main.c    ****     //   system_stm32f0xx.c file
 264:src/main.c    **** 
 265:src/main.c    **** 	//GPIO Configuration.
 266:src/main.c    **** 	GPIO_Config();
 488              		.loc 2 266 0
ARM GAS  /tmp/ccZOHcVn.s 			page 32


 489 005c FFF7FEFF 		bl	GPIO_Config	@
 267:src/main.c    **** 
 268:src/main.c    **** 
 269:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 270:src/main.c    **** 	if (SysTick_Config(48000))
 490              		.loc 2 270 0
 491 0060 D14B     		ldr	r3, .L70	@ tmp231,
 492 0062 1800     		movs	r0, r3	@, tmp231
 493 0064 FFF7FEFF 		bl	SysTick_Config	@
 494 0068 031E     		subs	r3, r0, #0	@ D.7213,,
 495 006a 28D0     		beq	.L13	@,
 496              	.L18:
 271:src/main.c    **** 	{
 272:src/main.c    **** 		while (1)	/* Capture error */
 273:src/main.c    **** 		{
 274:src/main.c    **** 			if (LED)
 497              		.loc 2 274 0
 498 006c 9023     		movs	r3, #144	@ tmp644,
 499 006e DB05     		lsls	r3, r3, #23	@ D.7214, tmp644,
 500 0070 9B8A     		ldrh	r3, [r3, #20]	@ tmp233,
 501 0072 9BB2     		uxth	r3, r3	@ D.7215, tmp233
 502 0074 1A00     		movs	r2, r3	@ D.7216, D.7215
 503 0076 8023     		movs	r3, #128	@ tmp645,
 504 0078 5B01     		lsls	r3, r3, #5	@ tmp234, tmp645,
 505 007a 1340     		ands	r3, r2	@ D.7216, D.7216
 506 007c 05D0     		beq	.L14	@,
 275:src/main.c    **** 				LED_OFF;
 507              		.loc 2 275 0
 508 007e 9023     		movs	r3, #144	@ tmp642,
 509 0080 DB05     		lsls	r3, r3, #23	@ D.7214, tmp642,
 510 0082 8022     		movs	r2, #128	@ tmp643,
 511 0084 5205     		lsls	r2, r2, #21	@ tmp235, tmp643,
 512 0086 9A61     		str	r2, [r3, #24]	@ tmp235, _112->BSRR
 513 0088 04E0     		b	.L15	@
 514              	.L14:
 276:src/main.c    **** 			else
 277:src/main.c    **** 				LED_ON;
 515              		.loc 2 277 0
 516 008a 9023     		movs	r3, #144	@ tmp640,
 517 008c DB05     		lsls	r3, r3, #23	@ D.7214, tmp640,
 518 008e 8022     		movs	r2, #128	@ tmp641,
 519 0090 5201     		lsls	r2, r2, #5	@ tmp236, tmp641,
 520 0092 9A61     		str	r2, [r3, #24]	@ tmp236, _114->BSRR
 521              	.L15:
 278:src/main.c    **** 
 279:src/main.c    **** 			for (i = 0; i < 255; i++)
 522              		.loc 2 279 0
 523 0094 9F23     		movs	r3, #159	@ tmp237,
 524 0096 6B44     		add	r3, r3, sp	@ tmp237,
 525 0098 0022     		movs	r2, #0	@ tmp238,
 526 009a 1A70     		strb	r2, [r3]	@ tmp239, i
 527 009c 09E0     		b	.L16	@
 528              	.L17:
 280:src/main.c    **** 			{
 281:src/main.c    **** 				asm (	"nop \n\t"
 529              		.loc 2 281 0 discriminator 3
 530              		.syntax divided
ARM GAS  /tmp/ccZOHcVn.s 			page 33


 531              	@ 281 "src/main.c" 1
 532 009e C046     		nop 
 533 00a0 C046     		nop 
 534 00a2 C046     		nop 
 535              		
 536              	@ 0 "" 2
 279:src/main.c    **** 			{
 537              		.loc 2 279 0 discriminator 3
 538              		.thumb
 539              		.syntax unified
 540 00a4 9F23     		movs	r3, #159	@ tmp240,
 541 00a6 6B44     		add	r3, r3, sp	@ tmp240,
 542 00a8 1A78     		ldrb	r2, [r3]	@ D.7217, i
 543 00aa 9F23     		movs	r3, #159	@ tmp241,
 544 00ac 6B44     		add	r3, r3, sp	@ tmp241,
 545 00ae 0132     		adds	r2, r2, #1	@ tmp242,
 546 00b0 1A70     		strb	r2, [r3]	@ tmp243, i
 547              	.L16:
 279:src/main.c    **** 			{
 548              		.loc 2 279 0 is_stmt 0 discriminator 1
 549 00b2 9F23     		movs	r3, #159	@ tmp244,
 550 00b4 6B44     		add	r3, r3, sp	@ tmp244,
 551 00b6 1B78     		ldrb	r3, [r3]	@ tmp245, i
 552 00b8 FF2B     		cmp	r3, #255	@ tmp245,
 553 00ba F0D1     		bne	.L17	@,
 282:src/main.c    **** 						"nop \n\t"
 283:src/main.c    **** 						"nop \n\t" );
 284:src/main.c    **** 			}
 285:src/main.c    **** 		}
 554              		.loc 2 285 0 is_stmt 1
 555 00bc D6E7     		b	.L18	@
 556              	.L13:
 286:src/main.c    **** 	}
 287:src/main.c    **** 
 288:src/main.c    **** 
 289:src/main.c    **** 	//ADC Configuration
 290:src/main.c    **** //	AdcConfig();
 291:src/main.c    **** 
 292:src/main.c    **** 	//TIM Configuration.
 293:src/main.c    **** 	// TIM_3_Init();
 294:src/main.c    **** //	TIM_14_Init();
 295:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 296:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 297:src/main.c    **** 
 298:src/main.c    **** //	EXTIOff ();
 299:src/main.c    **** 
 300:src/main.c    **** 	// while (1)
 301:src/main.c    **** 	// {
 302:src/main.c    **** 	// 	// if (SYNCP)
 303:src/main.c    **** 	// 	// {
 304:src/main.c    **** 	// 	// 	SYNCP_OFF;
 305:src/main.c    **** 	// 	// 	LED_OFF;
 306:src/main.c    **** 	// 	// }
 307:src/main.c    **** 	// 	// else
 308:src/main.c    **** 	// 	// {
 309:src/main.c    **** 	// 	// 	SYNCP_ON;
 310:src/main.c    **** 	// 	// 	LED_ON;
ARM GAS  /tmp/ccZOHcVn.s 			page 34


 311:src/main.c    **** 	// 	// }
 312:src/main.c    **** 	// 	// Wait_ms(10);
 313:src/main.c    **** 	//
 314:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 315:src/main.c    **** 	// 	// {
 316:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 317:src/main.c    **** 	// 	// 	Wait_ms (10);
 318:src/main.c    **** 	// 	// }
 319:src/main.c    **** 	// }
 320:src/main.c    **** 
 321:src/main.c    **** //		while (1)
 322:src/main.c    **** //		{
 323:src/main.c    **** //			PIN3_OFF;
 324:src/main.c    **** //			Wait_ms (10);
 325:src/main.c    **** //			PIN3_ON;
 326:src/main.c    **** //			Wait_ms (10);
 327:src/main.c    **** //		}
 328:src/main.c    **** 
 329:src/main.c    **** 	//--- Leo los parametros de memoria ---//
 330:src/main.c    **** #ifdef USE_REDONDA_BASIC
 331:src/main.c    **** 	param_struct.acumm_historico = ((parameters_typedef *) (unsigned int *) PAGE63)->acumm_historico;
 557              		.loc 2 331 0
 558 00be BB4B     		ldr	r3, .L70+4	@ D.7218,
 559 00c0 9A6C     		ldr	r2, [r3, #72]	@ D.7219, _119->acumm_historico
 560 00c2 BB4B     		ldr	r3, .L70+8	@ tmp246,
 561 00c4 9A64     		str	r2, [r3, #72]	@ D.7219, param_struct.acumm_historico
 332:src/main.c    **** 	if (param_struct.acumm_historico != 0xFFFFFFFF)
 562              		.loc 2 332 0
 563 00c6 BA4B     		ldr	r3, .L70+8	@ tmp247,
 564 00c8 9B6C     		ldr	r3, [r3, #72]	@ D.7219, param_struct.acumm_historico
 565 00ca 0133     		adds	r3, r3, #1	@ tmp646, D.7219,
 566 00cc 10D0     		beq	.L19	@,
 333:src/main.c    **** 	{
 334:src/main.c    **** 		//memoria no vacia
 335:src/main.c    **** 		strncpy( param_struct.num_reportar,
 567              		.loc 2 335 0
 568 00ce B749     		ldr	r1, .L70+4	@ tmp248,
 569 00d0 B74B     		ldr	r3, .L70+8	@ tmp249,
 570 00d2 1822     		movs	r2, #24	@,
 571 00d4 1800     		movs	r0, r3	@, tmp249
 572 00d6 FFF7FEFF 		bl	strncpy	@
 336:src/main.c    **** 					((parameters_typedef *) (char *) PAGE63)->num_reportar,
 337:src/main.c    **** 					sizeof(param_struct.num_reportar));
 338:src/main.c    **** 
 339:src/main.c    **** 
 340:src/main.c    **** 		param_struct.timer_reportar = ((parameters_typedef *) (unsigned int *) PAGE63)->timer_reportar;
 573              		.loc 2 340 0
 574 00da B44A     		ldr	r2, .L70+4	@ D.7218,
 575 00dc 5223     		movs	r3, #82	@ tmp250,
 576 00de D15C     		ldrb	r1, [r2, r3]	@ D.7217,
 577 00e0 B34B     		ldr	r3, .L70+8	@ tmp251,
 578 00e2 5222     		movs	r2, #82	@ tmp252,
 579 00e4 9954     		strb	r1, [r3, r2]	@ tmp253, param_struct.timer_reportar
 341:src/main.c    **** 		reportar_SMS = 1;
 580              		.loc 2 341 0
 581 00e6 7A23     		movs	r3, #122	@ tmp254,
 582 00e8 6B44     		add	r3, r3, sp	@ tmp254,
ARM GAS  /tmp/ccZOHcVn.s 			page 35


 583 00ea 0122     		movs	r2, #1	@ tmp255,
 584 00ec 1A70     		strb	r2, [r3]	@ tmp256, reportar_SMS
 585 00ee 12E0     		b	.L20	@
 586              	.L19:
 342:src/main.c    **** 	}
 343:src/main.c    **** 	else
 344:src/main.c    **** 	{
 345:src/main.c    **** 		//memoria vacia
 346:src/main.c    **** 		param_struct.acumm_historico = 0;
 587              		.loc 2 346 0
 588 00f0 AF4B     		ldr	r3, .L70+8	@ tmp257,
 589 00f2 0022     		movs	r2, #0	@ tmp258,
 590 00f4 9A64     		str	r2, [r3, #72]	@ tmp258, param_struct.acumm_historico
 347:src/main.c    **** 		param_struct.timer_reportar = 2;
 591              		.loc 2 347 0
 592 00f6 AE4B     		ldr	r3, .L70+8	@ tmp259,
 593 00f8 5222     		movs	r2, #82	@ tmp260,
 594 00fa 0221     		movs	r1, #2	@ tmp261,
 595 00fc 9954     		strb	r1, [r3, r2]	@ tmp262, param_struct.timer_reportar
 348:src/main.c    **** 		reportar_SMS = 0;
 596              		.loc 2 348 0
 597 00fe 7A23     		movs	r3, #122	@ tmp263,
 598 0100 6B44     		add	r3, r3, sp	@ tmp263,
 599 0102 0022     		movs	r2, #0	@ tmp264,
 600 0104 1A70     		strb	r2, [r3]	@ tmp265, reportar_SMS
 349:src/main.c    **** 		strcpy( param_struct.num_reportar, "1149867843");	//segund asim de claro
 601              		.loc 2 349 0
 602 0106 AA4B     		ldr	r3, .L70+8	@ tmp266,
 603 0108 AA4A     		ldr	r2, .L70+12	@ tmp267,
 604 010a 03CA     		ldmia	r2!, {r0, r1}	@ tmp269, tmp648, tmp647
 605 010c 03C3     		stmia	r3!, {r0, r1}	@ tmp268, tmp648, tmp647
 606 010e 1188     		ldrh	r1, [r2]	@ tmp270,
 607 0110 1980     		strh	r1, [r3]	@ tmp270,
 608 0112 9278     		ldrb	r2, [r2, #2]	@ tmp271,
 609 0114 9A70     		strb	r2, [r3, #2]	@ tmp271,
 610              	.L20:
 350:src/main.c    **** 	}
 351:src/main.c    **** #endif
 352:src/main.c    **** 
 353:src/main.c    **** 
 354:src/main.c    **** 	//--- Welcome code ---//
 355:src/main.c    **** 	LED_OFF;
 611              		.loc 2 355 0
 612 0116 9023     		movs	r3, #144	@ tmp634,
 613 0118 DB05     		lsls	r3, r3, #23	@ D.7214, tmp634,
 614 011a 8022     		movs	r2, #128	@ tmp635,
 615 011c 5205     		lsls	r2, r2, #21	@ tmp272, tmp635,
 616 011e 9A61     		str	r2, [r3, #24]	@ tmp272, _132->BSRR
 356:src/main.c    **** //	EN_GPS_OFF;
 357:src/main.c    **** 	EN_GPS_ON;
 617              		.loc 2 357 0
 618 0120 9023     		movs	r3, #144	@ tmp636,
 619 0122 DB05     		lsls	r3, r3, #23	@ D.7214, tmp636,
 620 0124 8022     		movs	r2, #128	@ tmp637,
 621 0126 1202     		lsls	r2, r2, #8	@ tmp273, tmp637,
 622 0128 9A61     		str	r2, [r3, #24]	@ tmp273, _134->BSRR
 358:src/main.c    **** 	//RELAY_ON;
ARM GAS  /tmp/ccZOHcVn.s 			page 36


 359:src/main.c    **** 	RELAY_OFF;
 623              		.loc 2 359 0
 624 012a 9023     		movs	r3, #144	@ tmp638,
 625 012c DB05     		lsls	r3, r3, #23	@ D.7214, tmp638,
 626 012e 8022     		movs	r2, #128	@ tmp639,
 627 0130 1205     		lsls	r2, r2, #20	@ tmp274, tmp639,
 628 0132 9A61     		str	r2, [r3, #24]	@ tmp274, _136->BSRR
 360:src/main.c    **** 
 361:src/main.c    **** 	USART1Config();
 629              		.loc 2 361 0
 630 0134 FFF7FEFF 		bl	USART1Config	@
 362:src/main.c    **** 	USART2Config();
 631              		.loc 2 362 0
 632 0138 FFF7FEFF 		bl	USART2Config	@
 363:src/main.c    **** 
 364:src/main.c    **** 	EXTIOff();
 633              		.loc 2 364 0
 634 013c FFF7FEFF 		bl	EXTIOff	@
 365:src/main.c    **** 
 366:src/main.c    **** 
 367:src/main.c    **** 
 368:src/main.c    **** //---------- Pruebas con GSM GATEWAY --------//
 369:src/main.c    **** #ifdef USE_GSM_GATEWAY
 370:src/main.c    **** 	LED_OFF;
 371:src/main.c    **** 	for (i = 0; i < 6; i++)
 372:src/main.c    **** 	{
 373:src/main.c    **** 		if (LED)
 374:src/main.c    **** 			LED_OFF;
 375:src/main.c    **** 		else
 376:src/main.c    **** 			LED_ON;
 377:src/main.c    **** 
 378:src/main.c    **** 		Wait_ms (300);
 379:src/main.c    **** 	}
 380:src/main.c    **** 
 381:src/main.c    **** 	Wait_ms (3000);
 382:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 383:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 384:src/main.c    **** 
 385:src/main.c    **** 	//mando start al gsm
 386:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 387:src/main.c    **** 	//GPSStartResetSM ();
 388:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 389:src/main.c    **** 	while (timer_standby)
 390:src/main.c    **** 	{
 391:src/main.c    **** 		i = GSM_Start();
 392:src/main.c    **** 		if (i == 1)
 393:src/main.c    **** 		{
 394:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 395:src/main.c    **** 			timer_standby = 0;
 396:src/main.c    **** 		}
 397:src/main.c    **** 		else
 398:src/main.c    **** 
 399:src/main.c    **** 		if (i > 1)
 400:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 401:src/main.c    **** 	}
 402:src/main.c    **** 
 403:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
ARM GAS  /tmp/ccZOHcVn.s 			page 37


 404:src/main.c    **** 
 405:src/main.c    **** 	while (1)
 406:src/main.c    **** 	{
 407:src/main.c    **** 		GSMProcess();
 408:src/main.c    **** 
 409:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 410:src/main.c    **** 		{
 411:src/main.c    **** 			usart2_pckt_ready = 0;
 412:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 413:src/main.c    **** 		}
 414:src/main.c    **** 
 415:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 416:src/main.c    **** 		{
 417:src/main.c    **** 			gsm_pckt_ready = 0;
 418:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 419:src/main.c    **** 		}
 420:src/main.c    **** 
 421:src/main.c    **** 		if (LIGHT)
 422:src/main.c    **** 			LED_ON;
 423:src/main.c    **** 		else
 424:src/main.c    **** 			LED_OFF;
 425:src/main.c    **** 	}
 426:src/main.c    **** #endif
 427:src/main.c    **** //---------- Fin Prueba con GSM GATEWAY --------//
 428:src/main.c    **** 
 429:src/main.c    **** 
 430:src/main.c    **** 
 431:src/main.c    **** 
 432:src/main.c    **** 
 433:src/main.c    **** #ifdef USE_REDONDA_BASIC
 434:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 435:src/main.c    **** 	// USART1Config();
 436:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 635              		.loc 2 436 0
 636 0140 FFF7FEFF 		bl	AdcConfig	@
 437:src/main.c    **** 
 438:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 439:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 637              		.loc 2 439 0
 638 0144 FFF7FEFF 		bl	TIM_3_Init	@
 440:src/main.c    **** #endif
 441:src/main.c    **** 
 442:src/main.c    **** 	TIM_16_Init();					//o tuilizo para synchro de relay
 639              		.loc 2 442 0
 640 0148 FFF7FEFF 		bl	TIM_16_Init	@
 443:src/main.c    **** 	TIM16Enable();
 641              		.loc 2 443 0
 642 014c FFF7FEFF 		bl	TIM16Enable	@
 444:src/main.c    **** 
 445:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 643              		.loc 2 445 0
 644 0150 994B     		ldr	r3, .L70+16	@ tmp275,
 645 0152 1800     		movs	r0, r3	@, tmp275
 646 0154 FFF7FEFF 		bl	Usart2Send	@
 446:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 647              		.loc 2 446 0
 648 0158 984B     		ldr	r3, .L70+20	@ tmp276,
ARM GAS  /tmp/ccZOHcVn.s 			page 38


 649 015a 1800     		movs	r0, r3	@, tmp276
 650 015c FFF7FEFF 		bl	Usart2Send	@
 447:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 448:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 651              		.loc 2 448 0
 652 0160 974B     		ldr	r3, .L70+24	@ tmp277,
 653 0162 1800     		movs	r0, r3	@, tmp277
 654 0164 FFF7FEFF 		bl	Usart2Send	@
 449:src/main.c    **** 	#endif
 450:src/main.c    **** 	#ifdef WITH_HYST
 451:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 655              		.loc 2 451 0
 656 0168 964B     		ldr	r3, .L70+28	@ tmp278,
 657 016a 1800     		movs	r0, r3	@, tmp278
 658 016c FFF7FEFF 		bl	Usart2Send	@
 452:src/main.c    **** 	#endif
 453:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 454:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 455:src/main.c    **** 	#endif
 456:src/main.c    **** 	#ifdef USE_WITH_SYNC
 457:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 458:src/main.c    **** 	#else
 459:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 659              		.loc 2 459 0
 660 0170 954B     		ldr	r3, .L70+32	@ tmp279,
 661 0172 1800     		movs	r0, r3	@, tmp279
 662 0174 FFF7FEFF 		bl	Usart2Send	@
 460:src/main.c    **** 	#endif
 461:src/main.c    **** 	#ifdef USE_GSM
 462:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 663              		.loc 2 462 0
 664 0178 944B     		ldr	r3, .L70+36	@ tmp280,
 665 017a 1800     		movs	r0, r3	@, tmp280
 666 017c FFF7FEFF 		bl	Usart2Send	@
 463:src/main.c    **** 	#endif
 464:src/main.c    **** 
 465:src/main.c    **** 
 466:src/main.c    **** 
 467:src/main.c    **** 	for (i = 0; i < 8; i++)
 667              		.loc 2 467 0
 668 0180 9F23     		movs	r3, #159	@ tmp281,
 669 0182 6B44     		add	r3, r3, sp	@ tmp281,
 670 0184 0022     		movs	r2, #0	@ tmp282,
 671 0186 1A70     		strb	r2, [r3]	@ tmp283, i
 672 0188 1DE0     		b	.L21	@
 673              	.L24:
 468:src/main.c    **** 	{
 469:src/main.c    **** 		if (LED)
 674              		.loc 2 469 0
 675 018a 9023     		movs	r3, #144	@ tmp632,
 676 018c DB05     		lsls	r3, r3, #23	@ D.7214, tmp632,
 677 018e 9B8A     		ldrh	r3, [r3, #20]	@ tmp285,
 678 0190 9BB2     		uxth	r3, r3	@ D.7215, tmp285
 679 0192 1A00     		movs	r2, r3	@ D.7216, D.7215
 680 0194 8023     		movs	r3, #128	@ tmp633,
 681 0196 5B01     		lsls	r3, r3, #5	@ tmp286, tmp633,
 682 0198 1340     		ands	r3, r2	@ D.7216, D.7216
ARM GAS  /tmp/ccZOHcVn.s 			page 39


 683 019a 05D0     		beq	.L22	@,
 470:src/main.c    **** 			LED_OFF;
 684              		.loc 2 470 0
 685 019c 9023     		movs	r3, #144	@ tmp630,
 686 019e DB05     		lsls	r3, r3, #23	@ D.7214, tmp630,
 687 01a0 8022     		movs	r2, #128	@ tmp631,
 688 01a2 5205     		lsls	r2, r2, #21	@ tmp287, tmp631,
 689 01a4 9A61     		str	r2, [r3, #24]	@ tmp287, _156->BSRR
 690 01a6 04E0     		b	.L23	@
 691              	.L22:
 471:src/main.c    **** 		else
 472:src/main.c    **** 			LED_ON;
 692              		.loc 2 472 0
 693 01a8 9023     		movs	r3, #144	@ tmp628,
 694 01aa DB05     		lsls	r3, r3, #23	@ D.7214, tmp628,
 695 01ac 8022     		movs	r2, #128	@ tmp629,
 696 01ae 5201     		lsls	r2, r2, #5	@ tmp288, tmp629,
 697 01b0 9A61     		str	r2, [r3, #24]	@ tmp288, _158->BSRR
 698              	.L23:
 473:src/main.c    **** 
 474:src/main.c    **** 		Wait_ms (250);
 699              		.loc 2 474 0 discriminator 2
 700 01b2 FA20     		movs	r0, #250	@,
 701 01b4 FFF7FEFF 		bl	Wait_ms	@
 467:src/main.c    **** 	{
 702              		.loc 2 467 0 discriminator 2
 703 01b8 9F23     		movs	r3, #159	@ tmp289,
 704 01ba 6B44     		add	r3, r3, sp	@ tmp289,
 705 01bc 1A78     		ldrb	r2, [r3]	@ D.7217, i
 706 01be 9F23     		movs	r3, #159	@ tmp290,
 707 01c0 6B44     		add	r3, r3, sp	@ tmp290,
 708 01c2 0132     		adds	r2, r2, #1	@ tmp291,
 709 01c4 1A70     		strb	r2, [r3]	@ tmp292, i
 710              	.L21:
 467:src/main.c    **** 	{
 711              		.loc 2 467 0 is_stmt 0 discriminator 1
 712 01c6 9F23     		movs	r3, #159	@ tmp293,
 713 01c8 6B44     		add	r3, r3, sp	@ tmp293,
 714 01ca 1B78     		ldrb	r3, [r3]	@ tmp294, i
 715 01cc 072B     		cmp	r3, #7	@ tmp294,
 716 01ce DCD9     		bls	.L24	@,
 475:src/main.c    **** 	}
 476:src/main.c    **** 
 477:src/main.c    **** 	timer_standby = 2000;
 717              		.loc 2 477 0 is_stmt 1
 718 01d0 7F4B     		ldr	r3, .L70+40	@ tmp295,
 719 01d2 FA22     		movs	r2, #250	@ tmp627,
 720 01d4 D200     		lsls	r2, r2, #3	@ tmp296, tmp627,
 721 01d6 1A80     		strh	r2, [r3]	@ tmp297, timer_standby
 478:src/main.c    **** 	FuncsGSMReset();
 722              		.loc 2 478 0
 723 01d8 FFF7FEFF 		bl	FuncsGSMReset	@
 479:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 724              		.loc 2 479 0
 725 01dc 0220     		movs	r0, #2	@,
 726 01de FFF7FEFF 		bl	Usart1Mode	@
 727              	.L61:
ARM GAS  /tmp/ccZOHcVn.s 			page 40


 480:src/main.c    **** 
 481:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 482:src/main.c    **** 	// while (1)
 483:src/main.c    **** 	// {
 484:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 485:src/main.c    **** 	// 	{
 486:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 487:src/main.c    **** 	// 		Wait_ms(10);
 488:src/main.c    **** 	// 	}
 489:src/main.c    **** 	//
 490:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 491:src/main.c    **** 	// 	{
 492:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 493:src/main.c    **** 	// 		Wait_ms(10);
 494:src/main.c    **** 	// 	}
 495:src/main.c    **** 	// }
 496:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 497:src/main.c    **** 
 498:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 499:src/main.c    **** 	// i = 0;
 500:src/main.c    **** 	// while (1)
 501:src/main.c    **** 	// {
 502:src/main.c    **** 	// 	switch (i)
 503:src/main.c    **** 	// 	{
 504:src/main.c    **** 	// 		case 0:
 505:src/main.c    **** 	// 			RelayOn();
 506:src/main.c    **** 	// 			timer_standby = 50;
 507:src/main.c    **** 	// 			LED_ON;
 508:src/main.c    **** 	// 			i++;
 509:src/main.c    **** 	// 			break;
 510:src/main.c    **** 	//
 511:src/main.c    **** 	// 		case 1:
 512:src/main.c    **** 	// 			if (!timer_standby)
 513:src/main.c    **** 	// 			{
 514:src/main.c    **** 	// 				RelayOff();
 515:src/main.c    **** 	// 				LED_OFF;
 516:src/main.c    **** 	// 				i++;
 517:src/main.c    **** 	// 				timer_standby = 10000;
 518:src/main.c    **** 	// 			}
 519:src/main.c    **** 	// 			break;
 520:src/main.c    **** 	//
 521:src/main.c    **** 	// 		case 2:
 522:src/main.c    **** 	// 			if (!timer_standby)
 523:src/main.c    **** 	// 			{
 524:src/main.c    **** 	// 				i = 0;
 525:src/main.c    **** 	// 			}
 526:src/main.c    **** 	// 			break;
 527:src/main.c    **** 	// 	}
 528:src/main.c    **** 	//
 529:src/main.c    **** 	// 	UpdateRelay ();
 530:src/main.c    **** 	// }
 531:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 532:src/main.c    **** 
 533:src/main.c    **** 
 534:src/main.c    **** //--- Programa de pruebas I meas -----
 535:src/main.c    **** 	while (1)
 536:src/main.c    **** 	{
ARM GAS  /tmp/ccZOHcVn.s 			page 41


 537:src/main.c    **** 		switch (main_state)
 728              		.loc 2 537 0
 729 01e2 8623     		movs	r3, #134	@ tmp298,
 730 01e4 6B44     		add	r3, r3, sp	@ tmp298,
 731 01e6 1B78     		ldrb	r3, [r3]	@ D.7216, main_state
 732 01e8 092B     		cmp	r3, #9	@ D.7216,
 733 01ea 00D9     		bls	.LCB470	@
 734 01ec D2E2     		b	.L25	@long jump	@
 735              	.LCB470:
 736 01ee 9A00     		lsls	r2, r3, #2	@ tmp299, D.7216,
 737 01f0 784B     		ldr	r3, .L70+44	@ tmp301,
 738 01f2 D318     		adds	r3, r2, r3	@ tmp300, tmp299, tmp301
 739 01f4 1B68     		ldr	r3, [r3]	@ tmp302,
 740 01f6 9F46     		mov	pc, r3	@ tmp302
 741              		.section	.rodata.main,"a",%progbits
 742              		.align	2
 743              	.L27:
 744 0000 F8010000 		.word	.L26
 745 0004 1A020000 		.word	.L28
 746 0008 52020000 		.word	.L29
 747 000c C8020000 		.word	.L30
 748 0010 0E030000 		.word	.L31
 749 0014 08040000 		.word	.L32
 750 0018 94070000 		.word	.L25
 751 001c 94070000 		.word	.L25
 752 0020 94070000 		.word	.L25
 753 0024 5E040000 		.word	.L33
 754              		.section	.text.main
 755              	.L26:
 538:src/main.c    **** 		{
 539:src/main.c    **** 			case MAIN_INIT:
 540:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 756              		.loc 2 540 0
 757 01f8 0A20     		movs	r0, #10	@,
 758 01fa FFF7FEFF 		bl	Update_TIM3_CH1	@
 541:src/main.c    **** 				main_state = SYNCHRO_ADC;
 759              		.loc 2 541 0
 760 01fe 8623     		movs	r3, #134	@ tmp303,
 761 0200 6B44     		add	r3, r3, sp	@ tmp303,
 762 0202 0122     		movs	r2, #1	@ tmp304,
 763 0204 1A70     		strb	r2, [r3]	@ tmp305, main_state
 542:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 764              		.loc 2 542 0
 765 0206 744B     		ldr	r3, .L70+48	@ D.7220,
 766 0208 734A     		ldr	r2, .L70+48	@ D.7220,
 767 020a 9268     		ldr	r2, [r2, #8]	@ D.7213, _175->CR
 768 020c 0421     		movs	r1, #4	@ tmp306,
 769 020e 0A43     		orrs	r2, r1	@ D.7213, tmp306
 770 0210 9A60     		str	r2, [r3, #8]	@ D.7213, _174->CR
 543:src/main.c    **** 				seq_ready = 0;
 771              		.loc 2 543 0
 772 0212 724B     		ldr	r3, .L70+52	@ tmp307,
 773 0214 0022     		movs	r2, #0	@ tmp308,
 774 0216 1A70     		strb	r2, [r3]	@ tmp309, seq_ready
 544:src/main.c    **** 				break;
 775              		.loc 2 544 0
 776 0218 EFE2     		b	.L34	@
ARM GAS  /tmp/ccZOHcVn.s 			page 42


 777              	.L28:
 545:src/main.c    **** 
 546:src/main.c    **** 			case SYNCHRO_ADC:
 547:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 778              		.loc 2 547 0
 779 021a 704B     		ldr	r3, .L70+52	@ tmp310,
 780 021c 1B78     		ldrb	r3, [r3]	@ tmp311, seq_ready
 781 021e DBB2     		uxtb	r3, r3	@ D.7217, tmp311
 782 0220 002B     		cmp	r3, #0	@ D.7217,
 783 0222 00D1     		bne	.LCB505	@
 784 0224 DEE2     		b	.L62	@long jump	@
 785              	.LCB505:
 548:src/main.c    **** 				{
 549:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 786              		.loc 2 549 0
 787 0226 6E4B     		ldr	r3, .L70+56	@ tmp312,
 788 0228 1800     		movs	r0, r3	@, tmp312
 789 022a FFF7FEFF 		bl	Usart2Send	@
 550:src/main.c    **** 
 551:src/main.c    **** #ifdef USE_GSM
 552:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 790              		.loc 2 552 0
 791 022e 6D4B     		ldr	r3, .L70+60	@ tmp313,
 792 0230 1800     		movs	r0, r3	@, tmp313
 793 0232 FFF7FEFF 		bl	Usart2Send	@
 553:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 794              		.loc 2 553 0
 795 0236 8623     		movs	r3, #134	@ tmp314,
 796 0238 6B44     		add	r3, r3, sp	@ tmp314,
 797 023a 0222     		movs	r2, #2	@ tmp315,
 798 023c 1A70     		strb	r2, [r3]	@ tmp316, main_state
 554:src/main.c    **** 					timer_standby = 0;
 799              		.loc 2 554 0
 800 023e 644B     		ldr	r3, .L70+40	@ tmp317,
 801 0240 0022     		movs	r2, #0	@ tmp318,
 802 0242 1A80     		strh	r2, [r3]	@ tmp319, timer_standby
 555:src/main.c    **** 					zero_current_loc = 0;
 803              		.loc 2 555 0
 804 0244 0023     		movs	r3, #0	@ tmp320,
 805 0246 2593     		str	r3, [sp, #148]	@ tmp320, zero_current_loc
 556:src/main.c    **** 					i = 0;
 806              		.loc 2 556 0
 807 0248 9F23     		movs	r3, #159	@ tmp321,
 808 024a 6B44     		add	r3, r3, sp	@ tmp321,
 809 024c 0022     		movs	r2, #0	@ tmp322,
 810 024e 1A70     		strb	r2, [r3]	@ tmp323, i
 557:src/main.c    **** #else
 558:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 559:src/main.c    **** 					timer_standby = 60000;
 560:src/main.c    **** 					zero_current_loc = 0;
 561:src/main.c    **** 					i = 0;
 562:src/main.c    **** #endif
 563:src/main.c    **** 				}
 564:src/main.c    **** 				break;
 811              		.loc 2 564 0
 812 0250 C8E2     		b	.L62	@
 813              	.L29:
ARM GAS  /tmp/ccZOHcVn.s 			page 43


 565:src/main.c    **** 
 566:src/main.c    **** 			case SET_ZERO_CURRENT:
 567:src/main.c    **** 				if (!timer_standby)
 814              		.loc 2 567 0
 815 0252 5F4B     		ldr	r3, .L70+40	@ tmp324,
 816 0254 1B88     		ldrh	r3, [r3]	@ tmp325, timer_standby
 817 0256 9BB2     		uxth	r3, r3	@ D.7215, tmp325
 818 0258 002B     		cmp	r3, #0	@ D.7215,
 819 025a 00D0     		beq	.LCB533	@
 820 025c C4E2     		b	.L63	@long jump	@
 821              	.LCB533:
 568:src/main.c    **** 				{
 569:src/main.c    **** 					if (i < 32)
 822              		.loc 2 569 0
 823 025e 9F23     		movs	r3, #159	@ tmp326,
 824 0260 6B44     		add	r3, r3, sp	@ tmp326,
 825 0262 1B78     		ldrb	r3, [r3]	@ tmp327, i
 826 0264 1F2B     		cmp	r3, #31	@ tmp327,
 827 0266 1AD8     		bhi	.L37	@,
 570:src/main.c    **** 					{
 571:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 828              		.loc 2 571 0
 829 0268 5C4B     		ldr	r3, .L70+52	@ tmp328,
 830 026a 1B78     		ldrb	r3, [r3]	@ tmp329, seq_ready
 831 026c DBB2     		uxtb	r3, r3	@ D.7217, tmp329
 832 026e 002B     		cmp	r3, #0	@ D.7217,
 833 0270 00D1     		bne	.LCB543	@
 834 0272 B9E2     		b	.L63	@long jump	@
 835              	.LCB543:
 572:src/main.c    **** 						{
 573:src/main.c    **** 							seq_ready = 0;
 836              		.loc 2 573 0
 837 0274 594B     		ldr	r3, .L70+52	@ tmp330,
 838 0276 0022     		movs	r2, #0	@ tmp331,
 839 0278 1A70     		strb	r2, [r3]	@ tmp332, seq_ready
 574:src/main.c    **** 							zero_current_loc += I_Sense;
 840              		.loc 2 574 0
 841 027a 5B4B     		ldr	r3, .L70+64	@ tmp333,
 842 027c 9B88     		ldrh	r3, [r3, #4]	@ tmp335,
 843 027e 9BB2     		uxth	r3, r3	@ D.7215, tmp335
 844 0280 1A00     		movs	r2, r3	@ D.7219, D.7215
 845 0282 259B     		ldr	r3, [sp, #148]	@ tmp337, zero_current_loc
 846 0284 9B18     		adds	r3, r3, r2	@ tmp336, tmp337, D.7219
 847 0286 2593     		str	r3, [sp, #148]	@ tmp336, zero_current_loc
 575:src/main.c    **** 							i++;
 848              		.loc 2 575 0
 849 0288 9F23     		movs	r3, #159	@ tmp338,
 850 028a 6B44     		add	r3, r3, sp	@ tmp338,
 851 028c 1A78     		ldrb	r2, [r3]	@ D.7217, i
 852 028e 9F23     		movs	r3, #159	@ tmp339,
 853 0290 6B44     		add	r3, r3, sp	@ tmp339,
 854 0292 0132     		adds	r2, r2, #1	@ tmp340,
 855 0294 1A70     		strb	r2, [r3]	@ tmp341, i
 576:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 856              		.loc 2 576 0
 857 0296 4E4B     		ldr	r3, .L70+40	@ tmp342,
 858 0298 0222     		movs	r2, #2	@ tmp343,
ARM GAS  /tmp/ccZOHcVn.s 			page 44


 859 029a 1A80     		strh	r2, [r3]	@ tmp344, timer_standby
 577:src/main.c    **** 						}
 578:src/main.c    **** 					}
 579:src/main.c    **** 					else
 580:src/main.c    **** 					{
 581:src/main.c    **** 						zero_current_loc >>= 5;
 582:src/main.c    **** 						zero_current = zero_current_loc;
 583:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
 584:src/main.c    **** 						RELAY_ON;
 585:src/main.c    **** 						i = 0;
 586:src/main.c    **** 					}
 587:src/main.c    **** 				}
 588:src/main.c    **** 				break;
 860              		.loc 2 588 0
 861 029c A4E2     		b	.L63	@
 862              	.L37:
 581:src/main.c    **** 						zero_current = zero_current_loc;
 863              		.loc 2 581 0
 864 029e 259B     		ldr	r3, [sp, #148]	@ tmp346, zero_current_loc
 865 02a0 5B09     		lsrs	r3, r3, #5	@ tmp345, tmp346,
 866 02a2 2593     		str	r3, [sp, #148]	@ tmp345, zero_current_loc
 582:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
 867              		.loc 2 582 0
 868 02a4 259B     		ldr	r3, [sp, #148]	@ tmp348, zero_current_loc
 869 02a6 9AB2     		uxth	r2, r3	@ D.7215, tmp347
 870 02a8 504B     		ldr	r3, .L70+68	@ tmp349,
 871 02aa 1A80     		strh	r2, [r3]	@ tmp350, zero_current
 583:src/main.c    **** 						RELAY_ON;
 872              		.loc 2 583 0
 873 02ac 8623     		movs	r3, #134	@ tmp351,
 874 02ae 6B44     		add	r3, r3, sp	@ tmp351,
 875 02b0 0322     		movs	r2, #3	@ tmp352,
 876 02b2 1A70     		strb	r2, [r3]	@ tmp353, main_state
 584:src/main.c    **** 						i = 0;
 877              		.loc 2 584 0
 878 02b4 9023     		movs	r3, #144	@ tmp625,
 879 02b6 DB05     		lsls	r3, r3, #23	@ D.7214, tmp625,
 880 02b8 8022     		movs	r2, #128	@ tmp626,
 881 02ba 1201     		lsls	r2, r2, #4	@ tmp354, tmp626,
 882 02bc 9A61     		str	r2, [r3, #24]	@ tmp354, _200->BSRR
 585:src/main.c    **** 					}
 883              		.loc 2 585 0
 884 02be 9F23     		movs	r3, #159	@ tmp355,
 885 02c0 6B44     		add	r3, r3, sp	@ tmp355,
 886 02c2 0022     		movs	r2, #0	@ tmp356,
 887 02c4 1A70     		strb	r2, [r3]	@ tmp357, i
 888              		.loc 2 588 0
 889 02c6 8FE2     		b	.L63	@
 890              	.L30:
 589:src/main.c    **** 
 590:src/main.c    **** 			case SET_COUNTERS_AND_PHONE0:
 591:src/main.c    **** 				acum_secs = 0;
 891              		.loc 2 591 0
 892 02c8 0023     		movs	r3, #0	@ tmp358,
 893 02ca 2393     		str	r3, [sp, #140]	@ tmp358, acum_secs
 592:src/main.c    **** 				acum_secs_index = 0;
 894              		.loc 2 592 0
ARM GAS  /tmp/ccZOHcVn.s 			page 45


 895 02cc 9223     		movs	r3, #146	@ tmp359,
 896 02ce 6B44     		add	r3, r3, sp	@ tmp359,
 897 02d0 0022     		movs	r2, #0	@ tmp360,
 898 02d2 1A80     		strh	r2, [r3]	@ tmp361, acum_secs_index
 593:src/main.c    **** 				acum_hours = 0;
 899              		.loc 2 593 0
 900 02d4 0023     		movs	r3, #0	@ tmp362,
 901 02d6 2293     		str	r3, [sp, #136]	@ tmp362, acum_hours
 594:src/main.c    **** 
 595:src/main.c    **** 				counters_mode = 0;
 902              		.loc 2 595 0
 903 02d8 21AB     		add	r3, sp, #132	@ tmp363,,
 904 02da 0022     		movs	r2, #0	@ tmp364,
 905 02dc 1A70     		strb	r2, [r3]	@ tmp365, counters_mode
 596:src/main.c    **** 
 597:src/main.c    **** 				//espero que el telefono este libre
 598:src/main.c    **** 				//TODO: timeout aca
 599:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_ready)
 906              		.loc 2 599 0
 907 02de FFF7FEFF 		bl	FuncsGSMStateAsk	@
 908 02e2 031E     		subs	r3, r0, #0	@ tmp366,,
 909 02e4 052B     		cmp	r3, #5	@ tmp366,
 910 02e6 00D0     		beq	.LCB606	@
 911 02e8 80E2     		b	.L64	@long jump	@
 912              	.LCB606:
 600:src/main.c    **** 				{
 601:src/main.c    **** 					Usart2Send((char *) (const char *) "Reports by SMS\r\n");
 913              		.loc 2 601 0
 914 02ea 414B     		ldr	r3, .L70+72	@ tmp368,
 915 02ec 1800     		movs	r0, r3	@, tmp368
 916 02ee FFF7FEFF 		bl	Usart2Send	@
 602:src/main.c    **** 					main_state = SET_COUNTERS_AND_PHONE1;
 917              		.loc 2 602 0
 918 02f2 8623     		movs	r3, #134	@ tmp369,
 919 02f4 6B44     		add	r3, r3, sp	@ tmp369,
 920 02f6 0422     		movs	r2, #4	@ tmp370,
 921 02f8 1A70     		strb	r2, [r3]	@ tmp371, main_state
 603:src/main.c    **** 
 604:src/main.c    **** 					//pido imei
 605:src/main.c    **** 					s_lcd[0] = '\0';
 922              		.loc 2 605 0
 923 02fa 02AB     		add	r3, sp, #8	@ tmp372,,
 924 02fc 0022     		movs	r2, #0	@ tmp373,
 925 02fe 1A70     		strb	r2, [r3]	@ tmp374, s_lcd
 606:src/main.c    **** 					FuncsGSMCommandAnswer ("AT+GSN\r\n" , s_lcd);
 926              		.loc 2 606 0
 927 0300 02AA     		add	r2, sp, #8	@ tmp375,,
 928 0302 3C4B     		ldr	r3, .L70+76	@ tmp376,
 929 0304 1100     		movs	r1, r2	@, tmp375
 930 0306 1800     		movs	r0, r3	@, tmp376
 931 0308 FFF7FEFF 		bl	FuncsGSMCommandAnswer	@
 607:src/main.c    **** 				}
 608:src/main.c    **** 				break;
 932              		.loc 2 608 0
 933 030c 6EE2     		b	.L64	@
 934              	.L31:
 609:src/main.c    **** 
ARM GAS  /tmp/ccZOHcVn.s 			page 46


 610:src/main.c    **** 			case SET_COUNTERS_AND_PHONE1:
 611:src/main.c    **** 				//espero que el telefono este libre
 612:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_ready)
 935              		.loc 2 612 0
 936 030e FFF7FEFF 		bl	FuncsGSMStateAsk	@
 937 0312 031E     		subs	r3, r0, #0	@ tmp377,,
 938 0314 052B     		cmp	r3, #5	@ tmp377,
 939 0316 00D0     		beq	.LCB629	@
 940 0318 6AE2     		b	.L65	@long jump	@
 941              	.LCB629:
 613:src/main.c    **** 				{
 614:src/main.c    **** 					i = strlen(s_lcd);
 942              		.loc 2 614 0
 943 031a 02AB     		add	r3, sp, #8	@ tmp379,,
 944 031c 1800     		movs	r0, r3	@, tmp379
 945 031e FFF7FEFF 		bl	strlen	@
 946 0322 0200     		movs	r2, r0	@ D.7219,
 947 0324 9F23     		movs	r3, #159	@ tmp380,
 948 0326 6B44     		add	r3, r3, sp	@ tmp380,
 949 0328 1A70     		strb	r2, [r3]	@ tmp381, i
 615:src/main.c    **** 					strncpy(param_struct.imei, s_lcd, (i - 2));
 950              		.loc 2 615 0
 951 032a 9F23     		movs	r3, #159	@ tmp382,
 952 032c 6B44     		add	r3, r3, sp	@ tmp382,
 953 032e 1B78     		ldrb	r3, [r3]	@ D.7216, i
 954 0330 023B     		subs	r3, r3, #2	@ D.7216,
 955 0332 1A00     		movs	r2, r3	@ D.7219, D.7216
 956 0334 02A9     		add	r1, sp, #8	@ tmp383,,
 957 0336 304B     		ldr	r3, .L70+80	@ tmp384,
 958 0338 1800     		movs	r0, r3	@, tmp384
 959 033a FFF7FEFF 		bl	strncpy	@
 616:src/main.c    **** 					Usart2Send("IMEI: ");
 960              		.loc 2 616 0
 961 033e 2F4B     		ldr	r3, .L70+84	@ tmp385,
 962 0340 1800     		movs	r0, r3	@, tmp385
 963 0342 FFF7FEFF 		bl	Usart2Send	@
 617:src/main.c    **** 					Usart2Send(param_struct.imei);
 964              		.loc 2 617 0
 965 0346 2C4B     		ldr	r3, .L70+80	@ tmp386,
 966 0348 1800     		movs	r0, r3	@, tmp386
 967 034a FFF7FEFF 		bl	Usart2Send	@
 618:src/main.c    **** 					Usart2Send("\r\n");
 968              		.loc 2 618 0
 969 034e 2C4B     		ldr	r3, .L70+88	@ tmp387,
 970 0350 1800     		movs	r0, r3	@, tmp387
 971 0352 FFF7FEFF 		bl	Usart2Send	@
 619:src/main.c    **** 
 620:src/main.c    **** 					//mando SMS con mi info
 621:src/main.c    **** 					strcpy(s_lcd, "IMEI: ");
 972              		.loc 2 621 0
 973 0356 02AB     		add	r3, sp, #8	@ tmp388,,
 974 0358 284A     		ldr	r2, .L70+84	@ tmp389,
 975 035a 1168     		ldr	r1, [r2]	@ tmp392,
 976 035c 1960     		str	r1, [r3]	@ tmp392,
 977 035e 9188     		ldrh	r1, [r2, #4]	@ tmp393,
 978 0360 9980     		strh	r1, [r3, #4]	@ tmp393,
 979 0362 9279     		ldrb	r2, [r2, #6]	@ tmp394,
ARM GAS  /tmp/ccZOHcVn.s 			page 47


 980 0364 9A71     		strb	r2, [r3, #6]	@ tmp394,
 622:src/main.c    **** 					strcat(s_lcd, param_struct.imei);
 981              		.loc 2 622 0
 982 0366 244A     		ldr	r2, .L70+80	@ tmp395,
 983 0368 02AB     		add	r3, sp, #8	@ tmp396,,
 984 036a 1100     		movs	r1, r2	@, tmp395
 985 036c 1800     		movs	r0, r3	@, tmp396
 986 036e FFF7FEFF 		bl	strcat	@
 623:src/main.c    **** 					strcat(s_lcd, ", ACTIVO");
 987              		.loc 2 623 0
 988 0372 02AB     		add	r3, sp, #8	@ tmp397,,
 989 0374 1800     		movs	r0, r3	@, tmp397
 990 0376 FFF7FEFF 		bl	strlen	@
 991 037a 0300     		movs	r3, r0	@ tmp398,
 992 037c 1A00     		movs	r2, r3	@ D.7219, tmp399
 993 037e 02AB     		add	r3, sp, #8	@ tmp400,,
 994 0380 9A18     		adds	r2, r3, r2	@ D.7221, tmp400, D.7219
 995 0382 204B     		ldr	r3, .L70+92	@ tmp401,
 996 0384 1000     		movs	r0, r2	@ tmp402, D.7221
 997 0386 1900     		movs	r1, r3	@ tmp403, tmp401
 998 0388 0923     		movs	r3, #9	@ tmp404,
 999 038a 1A00     		movs	r2, r3	@, tmp404
 1000 038c FFF7FEFF 		bl	memcpy	@
 624:src/main.c    **** 
 625:src/main.c    **** 					FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 1001              		.loc 2 625 0
 1002 0390 074A     		ldr	r2, .L70+8	@ tmp407,
 1003 0392 02AB     		add	r3, sp, #8	@ tmp408,,
 1004 0394 1100     		movs	r1, r2	@, tmp407
 1005 0396 1800     		movs	r0, r3	@, tmp408
 1006 0398 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 626:src/main.c    **** 					// FuncsGSMSendSMS("forro", param_struct.num_reportar);
 627:src/main.c    **** 					main_state = LAMP_OFF;
 1007              		.loc 2 627 0
 1008 039c 8623     		movs	r3, #134	@ tmp409,
 1009 039e 6B44     		add	r3, r3, sp	@ tmp409,
 1010 03a0 0522     		movs	r2, #5	@ tmp410,
 1011 03a2 1A70     		strb	r2, [r3]	@ tmp411, main_state
 628:src/main.c    **** 				}
 629:src/main.c    **** 				break;
 1012              		.loc 2 629 0
 1013 03a4 24E2     		b	.L65	@
 1014              	.L71:
 1015 03a6 C046     		.align	2
 1016              	.L70:
 1017 03a8 80BB0000 		.word	48000
 1018 03ac 00FC0008 		.word	134282240
 1019 03b0 00000000 		.word	param_struct
 1020 03b4 00000000 		.word	.LC1
 1021 03b8 0C000000 		.word	.LC3
 1022 03bc 34000000 		.word	.LC5
 1023 03c0 44000000 		.word	.LC7
 1024 03c4 58000000 		.word	.LC9
 1025 03c8 70000000 		.word	.LC11
 1026 03cc 80000000 		.word	.LC13
 1027 03d0 00000000 		.word	timer_standby
 1028 03d4 00000000 		.word	.L27
ARM GAS  /tmp/ccZOHcVn.s 			page 48


 1029 03d8 00240140 		.word	1073816576
 1030 03dc 00000000 		.word	seq_ready
 1031 03e0 9C000000 		.word	.LC18
 1032 03e4 A8000000 		.word	.LC20
 1033 03e8 00000000 		.word	adc_ch
 1034 03ec 00000000 		.word	zero_current
 1035 03f0 D0000000 		.word	.LC24
 1036 03f4 E4000000 		.word	.LC26
 1037 03f8 18000000 		.word	param_struct+24
 1038 03fc F0000000 		.word	.LC29
 1039 0400 F8000000 		.word	.LC31
 1040 0404 FC000000 		.word	.LC33
 1041              	.L32:
 630:src/main.c    **** 
 631:src/main.c    **** 			case LAMP_OFF:
 632:src/main.c    **** 				if (!tt_relay_on_off)
 1042              		.loc 2 632 0
 1043 0408 E54B     		ldr	r3, .L72	@ tmp412,
 1044 040a 1B88     		ldrh	r3, [r3]	@ tmp413, tt_relay_on_off
 1045 040c 9BB2     		uxth	r3, r3	@ D.7215, tmp413
 1046 040e 002B     		cmp	r3, #0	@ D.7215,
 1047 0410 00D0     		beq	.LCB727	@
 1048 0412 EFE1     		b	.L66	@long jump	@
 1049              	.LCB727:
 633:src/main.c    **** 				{
 634:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 1050              		.loc 2 634 0
 1051 0414 FFF7FEFF 		bl	GetPhoto	@
 1052 0418 0300     		movs	r3, r0	@ tmp414,
 1053 041a 1A1E     		subs	r2, r3, #0	@ D.7215, tmp415,
 1054 041c E14B     		ldr	r3, .L72+4	@ tmp416,
 1055 041e 9A42     		cmp	r2, r3	@ D.7215, tmp416
 1056 0420 00D8     		bhi	.LCB733	@
 1057 0422 E7E1     		b	.L66	@long jump	@
 1058              	.LCB733:
 635:src/main.c    **** 					{
 636:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 637:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 1059              		.loc 2 637 0
 1060 0424 1A20     		movs	r0, #26	@,
 1061 0426 FFF7FEFF 		bl	Update_TIM3_CH1	@
 638:src/main.c    **** #else
 639:src/main.c    **** 						Update_TIM3_CH1 (PWM_MAX);
 640:src/main.c    **** #endif
 641:src/main.c    **** 						// RelayOn();
 642:src/main.c    **** 						main_state = LAMP_ON;
 1062              		.loc 2 642 0
 1063 042a 8623     		movs	r3, #134	@ tmp417,
 1064 042c 6B44     		add	r3, r3, sp	@ tmp417,
 1065 042e 0922     		movs	r2, #9	@ tmp418,
 1066 0430 1A70     		strb	r2, [r3]	@ tmp419, main_state
 643:src/main.c    **** 						tt_relay_on_off = 10000;
 1067              		.loc 2 643 0
 1068 0432 DB4B     		ldr	r3, .L72	@ tmp420,
 1069 0434 DC4A     		ldr	r2, .L72+8	@ tmp421,
 1070 0436 1A80     		strh	r2, [r3]	@ tmp422, tt_relay_on_off
 644:src/main.c    **** 						Usart2Send("PRENDIDO");
ARM GAS  /tmp/ccZOHcVn.s 			page 49


 1071              		.loc 2 644 0
 1072 0438 DC4B     		ldr	r3, .L72+12	@ tmp423,
 1073 043a 1800     		movs	r0, r3	@, tmp423
 1074 043c FFF7FEFF 		bl	Usart2Send	@
 645:src/main.c    **** 						FuncsGSMSendSMS("PRENDIDO", param_struct.num_reportar);
 1075              		.loc 2 645 0
 1076 0440 DB4A     		ldr	r2, .L72+16	@ tmp424,
 1077 0442 DA4B     		ldr	r3, .L72+12	@ tmp425,
 1078 0444 1100     		movs	r1, r2	@, tmp424
 1079 0446 1800     		movs	r0, r3	@, tmp425
 1080 0448 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 646:src/main.c    **** 
 647:src/main.c    **** 						LED_ON;
 1081              		.loc 2 647 0
 1082 044c 9023     		movs	r3, #144	@ tmp623,
 1083 044e DB05     		lsls	r3, r3, #23	@ D.7214, tmp623,
 1084 0450 8022     		movs	r2, #128	@ tmp624,
 1085 0452 5201     		lsls	r2, r2, #5	@ tmp426, tmp624,
 1086 0454 9A61     		str	r2, [r3, #24]	@ tmp426, _239->BSRR
 648:src/main.c    **** #ifdef WITH_HYST
 649:src/main.c    **** 						hours = 0;
 1087              		.loc 2 649 0
 1088 0456 D74B     		ldr	r3, .L72+20	@ tmp427,
 1089 0458 0022     		movs	r2, #0	@ tmp428,
 1090 045a 1A70     		strb	r2, [r3]	@ tmp429, hours
 650:src/main.c    **** #endif
 651:src/main.c    **** 					}
 652:src/main.c    **** 				}
 653:src/main.c    **** 				break;
 1091              		.loc 2 653 0
 1092 045c CAE1     		b	.L66	@
 1093              	.L33:
 654:src/main.c    **** 
 655:src/main.c    **** 			case LAMP_ON:
 656:src/main.c    **** #if defined REPORTS_AIRPLANE_MODE
 657:src/main.c    **** 				switch (lamp_on_state)
 658:src/main.c    **** 				{
 659:src/main.c    **** 					case init_airplane0:
 660:src/main.c    **** 						if (FuncsGSMStateAsk() == gsm_state_ready)
 661:src/main.c    **** 						{
 662:src/main.c    **** 							//lo paso a modo avion
 663:src/main.c    **** 							s_lcd[0] = '\0';
 664:src/main.c    **** 							FuncsGSMCommandAnswer ("AT+CFUN=4\r\n" , s_lcd);
 665:src/main.c    **** 							lamp_on_state = init_airplane1;
 666:src/main.c    **** 						}
 667:src/main.c    **** 						break;
 668:src/main.c    **** 
 669:src/main.c    **** 					case init_airplane1:
 670:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 671:src/main.c    **** 						{
 672:src/main.c    **** 							//en modo avion, prendo y mido
 673:src/main.c    **** 							RelayOn();
 674:src/main.c    **** 							lamp_on_state = meas_init;
 675:src/main.c    **** 						}
 676:src/main.c    **** 						break;
 677:src/main.c    **** 
 678:src/main.c    **** 					case meas_init:
ARM GAS  /tmp/ccZOHcVn.s 			page 50


 679:src/main.c    **** 						if (RelayIsOn())
 680:src/main.c    **** 						{
 681:src/main.c    **** 							lamp_on_state = meas_meas;
 682:src/main.c    **** 							counters_mode = 1;
 683:src/main.c    **** 						}
 684:src/main.c    **** 						break;
 685:src/main.c    **** 
 686:src/main.c    **** 					case meas_meas:
 687:src/main.c    **** 						if (meas_end)
 688:src/main.c    **** 						{
 689:src/main.c    **** 							meas_end = 0;
 690:src/main.c    **** 
 691:src/main.c    **** 							if (!tt_relay_on_off)
 692:src/main.c    **** 							{
 693:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 694:src/main.c    **** 								hyst = GetHysteresis (hours);
 695:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 696:src/main.c    **** #else
 697:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 698:src/main.c    **** #endif
 699:src/main.c    **** 								{
 700:src/main.c    **** 									main_state = LAMP_OFF;
 701:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 702:src/main.c    **** 									Update_TIM3_CH1 (0);
 703:src/main.c    **** #endif
 704:src/main.c    **** 									lamp_on_state = init_airplane0;
 705:src/main.c    **** 									counters_mode = 0;
 706:src/main.c    **** 									Usart2Send("APAGADO");
 707:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 708:src/main.c    **** 									tt_relay_on_off = 10000;
 709:src/main.c    **** 									RelayOff();
 710:src/main.c    **** 									LED_OFF;
 711:src/main.c    **** 								}
 712:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 713:src/main.c    **** 								else
 714:src/main.c    **** 								{
 715:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 716:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 717:src/main.c    **** 								}
 718:src/main.c    **** #endif
 719:src/main.c    **** 							}
 720:src/main.c    **** 
 721:src/main.c    **** 							if (!timer_rep)
 722:src/main.c    **** 							{
 723:src/main.c    **** 								timer_rep = param_struct.timer_reportar;
 724:src/main.c    **** 								counters_mode = 2;
 725:src/main.c    **** 								lamp_on_state = meas_reporting0;
 726:src/main.c    **** 							}
 727:src/main.c    **** 						}
 728:src/main.c    **** 						break;
 729:src/main.c    **** 
 730:src/main.c    **** 					case meas_reporting0:
 731:src/main.c    **** 						//lo saco de modo avion
 732:src/main.c    **** 						s_lcd[0] = '\0';
 733:src/main.c    **** 						FuncsGSMCommandAnswer ("AT+CFUN=1\r\n" , s_lcd);
 734:src/main.c    **** 						lamp_on_state = meas_reporting1;
 735:src/main.c    **** 						break;
ARM GAS  /tmp/ccZOHcVn.s 			page 51


 736:src/main.c    **** 
 737:src/main.c    **** 					case meas_reporting1:
 738:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 739:src/main.c    **** 						{
 740:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 741:src/main.c    **** 							{
 742:src/main.c    **** 								// fcalc = power;
 743:src/main.c    **** 								fcalc = power * KW;
 744:src/main.c    **** 								power_int = (unsigned short) fcalc;
 745:src/main.c    **** 								fcalc = fcalc - power_int;
 746:src/main.c    **** 								fcalc = fcalc * 100;
 747:src/main.c    **** 								power_dec = (unsigned short) fcalc;
 748:src/main.c    **** 
 749:src/main.c    **** 								fcalc = (acum_hours + acum_secs / 1800) * KW;
 750:src/main.c    **** 								wh_int = (unsigned short) fcalc;
 751:src/main.c    **** 								fcalc = fcalc - wh_int;
 752:src/main.c    **** 								fcalc = fcalc * 10;
 753:src/main.c    **** 								wh_dec = (unsigned short) fcalc;
 754:src/main.c    **** 
 755:src/main.c    **** 								sprintf(s_lcd, "pi: %3d.%02d wh: %3d.%01d\r\n", power_int, power_dec, wh_int, wh_dec);
 756:src/main.c    **** 
 757:src/main.c    **** 								//TODO: para debug no envio datos
 758:src/main.c    **** 								Usart2Send(s_lcd);
 759:src/main.c    **** 								FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 760:src/main.c    **** 							}
 761:src/main.c    **** 							lamp_on_state = init_airplane0;
 762:src/main.c    **** 						}
 763:src/main.c    **** 						break;
 764:src/main.c    **** 
 765:src/main.c    **** 					default:
 766:src/main.c    **** 						lamp_on_state = init_airplane0;
 767:src/main.c    **** 						break;
 768:src/main.c    **** 				}
 769:src/main.c    **** 
 770:src/main.c    **** #elif defined REPORTS_NORMAL_MODE
 771:src/main.c    **** 				switch (lamp_on_state)
 1094              		.loc 2 771 0
 1095 045e 8523     		movs	r3, #133	@ tmp430,
 1096 0460 6B44     		add	r3, r3, sp	@ tmp430,
 1097 0462 1B78     		ldrb	r3, [r3]	@ D.7216, lamp_on_state
 1098 0464 052B     		cmp	r3, #5	@ D.7216,
 1099 0466 00D9     		bls	.LCB767	@
 1100 0468 12E1     		b	.L42	@long jump	@
 1101              	.LCB767:
 1102 046a 9A00     		lsls	r2, r3, #2	@ tmp431, D.7216,
 1103 046c D24B     		ldr	r3, .L72+24	@ tmp433,
 1104 046e D318     		adds	r3, r2, r3	@ tmp432, tmp431, tmp433
 1105 0470 1B68     		ldr	r3, [r3]	@ tmp434,
 1106 0472 9F46     		mov	pc, r3	@ tmp434
 1107              		.section	.rodata.main
 1108              		.align	2
 1109              	.L44:
 1110 0028 74040000 		.word	.L43
 1111 002c 84040000 		.word	.L45
 1112 0030 94040000 		.word	.L46
 1113 0034 A8040000 		.word	.L47
 1114 0038 7A050000 		.word	.L48
ARM GAS  /tmp/ccZOHcVn.s 			page 52


 1115 003c 9A060000 		.word	.L67
 1116              		.section	.text.main
 1117              	.L43:
 772:src/main.c    **** 				{
 773:src/main.c    **** 					case init_airplane0:
 774:src/main.c    **** 						lamp_on_state++;
 1118              		.loc 2 774 0
 1119 0474 8523     		movs	r3, #133	@ tmp435,
 1120 0476 6B44     		add	r3, r3, sp	@ tmp435,
 1121 0478 1A78     		ldrb	r2, [r3]	@ D.7222, lamp_on_state
 1122 047a 8523     		movs	r3, #133	@ tmp436,
 1123 047c 6B44     		add	r3, r3, sp	@ tmp436,
 1124 047e 0132     		adds	r2, r2, #1	@ tmp437,
 1125 0480 1A70     		strb	r2, [r3]	@ tmp438, lamp_on_state
 775:src/main.c    **** 						break;
 1126              		.loc 2 775 0
 1127 0482 0DE1     		b	.L50	@
 1128              	.L45:
 776:src/main.c    **** 
 777:src/main.c    **** 					case init_airplane1:
 778:src/main.c    **** 						lamp_on_state++;
 1129              		.loc 2 778 0
 1130 0484 8523     		movs	r3, #133	@ tmp439,
 1131 0486 6B44     		add	r3, r3, sp	@ tmp439,
 1132 0488 1A78     		ldrb	r2, [r3]	@ D.7222, lamp_on_state
 1133 048a 8523     		movs	r3, #133	@ tmp440,
 1134 048c 6B44     		add	r3, r3, sp	@ tmp440,
 1135 048e 0132     		adds	r2, r2, #1	@ tmp441,
 1136 0490 1A70     		strb	r2, [r3]	@ tmp442, lamp_on_state
 779:src/main.c    **** 						break;
 1137              		.loc 2 779 0
 1138 0492 05E1     		b	.L50	@
 1139              	.L46:
 780:src/main.c    **** 
 781:src/main.c    **** 					case meas_init:
 782:src/main.c    **** 						RelayOn();
 1140              		.loc 2 782 0
 1141 0494 FFF7FEFF 		bl	RelayOn	@
 783:src/main.c    **** 						lamp_on_state = meas_meas;
 1142              		.loc 2 783 0
 1143 0498 8523     		movs	r3, #133	@ tmp443,
 1144 049a 6B44     		add	r3, r3, sp	@ tmp443,
 1145 049c 0322     		movs	r2, #3	@ tmp444,
 1146 049e 1A70     		strb	r2, [r3]	@ tmp445, lamp_on_state
 784:src/main.c    **** 						counters_mode = 1;
 1147              		.loc 2 784 0
 1148 04a0 21AB     		add	r3, sp, #132	@ tmp446,,
 1149 04a2 0122     		movs	r2, #1	@ tmp447,
 1150 04a4 1A70     		strb	r2, [r3]	@ tmp448, counters_mode
 785:src/main.c    **** 						break;
 1151              		.loc 2 785 0
 1152 04a6 FBE0     		b	.L50	@
 1153              	.L47:
 786:src/main.c    **** 
 787:src/main.c    **** 					case meas_meas:
 788:src/main.c    **** 						if (meas_end)		//termino una vuelta de mediciones, generalmente 2 segundos
 1154              		.loc 2 788 0
ARM GAS  /tmp/ccZOHcVn.s 			page 53


 1155 04a8 8323     		movs	r3, #131	@ tmp449,
 1156 04aa 6B44     		add	r3, r3, sp	@ tmp449,
 1157 04ac 1B78     		ldrb	r3, [r3]	@ tmp450, meas_end
 1158 04ae 002B     		cmp	r3, #0	@ tmp450,
 1159 04b0 00D1     		bne	.LCB817	@
 1160 04b2 F4E0     		b	.L68	@long jump	@
 1161              	.LCB817:
 789:src/main.c    **** 						{
 790:src/main.c    **** 							meas_end = 0;
 1162              		.loc 2 790 0
 1163 04b4 8323     		movs	r3, #131	@ tmp451,
 1164 04b6 6B44     		add	r3, r3, sp	@ tmp451,
 1165 04b8 0022     		movs	r2, #0	@ tmp452,
 1166 04ba 1A70     		strb	r2, [r3]	@ tmp453, meas_end
 791:src/main.c    **** 
 792:src/main.c    **** 							if (!tt_relay_on_off)
 1167              		.loc 2 792 0
 1168 04bc B84B     		ldr	r3, .L72	@ tmp454,
 1169 04be 1B88     		ldrh	r3, [r3]	@ tmp455, tt_relay_on_off
 1170 04c0 9BB2     		uxth	r3, r3	@ D.7215, tmp455
 1171 04c2 002B     		cmp	r3, #0	@ D.7215,
 1172 04c4 48D1     		bne	.L52	@,
 793:src/main.c    **** 							{
 794:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 795:src/main.c    **** 								hyst = GetHysteresis (hours);
 1173              		.loc 2 795 0
 1174 04c6 BB4B     		ldr	r3, .L72+20	@ tmp456,
 1175 04c8 1B78     		ldrb	r3, [r3]	@ tmp457, hours
 1176 04ca DBB2     		uxtb	r3, r3	@ D.7217, tmp457
 1177 04cc 7624     		movs	r4, #118	@ tmp458,
 1178 04ce 6C44     		add	r4, r4, sp	@ tmp458,
 1179 04d0 1800     		movs	r0, r3	@, D.7217
 1180 04d2 FFF7FEFF 		bl	GetHysteresis	@
 1181 04d6 0300     		movs	r3, r0	@ tmp459,
 1182 04d8 2380     		strh	r3, [r4]	@ tmp461, hyst
 796:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 1183              		.loc 2 796 0
 1184 04da FFF7FEFF 		bl	GetPhoto	@
 1185 04de 0300     		movs	r3, r0	@ tmp462,
 1186 04e0 1900     		movs	r1, r3	@ D.7216, D.7215
 1187 04e2 7623     		movs	r3, #118	@ tmp464,
 1188 04e4 6B44     		add	r3, r3, sp	@ tmp464,
 1189 04e6 1B88     		ldrh	r3, [r3]	@ D.7216, hyst
 1190 04e8 AE4A     		ldr	r2, .L72+4	@ tmp465,
 1191 04ea D31A     		subs	r3, r2, r3	@ D.7216, tmp465, D.7216
 1192 04ec 9942     		cmp	r1, r3	@ D.7216, D.7216
 1193 04ee 22DA     		bge	.L53	@,
 797:src/main.c    **** #else
 798:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 799:src/main.c    **** #endif
 800:src/main.c    **** 								{
 801:src/main.c    **** 									main_state = LAMP_OFF;
 1194              		.loc 2 801 0
 1195 04f0 8623     		movs	r3, #134	@ tmp466,
 1196 04f2 6B44     		add	r3, r3, sp	@ tmp466,
 1197 04f4 0522     		movs	r2, #5	@ tmp467,
 1198 04f6 1A70     		strb	r2, [r3]	@ tmp468, main_state
ARM GAS  /tmp/ccZOHcVn.s 			page 54


 802:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 803:src/main.c    **** 									Update_TIM3_CH1 (0);
 1199              		.loc 2 803 0
 1200 04f8 0020     		movs	r0, #0	@,
 1201 04fa FFF7FEFF 		bl	Update_TIM3_CH1	@
 804:src/main.c    **** #endif
 805:src/main.c    **** 									lamp_on_state = init_airplane0;
 1202              		.loc 2 805 0
 1203 04fe 8523     		movs	r3, #133	@ tmp469,
 1204 0500 6B44     		add	r3, r3, sp	@ tmp469,
 1205 0502 0022     		movs	r2, #0	@ tmp470,
 1206 0504 1A70     		strb	r2, [r3]	@ tmp471, lamp_on_state
 806:src/main.c    **** 									counters_mode = 0;
 1207              		.loc 2 806 0
 1208 0506 21AB     		add	r3, sp, #132	@ tmp472,,
 1209 0508 0022     		movs	r2, #0	@ tmp473,
 1210 050a 1A70     		strb	r2, [r3]	@ tmp474, counters_mode
 807:src/main.c    **** 									Usart2Send("APAGADO");
 1211              		.loc 2 807 0
 1212 050c AB4B     		ldr	r3, .L72+28	@ tmp475,
 1213 050e 1800     		movs	r0, r3	@, tmp475
 1214 0510 FFF7FEFF 		bl	Usart2Send	@
 808:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 1215              		.loc 2 808 0
 1216 0514 A64A     		ldr	r2, .L72+16	@ tmp476,
 1217 0516 A94B     		ldr	r3, .L72+28	@ tmp477,
 1218 0518 1100     		movs	r1, r2	@, tmp476
 1219 051a 1800     		movs	r0, r3	@, tmp477
 1220 051c FFF7FEFF 		bl	FuncsGSMSendSMS	@
 809:src/main.c    **** 									tt_relay_on_off = 10000;
 1221              		.loc 2 809 0
 1222 0520 9F4B     		ldr	r3, .L72	@ tmp478,
 1223 0522 A14A     		ldr	r2, .L72+8	@ tmp479,
 1224 0524 1A80     		strh	r2, [r3]	@ tmp480, tt_relay_on_off
 810:src/main.c    **** 									RelayOff();
 1225              		.loc 2 810 0
 1226 0526 FFF7FEFF 		bl	RelayOff	@
 811:src/main.c    **** 									LED_OFF;
 1227              		.loc 2 811 0
 1228 052a 9023     		movs	r3, #144	@ tmp621,
 1229 052c DB05     		lsls	r3, r3, #23	@ D.7214, tmp621,
 1230 052e 8022     		movs	r2, #128	@ tmp622,
 1231 0530 5205     		lsls	r2, r2, #21	@ tmp481, tmp622,
 1232 0532 9A61     		str	r2, [r3, #24]	@ tmp481, _268->BSRR
 1233 0534 10E0     		b	.L52	@
 1234              	.L53:
 812:src/main.c    **** 								}
 813:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 814:src/main.c    **** 								else
 815:src/main.c    **** 								{
 816:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 1235              		.loc 2 816 0
 1236 0536 FFF7FEFF 		bl	GetPhoto	@
 1237 053a 0300     		movs	r3, r0	@ tmp482,
 1238 053c 7524     		movs	r4, #117	@ tmp484,
 1239 053e 6C44     		add	r4, r4, sp	@ tmp484,
 1240 0540 1800     		movs	r0, r3	@, D.7215
ARM GAS  /tmp/ccZOHcVn.s 			page 55


 1241 0542 FFF7FEFF 		bl	GetNew1to10	@
 1242 0546 0300     		movs	r3, r0	@ tmp485,
 1243 0548 2370     		strb	r3, [r4]	@ tmp487, one_to_ten
 817:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 1244              		.loc 2 817 0
 1245 054a 7523     		movs	r3, #117	@ tmp488,
 1246 054c 6B44     		add	r3, r3, sp	@ tmp488,
 1247 054e 1B78     		ldrb	r3, [r3]	@ tmp490, one_to_ten
 1248 0550 9BB2     		uxth	r3, r3	@ D.7215, tmp489
 1249 0552 1800     		movs	r0, r3	@, D.7215
 1250 0554 FFF7FEFF 		bl	Update_TIM3_CH1	@
 1251              	.L52:
 818:src/main.c    **** 								}
 819:src/main.c    **** #endif
 820:src/main.c    **** 							}
 821:src/main.c    **** 
 822:src/main.c    **** 							if (!timer_rep)
 1252              		.loc 2 822 0
 1253 0558 994B     		ldr	r3, .L72+32	@ tmp491,
 1254 055a 1B88     		ldrh	r3, [r3]	@ tmp492, timer_rep
 1255 055c 9BB2     		uxth	r3, r3	@ D.7215, tmp492
 1256 055e 002B     		cmp	r3, #0	@ D.7215,
 1257 0560 00D0     		beq	.LCB900	@
 1258 0562 9CE0     		b	.L68	@long jump	@
 1259              	.LCB900:
 823:src/main.c    **** 							{
 824:src/main.c    **** 								timer_rep = param_struct.timer_reportar;
 1260              		.loc 2 824 0
 1261 0564 924B     		ldr	r3, .L72+16	@ tmp493,
 1262 0566 5222     		movs	r2, #82	@ tmp494,
 1263 0568 9B5C     		ldrb	r3, [r3, r2]	@ D.7217,
 1264 056a 9AB2     		uxth	r2, r3	@ D.7215, D.7217
 1265 056c 944B     		ldr	r3, .L72+32	@ tmp495,
 1266 056e 1A80     		strh	r2, [r3]	@ tmp496, timer_rep
 825:src/main.c    **** 								// counters_mode = 2;		//sigo midiendo normalmente
 826:src/main.c    **** 								lamp_on_state = meas_reporting0;
 1267              		.loc 2 826 0
 1268 0570 8523     		movs	r3, #133	@ tmp497,
 1269 0572 6B44     		add	r3, r3, sp	@ tmp497,
 1270 0574 0422     		movs	r2, #4	@ tmp498,
 1271 0576 1A70     		strb	r2, [r3]	@ tmp499, lamp_on_state
 827:src/main.c    **** 							}
 828:src/main.c    **** 						}
 829:src/main.c    **** 						break;
 1272              		.loc 2 829 0
 1273 0578 91E0     		b	.L68	@
 1274              	.L48:
 830:src/main.c    **** 
 831:src/main.c    **** 					case meas_reporting0:
 832:src/main.c    **** 
 833:src/main.c    **** 						// fcalc = power;
 834:src/main.c    **** 						fcalc = power * KW;
 1275              		.loc 2 834 0
 1276 057a 27AB     		add	r3, sp, #156	@ tmp500,,
 1277 057c 1B88     		ldrh	r3, [r3]	@ D.7216, power
 1278 057e 1800     		movs	r0, r3	@, D.7216
 1279 0580 FFF7FEFF 		bl	__aeabi_i2d	@
ARM GAS  /tmp/ccZOHcVn.s 			page 56


 1280 0584 8F4A     		ldr	r2, .L72+36	@,
 1281 0586 904B     		ldr	r3, .L72+40	@,
 1282 0588 FFF7FEFF 		bl	__aeabi_dmul	@
 1283 058c 0300     		movs	r3, r0	@ tmp501,
 1284 058e 0C00     		movs	r4, r1	@,
 1285 0590 1800     		movs	r0, r3	@, D.7223
 1286 0592 2100     		movs	r1, r4	@, D.7223
 1287 0594 FFF7FEFF 		bl	__aeabi_d2f	@
 1288 0598 031C     		adds	r3, r0, #0	@ tmp502,
 1289 059a 1F93     		str	r3, [sp, #124]	@ tmp502, fcalc
 835:src/main.c    **** 						power_int = (unsigned short) fcalc;
 1290              		.loc 2 835 0
 1291 059c 7224     		movs	r4, #114	@ tmp503,
 1292 059e 6C44     		add	r4, r4, sp	@ tmp503,
 1293 05a0 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1294 05a2 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1295 05a6 0300     		movs	r3, r0	@ tmp504,
 1296 05a8 2380     		strh	r3, [r4]	@ tmp505, power_int
 836:src/main.c    **** 						fcalc = fcalc - power_int;
 1297              		.loc 2 836 0
 1298 05aa 7223     		movs	r3, #114	@ tmp506,
 1299 05ac 6B44     		add	r3, r3, sp	@ tmp506,
 1300 05ae 1B88     		ldrh	r3, [r3]	@ D.7216, power_int
 1301 05b0 1800     		movs	r0, r3	@, D.7216
 1302 05b2 FFF7FEFF 		bl	__aeabi_i2f	@
 1303 05b6 031C     		adds	r3, r0, #0	@ D.7224,
 1304 05b8 191C     		adds	r1, r3, #0	@, D.7224
 1305 05ba 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1306 05bc FFF7FEFF 		bl	__aeabi_fsub	@
 1307 05c0 031C     		adds	r3, r0, #0	@ tmp507,
 1308 05c2 1F93     		str	r3, [sp, #124]	@ tmp507, fcalc
 837:src/main.c    **** 						fcalc = fcalc * 100;
 1309              		.loc 2 837 0
 1310 05c4 8149     		ldr	r1, .L72+44	@,
 1311 05c6 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1312 05c8 FFF7FEFF 		bl	__aeabi_fmul	@
 1313 05cc 031C     		adds	r3, r0, #0	@ tmp508,
 1314 05ce 1F93     		str	r3, [sp, #124]	@ tmp508, fcalc
 838:src/main.c    **** 						power_dec = (unsigned short) fcalc;
 1315              		.loc 2 838 0
 1316 05d0 1CAC     		add	r4, sp, #112	@ tmp509,,
 1317 05d2 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1318 05d4 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1319 05d8 0300     		movs	r3, r0	@ tmp510,
 1320 05da 2380     		strh	r3, [r4]	@ tmp511, power_dec
 839:src/main.c    **** 
 840:src/main.c    **** 						fcalc = (acum_hours + acum_secs / 1800) * KW;
 1321              		.loc 2 840 0
 1322 05dc 239A     		ldr	r2, [sp, #140]	@ tmp512, acum_secs
 1323 05de E123     		movs	r3, #225	@ tmp620,
 1324 05e0 D900     		lsls	r1, r3, #3	@, tmp620,
 1325 05e2 1000     		movs	r0, r2	@, tmp512
 1326 05e4 FFF7FEFF 		bl	__aeabi_uidiv	@
 1327 05e8 0300     		movs	r3, r0	@ tmp515,
 1328 05ea 1A00     		movs	r2, r3	@ D.7219, tmp515
 1329 05ec 229B     		ldr	r3, [sp, #136]	@ tmp516, acum_hours
 1330 05ee D318     		adds	r3, r2, r3	@ D.7219, D.7219, tmp516
ARM GAS  /tmp/ccZOHcVn.s 			page 57


 1331 05f0 1800     		movs	r0, r3	@, D.7219
 1332 05f2 FFF7FEFF 		bl	__aeabi_ui2d	@
 1333 05f6 734A     		ldr	r2, .L72+36	@,
 1334 05f8 734B     		ldr	r3, .L72+40	@,
 1335 05fa FFF7FEFF 		bl	__aeabi_dmul	@
 1336 05fe 0300     		movs	r3, r0	@ tmp517,
 1337 0600 0C00     		movs	r4, r1	@,
 1338 0602 1800     		movs	r0, r3	@, D.7223
 1339 0604 2100     		movs	r1, r4	@, D.7223
 1340 0606 FFF7FEFF 		bl	__aeabi_d2f	@
 1341 060a 031C     		adds	r3, r0, #0	@ tmp518,
 1342 060c 1F93     		str	r3, [sp, #124]	@ tmp518, fcalc
 841:src/main.c    **** 						wh_int = (unsigned short) fcalc;
 1343              		.loc 2 841 0
 1344 060e 6E24     		movs	r4, #110	@ tmp519,
 1345 0610 6C44     		add	r4, r4, sp	@ tmp519,
 1346 0612 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1347 0614 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1348 0618 0300     		movs	r3, r0	@ tmp520,
 1349 061a 2380     		strh	r3, [r4]	@ tmp521, wh_int
 842:src/main.c    **** 						fcalc = fcalc - wh_int;
 1350              		.loc 2 842 0
 1351 061c 6E23     		movs	r3, #110	@ tmp522,
 1352 061e 6B44     		add	r3, r3, sp	@ tmp522,
 1353 0620 1B88     		ldrh	r3, [r3]	@ D.7216, wh_int
 1354 0622 1800     		movs	r0, r3	@, D.7216
 1355 0624 FFF7FEFF 		bl	__aeabi_i2f	@
 1356 0628 031C     		adds	r3, r0, #0	@ D.7224,
 1357 062a 191C     		adds	r1, r3, #0	@, D.7224
 1358 062c 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1359 062e FFF7FEFF 		bl	__aeabi_fsub	@
 1360 0632 031C     		adds	r3, r0, #0	@ tmp523,
 1361 0634 1F93     		str	r3, [sp, #124]	@ tmp523, fcalc
 843:src/main.c    **** 						fcalc = fcalc * 10;
 1362              		.loc 2 843 0
 1363 0636 6649     		ldr	r1, .L72+48	@,
 1364 0638 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1365 063a FFF7FEFF 		bl	__aeabi_fmul	@
 1366 063e 031C     		adds	r3, r0, #0	@ tmp524,
 1367 0640 1F93     		str	r3, [sp, #124]	@ tmp524, fcalc
 844:src/main.c    **** 						wh_dec = (unsigned short) fcalc;
 1368              		.loc 2 844 0
 1369 0642 1BAC     		add	r4, sp, #108	@ tmp525,,
 1370 0644 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1371 0646 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1372 064a 0300     		movs	r3, r0	@ tmp526,
 1373 064c 2380     		strh	r3, [r4]	@ tmp527, wh_dec
 845:src/main.c    **** 
 846:src/main.c    **** 						sprintf(s_lcd, "pi: %3d.%02d wh: %3d.%01d\r\n", power_int, power_dec, wh_int, wh_dec);
 1374              		.loc 2 846 0
 1375 064e 7223     		movs	r3, #114	@ tmp528,
 1376 0650 6B44     		add	r3, r3, sp	@ tmp528,
 1377 0652 1C88     		ldrh	r4, [r3]	@ D.7216, power_int
 1378 0654 1CAB     		add	r3, sp, #112	@ tmp529,,
 1379 0656 1D88     		ldrh	r5, [r3]	@ D.7216, power_dec
 1380 0658 6E23     		movs	r3, #110	@ tmp530,
 1381 065a 6B44     		add	r3, r3, sp	@ tmp530,
ARM GAS  /tmp/ccZOHcVn.s 			page 58


 1382 065c 1B88     		ldrh	r3, [r3]	@ D.7216, wh_int
 1383 065e 1BAA     		add	r2, sp, #108	@ tmp531,,
 1384 0660 1288     		ldrh	r2, [r2]	@ D.7216, wh_dec
 1385 0662 5C49     		ldr	r1, .L72+52	@ tmp532,
 1386 0664 02A8     		add	r0, sp, #8	@ tmp533,,
 1387 0666 0192     		str	r2, [sp, #4]	@ D.7216,
 1388 0668 0093     		str	r3, [sp]	@ D.7216,
 1389 066a 2B00     		movs	r3, r5	@, D.7216
 1390 066c 2200     		movs	r2, r4	@, D.7216
 1391 066e FFF7FEFF 		bl	sprintf	@
 847:src/main.c    **** 
 848:src/main.c    **** 						//TODO: para debug no envio datos
 849:src/main.c    **** 						Usart2Send(s_lcd);
 1392              		.loc 2 849 0
 1393 0672 02AB     		add	r3, sp, #8	@ tmp534,,
 1394 0674 1800     		movs	r0, r3	@, tmp534
 1395 0676 FFF7FEFF 		bl	Usart2Send	@
 850:src/main.c    **** 						FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 1396              		.loc 2 850 0
 1397 067a 4D4A     		ldr	r2, .L72+16	@ tmp535,
 1398 067c 02AB     		add	r3, sp, #8	@ tmp536,,
 1399 067e 1100     		movs	r1, r2	@, tmp535
 1400 0680 1800     		movs	r0, r3	@, tmp536
 1401 0682 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 851:src/main.c    **** 						lamp_on_state = meas_meas;
 1402              		.loc 2 851 0
 1403 0686 8523     		movs	r3, #133	@ tmp537,
 1404 0688 6B44     		add	r3, r3, sp	@ tmp537,
 1405 068a 0322     		movs	r2, #3	@ tmp538,
 1406 068c 1A70     		strb	r2, [r3]	@ tmp539, lamp_on_state
 852:src/main.c    **** 						break;
 1407              		.loc 2 852 0
 1408 068e 07E0     		b	.L50	@
 1409              	.L42:
 853:src/main.c    **** 
 854:src/main.c    **** 					case meas_reporting1:
 855:src/main.c    **** 						break;
 856:src/main.c    **** 
 857:src/main.c    **** 					default:
 858:src/main.c    **** 						lamp_on_state = init_airplane0;
 1410              		.loc 2 858 0
 1411 0690 8523     		movs	r3, #133	@ tmp540,
 1412 0692 6B44     		add	r3, r3, sp	@ tmp540,
 1413 0694 0022     		movs	r2, #0	@ tmp541,
 1414 0696 1A70     		strb	r2, [r3]	@ tmp542, lamp_on_state
 859:src/main.c    **** 						break;
 1415              		.loc 2 859 0
 1416 0698 02E0     		b	.L50	@
 1417              	.L67:
 855:src/main.c    **** 
 1418              		.loc 2 855 0
 1419 069a C046     		nop
 1420 069c 00E0     		b	.L50	@
 1421              	.L68:
 829:src/main.c    **** 
 1422              		.loc 2 829 0
 1423 069e C046     		nop
ARM GAS  /tmp/ccZOHcVn.s 			page 59


 1424              	.L50:
 860:src/main.c    **** 				}
 861:src/main.c    **** 
 862:src/main.c    **** #else
 863:src/main.c    **** #error "Debe elegir la forma de reportar Normal / Airplane"
 864:src/main.c    **** #endif
 865:src/main.c    **** 
 866:src/main.c    **** 				if (counters_mode)	//si esta activo el modo de contadores mido
 1425              		.loc 2 866 0
 1426 06a0 21AB     		add	r3, sp, #132	@ tmp543,,
 1427 06a2 1B78     		ldrb	r3, [r3]	@ tmp544, counters_mode
 1428 06a4 002B     		cmp	r3, #0	@ tmp544,
 1429 06a6 00D1     		bne	.LCB1056	@
 1430 06a8 A6E0     		b	.L69	@long jump	@
 1431              	.LCB1056:
 867:src/main.c    **** 				{
 868:src/main.c    **** 					if (!timer_standby)	//update cada 200ms
 1432              		.loc 2 868 0
 1433 06aa 4B4B     		ldr	r3, .L72+56	@ tmp545,
 1434 06ac 1B88     		ldrh	r3, [r3]	@ tmp546, timer_standby
 1435 06ae 9BB2     		uxth	r3, r3	@ D.7215, tmp546
 1436 06b0 002B     		cmp	r3, #0	@ D.7215,
 1437 06b2 00D0     		beq	.LCB1061	@
 1438 06b4 A0E0     		b	.L69	@long jump	@
 1439              	.LCB1061:
 869:src/main.c    **** 					{
 870:src/main.c    **** 						if (i < SIZEOF_POWER_VECT)
 1440              		.loc 2 870 0
 1441 06b6 9F23     		movs	r3, #159	@ tmp547,
 1442 06b8 6B44     		add	r3, r3, sp	@ tmp547,
 1443 06ba 1B78     		ldrb	r3, [r3]	@ tmp548, i
 1444 06bc 092B     		cmp	r3, #9	@ tmp548,
 1445 06be 1AD8     		bhi	.L55	@,
 871:src/main.c    **** 						{
 872:src/main.c    **** 							power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 1446              		.loc 2 872 0
 1447 06c0 9F23     		movs	r3, #159	@ tmp549,
 1448 06c2 6B44     		add	r3, r3, sp	@ tmp549,
 1449 06c4 1C78     		ldrb	r4, [r3]	@ D.7216, i
 1450 06c6 FFF7FEFF 		bl	GetVGrid	@
 1451 06ca 0300     		movs	r3, r0	@ tmp550,
 1452 06cc 1D00     		movs	r5, r3	@ D.7215, tmp551
 1453 06ce FFF7FEFF 		bl	GetIGrid	@
 1454 06d2 0300     		movs	r3, r0	@ tmp552,
 1455 06d4 1900     		movs	r1, r3	@, D.7215
 1456 06d6 2800     		movs	r0, r5	@, D.7215
 1457 06d8 FFF7FEFF 		bl	PowerCalc	@
 1458 06dc 0300     		movs	r3, r0	@ tmp554,
 1459 06de 1900     		movs	r1, r3	@ D.7215, tmp555
 1460 06e0 3E4B     		ldr	r3, .L72+60	@ tmp556,
 1461 06e2 6200     		lsls	r2, r4, #1	@ tmp557, D.7216,
 1462 06e4 D152     		strh	r1, [r2, r3]	@ tmp558, power_vect
 873:src/main.c    **** 							i++;
 1463              		.loc 2 873 0
 1464 06e6 9F23     		movs	r3, #159	@ tmp559,
 1465 06e8 6B44     		add	r3, r3, sp	@ tmp559,
 1466 06ea 1A78     		ldrb	r2, [r3]	@ D.7217, i
ARM GAS  /tmp/ccZOHcVn.s 			page 60


 1467 06ec 9F23     		movs	r3, #159	@ tmp560,
 1468 06ee 6B44     		add	r3, r3, sp	@ tmp560,
 1469 06f0 0132     		adds	r2, r2, #1	@ tmp561,
 1470 06f2 1A70     		strb	r2, [r3]	@ tmp562, i
 1471 06f4 4AE0     		b	.L56	@
 1472              	.L55:
 874:src/main.c    **** 						}
 875:src/main.c    **** 						else
 876:src/main.c    **** 						{		//termine de cargar el vector, guardo muestro info
 877:src/main.c    **** 							i = 0;
 1473              		.loc 2 877 0
 1474 06f6 9F23     		movs	r3, #159	@ tmp563,
 1475 06f8 6B44     		add	r3, r3, sp	@ tmp563,
 1476 06fa 0022     		movs	r2, #0	@ tmp564,
 1477 06fc 1A70     		strb	r2, [r3]	@ tmp565, i
 878:src/main.c    **** 
 879:src/main.c    **** 							if (counters_mode == 1)	//mido normalmente
 1478              		.loc 2 879 0
 1479 06fe 21AB     		add	r3, sp, #132	@ tmp566,,
 1480 0700 1B78     		ldrb	r3, [r3]	@ tmp567, counters_mode
 1481 0702 012B     		cmp	r3, #1	@ tmp567,
 1482 0704 0BD1     		bne	.L57	@,
 880:src/main.c    **** 							{
 881:src/main.c    **** 								power = PowerCalcMean8(power_vect);
 1483              		.loc 2 881 0
 1484 0706 27AC     		add	r4, sp, #156	@ tmp568,,
 1485 0708 344B     		ldr	r3, .L72+60	@ tmp569,
 1486 070a 1800     		movs	r0, r3	@, tmp569
 1487 070c FFF7FEFF 		bl	PowerCalcMean8	@
 1488 0710 0300     		movs	r3, r0	@ tmp570,
 1489 0712 2380     		strh	r3, [r4]	@ tmp572, power
 882:src/main.c    **** 								last_power = power;
 1490              		.loc 2 882 0
 1491 0714 9A23     		movs	r3, #154	@ tmp573,
 1492 0716 6B44     		add	r3, r3, sp	@ tmp573,
 1493 0718 27AA     		add	r2, sp, #156	@ tmp574,,
 1494 071a 1288     		ldrh	r2, [r2]	@ tmp575, power
 1495 071c 1A80     		strh	r2, [r3]	@ tmp575, last_power
 1496              	.L57:
 883:src/main.c    **** 							}
 884:src/main.c    **** 
 885:src/main.c    **** 							if (counters_mode == 2)	//no mido solo update de lo viejo
 1497              		.loc 2 885 0
 1498 071e 21AB     		add	r3, sp, #132	@ tmp576,,
 1499 0720 1B78     		ldrb	r3, [r3]	@ tmp577, counters_mode
 1500 0722 022B     		cmp	r3, #2	@ tmp577,
 1501 0724 04D1     		bne	.L58	@,
 886:src/main.c    **** 								power = last_power;
 1502              		.loc 2 886 0
 1503 0726 27AB     		add	r3, sp, #156	@ tmp578,,
 1504 0728 9A22     		movs	r2, #154	@ tmp579,
 1505 072a 6A44     		add	r2, r2, sp	@ tmp579,
 1506 072c 1288     		ldrh	r2, [r2]	@ tmp580, last_power
 1507 072e 1A80     		strh	r2, [r3]	@ tmp580, power
 1508              	.L58:
 887:src/main.c    **** 
 888:src/main.c    **** 							acum_secs += power;
ARM GAS  /tmp/ccZOHcVn.s 			page 61


 1509              		.loc 2 888 0
 1510 0730 27AB     		add	r3, sp, #156	@ tmp581,,
 1511 0732 1B88     		ldrh	r3, [r3]	@ D.7219, power
 1512 0734 239A     		ldr	r2, [sp, #140]	@ tmp583, acum_secs
 1513 0736 D318     		adds	r3, r2, r3	@ tmp582, tmp583, D.7219
 1514 0738 2393     		str	r3, [sp, #140]	@ tmp582, acum_secs
 889:src/main.c    **** 							acum_secs_index++;
 1515              		.loc 2 889 0
 1516 073a 9223     		movs	r3, #146	@ tmp584,
 1517 073c 6B44     		add	r3, r3, sp	@ tmp584,
 1518 073e 1A88     		ldrh	r2, [r3]	@ D.7215, acum_secs_index
 1519 0740 9223     		movs	r3, #146	@ tmp585,
 1520 0742 6B44     		add	r3, r3, sp	@ tmp585,
 1521 0744 0132     		adds	r2, r2, #1	@ tmp586,
 1522 0746 1A80     		strh	r2, [r3]	@ tmp587, acum_secs_index
 890:src/main.c    **** 							show_power_index++;
 1523              		.loc 2 890 0
 1524 0748 8723     		movs	r3, #135	@ tmp588,
 1525 074a 6B44     		add	r3, r3, sp	@ tmp588,
 1526 074c 1A78     		ldrb	r2, [r3]	@ D.7217, show_power_index
 1527 074e 8723     		movs	r3, #135	@ tmp589,
 1528 0750 6B44     		add	r3, r3, sp	@ tmp589,
 1529 0752 0132     		adds	r2, r2, #1	@ tmp590,
 1530 0754 1A70     		strb	r2, [r3]	@ tmp591, show_power_index
 891:src/main.c    **** 
 892:src/main.c    **** 							if (acum_secs_index >= 1800)
 1531              		.loc 2 892 0
 1532 0756 9223     		movs	r3, #146	@ tmp592,
 1533 0758 6B44     		add	r3, r3, sp	@ tmp592,
 1534 075a 1B88     		ldrh	r3, [r3]	@ tmp593, acum_secs_index
 1535 075c 204A     		ldr	r2, .L72+64	@ tmp594,
 1536 075e 9342     		cmp	r3, r2	@ tmp593, tmp594
 1537 0760 10D9     		bls	.L59	@,
 893:src/main.c    **** 							{
 894:src/main.c    **** 								acum_hours += (acum_secs / 1800);	//lo convierto a Wh, para no perder bits en cada cuenta
 1538              		.loc 2 894 0
 1539 0762 239A     		ldr	r2, [sp, #140]	@ tmp595, acum_secs
 1540 0764 E123     		movs	r3, #225	@ tmp619,
 1541 0766 D900     		lsls	r1, r3, #3	@, tmp619,
 1542 0768 1000     		movs	r0, r2	@, tmp595
 1543 076a FFF7FEFF 		bl	__aeabi_uidiv	@
 1544 076e 0300     		movs	r3, r0	@ tmp598,
 1545 0770 1A00     		movs	r2, r3	@ D.7219, tmp598
 1546 0772 229B     		ldr	r3, [sp, #136]	@ tmp600, acum_hours
 1547 0774 9B18     		adds	r3, r3, r2	@ tmp599, tmp600, D.7219
 1548 0776 2293     		str	r3, [sp, #136]	@ tmp599, acum_hours
 895:src/main.c    **** 								acum_secs = 0;
 1549              		.loc 2 895 0
 1550 0778 0023     		movs	r3, #0	@ tmp601,
 1551 077a 2393     		str	r3, [sp, #140]	@ tmp601, acum_secs
 896:src/main.c    **** 								acum_secs_index = 0;
 1552              		.loc 2 896 0
 1553 077c 9223     		movs	r3, #146	@ tmp602,
 1554 077e 6B44     		add	r3, r3, sp	@ tmp602,
 1555 0780 0022     		movs	r2, #0	@ tmp603,
 1556 0782 1A80     		strh	r2, [r3]	@ tmp604, acum_secs_index
 1557              	.L59:
ARM GAS  /tmp/ccZOHcVn.s 			page 62


 897:src/main.c    **** 							}
 898:src/main.c    **** 
 899:src/main.c    **** 							//cuando termino una medicion completa aviso con meas_end
 900:src/main.c    **** 							meas_end = 1;
 1558              		.loc 2 900 0
 1559 0784 8323     		movs	r3, #131	@ tmp605,
 1560 0786 6B44     		add	r3, r3, sp	@ tmp605,
 1561 0788 0122     		movs	r2, #1	@ tmp606,
 1562 078a 1A70     		strb	r2, [r3]	@ tmp607, meas_end
 1563              	.L56:
 901:src/main.c    **** 
 902:src/main.c    **** 
 903:src/main.c    **** 							// if (show_power_index >= 30)
 904:src/main.c    **** 							// {
 905:src/main.c    **** 							// 	show_power = 1;
 906:src/main.c    **** 							// 	show_power_index = 0;
 907:src/main.c    **** 							// }
 908:src/main.c    **** 							//
 909:src/main.c    **** 							// if (show_power)
 910:src/main.c    **** 							// {
 911:src/main.c    **** 							// 	// fcalc = power;
 912:src/main.c    **** 							// 	fcalc = power * KW;
 913:src/main.c    **** 							// 	power_int = (unsigned short) fcalc;
 914:src/main.c    **** 							// 	fcalc = fcalc - power_int;
 915:src/main.c    **** 							// 	fcalc = fcalc * 100;
 916:src/main.c    **** 							// 	power_dec = (unsigned short) fcalc;
 917:src/main.c    **** 							//
 918:src/main.c    **** 							// 	fcalc = (acum_hours + acum_secs / 1800) * KW;
 919:src/main.c    **** 							// 	wh_int = (unsigned short) fcalc;
 920:src/main.c    **** 							// 	fcalc = fcalc - wh_int;
 921:src/main.c    **** 							// 	fcalc = fcalc * 10;
 922:src/main.c    **** 							// 	wh_dec = (unsigned short) fcalc;
 923:src/main.c    **** 							//
 924:src/main.c    **** 							// 	sprintf(s_lcd, "pi: %3d.%02d wh: %3d.%01d\r\n", power_int, power_dec, wh_int, wh_dec);
 925:src/main.c    **** 							//
 926:src/main.c    **** 							// 	//TODO: para debug no envio datos
 927:src/main.c    **** 							// 	Usart2Send(s_lcd);
 928:src/main.c    **** 							//
 929:src/main.c    **** 							// 	show_power = 0;
 930:src/main.c    **** 							// }
 931:src/main.c    **** 						}
 932:src/main.c    **** 						timer_standby = 200;		//10 veces 200ms
 1564              		.loc 2 932 0
 1565 078c 124B     		ldr	r3, .L72+56	@ tmp608,
 1566 078e C822     		movs	r2, #200	@ tmp609,
 1567 0790 1A80     		strh	r2, [r3]	@ tmp610, timer_standby
 933:src/main.c    **** 					}
 934:src/main.c    **** 				}
 935:src/main.c    **** 				break;
 1568              		.loc 2 935 0
 1569 0792 31E0     		b	.L69	@
 1570              	.L25:
 936:src/main.c    **** 
 937:src/main.c    **** 			default:
 938:src/main.c    **** 				main_state = MAIN_INIT;
 1571              		.loc 2 938 0
 1572 0794 8623     		movs	r3, #134	@ tmp611,
ARM GAS  /tmp/ccZOHcVn.s 			page 63


 1573 0796 6B44     		add	r3, r3, sp	@ tmp611,
 1574 0798 0022     		movs	r2, #0	@ tmp612,
 1575 079a 1A70     		strb	r2, [r3]	@ tmp613, main_state
 939:src/main.c    **** 				break;
 1576              		.loc 2 939 0
 1577 079c 2DE0     		b	.L34	@
 1578              	.L73:
 1579 079e C046     		.align	2
 1580              	.L72:
 1581 07a0 00000000 		.word	tt_relay_on_off
 1582 07a4 8A0E0000 		.word	3722
 1583 07a8 10270000 		.word	10000
 1584 07ac 08010000 		.word	.LC36
 1585 07b0 00000000 		.word	param_struct
 1586 07b4 00000000 		.word	hours
 1587 07b8 28000000 		.word	.L44
 1588 07bc 14010000 		.word	.LC40
 1589 07c0 00000000 		.word	timer_rep
 1590 07c4 90F7AA95 		.word	-1783957616
 1591 07c8 09BF843F 		.word	1065664265
 1592 07cc 0000C842 		.word	1120403456
 1593 07d0 00002041 		.word	1092616192
 1594 07d4 1C010000 		.word	.LC43
 1595 07d8 00000000 		.word	timer_standby
 1596 07dc 00000000 		.word	power_vect
 1597 07e0 07070000 		.word	1799
 1598              	.L62:
 564:src/main.c    **** 
 1599              		.loc 2 564 0
 1600 07e4 C046     		nop
 1601 07e6 08E0     		b	.L34	@
 1602              	.L63:
 588:src/main.c    **** 
 1603              		.loc 2 588 0
 1604 07e8 C046     		nop
 1605 07ea 06E0     		b	.L34	@
 1606              	.L64:
 608:src/main.c    **** 
 1607              		.loc 2 608 0
 1608 07ec C046     		nop
 1609 07ee 04E0     		b	.L34	@
 1610              	.L65:
 629:src/main.c    **** 
 1611              		.loc 2 629 0
 1612 07f0 C046     		nop
 1613 07f2 02E0     		b	.L34	@
 1614              	.L66:
 653:src/main.c    **** 
 1615              		.loc 2 653 0
 1616 07f4 C046     		nop
 1617 07f6 00E0     		b	.L34	@
 1618              	.L69:
 935:src/main.c    **** 
 1619              		.loc 2 935 0
 1620 07f8 C046     		nop
 1621              	.L34:
 940:src/main.c    **** 		}
ARM GAS  /tmp/ccZOHcVn.s 			page 64


 941:src/main.c    **** 
 942:src/main.c    **** 		//Cosas que dependen de las muestras
 943:src/main.c    **** 		if (seq_ready)
 1622              		.loc 2 943 0
 1623 07fa 094B     		ldr	r3, .L74	@ tmp614,
 1624 07fc 1B78     		ldrb	r3, [r3]	@ tmp615, seq_ready
 1625 07fe DBB2     		uxtb	r3, r3	@ D.7217, tmp615
 1626 0800 002B     		cmp	r3, #0	@ D.7217,
 1627 0802 06D0     		beq	.L60	@,
 944:src/main.c    **** 		{
 945:src/main.c    **** 			seq_ready = 0;
 1628              		.loc 2 945 0
 1629 0804 064B     		ldr	r3, .L74	@ tmp616,
 1630 0806 0022     		movs	r2, #0	@ tmp617,
 1631 0808 1A70     		strb	r2, [r3]	@ tmp618, seq_ready
 946:src/main.c    **** 			UpdateVGrid ();
 1632              		.loc 2 946 0
 1633 080a FFF7FEFF 		bl	UpdateVGrid	@
 947:src/main.c    **** 			UpdateIGrid ();
 1634              		.loc 2 947 0
 1635 080e FFF7FEFF 		bl	UpdateIGrid	@
 1636              	.L60:
 948:src/main.c    **** 		}
 949:src/main.c    **** 
 950:src/main.c    **** 		//Cosas que no dependen del estado del programa
 951:src/main.c    **** 		UpdateRelay ();
 1637              		.loc 2 951 0
 1638 0812 FFF7FEFF 		bl	UpdateRelay	@
 952:src/main.c    **** 		UpdatePhotoTransistor();
 1639              		.loc 2 952 0
 1640 0816 FFF7FEFF 		bl	UpdatePhotoTransistor	@
 953:src/main.c    **** #ifdef USE_GSM
 954:src/main.c    **** 		FuncsGSM();
 1641              		.loc 2 954 0
 1642 081a FFF7FEFF 		bl	FuncsGSM	@
 955:src/main.c    **** #endif
 956:src/main.c    **** 	}	//end while 1
 1643              		.loc 2 956 0
 1644 081e E0E4     		b	.L61	@
 1645              	.L75:
 1646              		.align	2
 1647              	.L74:
 1648 0820 00000000 		.word	seq_ready
 1649              		.cfi_endproc
 1650              	.LFE20:
 1651              		.size	main, .-main
 1652              		.section	.rodata
 1653              		.align	2
 1654              	.LC46:
 1655 0138 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1655      3A7B226D 
 1655      794E616D 
 1655      65223A22 
 1655      4E75636C 
 1656              		.align	2
 1657              	.LC48:
 1658 0150 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
ARM GAS  /tmp/ccZOHcVn.s 			page 65


 1658      54656D70 
 1658      65726174 
 1658      75726522 
 1658      3A256C75 
 1659 0169 000000   		.align	2
 1660              	.LC50:
 1661 016c 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1661      48756D69 
 1661      64697479 
 1661      223A256C 
 1661      752E256C 
 1662 0182 0000     		.align	2
 1663              	.LC52:
 1664 0184 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1664      50726573 
 1664      73757265 
 1664      223A256C 
 1664      752E256C 
 1665 019a 0000     		.align	2
 1666              	.LC54:
 1667 019c 7D7D00   		.ascii	"}}\000"
 1668              		.section	.text.prepare_json_pkt,"ax",%progbits
 1669              		.align	2
 1670              		.global	prepare_json_pkt
 1671              		.code	16
 1672              		.thumb_func
 1673              		.type	prepare_json_pkt, %function
 1674              	prepare_json_pkt:
 1675              	.LFB21:
 957:src/main.c    **** 
 958:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 959:src/main.c    **** 
 960:src/main.c    **** 	while (1)
 961:src/main.c    **** 	{
 962:src/main.c    **** 		switch (main_state)
 963:src/main.c    **** 		{
 964:src/main.c    **** 			case MAIN_INIT:
 965:src/main.c    **** 				RelayOff();
 966:src/main.c    **** 				LED_OFF;
 967:src/main.c    **** 				FillPhotoBuffer();
 968:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 969:src/main.c    **** 				FillTempBuffer();
 970:src/main.c    **** #endif
 971:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 972:src/main.c    **** 				Update_TIM3_CH1 (0);
 973:src/main.c    **** #endif
 974:src/main.c    **** 				main_state = SYNCHRO_ADC;
 975:src/main.c    **** #ifdef ADC_WITH_INT
 976:src/main.c    **** 				seq_ready = 0;
 977:src/main.c    **** #endif
 978:src/main.c    **** 				break;
 979:src/main.c    **** 
 980:src/main.c    **** 			case SYNCHRO_ADC:
 981:src/main.c    **** #ifdef ADC_WITH_INT
 982:src/main.c    **** 				if (seq_ready)
 983:src/main.c    **** #endif
 984:src/main.c    **** 				{
ARM GAS  /tmp/ccZOHcVn.s 			page 66


 985:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 986:src/main.c    **** 				}
 987:src/main.c    **** 				break;
 988:src/main.c    **** 
 989:src/main.c    **** 			case SET_ZERO_CURRENT:
 990:src/main.c    **** 				main_state = LAMP_OFF;
 991:src/main.c    **** 				break;
 992:src/main.c    **** 
 993:src/main.c    **** 			case LAMP_OFF:
 994:src/main.c    **** 				if (!tt_relay_on_off)
 995:src/main.c    **** 				{
 996:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 997:src/main.c    **** 					{
 998:src/main.c    **** 						main_state = LAMP_ON;
 999:src/main.c    **** 						tt_relay_on_off = 10000;
1000:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
1001:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
1002:src/main.c    **** 	#endif
1003:src/main.c    **** 
1004:src/main.c    **** 						RelayOn();
1005:src/main.c    **** 						LED_ON;
1006:src/main.c    **** 	#ifdef WITH_HYST
1007:src/main.c    **** 						hours = 0;
1008:src/main.c    **** 	#endif
1009:src/main.c    **** 					}
1010:src/main.c    **** 				}
1011:src/main.c    **** 				break;
1012:src/main.c    **** 
1013:src/main.c    **** 			case LAMP_ON:
1014:src/main.c    **** 				if (!tt_relay_on_off)
1015:src/main.c    **** 				{
1016:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
1017:src/main.c    **** 					hyst = GetHysteresis (hours);
1018:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
1019:src/main.c    **** 	#else
1020:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
1021:src/main.c    **** 	#endif
1022:src/main.c    **** 					{
1023:src/main.c    **** 						main_state = LAMP_OFF;
1024:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
1025:src/main.c    **** 						Update_TIM3_CH1 (0);
1026:src/main.c    **** 	#endif
1027:src/main.c    **** 						tt_relay_on_off = 10000;
1028:src/main.c    **** 						RelayOff();
1029:src/main.c    **** 						LED_OFF;
1030:src/main.c    **** 					}
1031:src/main.c    **** 				}
1032:src/main.c    **** 
1033:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
1034:src/main.c    **** 				if (main_state == LAMP_ON)
1035:src/main.c    **** 				{
1036:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
1037:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
1038:src/main.c    **** 				}
1039:src/main.c    **** 	#endif
1040:src/main.c    **** 				break;
1041:src/main.c    **** 
ARM GAS  /tmp/ccZOHcVn.s 			page 67


1042:src/main.c    **** 			default:
1043:src/main.c    **** 				main_state = MAIN_INIT;
1044:src/main.c    **** 				break;
1045:src/main.c    **** 		}
1046:src/main.c    **** 
1047:src/main.c    **** 		if (!timer_standby)
1048:src/main.c    **** 		{
1049:src/main.c    **** #ifdef WITH_TEMP_CONTROL
1050:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
1051:src/main.c    **** #else
1052:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
1053:src/main.c    **** #endif
1054:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
1055:src/main.c    **** 			Usart2Send(s_lcd);
1056:src/main.c    **** 			timer_standby = 2000;
1057:src/main.c    **** 		}
1058:src/main.c    **** 
1059:src/main.c    **** 		//Cosas que no dependen del estado del programa
1060:src/main.c    **** 		UpdateRelay ();
1061:src/main.c    **** #ifdef WITH_TEMP_CONTROL
1062:src/main.c    **** 		UpdateTemp();
1063:src/main.c    **** #endif
1064:src/main.c    **** 		UpdatePhotoTransistor();
1065:src/main.c    **** 	}	//end while 1
1066:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
1067:src/main.c    **** #endif	//USE_REDONDA_BASIC
1068:src/main.c    **** 
1069:src/main.c    **** 
1070:src/main.c    **** #ifdef USE_MQTT_LIB
1071:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
1072:src/main.c    **** 	int rc = 0;
1073:src/main.c    **** 	char buf[200];
1074:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
1075:src/main.c    **** 	char* payload = "mypayload";
1076:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
1077:src/main.c    **** 	int len = 0;
1078:src/main.c    **** 
1079:src/main.c    **** 	data.clientID.cstring = "me";
1080:src/main.c    **** 	data.keepAliveInterval = 20;
1081:src/main.c    **** 	data.cleansession = 1;
1082:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
1083:src/main.c    **** 
1084:src/main.c    **** 	topicString.cstring = "mytopic";
1085:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
1086:src/main.c    **** 
1087:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
1088:src/main.c    **** 	//falta abrir puerto
1089:src/main.c    **** 	//falta enviar al socket
1090:src/main.c    **** 	//falta cerrar socket
1091:src/main.c    **** #endif
1092:src/main.c    **** 
1093:src/main.c    **** //	//---------- Prueba USART2 --------//
1094:src/main.c    **** //
1095:src/main.c    **** //    while( 1 )
1096:src/main.c    **** //    {
1097:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1098:src/main.c    **** //        Wait_ms(3000);
ARM GAS  /tmp/ccZOHcVn.s 			page 68


1099:src/main.c    **** //    }
1100:src/main.c    **** //
1101:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
1102:src/main.c    **** 
1103:src/main.c    **** 	//---------- Prueba con GPS --------//
1104:src/main.c    **** #ifdef USE_GPS
1105:src/main.c    **** 	Usart2SendSingle('M');
1106:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1107:src/main.c    **** 	Wait_ms(1000);
1108:src/main.c    **** 
1109:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
1110:src/main.c    **** 
1111:src/main.c    **** 	//mando reset al gps
1112:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
1113:src/main.c    **** 	GPSStartResetSM ();
1114:src/main.c    **** 	while (GPSStart() != RESP_OK);
1115:src/main.c    **** 
1116:src/main.c    **** 	//mando conf al gps
1117:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
1118:src/main.c    **** 	GPSConfigResetSM ();
1119:src/main.c    **** 	while (GPSConfig() != RESP_OK);
1120:src/main.c    **** 
1121:src/main.c    **** //	//mando reset factory al gps
1122:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
1123:src/main.c    **** //	GPSResetFactoryResetSM ();
1124:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
1125:src/main.c    **** 
1126:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
1127:src/main.c    **** //	timer_standby = 60000;
1128:src/main.c    **** //	while( timer_standby )
1129:src/main.c    **** 	while( 1 )
1130:src/main.c    **** 	{
1131:src/main.c    **** 		if (gps_pckt_ready)
1132:src/main.c    **** 		{
1133:src/main.c    **** 			gps_pckt_ready = 0;
1134:src/main.c    **** 			//Usart2SendSingle('P');
1135:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
1136:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
1137:src/main.c    **** 		}
1138:src/main.c    **** 
1139:src/main.c    **** 		GPSProcess();
1140:src/main.c    **** 	}
1141:src/main.c    **** #endif
1142:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
1143:src/main.c    **** 
1144:src/main.c    **** 	//---------- Prueba con GSM --------//
1145:src/main.c    **** #ifdef USE_GSM
1146:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
1147:src/main.c    **** 
1148:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
1149:src/main.c    **** 
1150:src/main.c    **** 
1151:src/main.c    **** 	//Pruebo USART1
1152:src/main.c    **** //	while (1)
1153:src/main.c    **** //	{
1154:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
1155:src/main.c    **** //			Wait_ms(50);
ARM GAS  /tmp/ccZOHcVn.s 			page 69


1156:src/main.c    **** //	}
1157:src/main.c    **** 
1158:src/main.c    **** 
1159:src/main.c    **** 	//mando start al gsm
1160:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
1161:src/main.c    **** 	//GPSStartResetSM ();
1162:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
1163:src/main.c    **** 	while (timer_standby)
1164:src/main.c    **** 	{
1165:src/main.c    **** 		i = GSM_Start();
1166:src/main.c    **** 		if (i == 2)
1167:src/main.c    **** 		{
1168:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
1169:src/main.c    **** 			timer_standby = 0;
1170:src/main.c    **** 		}
1171:src/main.c    **** 
1172:src/main.c    **** 		if (i == 4)
1173:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
1174:src/main.c    **** 	}
1175:src/main.c    **** 
1176:src/main.c    **** 	//mando conf al gsm
1177:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
1178:src/main.c    **** 	//GPSConfigResetSM ();
1179:src/main.c    **** 
1180:src/main.c    **** 	i = 0;
1181:src/main.c    **** 	while (i == 0)
1182:src/main.c    **** 	{
1183:src/main.c    **** 		ii = GSM_Config(1000);
1184:src/main.c    **** 
1185:src/main.c    **** 		if (ii == 2)
1186:src/main.c    **** 			i = 0;
1187:src/main.c    **** 		else if (ii > 2)
1188:src/main.c    **** 		{
1189:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
1190:src/main.c    **** 			while (1);
1191:src/main.c    **** 		}
1192:src/main.c    **** 
1193:src/main.c    **** 		GSMProcess();
1194:src/main.c    **** 		GSMReceive ();
1195:src/main.c    **** 
1196:src/main.c    **** 		if (gsm_pckt_ready)
1197:src/main.c    **** 		{
1198:src/main.c    **** 			gsm_pckt_ready = 0;
1199:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1200:src/main.c    **** 		}
1201:src/main.c    **** 
1202:src/main.c    **** 		if (LIGHT)
1203:src/main.c    **** 			LED_ON;
1204:src/main.c    **** 		else
1205:src/main.c    **** 			LED_OFF;
1206:src/main.c    **** 	}
1207:src/main.c    **** 
1208:src/main.c    **** 
1209:src/main.c    **** 	while( 1 )
1210:src/main.c    **** 	{
1211:src/main.c    **** 		if (gsm_pckt_ready)
1212:src/main.c    **** 		{
ARM GAS  /tmp/ccZOHcVn.s 			page 70


1213:src/main.c    **** 			gsm_pckt_ready = 0;
1214:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1215:src/main.c    **** 		}
1216:src/main.c    **** 
1217:src/main.c    **** 		GSMProcess();
1218:src/main.c    **** 
1219:src/main.c    **** 		if (LIGHT)
1220:src/main.c    **** 			LED_ON;
1221:src/main.c    **** 
1222:src/main.c    **** 	}
1223:src/main.c    **** #endif
1224:src/main.c    **** 
1225:src/main.c    **** 
1226:src/main.c    **** 
1227:src/main.c    **** 
1228:src/main.c    **** 	//---------- Prueba temp --------//
1229:src/main.c    **** 	/*
1230:src/main.c    **** 	while (1)
1231:src/main.c    **** 	{
1232:src/main.c    **** 		local_meas = GetTemp();
1233:src/main.c    **** 		if (local_meas != local_meas_last)
1234:src/main.c    **** 		{
1235:src/main.c    **** 			LED_ON;
1236:src/main.c    **** 			local_meas_last = local_meas;
1237:src/main.c    **** 			LCD_2DO_RENGLON;
1238:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
1239:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
1240:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
1241:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
1242:src/main.c    **** 			LCDTransmitStr(s_lcd);
1243:src/main.c    **** 			LED_OFF;
1244:src/main.c    **** 		}
1245:src/main.c    **** 
1246:src/main.c    **** 		UpdateTemp();
1247:src/main.c    **** 	}
1248:src/main.c    **** 	*/
1249:src/main.c    **** 	//---------- Fin prueba temp --------//
1250:src/main.c    **** 
1251:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
1252:src/main.c    **** 	/*
1253:src/main.c    **** 	local_meas = 0;
1254:src/main.c    **** 	while (1)
1255:src/main.c    **** 	{
1256:src/main.c    **** 		LCD_2DO_RENGLON;
1257:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
1258:src/main.c    **** 		fcalc = local_meas;
1259:src/main.c    **** 		fcalc = fcalc * K_1TO10;
1260:src/main.c    **** 		one_int = (short) fcalc;
1261:src/main.c    **** 		fcalc = fcalc - one_int;
1262:src/main.c    **** 		fcalc = fcalc * 10;
1263:src/main.c    **** 		one_dec = (short) fcalc;
1264:src/main.c    **** 
1265:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
1266:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
1267:src/main.c    **** 		LCDTransmitStr(s_lcd);
1268:src/main.c    **** 
1269:src/main.c    **** 		Wait_ms (1000);
ARM GAS  /tmp/ccZOHcVn.s 			page 71


1270:src/main.c    **** 		if (local_meas <= 255)
1271:src/main.c    **** 			local_meas = 0;
1272:src/main.c    **** 		else
1273:src/main.c    **** 			local_meas++;
1274:src/main.c    **** 	}
1275:src/main.c    **** 	*/
1276:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
1277:src/main.c    **** 
1278:src/main.c    **** 
1279:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
1280:src/main.c    **** 
1281:src/main.c    **** 	return 0;
1282:src/main.c    **** }
1283:src/main.c    **** 
1284:src/main.c    **** //--- End of Main ---//
1285:src/main.c    **** 
1286:src/main.c    **** 
1287:src/main.c    **** 
1288:src/main.c    **** 
1289:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
1290:src/main.c    **** {
 1676              		.loc 2 1290 0
 1677              		.cfi_startproc
 1678 0000 00B5     		push	{lr}	@
 1679              	.LCFI6:
 1680              		.cfi_def_cfa_offset 4
 1681              		.cfi_offset 14, -4
 1682 0002 97B0     		sub	sp, sp, #92	@,,
 1683              	.LCFI7:
 1684              		.cfi_def_cfa_offset 96
 1685 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
1291:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1686              		.loc 2 1291 0
 1687 0006 0123     		movs	r3, #1	@ tmp112,
 1688 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1689 000a 0223     		movs	r3, #2	@ tmp113,
 1690 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1691 000e 0323     		movs	r3, #3	@ tmp114,
 1692 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1693 0012 0423     		movs	r3, #4	@ tmp115,
 1694 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1695 0016 0523     		movs	r3, #5	@ tmp116,
 1696 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1697 001a 0623     		movs	r3, #6	@ tmp117,
 1698 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
1292:src/main.c    ****       char tempbuff[40];
1293:src/main.c    ****       volatile float HUMIDITY_Value;
1294:src/main.c    ****       volatile float TEMPERATURE_Value;
1295:src/main.c    ****       volatile float PRESSURE_Value;
1296:src/main.c    **** 
1297:src/main.c    **** 
1298:src/main.c    **** 
1299:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1699              		.loc 2 1299 0
 1700 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1701 0020 1E4B     		ldr	r3, .L78	@ tmp119,
 1702 0022 1000     		movs	r0, r2	@ tmp120, tmp118
ARM GAS  /tmp/ccZOHcVn.s 			page 72


 1703 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1704 0026 1823     		movs	r3, #24	@ tmp122,
 1705 0028 1A00     		movs	r2, r3	@, tmp122
 1706 002a FFF7FEFF 		bl	memcpy	@
1300:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1301:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1302:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1707              		.loc 2 1302 0
 1708 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1709 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1710 0032 1B49     		ldr	r1, .L78+4	@ tmp127,
 1711 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1712 0036 FFF7FEFF 		bl	sprintf	@
1303:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1713              		.loc 2 1303 0
 1714 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1715 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1716 003e 1100     		movs	r1, r2	@, tmp129
 1717 0040 1800     		movs	r0, r3	@, tmp130
 1718 0042 FFF7FEFF 		bl	strcat	@
1304:src/main.c    **** 
1305:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1306:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1307:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1719              		.loc 2 1307 0
 1720 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1721 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1722 004a 1649     		ldr	r1, .L78+8	@ tmp133,
 1723 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1724 004e FFF7FEFF 		bl	sprintf	@
1308:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1725              		.loc 2 1308 0
 1726 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1727 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1728 0056 1100     		movs	r1, r2	@, tmp135
 1729 0058 1800     		movs	r0, r3	@, tmp136
 1730 005a FFF7FEFF 		bl	strcat	@
1309:src/main.c    **** 
1310:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1311:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1312:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1731              		.loc 2 1312 0
 1732 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1733 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1734 0062 1149     		ldr	r1, .L78+12	@ tmp139,
 1735 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1736 0066 FFF7FEFF 		bl	sprintf	@
1313:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1737              		.loc 2 1313 0
 1738 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1739 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1740 006e 1100     		movs	r1, r2	@, tmp141
 1741 0070 1800     		movs	r0, r3	@, tmp142
 1742 0072 FFF7FEFF 		bl	strcat	@
1314:src/main.c    **** 
1315:src/main.c    **** 
1316:src/main.c    ****       strcat((char *)buffer,"}}");
ARM GAS  /tmp/ccZOHcVn.s 			page 73


 1743              		.loc 2 1316 0
 1744 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1745 0078 1800     		movs	r0, r3	@, tmp143
 1746 007a FFF7FEFF 		bl	strlen	@
 1747 007e 0300     		movs	r3, r0	@ tmp144,
 1748 0080 1A00     		movs	r2, r3	@ D.7248, tmp145
 1749 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1750 0084 9A18     		adds	r2, r3, r2	@ D.7249, tmp146, D.7248
 1751 0086 094B     		ldr	r3, .L78+16	@ tmp147,
 1752 0088 1000     		movs	r0, r2	@ tmp148, D.7249
 1753 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1754 008c 0323     		movs	r3, #3	@ tmp150,
 1755 008e 1A00     		movs	r2, r3	@, tmp150
 1756 0090 FFF7FEFF 		bl	memcpy	@
1317:src/main.c    **** 
1318:src/main.c    ****       return;
 1757              		.loc 2 1318 0
 1758 0094 C046     		nop
1319:src/main.c    **** }
 1759              		.loc 2 1319 0
 1760 0096 17B0     		add	sp, sp, #92	@,,
 1761              		@ sp needed	@
 1762 0098 00BD     		pop	{pc}
 1763              	.L79:
 1764 009a C046     		.align	2
 1765              	.L78:
 1766 009c 38010000 		.word	.LC46
 1767 00a0 50010000 		.word	.LC48
 1768 00a4 6C010000 		.word	.LC50
 1769 00a8 84010000 		.word	.LC52
 1770 00ac 9C010000 		.word	.LC54
 1771              		.cfi_endproc
 1772              	.LFE21:
 1773              		.size	prepare_json_pkt, .-prepare_json_pkt
 1774              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1775              		.align	2
 1776              		.global	TimingDelay_Decrement
 1777              		.code	16
 1778              		.thumb_func
 1779              		.type	TimingDelay_Decrement, %function
 1780              	TimingDelay_Decrement:
 1781              	.LFB22:
1320:src/main.c    **** 
1321:src/main.c    **** void TimingDelay_Decrement(void)
1322:src/main.c    **** {
 1782              		.loc 2 1322 0
 1783              		.cfi_startproc
 1784 0000 10B5     		push	{r4, lr}	@
 1785              	.LCFI8:
 1786              		.cfi_def_cfa_offset 8
 1787              		.cfi_offset 4, -8
 1788              		.cfi_offset 14, -4
1323:src/main.c    **** 	if (wait_ms_var)
 1789              		.loc 2 1323 0
 1790 0002 4B4B     		ldr	r3, .L93	@ tmp145,
 1791 0004 1B88     		ldrh	r3, [r3]	@ tmp146, wait_ms_var
 1792 0006 9BB2     		uxth	r3, r3	@ D.7261, tmp146
ARM GAS  /tmp/ccZOHcVn.s 			page 74


 1793 0008 002B     		cmp	r3, #0	@ D.7261,
 1794 000a 06D0     		beq	.L81	@,
1324:src/main.c    **** 		wait_ms_var--;
 1795              		.loc 2 1324 0
 1796 000c 484B     		ldr	r3, .L93	@ tmp147,
 1797 000e 1B88     		ldrh	r3, [r3]	@ tmp148, wait_ms_var
 1798 0010 9BB2     		uxth	r3, r3	@ D.7261, tmp148
 1799 0012 013B     		subs	r3, r3, #1	@ tmp149,
 1800 0014 9AB2     		uxth	r2, r3	@ D.7261, tmp149
 1801 0016 464B     		ldr	r3, .L93	@ tmp150,
 1802 0018 1A80     		strh	r2, [r3]	@ tmp151, wait_ms_var
 1803              	.L81:
1325:src/main.c    **** 
1326:src/main.c    **** 	if (timer_standby)
 1804              		.loc 2 1326 0
 1805 001a 464B     		ldr	r3, .L93+4	@ tmp152,
 1806 001c 1B88     		ldrh	r3, [r3]	@ tmp153, timer_standby
 1807 001e 9BB2     		uxth	r3, r3	@ D.7261, tmp153
 1808 0020 002B     		cmp	r3, #0	@ D.7261,
 1809 0022 06D0     		beq	.L82	@,
1327:src/main.c    **** 		timer_standby--;
 1810              		.loc 2 1327 0
 1811 0024 434B     		ldr	r3, .L93+4	@ tmp154,
 1812 0026 1B88     		ldrh	r3, [r3]	@ tmp155, timer_standby
 1813 0028 9BB2     		uxth	r3, r3	@ D.7261, tmp155
 1814 002a 013B     		subs	r3, r3, #1	@ tmp156,
 1815 002c 9AB2     		uxth	r2, r3	@ D.7261, tmp156
 1816 002e 414B     		ldr	r3, .L93+4	@ tmp157,
 1817 0030 1A80     		strh	r2, [r3]	@ tmp158, timer_standby
 1818              	.L82:
1328:src/main.c    **** 
1329:src/main.c    **** #ifdef USE_REDONDA_BASIC
1330:src/main.c    **** 	if (tt_take_photo_sample)
 1819              		.loc 2 1330 0
 1820 0032 414B     		ldr	r3, .L93+8	@ tmp159,
 1821 0034 1B88     		ldrh	r3, [r3]	@ tmp160, tt_take_photo_sample
 1822 0036 9BB2     		uxth	r3, r3	@ D.7261, tmp160
 1823 0038 002B     		cmp	r3, #0	@ D.7261,
 1824 003a 06D0     		beq	.L83	@,
1331:src/main.c    **** 		tt_take_photo_sample--;
 1825              		.loc 2 1331 0
 1826 003c 3E4B     		ldr	r3, .L93+8	@ tmp161,
 1827 003e 1B88     		ldrh	r3, [r3]	@ tmp162, tt_take_photo_sample
 1828 0040 9BB2     		uxth	r3, r3	@ D.7261, tmp162
 1829 0042 013B     		subs	r3, r3, #1	@ tmp163,
 1830 0044 9AB2     		uxth	r2, r3	@ D.7261, tmp163
 1831 0046 3C4B     		ldr	r3, .L93+8	@ tmp164,
 1832 0048 1A80     		strh	r2, [r3]	@ tmp165, tt_take_photo_sample
 1833              	.L83:
1332:src/main.c    **** 
1333:src/main.c    **** 	if (tt_relay_on_off)
 1834              		.loc 2 1333 0
 1835 004a 3C4B     		ldr	r3, .L93+12	@ tmp166,
 1836 004c 1B88     		ldrh	r3, [r3]	@ tmp167, tt_relay_on_off
 1837 004e 9BB2     		uxth	r3, r3	@ D.7261, tmp167
 1838 0050 002B     		cmp	r3, #0	@ D.7261,
 1839 0052 06D0     		beq	.L84	@,
ARM GAS  /tmp/ccZOHcVn.s 			page 75


1334:src/main.c    **** 		tt_relay_on_off--;
 1840              		.loc 2 1334 0
 1841 0054 394B     		ldr	r3, .L93+12	@ tmp168,
 1842 0056 1B88     		ldrh	r3, [r3]	@ tmp169, tt_relay_on_off
 1843 0058 9BB2     		uxth	r3, r3	@ D.7261, tmp169
 1844 005a 013B     		subs	r3, r3, #1	@ tmp170,
 1845 005c 9AB2     		uxth	r2, r3	@ D.7261, tmp170
 1846 005e 374B     		ldr	r3, .L93+12	@ tmp171,
 1847 0060 1A80     		strh	r2, [r3]	@ tmp172, tt_relay_on_off
 1848              	.L84:
1335:src/main.c    **** #endif
1336:src/main.c    **** 
1337:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1338:src/main.c    **** 	if (tt_take_temp_sample)
1339:src/main.c    **** 		tt_take_temp_sample--;
1340:src/main.c    **** #endif
1341:src/main.c    **** 
1342:src/main.c    **** 	if (take_temp_sample)
 1849              		.loc 2 1342 0
 1850 0062 374B     		ldr	r3, .L93+16	@ tmp173,
 1851 0064 1B88     		ldrh	r3, [r3]	@ tmp174, take_temp_sample
 1852 0066 9BB2     		uxth	r3, r3	@ D.7261, tmp174
 1853 0068 002B     		cmp	r3, #0	@ D.7261,
 1854 006a 06D0     		beq	.L85	@,
1343:src/main.c    **** 		take_temp_sample--;
 1855              		.loc 2 1343 0
 1856 006c 344B     		ldr	r3, .L93+16	@ tmp175,
 1857 006e 1B88     		ldrh	r3, [r3]	@ tmp176, take_temp_sample
 1858 0070 9BB2     		uxth	r3, r3	@ D.7261, tmp176
 1859 0072 013B     		subs	r3, r3, #1	@ tmp177,
 1860 0074 9AB2     		uxth	r2, r3	@ D.7261, tmp177
 1861 0076 324B     		ldr	r3, .L93+16	@ tmp178,
 1862 0078 1A80     		strh	r2, [r3]	@ tmp179, take_temp_sample
 1863              	.L85:
1344:src/main.c    **** 
1345:src/main.c    **** 	if (filter_timer)
 1864              		.loc 2 1345 0
 1865 007a 324B     		ldr	r3, .L93+20	@ tmp180,
 1866 007c 1B78     		ldrb	r3, [r3]	@ tmp181, filter_timer
 1867 007e DBB2     		uxtb	r3, r3	@ D.7262, tmp181
 1868 0080 002B     		cmp	r3, #0	@ D.7262,
 1869 0082 06D0     		beq	.L86	@,
1346:src/main.c    **** 		filter_timer--;
 1870              		.loc 2 1346 0
 1871 0084 2F4B     		ldr	r3, .L93+20	@ tmp182,
 1872 0086 1B78     		ldrb	r3, [r3]	@ tmp183, filter_timer
 1873 0088 DBB2     		uxtb	r3, r3	@ D.7262, tmp183
 1874 008a 013B     		subs	r3, r3, #1	@ tmp184,
 1875 008c DAB2     		uxtb	r2, r3	@ D.7262, tmp184
 1876 008e 2D4B     		ldr	r3, .L93+20	@ tmp185,
 1877 0090 1A70     		strb	r2, [r3]	@ tmp186, filter_timer
 1878              	.L86:
1347:src/main.c    **** 
1348:src/main.c    **** 	//cuenta de a 1 minuto
1349:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 1879              		.loc 2 1349 0
 1880 0092 2D4B     		ldr	r3, .L93+24	@ tmp187,
ARM GAS  /tmp/ccZOHcVn.s 			page 76


 1881 0094 1B88     		ldrh	r3, [r3]	@ tmp188, secs
 1882 0096 9BB2     		uxth	r3, r3	@ D.7261, tmp188
 1883 0098 2C4A     		ldr	r2, .L93+28	@ tmp189,
 1884 009a 9342     		cmp	r3, r2	@ D.7261, tmp189
 1885 009c 16D9     		bls	.L87	@,
1350:src/main.c    **** 	{
1351:src/main.c    **** 		minutes++;
 1886              		.loc 2 1351 0
 1887 009e 2C4B     		ldr	r3, .L93+32	@ tmp190,
 1888 00a0 1B78     		ldrb	r3, [r3]	@ tmp191, minutes
 1889 00a2 DBB2     		uxtb	r3, r3	@ D.7262, tmp191
 1890 00a4 0133     		adds	r3, r3, #1	@ tmp192,
 1891 00a6 DAB2     		uxtb	r2, r3	@ D.7262, tmp192
 1892 00a8 294B     		ldr	r3, .L93+32	@ tmp193,
 1893 00aa 1A70     		strb	r2, [r3]	@ tmp194, minutes
1352:src/main.c    **** 		secs = 0;
 1894              		.loc 2 1352 0
 1895 00ac 264B     		ldr	r3, .L93+24	@ tmp195,
 1896 00ae 0022     		movs	r2, #0	@ tmp196,
 1897 00b0 1A80     		strh	r2, [r3]	@ tmp197, secs
1353:src/main.c    **** 
1354:src/main.c    **** 		if (timer_rep)
 1898              		.loc 2 1354 0
 1899 00b2 284B     		ldr	r3, .L93+36	@ tmp198,
 1900 00b4 1B88     		ldrh	r3, [r3]	@ tmp199, timer_rep
 1901 00b6 9BB2     		uxth	r3, r3	@ D.7261, tmp199
 1902 00b8 002B     		cmp	r3, #0	@ D.7261,
 1903 00ba 0ED0     		beq	.L89	@,
1355:src/main.c    **** 			timer_rep--;	//timer de reportes de a 1 minuto
 1904              		.loc 2 1355 0
 1905 00bc 254B     		ldr	r3, .L93+36	@ tmp200,
 1906 00be 1B88     		ldrh	r3, [r3]	@ tmp201, timer_rep
 1907 00c0 9BB2     		uxth	r3, r3	@ D.7261, tmp201
 1908 00c2 013B     		subs	r3, r3, #1	@ tmp202,
 1909 00c4 9AB2     		uxth	r2, r3	@ D.7261, tmp202
 1910 00c6 234B     		ldr	r3, .L93+36	@ tmp203,
 1911 00c8 1A80     		strh	r2, [r3]	@ tmp204, timer_rep
 1912 00ca 06E0     		b	.L89	@
 1913              	.L87:
1356:src/main.c    **** 	}
1357:src/main.c    **** 	else
1358:src/main.c    **** 		secs++;
 1914              		.loc 2 1358 0
 1915 00cc 1E4B     		ldr	r3, .L93+24	@ tmp205,
 1916 00ce 1B88     		ldrh	r3, [r3]	@ tmp206, secs
 1917 00d0 9BB2     		uxth	r3, r3	@ D.7261, tmp206
 1918 00d2 0133     		adds	r3, r3, #1	@ tmp207,
 1919 00d4 9AB2     		uxth	r2, r3	@ D.7261, tmp207
 1920 00d6 1C4B     		ldr	r3, .L93+24	@ tmp208,
 1921 00d8 1A80     		strh	r2, [r3]	@ tmp209, secs
 1922              	.L89:
1359:src/main.c    **** 
1360:src/main.c    **** 	if (minutes > 60)
 1923              		.loc 2 1360 0
 1924 00da 1D4B     		ldr	r3, .L93+32	@ tmp210,
 1925 00dc 1B78     		ldrb	r3, [r3]	@ tmp211, minutes
 1926 00de DBB2     		uxtb	r3, r3	@ D.7262, tmp211
ARM GAS  /tmp/ccZOHcVn.s 			page 77


 1927 00e0 3C2B     		cmp	r3, #60	@ D.7262,
 1928 00e2 09D9     		bls	.L90	@,
1361:src/main.c    **** 	{
1362:src/main.c    **** 		hours++;
 1929              		.loc 2 1362 0
 1930 00e4 1C4B     		ldr	r3, .L93+40	@ tmp212,
 1931 00e6 1B78     		ldrb	r3, [r3]	@ tmp213, hours
 1932 00e8 DBB2     		uxtb	r3, r3	@ D.7262, tmp213
 1933 00ea 0133     		adds	r3, r3, #1	@ tmp214,
 1934 00ec DAB2     		uxtb	r2, r3	@ D.7262, tmp214
 1935 00ee 1A4B     		ldr	r3, .L93+40	@ tmp215,
 1936 00f0 1A70     		strb	r2, [r3]	@ tmp216, hours
1363:src/main.c    **** 		minutes = 0;
 1937              		.loc 2 1363 0
 1938 00f2 174B     		ldr	r3, .L93+32	@ tmp217,
 1939 00f4 0022     		movs	r2, #0	@ tmp218,
 1940 00f6 1A70     		strb	r2, [r3]	@ tmp219, minutes
 1941              	.L90:
1364:src/main.c    **** 	}
1365:src/main.c    **** 
1366:src/main.c    **** #ifdef USE_MQTT_LIB
1367:src/main.c    **** 	//timer del MQTT
1368:src/main.c    **** 	SysTickIntHandler();
1369:src/main.c    **** #endif
1370:src/main.c    **** 
1371:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1372:src/main.c    **** 	if (usart1_mini_timeout)
 1942              		.loc 2 1372 0
 1943 00f8 184B     		ldr	r3, .L93+44	@ tmp220,
 1944 00fa 1B78     		ldrb	r3, [r3]	@ tmp221, usart1_mini_timeout
 1945 00fc DBB2     		uxtb	r3, r3	@ D.7262, tmp221
 1946 00fe 002B     		cmp	r3, #0	@ D.7262,
 1947 0100 06D0     		beq	.L91	@,
1373:src/main.c    **** 		usart1_mini_timeout--;
 1948              		.loc 2 1373 0
 1949 0102 164B     		ldr	r3, .L93+44	@ tmp222,
 1950 0104 1B78     		ldrb	r3, [r3]	@ tmp223, usart1_mini_timeout
 1951 0106 DBB2     		uxtb	r3, r3	@ D.7262, tmp223
 1952 0108 013B     		subs	r3, r3, #1	@ tmp224,
 1953 010a DAB2     		uxtb	r2, r3	@ D.7262, tmp224
 1954 010c 134B     		ldr	r3, .L93+44	@ tmp225,
 1955 010e 1A70     		strb	r2, [r3]	@ tmp226, usart1_mini_timeout
 1956              	.L91:
1374:src/main.c    **** 	if (usart2_mini_timeout)
 1957              		.loc 2 1374 0
 1958 0110 134B     		ldr	r3, .L93+48	@ tmp227,
 1959 0112 1B78     		ldrb	r3, [r3]	@ tmp228, usart2_mini_timeout
 1960 0114 DBB2     		uxtb	r3, r3	@ D.7262, tmp228
 1961 0116 002B     		cmp	r3, #0	@ D.7262,
 1962 0118 06D0     		beq	.L92	@,
1375:src/main.c    **** 		usart2_mini_timeout--;
 1963              		.loc 2 1375 0
 1964 011a 114B     		ldr	r3, .L93+48	@ tmp229,
 1965 011c 1B78     		ldrb	r3, [r3]	@ tmp230, usart2_mini_timeout
 1966 011e DBB2     		uxtb	r3, r3	@ D.7262, tmp230
 1967 0120 013B     		subs	r3, r3, #1	@ tmp231,
 1968 0122 DAB2     		uxtb	r2, r3	@ D.7262, tmp231
ARM GAS  /tmp/ccZOHcVn.s 			page 78


 1969 0124 0E4B     		ldr	r3, .L93+48	@ tmp232,
 1970 0126 1A70     		strb	r2, [r3]	@ tmp233, usart2_mini_timeout
 1971              	.L92:
1376:src/main.c    **** #endif
1377:src/main.c    **** #ifdef USE_GPS
1378:src/main.c    **** 	GPSTimeoutCounters ();
1379:src/main.c    **** #endif
1380:src/main.c    **** 
1381:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1382:src/main.c    **** 	GSMTimeoutCounters ();
 1972              		.loc 2 1382 0
 1973 0128 FFF7FEFF 		bl	GSMTimeoutCounters	@
1383:src/main.c    **** #endif
1384:src/main.c    **** }
 1974              		.loc 2 1384 0
 1975 012c C046     		nop
 1976              		@ sp needed	@
 1977 012e 10BD     		pop	{r4, pc}
 1978              	.L94:
 1979              		.align	2
 1980              	.L93:
 1981 0130 00000000 		.word	wait_ms_var
 1982 0134 00000000 		.word	timer_standby
 1983 0138 00000000 		.word	tt_take_photo_sample
 1984 013c 00000000 		.word	tt_relay_on_off
 1985 0140 00000000 		.word	take_temp_sample
 1986 0144 00000000 		.word	filter_timer
 1987 0148 00000000 		.word	secs
 1988 014c 5FEA0000 		.word	59999
 1989 0150 00000000 		.word	minutes
 1990 0154 00000000 		.word	timer_rep
 1991 0158 00000000 		.word	hours
 1992 015c 00000000 		.word	usart1_mini_timeout
 1993 0160 00000000 		.word	usart2_mini_timeout
 1994              		.cfi_endproc
 1995              	.LFE22:
 1996              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1997              		.text
 1998              	.Letext0:
 1999              		.file 3 "./cmsis_boot/stm32f0xx.h"
 2000              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 2001              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 2002              		.file 6 "src/hard.h"
 2003              		.file 7 "src/flash_program.h"
 2004              		.file 8 "src/funcs_gsm.h"
 2005              		.section	.debug_info,"",%progbits
 2006              	.Ldebug_info0:
 2007 0000 A40D0000 		.4byte	0xda4
 2008 0004 0200     		.2byte	0x2
 2009 0006 00000000 		.4byte	.Ldebug_abbrev0
 2010 000a 04       		.byte	0x4
 2011 000b 01       		.uleb128 0x1
 2012 000c 74090000 		.4byte	.LASF202
 2013 0010 0C       		.byte	0xc
 2014 0011 4C090000 		.4byte	.LASF203
 2015 0015 8C070000 		.4byte	.LASF204
 2016 0019 00000000 		.4byte	.Ldebug_ranges0+0
ARM GAS  /tmp/ccZOHcVn.s 			page 79


 2017 001d 00000000 		.4byte	0
 2018 0021 00000000 		.4byte	0
 2019 0025 00000000 		.4byte	.Ldebug_line0
 2020 0029 02       		.uleb128 0x2
 2021 002a CE050000 		.4byte	.LASF131
 2022 002e 01       		.byte	0x1
 2023 002f 06010000 		.4byte	0x106
 2024 0033 03       		.byte	0x3
 2025 0034 C7       		.byte	0xc7
 2026 0035 06010000 		.4byte	0x106
 2027 0039 03       		.uleb128 0x3
 2028 003a 65060000 		.4byte	.LASF0
 2029 003e 72       		.sleb128 -14
 2030 003f 03       		.uleb128 0x3
 2031 0040 240A0000 		.4byte	.LASF1
 2032 0044 73       		.sleb128 -13
 2033 0045 03       		.uleb128 0x3
 2034 0046 7C000000 		.4byte	.LASF2
 2035 004a 7B       		.sleb128 -5
 2036 004b 03       		.uleb128 0x3
 2037 004c 8C010000 		.4byte	.LASF3
 2038 0050 7E       		.sleb128 -2
 2039 0051 03       		.uleb128 0x3
 2040 0052 26070000 		.4byte	.LASF4
 2041 0056 7F       		.sleb128 -1
 2042 0057 04       		.uleb128 0x4
 2043 0058 81040000 		.4byte	.LASF5
 2044 005c 00       		.byte	0
 2045 005d 04       		.uleb128 0x4
 2046 005e 5E050000 		.4byte	.LASF6
 2047 0062 01       		.byte	0x1
 2048 0063 04       		.uleb128 0x4
 2049 0064 E7050000 		.4byte	.LASF7
 2050 0068 02       		.byte	0x2
 2051 0069 04       		.uleb128 0x4
 2052 006a 06010000 		.4byte	.LASF8
 2053 006e 03       		.byte	0x3
 2054 006f 04       		.uleb128 0x4
 2055 0070 A8010000 		.4byte	.LASF9
 2056 0074 04       		.byte	0x4
 2057 0075 04       		.uleb128 0x4
 2058 0076 4D010000 		.4byte	.LASF10
 2059 007a 05       		.byte	0x5
 2060 007b 04       		.uleb128 0x4
 2061 007c 46000000 		.4byte	.LASF11
 2062 0080 06       		.byte	0x6
 2063 0081 04       		.uleb128 0x4
 2064 0082 33000000 		.4byte	.LASF12
 2065 0086 07       		.byte	0x7
 2066 0087 04       		.uleb128 0x4
 2067 0088 23050000 		.4byte	.LASF13
 2068 008c 08       		.byte	0x8
 2069 008d 04       		.uleb128 0x4
 2070 008e B4030000 		.4byte	.LASF14
 2071 0092 09       		.byte	0x9
 2072 0093 04       		.uleb128 0x4
 2073 0094 F5070000 		.4byte	.LASF15
ARM GAS  /tmp/ccZOHcVn.s 			page 80


 2074 0098 0A       		.byte	0xa
 2075 0099 04       		.uleb128 0x4
 2076 009a C9060000 		.4byte	.LASF16
 2077 009e 0B       		.byte	0xb
 2078 009f 04       		.uleb128 0x4
 2079 00a0 78050000 		.4byte	.LASF17
 2080 00a4 0C       		.byte	0xc
 2081 00a5 04       		.uleb128 0x4
 2082 00a6 2B050000 		.4byte	.LASF18
 2083 00aa 0D       		.byte	0xd
 2084 00ab 04       		.uleb128 0x4
 2085 00ac 82060000 		.4byte	.LASF19
 2086 00b0 0E       		.byte	0xe
 2087 00b1 04       		.uleb128 0x4
 2088 00b2 73070000 		.4byte	.LASF20
 2089 00b6 0F       		.byte	0xf
 2090 00b7 04       		.uleb128 0x4
 2091 00b8 AA030000 		.4byte	.LASF21
 2092 00bc 10       		.byte	0x10
 2093 00bd 04       		.uleb128 0x4
 2094 00be 18080000 		.4byte	.LASF22
 2095 00c2 11       		.byte	0x11
 2096 00c3 04       		.uleb128 0x4
 2097 00c4 EA070000 		.4byte	.LASF23
 2098 00c8 13       		.byte	0x13
 2099 00c9 04       		.uleb128 0x4
 2100 00ca EA030000 		.4byte	.LASF24
 2101 00ce 14       		.byte	0x14
 2102 00cf 04       		.uleb128 0x4
 2103 00d0 D8000000 		.4byte	.LASF25
 2104 00d4 15       		.byte	0x15
 2105 00d5 04       		.uleb128 0x4
 2106 00d6 B2060000 		.4byte	.LASF26
 2107 00da 16       		.byte	0x16
 2108 00db 04       		.uleb128 0x4
 2109 00dc 82010000 		.4byte	.LASF27
 2110 00e0 17       		.byte	0x17
 2111 00e1 04       		.uleb128 0x4
 2112 00e2 4A070000 		.4byte	.LASF28
 2113 00e6 18       		.byte	0x18
 2114 00e7 04       		.uleb128 0x4
 2115 00e8 F2010000 		.4byte	.LASF29
 2116 00ec 19       		.byte	0x19
 2117 00ed 04       		.uleb128 0x4
 2118 00ee DD080000 		.4byte	.LASF30
 2119 00f2 1A       		.byte	0x1a
 2120 00f3 04       		.uleb128 0x4
 2121 00f4 35060000 		.4byte	.LASF31
 2122 00f8 1B       		.byte	0x1b
 2123 00f9 04       		.uleb128 0x4
 2124 00fa B8020000 		.4byte	.LASF32
 2125 00fe 1C       		.byte	0x1c
 2126 00ff 04       		.uleb128 0x4
 2127 0100 33070000 		.4byte	.LASF33
 2128 0104 1E       		.byte	0x1e
 2129 0105 00       		.byte	0
 2130 0106 05       		.uleb128 0x5
ARM GAS  /tmp/ccZOHcVn.s 			page 81


 2131 0107 01       		.byte	0x1
 2132 0108 06       		.byte	0x6
 2133 0109 40090000 		.4byte	.LASF36
 2134 010d 06       		.uleb128 0x6
 2135 010e 9F020000 		.4byte	.LASF34
 2136 0112 03       		.byte	0x3
 2137 0113 5F01     		.2byte	0x15f
 2138 0115 29000000 		.4byte	0x29
 2139 0119 07       		.uleb128 0x7
 2140 011a EB060000 		.4byte	.LASF35
 2141 011e 04       		.byte	0x4
 2142 011f 1D       		.byte	0x1d
 2143 0120 24010000 		.4byte	0x124
 2144 0124 05       		.uleb128 0x5
 2145 0125 01       		.byte	0x1
 2146 0126 08       		.byte	0x8
 2147 0127 26080000 		.4byte	.LASF37
 2148 012b 05       		.uleb128 0x5
 2149 012c 02       		.byte	0x2
 2150 012d 05       		.byte	0x5
 2151 012e 22060000 		.4byte	.LASF38
 2152 0132 07       		.uleb128 0x7
 2153 0133 45020000 		.4byte	.LASF39
 2154 0137 04       		.byte	0x4
 2155 0138 2B       		.byte	0x2b
 2156 0139 3D010000 		.4byte	0x13d
 2157 013d 05       		.uleb128 0x5
 2158 013e 02       		.byte	0x2
 2159 013f 07       		.byte	0x7
 2160 0140 61090000 		.4byte	.LASF40
 2161 0144 07       		.uleb128 0x7
 2162 0145 F4000000 		.4byte	.LASF41
 2163 0149 04       		.byte	0x4
 2164 014a 3F       		.byte	0x3f
 2165 014b 4F010000 		.4byte	0x14f
 2166 014f 05       		.uleb128 0x5
 2167 0150 04       		.byte	0x4
 2168 0151 05       		.byte	0x5
 2169 0152 2C060000 		.4byte	.LASF42
 2170 0156 07       		.uleb128 0x7
 2171 0157 3D080000 		.4byte	.LASF43
 2172 015b 04       		.byte	0x4
 2173 015c 41       		.byte	0x41
 2174 015d 61010000 		.4byte	0x161
 2175 0161 05       		.uleb128 0x5
 2176 0162 04       		.byte	0x4
 2177 0163 07       		.byte	0x7
 2178 0164 54070000 		.4byte	.LASF44
 2179 0168 05       		.uleb128 0x5
 2180 0169 08       		.byte	0x8
 2181 016a 05       		.byte	0x5
 2182 016b 73040000 		.4byte	.LASF45
 2183 016f 05       		.uleb128 0x5
 2184 0170 08       		.byte	0x8
 2185 0171 07       		.byte	0x7
 2186 0172 FC010000 		.4byte	.LASF46
 2187 0176 08       		.uleb128 0x8
ARM GAS  /tmp/ccZOHcVn.s 			page 82


 2188 0177 04       		.byte	0x4
 2189 0178 05       		.byte	0x5
 2190 0179 696E7400 		.ascii	"int\000"
 2191 017d 05       		.uleb128 0x5
 2192 017e 04       		.byte	0x4
 2193 017f 07       		.byte	0x7
 2194 0180 C6000000 		.4byte	.LASF47
 2195 0184 07       		.uleb128 0x7
 2196 0185 F5030000 		.4byte	.LASF48
 2197 0189 05       		.byte	0x5
 2198 018a 14       		.byte	0x14
 2199 018b 19010000 		.4byte	0x119
 2200 018f 07       		.uleb128 0x7
 2201 0190 B6050000 		.4byte	.LASF49
 2202 0194 05       		.byte	0x5
 2203 0195 1A       		.byte	0x1a
 2204 0196 32010000 		.4byte	0x132
 2205 019a 07       		.uleb128 0x7
 2206 019b D0070000 		.4byte	.LASF50
 2207 019f 05       		.byte	0x5
 2208 01a0 1F       		.byte	0x1f
 2209 01a1 44010000 		.4byte	0x144
 2210 01a5 07       		.uleb128 0x7
 2211 01a6 C7010000 		.4byte	.LASF51
 2212 01aa 05       		.byte	0x5
 2213 01ab 20       		.byte	0x20
 2214 01ac 56010000 		.4byte	0x156
 2215 01b0 09       		.uleb128 0x9
 2216 01b1 2003     		.2byte	0x320
 2217 01b3 01       		.byte	0x1
 2218 01b4 71       		.byte	0x71
 2219 01b5 4D020000 		.4byte	0x24d
 2220 01b9 0A       		.uleb128 0xa
 2221 01ba D9010000 		.4byte	.LASF52
 2222 01be 01       		.byte	0x1
 2223 01bf 73       		.byte	0x73
 2224 01c0 64020000 		.4byte	0x264
 2225 01c4 02       		.byte	0x2
 2226 01c5 23       		.byte	0x23
 2227 01c6 00       		.uleb128 0
 2228 01c7 0A       		.uleb128 0xa
 2229 01c8 F0050000 		.4byte	.LASF53
 2230 01cc 01       		.byte	0x1
 2231 01cd 74       		.byte	0x74
 2232 01ce 69020000 		.4byte	0x269
 2233 01d2 02       		.byte	0x2
 2234 01d3 23       		.byte	0x23
 2235 01d4 04       		.uleb128 0x4
 2236 01d5 0A       		.uleb128 0xa
 2237 01d6 CD080000 		.4byte	.LASF54
 2238 01da 01       		.byte	0x1
 2239 01db 75       		.byte	0x75
 2240 01dc 79020000 		.4byte	0x279
 2241 01e0 03       		.byte	0x3
 2242 01e1 23       		.byte	0x23
 2243 01e2 8001     		.uleb128 0x80
 2244 01e4 0A       		.uleb128 0xa
ARM GAS  /tmp/ccZOHcVn.s 			page 83


 2245 01e5 E9010000 		.4byte	.LASF55
 2246 01e9 01       		.byte	0x1
 2247 01ea 76       		.byte	0x76
 2248 01eb 69020000 		.4byte	0x269
 2249 01ef 03       		.byte	0x3
 2250 01f0 23       		.byte	0x23
 2251 01f1 8401     		.uleb128 0x84
 2252 01f3 0A       		.uleb128 0xa
 2253 01f4 3D0A0000 		.4byte	.LASF56
 2254 01f8 01       		.byte	0x1
 2255 01f9 77       		.byte	0x77
 2256 01fa 7E020000 		.4byte	0x27e
 2257 01fe 03       		.byte	0x3
 2258 01ff 23       		.byte	0x23
 2259 0200 8002     		.uleb128 0x100
 2260 0202 0A       		.uleb128 0xa
 2261 0203 04060000 		.4byte	.LASF57
 2262 0207 01       		.byte	0x1
 2263 0208 78       		.byte	0x78
 2264 0209 69020000 		.4byte	0x269
 2265 020d 03       		.byte	0x3
 2266 020e 23       		.byte	0x23
 2267 020f 8402     		.uleb128 0x104
 2268 0211 0A       		.uleb128 0xa
 2269 0212 73050000 		.4byte	.LASF58
 2270 0216 01       		.byte	0x1
 2271 0217 79       		.byte	0x79
 2272 0218 83020000 		.4byte	0x283
 2273 021c 03       		.byte	0x3
 2274 021d 23       		.byte	0x23
 2275 021e 8003     		.uleb128 0x180
 2276 0220 0A       		.uleb128 0xa
 2277 0221 0E060000 		.4byte	.LASF59
 2278 0225 01       		.byte	0x1
 2279 0226 7A       		.byte	0x7a
 2280 0227 69020000 		.4byte	0x269
 2281 022b 03       		.byte	0x3
 2282 022c 23       		.byte	0x23
 2283 022d 8403     		.uleb128 0x184
 2284 022f 0A       		.uleb128 0xa
 2285 0230 18060000 		.4byte	.LASF60
 2286 0234 01       		.byte	0x1
 2287 0235 7B       		.byte	0x7b
 2288 0236 88020000 		.4byte	0x288
 2289 023a 03       		.byte	0x3
 2290 023b 23       		.byte	0x23
 2291 023c 8004     		.uleb128 0x200
 2292 023e 0B       		.uleb128 0xb
 2293 023f 495000   		.ascii	"IP\000"
 2294 0242 01       		.byte	0x1
 2295 0243 7C       		.byte	0x7c
 2296 0244 A8020000 		.4byte	0x2a8
 2297 0248 03       		.byte	0x3
 2298 0249 23       		.byte	0x23
 2299 024a 8006     		.uleb128 0x300
 2300 024c 00       		.byte	0
 2301 024d 0C       		.uleb128 0xc
ARM GAS  /tmp/ccZOHcVn.s 			page 84


 2302 024e A5010000 		.4byte	0x1a5
 2303 0252 5D020000 		.4byte	0x25d
 2304 0256 0D       		.uleb128 0xd
 2305 0257 5D020000 		.4byte	0x25d
 2306 025b 00       		.byte	0
 2307 025c 00       		.byte	0
 2308 025d 05       		.uleb128 0x5
 2309 025e 04       		.byte	0x4
 2310 025f 07       		.byte	0x7
 2311 0260 3C070000 		.4byte	.LASF61
 2312 0264 0E       		.uleb128 0xe
 2313 0265 4D020000 		.4byte	0x24d
 2314 0269 0C       		.uleb128 0xc
 2315 026a A5010000 		.4byte	0x1a5
 2316 026e 79020000 		.4byte	0x279
 2317 0272 0D       		.uleb128 0xd
 2318 0273 5D020000 		.4byte	0x25d
 2319 0277 1E       		.byte	0x1e
 2320 0278 00       		.byte	0
 2321 0279 0E       		.uleb128 0xe
 2322 027a 4D020000 		.4byte	0x24d
 2323 027e 0E       		.uleb128 0xe
 2324 027f 4D020000 		.4byte	0x24d
 2325 0283 0E       		.uleb128 0xe
 2326 0284 4D020000 		.4byte	0x24d
 2327 0288 0C       		.uleb128 0xc
 2328 0289 A5010000 		.4byte	0x1a5
 2329 028d 98020000 		.4byte	0x298
 2330 0291 0D       		.uleb128 0xd
 2331 0292 5D020000 		.4byte	0x25d
 2332 0296 3F       		.byte	0x3f
 2333 0297 00       		.byte	0
 2334 0298 0C       		.uleb128 0xc
 2335 0299 A5010000 		.4byte	0x1a5
 2336 029d A8020000 		.4byte	0x2a8
 2337 02a1 0D       		.uleb128 0xd
 2338 02a2 5D020000 		.4byte	0x25d
 2339 02a6 07       		.byte	0x7
 2340 02a7 00       		.byte	0
 2341 02a8 0E       		.uleb128 0xe
 2342 02a9 98020000 		.4byte	0x298
 2343 02ad 07       		.uleb128 0x7
 2344 02ae F5060000 		.4byte	.LASF62
 2345 02b2 01       		.byte	0x1
 2346 02b3 7D       		.byte	0x7d
 2347 02b4 B0010000 		.4byte	0x1b0
 2348 02b8 0F       		.uleb128 0xf
 2349 02b9 34       		.byte	0x34
 2350 02ba 01       		.byte	0x1
 2351 02bb 86       		.byte	0x86
 2352 02bc 5B030000 		.4byte	0x35b
 2353 02c0 0A       		.uleb128 0xa
 2354 02c1 C4020000 		.4byte	.LASF63
 2355 02c5 01       		.byte	0x1
 2356 02c6 88       		.byte	0x88
 2357 02c7 60030000 		.4byte	0x360
 2358 02cb 02       		.byte	0x2
ARM GAS  /tmp/ccZOHcVn.s 			page 85


 2359 02cc 23       		.byte	0x23
 2360 02cd 00       		.uleb128 0
 2361 02ce 0A       		.uleb128 0xa
 2362 02cf 45070000 		.4byte	.LASF64
 2363 02d3 01       		.byte	0x1
 2364 02d4 89       		.byte	0x89
 2365 02d5 5B030000 		.4byte	0x35b
 2366 02d9 02       		.byte	0x2
 2367 02da 23       		.byte	0x23
 2368 02db 04       		.uleb128 0x4
 2369 02dc 0A       		.uleb128 0xa
 2370 02dd F0050000 		.4byte	.LASF53
 2371 02e1 01       		.byte	0x1
 2372 02e2 8A       		.byte	0x8a
 2373 02e3 A5010000 		.4byte	0x1a5
 2374 02e7 02       		.byte	0x2
 2375 02e8 23       		.byte	0x23
 2376 02e9 08       		.uleb128 0x8
 2377 02ea 0A       		.uleb128 0xa
 2378 02eb 93030000 		.4byte	.LASF65
 2379 02ef 01       		.byte	0x1
 2380 02f0 8B       		.byte	0x8b
 2381 02f1 5B030000 		.4byte	0x35b
 2382 02f5 02       		.byte	0x2
 2383 02f6 23       		.byte	0x23
 2384 02f7 0C       		.uleb128 0xc
 2385 02f8 0B       		.uleb128 0xb
 2386 02f9 53435200 		.ascii	"SCR\000"
 2387 02fd 01       		.byte	0x1
 2388 02fe 8C       		.byte	0x8c
 2389 02ff 5B030000 		.4byte	0x35b
 2390 0303 02       		.byte	0x2
 2391 0304 23       		.byte	0x23
 2392 0305 10       		.uleb128 0x10
 2393 0306 0B       		.uleb128 0xb
 2394 0307 43435200 		.ascii	"CCR\000"
 2395 030b 01       		.byte	0x1
 2396 030c 8D       		.byte	0x8d
 2397 030d 5B030000 		.4byte	0x35b
 2398 0311 02       		.byte	0x2
 2399 0312 23       		.byte	0x23
 2400 0313 14       		.uleb128 0x14
 2401 0314 0A       		.uleb128 0xa
 2402 0315 FA050000 		.4byte	.LASF66
 2403 0319 01       		.byte	0x1
 2404 031a 8E       		.byte	0x8e
 2405 031b A5010000 		.4byte	0x1a5
 2406 031f 02       		.byte	0x2
 2407 0320 23       		.byte	0x23
 2408 0321 18       		.uleb128 0x18
 2409 0322 0B       		.uleb128 0xb
 2410 0323 53485000 		.ascii	"SHP\000"
 2411 0327 01       		.byte	0x1
 2412 0328 8F       		.byte	0x8f
 2413 0329 75030000 		.4byte	0x375
 2414 032d 02       		.byte	0x2
 2415 032e 23       		.byte	0x23
ARM GAS  /tmp/ccZOHcVn.s 			page 86


 2416 032f 1C       		.uleb128 0x1c
 2417 0330 0A       		.uleb128 0xa
 2418 0331 8B040000 		.4byte	.LASF67
 2419 0335 01       		.byte	0x1
 2420 0336 90       		.byte	0x90
 2421 0337 5B030000 		.4byte	0x35b
 2422 033b 02       		.byte	0x2
 2423 033c 23       		.byte	0x23
 2424 033d 24       		.uleb128 0x24
 2425 033e 0A       		.uleb128 0xa
 2426 033f 04060000 		.4byte	.LASF57
 2427 0343 01       		.byte	0x1
 2428 0344 91       		.byte	0x91
 2429 0345 65030000 		.4byte	0x365
 2430 0349 02       		.byte	0x2
 2431 034a 23       		.byte	0x23
 2432 034b 28       		.uleb128 0x28
 2433 034c 0A       		.uleb128 0xa
 2434 034d 13020000 		.4byte	.LASF68
 2435 0351 01       		.byte	0x1
 2436 0352 92       		.byte	0x92
 2437 0353 5B030000 		.4byte	0x35b
 2438 0357 02       		.byte	0x2
 2439 0358 23       		.byte	0x23
 2440 0359 30       		.uleb128 0x30
 2441 035a 00       		.byte	0
 2442 035b 0E       		.uleb128 0xe
 2443 035c A5010000 		.4byte	0x1a5
 2444 0360 10       		.uleb128 0x10
 2445 0361 5B030000 		.4byte	0x35b
 2446 0365 0C       		.uleb128 0xc
 2447 0366 A5010000 		.4byte	0x1a5
 2448 036a 75030000 		.4byte	0x375
 2449 036e 0D       		.uleb128 0xd
 2450 036f 5D020000 		.4byte	0x25d
 2451 0373 01       		.byte	0x1
 2452 0374 00       		.byte	0
 2453 0375 0E       		.uleb128 0xe
 2454 0376 65030000 		.4byte	0x365
 2455 037a 07       		.uleb128 0x7
 2456 037b FF060000 		.4byte	.LASF69
 2457 037f 01       		.byte	0x1
 2458 0380 93       		.byte	0x93
 2459 0381 B8020000 		.4byte	0x2b8
 2460 0385 0F       		.uleb128 0xf
 2461 0386 10       		.byte	0x10
 2462 0387 01       		.byte	0x1
 2463 0388 FC       		.byte	0xfc
 2464 0389 C8030000 		.4byte	0x3c8
 2465 038d 0A       		.uleb128 0xa
 2466 038e 9D0A0000 		.4byte	.LASF70
 2467 0392 01       		.byte	0x1
 2468 0393 FE       		.byte	0xfe
 2469 0394 5B030000 		.4byte	0x35b
 2470 0398 02       		.byte	0x2
 2471 0399 23       		.byte	0x23
 2472 039a 00       		.uleb128 0
ARM GAS  /tmp/ccZOHcVn.s 			page 87


 2473 039b 0A       		.uleb128 0xa
 2474 039c D3000000 		.4byte	.LASF71
 2475 03a0 01       		.byte	0x1
 2476 03a1 FF       		.byte	0xff
 2477 03a2 5B030000 		.4byte	0x35b
 2478 03a6 02       		.byte	0x2
 2479 03a7 23       		.byte	0x23
 2480 03a8 04       		.uleb128 0x4
 2481 03a9 11       		.uleb128 0x11
 2482 03aa 56414C00 		.ascii	"VAL\000"
 2483 03ae 01       		.byte	0x1
 2484 03af 0001     		.2byte	0x100
 2485 03b1 5B030000 		.4byte	0x35b
 2486 03b5 02       		.byte	0x2
 2487 03b6 23       		.byte	0x23
 2488 03b7 08       		.uleb128 0x8
 2489 03b8 12       		.uleb128 0x12
 2490 03b9 19010000 		.4byte	.LASF72
 2491 03bd 01       		.byte	0x1
 2492 03be 0101     		.2byte	0x101
 2493 03c0 60030000 		.4byte	0x360
 2494 03c4 02       		.byte	0x2
 2495 03c5 23       		.byte	0x23
 2496 03c6 0C       		.uleb128 0xc
 2497 03c7 00       		.byte	0
 2498 03c8 06       		.uleb128 0x6
 2499 03c9 9D050000 		.4byte	.LASF73
 2500 03cd 01       		.byte	0x1
 2501 03ce 0201     		.2byte	0x102
 2502 03d0 85030000 		.4byte	0x385
 2503 03d4 13       		.uleb128 0x13
 2504 03d5 44       		.byte	0x44
 2505 03d6 03       		.byte	0x3
 2506 03d7 7C01     		.2byte	0x17c
 2507 03d9 9E040000 		.4byte	0x49e
 2508 03dd 11       		.uleb128 0x11
 2509 03de 49535200 		.ascii	"ISR\000"
 2510 03e2 03       		.byte	0x3
 2511 03e3 7E01     		.2byte	0x17e
 2512 03e5 5B030000 		.4byte	0x35b
 2513 03e9 02       		.byte	0x2
 2514 03ea 23       		.byte	0x23
 2515 03eb 00       		.uleb128 0
 2516 03ec 11       		.uleb128 0x11
 2517 03ed 49455200 		.ascii	"IER\000"
 2518 03f1 03       		.byte	0x3
 2519 03f2 7F01     		.2byte	0x17f
 2520 03f4 5B030000 		.4byte	0x35b
 2521 03f8 02       		.byte	0x2
 2522 03f9 23       		.byte	0x23
 2523 03fa 04       		.uleb128 0x4
 2524 03fb 11       		.uleb128 0x11
 2525 03fc 435200   		.ascii	"CR\000"
 2526 03ff 03       		.byte	0x3
 2527 0400 8001     		.2byte	0x180
 2528 0402 5B030000 		.4byte	0x35b
 2529 0406 02       		.byte	0x2
ARM GAS  /tmp/ccZOHcVn.s 			page 88


 2530 0407 23       		.byte	0x23
 2531 0408 08       		.uleb128 0x8
 2532 0409 12       		.uleb128 0x12
 2533 040a 67050000 		.4byte	.LASF74
 2534 040e 03       		.byte	0x3
 2535 040f 8101     		.2byte	0x181
 2536 0411 5B030000 		.4byte	0x35b
 2537 0415 02       		.byte	0x2
 2538 0416 23       		.byte	0x23
 2539 0417 0C       		.uleb128 0xc
 2540 0418 12       		.uleb128 0x12
 2541 0419 6D050000 		.4byte	.LASF75
 2542 041d 03       		.byte	0x3
 2543 041e 8201     		.2byte	0x182
 2544 0420 5B030000 		.4byte	0x35b
 2545 0424 02       		.byte	0x2
 2546 0425 23       		.byte	0x23
 2547 0426 10       		.uleb128 0x10
 2548 0427 12       		.uleb128 0x12
 2549 0428 0F030000 		.4byte	.LASF76
 2550 042c 03       		.byte	0x3
 2551 042d 8301     		.2byte	0x183
 2552 042f 5B030000 		.4byte	0x35b
 2553 0433 02       		.byte	0x2
 2554 0434 23       		.byte	0x23
 2555 0435 14       		.uleb128 0x14
 2556 0436 12       		.uleb128 0x12
 2557 0437 FA050000 		.4byte	.LASF66
 2558 043b 03       		.byte	0x3
 2559 043c 8401     		.2byte	0x184
 2560 043e A5010000 		.4byte	0x1a5
 2561 0442 02       		.byte	0x2
 2562 0443 23       		.byte	0x23
 2563 0444 18       		.uleb128 0x18
 2564 0445 12       		.uleb128 0x12
 2565 0446 04060000 		.4byte	.LASF57
 2566 044a 03       		.byte	0x3
 2567 044b 8501     		.2byte	0x185
 2568 044d A5010000 		.4byte	0x1a5
 2569 0451 02       		.byte	0x2
 2570 0452 23       		.byte	0x23
 2571 0453 1C       		.uleb128 0x1c
 2572 0454 11       		.uleb128 0x11
 2573 0455 545200   		.ascii	"TR\000"
 2574 0458 03       		.byte	0x3
 2575 0459 8601     		.2byte	0x186
 2576 045b 5B030000 		.4byte	0x35b
 2577 045f 02       		.byte	0x2
 2578 0460 23       		.byte	0x23
 2579 0461 20       		.uleb128 0x20
 2580 0462 12       		.uleb128 0x12
 2581 0463 0E060000 		.4byte	.LASF59
 2582 0467 03       		.byte	0x3
 2583 0468 8701     		.2byte	0x187
 2584 046a A5010000 		.4byte	0x1a5
 2585 046e 02       		.byte	0x2
 2586 046f 23       		.byte	0x23
ARM GAS  /tmp/ccZOHcVn.s 			page 89


 2587 0470 24       		.uleb128 0x24
 2588 0471 12       		.uleb128 0x12
 2589 0472 86020000 		.4byte	.LASF77
 2590 0476 03       		.byte	0x3
 2591 0477 8801     		.2byte	0x188
 2592 0479 5B030000 		.4byte	0x35b
 2593 047d 02       		.byte	0x2
 2594 047e 23       		.byte	0x23
 2595 047f 28       		.uleb128 0x28
 2596 0480 12       		.uleb128 0x12
 2597 0481 18060000 		.4byte	.LASF60
 2598 0485 03       		.byte	0x3
 2599 0486 8901     		.2byte	0x189
 2600 0488 9E040000 		.4byte	0x49e
 2601 048c 02       		.byte	0x2
 2602 048d 23       		.byte	0x23
 2603 048e 2C       		.uleb128 0x2c
 2604 048f 11       		.uleb128 0x11
 2605 0490 445200   		.ascii	"DR\000"
 2606 0493 03       		.byte	0x3
 2607 0494 8A01     		.2byte	0x18a
 2608 0496 5B030000 		.4byte	0x35b
 2609 049a 02       		.byte	0x2
 2610 049b 23       		.byte	0x23
 2611 049c 40       		.uleb128 0x40
 2612 049d 00       		.byte	0
 2613 049e 0C       		.uleb128 0xc
 2614 049f A5010000 		.4byte	0x1a5
 2615 04a3 AE040000 		.4byte	0x4ae
 2616 04a7 0D       		.uleb128 0xd
 2617 04a8 5D020000 		.4byte	0x25d
 2618 04ac 04       		.byte	0x4
 2619 04ad 00       		.byte	0
 2620 04ae 06       		.uleb128 0x6
 2621 04af 67040000 		.4byte	.LASF78
 2622 04b3 03       		.byte	0x3
 2623 04b4 8B01     		.2byte	0x18b
 2624 04b6 D4030000 		.4byte	0x3d4
 2625 04ba 0E       		.uleb128 0xe
 2626 04bb 8F010000 		.4byte	0x18f
 2627 04bf 13       		.uleb128 0x13
 2628 04c0 2C       		.byte	0x2c
 2629 04c1 03       		.byte	0x3
 2630 04c2 6902     		.2byte	0x269
 2631 04c4 9B050000 		.4byte	0x59b
 2632 04c8 12       		.uleb128 0x12
 2633 04c9 80020000 		.4byte	.LASF79
 2634 04cd 03       		.byte	0x3
 2635 04ce 6B02     		.2byte	0x26b
 2636 04d0 5B030000 		.4byte	0x35b
 2637 04d4 02       		.byte	0x2
 2638 04d5 23       		.byte	0x23
 2639 04d6 00       		.uleb128 0
 2640 04d7 12       		.uleb128 0x12
 2641 04d8 8F060000 		.4byte	.LASF80
 2642 04dc 03       		.byte	0x3
 2643 04dd 6C02     		.2byte	0x26c
ARM GAS  /tmp/ccZOHcVn.s 			page 90


 2644 04df BA040000 		.4byte	0x4ba
 2645 04e3 02       		.byte	0x2
 2646 04e4 23       		.byte	0x23
 2647 04e5 04       		.uleb128 0x4
 2648 04e6 12       		.uleb128 0x12
 2649 04e7 F0050000 		.4byte	.LASF53
 2650 04eb 03       		.byte	0x3
 2651 04ec 6D02     		.2byte	0x26d
 2652 04ee 8F010000 		.4byte	0x18f
 2653 04f2 02       		.byte	0x2
 2654 04f3 23       		.byte	0x23
 2655 04f4 06       		.uleb128 0x6
 2656 04f5 12       		.uleb128 0x12
 2657 04f6 95050000 		.4byte	.LASF81
 2658 04fa 03       		.byte	0x3
 2659 04fb 6E02     		.2byte	0x26e
 2660 04fd 5B030000 		.4byte	0x35b
 2661 0501 02       		.byte	0x2
 2662 0502 23       		.byte	0x23
 2663 0503 08       		.uleb128 0x8
 2664 0504 12       		.uleb128 0x12
 2665 0505 36030000 		.4byte	.LASF82
 2666 0509 03       		.byte	0x3
 2667 050a 6F02     		.2byte	0x26f
 2668 050c 5B030000 		.4byte	0x35b
 2669 0510 02       		.byte	0x2
 2670 0511 23       		.byte	0x23
 2671 0512 0C       		.uleb128 0xc
 2672 0513 11       		.uleb128 0x11
 2673 0514 49445200 		.ascii	"IDR\000"
 2674 0518 03       		.byte	0x3
 2675 0519 7002     		.2byte	0x270
 2676 051b BA040000 		.4byte	0x4ba
 2677 051f 02       		.byte	0x2
 2678 0520 23       		.byte	0x23
 2679 0521 10       		.uleb128 0x10
 2680 0522 12       		.uleb128 0x12
 2681 0523 FA050000 		.4byte	.LASF66
 2682 0527 03       		.byte	0x3
 2683 0528 7102     		.2byte	0x271
 2684 052a 8F010000 		.4byte	0x18f
 2685 052e 02       		.byte	0x2
 2686 052f 23       		.byte	0x23
 2687 0530 12       		.uleb128 0x12
 2688 0531 11       		.uleb128 0x11
 2689 0532 4F445200 		.ascii	"ODR\000"
 2690 0536 03       		.byte	0x3
 2691 0537 7202     		.2byte	0x272
 2692 0539 BA040000 		.4byte	0x4ba
 2693 053d 02       		.byte	0x2
 2694 053e 23       		.byte	0x23
 2695 053f 14       		.uleb128 0x14
 2696 0540 12       		.uleb128 0x12
 2697 0541 04060000 		.4byte	.LASF57
 2698 0545 03       		.byte	0x3
 2699 0546 7302     		.2byte	0x273
 2700 0548 8F010000 		.4byte	0x18f
ARM GAS  /tmp/ccZOHcVn.s 			page 91


 2701 054c 02       		.byte	0x2
 2702 054d 23       		.byte	0x23
 2703 054e 16       		.uleb128 0x16
 2704 054f 12       		.uleb128 0x12
 2705 0550 41000000 		.4byte	.LASF83
 2706 0554 03       		.byte	0x3
 2707 0555 7402     		.2byte	0x274
 2708 0557 5B030000 		.4byte	0x35b
 2709 055b 02       		.byte	0x2
 2710 055c 23       		.byte	0x23
 2711 055d 18       		.uleb128 0x18
 2712 055e 12       		.uleb128 0x12
 2713 055f 980A0000 		.4byte	.LASF84
 2714 0563 03       		.byte	0x3
 2715 0564 7502     		.2byte	0x275
 2716 0566 5B030000 		.4byte	0x35b
 2717 056a 02       		.byte	0x2
 2718 056b 23       		.byte	0x23
 2719 056c 1C       		.uleb128 0x1c
 2720 056d 11       		.uleb128 0x11
 2721 056e 41465200 		.ascii	"AFR\000"
 2722 0572 03       		.byte	0x3
 2723 0573 7602     		.2byte	0x276
 2724 0575 9B050000 		.4byte	0x59b
 2725 0579 02       		.byte	0x2
 2726 057a 23       		.byte	0x23
 2727 057b 20       		.uleb128 0x20
 2728 057c 11       		.uleb128 0x11
 2729 057d 42525200 		.ascii	"BRR\000"
 2730 0581 03       		.byte	0x3
 2731 0582 7702     		.2byte	0x277
 2732 0584 BA040000 		.4byte	0x4ba
 2733 0588 02       		.byte	0x2
 2734 0589 23       		.byte	0x23
 2735 058a 28       		.uleb128 0x28
 2736 058b 12       		.uleb128 0x12
 2737 058c 0E060000 		.4byte	.LASF59
 2738 0590 03       		.byte	0x3
 2739 0591 7802     		.2byte	0x278
 2740 0593 8F010000 		.4byte	0x18f
 2741 0597 02       		.byte	0x2
 2742 0598 23       		.byte	0x23
 2743 0599 2A       		.uleb128 0x2a
 2744 059a 00       		.byte	0
 2745 059b 0E       		.uleb128 0xe
 2746 059c 65030000 		.4byte	0x365
 2747 05a0 06       		.uleb128 0x6
 2748 05a1 08070000 		.4byte	.LASF85
 2749 05a5 03       		.byte	0x3
 2750 05a6 7902     		.2byte	0x279
 2751 05a8 BF040000 		.4byte	0x4bf
 2752 05ac 05       		.uleb128 0x5
 2753 05ad 08       		.byte	0x8
 2754 05ae 04       		.byte	0x4
 2755 05af AA050000 		.4byte	.LASF86
 2756 05b3 05       		.uleb128 0x5
 2757 05b4 01       		.byte	0x1
ARM GAS  /tmp/ccZOHcVn.s 			page 92


 2758 05b5 08       		.byte	0x8
 2759 05b6 5E030000 		.4byte	.LASF87
 2760 05ba 0C       		.uleb128 0xc
 2761 05bb 3D010000 		.4byte	0x13d
 2762 05bf CA050000 		.4byte	0x5ca
 2763 05c3 0D       		.uleb128 0xd
 2764 05c4 5D020000 		.4byte	0x25d
 2765 05c8 02       		.byte	0x2
 2766 05c9 00       		.byte	0
 2767 05ca 0C       		.uleb128 0xc
 2768 05cb B3050000 		.4byte	0x5b3
 2769 05cf DA050000 		.4byte	0x5da
 2770 05d3 0D       		.uleb128 0xd
 2771 05d4 5D020000 		.4byte	0x25d
 2772 05d8 17       		.byte	0x17
 2773 05d9 00       		.byte	0
 2774 05da 14       		.uleb128 0x14
 2775 05db 01       		.byte	0x1
 2776 05dc 24010000 		.4byte	0x124
 2777 05e0 06       		.byte	0x6
 2778 05e1 BE       		.byte	0xbe
 2779 05e2 23060000 		.4byte	0x623
 2780 05e6 04       		.uleb128 0x4
 2781 05e7 E5040000 		.4byte	.LASF88
 2782 05eb 00       		.byte	0
 2783 05ec 04       		.uleb128 0x4
 2784 05ed BD060000 		.4byte	.LASF89
 2785 05f1 01       		.byte	0x1
 2786 05f2 04       		.uleb128 0x4
 2787 05f3 14030000 		.4byte	.LASF90
 2788 05f7 02       		.byte	0x2
 2789 05f8 04       		.uleb128 0x4
 2790 05f9 50020000 		.4byte	.LASF91
 2791 05fd 03       		.byte	0x3
 2792 05fe 04       		.uleb128 0x4
 2793 05ff 68020000 		.4byte	.LASF92
 2794 0603 04       		.byte	0x4
 2795 0604 04       		.uleb128 0x4
 2796 0605 34080000 		.4byte	.LASF93
 2797 0609 05       		.byte	0x5
 2798 060a 04       		.uleb128 0x4
 2799 060b A5040000 		.4byte	.LASF94
 2800 060f 06       		.byte	0x6
 2801 0610 04       		.uleb128 0x4
 2802 0611 EF040000 		.4byte	.LASF95
 2803 0615 07       		.byte	0x7
 2804 0616 04       		.uleb128 0x4
 2805 0617 FD030000 		.4byte	.LASF96
 2806 061b 08       		.byte	0x8
 2807 061c 04       		.uleb128 0x4
 2808 061d 4C040000 		.4byte	.LASF97
 2809 0621 09       		.byte	0x9
 2810 0622 00       		.byte	0
 2811 0623 07       		.uleb128 0x7
 2812 0624 DD030000 		.4byte	.LASF98
 2813 0628 06       		.byte	0x6
 2814 0629 CC       		.byte	0xcc
ARM GAS  /tmp/ccZOHcVn.s 			page 93


 2815 062a DA050000 		.4byte	0x5da
 2816 062e 14       		.uleb128 0x14
 2817 062f 01       		.byte	0x1
 2818 0630 24010000 		.4byte	0x124
 2819 0634 06       		.byte	0x6
 2820 0635 D0       		.byte	0xd0
 2821 0636 65060000 		.4byte	0x665
 2822 063a 04       		.uleb128 0x4
 2823 063b 5E000000 		.4byte	.LASF99
 2824 063f 00       		.byte	0
 2825 0640 04       		.uleb128 0x4
 2826 0641 6D000000 		.4byte	.LASF100
 2827 0645 01       		.byte	0x1
 2828 0646 04       		.uleb128 0x4
 2829 0647 15070000 		.4byte	.LASF101
 2830 064b 02       		.byte	0x2
 2831 064c 04       		.uleb128 0x4
 2832 064d 730A0000 		.4byte	.LASF102
 2833 0651 03       		.byte	0x3
 2834 0652 04       		.uleb128 0x4
 2835 0653 A2060000 		.4byte	.LASF103
 2836 0657 04       		.byte	0x4
 2837 0658 04       		.uleb128 0x4
 2838 0659 B7010000 		.4byte	.LASF104
 2839 065d 05       		.byte	0x5
 2840 065e 04       		.uleb128 0x4
 2841 065f B5000000 		.4byte	.LASF105
 2842 0663 06       		.byte	0x6
 2843 0664 00       		.byte	0
 2844 0665 07       		.uleb128 0x7
 2845 0666 48080000 		.4byte	.LASF106
 2846 066a 06       		.byte	0x6
 2847 066b D9       		.byte	0xd9
 2848 066c 2E060000 		.4byte	0x62e
 2849 0670 15       		.uleb128 0x15
 2850 0671 C7040000 		.4byte	.LASF205
 2851 0675 54       		.byte	0x54
 2852 0676 07       		.byte	0x7
 2853 0677 36       		.byte	0x36
 2854 0678 ED060000 		.4byte	0x6ed
 2855 067c 0A       		.uleb128 0xa
 2856 067d DA050000 		.4byte	.LASF107
 2857 0681 07       		.byte	0x7
 2858 0682 38       		.byte	0x38
 2859 0683 CA050000 		.4byte	0x5ca
 2860 0687 02       		.byte	0x2
 2861 0688 23       		.byte	0x23
 2862 0689 00       		.uleb128 0
 2863 068a 0A       		.uleb128 0xa
 2864 068b 1F010000 		.4byte	.LASF108
 2865 068f 07       		.byte	0x7
 2866 0690 39       		.byte	0x39
 2867 0691 CA050000 		.4byte	0x5ca
 2868 0695 02       		.byte	0x2
 2869 0696 23       		.byte	0x23
 2870 0697 18       		.uleb128 0x18
 2871 0698 0A       		.uleb128 0xa
ARM GAS  /tmp/ccZOHcVn.s 			page 94


 2872 0699 470A0000 		.4byte	.LASF109
 2873 069d 07       		.byte	0x7
 2874 069e 3A       		.byte	0x3a
 2875 069f CA050000 		.4byte	0x5ca
 2876 06a3 02       		.byte	0x2
 2877 06a4 23       		.byte	0x23
 2878 06a5 30       		.uleb128 0x30
 2879 06a6 0A       		.uleb128 0xa
 2880 06a7 9F080000 		.4byte	.LASF110
 2881 06ab 07       		.byte	0x7
 2882 06ac 3C       		.byte	0x3c
 2883 06ad 7D010000 		.4byte	0x17d
 2884 06b1 02       		.byte	0x2
 2885 06b2 23       		.byte	0x23
 2886 06b3 48       		.uleb128 0x48
 2887 06b4 0A       		.uleb128 0xa
 2888 06b5 66070000 		.4byte	.LASF111
 2889 06b9 07       		.byte	0x7
 2890 06ba 3D       		.byte	0x3d
 2891 06bb 7D010000 		.4byte	0x17d
 2892 06bf 02       		.byte	0x2
 2893 06c0 23       		.byte	0x23
 2894 06c1 4C       		.uleb128 0x4c
 2895 06c2 0A       		.uleb128 0xa
 2896 06c3 41060000 		.4byte	.LASF112
 2897 06c7 07       		.byte	0x7
 2898 06c8 3E       		.byte	0x3e
 2899 06c9 3D010000 		.4byte	0x13d
 2900 06cd 02       		.byte	0x2
 2901 06ce 23       		.byte	0x23
 2902 06cf 50       		.uleb128 0x50
 2903 06d0 0A       		.uleb128 0xa
 2904 06d1 A9020000 		.4byte	.LASF113
 2905 06d5 07       		.byte	0x7
 2906 06d6 40       		.byte	0x40
 2907 06d7 24010000 		.4byte	0x124
 2908 06db 02       		.byte	0x2
 2909 06dc 23       		.byte	0x23
 2910 06dd 52       		.uleb128 0x52
 2911 06de 0A       		.uleb128 0xa
 2912 06df 620A0000 		.4byte	.LASF114
 2913 06e3 07       		.byte	0x7
 2914 06e4 41       		.byte	0x41
 2915 06e5 24010000 		.4byte	0x124
 2916 06e9 02       		.byte	0x2
 2917 06ea 23       		.byte	0x23
 2918 06eb 53       		.uleb128 0x53
 2919 06ec 00       		.byte	0
 2920 06ed 07       		.uleb128 0x7
 2921 06ee 2D090000 		.4byte	.LASF115
 2922 06f2 07       		.byte	0x7
 2923 06f3 47       		.byte	0x47
 2924 06f4 70060000 		.4byte	0x670
 2925 06f8 14       		.uleb128 0x14
 2926 06f9 01       		.byte	0x1
 2927 06fa 24010000 		.4byte	0x124
 2928 06fe 08       		.byte	0x8
ARM GAS  /tmp/ccZOHcVn.s 			page 95


 2929 06ff 0A       		.byte	0xa
 2930 0700 5F070000 		.4byte	0x75f
 2931 0704 04       		.uleb128 0x4
 2932 0705 2A020000 		.4byte	.LASF116
 2933 0709 00       		.byte	0
 2934 070a 04       		.uleb128 0x4
 2935 070b 51060000 		.4byte	.LASF117
 2936 070f 01       		.byte	0x1
 2937 0710 04       		.uleb128 0x4
 2938 0711 42030000 		.4byte	.LASF118
 2939 0715 02       		.byte	0x2
 2940 0716 04       		.uleb128 0x4
 2941 0717 54040000 		.4byte	.LASF119
 2942 071b 03       		.byte	0x3
 2943 071c 04       		.uleb128 0x4
 2944 071d 75080000 		.4byte	.LASF120
 2945 0721 04       		.byte	0x4
 2946 0722 04       		.uleb128 0x4
 2947 0723 8C000000 		.4byte	.LASF121
 2948 0727 05       		.byte	0x5
 2949 0728 04       		.uleb128 0x4
 2950 0729 6B010000 		.4byte	.LASF122
 2951 072d 06       		.byte	0x6
 2952 072e 04       		.uleb128 0x4
 2953 072f E7080000 		.4byte	.LASF123
 2954 0733 07       		.byte	0x7
 2955 0734 04       		.uleb128 0x4
 2956 0735 14090000 		.4byte	.LASF124
 2957 0739 08       		.byte	0x8
 2958 073a 04       		.uleb128 0x4
 2959 073b 06000000 		.4byte	.LASF125
 2960 073f 09       		.byte	0x9
 2961 0740 04       		.uleb128 0x4
 2962 0741 8A080000 		.4byte	.LASF126
 2963 0745 0A       		.byte	0xa
 2964 0746 04       		.uleb128 0x4
 2965 0747 58080000 		.4byte	.LASF127
 2966 074b 0B       		.byte	0xb
 2967 074c 04       		.uleb128 0x4
 2968 074d DF020000 		.4byte	.LASF128
 2969 0751 0C       		.byte	0xc
 2970 0752 04       		.uleb128 0x4
 2971 0753 9C000000 		.4byte	.LASF129
 2972 0757 0D       		.byte	0xd
 2973 0758 04       		.uleb128 0x4
 2974 0759 63030000 		.4byte	.LASF130
 2975 075d 0E       		.byte	0xe
 2976 075e 00       		.byte	0
 2977 075f 16       		.uleb128 0x16
 2978 0760 4D050000 		.4byte	.LASF206
 2979 0764 01       		.byte	0x1
 2980 0765 7C03     		.2byte	0x37c
 2981 0767 01       		.byte	0x1
 2982 0768 00000000 		.4byte	.LFB16
 2983 076c EC000000 		.4byte	.LFE16
 2984 0770 00000000 		.4byte	.LLST0
 2985 0774 01       		.byte	0x1
ARM GAS  /tmp/ccZOHcVn.s 			page 96


 2986 0775 98070000 		.4byte	0x798
 2987 0779 17       		.uleb128 0x17
 2988 077a CE050000 		.4byte	.LASF131
 2989 077e 01       		.byte	0x1
 2990 077f 7C03     		.2byte	0x37c
 2991 0781 0D010000 		.4byte	0x10d
 2992 0785 02       		.byte	0x2
 2993 0786 91       		.byte	0x91
 2994 0787 6F       		.sleb128 -17
 2995 0788 17       		.uleb128 0x17
 2996 0789 79060000 		.4byte	.LASF132
 2997 078d 01       		.byte	0x1
 2998 078e 7C03     		.2byte	0x37c
 2999 0790 A5010000 		.4byte	0x1a5
 3000 0794 02       		.byte	0x2
 3001 0795 91       		.byte	0x91
 3002 0796 68       		.sleb128 -24
 3003 0797 00       		.byte	0
 3004 0798 18       		.uleb128 0x18
 3005 0799 00030000 		.4byte	.LASF207
 3006 079d 01       		.byte	0x1
 3007 079e B803     		.2byte	0x3b8
 3008 07a0 01       		.byte	0x1
 3009 07a1 A5010000 		.4byte	0x1a5
 3010 07a5 00000000 		.4byte	.LFB18
 3011 07a9 48000000 		.4byte	.LFE18
 3012 07ad 2C000000 		.4byte	.LLST1
 3013 07b1 01       		.byte	0x1
 3014 07b2 C6070000 		.4byte	0x7c6
 3015 07b6 17       		.uleb128 0x17
 3016 07b7 3C030000 		.4byte	.LASF133
 3017 07bb 01       		.byte	0x1
 3018 07bc B803     		.2byte	0x3b8
 3019 07be A5010000 		.4byte	0x1a5
 3020 07c2 02       		.byte	0x2
 3021 07c3 91       		.byte	0x91
 3022 07c4 74       		.sleb128 -12
 3023 07c5 00       		.byte	0
 3024 07c6 19       		.uleb128 0x19
 3025 07c7 01       		.byte	0x1
 3026 07c8 1F0A0000 		.4byte	.LASF208
 3027 07cc 02       		.byte	0x2
 3028 07cd D8       		.byte	0xd8
 3029 07ce 01       		.byte	0x1
 3030 07cf 76010000 		.4byte	0x176
 3031 07d3 00000000 		.4byte	.LFB20
 3032 07d7 24080000 		.4byte	.LFE20
 3033 07db 58000000 		.4byte	.LLST2
 3034 07df 01       		.byte	0x1
 3035 07e0 64090000 		.4byte	0x964
 3036 07e4 1A       		.uleb128 0x1a
 3037 07e5 6900     		.ascii	"i\000"
 3038 07e7 02       		.byte	0x2
 3039 07e8 DA       		.byte	0xda
 3040 07e9 24010000 		.4byte	0x124
 3041 07ed 02       		.byte	0x2
 3042 07ee 91       		.byte	0x91
ARM GAS  /tmp/ccZOHcVn.s 			page 97


 3043 07ef 6F       		.sleb128 -17
 3044 07f0 1B       		.uleb128 0x1b
 3045 07f1 696900   		.ascii	"ii\000"
 3046 07f4 02       		.byte	0x2
 3047 07f5 DA       		.byte	0xda
 3048 07f6 24010000 		.4byte	0x124
 3049 07fa 1C       		.uleb128 0x1c
 3050 07fb 8B0A0000 		.4byte	.LASF134
 3051 07ff 02       		.byte	0x2
 3052 0800 DB       		.byte	0xdb
 3053 0801 24010000 		.4byte	0x124
 3054 0805 1C       		.uleb128 0x1c
 3055 0806 D2030000 		.4byte	.LASF135
 3056 080a 02       		.byte	0x2
 3057 080b DB       		.byte	0xdb
 3058 080c 24010000 		.4byte	0x124
 3059 0810 1D       		.uleb128 0x1d
 3060 0811 6C080000 		.4byte	.LASF136
 3061 0815 02       		.byte	0x2
 3062 0816 DB       		.byte	0xdb
 3063 0817 24010000 		.4byte	0x124
 3064 081b 02       		.byte	0x2
 3065 081c 91       		.byte	0x91
 3066 081d 52       		.sleb128 -46
 3067 081e 1D       		.uleb128 0x1d
 3068 081f 420A0000 		.4byte	.LASF137
 3069 0823 02       		.byte	0x2
 3070 0824 DC       		.byte	0xdc
 3071 0825 24010000 		.4byte	0x124
 3072 0829 02       		.byte	0x2
 3073 082a 91       		.byte	0x91
 3074 082b 51       		.sleb128 -47
 3075 082c 1D       		.uleb128 0x1d
 3076 082d 57090000 		.4byte	.LASF138
 3077 0831 02       		.byte	0x2
 3078 0832 DD       		.byte	0xdd
 3079 0833 3D010000 		.4byte	0x13d
 3080 0837 02       		.byte	0x2
 3081 0838 91       		.byte	0x91
 3082 0839 42       		.sleb128 -62
 3083 083a 1D       		.uleb128 0x1d
 3084 083b 89030000 		.4byte	.LASF139
 3085 083f 02       		.byte	0x2
 3086 0840 DD       		.byte	0xdd
 3087 0841 3D010000 		.4byte	0x13d
 3088 0845 02       		.byte	0x2
 3089 0846 91       		.byte	0x91
 3090 0847 40       		.sleb128 -64
 3091 0848 1D       		.uleb128 0x1d
 3092 0849 2C010000 		.4byte	.LASF140
 3093 084d 02       		.byte	0x2
 3094 084e DE       		.byte	0xde
 3095 084f 3D010000 		.4byte	0x13d
 3096 0853 03       		.byte	0x3
 3097 0854 91       		.byte	0x91
 3098 0855 BE7F     		.sleb128 -66
 3099 0857 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccZOHcVn.s 			page 98


 3100 0858 DE040000 		.4byte	.LASF141
 3101 085c 02       		.byte	0x2
 3102 085d DE       		.byte	0xde
 3103 085e 3D010000 		.4byte	0x13d
 3104 0862 03       		.byte	0x3
 3105 0863 91       		.byte	0x91
 3106 0864 BC7F     		.sleb128 -68
 3107 0866 1D       		.uleb128 0x1d
 3108 0867 0E090000 		.4byte	.LASF142
 3109 086b 02       		.byte	0x2
 3110 086c DF       		.byte	0xdf
 3111 086d 3D010000 		.4byte	0x13d
 3112 0871 02       		.byte	0x2
 3113 0872 91       		.byte	0x91
 3114 0873 6C       		.sleb128 -20
 3115 0874 1D       		.uleb128 0x1d
 3116 0875 FA040000 		.4byte	.LASF143
 3117 0879 02       		.byte	0x2
 3118 087a DF       		.byte	0xdf
 3119 087b 3D010000 		.4byte	0x13d
 3120 087f 02       		.byte	0x2
 3121 0880 91       		.byte	0x91
 3122 0881 6A       		.sleb128 -22
 3123 0882 1D       		.uleb128 0x1d
 3124 0883 B1010000 		.4byte	.LASF144
 3125 0887 02       		.byte	0x2
 3126 0888 E0       		.byte	0xe0
 3127 0889 64090000 		.4byte	0x964
 3128 088d 02       		.byte	0x2
 3129 088e 91       		.byte	0x91
 3130 088f 4C       		.sleb128 -52
 3131 0890 1D       		.uleb128 0x1d
 3132 0891 15000000 		.4byte	.LASF145
 3133 0895 02       		.byte	0x2
 3134 0896 E1       		.byte	0xe1
 3135 0897 7D010000 		.4byte	0x17d
 3136 089b 02       		.byte	0x2
 3137 089c 91       		.byte	0x91
 3138 089d 64       		.sleb128 -28
 3139 089e 1D       		.uleb128 0x1d
 3140 089f 98010000 		.4byte	.LASF146
 3141 08a3 02       		.byte	0x2
 3142 08a4 E3       		.byte	0xe3
 3143 08a5 3D010000 		.4byte	0x13d
 3144 08a9 02       		.byte	0x2
 3145 08aa 91       		.byte	0x91
 3146 08ab 62       		.sleb128 -30
 3147 08ac 1D       		.uleb128 0x1d
 3148 08ad 330A0000 		.4byte	.LASF147
 3149 08b1 02       		.byte	0x2
 3150 08b2 E4       		.byte	0xe4
 3151 08b3 7D010000 		.4byte	0x17d
 3152 08b7 02       		.byte	0x2
 3153 08b8 91       		.byte	0x91
 3154 08b9 5C       		.sleb128 -36
 3155 08ba 1D       		.uleb128 0x1d
 3156 08bb 3A020000 		.4byte	.LASF148
ARM GAS  /tmp/ccZOHcVn.s 			page 99


 3157 08bf 02       		.byte	0x2
 3158 08c0 E4       		.byte	0xe4
 3159 08c1 7D010000 		.4byte	0x17d
 3160 08c5 02       		.byte	0x2
 3161 08c6 91       		.byte	0x91
 3162 08c7 58       		.sleb128 -40
 3163 08c8 1D       		.uleb128 0x1d
 3164 08c9 05050000 		.4byte	.LASF149
 3165 08cd 02       		.byte	0x2
 3166 08ce E5       		.byte	0xe5
 3167 08cf 24010000 		.4byte	0x124
 3168 08d3 02       		.byte	0x2
 3169 08d4 91       		.byte	0x91
 3170 08d5 57       		.sleb128 -41
 3171 08d6 1D       		.uleb128 0x1d
 3172 08d7 C7030000 		.4byte	.LASF150
 3173 08db 02       		.byte	0x2
 3174 08dc E6       		.byte	0xe6
 3175 08dd 24010000 		.4byte	0x124
 3176 08e1 02       		.byte	0x2
 3177 08e2 91       		.byte	0x91
 3178 08e3 4B       		.sleb128 -53
 3179 08e4 1D       		.uleb128 0x1d
 3180 08e5 53000000 		.4byte	.LASF151
 3181 08e9 02       		.byte	0x2
 3182 08ea E9       		.byte	0xe9
 3183 08eb 23060000 		.4byte	0x623
 3184 08ef 02       		.byte	0x2
 3185 08f0 91       		.byte	0x91
 3186 08f1 56       		.sleb128 -42
 3187 08f2 1D       		.uleb128 0x1d
 3188 08f3 A20A0000 		.4byte	.LASF152
 3189 08f7 02       		.byte	0x2
 3190 08f8 EA       		.byte	0xea
 3191 08f9 24010000 		.4byte	0x124
 3192 08fd 02       		.byte	0x2
 3193 08fe 91       		.byte	0x91
 3194 08ff 4A       		.sleb128 -54
 3195 0900 1D       		.uleb128 0x1d
 3196 0901 1F070000 		.4byte	.LASF153
 3197 0905 02       		.byte	0x2
 3198 0906 EB       		.byte	0xeb
 3199 0907 24010000 		.4byte	0x124
 3200 090b 02       		.byte	0x2
 3201 090c 91       		.byte	0x91
 3202 090d 49       		.sleb128 -55
 3203 090e 1D       		.uleb128 0x1d
 3204 090f 0A080000 		.4byte	.LASF154
 3205 0913 02       		.byte	0x2
 3206 0914 EC       		.byte	0xec
 3207 0915 65060000 		.4byte	0x665
 3208 0919 02       		.byte	0x2
 3209 091a 91       		.byte	0x91
 3210 091b 55       		.sleb128 -43
 3211 091c 1D       		.uleb128 0x1d
 3212 091d 87050000 		.4byte	.LASF155
 3213 0921 02       		.byte	0x2
ARM GAS  /tmp/ccZOHcVn.s 			page 100


 3214 0922 ED       		.byte	0xed
 3215 0923 24010000 		.4byte	0x124
 3216 0927 02       		.byte	0x2
 3217 0928 91       		.byte	0x91
 3218 0929 54       		.sleb128 -44
 3219 092a 1D       		.uleb128 0x1d
 3220 092b D0010000 		.4byte	.LASF156
 3221 092f 02       		.byte	0x2
 3222 0930 EE       		.byte	0xee
 3223 0931 24010000 		.4byte	0x124
 3224 0935 02       		.byte	0x2
 3225 0936 91       		.byte	0x91
 3226 0937 53       		.sleb128 -45
 3227 0938 1D       		.uleb128 0x1d
 3228 0939 E4010000 		.4byte	.LASF157
 3229 093d 02       		.byte	0x2
 3230 093e F1       		.byte	0xf1
 3231 093f 3D010000 		.4byte	0x13d
 3232 0943 02       		.byte	0x2
 3233 0944 91       		.byte	0x91
 3234 0945 46       		.sleb128 -58
 3235 0946 1D       		.uleb128 0x1d
 3236 0947 D2080000 		.4byte	.LASF158
 3237 094b 02       		.byte	0x2
 3238 094c F4       		.byte	0xf4
 3239 094d 24010000 		.4byte	0x124
 3240 0951 02       		.byte	0x2
 3241 0952 91       		.byte	0x91
 3242 0953 45       		.sleb128 -59
 3243 0954 1D       		.uleb128 0x1d
 3244 0955 00000000 		.4byte	.LASF159
 3245 0959 02       		.byte	0x2
 3246 095a FA       		.byte	0xfa
 3247 095b 6B090000 		.4byte	0x96b
 3248 095f 03       		.byte	0x3
 3249 0960 91       		.byte	0x91
 3250 0961 D87E     		.sleb128 -168
 3251 0963 00       		.byte	0
 3252 0964 05       		.uleb128 0x5
 3253 0965 04       		.byte	0x4
 3254 0966 04       		.byte	0x4
 3255 0967 DE010000 		.4byte	.LASF160
 3256 096b 0C       		.uleb128 0xc
 3257 096c B3050000 		.4byte	0x5b3
 3258 0970 7B090000 		.4byte	0x97b
 3259 0974 0D       		.uleb128 0xd
 3260 0975 5D020000 		.4byte	0x25d
 3261 0979 63       		.byte	0x63
 3262 097a 00       		.byte	0
 3263 097b 1E       		.uleb128 0x1e
 3264 097c 01       		.byte	0x1
 3265 097d FD080000 		.4byte	.LASF209
 3266 0981 02       		.byte	0x2
 3267 0982 0905     		.2byte	0x509
 3268 0984 01       		.byte	0x1
 3269 0985 00000000 		.4byte	.LFB21
 3270 0989 B0000000 		.4byte	.LFE21
ARM GAS  /tmp/ccZOHcVn.s 			page 101


 3271 098d 85000000 		.4byte	.LLST3
 3272 0991 01       		.byte	0x1
 3273 0992 3B0A0000 		.4byte	0xa3b
 3274 0996 17       		.uleb128 0x17
 3275 0997 85000000 		.4byte	.LASF161
 3276 099b 02       		.byte	0x2
 3277 099c 0905     		.2byte	0x509
 3278 099e 3B0A0000 		.4byte	0xa3b
 3279 09a2 03       		.byte	0x3
 3280 09a3 91       		.byte	0x91
 3281 09a4 A47F     		.sleb128 -92
 3282 09a6 1F       		.uleb128 0x1f
 3283 09a7 643100   		.ascii	"d1\000"
 3284 09aa 02       		.byte	0x2
 3285 09ab 0B05     		.2byte	0x50b
 3286 09ad 9A010000 		.4byte	0x19a
 3287 09b1 02       		.byte	0x2
 3288 09b2 91       		.byte	0x91
 3289 09b3 74       		.sleb128 -12
 3290 09b4 1F       		.uleb128 0x1f
 3291 09b5 643200   		.ascii	"d2\000"
 3292 09b8 02       		.byte	0x2
 3293 09b9 0B05     		.2byte	0x50b
 3294 09bb 9A010000 		.4byte	0x19a
 3295 09bf 02       		.byte	0x2
 3296 09c0 91       		.byte	0x91
 3297 09c1 70       		.sleb128 -16
 3298 09c2 1F       		.uleb128 0x1f
 3299 09c3 643300   		.ascii	"d3\000"
 3300 09c6 02       		.byte	0x2
 3301 09c7 0B05     		.2byte	0x50b
 3302 09c9 9A010000 		.4byte	0x19a
 3303 09cd 02       		.byte	0x2
 3304 09ce 91       		.byte	0x91
 3305 09cf 6C       		.sleb128 -20
 3306 09d0 1F       		.uleb128 0x1f
 3307 09d1 643400   		.ascii	"d4\000"
 3308 09d4 02       		.byte	0x2
 3309 09d5 0B05     		.2byte	0x50b
 3310 09d7 9A010000 		.4byte	0x19a
 3311 09db 02       		.byte	0x2
 3312 09dc 91       		.byte	0x91
 3313 09dd 68       		.sleb128 -24
 3314 09de 1F       		.uleb128 0x1f
 3315 09df 643500   		.ascii	"d5\000"
 3316 09e2 02       		.byte	0x2
 3317 09e3 0B05     		.2byte	0x50b
 3318 09e5 9A010000 		.4byte	0x19a
 3319 09e9 02       		.byte	0x2
 3320 09ea 91       		.byte	0x91
 3321 09eb 64       		.sleb128 -28
 3322 09ec 1F       		.uleb128 0x1f
 3323 09ed 643600   		.ascii	"d6\000"
 3324 09f0 02       		.byte	0x2
 3325 09f1 0B05     		.2byte	0x50b
 3326 09f3 9A010000 		.4byte	0x19a
 3327 09f7 02       		.byte	0x2
ARM GAS  /tmp/ccZOHcVn.s 			page 102


 3328 09f8 91       		.byte	0x91
 3329 09f9 60       		.sleb128 -32
 3330 09fa 20       		.uleb128 0x20
 3331 09fb 44050000 		.4byte	.LASF162
 3332 09ff 02       		.byte	0x2
 3333 0a00 0C05     		.2byte	0x50c
 3334 0a02 410A0000 		.4byte	0xa41
 3335 0a06 03       		.byte	0x3
 3336 0a07 91       		.byte	0x91
 3337 0a08 B87F     		.sleb128 -72
 3338 0a0a 20       		.uleb128 0x20
 3339 0a0b C1070000 		.4byte	.LASF163
 3340 0a0f 02       		.byte	0x2
 3341 0a10 0D05     		.2byte	0x50d
 3342 0a12 510A0000 		.4byte	0xa51
 3343 0a16 03       		.byte	0x3
 3344 0a17 91       		.byte	0x91
 3345 0a18 B47F     		.sleb128 -76
 3346 0a1a 20       		.uleb128 0x20
 3347 0a1b 77030000 		.4byte	.LASF164
 3348 0a1f 02       		.byte	0x2
 3349 0a20 0E05     		.2byte	0x50e
 3350 0a22 510A0000 		.4byte	0xa51
 3351 0a26 03       		.byte	0x3
 3352 0a27 91       		.byte	0x91
 3353 0a28 B07F     		.sleb128 -80
 3354 0a2a 20       		.uleb128 0x20
 3355 0a2b 7D070000 		.4byte	.LASF165
 3356 0a2f 02       		.byte	0x2
 3357 0a30 0F05     		.2byte	0x50f
 3358 0a32 510A0000 		.4byte	0xa51
 3359 0a36 03       		.byte	0x3
 3360 0a37 91       		.byte	0x91
 3361 0a38 AC7F     		.sleb128 -84
 3362 0a3a 00       		.byte	0
 3363 0a3b 21       		.uleb128 0x21
 3364 0a3c 04       		.byte	0x4
 3365 0a3d 84010000 		.4byte	0x184
 3366 0a41 0C       		.uleb128 0xc
 3367 0a42 B3050000 		.4byte	0x5b3
 3368 0a46 510A0000 		.4byte	0xa51
 3369 0a4a 0D       		.uleb128 0xd
 3370 0a4b 5D020000 		.4byte	0x25d
 3371 0a4f 27       		.byte	0x27
 3372 0a50 00       		.byte	0
 3373 0a51 0E       		.uleb128 0xe
 3374 0a52 64090000 		.4byte	0x964
 3375 0a56 22       		.uleb128 0x22
 3376 0a57 01       		.byte	0x1
 3377 0a58 B7080000 		.4byte	.LASF210
 3378 0a5c 02       		.byte	0x2
 3379 0a5d 2905     		.2byte	0x529
 3380 0a5f 01       		.byte	0x1
 3381 0a60 00000000 		.4byte	.LFB22
 3382 0a64 64010000 		.4byte	.LFE22
 3383 0a68 B2000000 		.4byte	.LLST4
 3384 0a6c 01       		.byte	0x1
ARM GAS  /tmp/ccZOHcVn.s 			page 103


 3385 0a6d 0C       		.uleb128 0xc
 3386 0a6e 24010000 		.4byte	0x124
 3387 0a72 7D0A0000 		.4byte	0xa7d
 3388 0a76 0D       		.uleb128 0xd
 3389 0a77 5D020000 		.4byte	0x25d
 3390 0a7b FF       		.byte	0xff
 3391 0a7c 00       		.byte	0
 3392 0a7d 23       		.uleb128 0x23
 3393 0a7e 45010000 		.4byte	.LASF166
 3394 0a82 02       		.byte	0x2
 3395 0a83 3B       		.byte	0x3b
 3396 0a84 8F0A0000 		.4byte	0xa8f
 3397 0a88 01       		.byte	0x1
 3398 0a89 05       		.byte	0x5
 3399 0a8a 03       		.byte	0x3
 3400 0a8b 00000000 		.4byte	tx2buff
 3401 0a8f 0E       		.uleb128 0xe
 3402 0a90 6D0A0000 		.4byte	0xa6d
 3403 0a94 23       		.uleb128 0x23
 3404 0a95 FE000000 		.4byte	.LASF167
 3405 0a99 02       		.byte	0x2
 3406 0a9a 3C       		.byte	0x3c
 3407 0a9b A60A0000 		.4byte	0xaa6
 3408 0a9f 01       		.byte	0x1
 3409 0aa0 05       		.byte	0x5
 3410 0aa1 03       		.byte	0x3
 3411 0aa2 00000000 		.4byte	rx2buff
 3412 0aa6 0E       		.uleb128 0xe
 3413 0aa7 6D0A0000 		.4byte	0xa6d
 3414 0aab 23       		.uleb128 0x23
 3415 0aac 1D040000 		.4byte	.LASF168
 3416 0ab0 02       		.byte	0x2
 3417 0ab1 3E       		.byte	0x3e
 3418 0ab2 BD0A0000 		.4byte	0xabd
 3419 0ab6 01       		.byte	0x1
 3420 0ab7 05       		.byte	0x5
 3421 0ab8 03       		.byte	0x3
 3422 0ab9 00000000 		.4byte	tx1buff
 3423 0abd 0E       		.uleb128 0xe
 3424 0abe 6D0A0000 		.4byte	0xa6d
 3425 0ac2 23       		.uleb128 0x23
 3426 0ac3 11010000 		.4byte	.LASF169
 3427 0ac7 02       		.byte	0x2
 3428 0ac8 3F       		.byte	0x3f
 3429 0ac9 D40A0000 		.4byte	0xad4
 3430 0acd 01       		.byte	0x1
 3431 0ace 05       		.byte	0x5
 3432 0acf 03       		.byte	0x3
 3433 0ad0 00000000 		.4byte	rx1buff
 3434 0ad4 0E       		.uleb128 0xe
 3435 0ad5 6D0A0000 		.4byte	0xa6d
 3436 0ad9 23       		.uleb128 0x23
 3437 0ada 99030000 		.4byte	.LASF170
 3438 0ade 02       		.byte	0x2
 3439 0adf 51       		.byte	0x51
 3440 0ae0 EB0A0000 		.4byte	0xaeb
 3441 0ae4 01       		.byte	0x1
ARM GAS  /tmp/ccZOHcVn.s 			page 104


 3442 0ae5 05       		.byte	0x5
 3443 0ae6 03       		.byte	0x3
 3444 0ae7 00000000 		.4byte	take_temp_sample
 3445 0aeb 0E       		.uleb128 0xe
 3446 0aec 3D010000 		.4byte	0x13d
 3447 0af0 23       		.uleb128 0x23
 3448 0af1 F6020000 		.4byte	.LASF171
 3449 0af5 02       		.byte	0x2
 3450 0af6 52       		.byte	0x52
 3451 0af7 EB0A0000 		.4byte	0xaeb
 3452 0afb 01       		.byte	0x1
 3453 0afc 05       		.byte	0x5
 3454 0afd 03       		.byte	0x3
 3455 0afe 00000000 		.4byte	timer_rep
 3456 0b02 23       		.uleb128 0x23
 3457 0b03 D2040000 		.4byte	.LASF172
 3458 0b07 02       		.byte	0x2
 3459 0b08 56       		.byte	0x56
 3460 0b09 EB0A0000 		.4byte	0xaeb
 3461 0b0d 01       		.byte	0x1
 3462 0b0e 05       		.byte	0x5
 3463 0b0f 03       		.byte	0x3
 3464 0b10 00000000 		.4byte	timer_relay
 3465 0b14 23       		.uleb128 0x23
 3466 0b15 CA020000 		.4byte	.LASF173
 3467 0b19 02       		.byte	0x2
 3468 0b1a 58       		.byte	0x58
 3469 0b1b EB0A0000 		.4byte	0xaeb
 3470 0b1f 01       		.byte	0x1
 3471 0b20 05       		.byte	0x5
 3472 0b21 03       		.byte	0x3
 3473 0b22 00000000 		.4byte	tt_take_photo_sample
 3474 0b26 23       		.uleb128 0x23
 3475 0b27 37040000 		.4byte	.LASF174
 3476 0b2b 02       		.byte	0x2
 3477 0b2c 59       		.byte	0x59
 3478 0b2d EB0A0000 		.4byte	0xaeb
 3479 0b31 01       		.byte	0x1
 3480 0b32 05       		.byte	0x5
 3481 0b33 03       		.byte	0x3
 3482 0b34 00000000 		.4byte	tt_relay_on_off
 3483 0b38 23       		.uleb128 0x23
 3484 0b39 AF040000 		.4byte	.LASF175
 3485 0b3d 02       		.byte	0x2
 3486 0b3e 5D       		.byte	0x5d
 3487 0b3f 24010000 		.4byte	0x124
 3488 0b43 01       		.byte	0x1
 3489 0b44 05       		.byte	0x5
 3490 0b45 03       		.byte	0x3
 3491 0b46 00000000 		.4byte	saved_mode
 3492 0b4a 24       		.uleb128 0x24
 3493 0b4b 733100   		.ascii	"s1\000"
 3494 0b4e 02       		.byte	0x2
 3495 0b4f 61       		.byte	0x61
 3496 0b50 3D010000 		.4byte	0x13d
 3497 0b54 01       		.byte	0x1
 3498 0b55 05       		.byte	0x5
ARM GAS  /tmp/ccZOHcVn.s 			page 105


 3499 0b56 03       		.byte	0x3
 3500 0b57 00000000 		.4byte	s1
 3501 0b5b 24       		.uleb128 0x24
 3502 0b5c 733200   		.ascii	"s2\000"
 3503 0b5f 02       		.byte	0x2
 3504 0b60 62       		.byte	0x62
 3505 0b61 3D010000 		.4byte	0x13d
 3506 0b65 01       		.byte	0x1
 3507 0b66 05       		.byte	0x5
 3508 0b67 03       		.byte	0x3
 3509 0b68 00000000 		.4byte	s2
 3510 0b6c 24       		.uleb128 0x24
 3511 0b6d 73616300 		.ascii	"sac\000"
 3512 0b71 02       		.byte	0x2
 3513 0b72 63       		.byte	0x63
 3514 0b73 3D010000 		.4byte	0x13d
 3515 0b77 01       		.byte	0x1
 3516 0b78 05       		.byte	0x5
 3517 0b79 03       		.byte	0x3
 3518 0b7a 00000000 		.4byte	sac
 3519 0b7e 23       		.uleb128 0x23
 3520 0b7f AF080000 		.4byte	.LASF176
 3521 0b83 02       		.byte	0x2
 3522 0b84 64       		.byte	0x64
 3523 0b85 24010000 		.4byte	0x124
 3524 0b89 01       		.byte	0x1
 3525 0b8a 05       		.byte	0x5
 3526 0b8b 03       		.byte	0x3
 3527 0b8c 00000000 		.4byte	sac_aux
 3528 0b90 23       		.uleb128 0x23
 3529 0b91 E3070000 		.4byte	.LASF177
 3530 0b95 02       		.byte	0x2
 3531 0b96 68       		.byte	0x68
 3532 0b97 A20B0000 		.4byte	0xba2
 3533 0b9b 01       		.byte	0x1
 3534 0b9c 05       		.byte	0x5
 3535 0b9d 03       		.byte	0x3
 3536 0b9e 00000000 		.4byte	adc_ch
 3537 0ba2 0E       		.uleb128 0xe
 3538 0ba3 BA050000 		.4byte	0x5ba
 3539 0ba7 23       		.uleb128 0x23
 3540 0ba8 520A0000 		.4byte	.LASF178
 3541 0bac 02       		.byte	0x2
 3542 0bad 69       		.byte	0x69
 3543 0bae B90B0000 		.4byte	0xbb9
 3544 0bb2 01       		.byte	0x1
 3545 0bb3 05       		.byte	0x5
 3546 0bb4 03       		.byte	0x3
 3547 0bb5 00000000 		.4byte	seq_ready
 3548 0bb9 0E       		.uleb128 0xe
 3549 0bba 24010000 		.4byte	0x124
 3550 0bbe 23       		.uleb128 0x23
 3551 0bbf 16050000 		.4byte	.LASF179
 3552 0bc3 02       		.byte	0x2
 3553 0bc4 6A       		.byte	0x6a
 3554 0bc5 3D010000 		.4byte	0x13d
 3555 0bc9 01       		.byte	0x1
ARM GAS  /tmp/ccZOHcVn.s 			page 106


 3556 0bca 05       		.byte	0x5
 3557 0bcb 03       		.byte	0x3
 3558 0bcc 00000000 		.4byte	zero_current
 3559 0bd0 23       		.uleb128 0x23
 3560 0bd1 91040000 		.4byte	.LASF180
 3561 0bd5 02       		.byte	0x2
 3562 0bd6 6E       		.byte	0x6e
 3563 0bd7 B90B0000 		.4byte	0xbb9
 3564 0bdb 01       		.byte	0x1
 3565 0bdc 05       		.byte	0x5
 3566 0bdd 03       		.byte	0x3
 3567 0bde 00000000 		.4byte	usart1_mini_timeout
 3568 0be2 23       		.uleb128 0x23
 3569 0be3 8D020000 		.4byte	.LASF181
 3570 0be7 02       		.byte	0x2
 3571 0be8 6F       		.byte	0x6f
 3572 0be9 B90B0000 		.4byte	0xbb9
 3573 0bed 01       		.byte	0x1
 3574 0bee 05       		.byte	0x5
 3575 0bef 03       		.byte	0x3
 3576 0bf0 00000000 		.4byte	usart1_pckt_ready
 3577 0bf4 23       		.uleb128 0x23
 3578 0bf5 25030000 		.4byte	.LASF182
 3579 0bf9 02       		.byte	0x2
 3580 0bfa 70       		.byte	0x70
 3581 0bfb B90B0000 		.4byte	0xbb9
 3582 0bff 01       		.byte	0x1
 3583 0c00 05       		.byte	0x5
 3584 0c01 03       		.byte	0x3
 3585 0c02 00000000 		.4byte	usart1_have_data
 3586 0c06 23       		.uleb128 0x23
 3587 0c07 18020000 		.4byte	.LASF183
 3588 0c0b 02       		.byte	0x2
 3589 0c0c 71       		.byte	0x71
 3590 0c0d 24010000 		.4byte	0x124
 3591 0c11 01       		.byte	0x1
 3592 0c12 05       		.byte	0x5
 3593 0c13 03       		.byte	0x3
 3594 0c14 00000000 		.4byte	usart1_pckt_bytes
 3595 0c18 23       		.uleb128 0x23
 3596 0c19 09040000 		.4byte	.LASF184
 3597 0c1d 02       		.byte	0x2
 3598 0c1e 88       		.byte	0x88
 3599 0c1f B90B0000 		.4byte	0xbb9
 3600 0c23 01       		.byte	0x1
 3601 0c24 05       		.byte	0x5
 3602 0c25 03       		.byte	0x3
 3603 0c26 00000000 		.4byte	usart2_mini_timeout
 3604 0c2a 23       		.uleb128 0x23
 3605 0c2b 33010000 		.4byte	.LASF185
 3606 0c2f 02       		.byte	0x2
 3607 0c30 89       		.byte	0x89
 3608 0c31 B90B0000 		.4byte	0xbb9
 3609 0c35 01       		.byte	0x1
 3610 0c36 05       		.byte	0x5
 3611 0c37 03       		.byte	0x3
 3612 0c38 00000000 		.4byte	usart2_pckt_ready
ARM GAS  /tmp/ccZOHcVn.s 			page 107


 3613 0c3c 23       		.uleb128 0x23
 3614 0c3d 5A010000 		.4byte	.LASF186
 3615 0c41 02       		.byte	0x2
 3616 0c42 8A       		.byte	0x8a
 3617 0c43 B90B0000 		.4byte	0xbb9
 3618 0c47 01       		.byte	0x1
 3619 0c48 05       		.byte	0x5
 3620 0c49 03       		.byte	0x3
 3621 0c4a 00000000 		.4byte	usart2_have_data
 3622 0c4e 23       		.uleb128 0x23
 3623 0c4f 25040000 		.4byte	.LASF187
 3624 0c53 02       		.byte	0x2
 3625 0c54 8B       		.byte	0x8b
 3626 0c55 24010000 		.4byte	0x124
 3627 0c59 01       		.byte	0x1
 3628 0c5a 05       		.byte	0x5
 3629 0c5b 03       		.byte	0x3
 3630 0c5c 00000000 		.4byte	usart2_pckt_bytes
 3631 0c60 0C       		.uleb128 0xc
 3632 0c61 B3050000 		.4byte	0x5b3
 3633 0c65 6B0C0000 		.4byte	0xc6b
 3634 0c69 25       		.uleb128 0x25
 3635 0c6a 00       		.byte	0
 3636 0c6b 26       		.uleb128 0x26
 3637 0c6c BF050000 		.4byte	.LASF188
 3638 0c70 02       		.byte	0x2
 3639 0c71 8D       		.byte	0x8d
 3640 0c72 780C0000 		.4byte	0xc78
 3641 0c76 01       		.byte	0x1
 3642 0c77 01       		.byte	0x1
 3643 0c78 0E       		.uleb128 0xe
 3644 0c79 600C0000 		.4byte	0xc60
 3645 0c7d 23       		.uleb128 0x23
 3646 0c7e 26000000 		.4byte	.LASF189
 3647 0c82 02       		.byte	0x2
 3648 0c83 90       		.byte	0x90
 3649 0c84 ED060000 		.4byte	0x6ed
 3650 0c88 01       		.byte	0x1
 3651 0c89 05       		.byte	0x5
 3652 0c8a 03       		.byte	0x3
 3653 0c8b 00000000 		.4byte	param_struct
 3654 0c8f 0C       		.uleb128 0xc
 3655 0c90 B3050000 		.4byte	0x5b3
 3656 0c94 9F0C0000 		.4byte	0xc9f
 3657 0c98 0D       		.uleb128 0xd
 3658 0c99 5D020000 		.4byte	0x25d
 3659 0c9d 13       		.byte	0x13
 3660 0c9e 00       		.byte	0
 3661 0c9f 23       		.uleb128 0x23
 3662 0ca0 D3050000 		.4byte	.LASF190
 3663 0ca4 02       		.byte	0x2
 3664 0ca5 9D       		.byte	0x9d
 3665 0ca6 8F0C0000 		.4byte	0xc8f
 3666 0caa 01       		.byte	0x1
 3667 0cab 05       		.byte	0x5
 3668 0cac 03       		.byte	0x3
 3669 0cad 00000000 		.4byte	gsmNUM
ARM GAS  /tmp/ccZOHcVn.s 			page 108


 3670 0cb1 0C       		.uleb128 0xc
 3671 0cb2 B3050000 		.4byte	0x5b3
 3672 0cb6 C10C0000 		.4byte	0xcc1
 3673 0cba 0D       		.uleb128 0xd
 3674 0cbb 5D020000 		.4byte	0x25d
 3675 0cbf B3       		.byte	0xb3
 3676 0cc0 00       		.byte	0
 3677 0cc1 23       		.uleb128 0x23
 3678 0cc2 DE060000 		.4byte	.LASF191
 3679 0cc6 02       		.byte	0x2
 3680 0cc7 9E       		.byte	0x9e
 3681 0cc8 B10C0000 		.4byte	0xcb1
 3682 0ccc 01       		.byte	0x1
 3683 0ccd 05       		.byte	0x5
 3684 0cce 03       		.byte	0x3
 3685 0ccf 00000000 		.4byte	gsmMSG
 3686 0cd3 23       		.uleb128 0x23
 3687 0cd4 96060000 		.4byte	.LASF192
 3688 0cd8 02       		.byte	0x2
 3689 0cd9 A6       		.byte	0xa6
 3690 0cda EB0A0000 		.4byte	0xaeb
 3691 0cde 01       		.byte	0x1
 3692 0cdf 05       		.byte	0x5
 3693 0ce0 03       		.byte	0x3
 3694 0ce1 00000000 		.4byte	wait_ms_var
 3695 0ce5 23       		.uleb128 0x23
 3696 0ce6 7D0A0000 		.4byte	.LASF193
 3697 0cea 02       		.byte	0x2
 3698 0ceb A7       		.byte	0xa7
 3699 0cec EB0A0000 		.4byte	0xaeb
 3700 0cf0 01       		.byte	0x1
 3701 0cf1 05       		.byte	0x5
 3702 0cf2 03       		.byte	0x3
 3703 0cf3 00000000 		.4byte	timer_standby
 3704 0cf7 23       		.uleb128 0x23
 3705 0cf8 E3000000 		.4byte	.LASF194
 3706 0cfc 02       		.byte	0x2
 3707 0cfd A8       		.byte	0xa8
 3708 0cfe EB0A0000 		.4byte	0xaeb
 3709 0d02 01       		.byte	0x1
 3710 0d03 05       		.byte	0x5
 3711 0d04 03       		.byte	0x3
 3712 0d05 00000000 		.4byte	tcp_kalive_timer
 3713 0d09 23       		.uleb128 0x23
 3714 0d0a BA040000 		.4byte	.LASF195
 3715 0d0e 02       		.byte	0x2
 3716 0d0f AA       		.byte	0xaa
 3717 0d10 B90B0000 		.4byte	0xbb9
 3718 0d14 01       		.byte	0x1
 3719 0d15 05       		.byte	0x5
 3720 0d16 03       		.byte	0x3
 3721 0d17 00000000 		.4byte	filter_timer
 3722 0d1b 23       		.uleb128 0x23
 3723 0d1c 47040000 		.4byte	.LASF196
 3724 0d20 02       		.byte	0x2
 3725 0d21 B0       		.byte	0xb0
 3726 0d22 EB0A0000 		.4byte	0xaeb
ARM GAS  /tmp/ccZOHcVn.s 			page 109


 3727 0d26 01       		.byte	0x1
 3728 0d27 05       		.byte	0x5
 3729 0d28 03       		.byte	0x3
 3730 0d29 00000000 		.4byte	secs
 3731 0d2d 23       		.uleb128 0x23
 3732 0d2e E5060000 		.4byte	.LASF197
 3733 0d32 02       		.byte	0x2
 3734 0d33 B1       		.byte	0xb1
 3735 0d34 B90B0000 		.4byte	0xbb9
 3736 0d38 01       		.byte	0x1
 3737 0d39 05       		.byte	0x5
 3738 0d3a 03       		.byte	0x3
 3739 0d3b 00000000 		.4byte	hours
 3740 0d3f 23       		.uleb128 0x23
 3741 0d40 24010000 		.4byte	.LASF198
 3742 0d44 02       		.byte	0x2
 3743 0d45 B2       		.byte	0xb2
 3744 0d46 B90B0000 		.4byte	0xbb9
 3745 0d4a 01       		.byte	0x1
 3746 0d4b 05       		.byte	0x5
 3747 0d4c 03       		.byte	0x3
 3748 0d4d 00000000 		.4byte	minutes
 3749 0d51 0C       		.uleb128 0xc
 3750 0d52 3D010000 		.4byte	0x13d
 3751 0d56 610D0000 		.4byte	0xd61
 3752 0d5a 0D       		.uleb128 0xd
 3753 0d5b 5D020000 		.4byte	0x25d
 3754 0d5f 09       		.byte	0x9
 3755 0d60 00       		.byte	0
 3756 0d61 23       		.uleb128 0x23
 3757 0d62 D8070000 		.4byte	.LASF199
 3758 0d66 02       		.byte	0x2
 3759 0d67 B7       		.byte	0xb7
 3760 0d68 510D0000 		.4byte	0xd51
 3761 0d6c 01       		.byte	0x1
 3762 0d6d 05       		.byte	0x5
 3763 0d6e 03       		.byte	0x3
 3764 0d6f 00000000 		.4byte	power_vect
 3765 0d73 0C       		.uleb128 0xc
 3766 0d74 3D010000 		.4byte	0x13d
 3767 0d78 830D0000 		.4byte	0xd83
 3768 0d7c 0D       		.uleb128 0xd
 3769 0d7d 5D020000 		.4byte	0x25d
 3770 0d81 10       		.byte	0x10
 3771 0d82 00       		.byte	0
 3772 0d83 23       		.uleb128 0x23
 3773 0d84 5C0A0000 		.4byte	.LASF200
 3774 0d88 02       		.byte	0x2
 3775 0d89 C5       		.byte	0xc5
 3776 0d8a 730D0000 		.4byte	0xd73
 3777 0d8e 01       		.byte	0x1
 3778 0d8f 05       		.byte	0x5
 3779 0d90 03       		.byte	0x3
 3780 0d91 00000000 		.4byte	vtemp
 3781 0d95 23       		.uleb128 0x23
 3782 0d96 AF000000 		.4byte	.LASF201
 3783 0d9a 02       		.byte	0x2
ARM GAS  /tmp/ccZOHcVn.s 			page 110


 3784 0d9b C6       		.byte	0xc6
 3785 0d9c 730D0000 		.4byte	0xd73
 3786 0da0 01       		.byte	0x1
 3787 0da1 05       		.byte	0x5
 3788 0da2 03       		.byte	0x3
 3789 0da3 00000000 		.4byte	vpote
 3790 0da7 00       		.byte	0
 3791              		.section	.debug_abbrev,"",%progbits
 3792              	.Ldebug_abbrev0:
 3793 0000 01       		.uleb128 0x1
 3794 0001 11       		.uleb128 0x11
 3795 0002 01       		.byte	0x1
 3796 0003 25       		.uleb128 0x25
 3797 0004 0E       		.uleb128 0xe
 3798 0005 13       		.uleb128 0x13
 3799 0006 0B       		.uleb128 0xb
 3800 0007 03       		.uleb128 0x3
 3801 0008 0E       		.uleb128 0xe
 3802 0009 1B       		.uleb128 0x1b
 3803 000a 0E       		.uleb128 0xe
 3804 000b 55       		.uleb128 0x55
 3805 000c 06       		.uleb128 0x6
 3806 000d 11       		.uleb128 0x11
 3807 000e 01       		.uleb128 0x1
 3808 000f 52       		.uleb128 0x52
 3809 0010 01       		.uleb128 0x1
 3810 0011 10       		.uleb128 0x10
 3811 0012 06       		.uleb128 0x6
 3812 0013 00       		.byte	0
 3813 0014 00       		.byte	0
 3814 0015 02       		.uleb128 0x2
 3815 0016 04       		.uleb128 0x4
 3816 0017 01       		.byte	0x1
 3817 0018 03       		.uleb128 0x3
 3818 0019 0E       		.uleb128 0xe
 3819 001a 0B       		.uleb128 0xb
 3820 001b 0B       		.uleb128 0xb
 3821 001c 49       		.uleb128 0x49
 3822 001d 13       		.uleb128 0x13
 3823 001e 3A       		.uleb128 0x3a
 3824 001f 0B       		.uleb128 0xb
 3825 0020 3B       		.uleb128 0x3b
 3826 0021 0B       		.uleb128 0xb
 3827 0022 01       		.uleb128 0x1
 3828 0023 13       		.uleb128 0x13
 3829 0024 00       		.byte	0
 3830 0025 00       		.byte	0
 3831 0026 03       		.uleb128 0x3
 3832 0027 28       		.uleb128 0x28
 3833 0028 00       		.byte	0
 3834 0029 03       		.uleb128 0x3
 3835 002a 0E       		.uleb128 0xe
 3836 002b 1C       		.uleb128 0x1c
 3837 002c 0D       		.uleb128 0xd
 3838 002d 00       		.byte	0
 3839 002e 00       		.byte	0
 3840 002f 04       		.uleb128 0x4
ARM GAS  /tmp/ccZOHcVn.s 			page 111


 3841 0030 28       		.uleb128 0x28
 3842 0031 00       		.byte	0
 3843 0032 03       		.uleb128 0x3
 3844 0033 0E       		.uleb128 0xe
 3845 0034 1C       		.uleb128 0x1c
 3846 0035 0B       		.uleb128 0xb
 3847 0036 00       		.byte	0
 3848 0037 00       		.byte	0
 3849 0038 05       		.uleb128 0x5
 3850 0039 24       		.uleb128 0x24
 3851 003a 00       		.byte	0
 3852 003b 0B       		.uleb128 0xb
 3853 003c 0B       		.uleb128 0xb
 3854 003d 3E       		.uleb128 0x3e
 3855 003e 0B       		.uleb128 0xb
 3856 003f 03       		.uleb128 0x3
 3857 0040 0E       		.uleb128 0xe
 3858 0041 00       		.byte	0
 3859 0042 00       		.byte	0
 3860 0043 06       		.uleb128 0x6
 3861 0044 16       		.uleb128 0x16
 3862 0045 00       		.byte	0
 3863 0046 03       		.uleb128 0x3
 3864 0047 0E       		.uleb128 0xe
 3865 0048 3A       		.uleb128 0x3a
 3866 0049 0B       		.uleb128 0xb
 3867 004a 3B       		.uleb128 0x3b
 3868 004b 05       		.uleb128 0x5
 3869 004c 49       		.uleb128 0x49
 3870 004d 13       		.uleb128 0x13
 3871 004e 00       		.byte	0
 3872 004f 00       		.byte	0
 3873 0050 07       		.uleb128 0x7
 3874 0051 16       		.uleb128 0x16
 3875 0052 00       		.byte	0
 3876 0053 03       		.uleb128 0x3
 3877 0054 0E       		.uleb128 0xe
 3878 0055 3A       		.uleb128 0x3a
 3879 0056 0B       		.uleb128 0xb
 3880 0057 3B       		.uleb128 0x3b
 3881 0058 0B       		.uleb128 0xb
 3882 0059 49       		.uleb128 0x49
 3883 005a 13       		.uleb128 0x13
 3884 005b 00       		.byte	0
 3885 005c 00       		.byte	0
 3886 005d 08       		.uleb128 0x8
 3887 005e 24       		.uleb128 0x24
 3888 005f 00       		.byte	0
 3889 0060 0B       		.uleb128 0xb
 3890 0061 0B       		.uleb128 0xb
 3891 0062 3E       		.uleb128 0x3e
 3892 0063 0B       		.uleb128 0xb
 3893 0064 03       		.uleb128 0x3
 3894 0065 08       		.uleb128 0x8
 3895 0066 00       		.byte	0
 3896 0067 00       		.byte	0
 3897 0068 09       		.uleb128 0x9
ARM GAS  /tmp/ccZOHcVn.s 			page 112


 3898 0069 13       		.uleb128 0x13
 3899 006a 01       		.byte	0x1
 3900 006b 0B       		.uleb128 0xb
 3901 006c 05       		.uleb128 0x5
 3902 006d 3A       		.uleb128 0x3a
 3903 006e 0B       		.uleb128 0xb
 3904 006f 3B       		.uleb128 0x3b
 3905 0070 0B       		.uleb128 0xb
 3906 0071 01       		.uleb128 0x1
 3907 0072 13       		.uleb128 0x13
 3908 0073 00       		.byte	0
 3909 0074 00       		.byte	0
 3910 0075 0A       		.uleb128 0xa
 3911 0076 0D       		.uleb128 0xd
 3912 0077 00       		.byte	0
 3913 0078 03       		.uleb128 0x3
 3914 0079 0E       		.uleb128 0xe
 3915 007a 3A       		.uleb128 0x3a
 3916 007b 0B       		.uleb128 0xb
 3917 007c 3B       		.uleb128 0x3b
 3918 007d 0B       		.uleb128 0xb
 3919 007e 49       		.uleb128 0x49
 3920 007f 13       		.uleb128 0x13
 3921 0080 38       		.uleb128 0x38
 3922 0081 0A       		.uleb128 0xa
 3923 0082 00       		.byte	0
 3924 0083 00       		.byte	0
 3925 0084 0B       		.uleb128 0xb
 3926 0085 0D       		.uleb128 0xd
 3927 0086 00       		.byte	0
 3928 0087 03       		.uleb128 0x3
 3929 0088 08       		.uleb128 0x8
 3930 0089 3A       		.uleb128 0x3a
 3931 008a 0B       		.uleb128 0xb
 3932 008b 3B       		.uleb128 0x3b
 3933 008c 0B       		.uleb128 0xb
 3934 008d 49       		.uleb128 0x49
 3935 008e 13       		.uleb128 0x13
 3936 008f 38       		.uleb128 0x38
 3937 0090 0A       		.uleb128 0xa
 3938 0091 00       		.byte	0
 3939 0092 00       		.byte	0
 3940 0093 0C       		.uleb128 0xc
 3941 0094 01       		.uleb128 0x1
 3942 0095 01       		.byte	0x1
 3943 0096 49       		.uleb128 0x49
 3944 0097 13       		.uleb128 0x13
 3945 0098 01       		.uleb128 0x1
 3946 0099 13       		.uleb128 0x13
 3947 009a 00       		.byte	0
 3948 009b 00       		.byte	0
 3949 009c 0D       		.uleb128 0xd
 3950 009d 21       		.uleb128 0x21
 3951 009e 00       		.byte	0
 3952 009f 49       		.uleb128 0x49
 3953 00a0 13       		.uleb128 0x13
 3954 00a1 2F       		.uleb128 0x2f
ARM GAS  /tmp/ccZOHcVn.s 			page 113


 3955 00a2 0B       		.uleb128 0xb
 3956 00a3 00       		.byte	0
 3957 00a4 00       		.byte	0
 3958 00a5 0E       		.uleb128 0xe
 3959 00a6 35       		.uleb128 0x35
 3960 00a7 00       		.byte	0
 3961 00a8 49       		.uleb128 0x49
 3962 00a9 13       		.uleb128 0x13
 3963 00aa 00       		.byte	0
 3964 00ab 00       		.byte	0
 3965 00ac 0F       		.uleb128 0xf
 3966 00ad 13       		.uleb128 0x13
 3967 00ae 01       		.byte	0x1
 3968 00af 0B       		.uleb128 0xb
 3969 00b0 0B       		.uleb128 0xb
 3970 00b1 3A       		.uleb128 0x3a
 3971 00b2 0B       		.uleb128 0xb
 3972 00b3 3B       		.uleb128 0x3b
 3973 00b4 0B       		.uleb128 0xb
 3974 00b5 01       		.uleb128 0x1
 3975 00b6 13       		.uleb128 0x13
 3976 00b7 00       		.byte	0
 3977 00b8 00       		.byte	0
 3978 00b9 10       		.uleb128 0x10
 3979 00ba 26       		.uleb128 0x26
 3980 00bb 00       		.byte	0
 3981 00bc 49       		.uleb128 0x49
 3982 00bd 13       		.uleb128 0x13
 3983 00be 00       		.byte	0
 3984 00bf 00       		.byte	0
 3985 00c0 11       		.uleb128 0x11
 3986 00c1 0D       		.uleb128 0xd
 3987 00c2 00       		.byte	0
 3988 00c3 03       		.uleb128 0x3
 3989 00c4 08       		.uleb128 0x8
 3990 00c5 3A       		.uleb128 0x3a
 3991 00c6 0B       		.uleb128 0xb
 3992 00c7 3B       		.uleb128 0x3b
 3993 00c8 05       		.uleb128 0x5
 3994 00c9 49       		.uleb128 0x49
 3995 00ca 13       		.uleb128 0x13
 3996 00cb 38       		.uleb128 0x38
 3997 00cc 0A       		.uleb128 0xa
 3998 00cd 00       		.byte	0
 3999 00ce 00       		.byte	0
 4000 00cf 12       		.uleb128 0x12
 4001 00d0 0D       		.uleb128 0xd
 4002 00d1 00       		.byte	0
 4003 00d2 03       		.uleb128 0x3
 4004 00d3 0E       		.uleb128 0xe
 4005 00d4 3A       		.uleb128 0x3a
 4006 00d5 0B       		.uleb128 0xb
 4007 00d6 3B       		.uleb128 0x3b
 4008 00d7 05       		.uleb128 0x5
 4009 00d8 49       		.uleb128 0x49
 4010 00d9 13       		.uleb128 0x13
 4011 00da 38       		.uleb128 0x38
ARM GAS  /tmp/ccZOHcVn.s 			page 114


 4012 00db 0A       		.uleb128 0xa
 4013 00dc 00       		.byte	0
 4014 00dd 00       		.byte	0
 4015 00de 13       		.uleb128 0x13
 4016 00df 13       		.uleb128 0x13
 4017 00e0 01       		.byte	0x1
 4018 00e1 0B       		.uleb128 0xb
 4019 00e2 0B       		.uleb128 0xb
 4020 00e3 3A       		.uleb128 0x3a
 4021 00e4 0B       		.uleb128 0xb
 4022 00e5 3B       		.uleb128 0x3b
 4023 00e6 05       		.uleb128 0x5
 4024 00e7 01       		.uleb128 0x1
 4025 00e8 13       		.uleb128 0x13
 4026 00e9 00       		.byte	0
 4027 00ea 00       		.byte	0
 4028 00eb 14       		.uleb128 0x14
 4029 00ec 04       		.uleb128 0x4
 4030 00ed 01       		.byte	0x1
 4031 00ee 0B       		.uleb128 0xb
 4032 00ef 0B       		.uleb128 0xb
 4033 00f0 49       		.uleb128 0x49
 4034 00f1 13       		.uleb128 0x13
 4035 00f2 3A       		.uleb128 0x3a
 4036 00f3 0B       		.uleb128 0xb
 4037 00f4 3B       		.uleb128 0x3b
 4038 00f5 0B       		.uleb128 0xb
 4039 00f6 01       		.uleb128 0x1
 4040 00f7 13       		.uleb128 0x13
 4041 00f8 00       		.byte	0
 4042 00f9 00       		.byte	0
 4043 00fa 15       		.uleb128 0x15
 4044 00fb 13       		.uleb128 0x13
 4045 00fc 01       		.byte	0x1
 4046 00fd 03       		.uleb128 0x3
 4047 00fe 0E       		.uleb128 0xe
 4048 00ff 0B       		.uleb128 0xb
 4049 0100 0B       		.uleb128 0xb
 4050 0101 3A       		.uleb128 0x3a
 4051 0102 0B       		.uleb128 0xb
 4052 0103 3B       		.uleb128 0x3b
 4053 0104 0B       		.uleb128 0xb
 4054 0105 01       		.uleb128 0x1
 4055 0106 13       		.uleb128 0x13
 4056 0107 00       		.byte	0
 4057 0108 00       		.byte	0
 4058 0109 16       		.uleb128 0x16
 4059 010a 2E       		.uleb128 0x2e
 4060 010b 01       		.byte	0x1
 4061 010c 03       		.uleb128 0x3
 4062 010d 0E       		.uleb128 0xe
 4063 010e 3A       		.uleb128 0x3a
 4064 010f 0B       		.uleb128 0xb
 4065 0110 3B       		.uleb128 0x3b
 4066 0111 05       		.uleb128 0x5
 4067 0112 27       		.uleb128 0x27
 4068 0113 0C       		.uleb128 0xc
ARM GAS  /tmp/ccZOHcVn.s 			page 115


 4069 0114 11       		.uleb128 0x11
 4070 0115 01       		.uleb128 0x1
 4071 0116 12       		.uleb128 0x12
 4072 0117 01       		.uleb128 0x1
 4073 0118 40       		.uleb128 0x40
 4074 0119 06       		.uleb128 0x6
 4075 011a 9742     		.uleb128 0x2117
 4076 011c 0C       		.uleb128 0xc
 4077 011d 01       		.uleb128 0x1
 4078 011e 13       		.uleb128 0x13
 4079 011f 00       		.byte	0
 4080 0120 00       		.byte	0
 4081 0121 17       		.uleb128 0x17
 4082 0122 05       		.uleb128 0x5
 4083 0123 00       		.byte	0
 4084 0124 03       		.uleb128 0x3
 4085 0125 0E       		.uleb128 0xe
 4086 0126 3A       		.uleb128 0x3a
 4087 0127 0B       		.uleb128 0xb
 4088 0128 3B       		.uleb128 0x3b
 4089 0129 05       		.uleb128 0x5
 4090 012a 49       		.uleb128 0x49
 4091 012b 13       		.uleb128 0x13
 4092 012c 02       		.uleb128 0x2
 4093 012d 0A       		.uleb128 0xa
 4094 012e 00       		.byte	0
 4095 012f 00       		.byte	0
 4096 0130 18       		.uleb128 0x18
 4097 0131 2E       		.uleb128 0x2e
 4098 0132 01       		.byte	0x1
 4099 0133 03       		.uleb128 0x3
 4100 0134 0E       		.uleb128 0xe
 4101 0135 3A       		.uleb128 0x3a
 4102 0136 0B       		.uleb128 0xb
 4103 0137 3B       		.uleb128 0x3b
 4104 0138 05       		.uleb128 0x5
 4105 0139 27       		.uleb128 0x27
 4106 013a 0C       		.uleb128 0xc
 4107 013b 49       		.uleb128 0x49
 4108 013c 13       		.uleb128 0x13
 4109 013d 11       		.uleb128 0x11
 4110 013e 01       		.uleb128 0x1
 4111 013f 12       		.uleb128 0x12
 4112 0140 01       		.uleb128 0x1
 4113 0141 40       		.uleb128 0x40
 4114 0142 06       		.uleb128 0x6
 4115 0143 9642     		.uleb128 0x2116
 4116 0145 0C       		.uleb128 0xc
 4117 0146 01       		.uleb128 0x1
 4118 0147 13       		.uleb128 0x13
 4119 0148 00       		.byte	0
 4120 0149 00       		.byte	0
 4121 014a 19       		.uleb128 0x19
 4122 014b 2E       		.uleb128 0x2e
 4123 014c 01       		.byte	0x1
 4124 014d 3F       		.uleb128 0x3f
 4125 014e 0C       		.uleb128 0xc
ARM GAS  /tmp/ccZOHcVn.s 			page 116


 4126 014f 03       		.uleb128 0x3
 4127 0150 0E       		.uleb128 0xe
 4128 0151 3A       		.uleb128 0x3a
 4129 0152 0B       		.uleb128 0xb
 4130 0153 3B       		.uleb128 0x3b
 4131 0154 0B       		.uleb128 0xb
 4132 0155 27       		.uleb128 0x27
 4133 0156 0C       		.uleb128 0xc
 4134 0157 49       		.uleb128 0x49
 4135 0158 13       		.uleb128 0x13
 4136 0159 11       		.uleb128 0x11
 4137 015a 01       		.uleb128 0x1
 4138 015b 12       		.uleb128 0x12
 4139 015c 01       		.uleb128 0x1
 4140 015d 40       		.uleb128 0x40
 4141 015e 06       		.uleb128 0x6
 4142 015f 9642     		.uleb128 0x2116
 4143 0161 0C       		.uleb128 0xc
 4144 0162 01       		.uleb128 0x1
 4145 0163 13       		.uleb128 0x13
 4146 0164 00       		.byte	0
 4147 0165 00       		.byte	0
 4148 0166 1A       		.uleb128 0x1a
 4149 0167 34       		.uleb128 0x34
 4150 0168 00       		.byte	0
 4151 0169 03       		.uleb128 0x3
 4152 016a 08       		.uleb128 0x8
 4153 016b 3A       		.uleb128 0x3a
 4154 016c 0B       		.uleb128 0xb
 4155 016d 3B       		.uleb128 0x3b
 4156 016e 0B       		.uleb128 0xb
 4157 016f 49       		.uleb128 0x49
 4158 0170 13       		.uleb128 0x13
 4159 0171 02       		.uleb128 0x2
 4160 0172 0A       		.uleb128 0xa
 4161 0173 00       		.byte	0
 4162 0174 00       		.byte	0
 4163 0175 1B       		.uleb128 0x1b
 4164 0176 34       		.uleb128 0x34
 4165 0177 00       		.byte	0
 4166 0178 03       		.uleb128 0x3
 4167 0179 08       		.uleb128 0x8
 4168 017a 3A       		.uleb128 0x3a
 4169 017b 0B       		.uleb128 0xb
 4170 017c 3B       		.uleb128 0x3b
 4171 017d 0B       		.uleb128 0xb
 4172 017e 49       		.uleb128 0x49
 4173 017f 13       		.uleb128 0x13
 4174 0180 00       		.byte	0
 4175 0181 00       		.byte	0
 4176 0182 1C       		.uleb128 0x1c
 4177 0183 34       		.uleb128 0x34
 4178 0184 00       		.byte	0
 4179 0185 03       		.uleb128 0x3
 4180 0186 0E       		.uleb128 0xe
 4181 0187 3A       		.uleb128 0x3a
 4182 0188 0B       		.uleb128 0xb
ARM GAS  /tmp/ccZOHcVn.s 			page 117


 4183 0189 3B       		.uleb128 0x3b
 4184 018a 0B       		.uleb128 0xb
 4185 018b 49       		.uleb128 0x49
 4186 018c 13       		.uleb128 0x13
 4187 018d 00       		.byte	0
 4188 018e 00       		.byte	0
 4189 018f 1D       		.uleb128 0x1d
 4190 0190 34       		.uleb128 0x34
 4191 0191 00       		.byte	0
 4192 0192 03       		.uleb128 0x3
 4193 0193 0E       		.uleb128 0xe
 4194 0194 3A       		.uleb128 0x3a
 4195 0195 0B       		.uleb128 0xb
 4196 0196 3B       		.uleb128 0x3b
 4197 0197 0B       		.uleb128 0xb
 4198 0198 49       		.uleb128 0x49
 4199 0199 13       		.uleb128 0x13
 4200 019a 02       		.uleb128 0x2
 4201 019b 0A       		.uleb128 0xa
 4202 019c 00       		.byte	0
 4203 019d 00       		.byte	0
 4204 019e 1E       		.uleb128 0x1e
 4205 019f 2E       		.uleb128 0x2e
 4206 01a0 01       		.byte	0x1
 4207 01a1 3F       		.uleb128 0x3f
 4208 01a2 0C       		.uleb128 0xc
 4209 01a3 03       		.uleb128 0x3
 4210 01a4 0E       		.uleb128 0xe
 4211 01a5 3A       		.uleb128 0x3a
 4212 01a6 0B       		.uleb128 0xb
 4213 01a7 3B       		.uleb128 0x3b
 4214 01a8 05       		.uleb128 0x5
 4215 01a9 27       		.uleb128 0x27
 4216 01aa 0C       		.uleb128 0xc
 4217 01ab 11       		.uleb128 0x11
 4218 01ac 01       		.uleb128 0x1
 4219 01ad 12       		.uleb128 0x12
 4220 01ae 01       		.uleb128 0x1
 4221 01af 40       		.uleb128 0x40
 4222 01b0 06       		.uleb128 0x6
 4223 01b1 9642     		.uleb128 0x2116
 4224 01b3 0C       		.uleb128 0xc
 4225 01b4 01       		.uleb128 0x1
 4226 01b5 13       		.uleb128 0x13
 4227 01b6 00       		.byte	0
 4228 01b7 00       		.byte	0
 4229 01b8 1F       		.uleb128 0x1f
 4230 01b9 34       		.uleb128 0x34
 4231 01ba 00       		.byte	0
 4232 01bb 03       		.uleb128 0x3
 4233 01bc 08       		.uleb128 0x8
 4234 01bd 3A       		.uleb128 0x3a
 4235 01be 0B       		.uleb128 0xb
 4236 01bf 3B       		.uleb128 0x3b
 4237 01c0 05       		.uleb128 0x5
 4238 01c1 49       		.uleb128 0x49
 4239 01c2 13       		.uleb128 0x13
ARM GAS  /tmp/ccZOHcVn.s 			page 118


 4240 01c3 02       		.uleb128 0x2
 4241 01c4 0A       		.uleb128 0xa
 4242 01c5 00       		.byte	0
 4243 01c6 00       		.byte	0
 4244 01c7 20       		.uleb128 0x20
 4245 01c8 34       		.uleb128 0x34
 4246 01c9 00       		.byte	0
 4247 01ca 03       		.uleb128 0x3
 4248 01cb 0E       		.uleb128 0xe
 4249 01cc 3A       		.uleb128 0x3a
 4250 01cd 0B       		.uleb128 0xb
 4251 01ce 3B       		.uleb128 0x3b
 4252 01cf 05       		.uleb128 0x5
 4253 01d0 49       		.uleb128 0x49
 4254 01d1 13       		.uleb128 0x13
 4255 01d2 02       		.uleb128 0x2
 4256 01d3 0A       		.uleb128 0xa
 4257 01d4 00       		.byte	0
 4258 01d5 00       		.byte	0
 4259 01d6 21       		.uleb128 0x21
 4260 01d7 0F       		.uleb128 0xf
 4261 01d8 00       		.byte	0
 4262 01d9 0B       		.uleb128 0xb
 4263 01da 0B       		.uleb128 0xb
 4264 01db 49       		.uleb128 0x49
 4265 01dc 13       		.uleb128 0x13
 4266 01dd 00       		.byte	0
 4267 01de 00       		.byte	0
 4268 01df 22       		.uleb128 0x22
 4269 01e0 2E       		.uleb128 0x2e
 4270 01e1 00       		.byte	0
 4271 01e2 3F       		.uleb128 0x3f
 4272 01e3 0C       		.uleb128 0xc
 4273 01e4 03       		.uleb128 0x3
 4274 01e5 0E       		.uleb128 0xe
 4275 01e6 3A       		.uleb128 0x3a
 4276 01e7 0B       		.uleb128 0xb
 4277 01e8 3B       		.uleb128 0x3b
 4278 01e9 05       		.uleb128 0x5
 4279 01ea 27       		.uleb128 0x27
 4280 01eb 0C       		.uleb128 0xc
 4281 01ec 11       		.uleb128 0x11
 4282 01ed 01       		.uleb128 0x1
 4283 01ee 12       		.uleb128 0x12
 4284 01ef 01       		.uleb128 0x1
 4285 01f0 40       		.uleb128 0x40
 4286 01f1 06       		.uleb128 0x6
 4287 01f2 9642     		.uleb128 0x2116
 4288 01f4 0C       		.uleb128 0xc
 4289 01f5 00       		.byte	0
 4290 01f6 00       		.byte	0
 4291 01f7 23       		.uleb128 0x23
 4292 01f8 34       		.uleb128 0x34
 4293 01f9 00       		.byte	0
 4294 01fa 03       		.uleb128 0x3
 4295 01fb 0E       		.uleb128 0xe
 4296 01fc 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccZOHcVn.s 			page 119


 4297 01fd 0B       		.uleb128 0xb
 4298 01fe 3B       		.uleb128 0x3b
 4299 01ff 0B       		.uleb128 0xb
 4300 0200 49       		.uleb128 0x49
 4301 0201 13       		.uleb128 0x13
 4302 0202 3F       		.uleb128 0x3f
 4303 0203 0C       		.uleb128 0xc
 4304 0204 02       		.uleb128 0x2
 4305 0205 0A       		.uleb128 0xa
 4306 0206 00       		.byte	0
 4307 0207 00       		.byte	0
 4308 0208 24       		.uleb128 0x24
 4309 0209 34       		.uleb128 0x34
 4310 020a 00       		.byte	0
 4311 020b 03       		.uleb128 0x3
 4312 020c 08       		.uleb128 0x8
 4313 020d 3A       		.uleb128 0x3a
 4314 020e 0B       		.uleb128 0xb
 4315 020f 3B       		.uleb128 0x3b
 4316 0210 0B       		.uleb128 0xb
 4317 0211 49       		.uleb128 0x49
 4318 0212 13       		.uleb128 0x13
 4319 0213 3F       		.uleb128 0x3f
 4320 0214 0C       		.uleb128 0xc
 4321 0215 02       		.uleb128 0x2
 4322 0216 0A       		.uleb128 0xa
 4323 0217 00       		.byte	0
 4324 0218 00       		.byte	0
 4325 0219 25       		.uleb128 0x25
 4326 021a 21       		.uleb128 0x21
 4327 021b 00       		.byte	0
 4328 021c 00       		.byte	0
 4329 021d 00       		.byte	0
 4330 021e 26       		.uleb128 0x26
 4331 021f 34       		.uleb128 0x34
 4332 0220 00       		.byte	0
 4333 0221 03       		.uleb128 0x3
 4334 0222 0E       		.uleb128 0xe
 4335 0223 3A       		.uleb128 0x3a
 4336 0224 0B       		.uleb128 0xb
 4337 0225 3B       		.uleb128 0x3b
 4338 0226 0B       		.uleb128 0xb
 4339 0227 49       		.uleb128 0x49
 4340 0228 13       		.uleb128 0x13
 4341 0229 3F       		.uleb128 0x3f
 4342 022a 0C       		.uleb128 0xc
 4343 022b 3C       		.uleb128 0x3c
 4344 022c 0C       		.uleb128 0xc
 4345 022d 00       		.byte	0
 4346 022e 00       		.byte	0
 4347 022f 00       		.byte	0
 4348              		.section	.debug_loc,"",%progbits
 4349              	.Ldebug_loc0:
 4350              	.LLST0:
 4351 0000 00000000 		.4byte	.LFB16
 4352 0004 02000000 		.4byte	.LCFI0
 4353 0008 0200     		.2byte	0x2
ARM GAS  /tmp/ccZOHcVn.s 			page 120


 4354 000a 7D       		.byte	0x7d
 4355 000b 00       		.sleb128 0
 4356 000c 02000000 		.4byte	.LCFI0
 4357 0010 04000000 		.4byte	.LCFI1
 4358 0014 0200     		.2byte	0x2
 4359 0016 7D       		.byte	0x7d
 4360 0017 0C       		.sleb128 12
 4361 0018 04000000 		.4byte	.LCFI1
 4362 001c EC000000 		.4byte	.LFE16
 4363 0020 0200     		.2byte	0x2
 4364 0022 7D       		.byte	0x7d
 4365 0023 18       		.sleb128 24
 4366 0024 00000000 		.4byte	0
 4367 0028 00000000 		.4byte	0
 4368              	.LLST1:
 4369 002c 00000000 		.4byte	.LFB18
 4370 0030 02000000 		.4byte	.LCFI2
 4371 0034 0200     		.2byte	0x2
 4372 0036 7D       		.byte	0x7d
 4373 0037 00       		.sleb128 0
 4374 0038 02000000 		.4byte	.LCFI2
 4375 003c 04000000 		.4byte	.LCFI3
 4376 0040 0200     		.2byte	0x2
 4377 0042 7D       		.byte	0x7d
 4378 0043 04       		.sleb128 4
 4379 0044 04000000 		.4byte	.LCFI3
 4380 0048 48000000 		.4byte	.LFE18
 4381 004c 0200     		.2byte	0x2
 4382 004e 7D       		.byte	0x7d
 4383 004f 10       		.sleb128 16
 4384 0050 00000000 		.4byte	0
 4385 0054 00000000 		.4byte	0
 4386              	.LLST2:
 4387 0058 00000000 		.4byte	.LFB20
 4388 005c 02000000 		.4byte	.LCFI4
 4389 0060 0200     		.2byte	0x2
 4390 0062 7D       		.byte	0x7d
 4391 0063 00       		.sleb128 0
 4392 0064 02000000 		.4byte	.LCFI4
 4393 0068 04000000 		.4byte	.LCFI5
 4394 006c 0200     		.2byte	0x2
 4395 006e 7D       		.byte	0x7d
 4396 006f 0C       		.sleb128 12
 4397 0070 04000000 		.4byte	.LCFI5
 4398 0074 24080000 		.4byte	.LFE20
 4399 0078 0300     		.2byte	0x3
 4400 007a 7D       		.byte	0x7d
 4401 007b B001     		.sleb128 176
 4402 007d 00000000 		.4byte	0
 4403 0081 00000000 		.4byte	0
 4404              	.LLST3:
 4405 0085 00000000 		.4byte	.LFB21
 4406 0089 02000000 		.4byte	.LCFI6
 4407 008d 0200     		.2byte	0x2
 4408 008f 7D       		.byte	0x7d
 4409 0090 00       		.sleb128 0
 4410 0091 02000000 		.4byte	.LCFI6
ARM GAS  /tmp/ccZOHcVn.s 			page 121


 4411 0095 04000000 		.4byte	.LCFI7
 4412 0099 0200     		.2byte	0x2
 4413 009b 7D       		.byte	0x7d
 4414 009c 04       		.sleb128 4
 4415 009d 04000000 		.4byte	.LCFI7
 4416 00a1 B0000000 		.4byte	.LFE21
 4417 00a5 0300     		.2byte	0x3
 4418 00a7 7D       		.byte	0x7d
 4419 00a8 E000     		.sleb128 96
 4420 00aa 00000000 		.4byte	0
 4421 00ae 00000000 		.4byte	0
 4422              	.LLST4:
 4423 00b2 00000000 		.4byte	.LFB22
 4424 00b6 02000000 		.4byte	.LCFI8
 4425 00ba 0200     		.2byte	0x2
 4426 00bc 7D       		.byte	0x7d
 4427 00bd 00       		.sleb128 0
 4428 00be 02000000 		.4byte	.LCFI8
 4429 00c2 64010000 		.4byte	.LFE22
 4430 00c6 0200     		.2byte	0x2
 4431 00c8 7D       		.byte	0x7d
 4432 00c9 08       		.sleb128 8
 4433 00ca 00000000 		.4byte	0
 4434 00ce 00000000 		.4byte	0
 4435              		.section	.debug_aranges,"",%progbits
 4436 0000 3C000000 		.4byte	0x3c
 4437 0004 0200     		.2byte	0x2
 4438 0006 00000000 		.4byte	.Ldebug_info0
 4439 000a 04       		.byte	0x4
 4440 000b 00       		.byte	0
 4441 000c 0000     		.2byte	0
 4442 000e 0000     		.2byte	0
 4443 0010 00000000 		.4byte	.LFB16
 4444 0014 EC000000 		.4byte	.LFE16-.LFB16
 4445 0018 00000000 		.4byte	.LFB18
 4446 001c 48000000 		.4byte	.LFE18-.LFB18
 4447 0020 00000000 		.4byte	.LFB20
 4448 0024 24080000 		.4byte	.LFE20-.LFB20
 4449 0028 00000000 		.4byte	.LFB21
 4450 002c B0000000 		.4byte	.LFE21-.LFB21
 4451 0030 00000000 		.4byte	.LFB22
 4452 0034 64010000 		.4byte	.LFE22-.LFB22
 4453 0038 00000000 		.4byte	0
 4454 003c 00000000 		.4byte	0
 4455              		.section	.debug_ranges,"",%progbits
 4456              	.Ldebug_ranges0:
 4457 0000 00000000 		.4byte	.LFB16
 4458 0004 EC000000 		.4byte	.LFE16
 4459 0008 00000000 		.4byte	.LFB18
 4460 000c 48000000 		.4byte	.LFE18
 4461 0010 00000000 		.4byte	.LFB20
 4462 0014 24080000 		.4byte	.LFE20
 4463 0018 00000000 		.4byte	.LFB21
 4464 001c B0000000 		.4byte	.LFE21
 4465 0020 00000000 		.4byte	.LFB22
 4466 0024 64010000 		.4byte	.LFE22
 4467 0028 00000000 		.4byte	0
ARM GAS  /tmp/ccZOHcVn.s 			page 122


 4468 002c 00000000 		.4byte	0
 4469              		.section	.debug_line,"",%progbits
 4470              	.Ldebug_line0:
 4471 0000 EB020000 		.section	.debug_str,"MS",%progbits,1
 4471      02003701 
 4471      00000201 
 4471      FB0E0D00 
 4471      01010101 
 4472              	.LASF159:
 4473 0000 735F6C63 		.ascii	"s_lcd\000"
 4473      6400
 4474              	.LASF125:
 4475 0006 67736D5F 		.ascii	"gsm_state_idle\000"
 4475      73746174 
 4475      655F6964 
 4475      6C6500
 4476              	.LASF145:
 4477 0015 7A65726F 		.ascii	"zero_current_loc\000"
 4477      5F637572 
 4477      72656E74 
 4477      5F6C6F63 
 4477      00
 4478              	.LASF189:
 4479 0026 70617261 		.ascii	"param_struct\000"
 4479      6D5F7374 
 4479      72756374 
 4479      00
 4480              	.LASF12:
 4481 0033 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4481      345F3135 
 4481      5F495251 
 4481      6E00
 4482              	.LASF83:
 4483 0041 42535252 		.ascii	"BSRR\000"
 4483      00
 4484              	.LASF11:
 4485 0046 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4485      325F335F 
 4485      4952516E 
 4485      00
 4486              	.LASF151:
 4487 0053 6D61696E 		.ascii	"main_state\000"
 4487      5F737461 
 4487      746500
 4488              	.LASF99:
 4489 005e 696E6974 		.ascii	"init_airplane0\000"
 4489      5F616972 
 4489      706C616E 
 4489      653000
 4490              	.LASF100:
 4491 006d 696E6974 		.ascii	"init_airplane1\000"
 4491      5F616972 
 4491      706C616E 
 4491      653100
 4492              	.LASF2:
 4493 007c 5356435F 		.ascii	"SVC_IRQn\000"
 4493      4952516E 
ARM GAS  /tmp/ccZOHcVn.s 			page 123


 4493      00
 4494              	.LASF161:
 4495 0085 62756666 		.ascii	"buffer\000"
 4495      657200
 4496              	.LASF121:
 4497 008c 67736D5F 		.ascii	"gsm_state_ready\000"
 4497      73746174 
 4497      655F7265 
 4497      61647900 
 4498              	.LASF129:
 4499 009c 67736D5F 		.ascii	"gsm_state_shutdown\000"
 4499      73746174 
 4499      655F7368 
 4499      7574646F 
 4499      776E00
 4500              	.LASF201:
 4501 00af 76706F74 		.ascii	"vpote\000"
 4501      6500
 4502              	.LASF105:
 4503 00b5 6D656173 		.ascii	"meas_go_airplane\000"
 4503      5F676F5F 
 4503      61697270 
 4503      6C616E65 
 4503      00
 4504              	.LASF47:
 4505 00c6 756E7369 		.ascii	"unsigned int\000"
 4505      676E6564 
 4505      20696E74 
 4505      00
 4506              	.LASF71:
 4507 00d3 4C4F4144 		.ascii	"LOAD\000"
 4507      00
 4508              	.LASF25:
 4509 00d8 54494D31 		.ascii	"TIM16_IRQn\000"
 4509      365F4952 
 4509      516E00
 4510              	.LASF194:
 4511 00e3 7463705F 		.ascii	"tcp_kalive_timer\000"
 4511      6B616C69 
 4511      76655F74 
 4511      696D6572 
 4511      00
 4512              	.LASF41:
 4513 00f4 5F5F696E 		.ascii	"__int32_t\000"
 4513      7433325F 
 4513      7400
 4514              	.LASF167:
 4515 00fe 72783262 		.ascii	"rx2buff\000"
 4515      75666600 
 4516              	.LASF8:
 4517 0106 464C4153 		.ascii	"FLASH_IRQn\000"
 4517      485F4952 
 4517      516E00
 4518              	.LASF169:
 4519 0111 72783162 		.ascii	"rx1buff\000"
 4519      75666600 
 4520              	.LASF72:
ARM GAS  /tmp/ccZOHcVn.s 			page 124


 4521 0119 43414C49 		.ascii	"CALIB\000"
 4521      4200
 4522              	.LASF108:
 4523 011f 696D6569 		.ascii	"imei\000"
 4523      00
 4524              	.LASF198:
 4525 0124 6D696E75 		.ascii	"minutes\000"
 4525      74657300 
 4526              	.LASF140:
 4527 012c 77685F69 		.ascii	"wh_int\000"
 4527      6E7400
 4528              	.LASF185:
 4529 0133 75736172 		.ascii	"usart2_pckt_ready\000"
 4529      74325F70 
 4529      636B745F 
 4529      72656164 
 4529      7900
 4530              	.LASF166:
 4531 0145 74783262 		.ascii	"tx2buff\000"
 4531      75666600 
 4532              	.LASF10:
 4533 014d 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4533      305F315F 
 4533      4952516E 
 4533      00
 4534              	.LASF186:
 4535 015a 75736172 		.ascii	"usart2_have_data\000"
 4535      74325F68 
 4535      6176655F 
 4535      64617461 
 4535      00
 4536              	.LASF122:
 4537 016b 67736D5F 		.ascii	"gsm_state_sending_conf\000"
 4537      73746174 
 4537      655F7365 
 4537      6E64696E 
 4537      675F636F 
 4538              	.LASF27:
 4539 0182 49324331 		.ascii	"I2C1_IRQn\000"
 4539      5F495251 
 4539      6E00
 4540              	.LASF3:
 4541 018c 50656E64 		.ascii	"PendSV_IRQn\000"
 4541      53565F49 
 4541      52516E00 
 4542              	.LASF146:
 4543 0198 6163756D 		.ascii	"acum_secs_index\000"
 4543      5F736563 
 4543      735F696E 
 4543      64657800 
 4544              	.LASF9:
 4545 01a8 5243435F 		.ascii	"RCC_IRQn\000"
 4545      4952516E 
 4545      00
 4546              	.LASF144:
 4547 01b1 6663616C 		.ascii	"fcalc\000"
 4547      6300
ARM GAS  /tmp/ccZOHcVn.s 			page 125


 4548              	.LASF104:
 4549 01b7 6D656173 		.ascii	"meas_reporting1\000"
 4549      5F726570 
 4549      6F727469 
 4549      6E673100 
 4550              	.LASF51:
 4551 01c7 75696E74 		.ascii	"uint32_t\000"
 4551      33325F74 
 4551      00
 4552              	.LASF156:
 4553 01d0 6D656173 		.ascii	"meas_end\000"
 4553      5F656E64 
 4553      00
 4554              	.LASF52:
 4555 01d9 49534552 		.ascii	"ISER\000"
 4555      00
 4556              	.LASF160:
 4557 01de 666C6F61 		.ascii	"float\000"
 4557      7400
 4558              	.LASF157:
 4559 01e4 68797374 		.ascii	"hyst\000"
 4559      00
 4560              	.LASF55:
 4561 01e9 52534552 		.ascii	"RSERVED1\000"
 4561      56454431 
 4561      00
 4562              	.LASF29:
 4563 01f2 53504931 		.ascii	"SPI1_IRQn\000"
 4563      5F495251 
 4563      6E00
 4564              	.LASF46:
 4565 01fc 6C6F6E67 		.ascii	"long long unsigned int\000"
 4565      206C6F6E 
 4565      6720756E 
 4565      7369676E 
 4565      65642069 
 4566              	.LASF68:
 4567 0213 44465352 		.ascii	"DFSR\000"
 4567      00
 4568              	.LASF183:
 4569 0218 75736172 		.ascii	"usart1_pckt_bytes\000"
 4569      74315F70 
 4569      636B745F 
 4569      62797465 
 4569      7300
 4570              	.LASF116:
 4571 022a 67736D5F 		.ascii	"gsm_state_reset\000"
 4571      73746174 
 4571      655F7265 
 4571      73657400 
 4572              	.LASF148:
 4573 023a 6163756D 		.ascii	"acum_hours\000"
 4573      5F686F75 
 4573      727300
 4574              	.LASF39:
 4575 0245 5F5F7569 		.ascii	"__uint16_t\000"
 4575      6E743136 
ARM GAS  /tmp/ccZOHcVn.s 			page 126


 4575      5F7400
 4576              	.LASF91:
 4577 0250 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE0\000"
 4577      434F554E 
 4577      54455253 
 4577      5F414E44 
 4577      5F50484F 
 4578              	.LASF92:
 4579 0268 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE1\000"
 4579      434F554E 
 4579      54455253 
 4579      5F414E44 
 4579      5F50484F 
 4580              	.LASF79:
 4581 0280 4D4F4445 		.ascii	"MODER\000"
 4581      5200
 4582              	.LASF77:
 4583 0286 43485345 		.ascii	"CHSELR\000"
 4583      4C5200
 4584              	.LASF181:
 4585 028d 75736172 		.ascii	"usart1_pckt_ready\000"
 4585      74315F70 
 4585      636B745F 
 4585      72656164 
 4585      7900
 4586              	.LASF34:
 4587 029f 4952516E 		.ascii	"IRQn_Type\000"
 4587      5F547970 
 4587      6500
 4588              	.LASF113:
 4589 02a9 74696D65 		.ascii	"timer_reportar\000"
 4589      725F7265 
 4589      706F7274 
 4589      617200
 4590              	.LASF32:
 4591 02b8 55534152 		.ascii	"USART2_IRQn\000"
 4591      54325F49 
 4591      52516E00 
 4592              	.LASF63:
 4593 02c4 43505549 		.ascii	"CPUID\000"
 4593      4400
 4594              	.LASF173:
 4595 02ca 74745F74 		.ascii	"tt_take_photo_sample\000"
 4595      616B655F 
 4595      70686F74 
 4595      6F5F7361 
 4595      6D706C65 
 4596              	.LASF128:
 4597 02df 67736D5F 		.ascii	"gsm_state_disconnected\000"
 4597      73746174 
 4597      655F6469 
 4597      73636F6E 
 4597      6E656374 
 4598              	.LASF171:
 4599 02f6 74696D65 		.ascii	"timer_rep\000"
 4599      725F7265 
 4599      7000
ARM GAS  /tmp/ccZOHcVn.s 			page 127


 4600              	.LASF207:
 4601 0300 53797354 		.ascii	"SysTick_Config\000"
 4601      69636B5F 
 4601      436F6E66 
 4601      696700
 4602              	.LASF76:
 4603 030f 534D5052 		.ascii	"SMPR\000"
 4603      00
 4604              	.LASF90:
 4605 0314 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4605      5A45524F 
 4605      5F435552 
 4605      52454E54 
 4605      00
 4606              	.LASF182:
 4607 0325 75736172 		.ascii	"usart1_have_data\000"
 4607      74315F68 
 4607      6176655F 
 4607      64617461 
 4607      00
 4608              	.LASF82:
 4609 0336 50555044 		.ascii	"PUPDR\000"
 4609      5200
 4610              	.LASF133:
 4611 033c 7469636B 		.ascii	"ticks\000"
 4611      7300
 4612              	.LASF118:
 4613 0342 67736D5F 		.ascii	"gsm_state_verify_fully_func\000"
 4613      73746174 
 4613      655F7665 
 4613      72696679 
 4613      5F66756C 
 4614              	.LASF87:
 4615 035e 63686172 		.ascii	"char\000"
 4615      00
 4616              	.LASF130:
 4617 0363 67736D5F 		.ascii	"gsm_state_stop_wait\000"
 4617      73746174 
 4617      655F7374 
 4617      6F705F77 
 4617      61697400 
 4618              	.LASF164:
 4619 0377 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4619      45524154 
 4619      5552455F 
 4619      56616C75 
 4619      6500
 4620              	.LASF139:
 4621 0389 706F7765 		.ascii	"power_dec\000"
 4621      725F6465 
 4621      6300
 4622              	.LASF65:
 4623 0393 41495243 		.ascii	"AIRCR\000"
 4623      5200
 4624              	.LASF170:
 4625 0399 74616B65 		.ascii	"take_temp_sample\000"
 4625      5F74656D 
ARM GAS  /tmp/ccZOHcVn.s 			page 128


 4625      705F7361 
 4625      6D706C65 
 4625      00
 4626              	.LASF21:
 4627 03aa 54494D33 		.ascii	"TIM3_IRQn\000"
 4627      5F495251 
 4627      6E00
 4628              	.LASF14:
 4629 03b4 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4629      5F436861 
 4629      6E6E656C 
 4629      315F4952 
 4629      516E00
 4630              	.LASF150:
 4631 03c7 73686F77 		.ascii	"show_power\000"
 4631      5F706F77 
 4631      657200
 4632              	.LASF135:
 4633 03d2 62797465 		.ascii	"bytes_read\000"
 4633      735F7265 
 4633      616400
 4634              	.LASF98:
 4635 03dd 6D61696E 		.ascii	"main_state_t\000"
 4635      5F737461 
 4635      74655F74 
 4635      00
 4636              	.LASF24:
 4637 03ea 54494D31 		.ascii	"TIM15_IRQn\000"
 4637      355F4952 
 4637      516E00
 4638              	.LASF48:
 4639 03f5 75696E74 		.ascii	"uint8_t\000"
 4639      385F7400 
 4640              	.LASF96:
 4641 03fd 57454C43 		.ascii	"WELCOME_GSM\000"
 4641      4F4D455F 
 4641      47534D00 
 4642              	.LASF184:
 4643 0409 75736172 		.ascii	"usart2_mini_timeout\000"
 4643      74325F6D 
 4643      696E695F 
 4643      74696D65 
 4643      6F757400 
 4644              	.LASF168:
 4645 041d 74783162 		.ascii	"tx1buff\000"
 4645      75666600 
 4646              	.LASF187:
 4647 0425 75736172 		.ascii	"usart2_pckt_bytes\000"
 4647      74325F70 
 4647      636B745F 
 4647      62797465 
 4647      7300
 4648              	.LASF174:
 4649 0437 74745F72 		.ascii	"tt_relay_on_off\000"
 4649      656C6179 
 4649      5F6F6E5F 
 4649      6F666600 
ARM GAS  /tmp/ccZOHcVn.s 			page 129


 4650              	.LASF196:
 4651 0447 73656373 		.ascii	"secs\000"
 4651      00
 4652              	.LASF97:
 4653 044c 4C414D50 		.ascii	"LAMP_ON\000"
 4653      5F4F4E00 
 4654              	.LASF119:
 4655 0454 67736D5F 		.ascii	"gsm_state_wait_reg\000"
 4655      73746174 
 4655      655F7761 
 4655      69745F72 
 4655      656700
 4656              	.LASF78:
 4657 0467 4144435F 		.ascii	"ADC_TypeDef\000"
 4657      54797065 
 4657      44656600 
 4658              	.LASF45:
 4659 0473 6C6F6E67 		.ascii	"long long int\000"
 4659      206C6F6E 
 4659      6720696E 
 4659      7400
 4660              	.LASF5:
 4661 0481 57574447 		.ascii	"WWDG_IRQn\000"
 4661      5F495251 
 4661      6E00
 4662              	.LASF67:
 4663 048b 53484353 		.ascii	"SHCSR\000"
 4663      5200
 4664              	.LASF180:
 4665 0491 75736172 		.ascii	"usart1_mini_timeout\000"
 4665      74315F6D 
 4665      696E695F 
 4665      74696D65 
 4665      6F757400 
 4666              	.LASF94:
 4667 04a5 53544152 		.ascii	"START_GSM\000"
 4667      545F4753 
 4667      4D00
 4668              	.LASF175:
 4669 04af 73617665 		.ascii	"saved_mode\000"
 4669      645F6D6F 
 4669      646500
 4670              	.LASF195:
 4671 04ba 66696C74 		.ascii	"filter_timer\000"
 4671      65725F74 
 4671      696D6572 
 4671      00
 4672              	.LASF205:
 4673 04c7 70617261 		.ascii	"parameters\000"
 4673      6D657465 
 4673      727300
 4674              	.LASF172:
 4675 04d2 74696D65 		.ascii	"timer_relay\000"
 4675      725F7265 
 4675      6C617900 
 4676              	.LASF141:
 4677 04de 77685F64 		.ascii	"wh_dec\000"
ARM GAS  /tmp/ccZOHcVn.s 			page 130


 4677      656300
 4678              	.LASF88:
 4679 04e5 4D41494E 		.ascii	"MAIN_INIT\000"
 4679      5F494E49 
 4679      5400
 4680              	.LASF95:
 4681 04ef 434F4E46 		.ascii	"CONFIG_GSM\000"
 4681      49475F47 
 4681      534D00
 4682              	.LASF143:
 4683 04fa 6C617374 		.ascii	"last_power\000"
 4683      5F706F77 
 4683      657200
 4684              	.LASF149:
 4685 0505 73686F77 		.ascii	"show_power_index\000"
 4685      5F706F77 
 4685      65725F69 
 4685      6E646578 
 4685      00
 4686              	.LASF179:
 4687 0516 7A65726F 		.ascii	"zero_current\000"
 4687      5F637572 
 4687      72656E74 
 4687      00
 4688              	.LASF13:
 4689 0523 54535F49 		.ascii	"TS_IRQn\000"
 4689      52516E00 
 4690              	.LASF18:
 4691 052b 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4691      5F42524B 
 4691      5F55505F 
 4691      5452475F 
 4691      434F4D5F 
 4692              	.LASF162:
 4693 0544 74656D70 		.ascii	"tempbuff\000"
 4693      62756666 
 4693      00
 4694              	.LASF206:
 4695 054d 4E564943 		.ascii	"NVIC_SetPriority\000"
 4695      5F536574 
 4695      5072696F 
 4695      72697479 
 4695      00
 4696              	.LASF6:
 4697 055e 5056445F 		.ascii	"PVD_IRQn\000"
 4697      4952516E 
 4697      00
 4698              	.LASF74:
 4699 0567 43464752 		.ascii	"CFGR1\000"
 4699      3100
 4700              	.LASF75:
 4701 056d 43464752 		.ascii	"CFGR2\000"
 4701      3200
 4702              	.LASF58:
 4703 0573 49435052 		.ascii	"ICPR\000"
 4703      00
 4704              	.LASF17:
ARM GAS  /tmp/ccZOHcVn.s 			page 131


 4705 0578 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4705      5F434F4D 
 4705      505F4952 
 4705      516E00
 4706              	.LASF155:
 4707 0587 636F756E 		.ascii	"counters_mode\000"
 4707      74657273 
 4707      5F6D6F64 
 4707      6500
 4708              	.LASF81:
 4709 0595 4F535045 		.ascii	"OSPEEDR\000"
 4709      45445200 
 4710              	.LASF73:
 4711 059d 53797354 		.ascii	"SysTick_Type\000"
 4711      69636B5F 
 4711      54797065 
 4711      00
 4712              	.LASF86:
 4713 05aa 6C6F6E67 		.ascii	"long double\000"
 4713      20646F75 
 4713      626C6500 
 4714              	.LASF49:
 4715 05b6 75696E74 		.ascii	"uint16_t\000"
 4715      31365F74 
 4715      00
 4716              	.LASF188:
 4717 05bf 62756666 		.ascii	"buffUARTGSMrx2\000"
 4717      55415254 
 4717      47534D72 
 4717      783200
 4718              	.LASF131:
 4719 05ce 4952516E 		.ascii	"IRQn\000"
 4719      00
 4720              	.LASF190:
 4721 05d3 67736D4E 		.ascii	"gsmNUM\000"
 4721      554D00
 4722              	.LASF107:
 4723 05da 6E756D5F 		.ascii	"num_reportar\000"
 4723      7265706F 
 4723      72746172 
 4723      00
 4724              	.LASF7:
 4725 05e7 5254435F 		.ascii	"RTC_IRQn\000"
 4725      4952516E 
 4725      00
 4726              	.LASF53:
 4727 05f0 52455345 		.ascii	"RESERVED0\000"
 4727      52564544 
 4727      3000
 4728              	.LASF66:
 4729 05fa 52455345 		.ascii	"RESERVED1\000"
 4729      52564544 
 4729      3100
 4730              	.LASF57:
 4731 0604 52455345 		.ascii	"RESERVED2\000"
 4731      52564544 
 4731      3200
ARM GAS  /tmp/ccZOHcVn.s 			page 132


 4732              	.LASF59:
 4733 060e 52455345 		.ascii	"RESERVED3\000"
 4733      52564544 
 4733      3300
 4734              	.LASF60:
 4735 0618 52455345 		.ascii	"RESERVED4\000"
 4735      52564544 
 4735      3400
 4736              	.LASF38:
 4737 0622 73686F72 		.ascii	"short int\000"
 4737      7420696E 
 4737      7400
 4738              	.LASF42:
 4739 062c 6C6F6E67 		.ascii	"long int\000"
 4739      20696E74 
 4739      00
 4740              	.LASF31:
 4741 0635 55534152 		.ascii	"USART1_IRQn\000"
 4741      54315F49 
 4741      52516E00 
 4742              	.LASF112:
 4743 0641 706F745F 		.ascii	"pot_instantanea\000"
 4743      696E7374 
 4743      616E7461 
 4743      6E656100 
 4744              	.LASF117:
 4745 0651 67736D5F 		.ascii	"gsm_state_verify_at\000"
 4745      73746174 
 4745      655F7665 
 4745      72696679 
 4745      5F617400 
 4746              	.LASF0:
 4747 0665 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4747      61736B61 
 4747      626C6549 
 4747      6E745F49 
 4747      52516E00 
 4748              	.LASF132:
 4749 0679 7072696F 		.ascii	"priority\000"
 4749      72697479 
 4749      00
 4750              	.LASF19:
 4751 0682 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4751      5F43435F 
 4751      4952516E 
 4751      00
 4752              	.LASF80:
 4753 068f 4F545950 		.ascii	"OTYPER\000"
 4753      455200
 4754              	.LASF192:
 4755 0696 77616974 		.ascii	"wait_ms_var\000"
 4755      5F6D735F 
 4755      76617200 
 4756              	.LASF103:
 4757 06a2 6D656173 		.ascii	"meas_reporting0\000"
 4757      5F726570 
 4757      6F727469 
ARM GAS  /tmp/ccZOHcVn.s 			page 133


 4757      6E673000 
 4758              	.LASF26:
 4759 06b2 54494D31 		.ascii	"TIM17_IRQn\000"
 4759      375F4952 
 4759      516E00
 4760              	.LASF89:
 4761 06bd 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4761      48524F5F 
 4761      41444300 
 4762              	.LASF16:
 4763 06c9 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4763      5F436861 
 4763      6E6E656C 
 4763      345F355F 
 4763      4952516E 
 4764              	.LASF191:
 4765 06de 67736D4D 		.ascii	"gsmMSG\000"
 4765      534700
 4766              	.LASF197:
 4767 06e5 686F7572 		.ascii	"hours\000"
 4767      7300
 4768              	.LASF35:
 4769 06eb 5F5F7569 		.ascii	"__uint8_t\000"
 4769      6E74385F 
 4769      7400
 4770              	.LASF62:
 4771 06f5 4E564943 		.ascii	"NVIC_Type\000"
 4771      5F547970 
 4771      6500
 4772              	.LASF69:
 4773 06ff 5343425F 		.ascii	"SCB_Type\000"
 4773      54797065 
 4773      00
 4774              	.LASF85:
 4775 0708 4750494F 		.ascii	"GPIO_TypeDef\000"
 4775      5F547970 
 4775      65446566 
 4775      00
 4776              	.LASF101:
 4777 0715 6D656173 		.ascii	"meas_init\000"
 4777      5F696E69 
 4777      7400
 4778              	.LASF153:
 4779 071f 73656E64 		.ascii	"sended\000"
 4779      656400
 4780              	.LASF4:
 4781 0726 53797354 		.ascii	"SysTick_IRQn\000"
 4781      69636B5F 
 4781      4952516E 
 4781      00
 4782              	.LASF33:
 4783 0733 4345435F 		.ascii	"CEC_IRQn\000"
 4783      4952516E 
 4783      00
 4784              	.LASF61:
 4785 073c 73697A65 		.ascii	"sizetype\000"
 4785      74797065 
ARM GAS  /tmp/ccZOHcVn.s 			page 134


 4785      00
 4786              	.LASF64:
 4787 0745 49435352 		.ascii	"ICSR\000"
 4787      00
 4788              	.LASF28:
 4789 074a 49324332 		.ascii	"I2C2_IRQn\000"
 4789      5F495251 
 4789      6E00
 4790              	.LASF44:
 4791 0754 6C6F6E67 		.ascii	"long unsigned int\000"
 4791      20756E73 
 4791      69676E65 
 4791      6420696E 
 4791      7400
 4792              	.LASF111:
 4793 0766 6163756D 		.ascii	"acumm_diario\000"
 4793      6D5F6469 
 4793      6172696F 
 4793      00
 4794              	.LASF20:
 4795 0773 54494D32 		.ascii	"TIM2_IRQn\000"
 4795      5F495251 
 4795      6E00
 4796              	.LASF165:
 4797 077d 50524553 		.ascii	"PRESSURE_Value\000"
 4797      53555245 
 4797      5F56616C 
 4797      756500
 4798              	.LASF204:
 4799 078c 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4799      652F6D65 
 4799      642F446F 
 4799      63756D65 
 4799      6E74732F 
 4800 07bf 6100     		.ascii	"a\000"
 4801              	.LASF163:
 4802 07c1 48554D49 		.ascii	"HUMIDITY_Value\000"
 4802      44495459 
 4802      5F56616C 
 4802      756500
 4803              	.LASF50:
 4804 07d0 696E7433 		.ascii	"int32_t\000"
 4804      325F7400 
 4805              	.LASF199:
 4806 07d8 706F7765 		.ascii	"power_vect\000"
 4806      725F7665 
 4806      637400
 4807              	.LASF177:
 4808 07e3 6164635F 		.ascii	"adc_ch\000"
 4808      636800
 4809              	.LASF23:
 4810 07ea 54494D31 		.ascii	"TIM14_IRQn\000"
 4810      345F4952 
 4810      516E00
 4811              	.LASF15:
 4812 07f5 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4812      5F436861 
ARM GAS  /tmp/ccZOHcVn.s 			page 135


 4812      6E6E656C 
 4812      325F335F 
 4812      4952516E 
 4813              	.LASF154:
 4814 080a 6C616D70 		.ascii	"lamp_on_state\000"
 4814      5F6F6E5F 
 4814      73746174 
 4814      6500
 4815              	.LASF22:
 4816 0818 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4816      5F444143 
 4816      5F495251 
 4816      6E00
 4817              	.LASF37:
 4818 0826 756E7369 		.ascii	"unsigned char\000"
 4818      676E6564 
 4818      20636861 
 4818      7200
 4819              	.LASF93:
 4820 0834 4C414D50 		.ascii	"LAMP_OFF\000"
 4820      5F4F4646 
 4820      00
 4821              	.LASF43:
 4822 083d 5F5F7569 		.ascii	"__uint32_t\000"
 4822      6E743332 
 4822      5F7400
 4823              	.LASF106:
 4824 0848 6C616D70 		.ascii	"lamp_on_state_t\000"
 4824      5F6F6E5F 
 4824      73746174 
 4824      655F7400 
 4825              	.LASF127:
 4826 0858 67736D5F 		.ascii	"gsm_state_connected\000"
 4826      73746174 
 4826      655F636F 
 4826      6E6E6563 
 4826      74656400 
 4827              	.LASF136:
 4828 086c 6E656564 		.ascii	"need_ack\000"
 4828      5F61636B 
 4828      00
 4829              	.LASF120:
 4830 0875 67736D5F 		.ascii	"gsm_state_verify_reg\000"
 4830      73746174 
 4830      655F7665 
 4830      72696679 
 4830      5F726567 
 4831              	.LASF126:
 4832 088a 67736D5F 		.ascii	"gsm_state_connecting\000"
 4832      73746174 
 4832      655F636F 
 4832      6E6E6563 
 4832      74696E67 
 4833              	.LASF110:
 4834 089f 6163756D 		.ascii	"acumm_historico\000"
 4834      6D5F6869 
 4834      73746F72 
ARM GAS  /tmp/ccZOHcVn.s 			page 136


 4834      69636F00 
 4835              	.LASF176:
 4836 08af 7361635F 		.ascii	"sac_aux\000"
 4836      61757800 
 4837              	.LASF210:
 4838 08b7 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4838      6E674465 
 4838      6C61795F 
 4838      44656372 
 4838      656D656E 
 4839              	.LASF54:
 4840 08cd 49434552 		.ascii	"ICER\000"
 4840      00
 4841              	.LASF158:
 4842 08d2 6F6E655F 		.ascii	"one_to_ten\000"
 4842      746F5F74 
 4842      656E00
 4843              	.LASF30:
 4844 08dd 53504932 		.ascii	"SPI2_IRQn\000"
 4844      5F495251 
 4844      6E00
 4845              	.LASF123:
 4846 08e7 67736D5F 		.ascii	"gsm_state_sending_sms\000"
 4846      73746174 
 4846      655F7365 
 4846      6E64696E 
 4846      675F736D 
 4847              	.LASF209:
 4848 08fd 70726570 		.ascii	"prepare_json_pkt\000"
 4848      6172655F 
 4848      6A736F6E 
 4848      5F706B74 
 4848      00
 4849              	.LASF142:
 4850 090e 706F7765 		.ascii	"power\000"
 4850      7200
 4851              	.LASF124:
 4852 0914 67736D5F 		.ascii	"gsm_state_command_answer\000"
 4852      73746174 
 4852      655F636F 
 4852      6D6D616E 
 4852      645F616E 
 4853              	.LASF115:
 4854 092d 70617261 		.ascii	"parameters_typedef\000"
 4854      6D657465 
 4854      72735F74 
 4854      79706564 
 4854      656600
 4855              	.LASF36:
 4856 0940 7369676E 		.ascii	"signed char\000"
 4856      65642063 
 4856      68617200 
 4857              	.LASF203:
 4858 094c 7372632F 		.ascii	"src/main.c\000"
 4858      6D61696E 
 4858      2E6300
 4859              	.LASF138:
ARM GAS  /tmp/ccZOHcVn.s 			page 137


 4860 0957 706F7765 		.ascii	"power_int\000"
 4860      725F696E 
 4860      7400
 4861              	.LASF40:
 4862 0961 73686F72 		.ascii	"short unsigned int\000"
 4862      7420756E 
 4862      7369676E 
 4862      65642069 
 4862      6E7400
 4863              	.LASF202:
 4864 0974 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4864      43313120 
 4864      352E322E 
 4864      31203230 
 4864      31353132 
 4865 09a7 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4865      20726576 
 4865      6973696F 
 4865      6E203233 
 4865      31383438 
 4866 09da 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4866      662D3220 
 4866      2D4F3020 
 4866      2D666F6D 
 4866      69742D66 
 4867 0a0d 66756E63 		.ascii	"function-sections\000"
 4867      74696F6E 
 4867      2D736563 
 4867      74696F6E 
 4867      7300
 4868              	.LASF208:
 4869 0a1f 6D61696E 		.ascii	"main\000"
 4869      00
 4870              	.LASF1:
 4871 0a24 48617264 		.ascii	"HardFault_IRQn\000"
 4871      4661756C 
 4871      745F4952 
 4871      516E00
 4872              	.LASF147:
 4873 0a33 6163756D 		.ascii	"acum_secs\000"
 4873      5F736563 
 4873      7300
 4874              	.LASF56:
 4875 0a3d 49535052 		.ascii	"ISPR\000"
 4875      00
 4876              	.LASF137:
 4877 0a42 72657370 		.ascii	"resp\000"
 4877      00
 4878              	.LASF109:
 4879 0a47 6E756D5F 		.ascii	"num_propio\000"
 4879      70726F70 
 4879      696F00
 4880              	.LASF178:
 4881 0a52 7365715F 		.ascii	"seq_ready\000"
 4881      72656164 
 4881      7900
 4882              	.LASF200:
ARM GAS  /tmp/ccZOHcVn.s 			page 138


 4883 0a5c 7674656D 		.ascii	"vtemp\000"
 4883      7000
 4884              	.LASF114:
 4885 0a62 73656E64 		.ascii	"send_energy_flag\000"
 4885      5F656E65 
 4885      7267795F 
 4885      666C6167 
 4885      00
 4886              	.LASF102:
 4887 0a73 6D656173 		.ascii	"meas_meas\000"
 4887      5F6D6561 
 4887      7300
 4888              	.LASF193:
 4889 0a7d 74696D65 		.ascii	"timer_standby\000"
 4889      725F7374 
 4889      616E6462 
 4889      7900
 4890              	.LASF134:
 4891 0a8b 62797465 		.ascii	"bytes_remain\000"
 4891      735F7265 
 4891      6D61696E 
 4891      00
 4892              	.LASF84:
 4893 0a98 4C434B52 		.ascii	"LCKR\000"
 4893      00
 4894              	.LASF70:
 4895 0a9d 4354524C 		.ascii	"CTRL\000"
 4895      00
 4896              	.LASF152:
 4897 0aa2 7265706F 		.ascii	"reportar_SMS\000"
 4897      72746172 
 4897      5F534D53 
 4897      00
 4898              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccZOHcVn.s 			page 139


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccZOHcVn.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccZOHcVn.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccZOHcVn.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccZOHcVn.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccZOHcVn.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccZOHcVn.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/ccZOHcVn.s:277    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccZOHcVn.s:274    .bss.take_temp_sample:00000000 $d
     /tmp/ccZOHcVn.s:284    .bss.timer_rep:00000000 timer_rep
     /tmp/ccZOHcVn.s:281    .bss.timer_rep:00000000 $d
     /tmp/ccZOHcVn.s:291    .bss.timer_relay:00000000 timer_relay
     /tmp/ccZOHcVn.s:288    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000006 adc_ch
     /tmp/ccZOHcVn.s:305    .bss.seq_ready:00000000 seq_ready
     /tmp/ccZOHcVn.s:306    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:00000054 param_struct
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/ccZOHcVn.s:324    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccZOHcVn.s:321    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/ccZOHcVn.s:334    .bss.secs:00000000 secs
     /tmp/ccZOHcVn.s:331    .bss.secs:00000000 $d
     /tmp/ccZOHcVn.s:340    .bss.hours:00000000 hours
     /tmp/ccZOHcVn.s:341    .bss.hours:00000000 $d
     /tmp/ccZOHcVn.s:346    .bss.minutes:00000000 minutes
     /tmp/ccZOHcVn.s:347    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccZOHcVn.s:352    .rodata:00000000 $d
     /tmp/ccZOHcVn.s:413    .text.main:00000000 $t
     /tmp/ccZOHcVn.s:418    .text.main:00000000 main
ARM GAS  /tmp/ccZOHcVn.s 			page 140


     /tmp/ccZOHcVn.s:742    .rodata.main:00000000 $d
     /tmp/ccZOHcVn.s:1017   .text.main:000003a8 $d
     /tmp/ccZOHcVn.s:1043   .text.main:00000408 $t
     /tmp/ccZOHcVn.s:1581   .text.main:000007a0 $d
     /tmp/ccZOHcVn.s:1600   .text.main:000007e4 $t
     /tmp/ccZOHcVn.s:1648   .text.main:00000820 $d
     /tmp/ccZOHcVn.s:1669   .text.prepare_json_pkt:00000000 $t
     /tmp/ccZOHcVn.s:1674   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccZOHcVn.s:1766   .text.prepare_json_pkt:0000009c $d
     /tmp/ccZOHcVn.s:1775   .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccZOHcVn.s:1780   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccZOHcVn.s:1981   .text.TimingDelay_Decrement:00000130 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2uiz
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_uidiv
__aeabi_ui2d
GPIO_Config
strncpy
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
FuncsGSMStateAsk
FuncsGSMCommandAnswer
strlen
strcat
memcpy
FuncsGSMSendSMS
GetPhoto
RelayOn
GetHysteresis
RelayOff
GetNew1to10
sprintf
GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
UpdateVGrid
UpdateIGrid
UpdateRelay
ARM GAS  /tmp/ccZOHcVn.s 			page 141


UpdatePhotoTransistor
FuncsGSM
GSMTimeoutCounters
