ARM GAS  /tmp/ccqMBOyg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccqMBOyg.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccqMBOyg.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccqMBOyg.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccqMBOyg.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccqMBOyg.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccqMBOyg.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccqMBOyg.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccqMBOyg.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccqMBOyg.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccqMBOyg.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccqMBOyg.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccqMBOyg.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccqMBOyg.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccqMBOyg.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccqMBOyg.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccqMBOyg.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccqMBOyg.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.6941,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.6942, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.6943, D.6942
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.6943, D.6943
  92 0026 083B     		subs	r3, r3, #8	@ D.6943,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.6943, D.6943,
  94 002a 2E4A     		ldr	r2, .L5	@ D.6941,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.6942, IRQn
  98 0032 1800     		movs	r0, r3	@ D.6943, D.6942
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.6943, D.6943
 101 0038 083B     		subs	r3, r3, #8	@ D.6943,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.6943, D.6943,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.6941, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.6943, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.6942, IRQn
 111 004c 1000     		movs	r0, r2	@ D.6943, D.6942
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.6943, D.6943
 114 0052 D200     		lsls	r2, r2, #3	@ D.6943, D.6943,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.6944, D.6944, D.6943
 117 0058 0200     		movs	r2, r0	@ D.6944, D.6944
 118 005a D243     		mvns	r2, r2	@ D.6944, D.6944
 119 005c 1A40     		ands	r2, r3	@ D.6943, D.6943
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.6943, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.6943, D.6943
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.6942, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.6943, D.6942
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.6943, D.6943
ARM GAS  /tmp/ccqMBOyg.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.6943, D.6943,
 132 0074 9840     		lsls	r0, r0, r3	@ D.6943, D.6943, D.6943
 133 0076 0300     		movs	r3, r0	@ D.6943, D.6943
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.6943, D.6943
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.6943,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.6941, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.6943, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.6945,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.6943, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.6943, D.6943
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.6943, D.6943,
 151 0092 1549     		ldr	r1, .L5+4	@ D.6945,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.6943, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.6943, D.6943
 156 009c 9208     		lsrs	r2, r2, #2	@ D.6943, D.6943,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.6943, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.6942, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.6943, D.6942
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.6943, D.6943
 166 00b0 C900     		lsls	r1, r1, #3	@ D.6943, D.6943,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.6944, D.6944, D.6943
 169 00b6 0100     		movs	r1, r0	@ D.6944, D.6944
 170 00b8 C943     		mvns	r1, r1	@ D.6944, D.6944
 171 00ba 1140     		ands	r1, r2	@ D.6943, D.6943
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.6943, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.6943, D.6943
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.6942, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.6943, D.6942
ARM GAS  /tmp/ccqMBOyg.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.6943, D.6943
 183 00d0 D200     		lsls	r2, r2, #3	@ D.6943, D.6943,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.6943, D.6943, D.6943
 185 00d4 0200     		movs	r2, r0	@ D.6943, D.6943
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.6943, D.6943
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.6943, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccqMBOyg.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.6946,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.6947,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.6948, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.6948,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.6948, _6->LOAD
ARM GAS  /tmp/ccqMBOyg.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.6947,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.6947,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.6946,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	show_select_timer
 273              		.section	.bss.show_select_timer,"aw",%nobits
 274              		.align	1
 275              		.type	show_select_timer, %object
 276              		.size	show_select_timer, 2
 277              	show_select_timer:
 278 0000 0000     		.space	2
 279              		.global	switches_timer
 280              		.section	.bss.switches_timer,"aw",%nobits
 281              		.type	switches_timer, %object
 282              		.size	switches_timer, 1
 283              	switches_timer:
 284 0000 00       		.space	1
 285              		.global	acswitch_timer
 286              		.section	.bss.acswitch_timer,"aw",%nobits
 287              		.type	acswitch_timer, %object
ARM GAS  /tmp/ccqMBOyg.s 			page 23


 288              		.size	acswitch_timer, 1
 289              	acswitch_timer:
 290 0000 00       		.space	1
 291              		.global	scroll1_timer
 292              		.section	.bss.scroll1_timer,"aw",%nobits
 293              		.align	1
 294              		.type	scroll1_timer, %object
 295              		.size	scroll1_timer, 2
 296              	scroll1_timer:
 297 0000 0000     		.space	2
 298              		.global	scroll2_timer
 299              		.section	.bss.scroll2_timer,"aw",%nobits
 300              		.align	1
 301              		.type	scroll2_timer, %object
 302              		.size	scroll2_timer, 2
 303              	scroll2_timer:
 304 0000 0000     		.space	2
 305              		.comm	standalone_timer,2,2
 306              		.comm	standalone_enable_menu_timer,2,2
 307              		.comm	grouped_master_timeout_timer,1,1
 308              		.global	take_temp_sample
 309              		.section	.bss.take_temp_sample,"aw",%nobits
 310              		.align	1
 311              		.type	take_temp_sample, %object
 312              		.size	take_temp_sample, 2
 313              	take_temp_sample:
 314 0000 0000     		.space	2
 315              		.global	timer_wifi_bright
 316              		.section	.bss.timer_wifi_bright,"aw",%nobits
 317              		.type	timer_wifi_bright, %object
 318              		.size	timer_wifi_bright, 1
 319              	timer_wifi_bright:
 320 0000 00       		.space	1
 321              		.global	timer_relay
 322              		.section	.bss.timer_relay,"aw",%nobits
 323              		.align	1
 324              		.type	timer_relay, %object
 325              		.size	timer_relay, 2
 326              	timer_relay:
 327 0000 0000     		.space	2
 328              		.comm	tt_take_photo_sample,2,2
 329              		.comm	tt_relay_on_off,2,2
 330              		.comm	saved_mode,1,1
 331              		.comm	s1,2,2
 332              		.comm	s2,2,2
 333              		.comm	sac,2,2
 334              		.comm	sac_aux,1,1
 335              		.comm	adc_ch,6,4
 336              		.global	seq_ready
 337              		.section	.bss.seq_ready,"aw",%nobits
 338              		.type	seq_ready, %object
 339              		.size	seq_ready, 1
 340              	seq_ready:
 341 0000 00       		.space	1
 342              		.comm	zero_current,2,2
 343              		.comm	usart1_mini_timeout,1,1
 344              		.comm	usart1_pckt_ready,1,1
ARM GAS  /tmp/ccqMBOyg.s 			page 24


 345              		.comm	usart1_have_data,1,1
 346              		.comm	usart1_pckt_bytes,1,1
 347              		.comm	param_struct,12,4
 348              		.global	wait_ms_var
 349              		.section	.bss.wait_ms_var,"aw",%nobits
 350              		.align	1
 351              		.type	wait_ms_var, %object
 352              		.size	wait_ms_var, 2
 353              	wait_ms_var:
 354 0000 0000     		.space	2
 355              		.comm	timer_standby,2,2
 356              		.comm	tcp_kalive_timer,2,2
 357              		.comm	filter_timer,1,1
 358              		.global	secs
 359              		.section	.bss.secs,"aw",%nobits
 360              		.align	1
 361              		.type	secs, %object
 362              		.size	secs, 2
 363              	secs:
 364 0000 0000     		.space	2
 365              		.global	hours
 366              		.section	.bss.hours,"aw",%nobits
 367              		.type	hours, %object
 368              		.size	hours, 1
 369              	hours:
 370 0000 00       		.space	1
 371              		.global	minutes
 372              		.section	.bss.minutes,"aw",%nobits
 373              		.type	minutes, %object
 374              		.size	minutes, 1
 375              	minutes:
 376 0000 00       		.space	1
 377              		.comm	power_vect,20,4
 378              		.comm	vtemp,34,4
 379              		.comm	vpote,34,4
 380              		.section	.rodata
 381              		.align	2
 382              	.LC0:
 383 0000 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 383      726E6F20 
 383      506C6163 
 383      61205265 
 383      646F6E64 
 384 0025 000000   		.align	2
 385              	.LC2:
 386 0028 20204665 		.ascii	"  Features:\015\012\000"
 386      61747572 
 386      65733A0D 
 386      0A00
 387 0036 0000     		.align	2
 388              	.LC4:
 389 0038 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 389      6D6D6572 
 389      20312074 
 389      6F203130 
 389      560D0A00 
 390              		.align	2
ARM GAS  /tmp/ccqMBOyg.s 			page 25


 391              	.LC6:
 392 004c 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 392      67687420 
 392      48797374 
 392      65726573 
 392      69730D0A 
 393 0061 000000   		.align	2
 394              	.LC8:
 395 0064 20205379 		.ascii	"  Sync by ADC\015\012\000"
 395      6E632062 
 395      79204144 
 395      430D0A00 
 396              		.align	2
 397              	.LC13:
 398 0074 47657474 		.ascii	"Getted\015\012\000"
 398      65640D0A 
 398      00
 399 007d 000000   		.align	2
 400              	.LC15:
 401 0080 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 401      696E6720 
 401      47534D20 
 401      53746172 
 401      74757020 
 402              		.global	__aeabi_ui2f
 403              		.global	__aeabi_i2d
 404              		.global	__aeabi_dmul
 405              		.global	__aeabi_d2f
 406              		.global	__aeabi_f2uiz
 407              		.global	__aeabi_i2f
 408              		.global	__aeabi_fsub
 409              		.global	__aeabi_fmul
 410 00a7 00       		.align	2
 411              	.LC20:
 412 00a8 703A2025 		.ascii	"p: %3d.%02d d: %d\015\012\000"
 412      33642E25 
 412      30326420 
 412      643A2025 
 412      640D0A00 
 413              		.section	.text.main,"ax",%progbits
 414              		.align	2
 415              		.global	main
 416              		.code	16
 417              		.thumb_func
 418              		.type	main, %function
 419              	main:
 420              	.LFB20:
 421              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
ARM GAS  /tmp/ccqMBOyg.s 			page 26


  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #endif
  53:src/main.c    **** 
  54:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  55:src/main.c    **** 
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
ARM GAS  /tmp/ccqMBOyg.s 			page 27


  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** //volatile unsigned short prog_timer = 0;
  72:src/main.c    **** //volatile unsigned short mainmenu_timer = 0;
  73:src/main.c    **** volatile unsigned short show_select_timer = 0;
  74:src/main.c    **** volatile unsigned char switches_timer = 0;
  75:src/main.c    **** volatile unsigned char acswitch_timer = 0;
  76:src/main.c    **** 
  77:src/main.c    **** volatile unsigned short scroll1_timer = 0;
  78:src/main.c    **** volatile unsigned short scroll2_timer = 0;
  79:src/main.c    **** 
  80:src/main.c    **** volatile unsigned short standalone_timer;
  81:src/main.c    **** volatile unsigned short standalone_enable_menu_timer;
  82:src/main.c    **** //volatile unsigned short standalone_menu_timer;
  83:src/main.c    **** volatile unsigned char grouped_master_timeout_timer;
  84:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  85:src/main.c    **** volatile unsigned char timer_wifi_bright = 0;
  86:src/main.c    **** 
  87:src/main.c    **** #ifdef USE_REDONDA_BASIC
  88:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  89:src/main.c    **** 
  90:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  91:src/main.c    **** volatile unsigned short tt_relay_on_off;
  92:src/main.c    **** #endif
  93:src/main.c    **** 
  94:src/main.c    **** 
  95:src/main.c    **** unsigned char saved_mode;
  96:src/main.c    **** 
  97:src/main.c    **** 
  98:src/main.c    **** // ------- Externals de los switches -------
  99:src/main.c    **** unsigned short s1;
 100:src/main.c    **** unsigned short s2;
 101:src/main.c    **** unsigned short sac;
 102:src/main.c    **** unsigned char sac_aux;
 103:src/main.c    **** 
 104:src/main.c    **** // ------- Externals de los switches -------
 105:src/main.c    **** #ifdef ADC_WITH_INT
 106:src/main.c    **** volatile unsigned short adc_ch[3];
 107:src/main.c    **** volatile unsigned char seq_ready = 0;
 108:src/main.c    **** unsigned short zero_current;
 109:src/main.c    **** #endif
 110:src/main.c    **** 
 111:src/main.c    **** // ------- Externals del GPS & GSM -------
 112:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 113:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 114:src/main.c    **** volatile unsigned char usart1_have_data;
 115:src/main.c    **** unsigned char usart1_pckt_bytes;
 116:src/main.c    **** 
 117:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 118:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 119:src/main.c    **** #define gps_have_data		usart1_have_data
 120:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 121:src/main.c    **** 
 122:src/main.c    **** #ifdef USE_GPS
 123:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
ARM GAS  /tmp/ccqMBOyg.s 			page 28


 124:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 125:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 126:src/main.c    **** volatile unsigned char usart2_have_data;
 127:src/main.c    **** unsigned char usart2_pckt_bytes;
 128:src/main.c    **** 
 129:src/main.c    **** #endif
 130:src/main.c    **** 
 131:src/main.c    **** // ------- Externals del GSM -------
 132:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 133:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 134:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 135:src/main.c    **** #define gsm_have_data		usart1_have_data
 136:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 137:src/main.c    **** 
 138:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 139:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 140:src/main.c    **** volatile unsigned char usart2_have_data;
 141:src/main.c    **** unsigned char usart2_pckt_bytes;
 142:src/main.c    **** 
 143:src/main.c    **** //unsigned char AlertasReportar[5] = {0,0,0,0,0};
 144:src/main.c    **** //unsigned char ActDact = 0;
 145:src/main.c    **** //unsigned char claveAct[5] = {0,0,0,0,0};
 146:src/main.c    **** //volatile char USERCODE[8] = "123456";
 147:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 148:src/main.c    **** #endif
 149:src/main.c    **** 
 150:src/main.c    **** //--- VARIABLES GLOBALES ---//
 151:src/main.c    **** parameters_typedef param_struct;
 152:src/main.c    **** 
 153:src/main.c    **** // ------- de los timers -------
 154:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 155:src/main.c    **** volatile unsigned short timer_standby;
 156:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 157:src/main.c    **** //volatile unsigned char display_timer;
 158:src/main.c    **** volatile unsigned char filter_timer;
 159:src/main.c    **** 
 160:src/main.c    **** //volatile unsigned char door_filter;
 161:src/main.c    **** //volatile unsigned char take_sample;
 162:src/main.c    **** //volatile unsigned char move_relay;
 163:src/main.c    **** volatile unsigned short secs = 0;
 164:src/main.c    **** volatile unsigned char hours = 0;
 165:src/main.c    **** volatile unsigned char minutes = 0;
 166:src/main.c    **** 
 167:src/main.c    **** #define SIZEOF_POWER_VECT		10
 168:src/main.c    **** 
 169:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 170:src/main.c    **** 
 171:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 172:src/main.c    **** void TimingDelay_Decrement(void);
 173:src/main.c    **** 
 174:src/main.c    **** // ------- del DMX -------
 175:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 176:src/main.c    **** #define DMX_TIMEOUT	20
 177:src/main.c    **** 
 178:src/main.c    **** //--- FILTROS DE SENSORES ---//
 179:src/main.c    **** #define LARGO_FILTRO 16
 180:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
ARM GAS  /tmp/ccqMBOyg.s 			page 29


 181:src/main.c    **** //#define LARGO_FILTRO 32
 182:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 183:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 184:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 185:src/main.c    **** 
 186:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 187:src/main.c    **** 
 188:src/main.c    **** // #define KW			0.009721
 189:src/main.c    **** // #define KW			0.00945
 190:src/main.c    **** // #define KW			0.00959
 191:src/main.c    **** #define KW			0.01013
 192:src/main.c    **** 
 193:src/main.c    **** 
 194:src/main.c    **** //-------------------------------------------//
 195:src/main.c    **** // @brief  Main program.
 196:src/main.c    **** // @param  None
 197:src/main.c    **** // @retval None
 198:src/main.c    **** //------------------------------------------//
 199:src/main.c    **** int main(void)
 200:src/main.c    **** {
 422              		.loc 2 200 0
 423              		.cfi_startproc
 424 0000 30B5     		push	{r4, r5, lr}	@
 425              	.LCFI4:
 426              		.cfi_def_cfa_offset 12
 427              		.cfi_offset 4, -12
 428              		.cfi_offset 5, -8
 429              		.cfi_offset 14, -4
 430 0002 91B0     		sub	sp, sp, #68	@,,
 431              	.LCFI5:
 432              		.cfi_def_cfa_offset 80
 201:src/main.c    **** 	unsigned char i, ii;
 202:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 433              		.loc 2 202 0
 434 0004 3623     		movs	r3, #54	@ tmp157,
 435 0006 6B44     		add	r3, r3, sp	@ tmp157,
 436 0008 0022     		movs	r2, #0	@ tmp158,
 437 000a 1A70     		strb	r2, [r3]	@ tmp159, need_ack
 203:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 438              		.loc 2 203 0
 439 000c 3523     		movs	r3, #53	@ tmp160,
 440 000e 6B44     		add	r3, r3, sp	@ tmp160,
 441 0010 0022     		movs	r2, #0	@ tmp161,
 442 0012 1A70     		strb	r2, [r3]	@ tmp162, resp
 204:src/main.c    **** 	unsigned short power_int, power_dec;
 205:src/main.c    **** 	unsigned short power;
 206:src/main.c    **** 	float fcalc = 1.0;
 443              		.loc 2 206 0
 444 0014 FE23     		movs	r3, #254	@ tmp163,
 445 0016 9B05     		lsls	r3, r3, #22	@ tmp163, tmp163,
 446 0018 0C93     		str	r3, [sp, #48]	@ tmp163, fcalc
 207:src/main.c    **** 	unsigned int zero_current_loc = 0;
 447              		.loc 2 207 0
 448 001a 0023     		movs	r3, #0	@ tmp164,
 449 001c 0E93     		str	r3, [sp, #56]	@ tmp164, zero_current_loc
 208:src/main.c    **** 
 209:src/main.c    **** #ifdef USE_REDONDA_BASIC
ARM GAS  /tmp/ccqMBOyg.s 			page 30


 210:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 450              		.loc 2 210 0
 451 001e 3723     		movs	r3, #55	@ tmp165,
 452 0020 6B44     		add	r3, r3, sp	@ tmp165,
 453 0022 0022     		movs	r2, #0	@ tmp166,
 454 0024 1A70     		strb	r2, [r3]	@ tmp167, main_state
 211:src/main.c    **** #ifdef WITH_HYST
 212:src/main.c    **** 	unsigned short hyst;
 213:src/main.c    **** #endif
 214:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 215:src/main.c    **** 	unsigned char one_to_ten;
 216:src/main.c    **** #endif
 217:src/main.c    **** 
 218:src/main.c    **** #else		//USE_REDONDA_BASIC
 219:src/main.c    **** 	unsigned char main_state = 0;
 220:src/main.c    **** #endif
 221:src/main.c    **** 	char s_lcd [20];
 222:src/main.c    **** 	enum TcpMessages tcp_msg = NONE_MSG;
 455              		.loc 2 222 0
 456 0026 2F23     		movs	r3, #47	@ tmp168,
 457 0028 6B44     		add	r3, r3, sp	@ tmp168,
 458 002a 0022     		movs	r2, #0	@ tmp169,
 459 002c 1A70     		strb	r2, [r3]	@ tmp170, tcp_msg
 223:src/main.c    **** 	unsigned char new_room = 0;
 460              		.loc 2 223 0
 461 002e 2E23     		movs	r3, #46	@ tmp171,
 462 0030 6B44     		add	r3, r3, sp	@ tmp171,
 463 0032 0022     		movs	r2, #0	@ tmp172,
 464 0034 1A70     		strb	r2, [r3]	@ tmp173, new_room
 224:src/main.c    **** 	unsigned char new_lamp = 0;
 465              		.loc 2 224 0
 466 0036 2D23     		movs	r3, #45	@ tmp174,
 467 0038 6B44     		add	r3, r3, sp	@ tmp174,
 468 003a 0022     		movs	r2, #0	@ tmp175,
 469 003c 1A70     		strb	r2, [r3]	@ tmp176, new_lamp
 225:src/main.c    **** 	unsigned char last_bright = 0;
 470              		.loc 2 225 0
 471 003e 0BAB     		add	r3, sp, #44	@ tmp177,,
 472 0040 0022     		movs	r2, #0	@ tmp178,
 473 0042 1A70     		strb	r2, [r3]	@ tmp179, last_bright
 226:src/main.c    **** 	unsigned char show_ldr = 0;
 474              		.loc 2 226 0
 475 0044 2B23     		movs	r3, #43	@ tmp180,
 476 0046 6B44     		add	r3, r3, sp	@ tmp180,
 477 0048 0022     		movs	r2, #0	@ tmp181,
 478 004a 1A70     		strb	r2, [r3]	@ tmp182, show_ldr
 227:src/main.c    **** 	int dummy_resp = 0;
 479              		.loc 2 227 0
 480 004c 0023     		movs	r3, #0	@ tmp183,
 481 004e 0993     		str	r3, [sp, #36]	@ tmp183, dummy_resp
 228:src/main.c    **** 	unsigned char pps_one = 0;
 482              		.loc 2 228 0
 483 0050 2323     		movs	r3, #35	@ tmp184,
 484 0052 6B44     		add	r3, r3, sp	@ tmp184,
 485 0054 0022     		movs	r2, #0	@ tmp185,
 486 0056 1A70     		strb	r2, [r3]	@ tmp186, pps_one
 229:src/main.c    **** 
ARM GAS  /tmp/ccqMBOyg.s 			page 31


 230:src/main.c    **** #ifdef USE_PROD_PROGRAM
 231:src/main.c    **** 	unsigned char jump_the_menu = 0;
 232:src/main.c    **** #endif
 233:src/main.c    **** 	parameters_typedef * p_mem_init;
 234:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 235:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 236:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 237:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 238:src/main.c    ****     //   system_stm32f0xx.c file
 239:src/main.c    **** 
 240:src/main.c    **** 	//GPIO Configuration.
 241:src/main.c    **** 	GPIO_Config();
 487              		.loc 2 241 0
 488 0058 FFF7FEFF 		bl	GPIO_Config	@
 242:src/main.c    **** 
 243:src/main.c    **** 
 244:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 245:src/main.c    **** 	if (SysTick_Config(48000))
 489              		.loc 2 245 0
 490 005c CB4B     		ldr	r3, .L44	@ tmp187,
 491 005e 1800     		movs	r0, r3	@, tmp187
 492 0060 FFF7FEFF 		bl	SysTick_Config	@
 493 0064 031E     		subs	r3, r0, #0	@ D.6949,,
 494 0066 28D0     		beq	.L13	@,
 495              	.L18:
 246:src/main.c    **** 	{
 247:src/main.c    **** 		while (1)	/* Capture error */
 248:src/main.c    **** 		{
 249:src/main.c    **** 			if (LED)
 496              		.loc 2 249 0
 497 0068 9023     		movs	r3, #144	@ tmp364,
 498 006a DB05     		lsls	r3, r3, #23	@ D.6950, tmp364,
 499 006c 9B8A     		ldrh	r3, [r3, #20]	@ tmp189,
 500 006e 9BB2     		uxth	r3, r3	@ D.6951, tmp189
 501 0070 1A00     		movs	r2, r3	@ D.6952, D.6951
 502 0072 8023     		movs	r3, #128	@ tmp365,
 503 0074 5B01     		lsls	r3, r3, #5	@ tmp190, tmp365,
 504 0076 1340     		ands	r3, r2	@ D.6952, D.6952
 505 0078 05D0     		beq	.L14	@,
 250:src/main.c    **** 				LED_OFF;
 506              		.loc 2 250 0
 507 007a 9023     		movs	r3, #144	@ tmp362,
 508 007c DB05     		lsls	r3, r3, #23	@ D.6950, tmp362,
 509 007e 8022     		movs	r2, #128	@ tmp363,
 510 0080 5205     		lsls	r2, r2, #21	@ tmp191, tmp363,
 511 0082 9A61     		str	r2, [r3, #24]	@ tmp191, _51->BSRR
 512 0084 04E0     		b	.L15	@
 513              	.L14:
 251:src/main.c    **** 			else
 252:src/main.c    **** 				LED_ON;
 514              		.loc 2 252 0
 515 0086 9023     		movs	r3, #144	@ tmp360,
 516 0088 DB05     		lsls	r3, r3, #23	@ D.6950, tmp360,
 517 008a 8022     		movs	r2, #128	@ tmp361,
 518 008c 5201     		lsls	r2, r2, #5	@ tmp192, tmp361,
 519 008e 9A61     		str	r2, [r3, #24]	@ tmp192, _53->BSRR
 520              	.L15:
ARM GAS  /tmp/ccqMBOyg.s 			page 32


 253:src/main.c    **** 
 254:src/main.c    **** 			for (i = 0; i < 255; i++)
 521              		.loc 2 254 0
 522 0090 3F23     		movs	r3, #63	@ tmp193,
 523 0092 6B44     		add	r3, r3, sp	@ tmp193,
 524 0094 0022     		movs	r2, #0	@ tmp194,
 525 0096 1A70     		strb	r2, [r3]	@ tmp195, i
 526 0098 09E0     		b	.L16	@
 527              	.L17:
 255:src/main.c    **** 			{
 256:src/main.c    **** 				asm (	"nop \n\t"
 528              		.loc 2 256 0 discriminator 3
 529              		.syntax divided
 530              	@ 256 "src/main.c" 1
 531 009a C046     		nop 
 532 009c C046     		nop 
 533 009e C046     		nop 
 534              		
 535              	@ 0 "" 2
 254:src/main.c    **** 			{
 536              		.loc 2 254 0 discriminator 3
 537              		.thumb
 538              		.syntax unified
 539 00a0 3F23     		movs	r3, #63	@ tmp196,
 540 00a2 6B44     		add	r3, r3, sp	@ tmp196,
 541 00a4 1A78     		ldrb	r2, [r3]	@ D.6953, i
 542 00a6 3F23     		movs	r3, #63	@ tmp197,
 543 00a8 6B44     		add	r3, r3, sp	@ tmp197,
 544 00aa 0132     		adds	r2, r2, #1	@ tmp198,
 545 00ac 1A70     		strb	r2, [r3]	@ tmp199, i
 546              	.L16:
 254:src/main.c    **** 			{
 547              		.loc 2 254 0 is_stmt 0 discriminator 1
 548 00ae 3F23     		movs	r3, #63	@ tmp200,
 549 00b0 6B44     		add	r3, r3, sp	@ tmp200,
 550 00b2 1B78     		ldrb	r3, [r3]	@ tmp201, i
 551 00b4 FF2B     		cmp	r3, #255	@ tmp201,
 552 00b6 F0D1     		bne	.L17	@,
 257:src/main.c    **** 						"nop \n\t"
 258:src/main.c    **** 						"nop \n\t" );
 259:src/main.c    **** 			}
 260:src/main.c    **** 		}
 553              		.loc 2 260 0 is_stmt 1
 554 00b8 D6E7     		b	.L18	@
 555              	.L13:
 261:src/main.c    **** 	}
 262:src/main.c    **** 
 263:src/main.c    **** 
 264:src/main.c    **** 	//ADC Configuration
 265:src/main.c    **** //	AdcConfig();
 266:src/main.c    **** 
 267:src/main.c    **** 	//TIM Configuration.
 268:src/main.c    **** 	// TIM_3_Init();
 269:src/main.c    **** //	TIM_14_Init();
 270:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 271:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 272:src/main.c    **** 
ARM GAS  /tmp/ccqMBOyg.s 			page 33


 273:src/main.c    **** //	EXTIOff ();
 274:src/main.c    **** 
 275:src/main.c    **** 	// while (1)
 276:src/main.c    **** 	// {
 277:src/main.c    **** 	// 	// if (SYNCP)
 278:src/main.c    **** 	// 	// {
 279:src/main.c    **** 	// 	// 	SYNCP_OFF;
 280:src/main.c    **** 	// 	// 	LED_OFF;
 281:src/main.c    **** 	// 	// }
 282:src/main.c    **** 	// 	// else
 283:src/main.c    **** 	// 	// {
 284:src/main.c    **** 	// 	// 	SYNCP_ON;
 285:src/main.c    **** 	// 	// 	LED_ON;
 286:src/main.c    **** 	// 	// }
 287:src/main.c    **** 	// 	// Wait_ms(10);
 288:src/main.c    **** 	//
 289:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 290:src/main.c    **** 	// 	// {
 291:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 292:src/main.c    **** 	// 	// 	Wait_ms (10);
 293:src/main.c    **** 	// 	// }
 294:src/main.c    **** 	// }
 295:src/main.c    **** 
 296:src/main.c    **** //		while (1)
 297:src/main.c    **** //		{
 298:src/main.c    **** //			PIN3_OFF;
 299:src/main.c    **** //			Wait_ms (10);
 300:src/main.c    **** //			PIN3_ON;
 301:src/main.c    **** //			Wait_ms (10);
 302:src/main.c    **** //		}
 303:src/main.c    **** 
 304:src/main.c    **** 	//--- Welcome code ---//
 305:src/main.c    **** 	LED_OFF;
 556              		.loc 2 305 0
 557 00ba 9023     		movs	r3, #144	@ tmp354,
 558 00bc DB05     		lsls	r3, r3, #23	@ D.6950, tmp354,
 559 00be 8022     		movs	r2, #128	@ tmp355,
 560 00c0 5205     		lsls	r2, r2, #21	@ tmp202, tmp355,
 561 00c2 9A61     		str	r2, [r3, #24]	@ tmp202, _58->BSRR
 306:src/main.c    **** //	EN_GPS_OFF;
 307:src/main.c    **** 	EN_GPS_ON;
 562              		.loc 2 307 0
 563 00c4 9023     		movs	r3, #144	@ tmp356,
 564 00c6 DB05     		lsls	r3, r3, #23	@ D.6950, tmp356,
 565 00c8 8022     		movs	r2, #128	@ tmp357,
 566 00ca 1202     		lsls	r2, r2, #8	@ tmp203, tmp357,
 567 00cc 9A61     		str	r2, [r3, #24]	@ tmp203, _60->BSRR
 308:src/main.c    **** 	//RELAY_ON;
 309:src/main.c    **** 	RELAY_OFF;
 568              		.loc 2 309 0
 569 00ce 9023     		movs	r3, #144	@ tmp358,
 570 00d0 DB05     		lsls	r3, r3, #23	@ D.6950, tmp358,
 571 00d2 8022     		movs	r2, #128	@ tmp359,
 572 00d4 1205     		lsls	r2, r2, #20	@ tmp204, tmp359,
 573 00d6 9A61     		str	r2, [r3, #24]	@ tmp204, _62->BSRR
 310:src/main.c    **** 
 311:src/main.c    **** 	USART1Config();
ARM GAS  /tmp/ccqMBOyg.s 			page 34


 574              		.loc 2 311 0
 575 00d8 FFF7FEFF 		bl	USART1Config	@
 312:src/main.c    **** 	USART2Config();
 576              		.loc 2 312 0
 577 00dc FFF7FEFF 		bl	USART2Config	@
 313:src/main.c    **** 
 314:src/main.c    **** 	EXTIOff();
 578              		.loc 2 314 0
 579 00e0 FFF7FEFF 		bl	EXTIOff	@
 315:src/main.c    **** 
 316:src/main.c    **** #ifdef USE_REDONDA_BASIC
 317:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 318:src/main.c    **** 	// USART1Config();
 319:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 580              		.loc 2 319 0
 581 00e4 FFF7FEFF 		bl	AdcConfig	@
 320:src/main.c    **** 
 321:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 322:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 582              		.loc 2 322 0
 583 00e8 FFF7FEFF 		bl	TIM_3_Init	@
 323:src/main.c    **** #endif
 324:src/main.c    **** 
 325:src/main.c    **** 	TIM_16_Init();					//o tuilizo para synchro de relay
 584              		.loc 2 325 0
 585 00ec FFF7FEFF 		bl	TIM_16_Init	@
 326:src/main.c    **** 	TIM16Enable();
 586              		.loc 2 326 0
 587 00f0 FFF7FEFF 		bl	TIM16Enable	@
 327:src/main.c    **** 
 328:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 588              		.loc 2 328 0
 589 00f4 A64B     		ldr	r3, .L44+4	@ tmp205,
 590 00f6 1800     		movs	r0, r3	@, tmp205
 591 00f8 FFF7FEFF 		bl	Usart2Send	@
 329:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 592              		.loc 2 329 0
 593 00fc A54B     		ldr	r3, .L44+8	@ tmp206,
 594 00fe 1800     		movs	r0, r3	@, tmp206
 595 0100 FFF7FEFF 		bl	Usart2Send	@
 330:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 331:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 596              		.loc 2 331 0
 597 0104 A44B     		ldr	r3, .L44+12	@ tmp207,
 598 0106 1800     		movs	r0, r3	@, tmp207
 599 0108 FFF7FEFF 		bl	Usart2Send	@
 332:src/main.c    **** 	#endif
 333:src/main.c    **** 	#ifdef WITH_HYST
 334:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 600              		.loc 2 334 0
 601 010c A34B     		ldr	r3, .L44+16	@ tmp208,
 602 010e 1800     		movs	r0, r3	@, tmp208
 603 0110 FFF7FEFF 		bl	Usart2Send	@
 335:src/main.c    **** 	#endif
 336:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 337:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 338:src/main.c    **** 	#endif
ARM GAS  /tmp/ccqMBOyg.s 			page 35


 339:src/main.c    **** 	#ifdef USE_WITH_SYNC
 340:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 341:src/main.c    **** 	#else
 342:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 604              		.loc 2 342 0
 605 0114 A24B     		ldr	r3, .L44+20	@ tmp209,
 606 0116 1800     		movs	r0, r3	@, tmp209
 607 0118 FFF7FEFF 		bl	Usart2Send	@
 343:src/main.c    **** 	#endif
 344:src/main.c    **** 
 345:src/main.c    **** 
 346:src/main.c    **** 	for (i = 0; i < 8; i++)
 608              		.loc 2 346 0
 609 011c 3F23     		movs	r3, #63	@ tmp210,
 610 011e 6B44     		add	r3, r3, sp	@ tmp210,
 611 0120 0022     		movs	r2, #0	@ tmp211,
 612 0122 1A70     		strb	r2, [r3]	@ tmp212, i
 613 0124 1DE0     		b	.L19	@
 614              	.L22:
 347:src/main.c    **** 	{
 348:src/main.c    **** 		if (LED)
 615              		.loc 2 348 0
 616 0126 9023     		movs	r3, #144	@ tmp352,
 617 0128 DB05     		lsls	r3, r3, #23	@ D.6950, tmp352,
 618 012a 9B8A     		ldrh	r3, [r3, #20]	@ tmp214,
 619 012c 9BB2     		uxth	r3, r3	@ D.6951, tmp214
 620 012e 1A00     		movs	r2, r3	@ D.6952, D.6951
 621 0130 8023     		movs	r3, #128	@ tmp353,
 622 0132 5B01     		lsls	r3, r3, #5	@ tmp215, tmp353,
 623 0134 1340     		ands	r3, r2	@ D.6952, D.6952
 624 0136 05D0     		beq	.L20	@,
 349:src/main.c    **** 			LED_OFF;
 625              		.loc 2 349 0
 626 0138 9023     		movs	r3, #144	@ tmp350,
 627 013a DB05     		lsls	r3, r3, #23	@ D.6950, tmp350,
 628 013c 8022     		movs	r2, #128	@ tmp351,
 629 013e 5205     		lsls	r2, r2, #21	@ tmp216, tmp351,
 630 0140 9A61     		str	r2, [r3, #24]	@ tmp216, _81->BSRR
 631 0142 04E0     		b	.L21	@
 632              	.L20:
 350:src/main.c    **** 		else
 351:src/main.c    **** 			LED_ON;
 633              		.loc 2 351 0
 634 0144 9023     		movs	r3, #144	@ tmp348,
 635 0146 DB05     		lsls	r3, r3, #23	@ D.6950, tmp348,
 636 0148 8022     		movs	r2, #128	@ tmp349,
 637 014a 5201     		lsls	r2, r2, #5	@ tmp217, tmp349,
 638 014c 9A61     		str	r2, [r3, #24]	@ tmp217, _83->BSRR
 639              	.L21:
 352:src/main.c    **** 
 353:src/main.c    **** 		Wait_ms (250);
 640              		.loc 2 353 0 discriminator 2
 641 014e FA20     		movs	r0, #250	@,
 642 0150 FFF7FEFF 		bl	Wait_ms	@
 346:src/main.c    **** 	{
 643              		.loc 2 346 0 discriminator 2
 644 0154 3F23     		movs	r3, #63	@ tmp218,
ARM GAS  /tmp/ccqMBOyg.s 			page 36


 645 0156 6B44     		add	r3, r3, sp	@ tmp218,
 646 0158 1A78     		ldrb	r2, [r3]	@ D.6953, i
 647 015a 3F23     		movs	r3, #63	@ tmp219,
 648 015c 6B44     		add	r3, r3, sp	@ tmp219,
 649 015e 0132     		adds	r2, r2, #1	@ tmp220,
 650 0160 1A70     		strb	r2, [r3]	@ tmp221, i
 651              	.L19:
 346:src/main.c    **** 	{
 652              		.loc 2 346 0 is_stmt 0 discriminator 1
 653 0162 3F23     		movs	r3, #63	@ tmp222,
 654 0164 6B44     		add	r3, r3, sp	@ tmp222,
 655 0166 1B78     		ldrb	r3, [r3]	@ tmp223, i
 656 0168 072B     		cmp	r3, #7	@ tmp223,
 657 016a DCD9     		bls	.L22	@,
 354:src/main.c    **** 	}
 355:src/main.c    **** 
 356:src/main.c    **** 	timer_standby = 2000;
 658              		.loc 2 356 0 is_stmt 1
 659 016c 8D4B     		ldr	r3, .L44+24	@ tmp224,
 660 016e FA22     		movs	r2, #250	@ tmp347,
 661 0170 D200     		lsls	r2, r2, #3	@ tmp225, tmp347,
 662 0172 1A80     		strh	r2, [r3]	@ tmp226, timer_standby
 663              	.L39:
 357:src/main.c    **** 
 358:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 359:src/main.c    **** 	// while (1)
 360:src/main.c    **** 	// {
 361:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 362:src/main.c    **** 	// 	{
 363:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 364:src/main.c    **** 	// 		Wait_ms(10);
 365:src/main.c    **** 	// 	}
 366:src/main.c    **** 	//
 367:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 368:src/main.c    **** 	// 	{
 369:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 370:src/main.c    **** 	// 		Wait_ms(10);
 371:src/main.c    **** 	// 	}
 372:src/main.c    **** 	// }
 373:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 374:src/main.c    **** 
 375:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 376:src/main.c    **** 	// i = 0;
 377:src/main.c    **** 	// while (1)
 378:src/main.c    **** 	// {
 379:src/main.c    **** 	// 	switch (i)
 380:src/main.c    **** 	// 	{
 381:src/main.c    **** 	// 		case 0:
 382:src/main.c    **** 	// 			RelayOn();
 383:src/main.c    **** 	// 			timer_standby = 50;
 384:src/main.c    **** 	// 			LED_ON;
 385:src/main.c    **** 	// 			i++;
 386:src/main.c    **** 	// 			break;
 387:src/main.c    **** 	//
 388:src/main.c    **** 	// 		case 1:
 389:src/main.c    **** 	// 			if (!timer_standby)
 390:src/main.c    **** 	// 			{
ARM GAS  /tmp/ccqMBOyg.s 			page 37


 391:src/main.c    **** 	// 				RelayOff();
 392:src/main.c    **** 	// 				LED_OFF;
 393:src/main.c    **** 	// 				i++;
 394:src/main.c    **** 	// 				timer_standby = 10000;
 395:src/main.c    **** 	// 			}
 396:src/main.c    **** 	// 			break;
 397:src/main.c    **** 	//
 398:src/main.c    **** 	// 		case 2:
 399:src/main.c    **** 	// 			if (!timer_standby)
 400:src/main.c    **** 	// 			{
 401:src/main.c    **** 	// 				i = 0;
 402:src/main.c    **** 	// 			}
 403:src/main.c    **** 	// 			break;
 404:src/main.c    **** 	// 	}
 405:src/main.c    **** 	//
 406:src/main.c    **** 	// 	UpdateRelay ();
 407:src/main.c    **** 	// }
 408:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 409:src/main.c    **** 
 410:src/main.c    **** 
 411:src/main.c    **** //--- Programa de pruebas I meas -----
 412:src/main.c    **** 	while (1)
 413:src/main.c    **** 	{
 414:src/main.c    **** 		switch (main_state)
 664              		.loc 2 414 0
 665 0174 3723     		movs	r3, #55	@ tmp227,
 666 0176 6B44     		add	r3, r3, sp	@ tmp227,
 667 0178 1B78     		ldrb	r3, [r3]	@ D.6952, main_state
 668 017a 042B     		cmp	r3, #4	@ D.6952,
 669 017c 00D9     		bls	.LCB415	@
 670 017e EAE0     		b	.L23	@long jump	@
 671              	.LCB415:
 672 0180 9A00     		lsls	r2, r3, #2	@ tmp228, D.6952,
 673 0182 894B     		ldr	r3, .L44+28	@ tmp230,
 674 0184 D318     		adds	r3, r2, r3	@ tmp229, tmp228, tmp230
 675 0186 1B68     		ldr	r3, [r3]	@ tmp231,
 676 0188 9F46     		mov	pc, r3	@ tmp231
 677              		.section	.rodata.main,"a",%progbits
 678              		.align	2
 679              	.L25:
 680 0000 8A010000 		.word	.L24
 681 0004 AC010000 		.word	.L26
 682 0008 E4010000 		.word	.L27
 683 000c 60030000 		.word	.L40
 684 0010 5A020000 		.word	.L29
 685              		.section	.text.main
 686              	.L24:
 415:src/main.c    **** 		{
 416:src/main.c    **** 			case MAIN_INIT:
 417:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 687              		.loc 2 417 0
 688 018a 0A20     		movs	r0, #10	@,
 689 018c FFF7FEFF 		bl	Update_TIM3_CH1	@
 418:src/main.c    **** 				main_state = SYNCHRO_ADC;
 690              		.loc 2 418 0
 691 0190 3723     		movs	r3, #55	@ tmp232,
 692 0192 6B44     		add	r3, r3, sp	@ tmp232,
ARM GAS  /tmp/ccqMBOyg.s 			page 38


 693 0194 0122     		movs	r2, #1	@ tmp233,
 694 0196 1A70     		strb	r2, [r3]	@ tmp234, main_state
 419:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 695              		.loc 2 419 0
 696 0198 844B     		ldr	r3, .L44+32	@ D.6954,
 697 019a 844A     		ldr	r2, .L44+32	@ D.6954,
 698 019c 9268     		ldr	r2, [r2, #8]	@ D.6949, _93->CR
 699 019e 0421     		movs	r1, #4	@ tmp235,
 700 01a0 0A43     		orrs	r2, r1	@ D.6949, tmp235
 701 01a2 9A60     		str	r2, [r3, #8]	@ D.6949, _92->CR
 420:src/main.c    **** 				seq_ready = 0;
 702              		.loc 2 420 0
 703 01a4 824B     		ldr	r3, .L44+36	@ tmp236,
 704 01a6 0022     		movs	r2, #0	@ tmp237,
 705 01a8 1A70     		strb	r2, [r3]	@ tmp238, seq_ready
 421:src/main.c    **** 				break;
 706              		.loc 2 421 0
 707 01aa E0E0     		b	.L30	@
 708              	.L26:
 422:src/main.c    **** 
 423:src/main.c    **** 			case SYNCHRO_ADC:
 424:src/main.c    **** 				if (seq_ready)
 709              		.loc 2 424 0
 710 01ac 804B     		ldr	r3, .L44+36	@ tmp239,
 711 01ae 1B78     		ldrb	r3, [r3]	@ tmp240, seq_ready
 712 01b0 DBB2     		uxtb	r3, r3	@ D.6953, tmp240
 713 01b2 002B     		cmp	r3, #0	@ D.6953,
 714 01b4 00D1     		bne	.LCB450	@
 715 01b6 D5E0     		b	.L41	@long jump	@
 716              	.LCB450:
 425:src/main.c    **** 				{
 426:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 717              		.loc 2 426 0
 718 01b8 3723     		movs	r3, #55	@ tmp241,
 719 01ba 6B44     		add	r3, r3, sp	@ tmp241,
 720 01bc 0222     		movs	r2, #2	@ tmp242,
 721 01be 1A70     		strb	r2, [r3]	@ tmp243, main_state
 427:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 722              		.loc 2 427 0
 723 01c0 7C4B     		ldr	r3, .L44+40	@ tmp244,
 724 01c2 1800     		movs	r0, r3	@, tmp244
 725 01c4 FFF7FEFF 		bl	Usart2Send	@
 428:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 726              		.loc 2 428 0
 727 01c8 7B4B     		ldr	r3, .L44+44	@ tmp245,
 728 01ca 1800     		movs	r0, r3	@, tmp245
 729 01cc FFF7FEFF 		bl	Usart2Send	@
 429:src/main.c    **** 					timer_standby = 60000;
 730              		.loc 2 429 0
 731 01d0 744B     		ldr	r3, .L44+24	@ tmp246,
 732 01d2 7A4A     		ldr	r2, .L44+48	@ tmp247,
 733 01d4 1A80     		strh	r2, [r3]	@ tmp248, timer_standby
 430:src/main.c    **** 					zero_current_loc = 0;
 734              		.loc 2 430 0
 735 01d6 0023     		movs	r3, #0	@ tmp249,
 736 01d8 0E93     		str	r3, [sp, #56]	@ tmp249, zero_current_loc
 431:src/main.c    **** 					i = 0;
ARM GAS  /tmp/ccqMBOyg.s 			page 39


 737              		.loc 2 431 0
 738 01da 3F23     		movs	r3, #63	@ tmp250,
 739 01dc 6B44     		add	r3, r3, sp	@ tmp250,
 740 01de 0022     		movs	r2, #0	@ tmp251,
 741 01e0 1A70     		strb	r2, [r3]	@ tmp252, i
 432:src/main.c    **** 				}
 433:src/main.c    **** 				break;
 742              		.loc 2 433 0
 743 01e2 BFE0     		b	.L41	@
 744              	.L27:
 434:src/main.c    **** 
 435:src/main.c    **** 			case SET_ZERO_CURRENT:
 436:src/main.c    **** 				if (!timer_standby)
 745              		.loc 2 436 0
 746 01e4 6F4B     		ldr	r3, .L44+24	@ tmp253,
 747 01e6 1B88     		ldrh	r3, [r3]	@ tmp254, timer_standby
 748 01e8 9BB2     		uxth	r3, r3	@ D.6951, tmp254
 749 01ea 002B     		cmp	r3, #0	@ D.6951,
 750 01ec 00D0     		beq	.LCB478	@
 751 01ee BBE0     		b	.L42	@long jump	@
 752              	.LCB478:
 437:src/main.c    **** 				{
 438:src/main.c    **** 					if (i < 32)
 753              		.loc 2 438 0
 754 01f0 3F23     		movs	r3, #63	@ tmp255,
 755 01f2 6B44     		add	r3, r3, sp	@ tmp255,
 756 01f4 1B78     		ldrb	r3, [r3]	@ tmp256, i
 757 01f6 1F2B     		cmp	r3, #31	@ tmp256,
 758 01f8 1AD8     		bhi	.L33	@,
 439:src/main.c    **** 					// if (i < 4)
 440:src/main.c    **** 					{
 441:src/main.c    **** 						if (seq_ready)
 759              		.loc 2 441 0
 760 01fa 6D4B     		ldr	r3, .L44+36	@ tmp257,
 761 01fc 1B78     		ldrb	r3, [r3]	@ tmp258, seq_ready
 762 01fe DBB2     		uxtb	r3, r3	@ D.6953, tmp258
 763 0200 002B     		cmp	r3, #0	@ D.6953,
 764 0202 00D1     		bne	.LCB488	@
 765 0204 B0E0     		b	.L42	@long jump	@
 766              	.LCB488:
 442:src/main.c    **** 						{
 443:src/main.c    **** 							seq_ready = 0;
 767              		.loc 2 443 0
 768 0206 6A4B     		ldr	r3, .L44+36	@ tmp259,
 769 0208 0022     		movs	r2, #0	@ tmp260,
 770 020a 1A70     		strb	r2, [r3]	@ tmp261, seq_ready
 444:src/main.c    **** 							zero_current_loc += I_Sense;
 771              		.loc 2 444 0
 772 020c 6C4B     		ldr	r3, .L44+52	@ tmp262,
 773 020e 9B88     		ldrh	r3, [r3, #4]	@ tmp264,
 774 0210 9BB2     		uxth	r3, r3	@ D.6951, tmp264
 775 0212 1A00     		movs	r2, r3	@ D.6955, D.6951
 776 0214 0E9B     		ldr	r3, [sp, #56]	@ tmp266, zero_current_loc
 777 0216 9B18     		adds	r3, r3, r2	@ tmp265, tmp266, D.6955
 778 0218 0E93     		str	r3, [sp, #56]	@ tmp265, zero_current_loc
 445:src/main.c    **** 							i++;
 779              		.loc 2 445 0
ARM GAS  /tmp/ccqMBOyg.s 			page 40


 780 021a 3F23     		movs	r3, #63	@ tmp267,
 781 021c 6B44     		add	r3, r3, sp	@ tmp267,
 782 021e 1A78     		ldrb	r2, [r3]	@ D.6953, i
 783 0220 3F23     		movs	r3, #63	@ tmp268,
 784 0222 6B44     		add	r3, r3, sp	@ tmp268,
 785 0224 0132     		adds	r2, r2, #1	@ tmp269,
 786 0226 1A70     		strb	r2, [r3]	@ tmp270, i
 446:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 787              		.loc 2 446 0
 788 0228 5E4B     		ldr	r3, .L44+24	@ tmp271,
 789 022a 0222     		movs	r2, #2	@ tmp272,
 790 022c 1A80     		strh	r2, [r3]	@ tmp273, timer_standby
 447:src/main.c    **** 						}
 448:src/main.c    **** 					}
 449:src/main.c    **** 					else
 450:src/main.c    **** 					{
 451:src/main.c    **** 						zero_current_loc >>= 5;
 452:src/main.c    **** 						// zero_current_loc >>= 2;
 453:src/main.c    **** 						zero_current = zero_current_loc;
 454:src/main.c    **** 						main_state = LAMP_ON;
 455:src/main.c    **** 						RELAY_ON;
 456:src/main.c    **** 						i = 0;
 457:src/main.c    **** 					}
 458:src/main.c    **** 				}
 459:src/main.c    **** 				break;
 791              		.loc 2 459 0
 792 022e 9BE0     		b	.L42	@
 793              	.L33:
 451:src/main.c    **** 						// zero_current_loc >>= 2;
 794              		.loc 2 451 0
 795 0230 0E9B     		ldr	r3, [sp, #56]	@ tmp275, zero_current_loc
 796 0232 5B09     		lsrs	r3, r3, #5	@ tmp274, tmp275,
 797 0234 0E93     		str	r3, [sp, #56]	@ tmp274, zero_current_loc
 453:src/main.c    **** 						main_state = LAMP_ON;
 798              		.loc 2 453 0
 799 0236 0E9B     		ldr	r3, [sp, #56]	@ tmp277, zero_current_loc
 800 0238 9AB2     		uxth	r2, r3	@ D.6951, tmp276
 801 023a 624B     		ldr	r3, .L44+56	@ tmp278,
 802 023c 1A80     		strh	r2, [r3]	@ tmp279, zero_current
 454:src/main.c    **** 						RELAY_ON;
 803              		.loc 2 454 0
 804 023e 3723     		movs	r3, #55	@ tmp280,
 805 0240 6B44     		add	r3, r3, sp	@ tmp280,
 806 0242 0422     		movs	r2, #4	@ tmp281,
 807 0244 1A70     		strb	r2, [r3]	@ tmp282, main_state
 455:src/main.c    **** 						i = 0;
 808              		.loc 2 455 0
 809 0246 9023     		movs	r3, #144	@ tmp345,
 810 0248 DB05     		lsls	r3, r3, #23	@ D.6950, tmp345,
 811 024a 8022     		movs	r2, #128	@ tmp346,
 812 024c 1201     		lsls	r2, r2, #4	@ tmp283, tmp346,
 813 024e 9A61     		str	r2, [r3, #24]	@ tmp283, _118->BSRR
 456:src/main.c    **** 					}
 814              		.loc 2 456 0
 815 0250 3F23     		movs	r3, #63	@ tmp284,
 816 0252 6B44     		add	r3, r3, sp	@ tmp284,
 817 0254 0022     		movs	r2, #0	@ tmp285,
ARM GAS  /tmp/ccqMBOyg.s 			page 41


 818 0256 1A70     		strb	r2, [r3]	@ tmp286, i
 819              		.loc 2 459 0
 820 0258 86E0     		b	.L42	@
 821              	.L29:
 460:src/main.c    **** 
 461:src/main.c    **** 			case LAMP_OFF:
 462:src/main.c    **** 				break;
 463:src/main.c    **** 
 464:src/main.c    **** 			case LAMP_ON:
 465:src/main.c    **** 				if (!timer_standby)
 822              		.loc 2 465 0
 823 025a 524B     		ldr	r3, .L44+24	@ tmp287,
 824 025c 1B88     		ldrh	r3, [r3]	@ tmp288, timer_standby
 825 025e 9BB2     		uxth	r3, r3	@ D.6951, tmp288
 826 0260 002B     		cmp	r3, #0	@ D.6951,
 827 0262 00D0     		beq	.LCB541	@
 828 0264 82E0     		b	.L43	@long jump	@
 829              	.LCB541:
 466:src/main.c    **** 				{
 467:src/main.c    **** 					if (i < SIZEOF_POWER_VECT)
 830              		.loc 2 467 0
 831 0266 3F23     		movs	r3, #63	@ tmp289,
 832 0268 6B44     		add	r3, r3, sp	@ tmp289,
 833 026a 1B78     		ldrb	r3, [r3]	@ tmp290, i
 834 026c 092B     		cmp	r3, #9	@ tmp290,
 835 026e 1AD8     		bhi	.L36	@,
 468:src/main.c    **** 					{
 469:src/main.c    **** 						power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 836              		.loc 2 469 0
 837 0270 3F23     		movs	r3, #63	@ tmp291,
 838 0272 6B44     		add	r3, r3, sp	@ tmp291,
 839 0274 1C78     		ldrb	r4, [r3]	@ D.6952, i
 840 0276 FFF7FEFF 		bl	GetVGrid	@
 841 027a 0300     		movs	r3, r0	@ tmp292,
 842 027c 1D00     		movs	r5, r3	@ D.6951, tmp293
 843 027e FFF7FEFF 		bl	GetIGrid	@
 844 0282 0300     		movs	r3, r0	@ tmp294,
 845 0284 1900     		movs	r1, r3	@, D.6951
 846 0286 2800     		movs	r0, r5	@, D.6951
 847 0288 FFF7FEFF 		bl	PowerCalc	@
 848 028c 0300     		movs	r3, r0	@ tmp296,
 849 028e 1900     		movs	r1, r3	@ D.6951, tmp297
 850 0290 4D4B     		ldr	r3, .L44+60	@ tmp298,
 851 0292 6200     		lsls	r2, r4, #1	@ tmp299, D.6952,
 852 0294 D152     		strh	r1, [r2, r3]	@ tmp300, power_vect
 470:src/main.c    **** 						i++;
 853              		.loc 2 470 0
 854 0296 3F23     		movs	r3, #63	@ tmp301,
 855 0298 6B44     		add	r3, r3, sp	@ tmp301,
 856 029a 1A78     		ldrb	r2, [r3]	@ D.6953, i
 857 029c 3F23     		movs	r3, #63	@ tmp302,
 858 029e 6B44     		add	r3, r3, sp	@ tmp302,
 859 02a0 0132     		adds	r2, r2, #1	@ tmp303,
 860 02a2 1A70     		strb	r2, [r3]	@ tmp304, i
 861 02a4 53E0     		b	.L37	@
 862              	.L36:
 471:src/main.c    **** 					}
ARM GAS  /tmp/ccqMBOyg.s 			page 42


 472:src/main.c    **** 					else
 473:src/main.c    **** 					{
 474:src/main.c    **** 						//termine de cargar el vector, muestro info
 475:src/main.c    **** 						power = PowerCalcMean8(power_vect);
 863              		.loc 2 475 0
 864 02a6 08AC     		add	r4, sp, #32	@ tmp305,,
 865 02a8 474B     		ldr	r3, .L44+60	@ tmp306,
 866 02aa 1800     		movs	r0, r3	@, tmp306
 867 02ac FFF7FEFF 		bl	PowerCalcMean8	@
 868 02b0 0300     		movs	r3, r0	@ tmp307,
 869 02b2 2380     		strh	r3, [r4]	@ tmp309, power
 476:src/main.c    **** 						fcalc = power;
 870              		.loc 2 476 0
 871 02b4 08AB     		add	r3, sp, #32	@ tmp310,,
 872 02b6 1B88     		ldrh	r3, [r3]	@ tmp311, power
 873 02b8 1800     		movs	r0, r3	@, tmp311
 874 02ba FFF7FEFF 		bl	__aeabi_ui2f	@
 875 02be 031C     		adds	r3, r0, #0	@ tmp312,
 876 02c0 0C93     		str	r3, [sp, #48]	@ tmp312, fcalc
 477:src/main.c    **** 						fcalc = power * KW;
 877              		.loc 2 477 0
 878 02c2 08AB     		add	r3, sp, #32	@ tmp313,,
 879 02c4 1B88     		ldrh	r3, [r3]	@ D.6952, power
 880 02c6 1800     		movs	r0, r3	@, D.6952
 881 02c8 FFF7FEFF 		bl	__aeabi_i2d	@
 882 02cc 3F4A     		ldr	r2, .L44+64	@,
 883 02ce 404B     		ldr	r3, .L44+68	@,
 884 02d0 FFF7FEFF 		bl	__aeabi_dmul	@
 885 02d4 0300     		movs	r3, r0	@ tmp314,
 886 02d6 0C00     		movs	r4, r1	@,
 887 02d8 1800     		movs	r0, r3	@, D.6956
 888 02da 2100     		movs	r1, r4	@, D.6956
 889 02dc FFF7FEFF 		bl	__aeabi_d2f	@
 890 02e0 031C     		adds	r3, r0, #0	@ tmp315,
 891 02e2 0C93     		str	r3, [sp, #48]	@ tmp315, fcalc
 478:src/main.c    **** 						power_int = (unsigned short) fcalc;
 892              		.loc 2 478 0
 893 02e4 1E24     		movs	r4, #30	@ tmp316,
 894 02e6 6C44     		add	r4, r4, sp	@ tmp316,
 895 02e8 0C98     		ldr	r0, [sp, #48]	@, fcalc
 896 02ea FFF7FEFF 		bl	__aeabi_f2uiz	@
 897 02ee 0300     		movs	r3, r0	@ tmp317,
 898 02f0 2380     		strh	r3, [r4]	@ tmp318, power_int
 479:src/main.c    **** 						fcalc = fcalc - power_int;
 899              		.loc 2 479 0
 900 02f2 1E23     		movs	r3, #30	@ tmp319,
 901 02f4 6B44     		add	r3, r3, sp	@ tmp319,
 902 02f6 1B88     		ldrh	r3, [r3]	@ D.6952, power_int
 903 02f8 1800     		movs	r0, r3	@, D.6952
 904 02fa FFF7FEFF 		bl	__aeabi_i2f	@
 905 02fe 031C     		adds	r3, r0, #0	@ D.6957,
 906 0300 191C     		adds	r1, r3, #0	@, D.6957
 907 0302 0C98     		ldr	r0, [sp, #48]	@, fcalc
 908 0304 FFF7FEFF 		bl	__aeabi_fsub	@
 909 0308 031C     		adds	r3, r0, #0	@ tmp320,
 910 030a 0C93     		str	r3, [sp, #48]	@ tmp320, fcalc
 480:src/main.c    **** 						fcalc = fcalc * 100;
ARM GAS  /tmp/ccqMBOyg.s 			page 43


 911              		.loc 2 480 0
 912 030c 3149     		ldr	r1, .L44+72	@,
 913 030e 0C98     		ldr	r0, [sp, #48]	@, fcalc
 914 0310 FFF7FEFF 		bl	__aeabi_fmul	@
 915 0314 031C     		adds	r3, r0, #0	@ tmp321,
 916 0316 0C93     		str	r3, [sp, #48]	@ tmp321, fcalc
 481:src/main.c    **** 						power_dec = (unsigned short) fcalc;
 917              		.loc 2 481 0
 918 0318 07AC     		add	r4, sp, #28	@ tmp322,,
 919 031a 0C98     		ldr	r0, [sp, #48]	@, fcalc
 920 031c FFF7FEFF 		bl	__aeabi_f2uiz	@
 921 0320 0300     		movs	r3, r0	@ tmp323,
 922 0322 2380     		strh	r3, [r4]	@ tmp324, power_dec
 482:src/main.c    **** 						sprintf(s_lcd, "p: %3d.%02d d: %d\r\n", power_int, power_dec, power);
 923              		.loc 2 482 0
 924 0324 1E23     		movs	r3, #30	@ tmp325,
 925 0326 6B44     		add	r3, r3, sp	@ tmp325,
 926 0328 1A88     		ldrh	r2, [r3]	@ D.6952, power_int
 927 032a 07AB     		add	r3, sp, #28	@ tmp326,,
 928 032c 1C88     		ldrh	r4, [r3]	@ D.6952, power_dec
 929 032e 08AB     		add	r3, sp, #32	@ tmp327,,
 930 0330 1B88     		ldrh	r3, [r3]	@ D.6952, power
 931 0332 2949     		ldr	r1, .L44+76	@ tmp328,
 932 0334 02A8     		add	r0, sp, #8	@ tmp329,,
 933 0336 0093     		str	r3, [sp]	@ D.6952,
 934 0338 2300     		movs	r3, r4	@, D.6952
 935 033a FFF7FEFF 		bl	sprintf	@
 483:src/main.c    **** 
 484:src/main.c    **** 						// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, V_Sense, I_Sense);
 485:src/main.c    **** 						// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, GetVGrid(), GetIGrid());
 486:src/main.c    **** 						//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 487:src/main.c    **** 						Usart2Send(s_lcd);
 936              		.loc 2 487 0
 937 033e 02AB     		add	r3, sp, #8	@ tmp330,,
 938 0340 1800     		movs	r0, r3	@, tmp330
 939 0342 FFF7FEFF 		bl	Usart2Send	@
 488:src/main.c    **** 						i = 0;
 940              		.loc 2 488 0
 941 0346 3F23     		movs	r3, #63	@ tmp331,
 942 0348 6B44     		add	r3, r3, sp	@ tmp331,
 943 034a 0022     		movs	r2, #0	@ tmp332,
 944 034c 1A70     		strb	r2, [r3]	@ tmp333, i
 945              	.L37:
 489:src/main.c    **** 					}
 490:src/main.c    **** 					timer_standby = 200;		//10 veces 200ms
 946              		.loc 2 490 0
 947 034e 154B     		ldr	r3, .L44+24	@ tmp334,
 948 0350 C822     		movs	r2, #200	@ tmp335,
 949 0352 1A80     		strh	r2, [r3]	@ tmp336, timer_standby
 491:src/main.c    **** 
 492:src/main.c    **** 					// fcalc = voltage;
 493:src/main.c    **** 					// fcalc = fcalc * KV;
 494:src/main.c    **** 					// volt_int = (short) fcalc;
 495:src/main.c    **** 					// fcalc = fcalc - volt_int;
 496:src/main.c    **** 					// fcalc = fcalc * 100;
 497:src/main.c    **** 					// volt_dec = (short) fcalc;
 498:src/main.c    **** 					//
ARM GAS  /tmp/ccqMBOyg.s 			page 44


 499:src/main.c    **** 					// sprintf(str, "%2d.%02d", volt_int, volt_dec);
 500:src/main.c    **** 					//
 501:src/main.c    **** 					// //sprintf(str, "%4d        ", voltage);
 502:src/main.c    **** 					// LCDTransmitStr(str);
 503:src/main.c    **** 
 504:src/main.c    **** 				}
 505:src/main.c    **** 				break;
 950              		.loc 2 505 0
 951 0354 0AE0     		b	.L43	@
 952              	.L23:
 506:src/main.c    **** 
 507:src/main.c    **** 			default:
 508:src/main.c    **** 				main_state = MAIN_INIT;
 953              		.loc 2 508 0
 954 0356 3723     		movs	r3, #55	@ tmp337,
 955 0358 6B44     		add	r3, r3, sp	@ tmp337,
 956 035a 0022     		movs	r2, #0	@ tmp338,
 957 035c 1A70     		strb	r2, [r3]	@ tmp339, main_state
 509:src/main.c    **** 				break;
 958              		.loc 2 509 0
 959 035e 06E0     		b	.L30	@
 960              	.L40:
 462:src/main.c    **** 
 961              		.loc 2 462 0
 962 0360 C046     		nop
 963 0362 04E0     		b	.L30	@
 964              	.L41:
 433:src/main.c    **** 
 965              		.loc 2 433 0
 966 0364 C046     		nop
 967 0366 02E0     		b	.L30	@
 968              	.L42:
 459:src/main.c    **** 
 969              		.loc 2 459 0
 970 0368 C046     		nop
 971 036a 00E0     		b	.L30	@
 972              	.L43:
 505:src/main.c    **** 
 973              		.loc 2 505 0
 974 036c C046     		nop
 975              	.L30:
 510:src/main.c    **** 		}
 511:src/main.c    **** 
 512:src/main.c    **** 		//Cosas que dependen de las muestras
 513:src/main.c    **** 		if (seq_ready)
 976              		.loc 2 513 0
 977 036e 104B     		ldr	r3, .L44+36	@ tmp340,
 978 0370 1B78     		ldrb	r3, [r3]	@ tmp341, seq_ready
 979 0372 DBB2     		uxtb	r3, r3	@ D.6953, tmp341
 980 0374 002B     		cmp	r3, #0	@ D.6953,
 981 0376 06D0     		beq	.L38	@,
 514:src/main.c    **** 		{
 515:src/main.c    **** 			seq_ready = 0;
 982              		.loc 2 515 0
 983 0378 0D4B     		ldr	r3, .L44+36	@ tmp342,
 984 037a 0022     		movs	r2, #0	@ tmp343,
 985 037c 1A70     		strb	r2, [r3]	@ tmp344, seq_ready
ARM GAS  /tmp/ccqMBOyg.s 			page 45


 516:src/main.c    **** 			UpdateVGrid ();
 986              		.loc 2 516 0
 987 037e FFF7FEFF 		bl	UpdateVGrid	@
 517:src/main.c    **** 			UpdateIGrid ();
 988              		.loc 2 517 0
 989 0382 FFF7FEFF 		bl	UpdateIGrid	@
 990              	.L38:
 518:src/main.c    **** 		}
 519:src/main.c    **** 
 520:src/main.c    **** 		//Cosas que no dependen del estado del programa
 521:src/main.c    **** 		UpdateRelay ();
 991              		.loc 2 521 0
 992 0386 FFF7FEFF 		bl	UpdateRelay	@
 522:src/main.c    **** 		// UpdatePhotoTransistor();
 523:src/main.c    **** 	}	//end while 1
 993              		.loc 2 523 0
 994 038a F3E6     		b	.L39	@
 995              	.L45:
 996              		.align	2
 997              	.L44:
 998 038c 80BB0000 		.word	48000
 999 0390 00000000 		.word	.LC0
 1000 0394 28000000 		.word	.LC2
 1001 0398 38000000 		.word	.LC4
 1002 039c 4C000000 		.word	.LC6
 1003 03a0 64000000 		.word	.LC8
 1004 03a4 00000000 		.word	timer_standby
 1005 03a8 00000000 		.word	.L25
 1006 03ac 00240140 		.word	1073816576
 1007 03b0 00000000 		.word	seq_ready
 1008 03b4 74000000 		.word	.LC13
 1009 03b8 80000000 		.word	.LC15
 1010 03bc 60EAFFFF 		.word	-5536
 1011 03c0 00000000 		.word	adc_ch
 1012 03c4 00000000 		.word	zero_current
 1013 03c8 00000000 		.word	power_vect
 1014 03cc 90F7AA95 		.word	-1783957616
 1015 03d0 09BF843F 		.word	1065664265
 1016 03d4 0000C842 		.word	1120403456
 1017 03d8 A8000000 		.word	.LC20
 1018              		.cfi_endproc
 1019              	.LFE20:
 1020              		.size	main, .-main
 1021              		.section	.rodata
 1022              		.align	2
 1023              	.LC22:
 1024 00bc 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1024      3A7B226D 
 1024      794E616D 
 1024      65223A22 
 1024      4E75636C 
 1025              		.align	2
 1026              	.LC24:
 1027 00d4 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1027      54656D70 
 1027      65726174 
 1027      75726522 
ARM GAS  /tmp/ccqMBOyg.s 			page 46


 1027      3A256C75 
 1028 00ed 000000   		.align	2
 1029              	.LC26:
 1030 00f0 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1030      48756D69 
 1030      64697479 
 1030      223A256C 
 1030      752E256C 
 1031 0106 0000     		.align	2
 1032              	.LC28:
 1033 0108 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1033      50726573 
 1033      73757265 
 1033      223A256C 
 1033      752E256C 
 1034 011e 0000     		.align	2
 1035              	.LC30:
 1036 0120 7D7D00   		.ascii	"}}\000"
 1037              		.section	.text.prepare_json_pkt,"ax",%progbits
 1038              		.align	2
 1039              		.global	prepare_json_pkt
 1040              		.code	16
 1041              		.thumb_func
 1042              		.type	prepare_json_pkt, %function
 1043              	prepare_json_pkt:
 1044              	.LFB21:
 524:src/main.c    **** 
 525:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 526:src/main.c    **** 
 527:src/main.c    **** 	while (1)
 528:src/main.c    **** 	{
 529:src/main.c    **** 		switch (main_state)
 530:src/main.c    **** 		{
 531:src/main.c    **** 			case MAIN_INIT:
 532:src/main.c    **** 				RelayOff();
 533:src/main.c    **** 				LED_OFF;
 534:src/main.c    **** 				FillPhotoBuffer();
 535:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 536:src/main.c    **** 				FillTempBuffer();
 537:src/main.c    **** #endif
 538:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 539:src/main.c    **** 				Update_TIM3_CH1 (0);
 540:src/main.c    **** #endif
 541:src/main.c    **** 				main_state = SYNCHRO_ADC;
 542:src/main.c    **** #ifdef ADC_WITH_INT
 543:src/main.c    **** 				seq_ready = 0;
 544:src/main.c    **** #endif
 545:src/main.c    **** 				break;
 546:src/main.c    **** 
 547:src/main.c    **** 			case SYNCHRO_ADC:
 548:src/main.c    **** #ifdef ADC_WITH_INT
 549:src/main.c    **** 				if (seq_ready)
 550:src/main.c    **** #endif
 551:src/main.c    **** 				{
 552:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 553:src/main.c    **** 				}
 554:src/main.c    **** 				break;
ARM GAS  /tmp/ccqMBOyg.s 			page 47


 555:src/main.c    **** 
 556:src/main.c    **** 			case SET_ZERO_CURRENT:
 557:src/main.c    **** 				main_state = LAMP_OFF;
 558:src/main.c    **** 				break;
 559:src/main.c    **** 
 560:src/main.c    **** 			case LAMP_OFF:
 561:src/main.c    **** 				if (!tt_relay_on_off)
 562:src/main.c    **** 				{
 563:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 564:src/main.c    **** 					{
 565:src/main.c    **** 						main_state = LAMP_ON;
 566:src/main.c    **** 						tt_relay_on_off = 10000;
 567:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 568:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 569:src/main.c    **** 	#endif
 570:src/main.c    **** 
 571:src/main.c    **** 						RelayOn();
 572:src/main.c    **** 						LED_ON;
 573:src/main.c    **** 	#ifdef WITH_HYST
 574:src/main.c    **** 						hours = 0;
 575:src/main.c    **** 	#endif
 576:src/main.c    **** 					}
 577:src/main.c    **** 				}
 578:src/main.c    **** 				break;
 579:src/main.c    **** 
 580:src/main.c    **** 			case LAMP_ON:
 581:src/main.c    **** 				if (!tt_relay_on_off)
 582:src/main.c    **** 				{
 583:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 584:src/main.c    **** 					hyst = GetHysteresis (hours);
 585:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 586:src/main.c    **** 	#else
 587:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 588:src/main.c    **** 	#endif
 589:src/main.c    **** 					{
 590:src/main.c    **** 						main_state = LAMP_OFF;
 591:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 592:src/main.c    **** 						Update_TIM3_CH1 (0);
 593:src/main.c    **** 	#endif
 594:src/main.c    **** 						tt_relay_on_off = 10000;
 595:src/main.c    **** 						RelayOff();
 596:src/main.c    **** 						LED_OFF;
 597:src/main.c    **** 					}
 598:src/main.c    **** 				}
 599:src/main.c    **** 
 600:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 601:src/main.c    **** 				if (main_state == LAMP_ON)
 602:src/main.c    **** 				{
 603:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
 604:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
 605:src/main.c    **** 				}
 606:src/main.c    **** 	#endif
 607:src/main.c    **** 				break;
 608:src/main.c    **** 
 609:src/main.c    **** 			default:
 610:src/main.c    **** 				main_state = MAIN_INIT;
 611:src/main.c    **** 				break;
ARM GAS  /tmp/ccqMBOyg.s 			page 48


 612:src/main.c    **** 		}
 613:src/main.c    **** 
 614:src/main.c    **** 		if (!timer_standby)
 615:src/main.c    **** 		{
 616:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 617:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
 618:src/main.c    **** #else
 619:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
 620:src/main.c    **** #endif
 621:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 622:src/main.c    **** 			Usart2Send(s_lcd);
 623:src/main.c    **** 			timer_standby = 2000;
 624:src/main.c    **** 		}
 625:src/main.c    **** 
 626:src/main.c    **** 		//Cosas que no dependen del estado del programa
 627:src/main.c    **** 		UpdateRelay ();
 628:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 629:src/main.c    **** 		UpdateTemp();
 630:src/main.c    **** #endif
 631:src/main.c    **** 		UpdatePhotoTransistor();
 632:src/main.c    **** 	}	//end while 1
 633:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
 634:src/main.c    **** #endif	//USE_REDONDA_BASIC
 635:src/main.c    **** 
 636:src/main.c    **** 
 637:src/main.c    **** #ifdef USE_MQTT_LIB
 638:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 639:src/main.c    **** 	int rc = 0;
 640:src/main.c    **** 	char buf[200];
 641:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
 642:src/main.c    **** 	char* payload = "mypayload";
 643:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
 644:src/main.c    **** 	int len = 0;
 645:src/main.c    **** 
 646:src/main.c    **** 	data.clientID.cstring = "me";
 647:src/main.c    **** 	data.keepAliveInterval = 20;
 648:src/main.c    **** 	data.cleansession = 1;
 649:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
 650:src/main.c    **** 
 651:src/main.c    **** 	topicString.cstring = "mytopic";
 652:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
 653:src/main.c    **** 
 654:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
 655:src/main.c    **** 	//falta abrir puerto
 656:src/main.c    **** 	//falta enviar al socket
 657:src/main.c    **** 	//falta cerrar socket
 658:src/main.c    **** #endif
 659:src/main.c    **** 
 660:src/main.c    **** //	//---------- Prueba USART2 --------//
 661:src/main.c    **** //
 662:src/main.c    **** //    while( 1 )
 663:src/main.c    **** //    {
 664:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 665:src/main.c    **** //        Wait_ms(3000);
 666:src/main.c    **** //    }
 667:src/main.c    **** //
 668:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
ARM GAS  /tmp/ccqMBOyg.s 			page 49


 669:src/main.c    **** 
 670:src/main.c    **** 	//---------- Prueba con GPS --------//
 671:src/main.c    **** #ifdef USE_GPS
 672:src/main.c    **** 	Usart2SendSingle('M');
 673:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 674:src/main.c    **** 	Wait_ms(1000);
 675:src/main.c    **** 
 676:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
 677:src/main.c    **** 
 678:src/main.c    **** 	//mando reset al gps
 679:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
 680:src/main.c    **** 	GPSStartResetSM ();
 681:src/main.c    **** 	while (GPSStart() != RESP_OK);
 682:src/main.c    **** 
 683:src/main.c    **** 	//mando conf al gps
 684:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
 685:src/main.c    **** 	GPSConfigResetSM ();
 686:src/main.c    **** 	while (GPSConfig() != RESP_OK);
 687:src/main.c    **** 
 688:src/main.c    **** //	//mando reset factory al gps
 689:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
 690:src/main.c    **** //	GPSResetFactoryResetSM ();
 691:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
 692:src/main.c    **** 
 693:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
 694:src/main.c    **** //	timer_standby = 60000;
 695:src/main.c    **** //	while( timer_standby )
 696:src/main.c    **** 	while( 1 )
 697:src/main.c    **** 	{
 698:src/main.c    **** 		if (gps_pckt_ready)
 699:src/main.c    **** 		{
 700:src/main.c    **** 			gps_pckt_ready = 0;
 701:src/main.c    **** 			//Usart2SendSingle('P');
 702:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
 703:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
 704:src/main.c    **** 		}
 705:src/main.c    **** 
 706:src/main.c    **** 		GPSProcess();
 707:src/main.c    **** 	}
 708:src/main.c    **** #endif
 709:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
 710:src/main.c    **** 
 711:src/main.c    **** 	//---------- Prueba con GSM --------//
 712:src/main.c    **** #ifdef USE_GSM
 713:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
 714:src/main.c    **** 
 715:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 716:src/main.c    **** 
 717:src/main.c    **** 
 718:src/main.c    **** 	//Pruebo USART1
 719:src/main.c    **** //	while (1)
 720:src/main.c    **** //	{
 721:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
 722:src/main.c    **** //			Wait_ms(50);
 723:src/main.c    **** //	}
 724:src/main.c    **** 
 725:src/main.c    **** 
ARM GAS  /tmp/ccqMBOyg.s 			page 50


 726:src/main.c    **** 	//mando start al gsm
 727:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 728:src/main.c    **** 	//GPSStartResetSM ();
 729:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 730:src/main.c    **** 	while (timer_standby)
 731:src/main.c    **** 	{
 732:src/main.c    **** 		i = GSM_Start();
 733:src/main.c    **** 		if (i == 2)
 734:src/main.c    **** 		{
 735:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 736:src/main.c    **** 			timer_standby = 0;
 737:src/main.c    **** 		}
 738:src/main.c    **** 
 739:src/main.c    **** 		if (i == 4)
 740:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 741:src/main.c    **** 	}
 742:src/main.c    **** 
 743:src/main.c    **** 	//mando conf al gsm
 744:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
 745:src/main.c    **** 	//GPSConfigResetSM ();
 746:src/main.c    **** 
 747:src/main.c    **** 	i = 0;
 748:src/main.c    **** 	while (i == 0)
 749:src/main.c    **** 	{
 750:src/main.c    **** 		ii = GSM_Config(1000);
 751:src/main.c    **** 
 752:src/main.c    **** 		if (ii == 2)
 753:src/main.c    **** 			i = 0;
 754:src/main.c    **** 		else if (ii > 2)
 755:src/main.c    **** 		{
 756:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
 757:src/main.c    **** 			while (1);
 758:src/main.c    **** 		}
 759:src/main.c    **** 
 760:src/main.c    **** 		GSMProcess();
 761:src/main.c    **** 		GSMReceive ();
 762:src/main.c    **** 
 763:src/main.c    **** 		if (gsm_pckt_ready)
 764:src/main.c    **** 		{
 765:src/main.c    **** 			gsm_pckt_ready = 0;
 766:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 767:src/main.c    **** 		}
 768:src/main.c    **** 
 769:src/main.c    **** 		if (LIGHT)
 770:src/main.c    **** 			LED_ON;
 771:src/main.c    **** 		else
 772:src/main.c    **** 			LED_OFF;
 773:src/main.c    **** 	}
 774:src/main.c    **** 
 775:src/main.c    **** 
 776:src/main.c    **** 	while( 1 )
 777:src/main.c    **** 	{
 778:src/main.c    **** 		if (gsm_pckt_ready)
 779:src/main.c    **** 		{
 780:src/main.c    **** 			gsm_pckt_ready = 0;
 781:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 782:src/main.c    **** 		}
ARM GAS  /tmp/ccqMBOyg.s 			page 51


 783:src/main.c    **** 
 784:src/main.c    **** 		GSMProcess();
 785:src/main.c    **** 
 786:src/main.c    **** 		if (LIGHT)
 787:src/main.c    **** 			LED_ON;
 788:src/main.c    **** 
 789:src/main.c    **** 	}
 790:src/main.c    **** #endif
 791:src/main.c    **** 
 792:src/main.c    **** 	//---------- Pruebas con GSM GATEWAY --------//
 793:src/main.c    **** #ifdef USE_GSM_GATEWAY
 794:src/main.c    **** 	LED_OFF;
 795:src/main.c    **** 	for (i = 0; i < 6; i++)
 796:src/main.c    **** 	{
 797:src/main.c    **** 		if (LED)
 798:src/main.c    **** 			LED_OFF;
 799:src/main.c    **** 		else
 800:src/main.c    **** 			LED_ON;
 801:src/main.c    **** 
 802:src/main.c    **** 		Wait_ms (300);
 803:src/main.c    **** 	}
 804:src/main.c    **** 	Wait_ms (3000);
 805:src/main.c    **** 
 806:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 807:src/main.c    **** 
 808:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 809:src/main.c    **** 
 810:src/main.c    **** 
 811:src/main.c    **** 	//mando start al gsm
 812:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 813:src/main.c    **** 	//GPSStartResetSM ();
 814:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 815:src/main.c    **** 	while (timer_standby)
 816:src/main.c    **** 	{
 817:src/main.c    **** 		i = GSM_Start();
 818:src/main.c    **** 		if (i == 2)
 819:src/main.c    **** 		{
 820:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 821:src/main.c    **** 			timer_standby = 0;
 822:src/main.c    **** 		}
 823:src/main.c    **** 		else
 824:src/main.c    **** 
 825:src/main.c    **** 		if (i == 4)
 826:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 827:src/main.c    **** 	}
 828:src/main.c    **** 
 829:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 830:src/main.c    **** 
 831:src/main.c    **** 	while (1)
 832:src/main.c    **** 	{
 833:src/main.c    **** 		GSMProcess();
 834:src/main.c    **** 
 835:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 836:src/main.c    **** 		{
 837:src/main.c    **** 			usart2_pckt_ready = 0;
 838:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 839:src/main.c    **** 		}
ARM GAS  /tmp/ccqMBOyg.s 			page 52


 840:src/main.c    **** 
 841:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 842:src/main.c    **** 		{
 843:src/main.c    **** 			gsm_pckt_ready = 0;
 844:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 845:src/main.c    **** 		}
 846:src/main.c    **** 
 847:src/main.c    **** 		if (LIGHT)
 848:src/main.c    **** 			LED_ON;
 849:src/main.c    **** 		else
 850:src/main.c    **** 			LED_OFF;
 851:src/main.c    **** 	}
 852:src/main.c    **** #endif
 853:src/main.c    **** 
 854:src/main.c    **** 	//---------- Fin Prueba con GSM GATEWAY --------//
 855:src/main.c    **** 
 856:src/main.c    **** 
 857:src/main.c    **** 
 858:src/main.c    **** 	//---------- Prueba temp --------//
 859:src/main.c    **** 	/*
 860:src/main.c    **** 	while (1)
 861:src/main.c    **** 	{
 862:src/main.c    **** 		local_meas = GetTemp();
 863:src/main.c    **** 		if (local_meas != local_meas_last)
 864:src/main.c    **** 		{
 865:src/main.c    **** 			LED_ON;
 866:src/main.c    **** 			local_meas_last = local_meas;
 867:src/main.c    **** 			LCD_2DO_RENGLON;
 868:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
 869:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
 870:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
 871:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
 872:src/main.c    **** 			LCDTransmitStr(s_lcd);
 873:src/main.c    **** 			LED_OFF;
 874:src/main.c    **** 		}
 875:src/main.c    **** 
 876:src/main.c    **** 		UpdateTemp();
 877:src/main.c    **** 	}
 878:src/main.c    **** 	*/
 879:src/main.c    **** 	//---------- Fin prueba temp --------//
 880:src/main.c    **** 
 881:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
 882:src/main.c    **** 	/*
 883:src/main.c    **** 	local_meas = 0;
 884:src/main.c    **** 	while (1)
 885:src/main.c    **** 	{
 886:src/main.c    **** 		LCD_2DO_RENGLON;
 887:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
 888:src/main.c    **** 		fcalc = local_meas;
 889:src/main.c    **** 		fcalc = fcalc * K_1TO10;
 890:src/main.c    **** 		one_int = (short) fcalc;
 891:src/main.c    **** 		fcalc = fcalc - one_int;
 892:src/main.c    **** 		fcalc = fcalc * 10;
 893:src/main.c    **** 		one_dec = (short) fcalc;
 894:src/main.c    **** 
 895:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
 896:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
ARM GAS  /tmp/ccqMBOyg.s 			page 53


 897:src/main.c    **** 		LCDTransmitStr(s_lcd);
 898:src/main.c    **** 
 899:src/main.c    **** 		Wait_ms (1000);
 900:src/main.c    **** 		if (local_meas <= 255)
 901:src/main.c    **** 			local_meas = 0;
 902:src/main.c    **** 		else
 903:src/main.c    **** 			local_meas++;
 904:src/main.c    **** 	}
 905:src/main.c    **** 	*/
 906:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
 907:src/main.c    **** 
 908:src/main.c    **** 
 909:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
 910:src/main.c    **** 
 911:src/main.c    **** 	return 0;
 912:src/main.c    **** }
 913:src/main.c    **** 
 914:src/main.c    **** //--- End of Main ---//
 915:src/main.c    **** 
 916:src/main.c    **** 
 917:src/main.c    **** 
 918:src/main.c    **** 
 919:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
 920:src/main.c    **** {
 1045              		.loc 2 920 0
 1046              		.cfi_startproc
 1047 0000 00B5     		push	{lr}	@
 1048              	.LCFI6:
 1049              		.cfi_def_cfa_offset 4
 1050              		.cfi_offset 14, -4
 1051 0002 97B0     		sub	sp, sp, #92	@,,
 1052              	.LCFI7:
 1053              		.cfi_def_cfa_offset 96
 1054 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
 921:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1055              		.loc 2 921 0
 1056 0006 0123     		movs	r3, #1	@ tmp112,
 1057 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1058 000a 0223     		movs	r3, #2	@ tmp113,
 1059 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1060 000e 0323     		movs	r3, #3	@ tmp114,
 1061 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1062 0012 0423     		movs	r3, #4	@ tmp115,
 1063 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1064 0016 0523     		movs	r3, #5	@ tmp116,
 1065 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1066 001a 0623     		movs	r3, #6	@ tmp117,
 1067 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
 922:src/main.c    ****       char tempbuff[40];
 923:src/main.c    ****       volatile float HUMIDITY_Value;
 924:src/main.c    ****       volatile float TEMPERATURE_Value;
 925:src/main.c    ****       volatile float PRESSURE_Value;
 926:src/main.c    **** 
 927:src/main.c    **** 
 928:src/main.c    **** 
 929:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1068              		.loc 2 929 0
ARM GAS  /tmp/ccqMBOyg.s 			page 54


 1069 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1070 0020 1E4B     		ldr	r3, .L48	@ tmp119,
 1071 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1072 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1073 0026 1823     		movs	r3, #24	@ tmp122,
 1074 0028 1A00     		movs	r2, r3	@, tmp122
 1075 002a FFF7FEFF 		bl	memcpy	@
 930:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
 931:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
 932:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1076              		.loc 2 932 0
 1077 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1078 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1079 0032 1B49     		ldr	r1, .L48+4	@ tmp127,
 1080 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1081 0036 FFF7FEFF 		bl	sprintf	@
 933:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1082              		.loc 2 933 0
 1083 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1084 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1085 003e 1100     		movs	r1, r2	@, tmp129
 1086 0040 1800     		movs	r0, r3	@, tmp130
 1087 0042 FFF7FEFF 		bl	strcat	@
 934:src/main.c    **** 
 935:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
 936:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
 937:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1088              		.loc 2 937 0
 1089 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1090 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1091 004a 1649     		ldr	r1, .L48+8	@ tmp133,
 1092 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1093 004e FFF7FEFF 		bl	sprintf	@
 938:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1094              		.loc 2 938 0
 1095 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1096 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1097 0056 1100     		movs	r1, r2	@, tmp135
 1098 0058 1800     		movs	r0, r3	@, tmp136
 1099 005a FFF7FEFF 		bl	strcat	@
 939:src/main.c    **** 
 940:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
 941:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
 942:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1100              		.loc 2 942 0
 1101 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1102 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1103 0062 1149     		ldr	r1, .L48+12	@ tmp139,
 1104 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1105 0066 FFF7FEFF 		bl	sprintf	@
 943:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1106              		.loc 2 943 0
 1107 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1108 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1109 006e 1100     		movs	r1, r2	@, tmp141
 1110 0070 1800     		movs	r0, r3	@, tmp142
 1111 0072 FFF7FEFF 		bl	strcat	@
ARM GAS  /tmp/ccqMBOyg.s 			page 55


 944:src/main.c    **** 
 945:src/main.c    **** 
 946:src/main.c    ****       strcat((char *)buffer,"}}");
 1112              		.loc 2 946 0
 1113 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1114 0078 1800     		movs	r0, r3	@, tmp143
 1115 007a FFF7FEFF 		bl	strlen	@
 1116 007e 0300     		movs	r3, r0	@ tmp144,
 1117 0080 1A00     		movs	r2, r3	@ D.6967, tmp145
 1118 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1119 0084 9A18     		adds	r2, r3, r2	@ D.6968, tmp146, D.6967
 1120 0086 094B     		ldr	r3, .L48+16	@ tmp147,
 1121 0088 1000     		movs	r0, r2	@ tmp148, D.6968
 1122 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1123 008c 0323     		movs	r3, #3	@ tmp150,
 1124 008e 1A00     		movs	r2, r3	@, tmp150
 1125 0090 FFF7FEFF 		bl	memcpy	@
 947:src/main.c    **** 
 948:src/main.c    ****       return;
 1126              		.loc 2 948 0
 1127 0094 C046     		nop
 949:src/main.c    **** }
 1128              		.loc 2 949 0
 1129 0096 17B0     		add	sp, sp, #92	@,,
 1130              		@ sp needed	@
 1131 0098 00BD     		pop	{pc}
 1132              	.L49:
 1133 009a C046     		.align	2
 1134              	.L48:
 1135 009c BC000000 		.word	.LC22
 1136 00a0 D4000000 		.word	.LC24
 1137 00a4 F0000000 		.word	.LC26
 1138 00a8 08010000 		.word	.LC28
 1139 00ac 20010000 		.word	.LC30
 1140              		.cfi_endproc
 1141              	.LFE21:
 1142              		.size	prepare_json_pkt, .-prepare_json_pkt
 1143              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1144              		.align	2
 1145              		.global	TimingDelay_Decrement
 1146              		.code	16
 1147              		.thumb_func
 1148              		.type	TimingDelay_Decrement, %function
 1149              	TimingDelay_Decrement:
 1150              	.LFB22:
 950:src/main.c    **** 
 951:src/main.c    **** //void EXTI4_15_IRQHandler(void)
 952:src/main.c    **** //{
 953:src/main.c    **** //	unsigned short aux;
 954:src/main.c    **** //
 955:src/main.c    **** ////--- SOLO PRUEBA DE INTERRUPCIONES ---//
 956:src/main.c    **** ////	if (DMX_INPUT)
 957:src/main.c    **** ////		LED_ON;
 958:src/main.c    **** ////	else
 959:src/main.c    **** ////		LED_OFF;
 960:src/main.c    **** ////
 961:src/main.c    **** ////	EXTI->PR |= 0x0100;
ARM GAS  /tmp/ccqMBOyg.s 			page 56


 962:src/main.c    **** //
 963:src/main.c    **** //	if(EXTI->PR & 0x0100)	//Line8
 964:src/main.c    **** //	{
 965:src/main.c    **** //
 966:src/main.c    **** //		//si no esta con el USART detecta el flanco	PONER TIMEOUT ACA?????
 967:src/main.c    **** //		if ((dmx_receive_flag == 0) || (dmx_timeout_timer == 0))
 968:src/main.c    **** //		//if (dmx_receive_flag == 0)
 969:src/main.c    **** //		{
 970:src/main.c    **** //			switch (signal_state)
 971:src/main.c    **** //			{
 972:src/main.c    **** //				case IDLE:
 973:src/main.c    **** //					if (!(DMX_INPUT))
 974:src/main.c    **** //					{
 975:src/main.c    **** //						//Activo timer en Falling.
 976:src/main.c    **** //						TIM14->CNT = 0;
 977:src/main.c    **** //						TIM14->CR1 |= 0x0001;
 978:src/main.c    **** //						signal_state++;
 979:src/main.c    **** //					}
 980:src/main.c    **** //					break;
 981:src/main.c    **** //
 982:src/main.c    **** //				case LOOK_FOR_BREAK:
 983:src/main.c    **** //					if (DMX_INPUT)
 984:src/main.c    **** //					{
 985:src/main.c    **** //						//Desactivo timer en Rising.
 986:src/main.c    **** //						aux = TIM14->CNT;
 987:src/main.c    **** //
 988:src/main.c    **** //						//reviso BREAK
 989:src/main.c    **** //						//if (((tim_counter_65ms) || (aux > 88)) && (tim_counter_65ms <= 20))
 990:src/main.c    **** //						if ((aux > 87) && (aux < 210))	//Consola STARLET 6
 991:src/main.c    **** //						//if ((aux > 87) && (aux < 2000))		//Consola marca CODE tiene break 1.88ms
 992:src/main.c    **** //						{
 993:src/main.c    **** //							LED_ON;
 994:src/main.c    **** //							//Activo timer para ver MARK.
 995:src/main.c    **** //							//TIM2->CNT = 0;
 996:src/main.c    **** //							//TIM2->CR1 |= 0x0001;
 997:src/main.c    **** //
 998:src/main.c    **** //							signal_state++;
 999:src/main.c    **** //							//tengo el break, activo el puerto serie
1000:src/main.c    **** //							DMX_channel_received = 0;
1001:src/main.c    **** //							//dmx_receive_flag = 1;
1002:src/main.c    **** //
1003:src/main.c    **** //							dmx_timeout_timer = DMX_TIMEOUT;		//activo el timer cuando prendo el puerto serie
1004:src/main.c    **** //							//USARTx_RX_ENA;
1005:src/main.c    **** //						}
1006:src/main.c    **** //						else	//falso disparo
1007:src/main.c    **** //							signal_state = IDLE;
1008:src/main.c    **** //					}
1009:src/main.c    **** //					else	//falso disparo
1010:src/main.c    **** //						signal_state = IDLE;
1011:src/main.c    **** //
1012:src/main.c    **** //					TIM14->CR1 &= 0xFFFE;
1013:src/main.c    **** //					break;
1014:src/main.c    **** //
1015:src/main.c    **** //				case LOOK_FOR_MARK:
1016:src/main.c    **** //					if ((!(DMX_INPUT)) && (dmx_timeout_timer))	//termino Mark after break
1017:src/main.c    **** //					{
1018:src/main.c    **** //						//ya tenia el serie habilitado
ARM GAS  /tmp/ccqMBOyg.s 			page 57


1019:src/main.c    **** //						//if ((aux > 7) && (aux < 12))
1020:src/main.c    **** //						dmx_receive_flag = 1;
1021:src/main.c    **** //					}
1022:src/main.c    **** //					else	//falso disparo
1023:src/main.c    **** //					{
1024:src/main.c    **** //						//termine por timeout
1025:src/main.c    **** //						dmx_receive_flag = 0;
1026:src/main.c    **** //						//USARTx_RX_DISA;
1027:src/main.c    **** //					}
1028:src/main.c    **** //					signal_state = IDLE;
1029:src/main.c    **** //					LED_OFF;
1030:src/main.c    **** //					break;
1031:src/main.c    **** //
1032:src/main.c    **** //				default:
1033:src/main.c    **** //					signal_state = IDLE;
1034:src/main.c    **** //					break;
1035:src/main.c    **** //			}
1036:src/main.c    **** //		}
1037:src/main.c    **** //
1038:src/main.c    **** //		EXTI->PR |= 0x0100;
1039:src/main.c    **** //	}
1040:src/main.c    **** //}
1041:src/main.c    **** 
1042:src/main.c    **** void TimingDelay_Decrement(void)
1043:src/main.c    **** {
 1151              		.loc 2 1043 0
 1152              		.cfi_startproc
1044:src/main.c    **** 	if (wait_ms_var)
 1153              		.loc 2 1044 0
 1154 0000 3E4B     		ldr	r3, .L62	@ tmp139,
 1155 0002 1B88     		ldrh	r3, [r3]	@ tmp140, wait_ms_var
 1156 0004 9BB2     		uxth	r3, r3	@ D.6981, tmp140
 1157 0006 002B     		cmp	r3, #0	@ D.6981,
 1158 0008 06D0     		beq	.L51	@,
1045:src/main.c    **** 		wait_ms_var--;
 1159              		.loc 2 1045 0
 1160 000a 3C4B     		ldr	r3, .L62	@ tmp141,
 1161 000c 1B88     		ldrh	r3, [r3]	@ tmp142, wait_ms_var
 1162 000e 9BB2     		uxth	r3, r3	@ D.6981, tmp142
 1163 0010 013B     		subs	r3, r3, #1	@ tmp143,
 1164 0012 9AB2     		uxth	r2, r3	@ D.6981, tmp143
 1165 0014 394B     		ldr	r3, .L62	@ tmp144,
 1166 0016 1A80     		strh	r2, [r3]	@ tmp145, wait_ms_var
 1167              	.L51:
1046:src/main.c    **** 
1047:src/main.c    **** //	if (display_timer)
1048:src/main.c    **** //		display_timer--;
1049:src/main.c    **** 
1050:src/main.c    **** 	if (timer_standby)
 1168              		.loc 2 1050 0
 1169 0018 394B     		ldr	r3, .L62+4	@ tmp146,
 1170 001a 1B88     		ldrh	r3, [r3]	@ tmp147, timer_standby
 1171 001c 9BB2     		uxth	r3, r3	@ D.6981, tmp147
 1172 001e 002B     		cmp	r3, #0	@ D.6981,
 1173 0020 06D0     		beq	.L52	@,
1051:src/main.c    **** 		timer_standby--;
 1174              		.loc 2 1051 0
ARM GAS  /tmp/ccqMBOyg.s 			page 58


 1175 0022 374B     		ldr	r3, .L62+4	@ tmp148,
 1176 0024 1B88     		ldrh	r3, [r3]	@ tmp149, timer_standby
 1177 0026 9BB2     		uxth	r3, r3	@ D.6981, tmp149
 1178 0028 013B     		subs	r3, r3, #1	@ tmp150,
 1179 002a 9AB2     		uxth	r2, r3	@ D.6981, tmp150
 1180 002c 344B     		ldr	r3, .L62+4	@ tmp151,
 1181 002e 1A80     		strh	r2, [r3]	@ tmp152, timer_standby
 1182              	.L52:
1052:src/main.c    **** 
1053:src/main.c    **** 	if (acswitch_timer)
 1183              		.loc 2 1053 0
 1184 0030 344B     		ldr	r3, .L62+8	@ tmp153,
 1185 0032 1B78     		ldrb	r3, [r3]	@ tmp154, acswitch_timer
 1186 0034 DBB2     		uxtb	r3, r3	@ D.6982, tmp154
 1187 0036 002B     		cmp	r3, #0	@ D.6982,
 1188 0038 06D0     		beq	.L53	@,
1054:src/main.c    **** 		acswitch_timer--;
 1189              		.loc 2 1054 0
 1190 003a 324B     		ldr	r3, .L62+8	@ tmp155,
 1191 003c 1B78     		ldrb	r3, [r3]	@ tmp156, acswitch_timer
 1192 003e DBB2     		uxtb	r3, r3	@ D.6982, tmp156
 1193 0040 013B     		subs	r3, r3, #1	@ tmp157,
 1194 0042 DAB2     		uxtb	r2, r3	@ D.6982, tmp157
 1195 0044 2F4B     		ldr	r3, .L62+8	@ tmp158,
 1196 0046 1A70     		strb	r2, [r3]	@ tmp159, acswitch_timer
 1197              	.L53:
1055:src/main.c    **** 
1056:src/main.c    **** 	if (tt_take_photo_sample)
 1198              		.loc 2 1056 0
 1199 0048 2F4B     		ldr	r3, .L62+12	@ tmp160,
 1200 004a 1B88     		ldrh	r3, [r3]	@ tmp161, tt_take_photo_sample
 1201 004c 9BB2     		uxth	r3, r3	@ D.6981, tmp161
 1202 004e 002B     		cmp	r3, #0	@ D.6981,
 1203 0050 06D0     		beq	.L54	@,
1057:src/main.c    **** 		tt_take_photo_sample--;
 1204              		.loc 2 1057 0
 1205 0052 2D4B     		ldr	r3, .L62+12	@ tmp162,
 1206 0054 1B88     		ldrh	r3, [r3]	@ tmp163, tt_take_photo_sample
 1207 0056 9BB2     		uxth	r3, r3	@ D.6981, tmp163
 1208 0058 013B     		subs	r3, r3, #1	@ tmp164,
 1209 005a 9AB2     		uxth	r2, r3	@ D.6981, tmp164
 1210 005c 2A4B     		ldr	r3, .L62+12	@ tmp165,
 1211 005e 1A80     		strh	r2, [r3]	@ tmp166, tt_take_photo_sample
 1212              	.L54:
1058:src/main.c    **** 
1059:src/main.c    **** 	if (tt_relay_on_off)
 1213              		.loc 2 1059 0
 1214 0060 2A4B     		ldr	r3, .L62+16	@ tmp167,
 1215 0062 1B88     		ldrh	r3, [r3]	@ tmp168, tt_relay_on_off
 1216 0064 9BB2     		uxth	r3, r3	@ D.6981, tmp168
 1217 0066 002B     		cmp	r3, #0	@ D.6981,
 1218 0068 06D0     		beq	.L55	@,
1060:src/main.c    **** 		tt_relay_on_off--;
 1219              		.loc 2 1060 0
 1220 006a 284B     		ldr	r3, .L62+16	@ tmp169,
 1221 006c 1B88     		ldrh	r3, [r3]	@ tmp170, tt_relay_on_off
 1222 006e 9BB2     		uxth	r3, r3	@ D.6981, tmp170
ARM GAS  /tmp/ccqMBOyg.s 			page 59


 1223 0070 013B     		subs	r3, r3, #1	@ tmp171,
 1224 0072 9AB2     		uxth	r2, r3	@ D.6981, tmp171
 1225 0074 254B     		ldr	r3, .L62+16	@ tmp172,
 1226 0076 1A80     		strh	r2, [r3]	@ tmp173, tt_relay_on_off
 1227              	.L55:
1061:src/main.c    **** 
1062:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1063:src/main.c    **** 	if (tt_take_temp_sample)
1064:src/main.c    **** 		tt_take_temp_sample--;
1065:src/main.c    **** #endif
1066:src/main.c    **** 
1067:src/main.c    **** 	if (take_temp_sample)
 1228              		.loc 2 1067 0
 1229 0078 254B     		ldr	r3, .L62+20	@ tmp174,
 1230 007a 1B88     		ldrh	r3, [r3]	@ tmp175, take_temp_sample
 1231 007c 9BB2     		uxth	r3, r3	@ D.6981, tmp175
 1232 007e 002B     		cmp	r3, #0	@ D.6981,
 1233 0080 06D0     		beq	.L56	@,
1068:src/main.c    **** 		take_temp_sample--;
 1234              		.loc 2 1068 0
 1235 0082 234B     		ldr	r3, .L62+20	@ tmp176,
 1236 0084 1B88     		ldrh	r3, [r3]	@ tmp177, take_temp_sample
 1237 0086 9BB2     		uxth	r3, r3	@ D.6981, tmp177
 1238 0088 013B     		subs	r3, r3, #1	@ tmp178,
 1239 008a 9AB2     		uxth	r2, r3	@ D.6981, tmp178
 1240 008c 204B     		ldr	r3, .L62+20	@ tmp179,
 1241 008e 1A80     		strh	r2, [r3]	@ tmp180, take_temp_sample
 1242              	.L56:
1069:src/main.c    **** 
1070:src/main.c    **** 	if (filter_timer)
 1243              		.loc 2 1070 0
 1244 0090 204B     		ldr	r3, .L62+24	@ tmp181,
 1245 0092 1B78     		ldrb	r3, [r3]	@ tmp182, filter_timer
 1246 0094 DBB2     		uxtb	r3, r3	@ D.6982, tmp182
 1247 0096 002B     		cmp	r3, #0	@ D.6982,
 1248 0098 06D0     		beq	.L57	@,
1071:src/main.c    **** 		filter_timer--;
 1249              		.loc 2 1071 0
 1250 009a 1E4B     		ldr	r3, .L62+24	@ tmp183,
 1251 009c 1B78     		ldrb	r3, [r3]	@ tmp184, filter_timer
 1252 009e DBB2     		uxtb	r3, r3	@ D.6982, tmp184
 1253 00a0 013B     		subs	r3, r3, #1	@ tmp185,
 1254 00a2 DAB2     		uxtb	r2, r3	@ D.6982, tmp185
 1255 00a4 1B4B     		ldr	r3, .L62+24	@ tmp186,
 1256 00a6 1A70     		strb	r2, [r3]	@ tmp187, filter_timer
 1257              	.L57:
1072:src/main.c    **** 
1073:src/main.c    **** 	//cuenta de a 1 minuto
1074:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 1258              		.loc 2 1074 0
 1259 00a8 1B4B     		ldr	r3, .L62+28	@ tmp188,
 1260 00aa 1B88     		ldrh	r3, [r3]	@ tmp189, secs
 1261 00ac 9BB2     		uxth	r3, r3	@ D.6981, tmp189
 1262 00ae 1B4A     		ldr	r2, .L62+32	@ tmp190,
 1263 00b0 9342     		cmp	r3, r2	@ D.6981, tmp190
 1264 00b2 0AD9     		bls	.L58	@,
1075:src/main.c    **** 	{
ARM GAS  /tmp/ccqMBOyg.s 			page 60


1076:src/main.c    **** 		minutes++;
 1265              		.loc 2 1076 0
 1266 00b4 1A4B     		ldr	r3, .L62+36	@ tmp191,
 1267 00b6 1B78     		ldrb	r3, [r3]	@ tmp192, minutes
 1268 00b8 DBB2     		uxtb	r3, r3	@ D.6982, tmp192
 1269 00ba 0133     		adds	r3, r3, #1	@ tmp193,
 1270 00bc DAB2     		uxtb	r2, r3	@ D.6982, tmp193
 1271 00be 184B     		ldr	r3, .L62+36	@ tmp194,
 1272 00c0 1A70     		strb	r2, [r3]	@ tmp195, minutes
1077:src/main.c    **** 		secs = 0;
 1273              		.loc 2 1077 0
 1274 00c2 154B     		ldr	r3, .L62+28	@ tmp196,
 1275 00c4 0022     		movs	r2, #0	@ tmp197,
 1276 00c6 1A80     		strh	r2, [r3]	@ tmp198, secs
 1277 00c8 06E0     		b	.L59	@
 1278              	.L58:
1078:src/main.c    **** 	}
1079:src/main.c    **** 	else
1080:src/main.c    **** 		secs++;
 1279              		.loc 2 1080 0
 1280 00ca 134B     		ldr	r3, .L62+28	@ tmp199,
 1281 00cc 1B88     		ldrh	r3, [r3]	@ tmp200, secs
 1282 00ce 9BB2     		uxth	r3, r3	@ D.6981, tmp200
 1283 00d0 0133     		adds	r3, r3, #1	@ tmp201,
 1284 00d2 9AB2     		uxth	r2, r3	@ D.6981, tmp201
 1285 00d4 104B     		ldr	r3, .L62+28	@ tmp202,
 1286 00d6 1A80     		strh	r2, [r3]	@ tmp203, secs
 1287              	.L59:
1081:src/main.c    **** 
1082:src/main.c    **** 	if (minutes > 60)
 1288              		.loc 2 1082 0
 1289 00d8 114B     		ldr	r3, .L62+36	@ tmp204,
 1290 00da 1B78     		ldrb	r3, [r3]	@ tmp205, minutes
 1291 00dc DBB2     		uxtb	r3, r3	@ D.6982, tmp205
 1292 00de 3C2B     		cmp	r3, #60	@ D.6982,
 1293 00e0 09D9     		bls	.L61	@,
1083:src/main.c    **** 	{
1084:src/main.c    **** 		hours++;
 1294              		.loc 2 1084 0
 1295 00e2 104B     		ldr	r3, .L62+40	@ tmp206,
 1296 00e4 1B78     		ldrb	r3, [r3]	@ tmp207, hours
 1297 00e6 DBB2     		uxtb	r3, r3	@ D.6982, tmp207
 1298 00e8 0133     		adds	r3, r3, #1	@ tmp208,
 1299 00ea DAB2     		uxtb	r2, r3	@ D.6982, tmp208
 1300 00ec 0D4B     		ldr	r3, .L62+40	@ tmp209,
 1301 00ee 1A70     		strb	r2, [r3]	@ tmp210, hours
1085:src/main.c    **** 		minutes = 0;
 1302              		.loc 2 1085 0
 1303 00f0 0B4B     		ldr	r3, .L62+36	@ tmp211,
 1304 00f2 0022     		movs	r2, #0	@ tmp212,
 1305 00f4 1A70     		strb	r2, [r3]	@ tmp213, minutes
 1306              	.L61:
1086:src/main.c    **** 	}
1087:src/main.c    **** 
1088:src/main.c    **** 
1089:src/main.c    **** #ifdef USE_MQTT_LIB
1090:src/main.c    **** 	//timer del MQTT
ARM GAS  /tmp/ccqMBOyg.s 			page 61


1091:src/main.c    **** 	SysTickIntHandler();
1092:src/main.c    **** #endif
1093:src/main.c    **** 
1094:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1095:src/main.c    **** 	if (usart1_mini_timeout)
1096:src/main.c    **** 		usart1_mini_timeout--;
1097:src/main.c    **** 	if (usart2_mini_timeout)
1098:src/main.c    **** 		usart2_mini_timeout--;
1099:src/main.c    **** #endif
1100:src/main.c    **** #ifdef USE_GPS
1101:src/main.c    **** 	GPSTimeoutCounters ();
1102:src/main.c    **** #endif
1103:src/main.c    **** 
1104:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1105:src/main.c    **** 	GSMTimeoutCounters ();
1106:src/main.c    **** #endif
1107:src/main.c    **** }
 1307              		.loc 2 1107 0
 1308 00f6 C046     		nop
 1309              		@ sp needed	@
 1310 00f8 7047     		bx	lr
 1311              	.L63:
 1312 00fa C046     		.align	2
 1313              	.L62:
 1314 00fc 00000000 		.word	wait_ms_var
 1315 0100 00000000 		.word	timer_standby
 1316 0104 00000000 		.word	acswitch_timer
 1317 0108 00000000 		.word	tt_take_photo_sample
 1318 010c 00000000 		.word	tt_relay_on_off
 1319 0110 00000000 		.word	take_temp_sample
 1320 0114 00000000 		.word	filter_timer
 1321 0118 00000000 		.word	secs
 1322 011c 5FEA0000 		.word	59999
 1323 0120 00000000 		.word	minutes
 1324 0124 00000000 		.word	hours
 1325              		.cfi_endproc
 1326              	.LFE22:
 1327              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1328              		.text
 1329              	.Letext0:
 1330              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1331              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1332              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1333              		.file 6 "src/hard.h"
 1334              		.file 7 "src/flash_program.h"
 1335              		.file 8 "src/tcp_transceiver.h"
 1336              		.section	.debug_info,"",%progbits
 1337              	.Ldebug_info0:
 1338 0000 CD0C0000 		.4byte	0xccd
 1339 0004 0200     		.2byte	0x2
 1340 0006 00000000 		.4byte	.Ldebug_abbrev0
 1341 000a 04       		.byte	0x4
 1342 000b 01       		.uleb128 0x1
 1343 000c 1A080000 		.4byte	.LASF181
 1344 0010 0C       		.byte	0xc
 1345 0011 E7070000 		.4byte	.LASF182
 1346 0015 60060000 		.4byte	.LASF183
ARM GAS  /tmp/ccqMBOyg.s 			page 62


 1347 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1348 001d 00000000 		.4byte	0
 1349 0021 00000000 		.4byte	0
 1350 0025 00000000 		.4byte	.Ldebug_line0
 1351 0029 02       		.uleb128 0x2
 1352 002a D6040000 		.4byte	.LASF106
 1353 002e 01       		.byte	0x1
 1354 002f 06010000 		.4byte	0x106
 1355 0033 03       		.byte	0x3
 1356 0034 C7       		.byte	0xc7
 1357 0035 06010000 		.4byte	0x106
 1358 0039 03       		.uleb128 0x3
 1359 003a 59050000 		.4byte	.LASF0
 1360 003e 72       		.sleb128 -14
 1361 003f 03       		.uleb128 0x3
 1362 0040 DB080000 		.4byte	.LASF1
 1363 0044 73       		.sleb128 -13
 1364 0045 03       		.uleb128 0x3
 1365 0046 D3000000 		.4byte	.LASF2
 1366 004a 7B       		.sleb128 -5
 1367 004b 03       		.uleb128 0x3
 1368 004c A0010000 		.4byte	.LASF3
 1369 0050 7E       		.sleb128 -2
 1370 0051 03       		.uleb128 0x3
 1371 0052 07060000 		.4byte	.LASF4
 1372 0056 7F       		.sleb128 -1
 1373 0057 04       		.uleb128 0x4
 1374 0058 B7030000 		.4byte	.LASF5
 1375 005c 00       		.byte	0
 1376 005d 04       		.uleb128 0x4
 1377 005e 62040000 		.4byte	.LASF6
 1378 0062 01       		.byte	0x1
 1379 0063 04       		.uleb128 0x4
 1380 0064 FF040000 		.4byte	.LASF7
 1381 0068 02       		.byte	0x2
 1382 0069 04       		.uleb128 0x4
 1383 006a 3A010000 		.4byte	.LASF8
 1384 006e 03       		.byte	0x3
 1385 006f 04       		.uleb128 0x4
 1386 0070 AC010000 		.4byte	.LASF9
 1387 0074 04       		.byte	0x4
 1388 0075 04       		.uleb128 0x4
 1389 0076 6C010000 		.4byte	.LASF10
 1390 007a 05       		.byte	0x5
 1391 007b 04       		.uleb128 0x4
 1392 007c B0000000 		.4byte	.LASF11
 1393 0080 06       		.byte	0x6
 1394 0081 04       		.uleb128 0x4
 1395 0082 86000000 		.4byte	.LASF12
 1396 0086 07       		.byte	0x7
 1397 0087 04       		.uleb128 0x4
 1398 0088 2D040000 		.4byte	.LASF13
 1399 008c 08       		.byte	0x8
 1400 008d 04       		.uleb128 0x4
 1401 008e 3A030000 		.4byte	.LASF14
 1402 0092 09       		.byte	0x9
 1403 0093 04       		.uleb128 0x4
ARM GAS  /tmp/ccqMBOyg.s 			page 63


 1404 0094 DB060000 		.4byte	.LASF15
 1405 0098 0A       		.byte	0xa
 1406 0099 04       		.uleb128 0x4
 1407 009a B6050000 		.4byte	.LASF16
 1408 009e 0B       		.byte	0xb
 1409 009f 04       		.uleb128 0x4
 1410 00a0 86040000 		.4byte	.LASF17
 1411 00a4 0C       		.byte	0xc
 1412 00a5 04       		.uleb128 0x4
 1413 00a6 40040000 		.4byte	.LASF18
 1414 00aa 0D       		.byte	0xd
 1415 00ab 04       		.uleb128 0x4
 1416 00ac 76050000 		.4byte	.LASF19
 1417 00b0 0E       		.byte	0xe
 1418 00b1 04       		.uleb128 0x4
 1419 00b2 47060000 		.4byte	.LASF20
 1420 00b6 0F       		.byte	0xf
 1421 00b7 04       		.uleb128 0x4
 1422 00b8 30030000 		.4byte	.LASF21
 1423 00bc 10       		.byte	0x10
 1424 00bd 04       		.uleb128 0x4
 1425 00be F8060000 		.4byte	.LASF22
 1426 00c2 11       		.byte	0x11
 1427 00c3 04       		.uleb128 0x4
 1428 00c4 D0060000 		.4byte	.LASF23
 1429 00c8 13       		.byte	0x13
 1430 00c9 04       		.uleb128 0x4
 1431 00ca 65030000 		.4byte	.LASF24
 1432 00ce 14       		.byte	0x14
 1433 00cf 04       		.uleb128 0x4
 1434 00d0 0C010000 		.4byte	.LASF25
 1435 00d4 15       		.byte	0x15
 1436 00d5 04       		.uleb128 0x4
 1437 00d6 9F050000 		.4byte	.LASF26
 1438 00da 16       		.byte	0x16
 1439 00db 04       		.uleb128 0x4
 1440 00dc 96010000 		.4byte	.LASF27
 1441 00e0 17       		.byte	0x17
 1442 00e1 04       		.uleb128 0x4
 1443 00e2 2B060000 		.4byte	.LASF28
 1444 00e6 18       		.byte	0x18
 1445 00e7 04       		.uleb128 0x4
 1446 00e8 E6010000 		.4byte	.LASF29
 1447 00ec 19       		.byte	0x19
 1448 00ed 04       		.uleb128 0x4
 1449 00ee 9C070000 		.4byte	.LASF30
 1450 00f2 1A       		.byte	0x1a
 1451 00f3 04       		.uleb128 0x4
 1452 00f4 4D050000 		.4byte	.LASF31
 1453 00f8 1B       		.byte	0x1b
 1454 00f9 04       		.uleb128 0x4
 1455 00fa 66020000 		.4byte	.LASF32
 1456 00fe 1C       		.byte	0x1c
 1457 00ff 04       		.uleb128 0x4
 1458 0100 14060000 		.4byte	.LASF33
 1459 0104 1E       		.byte	0x1e
 1460 0105 00       		.byte	0
ARM GAS  /tmp/ccqMBOyg.s 			page 64


 1461 0106 05       		.uleb128 0x5
 1462 0107 01       		.byte	0x1
 1463 0108 06       		.byte	0x6
 1464 0109 DB070000 		.4byte	.LASF36
 1465 010d 06       		.uleb128 0x6
 1466 010e 50020000 		.4byte	.LASF34
 1467 0112 03       		.byte	0x3
 1468 0113 5F01     		.2byte	0x15f
 1469 0115 29000000 		.4byte	0x29
 1470 0119 07       		.uleb128 0x7
 1471 011a D1050000 		.4byte	.LASF35
 1472 011e 04       		.byte	0x4
 1473 011f 1D       		.byte	0x1d
 1474 0120 24010000 		.4byte	0x124
 1475 0124 05       		.uleb128 0x5
 1476 0125 01       		.byte	0x1
 1477 0126 08       		.byte	0x8
 1478 0127 06070000 		.4byte	.LASF37
 1479 012b 05       		.uleb128 0x5
 1480 012c 02       		.byte	0x2
 1481 012d 05       		.byte	0x5
 1482 012e 3A050000 		.4byte	.LASF38
 1483 0132 07       		.uleb128 0x7
 1484 0133 1E020000 		.4byte	.LASF39
 1485 0137 04       		.byte	0x4
 1486 0138 2B       		.byte	0x2b
 1487 0139 3D010000 		.4byte	0x13d
 1488 013d 05       		.uleb128 0x5
 1489 013e 02       		.byte	0x2
 1490 013f 07       		.byte	0x7
 1491 0140 07080000 		.4byte	.LASF40
 1492 0144 07       		.uleb128 0x7
 1493 0145 28010000 		.4byte	.LASF41
 1494 0149 04       		.byte	0x4
 1495 014a 3F       		.byte	0x3f
 1496 014b 4F010000 		.4byte	0x14f
 1497 014f 05       		.uleb128 0x5
 1498 0150 04       		.byte	0x4
 1499 0151 05       		.byte	0x5
 1500 0152 44050000 		.4byte	.LASF42
 1501 0156 07       		.uleb128 0x7
 1502 0157 1D070000 		.4byte	.LASF43
 1503 015b 04       		.byte	0x4
 1504 015c 41       		.byte	0x41
 1505 015d 61010000 		.4byte	0x161
 1506 0161 05       		.uleb128 0x5
 1507 0162 04       		.byte	0x4
 1508 0163 07       		.byte	0x7
 1509 0164 35060000 		.4byte	.LASF44
 1510 0168 05       		.uleb128 0x5
 1511 0169 08       		.byte	0x8
 1512 016a 05       		.byte	0x5
 1513 016b A9030000 		.4byte	.LASF45
 1514 016f 05       		.uleb128 0x5
 1515 0170 08       		.byte	0x8
 1516 0171 07       		.byte	0x7
 1517 0172 F0010000 		.4byte	.LASF46
ARM GAS  /tmp/ccqMBOyg.s 			page 65


 1518 0176 08       		.uleb128 0x8
 1519 0177 04       		.byte	0x4
 1520 0178 05       		.byte	0x5
 1521 0179 696E7400 		.ascii	"int\000"
 1522 017d 05       		.uleb128 0x5
 1523 017e 04       		.byte	0x4
 1524 017f 07       		.byte	0x7
 1525 0180 FA000000 		.4byte	.LASF47
 1526 0184 07       		.uleb128 0x7
 1527 0185 70030000 		.4byte	.LASF48
 1528 0189 05       		.byte	0x5
 1529 018a 14       		.byte	0x14
 1530 018b 19010000 		.4byte	0x119
 1531 018f 07       		.uleb128 0x7
 1532 0190 CD040000 		.4byte	.LASF49
 1533 0194 05       		.byte	0x5
 1534 0195 1A       		.byte	0x1a
 1535 0196 32010000 		.4byte	0x132
 1536 019a 07       		.uleb128 0x7
 1537 019b A4060000 		.4byte	.LASF50
 1538 019f 05       		.byte	0x5
 1539 01a0 1F       		.byte	0x1f
 1540 01a1 44010000 		.4byte	0x144
 1541 01a5 07       		.uleb128 0x7
 1542 01a6 C4010000 		.4byte	.LASF51
 1543 01aa 05       		.byte	0x5
 1544 01ab 20       		.byte	0x20
 1545 01ac 56010000 		.4byte	0x156
 1546 01b0 09       		.uleb128 0x9
 1547 01b1 2003     		.2byte	0x320
 1548 01b3 01       		.byte	0x1
 1549 01b4 71       		.byte	0x71
 1550 01b5 4D020000 		.4byte	0x24d
 1551 01b9 0A       		.uleb128 0xa
 1552 01ba CD010000 		.4byte	.LASF52
 1553 01be 01       		.byte	0x1
 1554 01bf 73       		.byte	0x73
 1555 01c0 64020000 		.4byte	0x264
 1556 01c4 02       		.byte	0x2
 1557 01c5 23       		.byte	0x23
 1558 01c6 00       		.uleb128 0
 1559 01c7 0A       		.uleb128 0xa
 1560 01c8 08050000 		.4byte	.LASF53
 1561 01cc 01       		.byte	0x1
 1562 01cd 74       		.byte	0x74
 1563 01ce 69020000 		.4byte	0x269
 1564 01d2 02       		.byte	0x2
 1565 01d3 23       		.byte	0x23
 1566 01d4 04       		.uleb128 0x4
 1567 01d5 0A       		.uleb128 0xa
 1568 01d6 8C070000 		.4byte	.LASF54
 1569 01da 01       		.byte	0x1
 1570 01db 75       		.byte	0x75
 1571 01dc 79020000 		.4byte	0x279
 1572 01e0 03       		.byte	0x3
 1573 01e1 23       		.byte	0x23
 1574 01e2 8001     		.uleb128 0x80
ARM GAS  /tmp/ccqMBOyg.s 			page 66


 1575 01e4 0A       		.uleb128 0xa
 1576 01e5 DD010000 		.4byte	.LASF55
 1577 01e9 01       		.byte	0x1
 1578 01ea 76       		.byte	0x76
 1579 01eb 69020000 		.4byte	0x269
 1580 01ef 03       		.byte	0x3
 1581 01f0 23       		.byte	0x23
 1582 01f1 8401     		.uleb128 0x84
 1583 01f3 0A       		.uleb128 0xa
 1584 01f4 EA080000 		.4byte	.LASF56
 1585 01f8 01       		.byte	0x1
 1586 01f9 77       		.byte	0x77
 1587 01fa 7E020000 		.4byte	0x27e
 1588 01fe 03       		.byte	0x3
 1589 01ff 23       		.byte	0x23
 1590 0200 8002     		.uleb128 0x100
 1591 0202 0A       		.uleb128 0xa
 1592 0203 1C050000 		.4byte	.LASF57
 1593 0207 01       		.byte	0x1
 1594 0208 78       		.byte	0x78
 1595 0209 69020000 		.4byte	0x269
 1596 020d 03       		.byte	0x3
 1597 020e 23       		.byte	0x23
 1598 020f 8402     		.uleb128 0x104
 1599 0211 0A       		.uleb128 0xa
 1600 0212 81040000 		.4byte	.LASF58
 1601 0216 01       		.byte	0x1
 1602 0217 79       		.byte	0x79
 1603 0218 83020000 		.4byte	0x283
 1604 021c 03       		.byte	0x3
 1605 021d 23       		.byte	0x23
 1606 021e 8003     		.uleb128 0x180
 1607 0220 0A       		.uleb128 0xa
 1608 0221 26050000 		.4byte	.LASF59
 1609 0225 01       		.byte	0x1
 1610 0226 7A       		.byte	0x7a
 1611 0227 69020000 		.4byte	0x269
 1612 022b 03       		.byte	0x3
 1613 022c 23       		.byte	0x23
 1614 022d 8403     		.uleb128 0x184
 1615 022f 0A       		.uleb128 0xa
 1616 0230 30050000 		.4byte	.LASF60
 1617 0234 01       		.byte	0x1
 1618 0235 7B       		.byte	0x7b
 1619 0236 88020000 		.4byte	0x288
 1620 023a 03       		.byte	0x3
 1621 023b 23       		.byte	0x23
 1622 023c 8004     		.uleb128 0x200
 1623 023e 0B       		.uleb128 0xb
 1624 023f 495000   		.ascii	"IP\000"
 1625 0242 01       		.byte	0x1
 1626 0243 7C       		.byte	0x7c
 1627 0244 A8020000 		.4byte	0x2a8
 1628 0248 03       		.byte	0x3
 1629 0249 23       		.byte	0x23
 1630 024a 8006     		.uleb128 0x300
 1631 024c 00       		.byte	0
ARM GAS  /tmp/ccqMBOyg.s 			page 67


 1632 024d 0C       		.uleb128 0xc
 1633 024e A5010000 		.4byte	0x1a5
 1634 0252 5D020000 		.4byte	0x25d
 1635 0256 0D       		.uleb128 0xd
 1636 0257 5D020000 		.4byte	0x25d
 1637 025b 00       		.byte	0
 1638 025c 00       		.byte	0
 1639 025d 05       		.uleb128 0x5
 1640 025e 04       		.byte	0x4
 1641 025f 07       		.byte	0x7
 1642 0260 1D060000 		.4byte	.LASF61
 1643 0264 0E       		.uleb128 0xe
 1644 0265 4D020000 		.4byte	0x24d
 1645 0269 0C       		.uleb128 0xc
 1646 026a A5010000 		.4byte	0x1a5
 1647 026e 79020000 		.4byte	0x279
 1648 0272 0D       		.uleb128 0xd
 1649 0273 5D020000 		.4byte	0x25d
 1650 0277 1E       		.byte	0x1e
 1651 0278 00       		.byte	0
 1652 0279 0E       		.uleb128 0xe
 1653 027a 4D020000 		.4byte	0x24d
 1654 027e 0E       		.uleb128 0xe
 1655 027f 4D020000 		.4byte	0x24d
 1656 0283 0E       		.uleb128 0xe
 1657 0284 4D020000 		.4byte	0x24d
 1658 0288 0C       		.uleb128 0xc
 1659 0289 A5010000 		.4byte	0x1a5
 1660 028d 98020000 		.4byte	0x298
 1661 0291 0D       		.uleb128 0xd
 1662 0292 5D020000 		.4byte	0x25d
 1663 0296 3F       		.byte	0x3f
 1664 0297 00       		.byte	0
 1665 0298 0C       		.uleb128 0xc
 1666 0299 A5010000 		.4byte	0x1a5
 1667 029d A8020000 		.4byte	0x2a8
 1668 02a1 0D       		.uleb128 0xd
 1669 02a2 5D020000 		.4byte	0x25d
 1670 02a6 07       		.byte	0x7
 1671 02a7 00       		.byte	0
 1672 02a8 0E       		.uleb128 0xe
 1673 02a9 98020000 		.4byte	0x298
 1674 02ad 07       		.uleb128 0x7
 1675 02ae E7050000 		.4byte	.LASF62
 1676 02b2 01       		.byte	0x1
 1677 02b3 7D       		.byte	0x7d
 1678 02b4 B0010000 		.4byte	0x1b0
 1679 02b8 0F       		.uleb128 0xf
 1680 02b9 34       		.byte	0x34
 1681 02ba 01       		.byte	0x1
 1682 02bb 86       		.byte	0x86
 1683 02bc 5B030000 		.4byte	0x35b
 1684 02c0 0A       		.uleb128 0xa
 1685 02c1 72020000 		.4byte	.LASF63
 1686 02c5 01       		.byte	0x1
 1687 02c6 88       		.byte	0x88
 1688 02c7 60030000 		.4byte	0x360
ARM GAS  /tmp/ccqMBOyg.s 			page 68


 1689 02cb 02       		.byte	0x2
 1690 02cc 23       		.byte	0x23
 1691 02cd 00       		.uleb128 0
 1692 02ce 0A       		.uleb128 0xa
 1693 02cf 26060000 		.4byte	.LASF64
 1694 02d3 01       		.byte	0x1
 1695 02d4 89       		.byte	0x89
 1696 02d5 5B030000 		.4byte	0x35b
 1697 02d9 02       		.byte	0x2
 1698 02da 23       		.byte	0x23
 1699 02db 04       		.uleb128 0x4
 1700 02dc 0A       		.uleb128 0xa
 1701 02dd 08050000 		.4byte	.LASF53
 1702 02e1 01       		.byte	0x1
 1703 02e2 8A       		.byte	0x8a
 1704 02e3 A5010000 		.4byte	0x1a5
 1705 02e7 02       		.byte	0x2
 1706 02e8 23       		.byte	0x23
 1707 02e9 08       		.uleb128 0x8
 1708 02ea 0A       		.uleb128 0xa
 1709 02eb 19030000 		.4byte	.LASF65
 1710 02ef 01       		.byte	0x1
 1711 02f0 8B       		.byte	0x8b
 1712 02f1 5B030000 		.4byte	0x35b
 1713 02f5 02       		.byte	0x2
 1714 02f6 23       		.byte	0x23
 1715 02f7 0C       		.uleb128 0xc
 1716 02f8 0B       		.uleb128 0xb
 1717 02f9 53435200 		.ascii	"SCR\000"
 1718 02fd 01       		.byte	0x1
 1719 02fe 8C       		.byte	0x8c
 1720 02ff 5B030000 		.4byte	0x35b
 1721 0303 02       		.byte	0x2
 1722 0304 23       		.byte	0x23
 1723 0305 10       		.uleb128 0x10
 1724 0306 0B       		.uleb128 0xb
 1725 0307 43435200 		.ascii	"CCR\000"
 1726 030b 01       		.byte	0x1
 1727 030c 8D       		.byte	0x8d
 1728 030d 5B030000 		.4byte	0x35b
 1729 0311 02       		.byte	0x2
 1730 0312 23       		.byte	0x23
 1731 0313 14       		.uleb128 0x14
 1732 0314 0A       		.uleb128 0xa
 1733 0315 12050000 		.4byte	.LASF66
 1734 0319 01       		.byte	0x1
 1735 031a 8E       		.byte	0x8e
 1736 031b A5010000 		.4byte	0x1a5
 1737 031f 02       		.byte	0x2
 1738 0320 23       		.byte	0x23
 1739 0321 18       		.uleb128 0x18
 1740 0322 0B       		.uleb128 0xb
 1741 0323 53485000 		.ascii	"SHP\000"
 1742 0327 01       		.byte	0x1
 1743 0328 8F       		.byte	0x8f
 1744 0329 75030000 		.4byte	0x375
 1745 032d 02       		.byte	0x2
ARM GAS  /tmp/ccqMBOyg.s 			page 69


 1746 032e 23       		.byte	0x23
 1747 032f 1C       		.uleb128 0x1c
 1748 0330 0A       		.uleb128 0xa
 1749 0331 C1030000 		.4byte	.LASF67
 1750 0335 01       		.byte	0x1
 1751 0336 90       		.byte	0x90
 1752 0337 5B030000 		.4byte	0x35b
 1753 033b 02       		.byte	0x2
 1754 033c 23       		.byte	0x23
 1755 033d 24       		.uleb128 0x24
 1756 033e 0A       		.uleb128 0xa
 1757 033f 1C050000 		.4byte	.LASF57
 1758 0343 01       		.byte	0x1
 1759 0344 91       		.byte	0x91
 1760 0345 65030000 		.4byte	0x365
 1761 0349 02       		.byte	0x2
 1762 034a 23       		.byte	0x23
 1763 034b 28       		.uleb128 0x28
 1764 034c 0A       		.uleb128 0xa
 1765 034d 07020000 		.4byte	.LASF68
 1766 0351 01       		.byte	0x1
 1767 0352 92       		.byte	0x92
 1768 0353 5B030000 		.4byte	0x35b
 1769 0357 02       		.byte	0x2
 1770 0358 23       		.byte	0x23
 1771 0359 30       		.uleb128 0x30
 1772 035a 00       		.byte	0
 1773 035b 0E       		.uleb128 0xe
 1774 035c A5010000 		.4byte	0x1a5
 1775 0360 10       		.uleb128 0x10
 1776 0361 5B030000 		.4byte	0x35b
 1777 0365 0C       		.uleb128 0xc
 1778 0366 A5010000 		.4byte	0x1a5
 1779 036a 75030000 		.4byte	0x375
 1780 036e 0D       		.uleb128 0xd
 1781 036f 5D020000 		.4byte	0x25d
 1782 0373 01       		.byte	0x1
 1783 0374 00       		.byte	0
 1784 0375 0E       		.uleb128 0xe
 1785 0376 65030000 		.4byte	0x365
 1786 037a 07       		.uleb128 0x7
 1787 037b F1050000 		.4byte	.LASF69
 1788 037f 01       		.byte	0x1
 1789 0380 93       		.byte	0x93
 1790 0381 B8020000 		.4byte	0x2b8
 1791 0385 0F       		.uleb128 0xf
 1792 0386 10       		.byte	0x10
 1793 0387 01       		.byte	0x1
 1794 0388 FC       		.byte	0xfc
 1795 0389 C8030000 		.4byte	0x3c8
 1796 038d 0A       		.uleb128 0xa
 1797 038e 32090000 		.4byte	.LASF70
 1798 0392 01       		.byte	0x1
 1799 0393 FE       		.byte	0xfe
 1800 0394 5B030000 		.4byte	0x35b
 1801 0398 02       		.byte	0x2
 1802 0399 23       		.byte	0x23
ARM GAS  /tmp/ccqMBOyg.s 			page 70


 1803 039a 00       		.uleb128 0
 1804 039b 0A       		.uleb128 0xa
 1805 039c 07010000 		.4byte	.LASF71
 1806 03a0 01       		.byte	0x1
 1807 03a1 FF       		.byte	0xff
 1808 03a2 5B030000 		.4byte	0x35b
 1809 03a6 02       		.byte	0x2
 1810 03a7 23       		.byte	0x23
 1811 03a8 04       		.uleb128 0x4
 1812 03a9 11       		.uleb128 0x11
 1813 03aa 56414C00 		.ascii	"VAL\000"
 1814 03ae 01       		.byte	0x1
 1815 03af 0001     		.2byte	0x100
 1816 03b1 5B030000 		.4byte	0x35b
 1817 03b5 02       		.byte	0x2
 1818 03b6 23       		.byte	0x23
 1819 03b7 08       		.uleb128 0x8
 1820 03b8 12       		.uleb128 0x12
 1821 03b9 5E010000 		.4byte	.LASF72
 1822 03bd 01       		.byte	0x1
 1823 03be 0101     		.2byte	0x101
 1824 03c0 60030000 		.4byte	0x360
 1825 03c4 02       		.byte	0x2
 1826 03c5 23       		.byte	0x23
 1827 03c6 0C       		.uleb128 0xc
 1828 03c7 00       		.byte	0
 1829 03c8 06       		.uleb128 0x6
 1830 03c9 B4040000 		.4byte	.LASF73
 1831 03cd 01       		.byte	0x1
 1832 03ce 0201     		.2byte	0x102
 1833 03d0 85030000 		.4byte	0x385
 1834 03d4 13       		.uleb128 0x13
 1835 03d5 44       		.byte	0x44
 1836 03d6 03       		.byte	0x3
 1837 03d7 7C01     		.2byte	0x17c
 1838 03d9 9E040000 		.4byte	0x49e
 1839 03dd 11       		.uleb128 0x11
 1840 03de 49535200 		.ascii	"ISR\000"
 1841 03e2 03       		.byte	0x3
 1842 03e3 7E01     		.2byte	0x17e
 1843 03e5 5B030000 		.4byte	0x35b
 1844 03e9 02       		.byte	0x2
 1845 03ea 23       		.byte	0x23
 1846 03eb 00       		.uleb128 0
 1847 03ec 11       		.uleb128 0x11
 1848 03ed 49455200 		.ascii	"IER\000"
 1849 03f1 03       		.byte	0x3
 1850 03f2 7F01     		.2byte	0x17f
 1851 03f4 5B030000 		.4byte	0x35b
 1852 03f8 02       		.byte	0x2
 1853 03f9 23       		.byte	0x23
 1854 03fa 04       		.uleb128 0x4
 1855 03fb 11       		.uleb128 0x11
 1856 03fc 435200   		.ascii	"CR\000"
 1857 03ff 03       		.byte	0x3
 1858 0400 8001     		.2byte	0x180
 1859 0402 5B030000 		.4byte	0x35b
ARM GAS  /tmp/ccqMBOyg.s 			page 71


 1860 0406 02       		.byte	0x2
 1861 0407 23       		.byte	0x23
 1862 0408 08       		.uleb128 0x8
 1863 0409 12       		.uleb128 0x12
 1864 040a 6B040000 		.4byte	.LASF74
 1865 040e 03       		.byte	0x3
 1866 040f 8101     		.2byte	0x181
 1867 0411 5B030000 		.4byte	0x35b
 1868 0415 02       		.byte	0x2
 1869 0416 23       		.byte	0x23
 1870 0417 0C       		.uleb128 0xc
 1871 0418 12       		.uleb128 0x12
 1872 0419 71040000 		.4byte	.LASF75
 1873 041d 03       		.byte	0x3
 1874 041e 8201     		.2byte	0x182
 1875 0420 5B030000 		.4byte	0x35b
 1876 0424 02       		.byte	0x2
 1877 0425 23       		.byte	0x23
 1878 0426 10       		.uleb128 0x10
 1879 0427 12       		.uleb128 0x12
 1880 0428 9C020000 		.4byte	.LASF76
 1881 042c 03       		.byte	0x3
 1882 042d 8301     		.2byte	0x183
 1883 042f 5B030000 		.4byte	0x35b
 1884 0433 02       		.byte	0x2
 1885 0434 23       		.byte	0x23
 1886 0435 14       		.uleb128 0x14
 1887 0436 12       		.uleb128 0x12
 1888 0437 12050000 		.4byte	.LASF66
 1889 043b 03       		.byte	0x3
 1890 043c 8401     		.2byte	0x184
 1891 043e A5010000 		.4byte	0x1a5
 1892 0442 02       		.byte	0x2
 1893 0443 23       		.byte	0x23
 1894 0444 18       		.uleb128 0x18
 1895 0445 12       		.uleb128 0x12
 1896 0446 1C050000 		.4byte	.LASF57
 1897 044a 03       		.byte	0x3
 1898 044b 8501     		.2byte	0x185
 1899 044d A5010000 		.4byte	0x1a5
 1900 0451 02       		.byte	0x2
 1901 0452 23       		.byte	0x23
 1902 0453 1C       		.uleb128 0x1c
 1903 0454 11       		.uleb128 0x11
 1904 0455 545200   		.ascii	"TR\000"
 1905 0458 03       		.byte	0x3
 1906 0459 8601     		.2byte	0x186
 1907 045b 5B030000 		.4byte	0x35b
 1908 045f 02       		.byte	0x2
 1909 0460 23       		.byte	0x23
 1910 0461 20       		.uleb128 0x20
 1911 0462 12       		.uleb128 0x12
 1912 0463 26050000 		.4byte	.LASF59
 1913 0467 03       		.byte	0x3
 1914 0468 8701     		.2byte	0x187
 1915 046a A5010000 		.4byte	0x1a5
 1916 046e 02       		.byte	0x2
ARM GAS  /tmp/ccqMBOyg.s 			page 72


 1917 046f 23       		.byte	0x23
 1918 0470 24       		.uleb128 0x24
 1919 0471 12       		.uleb128 0x12
 1920 0472 37020000 		.4byte	.LASF77
 1921 0476 03       		.byte	0x3
 1922 0477 8801     		.2byte	0x188
 1923 0479 5B030000 		.4byte	0x35b
 1924 047d 02       		.byte	0x2
 1925 047e 23       		.byte	0x23
 1926 047f 28       		.uleb128 0x28
 1927 0480 12       		.uleb128 0x12
 1928 0481 30050000 		.4byte	.LASF60
 1929 0485 03       		.byte	0x3
 1930 0486 8901     		.2byte	0x189
 1931 0488 9E040000 		.4byte	0x49e
 1932 048c 02       		.byte	0x2
 1933 048d 23       		.byte	0x23
 1934 048e 2C       		.uleb128 0x2c
 1935 048f 11       		.uleb128 0x11
 1936 0490 445200   		.ascii	"DR\000"
 1937 0493 03       		.byte	0x3
 1938 0494 8A01     		.2byte	0x18a
 1939 0496 5B030000 		.4byte	0x35b
 1940 049a 02       		.byte	0x2
 1941 049b 23       		.byte	0x23
 1942 049c 40       		.uleb128 0x40
 1943 049d 00       		.byte	0
 1944 049e 0C       		.uleb128 0xc
 1945 049f A5010000 		.4byte	0x1a5
 1946 04a3 AE040000 		.4byte	0x4ae
 1947 04a7 0D       		.uleb128 0xd
 1948 04a8 5D020000 		.4byte	0x25d
 1949 04ac 04       		.byte	0x4
 1950 04ad 00       		.byte	0
 1951 04ae 06       		.uleb128 0x6
 1952 04af 9D030000 		.4byte	.LASF78
 1953 04b3 03       		.byte	0x3
 1954 04b4 8B01     		.2byte	0x18b
 1955 04b6 D4030000 		.4byte	0x3d4
 1956 04ba 0E       		.uleb128 0xe
 1957 04bb 8F010000 		.4byte	0x18f
 1958 04bf 13       		.uleb128 0x13
 1959 04c0 2C       		.byte	0x2c
 1960 04c1 03       		.byte	0x3
 1961 04c2 6902     		.2byte	0x269
 1962 04c4 9B050000 		.4byte	0x59b
 1963 04c8 12       		.uleb128 0x12
 1964 04c9 31020000 		.4byte	.LASF79
 1965 04cd 03       		.byte	0x3
 1966 04ce 6B02     		.2byte	0x26b
 1967 04d0 5B030000 		.4byte	0x35b
 1968 04d4 02       		.byte	0x2
 1969 04d5 23       		.byte	0x23
 1970 04d6 00       		.uleb128 0
 1971 04d7 12       		.uleb128 0x12
 1972 04d8 83050000 		.4byte	.LASF80
 1973 04dc 03       		.byte	0x3
ARM GAS  /tmp/ccqMBOyg.s 			page 73


 1974 04dd 6C02     		.2byte	0x26c
 1975 04df BA040000 		.4byte	0x4ba
 1976 04e3 02       		.byte	0x2
 1977 04e4 23       		.byte	0x23
 1978 04e5 04       		.uleb128 0x4
 1979 04e6 12       		.uleb128 0x12
 1980 04e7 08050000 		.4byte	.LASF53
 1981 04eb 03       		.byte	0x3
 1982 04ec 6D02     		.2byte	0x26d
 1983 04ee 8F010000 		.4byte	0x18f
 1984 04f2 02       		.byte	0x2
 1985 04f3 23       		.byte	0x23
 1986 04f4 06       		.uleb128 0x6
 1987 04f5 12       		.uleb128 0x12
 1988 04f6 AC040000 		.4byte	.LASF81
 1989 04fa 03       		.byte	0x3
 1990 04fb 6E02     		.2byte	0x26e
 1991 04fd 5B030000 		.4byte	0x35b
 1992 0501 02       		.byte	0x2
 1993 0502 23       		.byte	0x23
 1994 0503 08       		.uleb128 0x8
 1995 0504 12       		.uleb128 0x12
 1996 0505 CC020000 		.4byte	.LASF82
 1997 0509 03       		.byte	0x3
 1998 050a 6F02     		.2byte	0x26f
 1999 050c 5B030000 		.4byte	0x35b
 2000 0510 02       		.byte	0x2
 2001 0511 23       		.byte	0x23
 2002 0512 0C       		.uleb128 0xc
 2003 0513 11       		.uleb128 0x11
 2004 0514 49445200 		.ascii	"IDR\000"
 2005 0518 03       		.byte	0x3
 2006 0519 7002     		.2byte	0x270
 2007 051b BA040000 		.4byte	0x4ba
 2008 051f 02       		.byte	0x2
 2009 0520 23       		.byte	0x23
 2010 0521 10       		.uleb128 0x10
 2011 0522 12       		.uleb128 0x12
 2012 0523 12050000 		.4byte	.LASF66
 2013 0527 03       		.byte	0x3
 2014 0528 7102     		.2byte	0x271
 2015 052a 8F010000 		.4byte	0x18f
 2016 052e 02       		.byte	0x2
 2017 052f 23       		.byte	0x23
 2018 0530 12       		.uleb128 0x12
 2019 0531 11       		.uleb128 0x11
 2020 0532 4F445200 		.ascii	"ODR\000"
 2021 0536 03       		.byte	0x3
 2022 0537 7202     		.2byte	0x272
 2023 0539 BA040000 		.4byte	0x4ba
 2024 053d 02       		.byte	0x2
 2025 053e 23       		.byte	0x23
 2026 053f 14       		.uleb128 0x14
 2027 0540 12       		.uleb128 0x12
 2028 0541 1C050000 		.4byte	.LASF57
 2029 0545 03       		.byte	0x3
 2030 0546 7302     		.2byte	0x273
ARM GAS  /tmp/ccqMBOyg.s 			page 74


 2031 0548 8F010000 		.4byte	0x18f
 2032 054c 02       		.byte	0x2
 2033 054d 23       		.byte	0x23
 2034 054e 16       		.uleb128 0x16
 2035 054f 12       		.uleb128 0x12
 2036 0550 94000000 		.4byte	.LASF83
 2037 0554 03       		.byte	0x3
 2038 0555 7402     		.2byte	0x274
 2039 0557 5B030000 		.4byte	0x35b
 2040 055b 02       		.byte	0x2
 2041 055c 23       		.byte	0x23
 2042 055d 18       		.uleb128 0x18
 2043 055e 12       		.uleb128 0x12
 2044 055f 2D090000 		.4byte	.LASF84
 2045 0563 03       		.byte	0x3
 2046 0564 7502     		.2byte	0x275
 2047 0566 5B030000 		.4byte	0x35b
 2048 056a 02       		.byte	0x2
 2049 056b 23       		.byte	0x23
 2050 056c 1C       		.uleb128 0x1c
 2051 056d 11       		.uleb128 0x11
 2052 056e 41465200 		.ascii	"AFR\000"
 2053 0572 03       		.byte	0x3
 2054 0573 7602     		.2byte	0x276
 2055 0575 9B050000 		.4byte	0x59b
 2056 0579 02       		.byte	0x2
 2057 057a 23       		.byte	0x23
 2058 057b 20       		.uleb128 0x20
 2059 057c 11       		.uleb128 0x11
 2060 057d 42525200 		.ascii	"BRR\000"
 2061 0581 03       		.byte	0x3
 2062 0582 7702     		.2byte	0x277
 2063 0584 BA040000 		.4byte	0x4ba
 2064 0588 02       		.byte	0x2
 2065 0589 23       		.byte	0x23
 2066 058a 28       		.uleb128 0x28
 2067 058b 12       		.uleb128 0x12
 2068 058c 26050000 		.4byte	.LASF59
 2069 0590 03       		.byte	0x3
 2070 0591 7802     		.2byte	0x278
 2071 0593 8F010000 		.4byte	0x18f
 2072 0597 02       		.byte	0x2
 2073 0598 23       		.byte	0x23
 2074 0599 2A       		.uleb128 0x2a
 2075 059a 00       		.byte	0
 2076 059b 0E       		.uleb128 0xe
 2077 059c 65030000 		.4byte	0x365
 2078 05a0 06       		.uleb128 0x6
 2079 05a1 FA050000 		.4byte	.LASF85
 2080 05a5 03       		.byte	0x3
 2081 05a6 7902     		.2byte	0x279
 2082 05a8 BF040000 		.4byte	0x4bf
 2083 05ac 05       		.uleb128 0x5
 2084 05ad 08       		.byte	0x8
 2085 05ae 04       		.byte	0x4
 2086 05af C1040000 		.4byte	.LASF86
 2087 05b3 05       		.uleb128 0x5
ARM GAS  /tmp/ccqMBOyg.s 			page 75


 2088 05b4 01       		.byte	0x1
 2089 05b5 08       		.byte	0x8
 2090 05b6 F8020000 		.4byte	.LASF87
 2091 05ba 0C       		.uleb128 0xc
 2092 05bb 3D010000 		.4byte	0x13d
 2093 05bf CA050000 		.4byte	0x5ca
 2094 05c3 0D       		.uleb128 0xd
 2095 05c4 5D020000 		.4byte	0x25d
 2096 05c8 02       		.byte	0x2
 2097 05c9 00       		.byte	0
 2098 05ca 14       		.uleb128 0x14
 2099 05cb 01       		.byte	0x1
 2100 05cc 24010000 		.4byte	0x124
 2101 05d0 06       		.byte	0x6
 2102 05d1 B8       		.byte	0xb8
 2103 05d2 F5050000 		.4byte	0x5f5
 2104 05d6 04       		.uleb128 0x4
 2105 05d7 0A040000 		.4byte	.LASF88
 2106 05db 00       		.byte	0
 2107 05dc 04       		.uleb128 0x4
 2108 05dd AA050000 		.4byte	.LASF89
 2109 05e1 01       		.byte	0x1
 2110 05e2 04       		.uleb128 0x4
 2111 05e3 AA020000 		.4byte	.LASF90
 2112 05e7 02       		.byte	0x2
 2113 05e8 04       		.uleb128 0x4
 2114 05e9 14070000 		.4byte	.LASF91
 2115 05ed 03       		.byte	0x3
 2116 05ee 04       		.uleb128 0x4
 2117 05ef 95030000 		.4byte	.LASF92
 2118 05f3 04       		.byte	0x4
 2119 05f4 00       		.byte	0
 2120 05f5 07       		.uleb128 0x7
 2121 05f6 58030000 		.4byte	.LASF93
 2122 05fa 06       		.byte	0x6
 2123 05fb C1       		.byte	0xc1
 2124 05fc CA050000 		.4byte	0x5ca
 2125 0600 15       		.uleb128 0x15
 2126 0601 F3030000 		.4byte	.LASF184
 2127 0605 0C       		.byte	0xc
 2128 0606 07       		.byte	0x7
 2129 0607 34       		.byte	0x34
 2130 0608 A7060000 		.4byte	0x6a7
 2131 060c 0A       		.uleb128 0xa
 2132 060d 99000000 		.4byte	.LASF94
 2133 0611 07       		.byte	0x7
 2134 0612 36       		.byte	0x36
 2135 0613 24010000 		.4byte	0x124
 2136 0617 02       		.byte	0x2
 2137 0618 23       		.byte	0x23
 2138 0619 00       		.uleb128 0
 2139 061a 0A       		.uleb128 0xa
 2140 061b 3D070000 		.4byte	.LASF95
 2141 061f 07       		.byte	0x7
 2142 0620 38       		.byte	0x38
 2143 0621 24010000 		.4byte	0x124
 2144 0625 02       		.byte	0x2
ARM GAS  /tmp/ccqMBOyg.s 			page 76


 2145 0626 23       		.byte	0x23
 2146 0627 01       		.uleb128 0x1
 2147 0628 0A       		.uleb128 0xa
 2148 0629 6B000000 		.4byte	.LASF96
 2149 062d 07       		.byte	0x7
 2150 062e 39       		.byte	0x39
 2151 062f 24010000 		.4byte	0x124
 2152 0633 02       		.byte	0x2
 2153 0634 23       		.byte	0x23
 2154 0635 02       		.uleb128 0x2
 2155 0636 0A       		.uleb128 0xa
 2156 0637 58010000 		.4byte	.LASF97
 2157 063b 07       		.byte	0x7
 2158 063c 3A       		.byte	0x3a
 2159 063d 24010000 		.4byte	0x124
 2160 0641 02       		.byte	0x2
 2161 0642 23       		.byte	0x23
 2162 0643 03       		.uleb128 0x3
 2163 0644 0A       		.uleb128 0xa
 2164 0645 DB040000 		.4byte	.LASF98
 2165 0649 07       		.byte	0x7
 2166 064a 3C       		.byte	0x3c
 2167 064b 3D010000 		.4byte	0x13d
 2168 064f 02       		.byte	0x2
 2169 0650 23       		.byte	0x23
 2170 0651 04       		.uleb128 0x4
 2171 0652 0A       		.uleb128 0xa
 2172 0653 EA020000 		.4byte	.LASF99
 2173 0657 07       		.byte	0x7
 2174 0658 3D       		.byte	0x3d
 2175 0659 24010000 		.4byte	0x124
 2176 065d 02       		.byte	0x2
 2177 065e 23       		.byte	0x23
 2178 065f 06       		.uleb128 0x6
 2179 0660 0A       		.uleb128 0xa
 2180 0661 F1020000 		.4byte	.LASF100
 2181 0665 07       		.byte	0x7
 2182 0666 3E       		.byte	0x3e
 2183 0667 24010000 		.4byte	0x124
 2184 066b 02       		.byte	0x2
 2185 066c 23       		.byte	0x23
 2186 066d 07       		.uleb128 0x7
 2187 066e 0A       		.uleb128 0xa
 2188 066f 06000000 		.4byte	.LASF101
 2189 0673 07       		.byte	0x7
 2190 0674 41       		.byte	0x41
 2191 0675 24010000 		.4byte	0x124
 2192 0679 02       		.byte	0x2
 2193 067a 23       		.byte	0x23
 2194 067b 08       		.uleb128 0x8
 2195 067c 0A       		.uleb128 0xa
 2196 067d 14000000 		.4byte	.LASF102
 2197 0681 07       		.byte	0x7
 2198 0682 42       		.byte	0x42
 2199 0683 24010000 		.4byte	0x124
 2200 0687 02       		.byte	0x2
 2201 0688 23       		.byte	0x23
ARM GAS  /tmp/ccqMBOyg.s 			page 77


 2202 0689 09       		.uleb128 0x9
 2203 068a 0A       		.uleb128 0xa
 2204 068b 22000000 		.4byte	.LASF103
 2205 068f 07       		.byte	0x7
 2206 0690 43       		.byte	0x43
 2207 0691 24010000 		.4byte	0x124
 2208 0695 02       		.byte	0x2
 2209 0696 23       		.byte	0x23
 2210 0697 0A       		.uleb128 0xa
 2211 0698 0A       		.uleb128 0xa
 2212 0699 30000000 		.4byte	.LASF104
 2213 069d 07       		.byte	0x7
 2214 069e 44       		.byte	0x44
 2215 069f 24010000 		.4byte	0x124
 2216 06a3 02       		.byte	0x2
 2217 06a4 23       		.byte	0x23
 2218 06a5 0B       		.uleb128 0xb
 2219 06a6 00       		.byte	0
 2220 06a7 07       		.uleb128 0x7
 2221 06a8 C8070000 		.4byte	.LASF105
 2222 06ac 07       		.byte	0x7
 2223 06ad 46       		.byte	0x46
 2224 06ae 00060000 		.4byte	0x600
 2225 06b2 02       		.uleb128 0x2
 2226 06b3 5A020000 		.4byte	.LASF107
 2227 06b7 01       		.byte	0x1
 2228 06b8 24010000 		.4byte	0x124
 2229 06bc 08       		.byte	0x8
 2230 06bd 0D       		.byte	0xd
 2231 06be ED060000 		.4byte	0x6ed
 2232 06c2 04       		.uleb128 0x4
 2233 06c3 A1020000 		.4byte	.LASF108
 2234 06c7 00       		.byte	0
 2235 06c8 04       		.uleb128 0x4
 2236 06c9 B7070000 		.4byte	.LASF109
 2237 06cd 01       		.byte	0x1
 2238 06ce 04       		.uleb128 0x4
 2239 06cf 14040000 		.4byte	.LASF110
 2240 06d3 02       		.byte	0x2
 2241 06d4 04       		.uleb128 0x4
 2242 06d5 DB050000 		.4byte	.LASF111
 2243 06d9 03       		.byte	0x3
 2244 06da 04       		.uleb128 0x4
 2245 06db 37090000 		.4byte	.LASF112
 2246 06df 04       		.byte	0x4
 2247 06e0 04       		.uleb128 0x4
 2248 06e1 FC070000 		.4byte	.LASF113
 2249 06e5 05       		.byte	0x5
 2250 06e6 04       		.uleb128 0x4
 2251 06e7 77040000 		.4byte	.LASF114
 2252 06eb 06       		.byte	0x6
 2253 06ec 00       		.byte	0
 2254 06ed 16       		.uleb128 0x16
 2255 06ee E9000000 		.4byte	.LASF185
 2256 06f2 01       		.byte	0x1
 2257 06f3 7C03     		.2byte	0x37c
 2258 06f5 01       		.byte	0x1
ARM GAS  /tmp/ccqMBOyg.s 			page 78


 2259 06f6 00000000 		.4byte	.LFB16
 2260 06fa EC000000 		.4byte	.LFE16
 2261 06fe 00000000 		.4byte	.LLST0
 2262 0702 01       		.byte	0x1
 2263 0703 26070000 		.4byte	0x726
 2264 0707 17       		.uleb128 0x17
 2265 0708 D6040000 		.4byte	.LASF106
 2266 070c 01       		.byte	0x1
 2267 070d 7C03     		.2byte	0x37c
 2268 070f 0D010000 		.4byte	0x10d
 2269 0713 02       		.byte	0x2
 2270 0714 91       		.byte	0x91
 2271 0715 6F       		.sleb128 -17
 2272 0716 17       		.uleb128 0x17
 2273 0717 6D050000 		.4byte	.LASF115
 2274 071b 01       		.byte	0x1
 2275 071c 7C03     		.2byte	0x37c
 2276 071e A5010000 		.4byte	0x1a5
 2277 0722 02       		.byte	0x2
 2278 0723 91       		.byte	0x91
 2279 0724 68       		.sleb128 -24
 2280 0725 00       		.byte	0
 2281 0726 18       		.uleb128 0x18
 2282 0727 8D020000 		.4byte	.LASF186
 2283 072b 01       		.byte	0x1
 2284 072c B803     		.2byte	0x3b8
 2285 072e 01       		.byte	0x1
 2286 072f A5010000 		.4byte	0x1a5
 2287 0733 00000000 		.4byte	.LFB18
 2288 0737 48000000 		.4byte	.LFE18
 2289 073b 2C000000 		.4byte	.LLST1
 2290 073f 01       		.byte	0x1
 2291 0740 54070000 		.4byte	0x754
 2292 0744 17       		.uleb128 0x17
 2293 0745 D2020000 		.4byte	.LASF116
 2294 0749 01       		.byte	0x1
 2295 074a B803     		.2byte	0x3b8
 2296 074c A5010000 		.4byte	0x1a5
 2297 0750 02       		.byte	0x2
 2298 0751 91       		.byte	0x91
 2299 0752 74       		.sleb128 -12
 2300 0753 00       		.byte	0
 2301 0754 19       		.uleb128 0x19
 2302 0755 01       		.byte	0x1
 2303 0756 D6080000 		.4byte	.LASF187
 2304 075a 02       		.byte	0x2
 2305 075b C7       		.byte	0xc7
 2306 075c 01       		.byte	0x1
 2307 075d 76010000 		.4byte	0x176
 2308 0761 00000000 		.4byte	.LFB20
 2309 0765 DC030000 		.4byte	.LFE20
 2310 0769 58000000 		.4byte	.LLST2
 2311 076d 01       		.byte	0x1
 2312 076e A1080000 		.4byte	0x8a1
 2313 0772 1A       		.uleb128 0x1a
 2314 0773 6900     		.ascii	"i\000"
 2315 0775 02       		.byte	0x2
ARM GAS  /tmp/ccqMBOyg.s 			page 79


 2316 0776 C9       		.byte	0xc9
 2317 0777 24010000 		.4byte	0x124
 2318 077b 02       		.byte	0x2
 2319 077c 91       		.byte	0x91
 2320 077d 6F       		.sleb128 -17
 2321 077e 1B       		.uleb128 0x1b
 2322 077f 696900   		.ascii	"ii\000"
 2323 0782 02       		.byte	0x2
 2324 0783 C9       		.byte	0xc9
 2325 0784 24010000 		.4byte	0x124
 2326 0788 1C       		.uleb128 0x1c
 2327 0789 20090000 		.4byte	.LASF117
 2328 078d 02       		.byte	0x2
 2329 078e CA       		.byte	0xca
 2330 078f 24010000 		.4byte	0x124
 2331 0793 1C       		.uleb128 0x1c
 2332 0794 4D030000 		.4byte	.LASF118
 2333 0798 02       		.byte	0x2
 2334 0799 CA       		.byte	0xca
 2335 079a 24010000 		.4byte	0x124
 2336 079e 1D       		.uleb128 0x1d
 2337 079f 34070000 		.4byte	.LASF119
 2338 07a3 02       		.byte	0x2
 2339 07a4 CA       		.byte	0xca
 2340 07a5 24010000 		.4byte	0x124
 2341 07a9 02       		.byte	0x2
 2342 07aa 91       		.byte	0x91
 2343 07ab 66       		.sleb128 -26
 2344 07ac 1D       		.uleb128 0x1d
 2345 07ad EF080000 		.4byte	.LASF120
 2346 07b1 02       		.byte	0x2
 2347 07b2 CB       		.byte	0xcb
 2348 07b3 24010000 		.4byte	0x124
 2349 07b7 02       		.byte	0x2
 2350 07b8 91       		.byte	0x91
 2351 07b9 65       		.sleb128 -27
 2352 07ba 1D       		.uleb128 0x1d
 2353 07bb F2070000 		.4byte	.LASF121
 2354 07bf 02       		.byte	0x2
 2355 07c0 CC       		.byte	0xcc
 2356 07c1 3D010000 		.4byte	0x13d
 2357 07c5 02       		.byte	0x2
 2358 07c6 91       		.byte	0x91
 2359 07c7 4E       		.sleb128 -50
 2360 07c8 1D       		.uleb128 0x1d
 2361 07c9 0F030000 		.4byte	.LASF122
 2362 07cd 02       		.byte	0x2
 2363 07ce CC       		.byte	0xcc
 2364 07cf 3D010000 		.4byte	0x13d
 2365 07d3 02       		.byte	0x2
 2366 07d4 91       		.byte	0x91
 2367 07d5 4C       		.sleb128 -52
 2368 07d6 1D       		.uleb128 0x1d
 2369 07d7 C2070000 		.4byte	.LASF123
 2370 07db 02       		.byte	0x2
 2371 07dc CD       		.byte	0xcd
 2372 07dd 3D010000 		.4byte	0x13d
ARM GAS  /tmp/ccqMBOyg.s 			page 80


 2373 07e1 02       		.byte	0x2
 2374 07e2 91       		.byte	0x91
 2375 07e3 50       		.sleb128 -48
 2376 07e4 1D       		.uleb128 0x1d
 2377 07e5 B5010000 		.4byte	.LASF124
 2378 07e9 02       		.byte	0x2
 2379 07ea CE       		.byte	0xce
 2380 07eb A1080000 		.4byte	0x8a1
 2381 07ef 02       		.byte	0x2
 2382 07f0 91       		.byte	0x91
 2383 07f1 60       		.sleb128 -32
 2384 07f2 1D       		.uleb128 0x1d
 2385 07f3 3E000000 		.4byte	.LASF125
 2386 07f7 02       		.byte	0x2
 2387 07f8 CF       		.byte	0xcf
 2388 07f9 7D010000 		.4byte	0x17d
 2389 07fd 02       		.byte	0x2
 2390 07fe 91       		.byte	0x91
 2391 07ff 68       		.sleb128 -24
 2392 0800 1D       		.uleb128 0x1d
 2393 0801 BD000000 		.4byte	.LASF126
 2394 0805 02       		.byte	0x2
 2395 0806 D2       		.byte	0xd2
 2396 0807 F5050000 		.4byte	0x5f5
 2397 080b 02       		.byte	0x2
 2398 080c 91       		.byte	0x91
 2399 080d 67       		.sleb128 -25
 2400 080e 1C       		.uleb128 0x1c
 2401 080f D8010000 		.4byte	.LASF127
 2402 0813 02       		.byte	0x2
 2403 0814 D4       		.byte	0xd4
 2404 0815 3D010000 		.4byte	0x13d
 2405 0819 1C       		.uleb128 0x1c
 2406 081a 91070000 		.4byte	.LASF128
 2407 081e 02       		.byte	0x2
 2408 081f D7       		.byte	0xd7
 2409 0820 24010000 		.4byte	0x124
 2410 0824 1D       		.uleb128 0x1d
 2411 0825 00000000 		.4byte	.LASF129
 2412 0829 02       		.byte	0x2
 2413 082a DD       		.byte	0xdd
 2414 082b A8080000 		.4byte	0x8a8
 2415 082f 03       		.byte	0x3
 2416 0830 91       		.byte	0x91
 2417 0831 B87F     		.sleb128 -72
 2418 0833 1D       		.uleb128 0x1d
 2419 0834 A4040000 		.4byte	.LASF130
 2420 0838 02       		.byte	0x2
 2421 0839 DE       		.byte	0xde
 2422 083a B2060000 		.4byte	0x6b2
 2423 083e 02       		.byte	0x2
 2424 083f 91       		.byte	0x91
 2425 0840 5F       		.sleb128 -33
 2426 0841 1D       		.uleb128 0x1d
 2427 0842 5B070000 		.4byte	.LASF131
 2428 0846 02       		.byte	0x2
 2429 0847 DF       		.byte	0xdf
ARM GAS  /tmp/ccqMBOyg.s 			page 81


 2430 0848 24010000 		.4byte	0x124
 2431 084c 02       		.byte	0x2
 2432 084d 91       		.byte	0x91
 2433 084e 5E       		.sleb128 -34
 2434 084f 1D       		.uleb128 0x1d
 2435 0850 8A050000 		.4byte	.LASF132
 2436 0854 02       		.byte	0x2
 2437 0855 E0       		.byte	0xe0
 2438 0856 24010000 		.4byte	0x124
 2439 085a 02       		.byte	0x2
 2440 085b 91       		.byte	0x91
 2441 085c 5D       		.sleb128 -35
 2442 085d 1D       		.uleb128 0x1d
 2443 085e 28070000 		.4byte	.LASF133
 2444 0862 02       		.byte	0x2
 2445 0863 E1       		.byte	0xe1
 2446 0864 24010000 		.4byte	0x124
 2447 0868 02       		.byte	0x2
 2448 0869 91       		.byte	0x91
 2449 086a 5C       		.sleb128 -36
 2450 086b 1D       		.uleb128 0x1d
 2451 086c BB010000 		.4byte	.LASF134
 2452 0870 02       		.byte	0x2
 2453 0871 E2       		.byte	0xe2
 2454 0872 24010000 		.4byte	0x124
 2455 0876 02       		.byte	0x2
 2456 0877 91       		.byte	0x91
 2457 0878 5B       		.sleb128 -37
 2458 0879 1D       		.uleb128 0x1d
 2459 087a 35040000 		.4byte	.LASF135
 2460 087e 02       		.byte	0x2
 2461 087f E3       		.byte	0xe3
 2462 0880 76010000 		.4byte	0x176
 2463 0884 02       		.byte	0x2
 2464 0885 91       		.byte	0x91
 2465 0886 54       		.sleb128 -44
 2466 0887 1D       		.uleb128 0x1d
 2467 0888 F0060000 		.4byte	.LASF136
 2468 088c 02       		.byte	0x2
 2469 088d E4       		.byte	0xe4
 2470 088e 24010000 		.4byte	0x124
 2471 0892 02       		.byte	0x2
 2472 0893 91       		.byte	0x91
 2473 0894 53       		.sleb128 -45
 2474 0895 1C       		.uleb128 0x1c
 2475 0896 C8000000 		.4byte	.LASF137
 2476 089a 02       		.byte	0x2
 2477 089b E9       		.byte	0xe9
 2478 089c B8080000 		.4byte	0x8b8
 2479 08a0 00       		.byte	0
 2480 08a1 05       		.uleb128 0x5
 2481 08a2 04       		.byte	0x4
 2482 08a3 04       		.byte	0x4
 2483 08a4 D2010000 		.4byte	.LASF138
 2484 08a8 0C       		.uleb128 0xc
 2485 08a9 B3050000 		.4byte	0x5b3
 2486 08ad B8080000 		.4byte	0x8b8
ARM GAS  /tmp/ccqMBOyg.s 			page 82


 2487 08b1 0D       		.uleb128 0xd
 2488 08b2 5D020000 		.4byte	0x25d
 2489 08b6 13       		.byte	0x13
 2490 08b7 00       		.byte	0
 2491 08b8 1E       		.uleb128 0x1e
 2492 08b9 04       		.byte	0x4
 2493 08ba A7060000 		.4byte	0x6a7
 2494 08be 1F       		.uleb128 0x1f
 2495 08bf 01       		.byte	0x1
 2496 08c0 A6070000 		.4byte	.LASF188
 2497 08c4 02       		.byte	0x2
 2498 08c5 9703     		.2byte	0x397
 2499 08c7 01       		.byte	0x1
 2500 08c8 00000000 		.4byte	.LFB21
 2501 08cc B0000000 		.4byte	.LFE21
 2502 08d0 85000000 		.4byte	.LLST3
 2503 08d4 01       		.byte	0x1
 2504 08d5 7E090000 		.4byte	0x97e
 2505 08d9 17       		.uleb128 0x17
 2506 08da DC000000 		.4byte	.LASF139
 2507 08de 02       		.byte	0x2
 2508 08df 9703     		.2byte	0x397
 2509 08e1 7E090000 		.4byte	0x97e
 2510 08e5 03       		.byte	0x3
 2511 08e6 91       		.byte	0x91
 2512 08e7 A47F     		.sleb128 -92
 2513 08e9 20       		.uleb128 0x20
 2514 08ea 643100   		.ascii	"d1\000"
 2515 08ed 02       		.byte	0x2
 2516 08ee 9903     		.2byte	0x399
 2517 08f0 9A010000 		.4byte	0x19a
 2518 08f4 02       		.byte	0x2
 2519 08f5 91       		.byte	0x91
 2520 08f6 74       		.sleb128 -12
 2521 08f7 20       		.uleb128 0x20
 2522 08f8 643200   		.ascii	"d2\000"
 2523 08fb 02       		.byte	0x2
 2524 08fc 9903     		.2byte	0x399
 2525 08fe 9A010000 		.4byte	0x19a
 2526 0902 02       		.byte	0x2
 2527 0903 91       		.byte	0x91
 2528 0904 70       		.sleb128 -16
 2529 0905 20       		.uleb128 0x20
 2530 0906 643300   		.ascii	"d3\000"
 2531 0909 02       		.byte	0x2
 2532 090a 9903     		.2byte	0x399
 2533 090c 9A010000 		.4byte	0x19a
 2534 0910 02       		.byte	0x2
 2535 0911 91       		.byte	0x91
 2536 0912 6C       		.sleb128 -20
 2537 0913 20       		.uleb128 0x20
 2538 0914 643400   		.ascii	"d4\000"
 2539 0917 02       		.byte	0x2
 2540 0918 9903     		.2byte	0x399
 2541 091a 9A010000 		.4byte	0x19a
 2542 091e 02       		.byte	0x2
 2543 091f 91       		.byte	0x91
ARM GAS  /tmp/ccqMBOyg.s 			page 83


 2544 0920 68       		.sleb128 -24
 2545 0921 20       		.uleb128 0x20
 2546 0922 643500   		.ascii	"d5\000"
 2547 0925 02       		.byte	0x2
 2548 0926 9903     		.2byte	0x399
 2549 0928 9A010000 		.4byte	0x19a
 2550 092c 02       		.byte	0x2
 2551 092d 91       		.byte	0x91
 2552 092e 64       		.sleb128 -28
 2553 092f 20       		.uleb128 0x20
 2554 0930 643600   		.ascii	"d6\000"
 2555 0933 02       		.byte	0x2
 2556 0934 9903     		.2byte	0x399
 2557 0936 9A010000 		.4byte	0x19a
 2558 093a 02       		.byte	0x2
 2559 093b 91       		.byte	0x91
 2560 093c 60       		.sleb128 -32
 2561 093d 21       		.uleb128 0x21
 2562 093e 59040000 		.4byte	.LASF140
 2563 0942 02       		.byte	0x2
 2564 0943 9A03     		.2byte	0x39a
 2565 0945 84090000 		.4byte	0x984
 2566 0949 03       		.byte	0x3
 2567 094a 91       		.byte	0x91
 2568 094b B87F     		.sleb128 -72
 2569 094d 21       		.uleb128 0x21
 2570 094e 95060000 		.4byte	.LASF141
 2571 0952 02       		.byte	0x2
 2572 0953 9B03     		.2byte	0x39b
 2573 0955 94090000 		.4byte	0x994
 2574 0959 03       		.byte	0x3
 2575 095a 91       		.byte	0x91
 2576 095b B47F     		.sleb128 -76
 2577 095d 21       		.uleb128 0x21
 2578 095e FD020000 		.4byte	.LASF142
 2579 0962 02       		.byte	0x2
 2580 0963 9C03     		.2byte	0x39c
 2581 0965 94090000 		.4byte	0x994
 2582 0969 03       		.byte	0x3
 2583 096a 91       		.byte	0x91
 2584 096b B07F     		.sleb128 -80
 2585 096d 21       		.uleb128 0x21
 2586 096e 51060000 		.4byte	.LASF143
 2587 0972 02       		.byte	0x2
 2588 0973 9D03     		.2byte	0x39d
 2589 0975 94090000 		.4byte	0x994
 2590 0979 03       		.byte	0x3
 2591 097a 91       		.byte	0x91
 2592 097b AC7F     		.sleb128 -84
 2593 097d 00       		.byte	0
 2594 097e 1E       		.uleb128 0x1e
 2595 097f 04       		.byte	0x4
 2596 0980 84010000 		.4byte	0x184
 2597 0984 0C       		.uleb128 0xc
 2598 0985 B3050000 		.4byte	0x5b3
 2599 0989 94090000 		.4byte	0x994
 2600 098d 0D       		.uleb128 0xd
ARM GAS  /tmp/ccqMBOyg.s 			page 84


 2601 098e 5D020000 		.4byte	0x25d
 2602 0992 27       		.byte	0x27
 2603 0993 00       		.byte	0
 2604 0994 0E       		.uleb128 0xe
 2605 0995 A1080000 		.4byte	0x8a1
 2606 0999 22       		.uleb128 0x22
 2607 099a 01       		.byte	0x1
 2608 099b 64070000 		.4byte	.LASF189
 2609 099f 02       		.byte	0x2
 2610 09a0 1204     		.2byte	0x412
 2611 09a2 01       		.byte	0x1
 2612 09a3 00000000 		.4byte	.LFB22
 2613 09a7 28010000 		.4byte	.LFE22
 2614 09ab 02       		.byte	0x2
 2615 09ac 7D       		.byte	0x7d
 2616 09ad 00       		.sleb128 0
 2617 09ae 01       		.byte	0x1
 2618 09af 0C       		.uleb128 0xc
 2619 09b0 24010000 		.4byte	0x124
 2620 09b4 BF090000 		.4byte	0x9bf
 2621 09b8 0D       		.uleb128 0xd
 2622 09b9 5D020000 		.4byte	0x25d
 2623 09bd FF       		.byte	0xff
 2624 09be 00       		.byte	0
 2625 09bf 23       		.uleb128 0x23
 2626 09c0 64010000 		.4byte	.LASF144
 2627 09c4 02       		.byte	0x2
 2628 09c5 3B       		.byte	0x3b
 2629 09c6 D1090000 		.4byte	0x9d1
 2630 09ca 01       		.byte	0x1
 2631 09cb 05       		.byte	0x5
 2632 09cc 03       		.byte	0x3
 2633 09cd 00000000 		.4byte	tx2buff
 2634 09d1 0E       		.uleb128 0xe
 2635 09d2 AF090000 		.4byte	0x9af
 2636 09d6 23       		.uleb128 0x23
 2637 09d7 32010000 		.4byte	.LASF145
 2638 09db 02       		.byte	0x2
 2639 09dc 3C       		.byte	0x3c
 2640 09dd E8090000 		.4byte	0x9e8
 2641 09e1 01       		.byte	0x1
 2642 09e2 05       		.byte	0x5
 2643 09e3 03       		.byte	0x3
 2644 09e4 00000000 		.4byte	rx2buff
 2645 09e8 0E       		.uleb128 0xe
 2646 09e9 AF090000 		.4byte	0x9af
 2647 09ed 23       		.uleb128 0x23
 2648 09ee 78030000 		.4byte	.LASF146
 2649 09f2 02       		.byte	0x2
 2650 09f3 3E       		.byte	0x3e
 2651 09f4 FF090000 		.4byte	0x9ff
 2652 09f8 01       		.byte	0x1
 2653 09f9 05       		.byte	0x5
 2654 09fa 03       		.byte	0x3
 2655 09fb 00000000 		.4byte	tx1buff
 2656 09ff 0E       		.uleb128 0xe
 2657 0a00 AF090000 		.4byte	0x9af
ARM GAS  /tmp/ccqMBOyg.s 			page 85


 2658 0a04 23       		.uleb128 0x23
 2659 0a05 45010000 		.4byte	.LASF147
 2660 0a09 02       		.byte	0x2
 2661 0a0a 3F       		.byte	0x3f
 2662 0a0b 160A0000 		.4byte	0xa16
 2663 0a0f 01       		.byte	0x1
 2664 0a10 05       		.byte	0x5
 2665 0a11 03       		.byte	0x3
 2666 0a12 00000000 		.4byte	rx1buff
 2667 0a16 0E       		.uleb128 0xe
 2668 0a17 AF090000 		.4byte	0x9af
 2669 0a1b 23       		.uleb128 0x23
 2670 0a1c D8020000 		.4byte	.LASF148
 2671 0a20 02       		.byte	0x2
 2672 0a21 49       		.byte	0x49
 2673 0a22 2D0A0000 		.4byte	0xa2d
 2674 0a26 01       		.byte	0x1
 2675 0a27 05       		.byte	0x5
 2676 0a28 03       		.byte	0x3
 2677 0a29 00000000 		.4byte	show_select_timer
 2678 0a2d 0E       		.uleb128 0xe
 2679 0a2e 3D010000 		.4byte	0x13d
 2680 0a32 23       		.uleb128 0x23
 2681 0a33 95040000 		.4byte	.LASF149
 2682 0a37 02       		.byte	0x2
 2683 0a38 4A       		.byte	0x4a
 2684 0a39 440A0000 		.4byte	0xa44
 2685 0a3d 01       		.byte	0x1
 2686 0a3e 05       		.byte	0x5
 2687 0a3f 03       		.byte	0x3
 2688 0a40 00000000 		.4byte	switches_timer
 2689 0a44 0E       		.uleb128 0xe
 2690 0a45 24010000 		.4byte	0x124
 2691 0a49 23       		.uleb128 0x23
 2692 0a4a 4F000000 		.4byte	.LASF150
 2693 0a4e 02       		.byte	0x2
 2694 0a4f 4B       		.byte	0x4b
 2695 0a50 440A0000 		.4byte	0xa44
 2696 0a54 01       		.byte	0x1
 2697 0a55 05       		.byte	0x5
 2698 0a56 03       		.byte	0x3
 2699 0a57 00000000 		.4byte	acswitch_timer
 2700 0a5b 23       		.uleb128 0x23
 2701 0a5c F1040000 		.4byte	.LASF151
 2702 0a60 02       		.byte	0x2
 2703 0a61 4D       		.byte	0x4d
 2704 0a62 2D0A0000 		.4byte	0xa2d
 2705 0a66 01       		.byte	0x1
 2706 0a67 05       		.byte	0x5
 2707 0a68 03       		.byte	0x3
 2708 0a69 00000000 		.4byte	scroll1_timer
 2709 0a6d 23       		.uleb128 0x23
 2710 0a6e 04090000 		.4byte	.LASF152
 2711 0a72 02       		.byte	0x2
 2712 0a73 4E       		.byte	0x4e
 2713 0a74 2D0A0000 		.4byte	0xa2d
 2714 0a78 01       		.byte	0x1
ARM GAS  /tmp/ccqMBOyg.s 			page 86


 2715 0a79 05       		.byte	0x5
 2716 0a7a 03       		.byte	0x3
 2717 0a7b 00000000 		.4byte	scroll2_timer
 2718 0a7f 23       		.uleb128 0x23
 2719 0a80 C5080000 		.4byte	.LASF153
 2720 0a84 02       		.byte	0x2
 2721 0a85 50       		.byte	0x50
 2722 0a86 2D0A0000 		.4byte	0xa2d
 2723 0a8a 01       		.byte	0x1
 2724 0a8b 05       		.byte	0x5
 2725 0a8c 03       		.byte	0x3
 2726 0a8d 00000000 		.4byte	standalone_timer
 2727 0a91 23       		.uleb128 0x23
 2728 0a92 AC060000 		.4byte	.LASF154
 2729 0a96 02       		.byte	0x2
 2730 0a97 51       		.byte	0x51
 2731 0a98 2D0A0000 		.4byte	0xa2d
 2732 0a9c 01       		.byte	0x1
 2733 0a9d 05       		.byte	0x5
 2734 0a9e 03       		.byte	0x3
 2735 0a9f 00000000 		.4byte	standalone_enable_menu_timer
 2736 0aa3 23       		.uleb128 0x23
 2737 0aa4 79010000 		.4byte	.LASF155
 2738 0aa8 02       		.byte	0x2
 2739 0aa9 53       		.byte	0x53
 2740 0aaa 440A0000 		.4byte	0xa44
 2741 0aae 01       		.byte	0x1
 2742 0aaf 05       		.byte	0x5
 2743 0ab0 03       		.byte	0x3
 2744 0ab1 00000000 		.4byte	grouped_master_timeout_timer
 2745 0ab5 23       		.uleb128 0x23
 2746 0ab6 1F030000 		.4byte	.LASF156
 2747 0aba 02       		.byte	0x2
 2748 0abb 54       		.byte	0x54
 2749 0abc 2D0A0000 		.4byte	0xa2d
 2750 0ac0 01       		.byte	0x1
 2751 0ac1 05       		.byte	0x5
 2752 0ac2 03       		.byte	0x3
 2753 0ac3 00000000 		.4byte	take_temp_sample
 2754 0ac7 23       		.uleb128 0x23
 2755 0ac8 7A070000 		.4byte	.LASF157
 2756 0acc 02       		.byte	0x2
 2757 0acd 55       		.byte	0x55
 2758 0ace 440A0000 		.4byte	0xa44
 2759 0ad2 01       		.byte	0x1
 2760 0ad3 05       		.byte	0x5
 2761 0ad4 03       		.byte	0x3
 2762 0ad5 00000000 		.4byte	timer_wifi_bright
 2763 0ad9 23       		.uleb128 0x23
 2764 0ada FE030000 		.4byte	.LASF158
 2765 0ade 02       		.byte	0x2
 2766 0adf 58       		.byte	0x58
 2767 0ae0 2D0A0000 		.4byte	0xa2d
 2768 0ae4 01       		.byte	0x1
 2769 0ae5 05       		.byte	0x5
 2770 0ae6 03       		.byte	0x3
 2771 0ae7 00000000 		.4byte	timer_relay
ARM GAS  /tmp/ccqMBOyg.s 			page 87


 2772 0aeb 23       		.uleb128 0x23
 2773 0aec 78020000 		.4byte	.LASF159
 2774 0af0 02       		.byte	0x2
 2775 0af1 5A       		.byte	0x5a
 2776 0af2 2D0A0000 		.4byte	0xa2d
 2777 0af6 01       		.byte	0x1
 2778 0af7 05       		.byte	0x5
 2779 0af8 03       		.byte	0x3
 2780 0af9 00000000 		.4byte	tt_take_photo_sample
 2781 0afd 23       		.uleb128 0x23
 2782 0afe 80030000 		.4byte	.LASF160
 2783 0b02 02       		.byte	0x2
 2784 0b03 5B       		.byte	0x5b
 2785 0b04 2D0A0000 		.4byte	0xa2d
 2786 0b08 01       		.byte	0x1
 2787 0b09 05       		.byte	0x5
 2788 0b0a 03       		.byte	0x3
 2789 0b0b 00000000 		.4byte	tt_relay_on_off
 2790 0b0f 23       		.uleb128 0x23
 2791 0b10 DB030000 		.4byte	.LASF161
 2792 0b14 02       		.byte	0x2
 2793 0b15 5F       		.byte	0x5f
 2794 0b16 24010000 		.4byte	0x124
 2795 0b1a 01       		.byte	0x1
 2796 0b1b 05       		.byte	0x5
 2797 0b1c 03       		.byte	0x3
 2798 0b1d 00000000 		.4byte	saved_mode
 2799 0b21 24       		.uleb128 0x24
 2800 0b22 733100   		.ascii	"s1\000"
 2801 0b25 02       		.byte	0x2
 2802 0b26 63       		.byte	0x63
 2803 0b27 3D010000 		.4byte	0x13d
 2804 0b2b 01       		.byte	0x1
 2805 0b2c 05       		.byte	0x5
 2806 0b2d 03       		.byte	0x3
 2807 0b2e 00000000 		.4byte	s1
 2808 0b32 24       		.uleb128 0x24
 2809 0b33 733200   		.ascii	"s2\000"
 2810 0b36 02       		.byte	0x2
 2811 0b37 64       		.byte	0x64
 2812 0b38 3D010000 		.4byte	0x13d
 2813 0b3c 01       		.byte	0x1
 2814 0b3d 05       		.byte	0x5
 2815 0b3e 03       		.byte	0x3
 2816 0b3f 00000000 		.4byte	s2
 2817 0b43 24       		.uleb128 0x24
 2818 0b44 73616300 		.ascii	"sac\000"
 2819 0b48 02       		.byte	0x2
 2820 0b49 65       		.byte	0x65
 2821 0b4a 3D010000 		.4byte	0x13d
 2822 0b4e 01       		.byte	0x1
 2823 0b4f 05       		.byte	0x5
 2824 0b50 03       		.byte	0x3
 2825 0b51 00000000 		.4byte	sac
 2826 0b55 23       		.uleb128 0x23
 2827 0b56 53070000 		.4byte	.LASF162
 2828 0b5a 02       		.byte	0x2
ARM GAS  /tmp/ccqMBOyg.s 			page 88


 2829 0b5b 66       		.byte	0x66
 2830 0b5c 24010000 		.4byte	0x124
 2831 0b60 01       		.byte	0x1
 2832 0b61 05       		.byte	0x5
 2833 0b62 03       		.byte	0x3
 2834 0b63 00000000 		.4byte	sac_aux
 2835 0b67 23       		.uleb128 0x23
 2836 0b68 C9060000 		.4byte	.LASF163
 2837 0b6c 02       		.byte	0x2
 2838 0b6d 6A       		.byte	0x6a
 2839 0b6e 790B0000 		.4byte	0xb79
 2840 0b72 01       		.byte	0x1
 2841 0b73 05       		.byte	0x5
 2842 0b74 03       		.byte	0x3
 2843 0b75 00000000 		.4byte	adc_ch
 2844 0b79 0E       		.uleb128 0xe
 2845 0b7a BA050000 		.4byte	0x5ba
 2846 0b7e 23       		.uleb128 0x23
 2847 0b7f F4080000 		.4byte	.LASF164
 2848 0b83 02       		.byte	0x2
 2849 0b84 6B       		.byte	0x6b
 2850 0b85 440A0000 		.4byte	0xa44
 2851 0b89 01       		.byte	0x1
 2852 0b8a 05       		.byte	0x5
 2853 0b8b 03       		.byte	0x3
 2854 0b8c 00000000 		.4byte	seq_ready
 2855 0b90 23       		.uleb128 0x23
 2856 0b91 20040000 		.4byte	.LASF165
 2857 0b95 02       		.byte	0x2
 2858 0b96 6C       		.byte	0x6c
 2859 0b97 3D010000 		.4byte	0x13d
 2860 0b9b 01       		.byte	0x1
 2861 0b9c 05       		.byte	0x5
 2862 0b9d 03       		.byte	0x3
 2863 0b9e 00000000 		.4byte	zero_current
 2864 0ba2 23       		.uleb128 0x23
 2865 0ba3 C7030000 		.4byte	.LASF166
 2866 0ba7 02       		.byte	0x2
 2867 0ba8 70       		.byte	0x70
 2868 0ba9 440A0000 		.4byte	0xa44
 2869 0bad 01       		.byte	0x1
 2870 0bae 05       		.byte	0x5
 2871 0baf 03       		.byte	0x3
 2872 0bb0 00000000 		.4byte	usart1_mini_timeout
 2873 0bb4 23       		.uleb128 0x23
 2874 0bb5 3E020000 		.4byte	.LASF167
 2875 0bb9 02       		.byte	0x2
 2876 0bba 71       		.byte	0x71
 2877 0bbb 440A0000 		.4byte	0xa44
 2878 0bbf 01       		.byte	0x1
 2879 0bc0 05       		.byte	0x5
 2880 0bc1 03       		.byte	0x3
 2881 0bc2 00000000 		.4byte	usart1_pckt_ready
 2882 0bc6 23       		.uleb128 0x23
 2883 0bc7 BB020000 		.4byte	.LASF168
 2884 0bcb 02       		.byte	0x2
 2885 0bcc 72       		.byte	0x72
ARM GAS  /tmp/ccqMBOyg.s 			page 89


 2886 0bcd 440A0000 		.4byte	0xa44
 2887 0bd1 01       		.byte	0x1
 2888 0bd2 05       		.byte	0x5
 2889 0bd3 03       		.byte	0x3
 2890 0bd4 00000000 		.4byte	usart1_have_data
 2891 0bd8 23       		.uleb128 0x23
 2892 0bd9 0C020000 		.4byte	.LASF169
 2893 0bdd 02       		.byte	0x2
 2894 0bde 73       		.byte	0x73
 2895 0bdf 24010000 		.4byte	0x124
 2896 0be3 01       		.byte	0x1
 2897 0be4 05       		.byte	0x5
 2898 0be5 03       		.byte	0x3
 2899 0be6 00000000 		.4byte	usart1_pckt_bytes
 2900 0bea 23       		.uleb128 0x23
 2901 0beb 5E000000 		.4byte	.LASF170
 2902 0bef 02       		.byte	0x2
 2903 0bf0 97       		.byte	0x97
 2904 0bf1 A7060000 		.4byte	0x6a7
 2905 0bf5 01       		.byte	0x1
 2906 0bf6 05       		.byte	0x5
 2907 0bf7 03       		.byte	0x3
 2908 0bf8 00000000 		.4byte	param_struct
 2909 0bfc 23       		.uleb128 0x23
 2910 0bfd 93050000 		.4byte	.LASF171
 2911 0c01 02       		.byte	0x2
 2912 0c02 9A       		.byte	0x9a
 2913 0c03 2D0A0000 		.4byte	0xa2d
 2914 0c07 01       		.byte	0x1
 2915 0c08 05       		.byte	0x5
 2916 0c09 03       		.byte	0x3
 2917 0c0a 00000000 		.4byte	wait_ms_var
 2918 0c0e 23       		.uleb128 0x23
 2919 0c0f 12090000 		.4byte	.LASF172
 2920 0c13 02       		.byte	0x2
 2921 0c14 9B       		.byte	0x9b
 2922 0c15 2D0A0000 		.4byte	0xa2d
 2923 0c19 01       		.byte	0x1
 2924 0c1a 05       		.byte	0x5
 2925 0c1b 03       		.byte	0x3
 2926 0c1c 00000000 		.4byte	timer_standby
 2927 0c20 23       		.uleb128 0x23
 2928 0c21 17010000 		.4byte	.LASF173
 2929 0c25 02       		.byte	0x2
 2930 0c26 9C       		.byte	0x9c
 2931 0c27 2D0A0000 		.4byte	0xa2d
 2932 0c2b 01       		.byte	0x1
 2933 0c2c 05       		.byte	0x5
 2934 0c2d 03       		.byte	0x3
 2935 0c2e 00000000 		.4byte	tcp_kalive_timer
 2936 0c32 23       		.uleb128 0x23
 2937 0c33 E6030000 		.4byte	.LASF174
 2938 0c37 02       		.byte	0x2
 2939 0c38 9E       		.byte	0x9e
 2940 0c39 440A0000 		.4byte	0xa44
 2941 0c3d 01       		.byte	0x1
 2942 0c3e 05       		.byte	0x5
ARM GAS  /tmp/ccqMBOyg.s 			page 90


 2943 0c3f 03       		.byte	0x3
 2944 0c40 00000000 		.4byte	filter_timer
 2945 0c44 23       		.uleb128 0x23
 2946 0c45 90030000 		.4byte	.LASF175
 2947 0c49 02       		.byte	0x2
 2948 0c4a A3       		.byte	0xa3
 2949 0c4b 2D0A0000 		.4byte	0xa2d
 2950 0c4f 01       		.byte	0x1
 2951 0c50 05       		.byte	0x5
 2952 0c51 03       		.byte	0x3
 2953 0c52 00000000 		.4byte	secs
 2954 0c56 23       		.uleb128 0x23
 2955 0c57 CB050000 		.4byte	.LASF176
 2956 0c5b 02       		.byte	0x2
 2957 0c5c A4       		.byte	0xa4
 2958 0c5d 440A0000 		.4byte	0xa44
 2959 0c61 01       		.byte	0x1
 2960 0c62 05       		.byte	0x5
 2961 0c63 03       		.byte	0x3
 2962 0c64 00000000 		.4byte	hours
 2963 0c68 23       		.uleb128 0x23
 2964 0c69 29020000 		.4byte	.LASF177
 2965 0c6d 02       		.byte	0x2
 2966 0c6e A5       		.byte	0xa5
 2967 0c6f 440A0000 		.4byte	0xa44
 2968 0c73 01       		.byte	0x1
 2969 0c74 05       		.byte	0x5
 2970 0c75 03       		.byte	0x3
 2971 0c76 00000000 		.4byte	minutes
 2972 0c7a 0C       		.uleb128 0xc
 2973 0c7b 3D010000 		.4byte	0x13d
 2974 0c7f 8A0C0000 		.4byte	0xc8a
 2975 0c83 0D       		.uleb128 0xd
 2976 0c84 5D020000 		.4byte	0x25d
 2977 0c88 09       		.byte	0x9
 2978 0c89 00       		.byte	0
 2979 0c8a 23       		.uleb128 0x23
 2980 0c8b 4D010000 		.4byte	.LASF178
 2981 0c8f 02       		.byte	0x2
 2982 0c90 A9       		.byte	0xa9
 2983 0c91 7A0C0000 		.4byte	0xc7a
 2984 0c95 01       		.byte	0x1
 2985 0c96 05       		.byte	0x5
 2986 0c97 03       		.byte	0x3
 2987 0c98 00000000 		.4byte	power_vect
 2988 0c9c 0C       		.uleb128 0xc
 2989 0c9d 3D010000 		.4byte	0x13d
 2990 0ca1 AC0C0000 		.4byte	0xcac
 2991 0ca5 0D       		.uleb128 0xd
 2992 0ca6 5D020000 		.4byte	0x25d
 2993 0caa 10       		.byte	0x10
 2994 0cab 00       		.byte	0
 2995 0cac 23       		.uleb128 0x23
 2996 0cad FE080000 		.4byte	.LASF179
 2997 0cb1 02       		.byte	0x2
 2998 0cb2 B7       		.byte	0xb7
 2999 0cb3 9C0C0000 		.4byte	0xc9c
ARM GAS  /tmp/ccqMBOyg.s 			page 91


 3000 0cb7 01       		.byte	0x1
 3001 0cb8 05       		.byte	0x5
 3002 0cb9 03       		.byte	0x3
 3003 0cba 00000000 		.4byte	vtemp
 3004 0cbe 23       		.uleb128 0x23
 3005 0cbf E3000000 		.4byte	.LASF180
 3006 0cc3 02       		.byte	0x2
 3007 0cc4 B8       		.byte	0xb8
 3008 0cc5 9C0C0000 		.4byte	0xc9c
 3009 0cc9 01       		.byte	0x1
 3010 0cca 05       		.byte	0x5
 3011 0ccb 03       		.byte	0x3
 3012 0ccc 00000000 		.4byte	vpote
 3013 0cd0 00       		.byte	0
 3014              		.section	.debug_abbrev,"",%progbits
 3015              	.Ldebug_abbrev0:
 3016 0000 01       		.uleb128 0x1
 3017 0001 11       		.uleb128 0x11
 3018 0002 01       		.byte	0x1
 3019 0003 25       		.uleb128 0x25
 3020 0004 0E       		.uleb128 0xe
 3021 0005 13       		.uleb128 0x13
 3022 0006 0B       		.uleb128 0xb
 3023 0007 03       		.uleb128 0x3
 3024 0008 0E       		.uleb128 0xe
 3025 0009 1B       		.uleb128 0x1b
 3026 000a 0E       		.uleb128 0xe
 3027 000b 55       		.uleb128 0x55
 3028 000c 06       		.uleb128 0x6
 3029 000d 11       		.uleb128 0x11
 3030 000e 01       		.uleb128 0x1
 3031 000f 52       		.uleb128 0x52
 3032 0010 01       		.uleb128 0x1
 3033 0011 10       		.uleb128 0x10
 3034 0012 06       		.uleb128 0x6
 3035 0013 00       		.byte	0
 3036 0014 00       		.byte	0
 3037 0015 02       		.uleb128 0x2
 3038 0016 04       		.uleb128 0x4
 3039 0017 01       		.byte	0x1
 3040 0018 03       		.uleb128 0x3
 3041 0019 0E       		.uleb128 0xe
 3042 001a 0B       		.uleb128 0xb
 3043 001b 0B       		.uleb128 0xb
 3044 001c 49       		.uleb128 0x49
 3045 001d 13       		.uleb128 0x13
 3046 001e 3A       		.uleb128 0x3a
 3047 001f 0B       		.uleb128 0xb
 3048 0020 3B       		.uleb128 0x3b
 3049 0021 0B       		.uleb128 0xb
 3050 0022 01       		.uleb128 0x1
 3051 0023 13       		.uleb128 0x13
 3052 0024 00       		.byte	0
 3053 0025 00       		.byte	0
 3054 0026 03       		.uleb128 0x3
 3055 0027 28       		.uleb128 0x28
 3056 0028 00       		.byte	0
ARM GAS  /tmp/ccqMBOyg.s 			page 92


 3057 0029 03       		.uleb128 0x3
 3058 002a 0E       		.uleb128 0xe
 3059 002b 1C       		.uleb128 0x1c
 3060 002c 0D       		.uleb128 0xd
 3061 002d 00       		.byte	0
 3062 002e 00       		.byte	0
 3063 002f 04       		.uleb128 0x4
 3064 0030 28       		.uleb128 0x28
 3065 0031 00       		.byte	0
 3066 0032 03       		.uleb128 0x3
 3067 0033 0E       		.uleb128 0xe
 3068 0034 1C       		.uleb128 0x1c
 3069 0035 0B       		.uleb128 0xb
 3070 0036 00       		.byte	0
 3071 0037 00       		.byte	0
 3072 0038 05       		.uleb128 0x5
 3073 0039 24       		.uleb128 0x24
 3074 003a 00       		.byte	0
 3075 003b 0B       		.uleb128 0xb
 3076 003c 0B       		.uleb128 0xb
 3077 003d 3E       		.uleb128 0x3e
 3078 003e 0B       		.uleb128 0xb
 3079 003f 03       		.uleb128 0x3
 3080 0040 0E       		.uleb128 0xe
 3081 0041 00       		.byte	0
 3082 0042 00       		.byte	0
 3083 0043 06       		.uleb128 0x6
 3084 0044 16       		.uleb128 0x16
 3085 0045 00       		.byte	0
 3086 0046 03       		.uleb128 0x3
 3087 0047 0E       		.uleb128 0xe
 3088 0048 3A       		.uleb128 0x3a
 3089 0049 0B       		.uleb128 0xb
 3090 004a 3B       		.uleb128 0x3b
 3091 004b 05       		.uleb128 0x5
 3092 004c 49       		.uleb128 0x49
 3093 004d 13       		.uleb128 0x13
 3094 004e 00       		.byte	0
 3095 004f 00       		.byte	0
 3096 0050 07       		.uleb128 0x7
 3097 0051 16       		.uleb128 0x16
 3098 0052 00       		.byte	0
 3099 0053 03       		.uleb128 0x3
 3100 0054 0E       		.uleb128 0xe
 3101 0055 3A       		.uleb128 0x3a
 3102 0056 0B       		.uleb128 0xb
 3103 0057 3B       		.uleb128 0x3b
 3104 0058 0B       		.uleb128 0xb
 3105 0059 49       		.uleb128 0x49
 3106 005a 13       		.uleb128 0x13
 3107 005b 00       		.byte	0
 3108 005c 00       		.byte	0
 3109 005d 08       		.uleb128 0x8
 3110 005e 24       		.uleb128 0x24
 3111 005f 00       		.byte	0
 3112 0060 0B       		.uleb128 0xb
 3113 0061 0B       		.uleb128 0xb
ARM GAS  /tmp/ccqMBOyg.s 			page 93


 3114 0062 3E       		.uleb128 0x3e
 3115 0063 0B       		.uleb128 0xb
 3116 0064 03       		.uleb128 0x3
 3117 0065 08       		.uleb128 0x8
 3118 0066 00       		.byte	0
 3119 0067 00       		.byte	0
 3120 0068 09       		.uleb128 0x9
 3121 0069 13       		.uleb128 0x13
 3122 006a 01       		.byte	0x1
 3123 006b 0B       		.uleb128 0xb
 3124 006c 05       		.uleb128 0x5
 3125 006d 3A       		.uleb128 0x3a
 3126 006e 0B       		.uleb128 0xb
 3127 006f 3B       		.uleb128 0x3b
 3128 0070 0B       		.uleb128 0xb
 3129 0071 01       		.uleb128 0x1
 3130 0072 13       		.uleb128 0x13
 3131 0073 00       		.byte	0
 3132 0074 00       		.byte	0
 3133 0075 0A       		.uleb128 0xa
 3134 0076 0D       		.uleb128 0xd
 3135 0077 00       		.byte	0
 3136 0078 03       		.uleb128 0x3
 3137 0079 0E       		.uleb128 0xe
 3138 007a 3A       		.uleb128 0x3a
 3139 007b 0B       		.uleb128 0xb
 3140 007c 3B       		.uleb128 0x3b
 3141 007d 0B       		.uleb128 0xb
 3142 007e 49       		.uleb128 0x49
 3143 007f 13       		.uleb128 0x13
 3144 0080 38       		.uleb128 0x38
 3145 0081 0A       		.uleb128 0xa
 3146 0082 00       		.byte	0
 3147 0083 00       		.byte	0
 3148 0084 0B       		.uleb128 0xb
 3149 0085 0D       		.uleb128 0xd
 3150 0086 00       		.byte	0
 3151 0087 03       		.uleb128 0x3
 3152 0088 08       		.uleb128 0x8
 3153 0089 3A       		.uleb128 0x3a
 3154 008a 0B       		.uleb128 0xb
 3155 008b 3B       		.uleb128 0x3b
 3156 008c 0B       		.uleb128 0xb
 3157 008d 49       		.uleb128 0x49
 3158 008e 13       		.uleb128 0x13
 3159 008f 38       		.uleb128 0x38
 3160 0090 0A       		.uleb128 0xa
 3161 0091 00       		.byte	0
 3162 0092 00       		.byte	0
 3163 0093 0C       		.uleb128 0xc
 3164 0094 01       		.uleb128 0x1
 3165 0095 01       		.byte	0x1
 3166 0096 49       		.uleb128 0x49
 3167 0097 13       		.uleb128 0x13
 3168 0098 01       		.uleb128 0x1
 3169 0099 13       		.uleb128 0x13
 3170 009a 00       		.byte	0
ARM GAS  /tmp/ccqMBOyg.s 			page 94


 3171 009b 00       		.byte	0
 3172 009c 0D       		.uleb128 0xd
 3173 009d 21       		.uleb128 0x21
 3174 009e 00       		.byte	0
 3175 009f 49       		.uleb128 0x49
 3176 00a0 13       		.uleb128 0x13
 3177 00a1 2F       		.uleb128 0x2f
 3178 00a2 0B       		.uleb128 0xb
 3179 00a3 00       		.byte	0
 3180 00a4 00       		.byte	0
 3181 00a5 0E       		.uleb128 0xe
 3182 00a6 35       		.uleb128 0x35
 3183 00a7 00       		.byte	0
 3184 00a8 49       		.uleb128 0x49
 3185 00a9 13       		.uleb128 0x13
 3186 00aa 00       		.byte	0
 3187 00ab 00       		.byte	0
 3188 00ac 0F       		.uleb128 0xf
 3189 00ad 13       		.uleb128 0x13
 3190 00ae 01       		.byte	0x1
 3191 00af 0B       		.uleb128 0xb
 3192 00b0 0B       		.uleb128 0xb
 3193 00b1 3A       		.uleb128 0x3a
 3194 00b2 0B       		.uleb128 0xb
 3195 00b3 3B       		.uleb128 0x3b
 3196 00b4 0B       		.uleb128 0xb
 3197 00b5 01       		.uleb128 0x1
 3198 00b6 13       		.uleb128 0x13
 3199 00b7 00       		.byte	0
 3200 00b8 00       		.byte	0
 3201 00b9 10       		.uleb128 0x10
 3202 00ba 26       		.uleb128 0x26
 3203 00bb 00       		.byte	0
 3204 00bc 49       		.uleb128 0x49
 3205 00bd 13       		.uleb128 0x13
 3206 00be 00       		.byte	0
 3207 00bf 00       		.byte	0
 3208 00c0 11       		.uleb128 0x11
 3209 00c1 0D       		.uleb128 0xd
 3210 00c2 00       		.byte	0
 3211 00c3 03       		.uleb128 0x3
 3212 00c4 08       		.uleb128 0x8
 3213 00c5 3A       		.uleb128 0x3a
 3214 00c6 0B       		.uleb128 0xb
 3215 00c7 3B       		.uleb128 0x3b
 3216 00c8 05       		.uleb128 0x5
 3217 00c9 49       		.uleb128 0x49
 3218 00ca 13       		.uleb128 0x13
 3219 00cb 38       		.uleb128 0x38
 3220 00cc 0A       		.uleb128 0xa
 3221 00cd 00       		.byte	0
 3222 00ce 00       		.byte	0
 3223 00cf 12       		.uleb128 0x12
 3224 00d0 0D       		.uleb128 0xd
 3225 00d1 00       		.byte	0
 3226 00d2 03       		.uleb128 0x3
 3227 00d3 0E       		.uleb128 0xe
ARM GAS  /tmp/ccqMBOyg.s 			page 95


 3228 00d4 3A       		.uleb128 0x3a
 3229 00d5 0B       		.uleb128 0xb
 3230 00d6 3B       		.uleb128 0x3b
 3231 00d7 05       		.uleb128 0x5
 3232 00d8 49       		.uleb128 0x49
 3233 00d9 13       		.uleb128 0x13
 3234 00da 38       		.uleb128 0x38
 3235 00db 0A       		.uleb128 0xa
 3236 00dc 00       		.byte	0
 3237 00dd 00       		.byte	0
 3238 00de 13       		.uleb128 0x13
 3239 00df 13       		.uleb128 0x13
 3240 00e0 01       		.byte	0x1
 3241 00e1 0B       		.uleb128 0xb
 3242 00e2 0B       		.uleb128 0xb
 3243 00e3 3A       		.uleb128 0x3a
 3244 00e4 0B       		.uleb128 0xb
 3245 00e5 3B       		.uleb128 0x3b
 3246 00e6 05       		.uleb128 0x5
 3247 00e7 01       		.uleb128 0x1
 3248 00e8 13       		.uleb128 0x13
 3249 00e9 00       		.byte	0
 3250 00ea 00       		.byte	0
 3251 00eb 14       		.uleb128 0x14
 3252 00ec 04       		.uleb128 0x4
 3253 00ed 01       		.byte	0x1
 3254 00ee 0B       		.uleb128 0xb
 3255 00ef 0B       		.uleb128 0xb
 3256 00f0 49       		.uleb128 0x49
 3257 00f1 13       		.uleb128 0x13
 3258 00f2 3A       		.uleb128 0x3a
 3259 00f3 0B       		.uleb128 0xb
 3260 00f4 3B       		.uleb128 0x3b
 3261 00f5 0B       		.uleb128 0xb
 3262 00f6 01       		.uleb128 0x1
 3263 00f7 13       		.uleb128 0x13
 3264 00f8 00       		.byte	0
 3265 00f9 00       		.byte	0
 3266 00fa 15       		.uleb128 0x15
 3267 00fb 13       		.uleb128 0x13
 3268 00fc 01       		.byte	0x1
 3269 00fd 03       		.uleb128 0x3
 3270 00fe 0E       		.uleb128 0xe
 3271 00ff 0B       		.uleb128 0xb
 3272 0100 0B       		.uleb128 0xb
 3273 0101 3A       		.uleb128 0x3a
 3274 0102 0B       		.uleb128 0xb
 3275 0103 3B       		.uleb128 0x3b
 3276 0104 0B       		.uleb128 0xb
 3277 0105 01       		.uleb128 0x1
 3278 0106 13       		.uleb128 0x13
 3279 0107 00       		.byte	0
 3280 0108 00       		.byte	0
 3281 0109 16       		.uleb128 0x16
 3282 010a 2E       		.uleb128 0x2e
 3283 010b 01       		.byte	0x1
 3284 010c 03       		.uleb128 0x3
ARM GAS  /tmp/ccqMBOyg.s 			page 96


 3285 010d 0E       		.uleb128 0xe
 3286 010e 3A       		.uleb128 0x3a
 3287 010f 0B       		.uleb128 0xb
 3288 0110 3B       		.uleb128 0x3b
 3289 0111 05       		.uleb128 0x5
 3290 0112 27       		.uleb128 0x27
 3291 0113 0C       		.uleb128 0xc
 3292 0114 11       		.uleb128 0x11
 3293 0115 01       		.uleb128 0x1
 3294 0116 12       		.uleb128 0x12
 3295 0117 01       		.uleb128 0x1
 3296 0118 40       		.uleb128 0x40
 3297 0119 06       		.uleb128 0x6
 3298 011a 9742     		.uleb128 0x2117
 3299 011c 0C       		.uleb128 0xc
 3300 011d 01       		.uleb128 0x1
 3301 011e 13       		.uleb128 0x13
 3302 011f 00       		.byte	0
 3303 0120 00       		.byte	0
 3304 0121 17       		.uleb128 0x17
 3305 0122 05       		.uleb128 0x5
 3306 0123 00       		.byte	0
 3307 0124 03       		.uleb128 0x3
 3308 0125 0E       		.uleb128 0xe
 3309 0126 3A       		.uleb128 0x3a
 3310 0127 0B       		.uleb128 0xb
 3311 0128 3B       		.uleb128 0x3b
 3312 0129 05       		.uleb128 0x5
 3313 012a 49       		.uleb128 0x49
 3314 012b 13       		.uleb128 0x13
 3315 012c 02       		.uleb128 0x2
 3316 012d 0A       		.uleb128 0xa
 3317 012e 00       		.byte	0
 3318 012f 00       		.byte	0
 3319 0130 18       		.uleb128 0x18
 3320 0131 2E       		.uleb128 0x2e
 3321 0132 01       		.byte	0x1
 3322 0133 03       		.uleb128 0x3
 3323 0134 0E       		.uleb128 0xe
 3324 0135 3A       		.uleb128 0x3a
 3325 0136 0B       		.uleb128 0xb
 3326 0137 3B       		.uleb128 0x3b
 3327 0138 05       		.uleb128 0x5
 3328 0139 27       		.uleb128 0x27
 3329 013a 0C       		.uleb128 0xc
 3330 013b 49       		.uleb128 0x49
 3331 013c 13       		.uleb128 0x13
 3332 013d 11       		.uleb128 0x11
 3333 013e 01       		.uleb128 0x1
 3334 013f 12       		.uleb128 0x12
 3335 0140 01       		.uleb128 0x1
 3336 0141 40       		.uleb128 0x40
 3337 0142 06       		.uleb128 0x6
 3338 0143 9642     		.uleb128 0x2116
 3339 0145 0C       		.uleb128 0xc
 3340 0146 01       		.uleb128 0x1
 3341 0147 13       		.uleb128 0x13
ARM GAS  /tmp/ccqMBOyg.s 			page 97


 3342 0148 00       		.byte	0
 3343 0149 00       		.byte	0
 3344 014a 19       		.uleb128 0x19
 3345 014b 2E       		.uleb128 0x2e
 3346 014c 01       		.byte	0x1
 3347 014d 3F       		.uleb128 0x3f
 3348 014e 0C       		.uleb128 0xc
 3349 014f 03       		.uleb128 0x3
 3350 0150 0E       		.uleb128 0xe
 3351 0151 3A       		.uleb128 0x3a
 3352 0152 0B       		.uleb128 0xb
 3353 0153 3B       		.uleb128 0x3b
 3354 0154 0B       		.uleb128 0xb
 3355 0155 27       		.uleb128 0x27
 3356 0156 0C       		.uleb128 0xc
 3357 0157 49       		.uleb128 0x49
 3358 0158 13       		.uleb128 0x13
 3359 0159 11       		.uleb128 0x11
 3360 015a 01       		.uleb128 0x1
 3361 015b 12       		.uleb128 0x12
 3362 015c 01       		.uleb128 0x1
 3363 015d 40       		.uleb128 0x40
 3364 015e 06       		.uleb128 0x6
 3365 015f 9642     		.uleb128 0x2116
 3366 0161 0C       		.uleb128 0xc
 3367 0162 01       		.uleb128 0x1
 3368 0163 13       		.uleb128 0x13
 3369 0164 00       		.byte	0
 3370 0165 00       		.byte	0
 3371 0166 1A       		.uleb128 0x1a
 3372 0167 34       		.uleb128 0x34
 3373 0168 00       		.byte	0
 3374 0169 03       		.uleb128 0x3
 3375 016a 08       		.uleb128 0x8
 3376 016b 3A       		.uleb128 0x3a
 3377 016c 0B       		.uleb128 0xb
 3378 016d 3B       		.uleb128 0x3b
 3379 016e 0B       		.uleb128 0xb
 3380 016f 49       		.uleb128 0x49
 3381 0170 13       		.uleb128 0x13
 3382 0171 02       		.uleb128 0x2
 3383 0172 0A       		.uleb128 0xa
 3384 0173 00       		.byte	0
 3385 0174 00       		.byte	0
 3386 0175 1B       		.uleb128 0x1b
 3387 0176 34       		.uleb128 0x34
 3388 0177 00       		.byte	0
 3389 0178 03       		.uleb128 0x3
 3390 0179 08       		.uleb128 0x8
 3391 017a 3A       		.uleb128 0x3a
 3392 017b 0B       		.uleb128 0xb
 3393 017c 3B       		.uleb128 0x3b
 3394 017d 0B       		.uleb128 0xb
 3395 017e 49       		.uleb128 0x49
 3396 017f 13       		.uleb128 0x13
 3397 0180 00       		.byte	0
 3398 0181 00       		.byte	0
ARM GAS  /tmp/ccqMBOyg.s 			page 98


 3399 0182 1C       		.uleb128 0x1c
 3400 0183 34       		.uleb128 0x34
 3401 0184 00       		.byte	0
 3402 0185 03       		.uleb128 0x3
 3403 0186 0E       		.uleb128 0xe
 3404 0187 3A       		.uleb128 0x3a
 3405 0188 0B       		.uleb128 0xb
 3406 0189 3B       		.uleb128 0x3b
 3407 018a 0B       		.uleb128 0xb
 3408 018b 49       		.uleb128 0x49
 3409 018c 13       		.uleb128 0x13
 3410 018d 00       		.byte	0
 3411 018e 00       		.byte	0
 3412 018f 1D       		.uleb128 0x1d
 3413 0190 34       		.uleb128 0x34
 3414 0191 00       		.byte	0
 3415 0192 03       		.uleb128 0x3
 3416 0193 0E       		.uleb128 0xe
 3417 0194 3A       		.uleb128 0x3a
 3418 0195 0B       		.uleb128 0xb
 3419 0196 3B       		.uleb128 0x3b
 3420 0197 0B       		.uleb128 0xb
 3421 0198 49       		.uleb128 0x49
 3422 0199 13       		.uleb128 0x13
 3423 019a 02       		.uleb128 0x2
 3424 019b 0A       		.uleb128 0xa
 3425 019c 00       		.byte	0
 3426 019d 00       		.byte	0
 3427 019e 1E       		.uleb128 0x1e
 3428 019f 0F       		.uleb128 0xf
 3429 01a0 00       		.byte	0
 3430 01a1 0B       		.uleb128 0xb
 3431 01a2 0B       		.uleb128 0xb
 3432 01a3 49       		.uleb128 0x49
 3433 01a4 13       		.uleb128 0x13
 3434 01a5 00       		.byte	0
 3435 01a6 00       		.byte	0
 3436 01a7 1F       		.uleb128 0x1f
 3437 01a8 2E       		.uleb128 0x2e
 3438 01a9 01       		.byte	0x1
 3439 01aa 3F       		.uleb128 0x3f
 3440 01ab 0C       		.uleb128 0xc
 3441 01ac 03       		.uleb128 0x3
 3442 01ad 0E       		.uleb128 0xe
 3443 01ae 3A       		.uleb128 0x3a
 3444 01af 0B       		.uleb128 0xb
 3445 01b0 3B       		.uleb128 0x3b
 3446 01b1 05       		.uleb128 0x5
 3447 01b2 27       		.uleb128 0x27
 3448 01b3 0C       		.uleb128 0xc
 3449 01b4 11       		.uleb128 0x11
 3450 01b5 01       		.uleb128 0x1
 3451 01b6 12       		.uleb128 0x12
 3452 01b7 01       		.uleb128 0x1
 3453 01b8 40       		.uleb128 0x40
 3454 01b9 06       		.uleb128 0x6
 3455 01ba 9642     		.uleb128 0x2116
ARM GAS  /tmp/ccqMBOyg.s 			page 99


 3456 01bc 0C       		.uleb128 0xc
 3457 01bd 01       		.uleb128 0x1
 3458 01be 13       		.uleb128 0x13
 3459 01bf 00       		.byte	0
 3460 01c0 00       		.byte	0
 3461 01c1 20       		.uleb128 0x20
 3462 01c2 34       		.uleb128 0x34
 3463 01c3 00       		.byte	0
 3464 01c4 03       		.uleb128 0x3
 3465 01c5 08       		.uleb128 0x8
 3466 01c6 3A       		.uleb128 0x3a
 3467 01c7 0B       		.uleb128 0xb
 3468 01c8 3B       		.uleb128 0x3b
 3469 01c9 05       		.uleb128 0x5
 3470 01ca 49       		.uleb128 0x49
 3471 01cb 13       		.uleb128 0x13
 3472 01cc 02       		.uleb128 0x2
 3473 01cd 0A       		.uleb128 0xa
 3474 01ce 00       		.byte	0
 3475 01cf 00       		.byte	0
 3476 01d0 21       		.uleb128 0x21
 3477 01d1 34       		.uleb128 0x34
 3478 01d2 00       		.byte	0
 3479 01d3 03       		.uleb128 0x3
 3480 01d4 0E       		.uleb128 0xe
 3481 01d5 3A       		.uleb128 0x3a
 3482 01d6 0B       		.uleb128 0xb
 3483 01d7 3B       		.uleb128 0x3b
 3484 01d8 05       		.uleb128 0x5
 3485 01d9 49       		.uleb128 0x49
 3486 01da 13       		.uleb128 0x13
 3487 01db 02       		.uleb128 0x2
 3488 01dc 0A       		.uleb128 0xa
 3489 01dd 00       		.byte	0
 3490 01de 00       		.byte	0
 3491 01df 22       		.uleb128 0x22
 3492 01e0 2E       		.uleb128 0x2e
 3493 01e1 00       		.byte	0
 3494 01e2 3F       		.uleb128 0x3f
 3495 01e3 0C       		.uleb128 0xc
 3496 01e4 03       		.uleb128 0x3
 3497 01e5 0E       		.uleb128 0xe
 3498 01e6 3A       		.uleb128 0x3a
 3499 01e7 0B       		.uleb128 0xb
 3500 01e8 3B       		.uleb128 0x3b
 3501 01e9 05       		.uleb128 0x5
 3502 01ea 27       		.uleb128 0x27
 3503 01eb 0C       		.uleb128 0xc
 3504 01ec 11       		.uleb128 0x11
 3505 01ed 01       		.uleb128 0x1
 3506 01ee 12       		.uleb128 0x12
 3507 01ef 01       		.uleb128 0x1
 3508 01f0 40       		.uleb128 0x40
 3509 01f1 0A       		.uleb128 0xa
 3510 01f2 9742     		.uleb128 0x2117
 3511 01f4 0C       		.uleb128 0xc
 3512 01f5 00       		.byte	0
ARM GAS  /tmp/ccqMBOyg.s 			page 100


 3513 01f6 00       		.byte	0
 3514 01f7 23       		.uleb128 0x23
 3515 01f8 34       		.uleb128 0x34
 3516 01f9 00       		.byte	0
 3517 01fa 03       		.uleb128 0x3
 3518 01fb 0E       		.uleb128 0xe
 3519 01fc 3A       		.uleb128 0x3a
 3520 01fd 0B       		.uleb128 0xb
 3521 01fe 3B       		.uleb128 0x3b
 3522 01ff 0B       		.uleb128 0xb
 3523 0200 49       		.uleb128 0x49
 3524 0201 13       		.uleb128 0x13
 3525 0202 3F       		.uleb128 0x3f
 3526 0203 0C       		.uleb128 0xc
 3527 0204 02       		.uleb128 0x2
 3528 0205 0A       		.uleb128 0xa
 3529 0206 00       		.byte	0
 3530 0207 00       		.byte	0
 3531 0208 24       		.uleb128 0x24
 3532 0209 34       		.uleb128 0x34
 3533 020a 00       		.byte	0
 3534 020b 03       		.uleb128 0x3
 3535 020c 08       		.uleb128 0x8
 3536 020d 3A       		.uleb128 0x3a
 3537 020e 0B       		.uleb128 0xb
 3538 020f 3B       		.uleb128 0x3b
 3539 0210 0B       		.uleb128 0xb
 3540 0211 49       		.uleb128 0x49
 3541 0212 13       		.uleb128 0x13
 3542 0213 3F       		.uleb128 0x3f
 3543 0214 0C       		.uleb128 0xc
 3544 0215 02       		.uleb128 0x2
 3545 0216 0A       		.uleb128 0xa
 3546 0217 00       		.byte	0
 3547 0218 00       		.byte	0
 3548 0219 00       		.byte	0
 3549              		.section	.debug_loc,"",%progbits
 3550              	.Ldebug_loc0:
 3551              	.LLST0:
 3552 0000 00000000 		.4byte	.LFB16
 3553 0004 02000000 		.4byte	.LCFI0
 3554 0008 0200     		.2byte	0x2
 3555 000a 7D       		.byte	0x7d
 3556 000b 00       		.sleb128 0
 3557 000c 02000000 		.4byte	.LCFI0
 3558 0010 04000000 		.4byte	.LCFI1
 3559 0014 0200     		.2byte	0x2
 3560 0016 7D       		.byte	0x7d
 3561 0017 0C       		.sleb128 12
 3562 0018 04000000 		.4byte	.LCFI1
 3563 001c EC000000 		.4byte	.LFE16
 3564 0020 0200     		.2byte	0x2
 3565 0022 7D       		.byte	0x7d
 3566 0023 18       		.sleb128 24
 3567 0024 00000000 		.4byte	0
 3568 0028 00000000 		.4byte	0
 3569              	.LLST1:
ARM GAS  /tmp/ccqMBOyg.s 			page 101


 3570 002c 00000000 		.4byte	.LFB18
 3571 0030 02000000 		.4byte	.LCFI2
 3572 0034 0200     		.2byte	0x2
 3573 0036 7D       		.byte	0x7d
 3574 0037 00       		.sleb128 0
 3575 0038 02000000 		.4byte	.LCFI2
 3576 003c 04000000 		.4byte	.LCFI3
 3577 0040 0200     		.2byte	0x2
 3578 0042 7D       		.byte	0x7d
 3579 0043 04       		.sleb128 4
 3580 0044 04000000 		.4byte	.LCFI3
 3581 0048 48000000 		.4byte	.LFE18
 3582 004c 0200     		.2byte	0x2
 3583 004e 7D       		.byte	0x7d
 3584 004f 10       		.sleb128 16
 3585 0050 00000000 		.4byte	0
 3586 0054 00000000 		.4byte	0
 3587              	.LLST2:
 3588 0058 00000000 		.4byte	.LFB20
 3589 005c 02000000 		.4byte	.LCFI4
 3590 0060 0200     		.2byte	0x2
 3591 0062 7D       		.byte	0x7d
 3592 0063 00       		.sleb128 0
 3593 0064 02000000 		.4byte	.LCFI4
 3594 0068 04000000 		.4byte	.LCFI5
 3595 006c 0200     		.2byte	0x2
 3596 006e 7D       		.byte	0x7d
 3597 006f 0C       		.sleb128 12
 3598 0070 04000000 		.4byte	.LCFI5
 3599 0074 DC030000 		.4byte	.LFE20
 3600 0078 0300     		.2byte	0x3
 3601 007a 7D       		.byte	0x7d
 3602 007b D000     		.sleb128 80
 3603 007d 00000000 		.4byte	0
 3604 0081 00000000 		.4byte	0
 3605              	.LLST3:
 3606 0085 00000000 		.4byte	.LFB21
 3607 0089 02000000 		.4byte	.LCFI6
 3608 008d 0200     		.2byte	0x2
 3609 008f 7D       		.byte	0x7d
 3610 0090 00       		.sleb128 0
 3611 0091 02000000 		.4byte	.LCFI6
 3612 0095 04000000 		.4byte	.LCFI7
 3613 0099 0200     		.2byte	0x2
 3614 009b 7D       		.byte	0x7d
 3615 009c 04       		.sleb128 4
 3616 009d 04000000 		.4byte	.LCFI7
 3617 00a1 B0000000 		.4byte	.LFE21
 3618 00a5 0300     		.2byte	0x3
 3619 00a7 7D       		.byte	0x7d
 3620 00a8 E000     		.sleb128 96
 3621 00aa 00000000 		.4byte	0
 3622 00ae 00000000 		.4byte	0
 3623              		.section	.debug_aranges,"",%progbits
 3624 0000 3C000000 		.4byte	0x3c
 3625 0004 0200     		.2byte	0x2
 3626 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  /tmp/ccqMBOyg.s 			page 102


 3627 000a 04       		.byte	0x4
 3628 000b 00       		.byte	0
 3629 000c 0000     		.2byte	0
 3630 000e 0000     		.2byte	0
 3631 0010 00000000 		.4byte	.LFB16
 3632 0014 EC000000 		.4byte	.LFE16-.LFB16
 3633 0018 00000000 		.4byte	.LFB18
 3634 001c 48000000 		.4byte	.LFE18-.LFB18
 3635 0020 00000000 		.4byte	.LFB20
 3636 0024 DC030000 		.4byte	.LFE20-.LFB20
 3637 0028 00000000 		.4byte	.LFB21
 3638 002c B0000000 		.4byte	.LFE21-.LFB21
 3639 0030 00000000 		.4byte	.LFB22
 3640 0034 28010000 		.4byte	.LFE22-.LFB22
 3641 0038 00000000 		.4byte	0
 3642 003c 00000000 		.4byte	0
 3643              		.section	.debug_ranges,"",%progbits
 3644              	.Ldebug_ranges0:
 3645 0000 00000000 		.4byte	.LFB16
 3646 0004 EC000000 		.4byte	.LFE16
 3647 0008 00000000 		.4byte	.LFB18
 3648 000c 48000000 		.4byte	.LFE18
 3649 0010 00000000 		.4byte	.LFB20
 3650 0014 DC030000 		.4byte	.LFE20
 3651 0018 00000000 		.4byte	.LFB21
 3652 001c B0000000 		.4byte	.LFE21
 3653 0020 00000000 		.4byte	.LFB22
 3654 0024 28010000 		.4byte	.LFE22
 3655 0028 00000000 		.4byte	0
 3656 002c 00000000 		.4byte	0
 3657              		.section	.debug_line,"",%progbits
 3658              	.Ldebug_line0:
 3659 0000 73020000 		.section	.debug_str,"MS",%progbits,1
 3659      02003D01 
 3659      00000201 
 3659      FB0E0D00 
 3659      01010101 
 3660              	.LASF129:
 3661 0000 735F6C63 		.ascii	"s_lcd\000"
 3661      6400
 3662              	.LASF101:
 3663 0006 70776D5F 		.ascii	"pwm_channel_1\000"
 3663      6368616E 
 3663      6E656C5F 
 3663      3100
 3664              	.LASF102:
 3665 0014 70776D5F 		.ascii	"pwm_channel_2\000"
 3665      6368616E 
 3665      6E656C5F 
 3665      3200
 3666              	.LASF103:
 3667 0022 70776D5F 		.ascii	"pwm_channel_3\000"
 3667      6368616E 
 3667      6E656C5F 
 3667      3300
 3668              	.LASF104:
 3669 0030 70776D5F 		.ascii	"pwm_channel_4\000"
ARM GAS  /tmp/ccqMBOyg.s 			page 103


 3669      6368616E 
 3669      6E656C5F 
 3669      3400
 3670              	.LASF125:
 3671 003e 7A65726F 		.ascii	"zero_current_loc\000"
 3671      5F637572 
 3671      72656E74 
 3671      5F6C6F63 
 3671      00
 3672              	.LASF150:
 3673 004f 61637377 		.ascii	"acswitch_timer\000"
 3673      69746368 
 3673      5F74696D 
 3673      657200
 3674              	.LASF170:
 3675 005e 70617261 		.ascii	"param_struct\000"
 3675      6D5F7374 
 3675      72756374 
 3675      00
 3676              	.LASF96:
 3677 006b 6C617374 		.ascii	"last_program_deep_in_flash\000"
 3677      5F70726F 
 3677      6772616D 
 3677      5F646565 
 3677      705F696E 
 3678              	.LASF12:
 3679 0086 45585449 		.ascii	"EXTI4_15_IRQn\000"
 3679      345F3135 
 3679      5F495251 
 3679      6E00
 3680              	.LASF83:
 3681 0094 42535252 		.ascii	"BSRR\000"
 3681      00
 3682              	.LASF94:
 3683 0099 6C617374 		.ascii	"last_function_in_flash\000"
 3683      5F66756E 
 3683      6374696F 
 3683      6E5F696E 
 3683      5F666C61 
 3684              	.LASF11:
 3685 00b0 45585449 		.ascii	"EXTI2_3_IRQn\000"
 3685      325F335F 
 3685      4952516E 
 3685      00
 3686              	.LASF126:
 3687 00bd 6D61696E 		.ascii	"main_state\000"
 3687      5F737461 
 3687      746500
 3688              	.LASF137:
 3689 00c8 705F6D65 		.ascii	"p_mem_init\000"
 3689      6D5F696E 
 3689      697400
 3690              	.LASF2:
 3691 00d3 5356435F 		.ascii	"SVC_IRQn\000"
 3691      4952516E 
 3691      00
 3692              	.LASF139:
ARM GAS  /tmp/ccqMBOyg.s 			page 104


 3693 00dc 62756666 		.ascii	"buffer\000"
 3693      657200
 3694              	.LASF180:
 3695 00e3 76706F74 		.ascii	"vpote\000"
 3695      6500
 3696              	.LASF185:
 3697 00e9 4E564943 		.ascii	"NVIC_SetPriority\000"
 3697      5F536574 
 3697      5072696F 
 3697      72697479 
 3697      00
 3698              	.LASF47:
 3699 00fa 756E7369 		.ascii	"unsigned int\000"
 3699      676E6564 
 3699      20696E74 
 3699      00
 3700              	.LASF71:
 3701 0107 4C4F4144 		.ascii	"LOAD\000"
 3701      00
 3702              	.LASF25:
 3703 010c 54494D31 		.ascii	"TIM16_IRQn\000"
 3703      365F4952 
 3703      516E00
 3704              	.LASF173:
 3705 0117 7463705F 		.ascii	"tcp_kalive_timer\000"
 3705      6B616C69 
 3705      76655F74 
 3705      696D6572 
 3705      00
 3706              	.LASF41:
 3707 0128 5F5F696E 		.ascii	"__int32_t\000"
 3707      7433325F 
 3707      7400
 3708              	.LASF145:
 3709 0132 72783262 		.ascii	"rx2buff\000"
 3709      75666600 
 3710              	.LASF8:
 3711 013a 464C4153 		.ascii	"FLASH_IRQn\000"
 3711      485F4952 
 3711      516E00
 3712              	.LASF147:
 3713 0145 72783162 		.ascii	"rx1buff\000"
 3713      75666600 
 3714              	.LASF178:
 3715 014d 706F7765 		.ascii	"power_vect\000"
 3715      725F7665 
 3715      637400
 3716              	.LASF97:
 3717 0158 64756D6D 		.ascii	"dummy\000"
 3717      7900
 3718              	.LASF72:
 3719 015e 43414C49 		.ascii	"CALIB\000"
 3719      4200
 3720              	.LASF144:
 3721 0164 74783262 		.ascii	"tx2buff\000"
 3721      75666600 
 3722              	.LASF10:
ARM GAS  /tmp/ccqMBOyg.s 			page 105


 3723 016c 45585449 		.ascii	"EXTI0_1_IRQn\000"
 3723      305F315F 
 3723      4952516E 
 3723      00
 3724              	.LASF155:
 3725 0179 67726F75 		.ascii	"grouped_master_timeout_timer\000"
 3725      7065645F 
 3725      6D617374 
 3725      65725F74 
 3725      696D656F 
 3726              	.LASF27:
 3727 0196 49324331 		.ascii	"I2C1_IRQn\000"
 3727      5F495251 
 3727      6E00
 3728              	.LASF3:
 3729 01a0 50656E64 		.ascii	"PendSV_IRQn\000"
 3729      53565F49 
 3729      52516E00 
 3730              	.LASF9:
 3731 01ac 5243435F 		.ascii	"RCC_IRQn\000"
 3731      4952516E 
 3731      00
 3732              	.LASF124:
 3733 01b5 6663616C 		.ascii	"fcalc\000"
 3733      6300
 3734              	.LASF134:
 3735 01bb 73686F77 		.ascii	"show_ldr\000"
 3735      5F6C6472 
 3735      00
 3736              	.LASF51:
 3737 01c4 75696E74 		.ascii	"uint32_t\000"
 3737      33325F74 
 3737      00
 3738              	.LASF52:
 3739 01cd 49534552 		.ascii	"ISER\000"
 3739      00
 3740              	.LASF138:
 3741 01d2 666C6F61 		.ascii	"float\000"
 3741      7400
 3742              	.LASF127:
 3743 01d8 68797374 		.ascii	"hyst\000"
 3743      00
 3744              	.LASF55:
 3745 01dd 52534552 		.ascii	"RSERVED1\000"
 3745      56454431 
 3745      00
 3746              	.LASF29:
 3747 01e6 53504931 		.ascii	"SPI1_IRQn\000"
 3747      5F495251 
 3747      6E00
 3748              	.LASF46:
 3749 01f0 6C6F6E67 		.ascii	"long long unsigned int\000"
 3749      206C6F6E 
 3749      6720756E 
 3749      7369676E 
 3749      65642069 
 3750              	.LASF68:
ARM GAS  /tmp/ccqMBOyg.s 			page 106


 3751 0207 44465352 		.ascii	"DFSR\000"
 3751      00
 3752              	.LASF169:
 3753 020c 75736172 		.ascii	"usart1_pckt_bytes\000"
 3753      74315F70 
 3753      636B745F 
 3753      62797465 
 3753      7300
 3754              	.LASF39:
 3755 021e 5F5F7569 		.ascii	"__uint16_t\000"
 3755      6E743136 
 3755      5F7400
 3756              	.LASF177:
 3757 0229 6D696E75 		.ascii	"minutes\000"
 3757      74657300 
 3758              	.LASF79:
 3759 0231 4D4F4445 		.ascii	"MODER\000"
 3759      5200
 3760              	.LASF77:
 3761 0237 43485345 		.ascii	"CHSELR\000"
 3761      4C5200
 3762              	.LASF167:
 3763 023e 75736172 		.ascii	"usart1_pckt_ready\000"
 3763      74315F70 
 3763      636B745F 
 3763      72656164 
 3763      7900
 3764              	.LASF34:
 3765 0250 4952516E 		.ascii	"IRQn_Type\000"
 3765      5F547970 
 3765      6500
 3766              	.LASF107:
 3767 025a 5463704D 		.ascii	"TcpMessages\000"
 3767      65737361 
 3767      67657300 
 3768              	.LASF32:
 3769 0266 55534152 		.ascii	"USART2_IRQn\000"
 3769      54325F49 
 3769      52516E00 
 3770              	.LASF63:
 3771 0272 43505549 		.ascii	"CPUID\000"
 3771      4400
 3772              	.LASF159:
 3773 0278 74745F74 		.ascii	"tt_take_photo_sample\000"
 3773      616B655F 
 3773      70686F74 
 3773      6F5F7361 
 3773      6D706C65 
 3774              	.LASF186:
 3775 028d 53797354 		.ascii	"SysTick_Config\000"
 3775      69636B5F 
 3775      436F6E66 
 3775      696700
 3776              	.LASF76:
 3777 029c 534D5052 		.ascii	"SMPR\000"
 3777      00
 3778              	.LASF108:
ARM GAS  /tmp/ccqMBOyg.s 			page 107


 3779 02a1 4E4F4E45 		.ascii	"NONE_MSG\000"
 3779      5F4D5347 
 3779      00
 3780              	.LASF90:
 3781 02aa 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 3781      5A45524F 
 3781      5F435552 
 3781      52454E54 
 3781      00
 3782              	.LASF168:
 3783 02bb 75736172 		.ascii	"usart1_have_data\000"
 3783      74315F68 
 3783      6176655F 
 3783      64617461 
 3783      00
 3784              	.LASF82:
 3785 02cc 50555044 		.ascii	"PUPDR\000"
 3785      5200
 3786              	.LASF116:
 3787 02d2 7469636B 		.ascii	"ticks\000"
 3787      7300
 3788              	.LASF148:
 3789 02d8 73686F77 		.ascii	"show_select_timer\000"
 3789      5F73656C 
 3789      6563745F 
 3789      74696D65 
 3789      7200
 3790              	.LASF99:
 3791 02ea 64756D6D 		.ascii	"dummy1\000"
 3791      793100
 3792              	.LASF100:
 3793 02f1 64756D6D 		.ascii	"dummy2\000"
 3793      793200
 3794              	.LASF87:
 3795 02f8 63686172 		.ascii	"char\000"
 3795      00
 3796              	.LASF142:
 3797 02fd 54454D50 		.ascii	"TEMPERATURE_Value\000"
 3797      45524154 
 3797      5552455F 
 3797      56616C75 
 3797      6500
 3798              	.LASF122:
 3799 030f 706F7765 		.ascii	"power_dec\000"
 3799      725F6465 
 3799      6300
 3800              	.LASF65:
 3801 0319 41495243 		.ascii	"AIRCR\000"
 3801      5200
 3802              	.LASF156:
 3803 031f 74616B65 		.ascii	"take_temp_sample\000"
 3803      5F74656D 
 3803      705F7361 
 3803      6D706C65 
 3803      00
 3804              	.LASF21:
 3805 0330 54494D33 		.ascii	"TIM3_IRQn\000"
ARM GAS  /tmp/ccqMBOyg.s 			page 108


 3805      5F495251 
 3805      6E00
 3806              	.LASF14:
 3807 033a 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 3807      5F436861 
 3807      6E6E656C 
 3807      315F4952 
 3807      516E00
 3808              	.LASF118:
 3809 034d 62797465 		.ascii	"bytes_read\000"
 3809      735F7265 
 3809      616400
 3810              	.LASF93:
 3811 0358 6D61696E 		.ascii	"main_state_t\000"
 3811      5F737461 
 3811      74655F74 
 3811      00
 3812              	.LASF24:
 3813 0365 54494D31 		.ascii	"TIM15_IRQn\000"
 3813      355F4952 
 3813      516E00
 3814              	.LASF48:
 3815 0370 75696E74 		.ascii	"uint8_t\000"
 3815      385F7400 
 3816              	.LASF146:
 3817 0378 74783162 		.ascii	"tx1buff\000"
 3817      75666600 
 3818              	.LASF160:
 3819 0380 74745F72 		.ascii	"tt_relay_on_off\000"
 3819      656C6179 
 3819      5F6F6E5F 
 3819      6F666600 
 3820              	.LASF175:
 3821 0390 73656373 		.ascii	"secs\000"
 3821      00
 3822              	.LASF92:
 3823 0395 4C414D50 		.ascii	"LAMP_ON\000"
 3823      5F4F4E00 
 3824              	.LASF78:
 3825 039d 4144435F 		.ascii	"ADC_TypeDef\000"
 3825      54797065 
 3825      44656600 
 3826              	.LASF45:
 3827 03a9 6C6F6E67 		.ascii	"long long int\000"
 3827      206C6F6E 
 3827      6720696E 
 3827      7400
 3828              	.LASF5:
 3829 03b7 57574447 		.ascii	"WWDG_IRQn\000"
 3829      5F495251 
 3829      6E00
 3830              	.LASF67:
 3831 03c1 53484353 		.ascii	"SHCSR\000"
 3831      5200
 3832              	.LASF166:
 3833 03c7 75736172 		.ascii	"usart1_mini_timeout\000"
 3833      74315F6D 
ARM GAS  /tmp/ccqMBOyg.s 			page 109


 3833      696E695F 
 3833      74696D65 
 3833      6F757400 
 3834              	.LASF161:
 3835 03db 73617665 		.ascii	"saved_mode\000"
 3835      645F6D6F 
 3835      646500
 3836              	.LASF174:
 3837 03e6 66696C74 		.ascii	"filter_timer\000"
 3837      65725F74 
 3837      696D6572 
 3837      00
 3838              	.LASF184:
 3839 03f3 70617261 		.ascii	"parameters\000"
 3839      6D657465 
 3839      727300
 3840              	.LASF158:
 3841 03fe 74696D65 		.ascii	"timer_relay\000"
 3841      725F7265 
 3841      6C617900 
 3842              	.LASF88:
 3843 040a 4D41494E 		.ascii	"MAIN_INIT\000"
 3843      5F494E49 
 3843      5400
 3844              	.LASF110:
 3845 0414 524F4F4D 		.ascii	"ROOM_BRIGHT\000"
 3845      5F425249 
 3845      47485400 
 3846              	.LASF165:
 3847 0420 7A65726F 		.ascii	"zero_current\000"
 3847      5F637572 
 3847      72656E74 
 3847      00
 3848              	.LASF13:
 3849 042d 54535F49 		.ascii	"TS_IRQn\000"
 3849      52516E00 
 3850              	.LASF135:
 3851 0435 64756D6D 		.ascii	"dummy_resp\000"
 3851      795F7265 
 3851      737000
 3852              	.LASF18:
 3853 0440 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 3853      5F42524B 
 3853      5F55505F 
 3853      5452475F 
 3853      434F4D5F 
 3854              	.LASF140:
 3855 0459 74656D70 		.ascii	"tempbuff\000"
 3855      62756666 
 3855      00
 3856              	.LASF6:
 3857 0462 5056445F 		.ascii	"PVD_IRQn\000"
 3857      4952516E 
 3857      00
 3858              	.LASF74:
 3859 046b 43464752 		.ascii	"CFGR1\000"
 3859      3100
ARM GAS  /tmp/ccqMBOyg.s 			page 110


 3860              	.LASF75:
 3861 0471 43464752 		.ascii	"CFGR2\000"
 3861      3200
 3862              	.LASF114:
 3863 0477 4C494748 		.ascii	"LIGHTS_ON\000"
 3863      54535F4F 
 3863      4E00
 3864              	.LASF58:
 3865 0481 49435052 		.ascii	"ICPR\000"
 3865      00
 3866              	.LASF17:
 3867 0486 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 3867      5F434F4D 
 3867      505F4952 
 3867      516E00
 3868              	.LASF149:
 3869 0495 73776974 		.ascii	"switches_timer\000"
 3869      63686573 
 3869      5F74696D 
 3869      657200
 3870              	.LASF130:
 3871 04a4 7463705F 		.ascii	"tcp_msg\000"
 3871      6D736700 
 3872              	.LASF81:
 3873 04ac 4F535045 		.ascii	"OSPEEDR\000"
 3873      45445200 
 3874              	.LASF73:
 3875 04b4 53797354 		.ascii	"SysTick_Type\000"
 3875      69636B5F 
 3875      54797065 
 3875      00
 3876              	.LASF86:
 3877 04c1 6C6F6E67 		.ascii	"long double\000"
 3877      20646F75 
 3877      626C6500 
 3878              	.LASF49:
 3879 04cd 75696E74 		.ascii	"uint16_t\000"
 3879      31365F74 
 3879      00
 3880              	.LASF106:
 3881 04d6 4952516E 		.ascii	"IRQn\000"
 3881      00
 3882              	.LASF98:
 3883 04db 6C617374 		.ascii	"last_channel_in_flash\000"
 3883      5F636861 
 3883      6E6E656C 
 3883      5F696E5F 
 3883      666C6173 
 3884              	.LASF151:
 3885 04f1 7363726F 		.ascii	"scroll1_timer\000"
 3885      6C6C315F 
 3885      74696D65 
 3885      7200
 3886              	.LASF7:
 3887 04ff 5254435F 		.ascii	"RTC_IRQn\000"
 3887      4952516E 
 3887      00
ARM GAS  /tmp/ccqMBOyg.s 			page 111


 3888              	.LASF53:
 3889 0508 52455345 		.ascii	"RESERVED0\000"
 3889      52564544 
 3889      3000
 3890              	.LASF66:
 3891 0512 52455345 		.ascii	"RESERVED1\000"
 3891      52564544 
 3891      3100
 3892              	.LASF57:
 3893 051c 52455345 		.ascii	"RESERVED2\000"
 3893      52564544 
 3893      3200
 3894              	.LASF59:
 3895 0526 52455345 		.ascii	"RESERVED3\000"
 3895      52564544 
 3895      3300
 3896              	.LASF60:
 3897 0530 52455345 		.ascii	"RESERVED4\000"
 3897      52564544 
 3897      3400
 3898              	.LASF38:
 3899 053a 73686F72 		.ascii	"short int\000"
 3899      7420696E 
 3899      7400
 3900              	.LASF42:
 3901 0544 6C6F6E67 		.ascii	"long int\000"
 3901      20696E74 
 3901      00
 3902              	.LASF31:
 3903 054d 55534152 		.ascii	"USART1_IRQn\000"
 3903      54315F49 
 3903      52516E00 
 3904              	.LASF0:
 3905 0559 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 3905      61736B61 
 3905      626C6549 
 3905      6E745F49 
 3905      52516E00 
 3906              	.LASF115:
 3907 056d 7072696F 		.ascii	"priority\000"
 3907      72697479 
 3907      00
 3908              	.LASF19:
 3909 0576 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 3909      5F43435F 
 3909      4952516E 
 3909      00
 3910              	.LASF80:
 3911 0583 4F545950 		.ascii	"OTYPER\000"
 3911      455200
 3912              	.LASF132:
 3913 058a 6E65775F 		.ascii	"new_lamp\000"
 3913      6C616D70 
 3913      00
 3914              	.LASF171:
 3915 0593 77616974 		.ascii	"wait_ms_var\000"
 3915      5F6D735F 
ARM GAS  /tmp/ccqMBOyg.s 			page 112


 3915      76617200 
 3916              	.LASF26:
 3917 059f 54494D31 		.ascii	"TIM17_IRQn\000"
 3917      375F4952 
 3917      516E00
 3918              	.LASF89:
 3919 05aa 53594E43 		.ascii	"SYNCHRO_ADC\000"
 3919      48524F5F 
 3919      41444300 
 3920              	.LASF16:
 3921 05b6 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 3921      5F436861 
 3921      6E6E656C 
 3921      345F355F 
 3921      4952516E 
 3922              	.LASF176:
 3923 05cb 686F7572 		.ascii	"hours\000"
 3923      7300
 3924              	.LASF35:
 3925 05d1 5F5F7569 		.ascii	"__uint8_t\000"
 3925      6E74385F 
 3925      7400
 3926              	.LASF111:
 3927 05db 4C414D50 		.ascii	"LAMP_BRIGHT\000"
 3927      5F425249 
 3927      47485400 
 3928              	.LASF62:
 3929 05e7 4E564943 		.ascii	"NVIC_Type\000"
 3929      5F547970 
 3929      6500
 3930              	.LASF69:
 3931 05f1 5343425F 		.ascii	"SCB_Type\000"
 3931      54797065 
 3931      00
 3932              	.LASF85:
 3933 05fa 4750494F 		.ascii	"GPIO_TypeDef\000"
 3933      5F547970 
 3933      65446566 
 3933      00
 3934              	.LASF4:
 3935 0607 53797354 		.ascii	"SysTick_IRQn\000"
 3935      69636B5F 
 3935      4952516E 
 3935      00
 3936              	.LASF33:
 3937 0614 4345435F 		.ascii	"CEC_IRQn\000"
 3937      4952516E 
 3937      00
 3938              	.LASF61:
 3939 061d 73697A65 		.ascii	"sizetype\000"
 3939      74797065 
 3939      00
 3940              	.LASF64:
 3941 0626 49435352 		.ascii	"ICSR\000"
 3941      00
 3942              	.LASF28:
 3943 062b 49324332 		.ascii	"I2C2_IRQn\000"
ARM GAS  /tmp/ccqMBOyg.s 			page 113


 3943      5F495251 
 3943      6E00
 3944              	.LASF44:
 3945 0635 6C6F6E67 		.ascii	"long unsigned int\000"
 3945      20756E73 
 3945      69676E65 
 3945      6420696E 
 3945      7400
 3946              	.LASF20:
 3947 0647 54494D32 		.ascii	"TIM2_IRQn\000"
 3947      5F495251 
 3947      6E00
 3948              	.LASF143:
 3949 0651 50524553 		.ascii	"PRESSURE_Value\000"
 3949      53555245 
 3949      5F56616C 
 3949      756500
 3950              	.LASF183:
 3951 0660 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 3951      652F6D65 
 3951      642F446F 
 3951      63756D65 
 3951      6E74732F 
 3952 0693 6100     		.ascii	"a\000"
 3953              	.LASF141:
 3954 0695 48554D49 		.ascii	"HUMIDITY_Value\000"
 3954      44495459 
 3954      5F56616C 
 3954      756500
 3955              	.LASF50:
 3956 06a4 696E7433 		.ascii	"int32_t\000"
 3956      325F7400 
 3957              	.LASF154:
 3958 06ac 7374616E 		.ascii	"standalone_enable_menu_timer\000"
 3958      64616C6F 
 3958      6E655F65 
 3958      6E61626C 
 3958      655F6D65 
 3959              	.LASF163:
 3960 06c9 6164635F 		.ascii	"adc_ch\000"
 3960      636800
 3961              	.LASF23:
 3962 06d0 54494D31 		.ascii	"TIM14_IRQn\000"
 3962      345F4952 
 3962      516E00
 3963              	.LASF15:
 3964 06db 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 3964      5F436861 
 3964      6E6E656C 
 3964      325F335F 
 3964      4952516E 
 3965              	.LASF136:
 3966 06f0 7070735F 		.ascii	"pps_one\000"
 3966      6F6E6500 
 3967              	.LASF22:
 3968 06f8 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 3968      5F444143 
ARM GAS  /tmp/ccqMBOyg.s 			page 114


 3968      5F495251 
 3968      6E00
 3969              	.LASF37:
 3970 0706 756E7369 		.ascii	"unsigned char\000"
 3970      676E6564 
 3970      20636861 
 3970      7200
 3971              	.LASF91:
 3972 0714 4C414D50 		.ascii	"LAMP_OFF\000"
 3972      5F4F4646 
 3972      00
 3973              	.LASF43:
 3974 071d 5F5F7569 		.ascii	"__uint32_t\000"
 3974      6E743332 
 3974      5F7400
 3975              	.LASF133:
 3976 0728 6C617374 		.ascii	"last_bright\000"
 3976      5F627269 
 3976      67687400 
 3977              	.LASF119:
 3978 0734 6E656564 		.ascii	"need_ack\000"
 3978      5F61636B 
 3978      00
 3979              	.LASF95:
 3980 073d 6C617374 		.ascii	"last_program_in_flash\000"
 3980      5F70726F 
 3980      6772616D 
 3980      5F696E5F 
 3980      666C6173 
 3981              	.LASF162:
 3982 0753 7361635F 		.ascii	"sac_aux\000"
 3982      61757800 
 3983              	.LASF131:
 3984 075b 6E65775F 		.ascii	"new_room\000"
 3984      726F6F6D 
 3984      00
 3985              	.LASF189:
 3986 0764 54696D69 		.ascii	"TimingDelay_Decrement\000"
 3986      6E674465 
 3986      6C61795F 
 3986      44656372 
 3986      656D656E 
 3987              	.LASF157:
 3988 077a 74696D65 		.ascii	"timer_wifi_bright\000"
 3988      725F7769 
 3988      66695F62 
 3988      72696768 
 3988      7400
 3989              	.LASF54:
 3990 078c 49434552 		.ascii	"ICER\000"
 3990      00
 3991              	.LASF128:
 3992 0791 6F6E655F 		.ascii	"one_to_ten\000"
 3992      746F5F74 
 3992      656E00
 3993              	.LASF30:
 3994 079c 53504932 		.ascii	"SPI2_IRQn\000"
ARM GAS  /tmp/ccqMBOyg.s 			page 115


 3994      5F495251 
 3994      6E00
 3995              	.LASF188:
 3996 07a6 70726570 		.ascii	"prepare_json_pkt\000"
 3996      6172655F 
 3996      6A736F6E 
 3996      5F706B74 
 3996      00
 3997              	.LASF109:
 3998 07b7 4B454550 		.ascii	"KEEP_ALIVE\000"
 3998      5F414C49 
 3998      564500
 3999              	.LASF123:
 4000 07c2 706F7765 		.ascii	"power\000"
 4000      7200
 4001              	.LASF105:
 4002 07c8 70617261 		.ascii	"parameters_typedef\000"
 4002      6D657465 
 4002      72735F74 
 4002      79706564 
 4002      656600
 4003              	.LASF36:
 4004 07db 7369676E 		.ascii	"signed char\000"
 4004      65642063 
 4004      68617200 
 4005              	.LASF182:
 4006 07e7 7372632F 		.ascii	"src/main.c\000"
 4006      6D61696E 
 4006      2E6300
 4007              	.LASF121:
 4008 07f2 706F7765 		.ascii	"power_int\000"
 4008      725F696E 
 4008      7400
 4009              	.LASF113:
 4010 07fc 4C494748 		.ascii	"LIGHTS_OFF\000"
 4010      54535F4F 
 4010      464600
 4011              	.LASF40:
 4012 0807 73686F72 		.ascii	"short unsigned int\000"
 4012      7420756E 
 4012      7369676E 
 4012      65642069 
 4012      6E7400
 4013              	.LASF181:
 4014 081a 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4014      43313120 
 4014      352E322E 
 4014      31203230 
 4014      31353132 
 4015 084d 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4015      20726576 
 4015      6973696F 
 4015      6E203233 
 4015      31383438 
 4016 0880 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4016      662D3220 
 4016      2D4F3020 
ARM GAS  /tmp/ccqMBOyg.s 			page 116


 4016      2D666F6D 
 4016      69742D66 
 4017 08b3 66756E63 		.ascii	"function-sections\000"
 4017      74696F6E 
 4017      2D736563 
 4017      74696F6E 
 4017      7300
 4018              	.LASF153:
 4019 08c5 7374616E 		.ascii	"standalone_timer\000"
 4019      64616C6F 
 4019      6E655F74 
 4019      696D6572 
 4019      00
 4020              	.LASF187:
 4021 08d6 6D61696E 		.ascii	"main\000"
 4021      00
 4022              	.LASF1:
 4023 08db 48617264 		.ascii	"HardFault_IRQn\000"
 4023      4661756C 
 4023      745F4952 
 4023      516E00
 4024              	.LASF56:
 4025 08ea 49535052 		.ascii	"ISPR\000"
 4025      00
 4026              	.LASF120:
 4027 08ef 72657370 		.ascii	"resp\000"
 4027      00
 4028              	.LASF164:
 4029 08f4 7365715F 		.ascii	"seq_ready\000"
 4029      72656164 
 4029      7900
 4030              	.LASF179:
 4031 08fe 7674656D 		.ascii	"vtemp\000"
 4031      7000
 4032              	.LASF152:
 4033 0904 7363726F 		.ascii	"scroll2_timer\000"
 4033      6C6C325F 
 4033      74696D65 
 4033      7200
 4034              	.LASF172:
 4035 0912 74696D65 		.ascii	"timer_standby\000"
 4035      725F7374 
 4035      616E6462 
 4035      7900
 4036              	.LASF117:
 4037 0920 62797465 		.ascii	"bytes_remain\000"
 4037      735F7265 
 4037      6D61696E 
 4037      00
 4038              	.LASF84:
 4039 092d 4C434B52 		.ascii	"LCKR\000"
 4039      00
 4040              	.LASF70:
 4041 0932 4354524C 		.ascii	"CTRL\000"
 4041      00
 4042              	.LASF112:
 4043 0937 4745545F 		.ascii	"GET_A\000"
ARM GAS  /tmp/ccqMBOyg.s 			page 117


 4043      4100
 4044              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccqMBOyg.s 			page 118


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccqMBOyg.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccqMBOyg.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccqMBOyg.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccqMBOyg.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccqMBOyg.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccqMBOyg.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/ccqMBOyg.s:277    .bss.show_select_timer:00000000 show_select_timer
     /tmp/ccqMBOyg.s:274    .bss.show_select_timer:00000000 $d
     /tmp/ccqMBOyg.s:283    .bss.switches_timer:00000000 switches_timer
     /tmp/ccqMBOyg.s:284    .bss.switches_timer:00000000 $d
     /tmp/ccqMBOyg.s:289    .bss.acswitch_timer:00000000 acswitch_timer
     /tmp/ccqMBOyg.s:290    .bss.acswitch_timer:00000000 $d
     /tmp/ccqMBOyg.s:296    .bss.scroll1_timer:00000000 scroll1_timer
     /tmp/ccqMBOyg.s:293    .bss.scroll1_timer:00000000 $d
     /tmp/ccqMBOyg.s:303    .bss.scroll2_timer:00000000 scroll2_timer
     /tmp/ccqMBOyg.s:300    .bss.scroll2_timer:00000000 $d
                            *COM*:00000002 standalone_timer
                            *COM*:00000002 standalone_enable_menu_timer
                            *COM*:00000001 grouped_master_timeout_timer
     /tmp/ccqMBOyg.s:313    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccqMBOyg.s:310    .bss.take_temp_sample:00000000 $d
     /tmp/ccqMBOyg.s:319    .bss.timer_wifi_bright:00000000 timer_wifi_bright
     /tmp/ccqMBOyg.s:320    .bss.timer_wifi_bright:00000000 $d
     /tmp/ccqMBOyg.s:326    .bss.timer_relay:00000000 timer_relay
     /tmp/ccqMBOyg.s:323    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000006 adc_ch
     /tmp/ccqMBOyg.s:340    .bss.seq_ready:00000000 seq_ready
     /tmp/ccqMBOyg.s:341    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:0000000c param_struct
     /tmp/ccqMBOyg.s:353    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccqMBOyg.s:350    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/ccqMBOyg.s:363    .bss.secs:00000000 secs
     /tmp/ccqMBOyg.s:360    .bss.secs:00000000 $d
     /tmp/ccqMBOyg.s:369    .bss.hours:00000000 hours
     /tmp/ccqMBOyg.s:370    .bss.hours:00000000 $d
     /tmp/ccqMBOyg.s:375    .bss.minutes:00000000 minutes
ARM GAS  /tmp/ccqMBOyg.s 			page 119


     /tmp/ccqMBOyg.s:376    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccqMBOyg.s:381    .rodata:00000000 $d
     /tmp/ccqMBOyg.s:414    .text.main:00000000 $t
     /tmp/ccqMBOyg.s:419    .text.main:00000000 main
     /tmp/ccqMBOyg.s:678    .rodata.main:00000000 $d
     /tmp/ccqMBOyg.s:998    .text.main:0000038c $d
     /tmp/ccqMBOyg.s:1038   .text.prepare_json_pkt:00000000 $t
     /tmp/ccqMBOyg.s:1043   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccqMBOyg.s:1135   .text.prepare_json_pkt:0000009c $d
     /tmp/ccqMBOyg.s:1144   .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccqMBOyg.s:1149   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccqMBOyg.s:1314   .text.TimingDelay_Decrement:000000fc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_ui2f
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2uiz
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
GPIO_Config
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
Update_TIM3_CH1
GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
sprintf
UpdateVGrid
UpdateIGrid
UpdateRelay
memcpy
strcat
strlen
