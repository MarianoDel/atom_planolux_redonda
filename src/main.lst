ARM GAS  /tmp/cc67MAoN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/cc67MAoN.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/cc67MAoN.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/cc67MAoN.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/cc67MAoN.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/cc67MAoN.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/cc67MAoN.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc67MAoN.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc67MAoN.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/cc67MAoN.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc67MAoN.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/cc67MAoN.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc67MAoN.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/cc67MAoN.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/cc67MAoN.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/cc67MAoN.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/cc67MAoN.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/cc67MAoN.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7153,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7154, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7155, D.7154
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7155, D.7155
  92 0026 083B     		subs	r3, r3, #8	@ D.7155,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7155, D.7155,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7153,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7154, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7155, D.7154
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7155, D.7155
 101 0038 083B     		subs	r3, r3, #8	@ D.7155,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7155, D.7155,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7153, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7155, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7154, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7155, D.7154
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7155, D.7155
 114 0052 D200     		lsls	r2, r2, #3	@ D.7155, D.7155,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7156, D.7156, D.7155
 117 0058 0200     		movs	r2, r0	@ D.7156, D.7156
 118 005a D243     		mvns	r2, r2	@ D.7156, D.7156
 119 005c 1A40     		ands	r2, r3	@ D.7155, D.7155
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7155, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7155, D.7155
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7154, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7155, D.7154
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7155, D.7155
ARM GAS  /tmp/cc67MAoN.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7155, D.7155,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7155, D.7155, D.7155
 133 0076 0300     		movs	r3, r0	@ D.7155, D.7155
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7155, D.7155
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7155,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7153, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7155, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7157,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7155, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7155, D.7155
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7155, D.7155,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7157,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7155, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7155, D.7155
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7155, D.7155,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7155, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7154, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7155, D.7154
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7155, D.7155
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7155, D.7155,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7156, D.7156, D.7155
 169 00b6 0100     		movs	r1, r0	@ D.7156, D.7156
 170 00b8 C943     		mvns	r1, r1	@ D.7156, D.7156
 171 00ba 1140     		ands	r1, r2	@ D.7155, D.7155
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7155, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7155, D.7155
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7154, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7155, D.7154
ARM GAS  /tmp/cc67MAoN.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7155, D.7155
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7155, D.7155,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7155, D.7155, D.7155
 185 00d4 0200     		movs	r2, r0	@ D.7155, D.7155
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7155, D.7155
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7155, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/cc67MAoN.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7158,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7159,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7160, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7160,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7160, _6->LOAD
ARM GAS  /tmp/cc67MAoN.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7159,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7159,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7158,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	show_select_timer
 273              		.section	.bss.show_select_timer,"aw",%nobits
 274              		.align	1
 275              		.type	show_select_timer, %object
 276              		.size	show_select_timer, 2
 277              	show_select_timer:
 278 0000 0000     		.space	2
 279              		.global	switches_timer
 280              		.section	.bss.switches_timer,"aw",%nobits
 281              		.type	switches_timer, %object
 282              		.size	switches_timer, 1
 283              	switches_timer:
 284 0000 00       		.space	1
 285              		.global	acswitch_timer
 286              		.section	.bss.acswitch_timer,"aw",%nobits
 287              		.type	acswitch_timer, %object
ARM GAS  /tmp/cc67MAoN.s 			page 23


 288              		.size	acswitch_timer, 1
 289              	acswitch_timer:
 290 0000 00       		.space	1
 291              		.global	scroll1_timer
 292              		.section	.bss.scroll1_timer,"aw",%nobits
 293              		.align	1
 294              		.type	scroll1_timer, %object
 295              		.size	scroll1_timer, 2
 296              	scroll1_timer:
 297 0000 0000     		.space	2
 298              		.global	scroll2_timer
 299              		.section	.bss.scroll2_timer,"aw",%nobits
 300              		.align	1
 301              		.type	scroll2_timer, %object
 302              		.size	scroll2_timer, 2
 303              	scroll2_timer:
 304 0000 0000     		.space	2
 305              		.comm	standalone_timer,2,2
 306              		.comm	standalone_enable_menu_timer,2,2
 307              		.comm	grouped_master_timeout_timer,1,1
 308              		.global	take_temp_sample
 309              		.section	.bss.take_temp_sample,"aw",%nobits
 310              		.align	1
 311              		.type	take_temp_sample, %object
 312              		.size	take_temp_sample, 2
 313              	take_temp_sample:
 314 0000 0000     		.space	2
 315              		.global	timer_wifi_bright
 316              		.section	.bss.timer_wifi_bright,"aw",%nobits
 317              		.type	timer_wifi_bright, %object
 318              		.size	timer_wifi_bright, 1
 319              	timer_wifi_bright:
 320 0000 00       		.space	1
 321              		.global	timer_relay
 322              		.section	.bss.timer_relay,"aw",%nobits
 323              		.align	1
 324              		.type	timer_relay, %object
 325              		.size	timer_relay, 2
 326              	timer_relay:
 327 0000 0000     		.space	2
 328              		.comm	tt_take_photo_sample,2,2
 329              		.comm	tt_relay_on_off,2,2
 330              		.comm	saved_mode,1,1
 331              		.comm	s1,2,2
 332              		.comm	s2,2,2
 333              		.comm	sac,2,2
 334              		.comm	sac_aux,1,1
 335              		.comm	adc_ch,6,4
 336              		.global	seq_ready
 337              		.section	.bss.seq_ready,"aw",%nobits
 338              		.type	seq_ready, %object
 339              		.size	seq_ready, 1
 340              	seq_ready:
 341 0000 00       		.space	1
 342              		.comm	zero_current,2,2
 343              		.comm	usart1_mini_timeout,1,1
 344              		.comm	usart1_pckt_ready,1,1
ARM GAS  /tmp/cc67MAoN.s 			page 24


 345              		.comm	usart1_have_data,1,1
 346              		.comm	usart1_pckt_bytes,1,1
 347              		.comm	usart2_mini_timeout,1,1
 348              		.comm	usart2_pckt_ready,1,1
 349              		.comm	usart2_have_data,1,1
 350              		.comm	usart2_pckt_bytes,1,1
 351              		.comm	param_struct,84,4
 352              		.global	power_2secs_acum
 353              		.section	.bss.power_2secs_acum,"aw",%nobits
 354              		.align	2
 355              		.type	power_2secs_acum, %object
 356              		.size	power_2secs_acum, 4
 357              	power_2secs_acum:
 358 0000 00000000 		.space	4
 359              		.global	power_2secs_index
 360              		.section	.bss.power_2secs_index,"aw",%nobits
 361              		.type	power_2secs_index, %object
 362              		.size	power_2secs_index, 1
 363              	power_2secs_index:
 364 0000 00       		.space	1
 365              		.global	power_minutes
 366              		.section	.bss.power_minutes,"aw",%nobits
 367              		.align	1
 368              		.type	power_minutes, %object
 369              		.size	power_minutes, 2
 370              	power_minutes:
 371 0000 0000     		.space	2
 372              		.global	power_minutes_index
 373              		.section	.bss.power_minutes_index,"aw",%nobits
 374              		.type	power_minutes_index, %object
 375              		.size	power_minutes_index, 1
 376              	power_minutes_index:
 377 0000 00       		.space	1
 378              		.global	power_hours
 379              		.section	.bss.power_hours,"aw",%nobits
 380              		.align	1
 381              		.type	power_hours, %object
 382              		.size	power_hours, 2
 383              	power_hours:
 384 0000 0000     		.space	2
 385              		.comm	gsmNUM,20,4
 386              		.comm	gsmMSG,180,4
 387              		.global	wait_ms_var
 388              		.section	.bss.wait_ms_var,"aw",%nobits
 389              		.align	1
 390              		.type	wait_ms_var, %object
 391              		.size	wait_ms_var, 2
 392              	wait_ms_var:
 393 0000 0000     		.space	2
 394              		.comm	timer_standby,2,2
 395              		.comm	tcp_kalive_timer,2,2
 396              		.comm	filter_timer,1,1
 397              		.global	secs
 398              		.section	.bss.secs,"aw",%nobits
 399              		.align	1
 400              		.type	secs, %object
 401              		.size	secs, 2
ARM GAS  /tmp/cc67MAoN.s 			page 25


 402              	secs:
 403 0000 0000     		.space	2
 404              		.global	hours
 405              		.section	.bss.hours,"aw",%nobits
 406              		.type	hours, %object
 407              		.size	hours, 1
 408              	hours:
 409 0000 00       		.space	1
 410              		.global	minutes
 411              		.section	.bss.minutes,"aw",%nobits
 412              		.type	minutes, %object
 413              		.size	minutes, 1
 414              	minutes:
 415 0000 00       		.space	1
 416              		.comm	power_vect,20,4
 417              		.comm	vtemp,34,4
 418              		.comm	vpote,34,4
 419              		.section	.rodata
 420              		.align	2
 421              	.LC1:
 422 0000 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 422      726E6F20 
 422      506C6163 
 422      61205265 
 422      646F6E64 
 423 0025 000000   		.align	2
 424              	.LC3:
 425 0028 20204665 		.ascii	"  Features:\015\012\000"
 425      61747572 
 425      65733A0D 
 425      0A00
 426 0036 0000     		.align	2
 427              	.LC5:
 428 0038 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 428      6D6D6572 
 428      20312074 
 428      6F203130 
 428      560D0A00 
 429              		.align	2
 430              	.LC7:
 431 004c 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 431      67687420 
 431      48797374 
 431      65726573 
 431      69730D0A 
 432 0061 000000   		.align	2
 433              	.LC9:
 434 0064 20205379 		.ascii	"  Sync by ADC\015\012\000"
 434      6E632062 
 434      79204144 
 434      430D0A00 
 435              		.align	2
 436              	.LC11:
 437 0074 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 437      65732047 
 437      534D2066 
 437      6F722053 
ARM GAS  /tmp/cc67MAoN.s 			page 26


 437      4D532064 
 438 008e 0000     		.align	2
 439              	.LC16:
 440 0090 47657474 		.ascii	"Getted\015\012\000"
 440      65640D0A 
 440      00
 441 0099 000000   		.align	2
 442              	.LC18:
 443 009c 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 443      696E6720 
 443      47534D20 
 443      53746172 
 443      74757020 
 444 00c3 00       		.align	2
 445              	.LC22:
 446 00c4 5265706F 		.ascii	"Reports by SMS\015\012\000"
 446      72747320 
 446      62792053 
 446      4D530D0A 
 446      00
 447              		.global	__aeabi_uidiv
 448              		.global	__aeabi_i2d
 449              		.global	__aeabi_dmul
 450              		.global	__aeabi_d2f
 451              		.global	__aeabi_f2uiz
 452              		.global	__aeabi_i2f
 453              		.global	__aeabi_fsub
 454              		.global	__aeabi_fmul
 455              		.global	__aeabi_ui2d
 456 00d5 000000   		.align	2
 457              	.LC25:
 458 00d8 70693A20 		.ascii	"pi: %3d.%02d wh: %3d.%02d\015\012\000"
 458      2533642E 
 458      25303264 
 458      2077683A 
 458      20253364 
 459              		.section	.text.main,"ax",%progbits
 460              		.align	2
 461              		.global	main
 462              		.code	16
 463              		.thumb_func
 464              		.type	main, %function
 465              	main:
 466              	.LFB20:
 467              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
ARM GAS  /tmp/cc67MAoN.s 			page 27


  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
ARM GAS  /tmp/cc67MAoN.s 			page 28


  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** //volatile unsigned short prog_timer = 0;
  72:src/main.c    **** //volatile unsigned short mainmenu_timer = 0;
  73:src/main.c    **** volatile unsigned short show_select_timer = 0;
  74:src/main.c    **** volatile unsigned char switches_timer = 0;
  75:src/main.c    **** volatile unsigned char acswitch_timer = 0;
  76:src/main.c    **** 
  77:src/main.c    **** volatile unsigned short scroll1_timer = 0;
  78:src/main.c    **** volatile unsigned short scroll2_timer = 0;
  79:src/main.c    **** 
  80:src/main.c    **** volatile unsigned short standalone_timer;
  81:src/main.c    **** volatile unsigned short standalone_enable_menu_timer;
  82:src/main.c    **** //volatile unsigned short standalone_menu_timer;
  83:src/main.c    **** volatile unsigned char grouped_master_timeout_timer;
  84:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  85:src/main.c    **** volatile unsigned char timer_wifi_bright = 0;
  86:src/main.c    **** 
  87:src/main.c    **** #ifdef USE_REDONDA_BASIC
  88:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  89:src/main.c    **** 
  90:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  91:src/main.c    **** volatile unsigned short tt_relay_on_off;
  92:src/main.c    **** #endif
  93:src/main.c    **** 
  94:src/main.c    **** 
  95:src/main.c    **** unsigned char saved_mode;
  96:src/main.c    **** 
  97:src/main.c    **** 
  98:src/main.c    **** // ------- Externals de los switches -------
  99:src/main.c    **** unsigned short s1;
 100:src/main.c    **** unsigned short s2;
 101:src/main.c    **** unsigned short sac;
 102:src/main.c    **** unsigned char sac_aux;
 103:src/main.c    **** 
 104:src/main.c    **** // ------- Externals de los switches -------
 105:src/main.c    **** #ifdef ADC_WITH_INT
 106:src/main.c    **** volatile unsigned short adc_ch[3];
 107:src/main.c    **** volatile unsigned char seq_ready = 0;
 108:src/main.c    **** unsigned short zero_current;
 109:src/main.c    **** #endif
 110:src/main.c    **** 
 111:src/main.c    **** // ------- Externals del GPS & GSM -------
 112:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 113:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 114:src/main.c    **** volatile unsigned char usart1_have_data;
 115:src/main.c    **** unsigned char usart1_pckt_bytes;
 116:src/main.c    **** 
 117:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 118:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 119:src/main.c    **** #define gps_have_data		usart1_have_data
 120:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 121:src/main.c    **** 
 122:src/main.c    **** #ifdef USE_GPS
 123:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 124:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 125:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 126:src/main.c    **** volatile unsigned char usart2_have_data;
ARM GAS  /tmp/cc67MAoN.s 			page 29


 127:src/main.c    **** unsigned char usart2_pckt_bytes;
 128:src/main.c    **** 
 129:src/main.c    **** #endif
 130:src/main.c    **** 
 131:src/main.c    **** // ------- Externals del GSM -------
 132:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 133:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 134:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 135:src/main.c    **** #define gsm_have_data		usart1_have_data
 136:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 137:src/main.c    **** 
 138:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 139:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 140:src/main.c    **** volatile unsigned char usart2_have_data;
 141:src/main.c    **** unsigned char usart2_pckt_bytes;
 142:src/main.c    **** 
 143:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 144:src/main.c    **** #endif
 145:src/main.c    **** 
 146:src/main.c    **** parameters_typedef param_struct;
 147:src/main.c    **** 
 148:src/main.c    **** //--- VARIABLES GLOBALES ---//
 149:src/main.c    **** 
 150:src/main.c    **** 
 151:src/main.c    **** //para las mediciones
 152:src/main.c    **** unsigned int power_2secs_acum = 0;
 153:src/main.c    **** unsigned char power_2secs_index = 0;
 154:src/main.c    **** unsigned short power_minutes = 0;
 155:src/main.c    **** unsigned char power_minutes_index = 0;
 156:src/main.c    **** unsigned short power_hours = 0;
 157:src/main.c    **** 
 158:src/main.c    **** //para los msjs GSM
 159:src/main.c    **** char gsmNUM [20];
 160:src/main.c    **** char gsmMSG [180];
 161:src/main.c    **** 
 162:src/main.c    **** 
 163:src/main.c    **** 
 164:src/main.c    **** 
 165:src/main.c    **** 
 166:src/main.c    **** 
 167:src/main.c    **** // ------- de los timers -------
 168:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 169:src/main.c    **** volatile unsigned short timer_standby;
 170:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 171:src/main.c    **** //volatile unsigned char display_timer;
 172:src/main.c    **** volatile unsigned char filter_timer;
 173:src/main.c    **** 
 174:src/main.c    **** //volatile unsigned char door_filter;
 175:src/main.c    **** //volatile unsigned char take_sample;
 176:src/main.c    **** //volatile unsigned char move_relay;
 177:src/main.c    **** volatile unsigned short secs = 0;
 178:src/main.c    **** volatile unsigned char hours = 0;
 179:src/main.c    **** volatile unsigned char minutes = 0;
 180:src/main.c    **** 
 181:src/main.c    **** #define SIZEOF_POWER_VECT		10
 182:src/main.c    **** 
 183:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
ARM GAS  /tmp/cc67MAoN.s 			page 30


 184:src/main.c    **** 
 185:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 186:src/main.c    **** void TimingDelay_Decrement(void);
 187:src/main.c    **** 
 188:src/main.c    **** // ------- del DMX -------
 189:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 190:src/main.c    **** #define DMX_TIMEOUT	20
 191:src/main.c    **** 
 192:src/main.c    **** //--- FILTROS DE SENSORES ---//
 193:src/main.c    **** #define LARGO_FILTRO 16
 194:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 195:src/main.c    **** //#define LARGO_FILTRO 32
 196:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 197:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 198:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 199:src/main.c    **** 
 200:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 201:src/main.c    **** 
 202:src/main.c    **** // #define KW			0.009721
 203:src/main.c    **** // #define KW			0.00945
 204:src/main.c    **** // #define KW			0.00959
 205:src/main.c    **** #define KW			0.01013
 206:src/main.c    **** 
 207:src/main.c    **** //--- Private Definitions ---//
 208:src/main.c    **** #define num_tel_rep		param_struct.num_reportar
 209:src/main.c    **** 
 210:src/main.c    **** 
 211:src/main.c    **** //-------------------------------------------//
 212:src/main.c    **** // @brief  Main program.
 213:src/main.c    **** // @param  None
 214:src/main.c    **** // @retval None
 215:src/main.c    **** //------------------------------------------//
 216:src/main.c    **** int main(void)
 217:src/main.c    **** {
 468              		.loc 2 217 0
 469              		.cfi_startproc
 470 0000 30B5     		push	{r4, r5, lr}	@
 471              	.LCFI4:
 472              		.cfi_def_cfa_offset 12
 473              		.cfi_offset 4, -12
 474              		.cfi_offset 5, -8
 475              		.cfi_offset 14, -4
 476 0002 99B0     		sub	sp, sp, #100	@,,
 477              	.LCFI5:
 478              		.cfi_def_cfa_offset 112
 218:src/main.c    **** 	unsigned char i, ii;
 219:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 479              		.loc 2 219 0
 480 0004 11AB     		add	r3, sp, #68	@ tmp172,,
 481 0006 0022     		movs	r2, #0	@ tmp173,
 482 0008 1A70     		strb	r2, [r3]	@ tmp174, need_ack
 220:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 483              		.loc 2 220 0
 484 000a 4323     		movs	r3, #67	@ tmp175,
 485 000c 6B44     		add	r3, r3, sp	@ tmp175,
 486 000e 0022     		movs	r2, #0	@ tmp176,
 487 0010 1A70     		strb	r2, [r3]	@ tmp177, resp
ARM GAS  /tmp/cc67MAoN.s 			page 31


 221:src/main.c    **** 	unsigned short power_int, power_dec;
 222:src/main.c    **** 	unsigned short wh_int, wh_dec;
 223:src/main.c    **** 	unsigned short power;
 224:src/main.c    **** 	float fcalc = 1.0;
 488              		.loc 2 224 0
 489 0012 FE23     		movs	r3, #254	@ tmp178,
 490 0014 9B05     		lsls	r3, r3, #22	@ tmp178, tmp178,
 491 0016 0F93     		str	r3, [sp, #60]	@ tmp178, fcalc
 225:src/main.c    **** 	unsigned int zero_current_loc = 0;
 492              		.loc 2 225 0
 493 0018 0023     		movs	r3, #0	@ tmp179,
 494 001a 1693     		str	r3, [sp, #88]	@ tmp179, zero_current_loc
 226:src/main.c    **** 
 227:src/main.c    **** 	unsigned char acum_secs_index, acum_mins_index;
 228:src/main.c    **** 	unsigned int acum_secs, acum_mins, acum_hours;
 229:src/main.c    **** 	unsigned char show_power = 0;
 495              		.loc 2 229 0
 496 001c 4723     		movs	r3, #71	@ tmp180,
 497 001e 6B44     		add	r3, r3, sp	@ tmp180,
 498 0020 0022     		movs	r2, #0	@ tmp181,
 499 0022 1A70     		strb	r2, [r3]	@ tmp182, show_power
 230:src/main.c    **** 
 231:src/main.c    **** #ifdef USE_REDONDA_BASIC
 232:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 500              		.loc 2 232 0
 501 0024 4623     		movs	r3, #70	@ tmp183,
 502 0026 6B44     		add	r3, r3, sp	@ tmp183,
 503 0028 0022     		movs	r2, #0	@ tmp184,
 504 002a 1A70     		strb	r2, [r3]	@ tmp185, main_state
 233:src/main.c    **** 	unsigned char reportar_SMS = 0;
 505              		.loc 2 233 0
 506 002c 4523     		movs	r3, #69	@ tmp186,
 507 002e 6B44     		add	r3, r3, sp	@ tmp186,
 508 0030 0022     		movs	r2, #0	@ tmp187,
 509 0032 1A70     		strb	r2, [r3]	@ tmp188, reportar_SMS
 234:src/main.c    **** 	unsigned char sended = 0;
 510              		.loc 2 234 0
 511 0034 3B23     		movs	r3, #59	@ tmp189,
 512 0036 6B44     		add	r3, r3, sp	@ tmp189,
 513 0038 0022     		movs	r2, #0	@ tmp190,
 514 003a 1A70     		strb	r2, [r3]	@ tmp191, sended
 235:src/main.c    **** #ifdef WITH_HYST
 236:src/main.c    **** 	unsigned short hyst;
 237:src/main.c    **** #endif
 238:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 239:src/main.c    **** 	unsigned char one_to_ten;
 240:src/main.c    **** #endif
 241:src/main.c    **** 
 242:src/main.c    **** #else		//USE_REDONDA_BASIC
 243:src/main.c    **** 	unsigned char main_state = 0;
 244:src/main.c    **** #endif
 245:src/main.c    **** 	char s_lcd [40];
 246:src/main.c    **** 	// enum TcpMessages tcp_msg = NONE_MSG;
 247:src/main.c    **** 	// unsigned char new_room = 0;
 248:src/main.c    **** 	// unsigned char new_lamp = 0;
 249:src/main.c    **** 	// unsigned char last_bright = 0;
 250:src/main.c    **** 	// unsigned char show_ldr = 0;
ARM GAS  /tmp/cc67MAoN.s 			page 32


 251:src/main.c    **** 	// int dummy_resp = 0;
 252:src/main.c    **** 	// unsigned char pps_one = 0;
 253:src/main.c    **** 
 254:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 255:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 256:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 257:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 258:src/main.c    ****     //   system_stm32f0xx.c file
 259:src/main.c    **** 
 260:src/main.c    **** 	//GPIO Configuration.
 261:src/main.c    **** 	GPIO_Config();
 515              		.loc 2 261 0
 516 003c FFF7FEFF 		bl	GPIO_Config	@
 262:src/main.c    **** 
 263:src/main.c    **** 
 264:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 265:src/main.c    **** 	if (SysTick_Config(48000))
 517              		.loc 2 265 0
 518 0040 BE4B     		ldr	r3, .L53	@ tmp192,
 519 0042 1800     		movs	r0, r3	@, tmp192
 520 0044 FFF7FEFF 		bl	SysTick_Config	@
 521 0048 031E     		subs	r3, r0, #0	@ D.7161,,
 522 004a 28D0     		beq	.L13	@,
 523              	.L18:
 266:src/main.c    **** 	{
 267:src/main.c    **** 		while (1)	/* Capture error */
 268:src/main.c    **** 		{
 269:src/main.c    **** 			if (LED)
 524              		.loc 2 269 0
 525 004c 9023     		movs	r3, #144	@ tmp465,
 526 004e DB05     		lsls	r3, r3, #23	@ D.7162, tmp465,
 527 0050 9B8A     		ldrh	r3, [r3, #20]	@ tmp194,
 528 0052 9BB2     		uxth	r3, r3	@ D.7163, tmp194
 529 0054 1A00     		movs	r2, r3	@ D.7164, D.7163
 530 0056 8023     		movs	r3, #128	@ tmp466,
 531 0058 5B01     		lsls	r3, r3, #5	@ tmp195, tmp466,
 532 005a 1340     		ands	r3, r2	@ D.7164, D.7164
 533 005c 05D0     		beq	.L14	@,
 270:src/main.c    **** 				LED_OFF;
 534              		.loc 2 270 0
 535 005e 9023     		movs	r3, #144	@ tmp463,
 536 0060 DB05     		lsls	r3, r3, #23	@ D.7162, tmp463,
 537 0062 8022     		movs	r2, #128	@ tmp464,
 538 0064 5205     		lsls	r2, r2, #21	@ tmp196, tmp464,
 539 0066 9A61     		str	r2, [r3, #24]	@ tmp196, _85->BSRR
 540 0068 04E0     		b	.L15	@
 541              	.L14:
 271:src/main.c    **** 			else
 272:src/main.c    **** 				LED_ON;
 542              		.loc 2 272 0
 543 006a 9023     		movs	r3, #144	@ tmp461,
 544 006c DB05     		lsls	r3, r3, #23	@ D.7162, tmp461,
 545 006e 8022     		movs	r2, #128	@ tmp462,
 546 0070 5201     		lsls	r2, r2, #5	@ tmp197, tmp462,
 547 0072 9A61     		str	r2, [r3, #24]	@ tmp197, _87->BSRR
 548              	.L15:
 273:src/main.c    **** 
ARM GAS  /tmp/cc67MAoN.s 			page 33


 274:src/main.c    **** 			for (i = 0; i < 255; i++)
 549              		.loc 2 274 0
 550 0074 5F23     		movs	r3, #95	@ tmp198,
 551 0076 6B44     		add	r3, r3, sp	@ tmp198,
 552 0078 0022     		movs	r2, #0	@ tmp199,
 553 007a 1A70     		strb	r2, [r3]	@ tmp200, i
 554 007c 09E0     		b	.L16	@
 555              	.L17:
 275:src/main.c    **** 			{
 276:src/main.c    **** 				asm (	"nop \n\t"
 556              		.loc 2 276 0 discriminator 3
 557              		.syntax divided
 558              	@ 276 "src/main.c" 1
 559 007e C046     		nop 
 560 0080 C046     		nop 
 561 0082 C046     		nop 
 562              		
 563              	@ 0 "" 2
 274:src/main.c    **** 			{
 564              		.loc 2 274 0 discriminator 3
 565              		.thumb
 566              		.syntax unified
 567 0084 5F23     		movs	r3, #95	@ tmp201,
 568 0086 6B44     		add	r3, r3, sp	@ tmp201,
 569 0088 1A78     		ldrb	r2, [r3]	@ D.7165, i
 570 008a 5F23     		movs	r3, #95	@ tmp202,
 571 008c 6B44     		add	r3, r3, sp	@ tmp202,
 572 008e 0132     		adds	r2, r2, #1	@ tmp203,
 573 0090 1A70     		strb	r2, [r3]	@ tmp204, i
 574              	.L16:
 274:src/main.c    **** 			{
 575              		.loc 2 274 0 is_stmt 0 discriminator 1
 576 0092 5F23     		movs	r3, #95	@ tmp205,
 577 0094 6B44     		add	r3, r3, sp	@ tmp205,
 578 0096 1B78     		ldrb	r3, [r3]	@ tmp206, i
 579 0098 FF2B     		cmp	r3, #255	@ tmp206,
 580 009a F0D1     		bne	.L17	@,
 277:src/main.c    **** 						"nop \n\t"
 278:src/main.c    **** 						"nop \n\t" );
 279:src/main.c    **** 			}
 280:src/main.c    **** 		}
 581              		.loc 2 280 0 is_stmt 1
 582 009c D6E7     		b	.L18	@
 583              	.L13:
 281:src/main.c    **** 	}
 282:src/main.c    **** 
 283:src/main.c    **** 
 284:src/main.c    **** 	//ADC Configuration
 285:src/main.c    **** //	AdcConfig();
 286:src/main.c    **** 
 287:src/main.c    **** 	//TIM Configuration.
 288:src/main.c    **** 	// TIM_3_Init();
 289:src/main.c    **** //	TIM_14_Init();
 290:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 291:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 292:src/main.c    **** 
 293:src/main.c    **** //	EXTIOff ();
ARM GAS  /tmp/cc67MAoN.s 			page 34


 294:src/main.c    **** 
 295:src/main.c    **** 	// while (1)
 296:src/main.c    **** 	// {
 297:src/main.c    **** 	// 	// if (SYNCP)
 298:src/main.c    **** 	// 	// {
 299:src/main.c    **** 	// 	// 	SYNCP_OFF;
 300:src/main.c    **** 	// 	// 	LED_OFF;
 301:src/main.c    **** 	// 	// }
 302:src/main.c    **** 	// 	// else
 303:src/main.c    **** 	// 	// {
 304:src/main.c    **** 	// 	// 	SYNCP_ON;
 305:src/main.c    **** 	// 	// 	LED_ON;
 306:src/main.c    **** 	// 	// }
 307:src/main.c    **** 	// 	// Wait_ms(10);
 308:src/main.c    **** 	//
 309:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 310:src/main.c    **** 	// 	// {
 311:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 312:src/main.c    **** 	// 	// 	Wait_ms (10);
 313:src/main.c    **** 	// 	// }
 314:src/main.c    **** 	// }
 315:src/main.c    **** 
 316:src/main.c    **** //		while (1)
 317:src/main.c    **** //		{
 318:src/main.c    **** //			PIN3_OFF;
 319:src/main.c    **** //			Wait_ms (10);
 320:src/main.c    **** //			PIN3_ON;
 321:src/main.c    **** //			Wait_ms (10);
 322:src/main.c    **** //		}
 323:src/main.c    **** 
 324:src/main.c    **** 	//--- Leo los parametros de memoria ---//
 325:src/main.c    **** 	param_struct.acumm_historico = ((parameters_typedef *) (unsigned int *) PAGE63)->acumm_historico;
 584              		.loc 2 325 0
 585 009e A84B     		ldr	r3, .L53+4	@ D.7166,
 586 00a0 9A6C     		ldr	r2, [r3, #72]	@ D.7167, _92->acumm_historico
 587 00a2 A84B     		ldr	r3, .L53+8	@ tmp207,
 588 00a4 9A64     		str	r2, [r3, #72]	@ D.7167, param_struct.acumm_historico
 326:src/main.c    **** 	if (param_struct.acumm_historico != 0xFFFFFFFF)
 589              		.loc 2 326 0
 590 00a6 A74B     		ldr	r3, .L53+8	@ tmp208,
 591 00a8 9B6C     		ldr	r3, [r3, #72]	@ D.7167, param_struct.acumm_historico
 592 00aa 0133     		adds	r3, r3, #1	@ tmp467, D.7167,
 593 00ac 10D0     		beq	.L19	@,
 327:src/main.c    **** 	{
 328:src/main.c    **** 		//memoria no vacia
 329:src/main.c    **** 		strncpy( param_struct.num_reportar,
 594              		.loc 2 329 0
 595 00ae A449     		ldr	r1, .L53+4	@ tmp209,
 596 00b0 A44B     		ldr	r3, .L53+8	@ tmp210,
 597 00b2 1822     		movs	r2, #24	@,
 598 00b4 1800     		movs	r0, r3	@, tmp210
 599 00b6 FFF7FEFF 		bl	strncpy	@
 330:src/main.c    **** 					((parameters_typedef *) (char *) PAGE63)->num_reportar,
 331:src/main.c    **** 					sizeof(param_struct.num_reportar));
 332:src/main.c    **** 
 333:src/main.c    **** 
 334:src/main.c    **** 		param_struct.timer_reportar = ((parameters_typedef *) (unsigned int *) PAGE63)->timer_reportar;
ARM GAS  /tmp/cc67MAoN.s 			page 35


 600              		.loc 2 334 0
 601 00ba A14A     		ldr	r2, .L53+4	@ D.7166,
 602 00bc 5223     		movs	r3, #82	@ tmp211,
 603 00be D15C     		ldrb	r1, [r2, r3]	@ D.7165,
 604 00c0 A04B     		ldr	r3, .L53+8	@ tmp212,
 605 00c2 5222     		movs	r2, #82	@ tmp213,
 606 00c4 9954     		strb	r1, [r3, r2]	@ tmp214, param_struct.timer_reportar
 335:src/main.c    **** 		reportar_SMS = 1;
 607              		.loc 2 335 0
 608 00c6 4523     		movs	r3, #69	@ tmp215,
 609 00c8 6B44     		add	r3, r3, sp	@ tmp215,
 610 00ca 0122     		movs	r2, #1	@ tmp216,
 611 00cc 1A70     		strb	r2, [r3]	@ tmp217, reportar_SMS
 612 00ce 0AE0     		b	.L20	@
 613              	.L19:
 336:src/main.c    **** 	}
 337:src/main.c    **** 	else
 338:src/main.c    **** 	{
 339:src/main.c    **** 		//memoria vacia
 340:src/main.c    **** 		param_struct.acumm_historico = 0;
 614              		.loc 2 340 0
 615 00d0 9C4B     		ldr	r3, .L53+8	@ tmp218,
 616 00d2 0022     		movs	r2, #0	@ tmp219,
 617 00d4 9A64     		str	r2, [r3, #72]	@ tmp219, param_struct.acumm_historico
 341:src/main.c    **** 		param_struct.timer_reportar = 0;
 618              		.loc 2 341 0
 619 00d6 9B4B     		ldr	r3, .L53+8	@ tmp220,
 620 00d8 5222     		movs	r2, #82	@ tmp221,
 621 00da 0021     		movs	r1, #0	@ tmp222,
 622 00dc 9954     		strb	r1, [r3, r2]	@ tmp223, param_struct.timer_reportar
 342:src/main.c    **** 		reportar_SMS = 0;
 623              		.loc 2 342 0
 624 00de 4523     		movs	r3, #69	@ tmp224,
 625 00e0 6B44     		add	r3, r3, sp	@ tmp224,
 626 00e2 0022     		movs	r2, #0	@ tmp225,
 627 00e4 1A70     		strb	r2, [r3]	@ tmp226, reportar_SMS
 628              	.L20:
 343:src/main.c    **** 	}
 344:src/main.c    **** 
 345:src/main.c    **** 
 346:src/main.c    **** 
 347:src/main.c    **** 	//--- Welcome code ---//
 348:src/main.c    **** 	LED_OFF;
 629              		.loc 2 348 0
 630 00e6 9023     		movs	r3, #144	@ tmp455,
 631 00e8 DB05     		lsls	r3, r3, #23	@ D.7162, tmp455,
 632 00ea 8022     		movs	r2, #128	@ tmp456,
 633 00ec 5205     		lsls	r2, r2, #21	@ tmp227, tmp456,
 634 00ee 9A61     		str	r2, [r3, #24]	@ tmp227, _104->BSRR
 349:src/main.c    **** //	EN_GPS_OFF;
 350:src/main.c    **** 	EN_GPS_ON;
 635              		.loc 2 350 0
 636 00f0 9023     		movs	r3, #144	@ tmp457,
 637 00f2 DB05     		lsls	r3, r3, #23	@ D.7162, tmp457,
 638 00f4 8022     		movs	r2, #128	@ tmp458,
 639 00f6 1202     		lsls	r2, r2, #8	@ tmp228, tmp458,
 640 00f8 9A61     		str	r2, [r3, #24]	@ tmp228, _106->BSRR
ARM GAS  /tmp/cc67MAoN.s 			page 36


 351:src/main.c    **** 	//RELAY_ON;
 352:src/main.c    **** 	RELAY_OFF;
 641              		.loc 2 352 0
 642 00fa 9023     		movs	r3, #144	@ tmp459,
 643 00fc DB05     		lsls	r3, r3, #23	@ D.7162, tmp459,
 644 00fe 8022     		movs	r2, #128	@ tmp460,
 645 0100 1205     		lsls	r2, r2, #20	@ tmp229, tmp460,
 646 0102 9A61     		str	r2, [r3, #24]	@ tmp229, _108->BSRR
 353:src/main.c    **** 
 354:src/main.c    **** 	USART1Config();
 647              		.loc 2 354 0
 648 0104 FFF7FEFF 		bl	USART1Config	@
 355:src/main.c    **** 	USART2Config();
 649              		.loc 2 355 0
 650 0108 FFF7FEFF 		bl	USART2Config	@
 356:src/main.c    **** 
 357:src/main.c    **** 	EXTIOff();
 651              		.loc 2 357 0
 652 010c FFF7FEFF 		bl	EXTIOff	@
 358:src/main.c    **** 
 359:src/main.c    **** 
 360:src/main.c    **** #ifdef USE_REDONDA_BASIC
 361:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 362:src/main.c    **** 	// USART1Config();
 363:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 653              		.loc 2 363 0
 654 0110 FFF7FEFF 		bl	AdcConfig	@
 364:src/main.c    **** 
 365:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 366:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 655              		.loc 2 366 0
 656 0114 FFF7FEFF 		bl	TIM_3_Init	@
 367:src/main.c    **** #endif
 368:src/main.c    **** 
 369:src/main.c    **** 	TIM_16_Init();					//o tuilizo para synchro de relay
 657              		.loc 2 369 0
 658 0118 FFF7FEFF 		bl	TIM_16_Init	@
 370:src/main.c    **** 	TIM16Enable();
 659              		.loc 2 370 0
 660 011c FFF7FEFF 		bl	TIM16Enable	@
 371:src/main.c    **** 
 372:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 661              		.loc 2 372 0
 662 0120 894B     		ldr	r3, .L53+12	@ tmp230,
 663 0122 1800     		movs	r0, r3	@, tmp230
 664 0124 FFF7FEFF 		bl	Usart2Send	@
 373:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 665              		.loc 2 373 0
 666 0128 884B     		ldr	r3, .L53+16	@ tmp231,
 667 012a 1800     		movs	r0, r3	@, tmp231
 668 012c FFF7FEFF 		bl	Usart2Send	@
 374:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 375:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 669              		.loc 2 375 0
 670 0130 874B     		ldr	r3, .L53+20	@ tmp232,
 671 0132 1800     		movs	r0, r3	@, tmp232
 672 0134 FFF7FEFF 		bl	Usart2Send	@
ARM GAS  /tmp/cc67MAoN.s 			page 37


 376:src/main.c    **** 	#endif
 377:src/main.c    **** 	#ifdef WITH_HYST
 378:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 673              		.loc 2 378 0
 674 0138 864B     		ldr	r3, .L53+24	@ tmp233,
 675 013a 1800     		movs	r0, r3	@, tmp233
 676 013c FFF7FEFF 		bl	Usart2Send	@
 379:src/main.c    **** 	#endif
 380:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 381:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 382:src/main.c    **** 	#endif
 383:src/main.c    **** 	#ifdef USE_WITH_SYNC
 384:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 385:src/main.c    **** 	#else
 386:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 677              		.loc 2 386 0
 678 0140 854B     		ldr	r3, .L53+28	@ tmp234,
 679 0142 1800     		movs	r0, r3	@, tmp234
 680 0144 FFF7FEFF 		bl	Usart2Send	@
 387:src/main.c    **** 	#endif
 388:src/main.c    **** 	#ifdef USE_GSM
 389:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 681              		.loc 2 389 0
 682 0148 844B     		ldr	r3, .L53+32	@ tmp235,
 683 014a 1800     		movs	r0, r3	@, tmp235
 684 014c FFF7FEFF 		bl	Usart2Send	@
 390:src/main.c    **** 	#endif
 391:src/main.c    **** 
 392:src/main.c    **** 
 393:src/main.c    **** 
 394:src/main.c    **** 	for (i = 0; i < 8; i++)
 685              		.loc 2 394 0
 686 0150 5F23     		movs	r3, #95	@ tmp236,
 687 0152 6B44     		add	r3, r3, sp	@ tmp236,
 688 0154 0022     		movs	r2, #0	@ tmp237,
 689 0156 1A70     		strb	r2, [r3]	@ tmp238, i
 690 0158 1DE0     		b	.L21	@
 691              	.L24:
 395:src/main.c    **** 	{
 396:src/main.c    **** 		if (LED)
 692              		.loc 2 396 0
 693 015a 9023     		movs	r3, #144	@ tmp453,
 694 015c DB05     		lsls	r3, r3, #23	@ D.7162, tmp453,
 695 015e 9B8A     		ldrh	r3, [r3, #20]	@ tmp240,
 696 0160 9BB2     		uxth	r3, r3	@ D.7163, tmp240
 697 0162 1A00     		movs	r2, r3	@ D.7164, D.7163
 698 0164 8023     		movs	r3, #128	@ tmp454,
 699 0166 5B01     		lsls	r3, r3, #5	@ tmp241, tmp454,
 700 0168 1340     		ands	r3, r2	@ D.7164, D.7164
 701 016a 05D0     		beq	.L22	@,
 397:src/main.c    **** 			LED_OFF;
 702              		.loc 2 397 0
 703 016c 9023     		movs	r3, #144	@ tmp451,
 704 016e DB05     		lsls	r3, r3, #23	@ D.7162, tmp451,
 705 0170 8022     		movs	r2, #128	@ tmp452,
 706 0172 5205     		lsls	r2, r2, #21	@ tmp242, tmp452,
 707 0174 9A61     		str	r2, [r3, #24]	@ tmp242, _128->BSRR
ARM GAS  /tmp/cc67MAoN.s 			page 38


 708 0176 04E0     		b	.L23	@
 709              	.L22:
 398:src/main.c    **** 		else
 399:src/main.c    **** 			LED_ON;
 710              		.loc 2 399 0
 711 0178 9023     		movs	r3, #144	@ tmp449,
 712 017a DB05     		lsls	r3, r3, #23	@ D.7162, tmp449,
 713 017c 8022     		movs	r2, #128	@ tmp450,
 714 017e 5201     		lsls	r2, r2, #5	@ tmp243, tmp450,
 715 0180 9A61     		str	r2, [r3, #24]	@ tmp243, _130->BSRR
 716              	.L23:
 400:src/main.c    **** 
 401:src/main.c    **** 		Wait_ms (250);
 717              		.loc 2 401 0 discriminator 2
 718 0182 FA20     		movs	r0, #250	@,
 719 0184 FFF7FEFF 		bl	Wait_ms	@
 394:src/main.c    **** 	{
 720              		.loc 2 394 0 discriminator 2
 721 0188 5F23     		movs	r3, #95	@ tmp244,
 722 018a 6B44     		add	r3, r3, sp	@ tmp244,
 723 018c 1A78     		ldrb	r2, [r3]	@ D.7165, i
 724 018e 5F23     		movs	r3, #95	@ tmp245,
 725 0190 6B44     		add	r3, r3, sp	@ tmp245,
 726 0192 0132     		adds	r2, r2, #1	@ tmp246,
 727 0194 1A70     		strb	r2, [r3]	@ tmp247, i
 728              	.L21:
 394:src/main.c    **** 	{
 729              		.loc 2 394 0 is_stmt 0 discriminator 1
 730 0196 5F23     		movs	r3, #95	@ tmp248,
 731 0198 6B44     		add	r3, r3, sp	@ tmp248,
 732 019a 1B78     		ldrb	r3, [r3]	@ tmp249, i
 733 019c 072B     		cmp	r3, #7	@ tmp249,
 734 019e DCD9     		bls	.L24	@,
 402:src/main.c    **** 	}
 403:src/main.c    **** 
 404:src/main.c    **** 	timer_standby = 2000;
 735              		.loc 2 404 0 is_stmt 1
 736 01a0 6F4B     		ldr	r3, .L53+36	@ tmp250,
 737 01a2 FA22     		movs	r2, #250	@ tmp448,
 738 01a4 D200     		lsls	r2, r2, #3	@ tmp251, tmp448,
 739 01a6 1A80     		strh	r2, [r3]	@ tmp252, timer_standby
 405:src/main.c    **** 	FuncsGSMReset();
 740              		.loc 2 405 0
 741 01a8 FFF7FEFF 		bl	FuncsGSMReset	@
 406:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 742              		.loc 2 406 0
 743 01ac 0220     		movs	r0, #2	@,
 744 01ae FFF7FEFF 		bl	Usart1Mode	@
 745              	.L47:
 407:src/main.c    **** 
 408:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 409:src/main.c    **** 	// while (1)
 410:src/main.c    **** 	// {
 411:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 412:src/main.c    **** 	// 	{
 413:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 414:src/main.c    **** 	// 		Wait_ms(10);
ARM GAS  /tmp/cc67MAoN.s 			page 39


 415:src/main.c    **** 	// 	}
 416:src/main.c    **** 	//
 417:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 418:src/main.c    **** 	// 	{
 419:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 420:src/main.c    **** 	// 		Wait_ms(10);
 421:src/main.c    **** 	// 	}
 422:src/main.c    **** 	// }
 423:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 424:src/main.c    **** 
 425:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 426:src/main.c    **** 	// i = 0;
 427:src/main.c    **** 	// while (1)
 428:src/main.c    **** 	// {
 429:src/main.c    **** 	// 	switch (i)
 430:src/main.c    **** 	// 	{
 431:src/main.c    **** 	// 		case 0:
 432:src/main.c    **** 	// 			RelayOn();
 433:src/main.c    **** 	// 			timer_standby = 50;
 434:src/main.c    **** 	// 			LED_ON;
 435:src/main.c    **** 	// 			i++;
 436:src/main.c    **** 	// 			break;
 437:src/main.c    **** 	//
 438:src/main.c    **** 	// 		case 1:
 439:src/main.c    **** 	// 			if (!timer_standby)
 440:src/main.c    **** 	// 			{
 441:src/main.c    **** 	// 				RelayOff();
 442:src/main.c    **** 	// 				LED_OFF;
 443:src/main.c    **** 	// 				i++;
 444:src/main.c    **** 	// 				timer_standby = 10000;
 445:src/main.c    **** 	// 			}
 446:src/main.c    **** 	// 			break;
 447:src/main.c    **** 	//
 448:src/main.c    **** 	// 		case 2:
 449:src/main.c    **** 	// 			if (!timer_standby)
 450:src/main.c    **** 	// 			{
 451:src/main.c    **** 	// 				i = 0;
 452:src/main.c    **** 	// 			}
 453:src/main.c    **** 	// 			break;
 454:src/main.c    **** 	// 	}
 455:src/main.c    **** 	//
 456:src/main.c    **** 	// 	UpdateRelay ();
 457:src/main.c    **** 	// }
 458:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 459:src/main.c    **** 
 460:src/main.c    **** 
 461:src/main.c    **** //--- Programa de pruebas I meas -----
 462:src/main.c    **** 	while (1)
 463:src/main.c    **** 	{
 464:src/main.c    **** 		switch (main_state)
 746              		.loc 2 464 0
 747 01b2 4623     		movs	r3, #70	@ tmp253,
 748 01b4 6B44     		add	r3, r3, sp	@ tmp253,
 749 01b6 1B78     		ldrb	r3, [r3]	@ D.7164, main_state
 750 01b8 082B     		cmp	r3, #8	@ D.7164,
 751 01ba 00D9     		bls	.LCB447	@
 752 01bc B0E1     		b	.L25	@long jump	@
ARM GAS  /tmp/cc67MAoN.s 			page 40


 753              	.LCB447:
 754 01be 9A00     		lsls	r2, r3, #2	@ tmp254, D.7164,
 755 01c0 684B     		ldr	r3, .L53+40	@ tmp256,
 756 01c2 D318     		adds	r3, r2, r3	@ tmp255, tmp254, tmp256
 757 01c4 1B68     		ldr	r3, [r3]	@ tmp257,
 758 01c6 9F46     		mov	pc, r3	@ tmp257
 759              		.section	.rodata.main,"a",%progbits
 760              		.align	2
 761              	.L27:
 762 0000 C8010000 		.word	.L26
 763 0004 EA010000 		.word	.L28
 764 0008 22020000 		.word	.L29
 765 000c 98020000 		.word	.L30
 766 0010 2A050000 		.word	.L48
 767 0014 20050000 		.word	.L25
 768 0018 20050000 		.word	.L25
 769 001c 20050000 		.word	.L25
 770 0020 F0020000 		.word	.L32
 771              		.section	.text.main
 772              	.L26:
 465:src/main.c    **** 		{
 466:src/main.c    **** 			case MAIN_INIT:
 467:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 773              		.loc 2 467 0
 774 01c8 0A20     		movs	r0, #10	@,
 775 01ca FFF7FEFF 		bl	Update_TIM3_CH1	@
 468:src/main.c    **** 				main_state = SYNCHRO_ADC;
 776              		.loc 2 468 0
 777 01ce 4623     		movs	r3, #70	@ tmp258,
 778 01d0 6B44     		add	r3, r3, sp	@ tmp258,
 779 01d2 0122     		movs	r2, #1	@ tmp259,
 780 01d4 1A70     		strb	r2, [r3]	@ tmp260, main_state
 469:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 781              		.loc 2 469 0
 782 01d6 644B     		ldr	r3, .L53+44	@ D.7168,
 783 01d8 634A     		ldr	r2, .L53+44	@ D.7168,
 784 01da 9268     		ldr	r2, [r2, #8]	@ D.7161, _147->CR
 785 01dc 0421     		movs	r1, #4	@ tmp261,
 786 01de 0A43     		orrs	r2, r1	@ D.7161, tmp261
 787 01e0 9A60     		str	r2, [r3, #8]	@ D.7161, _146->CR
 470:src/main.c    **** 				seq_ready = 0;
 788              		.loc 2 470 0
 789 01e2 624B     		ldr	r3, .L53+48	@ tmp262,
 790 01e4 0022     		movs	r2, #0	@ tmp263,
 791 01e6 1A70     		strb	r2, [r3]	@ tmp264, seq_ready
 471:src/main.c    **** 				break;
 792              		.loc 2 471 0
 793 01e8 A8E1     		b	.L33	@
 794              	.L28:
 472:src/main.c    **** 
 473:src/main.c    **** 			case SYNCHRO_ADC:
 474:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 795              		.loc 2 474 0
 796 01ea 604B     		ldr	r3, .L53+48	@ tmp265,
 797 01ec 1B78     		ldrb	r3, [r3]	@ tmp266, seq_ready
 798 01ee DBB2     		uxtb	r3, r3	@ D.7165, tmp266
 799 01f0 002B     		cmp	r3, #0	@ D.7165,
ARM GAS  /tmp/cc67MAoN.s 			page 41


 800 01f2 00D1     		bne	.LCB482	@
 801 01f4 9BE1     		b	.L49	@long jump	@
 802              	.LCB482:
 475:src/main.c    **** 				{
 476:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 803              		.loc 2 476 0
 804 01f6 5E4B     		ldr	r3, .L53+52	@ tmp267,
 805 01f8 1800     		movs	r0, r3	@, tmp267
 806 01fa FFF7FEFF 		bl	Usart2Send	@
 477:src/main.c    **** 
 478:src/main.c    **** #ifdef USE_GSM
 479:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 807              		.loc 2 479 0
 808 01fe 5D4B     		ldr	r3, .L53+56	@ tmp268,
 809 0200 1800     		movs	r0, r3	@, tmp268
 810 0202 FFF7FEFF 		bl	Usart2Send	@
 480:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 811              		.loc 2 480 0
 812 0206 4623     		movs	r3, #70	@ tmp269,
 813 0208 6B44     		add	r3, r3, sp	@ tmp269,
 814 020a 0222     		movs	r2, #2	@ tmp270,
 815 020c 1A70     		strb	r2, [r3]	@ tmp271, main_state
 481:src/main.c    **** 					timer_standby = 0;
 816              		.loc 2 481 0
 817 020e 544B     		ldr	r3, .L53+36	@ tmp272,
 818 0210 0022     		movs	r2, #0	@ tmp273,
 819 0212 1A80     		strh	r2, [r3]	@ tmp274, timer_standby
 482:src/main.c    **** 					zero_current_loc = 0;
 820              		.loc 2 482 0
 821 0214 0023     		movs	r3, #0	@ tmp275,
 822 0216 1693     		str	r3, [sp, #88]	@ tmp275, zero_current_loc
 483:src/main.c    **** 					i = 0;
 823              		.loc 2 483 0
 824 0218 5F23     		movs	r3, #95	@ tmp276,
 825 021a 6B44     		add	r3, r3, sp	@ tmp276,
 826 021c 0022     		movs	r2, #0	@ tmp277,
 827 021e 1A70     		strb	r2, [r3]	@ tmp278, i
 484:src/main.c    **** #else
 485:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 486:src/main.c    **** 					timer_standby = 60000;
 487:src/main.c    **** 					zero_current_loc = 0;
 488:src/main.c    **** 					i = 0;
 489:src/main.c    **** #endif
 490:src/main.c    **** 				}
 491:src/main.c    **** 				break;
 828              		.loc 2 491 0
 829 0220 85E1     		b	.L49	@
 830              	.L29:
 492:src/main.c    **** 
 493:src/main.c    **** 			case SET_ZERO_CURRENT:
 494:src/main.c    **** 				if (!timer_standby)
 831              		.loc 2 494 0
 832 0222 4F4B     		ldr	r3, .L53+36	@ tmp279,
 833 0224 1B88     		ldrh	r3, [r3]	@ tmp280, timer_standby
 834 0226 9BB2     		uxth	r3, r3	@ D.7163, tmp280
 835 0228 002B     		cmp	r3, #0	@ D.7163,
 836 022a 00D0     		beq	.LCB510	@
ARM GAS  /tmp/cc67MAoN.s 			page 42


 837 022c 81E1     		b	.L50	@long jump	@
 838              	.LCB510:
 495:src/main.c    **** 				{
 496:src/main.c    **** 					if (i < 32)
 839              		.loc 2 496 0
 840 022e 5F23     		movs	r3, #95	@ tmp281,
 841 0230 6B44     		add	r3, r3, sp	@ tmp281,
 842 0232 1B78     		ldrb	r3, [r3]	@ tmp282, i
 843 0234 1F2B     		cmp	r3, #31	@ tmp282,
 844 0236 1AD8     		bhi	.L36	@,
 497:src/main.c    **** 					// if (i < 4)
 498:src/main.c    **** 					{
 499:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 845              		.loc 2 499 0
 846 0238 4C4B     		ldr	r3, .L53+48	@ tmp283,
 847 023a 1B78     		ldrb	r3, [r3]	@ tmp284, seq_ready
 848 023c DBB2     		uxtb	r3, r3	@ D.7165, tmp284
 849 023e 002B     		cmp	r3, #0	@ D.7165,
 850 0240 00D1     		bne	.LCB520	@
 851 0242 76E1     		b	.L50	@long jump	@
 852              	.LCB520:
 500:src/main.c    **** 						{
 501:src/main.c    **** 							seq_ready = 0;
 853              		.loc 2 501 0
 854 0244 494B     		ldr	r3, .L53+48	@ tmp285,
 855 0246 0022     		movs	r2, #0	@ tmp286,
 856 0248 1A70     		strb	r2, [r3]	@ tmp287, seq_ready
 502:src/main.c    **** 							zero_current_loc += I_Sense;
 857              		.loc 2 502 0
 858 024a 4B4B     		ldr	r3, .L53+60	@ tmp288,
 859 024c 9B88     		ldrh	r3, [r3, #4]	@ tmp290,
 860 024e 9BB2     		uxth	r3, r3	@ D.7163, tmp290
 861 0250 1A00     		movs	r2, r3	@ D.7167, D.7163
 862 0252 169B     		ldr	r3, [sp, #88]	@ tmp292, zero_current_loc
 863 0254 9B18     		adds	r3, r3, r2	@ tmp291, tmp292, D.7167
 864 0256 1693     		str	r3, [sp, #88]	@ tmp291, zero_current_loc
 503:src/main.c    **** 							i++;
 865              		.loc 2 503 0
 866 0258 5F23     		movs	r3, #95	@ tmp293,
 867 025a 6B44     		add	r3, r3, sp	@ tmp293,
 868 025c 1A78     		ldrb	r2, [r3]	@ D.7165, i
 869 025e 5F23     		movs	r3, #95	@ tmp294,
 870 0260 6B44     		add	r3, r3, sp	@ tmp294,
 871 0262 0132     		adds	r2, r2, #1	@ tmp295,
 872 0264 1A70     		strb	r2, [r3]	@ tmp296, i
 504:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 873              		.loc 2 504 0
 874 0266 3E4B     		ldr	r3, .L53+36	@ tmp297,
 875 0268 0222     		movs	r2, #2	@ tmp298,
 876 026a 1A80     		strh	r2, [r3]	@ tmp299, timer_standby
 505:src/main.c    **** 						}
 506:src/main.c    **** 					}
 507:src/main.c    **** 					else
 508:src/main.c    **** 					{
 509:src/main.c    **** 						zero_current_loc >>= 5;
 510:src/main.c    **** 						// zero_current_loc >>= 2;
 511:src/main.c    **** 						zero_current = zero_current_loc;
ARM GAS  /tmp/cc67MAoN.s 			page 43


 512:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE;
 513:src/main.c    **** 						RELAY_ON;
 514:src/main.c    **** 						i = 0;
 515:src/main.c    **** 					}
 516:src/main.c    **** 				}
 517:src/main.c    **** 				break;
 877              		.loc 2 517 0
 878 026c 61E1     		b	.L50	@
 879              	.L36:
 509:src/main.c    **** 						// zero_current_loc >>= 2;
 880              		.loc 2 509 0
 881 026e 169B     		ldr	r3, [sp, #88]	@ tmp301, zero_current_loc
 882 0270 5B09     		lsrs	r3, r3, #5	@ tmp300, tmp301,
 883 0272 1693     		str	r3, [sp, #88]	@ tmp300, zero_current_loc
 511:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE;
 884              		.loc 2 511 0
 885 0274 169B     		ldr	r3, [sp, #88]	@ tmp303, zero_current_loc
 886 0276 9AB2     		uxth	r2, r3	@ D.7163, tmp302
 887 0278 404B     		ldr	r3, .L53+64	@ tmp304,
 888 027a 1A80     		strh	r2, [r3]	@ tmp305, zero_current
 512:src/main.c    **** 						RELAY_ON;
 889              		.loc 2 512 0
 890 027c 4623     		movs	r3, #70	@ tmp306,
 891 027e 6B44     		add	r3, r3, sp	@ tmp306,
 892 0280 0322     		movs	r2, #3	@ tmp307,
 893 0282 1A70     		strb	r2, [r3]	@ tmp308, main_state
 513:src/main.c    **** 						i = 0;
 894              		.loc 2 513 0
 895 0284 9023     		movs	r3, #144	@ tmp446,
 896 0286 DB05     		lsls	r3, r3, #23	@ D.7162, tmp446,
 897 0288 8022     		movs	r2, #128	@ tmp447,
 898 028a 1201     		lsls	r2, r2, #4	@ tmp309, tmp447,
 899 028c 9A61     		str	r2, [r3, #24]	@ tmp309, _172->BSRR
 514:src/main.c    **** 					}
 900              		.loc 2 514 0
 901 028e 5F23     		movs	r3, #95	@ tmp310,
 902 0290 6B44     		add	r3, r3, sp	@ tmp310,
 903 0292 0022     		movs	r2, #0	@ tmp311,
 904 0294 1A70     		strb	r2, [r3]	@ tmp312, i
 905              		.loc 2 517 0
 906 0296 4CE1     		b	.L50	@
 907              	.L30:
 518:src/main.c    **** 
 519:src/main.c    **** 			case SET_COUNTERS_AND_PHONE:
 520:src/main.c    **** 				acum_secs = 0;
 908              		.loc 2 520 0
 909 0298 0023     		movs	r3, #0	@ tmp313,
 910 029a 1493     		str	r3, [sp, #80]	@ tmp313, acum_secs
 521:src/main.c    **** 				acum_secs_index = 0;
 911              		.loc 2 521 0
 912 029c 5723     		movs	r3, #87	@ tmp314,
 913 029e 6B44     		add	r3, r3, sp	@ tmp314,
 914 02a0 0022     		movs	r2, #0	@ tmp315,
 915 02a2 1A70     		strb	r2, [r3]	@ tmp316, acum_secs_index
 522:src/main.c    **** 				acum_mins = 0;
 916              		.loc 2 522 0
 917 02a4 0023     		movs	r3, #0	@ tmp317,
ARM GAS  /tmp/cc67MAoN.s 			page 44


 918 02a6 1393     		str	r3, [sp, #76]	@ tmp317, acum_mins
 523:src/main.c    **** 				acum_mins_index = 0;
 919              		.loc 2 523 0
 920 02a8 5623     		movs	r3, #86	@ tmp318,
 921 02aa 6B44     		add	r3, r3, sp	@ tmp318,
 922 02ac 0022     		movs	r2, #0	@ tmp319,
 923 02ae 1A70     		strb	r2, [r3]	@ tmp320, acum_mins_index
 524:src/main.c    **** 				acum_hours = 0;
 924              		.loc 2 524 0
 925 02b0 0023     		movs	r3, #0	@ tmp321,
 926 02b2 1293     		str	r3, [sp, #72]	@ tmp321, acum_hours
 525:src/main.c    **** 
 526:src/main.c    **** 				if (reportar_SMS)
 927              		.loc 2 526 0
 928 02b4 4523     		movs	r3, #69	@ tmp322,
 929 02b6 6B44     		add	r3, r3, sp	@ tmp322,
 930 02b8 1B78     		ldrb	r3, [r3]	@ tmp323, reportar_SMS
 931 02ba 002B     		cmp	r3, #0	@ tmp323,
 932 02bc 13D0     		beq	.L38	@,
 527:src/main.c    **** 				{
 528:src/main.c    **** 					if (FuncsGSMStateAsk() == gsm_state_ready)
 933              		.loc 2 528 0
 934 02be FFF7FEFF 		bl	FuncsGSMStateAsk	@
 935 02c2 031E     		subs	r3, r0, #0	@ tmp324,,
 936 02c4 032B     		cmp	r3, #3	@ tmp324,
 937 02c6 00D0     		beq	.LCB591	@
 938 02c8 35E1     		b	.L51	@long jump	@
 939              	.LCB591:
 529:src/main.c    **** 					{
 530:src/main.c    **** 						Usart2Send((char *) (const char *) "Reports by SMS\r\n");
 940              		.loc 2 530 0
 941 02ca 2D4B     		ldr	r3, .L53+68	@ tmp326,
 942 02cc 1800     		movs	r0, r3	@, tmp326
 943 02ce FFF7FEFF 		bl	Usart2Send	@
 531:src/main.c    **** 						main_state = LAMP_ON;
 944              		.loc 2 531 0
 945 02d2 4623     		movs	r3, #70	@ tmp327,
 946 02d4 6B44     		add	r3, r3, sp	@ tmp327,
 947 02d6 0822     		movs	r2, #8	@ tmp328,
 948 02d8 1A70     		strb	r2, [r3]	@ tmp329, main_state
 532:src/main.c    **** 						RELAY_ON;
 949              		.loc 2 532 0
 950 02da 9023     		movs	r3, #144	@ tmp444,
 951 02dc DB05     		lsls	r3, r3, #23	@ D.7162, tmp444,
 952 02de 8022     		movs	r2, #128	@ tmp445,
 953 02e0 1201     		lsls	r2, r2, #4	@ tmp330, tmp445,
 954 02e2 9A61     		str	r2, [r3, #24]	@ tmp330, _184->BSRR
 533:src/main.c    **** 
 534:src/main.c    **** 
 535:src/main.c    **** 
 536:src/main.c    **** 					}
 537:src/main.c    **** 				}
 538:src/main.c    **** 				else
 539:src/main.c    **** 					main_state = LAMP_ON;
 540:src/main.c    **** 
 541:src/main.c    **** 
 542:src/main.c    **** 				break;
ARM GAS  /tmp/cc67MAoN.s 			page 45


 955              		.loc 2 542 0
 956 02e4 27E1     		b	.L51	@
 957              	.L38:
 539:src/main.c    **** 
 958              		.loc 2 539 0
 959 02e6 4623     		movs	r3, #70	@ tmp331,
 960 02e8 6B44     		add	r3, r3, sp	@ tmp331,
 961 02ea 0822     		movs	r2, #8	@ tmp332,
 962 02ec 1A70     		strb	r2, [r3]	@ tmp333, main_state
 963              		.loc 2 542 0
 964 02ee 22E1     		b	.L51	@
 965              	.L32:
 543:src/main.c    **** 
 544:src/main.c    **** 			case LAMP_OFF:
 545:src/main.c    **** 				break;
 546:src/main.c    **** 
 547:src/main.c    **** 			case LAMP_ON:
 548:src/main.c    **** 				if (!timer_standby)
 966              		.loc 2 548 0
 967 02f0 1B4B     		ldr	r3, .L53+36	@ tmp334,
 968 02f2 1B88     		ldrh	r3, [r3]	@ tmp335, timer_standby
 969 02f4 9BB2     		uxth	r3, r3	@ D.7163, tmp335
 970 02f6 002B     		cmp	r3, #0	@ D.7163,
 971 02f8 00D0     		beq	.LCB620	@
 972 02fa 1EE1     		b	.L52	@long jump	@
 973              	.LCB620:
 549:src/main.c    **** 				{
 550:src/main.c    **** 					if (i < SIZEOF_POWER_VECT)
 974              		.loc 2 550 0
 975 02fc 5F23     		movs	r3, #95	@ tmp336,
 976 02fe 6B44     		add	r3, r3, sp	@ tmp336,
 977 0300 1B78     		ldrb	r3, [r3]	@ tmp337, i
 978 0302 092B     		cmp	r3, #9	@ tmp337,
 979 0304 40D8     		bhi	.L42	@,
 551:src/main.c    **** 					{
 552:src/main.c    **** 						power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 980              		.loc 2 552 0
 981 0306 5F23     		movs	r3, #95	@ tmp338,
 982 0308 6B44     		add	r3, r3, sp	@ tmp338,
 983 030a 1C78     		ldrb	r4, [r3]	@ D.7164, i
 984 030c FFF7FEFF 		bl	GetVGrid	@
 985 0310 0300     		movs	r3, r0	@ tmp339,
 986 0312 1D00     		movs	r5, r3	@ D.7163, tmp340
 987 0314 FFF7FEFF 		bl	GetIGrid	@
 988 0318 0300     		movs	r3, r0	@ tmp341,
 989 031a 1900     		movs	r1, r3	@, D.7163
 990 031c 2800     		movs	r0, r5	@, D.7163
 991 031e FFF7FEFF 		bl	PowerCalc	@
 992 0322 0300     		movs	r3, r0	@ tmp343,
 993 0324 1900     		movs	r1, r3	@ D.7163, tmp344
 994 0326 174B     		ldr	r3, .L53+72	@ tmp345,
 995 0328 6200     		lsls	r2, r4, #1	@ tmp346, D.7164,
 996 032a D152     		strh	r1, [r2, r3]	@ tmp347, power_vect
 553:src/main.c    **** 						i++;
 997              		.loc 2 553 0
 998 032c 5F23     		movs	r3, #95	@ tmp348,
 999 032e 6B44     		add	r3, r3, sp	@ tmp348,
ARM GAS  /tmp/cc67MAoN.s 			page 46


 1000 0330 1A78     		ldrb	r2, [r3]	@ D.7165, i
 1001 0332 5F23     		movs	r3, #95	@ tmp349,
 1002 0334 6B44     		add	r3, r3, sp	@ tmp349,
 1003 0336 0132     		adds	r2, r2, #1	@ tmp350,
 1004 0338 1A70     		strb	r2, [r3]	@ tmp351, i
 1005 033a EDE0     		b	.L43	@
 1006              	.L54:
 1007              		.align	2
 1008              	.L53:
 1009 033c 80BB0000 		.word	48000
 1010 0340 00FC0008 		.word	134282240
 1011 0344 00000000 		.word	param_struct
 1012 0348 00000000 		.word	.LC1
 1013 034c 28000000 		.word	.LC3
 1014 0350 38000000 		.word	.LC5
 1015 0354 4C000000 		.word	.LC7
 1016 0358 64000000 		.word	.LC9
 1017 035c 74000000 		.word	.LC11
 1018 0360 00000000 		.word	timer_standby
 1019 0364 00000000 		.word	.L27
 1020 0368 00240140 		.word	1073816576
 1021 036c 00000000 		.word	seq_ready
 1022 0370 90000000 		.word	.LC16
 1023 0374 9C000000 		.word	.LC18
 1024 0378 00000000 		.word	adc_ch
 1025 037c 00000000 		.word	zero_current
 1026 0380 C4000000 		.word	.LC22
 1027 0384 00000000 		.word	power_vect
 1028              	.L42:
 554:src/main.c    **** 					}
 555:src/main.c    **** 					else
 556:src/main.c    **** 					{
 557:src/main.c    **** 						i = 0;
 1029              		.loc 2 557 0
 1030 0388 5F23     		movs	r3, #95	@ tmp352,
 1031 038a 6B44     		add	r3, r3, sp	@ tmp352,
 1032 038c 0022     		movs	r2, #0	@ tmp353,
 1033 038e 1A70     		strb	r2, [r3]	@ tmp354, i
 558:src/main.c    **** 						//termine de cargar el vector, guardo muestro info
 559:src/main.c    **** 						power = PowerCalcMean8(power_vect);
 1034              		.loc 2 559 0
 1035 0390 0EAC     		add	r4, sp, #56	@ tmp355,,
 1036 0392 734B     		ldr	r3, .L55	@ tmp356,
 1037 0394 1800     		movs	r0, r3	@, tmp356
 1038 0396 FFF7FEFF 		bl	PowerCalcMean8	@
 1039 039a 0300     		movs	r3, r0	@ tmp357,
 1040 039c 2380     		strh	r3, [r4]	@ tmp359, power
 560:src/main.c    **** 						acum_secs += power;
 1041              		.loc 2 560 0
 1042 039e 0EAB     		add	r3, sp, #56	@ tmp360,,
 1043 03a0 1B88     		ldrh	r3, [r3]	@ D.7167, power
 1044 03a2 149A     		ldr	r2, [sp, #80]	@ tmp362, acum_secs
 1045 03a4 D318     		adds	r3, r2, r3	@ tmp361, tmp362, D.7167
 1046 03a6 1493     		str	r3, [sp, #80]	@ tmp361, acum_secs
 561:src/main.c    **** 						acum_secs_index++;
 1047              		.loc 2 561 0
 1048 03a8 5723     		movs	r3, #87	@ tmp363,
ARM GAS  /tmp/cc67MAoN.s 			page 47


 1049 03aa 6B44     		add	r3, r3, sp	@ tmp363,
 1050 03ac 1A78     		ldrb	r2, [r3]	@ D.7165, acum_secs_index
 1051 03ae 5723     		movs	r3, #87	@ tmp364,
 1052 03b0 6B44     		add	r3, r3, sp	@ tmp364,
 1053 03b2 0132     		adds	r2, r2, #1	@ tmp365,
 1054 03b4 1A70     		strb	r2, [r3]	@ tmp366, acum_secs_index
 562:src/main.c    **** 
 563:src/main.c    **** 						if (acum_secs_index == 30)
 1055              		.loc 2 563 0
 1056 03b6 5723     		movs	r3, #87	@ tmp367,
 1057 03b8 6B44     		add	r3, r3, sp	@ tmp367,
 1058 03ba 1B78     		ldrb	r3, [r3]	@ tmp368, acum_secs_index
 1059 03bc 1E2B     		cmp	r3, #30	@ tmp368,
 1060 03be 14D1     		bne	.L44	@,
 564:src/main.c    **** 						{
 565:src/main.c    **** 							acum_mins += acum_secs;
 1061              		.loc 2 565 0
 1062 03c0 139A     		ldr	r2, [sp, #76]	@ tmp370, acum_mins
 1063 03c2 149B     		ldr	r3, [sp, #80]	@ tmp371, acum_secs
 1064 03c4 D318     		adds	r3, r2, r3	@ tmp369, tmp370, tmp371
 1065 03c6 1393     		str	r3, [sp, #76]	@ tmp369, acum_mins
 566:src/main.c    **** 							acum_mins_index++;
 1066              		.loc 2 566 0
 1067 03c8 5623     		movs	r3, #86	@ tmp372,
 1068 03ca 6B44     		add	r3, r3, sp	@ tmp372,
 1069 03cc 1A78     		ldrb	r2, [r3]	@ D.7165, acum_mins_index
 1070 03ce 5623     		movs	r3, #86	@ tmp373,
 1071 03d0 6B44     		add	r3, r3, sp	@ tmp373,
 1072 03d2 0132     		adds	r2, r2, #1	@ tmp374,
 1073 03d4 1A70     		strb	r2, [r3]	@ tmp375, acum_mins_index
 567:src/main.c    **** 							acum_secs = 0;
 1074              		.loc 2 567 0
 1075 03d6 0023     		movs	r3, #0	@ tmp376,
 1076 03d8 1493     		str	r3, [sp, #80]	@ tmp376, acum_secs
 568:src/main.c    **** 							acum_secs_index = 0;
 1077              		.loc 2 568 0
 1078 03da 5723     		movs	r3, #87	@ tmp377,
 1079 03dc 6B44     		add	r3, r3, sp	@ tmp377,
 1080 03de 0022     		movs	r2, #0	@ tmp378,
 1081 03e0 1A70     		strb	r2, [r3]	@ tmp379, acum_secs_index
 569:src/main.c    **** 							show_power = 1;
 1082              		.loc 2 569 0
 1083 03e2 4723     		movs	r3, #71	@ tmp380,
 1084 03e4 6B44     		add	r3, r3, sp	@ tmp380,
 1085 03e6 0122     		movs	r2, #1	@ tmp381,
 1086 03e8 1A70     		strb	r2, [r3]	@ tmp382, show_power
 1087              	.L44:
 570:src/main.c    **** 						}
 571:src/main.c    **** 
 572:src/main.c    **** 						if (acum_mins_index == 60)
 1088              		.loc 2 572 0
 1089 03ea 5623     		movs	r3, #86	@ tmp383,
 1090 03ec 6B44     		add	r3, r3, sp	@ tmp383,
 1091 03ee 1B78     		ldrb	r3, [r3]	@ tmp384, acum_mins_index
 1092 03f0 3C2B     		cmp	r3, #60	@ tmp384,
 1093 03f2 11D1     		bne	.L45	@,
 573:src/main.c    **** 						{
ARM GAS  /tmp/cc67MAoN.s 			page 48


 574:src/main.c    **** 							acum_mins = acum_mins / 1800;		//lo convierto a Wh
 1094              		.loc 2 574 0
 1095 03f4 139A     		ldr	r2, [sp, #76]	@ tmp386, acum_mins
 1096 03f6 E123     		movs	r3, #225	@ tmp443,
 1097 03f8 D900     		lsls	r1, r3, #3	@, tmp443,
 1098 03fa 1000     		movs	r0, r2	@, tmp386
 1099 03fc FFF7FEFF 		bl	__aeabi_uidiv	@
 1100 0400 0300     		movs	r3, r0	@ tmp389,
 1101 0402 1393     		str	r3, [sp, #76]	@ tmp389, acum_mins
 575:src/main.c    **** 							acum_hours += acum_mins;
 1102              		.loc 2 575 0
 1103 0404 129A     		ldr	r2, [sp, #72]	@ tmp391, acum_hours
 1104 0406 139B     		ldr	r3, [sp, #76]	@ tmp392, acum_mins
 1105 0408 D318     		adds	r3, r2, r3	@ tmp390, tmp391, tmp392
 1106 040a 1293     		str	r3, [sp, #72]	@ tmp390, acum_hours
 576:src/main.c    **** 							acum_mins = 0;
 1107              		.loc 2 576 0
 1108 040c 0023     		movs	r3, #0	@ tmp393,
 1109 040e 1393     		str	r3, [sp, #76]	@ tmp393, acum_mins
 577:src/main.c    **** 							acum_mins_index = 0;
 1110              		.loc 2 577 0
 1111 0410 5623     		movs	r3, #86	@ tmp394,
 1112 0412 6B44     		add	r3, r3, sp	@ tmp394,
 1113 0414 0022     		movs	r2, #0	@ tmp395,
 1114 0416 1A70     		strb	r2, [r3]	@ tmp396, acum_mins_index
 1115              	.L45:
 578:src/main.c    **** 						}
 579:src/main.c    **** 
 580:src/main.c    **** 						if (show_power)
 1116              		.loc 2 580 0
 1117 0418 4723     		movs	r3, #71	@ tmp397,
 1118 041a 6B44     		add	r3, r3, sp	@ tmp397,
 1119 041c 1B78     		ldrb	r3, [r3]	@ tmp398, show_power
 1120 041e 002B     		cmp	r3, #0	@ tmp398,
 1121 0420 00D1     		bne	.LCB755	@
 1122 0422 79E0     		b	.L43	@long jump	@
 1123              	.LCB755:
 581:src/main.c    **** 						{
 582:src/main.c    **** 							// fcalc = power;
 583:src/main.c    **** 							fcalc = power * KW;
 1124              		.loc 2 583 0
 1125 0424 0EAB     		add	r3, sp, #56	@ tmp399,,
 1126 0426 1B88     		ldrh	r3, [r3]	@ D.7164, power
 1127 0428 1800     		movs	r0, r3	@, D.7164
 1128 042a FFF7FEFF 		bl	__aeabi_i2d	@
 1129 042e 4D4A     		ldr	r2, .L55+4	@,
 1130 0430 4D4B     		ldr	r3, .L55+8	@,
 1131 0432 FFF7FEFF 		bl	__aeabi_dmul	@
 1132 0436 0300     		movs	r3, r0	@ tmp400,
 1133 0438 0C00     		movs	r4, r1	@,
 1134 043a 1800     		movs	r0, r3	@, D.7169
 1135 043c 2100     		movs	r1, r4	@, D.7169
 1136 043e FFF7FEFF 		bl	__aeabi_d2f	@
 1137 0442 031C     		adds	r3, r0, #0	@ tmp401,
 1138 0444 0F93     		str	r3, [sp, #60]	@ tmp401, fcalc
 584:src/main.c    **** 							power_int = (unsigned short) fcalc;
 1139              		.loc 2 584 0
ARM GAS  /tmp/cc67MAoN.s 			page 49


 1140 0446 3624     		movs	r4, #54	@ tmp402,
 1141 0448 6C44     		add	r4, r4, sp	@ tmp402,
 1142 044a 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1143 044c FFF7FEFF 		bl	__aeabi_f2uiz	@
 1144 0450 0300     		movs	r3, r0	@ tmp403,
 1145 0452 2380     		strh	r3, [r4]	@ tmp404, power_int
 585:src/main.c    **** 							fcalc = fcalc - power_int;
 1146              		.loc 2 585 0
 1147 0454 3623     		movs	r3, #54	@ tmp405,
 1148 0456 6B44     		add	r3, r3, sp	@ tmp405,
 1149 0458 1B88     		ldrh	r3, [r3]	@ D.7164, power_int
 1150 045a 1800     		movs	r0, r3	@, D.7164
 1151 045c FFF7FEFF 		bl	__aeabi_i2f	@
 1152 0460 031C     		adds	r3, r0, #0	@ D.7170,
 1153 0462 191C     		adds	r1, r3, #0	@, D.7170
 1154 0464 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1155 0466 FFF7FEFF 		bl	__aeabi_fsub	@
 1156 046a 031C     		adds	r3, r0, #0	@ tmp406,
 1157 046c 0F93     		str	r3, [sp, #60]	@ tmp406, fcalc
 586:src/main.c    **** 							fcalc = fcalc * 100;
 1158              		.loc 2 586 0
 1159 046e 3F49     		ldr	r1, .L55+12	@,
 1160 0470 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1161 0472 FFF7FEFF 		bl	__aeabi_fmul	@
 1162 0476 031C     		adds	r3, r0, #0	@ tmp407,
 1163 0478 0F93     		str	r3, [sp, #60]	@ tmp407, fcalc
 587:src/main.c    **** 							power_dec = (unsigned short) fcalc;
 1164              		.loc 2 587 0
 1165 047a 0DAC     		add	r4, sp, #52	@ tmp408,,
 1166 047c 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1167 047e FFF7FEFF 		bl	__aeabi_f2uiz	@
 1168 0482 0300     		movs	r3, r0	@ tmp409,
 1169 0484 2380     		strh	r3, [r4]	@ tmp410, power_dec
 588:src/main.c    **** 
 589:src/main.c    **** 							fcalc = acum_hours * KW;
 1170              		.loc 2 589 0
 1171 0486 1298     		ldr	r0, [sp, #72]	@, acum_hours
 1172 0488 FFF7FEFF 		bl	__aeabi_ui2d	@
 1173 048c 354A     		ldr	r2, .L55+4	@,
 1174 048e 364B     		ldr	r3, .L55+8	@,
 1175 0490 FFF7FEFF 		bl	__aeabi_dmul	@
 1176 0494 0300     		movs	r3, r0	@ tmp411,
 1177 0496 0C00     		movs	r4, r1	@,
 1178 0498 1800     		movs	r0, r3	@, D.7169
 1179 049a 2100     		movs	r1, r4	@, D.7169
 1180 049c FFF7FEFF 		bl	__aeabi_d2f	@
 1181 04a0 031C     		adds	r3, r0, #0	@ tmp412,
 1182 04a2 0F93     		str	r3, [sp, #60]	@ tmp412, fcalc
 590:src/main.c    **** 							wh_int = (unsigned short) fcalc;
 1183              		.loc 2 590 0
 1184 04a4 3224     		movs	r4, #50	@ tmp413,
 1185 04a6 6C44     		add	r4, r4, sp	@ tmp413,
 1186 04a8 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1187 04aa FFF7FEFF 		bl	__aeabi_f2uiz	@
 1188 04ae 0300     		movs	r3, r0	@ tmp414,
 1189 04b0 2380     		strh	r3, [r4]	@ tmp415, wh_int
 591:src/main.c    **** 							fcalc = fcalc - wh_int;
ARM GAS  /tmp/cc67MAoN.s 			page 50


 1190              		.loc 2 591 0
 1191 04b2 3223     		movs	r3, #50	@ tmp416,
 1192 04b4 6B44     		add	r3, r3, sp	@ tmp416,
 1193 04b6 1B88     		ldrh	r3, [r3]	@ D.7164, wh_int
 1194 04b8 1800     		movs	r0, r3	@, D.7164
 1195 04ba FFF7FEFF 		bl	__aeabi_i2f	@
 1196 04be 031C     		adds	r3, r0, #0	@ D.7170,
 1197 04c0 191C     		adds	r1, r3, #0	@, D.7170
 1198 04c2 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1199 04c4 FFF7FEFF 		bl	__aeabi_fsub	@
 1200 04c8 031C     		adds	r3, r0, #0	@ tmp417,
 1201 04ca 0F93     		str	r3, [sp, #60]	@ tmp417, fcalc
 592:src/main.c    **** 							fcalc = fcalc * 100;
 1202              		.loc 2 592 0
 1203 04cc 2749     		ldr	r1, .L55+12	@,
 1204 04ce 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1205 04d0 FFF7FEFF 		bl	__aeabi_fmul	@
 1206 04d4 031C     		adds	r3, r0, #0	@ tmp418,
 1207 04d6 0F93     		str	r3, [sp, #60]	@ tmp418, fcalc
 593:src/main.c    **** 							wh_dec = (unsigned short) fcalc;
 1208              		.loc 2 593 0
 1209 04d8 0CAC     		add	r4, sp, #48	@ tmp419,,
 1210 04da 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1211 04dc FFF7FEFF 		bl	__aeabi_f2uiz	@
 1212 04e0 0300     		movs	r3, r0	@ tmp420,
 1213 04e2 2380     		strh	r3, [r4]	@ tmp421, wh_dec
 594:src/main.c    **** 
 595:src/main.c    **** 							sprintf(s_lcd, "pi: %3d.%02d wh: %3d.%02d\r\n", power_int, power_dec, wh_int, wh_dec);
 1214              		.loc 2 595 0
 1215 04e4 3623     		movs	r3, #54	@ tmp422,
 1216 04e6 6B44     		add	r3, r3, sp	@ tmp422,
 1217 04e8 1C88     		ldrh	r4, [r3]	@ D.7164, power_int
 1218 04ea 0DAB     		add	r3, sp, #52	@ tmp423,,
 1219 04ec 1D88     		ldrh	r5, [r3]	@ D.7164, power_dec
 1220 04ee 3223     		movs	r3, #50	@ tmp424,
 1221 04f0 6B44     		add	r3, r3, sp	@ tmp424,
 1222 04f2 1B88     		ldrh	r3, [r3]	@ D.7164, wh_int
 1223 04f4 0CAA     		add	r2, sp, #48	@ tmp425,,
 1224 04f6 1288     		ldrh	r2, [r2]	@ D.7164, wh_dec
 1225 04f8 1D49     		ldr	r1, .L55+16	@ tmp426,
 1226 04fa 02A8     		add	r0, sp, #8	@ tmp427,,
 1227 04fc 0192     		str	r2, [sp, #4]	@ D.7164,
 1228 04fe 0093     		str	r3, [sp]	@ D.7164,
 1229 0500 2B00     		movs	r3, r5	@, D.7164
 1230 0502 2200     		movs	r2, r4	@, D.7164
 1231 0504 FFF7FEFF 		bl	sprintf	@
 596:src/main.c    **** 
 597:src/main.c    **** 							// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, V_Sense, I_Sense);
 598:src/main.c    **** 							// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, GetVGrid(), GetIGrid());
 599:src/main.c    **** 							//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 600:src/main.c    **** 							//TODO: para debug no envio datos
 601:src/main.c    **** 							Usart2Send(s_lcd);
 1232              		.loc 2 601 0
 1233 0508 02AB     		add	r3, sp, #8	@ tmp428,,
 1234 050a 1800     		movs	r0, r3	@, tmp428
 1235 050c FFF7FEFF 		bl	Usart2Send	@
 602:src/main.c    **** 
ARM GAS  /tmp/cc67MAoN.s 			page 51


 603:src/main.c    **** 							show_power = 0;
 1236              		.loc 2 603 0
 1237 0510 4723     		movs	r3, #71	@ tmp429,
 1238 0512 6B44     		add	r3, r3, sp	@ tmp429,
 1239 0514 0022     		movs	r2, #0	@ tmp430,
 1240 0516 1A70     		strb	r2, [r3]	@ tmp431, show_power
 1241              	.L43:
 604:src/main.c    **** 						}
 605:src/main.c    **** 					}
 606:src/main.c    **** 					timer_standby = 200;		//10 veces 200ms
 1242              		.loc 2 606 0
 1243 0518 164B     		ldr	r3, .L55+20	@ tmp432,
 1244 051a C822     		movs	r2, #200	@ tmp433,
 1245 051c 1A80     		strh	r2, [r3]	@ tmp434, timer_standby
 607:src/main.c    **** 
 608:src/main.c    **** 					// // if ((FuncsGSMReady() == resp_gsm_ok) && (!sended))
 609:src/main.c    **** 					// if ((FuncsGSMMessageFlagsAsk () & GSM_SET_CALL) && (!sended))
 610:src/main.c    **** 					// {
 611:src/main.c    **** 					// 	Usart2Send((char *) (const char *) "Llamadas Listas!\r\n");
 612:src/main.c    **** 					// 	sended++;
 613:src/main.c    **** 					// }
 614:src/main.c    **** 					//
 615:src/main.c    **** 					// if ((FuncsGSMMessageFlagsAsk () & GSM_SET_SMS) && (sended == 1))
 616:src/main.c    **** 					// {
 617:src/main.c    **** 					// 	Usart2Send((char *) (const char *) "SMS Listo!\r\n");
 618:src/main.c    **** 					// 	sended++;
 619:src/main.c    **** 					// }
 620:src/main.c    **** 					//
 621:src/main.c    **** 					// if ((FuncsGSMReady() == resp_gsm_ok) && (sended == 2))
 622:src/main.c    **** 					// {
 623:src/main.c    **** 					// 	// FuncsGSMSendSMS("Hola", "1145376762");
 624:src/main.c    **** 					// 	sended++;
 625:src/main.c    **** 					// }
 626:src/main.c    **** 					//
 627:src/main.c    **** 					// if (sended == 3)
 628:src/main.c    **** 					// {
 629:src/main.c    **** 					// 	if (FuncsGSMCommandAnswer("AT+GSN\r\n", &param_struct.imei[0]) == resp_gsm_ok)
 630:src/main.c    **** 					// 		sended++;
 631:src/main.c    **** 					// }
 632:src/main.c    **** 					//
 633:src/main.c    **** 					// if (sended == 4)
 634:src/main.c    **** 					// {
 635:src/main.c    **** 					// 	if (FuncsGSMStateAsk() == gsm_state_ready)
 636:src/main.c    **** 					// 	{
 637:src/main.c    **** 					// 		Usart2Send((char *) (const char *) "IMEI\r\n");
 638:src/main.c    **** 					// 		strcpy(s_lcd, &param_struct.imei[0]);
 639:src/main.c    **** 					// 		Usart2Send(s_lcd);
 640:src/main.c    **** 					// 		sended++;
 641:src/main.c    **** 					// 	}
 642:src/main.c    **** 					// }
 643:src/main.c    **** 
 644:src/main.c    **** 					// if (sended == 2)
 645:src/main.c    **** 					// {
 646:src/main.c    **** 					// 	Wait_ms(10000);
 647:src/main.c    **** 					// 	//apago modulo
 648:src/main.c    **** 					// 	FuncsGSMShutdown ();
 649:src/main.c    **** 					// 	sended++;
ARM GAS  /tmp/cc67MAoN.s 			page 52


 650:src/main.c    **** 					// }
 651:src/main.c    **** 					//
 652:src/main.c    **** 					// if ((FuncsGSMMessageFlagsAsk () & GSM_SET_POWER_DOWN) && (sended == 3))
 653:src/main.c    **** 					// {
 654:src/main.c    **** 					// 	Usart2Send((char *) (const char *) "Pwr down!\r\n");
 655:src/main.c    **** 					// 	Wait_ms(60000);
 656:src/main.c    **** 					// 	sended = 0;
 657:src/main.c    **** 					// }
 658:src/main.c    **** 
 659:src/main.c    **** 					// fcalc = voltage;
 660:src/main.c    **** 					// fcalc = fcalc * KV;
 661:src/main.c    **** 					// volt_int = (short) fcalc;
 662:src/main.c    **** 					// fcalc = fcalc - volt_int;
 663:src/main.c    **** 					// fcalc = fcalc * 100;
 664:src/main.c    **** 					// volt_dec = (short) fcalc;
 665:src/main.c    **** 					//
 666:src/main.c    **** 					// sprintf(str, "%2d.%02d", volt_int, volt_dec);
 667:src/main.c    **** 					//
 668:src/main.c    **** 					// //sprintf(str, "%4d        ", voltage);
 669:src/main.c    **** 					// LCDTransmitStr(str);
 670:src/main.c    **** 
 671:src/main.c    **** 				}
 672:src/main.c    **** 
 673:src/main.c    **** 				break;
 1246              		.loc 2 673 0
 1247 051e 0CE0     		b	.L52	@
 1248              	.L25:
 674:src/main.c    **** 
 675:src/main.c    **** 			default:
 676:src/main.c    **** 				main_state = MAIN_INIT;
 1249              		.loc 2 676 0
 1250 0520 4623     		movs	r3, #70	@ tmp435,
 1251 0522 6B44     		add	r3, r3, sp	@ tmp435,
 1252 0524 0022     		movs	r2, #0	@ tmp436,
 1253 0526 1A70     		strb	r2, [r3]	@ tmp437, main_state
 677:src/main.c    **** 				break;
 1254              		.loc 2 677 0
 1255 0528 08E0     		b	.L33	@
 1256              	.L48:
 545:src/main.c    **** 
 1257              		.loc 2 545 0
 1258 052a C046     		nop
 1259 052c 06E0     		b	.L33	@
 1260              	.L49:
 491:src/main.c    **** 
 1261              		.loc 2 491 0
 1262 052e C046     		nop
 1263 0530 04E0     		b	.L33	@
 1264              	.L50:
 517:src/main.c    **** 
 1265              		.loc 2 517 0
 1266 0532 C046     		nop
 1267 0534 02E0     		b	.L33	@
 1268              	.L51:
 542:src/main.c    **** 
 1269              		.loc 2 542 0
 1270 0536 C046     		nop
ARM GAS  /tmp/cc67MAoN.s 			page 53


 1271 0538 00E0     		b	.L33	@
 1272              	.L52:
 673:src/main.c    **** 
 1273              		.loc 2 673 0
 1274 053a C046     		nop
 1275              	.L33:
 678:src/main.c    **** 		}
 679:src/main.c    **** 
 680:src/main.c    **** 		//Cosas que dependen de las muestras
 681:src/main.c    **** 		if (seq_ready)
 1276              		.loc 2 681 0
 1277 053c 0E4B     		ldr	r3, .L55+24	@ tmp438,
 1278 053e 1B78     		ldrb	r3, [r3]	@ tmp439, seq_ready
 1279 0540 DBB2     		uxtb	r3, r3	@ D.7165, tmp439
 1280 0542 002B     		cmp	r3, #0	@ D.7165,
 1281 0544 06D0     		beq	.L46	@,
 682:src/main.c    **** 		{
 683:src/main.c    **** 			seq_ready = 0;
 1282              		.loc 2 683 0
 1283 0546 0C4B     		ldr	r3, .L55+24	@ tmp440,
 1284 0548 0022     		movs	r2, #0	@ tmp441,
 1285 054a 1A70     		strb	r2, [r3]	@ tmp442, seq_ready
 684:src/main.c    **** 			UpdateVGrid ();
 1286              		.loc 2 684 0
 1287 054c FFF7FEFF 		bl	UpdateVGrid	@
 685:src/main.c    **** 			UpdateIGrid ();
 1288              		.loc 2 685 0
 1289 0550 FFF7FEFF 		bl	UpdateIGrid	@
 1290              	.L46:
 686:src/main.c    **** 		}
 687:src/main.c    **** 
 688:src/main.c    **** 		//Cosas que no dependen del estado del programa
 689:src/main.c    **** 		UpdateRelay ();
 1291              		.loc 2 689 0
 1292 0554 FFF7FEFF 		bl	UpdateRelay	@
 690:src/main.c    **** 		// UpdatePhotoTransistor();
 691:src/main.c    **** #ifdef USE_GSM
 692:src/main.c    **** 		FuncsGSM();
 1293              		.loc 2 692 0
 1294 0558 FFF7FEFF 		bl	FuncsGSM	@
 693:src/main.c    **** #endif
 694:src/main.c    **** 	}	//end while 1
 1295              		.loc 2 694 0
 1296 055c 29E6     		b	.L47	@
 1297              	.L56:
 1298 055e C046     		.align	2
 1299              	.L55:
 1300 0560 00000000 		.word	power_vect
 1301 0564 90F7AA95 		.word	-1783957616
 1302 0568 09BF843F 		.word	1065664265
 1303 056c 0000C842 		.word	1120403456
 1304 0570 D8000000 		.word	.LC25
 1305 0574 00000000 		.word	timer_standby
 1306 0578 00000000 		.word	seq_ready
 1307              		.cfi_endproc
 1308              	.LFE20:
 1309              		.size	main, .-main
ARM GAS  /tmp/cc67MAoN.s 			page 54


 1310              		.section	.rodata
 1311              		.align	2
 1312              	.LC27:
 1313 00f4 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1313      3A7B226D 
 1313      794E616D 
 1313      65223A22 
 1313      4E75636C 
 1314              		.align	2
 1315              	.LC29:
 1316 010c 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1316      54656D70 
 1316      65726174 
 1316      75726522 
 1316      3A256C75 
 1317 0125 000000   		.align	2
 1318              	.LC31:
 1319 0128 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1319      48756D69 
 1319      64697479 
 1319      223A256C 
 1319      752E256C 
 1320 013e 0000     		.align	2
 1321              	.LC33:
 1322 0140 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1322      50726573 
 1322      73757265 
 1322      223A256C 
 1322      752E256C 
 1323 0156 0000     		.align	2
 1324              	.LC35:
 1325 0158 7D7D00   		.ascii	"}}\000"
 1326              		.section	.text.prepare_json_pkt,"ax",%progbits
 1327              		.align	2
 1328              		.global	prepare_json_pkt
 1329              		.code	16
 1330              		.thumb_func
 1331              		.type	prepare_json_pkt, %function
 1332              	prepare_json_pkt:
 1333              	.LFB21:
 695:src/main.c    **** 
 696:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 697:src/main.c    **** 
 698:src/main.c    **** 	while (1)
 699:src/main.c    **** 	{
 700:src/main.c    **** 		switch (main_state)
 701:src/main.c    **** 		{
 702:src/main.c    **** 			case MAIN_INIT:
 703:src/main.c    **** 				RelayOff();
 704:src/main.c    **** 				LED_OFF;
 705:src/main.c    **** 				FillPhotoBuffer();
 706:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 707:src/main.c    **** 				FillTempBuffer();
 708:src/main.c    **** #endif
 709:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 710:src/main.c    **** 				Update_TIM3_CH1 (0);
 711:src/main.c    **** #endif
ARM GAS  /tmp/cc67MAoN.s 			page 55


 712:src/main.c    **** 				main_state = SYNCHRO_ADC;
 713:src/main.c    **** #ifdef ADC_WITH_INT
 714:src/main.c    **** 				seq_ready = 0;
 715:src/main.c    **** #endif
 716:src/main.c    **** 				break;
 717:src/main.c    **** 
 718:src/main.c    **** 			case SYNCHRO_ADC:
 719:src/main.c    **** #ifdef ADC_WITH_INT
 720:src/main.c    **** 				if (seq_ready)
 721:src/main.c    **** #endif
 722:src/main.c    **** 				{
 723:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 724:src/main.c    **** 				}
 725:src/main.c    **** 				break;
 726:src/main.c    **** 
 727:src/main.c    **** 			case SET_ZERO_CURRENT:
 728:src/main.c    **** 				main_state = LAMP_OFF;
 729:src/main.c    **** 				break;
 730:src/main.c    **** 
 731:src/main.c    **** 			case LAMP_OFF:
 732:src/main.c    **** 				if (!tt_relay_on_off)
 733:src/main.c    **** 				{
 734:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 735:src/main.c    **** 					{
 736:src/main.c    **** 						main_state = LAMP_ON;
 737:src/main.c    **** 						tt_relay_on_off = 10000;
 738:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 739:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 740:src/main.c    **** 	#endif
 741:src/main.c    **** 
 742:src/main.c    **** 						RelayOn();
 743:src/main.c    **** 						LED_ON;
 744:src/main.c    **** 	#ifdef WITH_HYST
 745:src/main.c    **** 						hours = 0;
 746:src/main.c    **** 	#endif
 747:src/main.c    **** 					}
 748:src/main.c    **** 				}
 749:src/main.c    **** 				break;
 750:src/main.c    **** 
 751:src/main.c    **** 			case LAMP_ON:
 752:src/main.c    **** 				if (!tt_relay_on_off)
 753:src/main.c    **** 				{
 754:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 755:src/main.c    **** 					hyst = GetHysteresis (hours);
 756:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 757:src/main.c    **** 	#else
 758:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 759:src/main.c    **** 	#endif
 760:src/main.c    **** 					{
 761:src/main.c    **** 						main_state = LAMP_OFF;
 762:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 763:src/main.c    **** 						Update_TIM3_CH1 (0);
 764:src/main.c    **** 	#endif
 765:src/main.c    **** 						tt_relay_on_off = 10000;
 766:src/main.c    **** 						RelayOff();
 767:src/main.c    **** 						LED_OFF;
 768:src/main.c    **** 					}
ARM GAS  /tmp/cc67MAoN.s 			page 56


 769:src/main.c    **** 				}
 770:src/main.c    **** 
 771:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 772:src/main.c    **** 				if (main_state == LAMP_ON)
 773:src/main.c    **** 				{
 774:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
 775:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
 776:src/main.c    **** 				}
 777:src/main.c    **** 	#endif
 778:src/main.c    **** 				break;
 779:src/main.c    **** 
 780:src/main.c    **** 			default:
 781:src/main.c    **** 				main_state = MAIN_INIT;
 782:src/main.c    **** 				break;
 783:src/main.c    **** 		}
 784:src/main.c    **** 
 785:src/main.c    **** 		if (!timer_standby)
 786:src/main.c    **** 		{
 787:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 788:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
 789:src/main.c    **** #else
 790:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
 791:src/main.c    **** #endif
 792:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 793:src/main.c    **** 			Usart2Send(s_lcd);
 794:src/main.c    **** 			timer_standby = 2000;
 795:src/main.c    **** 		}
 796:src/main.c    **** 
 797:src/main.c    **** 		//Cosas que no dependen del estado del programa
 798:src/main.c    **** 		UpdateRelay ();
 799:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 800:src/main.c    **** 		UpdateTemp();
 801:src/main.c    **** #endif
 802:src/main.c    **** 		UpdatePhotoTransistor();
 803:src/main.c    **** 	}	//end while 1
 804:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
 805:src/main.c    **** #endif	//USE_REDONDA_BASIC
 806:src/main.c    **** 
 807:src/main.c    **** 
 808:src/main.c    **** #ifdef USE_MQTT_LIB
 809:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 810:src/main.c    **** 	int rc = 0;
 811:src/main.c    **** 	char buf[200];
 812:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
 813:src/main.c    **** 	char* payload = "mypayload";
 814:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
 815:src/main.c    **** 	int len = 0;
 816:src/main.c    **** 
 817:src/main.c    **** 	data.clientID.cstring = "me";
 818:src/main.c    **** 	data.keepAliveInterval = 20;
 819:src/main.c    **** 	data.cleansession = 1;
 820:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
 821:src/main.c    **** 
 822:src/main.c    **** 	topicString.cstring = "mytopic";
 823:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
 824:src/main.c    **** 
 825:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
ARM GAS  /tmp/cc67MAoN.s 			page 57


 826:src/main.c    **** 	//falta abrir puerto
 827:src/main.c    **** 	//falta enviar al socket
 828:src/main.c    **** 	//falta cerrar socket
 829:src/main.c    **** #endif
 830:src/main.c    **** 
 831:src/main.c    **** //	//---------- Prueba USART2 --------//
 832:src/main.c    **** //
 833:src/main.c    **** //    while( 1 )
 834:src/main.c    **** //    {
 835:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 836:src/main.c    **** //        Wait_ms(3000);
 837:src/main.c    **** //    }
 838:src/main.c    **** //
 839:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
 840:src/main.c    **** 
 841:src/main.c    **** 	//---------- Prueba con GPS --------//
 842:src/main.c    **** #ifdef USE_GPS
 843:src/main.c    **** 	Usart2SendSingle('M');
 844:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 845:src/main.c    **** 	Wait_ms(1000);
 846:src/main.c    **** 
 847:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
 848:src/main.c    **** 
 849:src/main.c    **** 	//mando reset al gps
 850:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
 851:src/main.c    **** 	GPSStartResetSM ();
 852:src/main.c    **** 	while (GPSStart() != RESP_OK);
 853:src/main.c    **** 
 854:src/main.c    **** 	//mando conf al gps
 855:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
 856:src/main.c    **** 	GPSConfigResetSM ();
 857:src/main.c    **** 	while (GPSConfig() != RESP_OK);
 858:src/main.c    **** 
 859:src/main.c    **** //	//mando reset factory al gps
 860:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
 861:src/main.c    **** //	GPSResetFactoryResetSM ();
 862:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
 863:src/main.c    **** 
 864:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
 865:src/main.c    **** //	timer_standby = 60000;
 866:src/main.c    **** //	while( timer_standby )
 867:src/main.c    **** 	while( 1 )
 868:src/main.c    **** 	{
 869:src/main.c    **** 		if (gps_pckt_ready)
 870:src/main.c    **** 		{
 871:src/main.c    **** 			gps_pckt_ready = 0;
 872:src/main.c    **** 			//Usart2SendSingle('P');
 873:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
 874:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
 875:src/main.c    **** 		}
 876:src/main.c    **** 
 877:src/main.c    **** 		GPSProcess();
 878:src/main.c    **** 	}
 879:src/main.c    **** #endif
 880:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
 881:src/main.c    **** 
 882:src/main.c    **** 	//---------- Prueba con GSM --------//
ARM GAS  /tmp/cc67MAoN.s 			page 58


 883:src/main.c    **** #ifdef USE_GSM
 884:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
 885:src/main.c    **** 
 886:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 887:src/main.c    **** 
 888:src/main.c    **** 
 889:src/main.c    **** 	//Pruebo USART1
 890:src/main.c    **** //	while (1)
 891:src/main.c    **** //	{
 892:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
 893:src/main.c    **** //			Wait_ms(50);
 894:src/main.c    **** //	}
 895:src/main.c    **** 
 896:src/main.c    **** 
 897:src/main.c    **** 	//mando start al gsm
 898:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 899:src/main.c    **** 	//GPSStartResetSM ();
 900:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 901:src/main.c    **** 	while (timer_standby)
 902:src/main.c    **** 	{
 903:src/main.c    **** 		i = GSM_Start();
 904:src/main.c    **** 		if (i == 2)
 905:src/main.c    **** 		{
 906:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 907:src/main.c    **** 			timer_standby = 0;
 908:src/main.c    **** 		}
 909:src/main.c    **** 
 910:src/main.c    **** 		if (i == 4)
 911:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 912:src/main.c    **** 	}
 913:src/main.c    **** 
 914:src/main.c    **** 	//mando conf al gsm
 915:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
 916:src/main.c    **** 	//GPSConfigResetSM ();
 917:src/main.c    **** 
 918:src/main.c    **** 	i = 0;
 919:src/main.c    **** 	while (i == 0)
 920:src/main.c    **** 	{
 921:src/main.c    **** 		ii = GSM_Config(1000);
 922:src/main.c    **** 
 923:src/main.c    **** 		if (ii == 2)
 924:src/main.c    **** 			i = 0;
 925:src/main.c    **** 		else if (ii > 2)
 926:src/main.c    **** 		{
 927:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
 928:src/main.c    **** 			while (1);
 929:src/main.c    **** 		}
 930:src/main.c    **** 
 931:src/main.c    **** 		GSMProcess();
 932:src/main.c    **** 		GSMReceive ();
 933:src/main.c    **** 
 934:src/main.c    **** 		if (gsm_pckt_ready)
 935:src/main.c    **** 		{
 936:src/main.c    **** 			gsm_pckt_ready = 0;
 937:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 938:src/main.c    **** 		}
 939:src/main.c    **** 
ARM GAS  /tmp/cc67MAoN.s 			page 59


 940:src/main.c    **** 		if (LIGHT)
 941:src/main.c    **** 			LED_ON;
 942:src/main.c    **** 		else
 943:src/main.c    **** 			LED_OFF;
 944:src/main.c    **** 	}
 945:src/main.c    **** 
 946:src/main.c    **** 
 947:src/main.c    **** 	while( 1 )
 948:src/main.c    **** 	{
 949:src/main.c    **** 		if (gsm_pckt_ready)
 950:src/main.c    **** 		{
 951:src/main.c    **** 			gsm_pckt_ready = 0;
 952:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 953:src/main.c    **** 		}
 954:src/main.c    **** 
 955:src/main.c    **** 		GSMProcess();
 956:src/main.c    **** 
 957:src/main.c    **** 		if (LIGHT)
 958:src/main.c    **** 			LED_ON;
 959:src/main.c    **** 
 960:src/main.c    **** 	}
 961:src/main.c    **** #endif
 962:src/main.c    **** 
 963:src/main.c    **** 	//---------- Pruebas con GSM GATEWAY --------//
 964:src/main.c    **** #ifdef USE_GSM_GATEWAY
 965:src/main.c    **** 	LED_OFF;
 966:src/main.c    **** 	for (i = 0; i < 6; i++)
 967:src/main.c    **** 	{
 968:src/main.c    **** 		if (LED)
 969:src/main.c    **** 			LED_OFF;
 970:src/main.c    **** 		else
 971:src/main.c    **** 			LED_ON;
 972:src/main.c    **** 
 973:src/main.c    **** 		Wait_ms (300);
 974:src/main.c    **** 	}
 975:src/main.c    **** 	Wait_ms (3000);
 976:src/main.c    **** 
 977:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 978:src/main.c    **** 
 979:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 980:src/main.c    **** 
 981:src/main.c    **** 
 982:src/main.c    **** 	//mando start al gsm
 983:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 984:src/main.c    **** 	//GPSStartResetSM ();
 985:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 986:src/main.c    **** 	while (timer_standby)
 987:src/main.c    **** 	{
 988:src/main.c    **** 		i = GSM_Start();
 989:src/main.c    **** 		if (i == 2)
 990:src/main.c    **** 		{
 991:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 992:src/main.c    **** 			timer_standby = 0;
 993:src/main.c    **** 		}
 994:src/main.c    **** 		else
 995:src/main.c    **** 
 996:src/main.c    **** 		if (i == 4)
ARM GAS  /tmp/cc67MAoN.s 			page 60


 997:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 998:src/main.c    **** 	}
 999:src/main.c    **** 
1000:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
1001:src/main.c    **** 
1002:src/main.c    **** 	while (1)
1003:src/main.c    **** 	{
1004:src/main.c    **** 		GSMProcess();
1005:src/main.c    **** 
1006:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
1007:src/main.c    **** 		{
1008:src/main.c    **** 			usart2_pckt_ready = 0;
1009:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
1010:src/main.c    **** 		}
1011:src/main.c    **** 
1012:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
1013:src/main.c    **** 		{
1014:src/main.c    **** 			gsm_pckt_ready = 0;
1015:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
1016:src/main.c    **** 		}
1017:src/main.c    **** 
1018:src/main.c    **** 		if (LIGHT)
1019:src/main.c    **** 			LED_ON;
1020:src/main.c    **** 		else
1021:src/main.c    **** 			LED_OFF;
1022:src/main.c    **** 	}
1023:src/main.c    **** #endif
1024:src/main.c    **** 
1025:src/main.c    **** 	//---------- Fin Prueba con GSM GATEWAY --------//
1026:src/main.c    **** 
1027:src/main.c    **** 
1028:src/main.c    **** 
1029:src/main.c    **** 	//---------- Prueba temp --------//
1030:src/main.c    **** 	/*
1031:src/main.c    **** 	while (1)
1032:src/main.c    **** 	{
1033:src/main.c    **** 		local_meas = GetTemp();
1034:src/main.c    **** 		if (local_meas != local_meas_last)
1035:src/main.c    **** 		{
1036:src/main.c    **** 			LED_ON;
1037:src/main.c    **** 			local_meas_last = local_meas;
1038:src/main.c    **** 			LCD_2DO_RENGLON;
1039:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
1040:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
1041:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
1042:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
1043:src/main.c    **** 			LCDTransmitStr(s_lcd);
1044:src/main.c    **** 			LED_OFF;
1045:src/main.c    **** 		}
1046:src/main.c    **** 
1047:src/main.c    **** 		UpdateTemp();
1048:src/main.c    **** 	}
1049:src/main.c    **** 	*/
1050:src/main.c    **** 	//---------- Fin prueba temp --------//
1051:src/main.c    **** 
1052:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
1053:src/main.c    **** 	/*
ARM GAS  /tmp/cc67MAoN.s 			page 61


1054:src/main.c    **** 	local_meas = 0;
1055:src/main.c    **** 	while (1)
1056:src/main.c    **** 	{
1057:src/main.c    **** 		LCD_2DO_RENGLON;
1058:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
1059:src/main.c    **** 		fcalc = local_meas;
1060:src/main.c    **** 		fcalc = fcalc * K_1TO10;
1061:src/main.c    **** 		one_int = (short) fcalc;
1062:src/main.c    **** 		fcalc = fcalc - one_int;
1063:src/main.c    **** 		fcalc = fcalc * 10;
1064:src/main.c    **** 		one_dec = (short) fcalc;
1065:src/main.c    **** 
1066:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
1067:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
1068:src/main.c    **** 		LCDTransmitStr(s_lcd);
1069:src/main.c    **** 
1070:src/main.c    **** 		Wait_ms (1000);
1071:src/main.c    **** 		if (local_meas <= 255)
1072:src/main.c    **** 			local_meas = 0;
1073:src/main.c    **** 		else
1074:src/main.c    **** 			local_meas++;
1075:src/main.c    **** 	}
1076:src/main.c    **** 	*/
1077:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
1078:src/main.c    **** 
1079:src/main.c    **** 
1080:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
1081:src/main.c    **** 
1082:src/main.c    **** 	return 0;
1083:src/main.c    **** }
1084:src/main.c    **** 
1085:src/main.c    **** //--- End of Main ---//
1086:src/main.c    **** 
1087:src/main.c    **** 
1088:src/main.c    **** 
1089:src/main.c    **** 
1090:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
1091:src/main.c    **** {
 1334              		.loc 2 1091 0
 1335              		.cfi_startproc
 1336 0000 00B5     		push	{lr}	@
 1337              	.LCFI6:
 1338              		.cfi_def_cfa_offset 4
 1339              		.cfi_offset 14, -4
 1340 0002 97B0     		sub	sp, sp, #92	@,,
 1341              	.LCFI7:
 1342              		.cfi_def_cfa_offset 96
 1343 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
1092:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1344              		.loc 2 1092 0
 1345 0006 0123     		movs	r3, #1	@ tmp112,
 1346 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1347 000a 0223     		movs	r3, #2	@ tmp113,
 1348 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1349 000e 0323     		movs	r3, #3	@ tmp114,
 1350 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1351 0012 0423     		movs	r3, #4	@ tmp115,
ARM GAS  /tmp/cc67MAoN.s 			page 62


 1352 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1353 0016 0523     		movs	r3, #5	@ tmp116,
 1354 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1355 001a 0623     		movs	r3, #6	@ tmp117,
 1356 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
1093:src/main.c    ****       char tempbuff[40];
1094:src/main.c    ****       volatile float HUMIDITY_Value;
1095:src/main.c    ****       volatile float TEMPERATURE_Value;
1096:src/main.c    ****       volatile float PRESSURE_Value;
1097:src/main.c    **** 
1098:src/main.c    **** 
1099:src/main.c    **** 
1100:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1357              		.loc 2 1100 0
 1358 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1359 0020 1E4B     		ldr	r3, .L59	@ tmp119,
 1360 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1361 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1362 0026 1823     		movs	r3, #24	@ tmp122,
 1363 0028 1A00     		movs	r2, r3	@, tmp122
 1364 002a FFF7FEFF 		bl	memcpy	@
1101:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1102:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1103:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1365              		.loc 2 1103 0
 1366 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1367 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1368 0032 1B49     		ldr	r1, .L59+4	@ tmp127,
 1369 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1370 0036 FFF7FEFF 		bl	sprintf	@
1104:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1371              		.loc 2 1104 0
 1372 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1373 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1374 003e 1100     		movs	r1, r2	@, tmp129
 1375 0040 1800     		movs	r0, r3	@, tmp130
 1376 0042 FFF7FEFF 		bl	strcat	@
1105:src/main.c    **** 
1106:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1107:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1108:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1377              		.loc 2 1108 0
 1378 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1379 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1380 004a 1649     		ldr	r1, .L59+8	@ tmp133,
 1381 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1382 004e FFF7FEFF 		bl	sprintf	@
1109:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1383              		.loc 2 1109 0
 1384 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1385 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1386 0056 1100     		movs	r1, r2	@, tmp135
 1387 0058 1800     		movs	r0, r3	@, tmp136
 1388 005a FFF7FEFF 		bl	strcat	@
1110:src/main.c    **** 
1111:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1112:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
ARM GAS  /tmp/cc67MAoN.s 			page 63


1113:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1389              		.loc 2 1113 0
 1390 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1391 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1392 0062 1149     		ldr	r1, .L59+12	@ tmp139,
 1393 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1394 0066 FFF7FEFF 		bl	sprintf	@
1114:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1395              		.loc 2 1114 0
 1396 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1397 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1398 006e 1100     		movs	r1, r2	@, tmp141
 1399 0070 1800     		movs	r0, r3	@, tmp142
 1400 0072 FFF7FEFF 		bl	strcat	@
1115:src/main.c    **** 
1116:src/main.c    **** 
1117:src/main.c    ****       strcat((char *)buffer,"}}");
 1401              		.loc 2 1117 0
 1402 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1403 0078 1800     		movs	r0, r3	@, tmp143
 1404 007a FFF7FEFF 		bl	strlen	@
 1405 007e 0300     		movs	r3, r0	@ tmp144,
 1406 0080 1A00     		movs	r2, r3	@ D.7182, tmp145
 1407 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1408 0084 9A18     		adds	r2, r3, r2	@ D.7183, tmp146, D.7182
 1409 0086 094B     		ldr	r3, .L59+16	@ tmp147,
 1410 0088 1000     		movs	r0, r2	@ tmp148, D.7183
 1411 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1412 008c 0323     		movs	r3, #3	@ tmp150,
 1413 008e 1A00     		movs	r2, r3	@, tmp150
 1414 0090 FFF7FEFF 		bl	memcpy	@
1118:src/main.c    **** 
1119:src/main.c    ****       return;
 1415              		.loc 2 1119 0
 1416 0094 C046     		nop
1120:src/main.c    **** }
 1417              		.loc 2 1120 0
 1418 0096 17B0     		add	sp, sp, #92	@,,
 1419              		@ sp needed	@
 1420 0098 00BD     		pop	{pc}
 1421              	.L60:
 1422 009a C046     		.align	2
 1423              	.L59:
 1424 009c F4000000 		.word	.LC27
 1425 00a0 0C010000 		.word	.LC29
 1426 00a4 28010000 		.word	.LC31
 1427 00a8 40010000 		.word	.LC33
 1428 00ac 58010000 		.word	.LC35
 1429              		.cfi_endproc
 1430              	.LFE21:
 1431              		.size	prepare_json_pkt, .-prepare_json_pkt
 1432              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1433              		.align	2
 1434              		.global	TimingDelay_Decrement
 1435              		.code	16
 1436              		.thumb_func
 1437              		.type	TimingDelay_Decrement, %function
ARM GAS  /tmp/cc67MAoN.s 			page 64


 1438              	TimingDelay_Decrement:
 1439              	.LFB22:
1121:src/main.c    **** 
1122:src/main.c    **** //void EXTI4_15_IRQHandler(void)
1123:src/main.c    **** //{
1124:src/main.c    **** //	unsigned short aux;
1125:src/main.c    **** //
1126:src/main.c    **** ////--- SOLO PRUEBA DE INTERRUPCIONES ---//
1127:src/main.c    **** ////	if (DMX_INPUT)
1128:src/main.c    **** ////		LED_ON;
1129:src/main.c    **** ////	else
1130:src/main.c    **** ////		LED_OFF;
1131:src/main.c    **** ////
1132:src/main.c    **** ////	EXTI->PR |= 0x0100;
1133:src/main.c    **** //
1134:src/main.c    **** //	if(EXTI->PR & 0x0100)	//Line8
1135:src/main.c    **** //	{
1136:src/main.c    **** //
1137:src/main.c    **** //		//si no esta con el USART detecta el flanco	PONER TIMEOUT ACA?????
1138:src/main.c    **** //		if ((dmx_receive_flag == 0) || (dmx_timeout_timer == 0))
1139:src/main.c    **** //		//if (dmx_receive_flag == 0)
1140:src/main.c    **** //		{
1141:src/main.c    **** //			switch (signal_state)
1142:src/main.c    **** //			{
1143:src/main.c    **** //				case IDLE:
1144:src/main.c    **** //					if (!(DMX_INPUT))
1145:src/main.c    **** //					{
1146:src/main.c    **** //						//Activo timer en Falling.
1147:src/main.c    **** //						TIM14->CNT = 0;
1148:src/main.c    **** //						TIM14->CR1 |= 0x0001;
1149:src/main.c    **** //						signal_state++;
1150:src/main.c    **** //					}
1151:src/main.c    **** //					break;
1152:src/main.c    **** //
1153:src/main.c    **** //				case LOOK_FOR_BREAK:
1154:src/main.c    **** //					if (DMX_INPUT)
1155:src/main.c    **** //					{
1156:src/main.c    **** //						//Desactivo timer en Rising.
1157:src/main.c    **** //						aux = TIM14->CNT;
1158:src/main.c    **** //
1159:src/main.c    **** //						//reviso BREAK
1160:src/main.c    **** //						//if (((tim_counter_65ms) || (aux > 88)) && (tim_counter_65ms <= 20))
1161:src/main.c    **** //						if ((aux > 87) && (aux < 210))	//Consola STARLET 6
1162:src/main.c    **** //						//if ((aux > 87) && (aux < 2000))		//Consola marca CODE tiene break 1.88ms
1163:src/main.c    **** //						{
1164:src/main.c    **** //							LED_ON;
1165:src/main.c    **** //							//Activo timer para ver MARK.
1166:src/main.c    **** //							//TIM2->CNT = 0;
1167:src/main.c    **** //							//TIM2->CR1 |= 0x0001;
1168:src/main.c    **** //
1169:src/main.c    **** //							signal_state++;
1170:src/main.c    **** //							//tengo el break, activo el puerto serie
1171:src/main.c    **** //							DMX_channel_received = 0;
1172:src/main.c    **** //							//dmx_receive_flag = 1;
1173:src/main.c    **** //
1174:src/main.c    **** //							dmx_timeout_timer = DMX_TIMEOUT;		//activo el timer cuando prendo el puerto serie
1175:src/main.c    **** //							//USARTx_RX_ENA;
ARM GAS  /tmp/cc67MAoN.s 			page 65


1176:src/main.c    **** //						}
1177:src/main.c    **** //						else	//falso disparo
1178:src/main.c    **** //							signal_state = IDLE;
1179:src/main.c    **** //					}
1180:src/main.c    **** //					else	//falso disparo
1181:src/main.c    **** //						signal_state = IDLE;
1182:src/main.c    **** //
1183:src/main.c    **** //					TIM14->CR1 &= 0xFFFE;
1184:src/main.c    **** //					break;
1185:src/main.c    **** //
1186:src/main.c    **** //				case LOOK_FOR_MARK:
1187:src/main.c    **** //					if ((!(DMX_INPUT)) && (dmx_timeout_timer))	//termino Mark after break
1188:src/main.c    **** //					{
1189:src/main.c    **** //						//ya tenia el serie habilitado
1190:src/main.c    **** //						//if ((aux > 7) && (aux < 12))
1191:src/main.c    **** //						dmx_receive_flag = 1;
1192:src/main.c    **** //					}
1193:src/main.c    **** //					else	//falso disparo
1194:src/main.c    **** //					{
1195:src/main.c    **** //						//termine por timeout
1196:src/main.c    **** //						dmx_receive_flag = 0;
1197:src/main.c    **** //						//USARTx_RX_DISA;
1198:src/main.c    **** //					}
1199:src/main.c    **** //					signal_state = IDLE;
1200:src/main.c    **** //					LED_OFF;
1201:src/main.c    **** //					break;
1202:src/main.c    **** //
1203:src/main.c    **** //				default:
1204:src/main.c    **** //					signal_state = IDLE;
1205:src/main.c    **** //					break;
1206:src/main.c    **** //			}
1207:src/main.c    **** //		}
1208:src/main.c    **** //
1209:src/main.c    **** //		EXTI->PR |= 0x0100;
1210:src/main.c    **** //	}
1211:src/main.c    **** //}
1212:src/main.c    **** 
1213:src/main.c    **** void TimingDelay_Decrement(void)
1214:src/main.c    **** {
 1440              		.loc 2 1214 0
 1441              		.cfi_startproc
 1442 0000 10B5     		push	{r4, lr}	@
 1443              	.LCFI8:
 1444              		.cfi_def_cfa_offset 8
 1445              		.cfi_offset 4, -8
 1446              		.cfi_offset 14, -4
1215:src/main.c    **** 	if (wait_ms_var)
 1447              		.loc 2 1215 0
 1448 0002 4B4B     		ldr	r3, .L74	@ tmp145,
 1449 0004 1B88     		ldrh	r3, [r3]	@ tmp146, wait_ms_var
 1450 0006 9BB2     		uxth	r3, r3	@ D.7196, tmp146
 1451 0008 002B     		cmp	r3, #0	@ D.7196,
 1452 000a 06D0     		beq	.L62	@,
1216:src/main.c    **** 		wait_ms_var--;
 1453              		.loc 2 1216 0
 1454 000c 484B     		ldr	r3, .L74	@ tmp147,
 1455 000e 1B88     		ldrh	r3, [r3]	@ tmp148, wait_ms_var
ARM GAS  /tmp/cc67MAoN.s 			page 66


 1456 0010 9BB2     		uxth	r3, r3	@ D.7196, tmp148
 1457 0012 013B     		subs	r3, r3, #1	@ tmp149,
 1458 0014 9AB2     		uxth	r2, r3	@ D.7196, tmp149
 1459 0016 464B     		ldr	r3, .L74	@ tmp150,
 1460 0018 1A80     		strh	r2, [r3]	@ tmp151, wait_ms_var
 1461              	.L62:
1217:src/main.c    **** 
1218:src/main.c    **** //	if (display_timer)
1219:src/main.c    **** //		display_timer--;
1220:src/main.c    **** 
1221:src/main.c    **** 	if (timer_standby)
 1462              		.loc 2 1221 0
 1463 001a 464B     		ldr	r3, .L74+4	@ tmp152,
 1464 001c 1B88     		ldrh	r3, [r3]	@ tmp153, timer_standby
 1465 001e 9BB2     		uxth	r3, r3	@ D.7196, tmp153
 1466 0020 002B     		cmp	r3, #0	@ D.7196,
 1467 0022 06D0     		beq	.L63	@,
1222:src/main.c    **** 		timer_standby--;
 1468              		.loc 2 1222 0
 1469 0024 434B     		ldr	r3, .L74+4	@ tmp154,
 1470 0026 1B88     		ldrh	r3, [r3]	@ tmp155, timer_standby
 1471 0028 9BB2     		uxth	r3, r3	@ D.7196, tmp155
 1472 002a 013B     		subs	r3, r3, #1	@ tmp156,
 1473 002c 9AB2     		uxth	r2, r3	@ D.7196, tmp156
 1474 002e 414B     		ldr	r3, .L74+4	@ tmp157,
 1475 0030 1A80     		strh	r2, [r3]	@ tmp158, timer_standby
 1476              	.L63:
1223:src/main.c    **** 
1224:src/main.c    **** 	if (acswitch_timer)
 1477              		.loc 2 1224 0
 1478 0032 414B     		ldr	r3, .L74+8	@ tmp159,
 1479 0034 1B78     		ldrb	r3, [r3]	@ tmp160, acswitch_timer
 1480 0036 DBB2     		uxtb	r3, r3	@ D.7197, tmp160
 1481 0038 002B     		cmp	r3, #0	@ D.7197,
 1482 003a 06D0     		beq	.L64	@,
1225:src/main.c    **** 		acswitch_timer--;
 1483              		.loc 2 1225 0
 1484 003c 3E4B     		ldr	r3, .L74+8	@ tmp161,
 1485 003e 1B78     		ldrb	r3, [r3]	@ tmp162, acswitch_timer
 1486 0040 DBB2     		uxtb	r3, r3	@ D.7197, tmp162
 1487 0042 013B     		subs	r3, r3, #1	@ tmp163,
 1488 0044 DAB2     		uxtb	r2, r3	@ D.7197, tmp163
 1489 0046 3C4B     		ldr	r3, .L74+8	@ tmp164,
 1490 0048 1A70     		strb	r2, [r3]	@ tmp165, acswitch_timer
 1491              	.L64:
1226:src/main.c    **** 
1227:src/main.c    **** #ifdef USE_REDONDA_BASIC
1228:src/main.c    **** 	if (tt_take_photo_sample)
 1492              		.loc 2 1228 0
 1493 004a 3C4B     		ldr	r3, .L74+12	@ tmp166,
 1494 004c 1B88     		ldrh	r3, [r3]	@ tmp167, tt_take_photo_sample
 1495 004e 9BB2     		uxth	r3, r3	@ D.7196, tmp167
 1496 0050 002B     		cmp	r3, #0	@ D.7196,
 1497 0052 06D0     		beq	.L65	@,
1229:src/main.c    **** 		tt_take_photo_sample--;
 1498              		.loc 2 1229 0
 1499 0054 394B     		ldr	r3, .L74+12	@ tmp168,
ARM GAS  /tmp/cc67MAoN.s 			page 67


 1500 0056 1B88     		ldrh	r3, [r3]	@ tmp169, tt_take_photo_sample
 1501 0058 9BB2     		uxth	r3, r3	@ D.7196, tmp169
 1502 005a 013B     		subs	r3, r3, #1	@ tmp170,
 1503 005c 9AB2     		uxth	r2, r3	@ D.7196, tmp170
 1504 005e 374B     		ldr	r3, .L74+12	@ tmp171,
 1505 0060 1A80     		strh	r2, [r3]	@ tmp172, tt_take_photo_sample
 1506              	.L65:
1230:src/main.c    **** 
1231:src/main.c    **** 	if (tt_relay_on_off)
 1507              		.loc 2 1231 0
 1508 0062 374B     		ldr	r3, .L74+16	@ tmp173,
 1509 0064 1B88     		ldrh	r3, [r3]	@ tmp174, tt_relay_on_off
 1510 0066 9BB2     		uxth	r3, r3	@ D.7196, tmp174
 1511 0068 002B     		cmp	r3, #0	@ D.7196,
 1512 006a 06D0     		beq	.L66	@,
1232:src/main.c    **** 		tt_relay_on_off--;
 1513              		.loc 2 1232 0
 1514 006c 344B     		ldr	r3, .L74+16	@ tmp175,
 1515 006e 1B88     		ldrh	r3, [r3]	@ tmp176, tt_relay_on_off
 1516 0070 9BB2     		uxth	r3, r3	@ D.7196, tmp176
 1517 0072 013B     		subs	r3, r3, #1	@ tmp177,
 1518 0074 9AB2     		uxth	r2, r3	@ D.7196, tmp177
 1519 0076 324B     		ldr	r3, .L74+16	@ tmp178,
 1520 0078 1A80     		strh	r2, [r3]	@ tmp179, tt_relay_on_off
 1521              	.L66:
1233:src/main.c    **** #endif
1234:src/main.c    **** 
1235:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1236:src/main.c    **** 	if (tt_take_temp_sample)
1237:src/main.c    **** 		tt_take_temp_sample--;
1238:src/main.c    **** #endif
1239:src/main.c    **** 
1240:src/main.c    **** 	if (take_temp_sample)
 1522              		.loc 2 1240 0
 1523 007a 324B     		ldr	r3, .L74+20	@ tmp180,
 1524 007c 1B88     		ldrh	r3, [r3]	@ tmp181, take_temp_sample
 1525 007e 9BB2     		uxth	r3, r3	@ D.7196, tmp181
 1526 0080 002B     		cmp	r3, #0	@ D.7196,
 1527 0082 06D0     		beq	.L67	@,
1241:src/main.c    **** 		take_temp_sample--;
 1528              		.loc 2 1241 0
 1529 0084 2F4B     		ldr	r3, .L74+20	@ tmp182,
 1530 0086 1B88     		ldrh	r3, [r3]	@ tmp183, take_temp_sample
 1531 0088 9BB2     		uxth	r3, r3	@ D.7196, tmp183
 1532 008a 013B     		subs	r3, r3, #1	@ tmp184,
 1533 008c 9AB2     		uxth	r2, r3	@ D.7196, tmp184
 1534 008e 2D4B     		ldr	r3, .L74+20	@ tmp185,
 1535 0090 1A80     		strh	r2, [r3]	@ tmp186, take_temp_sample
 1536              	.L67:
1242:src/main.c    **** 
1243:src/main.c    **** 	if (filter_timer)
 1537              		.loc 2 1243 0
 1538 0092 2D4B     		ldr	r3, .L74+24	@ tmp187,
 1539 0094 1B78     		ldrb	r3, [r3]	@ tmp188, filter_timer
 1540 0096 DBB2     		uxtb	r3, r3	@ D.7197, tmp188
 1541 0098 002B     		cmp	r3, #0	@ D.7197,
 1542 009a 06D0     		beq	.L68	@,
ARM GAS  /tmp/cc67MAoN.s 			page 68


1244:src/main.c    **** 		filter_timer--;
 1543              		.loc 2 1244 0
 1544 009c 2A4B     		ldr	r3, .L74+24	@ tmp189,
 1545 009e 1B78     		ldrb	r3, [r3]	@ tmp190, filter_timer
 1546 00a0 DBB2     		uxtb	r3, r3	@ D.7197, tmp190
 1547 00a2 013B     		subs	r3, r3, #1	@ tmp191,
 1548 00a4 DAB2     		uxtb	r2, r3	@ D.7197, tmp191
 1549 00a6 284B     		ldr	r3, .L74+24	@ tmp192,
 1550 00a8 1A70     		strb	r2, [r3]	@ tmp193, filter_timer
 1551              	.L68:
1245:src/main.c    **** 
1246:src/main.c    **** 	//cuenta de a 1 minuto
1247:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 1552              		.loc 2 1247 0
 1553 00aa 284B     		ldr	r3, .L74+28	@ tmp194,
 1554 00ac 1B88     		ldrh	r3, [r3]	@ tmp195, secs
 1555 00ae 9BB2     		uxth	r3, r3	@ D.7196, tmp195
 1556 00b0 274A     		ldr	r2, .L74+32	@ tmp196,
 1557 00b2 9342     		cmp	r3, r2	@ D.7196, tmp196
 1558 00b4 0AD9     		bls	.L69	@,
1248:src/main.c    **** 	{
1249:src/main.c    **** 		minutes++;
 1559              		.loc 2 1249 0
 1560 00b6 274B     		ldr	r3, .L74+36	@ tmp197,
 1561 00b8 1B78     		ldrb	r3, [r3]	@ tmp198, minutes
 1562 00ba DBB2     		uxtb	r3, r3	@ D.7197, tmp198
 1563 00bc 0133     		adds	r3, r3, #1	@ tmp199,
 1564 00be DAB2     		uxtb	r2, r3	@ D.7197, tmp199
 1565 00c0 244B     		ldr	r3, .L74+36	@ tmp200,
 1566 00c2 1A70     		strb	r2, [r3]	@ tmp201, minutes
1250:src/main.c    **** 		secs = 0;
 1567              		.loc 2 1250 0
 1568 00c4 214B     		ldr	r3, .L74+28	@ tmp202,
 1569 00c6 0022     		movs	r2, #0	@ tmp203,
 1570 00c8 1A80     		strh	r2, [r3]	@ tmp204, secs
 1571 00ca 06E0     		b	.L70	@
 1572              	.L69:
1251:src/main.c    **** 	}
1252:src/main.c    **** 	else
1253:src/main.c    **** 		secs++;
 1573              		.loc 2 1253 0
 1574 00cc 1F4B     		ldr	r3, .L74+28	@ tmp205,
 1575 00ce 1B88     		ldrh	r3, [r3]	@ tmp206, secs
 1576 00d0 9BB2     		uxth	r3, r3	@ D.7196, tmp206
 1577 00d2 0133     		adds	r3, r3, #1	@ tmp207,
 1578 00d4 9AB2     		uxth	r2, r3	@ D.7196, tmp207
 1579 00d6 1D4B     		ldr	r3, .L74+28	@ tmp208,
 1580 00d8 1A80     		strh	r2, [r3]	@ tmp209, secs
 1581              	.L70:
1254:src/main.c    **** 
1255:src/main.c    **** 	if (minutes > 60)
 1582              		.loc 2 1255 0
 1583 00da 1E4B     		ldr	r3, .L74+36	@ tmp210,
 1584 00dc 1B78     		ldrb	r3, [r3]	@ tmp211, minutes
 1585 00de DBB2     		uxtb	r3, r3	@ D.7197, tmp211
 1586 00e0 3C2B     		cmp	r3, #60	@ D.7197,
 1587 00e2 09D9     		bls	.L71	@,
ARM GAS  /tmp/cc67MAoN.s 			page 69


1256:src/main.c    **** 	{
1257:src/main.c    **** 		hours++;
 1588              		.loc 2 1257 0
 1589 00e4 1C4B     		ldr	r3, .L74+40	@ tmp212,
 1590 00e6 1B78     		ldrb	r3, [r3]	@ tmp213, hours
 1591 00e8 DBB2     		uxtb	r3, r3	@ D.7197, tmp213
 1592 00ea 0133     		adds	r3, r3, #1	@ tmp214,
 1593 00ec DAB2     		uxtb	r2, r3	@ D.7197, tmp214
 1594 00ee 1A4B     		ldr	r3, .L74+40	@ tmp215,
 1595 00f0 1A70     		strb	r2, [r3]	@ tmp216, hours
1258:src/main.c    **** 		minutes = 0;
 1596              		.loc 2 1258 0
 1597 00f2 184B     		ldr	r3, .L74+36	@ tmp217,
 1598 00f4 0022     		movs	r2, #0	@ tmp218,
 1599 00f6 1A70     		strb	r2, [r3]	@ tmp219, minutes
 1600              	.L71:
1259:src/main.c    **** 	}
1260:src/main.c    **** 
1261:src/main.c    **** 
1262:src/main.c    **** #ifdef USE_MQTT_LIB
1263:src/main.c    **** 	//timer del MQTT
1264:src/main.c    **** 	SysTickIntHandler();
1265:src/main.c    **** #endif
1266:src/main.c    **** 
1267:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1268:src/main.c    **** 	if (usart1_mini_timeout)
 1601              		.loc 2 1268 0
 1602 00f8 184B     		ldr	r3, .L74+44	@ tmp220,
 1603 00fa 1B78     		ldrb	r3, [r3]	@ tmp221, usart1_mini_timeout
 1604 00fc DBB2     		uxtb	r3, r3	@ D.7197, tmp221
 1605 00fe 002B     		cmp	r3, #0	@ D.7197,
 1606 0100 06D0     		beq	.L72	@,
1269:src/main.c    **** 		usart1_mini_timeout--;
 1607              		.loc 2 1269 0
 1608 0102 164B     		ldr	r3, .L74+44	@ tmp222,
 1609 0104 1B78     		ldrb	r3, [r3]	@ tmp223, usart1_mini_timeout
 1610 0106 DBB2     		uxtb	r3, r3	@ D.7197, tmp223
 1611 0108 013B     		subs	r3, r3, #1	@ tmp224,
 1612 010a DAB2     		uxtb	r2, r3	@ D.7197, tmp224
 1613 010c 134B     		ldr	r3, .L74+44	@ tmp225,
 1614 010e 1A70     		strb	r2, [r3]	@ tmp226, usart1_mini_timeout
 1615              	.L72:
1270:src/main.c    **** 	if (usart2_mini_timeout)
 1616              		.loc 2 1270 0
 1617 0110 134B     		ldr	r3, .L74+48	@ tmp227,
 1618 0112 1B78     		ldrb	r3, [r3]	@ tmp228, usart2_mini_timeout
 1619 0114 DBB2     		uxtb	r3, r3	@ D.7197, tmp228
 1620 0116 002B     		cmp	r3, #0	@ D.7197,
 1621 0118 06D0     		beq	.L73	@,
1271:src/main.c    **** 		usart2_mini_timeout--;
 1622              		.loc 2 1271 0
 1623 011a 114B     		ldr	r3, .L74+48	@ tmp229,
 1624 011c 1B78     		ldrb	r3, [r3]	@ tmp230, usart2_mini_timeout
 1625 011e DBB2     		uxtb	r3, r3	@ D.7197, tmp230
 1626 0120 013B     		subs	r3, r3, #1	@ tmp231,
 1627 0122 DAB2     		uxtb	r2, r3	@ D.7197, tmp231
 1628 0124 0E4B     		ldr	r3, .L74+48	@ tmp232,
ARM GAS  /tmp/cc67MAoN.s 			page 70


 1629 0126 1A70     		strb	r2, [r3]	@ tmp233, usart2_mini_timeout
 1630              	.L73:
1272:src/main.c    **** #endif
1273:src/main.c    **** #ifdef USE_GPS
1274:src/main.c    **** 	GPSTimeoutCounters ();
1275:src/main.c    **** #endif
1276:src/main.c    **** 
1277:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1278:src/main.c    **** 	GSMTimeoutCounters ();
 1631              		.loc 2 1278 0
 1632 0128 FFF7FEFF 		bl	GSMTimeoutCounters	@
1279:src/main.c    **** #endif
1280:src/main.c    **** }
 1633              		.loc 2 1280 0
 1634 012c C046     		nop
 1635              		@ sp needed	@
 1636 012e 10BD     		pop	{r4, pc}
 1637              	.L75:
 1638              		.align	2
 1639              	.L74:
 1640 0130 00000000 		.word	wait_ms_var
 1641 0134 00000000 		.word	timer_standby
 1642 0138 00000000 		.word	acswitch_timer
 1643 013c 00000000 		.word	tt_take_photo_sample
 1644 0140 00000000 		.word	tt_relay_on_off
 1645 0144 00000000 		.word	take_temp_sample
 1646 0148 00000000 		.word	filter_timer
 1647 014c 00000000 		.word	secs
 1648 0150 5FEA0000 		.word	59999
 1649 0154 00000000 		.word	minutes
 1650 0158 00000000 		.word	hours
 1651 015c 00000000 		.word	usart1_mini_timeout
 1652 0160 00000000 		.word	usart2_mini_timeout
 1653              		.cfi_endproc
 1654              	.LFE22:
 1655              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1656              		.text
 1657              	.Letext0:
 1658              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1659              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1660              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1661              		.file 6 "src/hard.h"
 1662              		.file 7 "src/flash_program.h"
 1663              		.file 8 "src/funcs_gsm.h"
 1664              		.section	.debug_info,"",%progbits
 1665              	.Ldebug_info0:
 1666 0000 F80D0000 		.4byte	0xdf8
 1667 0004 0200     		.2byte	0x2
 1668 0006 00000000 		.4byte	.Ldebug_abbrev0
 1669 000a 04       		.byte	0x4
 1670 000b 01       		.uleb128 0x1
 1671 000c 59090000 		.4byte	.LASF201
 1672 0010 0C       		.byte	0xc
 1673 0011 31090000 		.4byte	.LASF202
 1674 0015 5B070000 		.4byte	.LASF203
 1675 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1676 001d 00000000 		.4byte	0
ARM GAS  /tmp/cc67MAoN.s 			page 71


 1677 0021 00000000 		.4byte	0
 1678 0025 00000000 		.4byte	.Ldebug_line0
 1679 0029 02       		.uleb128 0x2
 1680 002a 9F050000 		.4byte	.LASF120
 1681 002e 01       		.byte	0x1
 1682 002f 06010000 		.4byte	0x106
 1683 0033 03       		.byte	0x3
 1684 0034 C7       		.byte	0xc7
 1685 0035 06010000 		.4byte	0x106
 1686 0039 03       		.uleb128 0x3
 1687 003a 44060000 		.4byte	.LASF0
 1688 003e 72       		.sleb128 -14
 1689 003f 03       		.uleb128 0x3
 1690 0040 1A0A0000 		.4byte	.LASF1
 1691 0044 73       		.sleb128 -13
 1692 0045 03       		.uleb128 0x3
 1693 0046 6D000000 		.4byte	.LASF2
 1694 004a 7B       		.sleb128 -5
 1695 004b 03       		.uleb128 0x3
 1696 004c 8C010000 		.4byte	.LASF3
 1697 0050 7E       		.sleb128 -2
 1698 0051 03       		.uleb128 0x3
 1699 0052 F5060000 		.4byte	.LASF4
 1700 0056 7F       		.sleb128 -1
 1701 0057 04       		.uleb128 0x4
 1702 0058 6C040000 		.4byte	.LASF5
 1703 005c 00       		.byte	0
 1704 005d 04       		.uleb128 0x4
 1705 005e 1C050000 		.4byte	.LASF6
 1706 0062 01       		.byte	0x1
 1707 0063 04       		.uleb128 0x4
 1708 0064 C6050000 		.4byte	.LASF7
 1709 0068 02       		.byte	0x2
 1710 0069 04       		.uleb128 0x4
 1711 006a F7000000 		.4byte	.LASF8
 1712 006e 03       		.byte	0x3
 1713 006f 04       		.uleb128 0x4
 1714 0070 B9010000 		.4byte	.LASF9
 1715 0074 04       		.byte	0x4
 1716 0075 04       		.uleb128 0x4
 1717 0076 41010000 		.4byte	.LASF10
 1718 007a 05       		.byte	0x5
 1719 007b 04       		.uleb128 0x4
 1720 007c 55000000 		.4byte	.LASF11
 1721 0080 06       		.byte	0x6
 1722 0081 04       		.uleb128 0x4
 1723 0082 42000000 		.4byte	.LASF12
 1724 0086 07       		.byte	0x7
 1725 0087 04       		.uleb128 0x4
 1726 0088 F2040000 		.4byte	.LASF13
 1727 008c 08       		.byte	0x8
 1728 008d 04       		.uleb128 0x4
 1729 008e A6030000 		.4byte	.LASF14
 1730 0092 09       		.byte	0x9
 1731 0093 04       		.uleb128 0x4
 1732 0094 D6070000 		.4byte	.LASF15
 1733 0098 0A       		.byte	0xa
ARM GAS  /tmp/cc67MAoN.s 			page 72


 1734 0099 04       		.uleb128 0x4
 1735 009a 98060000 		.4byte	.LASF16
 1736 009e 0B       		.byte	0xb
 1737 009f 04       		.uleb128 0x4
 1738 00a0 36050000 		.4byte	.LASF17
 1739 00a4 0C       		.byte	0xc
 1740 00a5 04       		.uleb128 0x4
 1741 00a6 FA040000 		.4byte	.LASF18
 1742 00aa 0D       		.byte	0xd
 1743 00ab 04       		.uleb128 0x4
 1744 00ac 61060000 		.4byte	.LASF19
 1745 00b0 0E       		.byte	0xe
 1746 00b1 04       		.uleb128 0x4
 1747 00b2 42070000 		.4byte	.LASF20
 1748 00b6 0F       		.byte	0xf
 1749 00b7 04       		.uleb128 0x4
 1750 00b8 9C030000 		.4byte	.LASF21
 1751 00bc 10       		.byte	0x10
 1752 00bd 04       		.uleb128 0x4
 1753 00be EB070000 		.4byte	.LASF22
 1754 00c2 11       		.byte	0x11
 1755 00c3 04       		.uleb128 0x4
 1756 00c4 CB070000 		.4byte	.LASF23
 1757 00c8 13       		.byte	0x13
 1758 00c9 04       		.uleb128 0x4
 1759 00ca DC030000 		.4byte	.LASF24
 1760 00ce 14       		.byte	0x14
 1761 00cf 04       		.uleb128 0x4
 1762 00d0 C9000000 		.4byte	.LASF25
 1763 00d4 15       		.byte	0x15
 1764 00d5 04       		.uleb128 0x4
 1765 00d6 81060000 		.4byte	.LASF26
 1766 00da 16       		.byte	0x16
 1767 00db 04       		.uleb128 0x4
 1768 00dc 82010000 		.4byte	.LASF27
 1769 00e0 17       		.byte	0x17
 1770 00e1 04       		.uleb128 0x4
 1771 00e2 19070000 		.4byte	.LASF28
 1772 00e6 18       		.byte	0x18
 1773 00e7 04       		.uleb128 0x4
 1774 00e8 FB010000 		.4byte	.LASF29
 1775 00ec 19       		.byte	0x19
 1776 00ed 04       		.uleb128 0x4
 1777 00ee AD080000 		.4byte	.LASF30
 1778 00f2 1A       		.byte	0x1a
 1779 00f3 04       		.uleb128 0x4
 1780 00f4 14060000 		.4byte	.LASF31
 1781 00f8 1B       		.byte	0x1b
 1782 00f9 04       		.uleb128 0x4
 1783 00fa B0020000 		.4byte	.LASF32
 1784 00fe 1C       		.byte	0x1c
 1785 00ff 04       		.uleb128 0x4
 1786 0100 02070000 		.4byte	.LASF33
 1787 0104 1E       		.byte	0x1e
 1788 0105 00       		.byte	0
 1789 0106 05       		.uleb128 0x5
 1790 0107 01       		.byte	0x1
ARM GAS  /tmp/cc67MAoN.s 			page 73


 1791 0108 06       		.byte	0x6
 1792 0109 25090000 		.4byte	.LASF36
 1793 010d 06       		.uleb128 0x6
 1794 010e 97020000 		.4byte	.LASF34
 1795 0112 03       		.byte	0x3
 1796 0113 5F01     		.2byte	0x15f
 1797 0115 29000000 		.4byte	0x29
 1798 0119 07       		.uleb128 0x7
 1799 011a BA060000 		.4byte	.LASF35
 1800 011e 04       		.byte	0x4
 1801 011f 1D       		.byte	0x1d
 1802 0120 24010000 		.4byte	0x124
 1803 0124 05       		.uleb128 0x5
 1804 0125 01       		.byte	0x1
 1805 0126 08       		.byte	0x8
 1806 0127 F9070000 		.4byte	.LASF37
 1807 012b 05       		.uleb128 0x5
 1808 012c 02       		.byte	0x2
 1809 012d 05       		.byte	0x5
 1810 012e 01060000 		.4byte	.LASF38
 1811 0132 07       		.uleb128 0x7
 1812 0133 65020000 		.4byte	.LASF39
 1813 0137 04       		.byte	0x4
 1814 0138 2B       		.byte	0x2b
 1815 0139 3D010000 		.4byte	0x13d
 1816 013d 05       		.uleb128 0x5
 1817 013e 02       		.byte	0x2
 1818 013f 07       		.byte	0x7
 1819 0140 46090000 		.4byte	.LASF40
 1820 0144 07       		.uleb128 0x7
 1821 0145 E5000000 		.4byte	.LASF41
 1822 0149 04       		.byte	0x4
 1823 014a 3F       		.byte	0x3f
 1824 014b 4F010000 		.4byte	0x14f
 1825 014f 05       		.uleb128 0x5
 1826 0150 04       		.byte	0x4
 1827 0151 05       		.byte	0x5
 1828 0152 0B060000 		.4byte	.LASF42
 1829 0156 07       		.uleb128 0x7
 1830 0157 10080000 		.4byte	.LASF43
 1831 015b 04       		.byte	0x4
 1832 015c 41       		.byte	0x41
 1833 015d 61010000 		.4byte	0x161
 1834 0161 05       		.uleb128 0x5
 1835 0162 04       		.byte	0x4
 1836 0163 07       		.byte	0x7
 1837 0164 23070000 		.4byte	.LASF44
 1838 0168 05       		.uleb128 0x5
 1839 0169 08       		.byte	0x8
 1840 016a 05       		.byte	0x5
 1841 016b 5E040000 		.4byte	.LASF45
 1842 016f 05       		.uleb128 0x5
 1843 0170 08       		.byte	0x8
 1844 0171 07       		.byte	0x7
 1845 0172 05020000 		.4byte	.LASF46
 1846 0176 08       		.uleb128 0x8
 1847 0177 04       		.byte	0x4
ARM GAS  /tmp/cc67MAoN.s 			page 74


 1848 0178 05       		.byte	0x5
 1849 0179 696E7400 		.ascii	"int\000"
 1850 017d 05       		.uleb128 0x5
 1851 017e 04       		.byte	0x4
 1852 017f 07       		.byte	0x7
 1853 0180 B7000000 		.4byte	.LASF47
 1854 0184 07       		.uleb128 0x7
 1855 0185 E7030000 		.4byte	.LASF48
 1856 0189 05       		.byte	0x5
 1857 018a 14       		.byte	0x14
 1858 018b 19010000 		.4byte	0x119
 1859 018f 07       		.uleb128 0x7
 1860 0190 87050000 		.4byte	.LASF49
 1861 0194 05       		.byte	0x5
 1862 0195 1A       		.byte	0x1a
 1863 0196 32010000 		.4byte	0x132
 1864 019a 07       		.uleb128 0x7
 1865 019b 9F070000 		.4byte	.LASF50
 1866 019f 05       		.byte	0x5
 1867 01a0 1F       		.byte	0x1f
 1868 01a1 44010000 		.4byte	0x144
 1869 01a5 07       		.uleb128 0x7
 1870 01a6 C8010000 		.4byte	.LASF51
 1871 01aa 05       		.byte	0x5
 1872 01ab 20       		.byte	0x20
 1873 01ac 56010000 		.4byte	0x156
 1874 01b0 09       		.uleb128 0x9
 1875 01b1 2003     		.2byte	0x320
 1876 01b3 01       		.byte	0x1
 1877 01b4 71       		.byte	0x71
 1878 01b5 4D020000 		.4byte	0x24d
 1879 01b9 0A       		.uleb128 0xa
 1880 01ba D1010000 		.4byte	.LASF52
 1881 01be 01       		.byte	0x1
 1882 01bf 73       		.byte	0x73
 1883 01c0 64020000 		.4byte	0x264
 1884 01c4 02       		.byte	0x2
 1885 01c5 23       		.byte	0x23
 1886 01c6 00       		.uleb128 0
 1887 01c7 0A       		.uleb128 0xa
 1888 01c8 CF050000 		.4byte	.LASF53
 1889 01cc 01       		.byte	0x1
 1890 01cd 74       		.byte	0x74
 1891 01ce 69020000 		.4byte	0x269
 1892 01d2 02       		.byte	0x2
 1893 01d3 23       		.byte	0x23
 1894 01d4 04       		.uleb128 0x4
 1895 01d5 0A       		.uleb128 0xa
 1896 01d6 8D080000 		.4byte	.LASF54
 1897 01da 01       		.byte	0x1
 1898 01db 75       		.byte	0x75
 1899 01dc 79020000 		.4byte	0x279
 1900 01e0 03       		.byte	0x3
 1901 01e1 23       		.byte	0x23
 1902 01e2 8001     		.uleb128 0x80
 1903 01e4 0A       		.uleb128 0xa
 1904 01e5 F2010000 		.4byte	.LASF55
ARM GAS  /tmp/cc67MAoN.s 			page 75


 1905 01e9 01       		.byte	0x1
 1906 01ea 76       		.byte	0x76
 1907 01eb 69020000 		.4byte	0x269
 1908 01ef 03       		.byte	0x3
 1909 01f0 23       		.byte	0x23
 1910 01f1 8401     		.uleb128 0x84
 1911 01f3 0A       		.uleb128 0xa
 1912 01f4 470A0000 		.4byte	.LASF56
 1913 01f8 01       		.byte	0x1
 1914 01f9 77       		.byte	0x77
 1915 01fa 7E020000 		.4byte	0x27e
 1916 01fe 03       		.byte	0x3
 1917 01ff 23       		.byte	0x23
 1918 0200 8002     		.uleb128 0x100
 1919 0202 0A       		.uleb128 0xa
 1920 0203 E3050000 		.4byte	.LASF57
 1921 0207 01       		.byte	0x1
 1922 0208 78       		.byte	0x78
 1923 0209 69020000 		.4byte	0x269
 1924 020d 03       		.byte	0x3
 1925 020e 23       		.byte	0x23
 1926 020f 8402     		.uleb128 0x104
 1927 0211 0A       		.uleb128 0xa
 1928 0212 31050000 		.4byte	.LASF58
 1929 0216 01       		.byte	0x1
 1930 0217 79       		.byte	0x79
 1931 0218 83020000 		.4byte	0x283
 1932 021c 03       		.byte	0x3
 1933 021d 23       		.byte	0x23
 1934 021e 8003     		.uleb128 0x180
 1935 0220 0A       		.uleb128 0xa
 1936 0221 ED050000 		.4byte	.LASF59
 1937 0225 01       		.byte	0x1
 1938 0226 7A       		.byte	0x7a
 1939 0227 69020000 		.4byte	0x269
 1940 022b 03       		.byte	0x3
 1941 022c 23       		.byte	0x23
 1942 022d 8403     		.uleb128 0x184
 1943 022f 0A       		.uleb128 0xa
 1944 0230 F7050000 		.4byte	.LASF60
 1945 0234 01       		.byte	0x1
 1946 0235 7B       		.byte	0x7b
 1947 0236 88020000 		.4byte	0x288
 1948 023a 03       		.byte	0x3
 1949 023b 23       		.byte	0x23
 1950 023c 8004     		.uleb128 0x200
 1951 023e 0B       		.uleb128 0xb
 1952 023f 495000   		.ascii	"IP\000"
 1953 0242 01       		.byte	0x1
 1954 0243 7C       		.byte	0x7c
 1955 0244 A8020000 		.4byte	0x2a8
 1956 0248 03       		.byte	0x3
 1957 0249 23       		.byte	0x23
 1958 024a 8006     		.uleb128 0x300
 1959 024c 00       		.byte	0
 1960 024d 0C       		.uleb128 0xc
 1961 024e A5010000 		.4byte	0x1a5
ARM GAS  /tmp/cc67MAoN.s 			page 76


 1962 0252 5D020000 		.4byte	0x25d
 1963 0256 0D       		.uleb128 0xd
 1964 0257 5D020000 		.4byte	0x25d
 1965 025b 00       		.byte	0
 1966 025c 00       		.byte	0
 1967 025d 05       		.uleb128 0x5
 1968 025e 04       		.byte	0x4
 1969 025f 07       		.byte	0x7
 1970 0260 0B070000 		.4byte	.LASF61
 1971 0264 0E       		.uleb128 0xe
 1972 0265 4D020000 		.4byte	0x24d
 1973 0269 0C       		.uleb128 0xc
 1974 026a A5010000 		.4byte	0x1a5
 1975 026e 79020000 		.4byte	0x279
 1976 0272 0D       		.uleb128 0xd
 1977 0273 5D020000 		.4byte	0x25d
 1978 0277 1E       		.byte	0x1e
 1979 0278 00       		.byte	0
 1980 0279 0E       		.uleb128 0xe
 1981 027a 4D020000 		.4byte	0x24d
 1982 027e 0E       		.uleb128 0xe
 1983 027f 4D020000 		.4byte	0x24d
 1984 0283 0E       		.uleb128 0xe
 1985 0284 4D020000 		.4byte	0x24d
 1986 0288 0C       		.uleb128 0xc
 1987 0289 A5010000 		.4byte	0x1a5
 1988 028d 98020000 		.4byte	0x298
 1989 0291 0D       		.uleb128 0xd
 1990 0292 5D020000 		.4byte	0x25d
 1991 0296 3F       		.byte	0x3f
 1992 0297 00       		.byte	0
 1993 0298 0C       		.uleb128 0xc
 1994 0299 A5010000 		.4byte	0x1a5
 1995 029d A8020000 		.4byte	0x2a8
 1996 02a1 0D       		.uleb128 0xd
 1997 02a2 5D020000 		.4byte	0x25d
 1998 02a6 07       		.byte	0x7
 1999 02a7 00       		.byte	0
 2000 02a8 0E       		.uleb128 0xe
 2001 02a9 98020000 		.4byte	0x298
 2002 02ad 07       		.uleb128 0x7
 2003 02ae C4060000 		.4byte	.LASF62
 2004 02b2 01       		.byte	0x1
 2005 02b3 7D       		.byte	0x7d
 2006 02b4 B0010000 		.4byte	0x1b0
 2007 02b8 0F       		.uleb128 0xf
 2008 02b9 34       		.byte	0x34
 2009 02ba 01       		.byte	0x1
 2010 02bb 86       		.byte	0x86
 2011 02bc 5B030000 		.4byte	0x35b
 2012 02c0 0A       		.uleb128 0xa
 2013 02c1 BC020000 		.4byte	.LASF63
 2014 02c5 01       		.byte	0x1
 2015 02c6 88       		.byte	0x88
 2016 02c7 60030000 		.4byte	0x360
 2017 02cb 02       		.byte	0x2
 2018 02cc 23       		.byte	0x23
ARM GAS  /tmp/cc67MAoN.s 			page 77


 2019 02cd 00       		.uleb128 0
 2020 02ce 0A       		.uleb128 0xa
 2021 02cf 14070000 		.4byte	.LASF64
 2022 02d3 01       		.byte	0x1
 2023 02d4 89       		.byte	0x89
 2024 02d5 5B030000 		.4byte	0x35b
 2025 02d9 02       		.byte	0x2
 2026 02da 23       		.byte	0x23
 2027 02db 04       		.uleb128 0x4
 2028 02dc 0A       		.uleb128 0xa
 2029 02dd CF050000 		.4byte	.LASF53
 2030 02e1 01       		.byte	0x1
 2031 02e2 8A       		.byte	0x8a
 2032 02e3 A5010000 		.4byte	0x1a5
 2033 02e7 02       		.byte	0x2
 2034 02e8 23       		.byte	0x23
 2035 02e9 08       		.uleb128 0x8
 2036 02ea 0A       		.uleb128 0xa
 2037 02eb 85030000 		.4byte	.LASF65
 2038 02ef 01       		.byte	0x1
 2039 02f0 8B       		.byte	0x8b
 2040 02f1 5B030000 		.4byte	0x35b
 2041 02f5 02       		.byte	0x2
 2042 02f6 23       		.byte	0x23
 2043 02f7 0C       		.uleb128 0xc
 2044 02f8 0B       		.uleb128 0xb
 2045 02f9 53435200 		.ascii	"SCR\000"
 2046 02fd 01       		.byte	0x1
 2047 02fe 8C       		.byte	0x8c
 2048 02ff 5B030000 		.4byte	0x35b
 2049 0303 02       		.byte	0x2
 2050 0304 23       		.byte	0x23
 2051 0305 10       		.uleb128 0x10
 2052 0306 0B       		.uleb128 0xb
 2053 0307 43435200 		.ascii	"CCR\000"
 2054 030b 01       		.byte	0x1
 2055 030c 8D       		.byte	0x8d
 2056 030d 5B030000 		.4byte	0x35b
 2057 0311 02       		.byte	0x2
 2058 0312 23       		.byte	0x23
 2059 0313 14       		.uleb128 0x14
 2060 0314 0A       		.uleb128 0xa
 2061 0315 D9050000 		.4byte	.LASF66
 2062 0319 01       		.byte	0x1
 2063 031a 8E       		.byte	0x8e
 2064 031b A5010000 		.4byte	0x1a5
 2065 031f 02       		.byte	0x2
 2066 0320 23       		.byte	0x23
 2067 0321 18       		.uleb128 0x18
 2068 0322 0B       		.uleb128 0xb
 2069 0323 53485000 		.ascii	"SHP\000"
 2070 0327 01       		.byte	0x1
 2071 0328 8F       		.byte	0x8f
 2072 0329 75030000 		.4byte	0x375
 2073 032d 02       		.byte	0x2
 2074 032e 23       		.byte	0x23
 2075 032f 1C       		.uleb128 0x1c
ARM GAS  /tmp/cc67MAoN.s 			page 78


 2076 0330 0A       		.uleb128 0xa
 2077 0331 76040000 		.4byte	.LASF67
 2078 0335 01       		.byte	0x1
 2079 0336 90       		.byte	0x90
 2080 0337 5B030000 		.4byte	0x35b
 2081 033b 02       		.byte	0x2
 2082 033c 23       		.byte	0x23
 2083 033d 24       		.uleb128 0x24
 2084 033e 0A       		.uleb128 0xa
 2085 033f E3050000 		.4byte	.LASF57
 2086 0343 01       		.byte	0x1
 2087 0344 91       		.byte	0x91
 2088 0345 65030000 		.4byte	0x365
 2089 0349 02       		.byte	0x2
 2090 034a 23       		.byte	0x23
 2091 034b 28       		.uleb128 0x28
 2092 034c 0A       		.uleb128 0xa
 2093 034d 1C020000 		.4byte	.LASF68
 2094 0351 01       		.byte	0x1
 2095 0352 92       		.byte	0x92
 2096 0353 5B030000 		.4byte	0x35b
 2097 0357 02       		.byte	0x2
 2098 0358 23       		.byte	0x23
 2099 0359 30       		.uleb128 0x30
 2100 035a 00       		.byte	0
 2101 035b 0E       		.uleb128 0xe
 2102 035c A5010000 		.4byte	0x1a5
 2103 0360 10       		.uleb128 0x10
 2104 0361 5B030000 		.4byte	0x35b
 2105 0365 0C       		.uleb128 0xc
 2106 0366 A5010000 		.4byte	0x1a5
 2107 036a 75030000 		.4byte	0x375
 2108 036e 0D       		.uleb128 0xd
 2109 036f 5D020000 		.4byte	0x25d
 2110 0373 01       		.byte	0x1
 2111 0374 00       		.byte	0
 2112 0375 0E       		.uleb128 0xe
 2113 0376 65030000 		.4byte	0x365
 2114 037a 07       		.uleb128 0x7
 2115 037b CE060000 		.4byte	.LASF69
 2116 037f 01       		.byte	0x1
 2117 0380 93       		.byte	0x93
 2118 0381 B8020000 		.4byte	0x2b8
 2119 0385 0F       		.uleb128 0xf
 2120 0386 10       		.byte	0x10
 2121 0387 01       		.byte	0x1
 2122 0388 FC       		.byte	0xfc
 2123 0389 C8030000 		.4byte	0x3c8
 2124 038d 0A       		.uleb128 0xa
 2125 038e AB0A0000 		.4byte	.LASF70
 2126 0392 01       		.byte	0x1
 2127 0393 FE       		.byte	0xfe
 2128 0394 5B030000 		.4byte	0x35b
 2129 0398 02       		.byte	0x2
 2130 0399 23       		.byte	0x23
 2131 039a 00       		.uleb128 0
 2132 039b 0A       		.uleb128 0xa
ARM GAS  /tmp/cc67MAoN.s 			page 79


 2133 039c C4000000 		.4byte	.LASF71
 2134 03a0 01       		.byte	0x1
 2135 03a1 FF       		.byte	0xff
 2136 03a2 5B030000 		.4byte	0x35b
 2137 03a6 02       		.byte	0x2
 2138 03a7 23       		.byte	0x23
 2139 03a8 04       		.uleb128 0x4
 2140 03a9 11       		.uleb128 0x11
 2141 03aa 56414C00 		.ascii	"VAL\000"
 2142 03ae 01       		.byte	0x1
 2143 03af 0001     		.2byte	0x100
 2144 03b1 5B030000 		.4byte	0x35b
 2145 03b5 02       		.byte	0x2
 2146 03b6 23       		.byte	0x23
 2147 03b7 08       		.uleb128 0x8
 2148 03b8 12       		.uleb128 0x12
 2149 03b9 15010000 		.4byte	.LASF72
 2150 03bd 01       		.byte	0x1
 2151 03be 0101     		.2byte	0x101
 2152 03c0 60030000 		.4byte	0x360
 2153 03c4 02       		.byte	0x2
 2154 03c5 23       		.byte	0x23
 2155 03c6 0C       		.uleb128 0xc
 2156 03c7 00       		.byte	0
 2157 03c8 06       		.uleb128 0x6
 2158 03c9 6E050000 		.4byte	.LASF73
 2159 03cd 01       		.byte	0x1
 2160 03ce 0201     		.2byte	0x102
 2161 03d0 85030000 		.4byte	0x385
 2162 03d4 13       		.uleb128 0x13
 2163 03d5 44       		.byte	0x44
 2164 03d6 03       		.byte	0x3
 2165 03d7 7C01     		.2byte	0x17c
 2166 03d9 9E040000 		.4byte	0x49e
 2167 03dd 11       		.uleb128 0x11
 2168 03de 49535200 		.ascii	"ISR\000"
 2169 03e2 03       		.byte	0x3
 2170 03e3 7E01     		.2byte	0x17e
 2171 03e5 5B030000 		.4byte	0x35b
 2172 03e9 02       		.byte	0x2
 2173 03ea 23       		.byte	0x23
 2174 03eb 00       		.uleb128 0
 2175 03ec 11       		.uleb128 0x11
 2176 03ed 49455200 		.ascii	"IER\000"
 2177 03f1 03       		.byte	0x3
 2178 03f2 7F01     		.2byte	0x17f
 2179 03f4 5B030000 		.4byte	0x35b
 2180 03f8 02       		.byte	0x2
 2181 03f9 23       		.byte	0x23
 2182 03fa 04       		.uleb128 0x4
 2183 03fb 11       		.uleb128 0x11
 2184 03fc 435200   		.ascii	"CR\000"
 2185 03ff 03       		.byte	0x3
 2186 0400 8001     		.2byte	0x180
 2187 0402 5B030000 		.4byte	0x35b
 2188 0406 02       		.byte	0x2
 2189 0407 23       		.byte	0x23
ARM GAS  /tmp/cc67MAoN.s 			page 80


 2190 0408 08       		.uleb128 0x8
 2191 0409 12       		.uleb128 0x12
 2192 040a 25050000 		.4byte	.LASF74
 2193 040e 03       		.byte	0x3
 2194 040f 8101     		.2byte	0x181
 2195 0411 5B030000 		.4byte	0x35b
 2196 0415 02       		.byte	0x2
 2197 0416 23       		.byte	0x23
 2198 0417 0C       		.uleb128 0xc
 2199 0418 12       		.uleb128 0x12
 2200 0419 2B050000 		.4byte	.LASF75
 2201 041d 03       		.byte	0x3
 2202 041e 8201     		.2byte	0x182
 2203 0420 5B030000 		.4byte	0x35b
 2204 0424 02       		.byte	0x2
 2205 0425 23       		.byte	0x23
 2206 0426 10       		.uleb128 0x10
 2207 0427 12       		.uleb128 0x12
 2208 0428 FD020000 		.4byte	.LASF76
 2209 042c 03       		.byte	0x3
 2210 042d 8301     		.2byte	0x183
 2211 042f 5B030000 		.4byte	0x35b
 2212 0433 02       		.byte	0x2
 2213 0434 23       		.byte	0x23
 2214 0435 14       		.uleb128 0x14
 2215 0436 12       		.uleb128 0x12
 2216 0437 D9050000 		.4byte	.LASF66
 2217 043b 03       		.byte	0x3
 2218 043c 8401     		.2byte	0x184
 2219 043e A5010000 		.4byte	0x1a5
 2220 0442 02       		.byte	0x2
 2221 0443 23       		.byte	0x23
 2222 0444 18       		.uleb128 0x18
 2223 0445 12       		.uleb128 0x12
 2224 0446 E3050000 		.4byte	.LASF57
 2225 044a 03       		.byte	0x3
 2226 044b 8501     		.2byte	0x185
 2227 044d A5010000 		.4byte	0x1a5
 2228 0451 02       		.byte	0x2
 2229 0452 23       		.byte	0x23
 2230 0453 1C       		.uleb128 0x1c
 2231 0454 11       		.uleb128 0x11
 2232 0455 545200   		.ascii	"TR\000"
 2233 0458 03       		.byte	0x3
 2234 0459 8601     		.2byte	0x186
 2235 045b 5B030000 		.4byte	0x35b
 2236 045f 02       		.byte	0x2
 2237 0460 23       		.byte	0x23
 2238 0461 20       		.uleb128 0x20
 2239 0462 12       		.uleb128 0x12
 2240 0463 ED050000 		.4byte	.LASF59
 2241 0467 03       		.byte	0x3
 2242 0468 8701     		.2byte	0x187
 2243 046a A5010000 		.4byte	0x1a5
 2244 046e 02       		.byte	0x2
 2245 046f 23       		.byte	0x23
 2246 0470 24       		.uleb128 0x24
ARM GAS  /tmp/cc67MAoN.s 			page 81


 2247 0471 12       		.uleb128 0x12
 2248 0472 7E020000 		.4byte	.LASF77
 2249 0476 03       		.byte	0x3
 2250 0477 8801     		.2byte	0x188
 2251 0479 5B030000 		.4byte	0x35b
 2252 047d 02       		.byte	0x2
 2253 047e 23       		.byte	0x23
 2254 047f 28       		.uleb128 0x28
 2255 0480 12       		.uleb128 0x12
 2256 0481 F7050000 		.4byte	.LASF60
 2257 0485 03       		.byte	0x3
 2258 0486 8901     		.2byte	0x189
 2259 0488 9E040000 		.4byte	0x49e
 2260 048c 02       		.byte	0x2
 2261 048d 23       		.byte	0x23
 2262 048e 2C       		.uleb128 0x2c
 2263 048f 11       		.uleb128 0x11
 2264 0490 445200   		.ascii	"DR\000"
 2265 0493 03       		.byte	0x3
 2266 0494 8A01     		.2byte	0x18a
 2267 0496 5B030000 		.4byte	0x35b
 2268 049a 02       		.byte	0x2
 2269 049b 23       		.byte	0x23
 2270 049c 40       		.uleb128 0x40
 2271 049d 00       		.byte	0
 2272 049e 0C       		.uleb128 0xc
 2273 049f A5010000 		.4byte	0x1a5
 2274 04a3 AE040000 		.4byte	0x4ae
 2275 04a7 0D       		.uleb128 0xd
 2276 04a8 5D020000 		.4byte	0x25d
 2277 04ac 04       		.byte	0x4
 2278 04ad 00       		.byte	0
 2279 04ae 06       		.uleb128 0x6
 2280 04af 52040000 		.4byte	.LASF78
 2281 04b3 03       		.byte	0x3
 2282 04b4 8B01     		.2byte	0x18b
 2283 04b6 D4030000 		.4byte	0x3d4
 2284 04ba 0E       		.uleb128 0xe
 2285 04bb 8F010000 		.4byte	0x18f
 2286 04bf 13       		.uleb128 0x13
 2287 04c0 2C       		.byte	0x2c
 2288 04c1 03       		.byte	0x3
 2289 04c2 6902     		.2byte	0x269
 2290 04c4 9B050000 		.4byte	0x59b
 2291 04c8 12       		.uleb128 0x12
 2292 04c9 78020000 		.4byte	.LASF79
 2293 04cd 03       		.byte	0x3
 2294 04ce 6B02     		.2byte	0x26b
 2295 04d0 5B030000 		.4byte	0x35b
 2296 04d4 02       		.byte	0x2
 2297 04d5 23       		.byte	0x23
 2298 04d6 00       		.uleb128 0
 2299 04d7 12       		.uleb128 0x12
 2300 04d8 6E060000 		.4byte	.LASF80
 2301 04dc 03       		.byte	0x3
 2302 04dd 6C02     		.2byte	0x26c
 2303 04df BA040000 		.4byte	0x4ba
ARM GAS  /tmp/cc67MAoN.s 			page 82


 2304 04e3 02       		.byte	0x2
 2305 04e4 23       		.byte	0x23
 2306 04e5 04       		.uleb128 0x4
 2307 04e6 12       		.uleb128 0x12
 2308 04e7 CF050000 		.4byte	.LASF53
 2309 04eb 03       		.byte	0x3
 2310 04ec 6D02     		.2byte	0x26d
 2311 04ee 8F010000 		.4byte	0x18f
 2312 04f2 02       		.byte	0x2
 2313 04f3 23       		.byte	0x23
 2314 04f4 06       		.uleb128 0x6
 2315 04f5 12       		.uleb128 0x12
 2316 04f6 66050000 		.4byte	.LASF81
 2317 04fa 03       		.byte	0x3
 2318 04fb 6E02     		.2byte	0x26e
 2319 04fd 5B030000 		.4byte	0x35b
 2320 0501 02       		.byte	0x2
 2321 0502 23       		.byte	0x23
 2322 0503 08       		.uleb128 0x8
 2323 0504 12       		.uleb128 0x12
 2324 0505 32030000 		.4byte	.LASF82
 2325 0509 03       		.byte	0x3
 2326 050a 6F02     		.2byte	0x26f
 2327 050c 5B030000 		.4byte	0x35b
 2328 0510 02       		.byte	0x2
 2329 0511 23       		.byte	0x23
 2330 0512 0C       		.uleb128 0xc
 2331 0513 11       		.uleb128 0x11
 2332 0514 49445200 		.ascii	"IDR\000"
 2333 0518 03       		.byte	0x3
 2334 0519 7002     		.2byte	0x270
 2335 051b BA040000 		.4byte	0x4ba
 2336 051f 02       		.byte	0x2
 2337 0520 23       		.byte	0x23
 2338 0521 10       		.uleb128 0x10
 2339 0522 12       		.uleb128 0x12
 2340 0523 D9050000 		.4byte	.LASF66
 2341 0527 03       		.byte	0x3
 2342 0528 7102     		.2byte	0x271
 2343 052a 8F010000 		.4byte	0x18f
 2344 052e 02       		.byte	0x2
 2345 052f 23       		.byte	0x23
 2346 0530 12       		.uleb128 0x12
 2347 0531 11       		.uleb128 0x11
 2348 0532 4F445200 		.ascii	"ODR\000"
 2349 0536 03       		.byte	0x3
 2350 0537 7202     		.2byte	0x272
 2351 0539 BA040000 		.4byte	0x4ba
 2352 053d 02       		.byte	0x2
 2353 053e 23       		.byte	0x23
 2354 053f 14       		.uleb128 0x14
 2355 0540 12       		.uleb128 0x12
 2356 0541 E3050000 		.4byte	.LASF57
 2357 0545 03       		.byte	0x3
 2358 0546 7302     		.2byte	0x273
 2359 0548 8F010000 		.4byte	0x18f
 2360 054c 02       		.byte	0x2
ARM GAS  /tmp/cc67MAoN.s 			page 83


 2361 054d 23       		.byte	0x23
 2362 054e 16       		.uleb128 0x16
 2363 054f 12       		.uleb128 0x12
 2364 0550 50000000 		.4byte	.LASF83
 2365 0554 03       		.byte	0x3
 2366 0555 7402     		.2byte	0x274
 2367 0557 5B030000 		.4byte	0x35b
 2368 055b 02       		.byte	0x2
 2369 055c 23       		.byte	0x23
 2370 055d 18       		.uleb128 0x18
 2371 055e 12       		.uleb128 0x12
 2372 055f A60A0000 		.4byte	.LASF84
 2373 0563 03       		.byte	0x3
 2374 0564 7502     		.2byte	0x275
 2375 0566 5B030000 		.4byte	0x35b
 2376 056a 02       		.byte	0x2
 2377 056b 23       		.byte	0x23
 2378 056c 1C       		.uleb128 0x1c
 2379 056d 11       		.uleb128 0x11
 2380 056e 41465200 		.ascii	"AFR\000"
 2381 0572 03       		.byte	0x3
 2382 0573 7602     		.2byte	0x276
 2383 0575 9B050000 		.4byte	0x59b
 2384 0579 02       		.byte	0x2
 2385 057a 23       		.byte	0x23
 2386 057b 20       		.uleb128 0x20
 2387 057c 11       		.uleb128 0x11
 2388 057d 42525200 		.ascii	"BRR\000"
 2389 0581 03       		.byte	0x3
 2390 0582 7702     		.2byte	0x277
 2391 0584 BA040000 		.4byte	0x4ba
 2392 0588 02       		.byte	0x2
 2393 0589 23       		.byte	0x23
 2394 058a 28       		.uleb128 0x28
 2395 058b 12       		.uleb128 0x12
 2396 058c ED050000 		.4byte	.LASF59
 2397 0590 03       		.byte	0x3
 2398 0591 7802     		.2byte	0x278
 2399 0593 8F010000 		.4byte	0x18f
 2400 0597 02       		.byte	0x2
 2401 0598 23       		.byte	0x23
 2402 0599 2A       		.uleb128 0x2a
 2403 059a 00       		.byte	0
 2404 059b 0E       		.uleb128 0xe
 2405 059c 65030000 		.4byte	0x365
 2406 05a0 06       		.uleb128 0x6
 2407 05a1 D7060000 		.4byte	.LASF85
 2408 05a5 03       		.byte	0x3
 2409 05a6 7902     		.2byte	0x279
 2410 05a8 BF040000 		.4byte	0x4bf
 2411 05ac 05       		.uleb128 0x5
 2412 05ad 08       		.byte	0x8
 2413 05ae 04       		.byte	0x4
 2414 05af 7B050000 		.4byte	.LASF86
 2415 05b3 05       		.uleb128 0x5
 2416 05b4 01       		.byte	0x1
 2417 05b5 08       		.byte	0x8
ARM GAS  /tmp/cc67MAoN.s 			page 84


 2418 05b6 50030000 		.4byte	.LASF87
 2419 05ba 0C       		.uleb128 0xc
 2420 05bb 3D010000 		.4byte	0x13d
 2421 05bf CA050000 		.4byte	0x5ca
 2422 05c3 0D       		.uleb128 0xd
 2423 05c4 5D020000 		.4byte	0x25d
 2424 05c8 02       		.byte	0x2
 2425 05c9 00       		.byte	0
 2426 05ca 0C       		.uleb128 0xc
 2427 05cb B3050000 		.4byte	0x5b3
 2428 05cf DA050000 		.4byte	0x5da
 2429 05d3 0D       		.uleb128 0xd
 2430 05d4 5D020000 		.4byte	0x25d
 2431 05d8 17       		.byte	0x17
 2432 05d9 00       		.byte	0
 2433 05da 14       		.uleb128 0x14
 2434 05db 01       		.byte	0x1
 2435 05dc 24010000 		.4byte	0x124
 2436 05e0 06       		.byte	0x6
 2437 05e1 B9       		.byte	0xb9
 2438 05e2 1D060000 		.4byte	0x61d
 2439 05e6 04       		.uleb128 0x4
 2440 05e7 D0040000 		.4byte	.LASF88
 2441 05eb 00       		.byte	0
 2442 05ec 04       		.uleb128 0x4
 2443 05ed 8C060000 		.4byte	.LASF89
 2444 05f1 01       		.byte	0x1
 2445 05f2 04       		.uleb128 0x4
 2446 05f3 10030000 		.4byte	.LASF90
 2447 05f7 02       		.byte	0x2
 2448 05f8 04       		.uleb128 0x4
 2449 05f9 4E020000 		.4byte	.LASF91
 2450 05fd 03       		.byte	0x3
 2451 05fe 04       		.uleb128 0x4
 2452 05ff 07080000 		.4byte	.LASF92
 2453 0603 04       		.byte	0x4
 2454 0604 04       		.uleb128 0x4
 2455 0605 90040000 		.4byte	.LASF93
 2456 0609 05       		.byte	0x5
 2457 060a 04       		.uleb128 0x4
 2458 060b DA040000 		.4byte	.LASF94
 2459 060f 06       		.byte	0x6
 2460 0610 04       		.uleb128 0x4
 2461 0611 EF030000 		.4byte	.LASF95
 2462 0615 07       		.byte	0x7
 2463 0616 04       		.uleb128 0x4
 2464 0617 4A040000 		.4byte	.LASF96
 2465 061b 08       		.byte	0x8
 2466 061c 00       		.byte	0
 2467 061d 07       		.uleb128 0x7
 2468 061e CF030000 		.4byte	.LASF97
 2469 0622 06       		.byte	0x6
 2470 0623 C6       		.byte	0xc6
 2471 0624 DA050000 		.4byte	0x5da
 2472 0628 15       		.uleb128 0x15
 2473 0629 B2040000 		.4byte	.LASF204
 2474 062d 54       		.byte	0x54
ARM GAS  /tmp/cc67MAoN.s 			page 85


 2475 062e 07       		.byte	0x7
 2476 062f 36       		.byte	0x36
 2477 0630 A5060000 		.4byte	0x6a5
 2478 0634 0A       		.uleb128 0xa
 2479 0635 AB050000 		.4byte	.LASF98
 2480 0639 07       		.byte	0x7
 2481 063a 38       		.byte	0x38
 2482 063b CA050000 		.4byte	0x5ca
 2483 063f 02       		.byte	0x2
 2484 0640 23       		.byte	0x23
 2485 0641 00       		.uleb128 0
 2486 0642 0A       		.uleb128 0xa
 2487 0643 1B010000 		.4byte	.LASF99
 2488 0647 07       		.byte	0x7
 2489 0648 39       		.byte	0x39
 2490 0649 CA050000 		.4byte	0x5ca
 2491 064d 02       		.byte	0x2
 2492 064e 23       		.byte	0x23
 2493 064f 18       		.uleb128 0x18
 2494 0650 0A       		.uleb128 0xa
 2495 0651 510A0000 		.4byte	.LASF100
 2496 0655 07       		.byte	0x7
 2497 0656 3A       		.byte	0x3a
 2498 0657 CA050000 		.4byte	0x5ca
 2499 065b 02       		.byte	0x2
 2500 065c 23       		.byte	0x23
 2501 065d 30       		.uleb128 0x30
 2502 065e 0A       		.uleb128 0xa
 2503 065f 4D080000 		.4byte	.LASF101
 2504 0663 07       		.byte	0x7
 2505 0664 3C       		.byte	0x3c
 2506 0665 7D010000 		.4byte	0x17d
 2507 0669 02       		.byte	0x2
 2508 066a 23       		.byte	0x23
 2509 066b 48       		.uleb128 0x48
 2510 066c 0A       		.uleb128 0xa
 2511 066d 35070000 		.4byte	.LASF102
 2512 0671 07       		.byte	0x7
 2513 0672 3D       		.byte	0x3d
 2514 0673 7D010000 		.4byte	0x17d
 2515 0677 02       		.byte	0x2
 2516 0678 23       		.byte	0x23
 2517 0679 4C       		.uleb128 0x4c
 2518 067a 0A       		.uleb128 0xa
 2519 067b 20060000 		.4byte	.LASF103
 2520 067f 07       		.byte	0x7
 2521 0680 3E       		.byte	0x3e
 2522 0681 3D010000 		.4byte	0x13d
 2523 0685 02       		.byte	0x2
 2524 0686 23       		.byte	0x23
 2525 0687 50       		.uleb128 0x50
 2526 0688 0A       		.uleb128 0xa
 2527 0689 A1020000 		.4byte	.LASF104
 2528 068d 07       		.byte	0x7
 2529 068e 40       		.byte	0x40
 2530 068f 24010000 		.4byte	0x124
 2531 0693 02       		.byte	0x2
ARM GAS  /tmp/cc67MAoN.s 			page 86


 2532 0694 23       		.byte	0x23
 2533 0695 52       		.uleb128 0x52
 2534 0696 0A       		.uleb128 0xa
 2535 0697 6C0A0000 		.4byte	.LASF105
 2536 069b 07       		.byte	0x7
 2537 069c 41       		.byte	0x41
 2538 069d 24010000 		.4byte	0x124
 2539 06a1 02       		.byte	0x2
 2540 06a2 23       		.byte	0x23
 2541 06a3 53       		.uleb128 0x53
 2542 06a4 00       		.byte	0
 2543 06a5 07       		.uleb128 0x7
 2544 06a6 12090000 		.4byte	.LASF106
 2545 06aa 07       		.byte	0x7
 2546 06ab 47       		.byte	0x47
 2547 06ac 28060000 		.4byte	0x628
 2548 06b0 14       		.uleb128 0x14
 2549 06b1 01       		.byte	0x1
 2550 06b2 24010000 		.4byte	0x124
 2551 06b6 08       		.byte	0x8
 2552 06b7 0A       		.byte	0xa
 2553 06b8 0B070000 		.4byte	0x70b
 2554 06bc 04       		.uleb128 0x4
 2555 06bd 33020000 		.4byte	.LASF107
 2556 06c1 00       		.byte	0
 2557 06c2 04       		.uleb128 0x4
 2558 06c3 30060000 		.4byte	.LASF108
 2559 06c7 01       		.byte	0x1
 2560 06c8 04       		.uleb128 0x4
 2561 06c9 FD080000 		.4byte	.LASF109
 2562 06cd 02       		.byte	0x2
 2563 06ce 04       		.uleb128 0x4
 2564 06cf 7D000000 		.4byte	.LASF110
 2565 06d3 03       		.byte	0x3
 2566 06d4 04       		.uleb128 0x4
 2567 06d5 6B010000 		.4byte	.LASF111
 2568 06d9 04       		.byte	0x4
 2569 06da 04       		.uleb128 0x4
 2570 06db B7080000 		.4byte	.LASF112
 2571 06df 05       		.byte	0x5
 2572 06e0 04       		.uleb128 0x4
 2573 06e1 E4080000 		.4byte	.LASF113
 2574 06e5 06       		.byte	0x6
 2575 06e6 04       		.uleb128 0x4
 2576 06e7 06000000 		.4byte	.LASF114
 2577 06eb 07       		.byte	0x7
 2578 06ec 04       		.uleb128 0x4
 2579 06ed 38080000 		.4byte	.LASF115
 2580 06f1 08       		.byte	0x8
 2581 06f2 04       		.uleb128 0x4
 2582 06f3 1B080000 		.4byte	.LASF116
 2583 06f7 09       		.byte	0x9
 2584 06f8 04       		.uleb128 0x4
 2585 06f9 D7020000 		.4byte	.LASF117
 2586 06fd 0A       		.byte	0xa
 2587 06fe 04       		.uleb128 0x4
 2588 06ff 8D000000 		.4byte	.LASF118
ARM GAS  /tmp/cc67MAoN.s 			page 87


 2589 0703 0B       		.byte	0xb
 2590 0704 04       		.uleb128 0x4
 2591 0705 55030000 		.4byte	.LASF119
 2592 0709 0C       		.byte	0xc
 2593 070a 00       		.byte	0
 2594 070b 16       		.uleb128 0x16
 2595 070c A6000000 		.4byte	.LASF205
 2596 0710 01       		.byte	0x1
 2597 0711 7C03     		.2byte	0x37c
 2598 0713 01       		.byte	0x1
 2599 0714 00000000 		.4byte	.LFB16
 2600 0718 EC000000 		.4byte	.LFE16
 2601 071c 00000000 		.4byte	.LLST0
 2602 0720 01       		.byte	0x1
 2603 0721 44070000 		.4byte	0x744
 2604 0725 17       		.uleb128 0x17
 2605 0726 9F050000 		.4byte	.LASF120
 2606 072a 01       		.byte	0x1
 2607 072b 7C03     		.2byte	0x37c
 2608 072d 0D010000 		.4byte	0x10d
 2609 0731 02       		.byte	0x2
 2610 0732 91       		.byte	0x91
 2611 0733 6F       		.sleb128 -17
 2612 0734 17       		.uleb128 0x17
 2613 0735 58060000 		.4byte	.LASF121
 2614 0739 01       		.byte	0x1
 2615 073a 7C03     		.2byte	0x37c
 2616 073c A5010000 		.4byte	0x1a5
 2617 0740 02       		.byte	0x2
 2618 0741 91       		.byte	0x91
 2619 0742 68       		.sleb128 -24
 2620 0743 00       		.byte	0
 2621 0744 18       		.uleb128 0x18
 2622 0745 EE020000 		.4byte	.LASF206
 2623 0749 01       		.byte	0x1
 2624 074a B803     		.2byte	0x3b8
 2625 074c 01       		.byte	0x1
 2626 074d A5010000 		.4byte	0x1a5
 2627 0751 00000000 		.4byte	.LFB18
 2628 0755 48000000 		.4byte	.LFE18
 2629 0759 2C000000 		.4byte	.LLST1
 2630 075d 01       		.byte	0x1
 2631 075e 72070000 		.4byte	0x772
 2632 0762 17       		.uleb128 0x17
 2633 0763 38030000 		.4byte	.LASF122
 2634 0767 01       		.byte	0x1
 2635 0768 B803     		.2byte	0x3b8
 2636 076a A5010000 		.4byte	0x1a5
 2637 076e 02       		.byte	0x2
 2638 076f 91       		.byte	0x91
 2639 0770 74       		.sleb128 -12
 2640 0771 00       		.byte	0
 2641 0772 19       		.uleb128 0x19
 2642 0773 01       		.byte	0x1
 2643 0774 150A0000 		.4byte	.LASF207
 2644 0778 02       		.byte	0x2
 2645 0779 D8       		.byte	0xd8
ARM GAS  /tmp/cc67MAoN.s 			page 88


 2646 077a 01       		.byte	0x1
 2647 077b 76010000 		.4byte	0x176
 2648 077f 00000000 		.4byte	.LFB20
 2649 0783 7C050000 		.4byte	.LFE20
 2650 0787 58000000 		.4byte	.LLST2
 2651 078b 01       		.byte	0x1
 2652 078c DE080000 		.4byte	0x8de
 2653 0790 1A       		.uleb128 0x1a
 2654 0791 6900     		.ascii	"i\000"
 2655 0793 02       		.byte	0x2
 2656 0794 DA       		.byte	0xda
 2657 0795 24010000 		.4byte	0x124
 2658 0799 02       		.byte	0x2
 2659 079a 91       		.byte	0x91
 2660 079b 6F       		.sleb128 -17
 2661 079c 1B       		.uleb128 0x1b
 2662 079d 696900   		.ascii	"ii\000"
 2663 07a0 02       		.byte	0x2
 2664 07a1 DA       		.byte	0xda
 2665 07a2 24010000 		.4byte	0x124
 2666 07a6 1C       		.uleb128 0x1c
 2667 07a7 990A0000 		.4byte	.LASF123
 2668 07ab 02       		.byte	0x2
 2669 07ac DB       		.byte	0xdb
 2670 07ad 24010000 		.4byte	0x124
 2671 07b1 1C       		.uleb128 0x1c
 2672 07b2 C4030000 		.4byte	.LASF124
 2673 07b6 02       		.byte	0x2
 2674 07b7 DB       		.byte	0xdb
 2675 07b8 24010000 		.4byte	0x124
 2676 07bc 1D       		.uleb128 0x1d
 2677 07bd 2F080000 		.4byte	.LASF125
 2678 07c1 02       		.byte	0x2
 2679 07c2 DB       		.byte	0xdb
 2680 07c3 24010000 		.4byte	0x124
 2681 07c7 02       		.byte	0x2
 2682 07c8 91       		.byte	0x91
 2683 07c9 54       		.sleb128 -44
 2684 07ca 1D       		.uleb128 0x1d
 2685 07cb 4C0A0000 		.4byte	.LASF126
 2686 07cf 02       		.byte	0x2
 2687 07d0 DC       		.byte	0xdc
 2688 07d1 24010000 		.4byte	0x124
 2689 07d5 02       		.byte	0x2
 2690 07d6 91       		.byte	0x91
 2691 07d7 53       		.sleb128 -45
 2692 07d8 1D       		.uleb128 0x1d
 2693 07d9 3C090000 		.4byte	.LASF127
 2694 07dd 02       		.byte	0x2
 2695 07de DD       		.byte	0xdd
 2696 07df 3D010000 		.4byte	0x13d
 2697 07e3 02       		.byte	0x2
 2698 07e4 91       		.byte	0x91
 2699 07e5 46       		.sleb128 -58
 2700 07e6 1D       		.uleb128 0x1d
 2701 07e7 7B030000 		.4byte	.LASF128
 2702 07eb 02       		.byte	0x2
ARM GAS  /tmp/cc67MAoN.s 			page 89


 2703 07ec DD       		.byte	0xdd
 2704 07ed 3D010000 		.4byte	0x13d
 2705 07f1 02       		.byte	0x2
 2706 07f2 91       		.byte	0x91
 2707 07f3 44       		.sleb128 -60
 2708 07f4 1D       		.uleb128 0x1d
 2709 07f5 20010000 		.4byte	.LASF129
 2710 07f9 02       		.byte	0x2
 2711 07fa DE       		.byte	0xde
 2712 07fb 3D010000 		.4byte	0x13d
 2713 07ff 02       		.byte	0x2
 2714 0800 91       		.byte	0x91
 2715 0801 42       		.sleb128 -62
 2716 0802 1D       		.uleb128 0x1d
 2717 0803 C9040000 		.4byte	.LASF130
 2718 0807 02       		.byte	0x2
 2719 0808 DE       		.byte	0xde
 2720 0809 3D010000 		.4byte	0x13d
 2721 080d 02       		.byte	0x2
 2722 080e 91       		.byte	0x91
 2723 080f 40       		.sleb128 -64
 2724 0810 1D       		.uleb128 0x1d
 2725 0811 DE080000 		.4byte	.LASF131
 2726 0815 02       		.byte	0x2
 2727 0816 DF       		.byte	0xdf
 2728 0817 3D010000 		.4byte	0x13d
 2729 081b 02       		.byte	0x2
 2730 081c 91       		.byte	0x91
 2731 081d 48       		.sleb128 -56
 2732 081e 1D       		.uleb128 0x1d
 2733 081f C2010000 		.4byte	.LASF132
 2734 0823 02       		.byte	0x2
 2735 0824 E0       		.byte	0xe0
 2736 0825 DE080000 		.4byte	0x8de
 2737 0829 02       		.byte	0x2
 2738 082a 91       		.byte	0x91
 2739 082b 4C       		.sleb128 -52
 2740 082c 1D       		.uleb128 0x1d
 2741 082d 15000000 		.4byte	.LASF133
 2742 0831 02       		.byte	0x2
 2743 0832 E1       		.byte	0xe1
 2744 0833 7D010000 		.4byte	0x17d
 2745 0837 02       		.byte	0x2
 2746 0838 91       		.byte	0x91
 2747 0839 68       		.sleb128 -24
 2748 083a 1D       		.uleb128 0x1d
 2749 083b 98010000 		.4byte	.LASF134
 2750 083f 02       		.byte	0x2
 2751 0840 E3       		.byte	0xe3
 2752 0841 24010000 		.4byte	0x124
 2753 0845 02       		.byte	0x2
 2754 0846 91       		.byte	0x91
 2755 0847 67       		.sleb128 -25
 2756 0848 1D       		.uleb128 0x1d
 2757 0849 92080000 		.4byte	.LASF135
 2758 084d 02       		.byte	0x2
 2759 084e E3       		.byte	0xe3
ARM GAS  /tmp/cc67MAoN.s 			page 90


 2760 084f 24010000 		.4byte	0x124
 2761 0853 02       		.byte	0x2
 2762 0854 91       		.byte	0x91
 2763 0855 66       		.sleb128 -26
 2764 0856 1D       		.uleb128 0x1d
 2765 0857 290A0000 		.4byte	.LASF136
 2766 085b 02       		.byte	0x2
 2767 085c E4       		.byte	0xe4
 2768 085d 7D010000 		.4byte	0x17d
 2769 0861 02       		.byte	0x2
 2770 0862 91       		.byte	0x91
 2771 0863 60       		.sleb128 -32
 2772 0864 1D       		.uleb128 0x1d
 2773 0865 EB060000 		.4byte	.LASF137
 2774 0869 02       		.byte	0x2
 2775 086a E4       		.byte	0xe4
 2776 086b 7D010000 		.4byte	0x17d
 2777 086f 02       		.byte	0x2
 2778 0870 91       		.byte	0x91
 2779 0871 5C       		.sleb128 -36
 2780 0872 1D       		.uleb128 0x1d
 2781 0873 43020000 		.4byte	.LASF138
 2782 0877 02       		.byte	0x2
 2783 0878 E4       		.byte	0xe4
 2784 0879 7D010000 		.4byte	0x17d
 2785 087d 02       		.byte	0x2
 2786 087e 91       		.byte	0x91
 2787 087f 58       		.sleb128 -40
 2788 0880 1D       		.uleb128 0x1d
 2789 0881 B9030000 		.4byte	.LASF139
 2790 0885 02       		.byte	0x2
 2791 0886 E5       		.byte	0xe5
 2792 0887 24010000 		.4byte	0x124
 2793 088b 02       		.byte	0x2
 2794 088c 91       		.byte	0x91
 2795 088d 57       		.sleb128 -41
 2796 088e 1D       		.uleb128 0x1d
 2797 088f 62000000 		.4byte	.LASF140
 2798 0893 02       		.byte	0x2
 2799 0894 E8       		.byte	0xe8
 2800 0895 1D060000 		.4byte	0x61d
 2801 0899 02       		.byte	0x2
 2802 089a 91       		.byte	0x91
 2803 089b 56       		.sleb128 -42
 2804 089c 1D       		.uleb128 0x1d
 2805 089d B00A0000 		.4byte	.LASF141
 2806 08a1 02       		.byte	0x2
 2807 08a2 E9       		.byte	0xe9
 2808 08a3 24010000 		.4byte	0x124
 2809 08a7 02       		.byte	0x2
 2810 08a8 91       		.byte	0x91
 2811 08a9 55       		.sleb128 -43
 2812 08aa 1D       		.uleb128 0x1d
 2813 08ab E4060000 		.4byte	.LASF142
 2814 08af 02       		.byte	0x2
 2815 08b0 EA       		.byte	0xea
 2816 08b1 24010000 		.4byte	0x124
ARM GAS  /tmp/cc67MAoN.s 			page 91


 2817 08b5 02       		.byte	0x2
 2818 08b6 91       		.byte	0x91
 2819 08b7 4B       		.sleb128 -53
 2820 08b8 1C       		.uleb128 0x1c
 2821 08b9 ED010000 		.4byte	.LASF143
 2822 08bd 02       		.byte	0x2
 2823 08be EC       		.byte	0xec
 2824 08bf 3D010000 		.4byte	0x13d
 2825 08c3 1C       		.uleb128 0x1c
 2826 08c4 A2080000 		.4byte	.LASF144
 2827 08c8 02       		.byte	0x2
 2828 08c9 EF       		.byte	0xef
 2829 08ca 24010000 		.4byte	0x124
 2830 08ce 1D       		.uleb128 0x1d
 2831 08cf 00000000 		.4byte	.LASF145
 2832 08d3 02       		.byte	0x2
 2833 08d4 F5       		.byte	0xf5
 2834 08d5 E5080000 		.4byte	0x8e5
 2835 08d9 03       		.byte	0x3
 2836 08da 91       		.byte	0x91
 2837 08db 987F     		.sleb128 -104
 2838 08dd 00       		.byte	0
 2839 08de 05       		.uleb128 0x5
 2840 08df 04       		.byte	0x4
 2841 08e0 04       		.byte	0x4
 2842 08e1 E7010000 		.4byte	.LASF146
 2843 08e5 0C       		.uleb128 0xc
 2844 08e6 B3050000 		.4byte	0x5b3
 2845 08ea F5080000 		.4byte	0x8f5
 2846 08ee 0D       		.uleb128 0xd
 2847 08ef 5D020000 		.4byte	0x25d
 2848 08f3 27       		.byte	0x27
 2849 08f4 00       		.byte	0
 2850 08f5 1E       		.uleb128 0x1e
 2851 08f6 01       		.byte	0x1
 2852 08f7 CD080000 		.4byte	.LASF208
 2853 08fb 02       		.byte	0x2
 2854 08fc 4204     		.2byte	0x442
 2855 08fe 01       		.byte	0x1
 2856 08ff 00000000 		.4byte	.LFB21
 2857 0903 B0000000 		.4byte	.LFE21
 2858 0907 85000000 		.4byte	.LLST3
 2859 090b 01       		.byte	0x1
 2860 090c B5090000 		.4byte	0x9b5
 2861 0910 17       		.uleb128 0x17
 2862 0911 76000000 		.4byte	.LASF147
 2863 0915 02       		.byte	0x2
 2864 0916 4204     		.2byte	0x442
 2865 0918 B5090000 		.4byte	0x9b5
 2866 091c 03       		.byte	0x3
 2867 091d 91       		.byte	0x91
 2868 091e A47F     		.sleb128 -92
 2869 0920 1F       		.uleb128 0x1f
 2870 0921 643100   		.ascii	"d1\000"
 2871 0924 02       		.byte	0x2
 2872 0925 4404     		.2byte	0x444
 2873 0927 9A010000 		.4byte	0x19a
ARM GAS  /tmp/cc67MAoN.s 			page 92


 2874 092b 02       		.byte	0x2
 2875 092c 91       		.byte	0x91
 2876 092d 74       		.sleb128 -12
 2877 092e 1F       		.uleb128 0x1f
 2878 092f 643200   		.ascii	"d2\000"
 2879 0932 02       		.byte	0x2
 2880 0933 4404     		.2byte	0x444
 2881 0935 9A010000 		.4byte	0x19a
 2882 0939 02       		.byte	0x2
 2883 093a 91       		.byte	0x91
 2884 093b 70       		.sleb128 -16
 2885 093c 1F       		.uleb128 0x1f
 2886 093d 643300   		.ascii	"d3\000"
 2887 0940 02       		.byte	0x2
 2888 0941 4404     		.2byte	0x444
 2889 0943 9A010000 		.4byte	0x19a
 2890 0947 02       		.byte	0x2
 2891 0948 91       		.byte	0x91
 2892 0949 6C       		.sleb128 -20
 2893 094a 1F       		.uleb128 0x1f
 2894 094b 643400   		.ascii	"d4\000"
 2895 094e 02       		.byte	0x2
 2896 094f 4404     		.2byte	0x444
 2897 0951 9A010000 		.4byte	0x19a
 2898 0955 02       		.byte	0x2
 2899 0956 91       		.byte	0x91
 2900 0957 68       		.sleb128 -24
 2901 0958 1F       		.uleb128 0x1f
 2902 0959 643500   		.ascii	"d5\000"
 2903 095c 02       		.byte	0x2
 2904 095d 4404     		.2byte	0x444
 2905 095f 9A010000 		.4byte	0x19a
 2906 0963 02       		.byte	0x2
 2907 0964 91       		.byte	0x91
 2908 0965 64       		.sleb128 -28
 2909 0966 1F       		.uleb128 0x1f
 2910 0967 643600   		.ascii	"d6\000"
 2911 096a 02       		.byte	0x2
 2912 096b 4404     		.2byte	0x444
 2913 096d 9A010000 		.4byte	0x19a
 2914 0971 02       		.byte	0x2
 2915 0972 91       		.byte	0x91
 2916 0973 60       		.sleb128 -32
 2917 0974 20       		.uleb128 0x20
 2918 0975 13050000 		.4byte	.LASF148
 2919 0979 02       		.byte	0x2
 2920 097a 4504     		.2byte	0x445
 2921 097c E5080000 		.4byte	0x8e5
 2922 0980 03       		.byte	0x3
 2923 0981 91       		.byte	0x91
 2924 0982 B87F     		.sleb128 -72
 2925 0984 20       		.uleb128 0x20
 2926 0985 90070000 		.4byte	.LASF149
 2927 0989 02       		.byte	0x2
 2928 098a 4604     		.2byte	0x446
 2929 098c BB090000 		.4byte	0x9bb
 2930 0990 03       		.byte	0x3
ARM GAS  /tmp/cc67MAoN.s 			page 93


 2931 0991 91       		.byte	0x91
 2932 0992 B47F     		.sleb128 -76
 2933 0994 20       		.uleb128 0x20
 2934 0995 69030000 		.4byte	.LASF150
 2935 0999 02       		.byte	0x2
 2936 099a 4704     		.2byte	0x447
 2937 099c BB090000 		.4byte	0x9bb
 2938 09a0 03       		.byte	0x3
 2939 09a1 91       		.byte	0x91
 2940 09a2 B07F     		.sleb128 -80
 2941 09a4 20       		.uleb128 0x20
 2942 09a5 4C070000 		.4byte	.LASF151
 2943 09a9 02       		.byte	0x2
 2944 09aa 4804     		.2byte	0x448
 2945 09ac BB090000 		.4byte	0x9bb
 2946 09b0 03       		.byte	0x3
 2947 09b1 91       		.byte	0x91
 2948 09b2 AC7F     		.sleb128 -84
 2949 09b4 00       		.byte	0
 2950 09b5 21       		.uleb128 0x21
 2951 09b6 04       		.byte	0x4
 2952 09b7 84010000 		.4byte	0x184
 2953 09bb 0E       		.uleb128 0xe
 2954 09bc DE080000 		.4byte	0x8de
 2955 09c0 22       		.uleb128 0x22
 2956 09c1 01       		.byte	0x1
 2957 09c2 65080000 		.4byte	.LASF209
 2958 09c6 02       		.byte	0x2
 2959 09c7 BD04     		.2byte	0x4bd
 2960 09c9 01       		.byte	0x1
 2961 09ca 00000000 		.4byte	.LFB22
 2962 09ce 64010000 		.4byte	.LFE22
 2963 09d2 B2000000 		.4byte	.LLST4
 2964 09d6 01       		.byte	0x1
 2965 09d7 0C       		.uleb128 0xc
 2966 09d8 24010000 		.4byte	0x124
 2967 09dc E7090000 		.4byte	0x9e7
 2968 09e0 0D       		.uleb128 0xd
 2969 09e1 5D020000 		.4byte	0x25d
 2970 09e5 FF       		.byte	0xff
 2971 09e6 00       		.byte	0
 2972 09e7 23       		.uleb128 0x23
 2973 09e8 39010000 		.4byte	.LASF152
 2974 09ec 02       		.byte	0x2
 2975 09ed 3B       		.byte	0x3b
 2976 09ee F9090000 		.4byte	0x9f9
 2977 09f2 01       		.byte	0x1
 2978 09f3 05       		.byte	0x5
 2979 09f4 03       		.byte	0x3
 2980 09f5 00000000 		.4byte	tx2buff
 2981 09f9 0E       		.uleb128 0xe
 2982 09fa D7090000 		.4byte	0x9d7
 2983 09fe 23       		.uleb128 0x23
 2984 09ff EF000000 		.4byte	.LASF153
 2985 0a03 02       		.byte	0x2
 2986 0a04 3C       		.byte	0x3c
 2987 0a05 100A0000 		.4byte	0xa10
ARM GAS  /tmp/cc67MAoN.s 			page 94


 2988 0a09 01       		.byte	0x1
 2989 0a0a 05       		.byte	0x5
 2990 0a0b 03       		.byte	0x3
 2991 0a0c 00000000 		.4byte	rx2buff
 2992 0a10 0E       		.uleb128 0xe
 2993 0a11 D7090000 		.4byte	0x9d7
 2994 0a15 23       		.uleb128 0x23
 2995 0a16 1B040000 		.4byte	.LASF154
 2996 0a1a 02       		.byte	0x2
 2997 0a1b 3E       		.byte	0x3e
 2998 0a1c 270A0000 		.4byte	0xa27
 2999 0a20 01       		.byte	0x1
 3000 0a21 05       		.byte	0x5
 3001 0a22 03       		.byte	0x3
 3002 0a23 00000000 		.4byte	tx1buff
 3003 0a27 0E       		.uleb128 0xe
 3004 0a28 D7090000 		.4byte	0x9d7
 3005 0a2c 23       		.uleb128 0x23
 3006 0a2d 02010000 		.4byte	.LASF155
 3007 0a31 02       		.byte	0x2
 3008 0a32 3F       		.byte	0x3f
 3009 0a33 3E0A0000 		.4byte	0xa3e
 3010 0a37 01       		.byte	0x1
 3011 0a38 05       		.byte	0x5
 3012 0a39 03       		.byte	0x3
 3013 0a3a 00000000 		.4byte	rx1buff
 3014 0a3e 0E       		.uleb128 0xe
 3015 0a3f D7090000 		.4byte	0x9d7
 3016 0a43 23       		.uleb128 0x23
 3017 0a44 3E030000 		.4byte	.LASF156
 3018 0a48 02       		.byte	0x2
 3019 0a49 49       		.byte	0x49
 3020 0a4a 550A0000 		.4byte	0xa55
 3021 0a4e 01       		.byte	0x1
 3022 0a4f 05       		.byte	0x5
 3023 0a50 03       		.byte	0x3
 3024 0a51 00000000 		.4byte	show_select_timer
 3025 0a55 0E       		.uleb128 0xe
 3026 0a56 3D010000 		.4byte	0x13d
 3027 0a5a 23       		.uleb128 0x23
 3028 0a5b 57050000 		.4byte	.LASF157
 3029 0a5f 02       		.byte	0x2
 3030 0a60 4A       		.byte	0x4a
 3031 0a61 6C0A0000 		.4byte	0xa6c
 3032 0a65 01       		.byte	0x1
 3033 0a66 05       		.byte	0x5
 3034 0a67 03       		.byte	0x3
 3035 0a68 00000000 		.4byte	switches_timer
 3036 0a6c 0E       		.uleb128 0xe
 3037 0a6d 24010000 		.4byte	0x124
 3038 0a71 23       		.uleb128 0x23
 3039 0a72 26000000 		.4byte	.LASF158
 3040 0a76 02       		.byte	0x2
 3041 0a77 4B       		.byte	0x4b
 3042 0a78 6C0A0000 		.4byte	0xa6c
 3043 0a7c 01       		.byte	0x1
 3044 0a7d 05       		.byte	0x5
ARM GAS  /tmp/cc67MAoN.s 			page 95


 3045 0a7e 03       		.byte	0x3
 3046 0a7f 00000000 		.4byte	acswitch_timer
 3047 0a83 23       		.uleb128 0x23
 3048 0a84 B8050000 		.4byte	.LASF159
 3049 0a88 02       		.byte	0x2
 3050 0a89 4D       		.byte	0x4d
 3051 0a8a 550A0000 		.4byte	0xa55
 3052 0a8e 01       		.byte	0x1
 3053 0a8f 05       		.byte	0x5
 3054 0a90 03       		.byte	0x3
 3055 0a91 00000000 		.4byte	scroll1_timer
 3056 0a95 23       		.uleb128 0x23
 3057 0a96 7D0A0000 		.4byte	.LASF160
 3058 0a9a 02       		.byte	0x2
 3059 0a9b 4E       		.byte	0x4e
 3060 0a9c 550A0000 		.4byte	0xa55
 3061 0aa0 01       		.byte	0x1
 3062 0aa1 05       		.byte	0x5
 3063 0aa2 03       		.byte	0x3
 3064 0aa3 00000000 		.4byte	scroll2_timer
 3065 0aa7 23       		.uleb128 0x23
 3066 0aa8 040A0000 		.4byte	.LASF161
 3067 0aac 02       		.byte	0x2
 3068 0aad 50       		.byte	0x50
 3069 0aae 550A0000 		.4byte	0xa55
 3070 0ab2 01       		.byte	0x1
 3071 0ab3 05       		.byte	0x5
 3072 0ab4 03       		.byte	0x3
 3073 0ab5 00000000 		.4byte	standalone_timer
 3074 0ab9 23       		.uleb128 0x23
 3075 0aba A7070000 		.4byte	.LASF162
 3076 0abe 02       		.byte	0x2
 3077 0abf 51       		.byte	0x51
 3078 0ac0 550A0000 		.4byte	0xa55
 3079 0ac4 01       		.byte	0x1
 3080 0ac5 05       		.byte	0x5
 3081 0ac6 03       		.byte	0x3
 3082 0ac7 00000000 		.4byte	standalone_enable_menu_timer
 3083 0acb 23       		.uleb128 0x23
 3084 0acc 4E010000 		.4byte	.LASF163
 3085 0ad0 02       		.byte	0x2
 3086 0ad1 53       		.byte	0x53
 3087 0ad2 6C0A0000 		.4byte	0xa6c
 3088 0ad6 01       		.byte	0x1
 3089 0ad7 05       		.byte	0x5
 3090 0ad8 03       		.byte	0x3
 3091 0ad9 00000000 		.4byte	grouped_master_timeout_timer
 3092 0add 23       		.uleb128 0x23
 3093 0ade 8B030000 		.4byte	.LASF164
 3094 0ae2 02       		.byte	0x2
 3095 0ae3 54       		.byte	0x54
 3096 0ae4 550A0000 		.4byte	0xa55
 3097 0ae8 01       		.byte	0x1
 3098 0ae9 05       		.byte	0x5
 3099 0aea 03       		.byte	0x3
 3100 0aeb 00000000 		.4byte	take_temp_sample
 3101 0aef 23       		.uleb128 0x23
ARM GAS  /tmp/cc67MAoN.s 			page 96


 3102 0af0 7B080000 		.4byte	.LASF165
 3103 0af4 02       		.byte	0x2
 3104 0af5 55       		.byte	0x55
 3105 0af6 6C0A0000 		.4byte	0xa6c
 3106 0afa 01       		.byte	0x1
 3107 0afb 05       		.byte	0x5
 3108 0afc 03       		.byte	0x3
 3109 0afd 00000000 		.4byte	timer_wifi_bright
 3110 0b01 23       		.uleb128 0x23
 3111 0b02 BD040000 		.4byte	.LASF166
 3112 0b06 02       		.byte	0x2
 3113 0b07 58       		.byte	0x58
 3114 0b08 550A0000 		.4byte	0xa55
 3115 0b0c 01       		.byte	0x1
 3116 0b0d 05       		.byte	0x5
 3117 0b0e 03       		.byte	0x3
 3118 0b0f 00000000 		.4byte	timer_relay
 3119 0b13 23       		.uleb128 0x23
 3120 0b14 C2020000 		.4byte	.LASF167
 3121 0b18 02       		.byte	0x2
 3122 0b19 5A       		.byte	0x5a
 3123 0b1a 550A0000 		.4byte	0xa55
 3124 0b1e 01       		.byte	0x1
 3125 0b1f 05       		.byte	0x5
 3126 0b20 03       		.byte	0x3
 3127 0b21 00000000 		.4byte	tt_take_photo_sample
 3128 0b25 23       		.uleb128 0x23
 3129 0b26 35040000 		.4byte	.LASF168
 3130 0b2a 02       		.byte	0x2
 3131 0b2b 5B       		.byte	0x5b
 3132 0b2c 550A0000 		.4byte	0xa55
 3133 0b30 01       		.byte	0x1
 3134 0b31 05       		.byte	0x5
 3135 0b32 03       		.byte	0x3
 3136 0b33 00000000 		.4byte	tt_relay_on_off
 3137 0b37 23       		.uleb128 0x23
 3138 0b38 9A040000 		.4byte	.LASF169
 3139 0b3c 02       		.byte	0x2
 3140 0b3d 5F       		.byte	0x5f
 3141 0b3e 24010000 		.4byte	0x124
 3142 0b42 01       		.byte	0x1
 3143 0b43 05       		.byte	0x5
 3144 0b44 03       		.byte	0x3
 3145 0b45 00000000 		.4byte	saved_mode
 3146 0b49 24       		.uleb128 0x24
 3147 0b4a 733100   		.ascii	"s1\000"
 3148 0b4d 02       		.byte	0x2
 3149 0b4e 63       		.byte	0x63
 3150 0b4f 3D010000 		.4byte	0x13d
 3151 0b53 01       		.byte	0x1
 3152 0b54 05       		.byte	0x5
 3153 0b55 03       		.byte	0x3
 3154 0b56 00000000 		.4byte	s1
 3155 0b5a 24       		.uleb128 0x24
 3156 0b5b 733200   		.ascii	"s2\000"
 3157 0b5e 02       		.byte	0x2
 3158 0b5f 64       		.byte	0x64
ARM GAS  /tmp/cc67MAoN.s 			page 97


 3159 0b60 3D010000 		.4byte	0x13d
 3160 0b64 01       		.byte	0x1
 3161 0b65 05       		.byte	0x5
 3162 0b66 03       		.byte	0x3
 3163 0b67 00000000 		.4byte	s2
 3164 0b6b 24       		.uleb128 0x24
 3165 0b6c 73616300 		.ascii	"sac\000"
 3166 0b70 02       		.byte	0x2
 3167 0b71 65       		.byte	0x65
 3168 0b72 3D010000 		.4byte	0x13d
 3169 0b76 01       		.byte	0x1
 3170 0b77 05       		.byte	0x5
 3171 0b78 03       		.byte	0x3
 3172 0b79 00000000 		.4byte	sac
 3173 0b7d 23       		.uleb128 0x23
 3174 0b7e 5D080000 		.4byte	.LASF170
 3175 0b82 02       		.byte	0x2
 3176 0b83 66       		.byte	0x66
 3177 0b84 24010000 		.4byte	0x124
 3178 0b88 01       		.byte	0x1
 3179 0b89 05       		.byte	0x5
 3180 0b8a 03       		.byte	0x3
 3181 0b8b 00000000 		.4byte	sac_aux
 3182 0b8f 23       		.uleb128 0x23
 3183 0b90 C4070000 		.4byte	.LASF171
 3184 0b94 02       		.byte	0x2
 3185 0b95 6A       		.byte	0x6a
 3186 0b96 A10B0000 		.4byte	0xba1
 3187 0b9a 01       		.byte	0x1
 3188 0b9b 05       		.byte	0x5
 3189 0b9c 03       		.byte	0x3
 3190 0b9d 00000000 		.4byte	adc_ch
 3191 0ba1 0E       		.uleb128 0xe
 3192 0ba2 BA050000 		.4byte	0x5ba
 3193 0ba6 23       		.uleb128 0x23
 3194 0ba7 5C0A0000 		.4byte	.LASF172
 3195 0bab 02       		.byte	0x2
 3196 0bac 6B       		.byte	0x6b
 3197 0bad 6C0A0000 		.4byte	0xa6c
 3198 0bb1 01       		.byte	0x1
 3199 0bb2 05       		.byte	0x5
 3200 0bb3 03       		.byte	0x3
 3201 0bb4 00000000 		.4byte	seq_ready
 3202 0bb8 23       		.uleb128 0x23
 3203 0bb9 E5040000 		.4byte	.LASF173
 3204 0bbd 02       		.byte	0x2
 3205 0bbe 6C       		.byte	0x6c
 3206 0bbf 3D010000 		.4byte	0x13d
 3207 0bc3 01       		.byte	0x1
 3208 0bc4 05       		.byte	0x5
 3209 0bc5 03       		.byte	0x3
 3210 0bc6 00000000 		.4byte	zero_current
 3211 0bca 23       		.uleb128 0x23
 3212 0bcb 7C040000 		.4byte	.LASF174
 3213 0bcf 02       		.byte	0x2
 3214 0bd0 70       		.byte	0x70
 3215 0bd1 6C0A0000 		.4byte	0xa6c
ARM GAS  /tmp/cc67MAoN.s 			page 98


 3216 0bd5 01       		.byte	0x1
 3217 0bd6 05       		.byte	0x5
 3218 0bd7 03       		.byte	0x3
 3219 0bd8 00000000 		.4byte	usart1_mini_timeout
 3220 0bdc 23       		.uleb128 0x23
 3221 0bdd 85020000 		.4byte	.LASF175
 3222 0be1 02       		.byte	0x2
 3223 0be2 71       		.byte	0x71
 3224 0be3 6C0A0000 		.4byte	0xa6c
 3225 0be7 01       		.byte	0x1
 3226 0be8 05       		.byte	0x5
 3227 0be9 03       		.byte	0x3
 3228 0bea 00000000 		.4byte	usart1_pckt_ready
 3229 0bee 23       		.uleb128 0x23
 3230 0bef 21030000 		.4byte	.LASF176
 3231 0bf3 02       		.byte	0x2
 3232 0bf4 72       		.byte	0x72
 3233 0bf5 6C0A0000 		.4byte	0xa6c
 3234 0bf9 01       		.byte	0x1
 3235 0bfa 05       		.byte	0x5
 3236 0bfb 03       		.byte	0x3
 3237 0bfc 00000000 		.4byte	usart1_have_data
 3238 0c00 23       		.uleb128 0x23
 3239 0c01 21020000 		.4byte	.LASF177
 3240 0c05 02       		.byte	0x2
 3241 0c06 73       		.byte	0x73
 3242 0c07 24010000 		.4byte	0x124
 3243 0c0b 01       		.byte	0x1
 3244 0c0c 05       		.byte	0x5
 3245 0c0d 03       		.byte	0x3
 3246 0c0e 00000000 		.4byte	usart1_pckt_bytes
 3247 0c12 23       		.uleb128 0x23
 3248 0c13 FB030000 		.4byte	.LASF178
 3249 0c17 02       		.byte	0x2
 3250 0c18 8A       		.byte	0x8a
 3251 0c19 6C0A0000 		.4byte	0xa6c
 3252 0c1d 01       		.byte	0x1
 3253 0c1e 05       		.byte	0x5
 3254 0c1f 03       		.byte	0x3
 3255 0c20 00000000 		.4byte	usart2_mini_timeout
 3256 0c24 23       		.uleb128 0x23
 3257 0c25 27010000 		.4byte	.LASF179
 3258 0c29 02       		.byte	0x2
 3259 0c2a 8B       		.byte	0x8b
 3260 0c2b 6C0A0000 		.4byte	0xa6c
 3261 0c2f 01       		.byte	0x1
 3262 0c30 05       		.byte	0x5
 3263 0c31 03       		.byte	0x3
 3264 0c32 00000000 		.4byte	usart2_pckt_ready
 3265 0c36 23       		.uleb128 0x23
 3266 0c37 A8010000 		.4byte	.LASF180
 3267 0c3b 02       		.byte	0x2
 3268 0c3c 8C       		.byte	0x8c
 3269 0c3d 6C0A0000 		.4byte	0xa6c
 3270 0c41 01       		.byte	0x1
 3271 0c42 05       		.byte	0x5
 3272 0c43 03       		.byte	0x3
ARM GAS  /tmp/cc67MAoN.s 			page 99


 3273 0c44 00000000 		.4byte	usart2_have_data
 3274 0c48 23       		.uleb128 0x23
 3275 0c49 23040000 		.4byte	.LASF181
 3276 0c4d 02       		.byte	0x2
 3277 0c4e 8D       		.byte	0x8d
 3278 0c4f 24010000 		.4byte	0x124
 3279 0c53 01       		.byte	0x1
 3280 0c54 05       		.byte	0x5
 3281 0c55 03       		.byte	0x3
 3282 0c56 00000000 		.4byte	usart2_pckt_bytes
 3283 0c5a 0C       		.uleb128 0xc
 3284 0c5b B3050000 		.4byte	0x5b3
 3285 0c5f 650C0000 		.4byte	0xc65
 3286 0c63 25       		.uleb128 0x25
 3287 0c64 00       		.byte	0
 3288 0c65 26       		.uleb128 0x26
 3289 0c66 90050000 		.4byte	.LASF182
 3290 0c6a 02       		.byte	0x2
 3291 0c6b 8F       		.byte	0x8f
 3292 0c6c 720C0000 		.4byte	0xc72
 3293 0c70 01       		.byte	0x1
 3294 0c71 01       		.byte	0x1
 3295 0c72 0E       		.uleb128 0xe
 3296 0c73 5A0C0000 		.4byte	0xc5a
 3297 0c77 23       		.uleb128 0x23
 3298 0c78 35000000 		.4byte	.LASF183
 3299 0c7c 02       		.byte	0x2
 3300 0c7d 92       		.byte	0x92
 3301 0c7e A5060000 		.4byte	0x6a5
 3302 0c82 01       		.byte	0x1
 3303 0c83 05       		.byte	0x5
 3304 0c84 03       		.byte	0x3
 3305 0c85 00000000 		.4byte	param_struct
 3306 0c89 23       		.uleb128 0x23
 3307 0c8a D6010000 		.4byte	.LASF184
 3308 0c8e 02       		.byte	0x2
 3309 0c8f 98       		.byte	0x98
 3310 0c90 7D010000 		.4byte	0x17d
 3311 0c94 01       		.byte	0x1
 3312 0c95 05       		.byte	0x5
 3313 0c96 03       		.byte	0x3
 3314 0c97 00000000 		.4byte	power_2secs_acum
 3315 0c9b 23       		.uleb128 0x23
 3316 0c9c 45050000 		.4byte	.LASF185
 3317 0ca0 02       		.byte	0x2
 3318 0ca1 99       		.byte	0x99
 3319 0ca2 24010000 		.4byte	0x124
 3320 0ca6 01       		.byte	0x1
 3321 0ca7 05       		.byte	0x5
 3322 0ca8 03       		.byte	0x3
 3323 0ca9 00000000 		.4byte	power_2secs_index
 3324 0cad 23       		.uleb128 0x23
 3325 0cae 02030000 		.4byte	.LASF186
 3326 0cb2 02       		.byte	0x2
 3327 0cb3 9A       		.byte	0x9a
 3328 0cb4 3D010000 		.4byte	0x13d
 3329 0cb8 01       		.byte	0x1
ARM GAS  /tmp/cc67MAoN.s 			page 100


 3330 0cb9 05       		.byte	0x5
 3331 0cba 03       		.byte	0x3
 3332 0cbb 00000000 		.4byte	power_minutes
 3333 0cbf 23       		.uleb128 0x23
 3334 0cc0 330A0000 		.4byte	.LASF187
 3335 0cc4 02       		.byte	0x2
 3336 0cc5 9B       		.byte	0x9b
 3337 0cc6 24010000 		.4byte	0x124
 3338 0cca 01       		.byte	0x1
 3339 0ccb 05       		.byte	0x5
 3340 0ccc 03       		.byte	0x3
 3341 0ccd 00000000 		.4byte	power_minutes_index
 3342 0cd1 23       		.uleb128 0x23
 3343 0cd2 0F040000 		.4byte	.LASF188
 3344 0cd6 02       		.byte	0x2
 3345 0cd7 9C       		.byte	0x9c
 3346 0cd8 3D010000 		.4byte	0x13d
 3347 0cdc 01       		.byte	0x1
 3348 0cdd 05       		.byte	0x5
 3349 0cde 03       		.byte	0x3
 3350 0cdf 00000000 		.4byte	power_hours
 3351 0ce3 0C       		.uleb128 0xc
 3352 0ce4 B3050000 		.4byte	0x5b3
 3353 0ce8 F30C0000 		.4byte	0xcf3
 3354 0cec 0D       		.uleb128 0xd
 3355 0ced 5D020000 		.4byte	0x25d
 3356 0cf1 13       		.byte	0x13
 3357 0cf2 00       		.byte	0
 3358 0cf3 23       		.uleb128 0x23
 3359 0cf4 A4050000 		.4byte	.LASF189
 3360 0cf8 02       		.byte	0x2
 3361 0cf9 9F       		.byte	0x9f
 3362 0cfa E30C0000 		.4byte	0xce3
 3363 0cfe 01       		.byte	0x1
 3364 0cff 05       		.byte	0x5
 3365 0d00 03       		.byte	0x3
 3366 0d01 00000000 		.4byte	gsmNUM
 3367 0d05 0C       		.uleb128 0xc
 3368 0d06 B3050000 		.4byte	0x5b3
 3369 0d0a 150D0000 		.4byte	0xd15
 3370 0d0e 0D       		.uleb128 0xd
 3371 0d0f 5D020000 		.4byte	0x25d
 3372 0d13 B3       		.byte	0xb3
 3373 0d14 00       		.byte	0
 3374 0d15 23       		.uleb128 0x23
 3375 0d16 AD060000 		.4byte	.LASF190
 3376 0d1a 02       		.byte	0x2
 3377 0d1b A0       		.byte	0xa0
 3378 0d1c 050D0000 		.4byte	0xd05
 3379 0d20 01       		.byte	0x1
 3380 0d21 05       		.byte	0x5
 3381 0d22 03       		.byte	0x3
 3382 0d23 00000000 		.4byte	gsmMSG
 3383 0d27 23       		.uleb128 0x23
 3384 0d28 75060000 		.4byte	.LASF191
 3385 0d2c 02       		.byte	0x2
 3386 0d2d A8       		.byte	0xa8
ARM GAS  /tmp/cc67MAoN.s 			page 101


 3387 0d2e 550A0000 		.4byte	0xa55
 3388 0d32 01       		.byte	0x1
 3389 0d33 05       		.byte	0x5
 3390 0d34 03       		.byte	0x3
 3391 0d35 00000000 		.4byte	wait_ms_var
 3392 0d39 23       		.uleb128 0x23
 3393 0d3a 8B0A0000 		.4byte	.LASF192
 3394 0d3e 02       		.byte	0x2
 3395 0d3f A9       		.byte	0xa9
 3396 0d40 550A0000 		.4byte	0xa55
 3397 0d44 01       		.byte	0x1
 3398 0d45 05       		.byte	0x5
 3399 0d46 03       		.byte	0x3
 3400 0d47 00000000 		.4byte	timer_standby
 3401 0d4b 23       		.uleb128 0x23
 3402 0d4c D4000000 		.4byte	.LASF193
 3403 0d50 02       		.byte	0x2
 3404 0d51 AA       		.byte	0xaa
 3405 0d52 550A0000 		.4byte	0xa55
 3406 0d56 01       		.byte	0x1
 3407 0d57 05       		.byte	0x5
 3408 0d58 03       		.byte	0x3
 3409 0d59 00000000 		.4byte	tcp_kalive_timer
 3410 0d5d 23       		.uleb128 0x23
 3411 0d5e A5040000 		.4byte	.LASF194
 3412 0d62 02       		.byte	0x2
 3413 0d63 AC       		.byte	0xac
 3414 0d64 6C0A0000 		.4byte	0xa6c
 3415 0d68 01       		.byte	0x1
 3416 0d69 05       		.byte	0x5
 3417 0d6a 03       		.byte	0x3
 3418 0d6b 00000000 		.4byte	filter_timer
 3419 0d6f 23       		.uleb128 0x23
 3420 0d70 45040000 		.4byte	.LASF195
 3421 0d74 02       		.byte	0x2
 3422 0d75 B1       		.byte	0xb1
 3423 0d76 550A0000 		.4byte	0xa55
 3424 0d7a 01       		.byte	0x1
 3425 0d7b 05       		.byte	0x5
 3426 0d7c 03       		.byte	0x3
 3427 0d7d 00000000 		.4byte	secs
 3428 0d81 23       		.uleb128 0x23
 3429 0d82 B4060000 		.4byte	.LASF196
 3430 0d86 02       		.byte	0x2
 3431 0d87 B2       		.byte	0xb2
 3432 0d88 6C0A0000 		.4byte	0xa6c
 3433 0d8c 01       		.byte	0x1
 3434 0d8d 05       		.byte	0x5
 3435 0d8e 03       		.byte	0x3
 3436 0d8f 00000000 		.4byte	hours
 3437 0d93 23       		.uleb128 0x23
 3438 0d94 70020000 		.4byte	.LASF197
 3439 0d98 02       		.byte	0x2
 3440 0d99 B3       		.byte	0xb3
 3441 0d9a 6C0A0000 		.4byte	0xa6c
 3442 0d9e 01       		.byte	0x1
 3443 0d9f 05       		.byte	0x5
ARM GAS  /tmp/cc67MAoN.s 			page 102


 3444 0da0 03       		.byte	0x3
 3445 0da1 00000000 		.4byte	minutes
 3446 0da5 0C       		.uleb128 0xc
 3447 0da6 3D010000 		.4byte	0x13d
 3448 0daa B50D0000 		.4byte	0xdb5
 3449 0dae 0D       		.uleb128 0xd
 3450 0daf 5D020000 		.4byte	0x25d
 3451 0db3 09       		.byte	0x9
 3452 0db4 00       		.byte	0
 3453 0db5 23       		.uleb128 0x23
 3454 0db6 0A010000 		.4byte	.LASF198
 3455 0dba 02       		.byte	0x2
 3456 0dbb B7       		.byte	0xb7
 3457 0dbc A50D0000 		.4byte	0xda5
 3458 0dc0 01       		.byte	0x1
 3459 0dc1 05       		.byte	0x5
 3460 0dc2 03       		.byte	0x3
 3461 0dc3 00000000 		.4byte	power_vect
 3462 0dc7 0C       		.uleb128 0xc
 3463 0dc8 3D010000 		.4byte	0x13d
 3464 0dcc D70D0000 		.4byte	0xdd7
 3465 0dd0 0D       		.uleb128 0xd
 3466 0dd1 5D020000 		.4byte	0x25d
 3467 0dd5 10       		.byte	0x10
 3468 0dd6 00       		.byte	0
 3469 0dd7 23       		.uleb128 0x23
 3470 0dd8 660A0000 		.4byte	.LASF199
 3471 0ddc 02       		.byte	0x2
 3472 0ddd C5       		.byte	0xc5
 3473 0dde C70D0000 		.4byte	0xdc7
 3474 0de2 01       		.byte	0x1
 3475 0de3 05       		.byte	0x5
 3476 0de4 03       		.byte	0x3
 3477 0de5 00000000 		.4byte	vtemp
 3478 0de9 23       		.uleb128 0x23
 3479 0dea A0000000 		.4byte	.LASF200
 3480 0dee 02       		.byte	0x2
 3481 0def C6       		.byte	0xc6
 3482 0df0 C70D0000 		.4byte	0xdc7
 3483 0df4 01       		.byte	0x1
 3484 0df5 05       		.byte	0x5
 3485 0df6 03       		.byte	0x3
 3486 0df7 00000000 		.4byte	vpote
 3487 0dfb 00       		.byte	0
 3488              		.section	.debug_abbrev,"",%progbits
 3489              	.Ldebug_abbrev0:
 3490 0000 01       		.uleb128 0x1
 3491 0001 11       		.uleb128 0x11
 3492 0002 01       		.byte	0x1
 3493 0003 25       		.uleb128 0x25
 3494 0004 0E       		.uleb128 0xe
 3495 0005 13       		.uleb128 0x13
 3496 0006 0B       		.uleb128 0xb
 3497 0007 03       		.uleb128 0x3
 3498 0008 0E       		.uleb128 0xe
 3499 0009 1B       		.uleb128 0x1b
 3500 000a 0E       		.uleb128 0xe
ARM GAS  /tmp/cc67MAoN.s 			page 103


 3501 000b 55       		.uleb128 0x55
 3502 000c 06       		.uleb128 0x6
 3503 000d 11       		.uleb128 0x11
 3504 000e 01       		.uleb128 0x1
 3505 000f 52       		.uleb128 0x52
 3506 0010 01       		.uleb128 0x1
 3507 0011 10       		.uleb128 0x10
 3508 0012 06       		.uleb128 0x6
 3509 0013 00       		.byte	0
 3510 0014 00       		.byte	0
 3511 0015 02       		.uleb128 0x2
 3512 0016 04       		.uleb128 0x4
 3513 0017 01       		.byte	0x1
 3514 0018 03       		.uleb128 0x3
 3515 0019 0E       		.uleb128 0xe
 3516 001a 0B       		.uleb128 0xb
 3517 001b 0B       		.uleb128 0xb
 3518 001c 49       		.uleb128 0x49
 3519 001d 13       		.uleb128 0x13
 3520 001e 3A       		.uleb128 0x3a
 3521 001f 0B       		.uleb128 0xb
 3522 0020 3B       		.uleb128 0x3b
 3523 0021 0B       		.uleb128 0xb
 3524 0022 01       		.uleb128 0x1
 3525 0023 13       		.uleb128 0x13
 3526 0024 00       		.byte	0
 3527 0025 00       		.byte	0
 3528 0026 03       		.uleb128 0x3
 3529 0027 28       		.uleb128 0x28
 3530 0028 00       		.byte	0
 3531 0029 03       		.uleb128 0x3
 3532 002a 0E       		.uleb128 0xe
 3533 002b 1C       		.uleb128 0x1c
 3534 002c 0D       		.uleb128 0xd
 3535 002d 00       		.byte	0
 3536 002e 00       		.byte	0
 3537 002f 04       		.uleb128 0x4
 3538 0030 28       		.uleb128 0x28
 3539 0031 00       		.byte	0
 3540 0032 03       		.uleb128 0x3
 3541 0033 0E       		.uleb128 0xe
 3542 0034 1C       		.uleb128 0x1c
 3543 0035 0B       		.uleb128 0xb
 3544 0036 00       		.byte	0
 3545 0037 00       		.byte	0
 3546 0038 05       		.uleb128 0x5
 3547 0039 24       		.uleb128 0x24
 3548 003a 00       		.byte	0
 3549 003b 0B       		.uleb128 0xb
 3550 003c 0B       		.uleb128 0xb
 3551 003d 3E       		.uleb128 0x3e
 3552 003e 0B       		.uleb128 0xb
 3553 003f 03       		.uleb128 0x3
 3554 0040 0E       		.uleb128 0xe
 3555 0041 00       		.byte	0
 3556 0042 00       		.byte	0
 3557 0043 06       		.uleb128 0x6
ARM GAS  /tmp/cc67MAoN.s 			page 104


 3558 0044 16       		.uleb128 0x16
 3559 0045 00       		.byte	0
 3560 0046 03       		.uleb128 0x3
 3561 0047 0E       		.uleb128 0xe
 3562 0048 3A       		.uleb128 0x3a
 3563 0049 0B       		.uleb128 0xb
 3564 004a 3B       		.uleb128 0x3b
 3565 004b 05       		.uleb128 0x5
 3566 004c 49       		.uleb128 0x49
 3567 004d 13       		.uleb128 0x13
 3568 004e 00       		.byte	0
 3569 004f 00       		.byte	0
 3570 0050 07       		.uleb128 0x7
 3571 0051 16       		.uleb128 0x16
 3572 0052 00       		.byte	0
 3573 0053 03       		.uleb128 0x3
 3574 0054 0E       		.uleb128 0xe
 3575 0055 3A       		.uleb128 0x3a
 3576 0056 0B       		.uleb128 0xb
 3577 0057 3B       		.uleb128 0x3b
 3578 0058 0B       		.uleb128 0xb
 3579 0059 49       		.uleb128 0x49
 3580 005a 13       		.uleb128 0x13
 3581 005b 00       		.byte	0
 3582 005c 00       		.byte	0
 3583 005d 08       		.uleb128 0x8
 3584 005e 24       		.uleb128 0x24
 3585 005f 00       		.byte	0
 3586 0060 0B       		.uleb128 0xb
 3587 0061 0B       		.uleb128 0xb
 3588 0062 3E       		.uleb128 0x3e
 3589 0063 0B       		.uleb128 0xb
 3590 0064 03       		.uleb128 0x3
 3591 0065 08       		.uleb128 0x8
 3592 0066 00       		.byte	0
 3593 0067 00       		.byte	0
 3594 0068 09       		.uleb128 0x9
 3595 0069 13       		.uleb128 0x13
 3596 006a 01       		.byte	0x1
 3597 006b 0B       		.uleb128 0xb
 3598 006c 05       		.uleb128 0x5
 3599 006d 3A       		.uleb128 0x3a
 3600 006e 0B       		.uleb128 0xb
 3601 006f 3B       		.uleb128 0x3b
 3602 0070 0B       		.uleb128 0xb
 3603 0071 01       		.uleb128 0x1
 3604 0072 13       		.uleb128 0x13
 3605 0073 00       		.byte	0
 3606 0074 00       		.byte	0
 3607 0075 0A       		.uleb128 0xa
 3608 0076 0D       		.uleb128 0xd
 3609 0077 00       		.byte	0
 3610 0078 03       		.uleb128 0x3
 3611 0079 0E       		.uleb128 0xe
 3612 007a 3A       		.uleb128 0x3a
 3613 007b 0B       		.uleb128 0xb
 3614 007c 3B       		.uleb128 0x3b
ARM GAS  /tmp/cc67MAoN.s 			page 105


 3615 007d 0B       		.uleb128 0xb
 3616 007e 49       		.uleb128 0x49
 3617 007f 13       		.uleb128 0x13
 3618 0080 38       		.uleb128 0x38
 3619 0081 0A       		.uleb128 0xa
 3620 0082 00       		.byte	0
 3621 0083 00       		.byte	0
 3622 0084 0B       		.uleb128 0xb
 3623 0085 0D       		.uleb128 0xd
 3624 0086 00       		.byte	0
 3625 0087 03       		.uleb128 0x3
 3626 0088 08       		.uleb128 0x8
 3627 0089 3A       		.uleb128 0x3a
 3628 008a 0B       		.uleb128 0xb
 3629 008b 3B       		.uleb128 0x3b
 3630 008c 0B       		.uleb128 0xb
 3631 008d 49       		.uleb128 0x49
 3632 008e 13       		.uleb128 0x13
 3633 008f 38       		.uleb128 0x38
 3634 0090 0A       		.uleb128 0xa
 3635 0091 00       		.byte	0
 3636 0092 00       		.byte	0
 3637 0093 0C       		.uleb128 0xc
 3638 0094 01       		.uleb128 0x1
 3639 0095 01       		.byte	0x1
 3640 0096 49       		.uleb128 0x49
 3641 0097 13       		.uleb128 0x13
 3642 0098 01       		.uleb128 0x1
 3643 0099 13       		.uleb128 0x13
 3644 009a 00       		.byte	0
 3645 009b 00       		.byte	0
 3646 009c 0D       		.uleb128 0xd
 3647 009d 21       		.uleb128 0x21
 3648 009e 00       		.byte	0
 3649 009f 49       		.uleb128 0x49
 3650 00a0 13       		.uleb128 0x13
 3651 00a1 2F       		.uleb128 0x2f
 3652 00a2 0B       		.uleb128 0xb
 3653 00a3 00       		.byte	0
 3654 00a4 00       		.byte	0
 3655 00a5 0E       		.uleb128 0xe
 3656 00a6 35       		.uleb128 0x35
 3657 00a7 00       		.byte	0
 3658 00a8 49       		.uleb128 0x49
 3659 00a9 13       		.uleb128 0x13
 3660 00aa 00       		.byte	0
 3661 00ab 00       		.byte	0
 3662 00ac 0F       		.uleb128 0xf
 3663 00ad 13       		.uleb128 0x13
 3664 00ae 01       		.byte	0x1
 3665 00af 0B       		.uleb128 0xb
 3666 00b0 0B       		.uleb128 0xb
 3667 00b1 3A       		.uleb128 0x3a
 3668 00b2 0B       		.uleb128 0xb
 3669 00b3 3B       		.uleb128 0x3b
 3670 00b4 0B       		.uleb128 0xb
 3671 00b5 01       		.uleb128 0x1
ARM GAS  /tmp/cc67MAoN.s 			page 106


 3672 00b6 13       		.uleb128 0x13
 3673 00b7 00       		.byte	0
 3674 00b8 00       		.byte	0
 3675 00b9 10       		.uleb128 0x10
 3676 00ba 26       		.uleb128 0x26
 3677 00bb 00       		.byte	0
 3678 00bc 49       		.uleb128 0x49
 3679 00bd 13       		.uleb128 0x13
 3680 00be 00       		.byte	0
 3681 00bf 00       		.byte	0
 3682 00c0 11       		.uleb128 0x11
 3683 00c1 0D       		.uleb128 0xd
 3684 00c2 00       		.byte	0
 3685 00c3 03       		.uleb128 0x3
 3686 00c4 08       		.uleb128 0x8
 3687 00c5 3A       		.uleb128 0x3a
 3688 00c6 0B       		.uleb128 0xb
 3689 00c7 3B       		.uleb128 0x3b
 3690 00c8 05       		.uleb128 0x5
 3691 00c9 49       		.uleb128 0x49
 3692 00ca 13       		.uleb128 0x13
 3693 00cb 38       		.uleb128 0x38
 3694 00cc 0A       		.uleb128 0xa
 3695 00cd 00       		.byte	0
 3696 00ce 00       		.byte	0
 3697 00cf 12       		.uleb128 0x12
 3698 00d0 0D       		.uleb128 0xd
 3699 00d1 00       		.byte	0
 3700 00d2 03       		.uleb128 0x3
 3701 00d3 0E       		.uleb128 0xe
 3702 00d4 3A       		.uleb128 0x3a
 3703 00d5 0B       		.uleb128 0xb
 3704 00d6 3B       		.uleb128 0x3b
 3705 00d7 05       		.uleb128 0x5
 3706 00d8 49       		.uleb128 0x49
 3707 00d9 13       		.uleb128 0x13
 3708 00da 38       		.uleb128 0x38
 3709 00db 0A       		.uleb128 0xa
 3710 00dc 00       		.byte	0
 3711 00dd 00       		.byte	0
 3712 00de 13       		.uleb128 0x13
 3713 00df 13       		.uleb128 0x13
 3714 00e0 01       		.byte	0x1
 3715 00e1 0B       		.uleb128 0xb
 3716 00e2 0B       		.uleb128 0xb
 3717 00e3 3A       		.uleb128 0x3a
 3718 00e4 0B       		.uleb128 0xb
 3719 00e5 3B       		.uleb128 0x3b
 3720 00e6 05       		.uleb128 0x5
 3721 00e7 01       		.uleb128 0x1
 3722 00e8 13       		.uleb128 0x13
 3723 00e9 00       		.byte	0
 3724 00ea 00       		.byte	0
 3725 00eb 14       		.uleb128 0x14
 3726 00ec 04       		.uleb128 0x4
 3727 00ed 01       		.byte	0x1
 3728 00ee 0B       		.uleb128 0xb
ARM GAS  /tmp/cc67MAoN.s 			page 107


 3729 00ef 0B       		.uleb128 0xb
 3730 00f0 49       		.uleb128 0x49
 3731 00f1 13       		.uleb128 0x13
 3732 00f2 3A       		.uleb128 0x3a
 3733 00f3 0B       		.uleb128 0xb
 3734 00f4 3B       		.uleb128 0x3b
 3735 00f5 0B       		.uleb128 0xb
 3736 00f6 01       		.uleb128 0x1
 3737 00f7 13       		.uleb128 0x13
 3738 00f8 00       		.byte	0
 3739 00f9 00       		.byte	0
 3740 00fa 15       		.uleb128 0x15
 3741 00fb 13       		.uleb128 0x13
 3742 00fc 01       		.byte	0x1
 3743 00fd 03       		.uleb128 0x3
 3744 00fe 0E       		.uleb128 0xe
 3745 00ff 0B       		.uleb128 0xb
 3746 0100 0B       		.uleb128 0xb
 3747 0101 3A       		.uleb128 0x3a
 3748 0102 0B       		.uleb128 0xb
 3749 0103 3B       		.uleb128 0x3b
 3750 0104 0B       		.uleb128 0xb
 3751 0105 01       		.uleb128 0x1
 3752 0106 13       		.uleb128 0x13
 3753 0107 00       		.byte	0
 3754 0108 00       		.byte	0
 3755 0109 16       		.uleb128 0x16
 3756 010a 2E       		.uleb128 0x2e
 3757 010b 01       		.byte	0x1
 3758 010c 03       		.uleb128 0x3
 3759 010d 0E       		.uleb128 0xe
 3760 010e 3A       		.uleb128 0x3a
 3761 010f 0B       		.uleb128 0xb
 3762 0110 3B       		.uleb128 0x3b
 3763 0111 05       		.uleb128 0x5
 3764 0112 27       		.uleb128 0x27
 3765 0113 0C       		.uleb128 0xc
 3766 0114 11       		.uleb128 0x11
 3767 0115 01       		.uleb128 0x1
 3768 0116 12       		.uleb128 0x12
 3769 0117 01       		.uleb128 0x1
 3770 0118 40       		.uleb128 0x40
 3771 0119 06       		.uleb128 0x6
 3772 011a 9742     		.uleb128 0x2117
 3773 011c 0C       		.uleb128 0xc
 3774 011d 01       		.uleb128 0x1
 3775 011e 13       		.uleb128 0x13
 3776 011f 00       		.byte	0
 3777 0120 00       		.byte	0
 3778 0121 17       		.uleb128 0x17
 3779 0122 05       		.uleb128 0x5
 3780 0123 00       		.byte	0
 3781 0124 03       		.uleb128 0x3
 3782 0125 0E       		.uleb128 0xe
 3783 0126 3A       		.uleb128 0x3a
 3784 0127 0B       		.uleb128 0xb
 3785 0128 3B       		.uleb128 0x3b
ARM GAS  /tmp/cc67MAoN.s 			page 108


 3786 0129 05       		.uleb128 0x5
 3787 012a 49       		.uleb128 0x49
 3788 012b 13       		.uleb128 0x13
 3789 012c 02       		.uleb128 0x2
 3790 012d 0A       		.uleb128 0xa
 3791 012e 00       		.byte	0
 3792 012f 00       		.byte	0
 3793 0130 18       		.uleb128 0x18
 3794 0131 2E       		.uleb128 0x2e
 3795 0132 01       		.byte	0x1
 3796 0133 03       		.uleb128 0x3
 3797 0134 0E       		.uleb128 0xe
 3798 0135 3A       		.uleb128 0x3a
 3799 0136 0B       		.uleb128 0xb
 3800 0137 3B       		.uleb128 0x3b
 3801 0138 05       		.uleb128 0x5
 3802 0139 27       		.uleb128 0x27
 3803 013a 0C       		.uleb128 0xc
 3804 013b 49       		.uleb128 0x49
 3805 013c 13       		.uleb128 0x13
 3806 013d 11       		.uleb128 0x11
 3807 013e 01       		.uleb128 0x1
 3808 013f 12       		.uleb128 0x12
 3809 0140 01       		.uleb128 0x1
 3810 0141 40       		.uleb128 0x40
 3811 0142 06       		.uleb128 0x6
 3812 0143 9642     		.uleb128 0x2116
 3813 0145 0C       		.uleb128 0xc
 3814 0146 01       		.uleb128 0x1
 3815 0147 13       		.uleb128 0x13
 3816 0148 00       		.byte	0
 3817 0149 00       		.byte	0
 3818 014a 19       		.uleb128 0x19
 3819 014b 2E       		.uleb128 0x2e
 3820 014c 01       		.byte	0x1
 3821 014d 3F       		.uleb128 0x3f
 3822 014e 0C       		.uleb128 0xc
 3823 014f 03       		.uleb128 0x3
 3824 0150 0E       		.uleb128 0xe
 3825 0151 3A       		.uleb128 0x3a
 3826 0152 0B       		.uleb128 0xb
 3827 0153 3B       		.uleb128 0x3b
 3828 0154 0B       		.uleb128 0xb
 3829 0155 27       		.uleb128 0x27
 3830 0156 0C       		.uleb128 0xc
 3831 0157 49       		.uleb128 0x49
 3832 0158 13       		.uleb128 0x13
 3833 0159 11       		.uleb128 0x11
 3834 015a 01       		.uleb128 0x1
 3835 015b 12       		.uleb128 0x12
 3836 015c 01       		.uleb128 0x1
 3837 015d 40       		.uleb128 0x40
 3838 015e 06       		.uleb128 0x6
 3839 015f 9642     		.uleb128 0x2116
 3840 0161 0C       		.uleb128 0xc
 3841 0162 01       		.uleb128 0x1
 3842 0163 13       		.uleb128 0x13
ARM GAS  /tmp/cc67MAoN.s 			page 109


 3843 0164 00       		.byte	0
 3844 0165 00       		.byte	0
 3845 0166 1A       		.uleb128 0x1a
 3846 0167 34       		.uleb128 0x34
 3847 0168 00       		.byte	0
 3848 0169 03       		.uleb128 0x3
 3849 016a 08       		.uleb128 0x8
 3850 016b 3A       		.uleb128 0x3a
 3851 016c 0B       		.uleb128 0xb
 3852 016d 3B       		.uleb128 0x3b
 3853 016e 0B       		.uleb128 0xb
 3854 016f 49       		.uleb128 0x49
 3855 0170 13       		.uleb128 0x13
 3856 0171 02       		.uleb128 0x2
 3857 0172 0A       		.uleb128 0xa
 3858 0173 00       		.byte	0
 3859 0174 00       		.byte	0
 3860 0175 1B       		.uleb128 0x1b
 3861 0176 34       		.uleb128 0x34
 3862 0177 00       		.byte	0
 3863 0178 03       		.uleb128 0x3
 3864 0179 08       		.uleb128 0x8
 3865 017a 3A       		.uleb128 0x3a
 3866 017b 0B       		.uleb128 0xb
 3867 017c 3B       		.uleb128 0x3b
 3868 017d 0B       		.uleb128 0xb
 3869 017e 49       		.uleb128 0x49
 3870 017f 13       		.uleb128 0x13
 3871 0180 00       		.byte	0
 3872 0181 00       		.byte	0
 3873 0182 1C       		.uleb128 0x1c
 3874 0183 34       		.uleb128 0x34
 3875 0184 00       		.byte	0
 3876 0185 03       		.uleb128 0x3
 3877 0186 0E       		.uleb128 0xe
 3878 0187 3A       		.uleb128 0x3a
 3879 0188 0B       		.uleb128 0xb
 3880 0189 3B       		.uleb128 0x3b
 3881 018a 0B       		.uleb128 0xb
 3882 018b 49       		.uleb128 0x49
 3883 018c 13       		.uleb128 0x13
 3884 018d 00       		.byte	0
 3885 018e 00       		.byte	0
 3886 018f 1D       		.uleb128 0x1d
 3887 0190 34       		.uleb128 0x34
 3888 0191 00       		.byte	0
 3889 0192 03       		.uleb128 0x3
 3890 0193 0E       		.uleb128 0xe
 3891 0194 3A       		.uleb128 0x3a
 3892 0195 0B       		.uleb128 0xb
 3893 0196 3B       		.uleb128 0x3b
 3894 0197 0B       		.uleb128 0xb
 3895 0198 49       		.uleb128 0x49
 3896 0199 13       		.uleb128 0x13
 3897 019a 02       		.uleb128 0x2
 3898 019b 0A       		.uleb128 0xa
 3899 019c 00       		.byte	0
ARM GAS  /tmp/cc67MAoN.s 			page 110


 3900 019d 00       		.byte	0
 3901 019e 1E       		.uleb128 0x1e
 3902 019f 2E       		.uleb128 0x2e
 3903 01a0 01       		.byte	0x1
 3904 01a1 3F       		.uleb128 0x3f
 3905 01a2 0C       		.uleb128 0xc
 3906 01a3 03       		.uleb128 0x3
 3907 01a4 0E       		.uleb128 0xe
 3908 01a5 3A       		.uleb128 0x3a
 3909 01a6 0B       		.uleb128 0xb
 3910 01a7 3B       		.uleb128 0x3b
 3911 01a8 05       		.uleb128 0x5
 3912 01a9 27       		.uleb128 0x27
 3913 01aa 0C       		.uleb128 0xc
 3914 01ab 11       		.uleb128 0x11
 3915 01ac 01       		.uleb128 0x1
 3916 01ad 12       		.uleb128 0x12
 3917 01ae 01       		.uleb128 0x1
 3918 01af 40       		.uleb128 0x40
 3919 01b0 06       		.uleb128 0x6
 3920 01b1 9642     		.uleb128 0x2116
 3921 01b3 0C       		.uleb128 0xc
 3922 01b4 01       		.uleb128 0x1
 3923 01b5 13       		.uleb128 0x13
 3924 01b6 00       		.byte	0
 3925 01b7 00       		.byte	0
 3926 01b8 1F       		.uleb128 0x1f
 3927 01b9 34       		.uleb128 0x34
 3928 01ba 00       		.byte	0
 3929 01bb 03       		.uleb128 0x3
 3930 01bc 08       		.uleb128 0x8
 3931 01bd 3A       		.uleb128 0x3a
 3932 01be 0B       		.uleb128 0xb
 3933 01bf 3B       		.uleb128 0x3b
 3934 01c0 05       		.uleb128 0x5
 3935 01c1 49       		.uleb128 0x49
 3936 01c2 13       		.uleb128 0x13
 3937 01c3 02       		.uleb128 0x2
 3938 01c4 0A       		.uleb128 0xa
 3939 01c5 00       		.byte	0
 3940 01c6 00       		.byte	0
 3941 01c7 20       		.uleb128 0x20
 3942 01c8 34       		.uleb128 0x34
 3943 01c9 00       		.byte	0
 3944 01ca 03       		.uleb128 0x3
 3945 01cb 0E       		.uleb128 0xe
 3946 01cc 3A       		.uleb128 0x3a
 3947 01cd 0B       		.uleb128 0xb
 3948 01ce 3B       		.uleb128 0x3b
 3949 01cf 05       		.uleb128 0x5
 3950 01d0 49       		.uleb128 0x49
 3951 01d1 13       		.uleb128 0x13
 3952 01d2 02       		.uleb128 0x2
 3953 01d3 0A       		.uleb128 0xa
 3954 01d4 00       		.byte	0
 3955 01d5 00       		.byte	0
 3956 01d6 21       		.uleb128 0x21
ARM GAS  /tmp/cc67MAoN.s 			page 111


 3957 01d7 0F       		.uleb128 0xf
 3958 01d8 00       		.byte	0
 3959 01d9 0B       		.uleb128 0xb
 3960 01da 0B       		.uleb128 0xb
 3961 01db 49       		.uleb128 0x49
 3962 01dc 13       		.uleb128 0x13
 3963 01dd 00       		.byte	0
 3964 01de 00       		.byte	0
 3965 01df 22       		.uleb128 0x22
 3966 01e0 2E       		.uleb128 0x2e
 3967 01e1 00       		.byte	0
 3968 01e2 3F       		.uleb128 0x3f
 3969 01e3 0C       		.uleb128 0xc
 3970 01e4 03       		.uleb128 0x3
 3971 01e5 0E       		.uleb128 0xe
 3972 01e6 3A       		.uleb128 0x3a
 3973 01e7 0B       		.uleb128 0xb
 3974 01e8 3B       		.uleb128 0x3b
 3975 01e9 05       		.uleb128 0x5
 3976 01ea 27       		.uleb128 0x27
 3977 01eb 0C       		.uleb128 0xc
 3978 01ec 11       		.uleb128 0x11
 3979 01ed 01       		.uleb128 0x1
 3980 01ee 12       		.uleb128 0x12
 3981 01ef 01       		.uleb128 0x1
 3982 01f0 40       		.uleb128 0x40
 3983 01f1 06       		.uleb128 0x6
 3984 01f2 9642     		.uleb128 0x2116
 3985 01f4 0C       		.uleb128 0xc
 3986 01f5 00       		.byte	0
 3987 01f6 00       		.byte	0
 3988 01f7 23       		.uleb128 0x23
 3989 01f8 34       		.uleb128 0x34
 3990 01f9 00       		.byte	0
 3991 01fa 03       		.uleb128 0x3
 3992 01fb 0E       		.uleb128 0xe
 3993 01fc 3A       		.uleb128 0x3a
 3994 01fd 0B       		.uleb128 0xb
 3995 01fe 3B       		.uleb128 0x3b
 3996 01ff 0B       		.uleb128 0xb
 3997 0200 49       		.uleb128 0x49
 3998 0201 13       		.uleb128 0x13
 3999 0202 3F       		.uleb128 0x3f
 4000 0203 0C       		.uleb128 0xc
 4001 0204 02       		.uleb128 0x2
 4002 0205 0A       		.uleb128 0xa
 4003 0206 00       		.byte	0
 4004 0207 00       		.byte	0
 4005 0208 24       		.uleb128 0x24
 4006 0209 34       		.uleb128 0x34
 4007 020a 00       		.byte	0
 4008 020b 03       		.uleb128 0x3
 4009 020c 08       		.uleb128 0x8
 4010 020d 3A       		.uleb128 0x3a
 4011 020e 0B       		.uleb128 0xb
 4012 020f 3B       		.uleb128 0x3b
 4013 0210 0B       		.uleb128 0xb
ARM GAS  /tmp/cc67MAoN.s 			page 112


 4014 0211 49       		.uleb128 0x49
 4015 0212 13       		.uleb128 0x13
 4016 0213 3F       		.uleb128 0x3f
 4017 0214 0C       		.uleb128 0xc
 4018 0215 02       		.uleb128 0x2
 4019 0216 0A       		.uleb128 0xa
 4020 0217 00       		.byte	0
 4021 0218 00       		.byte	0
 4022 0219 25       		.uleb128 0x25
 4023 021a 21       		.uleb128 0x21
 4024 021b 00       		.byte	0
 4025 021c 00       		.byte	0
 4026 021d 00       		.byte	0
 4027 021e 26       		.uleb128 0x26
 4028 021f 34       		.uleb128 0x34
 4029 0220 00       		.byte	0
 4030 0221 03       		.uleb128 0x3
 4031 0222 0E       		.uleb128 0xe
 4032 0223 3A       		.uleb128 0x3a
 4033 0224 0B       		.uleb128 0xb
 4034 0225 3B       		.uleb128 0x3b
 4035 0226 0B       		.uleb128 0xb
 4036 0227 49       		.uleb128 0x49
 4037 0228 13       		.uleb128 0x13
 4038 0229 3F       		.uleb128 0x3f
 4039 022a 0C       		.uleb128 0xc
 4040 022b 3C       		.uleb128 0x3c
 4041 022c 0C       		.uleb128 0xc
 4042 022d 00       		.byte	0
 4043 022e 00       		.byte	0
 4044 022f 00       		.byte	0
 4045              		.section	.debug_loc,"",%progbits
 4046              	.Ldebug_loc0:
 4047              	.LLST0:
 4048 0000 00000000 		.4byte	.LFB16
 4049 0004 02000000 		.4byte	.LCFI0
 4050 0008 0200     		.2byte	0x2
 4051 000a 7D       		.byte	0x7d
 4052 000b 00       		.sleb128 0
 4053 000c 02000000 		.4byte	.LCFI0
 4054 0010 04000000 		.4byte	.LCFI1
 4055 0014 0200     		.2byte	0x2
 4056 0016 7D       		.byte	0x7d
 4057 0017 0C       		.sleb128 12
 4058 0018 04000000 		.4byte	.LCFI1
 4059 001c EC000000 		.4byte	.LFE16
 4060 0020 0200     		.2byte	0x2
 4061 0022 7D       		.byte	0x7d
 4062 0023 18       		.sleb128 24
 4063 0024 00000000 		.4byte	0
 4064 0028 00000000 		.4byte	0
 4065              	.LLST1:
 4066 002c 00000000 		.4byte	.LFB18
 4067 0030 02000000 		.4byte	.LCFI2
 4068 0034 0200     		.2byte	0x2
 4069 0036 7D       		.byte	0x7d
 4070 0037 00       		.sleb128 0
ARM GAS  /tmp/cc67MAoN.s 			page 113


 4071 0038 02000000 		.4byte	.LCFI2
 4072 003c 04000000 		.4byte	.LCFI3
 4073 0040 0200     		.2byte	0x2
 4074 0042 7D       		.byte	0x7d
 4075 0043 04       		.sleb128 4
 4076 0044 04000000 		.4byte	.LCFI3
 4077 0048 48000000 		.4byte	.LFE18
 4078 004c 0200     		.2byte	0x2
 4079 004e 7D       		.byte	0x7d
 4080 004f 10       		.sleb128 16
 4081 0050 00000000 		.4byte	0
 4082 0054 00000000 		.4byte	0
 4083              	.LLST2:
 4084 0058 00000000 		.4byte	.LFB20
 4085 005c 02000000 		.4byte	.LCFI4
 4086 0060 0200     		.2byte	0x2
 4087 0062 7D       		.byte	0x7d
 4088 0063 00       		.sleb128 0
 4089 0064 02000000 		.4byte	.LCFI4
 4090 0068 04000000 		.4byte	.LCFI5
 4091 006c 0200     		.2byte	0x2
 4092 006e 7D       		.byte	0x7d
 4093 006f 0C       		.sleb128 12
 4094 0070 04000000 		.4byte	.LCFI5
 4095 0074 7C050000 		.4byte	.LFE20
 4096 0078 0300     		.2byte	0x3
 4097 007a 7D       		.byte	0x7d
 4098 007b F000     		.sleb128 112
 4099 007d 00000000 		.4byte	0
 4100 0081 00000000 		.4byte	0
 4101              	.LLST3:
 4102 0085 00000000 		.4byte	.LFB21
 4103 0089 02000000 		.4byte	.LCFI6
 4104 008d 0200     		.2byte	0x2
 4105 008f 7D       		.byte	0x7d
 4106 0090 00       		.sleb128 0
 4107 0091 02000000 		.4byte	.LCFI6
 4108 0095 04000000 		.4byte	.LCFI7
 4109 0099 0200     		.2byte	0x2
 4110 009b 7D       		.byte	0x7d
 4111 009c 04       		.sleb128 4
 4112 009d 04000000 		.4byte	.LCFI7
 4113 00a1 B0000000 		.4byte	.LFE21
 4114 00a5 0300     		.2byte	0x3
 4115 00a7 7D       		.byte	0x7d
 4116 00a8 E000     		.sleb128 96
 4117 00aa 00000000 		.4byte	0
 4118 00ae 00000000 		.4byte	0
 4119              	.LLST4:
 4120 00b2 00000000 		.4byte	.LFB22
 4121 00b6 02000000 		.4byte	.LCFI8
 4122 00ba 0200     		.2byte	0x2
 4123 00bc 7D       		.byte	0x7d
 4124 00bd 00       		.sleb128 0
 4125 00be 02000000 		.4byte	.LCFI8
 4126 00c2 64010000 		.4byte	.LFE22
 4127 00c6 0200     		.2byte	0x2
ARM GAS  /tmp/cc67MAoN.s 			page 114


 4128 00c8 7D       		.byte	0x7d
 4129 00c9 08       		.sleb128 8
 4130 00ca 00000000 		.4byte	0
 4131 00ce 00000000 		.4byte	0
 4132              		.section	.debug_aranges,"",%progbits
 4133 0000 3C000000 		.4byte	0x3c
 4134 0004 0200     		.2byte	0x2
 4135 0006 00000000 		.4byte	.Ldebug_info0
 4136 000a 04       		.byte	0x4
 4137 000b 00       		.byte	0
 4138 000c 0000     		.2byte	0
 4139 000e 0000     		.2byte	0
 4140 0010 00000000 		.4byte	.LFB16
 4141 0014 EC000000 		.4byte	.LFE16-.LFB16
 4142 0018 00000000 		.4byte	.LFB18
 4143 001c 48000000 		.4byte	.LFE18-.LFB18
 4144 0020 00000000 		.4byte	.LFB20
 4145 0024 7C050000 		.4byte	.LFE20-.LFB20
 4146 0028 00000000 		.4byte	.LFB21
 4147 002c B0000000 		.4byte	.LFE21-.LFB21
 4148 0030 00000000 		.4byte	.LFB22
 4149 0034 64010000 		.4byte	.LFE22-.LFB22
 4150 0038 00000000 		.4byte	0
 4151 003c 00000000 		.4byte	0
 4152              		.section	.debug_ranges,"",%progbits
 4153              	.Ldebug_ranges0:
 4154 0000 00000000 		.4byte	.LFB16
 4155 0004 EC000000 		.4byte	.LFE16
 4156 0008 00000000 		.4byte	.LFB18
 4157 000c 48000000 		.4byte	.LFE18
 4158 0010 00000000 		.4byte	.LFB20
 4159 0014 7C050000 		.4byte	.LFE20
 4160 0018 00000000 		.4byte	.LFB21
 4161 001c B0000000 		.4byte	.LFE21
 4162 0020 00000000 		.4byte	.LFB22
 4163 0024 64010000 		.4byte	.LFE22
 4164 0028 00000000 		.4byte	0
 4165 002c 00000000 		.4byte	0
 4166              		.section	.debug_line,"",%progbits
 4167              	.Ldebug_line0:
 4168 0000 A3020000 		.section	.debug_str,"MS",%progbits,1
 4168      02003701 
 4168      00000201 
 4168      FB0E0D00 
 4168      01010101 
 4169              	.LASF145:
 4170 0000 735F6C63 		.ascii	"s_lcd\000"
 4170      6400
 4171              	.LASF114:
 4172 0006 67736D5F 		.ascii	"gsm_state_idle\000"
 4172      73746174 
 4172      655F6964 
 4172      6C6500
 4173              	.LASF133:
 4174 0015 7A65726F 		.ascii	"zero_current_loc\000"
 4174      5F637572 
 4174      72656E74 
ARM GAS  /tmp/cc67MAoN.s 			page 115


 4174      5F6C6F63 
 4174      00
 4175              	.LASF158:
 4176 0026 61637377 		.ascii	"acswitch_timer\000"
 4176      69746368 
 4176      5F74696D 
 4176      657200
 4177              	.LASF183:
 4178 0035 70617261 		.ascii	"param_struct\000"
 4178      6D5F7374 
 4178      72756374 
 4178      00
 4179              	.LASF12:
 4180 0042 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4180      345F3135 
 4180      5F495251 
 4180      6E00
 4181              	.LASF83:
 4182 0050 42535252 		.ascii	"BSRR\000"
 4182      00
 4183              	.LASF11:
 4184 0055 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4184      325F335F 
 4184      4952516E 
 4184      00
 4185              	.LASF140:
 4186 0062 6D61696E 		.ascii	"main_state\000"
 4186      5F737461 
 4186      746500
 4187              	.LASF2:
 4188 006d 5356435F 		.ascii	"SVC_IRQn\000"
 4188      4952516E 
 4188      00
 4189              	.LASF147:
 4190 0076 62756666 		.ascii	"buffer\000"
 4190      657200
 4191              	.LASF110:
 4192 007d 67736D5F 		.ascii	"gsm_state_ready\000"
 4192      73746174 
 4192      655F7265 
 4192      61647900 
 4193              	.LASF118:
 4194 008d 67736D5F 		.ascii	"gsm_state_shutdown\000"
 4194      73746174 
 4194      655F7368 
 4194      7574646F 
 4194      776E00
 4195              	.LASF200:
 4196 00a0 76706F74 		.ascii	"vpote\000"
 4196      6500
 4197              	.LASF205:
 4198 00a6 4E564943 		.ascii	"NVIC_SetPriority\000"
 4198      5F536574 
 4198      5072696F 
 4198      72697479 
 4198      00
 4199              	.LASF47:
ARM GAS  /tmp/cc67MAoN.s 			page 116


 4200 00b7 756E7369 		.ascii	"unsigned int\000"
 4200      676E6564 
 4200      20696E74 
 4200      00
 4201              	.LASF71:
 4202 00c4 4C4F4144 		.ascii	"LOAD\000"
 4202      00
 4203              	.LASF25:
 4204 00c9 54494D31 		.ascii	"TIM16_IRQn\000"
 4204      365F4952 
 4204      516E00
 4205              	.LASF193:
 4206 00d4 7463705F 		.ascii	"tcp_kalive_timer\000"
 4206      6B616C69 
 4206      76655F74 
 4206      696D6572 
 4206      00
 4207              	.LASF41:
 4208 00e5 5F5F696E 		.ascii	"__int32_t\000"
 4208      7433325F 
 4208      7400
 4209              	.LASF153:
 4210 00ef 72783262 		.ascii	"rx2buff\000"
 4210      75666600 
 4211              	.LASF8:
 4212 00f7 464C4153 		.ascii	"FLASH_IRQn\000"
 4212      485F4952 
 4212      516E00
 4213              	.LASF155:
 4214 0102 72783162 		.ascii	"rx1buff\000"
 4214      75666600 
 4215              	.LASF198:
 4216 010a 706F7765 		.ascii	"power_vect\000"
 4216      725F7665 
 4216      637400
 4217              	.LASF72:
 4218 0115 43414C49 		.ascii	"CALIB\000"
 4218      4200
 4219              	.LASF99:
 4220 011b 696D6569 		.ascii	"imei\000"
 4220      00
 4221              	.LASF129:
 4222 0120 77685F69 		.ascii	"wh_int\000"
 4222      6E7400
 4223              	.LASF179:
 4224 0127 75736172 		.ascii	"usart2_pckt_ready\000"
 4224      74325F70 
 4224      636B745F 
 4224      72656164 
 4224      7900
 4225              	.LASF152:
 4226 0139 74783262 		.ascii	"tx2buff\000"
 4226      75666600 
 4227              	.LASF10:
 4228 0141 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4228      305F315F 
 4228      4952516E 
ARM GAS  /tmp/cc67MAoN.s 			page 117


 4228      00
 4229              	.LASF163:
 4230 014e 67726F75 		.ascii	"grouped_master_timeout_timer\000"
 4230      7065645F 
 4230      6D617374 
 4230      65725F74 
 4230      696D656F 
 4231              	.LASF111:
 4232 016b 67736D5F 		.ascii	"gsm_state_sending_conf\000"
 4232      73746174 
 4232      655F7365 
 4232      6E64696E 
 4232      675F636F 
 4233              	.LASF27:
 4234 0182 49324331 		.ascii	"I2C1_IRQn\000"
 4234      5F495251 
 4234      6E00
 4235              	.LASF3:
 4236 018c 50656E64 		.ascii	"PendSV_IRQn\000"
 4236      53565F49 
 4236      52516E00 
 4237              	.LASF134:
 4238 0198 6163756D 		.ascii	"acum_secs_index\000"
 4238      5F736563 
 4238      735F696E 
 4238      64657800 
 4239              	.LASF180:
 4240 01a8 75736172 		.ascii	"usart2_have_data\000"
 4240      74325F68 
 4240      6176655F 
 4240      64617461 
 4240      00
 4241              	.LASF9:
 4242 01b9 5243435F 		.ascii	"RCC_IRQn\000"
 4242      4952516E 
 4242      00
 4243              	.LASF132:
 4244 01c2 6663616C 		.ascii	"fcalc\000"
 4244      6300
 4245              	.LASF51:
 4246 01c8 75696E74 		.ascii	"uint32_t\000"
 4246      33325F74 
 4246      00
 4247              	.LASF52:
 4248 01d1 49534552 		.ascii	"ISER\000"
 4248      00
 4249              	.LASF184:
 4250 01d6 706F7765 		.ascii	"power_2secs_acum\000"
 4250      725F3273 
 4250      6563735F 
 4250      6163756D 
 4250      00
 4251              	.LASF146:
 4252 01e7 666C6F61 		.ascii	"float\000"
 4252      7400
 4253              	.LASF143:
 4254 01ed 68797374 		.ascii	"hyst\000"
ARM GAS  /tmp/cc67MAoN.s 			page 118


 4254      00
 4255              	.LASF55:
 4256 01f2 52534552 		.ascii	"RSERVED1\000"
 4256      56454431 
 4256      00
 4257              	.LASF29:
 4258 01fb 53504931 		.ascii	"SPI1_IRQn\000"
 4258      5F495251 
 4258      6E00
 4259              	.LASF46:
 4260 0205 6C6F6E67 		.ascii	"long long unsigned int\000"
 4260      206C6F6E 
 4260      6720756E 
 4260      7369676E 
 4260      65642069 
 4261              	.LASF68:
 4262 021c 44465352 		.ascii	"DFSR\000"
 4262      00
 4263              	.LASF177:
 4264 0221 75736172 		.ascii	"usart1_pckt_bytes\000"
 4264      74315F70 
 4264      636B745F 
 4264      62797465 
 4264      7300
 4265              	.LASF107:
 4266 0233 67736D5F 		.ascii	"gsm_state_reset\000"
 4266      73746174 
 4266      655F7265 
 4266      73657400 
 4267              	.LASF138:
 4268 0243 6163756D 		.ascii	"acum_hours\000"
 4268      5F686F75 
 4268      727300
 4269              	.LASF91:
 4270 024e 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE\000"
 4270      434F554E 
 4270      54455253 
 4270      5F414E44 
 4270      5F50484F 
 4271              	.LASF39:
 4272 0265 5F5F7569 		.ascii	"__uint16_t\000"
 4272      6E743136 
 4272      5F7400
 4273              	.LASF197:
 4274 0270 6D696E75 		.ascii	"minutes\000"
 4274      74657300 
 4275              	.LASF79:
 4276 0278 4D4F4445 		.ascii	"MODER\000"
 4276      5200
 4277              	.LASF77:
 4278 027e 43485345 		.ascii	"CHSELR\000"
 4278      4C5200
 4279              	.LASF175:
 4280 0285 75736172 		.ascii	"usart1_pckt_ready\000"
 4280      74315F70 
 4280      636B745F 
 4280      72656164 
ARM GAS  /tmp/cc67MAoN.s 			page 119


 4280      7900
 4281              	.LASF34:
 4282 0297 4952516E 		.ascii	"IRQn_Type\000"
 4282      5F547970 
 4282      6500
 4283              	.LASF104:
 4284 02a1 74696D65 		.ascii	"timer_reportar\000"
 4284      725F7265 
 4284      706F7274 
 4284      617200
 4285              	.LASF32:
 4286 02b0 55534152 		.ascii	"USART2_IRQn\000"
 4286      54325F49 
 4286      52516E00 
 4287              	.LASF63:
 4288 02bc 43505549 		.ascii	"CPUID\000"
 4288      4400
 4289              	.LASF167:
 4290 02c2 74745F74 		.ascii	"tt_take_photo_sample\000"
 4290      616B655F 
 4290      70686F74 
 4290      6F5F7361 
 4290      6D706C65 
 4291              	.LASF117:
 4292 02d7 67736D5F 		.ascii	"gsm_state_disconnected\000"
 4292      73746174 
 4292      655F6469 
 4292      73636F6E 
 4292      6E656374 
 4293              	.LASF206:
 4294 02ee 53797354 		.ascii	"SysTick_Config\000"
 4294      69636B5F 
 4294      436F6E66 
 4294      696700
 4295              	.LASF76:
 4296 02fd 534D5052 		.ascii	"SMPR\000"
 4296      00
 4297              	.LASF186:
 4298 0302 706F7765 		.ascii	"power_minutes\000"
 4298      725F6D69 
 4298      6E757465 
 4298      7300
 4299              	.LASF90:
 4300 0310 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4300      5A45524F 
 4300      5F435552 
 4300      52454E54 
 4300      00
 4301              	.LASF176:
 4302 0321 75736172 		.ascii	"usart1_have_data\000"
 4302      74315F68 
 4302      6176655F 
 4302      64617461 
 4302      00
 4303              	.LASF82:
 4304 0332 50555044 		.ascii	"PUPDR\000"
 4304      5200
ARM GAS  /tmp/cc67MAoN.s 			page 120


 4305              	.LASF122:
 4306 0338 7469636B 		.ascii	"ticks\000"
 4306      7300
 4307              	.LASF156:
 4308 033e 73686F77 		.ascii	"show_select_timer\000"
 4308      5F73656C 
 4308      6563745F 
 4308      74696D65 
 4308      7200
 4309              	.LASF87:
 4310 0350 63686172 		.ascii	"char\000"
 4310      00
 4311              	.LASF119:
 4312 0355 67736D5F 		.ascii	"gsm_state_stop_wait\000"
 4312      73746174 
 4312      655F7374 
 4312      6F705F77 
 4312      61697400 
 4313              	.LASF150:
 4314 0369 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4314      45524154 
 4314      5552455F 
 4314      56616C75 
 4314      6500
 4315              	.LASF128:
 4316 037b 706F7765 		.ascii	"power_dec\000"
 4316      725F6465 
 4316      6300
 4317              	.LASF65:
 4318 0385 41495243 		.ascii	"AIRCR\000"
 4318      5200
 4319              	.LASF164:
 4320 038b 74616B65 		.ascii	"take_temp_sample\000"
 4320      5F74656D 
 4320      705F7361 
 4320      6D706C65 
 4320      00
 4321              	.LASF21:
 4322 039c 54494D33 		.ascii	"TIM3_IRQn\000"
 4322      5F495251 
 4322      6E00
 4323              	.LASF14:
 4324 03a6 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4324      5F436861 
 4324      6E6E656C 
 4324      315F4952 
 4324      516E00
 4325              	.LASF139:
 4326 03b9 73686F77 		.ascii	"show_power\000"
 4326      5F706F77 
 4326      657200
 4327              	.LASF124:
 4328 03c4 62797465 		.ascii	"bytes_read\000"
 4328      735F7265 
 4328      616400
 4329              	.LASF97:
 4330 03cf 6D61696E 		.ascii	"main_state_t\000"
ARM GAS  /tmp/cc67MAoN.s 			page 121


 4330      5F737461 
 4330      74655F74 
 4330      00
 4331              	.LASF24:
 4332 03dc 54494D31 		.ascii	"TIM15_IRQn\000"
 4332      355F4952 
 4332      516E00
 4333              	.LASF48:
 4334 03e7 75696E74 		.ascii	"uint8_t\000"
 4334      385F7400 
 4335              	.LASF95:
 4336 03ef 57454C43 		.ascii	"WELCOME_GSM\000"
 4336      4F4D455F 
 4336      47534D00 
 4337              	.LASF178:
 4338 03fb 75736172 		.ascii	"usart2_mini_timeout\000"
 4338      74325F6D 
 4338      696E695F 
 4338      74696D65 
 4338      6F757400 
 4339              	.LASF188:
 4340 040f 706F7765 		.ascii	"power_hours\000"
 4340      725F686F 
 4340      75727300 
 4341              	.LASF154:
 4342 041b 74783162 		.ascii	"tx1buff\000"
 4342      75666600 
 4343              	.LASF181:
 4344 0423 75736172 		.ascii	"usart2_pckt_bytes\000"
 4344      74325F70 
 4344      636B745F 
 4344      62797465 
 4344      7300
 4345              	.LASF168:
 4346 0435 74745F72 		.ascii	"tt_relay_on_off\000"
 4346      656C6179 
 4346      5F6F6E5F 
 4346      6F666600 
 4347              	.LASF195:
 4348 0445 73656373 		.ascii	"secs\000"
 4348      00
 4349              	.LASF96:
 4350 044a 4C414D50 		.ascii	"LAMP_ON\000"
 4350      5F4F4E00 
 4351              	.LASF78:
 4352 0452 4144435F 		.ascii	"ADC_TypeDef\000"
 4352      54797065 
 4352      44656600 
 4353              	.LASF45:
 4354 045e 6C6F6E67 		.ascii	"long long int\000"
 4354      206C6F6E 
 4354      6720696E 
 4354      7400
 4355              	.LASF5:
 4356 046c 57574447 		.ascii	"WWDG_IRQn\000"
 4356      5F495251 
 4356      6E00
ARM GAS  /tmp/cc67MAoN.s 			page 122


 4357              	.LASF67:
 4358 0476 53484353 		.ascii	"SHCSR\000"
 4358      5200
 4359              	.LASF174:
 4360 047c 75736172 		.ascii	"usart1_mini_timeout\000"
 4360      74315F6D 
 4360      696E695F 
 4360      74696D65 
 4360      6F757400 
 4361              	.LASF93:
 4362 0490 53544152 		.ascii	"START_GSM\000"
 4362      545F4753 
 4362      4D00
 4363              	.LASF169:
 4364 049a 73617665 		.ascii	"saved_mode\000"
 4364      645F6D6F 
 4364      646500
 4365              	.LASF194:
 4366 04a5 66696C74 		.ascii	"filter_timer\000"
 4366      65725F74 
 4366      696D6572 
 4366      00
 4367              	.LASF204:
 4368 04b2 70617261 		.ascii	"parameters\000"
 4368      6D657465 
 4368      727300
 4369              	.LASF166:
 4370 04bd 74696D65 		.ascii	"timer_relay\000"
 4370      725F7265 
 4370      6C617900 
 4371              	.LASF130:
 4372 04c9 77685F64 		.ascii	"wh_dec\000"
 4372      656300
 4373              	.LASF88:
 4374 04d0 4D41494E 		.ascii	"MAIN_INIT\000"
 4374      5F494E49 
 4374      5400
 4375              	.LASF94:
 4376 04da 434F4E46 		.ascii	"CONFIG_GSM\000"
 4376      49475F47 
 4376      534D00
 4377              	.LASF173:
 4378 04e5 7A65726F 		.ascii	"zero_current\000"
 4378      5F637572 
 4378      72656E74 
 4378      00
 4379              	.LASF13:
 4380 04f2 54535F49 		.ascii	"TS_IRQn\000"
 4380      52516E00 
 4381              	.LASF18:
 4382 04fa 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4382      5F42524B 
 4382      5F55505F 
 4382      5452475F 
 4382      434F4D5F 
 4383              	.LASF148:
 4384 0513 74656D70 		.ascii	"tempbuff\000"
ARM GAS  /tmp/cc67MAoN.s 			page 123


 4384      62756666 
 4384      00
 4385              	.LASF6:
 4386 051c 5056445F 		.ascii	"PVD_IRQn\000"
 4386      4952516E 
 4386      00
 4387              	.LASF74:
 4388 0525 43464752 		.ascii	"CFGR1\000"
 4388      3100
 4389              	.LASF75:
 4390 052b 43464752 		.ascii	"CFGR2\000"
 4390      3200
 4391              	.LASF58:
 4392 0531 49435052 		.ascii	"ICPR\000"
 4392      00
 4393              	.LASF17:
 4394 0536 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4394      5F434F4D 
 4394      505F4952 
 4394      516E00
 4395              	.LASF185:
 4396 0545 706F7765 		.ascii	"power_2secs_index\000"
 4396      725F3273 
 4396      6563735F 
 4396      696E6465 
 4396      7800
 4397              	.LASF157:
 4398 0557 73776974 		.ascii	"switches_timer\000"
 4398      63686573 
 4398      5F74696D 
 4398      657200
 4399              	.LASF81:
 4400 0566 4F535045 		.ascii	"OSPEEDR\000"
 4400      45445200 
 4401              	.LASF73:
 4402 056e 53797354 		.ascii	"SysTick_Type\000"
 4402      69636B5F 
 4402      54797065 
 4402      00
 4403              	.LASF86:
 4404 057b 6C6F6E67 		.ascii	"long double\000"
 4404      20646F75 
 4404      626C6500 
 4405              	.LASF49:
 4406 0587 75696E74 		.ascii	"uint16_t\000"
 4406      31365F74 
 4406      00
 4407              	.LASF182:
 4408 0590 62756666 		.ascii	"buffUARTGSMrx2\000"
 4408      55415254 
 4408      47534D72 
 4408      783200
 4409              	.LASF120:
 4410 059f 4952516E 		.ascii	"IRQn\000"
 4410      00
 4411              	.LASF189:
 4412 05a4 67736D4E 		.ascii	"gsmNUM\000"
ARM GAS  /tmp/cc67MAoN.s 			page 124


 4412      554D00
 4413              	.LASF98:
 4414 05ab 6E756D5F 		.ascii	"num_reportar\000"
 4414      7265706F 
 4414      72746172 
 4414      00
 4415              	.LASF159:
 4416 05b8 7363726F 		.ascii	"scroll1_timer\000"
 4416      6C6C315F 
 4416      74696D65 
 4416      7200
 4417              	.LASF7:
 4418 05c6 5254435F 		.ascii	"RTC_IRQn\000"
 4418      4952516E 
 4418      00
 4419              	.LASF53:
 4420 05cf 52455345 		.ascii	"RESERVED0\000"
 4420      52564544 
 4420      3000
 4421              	.LASF66:
 4422 05d9 52455345 		.ascii	"RESERVED1\000"
 4422      52564544 
 4422      3100
 4423              	.LASF57:
 4424 05e3 52455345 		.ascii	"RESERVED2\000"
 4424      52564544 
 4424      3200
 4425              	.LASF59:
 4426 05ed 52455345 		.ascii	"RESERVED3\000"
 4426      52564544 
 4426      3300
 4427              	.LASF60:
 4428 05f7 52455345 		.ascii	"RESERVED4\000"
 4428      52564544 
 4428      3400
 4429              	.LASF38:
 4430 0601 73686F72 		.ascii	"short int\000"
 4430      7420696E 
 4430      7400
 4431              	.LASF42:
 4432 060b 6C6F6E67 		.ascii	"long int\000"
 4432      20696E74 
 4432      00
 4433              	.LASF31:
 4434 0614 55534152 		.ascii	"USART1_IRQn\000"
 4434      54315F49 
 4434      52516E00 
 4435              	.LASF103:
 4436 0620 706F745F 		.ascii	"pot_instantanea\000"
 4436      696E7374 
 4436      616E7461 
 4436      6E656100 
 4437              	.LASF108:
 4438 0630 67736D5F 		.ascii	"gsm_state_verify_at\000"
 4438      73746174 
 4438      655F7665 
 4438      72696679 
ARM GAS  /tmp/cc67MAoN.s 			page 125


 4438      5F617400 
 4439              	.LASF0:
 4440 0644 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4440      61736B61 
 4440      626C6549 
 4440      6E745F49 
 4440      52516E00 
 4441              	.LASF121:
 4442 0658 7072696F 		.ascii	"priority\000"
 4442      72697479 
 4442      00
 4443              	.LASF19:
 4444 0661 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4444      5F43435F 
 4444      4952516E 
 4444      00
 4445              	.LASF80:
 4446 066e 4F545950 		.ascii	"OTYPER\000"
 4446      455200
 4447              	.LASF191:
 4448 0675 77616974 		.ascii	"wait_ms_var\000"
 4448      5F6D735F 
 4448      76617200 
 4449              	.LASF26:
 4450 0681 54494D31 		.ascii	"TIM17_IRQn\000"
 4450      375F4952 
 4450      516E00
 4451              	.LASF89:
 4452 068c 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4452      48524F5F 
 4452      41444300 
 4453              	.LASF16:
 4454 0698 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4454      5F436861 
 4454      6E6E656C 
 4454      345F355F 
 4454      4952516E 
 4455              	.LASF190:
 4456 06ad 67736D4D 		.ascii	"gsmMSG\000"
 4456      534700
 4457              	.LASF196:
 4458 06b4 686F7572 		.ascii	"hours\000"
 4458      7300
 4459              	.LASF35:
 4460 06ba 5F5F7569 		.ascii	"__uint8_t\000"
 4460      6E74385F 
 4460      7400
 4461              	.LASF62:
 4462 06c4 4E564943 		.ascii	"NVIC_Type\000"
 4462      5F547970 
 4462      6500
 4463              	.LASF69:
 4464 06ce 5343425F 		.ascii	"SCB_Type\000"
 4464      54797065 
 4464      00
 4465              	.LASF85:
 4466 06d7 4750494F 		.ascii	"GPIO_TypeDef\000"
ARM GAS  /tmp/cc67MAoN.s 			page 126


 4466      5F547970 
 4466      65446566 
 4466      00
 4467              	.LASF142:
 4468 06e4 73656E64 		.ascii	"sended\000"
 4468      656400
 4469              	.LASF137:
 4470 06eb 6163756D 		.ascii	"acum_mins\000"
 4470      5F6D696E 
 4470      7300
 4471              	.LASF4:
 4472 06f5 53797354 		.ascii	"SysTick_IRQn\000"
 4472      69636B5F 
 4472      4952516E 
 4472      00
 4473              	.LASF33:
 4474 0702 4345435F 		.ascii	"CEC_IRQn\000"
 4474      4952516E 
 4474      00
 4475              	.LASF61:
 4476 070b 73697A65 		.ascii	"sizetype\000"
 4476      74797065 
 4476      00
 4477              	.LASF64:
 4478 0714 49435352 		.ascii	"ICSR\000"
 4478      00
 4479              	.LASF28:
 4480 0719 49324332 		.ascii	"I2C2_IRQn\000"
 4480      5F495251 
 4480      6E00
 4481              	.LASF44:
 4482 0723 6C6F6E67 		.ascii	"long unsigned int\000"
 4482      20756E73 
 4482      69676E65 
 4482      6420696E 
 4482      7400
 4483              	.LASF102:
 4484 0735 6163756D 		.ascii	"acumm_diario\000"
 4484      6D5F6469 
 4484      6172696F 
 4484      00
 4485              	.LASF20:
 4486 0742 54494D32 		.ascii	"TIM2_IRQn\000"
 4486      5F495251 
 4486      6E00
 4487              	.LASF151:
 4488 074c 50524553 		.ascii	"PRESSURE_Value\000"
 4488      53555245 
 4488      5F56616C 
 4488      756500
 4489              	.LASF203:
 4490 075b 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4490      652F6D65 
 4490      642F446F 
 4490      63756D65 
 4490      6E74732F 
 4491 078e 6100     		.ascii	"a\000"
ARM GAS  /tmp/cc67MAoN.s 			page 127


 4492              	.LASF149:
 4493 0790 48554D49 		.ascii	"HUMIDITY_Value\000"
 4493      44495459 
 4493      5F56616C 
 4493      756500
 4494              	.LASF50:
 4495 079f 696E7433 		.ascii	"int32_t\000"
 4495      325F7400 
 4496              	.LASF162:
 4497 07a7 7374616E 		.ascii	"standalone_enable_menu_timer\000"
 4497      64616C6F 
 4497      6E655F65 
 4497      6E61626C 
 4497      655F6D65 
 4498              	.LASF171:
 4499 07c4 6164635F 		.ascii	"adc_ch\000"
 4499      636800
 4500              	.LASF23:
 4501 07cb 54494D31 		.ascii	"TIM14_IRQn\000"
 4501      345F4952 
 4501      516E00
 4502              	.LASF15:
 4503 07d6 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4503      5F436861 
 4503      6E6E656C 
 4503      325F335F 
 4503      4952516E 
 4504              	.LASF22:
 4505 07eb 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4505      5F444143 
 4505      5F495251 
 4505      6E00
 4506              	.LASF37:
 4507 07f9 756E7369 		.ascii	"unsigned char\000"
 4507      676E6564 
 4507      20636861 
 4507      7200
 4508              	.LASF92:
 4509 0807 4C414D50 		.ascii	"LAMP_OFF\000"
 4509      5F4F4646 
 4509      00
 4510              	.LASF43:
 4511 0810 5F5F7569 		.ascii	"__uint32_t\000"
 4511      6E743332 
 4511      5F7400
 4512              	.LASF116:
 4513 081b 67736D5F 		.ascii	"gsm_state_connected\000"
 4513      73746174 
 4513      655F636F 
 4513      6E6E6563 
 4513      74656400 
 4514              	.LASF125:
 4515 082f 6E656564 		.ascii	"need_ack\000"
 4515      5F61636B 
 4515      00
 4516              	.LASF115:
 4517 0838 67736D5F 		.ascii	"gsm_state_connecting\000"
ARM GAS  /tmp/cc67MAoN.s 			page 128


 4517      73746174 
 4517      655F636F 
 4517      6E6E6563 
 4517      74696E67 
 4518              	.LASF101:
 4519 084d 6163756D 		.ascii	"acumm_historico\000"
 4519      6D5F6869 
 4519      73746F72 
 4519      69636F00 
 4520              	.LASF170:
 4521 085d 7361635F 		.ascii	"sac_aux\000"
 4521      61757800 
 4522              	.LASF209:
 4523 0865 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4523      6E674465 
 4523      6C61795F 
 4523      44656372 
 4523      656D656E 
 4524              	.LASF165:
 4525 087b 74696D65 		.ascii	"timer_wifi_bright\000"
 4525      725F7769 
 4525      66695F62 
 4525      72696768 
 4525      7400
 4526              	.LASF54:
 4527 088d 49434552 		.ascii	"ICER\000"
 4527      00
 4528              	.LASF135:
 4529 0892 6163756D 		.ascii	"acum_mins_index\000"
 4529      5F6D696E 
 4529      735F696E 
 4529      64657800 
 4530              	.LASF144:
 4531 08a2 6F6E655F 		.ascii	"one_to_ten\000"
 4531      746F5F74 
 4531      656E00
 4532              	.LASF30:
 4533 08ad 53504932 		.ascii	"SPI2_IRQn\000"
 4533      5F495251 
 4533      6E00
 4534              	.LASF112:
 4535 08b7 67736D5F 		.ascii	"gsm_state_sending_sms\000"
 4535      73746174 
 4535      655F7365 
 4535      6E64696E 
 4535      675F736D 
 4536              	.LASF208:
 4537 08cd 70726570 		.ascii	"prepare_json_pkt\000"
 4537      6172655F 
 4537      6A736F6E 
 4537      5F706B74 
 4537      00
 4538              	.LASF131:
 4539 08de 706F7765 		.ascii	"power\000"
 4539      7200
 4540              	.LASF113:
 4541 08e4 67736D5F 		.ascii	"gsm_state_command_answer\000"
ARM GAS  /tmp/cc67MAoN.s 			page 129


 4541      73746174 
 4541      655F636F 
 4541      6D6D616E 
 4541      645F616E 
 4542              	.LASF109:
 4543 08fd 67736D5F 		.ascii	"gsm_state_ready_wait\000"
 4543      73746174 
 4543      655F7265 
 4543      6164795F 
 4543      77616974 
 4544              	.LASF106:
 4545 0912 70617261 		.ascii	"parameters_typedef\000"
 4545      6D657465 
 4545      72735F74 
 4545      79706564 
 4545      656600
 4546              	.LASF36:
 4547 0925 7369676E 		.ascii	"signed char\000"
 4547      65642063 
 4547      68617200 
 4548              	.LASF202:
 4549 0931 7372632F 		.ascii	"src/main.c\000"
 4549      6D61696E 
 4549      2E6300
 4550              	.LASF127:
 4551 093c 706F7765 		.ascii	"power_int\000"
 4551      725F696E 
 4551      7400
 4552              	.LASF40:
 4553 0946 73686F72 		.ascii	"short unsigned int\000"
 4553      7420756E 
 4553      7369676E 
 4553      65642069 
 4553      6E7400
 4554              	.LASF201:
 4555 0959 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4555      43313120 
 4555      352E322E 
 4555      31203230 
 4555      31353132 
 4556 098c 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4556      20726576 
 4556      6973696F 
 4556      6E203233 
 4556      31383438 
 4557 09bf 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4557      662D3220 
 4557      2D4F3020 
 4557      2D666F6D 
 4557      69742D66 
 4558 09f2 66756E63 		.ascii	"function-sections\000"
 4558      74696F6E 
 4558      2D736563 
 4558      74696F6E 
 4558      7300
 4559              	.LASF161:
 4560 0a04 7374616E 		.ascii	"standalone_timer\000"
ARM GAS  /tmp/cc67MAoN.s 			page 130


 4560      64616C6F 
 4560      6E655F74 
 4560      696D6572 
 4560      00
 4561              	.LASF207:
 4562 0a15 6D61696E 		.ascii	"main\000"
 4562      00
 4563              	.LASF1:
 4564 0a1a 48617264 		.ascii	"HardFault_IRQn\000"
 4564      4661756C 
 4564      745F4952 
 4564      516E00
 4565              	.LASF136:
 4566 0a29 6163756D 		.ascii	"acum_secs\000"
 4566      5F736563 
 4566      7300
 4567              	.LASF187:
 4568 0a33 706F7765 		.ascii	"power_minutes_index\000"
 4568      725F6D69 
 4568      6E757465 
 4568      735F696E 
 4568      64657800 
 4569              	.LASF56:
 4570 0a47 49535052 		.ascii	"ISPR\000"
 4570      00
 4571              	.LASF126:
 4572 0a4c 72657370 		.ascii	"resp\000"
 4572      00
 4573              	.LASF100:
 4574 0a51 6E756D5F 		.ascii	"num_propio\000"
 4574      70726F70 
 4574      696F00
 4575              	.LASF172:
 4576 0a5c 7365715F 		.ascii	"seq_ready\000"
 4576      72656164 
 4576      7900
 4577              	.LASF199:
 4578 0a66 7674656D 		.ascii	"vtemp\000"
 4578      7000
 4579              	.LASF105:
 4580 0a6c 73656E64 		.ascii	"send_energy_flag\000"
 4580      5F656E65 
 4580      7267795F 
 4580      666C6167 
 4580      00
 4581              	.LASF160:
 4582 0a7d 7363726F 		.ascii	"scroll2_timer\000"
 4582      6C6C325F 
 4582      74696D65 
 4582      7200
 4583              	.LASF192:
 4584 0a8b 74696D65 		.ascii	"timer_standby\000"
 4584      725F7374 
 4584      616E6462 
 4584      7900
 4585              	.LASF123:
 4586 0a99 62797465 		.ascii	"bytes_remain\000"
ARM GAS  /tmp/cc67MAoN.s 			page 131


 4586      735F7265 
 4586      6D61696E 
 4586      00
 4587              	.LASF84:
 4588 0aa6 4C434B52 		.ascii	"LCKR\000"
 4588      00
 4589              	.LASF70:
 4590 0aab 4354524C 		.ascii	"CTRL\000"
 4590      00
 4591              	.LASF141:
 4592 0ab0 7265706F 		.ascii	"reportar_SMS\000"
 4592      72746172 
 4592      5F534D53 
 4592      00
 4593              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/cc67MAoN.s 			page 132


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc67MAoN.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/cc67MAoN.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/cc67MAoN.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/cc67MAoN.s:206    .text.SysTick_Config:00000000 $t
     /tmp/cc67MAoN.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/cc67MAoN.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/cc67MAoN.s:277    .bss.show_select_timer:00000000 show_select_timer
     /tmp/cc67MAoN.s:274    .bss.show_select_timer:00000000 $d
     /tmp/cc67MAoN.s:283    .bss.switches_timer:00000000 switches_timer
     /tmp/cc67MAoN.s:284    .bss.switches_timer:00000000 $d
     /tmp/cc67MAoN.s:289    .bss.acswitch_timer:00000000 acswitch_timer
     /tmp/cc67MAoN.s:290    .bss.acswitch_timer:00000000 $d
     /tmp/cc67MAoN.s:296    .bss.scroll1_timer:00000000 scroll1_timer
     /tmp/cc67MAoN.s:293    .bss.scroll1_timer:00000000 $d
     /tmp/cc67MAoN.s:303    .bss.scroll2_timer:00000000 scroll2_timer
     /tmp/cc67MAoN.s:300    .bss.scroll2_timer:00000000 $d
                            *COM*:00000002 standalone_timer
                            *COM*:00000002 standalone_enable_menu_timer
                            *COM*:00000001 grouped_master_timeout_timer
     /tmp/cc67MAoN.s:313    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/cc67MAoN.s:310    .bss.take_temp_sample:00000000 $d
     /tmp/cc67MAoN.s:319    .bss.timer_wifi_bright:00000000 timer_wifi_bright
     /tmp/cc67MAoN.s:320    .bss.timer_wifi_bright:00000000 $d
     /tmp/cc67MAoN.s:326    .bss.timer_relay:00000000 timer_relay
     /tmp/cc67MAoN.s:323    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000006 adc_ch
     /tmp/cc67MAoN.s:340    .bss.seq_ready:00000000 seq_ready
     /tmp/cc67MAoN.s:341    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:00000054 param_struct
     /tmp/cc67MAoN.s:357    .bss.power_2secs_acum:00000000 power_2secs_acum
     /tmp/cc67MAoN.s:354    .bss.power_2secs_acum:00000000 $d
     /tmp/cc67MAoN.s:363    .bss.power_2secs_index:00000000 power_2secs_index
     /tmp/cc67MAoN.s:364    .bss.power_2secs_index:00000000 $d
     /tmp/cc67MAoN.s:370    .bss.power_minutes:00000000 power_minutes
     /tmp/cc67MAoN.s:367    .bss.power_minutes:00000000 $d
ARM GAS  /tmp/cc67MAoN.s 			page 133


     /tmp/cc67MAoN.s:376    .bss.power_minutes_index:00000000 power_minutes_index
     /tmp/cc67MAoN.s:377    .bss.power_minutes_index:00000000 $d
     /tmp/cc67MAoN.s:383    .bss.power_hours:00000000 power_hours
     /tmp/cc67MAoN.s:380    .bss.power_hours:00000000 $d
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/cc67MAoN.s:392    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/cc67MAoN.s:389    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/cc67MAoN.s:402    .bss.secs:00000000 secs
     /tmp/cc67MAoN.s:399    .bss.secs:00000000 $d
     /tmp/cc67MAoN.s:408    .bss.hours:00000000 hours
     /tmp/cc67MAoN.s:409    .bss.hours:00000000 $d
     /tmp/cc67MAoN.s:414    .bss.minutes:00000000 minutes
     /tmp/cc67MAoN.s:415    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/cc67MAoN.s:420    .rodata:00000000 $d
     /tmp/cc67MAoN.s:460    .text.main:00000000 $t
     /tmp/cc67MAoN.s:465    .text.main:00000000 main
     /tmp/cc67MAoN.s:760    .rodata.main:00000000 $d
     /tmp/cc67MAoN.s:1009   .text.main:0000033c $d
     /tmp/cc67MAoN.s:1030   .text.main:00000388 $t
     /tmp/cc67MAoN.s:1300   .text.main:00000560 $d
     /tmp/cc67MAoN.s:1327   .text.prepare_json_pkt:00000000 $t
     /tmp/cc67MAoN.s:1332   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/cc67MAoN.s:1424   .text.prepare_json_pkt:0000009c $d
     /tmp/cc67MAoN.s:1433   .text.TimingDelay_Decrement:00000000 $t
     /tmp/cc67MAoN.s:1438   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/cc67MAoN.s:1640   .text.TimingDelay_Decrement:00000130 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2uiz
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_ui2d
GPIO_Config
strncpy
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
ARM GAS  /tmp/cc67MAoN.s 			page 134


Usart1Mode
Update_TIM3_CH1
FuncsGSMStateAsk
GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
sprintf
UpdateVGrid
UpdateIGrid
UpdateRelay
FuncsGSM
memcpy
strcat
strlen
GSMTimeoutCounters
