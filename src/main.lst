ARM GAS  /tmp/ccSzia7W.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccSzia7W.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccSzia7W.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccSzia7W.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccSzia7W.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccSzia7W.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccSzia7W.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccSzia7W.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccSzia7W.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccSzia7W.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccSzia7W.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccSzia7W.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccSzia7W.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccSzia7W.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccSzia7W.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccSzia7W.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccSzia7W.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccSzia7W.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7172,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7173, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7174, D.7173
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7174, D.7174
  92 0026 083B     		subs	r3, r3, #8	@ D.7174,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7174, D.7174,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7172,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7173, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7174, D.7173
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7174, D.7174
 101 0038 083B     		subs	r3, r3, #8	@ D.7174,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7174, D.7174,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7172, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7174, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7173, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7174, D.7173
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7174, D.7174
 114 0052 D200     		lsls	r2, r2, #3	@ D.7174, D.7174,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7175, D.7175, D.7174
 117 0058 0200     		movs	r2, r0	@ D.7175, D.7175
 118 005a D243     		mvns	r2, r2	@ D.7175, D.7175
 119 005c 1A40     		ands	r2, r3	@ D.7174, D.7174
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7174, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7174, D.7174
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7173, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7174, D.7173
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7174, D.7174
ARM GAS  /tmp/ccSzia7W.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7174, D.7174,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7174, D.7174, D.7174
 133 0076 0300     		movs	r3, r0	@ D.7174, D.7174
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7174, D.7174
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7174,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7172, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7174, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7176,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7174, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7174, D.7174
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7174, D.7174,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7176,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7174, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7174, D.7174
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7174, D.7174,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7174, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7173, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7174, D.7173
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7174, D.7174
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7174, D.7174,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7175, D.7175, D.7174
 169 00b6 0100     		movs	r1, r0	@ D.7175, D.7175
 170 00b8 C943     		mvns	r1, r1	@ D.7175, D.7175
 171 00ba 1140     		ands	r1, r2	@ D.7174, D.7174
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7174, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7174, D.7174
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7173, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7174, D.7173
ARM GAS  /tmp/ccSzia7W.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7174, D.7174
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7174, D.7174,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7174, D.7174, D.7174
 185 00d4 0200     		movs	r2, r0	@ D.7174, D.7174
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7174, D.7174
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7174, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccSzia7W.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7177,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7178,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7179, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7179,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7179, _6->LOAD
ARM GAS  /tmp/ccSzia7W.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7178,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7178,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7177,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.comm	mains_voltage_filtered,2,2
 273              		.global	take_temp_sample
 274              		.section	.bss.take_temp_sample,"aw",%nobits
 275              		.align	1
 276              		.type	take_temp_sample, %object
 277              		.size	take_temp_sample, 2
 278              	take_temp_sample:
 279 0000 0000     		.space	2
 280              		.global	timer_rep
 281              		.section	.bss.timer_rep,"aw",%nobits
 282              		.align	1
 283              		.type	timer_rep, %object
 284              		.size	timer_rep, 2
 285              	timer_rep:
 286 0000 0000     		.space	2
 287              		.global	timer_relay
ARM GAS  /tmp/ccSzia7W.s 			page 23


 288              		.section	.bss.timer_relay,"aw",%nobits
 289              		.align	1
 290              		.type	timer_relay, %object
 291              		.size	timer_relay, 2
 292              	timer_relay:
 293 0000 0000     		.space	2
 294              		.comm	tt_take_photo_sample,2,2
 295              		.comm	tt_relay_on_off,2,2
 296              		.comm	saved_mode,1,1
 297              		.global	send_energy
 298              		.section	.bss.send_energy,"aw",%nobits
 299              		.type	send_energy, %object
 300              		.size	send_energy, 1
 301              	send_energy:
 302 0000 00       		.space	1
 303              		.comm	adc_ch,6,4
 304              		.global	seq_ready
 305              		.section	.bss.seq_ready,"aw",%nobits
 306              		.type	seq_ready, %object
 307              		.size	seq_ready, 1
 308              	seq_ready:
 309 0000 00       		.space	1
 310              		.comm	zero_current,2,2
 311              		.comm	usart1_mini_timeout,1,1
 312              		.comm	usart1_pckt_ready,1,1
 313              		.comm	usart1_have_data,1,1
 314              		.comm	usart1_pckt_bytes,1,1
 315              		.comm	usart2_mini_timeout,1,1
 316              		.comm	usart2_pckt_ready,1,1
 317              		.comm	usart2_have_data,1,1
 318              		.comm	usart2_pckt_bytes,1,1
 319              		.comm	param_struct,84,4
 320              		.global	show_power_index
 321              		.section	.bss.show_power_index,"aw",%nobits
 322              		.align	1
 323              		.type	show_power_index, %object
 324              		.size	show_power_index, 2
 325              	show_power_index:
 326 0000 0000     		.space	2
 327              		.comm	gsmNUM,20,4
 328              		.comm	gsmMSG,180,4
 329              		.global	wait_ms_var
 330              		.section	.bss.wait_ms_var,"aw",%nobits
 331              		.align	1
 332              		.type	wait_ms_var, %object
 333              		.size	wait_ms_var, 2
 334              	wait_ms_var:
 335 0000 0000     		.space	2
 336              		.comm	timer_standby,2,2
 337              		.comm	tcp_kalive_timer,2,2
 338              		.comm	timer_meas,1,1
 339              		.global	secs
 340              		.section	.bss.secs,"aw",%nobits
 341              		.align	1
 342              		.type	secs, %object
 343              		.size	secs, 2
 344              	secs:
ARM GAS  /tmp/ccSzia7W.s 			page 24


 345 0000 0000     		.space	2
 346              		.global	hours
 347              		.section	.bss.hours,"aw",%nobits
 348              		.type	hours, %object
 349              		.size	hours, 1
 350              	hours:
 351 0000 00       		.space	1
 352              		.global	minutes
 353              		.section	.bss.minutes,"aw",%nobits
 354              		.type	minutes, %object
 355              		.size	minutes, 1
 356              	minutes:
 357 0000 00       		.space	1
 358              		.comm	power_vect,20,4
 359              		.comm	vtemp,34,4
 360              		.comm	vpote,34,4
 361              		.section	.rodata
 362              		.align	2
 363              	.LC1:
 364 0000 31313439 		.ascii	"1149867843\000"
 364      38363738 
 364      343300
 365 000b 00       		.align	2
 366              	.LC3:
 367 000c 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 367      726E6F20 
 367      506C6163 
 367      61205265 
 367      646F6E64 
 368 0031 000000   		.align	2
 369              	.LC5:
 370 0034 20204665 		.ascii	"  Features:\015\012\000"
 370      61747572 
 370      65733A0D 
 370      0A00
 371 0042 0000     		.align	2
 372              	.LC7:
 373 0044 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 373      6D6D6572 
 373      20312074 
 373      6F203130 
 373      560D0A00 
 374              		.align	2
 375              	.LC9:
 376 0058 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 376      67687420 
 376      48797374 
 376      65726573 
 376      69730D0A 
 377 006d 000000   		.align	2
 378              	.LC11:
 379 0070 20205379 		.ascii	"  Sync by ADC\015\012\000"
 379      6E632062 
 379      79204144 
 379      430D0A00 
 380              		.align	2
 381              	.LC13:
ARM GAS  /tmp/ccSzia7W.s 			page 25


 382 0080 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 382      65732047 
 382      534D2066 
 382      6F722053 
 382      4D532064 
 383 009a 0000     		.align	2
 384              	.LC18:
 385 009c 47657474 		.ascii	"Getted\015\012\000"
 385      65640D0A 
 385      00
 386 00a5 000000   		.align	2
 387              	.LC20:
 388 00a8 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 388      696E6720 
 388      47534D20 
 388      53746172 
 388      74757020 
 389 00cf 00       		.align	2
 390              	.LC25:
 391 00d0 5265706F 		.ascii	"Reports by SMS\015\012\000"
 391      72747320 
 391      62792053 
 391      4D530D0A 
 391      00
 392 00e1 000000   		.align	2
 393              	.LC27:
 394 00e4 41542B47 		.ascii	"AT+GSN\015\012\000"
 394      534E0D0A 
 394      00
 395 00ed 000000   		.align	2
 396              	.LC30:
 397 00f0 494D4549 		.ascii	"IMEI: \000"
 397      3A2000
 398 00f7 00       		.align	2
 399              	.LC32:
 400 00f8 0D0A00   		.ascii	"\015\012\000"
 401 00fb 00       		.align	2
 402              	.LC34:
 403 00fc 2C204143 		.ascii	", ACTIVO\000"
 403      5449564F 
 403      00
 404 0105 000000   		.align	2
 405              	.LC37:
 406 0108 5052454E 		.ascii	"PRENDIDO\015\012\000"
 406      4449444F 
 406      0D0A00
 407 0113 00       		.align	2
 408              	.LC39:
 409 0114 5052454E 		.ascii	"PRENDIDO\000"
 409      4449444F 
 409      00
 410 011d 000000   		.align	2
 411              	.LC45:
 412 0120 41504147 		.ascii	"APAGADO\015\012\000"
 412      41444F0D 
 412      0A00
 413 012a 0000     		.align	2
ARM GAS  /tmp/ccSzia7W.s 			page 26


 414              	.LC47:
 415 012c 41504147 		.ascii	"APAGADO\000"
 415      41444F00 
 416              		.global	__aeabi_uidiv
 417              		.align	2
 418              	.LC51:
 419 0134 4C4F5720 		.ascii	"LOW MAINS VOLTAGE\015\012\000"
 419      4D41494E 
 419      5320564F 
 419      4C544147 
 419      450D0A00 
 420              		.align	2
 421              	.LC53:
 422 0148 53617665 		.ascii	"Saved OK!\015\012\000"
 422      64204F4B 
 422      210D0A00 
 423              		.align	2
 424              	.LC55:
 425 0154 4D656D20 		.ascii	"Mem Error!\015\012\000"
 425      4572726F 
 425      72210D0A 
 425      00
 426              		.section	.text.main,"ax",%progbits
 427              		.align	2
 428              		.global	main
 429              		.code	16
 430              		.thumb_func
 431              		.type	main, %function
 432              	main:
 433              	.LFB20:
 434              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
ARM GAS  /tmp/ccSzia7W.s 			page 27


  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals para filtros -------
  71:src/main.c    **** unsigned short mains_voltage_filtered;
  72:src/main.c    **** //
  73:src/main.c    **** //
  74:src/main.c    **** // volatile unsigned short scroll1_timer = 0;
  75:src/main.c    **** // volatile unsigned short scroll2_timer = 0;
  76:src/main.c    **** //
  77:src/main.c    **** // volatile unsigned short standalone_timer;
  78:src/main.c    **** // volatile unsigned short standalone_enable_menu_timer;
  79:src/main.c    **** // //volatile unsigned short standalone_menu_timer;
  80:src/main.c    **** // volatile unsigned char grouped_master_timeout_timer;
  81:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  82:src/main.c    **** unsigned short timer_rep = 0;
  83:src/main.c    **** // volatile unsigned char timer_wifi_bright = 0;
ARM GAS  /tmp/ccSzia7W.s 			page 28


  84:src/main.c    **** 
  85:src/main.c    **** #ifdef USE_REDONDA_BASIC
  86:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  87:src/main.c    **** 
  88:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  89:src/main.c    **** volatile unsigned short tt_relay_on_off;
  90:src/main.c    **** #endif
  91:src/main.c    **** 
  92:src/main.c    **** 
  93:src/main.c    **** unsigned char saved_mode;
  94:src/main.c    **** 
  95:src/main.c    **** 
  96:src/main.c    **** unsigned char send_energy = 0;
  97:src/main.c    **** // ------- Externals del o para el ADC -------
  98:src/main.c    **** #ifdef ADC_WITH_INT
  99:src/main.c    **** volatile unsigned short adc_ch[3];
 100:src/main.c    **** volatile unsigned char seq_ready = 0;
 101:src/main.c    **** unsigned short zero_current;
 102:src/main.c    **** #endif
 103:src/main.c    **** 
 104:src/main.c    **** // ------- Externals del GPS & GSM -------
 105:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 106:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 107:src/main.c    **** volatile unsigned char usart1_have_data;
 108:src/main.c    **** unsigned char usart1_pckt_bytes;
 109:src/main.c    **** 
 110:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 111:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 112:src/main.c    **** #define gps_have_data		usart1_have_data
 113:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 114:src/main.c    **** 
 115:src/main.c    **** #ifdef USE_GPS
 116:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 117:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 118:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 119:src/main.c    **** volatile unsigned char usart2_have_data;
 120:src/main.c    **** unsigned char usart2_pckt_bytes;
 121:src/main.c    **** 
 122:src/main.c    **** #endif
 123:src/main.c    **** 
 124:src/main.c    **** // ------- Externals del GSM -------
 125:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 126:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 127:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 128:src/main.c    **** #define gsm_have_data		usart1_have_data
 129:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 130:src/main.c    **** 
 131:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 132:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 133:src/main.c    **** volatile unsigned char usart2_have_data;
 134:src/main.c    **** unsigned char usart2_pckt_bytes;
 135:src/main.c    **** 
 136:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 137:src/main.c    **** #endif
 138:src/main.c    **** 
 139:src/main.c    **** parameters_typedef param_struct;
 140:src/main.c    **** 
ARM GAS  /tmp/ccSzia7W.s 			page 29


 141:src/main.c    **** //--- VARIABLES GLOBALES ---//
 142:src/main.c    **** unsigned short show_power_index = 0;	//lo uso como timer sincronizado con la mediciontick 2 secs.
 143:src/main.c    **** 
 144:src/main.c    **** //para las mediciones
 145:src/main.c    **** // unsigned int power_2secs_acum = 0;
 146:src/main.c    **** // unsigned char power_2secs_index = 0;
 147:src/main.c    **** // unsigned short power_minutes = 0;
 148:src/main.c    **** // unsigned char power_minutes_index = 0;
 149:src/main.c    **** // unsigned short power_hours = 0;
 150:src/main.c    **** 
 151:src/main.c    **** //para los msjs GSM
 152:src/main.c    **** char gsmNUM [20];
 153:src/main.c    **** char gsmMSG [180];
 154:src/main.c    **** 
 155:src/main.c    **** 
 156:src/main.c    **** 
 157:src/main.c    **** 
 158:src/main.c    **** 
 159:src/main.c    **** 
 160:src/main.c    **** // ------- de los timers -------
 161:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 162:src/main.c    **** volatile unsigned short timer_standby;
 163:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 164:src/main.c    **** //volatile unsigned char display_timer;
 165:src/main.c    **** volatile unsigned char timer_meas;
 166:src/main.c    **** 
 167:src/main.c    **** //volatile unsigned char door_filter;
 168:src/main.c    **** //volatile unsigned char take_sample;
 169:src/main.c    **** //volatile unsigned char move_relay;
 170:src/main.c    **** #ifdef WITH_HYST
 171:src/main.c    **** volatile unsigned short secs = 0;
 172:src/main.c    **** volatile unsigned char hours = 0;
 173:src/main.c    **** volatile unsigned char minutes = 0;
 174:src/main.c    **** #endif
 175:src/main.c    **** 
 176:src/main.c    **** #define SIZEOF_POWER_VECT		10
 177:src/main.c    **** 
 178:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 179:src/main.c    **** 
 180:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 181:src/main.c    **** void TimingDelay_Decrement(void);
 182:src/main.c    **** 
 183:src/main.c    **** // ------- del DMX -------
 184:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 185:src/main.c    **** #define DMX_TIMEOUT	20
 186:src/main.c    **** 
 187:src/main.c    **** //--- FILTROS DE SENSORES ---//
 188:src/main.c    **** #define LARGO_FILTRO 16
 189:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 190:src/main.c    **** //#define LARGO_FILTRO 32
 191:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 192:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 193:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 194:src/main.c    **** 
 195:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 196:src/main.c    **** 
 197:src/main.c    **** 
ARM GAS  /tmp/ccSzia7W.s 			page 30


 198:src/main.c    **** //--- Private Definitions ---//
 199:src/main.c    **** #define num_tel_rep		param_struct.num_reportar
 200:src/main.c    **** 
 201:src/main.c    **** 
 202:src/main.c    **** //-------------------------------------------//
 203:src/main.c    **** // @brief  Main program.
 204:src/main.c    **** // @param  None
 205:src/main.c    **** // @retval None
 206:src/main.c    **** //------------------------------------------//
 207:src/main.c    **** int main(void)
 208:src/main.c    **** {
 435              		.loc 2 208 0
 436              		.cfi_startproc
 437 0000 30B5     		push	{r4, r5, lr}	@
 438              	.LCFI4:
 439              		.cfi_def_cfa_offset 12
 440              		.cfi_offset 4, -12
 441              		.cfi_offset 5, -8
 442              		.cfi_offset 14, -4
 443 0002 A5B0     		sub	sp, sp, #148	@,,
 444              	.LCFI5:
 445              		.cfi_def_cfa_offset 160
 209:src/main.c    **** 	unsigned char i, ii;
 210:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 446              		.loc 2 210 0
 447 0004 7323     		movs	r3, #115	@ tmp192,
 448 0006 6B44     		add	r3, r3, sp	@ tmp192,
 449 0008 0022     		movs	r2, #0	@ tmp193,
 450 000a 1A70     		strb	r2, [r3]	@ tmp194, need_ack
 211:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 451              		.loc 2 211 0
 452 000c 7223     		movs	r3, #114	@ tmp195,
 453 000e 6B44     		add	r3, r3, sp	@ tmp195,
 454 0010 0022     		movs	r2, #0	@ tmp196,
 455 0012 1A70     		strb	r2, [r3]	@ tmp197, resp
 212:src/main.c    **** 	unsigned char need_to_save = 0;
 456              		.loc 2 212 0
 457 0014 8E23     		movs	r3, #142	@ tmp198,
 458 0016 6B44     		add	r3, r3, sp	@ tmp198,
 459 0018 0022     		movs	r2, #0	@ tmp199,
 460 001a 1A70     		strb	r2, [r3]	@ tmp200, need_to_save
 213:src/main.c    **** 	// unsigned short wh_int, wh_dec;
 214:src/main.c    **** 	// float fcalc = 1.0;
 215:src/main.c    **** 	unsigned short power, last_power;
 216:src/main.c    **** 	unsigned int zero_current_loc = 0;
 461              		.loc 2 216 0
 462 001c 0023     		movs	r3, #0	@ tmp201,
 463 001e 2193     		str	r3, [sp, #132]	@ tmp201, zero_current_loc
 217:src/main.c    **** 
 218:src/main.c    **** 	unsigned short acum_secs_index;
 219:src/main.c    **** 	unsigned int acum_secs, acum_hours;
 220:src/main.c    **** 	unsigned char show_power = 0;
 464              		.loc 2 220 0
 465 0020 7123     		movs	r3, #113	@ tmp202,
 466 0022 6B44     		add	r3, r3, sp	@ tmp202,
 467 0024 0022     		movs	r2, #0	@ tmp203,
 468 0026 1A70     		strb	r2, [r3]	@ tmp204, show_power
ARM GAS  /tmp/ccSzia7W.s 			page 31


 221:src/main.c    **** 
 222:src/main.c    **** #ifdef USE_REDONDA_BASIC
 223:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 469              		.loc 2 223 0
 470 0028 7723     		movs	r3, #119	@ tmp205,
 471 002a 6B44     		add	r3, r3, sp	@ tmp205,
 472 002c 0022     		movs	r2, #0	@ tmp206,
 473 002e 1A70     		strb	r2, [r3]	@ tmp207, main_state
 224:src/main.c    **** 	unsigned char reportar_SMS = 0;
 474              		.loc 2 224 0
 475 0030 1CAB     		add	r3, sp, #112	@ tmp208,,
 476 0032 0022     		movs	r2, #0	@ tmp209,
 477 0034 1A70     		strb	r2, [r3]	@ tmp210, reportar_SMS
 225:src/main.c    **** 	unsigned char sended = 0;
 478              		.loc 2 225 0
 479 0036 6F23     		movs	r3, #111	@ tmp211,
 480 0038 6B44     		add	r3, r3, sp	@ tmp211,
 481 003a 0022     		movs	r2, #0	@ tmp212,
 482 003c 1A70     		strb	r2, [r3]	@ tmp213, sended
 226:src/main.c    **** 	lamp_on_state_t lamp_on_state = init_airplane0;
 483              		.loc 2 226 0
 484 003e 7623     		movs	r3, #118	@ tmp214,
 485 0040 6B44     		add	r3, r3, sp	@ tmp214,
 486 0042 0022     		movs	r2, #0	@ tmp215,
 487 0044 1A70     		strb	r2, [r3]	@ tmp216, lamp_on_state
 227:src/main.c    **** 	unsigned char counters_mode = 0;
 488              		.loc 2 227 0
 489 0046 7523     		movs	r3, #117	@ tmp217,
 490 0048 6B44     		add	r3, r3, sp	@ tmp217,
 491 004a 0022     		movs	r2, #0	@ tmp218,
 492 004c 1A70     		strb	r2, [r3]	@ tmp219, counters_mode
 228:src/main.c    **** 	unsigned char meas_end = 0;
 493              		.loc 2 228 0
 494 004e 1DAB     		add	r3, sp, #116	@ tmp220,,
 495 0050 0022     		movs	r2, #0	@ tmp221,
 496 0052 1A70     		strb	r2, [r3]	@ tmp222, meas_end
 229:src/main.c    **** 
 230:src/main.c    **** #ifdef WITH_HYST
 231:src/main.c    **** 	unsigned short hyst;
 232:src/main.c    **** #endif
 233:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 234:src/main.c    **** 	unsigned char one_to_ten;
 235:src/main.c    **** #endif
 236:src/main.c    **** 
 237:src/main.c    **** #else		//USE_REDONDA_BASIC
 238:src/main.c    **** 	unsigned char main_state = 0;
 239:src/main.c    **** #endif
 240:src/main.c    **** 	char s_lcd [100];		//lo agrando porque lo uso tambien para enviar SMS
 241:src/main.c    **** 	// enum TcpMessages tcp_msg = NONE_MSG;
 242:src/main.c    **** 	// unsigned char new_room = 0;
 243:src/main.c    **** 	// unsigned char new_lamp = 0;
 244:src/main.c    **** 	// unsigned char last_bright = 0;
 245:src/main.c    **** 	// unsigned char show_ldr = 0;
 246:src/main.c    **** 	// int dummy_resp = 0;
 247:src/main.c    **** 	// unsigned char pps_one = 0;
 248:src/main.c    **** 
 249:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
ARM GAS  /tmp/ccSzia7W.s 			page 32


 250:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 251:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 252:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 253:src/main.c    ****     //   system_stm32f0xx.c file
 254:src/main.c    **** 
 255:src/main.c    **** 	//GPIO Configuration.
 256:src/main.c    **** 	GPIO_Config();
 497              		.loc 2 256 0
 498 0054 FFF7FEFF 		bl	GPIO_Config	@
 257:src/main.c    **** 
 258:src/main.c    **** 
 259:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 260:src/main.c    **** 	if (SysTick_Config(48000))
 499              		.loc 2 260 0
 500 0058 D24B     		ldr	r3, .L81	@ tmp223,
 501 005a 1800     		movs	r0, r3	@, tmp223
 502 005c FFF7FEFF 		bl	SysTick_Config	@
 503 0060 031E     		subs	r3, r0, #0	@ D.7180,,
 504 0062 28D0     		beq	.L13	@,
 505              	.L18:
 261:src/main.c    **** 	{
 262:src/main.c    **** 		while (1)	/* Capture error */
 263:src/main.c    **** 		{
 264:src/main.c    **** 			if (LED)
 506              		.loc 2 264 0
 507 0064 9023     		movs	r3, #144	@ tmp688,
 508 0066 DB05     		lsls	r3, r3, #23	@ D.7181, tmp688,
 509 0068 9B8A     		ldrh	r3, [r3, #20]	@ tmp225,
 510 006a 9BB2     		uxth	r3, r3	@ D.7182, tmp225
 511 006c 1A00     		movs	r2, r3	@ D.7183, D.7182
 512 006e 8023     		movs	r3, #128	@ tmp689,
 513 0070 5B01     		lsls	r3, r3, #5	@ tmp226, tmp689,
 514 0072 1340     		ands	r3, r2	@ D.7183, D.7183
 515 0074 05D0     		beq	.L14	@,
 265:src/main.c    **** 				LED_OFF;
 516              		.loc 2 265 0
 517 0076 9023     		movs	r3, #144	@ tmp686,
 518 0078 DB05     		lsls	r3, r3, #23	@ D.7181, tmp686,
 519 007a 8022     		movs	r2, #128	@ tmp687,
 520 007c 5205     		lsls	r2, r2, #21	@ tmp227, tmp687,
 521 007e 9A61     		str	r2, [r3, #24]	@ tmp227, _123->BSRR
 522 0080 04E0     		b	.L15	@
 523              	.L14:
 266:src/main.c    **** 			else
 267:src/main.c    **** 				LED_ON;
 524              		.loc 2 267 0
 525 0082 9023     		movs	r3, #144	@ tmp684,
 526 0084 DB05     		lsls	r3, r3, #23	@ D.7181, tmp684,
 527 0086 8022     		movs	r2, #128	@ tmp685,
 528 0088 5201     		lsls	r2, r2, #5	@ tmp228, tmp685,
 529 008a 9A61     		str	r2, [r3, #24]	@ tmp228, _125->BSRR
 530              	.L15:
 268:src/main.c    **** 
 269:src/main.c    **** 			for (i = 0; i < 255; i++)
 531              		.loc 2 269 0
 532 008c 8F23     		movs	r3, #143	@ tmp229,
 533 008e 6B44     		add	r3, r3, sp	@ tmp229,
ARM GAS  /tmp/ccSzia7W.s 			page 33


 534 0090 0022     		movs	r2, #0	@ tmp230,
 535 0092 1A70     		strb	r2, [r3]	@ tmp231, i
 536 0094 09E0     		b	.L16	@
 537              	.L17:
 270:src/main.c    **** 			{
 271:src/main.c    **** 				asm (	"nop \n\t"
 538              		.loc 2 271 0 discriminator 3
 539              		.syntax divided
 540              	@ 271 "src/main.c" 1
 541 0096 C046     		nop 
 542 0098 C046     		nop 
 543 009a C046     		nop 
 544              		
 545              	@ 0 "" 2
 269:src/main.c    **** 			{
 546              		.loc 2 269 0 discriminator 3
 547              		.thumb
 548              		.syntax unified
 549 009c 8F23     		movs	r3, #143	@ tmp232,
 550 009e 6B44     		add	r3, r3, sp	@ tmp232,
 551 00a0 1A78     		ldrb	r2, [r3]	@ D.7184, i
 552 00a2 8F23     		movs	r3, #143	@ tmp233,
 553 00a4 6B44     		add	r3, r3, sp	@ tmp233,
 554 00a6 0132     		adds	r2, r2, #1	@ tmp234,
 555 00a8 1A70     		strb	r2, [r3]	@ tmp235, i
 556              	.L16:
 269:src/main.c    **** 			{
 557              		.loc 2 269 0 is_stmt 0 discriminator 1
 558 00aa 8F23     		movs	r3, #143	@ tmp236,
 559 00ac 6B44     		add	r3, r3, sp	@ tmp236,
 560 00ae 1B78     		ldrb	r3, [r3]	@ tmp237, i
 561 00b0 FF2B     		cmp	r3, #255	@ tmp237,
 562 00b2 F0D1     		bne	.L17	@,
 272:src/main.c    **** 						"nop \n\t"
 273:src/main.c    **** 						"nop \n\t" );
 274:src/main.c    **** 			}
 275:src/main.c    **** 		}
 563              		.loc 2 275 0 is_stmt 1
 564 00b4 D6E7     		b	.L18	@
 565              	.L13:
 276:src/main.c    **** 	}
 277:src/main.c    **** 
 278:src/main.c    **** 
 279:src/main.c    **** 	//ADC Configuration
 280:src/main.c    **** //	AdcConfig();
 281:src/main.c    **** 
 282:src/main.c    **** 	//TIM Configuration.
 283:src/main.c    **** 	// TIM_3_Init();
 284:src/main.c    **** //	TIM_14_Init();
 285:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 286:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 287:src/main.c    **** 
 288:src/main.c    **** //	EXTIOff ();
 289:src/main.c    **** 
 290:src/main.c    **** 
 291:src/main.c    **** //		while (1)
 292:src/main.c    **** //		{
ARM GAS  /tmp/ccSzia7W.s 			page 34


 293:src/main.c    **** //			PIN3_OFF;
 294:src/main.c    **** //			Wait_ms (10);
 295:src/main.c    **** //			PIN3_ON;
 296:src/main.c    **** //			Wait_ms (10);
 297:src/main.c    **** //		}
 298:src/main.c    **** 
 299:src/main.c    **** 	//--- Leo los parametros de memoria ---//
 300:src/main.c    **** #ifdef USE_REDONDA_BASIC
 301:src/main.c    **** 	param_struct.acumm_wh = ((parameters_typedef *) (unsigned int *) PAGE63)->acumm_wh;
 566              		.loc 2 301 0
 567 00b6 BC4B     		ldr	r3, .L81+4	@ D.7185,
 568 00b8 9A6C     		ldr	r2, [r3, #72]	@ D.7186, _130->acumm_wh
 569 00ba BC4B     		ldr	r3, .L81+8	@ tmp238,
 570 00bc 9A64     		str	r2, [r3, #72]	@ D.7186, param_struct.acumm_wh
 302:src/main.c    **** 	if (param_struct.acumm_wh != 0xFFFFFFFF)
 571              		.loc 2 302 0
 572 00be BB4B     		ldr	r3, .L81+8	@ tmp239,
 573 00c0 9B6C     		ldr	r3, [r3, #72]	@ D.7186, param_struct.acumm_wh
 574 00c2 0133     		adds	r3, r3, #1	@ tmp690, D.7186,
 575 00c4 04D0     		beq	.L19	@,
 303:src/main.c    **** 	{
 304:src/main.c    **** 		GetFlashConf (&param_struct);
 576              		.loc 2 304 0
 577 00c6 B94B     		ldr	r3, .L81+8	@ tmp240,
 578 00c8 1800     		movs	r0, r3	@, tmp240
 579 00ca FFF7FEFF 		bl	GetFlashConf	@
 580 00ce 15E0     		b	.L20	@
 581              	.L19:
 305:src/main.c    **** 	}
 306:src/main.c    **** 	else
 307:src/main.c    **** 	{
 308:src/main.c    **** 		//memoria vacia
 309:src/main.c    **** 		param_struct.acumm_wh = 0;
 582              		.loc 2 309 0
 583 00d0 B64B     		ldr	r3, .L81+8	@ tmp241,
 584 00d2 0022     		movs	r2, #0	@ tmp242,
 585 00d4 9A64     		str	r2, [r3, #72]	@ tmp242, param_struct.acumm_wh
 310:src/main.c    **** 		param_struct.acumm_w2s = 0;
 586              		.loc 2 310 0
 587 00d6 B54B     		ldr	r3, .L81+8	@ tmp243,
 588 00d8 0022     		movs	r2, #0	@ tmp244,
 589 00da DA64     		str	r2, [r3, #76]	@ tmp244, param_struct.acumm_w2s
 311:src/main.c    **** 		param_struct.acumm_w2s_index = 0;
 590              		.loc 2 311 0
 591 00dc B34B     		ldr	r3, .L81+8	@ tmp245,
 592 00de 5022     		movs	r2, #80	@ tmp246,
 593 00e0 0021     		movs	r1, #0	@ tmp247,
 594 00e2 9952     		strh	r1, [r3, r2]	@ tmp248, param_struct.acumm_w2s_index
 312:src/main.c    **** 		param_struct.timer_reportar = 2;
 595              		.loc 2 312 0
 596 00e4 B14B     		ldr	r3, .L81+8	@ tmp249,
 597 00e6 5222     		movs	r2, #82	@ tmp250,
 598 00e8 0221     		movs	r1, #2	@ tmp251,
 599 00ea 9954     		strb	r1, [r3, r2]	@ tmp252, param_struct.timer_reportar
 313:src/main.c    **** 		//el timer a reportar esta n minutos, yo tengo tick cada 2 segundos
 314:src/main.c    **** 
 315:src/main.c    **** 		strcpy( param_struct.num_reportar, "1149867843");	//segunda sim de claro
ARM GAS  /tmp/ccSzia7W.s 			page 35


 600              		.loc 2 315 0
 601 00ec AF4B     		ldr	r3, .L81+8	@ tmp253,
 602 00ee B04A     		ldr	r2, .L81+12	@ tmp254,
 603 00f0 03CA     		ldmia	r2!, {r0, r1}	@ tmp256, tmp692, tmp691
 604 00f2 03C3     		stmia	r3!, {r0, r1}	@ tmp255, tmp692, tmp691
 605 00f4 1188     		ldrh	r1, [r2]	@ tmp257,
 606 00f6 1980     		strh	r1, [r3]	@ tmp257,
 607 00f8 9278     		ldrb	r2, [r2, #2]	@ tmp258,
 608 00fa 9A70     		strb	r2, [r3, #2]	@ tmp258,
 609              	.L20:
 316:src/main.c    **** 	}
 317:src/main.c    **** #endif
 318:src/main.c    **** 
 319:src/main.c    **** 
 320:src/main.c    **** 	//--- Welcome code ---//
 321:src/main.c    **** 	LED_OFF;
 610              		.loc 2 321 0
 611 00fc 9023     		movs	r3, #144	@ tmp678,
 612 00fe DB05     		lsls	r3, r3, #23	@ D.7181, tmp678,
 613 0100 8022     		movs	r2, #128	@ tmp679,
 614 0102 5205     		lsls	r2, r2, #21	@ tmp259, tmp679,
 615 0104 9A61     		str	r2, [r3, #24]	@ tmp259, _140->BSRR
 322:src/main.c    **** //	EN_GPS_OFF;
 323:src/main.c    **** 	EN_GPS_ON;
 616              		.loc 2 323 0
 617 0106 9023     		movs	r3, #144	@ tmp680,
 618 0108 DB05     		lsls	r3, r3, #23	@ D.7181, tmp680,
 619 010a 8022     		movs	r2, #128	@ tmp681,
 620 010c 1202     		lsls	r2, r2, #8	@ tmp260, tmp681,
 621 010e 9A61     		str	r2, [r3, #24]	@ tmp260, _142->BSRR
 324:src/main.c    **** 	//RELAY_ON;
 325:src/main.c    **** 	RELAY_OFF;
 622              		.loc 2 325 0
 623 0110 9023     		movs	r3, #144	@ tmp682,
 624 0112 DB05     		lsls	r3, r3, #23	@ D.7181, tmp682,
 625 0114 8022     		movs	r2, #128	@ tmp683,
 626 0116 1205     		lsls	r2, r2, #20	@ tmp261, tmp683,
 627 0118 9A61     		str	r2, [r3, #24]	@ tmp261, _144->BSRR
 326:src/main.c    **** 
 327:src/main.c    **** 	USART1Config();
 628              		.loc 2 327 0
 629 011a FFF7FEFF 		bl	USART1Config	@
 328:src/main.c    **** 	USART2Config();
 630              		.loc 2 328 0
 631 011e FFF7FEFF 		bl	USART2Config	@
 329:src/main.c    **** 
 330:src/main.c    **** 	EXTIOff();
 632              		.loc 2 330 0
 633 0122 FFF7FEFF 		bl	EXTIOff	@
 331:src/main.c    **** 
 332:src/main.c    **** 
 333:src/main.c    **** 
 334:src/main.c    **** //---------- Pruebas con GSM GATEWAY --------//
 335:src/main.c    **** #ifdef USE_GSM_GATEWAY
 336:src/main.c    **** 	LED_OFF;
 337:src/main.c    **** 	for (i = 0; i < 6; i++)
 338:src/main.c    **** 	{
ARM GAS  /tmp/ccSzia7W.s 			page 36


 339:src/main.c    **** 		if (LED)
 340:src/main.c    **** 			LED_OFF;
 341:src/main.c    **** 		else
 342:src/main.c    **** 			LED_ON;
 343:src/main.c    **** 
 344:src/main.c    **** 		Wait_ms (300);
 345:src/main.c    **** 	}
 346:src/main.c    **** 
 347:src/main.c    **** 	Wait_ms (3000);
 348:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 349:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 350:src/main.c    **** 
 351:src/main.c    **** 	//mando start al gsm
 352:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 353:src/main.c    **** 	//GPSStartResetSM ();
 354:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 355:src/main.c    **** 	while (timer_standby)
 356:src/main.c    **** 	{
 357:src/main.c    **** 		i = GSM_Start();
 358:src/main.c    **** 		if (i == 1)
 359:src/main.c    **** 		{
 360:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 361:src/main.c    **** 			timer_standby = 0;
 362:src/main.c    **** 		}
 363:src/main.c    **** 		else
 364:src/main.c    **** 
 365:src/main.c    **** 		if (i > 1)
 366:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 367:src/main.c    **** 	}
 368:src/main.c    **** 
 369:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 370:src/main.c    **** 
 371:src/main.c    **** 	while (1)
 372:src/main.c    **** 	{
 373:src/main.c    **** 		GSMProcess();
 374:src/main.c    **** 
 375:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 376:src/main.c    **** 		{
 377:src/main.c    **** 			usart2_pckt_ready = 0;
 378:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 379:src/main.c    **** 		}
 380:src/main.c    **** 
 381:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 382:src/main.c    **** 		{
 383:src/main.c    **** 			gsm_pckt_ready = 0;
 384:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 385:src/main.c    **** 		}
 386:src/main.c    **** 
 387:src/main.c    **** 		if (LIGHT)
 388:src/main.c    **** 			LED_ON;
 389:src/main.c    **** 		else
 390:src/main.c    **** 			LED_OFF;
 391:src/main.c    **** 	}
 392:src/main.c    **** #endif
 393:src/main.c    **** //---------- Fin Prueba con GSM GATEWAY --------//
 394:src/main.c    **** 
 395:src/main.c    **** 
ARM GAS  /tmp/ccSzia7W.s 			page 37


 396:src/main.c    **** 
 397:src/main.c    **** 
 398:src/main.c    **** 
 399:src/main.c    **** #ifdef USE_REDONDA_BASIC
 400:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 401:src/main.c    **** 	// USART1Config();
 402:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 634              		.loc 2 402 0
 635 0126 FFF7FEFF 		bl	AdcConfig	@
 403:src/main.c    **** 
 404:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 405:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 636              		.loc 2 405 0
 637 012a FFF7FEFF 		bl	TIM_3_Init	@
 406:src/main.c    **** #endif
 407:src/main.c    **** 
 408:src/main.c    **** 	TIM_16_Init();					//o utilizo para synchro de relay
 638              		.loc 2 408 0
 639 012e FFF7FEFF 		bl	TIM_16_Init	@
 409:src/main.c    **** 	TIM16Enable();
 640              		.loc 2 409 0
 641 0132 FFF7FEFF 		bl	TIM16Enable	@
 410:src/main.c    **** 
 411:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 642              		.loc 2 411 0
 643 0136 9F4B     		ldr	r3, .L81+16	@ tmp262,
 644 0138 1800     		movs	r0, r3	@, tmp262
 645 013a FFF7FEFF 		bl	Usart2Send	@
 412:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 646              		.loc 2 412 0
 647 013e 9E4B     		ldr	r3, .L81+20	@ tmp263,
 648 0140 1800     		movs	r0, r3	@, tmp263
 649 0142 FFF7FEFF 		bl	Usart2Send	@
 413:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 414:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 650              		.loc 2 414 0
 651 0146 9D4B     		ldr	r3, .L81+24	@ tmp264,
 652 0148 1800     		movs	r0, r3	@, tmp264
 653 014a FFF7FEFF 		bl	Usart2Send	@
 415:src/main.c    **** 	#endif
 416:src/main.c    **** 	#ifdef WITH_HYST
 417:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 654              		.loc 2 417 0
 655 014e 9C4B     		ldr	r3, .L81+28	@ tmp265,
 656 0150 1800     		movs	r0, r3	@, tmp265
 657 0152 FFF7FEFF 		bl	Usart2Send	@
 418:src/main.c    **** 	#endif
 419:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 420:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 421:src/main.c    **** 	#endif
 422:src/main.c    **** 	#ifdef USE_WITH_SYNC
 423:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 424:src/main.c    **** 	#else
 425:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 658              		.loc 2 425 0
 659 0156 9B4B     		ldr	r3, .L81+32	@ tmp266,
 660 0158 1800     		movs	r0, r3	@, tmp266
ARM GAS  /tmp/ccSzia7W.s 			page 38


 661 015a FFF7FEFF 		bl	Usart2Send	@
 426:src/main.c    **** 	#endif
 427:src/main.c    **** 	#ifdef USE_GSM
 428:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 662              		.loc 2 428 0
 663 015e 9A4B     		ldr	r3, .L81+36	@ tmp267,
 664 0160 1800     		movs	r0, r3	@, tmp267
 665 0162 FFF7FEFF 		bl	Usart2Send	@
 429:src/main.c    **** 	#endif
 430:src/main.c    **** 
 431:src/main.c    **** 
 432:src/main.c    **** 
 433:src/main.c    **** 	for (i = 0; i < 8; i++)
 666              		.loc 2 433 0
 667 0166 8F23     		movs	r3, #143	@ tmp268,
 668 0168 6B44     		add	r3, r3, sp	@ tmp268,
 669 016a 0022     		movs	r2, #0	@ tmp269,
 670 016c 1A70     		strb	r2, [r3]	@ tmp270, i
 671 016e 1DE0     		b	.L21	@
 672              	.L24:
 434:src/main.c    **** 	{
 435:src/main.c    **** 		if (LED)
 673              		.loc 2 435 0
 674 0170 9023     		movs	r3, #144	@ tmp676,
 675 0172 DB05     		lsls	r3, r3, #23	@ D.7181, tmp676,
 676 0174 9B8A     		ldrh	r3, [r3, #20]	@ tmp272,
 677 0176 9BB2     		uxth	r3, r3	@ D.7182, tmp272
 678 0178 1A00     		movs	r2, r3	@ D.7183, D.7182
 679 017a 8023     		movs	r3, #128	@ tmp677,
 680 017c 5B01     		lsls	r3, r3, #5	@ tmp273, tmp677,
 681 017e 1340     		ands	r3, r2	@ D.7183, D.7183
 682 0180 05D0     		beq	.L22	@,
 436:src/main.c    **** 			LED_OFF;
 683              		.loc 2 436 0
 684 0182 9023     		movs	r3, #144	@ tmp674,
 685 0184 DB05     		lsls	r3, r3, #23	@ D.7181, tmp674,
 686 0186 8022     		movs	r2, #128	@ tmp675,
 687 0188 5205     		lsls	r2, r2, #21	@ tmp274, tmp675,
 688 018a 9A61     		str	r2, [r3, #24]	@ tmp274, _164->BSRR
 689 018c 04E0     		b	.L23	@
 690              	.L22:
 437:src/main.c    **** 		else
 438:src/main.c    **** 			LED_ON;
 691              		.loc 2 438 0
 692 018e 9023     		movs	r3, #144	@ tmp672,
 693 0190 DB05     		lsls	r3, r3, #23	@ D.7181, tmp672,
 694 0192 8022     		movs	r2, #128	@ tmp673,
 695 0194 5201     		lsls	r2, r2, #5	@ tmp275, tmp673,
 696 0196 9A61     		str	r2, [r3, #24]	@ tmp275, _166->BSRR
 697              	.L23:
 439:src/main.c    **** 
 440:src/main.c    **** 		Wait_ms (250);
 698              		.loc 2 440 0 discriminator 2
 699 0198 FA20     		movs	r0, #250	@,
 700 019a FFF7FEFF 		bl	Wait_ms	@
 433:src/main.c    **** 	{
 701              		.loc 2 433 0 discriminator 2
ARM GAS  /tmp/ccSzia7W.s 			page 39


 702 019e 8F23     		movs	r3, #143	@ tmp276,
 703 01a0 6B44     		add	r3, r3, sp	@ tmp276,
 704 01a2 1A78     		ldrb	r2, [r3]	@ D.7184, i
 705 01a4 8F23     		movs	r3, #143	@ tmp277,
 706 01a6 6B44     		add	r3, r3, sp	@ tmp277,
 707 01a8 0132     		adds	r2, r2, #1	@ tmp278,
 708 01aa 1A70     		strb	r2, [r3]	@ tmp279, i
 709              	.L21:
 433:src/main.c    **** 	{
 710              		.loc 2 433 0 is_stmt 0 discriminator 1
 711 01ac 8F23     		movs	r3, #143	@ tmp280,
 712 01ae 6B44     		add	r3, r3, sp	@ tmp280,
 713 01b0 1B78     		ldrb	r3, [r3]	@ tmp281, i
 714 01b2 072B     		cmp	r3, #7	@ tmp281,
 715 01b4 DCD9     		bls	.L24	@,
 441:src/main.c    **** 	}
 442:src/main.c    **** 
 443:src/main.c    **** 
 444:src/main.c    **** 	timer_standby = 2000;
 716              		.loc 2 444 0 is_stmt 1
 717 01b6 854B     		ldr	r3, .L81+40	@ tmp282,
 718 01b8 FA22     		movs	r2, #250	@ tmp671,
 719 01ba D200     		lsls	r2, r2, #3	@ tmp283, tmp671,
 720 01bc 1A80     		strh	r2, [r3]	@ tmp284, timer_standby
 445:src/main.c    **** 	FuncsGSMReset();
 721              		.loc 2 445 0
 722 01be FFF7FEFF 		bl	FuncsGSMReset	@
 446:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 723              		.loc 2 446 0
 724 01c2 0220     		movs	r0, #2	@,
 725 01c4 FFF7FEFF 		bl	Usart1Mode	@
 726              	.L71:
 447:src/main.c    **** 
 448:src/main.c    **** 	// while (1)
 449:src/main.c    **** 	// {
 450:src/main.c    **** 	// 	if (SYNCP)
 451:src/main.c    **** 	// 	{
 452:src/main.c    **** 	// 		SYNCP_OFF;
 453:src/main.c    **** 	// 		LED_OFF;
 454:src/main.c    **** 	// 	}
 455:src/main.c    **** 	// 	else
 456:src/main.c    **** 	// 	{
 457:src/main.c    **** 	// 		SYNCP_ON;
 458:src/main.c    **** 	// 		LED_ON;
 459:src/main.c    **** 	// 	}
 460:src/main.c    **** 	// 	Wait_ms(10);
 461:src/main.c    **** 	//
 462:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 463:src/main.c    **** 	// 	// {
 464:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 465:src/main.c    **** 	// 	// 	Wait_ms (10);
 466:src/main.c    **** 	// 	// }
 467:src/main.c    **** 	// }
 468:src/main.c    **** 
 469:src/main.c    **** 
 470:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 471:src/main.c    **** 	// while (1)
ARM GAS  /tmp/ccSzia7W.s 			page 40


 472:src/main.c    **** 	// {
 473:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 474:src/main.c    **** 	// 	{
 475:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 476:src/main.c    **** 	// 		Wait_ms(10);
 477:src/main.c    **** 	// 	}
 478:src/main.c    **** 	//
 479:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 480:src/main.c    **** 	// 	{
 481:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 482:src/main.c    **** 	// 		Wait_ms(10);
 483:src/main.c    **** 	// 	}
 484:src/main.c    **** 	// }
 485:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 486:src/main.c    **** 
 487:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 488:src/main.c    **** 	// i = 0;
 489:src/main.c    **** 	// while (1)
 490:src/main.c    **** 	// {
 491:src/main.c    **** 	// 	switch (i)
 492:src/main.c    **** 	// 	{
 493:src/main.c    **** 	// 		case 0:
 494:src/main.c    **** 	// 			//habilitar y esperar el final de la secuencia
 495:src/main.c    **** 	// 			ADC1->CR |= ADC_CR_ADSTART;
 496:src/main.c    **** 	// 			seq_ready = 0;
 497:src/main.c    **** 	// 			i++;
 498:src/main.c    **** 	// 			break;
 499:src/main.c    **** 	//
 500:src/main.c    **** 	// 		case 1:
 501:src/main.c    **** 	// 			if (seq_ready)		//esoty sincronizado
 502:src/main.c    **** 	// 				i++;
 503:src/main.c    **** 	// 			break;
 504:src/main.c    **** 	//
 505:src/main.c    **** 	// 		case 2:
 506:src/main.c    **** 	// 			RelayOn();
 507:src/main.c    **** 	// 			timer_standby = 50;
 508:src/main.c    **** 	// 			LED_ON;
 509:src/main.c    **** 	// 			i++;
 510:src/main.c    **** 	// 			break;
 511:src/main.c    **** 	//
 512:src/main.c    **** 	// 		case 3:
 513:src/main.c    **** 	// 			if (!timer_standby)
 514:src/main.c    **** 	// 			{
 515:src/main.c    **** 	// 				RelayOff();
 516:src/main.c    **** 	// 				LED_OFF;
 517:src/main.c    **** 	// 				i++;
 518:src/main.c    **** 	// 				timer_standby = 10000;
 519:src/main.c    **** 	// 			}
 520:src/main.c    **** 	// 			break;
 521:src/main.c    **** 	//
 522:src/main.c    **** 	// 		case 4:
 523:src/main.c    **** 	// 			if (!timer_standby)
 524:src/main.c    **** 	// 			{
 525:src/main.c    **** 	// 				i = 2;
 526:src/main.c    **** 	// 			}
 527:src/main.c    **** 	// 			break;
 528:src/main.c    **** 	// 	}
ARM GAS  /tmp/ccSzia7W.s 			page 41


 529:src/main.c    **** 	//
 530:src/main.c    **** 	// 	UpdateRelay ();
 531:src/main.c    **** 	// }
 532:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 533:src/main.c    **** 
 534:src/main.c    **** 
 535:src/main.c    **** //--- Programa de pruebas I meas -----
 536:src/main.c    **** 	while (1)
 537:src/main.c    **** 	{
 538:src/main.c    **** 		switch (main_state)
 727              		.loc 2 538 0
 728 01c8 7723     		movs	r3, #119	@ tmp285,
 729 01ca 6B44     		add	r3, r3, sp	@ tmp285,
 730 01cc 1B78     		ldrb	r3, [r3]	@ D.7183, main_state
 731 01ce 0B2B     		cmp	r3, #11	@ D.7183,
 732 01d0 00D9     		bls	.LCB457	@
 733 01d2 BEE2     		b	.L25	@long jump	@
 734              	.LCB457:
 735 01d4 9A00     		lsls	r2, r3, #2	@ tmp286, D.7183,
 736 01d6 7E4B     		ldr	r3, .L81+44	@ tmp288,
 737 01d8 D318     		adds	r3, r2, r3	@ tmp287, tmp286, tmp288
 738 01da 1B68     		ldr	r3, [r3]	@ tmp289,
 739 01dc 9F46     		mov	pc, r3	@ tmp289
 740              		.section	.rodata.main,"a",%progbits
 741              		.align	2
 742              	.L27:
 743 0000 DE010000 		.word	.L26
 744 0004 00020000 		.word	.L28
 745 0008 38020000 		.word	.L29
 746 000c B0020000 		.word	.L30
 747 0010 0A030000 		.word	.L31
 748 0014 0C040000 		.word	.L32
 749 0018 52070000 		.word	.L25
 750 001c 52070000 		.word	.L25
 751 0020 52070000 		.word	.L25
 752 0024 6A040000 		.word	.L33
 753 0028 18070000 		.word	.L34
 754 002c 34070000 		.word	.L35
 755              		.section	.text.main
 756              	.L26:
 539:src/main.c    **** 		{
 540:src/main.c    **** 			case MAIN_INIT:
 541:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 757              		.loc 2 541 0
 758 01de 0A20     		movs	r0, #10	@,
 759 01e0 FFF7FEFF 		bl	Update_TIM3_CH1	@
 542:src/main.c    **** 				main_state = SYNCHRO_ADC;
 760              		.loc 2 542 0
 761 01e4 7723     		movs	r3, #119	@ tmp290,
 762 01e6 6B44     		add	r3, r3, sp	@ tmp290,
 763 01e8 0122     		movs	r2, #1	@ tmp291,
 764 01ea 1A70     		strb	r2, [r3]	@ tmp292, main_state
 543:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 765              		.loc 2 543 0
 766 01ec 794B     		ldr	r3, .L81+48	@ D.7187,
 767 01ee 794A     		ldr	r2, .L81+48	@ D.7187,
 768 01f0 9268     		ldr	r2, [r2, #8]	@ D.7180, _183->CR
ARM GAS  /tmp/ccSzia7W.s 			page 42


 769 01f2 0421     		movs	r1, #4	@ tmp293,
 770 01f4 0A43     		orrs	r2, r1	@ D.7180, tmp293
 771 01f6 9A60     		str	r2, [r3, #8]	@ D.7180, _182->CR
 544:src/main.c    **** 				seq_ready = 0;
 772              		.loc 2 544 0
 773 01f8 774B     		ldr	r3, .L81+52	@ tmp294,
 774 01fa 0022     		movs	r2, #0	@ tmp295,
 775 01fc 1A70     		strb	r2, [r3]	@ tmp296, seq_ready
 545:src/main.c    **** 				break;
 776              		.loc 2 545 0
 777 01fe E2E2     		b	.L36	@
 778              	.L28:
 546:src/main.c    **** 
 547:src/main.c    **** 			case SYNCHRO_ADC:
 548:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 779              		.loc 2 548 0
 780 0200 754B     		ldr	r3, .L81+52	@ tmp297,
 781 0202 1B78     		ldrb	r3, [r3]	@ tmp298, seq_ready
 782 0204 DBB2     		uxtb	r3, r3	@ D.7184, tmp298
 783 0206 002B     		cmp	r3, #0	@ D.7184,
 784 0208 00D1     		bne	.LCB492	@
 785 020a A7E2     		b	.L72	@long jump	@
 786              	.LCB492:
 549:src/main.c    **** 				{
 550:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 787              		.loc 2 550 0
 788 020c 734B     		ldr	r3, .L81+56	@ tmp299,
 789 020e 1800     		movs	r0, r3	@, tmp299
 790 0210 FFF7FEFF 		bl	Usart2Send	@
 551:src/main.c    **** 
 552:src/main.c    **** #ifdef USE_GSM
 553:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 791              		.loc 2 553 0
 792 0214 724B     		ldr	r3, .L81+60	@ tmp300,
 793 0216 1800     		movs	r0, r3	@, tmp300
 794 0218 FFF7FEFF 		bl	Usart2Send	@
 554:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 795              		.loc 2 554 0
 796 021c 7723     		movs	r3, #119	@ tmp301,
 797 021e 6B44     		add	r3, r3, sp	@ tmp301,
 798 0220 0222     		movs	r2, #2	@ tmp302,
 799 0222 1A70     		strb	r2, [r3]	@ tmp303, main_state
 555:src/main.c    **** 					timer_standby = 0;
 800              		.loc 2 555 0
 801 0224 694B     		ldr	r3, .L81+40	@ tmp304,
 802 0226 0022     		movs	r2, #0	@ tmp305,
 803 0228 1A80     		strh	r2, [r3]	@ tmp306, timer_standby
 556:src/main.c    **** 					zero_current_loc = 0;
 804              		.loc 2 556 0
 805 022a 0023     		movs	r3, #0	@ tmp307,
 806 022c 2193     		str	r3, [sp, #132]	@ tmp307, zero_current_loc
 557:src/main.c    **** 					i = 0;
 807              		.loc 2 557 0
 808 022e 8F23     		movs	r3, #143	@ tmp308,
 809 0230 6B44     		add	r3, r3, sp	@ tmp308,
 810 0232 0022     		movs	r2, #0	@ tmp309,
 811 0234 1A70     		strb	r2, [r3]	@ tmp310, i
ARM GAS  /tmp/ccSzia7W.s 			page 43


 558:src/main.c    **** #else
 559:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 560:src/main.c    **** 					timer_standby = 60000;
 561:src/main.c    **** 					zero_current_loc = 0;
 562:src/main.c    **** 					i = 0;
 563:src/main.c    **** #endif
 564:src/main.c    **** 				}
 565:src/main.c    **** 				break;
 812              		.loc 2 565 0
 813 0236 91E2     		b	.L72	@
 814              	.L29:
 566:src/main.c    **** 
 567:src/main.c    **** 			case SET_ZERO_CURRENT:
 568:src/main.c    **** 				if ((!timer_standby) && (mains_voltage_filtered > CONNECT_VOLTAGE))
 815              		.loc 2 568 0
 816 0238 644B     		ldr	r3, .L81+40	@ tmp311,
 817 023a 1B88     		ldrh	r3, [r3]	@ tmp312, timer_standby
 818 023c 9BB2     		uxth	r3, r3	@ D.7182, tmp312
 819 023e 002B     		cmp	r3, #0	@ D.7182,
 820 0240 00D0     		beq	.LCB520	@
 821 0242 8DE2     		b	.L73	@long jump	@
 822              	.LCB520:
 823              		.loc 2 568 0 is_stmt 0 discriminator 1
 824 0244 674B     		ldr	r3, .L81+64	@ tmp313,
 825 0246 1B88     		ldrh	r3, [r3]	@ D.7182, mains_voltage_filtered
 826 0248 674A     		ldr	r2, .L81+68	@ tmp314,
 827 024a 9342     		cmp	r3, r2	@ D.7182, tmp314
 828 024c 00D8     		bhi	.LCB525	@
 829 024e 87E2     		b	.L73	@long jump	@
 830              	.LCB525:
 569:src/main.c    **** 				{
 570:src/main.c    **** 					if (i < 32)
 831              		.loc 2 570 0 is_stmt 1
 832 0250 8F23     		movs	r3, #143	@ tmp315,
 833 0252 6B44     		add	r3, r3, sp	@ tmp315,
 834 0254 1B78     		ldrb	r3, [r3]	@ tmp316, i
 835 0256 1F2B     		cmp	r3, #31	@ tmp316,
 836 0258 1AD8     		bhi	.L39	@,
 571:src/main.c    **** 					{
 572:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 837              		.loc 2 572 0
 838 025a 5F4B     		ldr	r3, .L81+52	@ tmp317,
 839 025c 1B78     		ldrb	r3, [r3]	@ tmp318, seq_ready
 840 025e DBB2     		uxtb	r3, r3	@ D.7184, tmp318
 841 0260 002B     		cmp	r3, #0	@ D.7184,
 842 0262 00D1     		bne	.LCB535	@
 843 0264 7CE2     		b	.L73	@long jump	@
 844              	.LCB535:
 573:src/main.c    **** 						{
 574:src/main.c    **** 							seq_ready = 0;
 845              		.loc 2 574 0
 846 0266 5C4B     		ldr	r3, .L81+52	@ tmp319,
 847 0268 0022     		movs	r2, #0	@ tmp320,
 848 026a 1A70     		strb	r2, [r3]	@ tmp321, seq_ready
 575:src/main.c    **** 							zero_current_loc += I_Sense;
 849              		.loc 2 575 0
 850 026c 5F4B     		ldr	r3, .L81+72	@ tmp322,
ARM GAS  /tmp/ccSzia7W.s 			page 44


 851 026e 9B88     		ldrh	r3, [r3, #4]	@ tmp324,
 852 0270 9BB2     		uxth	r3, r3	@ D.7182, tmp324
 853 0272 1A00     		movs	r2, r3	@ D.7186, D.7182
 854 0274 219B     		ldr	r3, [sp, #132]	@ tmp326, zero_current_loc
 855 0276 9B18     		adds	r3, r3, r2	@ tmp325, tmp326, D.7186
 856 0278 2193     		str	r3, [sp, #132]	@ tmp325, zero_current_loc
 576:src/main.c    **** 							i++;
 857              		.loc 2 576 0
 858 027a 8F23     		movs	r3, #143	@ tmp327,
 859 027c 6B44     		add	r3, r3, sp	@ tmp327,
 860 027e 1A78     		ldrb	r2, [r3]	@ D.7184, i
 861 0280 8F23     		movs	r3, #143	@ tmp328,
 862 0282 6B44     		add	r3, r3, sp	@ tmp328,
 863 0284 0132     		adds	r2, r2, #1	@ tmp329,
 864 0286 1A70     		strb	r2, [r3]	@ tmp330, i
 577:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 865              		.loc 2 577 0
 866 0288 504B     		ldr	r3, .L81+40	@ tmp331,
 867 028a 0222     		movs	r2, #2	@ tmp332,
 868 028c 1A80     		strh	r2, [r3]	@ tmp333, timer_standby
 578:src/main.c    **** 						}
 579:src/main.c    **** 					}
 580:src/main.c    **** 					else
 581:src/main.c    **** 					{
 582:src/main.c    **** 						zero_current_loc >>= 5;
 583:src/main.c    **** 						zero_current = zero_current_loc;
 584:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
 585:src/main.c    **** 						i = 0;
 586:src/main.c    **** 					}
 587:src/main.c    **** 				}
 588:src/main.c    **** 				break;
 869              		.loc 2 588 0
 870 028e 67E2     		b	.L73	@
 871              	.L39:
 582:src/main.c    **** 						zero_current = zero_current_loc;
 872              		.loc 2 582 0
 873 0290 219B     		ldr	r3, [sp, #132]	@ tmp335, zero_current_loc
 874 0292 5B09     		lsrs	r3, r3, #5	@ tmp334, tmp335,
 875 0294 2193     		str	r3, [sp, #132]	@ tmp334, zero_current_loc
 583:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
 876              		.loc 2 583 0
 877 0296 219B     		ldr	r3, [sp, #132]	@ tmp337, zero_current_loc
 878 0298 9AB2     		uxth	r2, r3	@ D.7182, tmp336
 879 029a 554B     		ldr	r3, .L81+76	@ tmp338,
 880 029c 1A80     		strh	r2, [r3]	@ tmp339, zero_current
 584:src/main.c    **** 						i = 0;
 881              		.loc 2 584 0
 882 029e 7723     		movs	r3, #119	@ tmp340,
 883 02a0 6B44     		add	r3, r3, sp	@ tmp340,
 884 02a2 0322     		movs	r2, #3	@ tmp341,
 885 02a4 1A70     		strb	r2, [r3]	@ tmp342, main_state
 585:src/main.c    **** 					}
 886              		.loc 2 585 0
 887 02a6 8F23     		movs	r3, #143	@ tmp343,
 888 02a8 6B44     		add	r3, r3, sp	@ tmp343,
 889 02aa 0022     		movs	r2, #0	@ tmp344,
 890 02ac 1A70     		strb	r2, [r3]	@ tmp345, i
ARM GAS  /tmp/ccSzia7W.s 			page 45


 891              		.loc 2 588 0
 892 02ae 57E2     		b	.L73	@
 893              	.L30:
 589:src/main.c    **** 
 590:src/main.c    **** 			case SET_COUNTERS_AND_PHONE0:
 591:src/main.c    **** 				//cargo contadores desde la flash
 592:src/main.c    **** 				acum_secs = param_struct.acumm_w2s;
 894              		.loc 2 592 0
 895 02b0 3E4B     		ldr	r3, .L81+8	@ tmp346,
 896 02b2 DB6C     		ldr	r3, [r3, #76]	@ tmp347, param_struct.acumm_w2s
 897 02b4 1F93     		str	r3, [sp, #124]	@ tmp347, acum_secs
 593:src/main.c    **** 				acum_secs_index = param_struct.acumm_w2s_index;
 898              		.loc 2 593 0
 899 02b6 8223     		movs	r3, #130	@ tmp348,
 900 02b8 6B44     		add	r3, r3, sp	@ tmp348,
 901 02ba 3C4A     		ldr	r2, .L81+8	@ tmp349,
 902 02bc 5021     		movs	r1, #80	@ tmp350,
 903 02be 525A     		ldrh	r2, [r2, r1]	@ tmp351,
 904 02c0 1A80     		strh	r2, [r3]	@ tmp351, acum_secs_index
 594:src/main.c    **** 				acum_hours = param_struct.acumm_wh;
 905              		.loc 2 594 0
 906 02c2 3A4B     		ldr	r3, .L81+8	@ tmp352,
 907 02c4 9B6C     		ldr	r3, [r3, #72]	@ tmp353, param_struct.acumm_wh
 908 02c6 1E93     		str	r3, [sp, #120]	@ tmp353, acum_hours
 595:src/main.c    **** 
 596:src/main.c    **** 				counters_mode = 0;
 909              		.loc 2 596 0
 910 02c8 7523     		movs	r3, #117	@ tmp354,
 911 02ca 6B44     		add	r3, r3, sp	@ tmp354,
 912 02cc 0022     		movs	r2, #0	@ tmp355,
 913 02ce 1A70     		strb	r2, [r3]	@ tmp356, counters_mode
 597:src/main.c    **** 				LED_OFF;
 914              		.loc 2 597 0
 915 02d0 9023     		movs	r3, #144	@ tmp669,
 916 02d2 DB05     		lsls	r3, r3, #23	@ D.7181, tmp669,
 917 02d4 8022     		movs	r2, #128	@ tmp670,
 918 02d6 5205     		lsls	r2, r2, #21	@ tmp357, tmp670,
 919 02d8 9A61     		str	r2, [r3, #24]	@ tmp357, _214->BSRR
 598:src/main.c    **** 
 599:src/main.c    **** 				//espero que el telefono este libre
 600:src/main.c    **** 				//TODO: timeout aca
 601:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_ready)
 920              		.loc 2 601 0
 921 02da FFF7FEFF 		bl	FuncsGSMStateAsk	@
 922 02de 031E     		subs	r3, r0, #0	@ tmp358,,
 923 02e0 052B     		cmp	r3, #5	@ tmp358,
 924 02e2 00D0     		beq	.LCB603	@
 925 02e4 3EE2     		b	.L74	@long jump	@
 926              	.LCB603:
 602:src/main.c    **** 				{
 603:src/main.c    **** 					Usart2Send((char *) (const char *) "Reports by SMS\r\n");
 927              		.loc 2 603 0
 928 02e6 434B     		ldr	r3, .L81+80	@ tmp360,
 929 02e8 1800     		movs	r0, r3	@, tmp360
 930 02ea FFF7FEFF 		bl	Usart2Send	@
 604:src/main.c    **** 					main_state = SET_COUNTERS_AND_PHONE1;
 931              		.loc 2 604 0
ARM GAS  /tmp/ccSzia7W.s 			page 46


 932 02ee 7723     		movs	r3, #119	@ tmp361,
 933 02f0 6B44     		add	r3, r3, sp	@ tmp361,
 934 02f2 0422     		movs	r2, #4	@ tmp362,
 935 02f4 1A70     		strb	r2, [r3]	@ tmp363, main_state
 605:src/main.c    **** 
 606:src/main.c    **** 					//pido imei
 607:src/main.c    **** 					s_lcd[0] = '\0';
 936              		.loc 2 607 0
 937 02f6 01AB     		add	r3, sp, #4	@ tmp364,,
 938 02f8 0022     		movs	r2, #0	@ tmp365,
 939 02fa 1A70     		strb	r2, [r3]	@ tmp366, s_lcd
 608:src/main.c    **** 					FuncsGSMCommandAnswer ("AT+GSN\r\n" , s_lcd);
 940              		.loc 2 608 0
 941 02fc 01AA     		add	r2, sp, #4	@ tmp367,,
 942 02fe 3E4B     		ldr	r3, .L81+84	@ tmp368,
 943 0300 1100     		movs	r1, r2	@, tmp367
 944 0302 1800     		movs	r0, r3	@, tmp368
 945 0304 FFF7FEFF 		bl	FuncsGSMCommandAnswer	@
 609:src/main.c    **** 				}
 610:src/main.c    **** 				break;
 946              		.loc 2 610 0
 947 0308 2CE2     		b	.L74	@
 948              	.L31:
 611:src/main.c    **** 
 612:src/main.c    **** 			case SET_COUNTERS_AND_PHONE1:
 613:src/main.c    **** 				//espero que el telefono este libre
 614:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_ready)
 949              		.loc 2 614 0
 950 030a FFF7FEFF 		bl	FuncsGSMStateAsk	@
 951 030e 031E     		subs	r3, r0, #0	@ tmp369,,
 952 0310 052B     		cmp	r3, #5	@ tmp369,
 953 0312 00D0     		beq	.LCB626	@
 954 0314 28E2     		b	.L75	@long jump	@
 955              	.LCB626:
 615:src/main.c    **** 				{
 616:src/main.c    **** 					i = strlen(s_lcd);
 956              		.loc 2 616 0
 957 0316 01AB     		add	r3, sp, #4	@ tmp371,,
 958 0318 1800     		movs	r0, r3	@, tmp371
 959 031a FFF7FEFF 		bl	strlen	@
 960 031e 0200     		movs	r2, r0	@ D.7186,
 961 0320 8F23     		movs	r3, #143	@ tmp372,
 962 0322 6B44     		add	r3, r3, sp	@ tmp372,
 963 0324 1A70     		strb	r2, [r3]	@ tmp373, i
 617:src/main.c    **** 					strncpy(param_struct.imei, s_lcd, (i - 2));
 964              		.loc 2 617 0
 965 0326 8F23     		movs	r3, #143	@ tmp374,
 966 0328 6B44     		add	r3, r3, sp	@ tmp374,
 967 032a 1B78     		ldrb	r3, [r3]	@ D.7183, i
 968 032c 023B     		subs	r3, r3, #2	@ D.7183,
 969 032e 1A00     		movs	r2, r3	@ D.7186, D.7183
 970 0330 01A9     		add	r1, sp, #4	@ tmp375,,
 971 0332 324B     		ldr	r3, .L81+88	@ tmp376,
 972 0334 1800     		movs	r0, r3	@, tmp376
 973 0336 FFF7FEFF 		bl	strncpy	@
 618:src/main.c    **** 					Usart2Send("IMEI: ");
 974              		.loc 2 618 0
ARM GAS  /tmp/ccSzia7W.s 			page 47


 975 033a 314B     		ldr	r3, .L81+92	@ tmp377,
 976 033c 1800     		movs	r0, r3	@, tmp377
 977 033e FFF7FEFF 		bl	Usart2Send	@
 619:src/main.c    **** 					Usart2Send(param_struct.imei);
 978              		.loc 2 619 0
 979 0342 2E4B     		ldr	r3, .L81+88	@ tmp378,
 980 0344 1800     		movs	r0, r3	@, tmp378
 981 0346 FFF7FEFF 		bl	Usart2Send	@
 620:src/main.c    **** 					Usart2Send("\r\n");
 982              		.loc 2 620 0
 983 034a 2E4B     		ldr	r3, .L81+96	@ tmp379,
 984 034c 1800     		movs	r0, r3	@, tmp379
 985 034e FFF7FEFF 		bl	Usart2Send	@
 621:src/main.c    **** 
 622:src/main.c    **** 					//mando SMS con mi info
 623:src/main.c    **** 					strcpy(s_lcd, "IMEI: ");
 986              		.loc 2 623 0
 987 0352 01AB     		add	r3, sp, #4	@ tmp380,,
 988 0354 2A4A     		ldr	r2, .L81+92	@ tmp381,
 989 0356 1168     		ldr	r1, [r2]	@ tmp384,
 990 0358 1960     		str	r1, [r3]	@ tmp384,
 991 035a 9188     		ldrh	r1, [r2, #4]	@ tmp385,
 992 035c 9980     		strh	r1, [r3, #4]	@ tmp385,
 993 035e 9279     		ldrb	r2, [r2, #6]	@ tmp386,
 994 0360 9A71     		strb	r2, [r3, #6]	@ tmp386,
 624:src/main.c    **** 					strcat(s_lcd, param_struct.imei);
 995              		.loc 2 624 0
 996 0362 264A     		ldr	r2, .L81+88	@ tmp387,
 997 0364 01AB     		add	r3, sp, #4	@ tmp388,,
 998 0366 1100     		movs	r1, r2	@, tmp387
 999 0368 1800     		movs	r0, r3	@, tmp388
 1000 036a FFF7FEFF 		bl	strcat	@
 625:src/main.c    **** 					strcat(s_lcd, ", ACTIVO");
 1001              		.loc 2 625 0
 1002 036e 01AB     		add	r3, sp, #4	@ tmp389,,
 1003 0370 1800     		movs	r0, r3	@, tmp389
 1004 0372 FFF7FEFF 		bl	strlen	@
 1005 0376 0300     		movs	r3, r0	@ tmp390,
 1006 0378 1A00     		movs	r2, r3	@ D.7186, tmp391
 1007 037a 01AB     		add	r3, sp, #4	@ tmp392,,
 1008 037c 9A18     		adds	r2, r3, r2	@ D.7188, tmp392, D.7186
 1009 037e 224B     		ldr	r3, .L81+100	@ tmp393,
 1010 0380 1000     		movs	r0, r2	@ tmp394, D.7188
 1011 0382 1900     		movs	r1, r3	@ tmp395, tmp393
 1012 0384 0923     		movs	r3, #9	@ tmp396,
 1013 0386 1A00     		movs	r2, r3	@, tmp396
 1014 0388 FFF7FEFF 		bl	memcpy	@
 626:src/main.c    **** 
 627:src/main.c    **** 					FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 1015              		.loc 2 627 0
 1016 038c 074A     		ldr	r2, .L81+8	@ tmp399,
 1017 038e 01AB     		add	r3, sp, #4	@ tmp400,,
 1018 0390 1100     		movs	r1, r2	@, tmp399
 1019 0392 1800     		movs	r0, r3	@, tmp400
 1020 0394 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 628:src/main.c    **** 					// FuncsGSMSendSMS("forro", param_struct.num_reportar);
 629:src/main.c    **** 					main_state = LAMP_OFF;
ARM GAS  /tmp/ccSzia7W.s 			page 48


 1021              		.loc 2 629 0
 1022 0398 7723     		movs	r3, #119	@ tmp401,
 1023 039a 6B44     		add	r3, r3, sp	@ tmp401,
 1024 039c 0522     		movs	r2, #5	@ tmp402,
 1025 039e 1A70     		strb	r2, [r3]	@ tmp403, main_state
 630:src/main.c    **** 				}
 631:src/main.c    **** 				break;
 1026              		.loc 2 631 0
 1027 03a0 E2E1     		b	.L75	@
 1028              	.L82:
 1029 03a2 C046     		.align	2
 1030              	.L81:
 1031 03a4 80BB0000 		.word	48000
 1032 03a8 00FC0008 		.word	134282240
 1033 03ac 00000000 		.word	param_struct
 1034 03b0 00000000 		.word	.LC1
 1035 03b4 0C000000 		.word	.LC3
 1036 03b8 34000000 		.word	.LC5
 1037 03bc 44000000 		.word	.LC7
 1038 03c0 58000000 		.word	.LC9
 1039 03c4 70000000 		.word	.LC11
 1040 03c8 80000000 		.word	.LC13
 1041 03cc 00000000 		.word	timer_standby
 1042 03d0 00000000 		.word	.L27
 1043 03d4 00240140 		.word	1073816576
 1044 03d8 00000000 		.word	seq_ready
 1045 03dc 9C000000 		.word	.LC18
 1046 03e0 A8000000 		.word	.LC20
 1047 03e4 00000000 		.word	mains_voltage_filtered
 1048 03e8 B9080000 		.word	2233
 1049 03ec 00000000 		.word	adc_ch
 1050 03f0 00000000 		.word	zero_current
 1051 03f4 D0000000 		.word	.LC25
 1052 03f8 E4000000 		.word	.LC27
 1053 03fc 18000000 		.word	param_struct+24
 1054 0400 F0000000 		.word	.LC30
 1055 0404 F8000000 		.word	.LC32
 1056 0408 FC000000 		.word	.LC34
 1057              	.L32:
 632:src/main.c    **** 
 633:src/main.c    **** 			case LAMP_OFF:
 634:src/main.c    **** 				if (!tt_relay_on_off)
 1058              		.loc 2 634 0
 1059 040c D94B     		ldr	r3, .L83	@ tmp404,
 1060 040e 1B88     		ldrh	r3, [r3]	@ tmp405, tt_relay_on_off
 1061 0410 9BB2     		uxth	r3, r3	@ D.7182, tmp405
 1062 0412 002B     		cmp	r3, #0	@ D.7182,
 1063 0414 00D0     		beq	.LCB726	@
 1064 0416 A9E1     		b	.L76	@long jump	@
 1065              	.LCB726:
 635:src/main.c    **** 				{
 636:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 1066              		.loc 2 636 0
 1067 0418 FFF7FEFF 		bl	GetPhoto	@
 1068 041c 0300     		movs	r3, r0	@ tmp406,
 1069 041e 1A1E     		subs	r2, r3, #0	@ D.7182, tmp407,
 1070 0420 D54B     		ldr	r3, .L83+4	@ tmp408,
ARM GAS  /tmp/ccSzia7W.s 			page 49


 1071 0422 9A42     		cmp	r2, r3	@ D.7182, tmp408
 1072 0424 00D8     		bhi	.LCB732	@
 1073 0426 A1E1     		b	.L76	@long jump	@
 1074              	.LCB732:
 637:src/main.c    **** 					{
 638:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 639:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 1075              		.loc 2 639 0
 1076 0428 1A20     		movs	r0, #26	@,
 1077 042a FFF7FEFF 		bl	Update_TIM3_CH1	@
 640:src/main.c    **** #else
 641:src/main.c    **** 						Update_TIM3_CH1 (PWM_MAX);
 642:src/main.c    **** #endif
 643:src/main.c    **** 						// RelayOn();
 644:src/main.c    **** 						main_state = LAMP_ON;
 1078              		.loc 2 644 0
 1079 042e 7723     		movs	r3, #119	@ tmp409,
 1080 0430 6B44     		add	r3, r3, sp	@ tmp409,
 1081 0432 0922     		movs	r2, #9	@ tmp410,
 1082 0434 1A70     		strb	r2, [r3]	@ tmp411, main_state
 645:src/main.c    **** 						lamp_on_state = init_airplane0;
 1083              		.loc 2 645 0
 1084 0436 7623     		movs	r3, #118	@ tmp412,
 1085 0438 6B44     		add	r3, r3, sp	@ tmp412,
 1086 043a 0022     		movs	r2, #0	@ tmp413,
 1087 043c 1A70     		strb	r2, [r3]	@ tmp414, lamp_on_state
 646:src/main.c    **** 						tt_relay_on_off = 10000;
 1088              		.loc 2 646 0
 1089 043e CD4B     		ldr	r3, .L83	@ tmp415,
 1090 0440 CE4A     		ldr	r2, .L83+8	@ tmp416,
 1091 0442 1A80     		strh	r2, [r3]	@ tmp417, tt_relay_on_off
 647:src/main.c    **** 						Usart2Send("PRENDIDO\r\n");
 1092              		.loc 2 647 0
 1093 0444 CE4B     		ldr	r3, .L83+12	@ tmp418,
 1094 0446 1800     		movs	r0, r3	@, tmp418
 1095 0448 FFF7FEFF 		bl	Usart2Send	@
 648:src/main.c    **** 						FuncsGSMSendSMS("PRENDIDO", param_struct.num_reportar);
 1096              		.loc 2 648 0
 1097 044c CD4A     		ldr	r2, .L83+16	@ tmp419,
 1098 044e CE4B     		ldr	r3, .L83+20	@ tmp420,
 1099 0450 1100     		movs	r1, r2	@, tmp419
 1100 0452 1800     		movs	r0, r3	@, tmp420
 1101 0454 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 649:src/main.c    **** 						LED_ON;
 1102              		.loc 2 649 0
 1103 0458 9023     		movs	r3, #144	@ tmp667,
 1104 045a DB05     		lsls	r3, r3, #23	@ D.7181, tmp667,
 1105 045c 8022     		movs	r2, #128	@ tmp668,
 1106 045e 5201     		lsls	r2, r2, #5	@ tmp421, tmp668,
 1107 0460 9A61     		str	r2, [r3, #24]	@ tmp421, _249->BSRR
 650:src/main.c    **** #ifdef WITH_HYST
 651:src/main.c    **** 						hours = 0;
 1108              		.loc 2 651 0
 1109 0462 CA4B     		ldr	r3, .L83+24	@ tmp422,
 1110 0464 0022     		movs	r2, #0	@ tmp423,
 1111 0466 1A70     		strb	r2, [r3]	@ tmp424, hours
 652:src/main.c    **** #endif
ARM GAS  /tmp/ccSzia7W.s 			page 50


 653:src/main.c    **** 					}
 654:src/main.c    **** 				}
 655:src/main.c    **** 				break;
 1112              		.loc 2 655 0
 1113 0468 80E1     		b	.L76	@
 1114              	.L33:
 656:src/main.c    **** 
 657:src/main.c    **** 			case LAMP_ON:
 658:src/main.c    **** #if defined REPORTS_AIRPLANE_MODE
 659:src/main.c    **** 				switch (lamp_on_state)
 660:src/main.c    **** 				{
 661:src/main.c    **** 					case init_airplane0:
 662:src/main.c    **** 						if (FuncsGSMStateAsk() == gsm_state_ready)
 663:src/main.c    **** 						{
 664:src/main.c    **** 							//lo paso a modo avion
 665:src/main.c    **** 							s_lcd[0] = '\0';
 666:src/main.c    **** 							FuncsGSMCommandAnswer ("AT+CFUN=4\r\n" , s_lcd);
 667:src/main.c    **** 							lamp_on_state = init_airplane1;
 668:src/main.c    **** 						}
 669:src/main.c    **** 						break;
 670:src/main.c    **** 
 671:src/main.c    **** 					case init_airplane1:
 672:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 673:src/main.c    **** 						{
 674:src/main.c    **** 							//en modo avion, prendo y mido
 675:src/main.c    **** 							RelayOn();
 676:src/main.c    **** 							lamp_on_state = meas_init;
 677:src/main.c    **** 						}
 678:src/main.c    **** 						break;
 679:src/main.c    **** 
 680:src/main.c    **** 					case meas_init:
 681:src/main.c    **** 						if (RelayIsOn())
 682:src/main.c    **** 						{
 683:src/main.c    **** 							lamp_on_state = meas_meas;
 684:src/main.c    **** 							counters_mode = 1;
 685:src/main.c    **** 						}
 686:src/main.c    **** 						break;
 687:src/main.c    **** 
 688:src/main.c    **** 					case meas_meas:
 689:src/main.c    **** 						if (meas_end)
 690:src/main.c    **** 						{
 691:src/main.c    **** 							meas_end = 0;
 692:src/main.c    **** 
 693:src/main.c    **** 							if (!tt_relay_on_off)
 694:src/main.c    **** 							{
 695:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 696:src/main.c    **** 								hyst = GetHysteresis (hours);
 697:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 698:src/main.c    **** #else
 699:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 700:src/main.c    **** #endif
 701:src/main.c    **** 								{
 702:src/main.c    **** 									main_state = LAMP_OFF;
 703:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 704:src/main.c    **** 									Update_TIM3_CH1 (0);
 705:src/main.c    **** #endif
 706:src/main.c    **** 									lamp_on_state = init_airplane0;
ARM GAS  /tmp/ccSzia7W.s 			page 51


 707:src/main.c    **** 									counters_mode = 0;
 708:src/main.c    **** 									Usart2Send("APAGADO\r\n");
 709:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 710:src/main.c    **** 									tt_relay_on_off = 10000;
 711:src/main.c    **** 									RelayOff();
 712:src/main.c    **** 									LED_OFF;
 713:src/main.c    **** 								}
 714:src/main.c    **** 								else
 715:src/main.c    **** 								{
 716:src/main.c    **** 									//No apago, tengo que reportar?
 717:src/main.c    **** 									if (show_power_index >= timer_rep)
 718:src/main.c    **** 									{
 719:src/main.c    **** 										show_power_index = 0;
 720:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 721:src/main.c    **** 										lamp_on_state = meas_reporting0;
 722:src/main.c    **** 									}
 723:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 724:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 725:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 726:src/main.c    **** #endif
 727:src/main.c    **** 								}
 728:src/main.c    **** 							}
 729:src/main.c    **** 						}
 730:src/main.c    **** 						break;
 731:src/main.c    **** 
 732:src/main.c    **** 					case meas_reporting0:
 733:src/main.c    **** 						//lo saco de modo avion
 734:src/main.c    **** 						s_lcd[0] = '\0';
 735:src/main.c    **** 						FuncsGSMCommandAnswer ("AT+CFUN=1\r\n" , s_lcd);
 736:src/main.c    **** 						lamp_on_state = meas_reporting1;
 737:src/main.c    **** 						break;
 738:src/main.c    **** 
 739:src/main.c    **** 					case meas_reporting1:
 740:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 741:src/main.c    **** 						{
 742:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 743:src/main.c    **** 							{
 744:src/main.c    **** 								ShowPower(s_lcd, power, acum_hours, acum_secs);
 745:src/main.c    **** 								Usart2Send(s_lcd);
 746:src/main.c    **** 								FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 747:src/main.c    **** 							}
 748:src/main.c    **** 							lamp_on_state = init_airplane0;
 749:src/main.c    **** 						}
 750:src/main.c    **** 						break;
 751:src/main.c    **** 
 752:src/main.c    **** 					default:
 753:src/main.c    **** 						lamp_on_state = init_airplane0;
 754:src/main.c    **** 						break;
 755:src/main.c    **** 				}
 756:src/main.c    **** 
 757:src/main.c    **** #elif defined REPORTS_NORMAL_MODE
 758:src/main.c    **** 				switch (lamp_on_state)
 1115              		.loc 2 758 0
 1116 046a 7623     		movs	r3, #118	@ tmp425,
 1117 046c 6B44     		add	r3, r3, sp	@ tmp425,
 1118 046e 1B78     		ldrb	r3, [r3]	@ D.7183, lamp_on_state
 1119 0470 052B     		cmp	r3, #5	@ D.7183,
ARM GAS  /tmp/ccSzia7W.s 			page 52


 1120 0472 00D9     		bls	.LCB770	@
 1121 0474 C1E0     		b	.L44	@long jump	@
 1122              	.LCB770:
 1123 0476 9A00     		lsls	r2, r3, #2	@ tmp426, D.7183,
 1124 0478 C54B     		ldr	r3, .L83+28	@ tmp428,
 1125 047a D318     		adds	r3, r2, r3	@ tmp427, tmp426, tmp428
 1126 047c 1B68     		ldr	r3, [r3]	@ tmp429,
 1127 047e 9F46     		mov	pc, r3	@ tmp429
 1128              		.section	.rodata.main
 1129              		.align	2
 1130              	.L46:
 1131 0030 80040000 		.word	.L45
 1132 0034 90040000 		.word	.L47
 1133 0038 A0040000 		.word	.L48
 1134 003c D2040000 		.word	.L49
 1135 0040 A2050000 		.word	.L50
 1136 0044 D0050000 		.word	.L51
 1137              		.section	.text.main
 1138              	.L45:
 759:src/main.c    **** 				{
 760:src/main.c    **** 					case init_airplane0:
 761:src/main.c    **** 						lamp_on_state++;
 1139              		.loc 2 761 0
 1140 0480 7623     		movs	r3, #118	@ tmp430,
 1141 0482 6B44     		add	r3, r3, sp	@ tmp430,
 1142 0484 1A78     		ldrb	r2, [r3]	@ D.7189, lamp_on_state
 1143 0486 7623     		movs	r3, #118	@ tmp431,
 1144 0488 6B44     		add	r3, r3, sp	@ tmp431,
 1145 048a 0132     		adds	r2, r2, #1	@ tmp432,
 1146 048c 1A70     		strb	r2, [r3]	@ tmp433, lamp_on_state
 762:src/main.c    **** 						break;
 1147              		.loc 2 762 0
 1148 048e BCE0     		b	.L52	@
 1149              	.L47:
 763:src/main.c    **** 
 764:src/main.c    **** 					case init_airplane1:
 765:src/main.c    **** 						lamp_on_state++;
 1150              		.loc 2 765 0
 1151 0490 7623     		movs	r3, #118	@ tmp434,
 1152 0492 6B44     		add	r3, r3, sp	@ tmp434,
 1153 0494 1A78     		ldrb	r2, [r3]	@ D.7189, lamp_on_state
 1154 0496 7623     		movs	r3, #118	@ tmp435,
 1155 0498 6B44     		add	r3, r3, sp	@ tmp435,
 1156 049a 0132     		adds	r2, r2, #1	@ tmp436,
 1157 049c 1A70     		strb	r2, [r3]	@ tmp437, lamp_on_state
 766:src/main.c    **** 						break;
 1158              		.loc 2 766 0
 1159 049e B4E0     		b	.L52	@
 1160              	.L48:
 767:src/main.c    **** 
 768:src/main.c    **** 					case meas_init:
 769:src/main.c    **** 						RelayOn();
 1161              		.loc 2 769 0
 1162 04a0 FFF7FEFF 		bl	RelayOn	@
 770:src/main.c    **** 						lamp_on_state = meas_meas;
 1163              		.loc 2 770 0
 1164 04a4 7623     		movs	r3, #118	@ tmp438,
ARM GAS  /tmp/ccSzia7W.s 			page 53


 1165 04a6 6B44     		add	r3, r3, sp	@ tmp438,
 1166 04a8 0322     		movs	r2, #3	@ tmp439,
 1167 04aa 1A70     		strb	r2, [r3]	@ tmp440, lamp_on_state
 771:src/main.c    **** 						counters_mode = 1;
 1168              		.loc 2 771 0
 1169 04ac 7523     		movs	r3, #117	@ tmp441,
 1170 04ae 6B44     		add	r3, r3, sp	@ tmp441,
 1171 04b0 0122     		movs	r2, #1	@ tmp442,
 1172 04b2 1A70     		strb	r2, [r3]	@ tmp443, counters_mode
 772:src/main.c    **** 						timer_meas = 200;		//le doy 200ms de buffer a la medicion
 1173              		.loc 2 772 0
 1174 04b4 B74B     		ldr	r3, .L83+32	@ tmp444,
 1175 04b6 C822     		movs	r2, #200	@ tmp445,
 1176 04b8 1A70     		strb	r2, [r3]	@ tmp446, timer_meas
 773:src/main.c    **** 						//esto en realidad es un indice de 2 segundos de tick, la info esta en minutos
 774:src/main.c    **** 						timer_rep = param_struct.timer_reportar * 30;
 1177              		.loc 2 774 0
 1178 04ba B24B     		ldr	r3, .L83+16	@ tmp447,
 1179 04bc 5222     		movs	r2, #82	@ tmp448,
 1180 04be 9B5C     		ldrb	r3, [r3, r2]	@ D.7184,
 1181 04c0 9BB2     		uxth	r3, r3	@ D.7182, D.7184
 1182 04c2 1A1C     		adds	r2, r3, #0	@ tmp450, tmp449
 1183 04c4 1201     		lsls	r2, r2, #4	@ tmp451, tmp450,
 1184 04c6 D31A     		subs	r3, r2, r3	@ tmp453, tmp452, tmp449
 1185 04c8 DB18     		adds	r3, r3, r3	@ tmp455, tmp454, tmp454
 1186 04ca 9AB2     		uxth	r2, r3	@ D.7182, tmp453
 1187 04cc B24B     		ldr	r3, .L83+36	@ tmp456,
 1188 04ce 1A80     		strh	r2, [r3]	@ tmp457, timer_rep
 775:src/main.c    **** 						break;
 1189              		.loc 2 775 0
 1190 04d0 9BE0     		b	.L52	@
 1191              	.L49:
 776:src/main.c    **** 
 777:src/main.c    **** 					case meas_meas:
 778:src/main.c    **** 						if (meas_end)		//termino una vuelta de mediciones, generalmente 2 segundos
 1192              		.loc 2 778 0
 1193 04d2 1DAB     		add	r3, sp, #116	@ tmp458,,
 1194 04d4 1B78     		ldrb	r3, [r3]	@ tmp459, meas_end
 1195 04d6 002B     		cmp	r3, #0	@ tmp459,
 1196 04d8 00D1     		bne	.LCB834	@
 1197 04da 93E0     		b	.L77	@long jump	@
 1198              	.LCB834:
 779:src/main.c    **** 						{
 780:src/main.c    **** 							meas_end = 0;
 1199              		.loc 2 780 0
 1200 04dc 1DAB     		add	r3, sp, #116	@ tmp460,,
 1201 04de 0022     		movs	r2, #0	@ tmp461,
 1202 04e0 1A70     		strb	r2, [r3]	@ tmp462, meas_end
 781:src/main.c    **** 
 782:src/main.c    **** 							if (!tt_relay_on_off)
 1203              		.loc 2 782 0
 1204 04e2 A44B     		ldr	r3, .L83	@ tmp463,
 1205 04e4 1B88     		ldrh	r3, [r3]	@ tmp464, tt_relay_on_off
 1206 04e6 9BB2     		uxth	r3, r3	@ D.7182, tmp464
 1207 04e8 002B     		cmp	r3, #0	@ D.7182,
 1208 04ea 00D0     		beq	.LCB842	@
 1209 04ec 8AE0     		b	.L77	@long jump	@
ARM GAS  /tmp/ccSzia7W.s 			page 54


 1210              	.LCB842:
 783:src/main.c    **** 							{
 784:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 785:src/main.c    **** 								hyst = GetHysteresis (hours);
 1211              		.loc 2 785 0
 1212 04ee A74B     		ldr	r3, .L83+24	@ tmp465,
 1213 04f0 1B78     		ldrb	r3, [r3]	@ tmp466, hours
 1214 04f2 DBB2     		uxtb	r3, r3	@ D.7184, tmp466
 1215 04f4 1BAC     		add	r4, sp, #108	@ tmp467,,
 1216 04f6 1800     		movs	r0, r3	@, D.7184
 1217 04f8 FFF7FEFF 		bl	GetHysteresis	@
 1218 04fc 0300     		movs	r3, r0	@ tmp468,
 1219 04fe 2380     		strh	r3, [r4]	@ tmp470, hyst
 786:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 1220              		.loc 2 786 0
 1221 0500 FFF7FEFF 		bl	GetPhoto	@
 1222 0504 0300     		movs	r3, r0	@ tmp471,
 1223 0506 1900     		movs	r1, r3	@ D.7183, D.7182
 1224 0508 1BAB     		add	r3, sp, #108	@ tmp473,,
 1225 050a 1B88     		ldrh	r3, [r3]	@ D.7183, hyst
 1226 050c 9A4A     		ldr	r2, .L83+4	@ tmp474,
 1227 050e D31A     		subs	r3, r2, r3	@ D.7183, tmp474, D.7183
 1228 0510 9942     		cmp	r1, r3	@ D.7183, D.7183
 1229 0512 23DA     		bge	.L54	@,
 787:src/main.c    **** #else
 788:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 789:src/main.c    **** #endif
 790:src/main.c    **** 								{
 791:src/main.c    **** 									main_state = LAMP_OFF;
 1230              		.loc 2 791 0
 1231 0514 7723     		movs	r3, #119	@ tmp475,
 1232 0516 6B44     		add	r3, r3, sp	@ tmp475,
 1233 0518 0522     		movs	r2, #5	@ tmp476,
 1234 051a 1A70     		strb	r2, [r3]	@ tmp477, main_state
 792:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 793:src/main.c    **** 									Update_TIM3_CH1 (0);
 1235              		.loc 2 793 0
 1236 051c 0020     		movs	r0, #0	@,
 1237 051e FFF7FEFF 		bl	Update_TIM3_CH1	@
 794:src/main.c    **** #endif
 795:src/main.c    **** 									lamp_on_state = init_airplane0;
 1238              		.loc 2 795 0
 1239 0522 7623     		movs	r3, #118	@ tmp478,
 1240 0524 6B44     		add	r3, r3, sp	@ tmp478,
 1241 0526 0022     		movs	r2, #0	@ tmp479,
 1242 0528 1A70     		strb	r2, [r3]	@ tmp480, lamp_on_state
 796:src/main.c    **** 									counters_mode = 0;
 1243              		.loc 2 796 0
 1244 052a 7523     		movs	r3, #117	@ tmp481,
 1245 052c 6B44     		add	r3, r3, sp	@ tmp481,
 1246 052e 0022     		movs	r2, #0	@ tmp482,
 1247 0530 1A70     		strb	r2, [r3]	@ tmp483, counters_mode
 797:src/main.c    **** 									Usart2Send("APAGADO\r\n");
 1248              		.loc 2 797 0
 1249 0532 9A4B     		ldr	r3, .L83+40	@ tmp484,
 1250 0534 1800     		movs	r0, r3	@, tmp484
 1251 0536 FFF7FEFF 		bl	Usart2Send	@
ARM GAS  /tmp/ccSzia7W.s 			page 55


 798:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 1252              		.loc 2 798 0
 1253 053a 924A     		ldr	r2, .L83+16	@ tmp485,
 1254 053c 984B     		ldr	r3, .L83+44	@ tmp486,
 1255 053e 1100     		movs	r1, r2	@, tmp485
 1256 0540 1800     		movs	r0, r3	@, tmp486
 1257 0542 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 799:src/main.c    **** 									tt_relay_on_off = 10000;
 1258              		.loc 2 799 0
 1259 0546 8B4B     		ldr	r3, .L83	@ tmp487,
 1260 0548 8C4A     		ldr	r2, .L83+8	@ tmp488,
 1261 054a 1A80     		strh	r2, [r3]	@ tmp489, tt_relay_on_off
 800:src/main.c    **** 									RelayOff();
 1262              		.loc 2 800 0
 1263 054c FFF7FEFF 		bl	RelayOff	@
 801:src/main.c    **** 									LED_OFF;
 1264              		.loc 2 801 0
 1265 0550 9023     		movs	r3, #144	@ tmp665,
 1266 0552 DB05     		lsls	r3, r3, #23	@ D.7181, tmp665,
 1267 0554 8022     		movs	r2, #128	@ tmp666,
 1268 0556 5205     		lsls	r2, r2, #21	@ tmp490, tmp666,
 1269 0558 9A61     		str	r2, [r3, #24]	@ tmp490, _283->BSRR
 802:src/main.c    **** 								}
 803:src/main.c    **** 								else
 804:src/main.c    **** 								{
 805:src/main.c    **** 									//No apago, tengo que reportar?
 806:src/main.c    **** 									if (show_power_index >= timer_rep)
 807:src/main.c    **** 									{
 808:src/main.c    **** 										show_power_index = 0;
 809:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 810:src/main.c    **** 										lamp_on_state = meas_reporting0;
 811:src/main.c    **** 									}
 812:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 813:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 814:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 815:src/main.c    **** #endif
 816:src/main.c    **** 								}
 817:src/main.c    **** 							}
 818:src/main.c    **** 						}
 819:src/main.c    **** 						break;
 1270              		.loc 2 819 0
 1271 055a 53E0     		b	.L77	@
 1272              	.L54:
 806:src/main.c    **** 									{
 1273              		.loc 2 806 0
 1274 055c 914B     		ldr	r3, .L83+48	@ tmp491,
 1275 055e 1A88     		ldrh	r2, [r3]	@ D.7182, show_power_index
 1276 0560 8D4B     		ldr	r3, .L83+36	@ tmp492,
 1277 0562 1B88     		ldrh	r3, [r3]	@ D.7182, timer_rep
 1278 0564 9A42     		cmp	r2, r3	@ D.7182, D.7182
 1279 0566 0AD3     		bcc	.L55	@,
 808:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 1280              		.loc 2 808 0
 1281 0568 8E4B     		ldr	r3, .L83+48	@ tmp493,
 1282 056a 0022     		movs	r2, #0	@ tmp494,
 1283 056c 1A80     		strh	r2, [r3]	@ tmp495, show_power_index
 809:src/main.c    **** 										lamp_on_state = meas_reporting0;
ARM GAS  /tmp/ccSzia7W.s 			page 56


 1284              		.loc 2 809 0
 1285 056e 7523     		movs	r3, #117	@ tmp496,
 1286 0570 6B44     		add	r3, r3, sp	@ tmp496,
 1287 0572 0222     		movs	r2, #2	@ tmp497,
 1288 0574 1A70     		strb	r2, [r3]	@ tmp498, counters_mode
 810:src/main.c    **** 									}
 1289              		.loc 2 810 0
 1290 0576 7623     		movs	r3, #118	@ tmp499,
 1291 0578 6B44     		add	r3, r3, sp	@ tmp499,
 1292 057a 0422     		movs	r2, #4	@ tmp500,
 1293 057c 1A70     		strb	r2, [r3]	@ tmp501, lamp_on_state
 1294              	.L55:
 813:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 1295              		.loc 2 813 0
 1296 057e FFF7FEFF 		bl	GetPhoto	@
 1297 0582 0300     		movs	r3, r0	@ tmp502,
 1298 0584 6B24     		movs	r4, #107	@ tmp504,
 1299 0586 6C44     		add	r4, r4, sp	@ tmp504,
 1300 0588 1800     		movs	r0, r3	@, D.7182
 1301 058a FFF7FEFF 		bl	GetNew1to10	@
 1302 058e 0300     		movs	r3, r0	@ tmp505,
 1303 0590 2370     		strb	r3, [r4]	@ tmp507, one_to_ten
 814:src/main.c    **** #endif
 1304              		.loc 2 814 0
 1305 0592 6B23     		movs	r3, #107	@ tmp508,
 1306 0594 6B44     		add	r3, r3, sp	@ tmp508,
 1307 0596 1B78     		ldrb	r3, [r3]	@ tmp510, one_to_ten
 1308 0598 9BB2     		uxth	r3, r3	@ D.7182, tmp509
 1309 059a 1800     		movs	r0, r3	@, D.7182
 1310 059c FFF7FEFF 		bl	Update_TIM3_CH1	@
 1311              		.loc 2 819 0
 1312 05a0 30E0     		b	.L77	@
 1313              	.L50:
 820:src/main.c    **** 
 821:src/main.c    **** 					case meas_reporting0:
 822:src/main.c    **** 						ShowPower(s_lcd, power, acum_hours, acum_secs);
 1314              		.loc 2 822 0
 1315 05a2 1F9C     		ldr	r4, [sp, #124]	@ tmp511, acum_secs
 1316 05a4 1E9A     		ldr	r2, [sp, #120]	@ tmp512, acum_hours
 1317 05a6 23AB     		add	r3, sp, #140	@ tmp513,,
 1318 05a8 1988     		ldrh	r1, [r3]	@ tmp514, power
 1319 05aa 01A8     		add	r0, sp, #4	@ tmp515,,
 1320 05ac 2300     		movs	r3, r4	@, tmp511
 1321 05ae FFF7FEFF 		bl	ShowPower	@
 823:src/main.c    **** 						Usart2Send(s_lcd);
 1322              		.loc 2 823 0
 1323 05b2 01AB     		add	r3, sp, #4	@ tmp516,,
 1324 05b4 1800     		movs	r0, r3	@, tmp516
 1325 05b6 FFF7FEFF 		bl	Usart2Send	@
 824:src/main.c    **** 						FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 1326              		.loc 2 824 0
 1327 05ba 724A     		ldr	r2, .L83+16	@ tmp517,
 1328 05bc 01AB     		add	r3, sp, #4	@ tmp518,,
 1329 05be 1100     		movs	r1, r2	@, tmp517
 1330 05c0 1800     		movs	r0, r3	@, tmp518
 1331 05c2 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 825:src/main.c    **** 						lamp_on_state = meas_reporting1;
ARM GAS  /tmp/ccSzia7W.s 			page 57


 1332              		.loc 2 825 0
 1333 05c6 7623     		movs	r3, #118	@ tmp519,
 1334 05c8 6B44     		add	r3, r3, sp	@ tmp519,
 1335 05ca 0522     		movs	r2, #5	@ tmp520,
 1336 05cc 1A70     		strb	r2, [r3]	@ tmp521, lamp_on_state
 826:src/main.c    **** 						break;
 1337              		.loc 2 826 0
 1338 05ce 1CE0     		b	.L52	@
 1339              	.L51:
 827:src/main.c    **** 
 828:src/main.c    **** 					case meas_reporting1:
 829:src/main.c    **** 						if (meas_end)		//me sincronizo nuevamente con la medicion
 1340              		.loc 2 829 0
 1341 05d0 1DAB     		add	r3, sp, #116	@ tmp522,,
 1342 05d2 1B78     		ldrb	r3, [r3]	@ tmp523, meas_end
 1343 05d4 002B     		cmp	r3, #0	@ tmp523,
 1344 05d6 17D0     		beq	.L78	@,
 830:src/main.c    **** 						{
 831:src/main.c    **** 							meas_end = 0;
 1345              		.loc 2 831 0
 1346 05d8 1DAB     		add	r3, sp, #116	@ tmp524,,
 1347 05da 0022     		movs	r2, #0	@ tmp525,
 1348 05dc 1A70     		strb	r2, [r3]	@ tmp526, meas_end
 832:src/main.c    **** 
 833:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 1349              		.loc 2 833 0
 1350 05de FFF7FEFF 		bl	FuncsGSMStateAsk	@
 1351 05e2 031E     		subs	r3, r0, #0	@ tmp527,,
 1352 05e4 052B     		cmp	r3, #5	@ tmp527,
 1353 05e6 0FD1     		bne	.L78	@,
 834:src/main.c    **** 							{
 835:src/main.c    **** 								counters_mode = 1;
 1354              		.loc 2 835 0
 1355 05e8 7523     		movs	r3, #117	@ tmp529,
 1356 05ea 6B44     		add	r3, r3, sp	@ tmp529,
 1357 05ec 0122     		movs	r2, #1	@ tmp530,
 1358 05ee 1A70     		strb	r2, [r3]	@ tmp531, counters_mode
 836:src/main.c    **** 								lamp_on_state = meas_meas;
 1359              		.loc 2 836 0
 1360 05f0 7623     		movs	r3, #118	@ tmp532,
 1361 05f2 6B44     		add	r3, r3, sp	@ tmp532,
 1362 05f4 0322     		movs	r2, #3	@ tmp533,
 1363 05f6 1A70     		strb	r2, [r3]	@ tmp534, lamp_on_state
 837:src/main.c    **** 							}
 838:src/main.c    **** 						}
 839:src/main.c    **** 						break;
 1364              		.loc 2 839 0
 1365 05f8 06E0     		b	.L78	@
 1366              	.L44:
 840:src/main.c    **** 
 841:src/main.c    **** 					default:
 842:src/main.c    **** 						lamp_on_state = init_airplane0;
 1367              		.loc 2 842 0
 1368 05fa 7623     		movs	r3, #118	@ tmp535,
 1369 05fc 6B44     		add	r3, r3, sp	@ tmp535,
 1370 05fe 0022     		movs	r2, #0	@ tmp536,
 1371 0600 1A70     		strb	r2, [r3]	@ tmp537, lamp_on_state
ARM GAS  /tmp/ccSzia7W.s 			page 58


 843:src/main.c    **** 						break;
 1372              		.loc 2 843 0
 1373 0602 02E0     		b	.L52	@
 1374              	.L77:
 819:src/main.c    **** 
 1375              		.loc 2 819 0
 1376 0604 C046     		nop
 1377 0606 00E0     		b	.L52	@
 1378              	.L78:
 839:src/main.c    **** 
 1379              		.loc 2 839 0
 1380 0608 C046     		nop
 1381              	.L52:
 844:src/main.c    **** 				}
 845:src/main.c    **** 
 846:src/main.c    **** #else
 847:src/main.c    **** #error "Debe elegir la forma de reportar Normal / Airplane"
 848:src/main.c    **** #endif
 849:src/main.c    **** 
 850:src/main.c    **** 				if (counters_mode)	//si esta activo el modo de contadores mido
 1382              		.loc 2 850 0
 1383 060a 7523     		movs	r3, #117	@ tmp538,
 1384 060c 6B44     		add	r3, r3, sp	@ tmp538,
 1385 060e 1B78     		ldrb	r3, [r3]	@ tmp539, counters_mode
 1386 0610 002B     		cmp	r3, #0	@ tmp539,
 1387 0612 00D1     		bne	.LCB998	@
 1388 0614 ACE0     		b	.L79	@long jump	@
 1389              	.LCB998:
 851:src/main.c    **** 				{
 852:src/main.c    **** 					if (!timer_meas)	//update cada 200ms
 1390              		.loc 2 852 0
 1391 0616 5F4B     		ldr	r3, .L83+32	@ tmp540,
 1392 0618 1B78     		ldrb	r3, [r3]	@ tmp541, timer_meas
 1393 061a DBB2     		uxtb	r3, r3	@ D.7184, tmp541
 1394 061c 002B     		cmp	r3, #0	@ D.7184,
 1395 061e 00D0     		beq	.LCB1003	@
 1396 0620 A6E0     		b	.L79	@long jump	@
 1397              	.LCB1003:
 853:src/main.c    **** 					{
 854:src/main.c    **** 						if (i < SIZEOF_POWER_VECT)
 1398              		.loc 2 854 0
 1399 0622 8F23     		movs	r3, #143	@ tmp542,
 1400 0624 6B44     		add	r3, r3, sp	@ tmp542,
 1401 0626 1B78     		ldrb	r3, [r3]	@ tmp543, i
 1402 0628 092B     		cmp	r3, #9	@ tmp543,
 1403 062a 1AD8     		bhi	.L58	@,
 855:src/main.c    **** 						{
 856:src/main.c    **** 							power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 1404              		.loc 2 856 0
 1405 062c 8F23     		movs	r3, #143	@ tmp544,
 1406 062e 6B44     		add	r3, r3, sp	@ tmp544,
 1407 0630 1C78     		ldrb	r4, [r3]	@ D.7183, i
 1408 0632 FFF7FEFF 		bl	GetVGrid	@
 1409 0636 0300     		movs	r3, r0	@ tmp545,
 1410 0638 1D00     		movs	r5, r3	@ D.7182, tmp546
 1411 063a FFF7FEFF 		bl	GetIGrid	@
 1412 063e 0300     		movs	r3, r0	@ tmp547,
ARM GAS  /tmp/ccSzia7W.s 			page 59


 1413 0640 1900     		movs	r1, r3	@, D.7182
 1414 0642 2800     		movs	r0, r5	@, D.7182
 1415 0644 FFF7FEFF 		bl	PowerCalc	@
 1416 0648 0300     		movs	r3, r0	@ tmp549,
 1417 064a 1900     		movs	r1, r3	@ D.7182, tmp550
 1418 064c 564B     		ldr	r3, .L83+52	@ tmp551,
 1419 064e 6200     		lsls	r2, r4, #1	@ tmp552, D.7183,
 1420 0650 D152     		strh	r1, [r2, r3]	@ tmp553, power_vect
 857:src/main.c    **** 							i++;
 1421              		.loc 2 857 0
 1422 0652 8F23     		movs	r3, #143	@ tmp554,
 1423 0654 6B44     		add	r3, r3, sp	@ tmp554,
 1424 0656 1A78     		ldrb	r2, [r3]	@ D.7184, i
 1425 0658 8F23     		movs	r3, #143	@ tmp555,
 1426 065a 6B44     		add	r3, r3, sp	@ tmp555,
 1427 065c 0132     		adds	r2, r2, #1	@ tmp556,
 1428 065e 1A70     		strb	r2, [r3]	@ tmp557, i
 1429 0660 56E0     		b	.L59	@
 1430              	.L58:
 858:src/main.c    **** 						}
 859:src/main.c    **** 						else
 860:src/main.c    **** 						{		//termine de cargar el vector, guardo muestro info
 861:src/main.c    **** 							i = 0;
 1431              		.loc 2 861 0
 1432 0662 8F23     		movs	r3, #143	@ tmp558,
 1433 0664 6B44     		add	r3, r3, sp	@ tmp558,
 1434 0666 0022     		movs	r2, #0	@ tmp559,
 1435 0668 1A70     		strb	r2, [r3]	@ tmp560, i
 862:src/main.c    **** 
 863:src/main.c    **** 							if (counters_mode == 1)	//mido normalmente
 1436              		.loc 2 863 0
 1437 066a 7523     		movs	r3, #117	@ tmp561,
 1438 066c 6B44     		add	r3, r3, sp	@ tmp561,
 1439 066e 1B78     		ldrb	r3, [r3]	@ tmp562, counters_mode
 1440 0670 012B     		cmp	r3, #1	@ tmp562,
 1441 0672 13D1     		bne	.L60	@,
 864:src/main.c    **** 							{
 865:src/main.c    **** 								power = PowerCalcMean8(power_vect);
 1442              		.loc 2 865 0
 1443 0674 23AC     		add	r4, sp, #140	@ tmp563,,
 1444 0676 4C4B     		ldr	r3, .L83+52	@ tmp564,
 1445 0678 1800     		movs	r0, r3	@, tmp564
 1446 067a FFF7FEFF 		bl	PowerCalcMean8	@
 1447 067e 0300     		movs	r3, r0	@ tmp565,
 1448 0680 2380     		strh	r3, [r4]	@ tmp567, power
 866:src/main.c    **** 								// power = 9871;	//100w forzados para evaluar contadores
 867:src/main.c    **** 														//9871 * KW = 100
 868:src/main.c    **** 								if (power < MIN_SENSE_POWER)	//minimo de medicion
 1449              		.loc 2 868 0
 1450 0682 23AB     		add	r3, sp, #140	@ tmp568,,
 1451 0684 1B88     		ldrh	r3, [r3]	@ tmp569, power
 1452 0686 494A     		ldr	r2, .L83+56	@ tmp570,
 1453 0688 9342     		cmp	r3, r2	@ tmp569, tmp570
 1454 068a 02D8     		bhi	.L61	@,
 869:src/main.c    **** 									power = 0;
 1455              		.loc 2 869 0
 1456 068c 23AB     		add	r3, sp, #140	@ tmp571,,
ARM GAS  /tmp/ccSzia7W.s 			page 60


 1457 068e 0022     		movs	r2, #0	@ tmp572,
 1458 0690 1A80     		strh	r2, [r3]	@ tmp573, power
 1459              	.L61:
 870:src/main.c    **** 
 871:src/main.c    **** 								last_power = power;
 1460              		.loc 2 871 0
 1461 0692 8A23     		movs	r3, #138	@ tmp574,
 1462 0694 6B44     		add	r3, r3, sp	@ tmp574,
 1463 0696 23AA     		add	r2, sp, #140	@ tmp575,,
 1464 0698 1288     		ldrh	r2, [r2]	@ tmp576, power
 1465 069a 1A80     		strh	r2, [r3]	@ tmp576, last_power
 1466              	.L60:
 872:src/main.c    **** 							}
 873:src/main.c    **** 
 874:src/main.c    **** 							if (counters_mode == 2)	//no mido solo update de lo viejo
 1467              		.loc 2 874 0
 1468 069c 7523     		movs	r3, #117	@ tmp577,
 1469 069e 6B44     		add	r3, r3, sp	@ tmp577,
 1470 06a0 1B78     		ldrb	r3, [r3]	@ tmp578, counters_mode
 1471 06a2 022B     		cmp	r3, #2	@ tmp578,
 1472 06a4 04D1     		bne	.L62	@,
 875:src/main.c    **** 								power = last_power;
 1473              		.loc 2 875 0
 1474 06a6 23AB     		add	r3, sp, #140	@ tmp579,,
 1475 06a8 8A22     		movs	r2, #138	@ tmp580,
 1476 06aa 6A44     		add	r2, r2, sp	@ tmp580,
 1477 06ac 1288     		ldrh	r2, [r2]	@ tmp581, last_power
 1478 06ae 1A80     		strh	r2, [r3]	@ tmp581, power
 1479              	.L62:
 876:src/main.c    **** 
 877:src/main.c    **** 							acum_secs += power;
 1480              		.loc 2 877 0
 1481 06b0 23AB     		add	r3, sp, #140	@ tmp582,,
 1482 06b2 1B88     		ldrh	r3, [r3]	@ D.7186, power
 1483 06b4 1F9A     		ldr	r2, [sp, #124]	@ tmp584, acum_secs
 1484 06b6 D318     		adds	r3, r2, r3	@ tmp583, tmp584, D.7186
 1485 06b8 1F93     		str	r3, [sp, #124]	@ tmp583, acum_secs
 878:src/main.c    **** 							acum_secs_index++;
 1486              		.loc 2 878 0
 1487 06ba 8223     		movs	r3, #130	@ tmp585,
 1488 06bc 6B44     		add	r3, r3, sp	@ tmp585,
 1489 06be 1A88     		ldrh	r2, [r3]	@ D.7182, acum_secs_index
 1490 06c0 8223     		movs	r3, #130	@ tmp586,
 1491 06c2 6B44     		add	r3, r3, sp	@ tmp586,
 1492 06c4 0132     		adds	r2, r2, #1	@ tmp587,
 1493 06c6 1A80     		strh	r2, [r3]	@ tmp588, acum_secs_index
 879:src/main.c    **** 							show_power_index++;
 1494              		.loc 2 879 0
 1495 06c8 364B     		ldr	r3, .L83+48	@ tmp589,
 1496 06ca 1B88     		ldrh	r3, [r3]	@ D.7182, show_power_index
 1497 06cc 0133     		adds	r3, r3, #1	@ tmp590,
 1498 06ce 9AB2     		uxth	r2, r3	@ D.7182, tmp590
 1499 06d0 344B     		ldr	r3, .L83+48	@ tmp591,
 1500 06d2 1A80     		strh	r2, [r3]	@ tmp592, show_power_index
 880:src/main.c    **** 							need_to_save = 1;			//aviso que en algun momento hay que guardar
 1501              		.loc 2 880 0
 1502 06d4 8E23     		movs	r3, #142	@ tmp593,
ARM GAS  /tmp/ccSzia7W.s 			page 61


 1503 06d6 6B44     		add	r3, r3, sp	@ tmp593,
 1504 06d8 0122     		movs	r2, #1	@ tmp594,
 1505 06da 1A70     		strb	r2, [r3]	@ tmp595, need_to_save
 881:src/main.c    **** 
 882:src/main.c    **** 							if (acum_secs_index >= 1800)
 1506              		.loc 2 882 0
 1507 06dc 8223     		movs	r3, #130	@ tmp596,
 1508 06de 6B44     		add	r3, r3, sp	@ tmp596,
 1509 06e0 1B88     		ldrh	r3, [r3]	@ tmp597, acum_secs_index
 1510 06e2 334A     		ldr	r2, .L83+60	@ tmp598,
 1511 06e4 9342     		cmp	r3, r2	@ tmp597, tmp598
 1512 06e6 10D9     		bls	.L63	@,
 883:src/main.c    **** 							{
 884:src/main.c    **** 								acum_hours += (acum_secs / 1800);	//lo convierto a Wh, para no perder bits en cada cuenta
 1513              		.loc 2 884 0
 1514 06e8 1F9A     		ldr	r2, [sp, #124]	@ tmp599, acum_secs
 1515 06ea E123     		movs	r3, #225	@ tmp664,
 1516 06ec D900     		lsls	r1, r3, #3	@, tmp664,
 1517 06ee 1000     		movs	r0, r2	@, tmp599
 1518 06f0 FFF7FEFF 		bl	__aeabi_uidiv	@
 1519 06f4 0300     		movs	r3, r0	@ tmp602,
 1520 06f6 1A00     		movs	r2, r3	@ D.7186, tmp602
 1521 06f8 1E9B     		ldr	r3, [sp, #120]	@ tmp604, acum_hours
 1522 06fa 9B18     		adds	r3, r3, r2	@ tmp603, tmp604, D.7186
 1523 06fc 1E93     		str	r3, [sp, #120]	@ tmp603, acum_hours
 885:src/main.c    **** 								acum_secs = 0;
 1524              		.loc 2 885 0
 1525 06fe 0023     		movs	r3, #0	@ tmp605,
 1526 0700 1F93     		str	r3, [sp, #124]	@ tmp605, acum_secs
 886:src/main.c    **** 								acum_secs_index = 0;
 1527              		.loc 2 886 0
 1528 0702 8223     		movs	r3, #130	@ tmp606,
 1529 0704 6B44     		add	r3, r3, sp	@ tmp606,
 1530 0706 0022     		movs	r2, #0	@ tmp607,
 1531 0708 1A80     		strh	r2, [r3]	@ tmp608, acum_secs_index
 1532              	.L63:
 887:src/main.c    **** 							}
 888:src/main.c    **** 							//cuando termino una medicion completa aviso con meas_end
 889:src/main.c    **** 							meas_end = 1;
 1533              		.loc 2 889 0
 1534 070a 1DAB     		add	r3, sp, #116	@ tmp609,,
 1535 070c 0122     		movs	r2, #1	@ tmp610,
 1536 070e 1A70     		strb	r2, [r3]	@ tmp611, meas_end
 1537              	.L59:
 890:src/main.c    **** 						}
 891:src/main.c    **** 						timer_meas = 200;		//10 veces 200ms
 1538              		.loc 2 891 0
 1539 0710 204B     		ldr	r3, .L83+32	@ tmp612,
 1540 0712 C822     		movs	r2, #200	@ tmp613,
 1541 0714 1A70     		strb	r2, [r3]	@ tmp614, timer_meas
 892:src/main.c    **** 					}
 893:src/main.c    **** 				}
 894:src/main.c    **** 				break;	//termina LAMP_ON
 1542              		.loc 2 894 0
 1543 0716 2BE0     		b	.L79	@
 1544              	.L34:
 895:src/main.c    **** 
ARM GAS  /tmp/ccSzia7W.s 			page 62


 896:src/main.c    **** 			case GO_TO_MAINS_FAILURE:
 897:src/main.c    **** 				//apago el gsm
 898:src/main.c    **** 				FuncsGSMShutdown ();
 1545              		.loc 2 898 0
 1546 0718 FFF7FEFF 		bl	FuncsGSMShutdown	@
 899:src/main.c    **** 				main_state = MAINS_FAILURE;
 1547              		.loc 2 899 0
 1548 071c 7723     		movs	r3, #119	@ tmp615,
 1549 071e 6B44     		add	r3, r3, sp	@ tmp615,
 1550 0720 0B22     		movs	r2, #11	@ tmp616,
 1551 0722 1A70     		strb	r2, [r3]	@ tmp617, main_state
 900:src/main.c    **** 				//espero 10 segundos como minimo
 901:src/main.c    **** 				timer_standby = 10000;
 1552              		.loc 2 901 0
 1553 0724 234B     		ldr	r3, .L83+64	@ tmp618,
 1554 0726 154A     		ldr	r2, .L83+8	@ tmp619,
 1555 0728 1A80     		strh	r2, [r3]	@ tmp620, timer_standby
 902:src/main.c    **** 				Usart2Send("LOW MAINS VOLTAGE\r\n");
 1556              		.loc 2 902 0
 1557 072a 234B     		ldr	r3, .L83+68	@ tmp621,
 1558 072c 1800     		movs	r0, r3	@, tmp621
 1559 072e FFF7FEFF 		bl	Usart2Send	@
 903:src/main.c    **** 				break;
 1560              		.loc 2 903 0
 1561 0732 48E0     		b	.L36	@
 1562              	.L35:
 904:src/main.c    **** 
 905:src/main.c    **** 			case MAINS_FAILURE:
 906:src/main.c    **** 				if ((!timer_standby) && (mains_voltage_filtered > CONNECT_VOLTAGE))
 1563              		.loc 2 906 0
 1564 0734 1F4B     		ldr	r3, .L83+64	@ tmp622,
 1565 0736 1B88     		ldrh	r3, [r3]	@ tmp623, timer_standby
 1566 0738 9BB2     		uxth	r3, r3	@ D.7182, tmp623
 1567 073a 002B     		cmp	r3, #0	@ D.7182,
 1568 073c 42D1     		bne	.L80	@,
 1569              		.loc 2 906 0 is_stmt 0 discriminator 1
 1570 073e 1F4B     		ldr	r3, .L83+72	@ tmp624,
 1571 0740 1B88     		ldrh	r3, [r3]	@ D.7182, mains_voltage_filtered
 1572 0742 1F4A     		ldr	r2, .L83+76	@ tmp625,
 1573 0744 9342     		cmp	r3, r2	@ D.7182, tmp625
 1574 0746 3DD9     		bls	.L80	@,
 907:src/main.c    **** 				{
 908:src/main.c    **** 					main_state = MAIN_INIT;
 1575              		.loc 2 908 0 is_stmt 1
 1576 0748 7723     		movs	r3, #119	@ tmp626,
 1577 074a 6B44     		add	r3, r3, sp	@ tmp626,
 1578 074c 0022     		movs	r2, #0	@ tmp627,
 1579 074e 1A70     		strb	r2, [r3]	@ tmp628, main_state
 909:src/main.c    **** 				}
 910:src/main.c    **** 				break;
 1580              		.loc 2 910 0
 1581 0750 38E0     		b	.L80	@
 1582              	.L25:
 911:src/main.c    **** 
 912:src/main.c    **** 			default:
 913:src/main.c    **** 				main_state = MAIN_INIT;
 1583              		.loc 2 913 0
ARM GAS  /tmp/ccSzia7W.s 			page 63


 1584 0752 7723     		movs	r3, #119	@ tmp629,
 1585 0754 6B44     		add	r3, r3, sp	@ tmp629,
 1586 0756 0022     		movs	r2, #0	@ tmp630,
 1587 0758 1A70     		strb	r2, [r3]	@ tmp631, main_state
 914:src/main.c    **** 				break;
 1588              		.loc 2 914 0
 1589 075a 34E0     		b	.L36	@
 1590              	.L72:
 565:src/main.c    **** 
 1591              		.loc 2 565 0
 1592 075c C046     		nop
 1593 075e 32E0     		b	.L36	@
 1594              	.L73:
 588:src/main.c    **** 
 1595              		.loc 2 588 0
 1596 0760 C046     		nop
 1597 0762 30E0     		b	.L36	@
 1598              	.L74:
 610:src/main.c    **** 
 1599              		.loc 2 610 0
 1600 0764 C046     		nop
 1601 0766 2EE0     		b	.L36	@
 1602              	.L75:
 631:src/main.c    **** 
 1603              		.loc 2 631 0
 1604 0768 C046     		nop
 1605 076a 2CE0     		b	.L36	@
 1606              	.L76:
 655:src/main.c    **** 
 1607              		.loc 2 655 0
 1608 076c C046     		nop
 1609 076e 2AE0     		b	.L36	@
 1610              	.L79:
 894:src/main.c    **** 
 1611              		.loc 2 894 0
 1612 0770 C046     		nop
 1613 0772 28E0     		b	.L36	@
 1614              	.L84:
 1615              		.align	2
 1616              	.L83:
 1617 0774 00000000 		.word	tt_relay_on_off
 1618 0778 8A0E0000 		.word	3722
 1619 077c 10270000 		.word	10000
 1620 0780 08010000 		.word	.LC37
 1621 0784 00000000 		.word	param_struct
 1622 0788 14010000 		.word	.LC39
 1623 078c 00000000 		.word	hours
 1624 0790 30000000 		.word	.L46
 1625 0794 00000000 		.word	timer_meas
 1626 0798 00000000 		.word	timer_rep
 1627 079c 20010000 		.word	.LC45
 1628 07a0 2C010000 		.word	.LC47
 1629 07a4 00000000 		.word	show_power_index
 1630 07a8 00000000 		.word	power_vect
 1631 07ac E1050000 		.word	1505
 1632 07b0 07070000 		.word	1799
 1633 07b4 00000000 		.word	timer_standby
ARM GAS  /tmp/ccSzia7W.s 			page 64


 1634 07b8 34010000 		.word	.LC51
 1635 07bc 00000000 		.word	mains_voltage_filtered
 1636 07c0 B9080000 		.word	2233
 1637              	.L80:
 910:src/main.c    **** 
 1638              		.loc 2 910 0
 1639 07c4 C046     		nop
 1640              	.L36:
 915:src/main.c    **** 		}
 916:src/main.c    **** 
 917:src/main.c    **** 		//Cosas que dependen de las muestras
 918:src/main.c    **** 		if (seq_ready)
 1641              		.loc 2 918 0
 1642 07c6 284B     		ldr	r3, .L85	@ tmp632,
 1643 07c8 1B78     		ldrb	r3, [r3]	@ tmp633, seq_ready
 1644 07ca DBB2     		uxtb	r3, r3	@ D.7184, tmp633
 1645 07cc 002B     		cmp	r3, #0	@ D.7184,
 1646 07ce 06D0     		beq	.L65	@,
 919:src/main.c    **** 		{
 920:src/main.c    **** 			seq_ready = 0;
 1647              		.loc 2 920 0
 1648 07d0 254B     		ldr	r3, .L85	@ tmp634,
 1649 07d2 0022     		movs	r2, #0	@ tmp635,
 1650 07d4 1A70     		strb	r2, [r3]	@ tmp636, seq_ready
 921:src/main.c    **** 			UpdateVGrid ();
 1651              		.loc 2 921 0
 1652 07d6 FFF7FEFF 		bl	UpdateVGrid	@
 922:src/main.c    **** 			UpdateIGrid ();
 1653              		.loc 2 922 0
 1654 07da FFF7FEFF 		bl	UpdateIGrid	@
 1655              	.L65:
 923:src/main.c    **** 		}
 924:src/main.c    **** 
 925:src/main.c    **** 		//reviso si hay problemas de alimentacion
 926:src/main.c    **** 		if ((main_state > SET_ZERO_CURRENT) && (main_state < GO_TO_MAINS_FAILURE))		//TODO: si es un glit
 1656              		.loc 2 926 0
 1657 07de 7723     		movs	r3, #119	@ tmp637,
 1658 07e0 6B44     		add	r3, r3, sp	@ tmp637,
 1659 07e2 1B78     		ldrb	r3, [r3]	@ tmp638, main_state
 1660 07e4 022B     		cmp	r3, #2	@ tmp638,
 1661 07e6 37D9     		bls	.L66	@,
 1662              		.loc 2 926 0 is_stmt 0 discriminator 1
 1663 07e8 7723     		movs	r3, #119	@ tmp639,
 1664 07ea 6B44     		add	r3, r3, sp	@ tmp639,
 1665 07ec 1B78     		ldrb	r3, [r3]	@ tmp640, main_state
 1666 07ee 092B     		cmp	r3, #9	@ tmp640,
 1667 07f0 32D8     		bhi	.L66	@,
 1668              	.LBB2:
 927:src/main.c    **** 		{
 928:src/main.c    **** 			if (Mains_Glitch() || (mains_voltage_filtered < DISCONNECT_VOLTAGE))
 1669              		.loc 2 928 0 is_stmt 1
 1670 07f2 FFF7FEFF 		bl	Mains_Glitch	@
 1671 07f6 031E     		subs	r3, r0, #0	@ D.7183,,
 1672 07f8 04D1     		bne	.L67	@,
 1673              		.loc 2 928 0 is_stmt 0 discriminator 1
 1674 07fa 1C4B     		ldr	r3, .L85+4	@ tmp641,
 1675 07fc 1B88     		ldrh	r3, [r3]	@ D.7182, mains_voltage_filtered
ARM GAS  /tmp/ccSzia7W.s 			page 65


 1676 07fe 1C4A     		ldr	r2, .L85+8	@ tmp642,
 1677 0800 9342     		cmp	r3, r2	@ D.7182, tmp642
 1678 0802 29D8     		bhi	.L66	@,
 1679              	.L67:
 929:src/main.c    **** 			{
 930:src/main.c    **** 				if (need_to_save)
 1680              		.loc 2 930 0 is_stmt 1
 1681 0804 8E23     		movs	r3, #142	@ tmp643,
 1682 0806 6B44     		add	r3, r3, sp	@ tmp643,
 1683 0808 1B78     		ldrb	r3, [r3]	@ tmp644, need_to_save
 1684 080a 002B     		cmp	r3, #0	@ tmp644,
 1685 080c 20D0     		beq	.L68	@,
 931:src/main.c    **** 				{
 932:src/main.c    **** 					RelayOffFast ();
 1686              		.loc 2 932 0
 1687 080e FFF7FEFF 		bl	RelayOffFast	@
 933:src/main.c    **** 					//update de memoria
 934:src/main.c    **** 					param_struct.acumm_w2s = acum_secs;
 1688              		.loc 2 934 0
 1689 0812 184B     		ldr	r3, .L85+12	@ tmp645,
 1690 0814 1F9A     		ldr	r2, [sp, #124]	@ tmp646, acum_secs
 1691 0816 DA64     		str	r2, [r3, #76]	@ tmp646, param_struct.acumm_w2s
 935:src/main.c    **** 					param_struct.acumm_w2s_index = acum_secs_index;
 1692              		.loc 2 935 0
 1693 0818 164B     		ldr	r3, .L85+12	@ tmp647,
 1694 081a 8222     		movs	r2, #130	@ tmp648,
 1695 081c 6A44     		add	r2, r2, sp	@ tmp648,
 1696 081e 5021     		movs	r1, #80	@ tmp649,
 1697 0820 1288     		ldrh	r2, [r2]	@ tmp650, acum_secs_index
 1698 0822 5A52     		strh	r2, [r3, r1]	@ tmp650, param_struct.acumm_w2s_index
 936:src/main.c    **** 					param_struct.acumm_wh = acum_hours;
 1699              		.loc 2 936 0
 1700 0824 134B     		ldr	r3, .L85+12	@ tmp651,
 1701 0826 1E9A     		ldr	r2, [sp, #120]	@ tmp652, acum_hours
 1702 0828 9A64     		str	r2, [r3, #72]	@ tmp652, param_struct.acumm_wh
 937:src/main.c    **** 
 938:src/main.c    **** 					if (WriteConfigurations(&param_struct))
 1703              		.loc 2 938 0
 1704 082a 124B     		ldr	r3, .L85+12	@ tmp653,
 1705 082c 1800     		movs	r0, r3	@, tmp653
 1706 082e FFF7FEFF 		bl	WriteConfigurations	@
 1707 0832 031E     		subs	r3, r0, #0	@ tmp654,,
 1708 0834 04D0     		beq	.L69	@,
 939:src/main.c    **** 						Usart2Send("Saved OK!\r\n");
 1709              		.loc 2 939 0
 1710 0836 104B     		ldr	r3, .L85+16	@ tmp656,
 1711 0838 1800     		movs	r0, r3	@, tmp656
 1712 083a FFF7FEFF 		bl	Usart2Send	@
 1713 083e 03E0     		b	.L70	@
 1714              	.L69:
 940:src/main.c    **** 					else
 941:src/main.c    **** 						Usart2Send("Mem Error!\r\n");
 1715              		.loc 2 941 0
 1716 0840 0E4B     		ldr	r3, .L85+20	@ tmp657,
 1717 0842 1800     		movs	r0, r3	@, tmp657
 1718 0844 FFF7FEFF 		bl	Usart2Send	@
 1719              	.L70:
ARM GAS  /tmp/ccSzia7W.s 			page 66


 942:src/main.c    **** 					need_to_save = 0;
 1720              		.loc 2 942 0
 1721 0848 8E23     		movs	r3, #142	@ tmp658,
 1722 084a 6B44     		add	r3, r3, sp	@ tmp658,
 1723 084c 0022     		movs	r2, #0	@ tmp659,
 1724 084e 1A70     		strb	r2, [r3]	@ tmp660, need_to_save
 1725              	.L68:
 943:src/main.c    **** 				}
 944:src/main.c    **** 				main_state = GO_TO_MAINS_FAILURE;
 1726              		.loc 2 944 0
 1727 0850 7723     		movs	r3, #119	@ tmp661,
 1728 0852 6B44     		add	r3, r3, sp	@ tmp661,
 1729 0854 0A22     		movs	r2, #10	@ tmp662,
 1730 0856 1A70     		strb	r2, [r3]	@ tmp663, main_state
 1731              	.L66:
 1732              	.LBE2:
 945:src/main.c    **** 			}
 946:src/main.c    **** 		}
 947:src/main.c    **** 
 948:src/main.c    **** 		//Cosas que no dependen del estado del programa
 949:src/main.c    **** 		UpdateRelay ();
 1733              		.loc 2 949 0
 1734 0858 FFF7FEFF 		bl	UpdateRelay	@
 950:src/main.c    **** 		UpdatePhotoTransistor();
 1735              		.loc 2 950 0
 1736 085c FFF7FEFF 		bl	UpdatePhotoTransistor	@
 951:src/main.c    **** #ifdef USE_GSM
 952:src/main.c    **** 		FuncsGSM();
 1737              		.loc 2 952 0
 1738 0860 FFF7FEFF 		bl	FuncsGSM	@
 953:src/main.c    **** #endif
 954:src/main.c    **** 	}	//end while 1
 1739              		.loc 2 954 0
 1740 0864 B0E4     		b	.L71	@
 1741              	.L86:
 1742 0866 C046     		.align	2
 1743              	.L85:
 1744 0868 00000000 		.word	seq_ready
 1745 086c 00000000 		.word	mains_voltage_filtered
 1746 0870 F9060000 		.word	1785
 1747 0874 00000000 		.word	param_struct
 1748 0878 48010000 		.word	.LC53
 1749 087c 54010000 		.word	.LC55
 1750              		.cfi_endproc
 1751              	.LFE20:
 1752              		.size	main, .-main
 1753              		.section	.rodata
 1754 0161 000000   		.align	2
 1755              	.LC57:
 1756 0164 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1756      3A7B226D 
 1756      794E616D 
 1756      65223A22 
 1756      4E75636C 
 1757              		.align	2
 1758              	.LC59:
 1759 017c 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
ARM GAS  /tmp/ccSzia7W.s 			page 67


 1759      54656D70 
 1759      65726174 
 1759      75726522 
 1759      3A256C75 
 1760 0195 000000   		.align	2
 1761              	.LC61:
 1762 0198 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1762      48756D69 
 1762      64697479 
 1762      223A256C 
 1762      752E256C 
 1763 01ae 0000     		.align	2
 1764              	.LC63:
 1765 01b0 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1765      50726573 
 1765      73757265 
 1765      223A256C 
 1765      752E256C 
 1766 01c6 0000     		.align	2
 1767              	.LC65:
 1768 01c8 7D7D00   		.ascii	"}}\000"
 1769              		.section	.text.prepare_json_pkt,"ax",%progbits
 1770              		.align	2
 1771              		.global	prepare_json_pkt
 1772              		.code	16
 1773              		.thumb_func
 1774              		.type	prepare_json_pkt, %function
 1775              	prepare_json_pkt:
 1776              	.LFB21:
 955:src/main.c    **** 
 956:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 957:src/main.c    **** 
 958:src/main.c    **** 	while (1)
 959:src/main.c    **** 	{
 960:src/main.c    **** 		switch (main_state)
 961:src/main.c    **** 		{
 962:src/main.c    **** 			case MAIN_INIT:
 963:src/main.c    **** 				RelayOff();
 964:src/main.c    **** 				LED_OFF;
 965:src/main.c    **** 				FillPhotoBuffer();
 966:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 967:src/main.c    **** 				FillTempBuffer();
 968:src/main.c    **** #endif
 969:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 970:src/main.c    **** 				Update_TIM3_CH1 (0);
 971:src/main.c    **** #endif
 972:src/main.c    **** 				main_state = SYNCHRO_ADC;
 973:src/main.c    **** #ifdef ADC_WITH_INT
 974:src/main.c    **** 				seq_ready = 0;
 975:src/main.c    **** #endif
 976:src/main.c    **** 				break;
 977:src/main.c    **** 
 978:src/main.c    **** 			case SYNCHRO_ADC:
 979:src/main.c    **** #ifdef ADC_WITH_INT
 980:src/main.c    **** 				if (seq_ready)
 981:src/main.c    **** #endif
 982:src/main.c    **** 				{
ARM GAS  /tmp/ccSzia7W.s 			page 68


 983:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 984:src/main.c    **** 				}
 985:src/main.c    **** 				break;
 986:src/main.c    **** 
 987:src/main.c    **** 			case SET_ZERO_CURRENT:
 988:src/main.c    **** 				main_state = LAMP_OFF;
 989:src/main.c    **** 				break;
 990:src/main.c    **** 
 991:src/main.c    **** 			case LAMP_OFF:
 992:src/main.c    **** 				if (!tt_relay_on_off)
 993:src/main.c    **** 				{
 994:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 995:src/main.c    **** 					{
 996:src/main.c    **** 						main_state = LAMP_ON;
 997:src/main.c    **** 						tt_relay_on_off = 10000;
 998:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 999:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
1000:src/main.c    **** 	#endif
1001:src/main.c    **** 
1002:src/main.c    **** 						RelayOn();
1003:src/main.c    **** 						LED_ON;
1004:src/main.c    **** 	#ifdef WITH_HYST
1005:src/main.c    **** 						hours = 0;
1006:src/main.c    **** 	#endif
1007:src/main.c    **** 					}
1008:src/main.c    **** 				}
1009:src/main.c    **** 				break;
1010:src/main.c    **** 
1011:src/main.c    **** 			case LAMP_ON:
1012:src/main.c    **** 				if (!tt_relay_on_off)
1013:src/main.c    **** 				{
1014:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
1015:src/main.c    **** 					hyst = GetHysteresis (hours);
1016:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
1017:src/main.c    **** 	#else
1018:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
1019:src/main.c    **** 	#endif
1020:src/main.c    **** 					{
1021:src/main.c    **** 						main_state = LAMP_OFF;
1022:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
1023:src/main.c    **** 						Update_TIM3_CH1 (0);
1024:src/main.c    **** 	#endif
1025:src/main.c    **** 						tt_relay_on_off = 10000;
1026:src/main.c    **** 						RelayOff();
1027:src/main.c    **** 						LED_OFF;
1028:src/main.c    **** 					}
1029:src/main.c    **** 				}
1030:src/main.c    **** 
1031:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
1032:src/main.c    **** 				if (main_state == LAMP_ON)
1033:src/main.c    **** 				{
1034:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
1035:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
1036:src/main.c    **** 				}
1037:src/main.c    **** 	#endif
1038:src/main.c    **** 				break;
1039:src/main.c    **** 
ARM GAS  /tmp/ccSzia7W.s 			page 69


1040:src/main.c    **** 			default:
1041:src/main.c    **** 				main_state = MAIN_INIT;
1042:src/main.c    **** 				break;
1043:src/main.c    **** 		}
1044:src/main.c    **** 
1045:src/main.c    **** 		if (!timer_standby)
1046:src/main.c    **** 		{
1047:src/main.c    **** #ifdef WITH_TEMP_CONTROL
1048:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
1049:src/main.c    **** #else
1050:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
1051:src/main.c    **** #endif
1052:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
1053:src/main.c    **** 			Usart2Send(s_lcd);
1054:src/main.c    **** 			timer_standby = 2000;
1055:src/main.c    **** 		}
1056:src/main.c    **** 
1057:src/main.c    **** 		//Cosas que no dependen del estado del programa
1058:src/main.c    **** 		UpdateRelay ();
1059:src/main.c    **** #ifdef WITH_TEMP_CONTROL
1060:src/main.c    **** 		UpdateTemp();
1061:src/main.c    **** #endif
1062:src/main.c    **** 		UpdatePhotoTransistor();
1063:src/main.c    **** 	}	//end while 1
1064:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
1065:src/main.c    **** #endif	//USE_REDONDA_BASIC
1066:src/main.c    **** 
1067:src/main.c    **** 
1068:src/main.c    **** #ifdef USE_MQTT_LIB
1069:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
1070:src/main.c    **** 	int rc = 0;
1071:src/main.c    **** 	char buf[200];
1072:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
1073:src/main.c    **** 	char* payload = "mypayload";
1074:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
1075:src/main.c    **** 	int len = 0;
1076:src/main.c    **** 
1077:src/main.c    **** 	data.clientID.cstring = "me";
1078:src/main.c    **** 	data.keepAliveInterval = 20;
1079:src/main.c    **** 	data.cleansession = 1;
1080:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
1081:src/main.c    **** 
1082:src/main.c    **** 	topicString.cstring = "mytopic";
1083:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
1084:src/main.c    **** 
1085:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
1086:src/main.c    **** 	//falta abrir puerto
1087:src/main.c    **** 	//falta enviar al socket
1088:src/main.c    **** 	//falta cerrar socket
1089:src/main.c    **** #endif
1090:src/main.c    **** 
1091:src/main.c    **** //	//---------- Prueba USART2 --------//
1092:src/main.c    **** //
1093:src/main.c    **** //    while( 1 )
1094:src/main.c    **** //    {
1095:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1096:src/main.c    **** //        Wait_ms(3000);
ARM GAS  /tmp/ccSzia7W.s 			page 70


1097:src/main.c    **** //    }
1098:src/main.c    **** //
1099:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
1100:src/main.c    **** 
1101:src/main.c    **** 	//---------- Prueba con GPS --------//
1102:src/main.c    **** #ifdef USE_GPS
1103:src/main.c    **** 	Usart2SendSingle('M');
1104:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1105:src/main.c    **** 	Wait_ms(1000);
1106:src/main.c    **** 
1107:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
1108:src/main.c    **** 
1109:src/main.c    **** 	//mando reset al gps
1110:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
1111:src/main.c    **** 	GPSStartResetSM ();
1112:src/main.c    **** 	while (GPSStart() != RESP_OK);
1113:src/main.c    **** 
1114:src/main.c    **** 	//mando conf al gps
1115:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
1116:src/main.c    **** 	GPSConfigResetSM ();
1117:src/main.c    **** 	while (GPSConfig() != RESP_OK);
1118:src/main.c    **** 
1119:src/main.c    **** //	//mando reset factory al gps
1120:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
1121:src/main.c    **** //	GPSResetFactoryResetSM ();
1122:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
1123:src/main.c    **** 
1124:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
1125:src/main.c    **** //	timer_standby = 60000;
1126:src/main.c    **** //	while( timer_standby )
1127:src/main.c    **** 	while( 1 )
1128:src/main.c    **** 	{
1129:src/main.c    **** 		if (gps_pckt_ready)
1130:src/main.c    **** 		{
1131:src/main.c    **** 			gps_pckt_ready = 0;
1132:src/main.c    **** 			//Usart2SendSingle('P');
1133:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
1134:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
1135:src/main.c    **** 		}
1136:src/main.c    **** 
1137:src/main.c    **** 		GPSProcess();
1138:src/main.c    **** 	}
1139:src/main.c    **** #endif
1140:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
1141:src/main.c    **** 
1142:src/main.c    **** 	//---------- Prueba con GSM --------//
1143:src/main.c    **** #ifdef USE_GSM
1144:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
1145:src/main.c    **** 
1146:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
1147:src/main.c    **** 
1148:src/main.c    **** 
1149:src/main.c    **** 	//Pruebo USART1
1150:src/main.c    **** //	while (1)
1151:src/main.c    **** //	{
1152:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
1153:src/main.c    **** //			Wait_ms(50);
ARM GAS  /tmp/ccSzia7W.s 			page 71


1154:src/main.c    **** //	}
1155:src/main.c    **** 
1156:src/main.c    **** 
1157:src/main.c    **** 	//mando start al gsm
1158:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
1159:src/main.c    **** 	//GPSStartResetSM ();
1160:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
1161:src/main.c    **** 	while (timer_standby)
1162:src/main.c    **** 	{
1163:src/main.c    **** 		i = GSM_Start();
1164:src/main.c    **** 		if (i == 2)
1165:src/main.c    **** 		{
1166:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
1167:src/main.c    **** 			timer_standby = 0;
1168:src/main.c    **** 		}
1169:src/main.c    **** 
1170:src/main.c    **** 		if (i == 4)
1171:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
1172:src/main.c    **** 	}
1173:src/main.c    **** 
1174:src/main.c    **** 	//mando conf al gsm
1175:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
1176:src/main.c    **** 	//GPSConfigResetSM ();
1177:src/main.c    **** 
1178:src/main.c    **** 	i = 0;
1179:src/main.c    **** 	while (i == 0)
1180:src/main.c    **** 	{
1181:src/main.c    **** 		ii = GSM_Config(1000);
1182:src/main.c    **** 
1183:src/main.c    **** 		if (ii == 2)
1184:src/main.c    **** 			i = 0;
1185:src/main.c    **** 		else if (ii > 2)
1186:src/main.c    **** 		{
1187:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
1188:src/main.c    **** 			while (1);
1189:src/main.c    **** 		}
1190:src/main.c    **** 
1191:src/main.c    **** 		GSMProcess();
1192:src/main.c    **** 		GSMReceive ();
1193:src/main.c    **** 
1194:src/main.c    **** 		if (gsm_pckt_ready)
1195:src/main.c    **** 		{
1196:src/main.c    **** 			gsm_pckt_ready = 0;
1197:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1198:src/main.c    **** 		}
1199:src/main.c    **** 
1200:src/main.c    **** 		if (LIGHT)
1201:src/main.c    **** 			LED_ON;
1202:src/main.c    **** 		else
1203:src/main.c    **** 			LED_OFF;
1204:src/main.c    **** 	}
1205:src/main.c    **** 
1206:src/main.c    **** 
1207:src/main.c    **** 	while( 1 )
1208:src/main.c    **** 	{
1209:src/main.c    **** 		if (gsm_pckt_ready)
1210:src/main.c    **** 		{
ARM GAS  /tmp/ccSzia7W.s 			page 72


1211:src/main.c    **** 			gsm_pckt_ready = 0;
1212:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1213:src/main.c    **** 		}
1214:src/main.c    **** 
1215:src/main.c    **** 		GSMProcess();
1216:src/main.c    **** 
1217:src/main.c    **** 		if (LIGHT)
1218:src/main.c    **** 			LED_ON;
1219:src/main.c    **** 
1220:src/main.c    **** 	}
1221:src/main.c    **** #endif
1222:src/main.c    **** 
1223:src/main.c    **** 
1224:src/main.c    **** 
1225:src/main.c    **** 
1226:src/main.c    **** 	//---------- Prueba temp --------//
1227:src/main.c    **** 	/*
1228:src/main.c    **** 	while (1)
1229:src/main.c    **** 	{
1230:src/main.c    **** 		local_meas = GetTemp();
1231:src/main.c    **** 		if (local_meas != local_meas_last)
1232:src/main.c    **** 		{
1233:src/main.c    **** 			LED_ON;
1234:src/main.c    **** 			local_meas_last = local_meas;
1235:src/main.c    **** 			LCD_2DO_RENGLON;
1236:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
1237:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
1238:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
1239:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
1240:src/main.c    **** 			LCDTransmitStr(s_lcd);
1241:src/main.c    **** 			LED_OFF;
1242:src/main.c    **** 		}
1243:src/main.c    **** 
1244:src/main.c    **** 		UpdateTemp();
1245:src/main.c    **** 	}
1246:src/main.c    **** 	*/
1247:src/main.c    **** 	//---------- Fin prueba temp --------//
1248:src/main.c    **** 
1249:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
1250:src/main.c    **** 	/*
1251:src/main.c    **** 	local_meas = 0;
1252:src/main.c    **** 	while (1)
1253:src/main.c    **** 	{
1254:src/main.c    **** 		LCD_2DO_RENGLON;
1255:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
1256:src/main.c    **** 		fcalc = local_meas;
1257:src/main.c    **** 		fcalc = fcalc * K_1TO10;
1258:src/main.c    **** 		one_int = (short) fcalc;
1259:src/main.c    **** 		fcalc = fcalc - one_int;
1260:src/main.c    **** 		fcalc = fcalc * 10;
1261:src/main.c    **** 		one_dec = (short) fcalc;
1262:src/main.c    **** 
1263:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
1264:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
1265:src/main.c    **** 		LCDTransmitStr(s_lcd);
1266:src/main.c    **** 
1267:src/main.c    **** 		Wait_ms (1000);
ARM GAS  /tmp/ccSzia7W.s 			page 73


1268:src/main.c    **** 		if (local_meas <= 255)
1269:src/main.c    **** 			local_meas = 0;
1270:src/main.c    **** 		else
1271:src/main.c    **** 			local_meas++;
1272:src/main.c    **** 	}
1273:src/main.c    **** 	*/
1274:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
1275:src/main.c    **** 
1276:src/main.c    **** 
1277:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
1278:src/main.c    **** 
1279:src/main.c    **** 	return 0;
1280:src/main.c    **** }
1281:src/main.c    **** 
1282:src/main.c    **** //--- End of Main ---//
1283:src/main.c    **** 
1284:src/main.c    **** 
1285:src/main.c    **** 
1286:src/main.c    **** 
1287:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
1288:src/main.c    **** {
 1777              		.loc 2 1288 0
 1778              		.cfi_startproc
 1779 0000 00B5     		push	{lr}	@
 1780              	.LCFI6:
 1781              		.cfi_def_cfa_offset 4
 1782              		.cfi_offset 14, -4
 1783 0002 97B0     		sub	sp, sp, #92	@,,
 1784              	.LCFI7:
 1785              		.cfi_def_cfa_offset 96
 1786 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
1289:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1787              		.loc 2 1289 0
 1788 0006 0123     		movs	r3, #1	@ tmp112,
 1789 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1790 000a 0223     		movs	r3, #2	@ tmp113,
 1791 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1792 000e 0323     		movs	r3, #3	@ tmp114,
 1793 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1794 0012 0423     		movs	r3, #4	@ tmp115,
 1795 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1796 0016 0523     		movs	r3, #5	@ tmp116,
 1797 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1798 001a 0623     		movs	r3, #6	@ tmp117,
 1799 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
1290:src/main.c    ****       char tempbuff[40];
1291:src/main.c    ****       volatile float HUMIDITY_Value;
1292:src/main.c    ****       volatile float TEMPERATURE_Value;
1293:src/main.c    ****       volatile float PRESSURE_Value;
1294:src/main.c    **** 
1295:src/main.c    **** 
1296:src/main.c    **** 
1297:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1800              		.loc 2 1297 0
 1801 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1802 0020 1E4B     		ldr	r3, .L89	@ tmp119,
 1803 0022 1000     		movs	r0, r2	@ tmp120, tmp118
ARM GAS  /tmp/ccSzia7W.s 			page 74


 1804 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1805 0026 1823     		movs	r3, #24	@ tmp122,
 1806 0028 1A00     		movs	r2, r3	@, tmp122
 1807 002a FFF7FEFF 		bl	memcpy	@
1298:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1299:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1300:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1808              		.loc 2 1300 0
 1809 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1810 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1811 0032 1B49     		ldr	r1, .L89+4	@ tmp127,
 1812 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1813 0036 FFF7FEFF 		bl	sprintf	@
1301:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1814              		.loc 2 1301 0
 1815 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1816 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1817 003e 1100     		movs	r1, r2	@, tmp129
 1818 0040 1800     		movs	r0, r3	@, tmp130
 1819 0042 FFF7FEFF 		bl	strcat	@
1302:src/main.c    **** 
1303:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1304:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1305:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1820              		.loc 2 1305 0
 1821 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1822 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1823 004a 1649     		ldr	r1, .L89+8	@ tmp133,
 1824 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1825 004e FFF7FEFF 		bl	sprintf	@
1306:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1826              		.loc 2 1306 0
 1827 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1828 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1829 0056 1100     		movs	r1, r2	@, tmp135
 1830 0058 1800     		movs	r0, r3	@, tmp136
 1831 005a FFF7FEFF 		bl	strcat	@
1307:src/main.c    **** 
1308:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1309:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1310:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1832              		.loc 2 1310 0
 1833 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1834 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1835 0062 1149     		ldr	r1, .L89+12	@ tmp139,
 1836 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1837 0066 FFF7FEFF 		bl	sprintf	@
1311:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1838              		.loc 2 1311 0
 1839 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1840 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1841 006e 1100     		movs	r1, r2	@, tmp141
 1842 0070 1800     		movs	r0, r3	@, tmp142
 1843 0072 FFF7FEFF 		bl	strcat	@
1312:src/main.c    **** 
1313:src/main.c    **** 
1314:src/main.c    ****       strcat((char *)buffer,"}}");
ARM GAS  /tmp/ccSzia7W.s 			page 75


 1844              		.loc 2 1314 0
 1845 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1846 0078 1800     		movs	r0, r3	@, tmp143
 1847 007a FFF7FEFF 		bl	strlen	@
 1848 007e 0300     		movs	r3, r0	@ tmp144,
 1849 0080 1A00     		movs	r2, r3	@ D.7217, tmp145
 1850 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1851 0084 9A18     		adds	r2, r3, r2	@ D.7218, tmp146, D.7217
 1852 0086 094B     		ldr	r3, .L89+16	@ tmp147,
 1853 0088 1000     		movs	r0, r2	@ tmp148, D.7218
 1854 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1855 008c 0323     		movs	r3, #3	@ tmp150,
 1856 008e 1A00     		movs	r2, r3	@, tmp150
 1857 0090 FFF7FEFF 		bl	memcpy	@
1315:src/main.c    **** 
1316:src/main.c    ****       return;
 1858              		.loc 2 1316 0
 1859 0094 C046     		nop
1317:src/main.c    **** }
 1860              		.loc 2 1317 0
 1861 0096 17B0     		add	sp, sp, #92	@,,
 1862              		@ sp needed	@
 1863 0098 00BD     		pop	{pc}
 1864              	.L90:
 1865 009a C046     		.align	2
 1866              	.L89:
 1867 009c 64010000 		.word	.LC57
 1868 00a0 7C010000 		.word	.LC59
 1869 00a4 98010000 		.word	.LC61
 1870 00a8 B0010000 		.word	.LC63
 1871 00ac C8010000 		.word	.LC65
 1872              		.cfi_endproc
 1873              	.LFE21:
 1874              		.size	prepare_json_pkt, .-prepare_json_pkt
 1875              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1876              		.align	2
 1877              		.global	TimingDelay_Decrement
 1878              		.code	16
 1879              		.thumb_func
 1880              		.type	TimingDelay_Decrement, %function
 1881              	TimingDelay_Decrement:
 1882              	.LFB22:
1318:src/main.c    **** 
1319:src/main.c    **** void TimingDelay_Decrement(void)
1320:src/main.c    **** {
 1883              		.loc 2 1320 0
 1884              		.cfi_startproc
 1885 0000 10B5     		push	{r4, lr}	@
 1886              	.LCFI8:
 1887              		.cfi_def_cfa_offset 8
 1888              		.cfi_offset 4, -8
 1889              		.cfi_offset 14, -4
1321:src/main.c    **** 	if (wait_ms_var)
 1890              		.loc 2 1321 0
 1891 0002 324B     		ldr	r3, .L100	@ tmp134,
 1892 0004 1B88     		ldrh	r3, [r3]	@ tmp135, wait_ms_var
 1893 0006 9BB2     		uxth	r3, r3	@ D.7230, tmp135
ARM GAS  /tmp/ccSzia7W.s 			page 76


 1894 0008 002B     		cmp	r3, #0	@ D.7230,
 1895 000a 06D0     		beq	.L92	@,
1322:src/main.c    **** 		wait_ms_var--;
 1896              		.loc 2 1322 0
 1897 000c 2F4B     		ldr	r3, .L100	@ tmp136,
 1898 000e 1B88     		ldrh	r3, [r3]	@ tmp137, wait_ms_var
 1899 0010 9BB2     		uxth	r3, r3	@ D.7230, tmp137
 1900 0012 013B     		subs	r3, r3, #1	@ tmp138,
 1901 0014 9AB2     		uxth	r2, r3	@ D.7230, tmp138
 1902 0016 2D4B     		ldr	r3, .L100	@ tmp139,
 1903 0018 1A80     		strh	r2, [r3]	@ tmp140, wait_ms_var
 1904              	.L92:
1323:src/main.c    **** 
1324:src/main.c    **** 	if (timer_standby)
 1905              		.loc 2 1324 0
 1906 001a 2D4B     		ldr	r3, .L100+4	@ tmp141,
 1907 001c 1B88     		ldrh	r3, [r3]	@ tmp142, timer_standby
 1908 001e 9BB2     		uxth	r3, r3	@ D.7230, tmp142
 1909 0020 002B     		cmp	r3, #0	@ D.7230,
 1910 0022 06D0     		beq	.L93	@,
1325:src/main.c    **** 		timer_standby--;
 1911              		.loc 2 1325 0
 1912 0024 2A4B     		ldr	r3, .L100+4	@ tmp143,
 1913 0026 1B88     		ldrh	r3, [r3]	@ tmp144, timer_standby
 1914 0028 9BB2     		uxth	r3, r3	@ D.7230, tmp144
 1915 002a 013B     		subs	r3, r3, #1	@ tmp145,
 1916 002c 9AB2     		uxth	r2, r3	@ D.7230, tmp145
 1917 002e 284B     		ldr	r3, .L100+4	@ tmp146,
 1918 0030 1A80     		strh	r2, [r3]	@ tmp147, timer_standby
 1919              	.L93:
1326:src/main.c    **** 
1327:src/main.c    **** #ifdef USE_REDONDA_BASIC
1328:src/main.c    **** 	if (tt_take_photo_sample)
 1920              		.loc 2 1328 0
 1921 0032 284B     		ldr	r3, .L100+8	@ tmp148,
 1922 0034 1B88     		ldrh	r3, [r3]	@ tmp149, tt_take_photo_sample
 1923 0036 9BB2     		uxth	r3, r3	@ D.7230, tmp149
 1924 0038 002B     		cmp	r3, #0	@ D.7230,
 1925 003a 06D0     		beq	.L94	@,
1329:src/main.c    **** 		tt_take_photo_sample--;
 1926              		.loc 2 1329 0
 1927 003c 254B     		ldr	r3, .L100+8	@ tmp150,
 1928 003e 1B88     		ldrh	r3, [r3]	@ tmp151, tt_take_photo_sample
 1929 0040 9BB2     		uxth	r3, r3	@ D.7230, tmp151
 1930 0042 013B     		subs	r3, r3, #1	@ tmp152,
 1931 0044 9AB2     		uxth	r2, r3	@ D.7230, tmp152
 1932 0046 234B     		ldr	r3, .L100+8	@ tmp153,
 1933 0048 1A80     		strh	r2, [r3]	@ tmp154, tt_take_photo_sample
 1934              	.L94:
1330:src/main.c    **** 
1331:src/main.c    **** 	if (tt_relay_on_off)
 1935              		.loc 2 1331 0
 1936 004a 234B     		ldr	r3, .L100+12	@ tmp155,
 1937 004c 1B88     		ldrh	r3, [r3]	@ tmp156, tt_relay_on_off
 1938 004e 9BB2     		uxth	r3, r3	@ D.7230, tmp156
 1939 0050 002B     		cmp	r3, #0	@ D.7230,
 1940 0052 06D0     		beq	.L95	@,
ARM GAS  /tmp/ccSzia7W.s 			page 77


1332:src/main.c    **** 		tt_relay_on_off--;
 1941              		.loc 2 1332 0
 1942 0054 204B     		ldr	r3, .L100+12	@ tmp157,
 1943 0056 1B88     		ldrh	r3, [r3]	@ tmp158, tt_relay_on_off
 1944 0058 9BB2     		uxth	r3, r3	@ D.7230, tmp158
 1945 005a 013B     		subs	r3, r3, #1	@ tmp159,
 1946 005c 9AB2     		uxth	r2, r3	@ D.7230, tmp159
 1947 005e 1E4B     		ldr	r3, .L100+12	@ tmp160,
 1948 0060 1A80     		strh	r2, [r3]	@ tmp161, tt_relay_on_off
 1949              	.L95:
1333:src/main.c    **** #endif
1334:src/main.c    **** 
1335:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1336:src/main.c    **** 	if (tt_take_temp_sample)
1337:src/main.c    **** 		tt_take_temp_sample--;
1338:src/main.c    **** #endif
1339:src/main.c    **** 
1340:src/main.c    **** 	if (take_temp_sample)
 1950              		.loc 2 1340 0
 1951 0062 1E4B     		ldr	r3, .L100+16	@ tmp162,
 1952 0064 1B88     		ldrh	r3, [r3]	@ tmp163, take_temp_sample
 1953 0066 9BB2     		uxth	r3, r3	@ D.7230, tmp163
 1954 0068 002B     		cmp	r3, #0	@ D.7230,
 1955 006a 06D0     		beq	.L96	@,
1341:src/main.c    **** 		take_temp_sample--;
 1956              		.loc 2 1341 0
 1957 006c 1B4B     		ldr	r3, .L100+16	@ tmp164,
 1958 006e 1B88     		ldrh	r3, [r3]	@ tmp165, take_temp_sample
 1959 0070 9BB2     		uxth	r3, r3	@ D.7230, tmp165
 1960 0072 013B     		subs	r3, r3, #1	@ tmp166,
 1961 0074 9AB2     		uxth	r2, r3	@ D.7230, tmp166
 1962 0076 194B     		ldr	r3, .L100+16	@ tmp167,
 1963 0078 1A80     		strh	r2, [r3]	@ tmp168, take_temp_sample
 1964              	.L96:
1342:src/main.c    **** 
1343:src/main.c    **** 	if (timer_meas)
 1965              		.loc 2 1343 0
 1966 007a 194B     		ldr	r3, .L100+20	@ tmp169,
 1967 007c 1B78     		ldrb	r3, [r3]	@ tmp170, timer_meas
 1968 007e DBB2     		uxtb	r3, r3	@ D.7231, tmp170
 1969 0080 002B     		cmp	r3, #0	@ D.7231,
 1970 0082 06D0     		beq	.L97	@,
1344:src/main.c    **** 		timer_meas--;
 1971              		.loc 2 1344 0
 1972 0084 164B     		ldr	r3, .L100+20	@ tmp171,
 1973 0086 1B78     		ldrb	r3, [r3]	@ tmp172, timer_meas
 1974 0088 DBB2     		uxtb	r3, r3	@ D.7231, tmp172
 1975 008a 013B     		subs	r3, r3, #1	@ tmp173,
 1976 008c DAB2     		uxtb	r2, r3	@ D.7231, tmp173
 1977 008e 144B     		ldr	r3, .L100+20	@ tmp174,
 1978 0090 1A70     		strb	r2, [r3]	@ tmp175, timer_meas
 1979              	.L97:
1345:src/main.c    **** 
1346:src/main.c    **** 	// //cuenta de a 1 minuto
1347:src/main.c    **** 	// if (secs > 59999)	//pasaron 1 min
1348:src/main.c    **** 	// {
1349:src/main.c    **** 	// 	minutes++;
ARM GAS  /tmp/ccSzia7W.s 			page 78


1350:src/main.c    **** 	// 	secs = 0;
1351:src/main.c    **** 	// }
1352:src/main.c    **** 	// else
1353:src/main.c    **** 	// 	secs++;
1354:src/main.c    **** 	//
1355:src/main.c    **** 	// if (minutes > 60)
1356:src/main.c    **** 	// {
1357:src/main.c    **** 	// 	hours++;
1358:src/main.c    **** 	// 	minutes = 0;
1359:src/main.c    **** 	// }
1360:src/main.c    **** 
1361:src/main.c    **** #ifdef USE_MQTT_LIB
1362:src/main.c    **** 	//timer del MQTT
1363:src/main.c    **** 	SysTickIntHandler();
1364:src/main.c    **** #endif
1365:src/main.c    **** 
1366:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1367:src/main.c    **** 	if (usart1_mini_timeout)
 1980              		.loc 2 1367 0
 1981 0092 144B     		ldr	r3, .L100+24	@ tmp176,
 1982 0094 1B78     		ldrb	r3, [r3]	@ tmp177, usart1_mini_timeout
 1983 0096 DBB2     		uxtb	r3, r3	@ D.7231, tmp177
 1984 0098 002B     		cmp	r3, #0	@ D.7231,
 1985 009a 06D0     		beq	.L98	@,
1368:src/main.c    **** 		usart1_mini_timeout--;
 1986              		.loc 2 1368 0
 1987 009c 114B     		ldr	r3, .L100+24	@ tmp178,
 1988 009e 1B78     		ldrb	r3, [r3]	@ tmp179, usart1_mini_timeout
 1989 00a0 DBB2     		uxtb	r3, r3	@ D.7231, tmp179
 1990 00a2 013B     		subs	r3, r3, #1	@ tmp180,
 1991 00a4 DAB2     		uxtb	r2, r3	@ D.7231, tmp180
 1992 00a6 0F4B     		ldr	r3, .L100+24	@ tmp181,
 1993 00a8 1A70     		strb	r2, [r3]	@ tmp182, usart1_mini_timeout
 1994              	.L98:
1369:src/main.c    **** 	if (usart2_mini_timeout)
 1995              		.loc 2 1369 0
 1996 00aa 0F4B     		ldr	r3, .L100+28	@ tmp183,
 1997 00ac 1B78     		ldrb	r3, [r3]	@ tmp184, usart2_mini_timeout
 1998 00ae DBB2     		uxtb	r3, r3	@ D.7231, tmp184
 1999 00b0 002B     		cmp	r3, #0	@ D.7231,
 2000 00b2 06D0     		beq	.L99	@,
1370:src/main.c    **** 		usart2_mini_timeout--;
 2001              		.loc 2 1370 0
 2002 00b4 0C4B     		ldr	r3, .L100+28	@ tmp185,
 2003 00b6 1B78     		ldrb	r3, [r3]	@ tmp186, usart2_mini_timeout
 2004 00b8 DBB2     		uxtb	r3, r3	@ D.7231, tmp186
 2005 00ba 013B     		subs	r3, r3, #1	@ tmp187,
 2006 00bc DAB2     		uxtb	r2, r3	@ D.7231, tmp187
 2007 00be 0A4B     		ldr	r3, .L100+28	@ tmp188,
 2008 00c0 1A70     		strb	r2, [r3]	@ tmp189, usart2_mini_timeout
 2009              	.L99:
1371:src/main.c    **** #endif
1372:src/main.c    **** #ifdef USE_GPS
1373:src/main.c    **** 	GPSTimeoutCounters ();
1374:src/main.c    **** #endif
1375:src/main.c    **** 
1376:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
ARM GAS  /tmp/ccSzia7W.s 			page 79


1377:src/main.c    **** 	GSMTimeoutCounters ();
 2010              		.loc 2 1377 0
 2011 00c2 FFF7FEFF 		bl	GSMTimeoutCounters	@
1378:src/main.c    **** #endif
1379:src/main.c    **** }
 2012              		.loc 2 1379 0
 2013 00c6 C046     		nop
 2014              		@ sp needed	@
 2015 00c8 10BD     		pop	{r4, pc}
 2016              	.L101:
 2017 00ca C046     		.align	2
 2018              	.L100:
 2019 00cc 00000000 		.word	wait_ms_var
 2020 00d0 00000000 		.word	timer_standby
 2021 00d4 00000000 		.word	tt_take_photo_sample
 2022 00d8 00000000 		.word	tt_relay_on_off
 2023 00dc 00000000 		.word	take_temp_sample
 2024 00e0 00000000 		.word	timer_meas
 2025 00e4 00000000 		.word	usart1_mini_timeout
 2026 00e8 00000000 		.word	usart2_mini_timeout
 2027              		.cfi_endproc
 2028              	.LFE22:
 2029              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 2030              		.text
 2031              	.Letext0:
 2032              		.file 3 "./cmsis_boot/stm32f0xx.h"
 2033              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 2034              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 2035              		.file 6 "src/hard.h"
 2036              		.file 7 "src/flash_program.h"
 2037              		.file 8 "src/funcs_gsm.h"
 2038              		.section	.debug_info,"",%progbits
 2039              	.Ldebug_info0:
 2040 0000 720D0000 		.4byte	0xd72
 2041 0004 0200     		.2byte	0x2
 2042 0006 00000000 		.4byte	.Ldebug_abbrev0
 2043 000a 04       		.byte	0x4
 2044 000b 01       		.uleb128 0x1
 2045 000c 9E090000 		.4byte	.LASF201
 2046 0010 0C       		.byte	0xc
 2047 0011 80090000 		.4byte	.LASF202
 2048 0015 AD070000 		.4byte	.LASF203
 2049 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2050 001d 00000000 		.4byte	0
 2051 0021 00000000 		.4byte	0
 2052 0025 00000000 		.4byte	.Ldebug_line0
 2053 0029 02       		.uleb128 0x2
 2054 002a 0C060000 		.4byte	.LASF133
 2055 002e 01       		.byte	0x1
 2056 002f 06010000 		.4byte	0x106
 2057 0033 03       		.byte	0x3
 2058 0034 C7       		.byte	0xc7
 2059 0035 06010000 		.4byte	0x106
 2060 0039 03       		.uleb128 0x3
 2061 003a 93060000 		.4byte	.LASF0
 2062 003e 72       		.sleb128 -14
 2063 003f 03       		.uleb128 0x3
ARM GAS  /tmp/ccSzia7W.s 			page 80


 2064 0040 4E0A0000 		.4byte	.LASF1
 2065 0044 73       		.sleb128 -13
 2066 0045 03       		.uleb128 0x3
 2067 0046 7C000000 		.4byte	.LASF2
 2068 004a 7B       		.sleb128 -5
 2069 004b 03       		.uleb128 0x3
 2070 004c 7E010000 		.4byte	.LASF3
 2071 0050 7E       		.sleb128 -2
 2072 0051 03       		.uleb128 0x3
 2073 0052 54070000 		.4byte	.LASF4
 2074 0056 7F       		.sleb128 -1
 2075 0057 04       		.uleb128 0x4
 2076 0058 9D040000 		.4byte	.LASF5
 2077 005c 00       		.byte	0
 2078 005d 04       		.uleb128 0x4
 2079 005e 71050000 		.4byte	.LASF6
 2080 0062 01       		.byte	0x1
 2081 0063 04       		.uleb128 0x4
 2082 0064 25060000 		.4byte	.LASF7
 2083 0068 02       		.byte	0x2
 2084 0069 04       		.uleb128 0x4
 2085 006a 06010000 		.4byte	.LASF8
 2086 006e 03       		.byte	0x3
 2087 006f 04       		.uleb128 0x4
 2088 0070 A7010000 		.4byte	.LASF9
 2089 0074 04       		.byte	0x4
 2090 0075 04       		.uleb128 0x4
 2091 0076 34010000 		.4byte	.LASF10
 2092 007a 05       		.byte	0x5
 2093 007b 04       		.uleb128 0x4
 2094 007c 46000000 		.4byte	.LASF11
 2095 0080 06       		.byte	0x6
 2096 0081 04       		.uleb128 0x4
 2097 0082 33000000 		.4byte	.LASF12
 2098 0086 07       		.byte	0x7
 2099 0087 04       		.uleb128 0x4
 2100 0088 36050000 		.4byte	.LASF13
 2101 008c 08       		.byte	0x8
 2102 008d 04       		.uleb128 0x4
 2103 008e C1030000 		.4byte	.LASF14
 2104 0092 09       		.byte	0x9
 2105 0093 04       		.uleb128 0x4
 2106 0094 16080000 		.4byte	.LASF15
 2107 0098 0A       		.byte	0xa
 2108 0099 04       		.uleb128 0x4
 2109 009a F7060000 		.4byte	.LASF16
 2110 009e 0B       		.byte	0xb
 2111 009f 04       		.uleb128 0x4
 2112 00a0 8B050000 		.4byte	.LASF17
 2113 00a4 0C       		.byte	0xc
 2114 00a5 04       		.uleb128 0x4
 2115 00a6 3E050000 		.4byte	.LASF18
 2116 00aa 0D       		.byte	0xd
 2117 00ab 04       		.uleb128 0x4
 2118 00ac B0060000 		.4byte	.LASF19
 2119 00b0 0E       		.byte	0xe
 2120 00b1 04       		.uleb128 0x4
ARM GAS  /tmp/ccSzia7W.s 			page 81


 2121 00b2 94070000 		.4byte	.LASF20
 2122 00b6 0F       		.byte	0xf
 2123 00b7 04       		.uleb128 0x4
 2124 00b8 B7030000 		.4byte	.LASF21
 2125 00bc 10       		.byte	0x10
 2126 00bd 04       		.uleb128 0x4
 2127 00be 39080000 		.4byte	.LASF22
 2128 00c2 11       		.byte	0x11
 2129 00c3 04       		.uleb128 0x4
 2130 00c4 0B080000 		.4byte	.LASF23
 2131 00c8 13       		.byte	0x13
 2132 00c9 04       		.uleb128 0x4
 2133 00ca 06040000 		.4byte	.LASF24
 2134 00ce 14       		.byte	0x14
 2135 00cf 04       		.uleb128 0x4
 2136 00d0 D8000000 		.4byte	.LASF25
 2137 00d4 15       		.byte	0x15
 2138 00d5 04       		.uleb128 0x4
 2139 00d6 E0060000 		.4byte	.LASF26
 2140 00da 16       		.byte	0x16
 2141 00db 04       		.uleb128 0x4
 2142 00dc 74010000 		.4byte	.LASF27
 2143 00e0 17       		.byte	0x17
 2144 00e1 04       		.uleb128 0x4
 2145 00e2 78070000 		.4byte	.LASF28
 2146 00e6 18       		.byte	0x18
 2147 00e7 04       		.uleb128 0x4
 2148 00e8 02020000 		.4byte	.LASF29
 2149 00ec 19       		.byte	0x19
 2150 00ed 04       		.uleb128 0x4
 2151 00ee 11090000 		.4byte	.LASF30
 2152 00f2 1A       		.byte	0x1a
 2153 00f3 04       		.uleb128 0x4
 2154 00f4 73060000 		.4byte	.LASF31
 2155 00f8 1B       		.byte	0x1b
 2156 00f9 04       		.uleb128 0x4
 2157 00fa C8020000 		.4byte	.LASF32
 2158 00fe 1C       		.byte	0x1c
 2159 00ff 04       		.uleb128 0x4
 2160 0100 61070000 		.4byte	.LASF33
 2161 0104 1E       		.byte	0x1e
 2162 0105 00       		.byte	0
 2163 0106 05       		.uleb128 0x5
 2164 0107 01       		.byte	0x1
 2165 0108 06       		.byte	0x6
 2166 0109 74090000 		.4byte	.LASF36
 2167 010d 06       		.uleb128 0x6
 2168 010e AF020000 		.4byte	.LASF34
 2169 0112 03       		.byte	0x3
 2170 0113 5F01     		.2byte	0x15f
 2171 0115 29000000 		.4byte	0x29
 2172 0119 07       		.uleb128 0x7
 2173 011a 19070000 		.4byte	.LASF35
 2174 011e 04       		.byte	0x4
 2175 011f 1D       		.byte	0x1d
 2176 0120 24010000 		.4byte	0x124
 2177 0124 05       		.uleb128 0x5
ARM GAS  /tmp/ccSzia7W.s 			page 82


 2178 0125 01       		.byte	0x1
 2179 0126 08       		.byte	0x8
 2180 0127 47080000 		.4byte	.LASF37
 2181 012b 05       		.uleb128 0x5
 2182 012c 02       		.byte	0x2
 2183 012d 05       		.byte	0x5
 2184 012e 60060000 		.4byte	.LASF38
 2185 0132 07       		.uleb128 0x7
 2186 0133 55020000 		.4byte	.LASF39
 2187 0137 04       		.byte	0x4
 2188 0138 2B       		.byte	0x2b
 2189 0139 3D010000 		.4byte	0x13d
 2190 013d 05       		.uleb128 0x5
 2191 013e 02       		.byte	0x2
 2192 013f 07       		.byte	0x7
 2193 0140 8B090000 		.4byte	.LASF40
 2194 0144 07       		.uleb128 0x7
 2195 0145 F4000000 		.4byte	.LASF41
 2196 0149 04       		.byte	0x4
 2197 014a 3F       		.byte	0x3f
 2198 014b 4F010000 		.4byte	0x14f
 2199 014f 05       		.uleb128 0x5
 2200 0150 04       		.byte	0x4
 2201 0151 05       		.byte	0x5
 2202 0152 6A060000 		.4byte	.LASF42
 2203 0156 07       		.uleb128 0x7
 2204 0157 5E080000 		.4byte	.LASF43
 2205 015b 04       		.byte	0x4
 2206 015c 41       		.byte	0x41
 2207 015d 61010000 		.4byte	0x161
 2208 0161 05       		.uleb128 0x5
 2209 0162 04       		.byte	0x4
 2210 0163 07       		.byte	0x7
 2211 0164 82070000 		.4byte	.LASF44
 2212 0168 05       		.uleb128 0x5
 2213 0169 08       		.byte	0x8
 2214 016a 05       		.byte	0x5
 2215 016b 8F040000 		.4byte	.LASF45
 2216 016f 05       		.uleb128 0x5
 2217 0170 08       		.byte	0x8
 2218 0171 07       		.byte	0x7
 2219 0172 0C020000 		.4byte	.LASF46
 2220 0176 08       		.uleb128 0x8
 2221 0177 04       		.byte	0x4
 2222 0178 05       		.byte	0x5
 2223 0179 696E7400 		.ascii	"int\000"
 2224 017d 05       		.uleb128 0x5
 2225 017e 04       		.byte	0x4
 2226 017f 07       		.byte	0x7
 2227 0180 C6000000 		.4byte	.LASF47
 2228 0184 07       		.uleb128 0x7
 2229 0185 11040000 		.4byte	.LASF48
 2230 0189 05       		.byte	0x5
 2231 018a 14       		.byte	0x14
 2232 018b 19010000 		.4byte	0x119
 2233 018f 07       		.uleb128 0x7
 2234 0190 F4050000 		.4byte	.LASF49
ARM GAS  /tmp/ccSzia7W.s 			page 83


 2235 0194 05       		.byte	0x5
 2236 0195 1A       		.byte	0x1a
 2237 0196 32010000 		.4byte	0x132
 2238 019a 07       		.uleb128 0x7
 2239 019b F1070000 		.4byte	.LASF50
 2240 019f 05       		.byte	0x5
 2241 01a0 1F       		.byte	0x1f
 2242 01a1 44010000 		.4byte	0x144
 2243 01a5 07       		.uleb128 0x7
 2244 01a6 C0010000 		.4byte	.LASF51
 2245 01aa 05       		.byte	0x5
 2246 01ab 20       		.byte	0x20
 2247 01ac 56010000 		.4byte	0x156
 2248 01b0 09       		.uleb128 0x9
 2249 01b1 2003     		.2byte	0x320
 2250 01b3 01       		.byte	0x1
 2251 01b4 71       		.byte	0x71
 2252 01b5 4D020000 		.4byte	0x24d
 2253 01b9 0A       		.uleb128 0xa
 2254 01ba DB010000 		.4byte	.LASF52
 2255 01be 01       		.byte	0x1
 2256 01bf 73       		.byte	0x73
 2257 01c0 64020000 		.4byte	0x264
 2258 01c4 02       		.byte	0x2
 2259 01c5 23       		.byte	0x23
 2260 01c6 00       		.uleb128 0
 2261 01c7 0A       		.uleb128 0xa
 2262 01c8 2E060000 		.4byte	.LASF53
 2263 01cc 01       		.byte	0x1
 2264 01cd 74       		.byte	0x74
 2265 01ce 69020000 		.4byte	0x269
 2266 01d2 02       		.byte	0x2
 2267 01d3 23       		.byte	0x23
 2268 01d4 04       		.uleb128 0x4
 2269 01d5 0A       		.uleb128 0xa
 2270 01d6 01090000 		.4byte	.LASF54
 2271 01da 01       		.byte	0x1
 2272 01db 75       		.byte	0x75
 2273 01dc 79020000 		.4byte	0x279
 2274 01e0 03       		.byte	0x3
 2275 01e1 23       		.byte	0x23
 2276 01e2 8001     		.uleb128 0x80
 2277 01e4 0A       		.uleb128 0xa
 2278 01e5 F9010000 		.4byte	.LASF55
 2279 01e9 01       		.byte	0x1
 2280 01ea 76       		.byte	0x76
 2281 01eb 69020000 		.4byte	0x269
 2282 01ef 03       		.byte	0x3
 2283 01f0 23       		.byte	0x23
 2284 01f1 8401     		.uleb128 0x84
 2285 01f3 0A       		.uleb128 0xa
 2286 01f4 670A0000 		.4byte	.LASF56
 2287 01f8 01       		.byte	0x1
 2288 01f9 77       		.byte	0x77
 2289 01fa 7E020000 		.4byte	0x27e
 2290 01fe 03       		.byte	0x3
 2291 01ff 23       		.byte	0x23
ARM GAS  /tmp/ccSzia7W.s 			page 84


 2292 0200 8002     		.uleb128 0x100
 2293 0202 0A       		.uleb128 0xa
 2294 0203 42060000 		.4byte	.LASF57
 2295 0207 01       		.byte	0x1
 2296 0208 78       		.byte	0x78
 2297 0209 69020000 		.4byte	0x269
 2298 020d 03       		.byte	0x3
 2299 020e 23       		.byte	0x23
 2300 020f 8402     		.uleb128 0x104
 2301 0211 0A       		.uleb128 0xa
 2302 0212 86050000 		.4byte	.LASF58
 2303 0216 01       		.byte	0x1
 2304 0217 79       		.byte	0x79
 2305 0218 83020000 		.4byte	0x283
 2306 021c 03       		.byte	0x3
 2307 021d 23       		.byte	0x23
 2308 021e 8003     		.uleb128 0x180
 2309 0220 0A       		.uleb128 0xa
 2310 0221 4C060000 		.4byte	.LASF59
 2311 0225 01       		.byte	0x1
 2312 0226 7A       		.byte	0x7a
 2313 0227 69020000 		.4byte	0x269
 2314 022b 03       		.byte	0x3
 2315 022c 23       		.byte	0x23
 2316 022d 8403     		.uleb128 0x184
 2317 022f 0A       		.uleb128 0xa
 2318 0230 56060000 		.4byte	.LASF60
 2319 0234 01       		.byte	0x1
 2320 0235 7B       		.byte	0x7b
 2321 0236 88020000 		.4byte	0x288
 2322 023a 03       		.byte	0x3
 2323 023b 23       		.byte	0x23
 2324 023c 8004     		.uleb128 0x200
 2325 023e 0B       		.uleb128 0xb
 2326 023f 495000   		.ascii	"IP\000"
 2327 0242 01       		.byte	0x1
 2328 0243 7C       		.byte	0x7c
 2329 0244 A8020000 		.4byte	0x2a8
 2330 0248 03       		.byte	0x3
 2331 0249 23       		.byte	0x23
 2332 024a 8006     		.uleb128 0x300
 2333 024c 00       		.byte	0
 2334 024d 0C       		.uleb128 0xc
 2335 024e A5010000 		.4byte	0x1a5
 2336 0252 5D020000 		.4byte	0x25d
 2337 0256 0D       		.uleb128 0xd
 2338 0257 5D020000 		.4byte	0x25d
 2339 025b 00       		.byte	0
 2340 025c 00       		.byte	0
 2341 025d 05       		.uleb128 0x5
 2342 025e 04       		.byte	0x4
 2343 025f 07       		.byte	0x7
 2344 0260 6A070000 		.4byte	.LASF61
 2345 0264 0E       		.uleb128 0xe
 2346 0265 4D020000 		.4byte	0x24d
 2347 0269 0C       		.uleb128 0xc
 2348 026a A5010000 		.4byte	0x1a5
ARM GAS  /tmp/ccSzia7W.s 			page 85


 2349 026e 79020000 		.4byte	0x279
 2350 0272 0D       		.uleb128 0xd
 2351 0273 5D020000 		.4byte	0x25d
 2352 0277 1E       		.byte	0x1e
 2353 0278 00       		.byte	0
 2354 0279 0E       		.uleb128 0xe
 2355 027a 4D020000 		.4byte	0x24d
 2356 027e 0E       		.uleb128 0xe
 2357 027f 4D020000 		.4byte	0x24d
 2358 0283 0E       		.uleb128 0xe
 2359 0284 4D020000 		.4byte	0x24d
 2360 0288 0C       		.uleb128 0xc
 2361 0289 A5010000 		.4byte	0x1a5
 2362 028d 98020000 		.4byte	0x298
 2363 0291 0D       		.uleb128 0xd
 2364 0292 5D020000 		.4byte	0x25d
 2365 0296 3F       		.byte	0x3f
 2366 0297 00       		.byte	0
 2367 0298 0C       		.uleb128 0xc
 2368 0299 A5010000 		.4byte	0x1a5
 2369 029d A8020000 		.4byte	0x2a8
 2370 02a1 0D       		.uleb128 0xd
 2371 02a2 5D020000 		.4byte	0x25d
 2372 02a6 07       		.byte	0x7
 2373 02a7 00       		.byte	0
 2374 02a8 0E       		.uleb128 0xe
 2375 02a9 98020000 		.4byte	0x298
 2376 02ad 07       		.uleb128 0x7
 2377 02ae 23070000 		.4byte	.LASF62
 2378 02b2 01       		.byte	0x1
 2379 02b3 7D       		.byte	0x7d
 2380 02b4 B0010000 		.4byte	0x1b0
 2381 02b8 0F       		.uleb128 0xf
 2382 02b9 34       		.byte	0x34
 2383 02ba 01       		.byte	0x1
 2384 02bb 86       		.byte	0x86
 2385 02bc 5B030000 		.4byte	0x35b
 2386 02c0 0A       		.uleb128 0xa
 2387 02c1 D4020000 		.4byte	.LASF63
 2388 02c5 01       		.byte	0x1
 2389 02c6 88       		.byte	0x88
 2390 02c7 60030000 		.4byte	0x360
 2391 02cb 02       		.byte	0x2
 2392 02cc 23       		.byte	0x23
 2393 02cd 00       		.uleb128 0
 2394 02ce 0A       		.uleb128 0xa
 2395 02cf 73070000 		.4byte	.LASF64
 2396 02d3 01       		.byte	0x1
 2397 02d4 89       		.byte	0x89
 2398 02d5 5B030000 		.4byte	0x35b
 2399 02d9 02       		.byte	0x2
 2400 02da 23       		.byte	0x23
 2401 02db 04       		.uleb128 0x4
 2402 02dc 0A       		.uleb128 0xa
 2403 02dd 2E060000 		.4byte	.LASF53
 2404 02e1 01       		.byte	0x1
 2405 02e2 8A       		.byte	0x8a
ARM GAS  /tmp/ccSzia7W.s 			page 86


 2406 02e3 A5010000 		.4byte	0x1a5
 2407 02e7 02       		.byte	0x2
 2408 02e8 23       		.byte	0x23
 2409 02e9 08       		.uleb128 0x8
 2410 02ea 0A       		.uleb128 0xa
 2411 02eb A0030000 		.4byte	.LASF65
 2412 02ef 01       		.byte	0x1
 2413 02f0 8B       		.byte	0x8b
 2414 02f1 5B030000 		.4byte	0x35b
 2415 02f5 02       		.byte	0x2
 2416 02f6 23       		.byte	0x23
 2417 02f7 0C       		.uleb128 0xc
 2418 02f8 0B       		.uleb128 0xb
 2419 02f9 53435200 		.ascii	"SCR\000"
 2420 02fd 01       		.byte	0x1
 2421 02fe 8C       		.byte	0x8c
 2422 02ff 5B030000 		.4byte	0x35b
 2423 0303 02       		.byte	0x2
 2424 0304 23       		.byte	0x23
 2425 0305 10       		.uleb128 0x10
 2426 0306 0B       		.uleb128 0xb
 2427 0307 43435200 		.ascii	"CCR\000"
 2428 030b 01       		.byte	0x1
 2429 030c 8D       		.byte	0x8d
 2430 030d 5B030000 		.4byte	0x35b
 2431 0311 02       		.byte	0x2
 2432 0312 23       		.byte	0x23
 2433 0313 14       		.uleb128 0x14
 2434 0314 0A       		.uleb128 0xa
 2435 0315 38060000 		.4byte	.LASF66
 2436 0319 01       		.byte	0x1
 2437 031a 8E       		.byte	0x8e
 2438 031b A5010000 		.4byte	0x1a5
 2439 031f 02       		.byte	0x2
 2440 0320 23       		.byte	0x23
 2441 0321 18       		.uleb128 0x18
 2442 0322 0B       		.uleb128 0xb
 2443 0323 53485000 		.ascii	"SHP\000"
 2444 0327 01       		.byte	0x1
 2445 0328 8F       		.byte	0x8f
 2446 0329 75030000 		.4byte	0x375
 2447 032d 02       		.byte	0x2
 2448 032e 23       		.byte	0x23
 2449 032f 1C       		.uleb128 0x1c
 2450 0330 0A       		.uleb128 0xa
 2451 0331 A7040000 		.4byte	.LASF67
 2452 0335 01       		.byte	0x1
 2453 0336 90       		.byte	0x90
 2454 0337 5B030000 		.4byte	0x35b
 2455 033b 02       		.byte	0x2
 2456 033c 23       		.byte	0x23
 2457 033d 24       		.uleb128 0x24
 2458 033e 0A       		.uleb128 0xa
 2459 033f 42060000 		.4byte	.LASF57
 2460 0343 01       		.byte	0x1
 2461 0344 91       		.byte	0x91
 2462 0345 65030000 		.4byte	0x365
ARM GAS  /tmp/ccSzia7W.s 			page 87


 2463 0349 02       		.byte	0x2
 2464 034a 23       		.byte	0x23
 2465 034b 28       		.uleb128 0x28
 2466 034c 0A       		.uleb128 0xa
 2467 034d 23020000 		.4byte	.LASF68
 2468 0351 01       		.byte	0x1
 2469 0352 92       		.byte	0x92
 2470 0353 5B030000 		.4byte	0x35b
 2471 0357 02       		.byte	0x2
 2472 0358 23       		.byte	0x23
 2473 0359 30       		.uleb128 0x30
 2474 035a 00       		.byte	0
 2475 035b 0E       		.uleb128 0xe
 2476 035c A5010000 		.4byte	0x1a5
 2477 0360 10       		.uleb128 0x10
 2478 0361 5B030000 		.4byte	0x35b
 2479 0365 0C       		.uleb128 0xc
 2480 0366 A5010000 		.4byte	0x1a5
 2481 036a 75030000 		.4byte	0x375
 2482 036e 0D       		.uleb128 0xd
 2483 036f 5D020000 		.4byte	0x25d
 2484 0373 01       		.byte	0x1
 2485 0374 00       		.byte	0
 2486 0375 0E       		.uleb128 0xe
 2487 0376 65030000 		.4byte	0x365
 2488 037a 07       		.uleb128 0x7
 2489 037b 2D070000 		.4byte	.LASF69
 2490 037f 01       		.byte	0x1
 2491 0380 93       		.byte	0x93
 2492 0381 B8020000 		.4byte	0x2b8
 2493 0385 0F       		.uleb128 0xf
 2494 0386 10       		.byte	0x10
 2495 0387 01       		.byte	0x1
 2496 0388 FC       		.byte	0xfc
 2497 0389 C8030000 		.4byte	0x3c8
 2498 038d 0A       		.uleb128 0xa
 2499 038e B60A0000 		.4byte	.LASF70
 2500 0392 01       		.byte	0x1
 2501 0393 FE       		.byte	0xfe
 2502 0394 5B030000 		.4byte	0x35b
 2503 0398 02       		.byte	0x2
 2504 0399 23       		.byte	0x23
 2505 039a 00       		.uleb128 0
 2506 039b 0A       		.uleb128 0xa
 2507 039c D3000000 		.4byte	.LASF71
 2508 03a0 01       		.byte	0x1
 2509 03a1 FF       		.byte	0xff
 2510 03a2 5B030000 		.4byte	0x35b
 2511 03a6 02       		.byte	0x2
 2512 03a7 23       		.byte	0x23
 2513 03a8 04       		.uleb128 0x4
 2514 03a9 11       		.uleb128 0x11
 2515 03aa 56414C00 		.ascii	"VAL\000"
 2516 03ae 01       		.byte	0x1
 2517 03af 0001     		.2byte	0x100
 2518 03b1 5B030000 		.4byte	0x35b
 2519 03b5 02       		.byte	0x2
ARM GAS  /tmp/ccSzia7W.s 			page 88


 2520 03b6 23       		.byte	0x23
 2521 03b7 08       		.uleb128 0x8
 2522 03b8 12       		.uleb128 0x12
 2523 03b9 19010000 		.4byte	.LASF72
 2524 03bd 01       		.byte	0x1
 2525 03be 0101     		.2byte	0x101
 2526 03c0 60030000 		.4byte	0x360
 2527 03c4 02       		.byte	0x2
 2528 03c5 23       		.byte	0x23
 2529 03c6 0C       		.uleb128 0xc
 2530 03c7 00       		.byte	0
 2531 03c8 06       		.uleb128 0x6
 2532 03c9 DB050000 		.4byte	.LASF73
 2533 03cd 01       		.byte	0x1
 2534 03ce 0201     		.2byte	0x102
 2535 03d0 85030000 		.4byte	0x385
 2536 03d4 13       		.uleb128 0x13
 2537 03d5 44       		.byte	0x44
 2538 03d6 03       		.byte	0x3
 2539 03d7 7C01     		.2byte	0x17c
 2540 03d9 9E040000 		.4byte	0x49e
 2541 03dd 11       		.uleb128 0x11
 2542 03de 49535200 		.ascii	"ISR\000"
 2543 03e2 03       		.byte	0x3
 2544 03e3 7E01     		.2byte	0x17e
 2545 03e5 5B030000 		.4byte	0x35b
 2546 03e9 02       		.byte	0x2
 2547 03ea 23       		.byte	0x23
 2548 03eb 00       		.uleb128 0
 2549 03ec 11       		.uleb128 0x11
 2550 03ed 49455200 		.ascii	"IER\000"
 2551 03f1 03       		.byte	0x3
 2552 03f2 7F01     		.2byte	0x17f
 2553 03f4 5B030000 		.4byte	0x35b
 2554 03f8 02       		.byte	0x2
 2555 03f9 23       		.byte	0x23
 2556 03fa 04       		.uleb128 0x4
 2557 03fb 11       		.uleb128 0x11
 2558 03fc 435200   		.ascii	"CR\000"
 2559 03ff 03       		.byte	0x3
 2560 0400 8001     		.2byte	0x180
 2561 0402 5B030000 		.4byte	0x35b
 2562 0406 02       		.byte	0x2
 2563 0407 23       		.byte	0x23
 2564 0408 08       		.uleb128 0x8
 2565 0409 12       		.uleb128 0x12
 2566 040a 7A050000 		.4byte	.LASF74
 2567 040e 03       		.byte	0x3
 2568 040f 8101     		.2byte	0x181
 2569 0411 5B030000 		.4byte	0x35b
 2570 0415 02       		.byte	0x2
 2571 0416 23       		.byte	0x23
 2572 0417 0C       		.uleb128 0xc
 2573 0418 12       		.uleb128 0x12
 2574 0419 80050000 		.4byte	.LASF75
 2575 041d 03       		.byte	0x3
 2576 041e 8201     		.2byte	0x182
ARM GAS  /tmp/ccSzia7W.s 			page 89


 2577 0420 5B030000 		.4byte	0x35b
 2578 0424 02       		.byte	0x2
 2579 0425 23       		.byte	0x23
 2580 0426 10       		.uleb128 0x10
 2581 0427 12       		.uleb128 0x12
 2582 0428 1F030000 		.4byte	.LASF76
 2583 042c 03       		.byte	0x3
 2584 042d 8301     		.2byte	0x183
 2585 042f 5B030000 		.4byte	0x35b
 2586 0433 02       		.byte	0x2
 2587 0434 23       		.byte	0x23
 2588 0435 14       		.uleb128 0x14
 2589 0436 12       		.uleb128 0x12
 2590 0437 38060000 		.4byte	.LASF66
 2591 043b 03       		.byte	0x3
 2592 043c 8401     		.2byte	0x184
 2593 043e A5010000 		.4byte	0x1a5
 2594 0442 02       		.byte	0x2
 2595 0443 23       		.byte	0x23
 2596 0444 18       		.uleb128 0x18
 2597 0445 12       		.uleb128 0x12
 2598 0446 42060000 		.4byte	.LASF57
 2599 044a 03       		.byte	0x3
 2600 044b 8501     		.2byte	0x185
 2601 044d A5010000 		.4byte	0x1a5
 2602 0451 02       		.byte	0x2
 2603 0452 23       		.byte	0x23
 2604 0453 1C       		.uleb128 0x1c
 2605 0454 11       		.uleb128 0x11
 2606 0455 545200   		.ascii	"TR\000"
 2607 0458 03       		.byte	0x3
 2608 0459 8601     		.2byte	0x186
 2609 045b 5B030000 		.4byte	0x35b
 2610 045f 02       		.byte	0x2
 2611 0460 23       		.byte	0x23
 2612 0461 20       		.uleb128 0x20
 2613 0462 12       		.uleb128 0x12
 2614 0463 4C060000 		.4byte	.LASF59
 2615 0467 03       		.byte	0x3
 2616 0468 8701     		.2byte	0x187
 2617 046a A5010000 		.4byte	0x1a5
 2618 046e 02       		.byte	0x2
 2619 046f 23       		.byte	0x23
 2620 0470 24       		.uleb128 0x24
 2621 0471 12       		.uleb128 0x12
 2622 0472 96020000 		.4byte	.LASF77
 2623 0476 03       		.byte	0x3
 2624 0477 8801     		.2byte	0x188
 2625 0479 5B030000 		.4byte	0x35b
 2626 047d 02       		.byte	0x2
 2627 047e 23       		.byte	0x23
 2628 047f 28       		.uleb128 0x28
 2629 0480 12       		.uleb128 0x12
 2630 0481 56060000 		.4byte	.LASF60
 2631 0485 03       		.byte	0x3
 2632 0486 8901     		.2byte	0x189
 2633 0488 9E040000 		.4byte	0x49e
ARM GAS  /tmp/ccSzia7W.s 			page 90


 2634 048c 02       		.byte	0x2
 2635 048d 23       		.byte	0x23
 2636 048e 2C       		.uleb128 0x2c
 2637 048f 11       		.uleb128 0x11
 2638 0490 445200   		.ascii	"DR\000"
 2639 0493 03       		.byte	0x3
 2640 0494 8A01     		.2byte	0x18a
 2641 0496 5B030000 		.4byte	0x35b
 2642 049a 02       		.byte	0x2
 2643 049b 23       		.byte	0x23
 2644 049c 40       		.uleb128 0x40
 2645 049d 00       		.byte	0
 2646 049e 0C       		.uleb128 0xc
 2647 049f A5010000 		.4byte	0x1a5
 2648 04a3 AE040000 		.4byte	0x4ae
 2649 04a7 0D       		.uleb128 0xd
 2650 04a8 5D020000 		.4byte	0x25d
 2651 04ac 04       		.byte	0x4
 2652 04ad 00       		.byte	0
 2653 04ae 06       		.uleb128 0x6
 2654 04af 83040000 		.4byte	.LASF78
 2655 04b3 03       		.byte	0x3
 2656 04b4 8B01     		.2byte	0x18b
 2657 04b6 D4030000 		.4byte	0x3d4
 2658 04ba 0E       		.uleb128 0xe
 2659 04bb 8F010000 		.4byte	0x18f
 2660 04bf 13       		.uleb128 0x13
 2661 04c0 2C       		.byte	0x2c
 2662 04c1 03       		.byte	0x3
 2663 04c2 6902     		.2byte	0x269
 2664 04c4 9B050000 		.4byte	0x59b
 2665 04c8 12       		.uleb128 0x12
 2666 04c9 90020000 		.4byte	.LASF79
 2667 04cd 03       		.byte	0x3
 2668 04ce 6B02     		.2byte	0x26b
 2669 04d0 5B030000 		.4byte	0x35b
 2670 04d4 02       		.byte	0x2
 2671 04d5 23       		.byte	0x23
 2672 04d6 00       		.uleb128 0
 2673 04d7 12       		.uleb128 0x12
 2674 04d8 BD060000 		.4byte	.LASF80
 2675 04dc 03       		.byte	0x3
 2676 04dd 6C02     		.2byte	0x26c
 2677 04df BA040000 		.4byte	0x4ba
 2678 04e3 02       		.byte	0x2
 2679 04e4 23       		.byte	0x23
 2680 04e5 04       		.uleb128 0x4
 2681 04e6 12       		.uleb128 0x12
 2682 04e7 2E060000 		.4byte	.LASF53
 2683 04eb 03       		.byte	0x3
 2684 04ec 6D02     		.2byte	0x26d
 2685 04ee 8F010000 		.4byte	0x18f
 2686 04f2 02       		.byte	0x2
 2687 04f3 23       		.byte	0x23
 2688 04f4 06       		.uleb128 0x6
 2689 04f5 12       		.uleb128 0x12
 2690 04f6 D3050000 		.4byte	.LASF81
ARM GAS  /tmp/ccSzia7W.s 			page 91


 2691 04fa 03       		.byte	0x3
 2692 04fb 6E02     		.2byte	0x26e
 2693 04fd 5B030000 		.4byte	0x35b
 2694 0501 02       		.byte	0x2
 2695 0502 23       		.byte	0x23
 2696 0503 08       		.uleb128 0x8
 2697 0504 12       		.uleb128 0x12
 2698 0505 46030000 		.4byte	.LASF82
 2699 0509 03       		.byte	0x3
 2700 050a 6F02     		.2byte	0x26f
 2701 050c 5B030000 		.4byte	0x35b
 2702 0510 02       		.byte	0x2
 2703 0511 23       		.byte	0x23
 2704 0512 0C       		.uleb128 0xc
 2705 0513 11       		.uleb128 0x11
 2706 0514 49445200 		.ascii	"IDR\000"
 2707 0518 03       		.byte	0x3
 2708 0519 7002     		.2byte	0x270
 2709 051b BA040000 		.4byte	0x4ba
 2710 051f 02       		.byte	0x2
 2711 0520 23       		.byte	0x23
 2712 0521 10       		.uleb128 0x10
 2713 0522 12       		.uleb128 0x12
 2714 0523 38060000 		.4byte	.LASF66
 2715 0527 03       		.byte	0x3
 2716 0528 7102     		.2byte	0x271
 2717 052a 8F010000 		.4byte	0x18f
 2718 052e 02       		.byte	0x2
 2719 052f 23       		.byte	0x23
 2720 0530 12       		.uleb128 0x12
 2721 0531 11       		.uleb128 0x11
 2722 0532 4F445200 		.ascii	"ODR\000"
 2723 0536 03       		.byte	0x3
 2724 0537 7202     		.2byte	0x272
 2725 0539 BA040000 		.4byte	0x4ba
 2726 053d 02       		.byte	0x2
 2727 053e 23       		.byte	0x23
 2728 053f 14       		.uleb128 0x14
 2729 0540 12       		.uleb128 0x12
 2730 0541 42060000 		.4byte	.LASF57
 2731 0545 03       		.byte	0x3
 2732 0546 7302     		.2byte	0x273
 2733 0548 8F010000 		.4byte	0x18f
 2734 054c 02       		.byte	0x2
 2735 054d 23       		.byte	0x23
 2736 054e 16       		.uleb128 0x16
 2737 054f 12       		.uleb128 0x12
 2738 0550 41000000 		.4byte	.LASF83
 2739 0554 03       		.byte	0x3
 2740 0555 7402     		.2byte	0x274
 2741 0557 5B030000 		.4byte	0x35b
 2742 055b 02       		.byte	0x2
 2743 055c 23       		.byte	0x23
 2744 055d 18       		.uleb128 0x18
 2745 055e 12       		.uleb128 0x12
 2746 055f B10A0000 		.4byte	.LASF84
 2747 0563 03       		.byte	0x3
ARM GAS  /tmp/ccSzia7W.s 			page 92


 2748 0564 7502     		.2byte	0x275
 2749 0566 5B030000 		.4byte	0x35b
 2750 056a 02       		.byte	0x2
 2751 056b 23       		.byte	0x23
 2752 056c 1C       		.uleb128 0x1c
 2753 056d 11       		.uleb128 0x11
 2754 056e 41465200 		.ascii	"AFR\000"
 2755 0572 03       		.byte	0x3
 2756 0573 7602     		.2byte	0x276
 2757 0575 9B050000 		.4byte	0x59b
 2758 0579 02       		.byte	0x2
 2759 057a 23       		.byte	0x23
 2760 057b 20       		.uleb128 0x20
 2761 057c 11       		.uleb128 0x11
 2762 057d 42525200 		.ascii	"BRR\000"
 2763 0581 03       		.byte	0x3
 2764 0582 7702     		.2byte	0x277
 2765 0584 BA040000 		.4byte	0x4ba
 2766 0588 02       		.byte	0x2
 2767 0589 23       		.byte	0x23
 2768 058a 28       		.uleb128 0x28
 2769 058b 12       		.uleb128 0x12
 2770 058c 4C060000 		.4byte	.LASF59
 2771 0590 03       		.byte	0x3
 2772 0591 7802     		.2byte	0x278
 2773 0593 8F010000 		.4byte	0x18f
 2774 0597 02       		.byte	0x2
 2775 0598 23       		.byte	0x23
 2776 0599 2A       		.uleb128 0x2a
 2777 059a 00       		.byte	0
 2778 059b 0E       		.uleb128 0xe
 2779 059c 65030000 		.4byte	0x365
 2780 05a0 06       		.uleb128 0x6
 2781 05a1 36070000 		.4byte	.LASF85
 2782 05a5 03       		.byte	0x3
 2783 05a6 7902     		.2byte	0x279
 2784 05a8 BF040000 		.4byte	0x4bf
 2785 05ac 05       		.uleb128 0x5
 2786 05ad 08       		.byte	0x8
 2787 05ae 04       		.byte	0x4
 2788 05af E8050000 		.4byte	.LASF86
 2789 05b3 05       		.uleb128 0x5
 2790 05b4 01       		.byte	0x1
 2791 05b5 08       		.byte	0x8
 2792 05b6 75030000 		.4byte	.LASF87
 2793 05ba 0C       		.uleb128 0xc
 2794 05bb 3D010000 		.4byte	0x13d
 2795 05bf CA050000 		.4byte	0x5ca
 2796 05c3 0D       		.uleb128 0xd
 2797 05c4 5D020000 		.4byte	0x25d
 2798 05c8 02       		.byte	0x2
 2799 05c9 00       		.byte	0
 2800 05ca 0C       		.uleb128 0xc
 2801 05cb B3050000 		.4byte	0x5b3
 2802 05cf DA050000 		.4byte	0x5da
 2803 05d3 0D       		.uleb128 0xd
 2804 05d4 5D020000 		.4byte	0x25d
ARM GAS  /tmp/ccSzia7W.s 			page 93


 2805 05d8 17       		.byte	0x17
 2806 05d9 00       		.byte	0
 2807 05da 14       		.uleb128 0x14
 2808 05db 01       		.byte	0x1
 2809 05dc 24010000 		.4byte	0x124
 2810 05e0 06       		.byte	0x6
 2811 05e1 BF       		.byte	0xbf
 2812 05e2 2F060000 		.4byte	0x62f
 2813 05e6 04       		.uleb128 0x4
 2814 05e7 F8040000 		.4byte	.LASF88
 2815 05eb 00       		.byte	0
 2816 05ec 04       		.uleb128 0x4
 2817 05ed EB060000 		.4byte	.LASF89
 2818 05f1 01       		.byte	0x1
 2819 05f2 04       		.uleb128 0x4
 2820 05f3 24030000 		.4byte	.LASF90
 2821 05f7 02       		.byte	0x2
 2822 05f8 04       		.uleb128 0x4
 2823 05f9 60020000 		.4byte	.LASF91
 2824 05fd 03       		.byte	0x3
 2825 05fe 04       		.uleb128 0x4
 2826 05ff 78020000 		.4byte	.LASF92
 2827 0603 04       		.byte	0x4
 2828 0604 04       		.uleb128 0x4
 2829 0605 55080000 		.4byte	.LASF93
 2830 0609 05       		.byte	0x5
 2831 060a 04       		.uleb128 0x4
 2832 060b C1040000 		.4byte	.LASF94
 2833 060f 06       		.byte	0x6
 2834 0610 04       		.uleb128 0x4
 2835 0611 02050000 		.4byte	.LASF95
 2836 0615 07       		.byte	0x7
 2837 0616 04       		.uleb128 0x4
 2838 0617 19040000 		.4byte	.LASF96
 2839 061b 08       		.byte	0x8
 2840 061c 04       		.uleb128 0x4
 2841 061d 68040000 		.4byte	.LASF97
 2842 0621 09       		.byte	0x9
 2843 0622 04       		.uleb128 0x4
 2844 0623 9A050000 		.4byte	.LASF98
 2845 0627 0A       		.byte	0xa
 2846 0628 04       		.uleb128 0x4
 2847 0629 EB010000 		.4byte	.LASF99
 2848 062d 0B       		.byte	0xb
 2849 062e 00       		.byte	0
 2850 062f 07       		.uleb128 0x7
 2851 0630 F9030000 		.4byte	.LASF100
 2852 0634 06       		.byte	0x6
 2853 0635 CD       		.byte	0xcd
 2854 0636 DA050000 		.4byte	0x5da
 2855 063a 14       		.uleb128 0x14
 2856 063b 01       		.byte	0x1
 2857 063c 24010000 		.4byte	0x124
 2858 0640 06       		.byte	0x6
 2859 0641 D1       		.byte	0xd1
 2860 0642 71060000 		.4byte	0x671
 2861 0646 04       		.uleb128 0x4
ARM GAS  /tmp/ccSzia7W.s 			page 94


 2862 0647 5E000000 		.4byte	.LASF101
 2863 064b 00       		.byte	0
 2864 064c 04       		.uleb128 0x4
 2865 064d 6D000000 		.4byte	.LASF102
 2866 0651 01       		.byte	0x1
 2867 0652 04       		.uleb128 0x4
 2868 0653 43070000 		.4byte	.LASF103
 2869 0657 02       		.byte	0x2
 2870 0658 04       		.uleb128 0x4
 2871 0659 8C0A0000 		.4byte	.LASF104
 2872 065d 03       		.byte	0x3
 2873 065e 04       		.uleb128 0x4
 2874 065f D0060000 		.4byte	.LASF105
 2875 0663 04       		.byte	0x4
 2876 0664 04       		.uleb128 0x4
 2877 0665 B0010000 		.4byte	.LASF106
 2878 0669 05       		.byte	0x5
 2879 066a 04       		.uleb128 0x4
 2880 066b B5000000 		.4byte	.LASF107
 2881 066f 06       		.byte	0x6
 2882 0670 00       		.byte	0
 2883 0671 07       		.uleb128 0x7
 2884 0672 75080000 		.4byte	.LASF108
 2885 0676 06       		.byte	0x6
 2886 0677 DA       		.byte	0xda
 2887 0678 3A060000 		.4byte	0x63a
 2888 067c 15       		.uleb128 0x15
 2889 067d E1040000 		.4byte	.LASF204
 2890 0681 54       		.byte	0x54
 2891 0682 07       		.byte	0x7
 2892 0683 40       		.byte	0x40
 2893 0684 F9060000 		.4byte	0x6f9
 2894 0688 0A       		.uleb128 0xa
 2895 0689 18060000 		.4byte	.LASF109
 2896 068d 07       		.byte	0x7
 2897 068e 42       		.byte	0x42
 2898 068f CA050000 		.4byte	0x5ca
 2899 0693 02       		.byte	0x2
 2900 0694 23       		.byte	0x23
 2901 0695 00       		.uleb128 0
 2902 0696 0A       		.uleb128 0xa
 2903 0697 1F010000 		.4byte	.LASF110
 2904 069b 07       		.byte	0x7
 2905 069c 43       		.byte	0x43
 2906 069d CA050000 		.4byte	0x5ca
 2907 06a1 02       		.byte	0x2
 2908 06a2 23       		.byte	0x23
 2909 06a3 18       		.uleb128 0x18
 2910 06a4 0A       		.uleb128 0xa
 2911 06a5 710A0000 		.4byte	.LASF111
 2912 06a9 07       		.byte	0x7
 2913 06aa 44       		.byte	0x44
 2914 06ab CA050000 		.4byte	0x5ca
 2915 06af 02       		.byte	0x2
 2916 06b0 23       		.byte	0x23
 2917 06b1 30       		.uleb128 0x30
 2918 06b2 0A       		.uleb128 0xa
ARM GAS  /tmp/ccSzia7W.s 			page 95


 2919 06b3 C9010000 		.4byte	.LASF112
 2920 06b7 07       		.byte	0x7
 2921 06b8 46       		.byte	0x46
 2922 06b9 7D010000 		.4byte	0x17d
 2923 06bd 02       		.byte	0x2
 2924 06be 23       		.byte	0x23
 2925 06bf 48       		.uleb128 0x48
 2926 06c0 0A       		.uleb128 0xa
 2927 06c1 E4030000 		.4byte	.LASF113
 2928 06c5 07       		.byte	0x7
 2929 06c6 47       		.byte	0x47
 2930 06c7 7D010000 		.4byte	0x17d
 2931 06cb 02       		.byte	0x2
 2932 06cc 23       		.byte	0x23
 2933 06cd 4C       		.uleb128 0x4c
 2934 06ce 0A       		.uleb128 0xa
 2935 06cf D4030000 		.4byte	.LASF114
 2936 06d3 07       		.byte	0x7
 2937 06d4 48       		.byte	0x48
 2938 06d5 3D010000 		.4byte	0x13d
 2939 06d9 02       		.byte	0x2
 2940 06da 23       		.byte	0x23
 2941 06db 50       		.uleb128 0x50
 2942 06dc 0A       		.uleb128 0xa
 2943 06dd B9020000 		.4byte	.LASF115
 2944 06e1 07       		.byte	0x7
 2945 06e2 4A       		.byte	0x4a
 2946 06e3 24010000 		.4byte	0x124
 2947 06e7 02       		.byte	0x2
 2948 06e8 23       		.byte	0x23
 2949 06e9 52       		.uleb128 0x52
 2950 06ea 0A       		.uleb128 0xa
 2951 06eb 52030000 		.4byte	.LASF116
 2952 06ef 07       		.byte	0x7
 2953 06f0 4D       		.byte	0x4d
 2954 06f1 24010000 		.4byte	0x124
 2955 06f5 02       		.byte	0x2
 2956 06f6 23       		.byte	0x23
 2957 06f7 53       		.uleb128 0x53
 2958 06f8 00       		.byte	0
 2959 06f9 07       		.uleb128 0x7
 2960 06fa 61090000 		.4byte	.LASF117
 2961 06fe 07       		.byte	0x7
 2962 06ff 51       		.byte	0x51
 2963 0700 7C060000 		.4byte	0x67c
 2964 0704 14       		.uleb128 0x14
 2965 0705 01       		.byte	0x1
 2966 0706 24010000 		.4byte	0x124
 2967 070a 08       		.byte	0x8
 2968 070b 0A       		.byte	0xa
 2969 070c 6B070000 		.4byte	0x76b
 2970 0710 04       		.uleb128 0x4
 2971 0711 3A020000 		.4byte	.LASF118
 2972 0715 00       		.byte	0
 2973 0716 04       		.uleb128 0x4
 2974 0717 7F060000 		.4byte	.LASF119
 2975 071b 01       		.byte	0x1
ARM GAS  /tmp/ccSzia7W.s 			page 96


 2976 071c 04       		.uleb128 0x4
 2977 071d 59030000 		.4byte	.LASF120
 2978 0721 02       		.byte	0x2
 2979 0722 04       		.uleb128 0x4
 2980 0723 70040000 		.4byte	.LASF121
 2981 0727 03       		.byte	0x3
 2982 0728 04       		.uleb128 0x4
 2983 0729 AF080000 		.4byte	.LASF122
 2984 072d 04       		.byte	0x4
 2985 072e 04       		.uleb128 0x4
 2986 072f 8C000000 		.4byte	.LASF123
 2987 0733 05       		.byte	0x5
 2988 0734 04       		.uleb128 0x4
 2989 0735 5D010000 		.4byte	.LASF124
 2990 0739 06       		.byte	0x6
 2991 073a 04       		.uleb128 0x4
 2992 073b 1B090000 		.4byte	.LASF125
 2993 073f 07       		.byte	0x7
 2994 0740 04       		.uleb128 0x4
 2995 0741 48090000 		.4byte	.LASF126
 2996 0745 08       		.byte	0x8
 2997 0746 04       		.uleb128 0x4
 2998 0747 06000000 		.4byte	.LASF127
 2999 074b 09       		.byte	0x9
 3000 074c 04       		.uleb128 0x4
 3001 074d C4080000 		.4byte	.LASF128
 3002 0751 0A       		.byte	0xa
 3003 0752 04       		.uleb128 0x4
 3004 0753 92080000 		.4byte	.LASF129
 3005 0757 0B       		.byte	0xb
 3006 0758 04       		.uleb128 0x4
 3007 0759 EF020000 		.4byte	.LASF130
 3008 075d 0C       		.byte	0xc
 3009 075e 04       		.uleb128 0x4
 3010 075f 9C000000 		.4byte	.LASF131
 3011 0763 0D       		.byte	0xd
 3012 0764 04       		.uleb128 0x4
 3013 0765 7A030000 		.4byte	.LASF132
 3014 0769 0E       		.byte	0xe
 3015 076a 00       		.byte	0
 3016 076b 16       		.uleb128 0x16
 3017 076c 60050000 		.4byte	.LASF205
 3018 0770 01       		.byte	0x1
 3019 0771 7C03     		.2byte	0x37c
 3020 0773 01       		.byte	0x1
 3021 0774 00000000 		.4byte	.LFB16
 3022 0778 EC000000 		.4byte	.LFE16
 3023 077c 00000000 		.4byte	.LLST0
 3024 0780 01       		.byte	0x1
 3025 0781 A4070000 		.4byte	0x7a4
 3026 0785 17       		.uleb128 0x17
 3027 0786 0C060000 		.4byte	.LASF133
 3028 078a 01       		.byte	0x1
 3029 078b 7C03     		.2byte	0x37c
 3030 078d 0D010000 		.4byte	0x10d
 3031 0791 02       		.byte	0x2
 3032 0792 91       		.byte	0x91
ARM GAS  /tmp/ccSzia7W.s 			page 97


 3033 0793 6F       		.sleb128 -17
 3034 0794 17       		.uleb128 0x17
 3035 0795 A7060000 		.4byte	.LASF134
 3036 0799 01       		.byte	0x1
 3037 079a 7C03     		.2byte	0x37c
 3038 079c A5010000 		.4byte	0x1a5
 3039 07a0 02       		.byte	0x2
 3040 07a1 91       		.byte	0x91
 3041 07a2 68       		.sleb128 -24
 3042 07a3 00       		.byte	0
 3043 07a4 18       		.uleb128 0x18
 3044 07a5 10030000 		.4byte	.LASF206
 3045 07a9 01       		.byte	0x1
 3046 07aa B803     		.2byte	0x3b8
 3047 07ac 01       		.byte	0x1
 3048 07ad A5010000 		.4byte	0x1a5
 3049 07b1 00000000 		.4byte	.LFB18
 3050 07b5 48000000 		.4byte	.LFE18
 3051 07b9 2C000000 		.4byte	.LLST1
 3052 07bd 01       		.byte	0x1
 3053 07be D2070000 		.4byte	0x7d2
 3054 07c2 17       		.uleb128 0x17
 3055 07c3 4C030000 		.4byte	.LASF135
 3056 07c7 01       		.byte	0x1
 3057 07c8 B803     		.2byte	0x3b8
 3058 07ca A5010000 		.4byte	0x1a5
 3059 07ce 02       		.byte	0x2
 3060 07cf 91       		.byte	0x91
 3061 07d0 74       		.sleb128 -12
 3062 07d1 00       		.byte	0
 3063 07d2 19       		.uleb128 0x19
 3064 07d3 01       		.byte	0x1
 3065 07d4 490A0000 		.4byte	.LASF207
 3066 07d8 02       		.byte	0x2
 3067 07d9 CF       		.byte	0xcf
 3068 07da 01       		.byte	0x1
 3069 07db 76010000 		.4byte	0x176
 3070 07df 00000000 		.4byte	.LFB20
 3071 07e3 80080000 		.4byte	.LFE20
 3072 07e7 58000000 		.4byte	.LLST2
 3073 07eb 01       		.byte	0x1
 3074 07ec 42090000 		.4byte	0x942
 3075 07f0 1A       		.uleb128 0x1a
 3076 07f1 6900     		.ascii	"i\000"
 3077 07f3 02       		.byte	0x2
 3078 07f4 D1       		.byte	0xd1
 3079 07f5 24010000 		.4byte	0x124
 3080 07f9 02       		.byte	0x2
 3081 07fa 91       		.byte	0x91
 3082 07fb 6F       		.sleb128 -17
 3083 07fc 1B       		.uleb128 0x1b
 3084 07fd 696900   		.ascii	"ii\000"
 3085 0800 02       		.byte	0x2
 3086 0801 D1       		.byte	0xd1
 3087 0802 24010000 		.4byte	0x124
 3088 0806 1C       		.uleb128 0x1c
 3089 0807 A40A0000 		.4byte	.LASF136
ARM GAS  /tmp/ccSzia7W.s 			page 98


 3090 080b 02       		.byte	0x2
 3091 080c D2       		.byte	0xd2
 3092 080d 24010000 		.4byte	0x124
 3093 0811 1C       		.uleb128 0x1c
 3094 0812 EE030000 		.4byte	.LASF137
 3095 0816 02       		.byte	0x2
 3096 0817 D2       		.byte	0xd2
 3097 0818 24010000 		.4byte	0x124
 3098 081c 1D       		.uleb128 0x1d
 3099 081d A6080000 		.4byte	.LASF138
 3100 0821 02       		.byte	0x2
 3101 0822 D2       		.byte	0xd2
 3102 0823 24010000 		.4byte	0x124
 3103 0827 02       		.byte	0x2
 3104 0828 91       		.byte	0x91
 3105 0829 53       		.sleb128 -45
 3106 082a 1D       		.uleb128 0x1d
 3107 082b 6C0A0000 		.4byte	.LASF139
 3108 082f 02       		.byte	0x2
 3109 0830 D3       		.byte	0xd3
 3110 0831 24010000 		.4byte	0x124
 3111 0835 02       		.byte	0x2
 3112 0836 91       		.byte	0x91
 3113 0837 52       		.sleb128 -46
 3114 0838 1D       		.uleb128 0x1d
 3115 0839 85080000 		.4byte	.LASF140
 3116 083d 02       		.byte	0x2
 3117 083e D4       		.byte	0xd4
 3118 083f 24010000 		.4byte	0x124
 3119 0843 02       		.byte	0x2
 3120 0844 91       		.byte	0x91
 3121 0845 6E       		.sleb128 -18
 3122 0846 1D       		.uleb128 0x1d
 3123 0847 42090000 		.4byte	.LASF141
 3124 084b 02       		.byte	0x2
 3125 084c D7       		.byte	0xd7
 3126 084d 3D010000 		.4byte	0x13d
 3127 0851 02       		.byte	0x2
 3128 0852 91       		.byte	0x91
 3129 0853 6C       		.sleb128 -20
 3130 0854 1D       		.uleb128 0x1d
 3131 0855 0D050000 		.4byte	.LASF142
 3132 0859 02       		.byte	0x2
 3133 085a D7       		.byte	0xd7
 3134 085b 3D010000 		.4byte	0x13d
 3135 085f 02       		.byte	0x2
 3136 0860 91       		.byte	0x91
 3137 0861 6A       		.sleb128 -22
 3138 0862 1D       		.uleb128 0x1d
 3139 0863 15000000 		.4byte	.LASF143
 3140 0867 02       		.byte	0x2
 3141 0868 D8       		.byte	0xd8
 3142 0869 7D010000 		.4byte	0x17d
 3143 086d 02       		.byte	0x2
 3144 086e 91       		.byte	0x91
 3145 086f 64       		.sleb128 -28
 3146 0870 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccSzia7W.s 			page 99


 3147 0871 97010000 		.4byte	.LASF144
 3148 0875 02       		.byte	0x2
 3149 0876 DA       		.byte	0xda
 3150 0877 3D010000 		.4byte	0x13d
 3151 087b 02       		.byte	0x2
 3152 087c 91       		.byte	0x91
 3153 087d 62       		.sleb128 -30
 3154 087e 1D       		.uleb128 0x1d
 3155 087f 5D0A0000 		.4byte	.LASF145
 3156 0883 02       		.byte	0x2
 3157 0884 DB       		.byte	0xdb
 3158 0885 7D010000 		.4byte	0x17d
 3159 0889 02       		.byte	0x2
 3160 088a 91       		.byte	0x91
 3161 088b 5C       		.sleb128 -36
 3162 088c 1D       		.uleb128 0x1d
 3163 088d 4A020000 		.4byte	.LASF146
 3164 0891 02       		.byte	0x2
 3165 0892 DB       		.byte	0xdb
 3166 0893 7D010000 		.4byte	0x17d
 3167 0897 02       		.byte	0x2
 3168 0898 91       		.byte	0x91
 3169 0899 58       		.sleb128 -40
 3170 089a 1D       		.uleb128 0x1d
 3171 089b CB040000 		.4byte	.LASF147
 3172 089f 02       		.byte	0x2
 3173 08a0 DC       		.byte	0xdc
 3174 08a1 24010000 		.4byte	0x124
 3175 08a5 02       		.byte	0x2
 3176 08a6 91       		.byte	0x91
 3177 08a7 51       		.sleb128 -47
 3178 08a8 1D       		.uleb128 0x1d
 3179 08a9 53000000 		.4byte	.LASF148
 3180 08ad 02       		.byte	0x2
 3181 08ae DF       		.byte	0xdf
 3182 08af 2F060000 		.4byte	0x62f
 3183 08b3 02       		.byte	0x2
 3184 08b4 91       		.byte	0x91
 3185 08b5 57       		.sleb128 -41
 3186 08b6 1D       		.uleb128 0x1d
 3187 08b7 BB0A0000 		.4byte	.LASF149
 3188 08bb 02       		.byte	0x2
 3189 08bc E0       		.byte	0xe0
 3190 08bd 24010000 		.4byte	0x124
 3191 08c1 02       		.byte	0x2
 3192 08c2 91       		.byte	0x91
 3193 08c3 50       		.sleb128 -48
 3194 08c4 1D       		.uleb128 0x1d
 3195 08c5 4D070000 		.4byte	.LASF150
 3196 08c9 02       		.byte	0x2
 3197 08ca E1       		.byte	0xe1
 3198 08cb 24010000 		.4byte	0x124
 3199 08cf 02       		.byte	0x2
 3200 08d0 91       		.byte	0x91
 3201 08d1 4F       		.sleb128 -49
 3202 08d2 1D       		.uleb128 0x1d
 3203 08d3 2B080000 		.4byte	.LASF151
ARM GAS  /tmp/ccSzia7W.s 			page 100


 3204 08d7 02       		.byte	0x2
 3205 08d8 E2       		.byte	0xe2
 3206 08d9 71060000 		.4byte	0x671
 3207 08dd 02       		.byte	0x2
 3208 08de 91       		.byte	0x91
 3209 08df 56       		.sleb128 -42
 3210 08e0 1D       		.uleb128 0x1d
 3211 08e1 C5050000 		.4byte	.LASF152
 3212 08e5 02       		.byte	0x2
 3213 08e6 E3       		.byte	0xe3
 3214 08e7 24010000 		.4byte	0x124
 3215 08eb 02       		.byte	0x2
 3216 08ec 91       		.byte	0x91
 3217 08ed 55       		.sleb128 -43
 3218 08ee 1D       		.uleb128 0x1d
 3219 08ef D2010000 		.4byte	.LASF153
 3220 08f3 02       		.byte	0x2
 3221 08f4 E4       		.byte	0xe4
 3222 08f5 24010000 		.4byte	0x124
 3223 08f9 02       		.byte	0x2
 3224 08fa 91       		.byte	0x91
 3225 08fb 54       		.sleb128 -44
 3226 08fc 1D       		.uleb128 0x1d
 3227 08fd E6010000 		.4byte	.LASF154
 3228 0901 02       		.byte	0x2
 3229 0902 E7       		.byte	0xe7
 3230 0903 3D010000 		.4byte	0x13d
 3231 0907 02       		.byte	0x2
 3232 0908 91       		.byte	0x91
 3233 0909 4C       		.sleb128 -52
 3234 090a 1D       		.uleb128 0x1d
 3235 090b 06090000 		.4byte	.LASF155
 3236 090f 02       		.byte	0x2
 3237 0910 EA       		.byte	0xea
 3238 0911 24010000 		.4byte	0x124
 3239 0915 02       		.byte	0x2
 3240 0916 91       		.byte	0x91
 3241 0917 4B       		.sleb128 -53
 3242 0918 1D       		.uleb128 0x1d
 3243 0919 00000000 		.4byte	.LASF156
 3244 091d 02       		.byte	0x2
 3245 091e F0       		.byte	0xf0
 3246 091f 42090000 		.4byte	0x942
 3247 0923 03       		.byte	0x3
 3248 0924 91       		.byte	0x91
 3249 0925 E47E     		.sleb128 -156
 3250 0927 1E       		.uleb128 0x1e
 3251 0928 F2070000 		.4byte	.LBB2
 3252 092c 58080000 		.4byte	.LBE2
 3253 0930 1F       		.uleb128 0x1f
 3254 0931 01       		.byte	0x1
 3255 0932 8A010000 		.4byte	.LASF208
 3256 0936 02       		.byte	0x2
 3257 0937 A003     		.2byte	0x3a0
 3258 0939 76010000 		.4byte	0x176
 3259 093d 01       		.byte	0x1
 3260 093e 20       		.uleb128 0x20
ARM GAS  /tmp/ccSzia7W.s 			page 101


 3261 093f 00       		.byte	0
 3262 0940 00       		.byte	0
 3263 0941 00       		.byte	0
 3264 0942 0C       		.uleb128 0xc
 3265 0943 B3050000 		.4byte	0x5b3
 3266 0947 52090000 		.4byte	0x952
 3267 094b 0D       		.uleb128 0xd
 3268 094c 5D020000 		.4byte	0x25d
 3269 0950 63       		.byte	0x63
 3270 0951 00       		.byte	0
 3271 0952 21       		.uleb128 0x21
 3272 0953 01       		.byte	0x1
 3273 0954 31090000 		.4byte	.LASF209
 3274 0958 02       		.byte	0x2
 3275 0959 0705     		.2byte	0x507
 3276 095b 01       		.byte	0x1
 3277 095c 00000000 		.4byte	.LFB21
 3278 0960 B0000000 		.4byte	.LFE21
 3279 0964 85000000 		.4byte	.LLST3
 3280 0968 01       		.byte	0x1
 3281 0969 120A0000 		.4byte	0xa12
 3282 096d 17       		.uleb128 0x17
 3283 096e 85000000 		.4byte	.LASF157
 3284 0972 02       		.byte	0x2
 3285 0973 0705     		.2byte	0x507
 3286 0975 120A0000 		.4byte	0xa12
 3287 0979 03       		.byte	0x3
 3288 097a 91       		.byte	0x91
 3289 097b A47F     		.sleb128 -92
 3290 097d 22       		.uleb128 0x22
 3291 097e 643100   		.ascii	"d1\000"
 3292 0981 02       		.byte	0x2
 3293 0982 0905     		.2byte	0x509
 3294 0984 9A010000 		.4byte	0x19a
 3295 0988 02       		.byte	0x2
 3296 0989 91       		.byte	0x91
 3297 098a 74       		.sleb128 -12
 3298 098b 22       		.uleb128 0x22
 3299 098c 643200   		.ascii	"d2\000"
 3300 098f 02       		.byte	0x2
 3301 0990 0905     		.2byte	0x509
 3302 0992 9A010000 		.4byte	0x19a
 3303 0996 02       		.byte	0x2
 3304 0997 91       		.byte	0x91
 3305 0998 70       		.sleb128 -16
 3306 0999 22       		.uleb128 0x22
 3307 099a 643300   		.ascii	"d3\000"
 3308 099d 02       		.byte	0x2
 3309 099e 0905     		.2byte	0x509
 3310 09a0 9A010000 		.4byte	0x19a
 3311 09a4 02       		.byte	0x2
 3312 09a5 91       		.byte	0x91
 3313 09a6 6C       		.sleb128 -20
 3314 09a7 22       		.uleb128 0x22
 3315 09a8 643400   		.ascii	"d4\000"
 3316 09ab 02       		.byte	0x2
 3317 09ac 0905     		.2byte	0x509
ARM GAS  /tmp/ccSzia7W.s 			page 102


 3318 09ae 9A010000 		.4byte	0x19a
 3319 09b2 02       		.byte	0x2
 3320 09b3 91       		.byte	0x91
 3321 09b4 68       		.sleb128 -24
 3322 09b5 22       		.uleb128 0x22
 3323 09b6 643500   		.ascii	"d5\000"
 3324 09b9 02       		.byte	0x2
 3325 09ba 0905     		.2byte	0x509
 3326 09bc 9A010000 		.4byte	0x19a
 3327 09c0 02       		.byte	0x2
 3328 09c1 91       		.byte	0x91
 3329 09c2 64       		.sleb128 -28
 3330 09c3 22       		.uleb128 0x22
 3331 09c4 643600   		.ascii	"d6\000"
 3332 09c7 02       		.byte	0x2
 3333 09c8 0905     		.2byte	0x509
 3334 09ca 9A010000 		.4byte	0x19a
 3335 09ce 02       		.byte	0x2
 3336 09cf 91       		.byte	0x91
 3337 09d0 60       		.sleb128 -32
 3338 09d1 23       		.uleb128 0x23
 3339 09d2 57050000 		.4byte	.LASF158
 3340 09d6 02       		.byte	0x2
 3341 09d7 0A05     		.2byte	0x50a
 3342 09d9 180A0000 		.4byte	0xa18
 3343 09dd 03       		.byte	0x3
 3344 09de 91       		.byte	0x91
 3345 09df B87F     		.sleb128 -72
 3346 09e1 23       		.uleb128 0x23
 3347 09e2 E2070000 		.4byte	.LASF159
 3348 09e6 02       		.byte	0x2
 3349 09e7 0B05     		.2byte	0x50b
 3350 09e9 2F0A0000 		.4byte	0xa2f
 3351 09ed 03       		.byte	0x3
 3352 09ee 91       		.byte	0x91
 3353 09ef B47F     		.sleb128 -76
 3354 09f1 23       		.uleb128 0x23
 3355 09f2 8E030000 		.4byte	.LASF160
 3356 09f6 02       		.byte	0x2
 3357 09f7 0C05     		.2byte	0x50c
 3358 09f9 2F0A0000 		.4byte	0xa2f
 3359 09fd 03       		.byte	0x3
 3360 09fe 91       		.byte	0x91
 3361 09ff B07F     		.sleb128 -80
 3362 0a01 23       		.uleb128 0x23
 3363 0a02 9E070000 		.4byte	.LASF161
 3364 0a06 02       		.byte	0x2
 3365 0a07 0D05     		.2byte	0x50d
 3366 0a09 2F0A0000 		.4byte	0xa2f
 3367 0a0d 03       		.byte	0x3
 3368 0a0e 91       		.byte	0x91
 3369 0a0f AC7F     		.sleb128 -84
 3370 0a11 00       		.byte	0
 3371 0a12 24       		.uleb128 0x24
 3372 0a13 04       		.byte	0x4
 3373 0a14 84010000 		.4byte	0x184
 3374 0a18 0C       		.uleb128 0xc
ARM GAS  /tmp/ccSzia7W.s 			page 103


 3375 0a19 B3050000 		.4byte	0x5b3
 3376 0a1d 280A0000 		.4byte	0xa28
 3377 0a21 0D       		.uleb128 0xd
 3378 0a22 5D020000 		.4byte	0x25d
 3379 0a26 27       		.byte	0x27
 3380 0a27 00       		.byte	0
 3381 0a28 05       		.uleb128 0x5
 3382 0a29 04       		.byte	0x4
 3383 0a2a 04       		.byte	0x4
 3384 0a2b E0010000 		.4byte	.LASF162
 3385 0a2f 0E       		.uleb128 0xe
 3386 0a30 280A0000 		.4byte	0xa28
 3387 0a34 25       		.uleb128 0x25
 3388 0a35 01       		.byte	0x1
 3389 0a36 EB080000 		.4byte	.LASF210
 3390 0a3a 02       		.byte	0x2
 3391 0a3b 2705     		.2byte	0x527
 3392 0a3d 01       		.byte	0x1
 3393 0a3e 00000000 		.4byte	.LFB22
 3394 0a42 EC000000 		.4byte	.LFE22
 3395 0a46 B2000000 		.4byte	.LLST4
 3396 0a4a 01       		.byte	0x1
 3397 0a4b 0C       		.uleb128 0xc
 3398 0a4c 24010000 		.4byte	0x124
 3399 0a50 5B0A0000 		.4byte	0xa5b
 3400 0a54 0D       		.uleb128 0xd
 3401 0a55 5D020000 		.4byte	0x25d
 3402 0a59 FF       		.byte	0xff
 3403 0a5a 00       		.byte	0
 3404 0a5b 26       		.uleb128 0x26
 3405 0a5c 2C010000 		.4byte	.LASF163
 3406 0a60 02       		.byte	0x2
 3407 0a61 3B       		.byte	0x3b
 3408 0a62 6D0A0000 		.4byte	0xa6d
 3409 0a66 01       		.byte	0x1
 3410 0a67 05       		.byte	0x5
 3411 0a68 03       		.byte	0x3
 3412 0a69 00000000 		.4byte	tx2buff
 3413 0a6d 0E       		.uleb128 0xe
 3414 0a6e 4B0A0000 		.4byte	0xa4b
 3415 0a72 26       		.uleb128 0x26
 3416 0a73 FE000000 		.4byte	.LASF164
 3417 0a77 02       		.byte	0x2
 3418 0a78 3C       		.byte	0x3c
 3419 0a79 840A0000 		.4byte	0xa84
 3420 0a7d 01       		.byte	0x1
 3421 0a7e 05       		.byte	0x5
 3422 0a7f 03       		.byte	0x3
 3423 0a80 00000000 		.4byte	rx2buff
 3424 0a84 0E       		.uleb128 0xe
 3425 0a85 4B0A0000 		.4byte	0xa4b
 3426 0a89 26       		.uleb128 0x26
 3427 0a8a 39040000 		.4byte	.LASF165
 3428 0a8e 02       		.byte	0x2
 3429 0a8f 3E       		.byte	0x3e
 3430 0a90 9B0A0000 		.4byte	0xa9b
 3431 0a94 01       		.byte	0x1
ARM GAS  /tmp/ccSzia7W.s 			page 104


 3432 0a95 05       		.byte	0x5
 3433 0a96 03       		.byte	0x3
 3434 0a97 00000000 		.4byte	tx1buff
 3435 0a9b 0E       		.uleb128 0xe
 3436 0a9c 4B0A0000 		.4byte	0xa4b
 3437 0aa0 26       		.uleb128 0x26
 3438 0aa1 11010000 		.4byte	.LASF166
 3439 0aa5 02       		.byte	0x2
 3440 0aa6 3F       		.byte	0x3f
 3441 0aa7 B20A0000 		.4byte	0xab2
 3442 0aab 01       		.byte	0x1
 3443 0aac 05       		.byte	0x5
 3444 0aad 03       		.byte	0x3
 3445 0aae 00000000 		.4byte	rx1buff
 3446 0ab2 0E       		.uleb128 0xe
 3447 0ab3 4B0A0000 		.4byte	0xa4b
 3448 0ab7 26       		.uleb128 0x26
 3449 0ab8 AE050000 		.4byte	.LASF167
 3450 0abc 02       		.byte	0x2
 3451 0abd 47       		.byte	0x47
 3452 0abe 3D010000 		.4byte	0x13d
 3453 0ac2 01       		.byte	0x1
 3454 0ac3 05       		.byte	0x5
 3455 0ac4 03       		.byte	0x3
 3456 0ac5 00000000 		.4byte	mains_voltage_filtered
 3457 0ac9 26       		.uleb128 0x26
 3458 0aca A6030000 		.4byte	.LASF168
 3459 0ace 02       		.byte	0x2
 3460 0acf 51       		.byte	0x51
 3461 0ad0 DB0A0000 		.4byte	0xadb
 3462 0ad4 01       		.byte	0x1
 3463 0ad5 05       		.byte	0x5
 3464 0ad6 03       		.byte	0x3
 3465 0ad7 00000000 		.4byte	take_temp_sample
 3466 0adb 0E       		.uleb128 0xe
 3467 0adc 3D010000 		.4byte	0x13d
 3468 0ae0 26       		.uleb128 0x26
 3469 0ae1 06030000 		.4byte	.LASF169
 3470 0ae5 02       		.byte	0x2
 3471 0ae6 52       		.byte	0x52
 3472 0ae7 3D010000 		.4byte	0x13d
 3473 0aeb 01       		.byte	0x1
 3474 0aec 05       		.byte	0x5
 3475 0aed 03       		.byte	0x3
 3476 0aee 00000000 		.4byte	timer_rep
 3477 0af2 26       		.uleb128 0x26
 3478 0af3 EC040000 		.4byte	.LASF170
 3479 0af7 02       		.byte	0x2
 3480 0af8 56       		.byte	0x56
 3481 0af9 DB0A0000 		.4byte	0xadb
 3482 0afd 01       		.byte	0x1
 3483 0afe 05       		.byte	0x5
 3484 0aff 03       		.byte	0x3
 3485 0b00 00000000 		.4byte	timer_relay
 3486 0b04 26       		.uleb128 0x26
 3487 0b05 DA020000 		.4byte	.LASF171
 3488 0b09 02       		.byte	0x2
ARM GAS  /tmp/ccSzia7W.s 			page 105


 3489 0b0a 58       		.byte	0x58
 3490 0b0b DB0A0000 		.4byte	0xadb
 3491 0b0f 01       		.byte	0x1
 3492 0b10 05       		.byte	0x5
 3493 0b11 03       		.byte	0x3
 3494 0b12 00000000 		.4byte	tt_take_photo_sample
 3495 0b16 26       		.uleb128 0x26
 3496 0b17 53040000 		.4byte	.LASF172
 3497 0b1b 02       		.byte	0x2
 3498 0b1c 59       		.byte	0x59
 3499 0b1d DB0A0000 		.4byte	0xadb
 3500 0b21 01       		.byte	0x1
 3501 0b22 05       		.byte	0x5
 3502 0b23 03       		.byte	0x3
 3503 0b24 00000000 		.4byte	tt_relay_on_off
 3504 0b28 26       		.uleb128 0x26
 3505 0b29 D6040000 		.4byte	.LASF173
 3506 0b2d 02       		.byte	0x2
 3507 0b2e 5D       		.byte	0x5d
 3508 0b2f 24010000 		.4byte	0x124
 3509 0b33 01       		.byte	0x1
 3510 0b34 05       		.byte	0x5
 3511 0b35 03       		.byte	0x3
 3512 0b36 00000000 		.4byte	saved_mode
 3513 0b3a 26       		.uleb128 0x26
 3514 0b3b 69080000 		.4byte	.LASF174
 3515 0b3f 02       		.byte	0x2
 3516 0b40 60       		.byte	0x60
 3517 0b41 24010000 		.4byte	0x124
 3518 0b45 01       		.byte	0x1
 3519 0b46 05       		.byte	0x5
 3520 0b47 03       		.byte	0x3
 3521 0b48 00000000 		.4byte	send_energy
 3522 0b4c 26       		.uleb128 0x26
 3523 0b4d 04080000 		.4byte	.LASF175
 3524 0b51 02       		.byte	0x2
 3525 0b52 63       		.byte	0x63
 3526 0b53 5E0B0000 		.4byte	0xb5e
 3527 0b57 01       		.byte	0x1
 3528 0b58 05       		.byte	0x5
 3529 0b59 03       		.byte	0x3
 3530 0b5a 00000000 		.4byte	adc_ch
 3531 0b5e 0E       		.uleb128 0xe
 3532 0b5f BA050000 		.4byte	0x5ba
 3533 0b63 26       		.uleb128 0x26
 3534 0b64 7C0A0000 		.4byte	.LASF176
 3535 0b68 02       		.byte	0x2
 3536 0b69 64       		.byte	0x64
 3537 0b6a 750B0000 		.4byte	0xb75
 3538 0b6e 01       		.byte	0x1
 3539 0b6f 05       		.byte	0x5
 3540 0b70 03       		.byte	0x3
 3541 0b71 00000000 		.4byte	seq_ready
 3542 0b75 0E       		.uleb128 0xe
 3543 0b76 24010000 		.4byte	0x124
 3544 0b7a 26       		.uleb128 0x26
 3545 0b7b 29050000 		.4byte	.LASF177
ARM GAS  /tmp/ccSzia7W.s 			page 106


 3546 0b7f 02       		.byte	0x2
 3547 0b80 65       		.byte	0x65
 3548 0b81 3D010000 		.4byte	0x13d
 3549 0b85 01       		.byte	0x1
 3550 0b86 05       		.byte	0x5
 3551 0b87 03       		.byte	0x3
 3552 0b88 00000000 		.4byte	zero_current
 3553 0b8c 26       		.uleb128 0x26
 3554 0b8d AD040000 		.4byte	.LASF178
 3555 0b91 02       		.byte	0x2
 3556 0b92 69       		.byte	0x69
 3557 0b93 750B0000 		.4byte	0xb75
 3558 0b97 01       		.byte	0x1
 3559 0b98 05       		.byte	0x5
 3560 0b99 03       		.byte	0x3
 3561 0b9a 00000000 		.4byte	usart1_mini_timeout
 3562 0b9e 26       		.uleb128 0x26
 3563 0b9f 9D020000 		.4byte	.LASF179
 3564 0ba3 02       		.byte	0x2
 3565 0ba4 6A       		.byte	0x6a
 3566 0ba5 750B0000 		.4byte	0xb75
 3567 0ba9 01       		.byte	0x1
 3568 0baa 05       		.byte	0x5
 3569 0bab 03       		.byte	0x3
 3570 0bac 00000000 		.4byte	usart1_pckt_ready
 3571 0bb0 26       		.uleb128 0x26
 3572 0bb1 35030000 		.4byte	.LASF180
 3573 0bb5 02       		.byte	0x2
 3574 0bb6 6B       		.byte	0x6b
 3575 0bb7 750B0000 		.4byte	0xb75
 3576 0bbb 01       		.byte	0x1
 3577 0bbc 05       		.byte	0x5
 3578 0bbd 03       		.byte	0x3
 3579 0bbe 00000000 		.4byte	usart1_have_data
 3580 0bc2 26       		.uleb128 0x26
 3581 0bc3 28020000 		.4byte	.LASF181
 3582 0bc7 02       		.byte	0x2
 3583 0bc8 6C       		.byte	0x6c
 3584 0bc9 24010000 		.4byte	0x124
 3585 0bcd 01       		.byte	0x1
 3586 0bce 05       		.byte	0x5
 3587 0bcf 03       		.byte	0x3
 3588 0bd0 00000000 		.4byte	usart1_pckt_bytes
 3589 0bd4 26       		.uleb128 0x26
 3590 0bd5 25040000 		.4byte	.LASF182
 3591 0bd9 02       		.byte	0x2
 3592 0bda 83       		.byte	0x83
 3593 0bdb 750B0000 		.4byte	0xb75
 3594 0bdf 01       		.byte	0x1
 3595 0be0 05       		.byte	0x5
 3596 0be1 03       		.byte	0x3
 3597 0be2 00000000 		.4byte	usart2_mini_timeout
 3598 0be6 26       		.uleb128 0x26
 3599 0be7 D9080000 		.4byte	.LASF183
 3600 0beb 02       		.byte	0x2
 3601 0bec 84       		.byte	0x84
 3602 0bed 750B0000 		.4byte	0xb75
ARM GAS  /tmp/ccSzia7W.s 			page 107


 3603 0bf1 01       		.byte	0x1
 3604 0bf2 05       		.byte	0x5
 3605 0bf3 03       		.byte	0x3
 3606 0bf4 00000000 		.4byte	usart2_pckt_ready
 3607 0bf8 26       		.uleb128 0x26
 3608 0bf9 4C010000 		.4byte	.LASF184
 3609 0bfd 02       		.byte	0x2
 3610 0bfe 85       		.byte	0x85
 3611 0bff 750B0000 		.4byte	0xb75
 3612 0c03 01       		.byte	0x1
 3613 0c04 05       		.byte	0x5
 3614 0c05 03       		.byte	0x3
 3615 0c06 00000000 		.4byte	usart2_have_data
 3616 0c0a 26       		.uleb128 0x26
 3617 0c0b 41040000 		.4byte	.LASF185
 3618 0c0f 02       		.byte	0x2
 3619 0c10 86       		.byte	0x86
 3620 0c11 24010000 		.4byte	0x124
 3621 0c15 01       		.byte	0x1
 3622 0c16 05       		.byte	0x5
 3623 0c17 03       		.byte	0x3
 3624 0c18 00000000 		.4byte	usart2_pckt_bytes
 3625 0c1c 0C       		.uleb128 0xc
 3626 0c1d B3050000 		.4byte	0x5b3
 3627 0c21 270C0000 		.4byte	0xc27
 3628 0c25 27       		.uleb128 0x27
 3629 0c26 00       		.byte	0
 3630 0c27 28       		.uleb128 0x28
 3631 0c28 FD050000 		.4byte	.LASF186
 3632 0c2c 02       		.byte	0x2
 3633 0c2d 88       		.byte	0x88
 3634 0c2e 340C0000 		.4byte	0xc34
 3635 0c32 01       		.byte	0x1
 3636 0c33 01       		.byte	0x1
 3637 0c34 0E       		.uleb128 0xe
 3638 0c35 1C0C0000 		.4byte	0xc1c
 3639 0c39 26       		.uleb128 0x26
 3640 0c3a 26000000 		.4byte	.LASF187
 3641 0c3e 02       		.byte	0x2
 3642 0c3f 8B       		.byte	0x8b
 3643 0c40 F9060000 		.4byte	0x6f9
 3644 0c44 01       		.byte	0x1
 3645 0c45 05       		.byte	0x5
 3646 0c46 03       		.byte	0x3
 3647 0c47 00000000 		.4byte	param_struct
 3648 0c4b 26       		.uleb128 0x26
 3649 0c4c 18050000 		.4byte	.LASF188
 3650 0c50 02       		.byte	0x2
 3651 0c51 8E       		.byte	0x8e
 3652 0c52 3D010000 		.4byte	0x13d
 3653 0c56 01       		.byte	0x1
 3654 0c57 05       		.byte	0x5
 3655 0c58 03       		.byte	0x3
 3656 0c59 00000000 		.4byte	show_power_index
 3657 0c5d 0C       		.uleb128 0xc
 3658 0c5e B3050000 		.4byte	0x5b3
 3659 0c62 6D0C0000 		.4byte	0xc6d
ARM GAS  /tmp/ccSzia7W.s 			page 108


 3660 0c66 0D       		.uleb128 0xd
 3661 0c67 5D020000 		.4byte	0x25d
 3662 0c6b 13       		.byte	0x13
 3663 0c6c 00       		.byte	0
 3664 0c6d 26       		.uleb128 0x26
 3665 0c6e 11060000 		.4byte	.LASF189
 3666 0c72 02       		.byte	0x2
 3667 0c73 98       		.byte	0x98
 3668 0c74 5D0C0000 		.4byte	0xc5d
 3669 0c78 01       		.byte	0x1
 3670 0c79 05       		.byte	0x5
 3671 0c7a 03       		.byte	0x3
 3672 0c7b 00000000 		.4byte	gsmNUM
 3673 0c7f 0C       		.uleb128 0xc
 3674 0c80 B3050000 		.4byte	0x5b3
 3675 0c84 8F0C0000 		.4byte	0xc8f
 3676 0c88 0D       		.uleb128 0xd
 3677 0c89 5D020000 		.4byte	0x25d
 3678 0c8d B3       		.byte	0xb3
 3679 0c8e 00       		.byte	0
 3680 0c8f 26       		.uleb128 0x26
 3681 0c90 0C070000 		.4byte	.LASF190
 3682 0c94 02       		.byte	0x2
 3683 0c95 99       		.byte	0x99
 3684 0c96 7F0C0000 		.4byte	0xc7f
 3685 0c9a 01       		.byte	0x1
 3686 0c9b 05       		.byte	0x5
 3687 0c9c 03       		.byte	0x3
 3688 0c9d 00000000 		.4byte	gsmMSG
 3689 0ca1 26       		.uleb128 0x26
 3690 0ca2 C4060000 		.4byte	.LASF191
 3691 0ca6 02       		.byte	0x2
 3692 0ca7 A1       		.byte	0xa1
 3693 0ca8 DB0A0000 		.4byte	0xadb
 3694 0cac 01       		.byte	0x1
 3695 0cad 05       		.byte	0x5
 3696 0cae 03       		.byte	0x3
 3697 0caf 00000000 		.4byte	wait_ms_var
 3698 0cb3 26       		.uleb128 0x26
 3699 0cb4 960A0000 		.4byte	.LASF192
 3700 0cb8 02       		.byte	0x2
 3701 0cb9 A2       		.byte	0xa2
 3702 0cba DB0A0000 		.4byte	0xadb
 3703 0cbe 01       		.byte	0x1
 3704 0cbf 05       		.byte	0x5
 3705 0cc0 03       		.byte	0x3
 3706 0cc1 00000000 		.4byte	timer_standby
 3707 0cc5 26       		.uleb128 0x26
 3708 0cc6 E3000000 		.4byte	.LASF193
 3709 0cca 02       		.byte	0x2
 3710 0ccb A3       		.byte	0xa3
 3711 0ccc DB0A0000 		.4byte	0xadb
 3712 0cd0 01       		.byte	0x1
 3713 0cd1 05       		.byte	0x5
 3714 0cd2 03       		.byte	0x3
 3715 0cd3 00000000 		.4byte	tcp_kalive_timer
 3716 0cd7 26       		.uleb128 0x26
ARM GAS  /tmp/ccSzia7W.s 			page 109


 3717 0cd8 41010000 		.4byte	.LASF194
 3718 0cdc 02       		.byte	0x2
 3719 0cdd A5       		.byte	0xa5
 3720 0cde 750B0000 		.4byte	0xb75
 3721 0ce2 01       		.byte	0x1
 3722 0ce3 05       		.byte	0x5
 3723 0ce4 03       		.byte	0x3
 3724 0ce5 00000000 		.4byte	timer_meas
 3725 0ce9 26       		.uleb128 0x26
 3726 0cea 63040000 		.4byte	.LASF195
 3727 0cee 02       		.byte	0x2
 3728 0cef AB       		.byte	0xab
 3729 0cf0 DB0A0000 		.4byte	0xadb
 3730 0cf4 01       		.byte	0x1
 3731 0cf5 05       		.byte	0x5
 3732 0cf6 03       		.byte	0x3
 3733 0cf7 00000000 		.4byte	secs
 3734 0cfb 26       		.uleb128 0x26
 3735 0cfc 13070000 		.4byte	.LASF196
 3736 0d00 02       		.byte	0x2
 3737 0d01 AC       		.byte	0xac
 3738 0d02 750B0000 		.4byte	0xb75
 3739 0d06 01       		.byte	0x1
 3740 0d07 05       		.byte	0x5
 3741 0d08 03       		.byte	0x3
 3742 0d09 00000000 		.4byte	hours
 3743 0d0d 26       		.uleb128 0x26
 3744 0d0e 24010000 		.4byte	.LASF197
 3745 0d12 02       		.byte	0x2
 3746 0d13 AD       		.byte	0xad
 3747 0d14 750B0000 		.4byte	0xb75
 3748 0d18 01       		.byte	0x1
 3749 0d19 05       		.byte	0x5
 3750 0d1a 03       		.byte	0x3
 3751 0d1b 00000000 		.4byte	minutes
 3752 0d1f 0C       		.uleb128 0xc
 3753 0d20 3D010000 		.4byte	0x13d
 3754 0d24 2F0D0000 		.4byte	0xd2f
 3755 0d28 0D       		.uleb128 0xd
 3756 0d29 5D020000 		.4byte	0x25d
 3757 0d2d 09       		.byte	0x9
 3758 0d2e 00       		.byte	0
 3759 0d2f 26       		.uleb128 0x26
 3760 0d30 F9070000 		.4byte	.LASF198
 3761 0d34 02       		.byte	0x2
 3762 0d35 B2       		.byte	0xb2
 3763 0d36 1F0D0000 		.4byte	0xd1f
 3764 0d3a 01       		.byte	0x1
 3765 0d3b 05       		.byte	0x5
 3766 0d3c 03       		.byte	0x3
 3767 0d3d 00000000 		.4byte	power_vect
 3768 0d41 0C       		.uleb128 0xc
 3769 0d42 3D010000 		.4byte	0x13d
 3770 0d46 510D0000 		.4byte	0xd51
 3771 0d4a 0D       		.uleb128 0xd
 3772 0d4b 5D020000 		.4byte	0x25d
 3773 0d4f 10       		.byte	0x10
ARM GAS  /tmp/ccSzia7W.s 			page 110


 3774 0d50 00       		.byte	0
 3775 0d51 26       		.uleb128 0x26
 3776 0d52 860A0000 		.4byte	.LASF199
 3777 0d56 02       		.byte	0x2
 3778 0d57 C0       		.byte	0xc0
 3779 0d58 410D0000 		.4byte	0xd41
 3780 0d5c 01       		.byte	0x1
 3781 0d5d 05       		.byte	0x5
 3782 0d5e 03       		.byte	0x3
 3783 0d5f 00000000 		.4byte	vtemp
 3784 0d63 26       		.uleb128 0x26
 3785 0d64 AF000000 		.4byte	.LASF200
 3786 0d68 02       		.byte	0x2
 3787 0d69 C1       		.byte	0xc1
 3788 0d6a 410D0000 		.4byte	0xd41
 3789 0d6e 01       		.byte	0x1
 3790 0d6f 05       		.byte	0x5
 3791 0d70 03       		.byte	0x3
 3792 0d71 00000000 		.4byte	vpote
 3793 0d75 00       		.byte	0
 3794              		.section	.debug_abbrev,"",%progbits
 3795              	.Ldebug_abbrev0:
 3796 0000 01       		.uleb128 0x1
 3797 0001 11       		.uleb128 0x11
 3798 0002 01       		.byte	0x1
 3799 0003 25       		.uleb128 0x25
 3800 0004 0E       		.uleb128 0xe
 3801 0005 13       		.uleb128 0x13
 3802 0006 0B       		.uleb128 0xb
 3803 0007 03       		.uleb128 0x3
 3804 0008 0E       		.uleb128 0xe
 3805 0009 1B       		.uleb128 0x1b
 3806 000a 0E       		.uleb128 0xe
 3807 000b 55       		.uleb128 0x55
 3808 000c 06       		.uleb128 0x6
 3809 000d 11       		.uleb128 0x11
 3810 000e 01       		.uleb128 0x1
 3811 000f 52       		.uleb128 0x52
 3812 0010 01       		.uleb128 0x1
 3813 0011 10       		.uleb128 0x10
 3814 0012 06       		.uleb128 0x6
 3815 0013 00       		.byte	0
 3816 0014 00       		.byte	0
 3817 0015 02       		.uleb128 0x2
 3818 0016 04       		.uleb128 0x4
 3819 0017 01       		.byte	0x1
 3820 0018 03       		.uleb128 0x3
 3821 0019 0E       		.uleb128 0xe
 3822 001a 0B       		.uleb128 0xb
 3823 001b 0B       		.uleb128 0xb
 3824 001c 49       		.uleb128 0x49
 3825 001d 13       		.uleb128 0x13
 3826 001e 3A       		.uleb128 0x3a
 3827 001f 0B       		.uleb128 0xb
 3828 0020 3B       		.uleb128 0x3b
 3829 0021 0B       		.uleb128 0xb
 3830 0022 01       		.uleb128 0x1
ARM GAS  /tmp/ccSzia7W.s 			page 111


 3831 0023 13       		.uleb128 0x13
 3832 0024 00       		.byte	0
 3833 0025 00       		.byte	0
 3834 0026 03       		.uleb128 0x3
 3835 0027 28       		.uleb128 0x28
 3836 0028 00       		.byte	0
 3837 0029 03       		.uleb128 0x3
 3838 002a 0E       		.uleb128 0xe
 3839 002b 1C       		.uleb128 0x1c
 3840 002c 0D       		.uleb128 0xd
 3841 002d 00       		.byte	0
 3842 002e 00       		.byte	0
 3843 002f 04       		.uleb128 0x4
 3844 0030 28       		.uleb128 0x28
 3845 0031 00       		.byte	0
 3846 0032 03       		.uleb128 0x3
 3847 0033 0E       		.uleb128 0xe
 3848 0034 1C       		.uleb128 0x1c
 3849 0035 0B       		.uleb128 0xb
 3850 0036 00       		.byte	0
 3851 0037 00       		.byte	0
 3852 0038 05       		.uleb128 0x5
 3853 0039 24       		.uleb128 0x24
 3854 003a 00       		.byte	0
 3855 003b 0B       		.uleb128 0xb
 3856 003c 0B       		.uleb128 0xb
 3857 003d 3E       		.uleb128 0x3e
 3858 003e 0B       		.uleb128 0xb
 3859 003f 03       		.uleb128 0x3
 3860 0040 0E       		.uleb128 0xe
 3861 0041 00       		.byte	0
 3862 0042 00       		.byte	0
 3863 0043 06       		.uleb128 0x6
 3864 0044 16       		.uleb128 0x16
 3865 0045 00       		.byte	0
 3866 0046 03       		.uleb128 0x3
 3867 0047 0E       		.uleb128 0xe
 3868 0048 3A       		.uleb128 0x3a
 3869 0049 0B       		.uleb128 0xb
 3870 004a 3B       		.uleb128 0x3b
 3871 004b 05       		.uleb128 0x5
 3872 004c 49       		.uleb128 0x49
 3873 004d 13       		.uleb128 0x13
 3874 004e 00       		.byte	0
 3875 004f 00       		.byte	0
 3876 0050 07       		.uleb128 0x7
 3877 0051 16       		.uleb128 0x16
 3878 0052 00       		.byte	0
 3879 0053 03       		.uleb128 0x3
 3880 0054 0E       		.uleb128 0xe
 3881 0055 3A       		.uleb128 0x3a
 3882 0056 0B       		.uleb128 0xb
 3883 0057 3B       		.uleb128 0x3b
 3884 0058 0B       		.uleb128 0xb
 3885 0059 49       		.uleb128 0x49
 3886 005a 13       		.uleb128 0x13
 3887 005b 00       		.byte	0
ARM GAS  /tmp/ccSzia7W.s 			page 112


 3888 005c 00       		.byte	0
 3889 005d 08       		.uleb128 0x8
 3890 005e 24       		.uleb128 0x24
 3891 005f 00       		.byte	0
 3892 0060 0B       		.uleb128 0xb
 3893 0061 0B       		.uleb128 0xb
 3894 0062 3E       		.uleb128 0x3e
 3895 0063 0B       		.uleb128 0xb
 3896 0064 03       		.uleb128 0x3
 3897 0065 08       		.uleb128 0x8
 3898 0066 00       		.byte	0
 3899 0067 00       		.byte	0
 3900 0068 09       		.uleb128 0x9
 3901 0069 13       		.uleb128 0x13
 3902 006a 01       		.byte	0x1
 3903 006b 0B       		.uleb128 0xb
 3904 006c 05       		.uleb128 0x5
 3905 006d 3A       		.uleb128 0x3a
 3906 006e 0B       		.uleb128 0xb
 3907 006f 3B       		.uleb128 0x3b
 3908 0070 0B       		.uleb128 0xb
 3909 0071 01       		.uleb128 0x1
 3910 0072 13       		.uleb128 0x13
 3911 0073 00       		.byte	0
 3912 0074 00       		.byte	0
 3913 0075 0A       		.uleb128 0xa
 3914 0076 0D       		.uleb128 0xd
 3915 0077 00       		.byte	0
 3916 0078 03       		.uleb128 0x3
 3917 0079 0E       		.uleb128 0xe
 3918 007a 3A       		.uleb128 0x3a
 3919 007b 0B       		.uleb128 0xb
 3920 007c 3B       		.uleb128 0x3b
 3921 007d 0B       		.uleb128 0xb
 3922 007e 49       		.uleb128 0x49
 3923 007f 13       		.uleb128 0x13
 3924 0080 38       		.uleb128 0x38
 3925 0081 0A       		.uleb128 0xa
 3926 0082 00       		.byte	0
 3927 0083 00       		.byte	0
 3928 0084 0B       		.uleb128 0xb
 3929 0085 0D       		.uleb128 0xd
 3930 0086 00       		.byte	0
 3931 0087 03       		.uleb128 0x3
 3932 0088 08       		.uleb128 0x8
 3933 0089 3A       		.uleb128 0x3a
 3934 008a 0B       		.uleb128 0xb
 3935 008b 3B       		.uleb128 0x3b
 3936 008c 0B       		.uleb128 0xb
 3937 008d 49       		.uleb128 0x49
 3938 008e 13       		.uleb128 0x13
 3939 008f 38       		.uleb128 0x38
 3940 0090 0A       		.uleb128 0xa
 3941 0091 00       		.byte	0
 3942 0092 00       		.byte	0
 3943 0093 0C       		.uleb128 0xc
 3944 0094 01       		.uleb128 0x1
ARM GAS  /tmp/ccSzia7W.s 			page 113


 3945 0095 01       		.byte	0x1
 3946 0096 49       		.uleb128 0x49
 3947 0097 13       		.uleb128 0x13
 3948 0098 01       		.uleb128 0x1
 3949 0099 13       		.uleb128 0x13
 3950 009a 00       		.byte	0
 3951 009b 00       		.byte	0
 3952 009c 0D       		.uleb128 0xd
 3953 009d 21       		.uleb128 0x21
 3954 009e 00       		.byte	0
 3955 009f 49       		.uleb128 0x49
 3956 00a0 13       		.uleb128 0x13
 3957 00a1 2F       		.uleb128 0x2f
 3958 00a2 0B       		.uleb128 0xb
 3959 00a3 00       		.byte	0
 3960 00a4 00       		.byte	0
 3961 00a5 0E       		.uleb128 0xe
 3962 00a6 35       		.uleb128 0x35
 3963 00a7 00       		.byte	0
 3964 00a8 49       		.uleb128 0x49
 3965 00a9 13       		.uleb128 0x13
 3966 00aa 00       		.byte	0
 3967 00ab 00       		.byte	0
 3968 00ac 0F       		.uleb128 0xf
 3969 00ad 13       		.uleb128 0x13
 3970 00ae 01       		.byte	0x1
 3971 00af 0B       		.uleb128 0xb
 3972 00b0 0B       		.uleb128 0xb
 3973 00b1 3A       		.uleb128 0x3a
 3974 00b2 0B       		.uleb128 0xb
 3975 00b3 3B       		.uleb128 0x3b
 3976 00b4 0B       		.uleb128 0xb
 3977 00b5 01       		.uleb128 0x1
 3978 00b6 13       		.uleb128 0x13
 3979 00b7 00       		.byte	0
 3980 00b8 00       		.byte	0
 3981 00b9 10       		.uleb128 0x10
 3982 00ba 26       		.uleb128 0x26
 3983 00bb 00       		.byte	0
 3984 00bc 49       		.uleb128 0x49
 3985 00bd 13       		.uleb128 0x13
 3986 00be 00       		.byte	0
 3987 00bf 00       		.byte	0
 3988 00c0 11       		.uleb128 0x11
 3989 00c1 0D       		.uleb128 0xd
 3990 00c2 00       		.byte	0
 3991 00c3 03       		.uleb128 0x3
 3992 00c4 08       		.uleb128 0x8
 3993 00c5 3A       		.uleb128 0x3a
 3994 00c6 0B       		.uleb128 0xb
 3995 00c7 3B       		.uleb128 0x3b
 3996 00c8 05       		.uleb128 0x5
 3997 00c9 49       		.uleb128 0x49
 3998 00ca 13       		.uleb128 0x13
 3999 00cb 38       		.uleb128 0x38
 4000 00cc 0A       		.uleb128 0xa
 4001 00cd 00       		.byte	0
ARM GAS  /tmp/ccSzia7W.s 			page 114


 4002 00ce 00       		.byte	0
 4003 00cf 12       		.uleb128 0x12
 4004 00d0 0D       		.uleb128 0xd
 4005 00d1 00       		.byte	0
 4006 00d2 03       		.uleb128 0x3
 4007 00d3 0E       		.uleb128 0xe
 4008 00d4 3A       		.uleb128 0x3a
 4009 00d5 0B       		.uleb128 0xb
 4010 00d6 3B       		.uleb128 0x3b
 4011 00d7 05       		.uleb128 0x5
 4012 00d8 49       		.uleb128 0x49
 4013 00d9 13       		.uleb128 0x13
 4014 00da 38       		.uleb128 0x38
 4015 00db 0A       		.uleb128 0xa
 4016 00dc 00       		.byte	0
 4017 00dd 00       		.byte	0
 4018 00de 13       		.uleb128 0x13
 4019 00df 13       		.uleb128 0x13
 4020 00e0 01       		.byte	0x1
 4021 00e1 0B       		.uleb128 0xb
 4022 00e2 0B       		.uleb128 0xb
 4023 00e3 3A       		.uleb128 0x3a
 4024 00e4 0B       		.uleb128 0xb
 4025 00e5 3B       		.uleb128 0x3b
 4026 00e6 05       		.uleb128 0x5
 4027 00e7 01       		.uleb128 0x1
 4028 00e8 13       		.uleb128 0x13
 4029 00e9 00       		.byte	0
 4030 00ea 00       		.byte	0
 4031 00eb 14       		.uleb128 0x14
 4032 00ec 04       		.uleb128 0x4
 4033 00ed 01       		.byte	0x1
 4034 00ee 0B       		.uleb128 0xb
 4035 00ef 0B       		.uleb128 0xb
 4036 00f0 49       		.uleb128 0x49
 4037 00f1 13       		.uleb128 0x13
 4038 00f2 3A       		.uleb128 0x3a
 4039 00f3 0B       		.uleb128 0xb
 4040 00f4 3B       		.uleb128 0x3b
 4041 00f5 0B       		.uleb128 0xb
 4042 00f6 01       		.uleb128 0x1
 4043 00f7 13       		.uleb128 0x13
 4044 00f8 00       		.byte	0
 4045 00f9 00       		.byte	0
 4046 00fa 15       		.uleb128 0x15
 4047 00fb 13       		.uleb128 0x13
 4048 00fc 01       		.byte	0x1
 4049 00fd 03       		.uleb128 0x3
 4050 00fe 0E       		.uleb128 0xe
 4051 00ff 0B       		.uleb128 0xb
 4052 0100 0B       		.uleb128 0xb
 4053 0101 3A       		.uleb128 0x3a
 4054 0102 0B       		.uleb128 0xb
 4055 0103 3B       		.uleb128 0x3b
 4056 0104 0B       		.uleb128 0xb
 4057 0105 01       		.uleb128 0x1
 4058 0106 13       		.uleb128 0x13
ARM GAS  /tmp/ccSzia7W.s 			page 115


 4059 0107 00       		.byte	0
 4060 0108 00       		.byte	0
 4061 0109 16       		.uleb128 0x16
 4062 010a 2E       		.uleb128 0x2e
 4063 010b 01       		.byte	0x1
 4064 010c 03       		.uleb128 0x3
 4065 010d 0E       		.uleb128 0xe
 4066 010e 3A       		.uleb128 0x3a
 4067 010f 0B       		.uleb128 0xb
 4068 0110 3B       		.uleb128 0x3b
 4069 0111 05       		.uleb128 0x5
 4070 0112 27       		.uleb128 0x27
 4071 0113 0C       		.uleb128 0xc
 4072 0114 11       		.uleb128 0x11
 4073 0115 01       		.uleb128 0x1
 4074 0116 12       		.uleb128 0x12
 4075 0117 01       		.uleb128 0x1
 4076 0118 40       		.uleb128 0x40
 4077 0119 06       		.uleb128 0x6
 4078 011a 9742     		.uleb128 0x2117
 4079 011c 0C       		.uleb128 0xc
 4080 011d 01       		.uleb128 0x1
 4081 011e 13       		.uleb128 0x13
 4082 011f 00       		.byte	0
 4083 0120 00       		.byte	0
 4084 0121 17       		.uleb128 0x17
 4085 0122 05       		.uleb128 0x5
 4086 0123 00       		.byte	0
 4087 0124 03       		.uleb128 0x3
 4088 0125 0E       		.uleb128 0xe
 4089 0126 3A       		.uleb128 0x3a
 4090 0127 0B       		.uleb128 0xb
 4091 0128 3B       		.uleb128 0x3b
 4092 0129 05       		.uleb128 0x5
 4093 012a 49       		.uleb128 0x49
 4094 012b 13       		.uleb128 0x13
 4095 012c 02       		.uleb128 0x2
 4096 012d 0A       		.uleb128 0xa
 4097 012e 00       		.byte	0
 4098 012f 00       		.byte	0
 4099 0130 18       		.uleb128 0x18
 4100 0131 2E       		.uleb128 0x2e
 4101 0132 01       		.byte	0x1
 4102 0133 03       		.uleb128 0x3
 4103 0134 0E       		.uleb128 0xe
 4104 0135 3A       		.uleb128 0x3a
 4105 0136 0B       		.uleb128 0xb
 4106 0137 3B       		.uleb128 0x3b
 4107 0138 05       		.uleb128 0x5
 4108 0139 27       		.uleb128 0x27
 4109 013a 0C       		.uleb128 0xc
 4110 013b 49       		.uleb128 0x49
 4111 013c 13       		.uleb128 0x13
 4112 013d 11       		.uleb128 0x11
 4113 013e 01       		.uleb128 0x1
 4114 013f 12       		.uleb128 0x12
 4115 0140 01       		.uleb128 0x1
ARM GAS  /tmp/ccSzia7W.s 			page 116


 4116 0141 40       		.uleb128 0x40
 4117 0142 06       		.uleb128 0x6
 4118 0143 9642     		.uleb128 0x2116
 4119 0145 0C       		.uleb128 0xc
 4120 0146 01       		.uleb128 0x1
 4121 0147 13       		.uleb128 0x13
 4122 0148 00       		.byte	0
 4123 0149 00       		.byte	0
 4124 014a 19       		.uleb128 0x19
 4125 014b 2E       		.uleb128 0x2e
 4126 014c 01       		.byte	0x1
 4127 014d 3F       		.uleb128 0x3f
 4128 014e 0C       		.uleb128 0xc
 4129 014f 03       		.uleb128 0x3
 4130 0150 0E       		.uleb128 0xe
 4131 0151 3A       		.uleb128 0x3a
 4132 0152 0B       		.uleb128 0xb
 4133 0153 3B       		.uleb128 0x3b
 4134 0154 0B       		.uleb128 0xb
 4135 0155 27       		.uleb128 0x27
 4136 0156 0C       		.uleb128 0xc
 4137 0157 49       		.uleb128 0x49
 4138 0158 13       		.uleb128 0x13
 4139 0159 11       		.uleb128 0x11
 4140 015a 01       		.uleb128 0x1
 4141 015b 12       		.uleb128 0x12
 4142 015c 01       		.uleb128 0x1
 4143 015d 40       		.uleb128 0x40
 4144 015e 06       		.uleb128 0x6
 4145 015f 9642     		.uleb128 0x2116
 4146 0161 0C       		.uleb128 0xc
 4147 0162 01       		.uleb128 0x1
 4148 0163 13       		.uleb128 0x13
 4149 0164 00       		.byte	0
 4150 0165 00       		.byte	0
 4151 0166 1A       		.uleb128 0x1a
 4152 0167 34       		.uleb128 0x34
 4153 0168 00       		.byte	0
 4154 0169 03       		.uleb128 0x3
 4155 016a 08       		.uleb128 0x8
 4156 016b 3A       		.uleb128 0x3a
 4157 016c 0B       		.uleb128 0xb
 4158 016d 3B       		.uleb128 0x3b
 4159 016e 0B       		.uleb128 0xb
 4160 016f 49       		.uleb128 0x49
 4161 0170 13       		.uleb128 0x13
 4162 0171 02       		.uleb128 0x2
 4163 0172 0A       		.uleb128 0xa
 4164 0173 00       		.byte	0
 4165 0174 00       		.byte	0
 4166 0175 1B       		.uleb128 0x1b
 4167 0176 34       		.uleb128 0x34
 4168 0177 00       		.byte	0
 4169 0178 03       		.uleb128 0x3
 4170 0179 08       		.uleb128 0x8
 4171 017a 3A       		.uleb128 0x3a
 4172 017b 0B       		.uleb128 0xb
ARM GAS  /tmp/ccSzia7W.s 			page 117


 4173 017c 3B       		.uleb128 0x3b
 4174 017d 0B       		.uleb128 0xb
 4175 017e 49       		.uleb128 0x49
 4176 017f 13       		.uleb128 0x13
 4177 0180 00       		.byte	0
 4178 0181 00       		.byte	0
 4179 0182 1C       		.uleb128 0x1c
 4180 0183 34       		.uleb128 0x34
 4181 0184 00       		.byte	0
 4182 0185 03       		.uleb128 0x3
 4183 0186 0E       		.uleb128 0xe
 4184 0187 3A       		.uleb128 0x3a
 4185 0188 0B       		.uleb128 0xb
 4186 0189 3B       		.uleb128 0x3b
 4187 018a 0B       		.uleb128 0xb
 4188 018b 49       		.uleb128 0x49
 4189 018c 13       		.uleb128 0x13
 4190 018d 00       		.byte	0
 4191 018e 00       		.byte	0
 4192 018f 1D       		.uleb128 0x1d
 4193 0190 34       		.uleb128 0x34
 4194 0191 00       		.byte	0
 4195 0192 03       		.uleb128 0x3
 4196 0193 0E       		.uleb128 0xe
 4197 0194 3A       		.uleb128 0x3a
 4198 0195 0B       		.uleb128 0xb
 4199 0196 3B       		.uleb128 0x3b
 4200 0197 0B       		.uleb128 0xb
 4201 0198 49       		.uleb128 0x49
 4202 0199 13       		.uleb128 0x13
 4203 019a 02       		.uleb128 0x2
 4204 019b 0A       		.uleb128 0xa
 4205 019c 00       		.byte	0
 4206 019d 00       		.byte	0
 4207 019e 1E       		.uleb128 0x1e
 4208 019f 0B       		.uleb128 0xb
 4209 01a0 01       		.byte	0x1
 4210 01a1 11       		.uleb128 0x11
 4211 01a2 01       		.uleb128 0x1
 4212 01a3 12       		.uleb128 0x12
 4213 01a4 01       		.uleb128 0x1
 4214 01a5 00       		.byte	0
 4215 01a6 00       		.byte	0
 4216 01a7 1F       		.uleb128 0x1f
 4217 01a8 2E       		.uleb128 0x2e
 4218 01a9 01       		.byte	0x1
 4219 01aa 3F       		.uleb128 0x3f
 4220 01ab 0C       		.uleb128 0xc
 4221 01ac 03       		.uleb128 0x3
 4222 01ad 0E       		.uleb128 0xe
 4223 01ae 3A       		.uleb128 0x3a
 4224 01af 0B       		.uleb128 0xb
 4225 01b0 3B       		.uleb128 0x3b
 4226 01b1 05       		.uleb128 0x5
 4227 01b2 49       		.uleb128 0x49
 4228 01b3 13       		.uleb128 0x13
 4229 01b4 3C       		.uleb128 0x3c
ARM GAS  /tmp/ccSzia7W.s 			page 118


 4230 01b5 0C       		.uleb128 0xc
 4231 01b6 00       		.byte	0
 4232 01b7 00       		.byte	0
 4233 01b8 20       		.uleb128 0x20
 4234 01b9 18       		.uleb128 0x18
 4235 01ba 00       		.byte	0
 4236 01bb 00       		.byte	0
 4237 01bc 00       		.byte	0
 4238 01bd 21       		.uleb128 0x21
 4239 01be 2E       		.uleb128 0x2e
 4240 01bf 01       		.byte	0x1
 4241 01c0 3F       		.uleb128 0x3f
 4242 01c1 0C       		.uleb128 0xc
 4243 01c2 03       		.uleb128 0x3
 4244 01c3 0E       		.uleb128 0xe
 4245 01c4 3A       		.uleb128 0x3a
 4246 01c5 0B       		.uleb128 0xb
 4247 01c6 3B       		.uleb128 0x3b
 4248 01c7 05       		.uleb128 0x5
 4249 01c8 27       		.uleb128 0x27
 4250 01c9 0C       		.uleb128 0xc
 4251 01ca 11       		.uleb128 0x11
 4252 01cb 01       		.uleb128 0x1
 4253 01cc 12       		.uleb128 0x12
 4254 01cd 01       		.uleb128 0x1
 4255 01ce 40       		.uleb128 0x40
 4256 01cf 06       		.uleb128 0x6
 4257 01d0 9642     		.uleb128 0x2116
 4258 01d2 0C       		.uleb128 0xc
 4259 01d3 01       		.uleb128 0x1
 4260 01d4 13       		.uleb128 0x13
 4261 01d5 00       		.byte	0
 4262 01d6 00       		.byte	0
 4263 01d7 22       		.uleb128 0x22
 4264 01d8 34       		.uleb128 0x34
 4265 01d9 00       		.byte	0
 4266 01da 03       		.uleb128 0x3
 4267 01db 08       		.uleb128 0x8
 4268 01dc 3A       		.uleb128 0x3a
 4269 01dd 0B       		.uleb128 0xb
 4270 01de 3B       		.uleb128 0x3b
 4271 01df 05       		.uleb128 0x5
 4272 01e0 49       		.uleb128 0x49
 4273 01e1 13       		.uleb128 0x13
 4274 01e2 02       		.uleb128 0x2
 4275 01e3 0A       		.uleb128 0xa
 4276 01e4 00       		.byte	0
 4277 01e5 00       		.byte	0
 4278 01e6 23       		.uleb128 0x23
 4279 01e7 34       		.uleb128 0x34
 4280 01e8 00       		.byte	0
 4281 01e9 03       		.uleb128 0x3
 4282 01ea 0E       		.uleb128 0xe
 4283 01eb 3A       		.uleb128 0x3a
 4284 01ec 0B       		.uleb128 0xb
 4285 01ed 3B       		.uleb128 0x3b
 4286 01ee 05       		.uleb128 0x5
ARM GAS  /tmp/ccSzia7W.s 			page 119


 4287 01ef 49       		.uleb128 0x49
 4288 01f0 13       		.uleb128 0x13
 4289 01f1 02       		.uleb128 0x2
 4290 01f2 0A       		.uleb128 0xa
 4291 01f3 00       		.byte	0
 4292 01f4 00       		.byte	0
 4293 01f5 24       		.uleb128 0x24
 4294 01f6 0F       		.uleb128 0xf
 4295 01f7 00       		.byte	0
 4296 01f8 0B       		.uleb128 0xb
 4297 01f9 0B       		.uleb128 0xb
 4298 01fa 49       		.uleb128 0x49
 4299 01fb 13       		.uleb128 0x13
 4300 01fc 00       		.byte	0
 4301 01fd 00       		.byte	0
 4302 01fe 25       		.uleb128 0x25
 4303 01ff 2E       		.uleb128 0x2e
 4304 0200 00       		.byte	0
 4305 0201 3F       		.uleb128 0x3f
 4306 0202 0C       		.uleb128 0xc
 4307 0203 03       		.uleb128 0x3
 4308 0204 0E       		.uleb128 0xe
 4309 0205 3A       		.uleb128 0x3a
 4310 0206 0B       		.uleb128 0xb
 4311 0207 3B       		.uleb128 0x3b
 4312 0208 05       		.uleb128 0x5
 4313 0209 27       		.uleb128 0x27
 4314 020a 0C       		.uleb128 0xc
 4315 020b 11       		.uleb128 0x11
 4316 020c 01       		.uleb128 0x1
 4317 020d 12       		.uleb128 0x12
 4318 020e 01       		.uleb128 0x1
 4319 020f 40       		.uleb128 0x40
 4320 0210 06       		.uleb128 0x6
 4321 0211 9642     		.uleb128 0x2116
 4322 0213 0C       		.uleb128 0xc
 4323 0214 00       		.byte	0
 4324 0215 00       		.byte	0
 4325 0216 26       		.uleb128 0x26
 4326 0217 34       		.uleb128 0x34
 4327 0218 00       		.byte	0
 4328 0219 03       		.uleb128 0x3
 4329 021a 0E       		.uleb128 0xe
 4330 021b 3A       		.uleb128 0x3a
 4331 021c 0B       		.uleb128 0xb
 4332 021d 3B       		.uleb128 0x3b
 4333 021e 0B       		.uleb128 0xb
 4334 021f 49       		.uleb128 0x49
 4335 0220 13       		.uleb128 0x13
 4336 0221 3F       		.uleb128 0x3f
 4337 0222 0C       		.uleb128 0xc
 4338 0223 02       		.uleb128 0x2
 4339 0224 0A       		.uleb128 0xa
 4340 0225 00       		.byte	0
 4341 0226 00       		.byte	0
 4342 0227 27       		.uleb128 0x27
 4343 0228 21       		.uleb128 0x21
ARM GAS  /tmp/ccSzia7W.s 			page 120


 4344 0229 00       		.byte	0
 4345 022a 00       		.byte	0
 4346 022b 00       		.byte	0
 4347 022c 28       		.uleb128 0x28
 4348 022d 34       		.uleb128 0x34
 4349 022e 00       		.byte	0
 4350 022f 03       		.uleb128 0x3
 4351 0230 0E       		.uleb128 0xe
 4352 0231 3A       		.uleb128 0x3a
 4353 0232 0B       		.uleb128 0xb
 4354 0233 3B       		.uleb128 0x3b
 4355 0234 0B       		.uleb128 0xb
 4356 0235 49       		.uleb128 0x49
 4357 0236 13       		.uleb128 0x13
 4358 0237 3F       		.uleb128 0x3f
 4359 0238 0C       		.uleb128 0xc
 4360 0239 3C       		.uleb128 0x3c
 4361 023a 0C       		.uleb128 0xc
 4362 023b 00       		.byte	0
 4363 023c 00       		.byte	0
 4364 023d 00       		.byte	0
 4365              		.section	.debug_loc,"",%progbits
 4366              	.Ldebug_loc0:
 4367              	.LLST0:
 4368 0000 00000000 		.4byte	.LFB16
 4369 0004 02000000 		.4byte	.LCFI0
 4370 0008 0200     		.2byte	0x2
 4371 000a 7D       		.byte	0x7d
 4372 000b 00       		.sleb128 0
 4373 000c 02000000 		.4byte	.LCFI0
 4374 0010 04000000 		.4byte	.LCFI1
 4375 0014 0200     		.2byte	0x2
 4376 0016 7D       		.byte	0x7d
 4377 0017 0C       		.sleb128 12
 4378 0018 04000000 		.4byte	.LCFI1
 4379 001c EC000000 		.4byte	.LFE16
 4380 0020 0200     		.2byte	0x2
 4381 0022 7D       		.byte	0x7d
 4382 0023 18       		.sleb128 24
 4383 0024 00000000 		.4byte	0
 4384 0028 00000000 		.4byte	0
 4385              	.LLST1:
 4386 002c 00000000 		.4byte	.LFB18
 4387 0030 02000000 		.4byte	.LCFI2
 4388 0034 0200     		.2byte	0x2
 4389 0036 7D       		.byte	0x7d
 4390 0037 00       		.sleb128 0
 4391 0038 02000000 		.4byte	.LCFI2
 4392 003c 04000000 		.4byte	.LCFI3
 4393 0040 0200     		.2byte	0x2
 4394 0042 7D       		.byte	0x7d
 4395 0043 04       		.sleb128 4
 4396 0044 04000000 		.4byte	.LCFI3
 4397 0048 48000000 		.4byte	.LFE18
 4398 004c 0200     		.2byte	0x2
 4399 004e 7D       		.byte	0x7d
 4400 004f 10       		.sleb128 16
ARM GAS  /tmp/ccSzia7W.s 			page 121


 4401 0050 00000000 		.4byte	0
 4402 0054 00000000 		.4byte	0
 4403              	.LLST2:
 4404 0058 00000000 		.4byte	.LFB20
 4405 005c 02000000 		.4byte	.LCFI4
 4406 0060 0200     		.2byte	0x2
 4407 0062 7D       		.byte	0x7d
 4408 0063 00       		.sleb128 0
 4409 0064 02000000 		.4byte	.LCFI4
 4410 0068 04000000 		.4byte	.LCFI5
 4411 006c 0200     		.2byte	0x2
 4412 006e 7D       		.byte	0x7d
 4413 006f 0C       		.sleb128 12
 4414 0070 04000000 		.4byte	.LCFI5
 4415 0074 80080000 		.4byte	.LFE20
 4416 0078 0300     		.2byte	0x3
 4417 007a 7D       		.byte	0x7d
 4418 007b A001     		.sleb128 160
 4419 007d 00000000 		.4byte	0
 4420 0081 00000000 		.4byte	0
 4421              	.LLST3:
 4422 0085 00000000 		.4byte	.LFB21
 4423 0089 02000000 		.4byte	.LCFI6
 4424 008d 0200     		.2byte	0x2
 4425 008f 7D       		.byte	0x7d
 4426 0090 00       		.sleb128 0
 4427 0091 02000000 		.4byte	.LCFI6
 4428 0095 04000000 		.4byte	.LCFI7
 4429 0099 0200     		.2byte	0x2
 4430 009b 7D       		.byte	0x7d
 4431 009c 04       		.sleb128 4
 4432 009d 04000000 		.4byte	.LCFI7
 4433 00a1 B0000000 		.4byte	.LFE21
 4434 00a5 0300     		.2byte	0x3
 4435 00a7 7D       		.byte	0x7d
 4436 00a8 E000     		.sleb128 96
 4437 00aa 00000000 		.4byte	0
 4438 00ae 00000000 		.4byte	0
 4439              	.LLST4:
 4440 00b2 00000000 		.4byte	.LFB22
 4441 00b6 02000000 		.4byte	.LCFI8
 4442 00ba 0200     		.2byte	0x2
 4443 00bc 7D       		.byte	0x7d
 4444 00bd 00       		.sleb128 0
 4445 00be 02000000 		.4byte	.LCFI8
 4446 00c2 EC000000 		.4byte	.LFE22
 4447 00c6 0200     		.2byte	0x2
 4448 00c8 7D       		.byte	0x7d
 4449 00c9 08       		.sleb128 8
 4450 00ca 00000000 		.4byte	0
 4451 00ce 00000000 		.4byte	0
 4452              		.section	.debug_aranges,"",%progbits
 4453 0000 3C000000 		.4byte	0x3c
 4454 0004 0200     		.2byte	0x2
 4455 0006 00000000 		.4byte	.Ldebug_info0
 4456 000a 04       		.byte	0x4
 4457 000b 00       		.byte	0
ARM GAS  /tmp/ccSzia7W.s 			page 122


 4458 000c 0000     		.2byte	0
 4459 000e 0000     		.2byte	0
 4460 0010 00000000 		.4byte	.LFB16
 4461 0014 EC000000 		.4byte	.LFE16-.LFB16
 4462 0018 00000000 		.4byte	.LFB18
 4463 001c 48000000 		.4byte	.LFE18-.LFB18
 4464 0020 00000000 		.4byte	.LFB20
 4465 0024 80080000 		.4byte	.LFE20-.LFB20
 4466 0028 00000000 		.4byte	.LFB21
 4467 002c B0000000 		.4byte	.LFE21-.LFB21
 4468 0030 00000000 		.4byte	.LFB22
 4469 0034 EC000000 		.4byte	.LFE22-.LFB22
 4470 0038 00000000 		.4byte	0
 4471 003c 00000000 		.4byte	0
 4472              		.section	.debug_ranges,"",%progbits
 4473              	.Ldebug_ranges0:
 4474 0000 00000000 		.4byte	.LFB16
 4475 0004 EC000000 		.4byte	.LFE16
 4476 0008 00000000 		.4byte	.LFB18
 4477 000c 48000000 		.4byte	.LFE18
 4478 0010 00000000 		.4byte	.LFB20
 4479 0014 80080000 		.4byte	.LFE20
 4480 0018 00000000 		.4byte	.LFB21
 4481 001c B0000000 		.4byte	.LFE21
 4482 0020 00000000 		.4byte	.LFB22
 4483 0024 EC000000 		.4byte	.LFE22
 4484 0028 00000000 		.4byte	0
 4485 002c 00000000 		.4byte	0
 4486              		.section	.debug_line,"",%progbits
 4487              	.Ldebug_line0:
 4488 0000 19030000 		.section	.debug_str,"MS",%progbits,1
 4488      02003701 
 4488      00000201 
 4488      FB0E0D00 
 4488      01010101 
 4489              	.LASF156:
 4490 0000 735F6C63 		.ascii	"s_lcd\000"
 4490      6400
 4491              	.LASF127:
 4492 0006 67736D5F 		.ascii	"gsm_state_idle\000"
 4492      73746174 
 4492      655F6964 
 4492      6C6500
 4493              	.LASF143:
 4494 0015 7A65726F 		.ascii	"zero_current_loc\000"
 4494      5F637572 
 4494      72656E74 
 4494      5F6C6F63 
 4494      00
 4495              	.LASF187:
 4496 0026 70617261 		.ascii	"param_struct\000"
 4496      6D5F7374 
 4496      72756374 
 4496      00
 4497              	.LASF12:
 4498 0033 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4498      345F3135 
ARM GAS  /tmp/ccSzia7W.s 			page 123


 4498      5F495251 
 4498      6E00
 4499              	.LASF83:
 4500 0041 42535252 		.ascii	"BSRR\000"
 4500      00
 4501              	.LASF11:
 4502 0046 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4502      325F335F 
 4502      4952516E 
 4502      00
 4503              	.LASF148:
 4504 0053 6D61696E 		.ascii	"main_state\000"
 4504      5F737461 
 4504      746500
 4505              	.LASF101:
 4506 005e 696E6974 		.ascii	"init_airplane0\000"
 4506      5F616972 
 4506      706C616E 
 4506      653000
 4507              	.LASF102:
 4508 006d 696E6974 		.ascii	"init_airplane1\000"
 4508      5F616972 
 4508      706C616E 
 4508      653100
 4509              	.LASF2:
 4510 007c 5356435F 		.ascii	"SVC_IRQn\000"
 4510      4952516E 
 4510      00
 4511              	.LASF157:
 4512 0085 62756666 		.ascii	"buffer\000"
 4512      657200
 4513              	.LASF123:
 4514 008c 67736D5F 		.ascii	"gsm_state_ready\000"
 4514      73746174 
 4514      655F7265 
 4514      61647900 
 4515              	.LASF131:
 4516 009c 67736D5F 		.ascii	"gsm_state_shutdown\000"
 4516      73746174 
 4516      655F7368 
 4516      7574646F 
 4516      776E00
 4517              	.LASF200:
 4518 00af 76706F74 		.ascii	"vpote\000"
 4518      6500
 4519              	.LASF107:
 4520 00b5 6D656173 		.ascii	"meas_go_airplane\000"
 4520      5F676F5F 
 4520      61697270 
 4520      6C616E65 
 4520      00
 4521              	.LASF47:
 4522 00c6 756E7369 		.ascii	"unsigned int\000"
 4522      676E6564 
 4522      20696E74 
 4522      00
 4523              	.LASF71:
ARM GAS  /tmp/ccSzia7W.s 			page 124


 4524 00d3 4C4F4144 		.ascii	"LOAD\000"
 4524      00
 4525              	.LASF25:
 4526 00d8 54494D31 		.ascii	"TIM16_IRQn\000"
 4526      365F4952 
 4526      516E00
 4527              	.LASF193:
 4528 00e3 7463705F 		.ascii	"tcp_kalive_timer\000"
 4528      6B616C69 
 4528      76655F74 
 4528      696D6572 
 4528      00
 4529              	.LASF41:
 4530 00f4 5F5F696E 		.ascii	"__int32_t\000"
 4530      7433325F 
 4530      7400
 4531              	.LASF164:
 4532 00fe 72783262 		.ascii	"rx2buff\000"
 4532      75666600 
 4533              	.LASF8:
 4534 0106 464C4153 		.ascii	"FLASH_IRQn\000"
 4534      485F4952 
 4534      516E00
 4535              	.LASF166:
 4536 0111 72783162 		.ascii	"rx1buff\000"
 4536      75666600 
 4537              	.LASF72:
 4538 0119 43414C49 		.ascii	"CALIB\000"
 4538      4200
 4539              	.LASF110:
 4540 011f 696D6569 		.ascii	"imei\000"
 4540      00
 4541              	.LASF197:
 4542 0124 6D696E75 		.ascii	"minutes\000"
 4542      74657300 
 4543              	.LASF163:
 4544 012c 74783262 		.ascii	"tx2buff\000"
 4544      75666600 
 4545              	.LASF10:
 4546 0134 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4546      305F315F 
 4546      4952516E 
 4546      00
 4547              	.LASF194:
 4548 0141 74696D65 		.ascii	"timer_meas\000"
 4548      725F6D65 
 4548      617300
 4549              	.LASF184:
 4550 014c 75736172 		.ascii	"usart2_have_data\000"
 4550      74325F68 
 4550      6176655F 
 4550      64617461 
 4550      00
 4551              	.LASF124:
 4552 015d 67736D5F 		.ascii	"gsm_state_sending_conf\000"
 4552      73746174 
 4552      655F7365 
ARM GAS  /tmp/ccSzia7W.s 			page 125


 4552      6E64696E 
 4552      675F636F 
 4553              	.LASF27:
 4554 0174 49324331 		.ascii	"I2C1_IRQn\000"
 4554      5F495251 
 4554      6E00
 4555              	.LASF3:
 4556 017e 50656E64 		.ascii	"PendSV_IRQn\000"
 4556      53565F49 
 4556      52516E00 
 4557              	.LASF208:
 4558 018a 4D61696E 		.ascii	"Mains_Glitch\000"
 4558      735F476C 
 4558      69746368 
 4558      00
 4559              	.LASF144:
 4560 0197 6163756D 		.ascii	"acum_secs_index\000"
 4560      5F736563 
 4560      735F696E 
 4560      64657800 
 4561              	.LASF9:
 4562 01a7 5243435F 		.ascii	"RCC_IRQn\000"
 4562      4952516E 
 4562      00
 4563              	.LASF106:
 4564 01b0 6D656173 		.ascii	"meas_reporting1\000"
 4564      5F726570 
 4564      6F727469 
 4564      6E673100 
 4565              	.LASF51:
 4566 01c0 75696E74 		.ascii	"uint32_t\000"
 4566      33325F74 
 4566      00
 4567              	.LASF112:
 4568 01c9 6163756D 		.ascii	"acumm_wh\000"
 4568      6D5F7768 
 4568      00
 4569              	.LASF153:
 4570 01d2 6D656173 		.ascii	"meas_end\000"
 4570      5F656E64 
 4570      00
 4571              	.LASF52:
 4572 01db 49534552 		.ascii	"ISER\000"
 4572      00
 4573              	.LASF162:
 4574 01e0 666C6F61 		.ascii	"float\000"
 4574      7400
 4575              	.LASF154:
 4576 01e6 68797374 		.ascii	"hyst\000"
 4576      00
 4577              	.LASF99:
 4578 01eb 4D41494E 		.ascii	"MAINS_FAILURE\000"
 4578      535F4641 
 4578      494C5552 
 4578      4500
 4579              	.LASF55:
 4580 01f9 52534552 		.ascii	"RSERVED1\000"
ARM GAS  /tmp/ccSzia7W.s 			page 126


 4580      56454431 
 4580      00
 4581              	.LASF29:
 4582 0202 53504931 		.ascii	"SPI1_IRQn\000"
 4582      5F495251 
 4582      6E00
 4583              	.LASF46:
 4584 020c 6C6F6E67 		.ascii	"long long unsigned int\000"
 4584      206C6F6E 
 4584      6720756E 
 4584      7369676E 
 4584      65642069 
 4585              	.LASF68:
 4586 0223 44465352 		.ascii	"DFSR\000"
 4586      00
 4587              	.LASF181:
 4588 0228 75736172 		.ascii	"usart1_pckt_bytes\000"
 4588      74315F70 
 4588      636B745F 
 4588      62797465 
 4588      7300
 4589              	.LASF118:
 4590 023a 67736D5F 		.ascii	"gsm_state_reset\000"
 4590      73746174 
 4590      655F7265 
 4590      73657400 
 4591              	.LASF146:
 4592 024a 6163756D 		.ascii	"acum_hours\000"
 4592      5F686F75 
 4592      727300
 4593              	.LASF39:
 4594 0255 5F5F7569 		.ascii	"__uint16_t\000"
 4594      6E743136 
 4594      5F7400
 4595              	.LASF91:
 4596 0260 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE0\000"
 4596      434F554E 
 4596      54455253 
 4596      5F414E44 
 4596      5F50484F 
 4597              	.LASF92:
 4598 0278 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE1\000"
 4598      434F554E 
 4598      54455253 
 4598      5F414E44 
 4598      5F50484F 
 4599              	.LASF79:
 4600 0290 4D4F4445 		.ascii	"MODER\000"
 4600      5200
 4601              	.LASF77:
 4602 0296 43485345 		.ascii	"CHSELR\000"
 4602      4C5200
 4603              	.LASF179:
 4604 029d 75736172 		.ascii	"usart1_pckt_ready\000"
 4604      74315F70 
 4604      636B745F 
 4604      72656164 
ARM GAS  /tmp/ccSzia7W.s 			page 127


 4604      7900
 4605              	.LASF34:
 4606 02af 4952516E 		.ascii	"IRQn_Type\000"
 4606      5F547970 
 4606      6500
 4607              	.LASF115:
 4608 02b9 74696D65 		.ascii	"timer_reportar\000"
 4608      725F7265 
 4608      706F7274 
 4608      617200
 4609              	.LASF32:
 4610 02c8 55534152 		.ascii	"USART2_IRQn\000"
 4610      54325F49 
 4610      52516E00 
 4611              	.LASF63:
 4612 02d4 43505549 		.ascii	"CPUID\000"
 4612      4400
 4613              	.LASF171:
 4614 02da 74745F74 		.ascii	"tt_take_photo_sample\000"
 4614      616B655F 
 4614      70686F74 
 4614      6F5F7361 
 4614      6D706C65 
 4615              	.LASF130:
 4616 02ef 67736D5F 		.ascii	"gsm_state_disconnected\000"
 4616      73746174 
 4616      655F6469 
 4616      73636F6E 
 4616      6E656374 
 4617              	.LASF169:
 4618 0306 74696D65 		.ascii	"timer_rep\000"
 4618      725F7265 
 4618      7000
 4619              	.LASF206:
 4620 0310 53797354 		.ascii	"SysTick_Config\000"
 4620      69636B5F 
 4620      436F6E66 
 4620      696700
 4621              	.LASF76:
 4622 031f 534D5052 		.ascii	"SMPR\000"
 4622      00
 4623              	.LASF90:
 4624 0324 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4624      5A45524F 
 4624      5F435552 
 4624      52454E54 
 4624      00
 4625              	.LASF180:
 4626 0335 75736172 		.ascii	"usart1_have_data\000"
 4626      74315F68 
 4626      6176655F 
 4626      64617461 
 4626      00
 4627              	.LASF82:
 4628 0346 50555044 		.ascii	"PUPDR\000"
 4628      5200
 4629              	.LASF135:
ARM GAS  /tmp/ccSzia7W.s 			page 128


 4630 034c 7469636B 		.ascii	"ticks\000"
 4630      7300
 4631              	.LASF116:
 4632 0352 64756D6D 		.ascii	"dummy1\000"
 4632      793100
 4633              	.LASF120:
 4634 0359 67736D5F 		.ascii	"gsm_state_verify_fully_func\000"
 4634      73746174 
 4634      655F7665 
 4634      72696679 
 4634      5F66756C 
 4635              	.LASF87:
 4636 0375 63686172 		.ascii	"char\000"
 4636      00
 4637              	.LASF132:
 4638 037a 67736D5F 		.ascii	"gsm_state_stop_wait\000"
 4638      73746174 
 4638      655F7374 
 4638      6F705F77 
 4638      61697400 
 4639              	.LASF160:
 4640 038e 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4640      45524154 
 4640      5552455F 
 4640      56616C75 
 4640      6500
 4641              	.LASF65:
 4642 03a0 41495243 		.ascii	"AIRCR\000"
 4642      5200
 4643              	.LASF168:
 4644 03a6 74616B65 		.ascii	"take_temp_sample\000"
 4644      5F74656D 
 4644      705F7361 
 4644      6D706C65 
 4644      00
 4645              	.LASF21:
 4646 03b7 54494D33 		.ascii	"TIM3_IRQn\000"
 4646      5F495251 
 4646      6E00
 4647              	.LASF14:
 4648 03c1 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4648      5F436861 
 4648      6E6E656C 
 4648      315F4952 
 4648      516E00
 4649              	.LASF114:
 4650 03d4 6163756D 		.ascii	"acumm_w2s_index\000"
 4650      6D5F7732 
 4650      735F696E 
 4650      64657800 
 4651              	.LASF113:
 4652 03e4 6163756D 		.ascii	"acumm_w2s\000"
 4652      6D5F7732 
 4652      7300
 4653              	.LASF137:
 4654 03ee 62797465 		.ascii	"bytes_read\000"
 4654      735F7265 
ARM GAS  /tmp/ccSzia7W.s 			page 129


 4654      616400
 4655              	.LASF100:
 4656 03f9 6D61696E 		.ascii	"main_state_t\000"
 4656      5F737461 
 4656      74655F74 
 4656      00
 4657              	.LASF24:
 4658 0406 54494D31 		.ascii	"TIM15_IRQn\000"
 4658      355F4952 
 4658      516E00
 4659              	.LASF48:
 4660 0411 75696E74 		.ascii	"uint8_t\000"
 4660      385F7400 
 4661              	.LASF96:
 4662 0419 57454C43 		.ascii	"WELCOME_GSM\000"
 4662      4F4D455F 
 4662      47534D00 
 4663              	.LASF182:
 4664 0425 75736172 		.ascii	"usart2_mini_timeout\000"
 4664      74325F6D 
 4664      696E695F 
 4664      74696D65 
 4664      6F757400 
 4665              	.LASF165:
 4666 0439 74783162 		.ascii	"tx1buff\000"
 4666      75666600 
 4667              	.LASF185:
 4668 0441 75736172 		.ascii	"usart2_pckt_bytes\000"
 4668      74325F70 
 4668      636B745F 
 4668      62797465 
 4668      7300
 4669              	.LASF172:
 4670 0453 74745F72 		.ascii	"tt_relay_on_off\000"
 4670      656C6179 
 4670      5F6F6E5F 
 4670      6F666600 
 4671              	.LASF195:
 4672 0463 73656373 		.ascii	"secs\000"
 4672      00
 4673              	.LASF97:
 4674 0468 4C414D50 		.ascii	"LAMP_ON\000"
 4674      5F4F4E00 
 4675              	.LASF121:
 4676 0470 67736D5F 		.ascii	"gsm_state_wait_reg\000"
 4676      73746174 
 4676      655F7761 
 4676      69745F72 
 4676      656700
 4677              	.LASF78:
 4678 0483 4144435F 		.ascii	"ADC_TypeDef\000"
 4678      54797065 
 4678      44656600 
 4679              	.LASF45:
 4680 048f 6C6F6E67 		.ascii	"long long int\000"
 4680      206C6F6E 
 4680      6720696E 
ARM GAS  /tmp/ccSzia7W.s 			page 130


 4680      7400
 4681              	.LASF5:
 4682 049d 57574447 		.ascii	"WWDG_IRQn\000"
 4682      5F495251 
 4682      6E00
 4683              	.LASF67:
 4684 04a7 53484353 		.ascii	"SHCSR\000"
 4684      5200
 4685              	.LASF178:
 4686 04ad 75736172 		.ascii	"usart1_mini_timeout\000"
 4686      74315F6D 
 4686      696E695F 
 4686      74696D65 
 4686      6F757400 
 4687              	.LASF94:
 4688 04c1 53544152 		.ascii	"START_GSM\000"
 4688      545F4753 
 4688      4D00
 4689              	.LASF147:
 4690 04cb 73686F77 		.ascii	"show_power\000"
 4690      5F706F77 
 4690      657200
 4691              	.LASF173:
 4692 04d6 73617665 		.ascii	"saved_mode\000"
 4692      645F6D6F 
 4692      646500
 4693              	.LASF204:
 4694 04e1 70617261 		.ascii	"parameters\000"
 4694      6D657465 
 4694      727300
 4695              	.LASF170:
 4696 04ec 74696D65 		.ascii	"timer_relay\000"
 4696      725F7265 
 4696      6C617900 
 4697              	.LASF88:
 4698 04f8 4D41494E 		.ascii	"MAIN_INIT\000"
 4698      5F494E49 
 4698      5400
 4699              	.LASF95:
 4700 0502 434F4E46 		.ascii	"CONFIG_GSM\000"
 4700      49475F47 
 4700      534D00
 4701              	.LASF142:
 4702 050d 6C617374 		.ascii	"last_power\000"
 4702      5F706F77 
 4702      657200
 4703              	.LASF188:
 4704 0518 73686F77 		.ascii	"show_power_index\000"
 4704      5F706F77 
 4704      65725F69 
 4704      6E646578 
 4704      00
 4705              	.LASF177:
 4706 0529 7A65726F 		.ascii	"zero_current\000"
 4706      5F637572 
 4706      72656E74 
 4706      00
ARM GAS  /tmp/ccSzia7W.s 			page 131


 4707              	.LASF13:
 4708 0536 54535F49 		.ascii	"TS_IRQn\000"
 4708      52516E00 
 4709              	.LASF18:
 4710 053e 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4710      5F42524B 
 4710      5F55505F 
 4710      5452475F 
 4710      434F4D5F 
 4711              	.LASF158:
 4712 0557 74656D70 		.ascii	"tempbuff\000"
 4712      62756666 
 4712      00
 4713              	.LASF205:
 4714 0560 4E564943 		.ascii	"NVIC_SetPriority\000"
 4714      5F536574 
 4714      5072696F 
 4714      72697479 
 4714      00
 4715              	.LASF6:
 4716 0571 5056445F 		.ascii	"PVD_IRQn\000"
 4716      4952516E 
 4716      00
 4717              	.LASF74:
 4718 057a 43464752 		.ascii	"CFGR1\000"
 4718      3100
 4719              	.LASF75:
 4720 0580 43464752 		.ascii	"CFGR2\000"
 4720      3200
 4721              	.LASF58:
 4722 0586 49435052 		.ascii	"ICPR\000"
 4722      00
 4723              	.LASF17:
 4724 058b 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4724      5F434F4D 
 4724      505F4952 
 4724      516E00
 4725              	.LASF98:
 4726 059a 474F5F54 		.ascii	"GO_TO_MAINS_FAILURE\000"
 4726      4F5F4D41 
 4726      494E535F 
 4726      4641494C 
 4726      55524500 
 4727              	.LASF167:
 4728 05ae 6D61696E 		.ascii	"mains_voltage_filtered\000"
 4728      735F766F 
 4728      6C746167 
 4728      655F6669 
 4728      6C746572 
 4729              	.LASF152:
 4730 05c5 636F756E 		.ascii	"counters_mode\000"
 4730      74657273 
 4730      5F6D6F64 
 4730      6500
 4731              	.LASF81:
 4732 05d3 4F535045 		.ascii	"OSPEEDR\000"
 4732      45445200 
ARM GAS  /tmp/ccSzia7W.s 			page 132


 4733              	.LASF73:
 4734 05db 53797354 		.ascii	"SysTick_Type\000"
 4734      69636B5F 
 4734      54797065 
 4734      00
 4735              	.LASF86:
 4736 05e8 6C6F6E67 		.ascii	"long double\000"
 4736      20646F75 
 4736      626C6500 
 4737              	.LASF49:
 4738 05f4 75696E74 		.ascii	"uint16_t\000"
 4738      31365F74 
 4738      00
 4739              	.LASF186:
 4740 05fd 62756666 		.ascii	"buffUARTGSMrx2\000"
 4740      55415254 
 4740      47534D72 
 4740      783200
 4741              	.LASF133:
 4742 060c 4952516E 		.ascii	"IRQn\000"
 4742      00
 4743              	.LASF189:
 4744 0611 67736D4E 		.ascii	"gsmNUM\000"
 4744      554D00
 4745              	.LASF109:
 4746 0618 6E756D5F 		.ascii	"num_reportar\000"
 4746      7265706F 
 4746      72746172 
 4746      00
 4747              	.LASF7:
 4748 0625 5254435F 		.ascii	"RTC_IRQn\000"
 4748      4952516E 
 4748      00
 4749              	.LASF53:
 4750 062e 52455345 		.ascii	"RESERVED0\000"
 4750      52564544 
 4750      3000
 4751              	.LASF66:
 4752 0638 52455345 		.ascii	"RESERVED1\000"
 4752      52564544 
 4752      3100
 4753              	.LASF57:
 4754 0642 52455345 		.ascii	"RESERVED2\000"
 4754      52564544 
 4754      3200
 4755              	.LASF59:
 4756 064c 52455345 		.ascii	"RESERVED3\000"
 4756      52564544 
 4756      3300
 4757              	.LASF60:
 4758 0656 52455345 		.ascii	"RESERVED4\000"
 4758      52564544 
 4758      3400
 4759              	.LASF38:
 4760 0660 73686F72 		.ascii	"short int\000"
 4760      7420696E 
 4760      7400
ARM GAS  /tmp/ccSzia7W.s 			page 133


 4761              	.LASF42:
 4762 066a 6C6F6E67 		.ascii	"long int\000"
 4762      20696E74 
 4762      00
 4763              	.LASF31:
 4764 0673 55534152 		.ascii	"USART1_IRQn\000"
 4764      54315F49 
 4764      52516E00 
 4765              	.LASF119:
 4766 067f 67736D5F 		.ascii	"gsm_state_verify_at\000"
 4766      73746174 
 4766      655F7665 
 4766      72696679 
 4766      5F617400 
 4767              	.LASF0:
 4768 0693 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4768      61736B61 
 4768      626C6549 
 4768      6E745F49 
 4768      52516E00 
 4769              	.LASF134:
 4770 06a7 7072696F 		.ascii	"priority\000"
 4770      72697479 
 4770      00
 4771              	.LASF19:
 4772 06b0 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4772      5F43435F 
 4772      4952516E 
 4772      00
 4773              	.LASF80:
 4774 06bd 4F545950 		.ascii	"OTYPER\000"
 4774      455200
 4775              	.LASF191:
 4776 06c4 77616974 		.ascii	"wait_ms_var\000"
 4776      5F6D735F 
 4776      76617200 
 4777              	.LASF105:
 4778 06d0 6D656173 		.ascii	"meas_reporting0\000"
 4778      5F726570 
 4778      6F727469 
 4778      6E673000 
 4779              	.LASF26:
 4780 06e0 54494D31 		.ascii	"TIM17_IRQn\000"
 4780      375F4952 
 4780      516E00
 4781              	.LASF89:
 4782 06eb 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4782      48524F5F 
 4782      41444300 
 4783              	.LASF16:
 4784 06f7 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4784      5F436861 
 4784      6E6E656C 
 4784      345F355F 
 4784      4952516E 
 4785              	.LASF190:
 4786 070c 67736D4D 		.ascii	"gsmMSG\000"
ARM GAS  /tmp/ccSzia7W.s 			page 134


 4786      534700
 4787              	.LASF196:
 4788 0713 686F7572 		.ascii	"hours\000"
 4788      7300
 4789              	.LASF35:
 4790 0719 5F5F7569 		.ascii	"__uint8_t\000"
 4790      6E74385F 
 4790      7400
 4791              	.LASF62:
 4792 0723 4E564943 		.ascii	"NVIC_Type\000"
 4792      5F547970 
 4792      6500
 4793              	.LASF69:
 4794 072d 5343425F 		.ascii	"SCB_Type\000"
 4794      54797065 
 4794      00
 4795              	.LASF85:
 4796 0736 4750494F 		.ascii	"GPIO_TypeDef\000"
 4796      5F547970 
 4796      65446566 
 4796      00
 4797              	.LASF103:
 4798 0743 6D656173 		.ascii	"meas_init\000"
 4798      5F696E69 
 4798      7400
 4799              	.LASF150:
 4800 074d 73656E64 		.ascii	"sended\000"
 4800      656400
 4801              	.LASF4:
 4802 0754 53797354 		.ascii	"SysTick_IRQn\000"
 4802      69636B5F 
 4802      4952516E 
 4802      00
 4803              	.LASF33:
 4804 0761 4345435F 		.ascii	"CEC_IRQn\000"
 4804      4952516E 
 4804      00
 4805              	.LASF61:
 4806 076a 73697A65 		.ascii	"sizetype\000"
 4806      74797065 
 4806      00
 4807              	.LASF64:
 4808 0773 49435352 		.ascii	"ICSR\000"
 4808      00
 4809              	.LASF28:
 4810 0778 49324332 		.ascii	"I2C2_IRQn\000"
 4810      5F495251 
 4810      6E00
 4811              	.LASF44:
 4812 0782 6C6F6E67 		.ascii	"long unsigned int\000"
 4812      20756E73 
 4812      69676E65 
 4812      6420696E 
 4812      7400
 4813              	.LASF20:
 4814 0794 54494D32 		.ascii	"TIM2_IRQn\000"
 4814      5F495251 
ARM GAS  /tmp/ccSzia7W.s 			page 135


 4814      6E00
 4815              	.LASF161:
 4816 079e 50524553 		.ascii	"PRESSURE_Value\000"
 4816      53555245 
 4816      5F56616C 
 4816      756500
 4817              	.LASF203:
 4818 07ad 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4818      652F6D65 
 4818      642F446F 
 4818      63756D65 
 4818      6E74732F 
 4819 07e0 6100     		.ascii	"a\000"
 4820              	.LASF159:
 4821 07e2 48554D49 		.ascii	"HUMIDITY_Value\000"
 4821      44495459 
 4821      5F56616C 
 4821      756500
 4822              	.LASF50:
 4823 07f1 696E7433 		.ascii	"int32_t\000"
 4823      325F7400 
 4824              	.LASF198:
 4825 07f9 706F7765 		.ascii	"power_vect\000"
 4825      725F7665 
 4825      637400
 4826              	.LASF175:
 4827 0804 6164635F 		.ascii	"adc_ch\000"
 4827      636800
 4828              	.LASF23:
 4829 080b 54494D31 		.ascii	"TIM14_IRQn\000"
 4829      345F4952 
 4829      516E00
 4830              	.LASF15:
 4831 0816 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4831      5F436861 
 4831      6E6E656C 
 4831      325F335F 
 4831      4952516E 
 4832              	.LASF151:
 4833 082b 6C616D70 		.ascii	"lamp_on_state\000"
 4833      5F6F6E5F 
 4833      73746174 
 4833      6500
 4834              	.LASF22:
 4835 0839 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4835      5F444143 
 4835      5F495251 
 4835      6E00
 4836              	.LASF37:
 4837 0847 756E7369 		.ascii	"unsigned char\000"
 4837      676E6564 
 4837      20636861 
 4837      7200
 4838              	.LASF93:
 4839 0855 4C414D50 		.ascii	"LAMP_OFF\000"
 4839      5F4F4646 
 4839      00
ARM GAS  /tmp/ccSzia7W.s 			page 136


 4840              	.LASF43:
 4841 085e 5F5F7569 		.ascii	"__uint32_t\000"
 4841      6E743332 
 4841      5F7400
 4842              	.LASF174:
 4843 0869 73656E64 		.ascii	"send_energy\000"
 4843      5F656E65 
 4843      72677900 
 4844              	.LASF108:
 4845 0875 6C616D70 		.ascii	"lamp_on_state_t\000"
 4845      5F6F6E5F 
 4845      73746174 
 4845      655F7400 
 4846              	.LASF140:
 4847 0885 6E656564 		.ascii	"need_to_save\000"
 4847      5F746F5F 
 4847      73617665 
 4847      00
 4848              	.LASF129:
 4849 0892 67736D5F 		.ascii	"gsm_state_connected\000"
 4849      73746174 
 4849      655F636F 
 4849      6E6E6563 
 4849      74656400 
 4850              	.LASF138:
 4851 08a6 6E656564 		.ascii	"need_ack\000"
 4851      5F61636B 
 4851      00
 4852              	.LASF122:
 4853 08af 67736D5F 		.ascii	"gsm_state_verify_reg\000"
 4853      73746174 
 4853      655F7665 
 4853      72696679 
 4853      5F726567 
 4854              	.LASF128:
 4855 08c4 67736D5F 		.ascii	"gsm_state_connecting\000"
 4855      73746174 
 4855      655F636F 
 4855      6E6E6563 
 4855      74696E67 
 4856              	.LASF183:
 4857 08d9 75736172 		.ascii	"usart2_pckt_ready\000"
 4857      74325F70 
 4857      636B745F 
 4857      72656164 
 4857      7900
 4858              	.LASF210:
 4859 08eb 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4859      6E674465 
 4859      6C61795F 
 4859      44656372 
 4859      656D656E 
 4860              	.LASF54:
 4861 0901 49434552 		.ascii	"ICER\000"
 4861      00
 4862              	.LASF155:
 4863 0906 6F6E655F 		.ascii	"one_to_ten\000"
ARM GAS  /tmp/ccSzia7W.s 			page 137


 4863      746F5F74 
 4863      656E00
 4864              	.LASF30:
 4865 0911 53504932 		.ascii	"SPI2_IRQn\000"
 4865      5F495251 
 4865      6E00
 4866              	.LASF125:
 4867 091b 67736D5F 		.ascii	"gsm_state_sending_sms\000"
 4867      73746174 
 4867      655F7365 
 4867      6E64696E 
 4867      675F736D 
 4868              	.LASF209:
 4869 0931 70726570 		.ascii	"prepare_json_pkt\000"
 4869      6172655F 
 4869      6A736F6E 
 4869      5F706B74 
 4869      00
 4870              	.LASF141:
 4871 0942 706F7765 		.ascii	"power\000"
 4871      7200
 4872              	.LASF126:
 4873 0948 67736D5F 		.ascii	"gsm_state_command_answer\000"
 4873      73746174 
 4873      655F636F 
 4873      6D6D616E 
 4873      645F616E 
 4874              	.LASF117:
 4875 0961 70617261 		.ascii	"parameters_typedef\000"
 4875      6D657465 
 4875      72735F74 
 4875      79706564 
 4875      656600
 4876              	.LASF36:
 4877 0974 7369676E 		.ascii	"signed char\000"
 4877      65642063 
 4877      68617200 
 4878              	.LASF202:
 4879 0980 7372632F 		.ascii	"src/main.c\000"
 4879      6D61696E 
 4879      2E6300
 4880              	.LASF40:
 4881 098b 73686F72 		.ascii	"short unsigned int\000"
 4881      7420756E 
 4881      7369676E 
 4881      65642069 
 4881      6E7400
 4882              	.LASF201:
 4883 099e 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4883      43313120 
 4883      352E322E 
 4883      31203230 
 4883      31353132 
 4884 09d1 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4884      20726576 
 4884      6973696F 
 4884      6E203233 
ARM GAS  /tmp/ccSzia7W.s 			page 138


 4884      31383438 
 4885 0a04 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4885      662D3220 
 4885      2D4F3020 
 4885      2D666F6D 
 4885      69742D66 
 4886 0a37 66756E63 		.ascii	"function-sections\000"
 4886      74696F6E 
 4886      2D736563 
 4886      74696F6E 
 4886      7300
 4887              	.LASF207:
 4888 0a49 6D61696E 		.ascii	"main\000"
 4888      00
 4889              	.LASF1:
 4890 0a4e 48617264 		.ascii	"HardFault_IRQn\000"
 4890      4661756C 
 4890      745F4952 
 4890      516E00
 4891              	.LASF145:
 4892 0a5d 6163756D 		.ascii	"acum_secs\000"
 4892      5F736563 
 4892      7300
 4893              	.LASF56:
 4894 0a67 49535052 		.ascii	"ISPR\000"
 4894      00
 4895              	.LASF139:
 4896 0a6c 72657370 		.ascii	"resp\000"
 4896      00
 4897              	.LASF111:
 4898 0a71 6E756D5F 		.ascii	"num_propio\000"
 4898      70726F70 
 4898      696F00
 4899              	.LASF176:
 4900 0a7c 7365715F 		.ascii	"seq_ready\000"
 4900      72656164 
 4900      7900
 4901              	.LASF199:
 4902 0a86 7674656D 		.ascii	"vtemp\000"
 4902      7000
 4903              	.LASF104:
 4904 0a8c 6D656173 		.ascii	"meas_meas\000"
 4904      5F6D6561 
 4904      7300
 4905              	.LASF192:
 4906 0a96 74696D65 		.ascii	"timer_standby\000"
 4906      725F7374 
 4906      616E6462 
 4906      7900
 4907              	.LASF136:
 4908 0aa4 62797465 		.ascii	"bytes_remain\000"
 4908      735F7265 
 4908      6D61696E 
 4908      00
 4909              	.LASF84:
 4910 0ab1 4C434B52 		.ascii	"LCKR\000"
 4910      00
ARM GAS  /tmp/ccSzia7W.s 			page 139


 4911              	.LASF70:
 4912 0ab6 4354524C 		.ascii	"CTRL\000"
 4912      00
 4913              	.LASF149:
 4914 0abb 7265706F 		.ascii	"reportar_SMS\000"
 4914      72746172 
 4914      5F534D53 
 4914      00
 4915              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccSzia7W.s 			page 140


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccSzia7W.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccSzia7W.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccSzia7W.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccSzia7W.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccSzia7W.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccSzia7W.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
                            *COM*:00000002 mains_voltage_filtered
     /tmp/ccSzia7W.s:278    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccSzia7W.s:275    .bss.take_temp_sample:00000000 $d
     /tmp/ccSzia7W.s:285    .bss.timer_rep:00000000 timer_rep
     /tmp/ccSzia7W.s:282    .bss.timer_rep:00000000 $d
     /tmp/ccSzia7W.s:292    .bss.timer_relay:00000000 timer_relay
     /tmp/ccSzia7W.s:289    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
     /tmp/ccSzia7W.s:301    .bss.send_energy:00000000 send_energy
     /tmp/ccSzia7W.s:302    .bss.send_energy:00000000 $d
                            *COM*:00000006 adc_ch
     /tmp/ccSzia7W.s:308    .bss.seq_ready:00000000 seq_ready
     /tmp/ccSzia7W.s:309    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:00000054 param_struct
     /tmp/ccSzia7W.s:325    .bss.show_power_index:00000000 show_power_index
     /tmp/ccSzia7W.s:322    .bss.show_power_index:00000000 $d
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/ccSzia7W.s:334    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccSzia7W.s:331    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 timer_meas
     /tmp/ccSzia7W.s:344    .bss.secs:00000000 secs
     /tmp/ccSzia7W.s:341    .bss.secs:00000000 $d
     /tmp/ccSzia7W.s:350    .bss.hours:00000000 hours
     /tmp/ccSzia7W.s:351    .bss.hours:00000000 $d
     /tmp/ccSzia7W.s:356    .bss.minutes:00000000 minutes
     /tmp/ccSzia7W.s:357    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccSzia7W.s:362    .rodata:00000000 $d
     /tmp/ccSzia7W.s:427    .text.main:00000000 $t
ARM GAS  /tmp/ccSzia7W.s 			page 141


     /tmp/ccSzia7W.s:432    .text.main:00000000 main
     /tmp/ccSzia7W.s:741    .rodata.main:00000000 $d
     /tmp/ccSzia7W.s:1031   .text.main:000003a4 $d
     /tmp/ccSzia7W.s:1059   .text.main:0000040c $t
     /tmp/ccSzia7W.s:1617   .text.main:00000774 $d
     /tmp/ccSzia7W.s:1639   .text.main:000007c4 $t
     /tmp/ccSzia7W.s:1744   .text.main:00000868 $d
     /tmp/ccSzia7W.s:1770   .text.prepare_json_pkt:00000000 $t
     /tmp/ccSzia7W.s:1775   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccSzia7W.s:1867   .text.prepare_json_pkt:0000009c $d
     /tmp/ccSzia7W.s:1876   .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccSzia7W.s:1881   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccSzia7W.s:2019   .text.TimingDelay_Decrement:000000cc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
GPIO_Config
GetFlashConf
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
FuncsGSMStateAsk
FuncsGSMCommandAnswer
strlen
strncpy
strcat
memcpy
FuncsGSMSendSMS
GetPhoto
RelayOn
GetHysteresis
RelayOff
GetNew1to10
ShowPower
GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
FuncsGSMShutdown
UpdateVGrid
UpdateIGrid
Mains_Glitch
RelayOffFast
WriteConfigurations
UpdateRelay
UpdatePhotoTransistor
FuncsGSM
ARM GAS  /tmp/ccSzia7W.s 			page 142


sprintf
GSMTimeoutCounters
