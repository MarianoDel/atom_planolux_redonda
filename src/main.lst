ARM GAS  /tmp/cc5pUpZ5.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/cc5pUpZ5.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/cc5pUpZ5.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/cc5pUpZ5.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/cc5pUpZ5.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/cc5pUpZ5.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/cc5pUpZ5.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc5pUpZ5.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc5pUpZ5.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/cc5pUpZ5.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc5pUpZ5.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/cc5pUpZ5.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc5pUpZ5.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/cc5pUpZ5.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/cc5pUpZ5.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/cc5pUpZ5.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/cc5pUpZ5.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/cc5pUpZ5.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7163,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7164, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7165, D.7164
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7165, D.7165
  92 0026 083B     		subs	r3, r3, #8	@ D.7165,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7165, D.7165,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7163,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7164, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7165, D.7164
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7165, D.7165
 101 0038 083B     		subs	r3, r3, #8	@ D.7165,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7165, D.7165,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7163, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7165, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7164, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7165, D.7164
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7165, D.7165
 114 0052 D200     		lsls	r2, r2, #3	@ D.7165, D.7165,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7166, D.7166, D.7165
 117 0058 0200     		movs	r2, r0	@ D.7166, D.7166
 118 005a D243     		mvns	r2, r2	@ D.7166, D.7166
 119 005c 1A40     		ands	r2, r3	@ D.7165, D.7165
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7165, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7165, D.7165
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7164, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7165, D.7164
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7165, D.7165
ARM GAS  /tmp/cc5pUpZ5.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7165, D.7165,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7165, D.7165, D.7165
 133 0076 0300     		movs	r3, r0	@ D.7165, D.7165
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7165, D.7165
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7165,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7163, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7165, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7167,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7165, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7165, D.7165
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7165, D.7165,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7167,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7165, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7165, D.7165
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7165, D.7165,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7165, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7164, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7165, D.7164
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7165, D.7165
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7165, D.7165,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7166, D.7166, D.7165
 169 00b6 0100     		movs	r1, r0	@ D.7166, D.7166
 170 00b8 C943     		mvns	r1, r1	@ D.7166, D.7166
 171 00ba 1140     		ands	r1, r2	@ D.7165, D.7165
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7165, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7165, D.7165
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7164, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7165, D.7164
ARM GAS  /tmp/cc5pUpZ5.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7165, D.7165
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7165, D.7165,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7165, D.7165, D.7165
 185 00d4 0200     		movs	r2, r0	@ D.7165, D.7165
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7165, D.7165
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7165, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/cc5pUpZ5.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7168,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7169,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7170, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7170,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7170, _6->LOAD
ARM GAS  /tmp/cc5pUpZ5.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7169,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7169,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7168,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	show_select_timer
 273              		.section	.bss.show_select_timer,"aw",%nobits
 274              		.align	1
 275              		.type	show_select_timer, %object
 276              		.size	show_select_timer, 2
 277              	show_select_timer:
 278 0000 0000     		.space	2
 279              		.global	switches_timer
 280              		.section	.bss.switches_timer,"aw",%nobits
 281              		.type	switches_timer, %object
 282              		.size	switches_timer, 1
 283              	switches_timer:
 284 0000 00       		.space	1
 285              		.global	acswitch_timer
 286              		.section	.bss.acswitch_timer,"aw",%nobits
 287              		.type	acswitch_timer, %object
ARM GAS  /tmp/cc5pUpZ5.s 			page 23


 288              		.size	acswitch_timer, 1
 289              	acswitch_timer:
 290 0000 00       		.space	1
 291              		.global	scroll1_timer
 292              		.section	.bss.scroll1_timer,"aw",%nobits
 293              		.align	1
 294              		.type	scroll1_timer, %object
 295              		.size	scroll1_timer, 2
 296              	scroll1_timer:
 297 0000 0000     		.space	2
 298              		.global	scroll2_timer
 299              		.section	.bss.scroll2_timer,"aw",%nobits
 300              		.align	1
 301              		.type	scroll2_timer, %object
 302              		.size	scroll2_timer, 2
 303              	scroll2_timer:
 304 0000 0000     		.space	2
 305              		.comm	standalone_timer,2,2
 306              		.comm	standalone_enable_menu_timer,2,2
 307              		.comm	grouped_master_timeout_timer,1,1
 308              		.global	take_temp_sample
 309              		.section	.bss.take_temp_sample,"aw",%nobits
 310              		.align	1
 311              		.type	take_temp_sample, %object
 312              		.size	take_temp_sample, 2
 313              	take_temp_sample:
 314 0000 0000     		.space	2
 315              		.global	timer_wifi_bright
 316              		.section	.bss.timer_wifi_bright,"aw",%nobits
 317              		.type	timer_wifi_bright, %object
 318              		.size	timer_wifi_bright, 1
 319              	timer_wifi_bright:
 320 0000 00       		.space	1
 321              		.global	timer_relay
 322              		.section	.bss.timer_relay,"aw",%nobits
 323              		.align	1
 324              		.type	timer_relay, %object
 325              		.size	timer_relay, 2
 326              	timer_relay:
 327 0000 0000     		.space	2
 328              		.comm	tt_take_photo_sample,2,2
 329              		.comm	tt_relay_on_off,2,2
 330              		.comm	saved_mode,1,1
 331              		.comm	s1,2,2
 332              		.comm	s2,2,2
 333              		.comm	sac,2,2
 334              		.comm	sac_aux,1,1
 335              		.comm	adc_ch,6,4
 336              		.global	seq_ready
 337              		.section	.bss.seq_ready,"aw",%nobits
 338              		.type	seq_ready, %object
 339              		.size	seq_ready, 1
 340              	seq_ready:
 341 0000 00       		.space	1
 342              		.comm	zero_current,2,2
 343              		.comm	usart1_mini_timeout,1,1
 344              		.comm	usart1_pckt_ready,1,1
ARM GAS  /tmp/cc5pUpZ5.s 			page 24


 345              		.comm	usart1_have_data,1,1
 346              		.comm	usart1_pckt_bytes,1,1
 347              		.comm	usart2_mini_timeout,1,1
 348              		.comm	usart2_pckt_ready,1,1
 349              		.comm	usart2_have_data,1,1
 350              		.comm	usart2_pckt_bytes,1,1
 351              		.comm	param_struct,12,4
 352              		.global	power_2secs_acum
 353              		.section	.bss.power_2secs_acum,"aw",%nobits
 354              		.align	2
 355              		.type	power_2secs_acum, %object
 356              		.size	power_2secs_acum, 4
 357              	power_2secs_acum:
 358 0000 00000000 		.space	4
 359              		.global	power_2secs_index
 360              		.section	.bss.power_2secs_index,"aw",%nobits
 361              		.type	power_2secs_index, %object
 362              		.size	power_2secs_index, 1
 363              	power_2secs_index:
 364 0000 00       		.space	1
 365              		.global	power_minutes
 366              		.section	.bss.power_minutes,"aw",%nobits
 367              		.align	1
 368              		.type	power_minutes, %object
 369              		.size	power_minutes, 2
 370              	power_minutes:
 371 0000 0000     		.space	2
 372              		.global	power_minutes_index
 373              		.section	.bss.power_minutes_index,"aw",%nobits
 374              		.type	power_minutes_index, %object
 375              		.size	power_minutes_index, 1
 376              	power_minutes_index:
 377 0000 00       		.space	1
 378              		.global	power_hours
 379              		.section	.bss.power_hours,"aw",%nobits
 380              		.align	1
 381              		.type	power_hours, %object
 382              		.size	power_hours, 2
 383              	power_hours:
 384 0000 0000     		.space	2
 385              		.comm	gsmNUM,20,4
 386              		.comm	gsmMSG,180,4
 387              		.global	wait_ms_var
 388              		.section	.bss.wait_ms_var,"aw",%nobits
 389              		.align	1
 390              		.type	wait_ms_var, %object
 391              		.size	wait_ms_var, 2
 392              	wait_ms_var:
 393 0000 0000     		.space	2
 394              		.comm	timer_standby,2,2
 395              		.comm	tcp_kalive_timer,2,2
 396              		.comm	filter_timer,1,1
 397              		.global	secs
 398              		.section	.bss.secs,"aw",%nobits
 399              		.align	1
 400              		.type	secs, %object
 401              		.size	secs, 2
ARM GAS  /tmp/cc5pUpZ5.s 			page 25


 402              	secs:
 403 0000 0000     		.space	2
 404              		.global	hours
 405              		.section	.bss.hours,"aw",%nobits
 406              		.type	hours, %object
 407              		.size	hours, 1
 408              	hours:
 409 0000 00       		.space	1
 410              		.global	minutes
 411              		.section	.bss.minutes,"aw",%nobits
 412              		.type	minutes, %object
 413              		.size	minutes, 1
 414              	minutes:
 415 0000 00       		.space	1
 416              		.comm	power_vect,20,4
 417              		.comm	vtemp,34,4
 418              		.comm	vpote,34,4
 419              		.section	.rodata
 420              		.align	2
 421              	.LC0:
 422 0000 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 422      726E6F20 
 422      506C6163 
 422      61205265 
 422      646F6E64 
 423 0025 000000   		.align	2
 424              	.LC2:
 425 0028 20204665 		.ascii	"  Features:\015\012\000"
 425      61747572 
 425      65733A0D 
 425      0A00
 426 0036 0000     		.align	2
 427              	.LC4:
 428 0038 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 428      6D6D6572 
 428      20312074 
 428      6F203130 
 428      560D0A00 
 429              		.align	2
 430              	.LC6:
 431 004c 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 431      67687420 
 431      48797374 
 431      65726573 
 431      69730D0A 
 432 0061 000000   		.align	2
 433              	.LC8:
 434 0064 20205379 		.ascii	"  Sync by ADC\015\012\000"
 434      6E632062 
 434      79204144 
 434      430D0A00 
 435              		.align	2
 436              	.LC10:
 437 0074 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 437      65732047 
 437      534D2066 
 437      6F722053 
ARM GAS  /tmp/cc5pUpZ5.s 			page 26


 437      4D532064 
 438 008e 0000     		.align	2
 439              	.LC15:
 440 0090 47657474 		.ascii	"Getted\015\012\000"
 440      65640D0A 
 440      00
 441 0099 000000   		.align	2
 442              	.LC17:
 443 009c 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 443      696E6720 
 443      47534D20 
 443      53746172 
 443      74757020 
 444              		.global	__aeabi_ui2f
 445              		.global	__aeabi_i2d
 446              		.global	__aeabi_dmul
 447              		.global	__aeabi_d2f
 448              		.global	__aeabi_f2uiz
 449              		.global	__aeabi_i2f
 450              		.global	__aeabi_fsub
 451              		.global	__aeabi_fmul
 452 00c3 00       		.align	2
 453              	.LC24:
 454 00c4 703A2025 		.ascii	"p: %3d.%02d d: %d\015\012\000"
 454      33642E25 
 454      30326420 
 454      643A2025 
 454      640D0A00 
 455              		.align	2
 456              	.LC29:
 457 00d8 4C6C616D 		.ascii	"Llamadas Listas!\015\012\000"
 457      61646173 
 457      204C6973 
 457      74617321 
 457      0D0A00
 458 00eb 00       		.align	2
 459              	.LC31:
 460 00ec 534D5320 		.ascii	"SMS Listo!\015\012\000"
 460      4C697374 
 460      6F210D0A 
 460      00
 461 00f9 000000   		.align	2
 462              	.LC33:
 463 00fc 50777220 		.ascii	"Pwr down!\015\012\000"
 463      646F776E 
 463      210D0A00 
 464              		.section	.text.main,"ax",%progbits
 465              		.align	2
 466              		.global	main
 467              		.code	16
 468              		.thumb_func
 469              		.type	main, %function
 470              	main:
 471              	.LFB20:
 472              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
ARM GAS  /tmp/cc5pUpZ5.s 			page 27


   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
ARM GAS  /tmp/cc5pUpZ5.s 			page 28


  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** //volatile unsigned short prog_timer = 0;
  72:src/main.c    **** //volatile unsigned short mainmenu_timer = 0;
  73:src/main.c    **** volatile unsigned short show_select_timer = 0;
  74:src/main.c    **** volatile unsigned char switches_timer = 0;
  75:src/main.c    **** volatile unsigned char acswitch_timer = 0;
  76:src/main.c    **** 
  77:src/main.c    **** volatile unsigned short scroll1_timer = 0;
  78:src/main.c    **** volatile unsigned short scroll2_timer = 0;
  79:src/main.c    **** 
  80:src/main.c    **** volatile unsigned short standalone_timer;
  81:src/main.c    **** volatile unsigned short standalone_enable_menu_timer;
  82:src/main.c    **** //volatile unsigned short standalone_menu_timer;
  83:src/main.c    **** volatile unsigned char grouped_master_timeout_timer;
  84:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  85:src/main.c    **** volatile unsigned char timer_wifi_bright = 0;
  86:src/main.c    **** 
  87:src/main.c    **** #ifdef USE_REDONDA_BASIC
  88:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  89:src/main.c    **** 
  90:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  91:src/main.c    **** volatile unsigned short tt_relay_on_off;
  92:src/main.c    **** #endif
  93:src/main.c    **** 
  94:src/main.c    **** 
  95:src/main.c    **** unsigned char saved_mode;
  96:src/main.c    **** 
  97:src/main.c    **** 
  98:src/main.c    **** // ------- Externals de los switches -------
  99:src/main.c    **** unsigned short s1;
 100:src/main.c    **** unsigned short s2;
 101:src/main.c    **** unsigned short sac;
 102:src/main.c    **** unsigned char sac_aux;
 103:src/main.c    **** 
 104:src/main.c    **** // ------- Externals de los switches -------
 105:src/main.c    **** #ifdef ADC_WITH_INT
 106:src/main.c    **** volatile unsigned short adc_ch[3];
 107:src/main.c    **** volatile unsigned char seq_ready = 0;
 108:src/main.c    **** unsigned short zero_current;
 109:src/main.c    **** #endif
 110:src/main.c    **** 
 111:src/main.c    **** // ------- Externals del GPS & GSM -------
 112:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 113:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 114:src/main.c    **** volatile unsigned char usart1_have_data;
 115:src/main.c    **** unsigned char usart1_pckt_bytes;
 116:src/main.c    **** 
ARM GAS  /tmp/cc5pUpZ5.s 			page 29


 117:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 118:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 119:src/main.c    **** #define gps_have_data		usart1_have_data
 120:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 121:src/main.c    **** 
 122:src/main.c    **** #ifdef USE_GPS
 123:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 124:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 125:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 126:src/main.c    **** volatile unsigned char usart2_have_data;
 127:src/main.c    **** unsigned char usart2_pckt_bytes;
 128:src/main.c    **** 
 129:src/main.c    **** #endif
 130:src/main.c    **** 
 131:src/main.c    **** // ------- Externals del GSM -------
 132:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 133:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 134:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 135:src/main.c    **** #define gsm_have_data		usart1_have_data
 136:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 137:src/main.c    **** 
 138:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 139:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 140:src/main.c    **** volatile unsigned char usart2_have_data;
 141:src/main.c    **** unsigned char usart2_pckt_bytes;
 142:src/main.c    **** 
 143:src/main.c    **** //unsigned char AlertasReportar[5] = {0,0,0,0,0};
 144:src/main.c    **** //unsigned char ActDact = 0;
 145:src/main.c    **** //unsigned char claveAct[5] = {0,0,0,0,0};
 146:src/main.c    **** //volatile char USERCODE[8] = "123456";
 147:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 148:src/main.c    **** #endif
 149:src/main.c    **** 
 150:src/main.c    **** //--- VARIABLES GLOBALES ---//
 151:src/main.c    **** parameters_typedef param_struct;
 152:src/main.c    **** 
 153:src/main.c    **** //para las mediciones
 154:src/main.c    **** unsigned int power_2secs_acum = 0;
 155:src/main.c    **** unsigned char power_2secs_index = 0;
 156:src/main.c    **** unsigned short power_minutes = 0;
 157:src/main.c    **** unsigned char power_minutes_index = 0;
 158:src/main.c    **** unsigned short power_hours = 0;
 159:src/main.c    **** 
 160:src/main.c    **** //para los msjs GSM
 161:src/main.c    **** char gsmNUM [20];
 162:src/main.c    **** char gsmMSG [180];
 163:src/main.c    **** 
 164:src/main.c    **** 
 165:src/main.c    **** 
 166:src/main.c    **** 
 167:src/main.c    **** 
 168:src/main.c    **** 
 169:src/main.c    **** // ------- de los timers -------
 170:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 171:src/main.c    **** volatile unsigned short timer_standby;
 172:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 173:src/main.c    **** //volatile unsigned char display_timer;
ARM GAS  /tmp/cc5pUpZ5.s 			page 30


 174:src/main.c    **** volatile unsigned char filter_timer;
 175:src/main.c    **** 
 176:src/main.c    **** //volatile unsigned char door_filter;
 177:src/main.c    **** //volatile unsigned char take_sample;
 178:src/main.c    **** //volatile unsigned char move_relay;
 179:src/main.c    **** volatile unsigned short secs = 0;
 180:src/main.c    **** volatile unsigned char hours = 0;
 181:src/main.c    **** volatile unsigned char minutes = 0;
 182:src/main.c    **** 
 183:src/main.c    **** #define SIZEOF_POWER_VECT		10
 184:src/main.c    **** 
 185:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 186:src/main.c    **** 
 187:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 188:src/main.c    **** void TimingDelay_Decrement(void);
 189:src/main.c    **** 
 190:src/main.c    **** // ------- del DMX -------
 191:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 192:src/main.c    **** #define DMX_TIMEOUT	20
 193:src/main.c    **** 
 194:src/main.c    **** //--- FILTROS DE SENSORES ---//
 195:src/main.c    **** #define LARGO_FILTRO 16
 196:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 197:src/main.c    **** //#define LARGO_FILTRO 32
 198:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 199:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 200:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 201:src/main.c    **** 
 202:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 203:src/main.c    **** 
 204:src/main.c    **** // #define KW			0.009721
 205:src/main.c    **** // #define KW			0.00945
 206:src/main.c    **** // #define KW			0.00959
 207:src/main.c    **** #define KW			0.01013
 208:src/main.c    **** 
 209:src/main.c    **** 
 210:src/main.c    **** //-------------------------------------------//
 211:src/main.c    **** // @brief  Main program.
 212:src/main.c    **** // @param  None
 213:src/main.c    **** // @retval None
 214:src/main.c    **** //------------------------------------------//
 215:src/main.c    **** int main(void)
 216:src/main.c    **** {
 473              		.loc 2 216 0
 474              		.cfi_startproc
 475 0000 30B5     		push	{r4, r5, lr}	@
 476              	.LCFI4:
 477              		.cfi_def_cfa_offset 12
 478              		.cfi_offset 4, -12
 479              		.cfi_offset 5, -8
 480              		.cfi_offset 14, -4
 481 0002 91B0     		sub	sp, sp, #68	@,,
 482              	.LCFI5:
 483              		.cfi_def_cfa_offset 80
 217:src/main.c    **** 	unsigned char i, ii;
 218:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 484              		.loc 2 218 0
ARM GAS  /tmp/cc5pUpZ5.s 			page 31


 485 0004 3523     		movs	r3, #53	@ tmp183,
 486 0006 6B44     		add	r3, r3, sp	@ tmp183,
 487 0008 0022     		movs	r2, #0	@ tmp184,
 488 000a 1A70     		strb	r2, [r3]	@ tmp185, need_ack
 219:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 489              		.loc 2 219 0
 490 000c 0DAB     		add	r3, sp, #52	@ tmp186,,
 491 000e 0022     		movs	r2, #0	@ tmp187,
 492 0010 1A70     		strb	r2, [r3]	@ tmp188, resp
 220:src/main.c    **** 	unsigned short power_int, power_dec;
 221:src/main.c    **** 	unsigned short power;
 222:src/main.c    **** 	float fcalc = 1.0;
 493              		.loc 2 222 0
 494 0012 FE23     		movs	r3, #254	@ tmp189,
 495 0014 9B05     		lsls	r3, r3, #22	@ tmp189, tmp189,
 496 0016 0C93     		str	r3, [sp, #48]	@ tmp189, fcalc
 223:src/main.c    **** 	unsigned int zero_current_loc = 0;
 497              		.loc 2 223 0
 498 0018 0023     		movs	r3, #0	@ tmp190,
 499 001a 0E93     		str	r3, [sp, #56]	@ tmp190, zero_current_loc
 224:src/main.c    **** 
 225:src/main.c    **** #ifdef USE_REDONDA_BASIC
 226:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 500              		.loc 2 226 0
 501 001c 3723     		movs	r3, #55	@ tmp191,
 502 001e 6B44     		add	r3, r3, sp	@ tmp191,
 503 0020 0022     		movs	r2, #0	@ tmp192,
 504 0022 1A70     		strb	r2, [r3]	@ tmp193, main_state
 227:src/main.c    **** 	unsigned char sended = 0;
 505              		.loc 2 227 0
 506 0024 3623     		movs	r3, #54	@ tmp194,
 507 0026 6B44     		add	r3, r3, sp	@ tmp194,
 508 0028 0022     		movs	r2, #0	@ tmp195,
 509 002a 1A70     		strb	r2, [r3]	@ tmp196, sended
 228:src/main.c    **** #ifdef WITH_HYST
 229:src/main.c    **** 	unsigned short hyst;
 230:src/main.c    **** #endif
 231:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 232:src/main.c    **** 	unsigned char one_to_ten;
 233:src/main.c    **** #endif
 234:src/main.c    **** 
 235:src/main.c    **** #else		//USE_REDONDA_BASIC
 236:src/main.c    **** 	unsigned char main_state = 0;
 237:src/main.c    **** #endif
 238:src/main.c    **** 	char s_lcd [20];
 239:src/main.c    **** 	enum TcpMessages tcp_msg = NONE_MSG;
 510              		.loc 2 239 0
 511 002c 2F23     		movs	r3, #47	@ tmp197,
 512 002e 6B44     		add	r3, r3, sp	@ tmp197,
 513 0030 0022     		movs	r2, #0	@ tmp198,
 514 0032 1A70     		strb	r2, [r3]	@ tmp199, tcp_msg
 240:src/main.c    **** 	unsigned char new_room = 0;
 515              		.loc 2 240 0
 516 0034 2E23     		movs	r3, #46	@ tmp200,
 517 0036 6B44     		add	r3, r3, sp	@ tmp200,
 518 0038 0022     		movs	r2, #0	@ tmp201,
 519 003a 1A70     		strb	r2, [r3]	@ tmp202, new_room
ARM GAS  /tmp/cc5pUpZ5.s 			page 32


 241:src/main.c    **** 	unsigned char new_lamp = 0;
 520              		.loc 2 241 0
 521 003c 2D23     		movs	r3, #45	@ tmp203,
 522 003e 6B44     		add	r3, r3, sp	@ tmp203,
 523 0040 0022     		movs	r2, #0	@ tmp204,
 524 0042 1A70     		strb	r2, [r3]	@ tmp205, new_lamp
 242:src/main.c    **** 	unsigned char last_bright = 0;
 525              		.loc 2 242 0
 526 0044 0BAB     		add	r3, sp, #44	@ tmp206,,
 527 0046 0022     		movs	r2, #0	@ tmp207,
 528 0048 1A70     		strb	r2, [r3]	@ tmp208, last_bright
 243:src/main.c    **** 	unsigned char show_ldr = 0;
 529              		.loc 2 243 0
 530 004a 2B23     		movs	r3, #43	@ tmp209,
 531 004c 6B44     		add	r3, r3, sp	@ tmp209,
 532 004e 0022     		movs	r2, #0	@ tmp210,
 533 0050 1A70     		strb	r2, [r3]	@ tmp211, show_ldr
 244:src/main.c    **** 	int dummy_resp = 0;
 534              		.loc 2 244 0
 535 0052 0023     		movs	r3, #0	@ tmp212,
 536 0054 0993     		str	r3, [sp, #36]	@ tmp212, dummy_resp
 245:src/main.c    **** 	unsigned char pps_one = 0;
 537              		.loc 2 245 0
 538 0056 2323     		movs	r3, #35	@ tmp213,
 539 0058 6B44     		add	r3, r3, sp	@ tmp213,
 540 005a 0022     		movs	r2, #0	@ tmp214,
 541 005c 1A70     		strb	r2, [r3]	@ tmp215, pps_one
 246:src/main.c    **** 
 247:src/main.c    **** #ifdef USE_PROD_PROGRAM
 248:src/main.c    **** 	unsigned char jump_the_menu = 0;
 249:src/main.c    **** #endif
 250:src/main.c    **** 	parameters_typedef * p_mem_init;
 251:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 252:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 253:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 254:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 255:src/main.c    ****     //   system_stm32f0xx.c file
 256:src/main.c    **** 
 257:src/main.c    **** 	//GPIO Configuration.
 258:src/main.c    **** 	GPIO_Config();
 542              		.loc 2 258 0
 543 005e FFF7FEFF 		bl	GPIO_Config	@
 259:src/main.c    **** 
 260:src/main.c    **** 
 261:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 262:src/main.c    **** 	if (SysTick_Config(48000))
 544              		.loc 2 262 0
 545 0062 974B     		ldr	r3, .L48	@ tmp216,
 546 0064 1800     		movs	r0, r3	@, tmp216
 547 0066 FFF7FEFF 		bl	SysTick_Config	@
 548 006a 031E     		subs	r3, r0, #0	@ D.7171,,
 549 006c 28D0     		beq	.L13	@,
 550              	.L18:
 263:src/main.c    **** 	{
 264:src/main.c    **** 		while (1)	/* Capture error */
 265:src/main.c    **** 		{
 266:src/main.c    **** 			if (LED)
ARM GAS  /tmp/cc5pUpZ5.s 			page 33


 551              		.loc 2 266 0
 552 006e 9023     		movs	r3, #144	@ tmp464,
 553 0070 DB05     		lsls	r3, r3, #23	@ D.7172, tmp464,
 554 0072 9B8A     		ldrh	r3, [r3, #20]	@ tmp218,
 555 0074 9BB2     		uxth	r3, r3	@ D.7173, tmp218
 556 0076 1A00     		movs	r2, r3	@ D.7174, D.7173
 557 0078 8023     		movs	r3, #128	@ tmp465,
 558 007a 5B01     		lsls	r3, r3, #5	@ tmp219, tmp465,
 559 007c 1340     		ands	r3, r2	@ D.7174, D.7174
 560 007e 05D0     		beq	.L14	@,
 267:src/main.c    **** 				LED_OFF;
 561              		.loc 2 267 0
 562 0080 9023     		movs	r3, #144	@ tmp462,
 563 0082 DB05     		lsls	r3, r3, #23	@ D.7172, tmp462,
 564 0084 8022     		movs	r2, #128	@ tmp463,
 565 0086 5205     		lsls	r2, r2, #21	@ tmp220, tmp463,
 566 0088 9A61     		str	r2, [r3, #24]	@ tmp220, _62->BSRR
 567 008a 04E0     		b	.L15	@
 568              	.L14:
 268:src/main.c    **** 			else
 269:src/main.c    **** 				LED_ON;
 569              		.loc 2 269 0
 570 008c 9023     		movs	r3, #144	@ tmp460,
 571 008e DB05     		lsls	r3, r3, #23	@ D.7172, tmp460,
 572 0090 8022     		movs	r2, #128	@ tmp461,
 573 0092 5201     		lsls	r2, r2, #5	@ tmp221, tmp461,
 574 0094 9A61     		str	r2, [r3, #24]	@ tmp221, _64->BSRR
 575              	.L15:
 270:src/main.c    **** 
 271:src/main.c    **** 			for (i = 0; i < 255; i++)
 576              		.loc 2 271 0
 577 0096 3F23     		movs	r3, #63	@ tmp222,
 578 0098 6B44     		add	r3, r3, sp	@ tmp222,
 579 009a 0022     		movs	r2, #0	@ tmp223,
 580 009c 1A70     		strb	r2, [r3]	@ tmp224, i
 581 009e 09E0     		b	.L16	@
 582              	.L17:
 272:src/main.c    **** 			{
 273:src/main.c    **** 				asm (	"nop \n\t"
 583              		.loc 2 273 0 discriminator 3
 584              		.syntax divided
 585              	@ 273 "src/main.c" 1
 586 00a0 C046     		nop 
 587 00a2 C046     		nop 
 588 00a4 C046     		nop 
 589              		
 590              	@ 0 "" 2
 271:src/main.c    **** 			{
 591              		.loc 2 271 0 discriminator 3
 592              		.thumb
 593              		.syntax unified
 594 00a6 3F23     		movs	r3, #63	@ tmp225,
 595 00a8 6B44     		add	r3, r3, sp	@ tmp225,
 596 00aa 1A78     		ldrb	r2, [r3]	@ D.7175, i
 597 00ac 3F23     		movs	r3, #63	@ tmp226,
 598 00ae 6B44     		add	r3, r3, sp	@ tmp226,
 599 00b0 0132     		adds	r2, r2, #1	@ tmp227,
ARM GAS  /tmp/cc5pUpZ5.s 			page 34


 600 00b2 1A70     		strb	r2, [r3]	@ tmp228, i
 601              	.L16:
 271:src/main.c    **** 			{
 602              		.loc 2 271 0 is_stmt 0 discriminator 1
 603 00b4 3F23     		movs	r3, #63	@ tmp229,
 604 00b6 6B44     		add	r3, r3, sp	@ tmp229,
 605 00b8 1B78     		ldrb	r3, [r3]	@ tmp230, i
 606 00ba FF2B     		cmp	r3, #255	@ tmp230,
 607 00bc F0D1     		bne	.L17	@,
 274:src/main.c    **** 						"nop \n\t"
 275:src/main.c    **** 						"nop \n\t" );
 276:src/main.c    **** 			}
 277:src/main.c    **** 		}
 608              		.loc 2 277 0 is_stmt 1
 609 00be D6E7     		b	.L18	@
 610              	.L13:
 278:src/main.c    **** 	}
 279:src/main.c    **** 
 280:src/main.c    **** 
 281:src/main.c    **** 	//ADC Configuration
 282:src/main.c    **** //	AdcConfig();
 283:src/main.c    **** 
 284:src/main.c    **** 	//TIM Configuration.
 285:src/main.c    **** 	// TIM_3_Init();
 286:src/main.c    **** //	TIM_14_Init();
 287:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 288:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 289:src/main.c    **** 
 290:src/main.c    **** //	EXTIOff ();
 291:src/main.c    **** 
 292:src/main.c    **** 	// while (1)
 293:src/main.c    **** 	// {
 294:src/main.c    **** 	// 	// if (SYNCP)
 295:src/main.c    **** 	// 	// {
 296:src/main.c    **** 	// 	// 	SYNCP_OFF;
 297:src/main.c    **** 	// 	// 	LED_OFF;
 298:src/main.c    **** 	// 	// }
 299:src/main.c    **** 	// 	// else
 300:src/main.c    **** 	// 	// {
 301:src/main.c    **** 	// 	// 	SYNCP_ON;
 302:src/main.c    **** 	// 	// 	LED_ON;
 303:src/main.c    **** 	// 	// }
 304:src/main.c    **** 	// 	// Wait_ms(10);
 305:src/main.c    **** 	//
 306:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 307:src/main.c    **** 	// 	// {
 308:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 309:src/main.c    **** 	// 	// 	Wait_ms (10);
 310:src/main.c    **** 	// 	// }
 311:src/main.c    **** 	// }
 312:src/main.c    **** 
 313:src/main.c    **** //		while (1)
 314:src/main.c    **** //		{
 315:src/main.c    **** //			PIN3_OFF;
 316:src/main.c    **** //			Wait_ms (10);
 317:src/main.c    **** //			PIN3_ON;
 318:src/main.c    **** //			Wait_ms (10);
ARM GAS  /tmp/cc5pUpZ5.s 			page 35


 319:src/main.c    **** //		}
 320:src/main.c    **** 
 321:src/main.c    **** 	//--- Welcome code ---//
 322:src/main.c    **** 	LED_OFF;
 611              		.loc 2 322 0
 612 00c0 9023     		movs	r3, #144	@ tmp454,
 613 00c2 DB05     		lsls	r3, r3, #23	@ D.7172, tmp454,
 614 00c4 8022     		movs	r2, #128	@ tmp455,
 615 00c6 5205     		lsls	r2, r2, #21	@ tmp231, tmp455,
 616 00c8 9A61     		str	r2, [r3, #24]	@ tmp231, _69->BSRR
 323:src/main.c    **** //	EN_GPS_OFF;
 324:src/main.c    **** 	EN_GPS_ON;
 617              		.loc 2 324 0
 618 00ca 9023     		movs	r3, #144	@ tmp456,
 619 00cc DB05     		lsls	r3, r3, #23	@ D.7172, tmp456,
 620 00ce 8022     		movs	r2, #128	@ tmp457,
 621 00d0 1202     		lsls	r2, r2, #8	@ tmp232, tmp457,
 622 00d2 9A61     		str	r2, [r3, #24]	@ tmp232, _71->BSRR
 325:src/main.c    **** 	//RELAY_ON;
 326:src/main.c    **** 	RELAY_OFF;
 623              		.loc 2 326 0
 624 00d4 9023     		movs	r3, #144	@ tmp458,
 625 00d6 DB05     		lsls	r3, r3, #23	@ D.7172, tmp458,
 626 00d8 8022     		movs	r2, #128	@ tmp459,
 627 00da 1205     		lsls	r2, r2, #20	@ tmp233, tmp459,
 628 00dc 9A61     		str	r2, [r3, #24]	@ tmp233, _73->BSRR
 327:src/main.c    **** 
 328:src/main.c    **** 	USART1Config();
 629              		.loc 2 328 0
 630 00de FFF7FEFF 		bl	USART1Config	@
 329:src/main.c    **** 	USART2Config();
 631              		.loc 2 329 0
 632 00e2 FFF7FEFF 		bl	USART2Config	@
 330:src/main.c    **** 
 331:src/main.c    **** 	EXTIOff();
 633              		.loc 2 331 0
 634 00e6 FFF7FEFF 		bl	EXTIOff	@
 332:src/main.c    **** 
 333:src/main.c    **** 
 334:src/main.c    **** #ifdef USE_REDONDA_BASIC
 335:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 336:src/main.c    **** 	// USART1Config();
 337:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 635              		.loc 2 337 0
 636 00ea FFF7FEFF 		bl	AdcConfig	@
 338:src/main.c    **** 
 339:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 340:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 637              		.loc 2 340 0
 638 00ee FFF7FEFF 		bl	TIM_3_Init	@
 341:src/main.c    **** #endif
 342:src/main.c    **** 
 343:src/main.c    **** 	TIM_16_Init();					//o tuilizo para synchro de relay
 639              		.loc 2 343 0
 640 00f2 FFF7FEFF 		bl	TIM_16_Init	@
 344:src/main.c    **** 	TIM16Enable();
 641              		.loc 2 344 0
ARM GAS  /tmp/cc5pUpZ5.s 			page 36


 642 00f6 FFF7FEFF 		bl	TIM16Enable	@
 345:src/main.c    **** 
 346:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 643              		.loc 2 346 0
 644 00fa 724B     		ldr	r3, .L48+4	@ tmp234,
 645 00fc 1800     		movs	r0, r3	@, tmp234
 646 00fe FFF7FEFF 		bl	Usart2Send	@
 347:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 647              		.loc 2 347 0
 648 0102 714B     		ldr	r3, .L48+8	@ tmp235,
 649 0104 1800     		movs	r0, r3	@, tmp235
 650 0106 FFF7FEFF 		bl	Usart2Send	@
 348:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 349:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 651              		.loc 2 349 0
 652 010a 704B     		ldr	r3, .L48+12	@ tmp236,
 653 010c 1800     		movs	r0, r3	@, tmp236
 654 010e FFF7FEFF 		bl	Usart2Send	@
 350:src/main.c    **** 	#endif
 351:src/main.c    **** 	#ifdef WITH_HYST
 352:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 655              		.loc 2 352 0
 656 0112 6F4B     		ldr	r3, .L48+16	@ tmp237,
 657 0114 1800     		movs	r0, r3	@, tmp237
 658 0116 FFF7FEFF 		bl	Usart2Send	@
 353:src/main.c    **** 	#endif
 354:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 355:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 356:src/main.c    **** 	#endif
 357:src/main.c    **** 	#ifdef USE_WITH_SYNC
 358:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 359:src/main.c    **** 	#else
 360:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 659              		.loc 2 360 0
 660 011a 6E4B     		ldr	r3, .L48+20	@ tmp238,
 661 011c 1800     		movs	r0, r3	@, tmp238
 662 011e FFF7FEFF 		bl	Usart2Send	@
 361:src/main.c    **** 	#endif
 362:src/main.c    **** 	#ifdef USE_GSM
 363:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 663              		.loc 2 363 0
 664 0122 6D4B     		ldr	r3, .L48+24	@ tmp239,
 665 0124 1800     		movs	r0, r3	@, tmp239
 666 0126 FFF7FEFF 		bl	Usart2Send	@
 364:src/main.c    **** 	#endif
 365:src/main.c    **** 
 366:src/main.c    **** 
 367:src/main.c    **** 
 368:src/main.c    **** 	for (i = 0; i < 8; i++)
 667              		.loc 2 368 0
 668 012a 3F23     		movs	r3, #63	@ tmp240,
 669 012c 6B44     		add	r3, r3, sp	@ tmp240,
 670 012e 0022     		movs	r2, #0	@ tmp241,
 671 0130 1A70     		strb	r2, [r3]	@ tmp242, i
 672 0132 1DE0     		b	.L19	@
 673              	.L22:
 369:src/main.c    **** 	{
ARM GAS  /tmp/cc5pUpZ5.s 			page 37


 370:src/main.c    **** 		if (LED)
 674              		.loc 2 370 0
 675 0134 9023     		movs	r3, #144	@ tmp452,
 676 0136 DB05     		lsls	r3, r3, #23	@ D.7172, tmp452,
 677 0138 9B8A     		ldrh	r3, [r3, #20]	@ tmp244,
 678 013a 9BB2     		uxth	r3, r3	@ D.7173, tmp244
 679 013c 1A00     		movs	r2, r3	@ D.7174, D.7173
 680 013e 8023     		movs	r3, #128	@ tmp453,
 681 0140 5B01     		lsls	r3, r3, #5	@ tmp245, tmp453,
 682 0142 1340     		ands	r3, r2	@ D.7174, D.7174
 683 0144 05D0     		beq	.L20	@,
 371:src/main.c    **** 			LED_OFF;
 684              		.loc 2 371 0
 685 0146 9023     		movs	r3, #144	@ tmp450,
 686 0148 DB05     		lsls	r3, r3, #23	@ D.7172, tmp450,
 687 014a 8022     		movs	r2, #128	@ tmp451,
 688 014c 5205     		lsls	r2, r2, #21	@ tmp246, tmp451,
 689 014e 9A61     		str	r2, [r3, #24]	@ tmp246, _93->BSRR
 690 0150 04E0     		b	.L21	@
 691              	.L20:
 372:src/main.c    **** 		else
 373:src/main.c    **** 			LED_ON;
 692              		.loc 2 373 0
 693 0152 9023     		movs	r3, #144	@ tmp448,
 694 0154 DB05     		lsls	r3, r3, #23	@ D.7172, tmp448,
 695 0156 8022     		movs	r2, #128	@ tmp449,
 696 0158 5201     		lsls	r2, r2, #5	@ tmp247, tmp449,
 697 015a 9A61     		str	r2, [r3, #24]	@ tmp247, _95->BSRR
 698              	.L21:
 374:src/main.c    **** 
 375:src/main.c    **** 		Wait_ms (250);
 699              		.loc 2 375 0 discriminator 2
 700 015c FA20     		movs	r0, #250	@,
 701 015e FFF7FEFF 		bl	Wait_ms	@
 368:src/main.c    **** 	{
 702              		.loc 2 368 0 discriminator 2
 703 0162 3F23     		movs	r3, #63	@ tmp248,
 704 0164 6B44     		add	r3, r3, sp	@ tmp248,
 705 0166 1A78     		ldrb	r2, [r3]	@ D.7175, i
 706 0168 3F23     		movs	r3, #63	@ tmp249,
 707 016a 6B44     		add	r3, r3, sp	@ tmp249,
 708 016c 0132     		adds	r2, r2, #1	@ tmp250,
 709 016e 1A70     		strb	r2, [r3]	@ tmp251, i
 710              	.L19:
 368:src/main.c    **** 	{
 711              		.loc 2 368 0 is_stmt 0 discriminator 1
 712 0170 3F23     		movs	r3, #63	@ tmp252,
 713 0172 6B44     		add	r3, r3, sp	@ tmp252,
 714 0174 1B78     		ldrb	r3, [r3]	@ tmp253, i
 715 0176 072B     		cmp	r3, #7	@ tmp253,
 716 0178 DCD9     		bls	.L22	@,
 376:src/main.c    **** 	}
 377:src/main.c    **** 
 378:src/main.c    **** 	timer_standby = 2000;
 717              		.loc 2 378 0 is_stmt 1
 718 017a 584B     		ldr	r3, .L48+28	@ tmp254,
 719 017c FA22     		movs	r2, #250	@ tmp447,
ARM GAS  /tmp/cc5pUpZ5.s 			page 38


 720 017e D200     		lsls	r2, r2, #3	@ tmp255, tmp447,
 721 0180 1A80     		strh	r2, [r3]	@ tmp256, timer_standby
 379:src/main.c    **** 	FuncsGSMReset();
 722              		.loc 2 379 0
 723 0182 FFF7FEFF 		bl	FuncsGSMReset	@
 380:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 724              		.loc 2 380 0
 725 0186 0220     		movs	r0, #2	@,
 726 0188 FFF7FEFF 		bl	Usart1Mode	@
 727              	.L43:
 381:src/main.c    **** 
 382:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 383:src/main.c    **** 	// while (1)
 384:src/main.c    **** 	// {
 385:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 386:src/main.c    **** 	// 	{
 387:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 388:src/main.c    **** 	// 		Wait_ms(10);
 389:src/main.c    **** 	// 	}
 390:src/main.c    **** 	//
 391:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 392:src/main.c    **** 	// 	{
 393:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 394:src/main.c    **** 	// 		Wait_ms(10);
 395:src/main.c    **** 	// 	}
 396:src/main.c    **** 	// }
 397:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 398:src/main.c    **** 
 399:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 400:src/main.c    **** 	// i = 0;
 401:src/main.c    **** 	// while (1)
 402:src/main.c    **** 	// {
 403:src/main.c    **** 	// 	switch (i)
 404:src/main.c    **** 	// 	{
 405:src/main.c    **** 	// 		case 0:
 406:src/main.c    **** 	// 			RelayOn();
 407:src/main.c    **** 	// 			timer_standby = 50;
 408:src/main.c    **** 	// 			LED_ON;
 409:src/main.c    **** 	// 			i++;
 410:src/main.c    **** 	// 			break;
 411:src/main.c    **** 	//
 412:src/main.c    **** 	// 		case 1:
 413:src/main.c    **** 	// 			if (!timer_standby)
 414:src/main.c    **** 	// 			{
 415:src/main.c    **** 	// 				RelayOff();
 416:src/main.c    **** 	// 				LED_OFF;
 417:src/main.c    **** 	// 				i++;
 418:src/main.c    **** 	// 				timer_standby = 10000;
 419:src/main.c    **** 	// 			}
 420:src/main.c    **** 	// 			break;
 421:src/main.c    **** 	//
 422:src/main.c    **** 	// 		case 2:
 423:src/main.c    **** 	// 			if (!timer_standby)
 424:src/main.c    **** 	// 			{
 425:src/main.c    **** 	// 				i = 0;
 426:src/main.c    **** 	// 			}
 427:src/main.c    **** 	// 			break;
ARM GAS  /tmp/cc5pUpZ5.s 			page 39


 428:src/main.c    **** 	// 	}
 429:src/main.c    **** 	//
 430:src/main.c    **** 	// 	UpdateRelay ();
 431:src/main.c    **** 	// }
 432:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 433:src/main.c    **** 
 434:src/main.c    **** 
 435:src/main.c    **** //--- Programa de pruebas I meas -----
 436:src/main.c    **** 	while (1)
 437:src/main.c    **** 	{
 438:src/main.c    **** 		switch (main_state)
 728              		.loc 2 438 0
 729 018c 3723     		movs	r3, #55	@ tmp257,
 730 018e 6B44     		add	r3, r3, sp	@ tmp257,
 731 0190 1B78     		ldrb	r3, [r3]	@ D.7174, main_state
 732 0192 072B     		cmp	r3, #7	@ D.7174,
 733 0194 00D9     		bls	.LCB424	@
 734 0196 94E1     		b	.L23	@long jump	@
 735              	.LCB424:
 736 0198 9A00     		lsls	r2, r3, #2	@ tmp258, D.7174,
 737 019a 514B     		ldr	r3, .L48+32	@ tmp260,
 738 019c D318     		adds	r3, r2, r3	@ tmp259, tmp258, tmp260
 739 019e 1B68     		ldr	r3, [r3]	@ tmp261,
 740 01a0 9F46     		mov	pc, r3	@ tmp261
 741              		.section	.rodata.main,"a",%progbits
 742              		.align	2
 743              	.L25:
 744 0000 A2010000 		.word	.L24
 745 0004 C4010000 		.word	.L26
 746 0008 FC010000 		.word	.L27
 747 000c CC040000 		.word	.L44
 748 0010 C2040000 		.word	.L23
 749 0014 C2040000 		.word	.L23
 750 0018 C2040000 		.word	.L23
 751 001c 72020000 		.word	.L29
 752              		.section	.text.main
 753              	.L24:
 439:src/main.c    **** 		{
 440:src/main.c    **** 			case MAIN_INIT:
 441:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 754              		.loc 2 441 0
 755 01a2 0A20     		movs	r0, #10	@,
 756 01a4 FFF7FEFF 		bl	Update_TIM3_CH1	@
 442:src/main.c    **** 				main_state = SYNCHRO_ADC;
 757              		.loc 2 442 0
 758 01a8 3723     		movs	r3, #55	@ tmp262,
 759 01aa 6B44     		add	r3, r3, sp	@ tmp262,
 760 01ac 0122     		movs	r2, #1	@ tmp263,
 761 01ae 1A70     		strb	r2, [r3]	@ tmp264, main_state
 443:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 762              		.loc 2 443 0
 763 01b0 4C4B     		ldr	r3, .L48+36	@ D.7176,
 764 01b2 4C4A     		ldr	r2, .L48+36	@ D.7176,
 765 01b4 9268     		ldr	r2, [r2, #8]	@ D.7171, _107->CR
 766 01b6 0421     		movs	r1, #4	@ tmp265,
 767 01b8 0A43     		orrs	r2, r1	@ D.7171, tmp265
 768 01ba 9A60     		str	r2, [r3, #8]	@ D.7171, _106->CR
ARM GAS  /tmp/cc5pUpZ5.s 			page 40


 444:src/main.c    **** 				seq_ready = 0;
 769              		.loc 2 444 0
 770 01bc 4A4B     		ldr	r3, .L48+40	@ tmp266,
 771 01be 0022     		movs	r2, #0	@ tmp267,
 772 01c0 1A70     		strb	r2, [r3]	@ tmp268, seq_ready
 445:src/main.c    **** 				break;
 773              		.loc 2 445 0
 774 01c2 8AE1     		b	.L30	@
 775              	.L26:
 446:src/main.c    **** 
 447:src/main.c    **** 			case SYNCHRO_ADC:
 448:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 776              		.loc 2 448 0
 777 01c4 484B     		ldr	r3, .L48+40	@ tmp269,
 778 01c6 1B78     		ldrb	r3, [r3]	@ tmp270, seq_ready
 779 01c8 DBB2     		uxtb	r3, r3	@ D.7175, tmp270
 780 01ca 002B     		cmp	r3, #0	@ D.7175,
 781 01cc 00D1     		bne	.LCB459	@
 782 01ce 7FE1     		b	.L45	@long jump	@
 783              	.LCB459:
 449:src/main.c    **** 				{
 450:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 784              		.loc 2 450 0
 785 01d0 464B     		ldr	r3, .L48+44	@ tmp271,
 786 01d2 1800     		movs	r0, r3	@, tmp271
 787 01d4 FFF7FEFF 		bl	Usart2Send	@
 451:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 788              		.loc 2 451 0
 789 01d8 454B     		ldr	r3, .L48+48	@ tmp272,
 790 01da 1800     		movs	r0, r3	@, tmp272
 791 01dc FFF7FEFF 		bl	Usart2Send	@
 452:src/main.c    **** #ifdef USE_GSM
 453:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 792              		.loc 2 453 0
 793 01e0 3723     		movs	r3, #55	@ tmp273,
 794 01e2 6B44     		add	r3, r3, sp	@ tmp273,
 795 01e4 0222     		movs	r2, #2	@ tmp274,
 796 01e6 1A70     		strb	r2, [r3]	@ tmp275, main_state
 454:src/main.c    **** 					timer_standby = 0;
 797              		.loc 2 454 0
 798 01e8 3C4B     		ldr	r3, .L48+28	@ tmp276,
 799 01ea 0022     		movs	r2, #0	@ tmp277,
 800 01ec 1A80     		strh	r2, [r3]	@ tmp278, timer_standby
 455:src/main.c    **** 					zero_current_loc = 0;
 801              		.loc 2 455 0
 802 01ee 0023     		movs	r3, #0	@ tmp279,
 803 01f0 0E93     		str	r3, [sp, #56]	@ tmp279, zero_current_loc
 456:src/main.c    **** 					i = 0;
 804              		.loc 2 456 0
 805 01f2 3F23     		movs	r3, #63	@ tmp280,
 806 01f4 6B44     		add	r3, r3, sp	@ tmp280,
 807 01f6 0022     		movs	r2, #0	@ tmp281,
 808 01f8 1A70     		strb	r2, [r3]	@ tmp282, i
 457:src/main.c    **** #else
 458:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 459:src/main.c    **** 					timer_standby = 60000;
 460:src/main.c    **** 					zero_current_loc = 0;
ARM GAS  /tmp/cc5pUpZ5.s 			page 41


 461:src/main.c    **** 					i = 0;
 462:src/main.c    **** #endif
 463:src/main.c    **** 				}
 464:src/main.c    **** 				break;
 809              		.loc 2 464 0
 810 01fa 69E1     		b	.L45	@
 811              	.L27:
 465:src/main.c    **** 
 466:src/main.c    **** 			case SET_ZERO_CURRENT:
 467:src/main.c    **** 				if (!timer_standby)
 812              		.loc 2 467 0
 813 01fc 374B     		ldr	r3, .L48+28	@ tmp283,
 814 01fe 1B88     		ldrh	r3, [r3]	@ tmp284, timer_standby
 815 0200 9BB2     		uxth	r3, r3	@ D.7173, tmp284
 816 0202 002B     		cmp	r3, #0	@ D.7173,
 817 0204 00D0     		beq	.LCB487	@
 818 0206 65E1     		b	.L46	@long jump	@
 819              	.LCB487:
 468:src/main.c    **** 				{
 469:src/main.c    **** 					if (i < 32)
 820              		.loc 2 469 0
 821 0208 3F23     		movs	r3, #63	@ tmp285,
 822 020a 6B44     		add	r3, r3, sp	@ tmp285,
 823 020c 1B78     		ldrb	r3, [r3]	@ tmp286, i
 824 020e 1F2B     		cmp	r3, #31	@ tmp286,
 825 0210 1AD8     		bhi	.L33	@,
 470:src/main.c    **** 					// if (i < 4)
 471:src/main.c    **** 					{
 472:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 826              		.loc 2 472 0
 827 0212 354B     		ldr	r3, .L48+40	@ tmp287,
 828 0214 1B78     		ldrb	r3, [r3]	@ tmp288, seq_ready
 829 0216 DBB2     		uxtb	r3, r3	@ D.7175, tmp288
 830 0218 002B     		cmp	r3, #0	@ D.7175,
 831 021a 00D1     		bne	.LCB497	@
 832 021c 5AE1     		b	.L46	@long jump	@
 833              	.LCB497:
 473:src/main.c    **** 						{
 474:src/main.c    **** 							seq_ready = 0;
 834              		.loc 2 474 0
 835 021e 324B     		ldr	r3, .L48+40	@ tmp289,
 836 0220 0022     		movs	r2, #0	@ tmp290,
 837 0222 1A70     		strb	r2, [r3]	@ tmp291, seq_ready
 475:src/main.c    **** 							zero_current_loc += I_Sense;
 838              		.loc 2 475 0
 839 0224 334B     		ldr	r3, .L48+52	@ tmp292,
 840 0226 9B88     		ldrh	r3, [r3, #4]	@ tmp294,
 841 0228 9BB2     		uxth	r3, r3	@ D.7173, tmp294
 842 022a 1A00     		movs	r2, r3	@ D.7177, D.7173
 843 022c 0E9B     		ldr	r3, [sp, #56]	@ tmp296, zero_current_loc
 844 022e 9B18     		adds	r3, r3, r2	@ tmp295, tmp296, D.7177
 845 0230 0E93     		str	r3, [sp, #56]	@ tmp295, zero_current_loc
 476:src/main.c    **** 							i++;
 846              		.loc 2 476 0
 847 0232 3F23     		movs	r3, #63	@ tmp297,
 848 0234 6B44     		add	r3, r3, sp	@ tmp297,
 849 0236 1A78     		ldrb	r2, [r3]	@ D.7175, i
ARM GAS  /tmp/cc5pUpZ5.s 			page 42


 850 0238 3F23     		movs	r3, #63	@ tmp298,
 851 023a 6B44     		add	r3, r3, sp	@ tmp298,
 852 023c 0132     		adds	r2, r2, #1	@ tmp299,
 853 023e 1A70     		strb	r2, [r3]	@ tmp300, i
 477:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 854              		.loc 2 477 0
 855 0240 264B     		ldr	r3, .L48+28	@ tmp301,
 856 0242 0222     		movs	r2, #2	@ tmp302,
 857 0244 1A80     		strh	r2, [r3]	@ tmp303, timer_standby
 478:src/main.c    **** 						}
 479:src/main.c    **** 					}
 480:src/main.c    **** 					else
 481:src/main.c    **** 					{
 482:src/main.c    **** 						zero_current_loc >>= 5;
 483:src/main.c    **** 						// zero_current_loc >>= 2;
 484:src/main.c    **** 						zero_current = zero_current_loc;
 485:src/main.c    **** 						main_state = LAMP_ON;
 486:src/main.c    **** 						RELAY_ON;
 487:src/main.c    **** 						i = 0;
 488:src/main.c    **** 					}
 489:src/main.c    **** 				}
 490:src/main.c    **** 				break;
 858              		.loc 2 490 0
 859 0246 45E1     		b	.L46	@
 860              	.L33:
 482:src/main.c    **** 						// zero_current_loc >>= 2;
 861              		.loc 2 482 0
 862 0248 0E9B     		ldr	r3, [sp, #56]	@ tmp305, zero_current_loc
 863 024a 5B09     		lsrs	r3, r3, #5	@ tmp304, tmp305,
 864 024c 0E93     		str	r3, [sp, #56]	@ tmp304, zero_current_loc
 484:src/main.c    **** 						main_state = LAMP_ON;
 865              		.loc 2 484 0
 866 024e 0E9B     		ldr	r3, [sp, #56]	@ tmp307, zero_current_loc
 867 0250 9AB2     		uxth	r2, r3	@ D.7173, tmp306
 868 0252 294B     		ldr	r3, .L48+56	@ tmp308,
 869 0254 1A80     		strh	r2, [r3]	@ tmp309, zero_current
 485:src/main.c    **** 						RELAY_ON;
 870              		.loc 2 485 0
 871 0256 3723     		movs	r3, #55	@ tmp310,
 872 0258 6B44     		add	r3, r3, sp	@ tmp310,
 873 025a 0722     		movs	r2, #7	@ tmp311,
 874 025c 1A70     		strb	r2, [r3]	@ tmp312, main_state
 486:src/main.c    **** 						i = 0;
 875              		.loc 2 486 0
 876 025e 9023     		movs	r3, #144	@ tmp445,
 877 0260 DB05     		lsls	r3, r3, #23	@ D.7172, tmp445,
 878 0262 8022     		movs	r2, #128	@ tmp446,
 879 0264 1201     		lsls	r2, r2, #4	@ tmp313, tmp446,
 880 0266 9A61     		str	r2, [r3, #24]	@ tmp313, _132->BSRR
 487:src/main.c    **** 					}
 881              		.loc 2 487 0
 882 0268 3F23     		movs	r3, #63	@ tmp314,
 883 026a 6B44     		add	r3, r3, sp	@ tmp314,
 884 026c 0022     		movs	r2, #0	@ tmp315,
 885 026e 1A70     		strb	r2, [r3]	@ tmp316, i
 886              		.loc 2 490 0
 887 0270 30E1     		b	.L46	@
ARM GAS  /tmp/cc5pUpZ5.s 			page 43


 888              	.L29:
 491:src/main.c    **** 
 492:src/main.c    **** 			case LAMP_OFF:
 493:src/main.c    **** 				break;
 494:src/main.c    **** 
 495:src/main.c    **** 			case LAMP_ON:
 496:src/main.c    **** 				if (!timer_standby)
 889              		.loc 2 496 0
 890 0272 1A4B     		ldr	r3, .L48+28	@ tmp317,
 891 0274 1B88     		ldrh	r3, [r3]	@ tmp318, timer_standby
 892 0276 9BB2     		uxth	r3, r3	@ D.7173, tmp318
 893 0278 002B     		cmp	r3, #0	@ D.7173,
 894 027a 00D0     		beq	.LCB550	@
 895 027c 2CE1     		b	.L47	@long jump	@
 896              	.LCB550:
 497:src/main.c    **** 				{
 498:src/main.c    **** 					if (i < SIZEOF_POWER_VECT)
 897              		.loc 2 498 0
 898 027e 3F23     		movs	r3, #63	@ tmp319,
 899 0280 6B44     		add	r3, r3, sp	@ tmp319,
 900 0282 1B78     		ldrb	r3, [r3]	@ tmp320, i
 901 0284 092B     		cmp	r3, #9	@ tmp320,
 902 0286 3BD8     		bhi	.L36	@,
 499:src/main.c    **** 					{
 500:src/main.c    **** 						power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 903              		.loc 2 500 0
 904 0288 3F23     		movs	r3, #63	@ tmp321,
 905 028a 6B44     		add	r3, r3, sp	@ tmp321,
 906 028c 1C78     		ldrb	r4, [r3]	@ D.7174, i
 907 028e FFF7FEFF 		bl	GetVGrid	@
 908 0292 0300     		movs	r3, r0	@ tmp322,
 909 0294 1D00     		movs	r5, r3	@ D.7173, tmp323
 910 0296 FFF7FEFF 		bl	GetIGrid	@
 911 029a 0300     		movs	r3, r0	@ tmp324,
 912 029c 1900     		movs	r1, r3	@, D.7173
 913 029e 2800     		movs	r0, r5	@, D.7173
 914 02a0 FFF7FEFF 		bl	PowerCalc	@
 915 02a4 0300     		movs	r3, r0	@ tmp326,
 916 02a6 1900     		movs	r1, r3	@ D.7173, tmp327
 917 02a8 144B     		ldr	r3, .L48+60	@ tmp328,
 918 02aa 6200     		lsls	r2, r4, #1	@ tmp329, D.7174,
 919 02ac D152     		strh	r1, [r2, r3]	@ tmp330, power_vect
 501:src/main.c    **** 						i++;
 920              		.loc 2 501 0
 921 02ae 3F23     		movs	r3, #63	@ tmp331,
 922 02b0 6B44     		add	r3, r3, sp	@ tmp331,
 923 02b2 1A78     		ldrb	r2, [r3]	@ D.7175, i
 924 02b4 3F23     		movs	r3, #63	@ tmp332,
 925 02b6 6B44     		add	r3, r3, sp	@ tmp332,
 926 02b8 0132     		adds	r2, r2, #1	@ tmp333,
 927 02ba 1A70     		strb	r2, [r3]	@ tmp334, i
 928 02bc A4E0     		b	.L37	@
 929              	.L49:
 930 02be C046     		.align	2
 931              	.L48:
 932 02c0 80BB0000 		.word	48000
 933 02c4 00000000 		.word	.LC0
ARM GAS  /tmp/cc5pUpZ5.s 			page 44


 934 02c8 28000000 		.word	.LC2
 935 02cc 38000000 		.word	.LC4
 936 02d0 4C000000 		.word	.LC6
 937 02d4 64000000 		.word	.LC8
 938 02d8 74000000 		.word	.LC10
 939 02dc 00000000 		.word	timer_standby
 940 02e0 00000000 		.word	.L25
 941 02e4 00240140 		.word	1073816576
 942 02e8 00000000 		.word	seq_ready
 943 02ec 90000000 		.word	.LC15
 944 02f0 9C000000 		.word	.LC17
 945 02f4 00000000 		.word	adc_ch
 946 02f8 00000000 		.word	zero_current
 947 02fc 00000000 		.word	power_vect
 948              	.L36:
 502:src/main.c    **** 					}
 503:src/main.c    **** 					else
 504:src/main.c    **** 					{
 505:src/main.c    **** 						//termine de cargar el vector, muestro info
 506:src/main.c    **** 						power = PowerCalcMean8(power_vect);
 949              		.loc 2 506 0
 950 0300 08AC     		add	r4, sp, #32	@ tmp335,,
 951 0302 7E4B     		ldr	r3, .L50	@ tmp336,
 952 0304 1800     		movs	r0, r3	@, tmp336
 953 0306 FFF7FEFF 		bl	PowerCalcMean8	@
 954 030a 0300     		movs	r3, r0	@ tmp337,
 955 030c 2380     		strh	r3, [r4]	@ tmp339, power
 507:src/main.c    **** 						power_2secs_acum += power;
 956              		.loc 2 507 0
 957 030e 08AB     		add	r3, sp, #32	@ tmp340,,
 958 0310 1A88     		ldrh	r2, [r3]	@ D.7177, power
 959 0312 7B4B     		ldr	r3, .L50+4	@ tmp341,
 960 0314 1B68     		ldr	r3, [r3]	@ D.7177, power_2secs_acum
 961 0316 D218     		adds	r2, r2, r3	@ D.7177, D.7177, D.7177
 962 0318 794B     		ldr	r3, .L50+4	@ tmp342,
 963 031a 1A60     		str	r2, [r3]	@ D.7177, power_2secs_acum
 508:src/main.c    **** 						power_2secs_index++;
 964              		.loc 2 508 0
 965 031c 794B     		ldr	r3, .L50+8	@ tmp343,
 966 031e 1B78     		ldrb	r3, [r3]	@ D.7175, power_2secs_index
 967 0320 0133     		adds	r3, r3, #1	@ tmp344,
 968 0322 DAB2     		uxtb	r2, r3	@ D.7175, tmp344
 969 0324 774B     		ldr	r3, .L50+8	@ tmp345,
 970 0326 1A70     		strb	r2, [r3]	@ tmp346, power_2secs_index
 509:src/main.c    **** 						fcalc = power;
 971              		.loc 2 509 0
 972 0328 08AB     		add	r3, sp, #32	@ tmp347,,
 973 032a 1B88     		ldrh	r3, [r3]	@ tmp348, power
 974 032c 1800     		movs	r0, r3	@, tmp348
 975 032e FFF7FEFF 		bl	__aeabi_ui2f	@
 976 0332 031C     		adds	r3, r0, #0	@ tmp349,
 977 0334 0C93     		str	r3, [sp, #48]	@ tmp349, fcalc
 510:src/main.c    **** 						fcalc = power * KW;
 978              		.loc 2 510 0
 979 0336 08AB     		add	r3, sp, #32	@ tmp350,,
 980 0338 1B88     		ldrh	r3, [r3]	@ D.7174, power
 981 033a 1800     		movs	r0, r3	@, D.7174
ARM GAS  /tmp/cc5pUpZ5.s 			page 45


 982 033c FFF7FEFF 		bl	__aeabi_i2d	@
 983 0340 714A     		ldr	r2, .L50+12	@,
 984 0342 724B     		ldr	r3, .L50+16	@,
 985 0344 FFF7FEFF 		bl	__aeabi_dmul	@
 986 0348 0300     		movs	r3, r0	@ tmp351,
 987 034a 0C00     		movs	r4, r1	@,
 988 034c 1800     		movs	r0, r3	@, D.7178
 989 034e 2100     		movs	r1, r4	@, D.7178
 990 0350 FFF7FEFF 		bl	__aeabi_d2f	@
 991 0354 031C     		adds	r3, r0, #0	@ tmp352,
 992 0356 0C93     		str	r3, [sp, #48]	@ tmp352, fcalc
 511:src/main.c    **** 						power_int = (unsigned short) fcalc;
 993              		.loc 2 511 0
 994 0358 1E24     		movs	r4, #30	@ tmp353,
 995 035a 6C44     		add	r4, r4, sp	@ tmp353,
 996 035c 0C98     		ldr	r0, [sp, #48]	@, fcalc
 997 035e FFF7FEFF 		bl	__aeabi_f2uiz	@
 998 0362 0300     		movs	r3, r0	@ tmp354,
 999 0364 2380     		strh	r3, [r4]	@ tmp355, power_int
 512:src/main.c    **** 						fcalc = fcalc - power_int;
 1000              		.loc 2 512 0
 1001 0366 1E23     		movs	r3, #30	@ tmp356,
 1002 0368 6B44     		add	r3, r3, sp	@ tmp356,
 1003 036a 1B88     		ldrh	r3, [r3]	@ D.7174, power_int
 1004 036c 1800     		movs	r0, r3	@, D.7174
 1005 036e FFF7FEFF 		bl	__aeabi_i2f	@
 1006 0372 031C     		adds	r3, r0, #0	@ D.7179,
 1007 0374 191C     		adds	r1, r3, #0	@, D.7179
 1008 0376 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1009 0378 FFF7FEFF 		bl	__aeabi_fsub	@
 1010 037c 031C     		adds	r3, r0, #0	@ tmp357,
 1011 037e 0C93     		str	r3, [sp, #48]	@ tmp357, fcalc
 513:src/main.c    **** 						fcalc = fcalc * 100;
 1012              		.loc 2 513 0
 1013 0380 6349     		ldr	r1, .L50+20	@,
 1014 0382 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1015 0384 FFF7FEFF 		bl	__aeabi_fmul	@
 1016 0388 031C     		adds	r3, r0, #0	@ tmp358,
 1017 038a 0C93     		str	r3, [sp, #48]	@ tmp358, fcalc
 514:src/main.c    **** 						power_dec = (unsigned short) fcalc;
 1018              		.loc 2 514 0
 1019 038c 07AC     		add	r4, sp, #28	@ tmp359,,
 1020 038e 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1021 0390 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1022 0394 0300     		movs	r3, r0	@ tmp360,
 1023 0396 2380     		strh	r3, [r4]	@ tmp361, power_dec
 515:src/main.c    **** 						sprintf(s_lcd, "p: %3d.%02d d: %d\r\n", power_int, power_dec, power);
 1024              		.loc 2 515 0
 1025 0398 1E23     		movs	r3, #30	@ tmp362,
 1026 039a 6B44     		add	r3, r3, sp	@ tmp362,
 1027 039c 1A88     		ldrh	r2, [r3]	@ D.7174, power_int
 1028 039e 07AB     		add	r3, sp, #28	@ tmp363,,
 1029 03a0 1C88     		ldrh	r4, [r3]	@ D.7174, power_dec
 1030 03a2 08AB     		add	r3, sp, #32	@ tmp364,,
 1031 03a4 1B88     		ldrh	r3, [r3]	@ D.7174, power
 1032 03a6 5B49     		ldr	r1, .L50+24	@ tmp365,
 1033 03a8 02A8     		add	r0, sp, #8	@ tmp366,,
ARM GAS  /tmp/cc5pUpZ5.s 			page 46


 1034 03aa 0093     		str	r3, [sp]	@ D.7174,
 1035 03ac 2300     		movs	r3, r4	@, D.7174
 1036 03ae FFF7FEFF 		bl	sprintf	@
 516:src/main.c    **** 
 517:src/main.c    **** 						// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, V_Sense, I_Sense);
 518:src/main.c    **** 						// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, GetVGrid(), GetIGrid());
 519:src/main.c    **** 						//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 520:src/main.c    **** 						//TODO: para debug no envio datos
 521:src/main.c    **** 						// Usart2Send(s_lcd);
 522:src/main.c    **** 						i = 0;
 1037              		.loc 2 522 0
 1038 03b2 3F23     		movs	r3, #63	@ tmp367,
 1039 03b4 6B44     		add	r3, r3, sp	@ tmp367,
 1040 03b6 0022     		movs	r2, #0	@ tmp368,
 1041 03b8 1A70     		strb	r2, [r3]	@ tmp369, i
 523:src/main.c    **** 
 524:src/main.c    **** 						if (power_2secs_index >= 30)	//1 a 30 es el contador
 1042              		.loc 2 524 0
 1043 03ba 524B     		ldr	r3, .L50+8	@ tmp370,
 1044 03bc 1B78     		ldrb	r3, [r3]	@ D.7175, power_2secs_index
 1045 03be 1D2B     		cmp	r3, #29	@ D.7175,
 1046 03c0 10D9     		bls	.L38	@,
 525:src/main.c    **** 						{
 526:src/main.c    **** 							power_2secs_index = 0;
 1047              		.loc 2 526 0
 1048 03c2 504B     		ldr	r3, .L50+8	@ tmp371,
 1049 03c4 0022     		movs	r2, #0	@ tmp372,
 1050 03c6 1A70     		strb	r2, [r3]	@ tmp373, power_2secs_index
 527:src/main.c    **** 							power_minutes += power;		//TODO: supongo todo el minuto el mismo consumo ver power_2secs_acu
 1051              		.loc 2 527 0
 1052 03c8 534B     		ldr	r3, .L50+28	@ tmp374,
 1053 03ca 1A88     		ldrh	r2, [r3]	@ D.7173, power_minutes
 1054 03cc 08AB     		add	r3, sp, #32	@ tmp375,,
 1055 03ce 1B88     		ldrh	r3, [r3]	@ tmp376, power
 1056 03d0 D318     		adds	r3, r2, r3	@ tmp377, D.7173, tmp376
 1057 03d2 9AB2     		uxth	r2, r3	@ D.7173, tmp377
 1058 03d4 504B     		ldr	r3, .L50+28	@ tmp378,
 1059 03d6 1A80     		strh	r2, [r3]	@ tmp379, power_minutes
 528:src/main.c    **** 							power_minutes_index++;
 1060              		.loc 2 528 0
 1061 03d8 504B     		ldr	r3, .L50+32	@ tmp380,
 1062 03da 1B78     		ldrb	r3, [r3]	@ D.7175, power_minutes_index
 1063 03dc 0133     		adds	r3, r3, #1	@ tmp381,
 1064 03de DAB2     		uxtb	r2, r3	@ D.7175, tmp381
 1065 03e0 4E4B     		ldr	r3, .L50+32	@ tmp382,
 1066 03e2 1A70     		strb	r2, [r3]	@ tmp383, power_minutes_index
 1067              	.L38:
 529:src/main.c    **** 						}
 530:src/main.c    **** 
 531:src/main.c    **** 						if (power_minutes_index >= 60)	//1 a 60 es el contador
 1068              		.loc 2 531 0
 1069 03e4 4D4B     		ldr	r3, .L50+32	@ tmp384,
 1070 03e6 1B78     		ldrb	r3, [r3]	@ D.7175, power_minutes_index
 1071 03e8 3B2B     		cmp	r3, #59	@ D.7175,
 1072 03ea 0DD9     		bls	.L37	@,
 532:src/main.c    **** 						{
 533:src/main.c    **** 							power_minutes_index = 0;
ARM GAS  /tmp/cc5pUpZ5.s 			page 47


 1073              		.loc 2 533 0
 1074 03ec 4B4B     		ldr	r3, .L50+32	@ tmp385,
 1075 03ee 0022     		movs	r2, #0	@ tmp386,
 1076 03f0 1A70     		strb	r2, [r3]	@ tmp387, power_minutes_index
 534:src/main.c    **** 							power_hours += power_minutes;		//TODO: OJO se supuso todo el minuto el mismo consumo
 1077              		.loc 2 534 0
 1078 03f2 4B4B     		ldr	r3, .L50+36	@ tmp388,
 1079 03f4 1A88     		ldrh	r2, [r3]	@ D.7173, power_hours
 1080 03f6 484B     		ldr	r3, .L50+28	@ tmp389,
 1081 03f8 1B88     		ldrh	r3, [r3]	@ D.7173, power_minutes
 1082 03fa D318     		adds	r3, r2, r3	@ tmp390, D.7173, D.7173
 1083 03fc 9AB2     		uxth	r2, r3	@ D.7173, tmp390
 1084 03fe 484B     		ldr	r3, .L50+36	@ tmp391,
 1085 0400 1A80     		strh	r2, [r3]	@ tmp392, power_hours
 535:src/main.c    **** 							power_minutes = 0;
 1086              		.loc 2 535 0
 1087 0402 454B     		ldr	r3, .L50+28	@ tmp393,
 1088 0404 0022     		movs	r2, #0	@ tmp394,
 1089 0406 1A80     		strh	r2, [r3]	@ tmp395, power_minutes
 1090              	.L37:
 536:src/main.c    **** 						}
 537:src/main.c    **** 
 538:src/main.c    **** 
 539:src/main.c    **** 					}
 540:src/main.c    **** 					timer_standby = 200;		//10 veces 200ms
 1091              		.loc 2 540 0
 1092 0408 464B     		ldr	r3, .L50+40	@ tmp396,
 1093 040a C822     		movs	r2, #200	@ tmp397,
 1094 040c 1A80     		strh	r2, [r3]	@ tmp398, timer_standby
 541:src/main.c    **** 
 542:src/main.c    **** 					// if ((FuncsGSMReady() == resp_gsm_ok) && (!sended))
 543:src/main.c    **** 					if ((FuncsGSMMessageFlagsAsk () & GSM_SET_CALL) && (!sended))
 1095              		.loc 2 543 0
 1096 040e FFF7FEFF 		bl	FuncsGSMMessageFlagsAsk	@
 1097 0412 0300     		movs	r3, r0	@ tmp399,
 1098 0414 1A00     		movs	r2, r3	@ D.7174, D.7173
 1099 0416 0123     		movs	r3, #1	@ tmp401,
 1100 0418 1340     		ands	r3, r2	@ D.7174, D.7174
 1101 041a 0FD0     		beq	.L39	@,
 1102              		.loc 2 543 0 is_stmt 0 discriminator 1
 1103 041c 3623     		movs	r3, #54	@ tmp402,
 1104 041e 6B44     		add	r3, r3, sp	@ tmp402,
 1105 0420 1B78     		ldrb	r3, [r3]	@ tmp403, sended
 1106 0422 002B     		cmp	r3, #0	@ tmp403,
 1107 0424 0AD1     		bne	.L39	@,
 544:src/main.c    **** 					{
 545:src/main.c    **** 						Usart2Send((char *) (const char *) "Llamadas Listas!\r\n");
 1108              		.loc 2 545 0 is_stmt 1
 1109 0426 404B     		ldr	r3, .L50+44	@ tmp404,
 1110 0428 1800     		movs	r0, r3	@, tmp404
 1111 042a FFF7FEFF 		bl	Usart2Send	@
 546:src/main.c    **** 						// FuncsGSMSendSMS("Hola", "1145376762");
 547:src/main.c    **** 						sended++;
 1112              		.loc 2 547 0
 1113 042e 3623     		movs	r3, #54	@ tmp405,
 1114 0430 6B44     		add	r3, r3, sp	@ tmp405,
 1115 0432 1A78     		ldrb	r2, [r3]	@ D.7175, sended
ARM GAS  /tmp/cc5pUpZ5.s 			page 48


 1116 0434 3623     		movs	r3, #54	@ tmp406,
 1117 0436 6B44     		add	r3, r3, sp	@ tmp406,
 1118 0438 0132     		adds	r2, r2, #1	@ tmp407,
 1119 043a 1A70     		strb	r2, [r3]	@ tmp408, sended
 1120              	.L39:
 548:src/main.c    **** 					}
 549:src/main.c    **** 
 550:src/main.c    **** 					if ((FuncsGSMMessageFlagsAsk () & GSM_SET_SMS) && (sended == 1))
 1121              		.loc 2 550 0
 1122 043c FFF7FEFF 		bl	FuncsGSMMessageFlagsAsk	@
 1123 0440 0300     		movs	r3, r0	@ tmp409,
 1124 0442 1A00     		movs	r2, r3	@ D.7174, D.7173
 1125 0444 0223     		movs	r3, #2	@ tmp411,
 1126 0446 1340     		ands	r3, r2	@ D.7174, D.7174
 1127 0448 0FD0     		beq	.L40	@,
 1128              		.loc 2 550 0 is_stmt 0 discriminator 1
 1129 044a 3623     		movs	r3, #54	@ tmp412,
 1130 044c 6B44     		add	r3, r3, sp	@ tmp412,
 1131 044e 1B78     		ldrb	r3, [r3]	@ tmp413, sended
 1132 0450 012B     		cmp	r3, #1	@ tmp413,
 1133 0452 0AD1     		bne	.L40	@,
 551:src/main.c    **** 					{
 552:src/main.c    **** 						Usart2Send((char *) (const char *) "SMS Listo!\r\n");
 1134              		.loc 2 552 0 is_stmt 1
 1135 0454 354B     		ldr	r3, .L50+48	@ tmp414,
 1136 0456 1800     		movs	r0, r3	@, tmp414
 1137 0458 FFF7FEFF 		bl	Usart2Send	@
 553:src/main.c    **** 						// FuncsGSMSendSMS("Hola", "1145376762");
 554:src/main.c    **** 						sended++;
 1138              		.loc 2 554 0
 1139 045c 3623     		movs	r3, #54	@ tmp415,
 1140 045e 6B44     		add	r3, r3, sp	@ tmp415,
 1141 0460 1A78     		ldrb	r2, [r3]	@ D.7175, sended
 1142 0462 3623     		movs	r3, #54	@ tmp416,
 1143 0464 6B44     		add	r3, r3, sp	@ tmp416,
 1144 0466 0132     		adds	r2, r2, #1	@ tmp417,
 1145 0468 1A70     		strb	r2, [r3]	@ tmp418, sended
 1146              	.L40:
 555:src/main.c    **** 					}
 556:src/main.c    **** 
 557:src/main.c    **** 					if (sended == 2)
 1147              		.loc 2 557 0
 1148 046a 3623     		movs	r3, #54	@ tmp419,
 1149 046c 6B44     		add	r3, r3, sp	@ tmp419,
 1150 046e 1B78     		ldrb	r3, [r3]	@ tmp420, sended
 1151 0470 022B     		cmp	r3, #2	@ tmp420,
 1152 0472 0CD1     		bne	.L41	@,
 558:src/main.c    **** 					{
 559:src/main.c    **** 						Wait_ms(10000);
 1153              		.loc 2 559 0
 1154 0474 2E4B     		ldr	r3, .L50+52	@ tmp421,
 1155 0476 1800     		movs	r0, r3	@, tmp421
 1156 0478 FFF7FEFF 		bl	Wait_ms	@
 560:src/main.c    **** 						//apago modulo
 561:src/main.c    **** 						FuncsGSMShutdown ();
 1157              		.loc 2 561 0
 1158 047c FFF7FEFF 		bl	FuncsGSMShutdown	@
ARM GAS  /tmp/cc5pUpZ5.s 			page 49


 562:src/main.c    **** 						sended++;
 1159              		.loc 2 562 0
 1160 0480 3623     		movs	r3, #54	@ tmp422,
 1161 0482 6B44     		add	r3, r3, sp	@ tmp422,
 1162 0484 1A78     		ldrb	r2, [r3]	@ D.7175, sended
 1163 0486 3623     		movs	r3, #54	@ tmp423,
 1164 0488 6B44     		add	r3, r3, sp	@ tmp423,
 1165 048a 0132     		adds	r2, r2, #1	@ tmp424,
 1166 048c 1A70     		strb	r2, [r3]	@ tmp425, sended
 1167              	.L41:
 563:src/main.c    **** 					}
 564:src/main.c    **** 
 565:src/main.c    **** 					if ((FuncsGSMMessageFlagsAsk () & GSM_SET_POWER_DOWN) && (sended == 3))
 1168              		.loc 2 565 0
 1169 048e FFF7FEFF 		bl	FuncsGSMMessageFlagsAsk	@
 1170 0492 0300     		movs	r3, r0	@ tmp426,
 1171 0494 1A00     		movs	r2, r3	@ D.7174, D.7173
 1172 0496 8023     		movs	r3, #128	@ tmp444,
 1173 0498 DB01     		lsls	r3, r3, #7	@ tmp428, tmp444,
 1174 049a 1340     		ands	r3, r2	@ D.7174, D.7174
 1175 049c 1CD0     		beq	.L47	@,
 1176              		.loc 2 565 0 is_stmt 0 discriminator 1
 1177 049e 3623     		movs	r3, #54	@ tmp429,
 1178 04a0 6B44     		add	r3, r3, sp	@ tmp429,
 1179 04a2 1B78     		ldrb	r3, [r3]	@ tmp430, sended
 1180 04a4 032B     		cmp	r3, #3	@ tmp430,
 1181 04a6 17D1     		bne	.L47	@,
 566:src/main.c    **** 					{
 567:src/main.c    **** 						Usart2Send((char *) (const char *) "Pwr down!\r\n");
 1182              		.loc 2 567 0 is_stmt 1
 1183 04a8 224B     		ldr	r3, .L50+56	@ tmp431,
 1184 04aa 1800     		movs	r0, r3	@, tmp431
 1185 04ac FFF7FEFF 		bl	Usart2Send	@
 568:src/main.c    **** 						Wait_ms(60000);
 1186              		.loc 2 568 0
 1187 04b0 214B     		ldr	r3, .L50+60	@ tmp432,
 1188 04b2 1800     		movs	r0, r3	@, tmp432
 1189 04b4 FFF7FEFF 		bl	Wait_ms	@
 569:src/main.c    **** 						sended = 0;
 1190              		.loc 2 569 0
 1191 04b8 3623     		movs	r3, #54	@ tmp433,
 1192 04ba 6B44     		add	r3, r3, sp	@ tmp433,
 1193 04bc 0022     		movs	r2, #0	@ tmp434,
 1194 04be 1A70     		strb	r2, [r3]	@ tmp435, sended
 570:src/main.c    **** 					}
 571:src/main.c    **** 
 572:src/main.c    **** 					// fcalc = voltage;
 573:src/main.c    **** 					// fcalc = fcalc * KV;
 574:src/main.c    **** 					// volt_int = (short) fcalc;
 575:src/main.c    **** 					// fcalc = fcalc - volt_int;
 576:src/main.c    **** 					// fcalc = fcalc * 100;
 577:src/main.c    **** 					// volt_dec = (short) fcalc;
 578:src/main.c    **** 					//
 579:src/main.c    **** 					// sprintf(str, "%2d.%02d", volt_int, volt_dec);
 580:src/main.c    **** 					//
 581:src/main.c    **** 					// //sprintf(str, "%4d        ", voltage);
 582:src/main.c    **** 					// LCDTransmitStr(str);
ARM GAS  /tmp/cc5pUpZ5.s 			page 50


 583:src/main.c    **** 
 584:src/main.c    **** 				}
 585:src/main.c    **** 
 586:src/main.c    **** 				break;
 1195              		.loc 2 586 0
 1196 04c0 0AE0     		b	.L47	@
 1197              	.L23:
 587:src/main.c    **** 
 588:src/main.c    **** 			default:
 589:src/main.c    **** 				main_state = MAIN_INIT;
 1198              		.loc 2 589 0
 1199 04c2 3723     		movs	r3, #55	@ tmp436,
 1200 04c4 6B44     		add	r3, r3, sp	@ tmp436,
 1201 04c6 0022     		movs	r2, #0	@ tmp437,
 1202 04c8 1A70     		strb	r2, [r3]	@ tmp438, main_state
 590:src/main.c    **** 				break;
 1203              		.loc 2 590 0
 1204 04ca 06E0     		b	.L30	@
 1205              	.L44:
 493:src/main.c    **** 
 1206              		.loc 2 493 0
 1207 04cc C046     		nop
 1208 04ce 04E0     		b	.L30	@
 1209              	.L45:
 464:src/main.c    **** 
 1210              		.loc 2 464 0
 1211 04d0 C046     		nop
 1212 04d2 02E0     		b	.L30	@
 1213              	.L46:
 490:src/main.c    **** 
 1214              		.loc 2 490 0
 1215 04d4 C046     		nop
 1216 04d6 00E0     		b	.L30	@
 1217              	.L47:
 586:src/main.c    **** 
 1218              		.loc 2 586 0
 1219 04d8 C046     		nop
 1220              	.L30:
 591:src/main.c    **** 		}
 592:src/main.c    **** 
 593:src/main.c    **** 		//Cosas que dependen de las muestras
 594:src/main.c    **** 		if (seq_ready)
 1221              		.loc 2 594 0
 1222 04da 184B     		ldr	r3, .L50+64	@ tmp439,
 1223 04dc 1B78     		ldrb	r3, [r3]	@ tmp440, seq_ready
 1224 04de DBB2     		uxtb	r3, r3	@ D.7175, tmp440
 1225 04e0 002B     		cmp	r3, #0	@ D.7175,
 1226 04e2 06D0     		beq	.L42	@,
 595:src/main.c    **** 		{
 596:src/main.c    **** 			seq_ready = 0;
 1227              		.loc 2 596 0
 1228 04e4 154B     		ldr	r3, .L50+64	@ tmp441,
 1229 04e6 0022     		movs	r2, #0	@ tmp442,
 1230 04e8 1A70     		strb	r2, [r3]	@ tmp443, seq_ready
 597:src/main.c    **** 			UpdateVGrid ();
 1231              		.loc 2 597 0
 1232 04ea FFF7FEFF 		bl	UpdateVGrid	@
ARM GAS  /tmp/cc5pUpZ5.s 			page 51


 598:src/main.c    **** 			UpdateIGrid ();
 1233              		.loc 2 598 0
 1234 04ee FFF7FEFF 		bl	UpdateIGrid	@
 1235              	.L42:
 599:src/main.c    **** 		}
 600:src/main.c    **** 
 601:src/main.c    **** 		//Cosas que no dependen del estado del programa
 602:src/main.c    **** 		UpdateRelay ();
 1236              		.loc 2 602 0
 1237 04f2 FFF7FEFF 		bl	UpdateRelay	@
 603:src/main.c    **** 		// UpdatePhotoTransistor();
 604:src/main.c    **** #ifdef USE_GSM
 605:src/main.c    **** 		FuncsGSM();
 1238              		.loc 2 605 0
 1239 04f6 FFF7FEFF 		bl	FuncsGSM	@
 606:src/main.c    **** #endif
 607:src/main.c    **** 	}	//end while 1
 1240              		.loc 2 607 0
 1241 04fa 47E6     		b	.L43	@
 1242              	.L51:
 1243              		.align	2
 1244              	.L50:
 1245 04fc 00000000 		.word	power_vect
 1246 0500 00000000 		.word	power_2secs_acum
 1247 0504 00000000 		.word	power_2secs_index
 1248 0508 90F7AA95 		.word	-1783957616
 1249 050c 09BF843F 		.word	1065664265
 1250 0510 0000C842 		.word	1120403456
 1251 0514 C4000000 		.word	.LC24
 1252 0518 00000000 		.word	power_minutes
 1253 051c 00000000 		.word	power_minutes_index
 1254 0520 00000000 		.word	power_hours
 1255 0524 00000000 		.word	timer_standby
 1256 0528 D8000000 		.word	.LC29
 1257 052c EC000000 		.word	.LC31
 1258 0530 10270000 		.word	10000
 1259 0534 FC000000 		.word	.LC33
 1260 0538 60EA0000 		.word	60000
 1261 053c 00000000 		.word	seq_ready
 1262              		.cfi_endproc
 1263              	.LFE20:
 1264              		.size	main, .-main
 1265              		.section	.rodata
 1266              		.align	2
 1267              	.LC35:
 1268 0108 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1268      3A7B226D 
 1268      794E616D 
 1268      65223A22 
 1268      4E75636C 
 1269              		.align	2
 1270              	.LC37:
 1271 0120 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1271      54656D70 
 1271      65726174 
 1271      75726522 
 1271      3A256C75 
ARM GAS  /tmp/cc5pUpZ5.s 			page 52


 1272 0139 000000   		.align	2
 1273              	.LC39:
 1274 013c 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1274      48756D69 
 1274      64697479 
 1274      223A256C 
 1274      752E256C 
 1275 0152 0000     		.align	2
 1276              	.LC41:
 1277 0154 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1277      50726573 
 1277      73757265 
 1277      223A256C 
 1277      752E256C 
 1278 016a 0000     		.align	2
 1279              	.LC43:
 1280 016c 7D7D00   		.ascii	"}}\000"
 1281              		.section	.text.prepare_json_pkt,"ax",%progbits
 1282              		.align	2
 1283              		.global	prepare_json_pkt
 1284              		.code	16
 1285              		.thumb_func
 1286              		.type	prepare_json_pkt, %function
 1287              	prepare_json_pkt:
 1288              	.LFB21:
 608:src/main.c    **** 
 609:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 610:src/main.c    **** 
 611:src/main.c    **** 	while (1)
 612:src/main.c    **** 	{
 613:src/main.c    **** 		switch (main_state)
 614:src/main.c    **** 		{
 615:src/main.c    **** 			case MAIN_INIT:
 616:src/main.c    **** 				RelayOff();
 617:src/main.c    **** 				LED_OFF;
 618:src/main.c    **** 				FillPhotoBuffer();
 619:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 620:src/main.c    **** 				FillTempBuffer();
 621:src/main.c    **** #endif
 622:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 623:src/main.c    **** 				Update_TIM3_CH1 (0);
 624:src/main.c    **** #endif
 625:src/main.c    **** 				main_state = SYNCHRO_ADC;
 626:src/main.c    **** #ifdef ADC_WITH_INT
 627:src/main.c    **** 				seq_ready = 0;
 628:src/main.c    **** #endif
 629:src/main.c    **** 				break;
 630:src/main.c    **** 
 631:src/main.c    **** 			case SYNCHRO_ADC:
 632:src/main.c    **** #ifdef ADC_WITH_INT
 633:src/main.c    **** 				if (seq_ready)
 634:src/main.c    **** #endif
 635:src/main.c    **** 				{
 636:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 637:src/main.c    **** 				}
 638:src/main.c    **** 				break;
 639:src/main.c    **** 
ARM GAS  /tmp/cc5pUpZ5.s 			page 53


 640:src/main.c    **** 			case SET_ZERO_CURRENT:
 641:src/main.c    **** 				main_state = LAMP_OFF;
 642:src/main.c    **** 				break;
 643:src/main.c    **** 
 644:src/main.c    **** 			case LAMP_OFF:
 645:src/main.c    **** 				if (!tt_relay_on_off)
 646:src/main.c    **** 				{
 647:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 648:src/main.c    **** 					{
 649:src/main.c    **** 						main_state = LAMP_ON;
 650:src/main.c    **** 						tt_relay_on_off = 10000;
 651:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 652:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 653:src/main.c    **** 	#endif
 654:src/main.c    **** 
 655:src/main.c    **** 						RelayOn();
 656:src/main.c    **** 						LED_ON;
 657:src/main.c    **** 	#ifdef WITH_HYST
 658:src/main.c    **** 						hours = 0;
 659:src/main.c    **** 	#endif
 660:src/main.c    **** 					}
 661:src/main.c    **** 				}
 662:src/main.c    **** 				break;
 663:src/main.c    **** 
 664:src/main.c    **** 			case LAMP_ON:
 665:src/main.c    **** 				if (!tt_relay_on_off)
 666:src/main.c    **** 				{
 667:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 668:src/main.c    **** 					hyst = GetHysteresis (hours);
 669:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 670:src/main.c    **** 	#else
 671:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 672:src/main.c    **** 	#endif
 673:src/main.c    **** 					{
 674:src/main.c    **** 						main_state = LAMP_OFF;
 675:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 676:src/main.c    **** 						Update_TIM3_CH1 (0);
 677:src/main.c    **** 	#endif
 678:src/main.c    **** 						tt_relay_on_off = 10000;
 679:src/main.c    **** 						RelayOff();
 680:src/main.c    **** 						LED_OFF;
 681:src/main.c    **** 					}
 682:src/main.c    **** 				}
 683:src/main.c    **** 
 684:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 685:src/main.c    **** 				if (main_state == LAMP_ON)
 686:src/main.c    **** 				{
 687:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
 688:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
 689:src/main.c    **** 				}
 690:src/main.c    **** 	#endif
 691:src/main.c    **** 				break;
 692:src/main.c    **** 
 693:src/main.c    **** 			default:
 694:src/main.c    **** 				main_state = MAIN_INIT;
 695:src/main.c    **** 				break;
 696:src/main.c    **** 		}
ARM GAS  /tmp/cc5pUpZ5.s 			page 54


 697:src/main.c    **** 
 698:src/main.c    **** 		if (!timer_standby)
 699:src/main.c    **** 		{
 700:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 701:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
 702:src/main.c    **** #else
 703:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
 704:src/main.c    **** #endif
 705:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 706:src/main.c    **** 			Usart2Send(s_lcd);
 707:src/main.c    **** 			timer_standby = 2000;
 708:src/main.c    **** 		}
 709:src/main.c    **** 
 710:src/main.c    **** 		//Cosas que no dependen del estado del programa
 711:src/main.c    **** 		UpdateRelay ();
 712:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 713:src/main.c    **** 		UpdateTemp();
 714:src/main.c    **** #endif
 715:src/main.c    **** 		UpdatePhotoTransistor();
 716:src/main.c    **** 	}	//end while 1
 717:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
 718:src/main.c    **** #endif	//USE_REDONDA_BASIC
 719:src/main.c    **** 
 720:src/main.c    **** 
 721:src/main.c    **** #ifdef USE_MQTT_LIB
 722:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 723:src/main.c    **** 	int rc = 0;
 724:src/main.c    **** 	char buf[200];
 725:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
 726:src/main.c    **** 	char* payload = "mypayload";
 727:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
 728:src/main.c    **** 	int len = 0;
 729:src/main.c    **** 
 730:src/main.c    **** 	data.clientID.cstring = "me";
 731:src/main.c    **** 	data.keepAliveInterval = 20;
 732:src/main.c    **** 	data.cleansession = 1;
 733:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
 734:src/main.c    **** 
 735:src/main.c    **** 	topicString.cstring = "mytopic";
 736:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
 737:src/main.c    **** 
 738:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
 739:src/main.c    **** 	//falta abrir puerto
 740:src/main.c    **** 	//falta enviar al socket
 741:src/main.c    **** 	//falta cerrar socket
 742:src/main.c    **** #endif
 743:src/main.c    **** 
 744:src/main.c    **** //	//---------- Prueba USART2 --------//
 745:src/main.c    **** //
 746:src/main.c    **** //    while( 1 )
 747:src/main.c    **** //    {
 748:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 749:src/main.c    **** //        Wait_ms(3000);
 750:src/main.c    **** //    }
 751:src/main.c    **** //
 752:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
 753:src/main.c    **** 
ARM GAS  /tmp/cc5pUpZ5.s 			page 55


 754:src/main.c    **** 	//---------- Prueba con GPS --------//
 755:src/main.c    **** #ifdef USE_GPS
 756:src/main.c    **** 	Usart2SendSingle('M');
 757:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 758:src/main.c    **** 	Wait_ms(1000);
 759:src/main.c    **** 
 760:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
 761:src/main.c    **** 
 762:src/main.c    **** 	//mando reset al gps
 763:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
 764:src/main.c    **** 	GPSStartResetSM ();
 765:src/main.c    **** 	while (GPSStart() != RESP_OK);
 766:src/main.c    **** 
 767:src/main.c    **** 	//mando conf al gps
 768:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
 769:src/main.c    **** 	GPSConfigResetSM ();
 770:src/main.c    **** 	while (GPSConfig() != RESP_OK);
 771:src/main.c    **** 
 772:src/main.c    **** //	//mando reset factory al gps
 773:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
 774:src/main.c    **** //	GPSResetFactoryResetSM ();
 775:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
 776:src/main.c    **** 
 777:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
 778:src/main.c    **** //	timer_standby = 60000;
 779:src/main.c    **** //	while( timer_standby )
 780:src/main.c    **** 	while( 1 )
 781:src/main.c    **** 	{
 782:src/main.c    **** 		if (gps_pckt_ready)
 783:src/main.c    **** 		{
 784:src/main.c    **** 			gps_pckt_ready = 0;
 785:src/main.c    **** 			//Usart2SendSingle('P');
 786:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
 787:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
 788:src/main.c    **** 		}
 789:src/main.c    **** 
 790:src/main.c    **** 		GPSProcess();
 791:src/main.c    **** 	}
 792:src/main.c    **** #endif
 793:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
 794:src/main.c    **** 
 795:src/main.c    **** 	//---------- Prueba con GSM --------//
 796:src/main.c    **** #ifdef USE_GSM
 797:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
 798:src/main.c    **** 
 799:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 800:src/main.c    **** 
 801:src/main.c    **** 
 802:src/main.c    **** 	//Pruebo USART1
 803:src/main.c    **** //	while (1)
 804:src/main.c    **** //	{
 805:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
 806:src/main.c    **** //			Wait_ms(50);
 807:src/main.c    **** //	}
 808:src/main.c    **** 
 809:src/main.c    **** 
 810:src/main.c    **** 	//mando start al gsm
ARM GAS  /tmp/cc5pUpZ5.s 			page 56


 811:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 812:src/main.c    **** 	//GPSStartResetSM ();
 813:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 814:src/main.c    **** 	while (timer_standby)
 815:src/main.c    **** 	{
 816:src/main.c    **** 		i = GSM_Start();
 817:src/main.c    **** 		if (i == 2)
 818:src/main.c    **** 		{
 819:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 820:src/main.c    **** 			timer_standby = 0;
 821:src/main.c    **** 		}
 822:src/main.c    **** 
 823:src/main.c    **** 		if (i == 4)
 824:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 825:src/main.c    **** 	}
 826:src/main.c    **** 
 827:src/main.c    **** 	//mando conf al gsm
 828:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
 829:src/main.c    **** 	//GPSConfigResetSM ();
 830:src/main.c    **** 
 831:src/main.c    **** 	i = 0;
 832:src/main.c    **** 	while (i == 0)
 833:src/main.c    **** 	{
 834:src/main.c    **** 		ii = GSM_Config(1000);
 835:src/main.c    **** 
 836:src/main.c    **** 		if (ii == 2)
 837:src/main.c    **** 			i = 0;
 838:src/main.c    **** 		else if (ii > 2)
 839:src/main.c    **** 		{
 840:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
 841:src/main.c    **** 			while (1);
 842:src/main.c    **** 		}
 843:src/main.c    **** 
 844:src/main.c    **** 		GSMProcess();
 845:src/main.c    **** 		GSMReceive ();
 846:src/main.c    **** 
 847:src/main.c    **** 		if (gsm_pckt_ready)
 848:src/main.c    **** 		{
 849:src/main.c    **** 			gsm_pckt_ready = 0;
 850:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 851:src/main.c    **** 		}
 852:src/main.c    **** 
 853:src/main.c    **** 		if (LIGHT)
 854:src/main.c    **** 			LED_ON;
 855:src/main.c    **** 		else
 856:src/main.c    **** 			LED_OFF;
 857:src/main.c    **** 	}
 858:src/main.c    **** 
 859:src/main.c    **** 
 860:src/main.c    **** 	while( 1 )
 861:src/main.c    **** 	{
 862:src/main.c    **** 		if (gsm_pckt_ready)
 863:src/main.c    **** 		{
 864:src/main.c    **** 			gsm_pckt_ready = 0;
 865:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 866:src/main.c    **** 		}
 867:src/main.c    **** 
ARM GAS  /tmp/cc5pUpZ5.s 			page 57


 868:src/main.c    **** 		GSMProcess();
 869:src/main.c    **** 
 870:src/main.c    **** 		if (LIGHT)
 871:src/main.c    **** 			LED_ON;
 872:src/main.c    **** 
 873:src/main.c    **** 	}
 874:src/main.c    **** #endif
 875:src/main.c    **** 
 876:src/main.c    **** 	//---------- Pruebas con GSM GATEWAY --------//
 877:src/main.c    **** #ifdef USE_GSM_GATEWAY
 878:src/main.c    **** 	LED_OFF;
 879:src/main.c    **** 	for (i = 0; i < 6; i++)
 880:src/main.c    **** 	{
 881:src/main.c    **** 		if (LED)
 882:src/main.c    **** 			LED_OFF;
 883:src/main.c    **** 		else
 884:src/main.c    **** 			LED_ON;
 885:src/main.c    **** 
 886:src/main.c    **** 		Wait_ms (300);
 887:src/main.c    **** 	}
 888:src/main.c    **** 	Wait_ms (3000);
 889:src/main.c    **** 
 890:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 891:src/main.c    **** 
 892:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 893:src/main.c    **** 
 894:src/main.c    **** 
 895:src/main.c    **** 	//mando start al gsm
 896:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 897:src/main.c    **** 	//GPSStartResetSM ();
 898:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 899:src/main.c    **** 	while (timer_standby)
 900:src/main.c    **** 	{
 901:src/main.c    **** 		i = GSM_Start();
 902:src/main.c    **** 		if (i == 2)
 903:src/main.c    **** 		{
 904:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 905:src/main.c    **** 			timer_standby = 0;
 906:src/main.c    **** 		}
 907:src/main.c    **** 		else
 908:src/main.c    **** 
 909:src/main.c    **** 		if (i == 4)
 910:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 911:src/main.c    **** 	}
 912:src/main.c    **** 
 913:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 914:src/main.c    **** 
 915:src/main.c    **** 	while (1)
 916:src/main.c    **** 	{
 917:src/main.c    **** 		GSMProcess();
 918:src/main.c    **** 
 919:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 920:src/main.c    **** 		{
 921:src/main.c    **** 			usart2_pckt_ready = 0;
 922:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 923:src/main.c    **** 		}
 924:src/main.c    **** 
ARM GAS  /tmp/cc5pUpZ5.s 			page 58


 925:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 926:src/main.c    **** 		{
 927:src/main.c    **** 			gsm_pckt_ready = 0;
 928:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 929:src/main.c    **** 		}
 930:src/main.c    **** 
 931:src/main.c    **** 		if (LIGHT)
 932:src/main.c    **** 			LED_ON;
 933:src/main.c    **** 		else
 934:src/main.c    **** 			LED_OFF;
 935:src/main.c    **** 	}
 936:src/main.c    **** #endif
 937:src/main.c    **** 
 938:src/main.c    **** 	//---------- Fin Prueba con GSM GATEWAY --------//
 939:src/main.c    **** 
 940:src/main.c    **** 
 941:src/main.c    **** 
 942:src/main.c    **** 	//---------- Prueba temp --------//
 943:src/main.c    **** 	/*
 944:src/main.c    **** 	while (1)
 945:src/main.c    **** 	{
 946:src/main.c    **** 		local_meas = GetTemp();
 947:src/main.c    **** 		if (local_meas != local_meas_last)
 948:src/main.c    **** 		{
 949:src/main.c    **** 			LED_ON;
 950:src/main.c    **** 			local_meas_last = local_meas;
 951:src/main.c    **** 			LCD_2DO_RENGLON;
 952:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
 953:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
 954:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
 955:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
 956:src/main.c    **** 			LCDTransmitStr(s_lcd);
 957:src/main.c    **** 			LED_OFF;
 958:src/main.c    **** 		}
 959:src/main.c    **** 
 960:src/main.c    **** 		UpdateTemp();
 961:src/main.c    **** 	}
 962:src/main.c    **** 	*/
 963:src/main.c    **** 	//---------- Fin prueba temp --------//
 964:src/main.c    **** 
 965:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
 966:src/main.c    **** 	/*
 967:src/main.c    **** 	local_meas = 0;
 968:src/main.c    **** 	while (1)
 969:src/main.c    **** 	{
 970:src/main.c    **** 		LCD_2DO_RENGLON;
 971:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
 972:src/main.c    **** 		fcalc = local_meas;
 973:src/main.c    **** 		fcalc = fcalc * K_1TO10;
 974:src/main.c    **** 		one_int = (short) fcalc;
 975:src/main.c    **** 		fcalc = fcalc - one_int;
 976:src/main.c    **** 		fcalc = fcalc * 10;
 977:src/main.c    **** 		one_dec = (short) fcalc;
 978:src/main.c    **** 
 979:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
 980:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
 981:src/main.c    **** 		LCDTransmitStr(s_lcd);
ARM GAS  /tmp/cc5pUpZ5.s 			page 59


 982:src/main.c    **** 
 983:src/main.c    **** 		Wait_ms (1000);
 984:src/main.c    **** 		if (local_meas <= 255)
 985:src/main.c    **** 			local_meas = 0;
 986:src/main.c    **** 		else
 987:src/main.c    **** 			local_meas++;
 988:src/main.c    **** 	}
 989:src/main.c    **** 	*/
 990:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
 991:src/main.c    **** 
 992:src/main.c    **** 
 993:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
 994:src/main.c    **** 
 995:src/main.c    **** 	return 0;
 996:src/main.c    **** }
 997:src/main.c    **** 
 998:src/main.c    **** //--- End of Main ---//
 999:src/main.c    **** 
1000:src/main.c    **** 
1001:src/main.c    **** 
1002:src/main.c    **** 
1003:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
1004:src/main.c    **** {
 1289              		.loc 2 1004 0
 1290              		.cfi_startproc
 1291 0000 00B5     		push	{lr}	@
 1292              	.LCFI6:
 1293              		.cfi_def_cfa_offset 4
 1294              		.cfi_offset 14, -4
 1295 0002 97B0     		sub	sp, sp, #92	@,,
 1296              	.LCFI7:
 1297              		.cfi_def_cfa_offset 96
 1298 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
1005:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1299              		.loc 2 1005 0
 1300 0006 0123     		movs	r3, #1	@ tmp112,
 1301 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1302 000a 0223     		movs	r3, #2	@ tmp113,
 1303 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1304 000e 0323     		movs	r3, #3	@ tmp114,
 1305 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1306 0012 0423     		movs	r3, #4	@ tmp115,
 1307 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1308 0016 0523     		movs	r3, #5	@ tmp116,
 1309 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1310 001a 0623     		movs	r3, #6	@ tmp117,
 1311 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
1006:src/main.c    ****       char tempbuff[40];
1007:src/main.c    ****       volatile float HUMIDITY_Value;
1008:src/main.c    ****       volatile float TEMPERATURE_Value;
1009:src/main.c    ****       volatile float PRESSURE_Value;
1010:src/main.c    **** 
1011:src/main.c    **** 
1012:src/main.c    **** 
1013:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1312              		.loc 2 1013 0
 1313 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
ARM GAS  /tmp/cc5pUpZ5.s 			page 60


 1314 0020 1E4B     		ldr	r3, .L54	@ tmp119,
 1315 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1316 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1317 0026 1823     		movs	r3, #24	@ tmp122,
 1318 0028 1A00     		movs	r2, r3	@, tmp122
 1319 002a FFF7FEFF 		bl	memcpy	@
1014:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1015:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1016:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1320              		.loc 2 1016 0
 1321 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1322 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1323 0032 1B49     		ldr	r1, .L54+4	@ tmp127,
 1324 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1325 0036 FFF7FEFF 		bl	sprintf	@
1017:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1326              		.loc 2 1017 0
 1327 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1328 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1329 003e 1100     		movs	r1, r2	@, tmp129
 1330 0040 1800     		movs	r0, r3	@, tmp130
 1331 0042 FFF7FEFF 		bl	strcat	@
1018:src/main.c    **** 
1019:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1020:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1021:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1332              		.loc 2 1021 0
 1333 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1334 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1335 004a 1649     		ldr	r1, .L54+8	@ tmp133,
 1336 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1337 004e FFF7FEFF 		bl	sprintf	@
1022:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1338              		.loc 2 1022 0
 1339 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1340 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1341 0056 1100     		movs	r1, r2	@, tmp135
 1342 0058 1800     		movs	r0, r3	@, tmp136
 1343 005a FFF7FEFF 		bl	strcat	@
1023:src/main.c    **** 
1024:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1025:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1026:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1344              		.loc 2 1026 0
 1345 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1346 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1347 0062 1149     		ldr	r1, .L54+12	@ tmp139,
 1348 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1349 0066 FFF7FEFF 		bl	sprintf	@
1027:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1350              		.loc 2 1027 0
 1351 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1352 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1353 006e 1100     		movs	r1, r2	@, tmp141
 1354 0070 1800     		movs	r0, r3	@, tmp142
 1355 0072 FFF7FEFF 		bl	strcat	@
1028:src/main.c    **** 
ARM GAS  /tmp/cc5pUpZ5.s 			page 61


1029:src/main.c    **** 
1030:src/main.c    ****       strcat((char *)buffer,"}}");
 1356              		.loc 2 1030 0
 1357 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1358 0078 1800     		movs	r0, r3	@, tmp143
 1359 007a FFF7FEFF 		bl	strlen	@
 1360 007e 0300     		movs	r3, r0	@ tmp144,
 1361 0080 1A00     		movs	r2, r3	@ D.7193, tmp145
 1362 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1363 0084 9A18     		adds	r2, r3, r2	@ D.7194, tmp146, D.7193
 1364 0086 094B     		ldr	r3, .L54+16	@ tmp147,
 1365 0088 1000     		movs	r0, r2	@ tmp148, D.7194
 1366 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1367 008c 0323     		movs	r3, #3	@ tmp150,
 1368 008e 1A00     		movs	r2, r3	@, tmp150
 1369 0090 FFF7FEFF 		bl	memcpy	@
1031:src/main.c    **** 
1032:src/main.c    ****       return;
 1370              		.loc 2 1032 0
 1371 0094 C046     		nop
1033:src/main.c    **** }
 1372              		.loc 2 1033 0
 1373 0096 17B0     		add	sp, sp, #92	@,,
 1374              		@ sp needed	@
 1375 0098 00BD     		pop	{pc}
 1376              	.L55:
 1377 009a C046     		.align	2
 1378              	.L54:
 1379 009c 08010000 		.word	.LC35
 1380 00a0 20010000 		.word	.LC37
 1381 00a4 3C010000 		.word	.LC39
 1382 00a8 54010000 		.word	.LC41
 1383 00ac 6C010000 		.word	.LC43
 1384              		.cfi_endproc
 1385              	.LFE21:
 1386              		.size	prepare_json_pkt, .-prepare_json_pkt
 1387              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1388              		.align	2
 1389              		.global	TimingDelay_Decrement
 1390              		.code	16
 1391              		.thumb_func
 1392              		.type	TimingDelay_Decrement, %function
 1393              	TimingDelay_Decrement:
 1394              	.LFB22:
1034:src/main.c    **** 
1035:src/main.c    **** //void EXTI4_15_IRQHandler(void)
1036:src/main.c    **** //{
1037:src/main.c    **** //	unsigned short aux;
1038:src/main.c    **** //
1039:src/main.c    **** ////--- SOLO PRUEBA DE INTERRUPCIONES ---//
1040:src/main.c    **** ////	if (DMX_INPUT)
1041:src/main.c    **** ////		LED_ON;
1042:src/main.c    **** ////	else
1043:src/main.c    **** ////		LED_OFF;
1044:src/main.c    **** ////
1045:src/main.c    **** ////	EXTI->PR |= 0x0100;
1046:src/main.c    **** //
ARM GAS  /tmp/cc5pUpZ5.s 			page 62


1047:src/main.c    **** //	if(EXTI->PR & 0x0100)	//Line8
1048:src/main.c    **** //	{
1049:src/main.c    **** //
1050:src/main.c    **** //		//si no esta con el USART detecta el flanco	PONER TIMEOUT ACA?????
1051:src/main.c    **** //		if ((dmx_receive_flag == 0) || (dmx_timeout_timer == 0))
1052:src/main.c    **** //		//if (dmx_receive_flag == 0)
1053:src/main.c    **** //		{
1054:src/main.c    **** //			switch (signal_state)
1055:src/main.c    **** //			{
1056:src/main.c    **** //				case IDLE:
1057:src/main.c    **** //					if (!(DMX_INPUT))
1058:src/main.c    **** //					{
1059:src/main.c    **** //						//Activo timer en Falling.
1060:src/main.c    **** //						TIM14->CNT = 0;
1061:src/main.c    **** //						TIM14->CR1 |= 0x0001;
1062:src/main.c    **** //						signal_state++;
1063:src/main.c    **** //					}
1064:src/main.c    **** //					break;
1065:src/main.c    **** //
1066:src/main.c    **** //				case LOOK_FOR_BREAK:
1067:src/main.c    **** //					if (DMX_INPUT)
1068:src/main.c    **** //					{
1069:src/main.c    **** //						//Desactivo timer en Rising.
1070:src/main.c    **** //						aux = TIM14->CNT;
1071:src/main.c    **** //
1072:src/main.c    **** //						//reviso BREAK
1073:src/main.c    **** //						//if (((tim_counter_65ms) || (aux > 88)) && (tim_counter_65ms <= 20))
1074:src/main.c    **** //						if ((aux > 87) && (aux < 210))	//Consola STARLET 6
1075:src/main.c    **** //						//if ((aux > 87) && (aux < 2000))		//Consola marca CODE tiene break 1.88ms
1076:src/main.c    **** //						{
1077:src/main.c    **** //							LED_ON;
1078:src/main.c    **** //							//Activo timer para ver MARK.
1079:src/main.c    **** //							//TIM2->CNT = 0;
1080:src/main.c    **** //							//TIM2->CR1 |= 0x0001;
1081:src/main.c    **** //
1082:src/main.c    **** //							signal_state++;
1083:src/main.c    **** //							//tengo el break, activo el puerto serie
1084:src/main.c    **** //							DMX_channel_received = 0;
1085:src/main.c    **** //							//dmx_receive_flag = 1;
1086:src/main.c    **** //
1087:src/main.c    **** //							dmx_timeout_timer = DMX_TIMEOUT;		//activo el timer cuando prendo el puerto serie
1088:src/main.c    **** //							//USARTx_RX_ENA;
1089:src/main.c    **** //						}
1090:src/main.c    **** //						else	//falso disparo
1091:src/main.c    **** //							signal_state = IDLE;
1092:src/main.c    **** //					}
1093:src/main.c    **** //					else	//falso disparo
1094:src/main.c    **** //						signal_state = IDLE;
1095:src/main.c    **** //
1096:src/main.c    **** //					TIM14->CR1 &= 0xFFFE;
1097:src/main.c    **** //					break;
1098:src/main.c    **** //
1099:src/main.c    **** //				case LOOK_FOR_MARK:
1100:src/main.c    **** //					if ((!(DMX_INPUT)) && (dmx_timeout_timer))	//termino Mark after break
1101:src/main.c    **** //					{
1102:src/main.c    **** //						//ya tenia el serie habilitado
1103:src/main.c    **** //						//if ((aux > 7) && (aux < 12))
ARM GAS  /tmp/cc5pUpZ5.s 			page 63


1104:src/main.c    **** //						dmx_receive_flag = 1;
1105:src/main.c    **** //					}
1106:src/main.c    **** //					else	//falso disparo
1107:src/main.c    **** //					{
1108:src/main.c    **** //						//termine por timeout
1109:src/main.c    **** //						dmx_receive_flag = 0;
1110:src/main.c    **** //						//USARTx_RX_DISA;
1111:src/main.c    **** //					}
1112:src/main.c    **** //					signal_state = IDLE;
1113:src/main.c    **** //					LED_OFF;
1114:src/main.c    **** //					break;
1115:src/main.c    **** //
1116:src/main.c    **** //				default:
1117:src/main.c    **** //					signal_state = IDLE;
1118:src/main.c    **** //					break;
1119:src/main.c    **** //			}
1120:src/main.c    **** //		}
1121:src/main.c    **** //
1122:src/main.c    **** //		EXTI->PR |= 0x0100;
1123:src/main.c    **** //	}
1124:src/main.c    **** //}
1125:src/main.c    **** 
1126:src/main.c    **** void TimingDelay_Decrement(void)
1127:src/main.c    **** {
 1395              		.loc 2 1127 0
 1396              		.cfi_startproc
 1397 0000 10B5     		push	{r4, lr}	@
 1398              	.LCFI8:
 1399              		.cfi_def_cfa_offset 8
 1400              		.cfi_offset 4, -8
 1401              		.cfi_offset 14, -4
1128:src/main.c    **** 	if (wait_ms_var)
 1402              		.loc 2 1128 0
 1403 0002 4B4B     		ldr	r3, .L69	@ tmp145,
 1404 0004 1B88     		ldrh	r3, [r3]	@ tmp146, wait_ms_var
 1405 0006 9BB2     		uxth	r3, r3	@ D.7207, tmp146
 1406 0008 002B     		cmp	r3, #0	@ D.7207,
 1407 000a 06D0     		beq	.L57	@,
1129:src/main.c    **** 		wait_ms_var--;
 1408              		.loc 2 1129 0
 1409 000c 484B     		ldr	r3, .L69	@ tmp147,
 1410 000e 1B88     		ldrh	r3, [r3]	@ tmp148, wait_ms_var
 1411 0010 9BB2     		uxth	r3, r3	@ D.7207, tmp148
 1412 0012 013B     		subs	r3, r3, #1	@ tmp149,
 1413 0014 9AB2     		uxth	r2, r3	@ D.7207, tmp149
 1414 0016 464B     		ldr	r3, .L69	@ tmp150,
 1415 0018 1A80     		strh	r2, [r3]	@ tmp151, wait_ms_var
 1416              	.L57:
1130:src/main.c    **** 
1131:src/main.c    **** //	if (display_timer)
1132:src/main.c    **** //		display_timer--;
1133:src/main.c    **** 
1134:src/main.c    **** 	if (timer_standby)
 1417              		.loc 2 1134 0
 1418 001a 464B     		ldr	r3, .L69+4	@ tmp152,
 1419 001c 1B88     		ldrh	r3, [r3]	@ tmp153, timer_standby
 1420 001e 9BB2     		uxth	r3, r3	@ D.7207, tmp153
ARM GAS  /tmp/cc5pUpZ5.s 			page 64


 1421 0020 002B     		cmp	r3, #0	@ D.7207,
 1422 0022 06D0     		beq	.L58	@,
1135:src/main.c    **** 		timer_standby--;
 1423              		.loc 2 1135 0
 1424 0024 434B     		ldr	r3, .L69+4	@ tmp154,
 1425 0026 1B88     		ldrh	r3, [r3]	@ tmp155, timer_standby
 1426 0028 9BB2     		uxth	r3, r3	@ D.7207, tmp155
 1427 002a 013B     		subs	r3, r3, #1	@ tmp156,
 1428 002c 9AB2     		uxth	r2, r3	@ D.7207, tmp156
 1429 002e 414B     		ldr	r3, .L69+4	@ tmp157,
 1430 0030 1A80     		strh	r2, [r3]	@ tmp158, timer_standby
 1431              	.L58:
1136:src/main.c    **** 
1137:src/main.c    **** 	if (acswitch_timer)
 1432              		.loc 2 1137 0
 1433 0032 414B     		ldr	r3, .L69+8	@ tmp159,
 1434 0034 1B78     		ldrb	r3, [r3]	@ tmp160, acswitch_timer
 1435 0036 DBB2     		uxtb	r3, r3	@ D.7208, tmp160
 1436 0038 002B     		cmp	r3, #0	@ D.7208,
 1437 003a 06D0     		beq	.L59	@,
1138:src/main.c    **** 		acswitch_timer--;
 1438              		.loc 2 1138 0
 1439 003c 3E4B     		ldr	r3, .L69+8	@ tmp161,
 1440 003e 1B78     		ldrb	r3, [r3]	@ tmp162, acswitch_timer
 1441 0040 DBB2     		uxtb	r3, r3	@ D.7208, tmp162
 1442 0042 013B     		subs	r3, r3, #1	@ tmp163,
 1443 0044 DAB2     		uxtb	r2, r3	@ D.7208, tmp163
 1444 0046 3C4B     		ldr	r3, .L69+8	@ tmp164,
 1445 0048 1A70     		strb	r2, [r3]	@ tmp165, acswitch_timer
 1446              	.L59:
1139:src/main.c    **** 
1140:src/main.c    **** #ifdef USE_REDONDA_BASIC
1141:src/main.c    **** 	if (tt_take_photo_sample)
 1447              		.loc 2 1141 0
 1448 004a 3C4B     		ldr	r3, .L69+12	@ tmp166,
 1449 004c 1B88     		ldrh	r3, [r3]	@ tmp167, tt_take_photo_sample
 1450 004e 9BB2     		uxth	r3, r3	@ D.7207, tmp167
 1451 0050 002B     		cmp	r3, #0	@ D.7207,
 1452 0052 06D0     		beq	.L60	@,
1142:src/main.c    **** 		tt_take_photo_sample--;
 1453              		.loc 2 1142 0
 1454 0054 394B     		ldr	r3, .L69+12	@ tmp168,
 1455 0056 1B88     		ldrh	r3, [r3]	@ tmp169, tt_take_photo_sample
 1456 0058 9BB2     		uxth	r3, r3	@ D.7207, tmp169
 1457 005a 013B     		subs	r3, r3, #1	@ tmp170,
 1458 005c 9AB2     		uxth	r2, r3	@ D.7207, tmp170
 1459 005e 374B     		ldr	r3, .L69+12	@ tmp171,
 1460 0060 1A80     		strh	r2, [r3]	@ tmp172, tt_take_photo_sample
 1461              	.L60:
1143:src/main.c    **** 
1144:src/main.c    **** 	if (tt_relay_on_off)
 1462              		.loc 2 1144 0
 1463 0062 374B     		ldr	r3, .L69+16	@ tmp173,
 1464 0064 1B88     		ldrh	r3, [r3]	@ tmp174, tt_relay_on_off
 1465 0066 9BB2     		uxth	r3, r3	@ D.7207, tmp174
 1466 0068 002B     		cmp	r3, #0	@ D.7207,
 1467 006a 06D0     		beq	.L61	@,
ARM GAS  /tmp/cc5pUpZ5.s 			page 65


1145:src/main.c    **** 		tt_relay_on_off--;
 1468              		.loc 2 1145 0
 1469 006c 344B     		ldr	r3, .L69+16	@ tmp175,
 1470 006e 1B88     		ldrh	r3, [r3]	@ tmp176, tt_relay_on_off
 1471 0070 9BB2     		uxth	r3, r3	@ D.7207, tmp176
 1472 0072 013B     		subs	r3, r3, #1	@ tmp177,
 1473 0074 9AB2     		uxth	r2, r3	@ D.7207, tmp177
 1474 0076 324B     		ldr	r3, .L69+16	@ tmp178,
 1475 0078 1A80     		strh	r2, [r3]	@ tmp179, tt_relay_on_off
 1476              	.L61:
1146:src/main.c    **** #endif
1147:src/main.c    **** 
1148:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1149:src/main.c    **** 	if (tt_take_temp_sample)
1150:src/main.c    **** 		tt_take_temp_sample--;
1151:src/main.c    **** #endif
1152:src/main.c    **** 
1153:src/main.c    **** 	if (take_temp_sample)
 1477              		.loc 2 1153 0
 1478 007a 324B     		ldr	r3, .L69+20	@ tmp180,
 1479 007c 1B88     		ldrh	r3, [r3]	@ tmp181, take_temp_sample
 1480 007e 9BB2     		uxth	r3, r3	@ D.7207, tmp181
 1481 0080 002B     		cmp	r3, #0	@ D.7207,
 1482 0082 06D0     		beq	.L62	@,
1154:src/main.c    **** 		take_temp_sample--;
 1483              		.loc 2 1154 0
 1484 0084 2F4B     		ldr	r3, .L69+20	@ tmp182,
 1485 0086 1B88     		ldrh	r3, [r3]	@ tmp183, take_temp_sample
 1486 0088 9BB2     		uxth	r3, r3	@ D.7207, tmp183
 1487 008a 013B     		subs	r3, r3, #1	@ tmp184,
 1488 008c 9AB2     		uxth	r2, r3	@ D.7207, tmp184
 1489 008e 2D4B     		ldr	r3, .L69+20	@ tmp185,
 1490 0090 1A80     		strh	r2, [r3]	@ tmp186, take_temp_sample
 1491              	.L62:
1155:src/main.c    **** 
1156:src/main.c    **** 	if (filter_timer)
 1492              		.loc 2 1156 0
 1493 0092 2D4B     		ldr	r3, .L69+24	@ tmp187,
 1494 0094 1B78     		ldrb	r3, [r3]	@ tmp188, filter_timer
 1495 0096 DBB2     		uxtb	r3, r3	@ D.7208, tmp188
 1496 0098 002B     		cmp	r3, #0	@ D.7208,
 1497 009a 06D0     		beq	.L63	@,
1157:src/main.c    **** 		filter_timer--;
 1498              		.loc 2 1157 0
 1499 009c 2A4B     		ldr	r3, .L69+24	@ tmp189,
 1500 009e 1B78     		ldrb	r3, [r3]	@ tmp190, filter_timer
 1501 00a0 DBB2     		uxtb	r3, r3	@ D.7208, tmp190
 1502 00a2 013B     		subs	r3, r3, #1	@ tmp191,
 1503 00a4 DAB2     		uxtb	r2, r3	@ D.7208, tmp191
 1504 00a6 284B     		ldr	r3, .L69+24	@ tmp192,
 1505 00a8 1A70     		strb	r2, [r3]	@ tmp193, filter_timer
 1506              	.L63:
1158:src/main.c    **** 
1159:src/main.c    **** 	//cuenta de a 1 minuto
1160:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 1507              		.loc 2 1160 0
 1508 00aa 284B     		ldr	r3, .L69+28	@ tmp194,
ARM GAS  /tmp/cc5pUpZ5.s 			page 66


 1509 00ac 1B88     		ldrh	r3, [r3]	@ tmp195, secs
 1510 00ae 9BB2     		uxth	r3, r3	@ D.7207, tmp195
 1511 00b0 274A     		ldr	r2, .L69+32	@ tmp196,
 1512 00b2 9342     		cmp	r3, r2	@ D.7207, tmp196
 1513 00b4 0AD9     		bls	.L64	@,
1161:src/main.c    **** 	{
1162:src/main.c    **** 		minutes++;
 1514              		.loc 2 1162 0
 1515 00b6 274B     		ldr	r3, .L69+36	@ tmp197,
 1516 00b8 1B78     		ldrb	r3, [r3]	@ tmp198, minutes
 1517 00ba DBB2     		uxtb	r3, r3	@ D.7208, tmp198
 1518 00bc 0133     		adds	r3, r3, #1	@ tmp199,
 1519 00be DAB2     		uxtb	r2, r3	@ D.7208, tmp199
 1520 00c0 244B     		ldr	r3, .L69+36	@ tmp200,
 1521 00c2 1A70     		strb	r2, [r3]	@ tmp201, minutes
1163:src/main.c    **** 		secs = 0;
 1522              		.loc 2 1163 0
 1523 00c4 214B     		ldr	r3, .L69+28	@ tmp202,
 1524 00c6 0022     		movs	r2, #0	@ tmp203,
 1525 00c8 1A80     		strh	r2, [r3]	@ tmp204, secs
 1526 00ca 06E0     		b	.L65	@
 1527              	.L64:
1164:src/main.c    **** 	}
1165:src/main.c    **** 	else
1166:src/main.c    **** 		secs++;
 1528              		.loc 2 1166 0
 1529 00cc 1F4B     		ldr	r3, .L69+28	@ tmp205,
 1530 00ce 1B88     		ldrh	r3, [r3]	@ tmp206, secs
 1531 00d0 9BB2     		uxth	r3, r3	@ D.7207, tmp206
 1532 00d2 0133     		adds	r3, r3, #1	@ tmp207,
 1533 00d4 9AB2     		uxth	r2, r3	@ D.7207, tmp207
 1534 00d6 1D4B     		ldr	r3, .L69+28	@ tmp208,
 1535 00d8 1A80     		strh	r2, [r3]	@ tmp209, secs
 1536              	.L65:
1167:src/main.c    **** 
1168:src/main.c    **** 	if (minutes > 60)
 1537              		.loc 2 1168 0
 1538 00da 1E4B     		ldr	r3, .L69+36	@ tmp210,
 1539 00dc 1B78     		ldrb	r3, [r3]	@ tmp211, minutes
 1540 00de DBB2     		uxtb	r3, r3	@ D.7208, tmp211
 1541 00e0 3C2B     		cmp	r3, #60	@ D.7208,
 1542 00e2 09D9     		bls	.L66	@,
1169:src/main.c    **** 	{
1170:src/main.c    **** 		hours++;
 1543              		.loc 2 1170 0
 1544 00e4 1C4B     		ldr	r3, .L69+40	@ tmp212,
 1545 00e6 1B78     		ldrb	r3, [r3]	@ tmp213, hours
 1546 00e8 DBB2     		uxtb	r3, r3	@ D.7208, tmp213
 1547 00ea 0133     		adds	r3, r3, #1	@ tmp214,
 1548 00ec DAB2     		uxtb	r2, r3	@ D.7208, tmp214
 1549 00ee 1A4B     		ldr	r3, .L69+40	@ tmp215,
 1550 00f0 1A70     		strb	r2, [r3]	@ tmp216, hours
1171:src/main.c    **** 		minutes = 0;
 1551              		.loc 2 1171 0
 1552 00f2 184B     		ldr	r3, .L69+36	@ tmp217,
 1553 00f4 0022     		movs	r2, #0	@ tmp218,
 1554 00f6 1A70     		strb	r2, [r3]	@ tmp219, minutes
ARM GAS  /tmp/cc5pUpZ5.s 			page 67


 1555              	.L66:
1172:src/main.c    **** 	}
1173:src/main.c    **** 
1174:src/main.c    **** 
1175:src/main.c    **** #ifdef USE_MQTT_LIB
1176:src/main.c    **** 	//timer del MQTT
1177:src/main.c    **** 	SysTickIntHandler();
1178:src/main.c    **** #endif
1179:src/main.c    **** 
1180:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1181:src/main.c    **** 	if (usart1_mini_timeout)
 1556              		.loc 2 1181 0
 1557 00f8 184B     		ldr	r3, .L69+44	@ tmp220,
 1558 00fa 1B78     		ldrb	r3, [r3]	@ tmp221, usart1_mini_timeout
 1559 00fc DBB2     		uxtb	r3, r3	@ D.7208, tmp221
 1560 00fe 002B     		cmp	r3, #0	@ D.7208,
 1561 0100 06D0     		beq	.L67	@,
1182:src/main.c    **** 		usart1_mini_timeout--;
 1562              		.loc 2 1182 0
 1563 0102 164B     		ldr	r3, .L69+44	@ tmp222,
 1564 0104 1B78     		ldrb	r3, [r3]	@ tmp223, usart1_mini_timeout
 1565 0106 DBB2     		uxtb	r3, r3	@ D.7208, tmp223
 1566 0108 013B     		subs	r3, r3, #1	@ tmp224,
 1567 010a DAB2     		uxtb	r2, r3	@ D.7208, tmp224
 1568 010c 134B     		ldr	r3, .L69+44	@ tmp225,
 1569 010e 1A70     		strb	r2, [r3]	@ tmp226, usart1_mini_timeout
 1570              	.L67:
1183:src/main.c    **** 	if (usart2_mini_timeout)
 1571              		.loc 2 1183 0
 1572 0110 134B     		ldr	r3, .L69+48	@ tmp227,
 1573 0112 1B78     		ldrb	r3, [r3]	@ tmp228, usart2_mini_timeout
 1574 0114 DBB2     		uxtb	r3, r3	@ D.7208, tmp228
 1575 0116 002B     		cmp	r3, #0	@ D.7208,
 1576 0118 06D0     		beq	.L68	@,
1184:src/main.c    **** 		usart2_mini_timeout--;
 1577              		.loc 2 1184 0
 1578 011a 114B     		ldr	r3, .L69+48	@ tmp229,
 1579 011c 1B78     		ldrb	r3, [r3]	@ tmp230, usart2_mini_timeout
 1580 011e DBB2     		uxtb	r3, r3	@ D.7208, tmp230
 1581 0120 013B     		subs	r3, r3, #1	@ tmp231,
 1582 0122 DAB2     		uxtb	r2, r3	@ D.7208, tmp231
 1583 0124 0E4B     		ldr	r3, .L69+48	@ tmp232,
 1584 0126 1A70     		strb	r2, [r3]	@ tmp233, usart2_mini_timeout
 1585              	.L68:
1185:src/main.c    **** #endif
1186:src/main.c    **** #ifdef USE_GPS
1187:src/main.c    **** 	GPSTimeoutCounters ();
1188:src/main.c    **** #endif
1189:src/main.c    **** 
1190:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1191:src/main.c    **** 	GSMTimeoutCounters ();
 1586              		.loc 2 1191 0
 1587 0128 FFF7FEFF 		bl	GSMTimeoutCounters	@
1192:src/main.c    **** #endif
1193:src/main.c    **** }
 1588              		.loc 2 1193 0
 1589 012c C046     		nop
ARM GAS  /tmp/cc5pUpZ5.s 			page 68


 1590              		@ sp needed	@
 1591 012e 10BD     		pop	{r4, pc}
 1592              	.L70:
 1593              		.align	2
 1594              	.L69:
 1595 0130 00000000 		.word	wait_ms_var
 1596 0134 00000000 		.word	timer_standby
 1597 0138 00000000 		.word	acswitch_timer
 1598 013c 00000000 		.word	tt_take_photo_sample
 1599 0140 00000000 		.word	tt_relay_on_off
 1600 0144 00000000 		.word	take_temp_sample
 1601 0148 00000000 		.word	filter_timer
 1602 014c 00000000 		.word	secs
 1603 0150 5FEA0000 		.word	59999
 1604 0154 00000000 		.word	minutes
 1605 0158 00000000 		.word	hours
 1606 015c 00000000 		.word	usart1_mini_timeout
 1607 0160 00000000 		.word	usart2_mini_timeout
 1608              		.cfi_endproc
 1609              	.LFE22:
 1610              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1611              		.text
 1612              	.Letext0:
 1613              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1614              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1615              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1616              		.file 6 "src/hard.h"
 1617              		.file 7 "src/flash_program.h"
 1618              		.file 8 "src/tcp_transceiver.h"
 1619              		.section	.debug_info,"",%progbits
 1620              	.Ldebug_info0:
 1621 0000 E10D0000 		.4byte	0xde1
 1622 0004 0200     		.2byte	0x2
 1623 0006 00000000 		.4byte	.Ldebug_abbrev0
 1624 000a 04       		.byte	0x4
 1625 000b 01       		.uleb128 0x1
 1626 000c E5080000 		.4byte	.LASF197
 1627 0010 0C       		.byte	0xc
 1628 0011 B2080000 		.4byte	.LASF198
 1629 0015 2B070000 		.4byte	.LASF199
 1630 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1631 001d 00000000 		.4byte	0
 1632 0021 00000000 		.4byte	0
 1633 0025 00000000 		.4byte	.Ldebug_line0
 1634 0029 02       		.uleb128 0x2
 1635 002a 8C050000 		.4byte	.LASF109
 1636 002e 01       		.byte	0x1
 1637 002f 06010000 		.4byte	0x106
 1638 0033 03       		.byte	0x3
 1639 0034 C7       		.byte	0xc7
 1640 0035 06010000 		.4byte	0x106
 1641 0039 03       		.uleb128 0x3
 1642 003a 16060000 		.4byte	.LASF0
 1643 003e 72       		.sleb128 -14
 1644 003f 03       		.uleb128 0x3
 1645 0040 A6090000 		.4byte	.LASF1
 1646 0044 73       		.sleb128 -13
ARM GAS  /tmp/cc5pUpZ5.s 			page 69


 1647 0045 03       		.uleb128 0x3
 1648 0046 D3000000 		.4byte	.LASF2
 1649 004a 7B       		.sleb128 -5
 1650 004b 03       		.uleb128 0x3
 1651 004c B2010000 		.4byte	.LASF3
 1652 0050 7E       		.sleb128 -2
 1653 0051 03       		.uleb128 0x3
 1654 0052 D2060000 		.4byte	.LASF4
 1655 0056 7F       		.sleb128 -1
 1656 0057 04       		.uleb128 0x4
 1657 0058 37040000 		.4byte	.LASF5
 1658 005c 00       		.byte	0
 1659 005d 04       		.uleb128 0x4
 1660 005e F7040000 		.4byte	.LASF6
 1661 0062 01       		.byte	0x1
 1662 0063 04       		.uleb128 0x4
 1663 0064 BC050000 		.4byte	.LASF7
 1664 0068 02       		.byte	0x2
 1665 0069 04       		.uleb128 0x4
 1666 006a 3A010000 		.4byte	.LASF8
 1667 006e 03       		.byte	0x3
 1668 006f 04       		.uleb128 0x4
 1669 0070 CF010000 		.4byte	.LASF9
 1670 0074 04       		.byte	0x4
 1671 0075 04       		.uleb128 0x4
 1672 0076 7E010000 		.4byte	.LASF10
 1673 007a 05       		.byte	0x5
 1674 007b 04       		.uleb128 0x4
 1675 007c B0000000 		.4byte	.LASF11
 1676 0080 06       		.byte	0x6
 1677 0081 04       		.uleb128 0x4
 1678 0082 86000000 		.4byte	.LASF12
 1679 0086 07       		.byte	0x7
 1680 0087 04       		.uleb128 0x4
 1681 0088 C2040000 		.4byte	.LASF13
 1682 008c 08       		.byte	0x8
 1683 008d 04       		.uleb128 0x4
 1684 008e 7C030000 		.4byte	.LASF14
 1685 0092 09       		.byte	0x9
 1686 0093 04       		.uleb128 0x4
 1687 0094 A6070000 		.4byte	.LASF15
 1688 0098 0A       		.byte	0xa
 1689 0099 04       		.uleb128 0x4
 1690 009a 73060000 		.4byte	.LASF16
 1691 009e 0B       		.byte	0xb
 1692 009f 04       		.uleb128 0x4
 1693 00a0 1B050000 		.4byte	.LASF17
 1694 00a4 0C       		.byte	0xc
 1695 00a5 04       		.uleb128 0x4
 1696 00a6 D5040000 		.4byte	.LASF18
 1697 00aa 0D       		.byte	0xd
 1698 00ab 04       		.uleb128 0x4
 1699 00ac 33060000 		.4byte	.LASF19
 1700 00b0 0E       		.byte	0xe
 1701 00b1 04       		.uleb128 0x4
 1702 00b2 12070000 		.4byte	.LASF20
 1703 00b6 0F       		.byte	0xf
ARM GAS  /tmp/cc5pUpZ5.s 			page 70


 1704 00b7 04       		.uleb128 0x4
 1705 00b8 72030000 		.4byte	.LASF21
 1706 00bc 10       		.byte	0x10
 1707 00bd 04       		.uleb128 0x4
 1708 00be C3070000 		.4byte	.LASF22
 1709 00c2 11       		.byte	0x11
 1710 00c3 04       		.uleb128 0x4
 1711 00c4 9B070000 		.4byte	.LASF23
 1712 00c8 13       		.byte	0x13
 1713 00c9 04       		.uleb128 0x4
 1714 00ca A7030000 		.4byte	.LASF24
 1715 00ce 14       		.byte	0x14
 1716 00cf 04       		.uleb128 0x4
 1717 00d0 0C010000 		.4byte	.LASF25
 1718 00d4 15       		.byte	0x15
 1719 00d5 04       		.uleb128 0x4
 1720 00d6 5C060000 		.4byte	.LASF26
 1721 00da 16       		.byte	0x16
 1722 00db 04       		.uleb128 0x4
 1723 00dc A8010000 		.4byte	.LASF27
 1724 00e0 17       		.byte	0x17
 1725 00e1 04       		.uleb128 0x4
 1726 00e2 F6060000 		.4byte	.LASF28
 1727 00e6 18       		.byte	0x18
 1728 00e7 04       		.uleb128 0x4
 1729 00e8 1A020000 		.4byte	.LASF29
 1730 00ec 19       		.byte	0x19
 1731 00ed 04       		.uleb128 0x4
 1732 00ee 67080000 		.4byte	.LASF30
 1733 00f2 1A       		.byte	0x1a
 1734 00f3 04       		.uleb128 0x4
 1735 00f4 0A060000 		.4byte	.LASF31
 1736 00f8 1B       		.byte	0x1b
 1737 00f9 04       		.uleb128 0x4
 1738 00fa 9A020000 		.4byte	.LASF32
 1739 00fe 1C       		.byte	0x1c
 1740 00ff 04       		.uleb128 0x4
 1741 0100 DF060000 		.4byte	.LASF33
 1742 0104 1E       		.byte	0x1e
 1743 0105 00       		.byte	0
 1744 0106 05       		.uleb128 0x5
 1745 0107 01       		.byte	0x1
 1746 0108 06       		.byte	0x6
 1747 0109 A6080000 		.4byte	.LASF36
 1748 010d 06       		.uleb128 0x6
 1749 010e 84020000 		.4byte	.LASF34
 1750 0112 03       		.byte	0x3
 1751 0113 5F01     		.2byte	0x15f
 1752 0115 29000000 		.4byte	0x29
 1753 0119 07       		.uleb128 0x7
 1754 011a 95060000 		.4byte	.LASF35
 1755 011e 04       		.byte	0x4
 1756 011f 1D       		.byte	0x1d
 1757 0120 24010000 		.4byte	0x124
 1758 0124 05       		.uleb128 0x5
 1759 0125 01       		.byte	0x1
 1760 0126 08       		.byte	0x8
ARM GAS  /tmp/cc5pUpZ5.s 			page 71


 1761 0127 D1070000 		.4byte	.LASF37
 1762 012b 05       		.uleb128 0x5
 1763 012c 02       		.byte	0x2
 1764 012d 05       		.byte	0x5
 1765 012e F7050000 		.4byte	.LASF38
 1766 0132 07       		.uleb128 0x7
 1767 0133 52020000 		.4byte	.LASF39
 1768 0137 04       		.byte	0x4
 1769 0138 2B       		.byte	0x2b
 1770 0139 3D010000 		.4byte	0x13d
 1771 013d 05       		.uleb128 0x5
 1772 013e 02       		.byte	0x2
 1773 013f 07       		.byte	0x7
 1774 0140 D2080000 		.4byte	.LASF40
 1775 0144 07       		.uleb128 0x7
 1776 0145 28010000 		.4byte	.LASF41
 1777 0149 04       		.byte	0x4
 1778 014a 3F       		.byte	0x3f
 1779 014b 4F010000 		.4byte	0x14f
 1780 014f 05       		.uleb128 0x5
 1781 0150 04       		.byte	0x4
 1782 0151 05       		.byte	0x5
 1783 0152 01060000 		.4byte	.LASF42
 1784 0156 07       		.uleb128 0x7
 1785 0157 E8070000 		.4byte	.LASF43
 1786 015b 04       		.byte	0x4
 1787 015c 41       		.byte	0x41
 1788 015d 61010000 		.4byte	0x161
 1789 0161 05       		.uleb128 0x5
 1790 0162 04       		.byte	0x4
 1791 0163 07       		.byte	0x7
 1792 0164 00070000 		.4byte	.LASF44
 1793 0168 05       		.uleb128 0x5
 1794 0169 08       		.byte	0x8
 1795 016a 05       		.byte	0x5
 1796 016b 29040000 		.4byte	.LASF45
 1797 016f 05       		.uleb128 0x5
 1798 0170 08       		.byte	0x8
 1799 0171 07       		.byte	0x7
 1800 0172 24020000 		.4byte	.LASF46
 1801 0176 08       		.uleb128 0x8
 1802 0177 04       		.byte	0x4
 1803 0178 05       		.byte	0x5
 1804 0179 696E7400 		.ascii	"int\000"
 1805 017d 05       		.uleb128 0x5
 1806 017e 04       		.byte	0x4
 1807 017f 07       		.byte	0x7
 1808 0180 FA000000 		.4byte	.LASF47
 1809 0184 07       		.uleb128 0x7
 1810 0185 B2030000 		.4byte	.LASF48
 1811 0189 05       		.byte	0x5
 1812 018a 14       		.byte	0x14
 1813 018b 19010000 		.4byte	0x119
 1814 018f 07       		.uleb128 0x7
 1815 0190 74050000 		.4byte	.LASF49
 1816 0194 05       		.byte	0x5
 1817 0195 1A       		.byte	0x1a
ARM GAS  /tmp/cc5pUpZ5.s 			page 72


 1818 0196 32010000 		.4byte	0x132
 1819 019a 07       		.uleb128 0x7
 1820 019b 6F070000 		.4byte	.LASF50
 1821 019f 05       		.byte	0x5
 1822 01a0 1F       		.byte	0x1f
 1823 01a1 44010000 		.4byte	0x144
 1824 01a5 07       		.uleb128 0x7
 1825 01a6 E7010000 		.4byte	.LASF51
 1826 01aa 05       		.byte	0x5
 1827 01ab 20       		.byte	0x20
 1828 01ac 56010000 		.4byte	0x156
 1829 01b0 09       		.uleb128 0x9
 1830 01b1 2003     		.2byte	0x320
 1831 01b3 01       		.byte	0x1
 1832 01b4 71       		.byte	0x71
 1833 01b5 4D020000 		.4byte	0x24d
 1834 01b9 0A       		.uleb128 0xa
 1835 01ba F0010000 		.4byte	.LASF52
 1836 01be 01       		.byte	0x1
 1837 01bf 73       		.byte	0x73
 1838 01c0 64020000 		.4byte	0x264
 1839 01c4 02       		.byte	0x2
 1840 01c5 23       		.byte	0x23
 1841 01c6 00       		.uleb128 0
 1842 01c7 0A       		.uleb128 0xa
 1843 01c8 C5050000 		.4byte	.LASF53
 1844 01cc 01       		.byte	0x1
 1845 01cd 74       		.byte	0x74
 1846 01ce 69020000 		.4byte	0x269
 1847 01d2 02       		.byte	0x2
 1848 01d3 23       		.byte	0x23
 1849 01d4 04       		.uleb128 0x4
 1850 01d5 0A       		.uleb128 0xa
 1851 01d6 57080000 		.4byte	.LASF54
 1852 01da 01       		.byte	0x1
 1853 01db 75       		.byte	0x75
 1854 01dc 79020000 		.4byte	0x279
 1855 01e0 03       		.byte	0x3
 1856 01e1 23       		.byte	0x23
 1857 01e2 8001     		.uleb128 0x80
 1858 01e4 0A       		.uleb128 0xa
 1859 01e5 11020000 		.4byte	.LASF55
 1860 01e9 01       		.byte	0x1
 1861 01ea 76       		.byte	0x76
 1862 01eb 69020000 		.4byte	0x269
 1863 01ef 03       		.byte	0x3
 1864 01f0 23       		.byte	0x23
 1865 01f1 8401     		.uleb128 0x84
 1866 01f3 0A       		.uleb128 0xa
 1867 01f4 C9090000 		.4byte	.LASF56
 1868 01f8 01       		.byte	0x1
 1869 01f9 77       		.byte	0x77
 1870 01fa 7E020000 		.4byte	0x27e
 1871 01fe 03       		.byte	0x3
 1872 01ff 23       		.byte	0x23
 1873 0200 8002     		.uleb128 0x100
 1874 0202 0A       		.uleb128 0xa
ARM GAS  /tmp/cc5pUpZ5.s 			page 73


 1875 0203 D9050000 		.4byte	.LASF57
 1876 0207 01       		.byte	0x1
 1877 0208 78       		.byte	0x78
 1878 0209 69020000 		.4byte	0x269
 1879 020d 03       		.byte	0x3
 1880 020e 23       		.byte	0x23
 1881 020f 8402     		.uleb128 0x104
 1882 0211 0A       		.uleb128 0xa
 1883 0212 16050000 		.4byte	.LASF58
 1884 0216 01       		.byte	0x1
 1885 0217 79       		.byte	0x79
 1886 0218 83020000 		.4byte	0x283
 1887 021c 03       		.byte	0x3
 1888 021d 23       		.byte	0x23
 1889 021e 8003     		.uleb128 0x180
 1890 0220 0A       		.uleb128 0xa
 1891 0221 E3050000 		.4byte	.LASF59
 1892 0225 01       		.byte	0x1
 1893 0226 7A       		.byte	0x7a
 1894 0227 69020000 		.4byte	0x269
 1895 022b 03       		.byte	0x3
 1896 022c 23       		.byte	0x23
 1897 022d 8403     		.uleb128 0x184
 1898 022f 0A       		.uleb128 0xa
 1899 0230 ED050000 		.4byte	.LASF60
 1900 0234 01       		.byte	0x1
 1901 0235 7B       		.byte	0x7b
 1902 0236 88020000 		.4byte	0x288
 1903 023a 03       		.byte	0x3
 1904 023b 23       		.byte	0x23
 1905 023c 8004     		.uleb128 0x200
 1906 023e 0B       		.uleb128 0xb
 1907 023f 495000   		.ascii	"IP\000"
 1908 0242 01       		.byte	0x1
 1909 0243 7C       		.byte	0x7c
 1910 0244 A8020000 		.4byte	0x2a8
 1911 0248 03       		.byte	0x3
 1912 0249 23       		.byte	0x23
 1913 024a 8006     		.uleb128 0x300
 1914 024c 00       		.byte	0
 1915 024d 0C       		.uleb128 0xc
 1916 024e A5010000 		.4byte	0x1a5
 1917 0252 5D020000 		.4byte	0x25d
 1918 0256 0D       		.uleb128 0xd
 1919 0257 5D020000 		.4byte	0x25d
 1920 025b 00       		.byte	0
 1921 025c 00       		.byte	0
 1922 025d 05       		.uleb128 0x5
 1923 025e 04       		.byte	0x4
 1924 025f 07       		.byte	0x7
 1925 0260 E8060000 		.4byte	.LASF61
 1926 0264 0E       		.uleb128 0xe
 1927 0265 4D020000 		.4byte	0x24d
 1928 0269 0C       		.uleb128 0xc
 1929 026a A5010000 		.4byte	0x1a5
 1930 026e 79020000 		.4byte	0x279
 1931 0272 0D       		.uleb128 0xd
ARM GAS  /tmp/cc5pUpZ5.s 			page 74


 1932 0273 5D020000 		.4byte	0x25d
 1933 0277 1E       		.byte	0x1e
 1934 0278 00       		.byte	0
 1935 0279 0E       		.uleb128 0xe
 1936 027a 4D020000 		.4byte	0x24d
 1937 027e 0E       		.uleb128 0xe
 1938 027f 4D020000 		.4byte	0x24d
 1939 0283 0E       		.uleb128 0xe
 1940 0284 4D020000 		.4byte	0x24d
 1941 0288 0C       		.uleb128 0xc
 1942 0289 A5010000 		.4byte	0x1a5
 1943 028d 98020000 		.4byte	0x298
 1944 0291 0D       		.uleb128 0xd
 1945 0292 5D020000 		.4byte	0x25d
 1946 0296 3F       		.byte	0x3f
 1947 0297 00       		.byte	0
 1948 0298 0C       		.uleb128 0xc
 1949 0299 A5010000 		.4byte	0x1a5
 1950 029d A8020000 		.4byte	0x2a8
 1951 02a1 0D       		.uleb128 0xd
 1952 02a2 5D020000 		.4byte	0x25d
 1953 02a6 07       		.byte	0x7
 1954 02a7 00       		.byte	0
 1955 02a8 0E       		.uleb128 0xe
 1956 02a9 98020000 		.4byte	0x298
 1957 02ad 07       		.uleb128 0x7
 1958 02ae AB060000 		.4byte	.LASF62
 1959 02b2 01       		.byte	0x1
 1960 02b3 7D       		.byte	0x7d
 1961 02b4 B0010000 		.4byte	0x1b0
 1962 02b8 0F       		.uleb128 0xf
 1963 02b9 34       		.byte	0x34
 1964 02ba 01       		.byte	0x1
 1965 02bb 86       		.byte	0x86
 1966 02bc 5B030000 		.4byte	0x35b
 1967 02c0 0A       		.uleb128 0xa
 1968 02c1 A6020000 		.4byte	.LASF63
 1969 02c5 01       		.byte	0x1
 1970 02c6 88       		.byte	0x88
 1971 02c7 60030000 		.4byte	0x360
 1972 02cb 02       		.byte	0x2
 1973 02cc 23       		.byte	0x23
 1974 02cd 00       		.uleb128 0
 1975 02ce 0A       		.uleb128 0xa
 1976 02cf F1060000 		.4byte	.LASF64
 1977 02d3 01       		.byte	0x1
 1978 02d4 89       		.byte	0x89
 1979 02d5 5B030000 		.4byte	0x35b
 1980 02d9 02       		.byte	0x2
 1981 02da 23       		.byte	0x23
 1982 02db 04       		.uleb128 0x4
 1983 02dc 0A       		.uleb128 0xa
 1984 02dd C5050000 		.4byte	.LASF53
 1985 02e1 01       		.byte	0x1
 1986 02e2 8A       		.byte	0x8a
 1987 02e3 A5010000 		.4byte	0x1a5
 1988 02e7 02       		.byte	0x2
ARM GAS  /tmp/cc5pUpZ5.s 			page 75


 1989 02e8 23       		.byte	0x23
 1990 02e9 08       		.uleb128 0x8
 1991 02ea 0A       		.uleb128 0xa
 1992 02eb 5B030000 		.4byte	.LASF65
 1993 02ef 01       		.byte	0x1
 1994 02f0 8B       		.byte	0x8b
 1995 02f1 5B030000 		.4byte	0x35b
 1996 02f5 02       		.byte	0x2
 1997 02f6 23       		.byte	0x23
 1998 02f7 0C       		.uleb128 0xc
 1999 02f8 0B       		.uleb128 0xb
 2000 02f9 53435200 		.ascii	"SCR\000"
 2001 02fd 01       		.byte	0x1
 2002 02fe 8C       		.byte	0x8c
 2003 02ff 5B030000 		.4byte	0x35b
 2004 0303 02       		.byte	0x2
 2005 0304 23       		.byte	0x23
 2006 0305 10       		.uleb128 0x10
 2007 0306 0B       		.uleb128 0xb
 2008 0307 43435200 		.ascii	"CCR\000"
 2009 030b 01       		.byte	0x1
 2010 030c 8D       		.byte	0x8d
 2011 030d 5B030000 		.4byte	0x35b
 2012 0311 02       		.byte	0x2
 2013 0312 23       		.byte	0x23
 2014 0313 14       		.uleb128 0x14
 2015 0314 0A       		.uleb128 0xa
 2016 0315 CF050000 		.4byte	.LASF66
 2017 0319 01       		.byte	0x1
 2018 031a 8E       		.byte	0x8e
 2019 031b A5010000 		.4byte	0x1a5
 2020 031f 02       		.byte	0x2
 2021 0320 23       		.byte	0x23
 2022 0321 18       		.uleb128 0x18
 2023 0322 0B       		.uleb128 0xb
 2024 0323 53485000 		.ascii	"SHP\000"
 2025 0327 01       		.byte	0x1
 2026 0328 8F       		.byte	0x8f
 2027 0329 75030000 		.4byte	0x375
 2028 032d 02       		.byte	0x2
 2029 032e 23       		.byte	0x23
 2030 032f 1C       		.uleb128 0x1c
 2031 0330 0A       		.uleb128 0xa
 2032 0331 41040000 		.4byte	.LASF67
 2033 0335 01       		.byte	0x1
 2034 0336 90       		.byte	0x90
 2035 0337 5B030000 		.4byte	0x35b
 2036 033b 02       		.byte	0x2
 2037 033c 23       		.byte	0x23
 2038 033d 24       		.uleb128 0x24
 2039 033e 0A       		.uleb128 0xa
 2040 033f D9050000 		.4byte	.LASF57
 2041 0343 01       		.byte	0x1
 2042 0344 91       		.byte	0x91
 2043 0345 65030000 		.4byte	0x365
 2044 0349 02       		.byte	0x2
 2045 034a 23       		.byte	0x23
ARM GAS  /tmp/cc5pUpZ5.s 			page 76


 2046 034b 28       		.uleb128 0x28
 2047 034c 0A       		.uleb128 0xa
 2048 034d 3B020000 		.4byte	.LASF68
 2049 0351 01       		.byte	0x1
 2050 0352 92       		.byte	0x92
 2051 0353 5B030000 		.4byte	0x35b
 2052 0357 02       		.byte	0x2
 2053 0358 23       		.byte	0x23
 2054 0359 30       		.uleb128 0x30
 2055 035a 00       		.byte	0
 2056 035b 0E       		.uleb128 0xe
 2057 035c A5010000 		.4byte	0x1a5
 2058 0360 10       		.uleb128 0x10
 2059 0361 5B030000 		.4byte	0x35b
 2060 0365 0C       		.uleb128 0xc
 2061 0366 A5010000 		.4byte	0x1a5
 2062 036a 75030000 		.4byte	0x375
 2063 036e 0D       		.uleb128 0xd
 2064 036f 5D020000 		.4byte	0x25d
 2065 0373 01       		.byte	0x1
 2066 0374 00       		.byte	0
 2067 0375 0E       		.uleb128 0xe
 2068 0376 65030000 		.4byte	0x365
 2069 037a 07       		.uleb128 0x7
 2070 037b B5060000 		.4byte	.LASF69
 2071 037f 01       		.byte	0x1
 2072 0380 93       		.byte	0x93
 2073 0381 B8020000 		.4byte	0x2b8
 2074 0385 0F       		.uleb128 0xf
 2075 0386 10       		.byte	0x10
 2076 0387 01       		.byte	0x1
 2077 0388 FC       		.byte	0xfc
 2078 0389 C8030000 		.4byte	0x3c8
 2079 038d 0A       		.uleb128 0xa
 2080 038e 110A0000 		.4byte	.LASF70
 2081 0392 01       		.byte	0x1
 2082 0393 FE       		.byte	0xfe
 2083 0394 5B030000 		.4byte	0x35b
 2084 0398 02       		.byte	0x2
 2085 0399 23       		.byte	0x23
 2086 039a 00       		.uleb128 0
 2087 039b 0A       		.uleb128 0xa
 2088 039c 07010000 		.4byte	.LASF71
 2089 03a0 01       		.byte	0x1
 2090 03a1 FF       		.byte	0xff
 2091 03a2 5B030000 		.4byte	0x35b
 2092 03a6 02       		.byte	0x2
 2093 03a7 23       		.byte	0x23
 2094 03a8 04       		.uleb128 0x4
 2095 03a9 11       		.uleb128 0x11
 2096 03aa 56414C00 		.ascii	"VAL\000"
 2097 03ae 01       		.byte	0x1
 2098 03af 0001     		.2byte	0x100
 2099 03b1 5B030000 		.4byte	0x35b
 2100 03b5 02       		.byte	0x2
 2101 03b6 23       		.byte	0x23
 2102 03b7 08       		.uleb128 0x8
ARM GAS  /tmp/cc5pUpZ5.s 			page 77


 2103 03b8 12       		.uleb128 0x12
 2104 03b9 5E010000 		.4byte	.LASF72
 2105 03bd 01       		.byte	0x1
 2106 03be 0101     		.2byte	0x101
 2107 03c0 60030000 		.4byte	0x360
 2108 03c4 02       		.byte	0x2
 2109 03c5 23       		.byte	0x23
 2110 03c6 0C       		.uleb128 0xc
 2111 03c7 00       		.byte	0
 2112 03c8 06       		.uleb128 0x6
 2113 03c9 5B050000 		.4byte	.LASF73
 2114 03cd 01       		.byte	0x1
 2115 03ce 0201     		.2byte	0x102
 2116 03d0 85030000 		.4byte	0x385
 2117 03d4 13       		.uleb128 0x13
 2118 03d5 44       		.byte	0x44
 2119 03d6 03       		.byte	0x3
 2120 03d7 7C01     		.2byte	0x17c
 2121 03d9 9E040000 		.4byte	0x49e
 2122 03dd 11       		.uleb128 0x11
 2123 03de 49535200 		.ascii	"ISR\000"
 2124 03e2 03       		.byte	0x3
 2125 03e3 7E01     		.2byte	0x17e
 2126 03e5 5B030000 		.4byte	0x35b
 2127 03e9 02       		.byte	0x2
 2128 03ea 23       		.byte	0x23
 2129 03eb 00       		.uleb128 0
 2130 03ec 11       		.uleb128 0x11
 2131 03ed 49455200 		.ascii	"IER\000"
 2132 03f1 03       		.byte	0x3
 2133 03f2 7F01     		.2byte	0x17f
 2134 03f4 5B030000 		.4byte	0x35b
 2135 03f8 02       		.byte	0x2
 2136 03f9 23       		.byte	0x23
 2137 03fa 04       		.uleb128 0x4
 2138 03fb 11       		.uleb128 0x11
 2139 03fc 435200   		.ascii	"CR\000"
 2140 03ff 03       		.byte	0x3
 2141 0400 8001     		.2byte	0x180
 2142 0402 5B030000 		.4byte	0x35b
 2143 0406 02       		.byte	0x2
 2144 0407 23       		.byte	0x23
 2145 0408 08       		.uleb128 0x8
 2146 0409 12       		.uleb128 0x12
 2147 040a 00050000 		.4byte	.LASF74
 2148 040e 03       		.byte	0x3
 2149 040f 8101     		.2byte	0x181
 2150 0411 5B030000 		.4byte	0x35b
 2151 0415 02       		.byte	0x2
 2152 0416 23       		.byte	0x23
 2153 0417 0C       		.uleb128 0xc
 2154 0418 12       		.uleb128 0x12
 2155 0419 06050000 		.4byte	.LASF75
 2156 041d 03       		.byte	0x3
 2157 041e 8201     		.2byte	0x182
 2158 0420 5B030000 		.4byte	0x35b
 2159 0424 02       		.byte	0x2
ARM GAS  /tmp/cc5pUpZ5.s 			page 78


 2160 0425 23       		.byte	0x23
 2161 0426 10       		.uleb128 0x10
 2162 0427 12       		.uleb128 0x12
 2163 0428 D0020000 		.4byte	.LASF76
 2164 042c 03       		.byte	0x3
 2165 042d 8301     		.2byte	0x183
 2166 042f 5B030000 		.4byte	0x35b
 2167 0433 02       		.byte	0x2
 2168 0434 23       		.byte	0x23
 2169 0435 14       		.uleb128 0x14
 2170 0436 12       		.uleb128 0x12
 2171 0437 CF050000 		.4byte	.LASF66
 2172 043b 03       		.byte	0x3
 2173 043c 8401     		.2byte	0x184
 2174 043e A5010000 		.4byte	0x1a5
 2175 0442 02       		.byte	0x2
 2176 0443 23       		.byte	0x23
 2177 0444 18       		.uleb128 0x18
 2178 0445 12       		.uleb128 0x12
 2179 0446 D9050000 		.4byte	.LASF57
 2180 044a 03       		.byte	0x3
 2181 044b 8501     		.2byte	0x185
 2182 044d A5010000 		.4byte	0x1a5
 2183 0451 02       		.byte	0x2
 2184 0452 23       		.byte	0x23
 2185 0453 1C       		.uleb128 0x1c
 2186 0454 11       		.uleb128 0x11
 2187 0455 545200   		.ascii	"TR\000"
 2188 0458 03       		.byte	0x3
 2189 0459 8601     		.2byte	0x186
 2190 045b 5B030000 		.4byte	0x35b
 2191 045f 02       		.byte	0x2
 2192 0460 23       		.byte	0x23
 2193 0461 20       		.uleb128 0x20
 2194 0462 12       		.uleb128 0x12
 2195 0463 E3050000 		.4byte	.LASF59
 2196 0467 03       		.byte	0x3
 2197 0468 8701     		.2byte	0x187
 2198 046a A5010000 		.4byte	0x1a5
 2199 046e 02       		.byte	0x2
 2200 046f 23       		.byte	0x23
 2201 0470 24       		.uleb128 0x24
 2202 0471 12       		.uleb128 0x12
 2203 0472 6B020000 		.4byte	.LASF77
 2204 0476 03       		.byte	0x3
 2205 0477 8801     		.2byte	0x188
 2206 0479 5B030000 		.4byte	0x35b
 2207 047d 02       		.byte	0x2
 2208 047e 23       		.byte	0x23
 2209 047f 28       		.uleb128 0x28
 2210 0480 12       		.uleb128 0x12
 2211 0481 ED050000 		.4byte	.LASF60
 2212 0485 03       		.byte	0x3
 2213 0486 8901     		.2byte	0x189
 2214 0488 9E040000 		.4byte	0x49e
 2215 048c 02       		.byte	0x2
 2216 048d 23       		.byte	0x23
ARM GAS  /tmp/cc5pUpZ5.s 			page 79


 2217 048e 2C       		.uleb128 0x2c
 2218 048f 11       		.uleb128 0x11
 2219 0490 445200   		.ascii	"DR\000"
 2220 0493 03       		.byte	0x3
 2221 0494 8A01     		.2byte	0x18a
 2222 0496 5B030000 		.4byte	0x35b
 2223 049a 02       		.byte	0x2
 2224 049b 23       		.byte	0x23
 2225 049c 40       		.uleb128 0x40
 2226 049d 00       		.byte	0
 2227 049e 0C       		.uleb128 0xc
 2228 049f A5010000 		.4byte	0x1a5
 2229 04a3 AE040000 		.4byte	0x4ae
 2230 04a7 0D       		.uleb128 0xd
 2231 04a8 5D020000 		.4byte	0x25d
 2232 04ac 04       		.byte	0x4
 2233 04ad 00       		.byte	0
 2234 04ae 06       		.uleb128 0x6
 2235 04af 1D040000 		.4byte	.LASF78
 2236 04b3 03       		.byte	0x3
 2237 04b4 8B01     		.2byte	0x18b
 2238 04b6 D4030000 		.4byte	0x3d4
 2239 04ba 0E       		.uleb128 0xe
 2240 04bb 8F010000 		.4byte	0x18f
 2241 04bf 13       		.uleb128 0x13
 2242 04c0 2C       		.byte	0x2c
 2243 04c1 03       		.byte	0x3
 2244 04c2 6902     		.2byte	0x269
 2245 04c4 9B050000 		.4byte	0x59b
 2246 04c8 12       		.uleb128 0x12
 2247 04c9 65020000 		.4byte	.LASF79
 2248 04cd 03       		.byte	0x3
 2249 04ce 6B02     		.2byte	0x26b
 2250 04d0 5B030000 		.4byte	0x35b
 2251 04d4 02       		.byte	0x2
 2252 04d5 23       		.byte	0x23
 2253 04d6 00       		.uleb128 0
 2254 04d7 12       		.uleb128 0x12
 2255 04d8 40060000 		.4byte	.LASF80
 2256 04dc 03       		.byte	0x3
 2257 04dd 6C02     		.2byte	0x26c
 2258 04df BA040000 		.4byte	0x4ba
 2259 04e3 02       		.byte	0x2
 2260 04e4 23       		.byte	0x23
 2261 04e5 04       		.uleb128 0x4
 2262 04e6 12       		.uleb128 0x12
 2263 04e7 C5050000 		.4byte	.LASF53
 2264 04eb 03       		.byte	0x3
 2265 04ec 6D02     		.2byte	0x26d
 2266 04ee 8F010000 		.4byte	0x18f
 2267 04f2 02       		.byte	0x2
 2268 04f3 23       		.byte	0x23
 2269 04f4 06       		.uleb128 0x6
 2270 04f5 12       		.uleb128 0x12
 2271 04f6 53050000 		.4byte	.LASF81
 2272 04fa 03       		.byte	0x3
 2273 04fb 6E02     		.2byte	0x26e
ARM GAS  /tmp/cc5pUpZ5.s 			page 80


 2274 04fd 5B030000 		.4byte	0x35b
 2275 0501 02       		.byte	0x2
 2276 0502 23       		.byte	0x23
 2277 0503 08       		.uleb128 0x8
 2278 0504 12       		.uleb128 0x12
 2279 0505 0E030000 		.4byte	.LASF82
 2280 0509 03       		.byte	0x3
 2281 050a 6F02     		.2byte	0x26f
 2282 050c 5B030000 		.4byte	0x35b
 2283 0510 02       		.byte	0x2
 2284 0511 23       		.byte	0x23
 2285 0512 0C       		.uleb128 0xc
 2286 0513 11       		.uleb128 0x11
 2287 0514 49445200 		.ascii	"IDR\000"
 2288 0518 03       		.byte	0x3
 2289 0519 7002     		.2byte	0x270
 2290 051b BA040000 		.4byte	0x4ba
 2291 051f 02       		.byte	0x2
 2292 0520 23       		.byte	0x23
 2293 0521 10       		.uleb128 0x10
 2294 0522 12       		.uleb128 0x12
 2295 0523 CF050000 		.4byte	.LASF66
 2296 0527 03       		.byte	0x3
 2297 0528 7102     		.2byte	0x271
 2298 052a 8F010000 		.4byte	0x18f
 2299 052e 02       		.byte	0x2
 2300 052f 23       		.byte	0x23
 2301 0530 12       		.uleb128 0x12
 2302 0531 11       		.uleb128 0x11
 2303 0532 4F445200 		.ascii	"ODR\000"
 2304 0536 03       		.byte	0x3
 2305 0537 7202     		.2byte	0x272
 2306 0539 BA040000 		.4byte	0x4ba
 2307 053d 02       		.byte	0x2
 2308 053e 23       		.byte	0x23
 2309 053f 14       		.uleb128 0x14
 2310 0540 12       		.uleb128 0x12
 2311 0541 D9050000 		.4byte	.LASF57
 2312 0545 03       		.byte	0x3
 2313 0546 7302     		.2byte	0x273
 2314 0548 8F010000 		.4byte	0x18f
 2315 054c 02       		.byte	0x2
 2316 054d 23       		.byte	0x23
 2317 054e 16       		.uleb128 0x16
 2318 054f 12       		.uleb128 0x12
 2319 0550 94000000 		.4byte	.LASF83
 2320 0554 03       		.byte	0x3
 2321 0555 7402     		.2byte	0x274
 2322 0557 5B030000 		.4byte	0x35b
 2323 055b 02       		.byte	0x2
 2324 055c 23       		.byte	0x23
 2325 055d 18       		.uleb128 0x18
 2326 055e 12       		.uleb128 0x12
 2327 055f 0C0A0000 		.4byte	.LASF84
 2328 0563 03       		.byte	0x3
 2329 0564 7502     		.2byte	0x275
 2330 0566 5B030000 		.4byte	0x35b
ARM GAS  /tmp/cc5pUpZ5.s 			page 81


 2331 056a 02       		.byte	0x2
 2332 056b 23       		.byte	0x23
 2333 056c 1C       		.uleb128 0x1c
 2334 056d 11       		.uleb128 0x11
 2335 056e 41465200 		.ascii	"AFR\000"
 2336 0572 03       		.byte	0x3
 2337 0573 7602     		.2byte	0x276
 2338 0575 9B050000 		.4byte	0x59b
 2339 0579 02       		.byte	0x2
 2340 057a 23       		.byte	0x23
 2341 057b 20       		.uleb128 0x20
 2342 057c 11       		.uleb128 0x11
 2343 057d 42525200 		.ascii	"BRR\000"
 2344 0581 03       		.byte	0x3
 2345 0582 7702     		.2byte	0x277
 2346 0584 BA040000 		.4byte	0x4ba
 2347 0588 02       		.byte	0x2
 2348 0589 23       		.byte	0x23
 2349 058a 28       		.uleb128 0x28
 2350 058b 12       		.uleb128 0x12
 2351 058c E3050000 		.4byte	.LASF59
 2352 0590 03       		.byte	0x3
 2353 0591 7802     		.2byte	0x278
 2354 0593 8F010000 		.4byte	0x18f
 2355 0597 02       		.byte	0x2
 2356 0598 23       		.byte	0x23
 2357 0599 2A       		.uleb128 0x2a
 2358 059a 00       		.byte	0
 2359 059b 0E       		.uleb128 0xe
 2360 059c 65030000 		.4byte	0x365
 2361 05a0 06       		.uleb128 0x6
 2362 05a1 BE060000 		.4byte	.LASF85
 2363 05a5 03       		.byte	0x3
 2364 05a6 7902     		.2byte	0x279
 2365 05a8 BF040000 		.4byte	0x4bf
 2366 05ac 05       		.uleb128 0x5
 2367 05ad 08       		.byte	0x8
 2368 05ae 04       		.byte	0x4
 2369 05af 68050000 		.4byte	.LASF86
 2370 05b3 05       		.uleb128 0x5
 2371 05b4 01       		.byte	0x1
 2372 05b5 08       		.byte	0x8
 2373 05b6 3A030000 		.4byte	.LASF87
 2374 05ba 0C       		.uleb128 0xc
 2375 05bb 3D010000 		.4byte	0x13d
 2376 05bf CA050000 		.4byte	0x5ca
 2377 05c3 0D       		.uleb128 0xd
 2378 05c4 5D020000 		.4byte	0x25d
 2379 05c8 02       		.byte	0x2
 2380 05c9 00       		.byte	0
 2381 05ca 14       		.uleb128 0x14
 2382 05cb 01       		.byte	0x1
 2383 05cc 24010000 		.4byte	0x124
 2384 05d0 06       		.byte	0x6
 2385 05d1 B9       		.byte	0xb9
 2386 05d2 07060000 		.4byte	0x607
 2387 05d6 04       		.uleb128 0x4
ARM GAS  /tmp/cc5pUpZ5.s 			page 82


 2388 05d7 94040000 		.4byte	.LASF88
 2389 05db 00       		.byte	0
 2390 05dc 04       		.uleb128 0x4
 2391 05dd 67060000 		.4byte	.LASF89
 2392 05e1 01       		.byte	0x1
 2393 05e2 04       		.uleb128 0x4
 2394 05e3 EC020000 		.4byte	.LASF90
 2395 05e7 02       		.byte	0x2
 2396 05e8 04       		.uleb128 0x4
 2397 05e9 DF070000 		.4byte	.LASF91
 2398 05ed 03       		.byte	0x3
 2399 05ee 04       		.uleb128 0x4
 2400 05ef 5B040000 		.4byte	.LASF92
 2401 05f3 04       		.byte	0x4
 2402 05f4 04       		.uleb128 0x4
 2403 05f5 9E040000 		.4byte	.LASF93
 2404 05f9 05       		.byte	0x5
 2405 05fa 04       		.uleb128 0x4
 2406 05fb BA030000 		.4byte	.LASF94
 2407 05ff 06       		.byte	0x6
 2408 0600 04       		.uleb128 0x4
 2409 0601 15040000 		.4byte	.LASF95
 2410 0605 07       		.byte	0x7
 2411 0606 00       		.byte	0
 2412 0607 07       		.uleb128 0x7
 2413 0608 9A030000 		.4byte	.LASF96
 2414 060c 06       		.byte	0x6
 2415 060d C5       		.byte	0xc5
 2416 060e CA050000 		.4byte	0x5ca
 2417 0612 15       		.uleb128 0x15
 2418 0613 7D040000 		.4byte	.LASF200
 2419 0617 0C       		.byte	0xc
 2420 0618 07       		.byte	0x7
 2421 0619 34       		.byte	0x34
 2422 061a B9060000 		.4byte	0x6b9
 2423 061e 0A       		.uleb128 0xa
 2424 061f 99000000 		.4byte	.LASF97
 2425 0623 07       		.byte	0x7
 2426 0624 36       		.byte	0x36
 2427 0625 24010000 		.4byte	0x124
 2428 0629 02       		.byte	0x2
 2429 062a 23       		.byte	0x23
 2430 062b 00       		.uleb128 0
 2431 062c 0A       		.uleb128 0xa
 2432 062d 08080000 		.4byte	.LASF98
 2433 0631 07       		.byte	0x7
 2434 0632 38       		.byte	0x38
 2435 0633 24010000 		.4byte	0x124
 2436 0637 02       		.byte	0x2
 2437 0638 23       		.byte	0x23
 2438 0639 01       		.uleb128 0x1
 2439 063a 0A       		.uleb128 0xa
 2440 063b 6B000000 		.4byte	.LASF99
 2441 063f 07       		.byte	0x7
 2442 0640 39       		.byte	0x39
 2443 0641 24010000 		.4byte	0x124
 2444 0645 02       		.byte	0x2
ARM GAS  /tmp/cc5pUpZ5.s 			page 83


 2445 0646 23       		.byte	0x23
 2446 0647 02       		.uleb128 0x2
 2447 0648 0A       		.uleb128 0xa
 2448 0649 58010000 		.4byte	.LASF100
 2449 064d 07       		.byte	0x7
 2450 064e 3A       		.byte	0x3a
 2451 064f 24010000 		.4byte	0x124
 2452 0653 02       		.byte	0x2
 2453 0654 23       		.byte	0x23
 2454 0655 03       		.uleb128 0x3
 2455 0656 0A       		.uleb128 0xa
 2456 0657 91050000 		.4byte	.LASF101
 2457 065b 07       		.byte	0x7
 2458 065c 3C       		.byte	0x3c
 2459 065d 3D010000 		.4byte	0x13d
 2460 0661 02       		.byte	0x2
 2461 0662 23       		.byte	0x23
 2462 0663 04       		.uleb128 0x4
 2463 0664 0A       		.uleb128 0xa
 2464 0665 2C030000 		.4byte	.LASF102
 2465 0669 07       		.byte	0x7
 2466 066a 3D       		.byte	0x3d
 2467 066b 24010000 		.4byte	0x124
 2468 066f 02       		.byte	0x2
 2469 0670 23       		.byte	0x23
 2470 0671 06       		.uleb128 0x6
 2471 0672 0A       		.uleb128 0xa
 2472 0673 33030000 		.4byte	.LASF103
 2473 0677 07       		.byte	0x7
 2474 0678 3E       		.byte	0x3e
 2475 0679 24010000 		.4byte	0x124
 2476 067d 02       		.byte	0x2
 2477 067e 23       		.byte	0x23
 2478 067f 07       		.uleb128 0x7
 2479 0680 0A       		.uleb128 0xa
 2480 0681 06000000 		.4byte	.LASF104
 2481 0685 07       		.byte	0x7
 2482 0686 41       		.byte	0x41
 2483 0687 24010000 		.4byte	0x124
 2484 068b 02       		.byte	0x2
 2485 068c 23       		.byte	0x23
 2486 068d 08       		.uleb128 0x8
 2487 068e 0A       		.uleb128 0xa
 2488 068f 14000000 		.4byte	.LASF105
 2489 0693 07       		.byte	0x7
 2490 0694 42       		.byte	0x42
 2491 0695 24010000 		.4byte	0x124
 2492 0699 02       		.byte	0x2
 2493 069a 23       		.byte	0x23
 2494 069b 09       		.uleb128 0x9
 2495 069c 0A       		.uleb128 0xa
 2496 069d 22000000 		.4byte	.LASF106
 2497 06a1 07       		.byte	0x7
 2498 06a2 43       		.byte	0x43
 2499 06a3 24010000 		.4byte	0x124
 2500 06a7 02       		.byte	0x2
 2501 06a8 23       		.byte	0x23
ARM GAS  /tmp/cc5pUpZ5.s 			page 84


 2502 06a9 0A       		.uleb128 0xa
 2503 06aa 0A       		.uleb128 0xa
 2504 06ab 30000000 		.4byte	.LASF107
 2505 06af 07       		.byte	0x7
 2506 06b0 44       		.byte	0x44
 2507 06b1 24010000 		.4byte	0x124
 2508 06b5 02       		.byte	0x2
 2509 06b6 23       		.byte	0x23
 2510 06b7 0B       		.uleb128 0xb
 2511 06b8 00       		.byte	0
 2512 06b9 07       		.uleb128 0x7
 2513 06ba 93080000 		.4byte	.LASF108
 2514 06be 07       		.byte	0x7
 2515 06bf 46       		.byte	0x46
 2516 06c0 12060000 		.4byte	0x612
 2517 06c4 02       		.uleb128 0x2
 2518 06c5 8E020000 		.4byte	.LASF110
 2519 06c9 01       		.byte	0x1
 2520 06ca 24010000 		.4byte	0x124
 2521 06ce 08       		.byte	0x8
 2522 06cf 0D       		.byte	0xd
 2523 06d0 FF060000 		.4byte	0x6ff
 2524 06d4 04       		.uleb128 0x4
 2525 06d5 E3020000 		.4byte	.LASF111
 2526 06d9 00       		.byte	0
 2527 06da 04       		.uleb128 0x4
 2528 06db 82080000 		.4byte	.LASF112
 2529 06df 01       		.byte	0x1
 2530 06e0 04       		.uleb128 0x4
 2531 06e1 A9040000 		.4byte	.LASF113
 2532 06e5 02       		.byte	0x2
 2533 06e6 04       		.uleb128 0x4
 2534 06e7 9F060000 		.4byte	.LASF114
 2535 06eb 03       		.byte	0x3
 2536 06ec 04       		.uleb128 0x4
 2537 06ed 160A0000 		.4byte	.LASF115
 2538 06f1 04       		.byte	0x4
 2539 06f2 04       		.uleb128 0x4
 2540 06f3 C7080000 		.4byte	.LASF116
 2541 06f7 05       		.byte	0x5
 2542 06f8 04       		.uleb128 0x4
 2543 06f9 0C050000 		.4byte	.LASF117
 2544 06fd 06       		.byte	0x6
 2545 06fe 00       		.byte	0
 2546 06ff 16       		.uleb128 0x16
 2547 0700 E9000000 		.4byte	.LASF201
 2548 0704 01       		.byte	0x1
 2549 0705 7C03     		.2byte	0x37c
 2550 0707 01       		.byte	0x1
 2551 0708 00000000 		.4byte	.LFB16
 2552 070c EC000000 		.4byte	.LFE16
 2553 0710 00000000 		.4byte	.LLST0
 2554 0714 01       		.byte	0x1
 2555 0715 38070000 		.4byte	0x738
 2556 0719 17       		.uleb128 0x17
 2557 071a 8C050000 		.4byte	.LASF109
 2558 071e 01       		.byte	0x1
ARM GAS  /tmp/cc5pUpZ5.s 			page 85


 2559 071f 7C03     		.2byte	0x37c
 2560 0721 0D010000 		.4byte	0x10d
 2561 0725 02       		.byte	0x2
 2562 0726 91       		.byte	0x91
 2563 0727 6F       		.sleb128 -17
 2564 0728 17       		.uleb128 0x17
 2565 0729 2A060000 		.4byte	.LASF118
 2566 072d 01       		.byte	0x1
 2567 072e 7C03     		.2byte	0x37c
 2568 0730 A5010000 		.4byte	0x1a5
 2569 0734 02       		.byte	0x2
 2570 0735 91       		.byte	0x91
 2571 0736 68       		.sleb128 -24
 2572 0737 00       		.byte	0
 2573 0738 18       		.uleb128 0x18
 2574 0739 C1020000 		.4byte	.LASF202
 2575 073d 01       		.byte	0x1
 2576 073e B803     		.2byte	0x3b8
 2577 0740 01       		.byte	0x1
 2578 0741 A5010000 		.4byte	0x1a5
 2579 0745 00000000 		.4byte	.LFB18
 2580 0749 48000000 		.4byte	.LFE18
 2581 074d 2C000000 		.4byte	.LLST1
 2582 0751 01       		.byte	0x1
 2583 0752 66070000 		.4byte	0x766
 2584 0756 17       		.uleb128 0x17
 2585 0757 14030000 		.4byte	.LASF119
 2586 075b 01       		.byte	0x1
 2587 075c B803     		.2byte	0x3b8
 2588 075e A5010000 		.4byte	0x1a5
 2589 0762 02       		.byte	0x2
 2590 0763 91       		.byte	0x91
 2591 0764 74       		.sleb128 -12
 2592 0765 00       		.byte	0
 2593 0766 19       		.uleb128 0x19
 2594 0767 01       		.byte	0x1
 2595 0768 A1090000 		.4byte	.LASF203
 2596 076c 02       		.byte	0x2
 2597 076d D7       		.byte	0xd7
 2598 076e 01       		.byte	0x1
 2599 076f 76010000 		.4byte	0x176
 2600 0773 00000000 		.4byte	.LFB20
 2601 0777 40050000 		.4byte	.LFE20
 2602 077b 58000000 		.4byte	.LLST2
 2603 077f 01       		.byte	0x1
 2604 0780 C1080000 		.4byte	0x8c1
 2605 0784 1A       		.uleb128 0x1a
 2606 0785 6900     		.ascii	"i\000"
 2607 0787 02       		.byte	0x2
 2608 0788 D9       		.byte	0xd9
 2609 0789 24010000 		.4byte	0x124
 2610 078d 02       		.byte	0x2
 2611 078e 91       		.byte	0x91
 2612 078f 6F       		.sleb128 -17
 2613 0790 1B       		.uleb128 0x1b
 2614 0791 696900   		.ascii	"ii\000"
 2615 0794 02       		.byte	0x2
ARM GAS  /tmp/cc5pUpZ5.s 			page 86


 2616 0795 D9       		.byte	0xd9
 2617 0796 24010000 		.4byte	0x124
 2618 079a 1C       		.uleb128 0x1c
 2619 079b FF090000 		.4byte	.LASF120
 2620 079f 02       		.byte	0x2
 2621 07a0 DA       		.byte	0xda
 2622 07a1 24010000 		.4byte	0x124
 2623 07a5 1C       		.uleb128 0x1c
 2624 07a6 8F030000 		.4byte	.LASF121
 2625 07aa 02       		.byte	0x2
 2626 07ab DA       		.byte	0xda
 2627 07ac 24010000 		.4byte	0x124
 2628 07b0 1D       		.uleb128 0x1d
 2629 07b1 FF070000 		.4byte	.LASF122
 2630 07b5 02       		.byte	0x2
 2631 07b6 DA       		.byte	0xda
 2632 07b7 24010000 		.4byte	0x124
 2633 07bb 02       		.byte	0x2
 2634 07bc 91       		.byte	0x91
 2635 07bd 65       		.sleb128 -27
 2636 07be 1D       		.uleb128 0x1d
 2637 07bf CE090000 		.4byte	.LASF123
 2638 07c3 02       		.byte	0x2
 2639 07c4 DB       		.byte	0xdb
 2640 07c5 24010000 		.4byte	0x124
 2641 07c9 02       		.byte	0x2
 2642 07ca 91       		.byte	0x91
 2643 07cb 64       		.sleb128 -28
 2644 07cc 1D       		.uleb128 0x1d
 2645 07cd BD080000 		.4byte	.LASF124
 2646 07d1 02       		.byte	0x2
 2647 07d2 DC       		.byte	0xdc
 2648 07d3 3D010000 		.4byte	0x13d
 2649 07d7 02       		.byte	0x2
 2650 07d8 91       		.byte	0x91
 2651 07d9 4E       		.sleb128 -50
 2652 07da 1D       		.uleb128 0x1d
 2653 07db 51030000 		.4byte	.LASF125
 2654 07df 02       		.byte	0x2
 2655 07e0 DC       		.byte	0xdc
 2656 07e1 3D010000 		.4byte	0x13d
 2657 07e5 02       		.byte	0x2
 2658 07e6 91       		.byte	0x91
 2659 07e7 4C       		.sleb128 -52
 2660 07e8 1D       		.uleb128 0x1d
 2661 07e9 8D080000 		.4byte	.LASF126
 2662 07ed 02       		.byte	0x2
 2663 07ee DD       		.byte	0xdd
 2664 07ef 3D010000 		.4byte	0x13d
 2665 07f3 02       		.byte	0x2
 2666 07f4 91       		.byte	0x91
 2667 07f5 50       		.sleb128 -48
 2668 07f6 1D       		.uleb128 0x1d
 2669 07f7 D8010000 		.4byte	.LASF127
 2670 07fb 02       		.byte	0x2
 2671 07fc DE       		.byte	0xde
 2672 07fd C1080000 		.4byte	0x8c1
ARM GAS  /tmp/cc5pUpZ5.s 			page 87


 2673 0801 02       		.byte	0x2
 2674 0802 91       		.byte	0x91
 2675 0803 60       		.sleb128 -32
 2676 0804 1D       		.uleb128 0x1d
 2677 0805 3E000000 		.4byte	.LASF128
 2678 0809 02       		.byte	0x2
 2679 080a DF       		.byte	0xdf
 2680 080b 7D010000 		.4byte	0x17d
 2681 080f 02       		.byte	0x2
 2682 0810 91       		.byte	0x91
 2683 0811 68       		.sleb128 -24
 2684 0812 1D       		.uleb128 0x1d
 2685 0813 BD000000 		.4byte	.LASF129
 2686 0817 02       		.byte	0x2
 2687 0818 E2       		.byte	0xe2
 2688 0819 07060000 		.4byte	0x607
 2689 081d 02       		.byte	0x2
 2690 081e 91       		.byte	0x91
 2691 081f 67       		.sleb128 -25
 2692 0820 1D       		.uleb128 0x1d
 2693 0821 CB060000 		.4byte	.LASF130
 2694 0825 02       		.byte	0x2
 2695 0826 E3       		.byte	0xe3
 2696 0827 24010000 		.4byte	0x124
 2697 082b 02       		.byte	0x2
 2698 082c 91       		.byte	0x91
 2699 082d 66       		.sleb128 -26
 2700 082e 1C       		.uleb128 0x1c
 2701 082f 0C020000 		.4byte	.LASF131
 2702 0833 02       		.byte	0x2
 2703 0834 E5       		.byte	0xe5
 2704 0835 3D010000 		.4byte	0x13d
 2705 0839 1C       		.uleb128 0x1c
 2706 083a 5C080000 		.4byte	.LASF132
 2707 083e 02       		.byte	0x2
 2708 083f E8       		.byte	0xe8
 2709 0840 24010000 		.4byte	0x124
 2710 0844 1D       		.uleb128 0x1d
 2711 0845 00000000 		.4byte	.LASF133
 2712 0849 02       		.byte	0x2
 2713 084a EE       		.byte	0xee
 2714 084b C8080000 		.4byte	0x8c8
 2715 084f 03       		.byte	0x3
 2716 0850 91       		.byte	0x91
 2717 0851 B87F     		.sleb128 -72
 2718 0853 1D       		.uleb128 0x1d
 2719 0854 4B050000 		.4byte	.LASF134
 2720 0858 02       		.byte	0x2
 2721 0859 EF       		.byte	0xef
 2722 085a C4060000 		.4byte	0x6c4
 2723 085e 02       		.byte	0x2
 2724 085f 91       		.byte	0x91
 2725 0860 5F       		.sleb128 -33
 2726 0861 1D       		.uleb128 0x1d
 2727 0862 26080000 		.4byte	.LASF135
 2728 0866 02       		.byte	0x2
 2729 0867 F0       		.byte	0xf0
ARM GAS  /tmp/cc5pUpZ5.s 			page 88


 2730 0868 24010000 		.4byte	0x124
 2731 086c 02       		.byte	0x2
 2732 086d 91       		.byte	0x91
 2733 086e 5E       		.sleb128 -34
 2734 086f 1D       		.uleb128 0x1d
 2735 0870 47060000 		.4byte	.LASF136
 2736 0874 02       		.byte	0x2
 2737 0875 F1       		.byte	0xf1
 2738 0876 24010000 		.4byte	0x124
 2739 087a 02       		.byte	0x2
 2740 087b 91       		.byte	0x91
 2741 087c 5D       		.sleb128 -35
 2742 087d 1D       		.uleb128 0x1d
 2743 087e F3070000 		.4byte	.LASF137
 2744 0882 02       		.byte	0x2
 2745 0883 F2       		.byte	0xf2
 2746 0884 24010000 		.4byte	0x124
 2747 0888 02       		.byte	0x2
 2748 0889 91       		.byte	0x91
 2749 088a 5C       		.sleb128 -36
 2750 088b 1D       		.uleb128 0x1d
 2751 088c DE010000 		.4byte	.LASF138
 2752 0890 02       		.byte	0x2
 2753 0891 F3       		.byte	0xf3
 2754 0892 24010000 		.4byte	0x124
 2755 0896 02       		.byte	0x2
 2756 0897 91       		.byte	0x91
 2757 0898 5B       		.sleb128 -37
 2758 0899 1D       		.uleb128 0x1d
 2759 089a CA040000 		.4byte	.LASF139
 2760 089e 02       		.byte	0x2
 2761 089f F4       		.byte	0xf4
 2762 08a0 76010000 		.4byte	0x176
 2763 08a4 02       		.byte	0x2
 2764 08a5 91       		.byte	0x91
 2765 08a6 54       		.sleb128 -44
 2766 08a7 1D       		.uleb128 0x1d
 2767 08a8 BB070000 		.4byte	.LASF140
 2768 08ac 02       		.byte	0x2
 2769 08ad F5       		.byte	0xf5
 2770 08ae 24010000 		.4byte	0x124
 2771 08b2 02       		.byte	0x2
 2772 08b3 91       		.byte	0x91
 2773 08b4 53       		.sleb128 -45
 2774 08b5 1C       		.uleb128 0x1c
 2775 08b6 C8000000 		.4byte	.LASF141
 2776 08ba 02       		.byte	0x2
 2777 08bb FA       		.byte	0xfa
 2778 08bc D8080000 		.4byte	0x8d8
 2779 08c0 00       		.byte	0
 2780 08c1 05       		.uleb128 0x5
 2781 08c2 04       		.byte	0x4
 2782 08c3 04       		.byte	0x4
 2783 08c4 06020000 		.4byte	.LASF142
 2784 08c8 0C       		.uleb128 0xc
 2785 08c9 B3050000 		.4byte	0x5b3
 2786 08cd D8080000 		.4byte	0x8d8
ARM GAS  /tmp/cc5pUpZ5.s 			page 89


 2787 08d1 0D       		.uleb128 0xd
 2788 08d2 5D020000 		.4byte	0x25d
 2789 08d6 13       		.byte	0x13
 2790 08d7 00       		.byte	0
 2791 08d8 1E       		.uleb128 0x1e
 2792 08d9 04       		.byte	0x4
 2793 08da B9060000 		.4byte	0x6b9
 2794 08de 1F       		.uleb128 0x1f
 2795 08df 01       		.byte	0x1
 2796 08e0 71080000 		.4byte	.LASF204
 2797 08e4 02       		.byte	0x2
 2798 08e5 EB03     		.2byte	0x3eb
 2799 08e7 01       		.byte	0x1
 2800 08e8 00000000 		.4byte	.LFB21
 2801 08ec B0000000 		.4byte	.LFE21
 2802 08f0 85000000 		.4byte	.LLST3
 2803 08f4 01       		.byte	0x1
 2804 08f5 9E090000 		.4byte	0x99e
 2805 08f9 17       		.uleb128 0x17
 2806 08fa DC000000 		.4byte	.LASF143
 2807 08fe 02       		.byte	0x2
 2808 08ff EB03     		.2byte	0x3eb
 2809 0901 9E090000 		.4byte	0x99e
 2810 0905 03       		.byte	0x3
 2811 0906 91       		.byte	0x91
 2812 0907 A47F     		.sleb128 -92
 2813 0909 20       		.uleb128 0x20
 2814 090a 643100   		.ascii	"d1\000"
 2815 090d 02       		.byte	0x2
 2816 090e ED03     		.2byte	0x3ed
 2817 0910 9A010000 		.4byte	0x19a
 2818 0914 02       		.byte	0x2
 2819 0915 91       		.byte	0x91
 2820 0916 74       		.sleb128 -12
 2821 0917 20       		.uleb128 0x20
 2822 0918 643200   		.ascii	"d2\000"
 2823 091b 02       		.byte	0x2
 2824 091c ED03     		.2byte	0x3ed
 2825 091e 9A010000 		.4byte	0x19a
 2826 0922 02       		.byte	0x2
 2827 0923 91       		.byte	0x91
 2828 0924 70       		.sleb128 -16
 2829 0925 20       		.uleb128 0x20
 2830 0926 643300   		.ascii	"d3\000"
 2831 0929 02       		.byte	0x2
 2832 092a ED03     		.2byte	0x3ed
 2833 092c 9A010000 		.4byte	0x19a
 2834 0930 02       		.byte	0x2
 2835 0931 91       		.byte	0x91
 2836 0932 6C       		.sleb128 -20
 2837 0933 20       		.uleb128 0x20
 2838 0934 643400   		.ascii	"d4\000"
 2839 0937 02       		.byte	0x2
 2840 0938 ED03     		.2byte	0x3ed
 2841 093a 9A010000 		.4byte	0x19a
 2842 093e 02       		.byte	0x2
 2843 093f 91       		.byte	0x91
ARM GAS  /tmp/cc5pUpZ5.s 			page 90


 2844 0940 68       		.sleb128 -24
 2845 0941 20       		.uleb128 0x20
 2846 0942 643500   		.ascii	"d5\000"
 2847 0945 02       		.byte	0x2
 2848 0946 ED03     		.2byte	0x3ed
 2849 0948 9A010000 		.4byte	0x19a
 2850 094c 02       		.byte	0x2
 2851 094d 91       		.byte	0x91
 2852 094e 64       		.sleb128 -28
 2853 094f 20       		.uleb128 0x20
 2854 0950 643600   		.ascii	"d6\000"
 2855 0953 02       		.byte	0x2
 2856 0954 ED03     		.2byte	0x3ed
 2857 0956 9A010000 		.4byte	0x19a
 2858 095a 02       		.byte	0x2
 2859 095b 91       		.byte	0x91
 2860 095c 60       		.sleb128 -32
 2861 095d 21       		.uleb128 0x21
 2862 095e EE040000 		.4byte	.LASF144
 2863 0962 02       		.byte	0x2
 2864 0963 EE03     		.2byte	0x3ee
 2865 0965 A4090000 		.4byte	0x9a4
 2866 0969 03       		.byte	0x3
 2867 096a 91       		.byte	0x91
 2868 096b B87F     		.sleb128 -72
 2869 096d 21       		.uleb128 0x21
 2870 096e 60070000 		.4byte	.LASF145
 2871 0972 02       		.byte	0x2
 2872 0973 EF03     		.2byte	0x3ef
 2873 0975 B4090000 		.4byte	0x9b4
 2874 0979 03       		.byte	0x3
 2875 097a 91       		.byte	0x91
 2876 097b B47F     		.sleb128 -76
 2877 097d 21       		.uleb128 0x21
 2878 097e 3F030000 		.4byte	.LASF146
 2879 0982 02       		.byte	0x2
 2880 0983 F003     		.2byte	0x3f0
 2881 0985 B4090000 		.4byte	0x9b4
 2882 0989 03       		.byte	0x3
 2883 098a 91       		.byte	0x91
 2884 098b B07F     		.sleb128 -80
 2885 098d 21       		.uleb128 0x21
 2886 098e 1C070000 		.4byte	.LASF147
 2887 0992 02       		.byte	0x2
 2888 0993 F103     		.2byte	0x3f1
 2889 0995 B4090000 		.4byte	0x9b4
 2890 0999 03       		.byte	0x3
 2891 099a 91       		.byte	0x91
 2892 099b AC7F     		.sleb128 -84
 2893 099d 00       		.byte	0
 2894 099e 1E       		.uleb128 0x1e
 2895 099f 04       		.byte	0x4
 2896 09a0 84010000 		.4byte	0x184
 2897 09a4 0C       		.uleb128 0xc
 2898 09a5 B3050000 		.4byte	0x5b3
 2899 09a9 B4090000 		.4byte	0x9b4
 2900 09ad 0D       		.uleb128 0xd
ARM GAS  /tmp/cc5pUpZ5.s 			page 91


 2901 09ae 5D020000 		.4byte	0x25d
 2902 09b2 27       		.byte	0x27
 2903 09b3 00       		.byte	0
 2904 09b4 0E       		.uleb128 0xe
 2905 09b5 C1080000 		.4byte	0x8c1
 2906 09b9 22       		.uleb128 0x22
 2907 09ba 01       		.byte	0x1
 2908 09bb 2F080000 		.4byte	.LASF205
 2909 09bf 02       		.byte	0x2
 2910 09c0 6604     		.2byte	0x466
 2911 09c2 01       		.byte	0x1
 2912 09c3 00000000 		.4byte	.LFB22
 2913 09c7 64010000 		.4byte	.LFE22
 2914 09cb B2000000 		.4byte	.LLST4
 2915 09cf 01       		.byte	0x1
 2916 09d0 0C       		.uleb128 0xc
 2917 09d1 24010000 		.4byte	0x124
 2918 09d5 E0090000 		.4byte	0x9e0
 2919 09d9 0D       		.uleb128 0xd
 2920 09da 5D020000 		.4byte	0x25d
 2921 09de FF       		.byte	0xff
 2922 09df 00       		.byte	0
 2923 09e0 23       		.uleb128 0x23
 2924 09e1 76010000 		.4byte	.LASF148
 2925 09e5 02       		.byte	0x2
 2926 09e6 3B       		.byte	0x3b
 2927 09e7 F2090000 		.4byte	0x9f2
 2928 09eb 01       		.byte	0x1
 2929 09ec 05       		.byte	0x5
 2930 09ed 03       		.byte	0x3
 2931 09ee 00000000 		.4byte	tx2buff
 2932 09f2 0E       		.uleb128 0xe
 2933 09f3 D0090000 		.4byte	0x9d0
 2934 09f7 23       		.uleb128 0x23
 2935 09f8 32010000 		.4byte	.LASF149
 2936 09fc 02       		.byte	0x2
 2937 09fd 3C       		.byte	0x3c
 2938 09fe 090A0000 		.4byte	0xa09
 2939 0a02 01       		.byte	0x1
 2940 0a03 05       		.byte	0x5
 2941 0a04 03       		.byte	0x3
 2942 0a05 00000000 		.4byte	rx2buff
 2943 0a09 0E       		.uleb128 0xe
 2944 0a0a D0090000 		.4byte	0x9d0
 2945 0a0e 23       		.uleb128 0x23
 2946 0a0f E6030000 		.4byte	.LASF150
 2947 0a13 02       		.byte	0x2
 2948 0a14 3E       		.byte	0x3e
 2949 0a15 200A0000 		.4byte	0xa20
 2950 0a19 01       		.byte	0x1
 2951 0a1a 05       		.byte	0x5
 2952 0a1b 03       		.byte	0x3
 2953 0a1c 00000000 		.4byte	tx1buff
 2954 0a20 0E       		.uleb128 0xe
 2955 0a21 D0090000 		.4byte	0x9d0
 2956 0a25 23       		.uleb128 0x23
 2957 0a26 45010000 		.4byte	.LASF151
ARM GAS  /tmp/cc5pUpZ5.s 			page 92


 2958 0a2a 02       		.byte	0x2
 2959 0a2b 3F       		.byte	0x3f
 2960 0a2c 370A0000 		.4byte	0xa37
 2961 0a30 01       		.byte	0x1
 2962 0a31 05       		.byte	0x5
 2963 0a32 03       		.byte	0x3
 2964 0a33 00000000 		.4byte	rx1buff
 2965 0a37 0E       		.uleb128 0xe
 2966 0a38 D0090000 		.4byte	0x9d0
 2967 0a3c 23       		.uleb128 0x23
 2968 0a3d 1A030000 		.4byte	.LASF152
 2969 0a41 02       		.byte	0x2
 2970 0a42 49       		.byte	0x49
 2971 0a43 4E0A0000 		.4byte	0xa4e
 2972 0a47 01       		.byte	0x1
 2973 0a48 05       		.byte	0x5
 2974 0a49 03       		.byte	0x3
 2975 0a4a 00000000 		.4byte	show_select_timer
 2976 0a4e 0E       		.uleb128 0xe
 2977 0a4f 3D010000 		.4byte	0x13d
 2978 0a53 23       		.uleb128 0x23
 2979 0a54 3C050000 		.4byte	.LASF153
 2980 0a58 02       		.byte	0x2
 2981 0a59 4A       		.byte	0x4a
 2982 0a5a 650A0000 		.4byte	0xa65
 2983 0a5e 01       		.byte	0x1
 2984 0a5f 05       		.byte	0x5
 2985 0a60 03       		.byte	0x3
 2986 0a61 00000000 		.4byte	switches_timer
 2987 0a65 0E       		.uleb128 0xe
 2988 0a66 24010000 		.4byte	0x124
 2989 0a6a 23       		.uleb128 0x23
 2990 0a6b 4F000000 		.4byte	.LASF154
 2991 0a6f 02       		.byte	0x2
 2992 0a70 4B       		.byte	0x4b
 2993 0a71 650A0000 		.4byte	0xa65
 2994 0a75 01       		.byte	0x1
 2995 0a76 05       		.byte	0x5
 2996 0a77 03       		.byte	0x3
 2997 0a78 00000000 		.4byte	acswitch_timer
 2998 0a7c 23       		.uleb128 0x23
 2999 0a7d AE050000 		.4byte	.LASF155
 3000 0a81 02       		.byte	0x2
 3001 0a82 4D       		.byte	0x4d
 3002 0a83 4E0A0000 		.4byte	0xa4e
 3003 0a87 01       		.byte	0x1
 3004 0a88 05       		.byte	0x5
 3005 0a89 03       		.byte	0x3
 3006 0a8a 00000000 		.4byte	scroll1_timer
 3007 0a8e 23       		.uleb128 0x23
 3008 0a8f E3090000 		.4byte	.LASF156
 3009 0a93 02       		.byte	0x2
 3010 0a94 4E       		.byte	0x4e
 3011 0a95 4E0A0000 		.4byte	0xa4e
 3012 0a99 01       		.byte	0x1
 3013 0a9a 05       		.byte	0x5
 3014 0a9b 03       		.byte	0x3
ARM GAS  /tmp/cc5pUpZ5.s 			page 93


 3015 0a9c 00000000 		.4byte	scroll2_timer
 3016 0aa0 23       		.uleb128 0x23
 3017 0aa1 90090000 		.4byte	.LASF157
 3018 0aa5 02       		.byte	0x2
 3019 0aa6 50       		.byte	0x50
 3020 0aa7 4E0A0000 		.4byte	0xa4e
 3021 0aab 01       		.byte	0x1
 3022 0aac 05       		.byte	0x5
 3023 0aad 03       		.byte	0x3
 3024 0aae 00000000 		.4byte	standalone_timer
 3025 0ab2 23       		.uleb128 0x23
 3026 0ab3 77070000 		.4byte	.LASF158
 3027 0ab7 02       		.byte	0x2
 3028 0ab8 51       		.byte	0x51
 3029 0ab9 4E0A0000 		.4byte	0xa4e
 3030 0abd 01       		.byte	0x1
 3031 0abe 05       		.byte	0x5
 3032 0abf 03       		.byte	0x3
 3033 0ac0 00000000 		.4byte	standalone_enable_menu_timer
 3034 0ac4 23       		.uleb128 0x23
 3035 0ac5 8B010000 		.4byte	.LASF159
 3036 0ac9 02       		.byte	0x2
 3037 0aca 53       		.byte	0x53
 3038 0acb 650A0000 		.4byte	0xa65
 3039 0acf 01       		.byte	0x1
 3040 0ad0 05       		.byte	0x5
 3041 0ad1 03       		.byte	0x3
 3042 0ad2 00000000 		.4byte	grouped_master_timeout_timer
 3043 0ad6 23       		.uleb128 0x23
 3044 0ad7 61030000 		.4byte	.LASF160
 3045 0adb 02       		.byte	0x2
 3046 0adc 54       		.byte	0x54
 3047 0add 4E0A0000 		.4byte	0xa4e
 3048 0ae1 01       		.byte	0x1
 3049 0ae2 05       		.byte	0x5
 3050 0ae3 03       		.byte	0x3
 3051 0ae4 00000000 		.4byte	take_temp_sample
 3052 0ae8 23       		.uleb128 0x23
 3053 0ae9 45080000 		.4byte	.LASF161
 3054 0aed 02       		.byte	0x2
 3055 0aee 55       		.byte	0x55
 3056 0aef 650A0000 		.4byte	0xa65
 3057 0af3 01       		.byte	0x1
 3058 0af4 05       		.byte	0x5
 3059 0af5 03       		.byte	0x3
 3060 0af6 00000000 		.4byte	timer_wifi_bright
 3061 0afa 23       		.uleb128 0x23
 3062 0afb 88040000 		.4byte	.LASF162
 3063 0aff 02       		.byte	0x2
 3064 0b00 58       		.byte	0x58
 3065 0b01 4E0A0000 		.4byte	0xa4e
 3066 0b05 01       		.byte	0x1
 3067 0b06 05       		.byte	0x5
 3068 0b07 03       		.byte	0x3
 3069 0b08 00000000 		.4byte	timer_relay
 3070 0b0c 23       		.uleb128 0x23
 3071 0b0d AC020000 		.4byte	.LASF163
ARM GAS  /tmp/cc5pUpZ5.s 			page 94


 3072 0b11 02       		.byte	0x2
 3073 0b12 5A       		.byte	0x5a
 3074 0b13 4E0A0000 		.4byte	0xa4e
 3075 0b17 01       		.byte	0x1
 3076 0b18 05       		.byte	0x5
 3077 0b19 03       		.byte	0x3
 3078 0b1a 00000000 		.4byte	tt_take_photo_sample
 3079 0b1e 23       		.uleb128 0x23
 3080 0b1f 00040000 		.4byte	.LASF164
 3081 0b23 02       		.byte	0x2
 3082 0b24 5B       		.byte	0x5b
 3083 0b25 4E0A0000 		.4byte	0xa4e
 3084 0b29 01       		.byte	0x1
 3085 0b2a 05       		.byte	0x5
 3086 0b2b 03       		.byte	0x3
 3087 0b2c 00000000 		.4byte	tt_relay_on_off
 3088 0b30 23       		.uleb128 0x23
 3089 0b31 65040000 		.4byte	.LASF165
 3090 0b35 02       		.byte	0x2
 3091 0b36 5F       		.byte	0x5f
 3092 0b37 24010000 		.4byte	0x124
 3093 0b3b 01       		.byte	0x1
 3094 0b3c 05       		.byte	0x5
 3095 0b3d 03       		.byte	0x3
 3096 0b3e 00000000 		.4byte	saved_mode
 3097 0b42 24       		.uleb128 0x24
 3098 0b43 733100   		.ascii	"s1\000"
 3099 0b46 02       		.byte	0x2
 3100 0b47 63       		.byte	0x63
 3101 0b48 3D010000 		.4byte	0x13d
 3102 0b4c 01       		.byte	0x1
 3103 0b4d 05       		.byte	0x5
 3104 0b4e 03       		.byte	0x3
 3105 0b4f 00000000 		.4byte	s1
 3106 0b53 24       		.uleb128 0x24
 3107 0b54 733200   		.ascii	"s2\000"
 3108 0b57 02       		.byte	0x2
 3109 0b58 64       		.byte	0x64
 3110 0b59 3D010000 		.4byte	0x13d
 3111 0b5d 01       		.byte	0x1
 3112 0b5e 05       		.byte	0x5
 3113 0b5f 03       		.byte	0x3
 3114 0b60 00000000 		.4byte	s2
 3115 0b64 24       		.uleb128 0x24
 3116 0b65 73616300 		.ascii	"sac\000"
 3117 0b69 02       		.byte	0x2
 3118 0b6a 65       		.byte	0x65
 3119 0b6b 3D010000 		.4byte	0x13d
 3120 0b6f 01       		.byte	0x1
 3121 0b70 05       		.byte	0x5
 3122 0b71 03       		.byte	0x3
 3123 0b72 00000000 		.4byte	sac
 3124 0b76 23       		.uleb128 0x23
 3125 0b77 1E080000 		.4byte	.LASF166
 3126 0b7b 02       		.byte	0x2
 3127 0b7c 66       		.byte	0x66
 3128 0b7d 24010000 		.4byte	0x124
ARM GAS  /tmp/cc5pUpZ5.s 			page 95


 3129 0b81 01       		.byte	0x1
 3130 0b82 05       		.byte	0x5
 3131 0b83 03       		.byte	0x3
 3132 0b84 00000000 		.4byte	sac_aux
 3133 0b88 23       		.uleb128 0x23
 3134 0b89 94070000 		.4byte	.LASF167
 3135 0b8d 02       		.byte	0x2
 3136 0b8e 6A       		.byte	0x6a
 3137 0b8f 9A0B0000 		.4byte	0xb9a
 3138 0b93 01       		.byte	0x1
 3139 0b94 05       		.byte	0x5
 3140 0b95 03       		.byte	0x3
 3141 0b96 00000000 		.4byte	adc_ch
 3142 0b9a 0E       		.uleb128 0xe
 3143 0b9b BA050000 		.4byte	0x5ba
 3144 0b9f 23       		.uleb128 0x23
 3145 0ba0 D3090000 		.4byte	.LASF168
 3146 0ba4 02       		.byte	0x2
 3147 0ba5 6B       		.byte	0x6b
 3148 0ba6 650A0000 		.4byte	0xa65
 3149 0baa 01       		.byte	0x1
 3150 0bab 05       		.byte	0x5
 3151 0bac 03       		.byte	0x3
 3152 0bad 00000000 		.4byte	seq_ready
 3153 0bb1 23       		.uleb128 0x23
 3154 0bb2 B5040000 		.4byte	.LASF169
 3155 0bb6 02       		.byte	0x2
 3156 0bb7 6C       		.byte	0x6c
 3157 0bb8 3D010000 		.4byte	0x13d
 3158 0bbc 01       		.byte	0x1
 3159 0bbd 05       		.byte	0x5
 3160 0bbe 03       		.byte	0x3
 3161 0bbf 00000000 		.4byte	zero_current
 3162 0bc3 23       		.uleb128 0x23
 3163 0bc4 47040000 		.4byte	.LASF170
 3164 0bc8 02       		.byte	0x2
 3165 0bc9 70       		.byte	0x70
 3166 0bca 650A0000 		.4byte	0xa65
 3167 0bce 01       		.byte	0x1
 3168 0bcf 05       		.byte	0x5
 3169 0bd0 03       		.byte	0x3
 3170 0bd1 00000000 		.4byte	usart1_mini_timeout
 3171 0bd5 23       		.uleb128 0x23
 3172 0bd6 72020000 		.4byte	.LASF171
 3173 0bda 02       		.byte	0x2
 3174 0bdb 71       		.byte	0x71
 3175 0bdc 650A0000 		.4byte	0xa65
 3176 0be0 01       		.byte	0x1
 3177 0be1 05       		.byte	0x5
 3178 0be2 03       		.byte	0x3
 3179 0be3 00000000 		.4byte	usart1_pckt_ready
 3180 0be7 23       		.uleb128 0x23
 3181 0be8 FD020000 		.4byte	.LASF172
 3182 0bec 02       		.byte	0x2
 3183 0bed 72       		.byte	0x72
 3184 0bee 650A0000 		.4byte	0xa65
 3185 0bf2 01       		.byte	0x1
ARM GAS  /tmp/cc5pUpZ5.s 			page 96


 3186 0bf3 05       		.byte	0x5
 3187 0bf4 03       		.byte	0x3
 3188 0bf5 00000000 		.4byte	usart1_have_data
 3189 0bf9 23       		.uleb128 0x23
 3190 0bfa 40020000 		.4byte	.LASF173
 3191 0bfe 02       		.byte	0x2
 3192 0bff 73       		.byte	0x73
 3193 0c00 24010000 		.4byte	0x124
 3194 0c04 01       		.byte	0x1
 3195 0c05 05       		.byte	0x5
 3196 0c06 03       		.byte	0x3
 3197 0c07 00000000 		.4byte	usart1_pckt_bytes
 3198 0c0b 23       		.uleb128 0x23
 3199 0c0c C6030000 		.4byte	.LASF174
 3200 0c10 02       		.byte	0x2
 3201 0c11 8A       		.byte	0x8a
 3202 0c12 650A0000 		.4byte	0xa65
 3203 0c16 01       		.byte	0x1
 3204 0c17 05       		.byte	0x5
 3205 0c18 03       		.byte	0x3
 3206 0c19 00000000 		.4byte	usart2_mini_timeout
 3207 0c1d 23       		.uleb128 0x23
 3208 0c1e 64010000 		.4byte	.LASF175
 3209 0c22 02       		.byte	0x2
 3210 0c23 8B       		.byte	0x8b
 3211 0c24 650A0000 		.4byte	0xa65
 3212 0c28 01       		.byte	0x1
 3213 0c29 05       		.byte	0x5
 3214 0c2a 03       		.byte	0x3
 3215 0c2b 00000000 		.4byte	usart2_pckt_ready
 3216 0c2f 23       		.uleb128 0x23
 3217 0c30 BE010000 		.4byte	.LASF176
 3218 0c34 02       		.byte	0x2
 3219 0c35 8C       		.byte	0x8c
 3220 0c36 650A0000 		.4byte	0xa65
 3221 0c3a 01       		.byte	0x1
 3222 0c3b 05       		.byte	0x5
 3223 0c3c 03       		.byte	0x3
 3224 0c3d 00000000 		.4byte	usart2_have_data
 3225 0c41 23       		.uleb128 0x23
 3226 0c42 EE030000 		.4byte	.LASF177
 3227 0c46 02       		.byte	0x2
 3228 0c47 8D       		.byte	0x8d
 3229 0c48 24010000 		.4byte	0x124
 3230 0c4c 01       		.byte	0x1
 3231 0c4d 05       		.byte	0x5
 3232 0c4e 03       		.byte	0x3
 3233 0c4f 00000000 		.4byte	usart2_pckt_bytes
 3234 0c53 0C       		.uleb128 0xc
 3235 0c54 B3050000 		.4byte	0x5b3
 3236 0c58 5E0C0000 		.4byte	0xc5e
 3237 0c5c 25       		.uleb128 0x25
 3238 0c5d 00       		.byte	0
 3239 0c5e 26       		.uleb128 0x26
 3240 0c5f 7D050000 		.4byte	.LASF178
 3241 0c63 02       		.byte	0x2
 3242 0c64 93       		.byte	0x93
ARM GAS  /tmp/cc5pUpZ5.s 			page 97


 3243 0c65 6B0C0000 		.4byte	0xc6b
 3244 0c69 01       		.byte	0x1
 3245 0c6a 01       		.byte	0x1
 3246 0c6b 0E       		.uleb128 0xe
 3247 0c6c 530C0000 		.4byte	0xc53
 3248 0c70 23       		.uleb128 0x23
 3249 0c71 5E000000 		.4byte	.LASF179
 3250 0c75 02       		.byte	0x2
 3251 0c76 97       		.byte	0x97
 3252 0c77 B9060000 		.4byte	0x6b9
 3253 0c7b 01       		.byte	0x1
 3254 0c7c 05       		.byte	0x5
 3255 0c7d 03       		.byte	0x3
 3256 0c7e 00000000 		.4byte	param_struct
 3257 0c82 23       		.uleb128 0x23
 3258 0c83 F5010000 		.4byte	.LASF180
 3259 0c87 02       		.byte	0x2
 3260 0c88 9A       		.byte	0x9a
 3261 0c89 7D010000 		.4byte	0x17d
 3262 0c8d 01       		.byte	0x1
 3263 0c8e 05       		.byte	0x5
 3264 0c8f 03       		.byte	0x3
 3265 0c90 00000000 		.4byte	power_2secs_acum
 3266 0c94 23       		.uleb128 0x23
 3267 0c95 2A050000 		.4byte	.LASF181
 3268 0c99 02       		.byte	0x2
 3269 0c9a 9B       		.byte	0x9b
 3270 0c9b 24010000 		.4byte	0x124
 3271 0c9f 01       		.byte	0x1
 3272 0ca0 05       		.byte	0x5
 3273 0ca1 03       		.byte	0x3
 3274 0ca2 00000000 		.4byte	power_2secs_index
 3275 0ca6 23       		.uleb128 0x23
 3276 0ca7 D5020000 		.4byte	.LASF182
 3277 0cab 02       		.byte	0x2
 3278 0cac 9C       		.byte	0x9c
 3279 0cad 3D010000 		.4byte	0x13d
 3280 0cb1 01       		.byte	0x1
 3281 0cb2 05       		.byte	0x5
 3282 0cb3 03       		.byte	0x3
 3283 0cb4 00000000 		.4byte	power_minutes
 3284 0cb8 23       		.uleb128 0x23
 3285 0cb9 B5090000 		.4byte	.LASF183
 3286 0cbd 02       		.byte	0x2
 3287 0cbe 9D       		.byte	0x9d
 3288 0cbf 24010000 		.4byte	0x124
 3289 0cc3 01       		.byte	0x1
 3290 0cc4 05       		.byte	0x5
 3291 0cc5 03       		.byte	0x3
 3292 0cc6 00000000 		.4byte	power_minutes_index
 3293 0cca 23       		.uleb128 0x23
 3294 0ccb DA030000 		.4byte	.LASF184
 3295 0ccf 02       		.byte	0x2
 3296 0cd0 9E       		.byte	0x9e
 3297 0cd1 3D010000 		.4byte	0x13d
 3298 0cd5 01       		.byte	0x1
 3299 0cd6 05       		.byte	0x5
ARM GAS  /tmp/cc5pUpZ5.s 			page 98


 3300 0cd7 03       		.byte	0x3
 3301 0cd8 00000000 		.4byte	power_hours
 3302 0cdc 23       		.uleb128 0x23
 3303 0cdd A7050000 		.4byte	.LASF185
 3304 0ce1 02       		.byte	0x2
 3305 0ce2 A1       		.byte	0xa1
 3306 0ce3 C8080000 		.4byte	0x8c8
 3307 0ce7 01       		.byte	0x1
 3308 0ce8 05       		.byte	0x5
 3309 0ce9 03       		.byte	0x3
 3310 0cea 00000000 		.4byte	gsmNUM
 3311 0cee 0C       		.uleb128 0xc
 3312 0cef B3050000 		.4byte	0x5b3
 3313 0cf3 FE0C0000 		.4byte	0xcfe
 3314 0cf7 0D       		.uleb128 0xd
 3315 0cf8 5D020000 		.4byte	0x25d
 3316 0cfc B3       		.byte	0xb3
 3317 0cfd 00       		.byte	0
 3318 0cfe 23       		.uleb128 0x23
 3319 0cff 88060000 		.4byte	.LASF186
 3320 0d03 02       		.byte	0x2
 3321 0d04 A2       		.byte	0xa2
 3322 0d05 EE0C0000 		.4byte	0xcee
 3323 0d09 01       		.byte	0x1
 3324 0d0a 05       		.byte	0x5
 3325 0d0b 03       		.byte	0x3
 3326 0d0c 00000000 		.4byte	gsmMSG
 3327 0d10 23       		.uleb128 0x23
 3328 0d11 50060000 		.4byte	.LASF187
 3329 0d15 02       		.byte	0x2
 3330 0d16 AA       		.byte	0xaa
 3331 0d17 4E0A0000 		.4byte	0xa4e
 3332 0d1b 01       		.byte	0x1
 3333 0d1c 05       		.byte	0x5
 3334 0d1d 03       		.byte	0x3
 3335 0d1e 00000000 		.4byte	wait_ms_var
 3336 0d22 23       		.uleb128 0x23
 3337 0d23 F1090000 		.4byte	.LASF188
 3338 0d27 02       		.byte	0x2
 3339 0d28 AB       		.byte	0xab
 3340 0d29 4E0A0000 		.4byte	0xa4e
 3341 0d2d 01       		.byte	0x1
 3342 0d2e 05       		.byte	0x5
 3343 0d2f 03       		.byte	0x3
 3344 0d30 00000000 		.4byte	timer_standby
 3345 0d34 23       		.uleb128 0x23
 3346 0d35 17010000 		.4byte	.LASF189
 3347 0d39 02       		.byte	0x2
 3348 0d3a AC       		.byte	0xac
 3349 0d3b 4E0A0000 		.4byte	0xa4e
 3350 0d3f 01       		.byte	0x1
 3351 0d40 05       		.byte	0x5
 3352 0d41 03       		.byte	0x3
 3353 0d42 00000000 		.4byte	tcp_kalive_timer
 3354 0d46 23       		.uleb128 0x23
 3355 0d47 70040000 		.4byte	.LASF190
 3356 0d4b 02       		.byte	0x2
ARM GAS  /tmp/cc5pUpZ5.s 			page 99


 3357 0d4c AE       		.byte	0xae
 3358 0d4d 650A0000 		.4byte	0xa65
 3359 0d51 01       		.byte	0x1
 3360 0d52 05       		.byte	0x5
 3361 0d53 03       		.byte	0x3
 3362 0d54 00000000 		.4byte	filter_timer
 3363 0d58 23       		.uleb128 0x23
 3364 0d59 10040000 		.4byte	.LASF191
 3365 0d5d 02       		.byte	0x2
 3366 0d5e B3       		.byte	0xb3
 3367 0d5f 4E0A0000 		.4byte	0xa4e
 3368 0d63 01       		.byte	0x1
 3369 0d64 05       		.byte	0x5
 3370 0d65 03       		.byte	0x3
 3371 0d66 00000000 		.4byte	secs
 3372 0d6a 23       		.uleb128 0x23
 3373 0d6b 8F060000 		.4byte	.LASF192
 3374 0d6f 02       		.byte	0x2
 3375 0d70 B4       		.byte	0xb4
 3376 0d71 650A0000 		.4byte	0xa65
 3377 0d75 01       		.byte	0x1
 3378 0d76 05       		.byte	0x5
 3379 0d77 03       		.byte	0x3
 3380 0d78 00000000 		.4byte	hours
 3381 0d7c 23       		.uleb128 0x23
 3382 0d7d 5D020000 		.4byte	.LASF193
 3383 0d81 02       		.byte	0x2
 3384 0d82 B5       		.byte	0xb5
 3385 0d83 650A0000 		.4byte	0xa65
 3386 0d87 01       		.byte	0x1
 3387 0d88 05       		.byte	0x5
 3388 0d89 03       		.byte	0x3
 3389 0d8a 00000000 		.4byte	minutes
 3390 0d8e 0C       		.uleb128 0xc
 3391 0d8f 3D010000 		.4byte	0x13d
 3392 0d93 9E0D0000 		.4byte	0xd9e
 3393 0d97 0D       		.uleb128 0xd
 3394 0d98 5D020000 		.4byte	0x25d
 3395 0d9c 09       		.byte	0x9
 3396 0d9d 00       		.byte	0
 3397 0d9e 23       		.uleb128 0x23
 3398 0d9f 4D010000 		.4byte	.LASF194
 3399 0da3 02       		.byte	0x2
 3400 0da4 B9       		.byte	0xb9
 3401 0da5 8E0D0000 		.4byte	0xd8e
 3402 0da9 01       		.byte	0x1
 3403 0daa 05       		.byte	0x5
 3404 0dab 03       		.byte	0x3
 3405 0dac 00000000 		.4byte	power_vect
 3406 0db0 0C       		.uleb128 0xc
 3407 0db1 3D010000 		.4byte	0x13d
 3408 0db5 C00D0000 		.4byte	0xdc0
 3409 0db9 0D       		.uleb128 0xd
 3410 0dba 5D020000 		.4byte	0x25d
 3411 0dbe 10       		.byte	0x10
 3412 0dbf 00       		.byte	0
 3413 0dc0 23       		.uleb128 0x23
ARM GAS  /tmp/cc5pUpZ5.s 			page 100


 3414 0dc1 DD090000 		.4byte	.LASF195
 3415 0dc5 02       		.byte	0x2
 3416 0dc6 C7       		.byte	0xc7
 3417 0dc7 B00D0000 		.4byte	0xdb0
 3418 0dcb 01       		.byte	0x1
 3419 0dcc 05       		.byte	0x5
 3420 0dcd 03       		.byte	0x3
 3421 0dce 00000000 		.4byte	vtemp
 3422 0dd2 23       		.uleb128 0x23
 3423 0dd3 E3000000 		.4byte	.LASF196
 3424 0dd7 02       		.byte	0x2
 3425 0dd8 C8       		.byte	0xc8
 3426 0dd9 B00D0000 		.4byte	0xdb0
 3427 0ddd 01       		.byte	0x1
 3428 0dde 05       		.byte	0x5
 3429 0ddf 03       		.byte	0x3
 3430 0de0 00000000 		.4byte	vpote
 3431 0de4 00       		.byte	0
 3432              		.section	.debug_abbrev,"",%progbits
 3433              	.Ldebug_abbrev0:
 3434 0000 01       		.uleb128 0x1
 3435 0001 11       		.uleb128 0x11
 3436 0002 01       		.byte	0x1
 3437 0003 25       		.uleb128 0x25
 3438 0004 0E       		.uleb128 0xe
 3439 0005 13       		.uleb128 0x13
 3440 0006 0B       		.uleb128 0xb
 3441 0007 03       		.uleb128 0x3
 3442 0008 0E       		.uleb128 0xe
 3443 0009 1B       		.uleb128 0x1b
 3444 000a 0E       		.uleb128 0xe
 3445 000b 55       		.uleb128 0x55
 3446 000c 06       		.uleb128 0x6
 3447 000d 11       		.uleb128 0x11
 3448 000e 01       		.uleb128 0x1
 3449 000f 52       		.uleb128 0x52
 3450 0010 01       		.uleb128 0x1
 3451 0011 10       		.uleb128 0x10
 3452 0012 06       		.uleb128 0x6
 3453 0013 00       		.byte	0
 3454 0014 00       		.byte	0
 3455 0015 02       		.uleb128 0x2
 3456 0016 04       		.uleb128 0x4
 3457 0017 01       		.byte	0x1
 3458 0018 03       		.uleb128 0x3
 3459 0019 0E       		.uleb128 0xe
 3460 001a 0B       		.uleb128 0xb
 3461 001b 0B       		.uleb128 0xb
 3462 001c 49       		.uleb128 0x49
 3463 001d 13       		.uleb128 0x13
 3464 001e 3A       		.uleb128 0x3a
 3465 001f 0B       		.uleb128 0xb
 3466 0020 3B       		.uleb128 0x3b
 3467 0021 0B       		.uleb128 0xb
 3468 0022 01       		.uleb128 0x1
 3469 0023 13       		.uleb128 0x13
 3470 0024 00       		.byte	0
ARM GAS  /tmp/cc5pUpZ5.s 			page 101


 3471 0025 00       		.byte	0
 3472 0026 03       		.uleb128 0x3
 3473 0027 28       		.uleb128 0x28
 3474 0028 00       		.byte	0
 3475 0029 03       		.uleb128 0x3
 3476 002a 0E       		.uleb128 0xe
 3477 002b 1C       		.uleb128 0x1c
 3478 002c 0D       		.uleb128 0xd
 3479 002d 00       		.byte	0
 3480 002e 00       		.byte	0
 3481 002f 04       		.uleb128 0x4
 3482 0030 28       		.uleb128 0x28
 3483 0031 00       		.byte	0
 3484 0032 03       		.uleb128 0x3
 3485 0033 0E       		.uleb128 0xe
 3486 0034 1C       		.uleb128 0x1c
 3487 0035 0B       		.uleb128 0xb
 3488 0036 00       		.byte	0
 3489 0037 00       		.byte	0
 3490 0038 05       		.uleb128 0x5
 3491 0039 24       		.uleb128 0x24
 3492 003a 00       		.byte	0
 3493 003b 0B       		.uleb128 0xb
 3494 003c 0B       		.uleb128 0xb
 3495 003d 3E       		.uleb128 0x3e
 3496 003e 0B       		.uleb128 0xb
 3497 003f 03       		.uleb128 0x3
 3498 0040 0E       		.uleb128 0xe
 3499 0041 00       		.byte	0
 3500 0042 00       		.byte	0
 3501 0043 06       		.uleb128 0x6
 3502 0044 16       		.uleb128 0x16
 3503 0045 00       		.byte	0
 3504 0046 03       		.uleb128 0x3
 3505 0047 0E       		.uleb128 0xe
 3506 0048 3A       		.uleb128 0x3a
 3507 0049 0B       		.uleb128 0xb
 3508 004a 3B       		.uleb128 0x3b
 3509 004b 05       		.uleb128 0x5
 3510 004c 49       		.uleb128 0x49
 3511 004d 13       		.uleb128 0x13
 3512 004e 00       		.byte	0
 3513 004f 00       		.byte	0
 3514 0050 07       		.uleb128 0x7
 3515 0051 16       		.uleb128 0x16
 3516 0052 00       		.byte	0
 3517 0053 03       		.uleb128 0x3
 3518 0054 0E       		.uleb128 0xe
 3519 0055 3A       		.uleb128 0x3a
 3520 0056 0B       		.uleb128 0xb
 3521 0057 3B       		.uleb128 0x3b
 3522 0058 0B       		.uleb128 0xb
 3523 0059 49       		.uleb128 0x49
 3524 005a 13       		.uleb128 0x13
 3525 005b 00       		.byte	0
 3526 005c 00       		.byte	0
 3527 005d 08       		.uleb128 0x8
ARM GAS  /tmp/cc5pUpZ5.s 			page 102


 3528 005e 24       		.uleb128 0x24
 3529 005f 00       		.byte	0
 3530 0060 0B       		.uleb128 0xb
 3531 0061 0B       		.uleb128 0xb
 3532 0062 3E       		.uleb128 0x3e
 3533 0063 0B       		.uleb128 0xb
 3534 0064 03       		.uleb128 0x3
 3535 0065 08       		.uleb128 0x8
 3536 0066 00       		.byte	0
 3537 0067 00       		.byte	0
 3538 0068 09       		.uleb128 0x9
 3539 0069 13       		.uleb128 0x13
 3540 006a 01       		.byte	0x1
 3541 006b 0B       		.uleb128 0xb
 3542 006c 05       		.uleb128 0x5
 3543 006d 3A       		.uleb128 0x3a
 3544 006e 0B       		.uleb128 0xb
 3545 006f 3B       		.uleb128 0x3b
 3546 0070 0B       		.uleb128 0xb
 3547 0071 01       		.uleb128 0x1
 3548 0072 13       		.uleb128 0x13
 3549 0073 00       		.byte	0
 3550 0074 00       		.byte	0
 3551 0075 0A       		.uleb128 0xa
 3552 0076 0D       		.uleb128 0xd
 3553 0077 00       		.byte	0
 3554 0078 03       		.uleb128 0x3
 3555 0079 0E       		.uleb128 0xe
 3556 007a 3A       		.uleb128 0x3a
 3557 007b 0B       		.uleb128 0xb
 3558 007c 3B       		.uleb128 0x3b
 3559 007d 0B       		.uleb128 0xb
 3560 007e 49       		.uleb128 0x49
 3561 007f 13       		.uleb128 0x13
 3562 0080 38       		.uleb128 0x38
 3563 0081 0A       		.uleb128 0xa
 3564 0082 00       		.byte	0
 3565 0083 00       		.byte	0
 3566 0084 0B       		.uleb128 0xb
 3567 0085 0D       		.uleb128 0xd
 3568 0086 00       		.byte	0
 3569 0087 03       		.uleb128 0x3
 3570 0088 08       		.uleb128 0x8
 3571 0089 3A       		.uleb128 0x3a
 3572 008a 0B       		.uleb128 0xb
 3573 008b 3B       		.uleb128 0x3b
 3574 008c 0B       		.uleb128 0xb
 3575 008d 49       		.uleb128 0x49
 3576 008e 13       		.uleb128 0x13
 3577 008f 38       		.uleb128 0x38
 3578 0090 0A       		.uleb128 0xa
 3579 0091 00       		.byte	0
 3580 0092 00       		.byte	0
 3581 0093 0C       		.uleb128 0xc
 3582 0094 01       		.uleb128 0x1
 3583 0095 01       		.byte	0x1
 3584 0096 49       		.uleb128 0x49
ARM GAS  /tmp/cc5pUpZ5.s 			page 103


 3585 0097 13       		.uleb128 0x13
 3586 0098 01       		.uleb128 0x1
 3587 0099 13       		.uleb128 0x13
 3588 009a 00       		.byte	0
 3589 009b 00       		.byte	0
 3590 009c 0D       		.uleb128 0xd
 3591 009d 21       		.uleb128 0x21
 3592 009e 00       		.byte	0
 3593 009f 49       		.uleb128 0x49
 3594 00a0 13       		.uleb128 0x13
 3595 00a1 2F       		.uleb128 0x2f
 3596 00a2 0B       		.uleb128 0xb
 3597 00a3 00       		.byte	0
 3598 00a4 00       		.byte	0
 3599 00a5 0E       		.uleb128 0xe
 3600 00a6 35       		.uleb128 0x35
 3601 00a7 00       		.byte	0
 3602 00a8 49       		.uleb128 0x49
 3603 00a9 13       		.uleb128 0x13
 3604 00aa 00       		.byte	0
 3605 00ab 00       		.byte	0
 3606 00ac 0F       		.uleb128 0xf
 3607 00ad 13       		.uleb128 0x13
 3608 00ae 01       		.byte	0x1
 3609 00af 0B       		.uleb128 0xb
 3610 00b0 0B       		.uleb128 0xb
 3611 00b1 3A       		.uleb128 0x3a
 3612 00b2 0B       		.uleb128 0xb
 3613 00b3 3B       		.uleb128 0x3b
 3614 00b4 0B       		.uleb128 0xb
 3615 00b5 01       		.uleb128 0x1
 3616 00b6 13       		.uleb128 0x13
 3617 00b7 00       		.byte	0
 3618 00b8 00       		.byte	0
 3619 00b9 10       		.uleb128 0x10
 3620 00ba 26       		.uleb128 0x26
 3621 00bb 00       		.byte	0
 3622 00bc 49       		.uleb128 0x49
 3623 00bd 13       		.uleb128 0x13
 3624 00be 00       		.byte	0
 3625 00bf 00       		.byte	0
 3626 00c0 11       		.uleb128 0x11
 3627 00c1 0D       		.uleb128 0xd
 3628 00c2 00       		.byte	0
 3629 00c3 03       		.uleb128 0x3
 3630 00c4 08       		.uleb128 0x8
 3631 00c5 3A       		.uleb128 0x3a
 3632 00c6 0B       		.uleb128 0xb
 3633 00c7 3B       		.uleb128 0x3b
 3634 00c8 05       		.uleb128 0x5
 3635 00c9 49       		.uleb128 0x49
 3636 00ca 13       		.uleb128 0x13
 3637 00cb 38       		.uleb128 0x38
 3638 00cc 0A       		.uleb128 0xa
 3639 00cd 00       		.byte	0
 3640 00ce 00       		.byte	0
 3641 00cf 12       		.uleb128 0x12
ARM GAS  /tmp/cc5pUpZ5.s 			page 104


 3642 00d0 0D       		.uleb128 0xd
 3643 00d1 00       		.byte	0
 3644 00d2 03       		.uleb128 0x3
 3645 00d3 0E       		.uleb128 0xe
 3646 00d4 3A       		.uleb128 0x3a
 3647 00d5 0B       		.uleb128 0xb
 3648 00d6 3B       		.uleb128 0x3b
 3649 00d7 05       		.uleb128 0x5
 3650 00d8 49       		.uleb128 0x49
 3651 00d9 13       		.uleb128 0x13
 3652 00da 38       		.uleb128 0x38
 3653 00db 0A       		.uleb128 0xa
 3654 00dc 00       		.byte	0
 3655 00dd 00       		.byte	0
 3656 00de 13       		.uleb128 0x13
 3657 00df 13       		.uleb128 0x13
 3658 00e0 01       		.byte	0x1
 3659 00e1 0B       		.uleb128 0xb
 3660 00e2 0B       		.uleb128 0xb
 3661 00e3 3A       		.uleb128 0x3a
 3662 00e4 0B       		.uleb128 0xb
 3663 00e5 3B       		.uleb128 0x3b
 3664 00e6 05       		.uleb128 0x5
 3665 00e7 01       		.uleb128 0x1
 3666 00e8 13       		.uleb128 0x13
 3667 00e9 00       		.byte	0
 3668 00ea 00       		.byte	0
 3669 00eb 14       		.uleb128 0x14
 3670 00ec 04       		.uleb128 0x4
 3671 00ed 01       		.byte	0x1
 3672 00ee 0B       		.uleb128 0xb
 3673 00ef 0B       		.uleb128 0xb
 3674 00f0 49       		.uleb128 0x49
 3675 00f1 13       		.uleb128 0x13
 3676 00f2 3A       		.uleb128 0x3a
 3677 00f3 0B       		.uleb128 0xb
 3678 00f4 3B       		.uleb128 0x3b
 3679 00f5 0B       		.uleb128 0xb
 3680 00f6 01       		.uleb128 0x1
 3681 00f7 13       		.uleb128 0x13
 3682 00f8 00       		.byte	0
 3683 00f9 00       		.byte	0
 3684 00fa 15       		.uleb128 0x15
 3685 00fb 13       		.uleb128 0x13
 3686 00fc 01       		.byte	0x1
 3687 00fd 03       		.uleb128 0x3
 3688 00fe 0E       		.uleb128 0xe
 3689 00ff 0B       		.uleb128 0xb
 3690 0100 0B       		.uleb128 0xb
 3691 0101 3A       		.uleb128 0x3a
 3692 0102 0B       		.uleb128 0xb
 3693 0103 3B       		.uleb128 0x3b
 3694 0104 0B       		.uleb128 0xb
 3695 0105 01       		.uleb128 0x1
 3696 0106 13       		.uleb128 0x13
 3697 0107 00       		.byte	0
 3698 0108 00       		.byte	0
ARM GAS  /tmp/cc5pUpZ5.s 			page 105


 3699 0109 16       		.uleb128 0x16
 3700 010a 2E       		.uleb128 0x2e
 3701 010b 01       		.byte	0x1
 3702 010c 03       		.uleb128 0x3
 3703 010d 0E       		.uleb128 0xe
 3704 010e 3A       		.uleb128 0x3a
 3705 010f 0B       		.uleb128 0xb
 3706 0110 3B       		.uleb128 0x3b
 3707 0111 05       		.uleb128 0x5
 3708 0112 27       		.uleb128 0x27
 3709 0113 0C       		.uleb128 0xc
 3710 0114 11       		.uleb128 0x11
 3711 0115 01       		.uleb128 0x1
 3712 0116 12       		.uleb128 0x12
 3713 0117 01       		.uleb128 0x1
 3714 0118 40       		.uleb128 0x40
 3715 0119 06       		.uleb128 0x6
 3716 011a 9742     		.uleb128 0x2117
 3717 011c 0C       		.uleb128 0xc
 3718 011d 01       		.uleb128 0x1
 3719 011e 13       		.uleb128 0x13
 3720 011f 00       		.byte	0
 3721 0120 00       		.byte	0
 3722 0121 17       		.uleb128 0x17
 3723 0122 05       		.uleb128 0x5
 3724 0123 00       		.byte	0
 3725 0124 03       		.uleb128 0x3
 3726 0125 0E       		.uleb128 0xe
 3727 0126 3A       		.uleb128 0x3a
 3728 0127 0B       		.uleb128 0xb
 3729 0128 3B       		.uleb128 0x3b
 3730 0129 05       		.uleb128 0x5
 3731 012a 49       		.uleb128 0x49
 3732 012b 13       		.uleb128 0x13
 3733 012c 02       		.uleb128 0x2
 3734 012d 0A       		.uleb128 0xa
 3735 012e 00       		.byte	0
 3736 012f 00       		.byte	0
 3737 0130 18       		.uleb128 0x18
 3738 0131 2E       		.uleb128 0x2e
 3739 0132 01       		.byte	0x1
 3740 0133 03       		.uleb128 0x3
 3741 0134 0E       		.uleb128 0xe
 3742 0135 3A       		.uleb128 0x3a
 3743 0136 0B       		.uleb128 0xb
 3744 0137 3B       		.uleb128 0x3b
 3745 0138 05       		.uleb128 0x5
 3746 0139 27       		.uleb128 0x27
 3747 013a 0C       		.uleb128 0xc
 3748 013b 49       		.uleb128 0x49
 3749 013c 13       		.uleb128 0x13
 3750 013d 11       		.uleb128 0x11
 3751 013e 01       		.uleb128 0x1
 3752 013f 12       		.uleb128 0x12
 3753 0140 01       		.uleb128 0x1
 3754 0141 40       		.uleb128 0x40
 3755 0142 06       		.uleb128 0x6
ARM GAS  /tmp/cc5pUpZ5.s 			page 106


 3756 0143 9642     		.uleb128 0x2116
 3757 0145 0C       		.uleb128 0xc
 3758 0146 01       		.uleb128 0x1
 3759 0147 13       		.uleb128 0x13
 3760 0148 00       		.byte	0
 3761 0149 00       		.byte	0
 3762 014a 19       		.uleb128 0x19
 3763 014b 2E       		.uleb128 0x2e
 3764 014c 01       		.byte	0x1
 3765 014d 3F       		.uleb128 0x3f
 3766 014e 0C       		.uleb128 0xc
 3767 014f 03       		.uleb128 0x3
 3768 0150 0E       		.uleb128 0xe
 3769 0151 3A       		.uleb128 0x3a
 3770 0152 0B       		.uleb128 0xb
 3771 0153 3B       		.uleb128 0x3b
 3772 0154 0B       		.uleb128 0xb
 3773 0155 27       		.uleb128 0x27
 3774 0156 0C       		.uleb128 0xc
 3775 0157 49       		.uleb128 0x49
 3776 0158 13       		.uleb128 0x13
 3777 0159 11       		.uleb128 0x11
 3778 015a 01       		.uleb128 0x1
 3779 015b 12       		.uleb128 0x12
 3780 015c 01       		.uleb128 0x1
 3781 015d 40       		.uleb128 0x40
 3782 015e 06       		.uleb128 0x6
 3783 015f 9642     		.uleb128 0x2116
 3784 0161 0C       		.uleb128 0xc
 3785 0162 01       		.uleb128 0x1
 3786 0163 13       		.uleb128 0x13
 3787 0164 00       		.byte	0
 3788 0165 00       		.byte	0
 3789 0166 1A       		.uleb128 0x1a
 3790 0167 34       		.uleb128 0x34
 3791 0168 00       		.byte	0
 3792 0169 03       		.uleb128 0x3
 3793 016a 08       		.uleb128 0x8
 3794 016b 3A       		.uleb128 0x3a
 3795 016c 0B       		.uleb128 0xb
 3796 016d 3B       		.uleb128 0x3b
 3797 016e 0B       		.uleb128 0xb
 3798 016f 49       		.uleb128 0x49
 3799 0170 13       		.uleb128 0x13
 3800 0171 02       		.uleb128 0x2
 3801 0172 0A       		.uleb128 0xa
 3802 0173 00       		.byte	0
 3803 0174 00       		.byte	0
 3804 0175 1B       		.uleb128 0x1b
 3805 0176 34       		.uleb128 0x34
 3806 0177 00       		.byte	0
 3807 0178 03       		.uleb128 0x3
 3808 0179 08       		.uleb128 0x8
 3809 017a 3A       		.uleb128 0x3a
 3810 017b 0B       		.uleb128 0xb
 3811 017c 3B       		.uleb128 0x3b
 3812 017d 0B       		.uleb128 0xb
ARM GAS  /tmp/cc5pUpZ5.s 			page 107


 3813 017e 49       		.uleb128 0x49
 3814 017f 13       		.uleb128 0x13
 3815 0180 00       		.byte	0
 3816 0181 00       		.byte	0
 3817 0182 1C       		.uleb128 0x1c
 3818 0183 34       		.uleb128 0x34
 3819 0184 00       		.byte	0
 3820 0185 03       		.uleb128 0x3
 3821 0186 0E       		.uleb128 0xe
 3822 0187 3A       		.uleb128 0x3a
 3823 0188 0B       		.uleb128 0xb
 3824 0189 3B       		.uleb128 0x3b
 3825 018a 0B       		.uleb128 0xb
 3826 018b 49       		.uleb128 0x49
 3827 018c 13       		.uleb128 0x13
 3828 018d 00       		.byte	0
 3829 018e 00       		.byte	0
 3830 018f 1D       		.uleb128 0x1d
 3831 0190 34       		.uleb128 0x34
 3832 0191 00       		.byte	0
 3833 0192 03       		.uleb128 0x3
 3834 0193 0E       		.uleb128 0xe
 3835 0194 3A       		.uleb128 0x3a
 3836 0195 0B       		.uleb128 0xb
 3837 0196 3B       		.uleb128 0x3b
 3838 0197 0B       		.uleb128 0xb
 3839 0198 49       		.uleb128 0x49
 3840 0199 13       		.uleb128 0x13
 3841 019a 02       		.uleb128 0x2
 3842 019b 0A       		.uleb128 0xa
 3843 019c 00       		.byte	0
 3844 019d 00       		.byte	0
 3845 019e 1E       		.uleb128 0x1e
 3846 019f 0F       		.uleb128 0xf
 3847 01a0 00       		.byte	0
 3848 01a1 0B       		.uleb128 0xb
 3849 01a2 0B       		.uleb128 0xb
 3850 01a3 49       		.uleb128 0x49
 3851 01a4 13       		.uleb128 0x13
 3852 01a5 00       		.byte	0
 3853 01a6 00       		.byte	0
 3854 01a7 1F       		.uleb128 0x1f
 3855 01a8 2E       		.uleb128 0x2e
 3856 01a9 01       		.byte	0x1
 3857 01aa 3F       		.uleb128 0x3f
 3858 01ab 0C       		.uleb128 0xc
 3859 01ac 03       		.uleb128 0x3
 3860 01ad 0E       		.uleb128 0xe
 3861 01ae 3A       		.uleb128 0x3a
 3862 01af 0B       		.uleb128 0xb
 3863 01b0 3B       		.uleb128 0x3b
 3864 01b1 05       		.uleb128 0x5
 3865 01b2 27       		.uleb128 0x27
 3866 01b3 0C       		.uleb128 0xc
 3867 01b4 11       		.uleb128 0x11
 3868 01b5 01       		.uleb128 0x1
 3869 01b6 12       		.uleb128 0x12
ARM GAS  /tmp/cc5pUpZ5.s 			page 108


 3870 01b7 01       		.uleb128 0x1
 3871 01b8 40       		.uleb128 0x40
 3872 01b9 06       		.uleb128 0x6
 3873 01ba 9642     		.uleb128 0x2116
 3874 01bc 0C       		.uleb128 0xc
 3875 01bd 01       		.uleb128 0x1
 3876 01be 13       		.uleb128 0x13
 3877 01bf 00       		.byte	0
 3878 01c0 00       		.byte	0
 3879 01c1 20       		.uleb128 0x20
 3880 01c2 34       		.uleb128 0x34
 3881 01c3 00       		.byte	0
 3882 01c4 03       		.uleb128 0x3
 3883 01c5 08       		.uleb128 0x8
 3884 01c6 3A       		.uleb128 0x3a
 3885 01c7 0B       		.uleb128 0xb
 3886 01c8 3B       		.uleb128 0x3b
 3887 01c9 05       		.uleb128 0x5
 3888 01ca 49       		.uleb128 0x49
 3889 01cb 13       		.uleb128 0x13
 3890 01cc 02       		.uleb128 0x2
 3891 01cd 0A       		.uleb128 0xa
 3892 01ce 00       		.byte	0
 3893 01cf 00       		.byte	0
 3894 01d0 21       		.uleb128 0x21
 3895 01d1 34       		.uleb128 0x34
 3896 01d2 00       		.byte	0
 3897 01d3 03       		.uleb128 0x3
 3898 01d4 0E       		.uleb128 0xe
 3899 01d5 3A       		.uleb128 0x3a
 3900 01d6 0B       		.uleb128 0xb
 3901 01d7 3B       		.uleb128 0x3b
 3902 01d8 05       		.uleb128 0x5
 3903 01d9 49       		.uleb128 0x49
 3904 01da 13       		.uleb128 0x13
 3905 01db 02       		.uleb128 0x2
 3906 01dc 0A       		.uleb128 0xa
 3907 01dd 00       		.byte	0
 3908 01de 00       		.byte	0
 3909 01df 22       		.uleb128 0x22
 3910 01e0 2E       		.uleb128 0x2e
 3911 01e1 00       		.byte	0
 3912 01e2 3F       		.uleb128 0x3f
 3913 01e3 0C       		.uleb128 0xc
 3914 01e4 03       		.uleb128 0x3
 3915 01e5 0E       		.uleb128 0xe
 3916 01e6 3A       		.uleb128 0x3a
 3917 01e7 0B       		.uleb128 0xb
 3918 01e8 3B       		.uleb128 0x3b
 3919 01e9 05       		.uleb128 0x5
 3920 01ea 27       		.uleb128 0x27
 3921 01eb 0C       		.uleb128 0xc
 3922 01ec 11       		.uleb128 0x11
 3923 01ed 01       		.uleb128 0x1
 3924 01ee 12       		.uleb128 0x12
 3925 01ef 01       		.uleb128 0x1
 3926 01f0 40       		.uleb128 0x40
ARM GAS  /tmp/cc5pUpZ5.s 			page 109


 3927 01f1 06       		.uleb128 0x6
 3928 01f2 9642     		.uleb128 0x2116
 3929 01f4 0C       		.uleb128 0xc
 3930 01f5 00       		.byte	0
 3931 01f6 00       		.byte	0
 3932 01f7 23       		.uleb128 0x23
 3933 01f8 34       		.uleb128 0x34
 3934 01f9 00       		.byte	0
 3935 01fa 03       		.uleb128 0x3
 3936 01fb 0E       		.uleb128 0xe
 3937 01fc 3A       		.uleb128 0x3a
 3938 01fd 0B       		.uleb128 0xb
 3939 01fe 3B       		.uleb128 0x3b
 3940 01ff 0B       		.uleb128 0xb
 3941 0200 49       		.uleb128 0x49
 3942 0201 13       		.uleb128 0x13
 3943 0202 3F       		.uleb128 0x3f
 3944 0203 0C       		.uleb128 0xc
 3945 0204 02       		.uleb128 0x2
 3946 0205 0A       		.uleb128 0xa
 3947 0206 00       		.byte	0
 3948 0207 00       		.byte	0
 3949 0208 24       		.uleb128 0x24
 3950 0209 34       		.uleb128 0x34
 3951 020a 00       		.byte	0
 3952 020b 03       		.uleb128 0x3
 3953 020c 08       		.uleb128 0x8
 3954 020d 3A       		.uleb128 0x3a
 3955 020e 0B       		.uleb128 0xb
 3956 020f 3B       		.uleb128 0x3b
 3957 0210 0B       		.uleb128 0xb
 3958 0211 49       		.uleb128 0x49
 3959 0212 13       		.uleb128 0x13
 3960 0213 3F       		.uleb128 0x3f
 3961 0214 0C       		.uleb128 0xc
 3962 0215 02       		.uleb128 0x2
 3963 0216 0A       		.uleb128 0xa
 3964 0217 00       		.byte	0
 3965 0218 00       		.byte	0
 3966 0219 25       		.uleb128 0x25
 3967 021a 21       		.uleb128 0x21
 3968 021b 00       		.byte	0
 3969 021c 00       		.byte	0
 3970 021d 00       		.byte	0
 3971 021e 26       		.uleb128 0x26
 3972 021f 34       		.uleb128 0x34
 3973 0220 00       		.byte	0
 3974 0221 03       		.uleb128 0x3
 3975 0222 0E       		.uleb128 0xe
 3976 0223 3A       		.uleb128 0x3a
 3977 0224 0B       		.uleb128 0xb
 3978 0225 3B       		.uleb128 0x3b
 3979 0226 0B       		.uleb128 0xb
 3980 0227 49       		.uleb128 0x49
 3981 0228 13       		.uleb128 0x13
 3982 0229 3F       		.uleb128 0x3f
 3983 022a 0C       		.uleb128 0xc
ARM GAS  /tmp/cc5pUpZ5.s 			page 110


 3984 022b 3C       		.uleb128 0x3c
 3985 022c 0C       		.uleb128 0xc
 3986 022d 00       		.byte	0
 3987 022e 00       		.byte	0
 3988 022f 00       		.byte	0
 3989              		.section	.debug_loc,"",%progbits
 3990              	.Ldebug_loc0:
 3991              	.LLST0:
 3992 0000 00000000 		.4byte	.LFB16
 3993 0004 02000000 		.4byte	.LCFI0
 3994 0008 0200     		.2byte	0x2
 3995 000a 7D       		.byte	0x7d
 3996 000b 00       		.sleb128 0
 3997 000c 02000000 		.4byte	.LCFI0
 3998 0010 04000000 		.4byte	.LCFI1
 3999 0014 0200     		.2byte	0x2
 4000 0016 7D       		.byte	0x7d
 4001 0017 0C       		.sleb128 12
 4002 0018 04000000 		.4byte	.LCFI1
 4003 001c EC000000 		.4byte	.LFE16
 4004 0020 0200     		.2byte	0x2
 4005 0022 7D       		.byte	0x7d
 4006 0023 18       		.sleb128 24
 4007 0024 00000000 		.4byte	0
 4008 0028 00000000 		.4byte	0
 4009              	.LLST1:
 4010 002c 00000000 		.4byte	.LFB18
 4011 0030 02000000 		.4byte	.LCFI2
 4012 0034 0200     		.2byte	0x2
 4013 0036 7D       		.byte	0x7d
 4014 0037 00       		.sleb128 0
 4015 0038 02000000 		.4byte	.LCFI2
 4016 003c 04000000 		.4byte	.LCFI3
 4017 0040 0200     		.2byte	0x2
 4018 0042 7D       		.byte	0x7d
 4019 0043 04       		.sleb128 4
 4020 0044 04000000 		.4byte	.LCFI3
 4021 0048 48000000 		.4byte	.LFE18
 4022 004c 0200     		.2byte	0x2
 4023 004e 7D       		.byte	0x7d
 4024 004f 10       		.sleb128 16
 4025 0050 00000000 		.4byte	0
 4026 0054 00000000 		.4byte	0
 4027              	.LLST2:
 4028 0058 00000000 		.4byte	.LFB20
 4029 005c 02000000 		.4byte	.LCFI4
 4030 0060 0200     		.2byte	0x2
 4031 0062 7D       		.byte	0x7d
 4032 0063 00       		.sleb128 0
 4033 0064 02000000 		.4byte	.LCFI4
 4034 0068 04000000 		.4byte	.LCFI5
 4035 006c 0200     		.2byte	0x2
 4036 006e 7D       		.byte	0x7d
 4037 006f 0C       		.sleb128 12
 4038 0070 04000000 		.4byte	.LCFI5
 4039 0074 40050000 		.4byte	.LFE20
 4040 0078 0300     		.2byte	0x3
ARM GAS  /tmp/cc5pUpZ5.s 			page 111


 4041 007a 7D       		.byte	0x7d
 4042 007b D000     		.sleb128 80
 4043 007d 00000000 		.4byte	0
 4044 0081 00000000 		.4byte	0
 4045              	.LLST3:
 4046 0085 00000000 		.4byte	.LFB21
 4047 0089 02000000 		.4byte	.LCFI6
 4048 008d 0200     		.2byte	0x2
 4049 008f 7D       		.byte	0x7d
 4050 0090 00       		.sleb128 0
 4051 0091 02000000 		.4byte	.LCFI6
 4052 0095 04000000 		.4byte	.LCFI7
 4053 0099 0200     		.2byte	0x2
 4054 009b 7D       		.byte	0x7d
 4055 009c 04       		.sleb128 4
 4056 009d 04000000 		.4byte	.LCFI7
 4057 00a1 B0000000 		.4byte	.LFE21
 4058 00a5 0300     		.2byte	0x3
 4059 00a7 7D       		.byte	0x7d
 4060 00a8 E000     		.sleb128 96
 4061 00aa 00000000 		.4byte	0
 4062 00ae 00000000 		.4byte	0
 4063              	.LLST4:
 4064 00b2 00000000 		.4byte	.LFB22
 4065 00b6 02000000 		.4byte	.LCFI8
 4066 00ba 0200     		.2byte	0x2
 4067 00bc 7D       		.byte	0x7d
 4068 00bd 00       		.sleb128 0
 4069 00be 02000000 		.4byte	.LCFI8
 4070 00c2 64010000 		.4byte	.LFE22
 4071 00c6 0200     		.2byte	0x2
 4072 00c8 7D       		.byte	0x7d
 4073 00c9 08       		.sleb128 8
 4074 00ca 00000000 		.4byte	0
 4075 00ce 00000000 		.4byte	0
 4076              		.section	.debug_aranges,"",%progbits
 4077 0000 3C000000 		.4byte	0x3c
 4078 0004 0200     		.2byte	0x2
 4079 0006 00000000 		.4byte	.Ldebug_info0
 4080 000a 04       		.byte	0x4
 4081 000b 00       		.byte	0
 4082 000c 0000     		.2byte	0
 4083 000e 0000     		.2byte	0
 4084 0010 00000000 		.4byte	.LFB16
 4085 0014 EC000000 		.4byte	.LFE16-.LFB16
 4086 0018 00000000 		.4byte	.LFB18
 4087 001c 48000000 		.4byte	.LFE18-.LFB18
 4088 0020 00000000 		.4byte	.LFB20
 4089 0024 40050000 		.4byte	.LFE20-.LFB20
 4090 0028 00000000 		.4byte	.LFB21
 4091 002c B0000000 		.4byte	.LFE21-.LFB21
 4092 0030 00000000 		.4byte	.LFB22
 4093 0034 64010000 		.4byte	.LFE22-.LFB22
 4094 0038 00000000 		.4byte	0
 4095 003c 00000000 		.4byte	0
 4096              		.section	.debug_ranges,"",%progbits
 4097              	.Ldebug_ranges0:
ARM GAS  /tmp/cc5pUpZ5.s 			page 112


 4098 0000 00000000 		.4byte	.LFB16
 4099 0004 EC000000 		.4byte	.LFE16
 4100 0008 00000000 		.4byte	.LFB18
 4101 000c 48000000 		.4byte	.LFE18
 4102 0010 00000000 		.4byte	.LFB20
 4103 0014 40050000 		.4byte	.LFE20
 4104 0018 00000000 		.4byte	.LFB21
 4105 001c B0000000 		.4byte	.LFE21
 4106 0020 00000000 		.4byte	.LFB22
 4107 0024 64010000 		.4byte	.LFE22
 4108 0028 00000000 		.4byte	0
 4109 002c 00000000 		.4byte	0
 4110              		.section	.debug_line,"",%progbits
 4111              	.Ldebug_line0:
 4112 0000 AD020000 		.section	.debug_str,"MS",%progbits,1
 4112      02003D01 
 4112      00000201 
 4112      FB0E0D00 
 4112      01010101 
 4113              	.LASF133:
 4114 0000 735F6C63 		.ascii	"s_lcd\000"
 4114      6400
 4115              	.LASF104:
 4116 0006 70776D5F 		.ascii	"pwm_channel_1\000"
 4116      6368616E 
 4116      6E656C5F 
 4116      3100
 4117              	.LASF105:
 4118 0014 70776D5F 		.ascii	"pwm_channel_2\000"
 4118      6368616E 
 4118      6E656C5F 
 4118      3200
 4119              	.LASF106:
 4120 0022 70776D5F 		.ascii	"pwm_channel_3\000"
 4120      6368616E 
 4120      6E656C5F 
 4120      3300
 4121              	.LASF107:
 4122 0030 70776D5F 		.ascii	"pwm_channel_4\000"
 4122      6368616E 
 4122      6E656C5F 
 4122      3400
 4123              	.LASF128:
 4124 003e 7A65726F 		.ascii	"zero_current_loc\000"
 4124      5F637572 
 4124      72656E74 
 4124      5F6C6F63 
 4124      00
 4125              	.LASF154:
 4126 004f 61637377 		.ascii	"acswitch_timer\000"
 4126      69746368 
 4126      5F74696D 
 4126      657200
 4127              	.LASF179:
 4128 005e 70617261 		.ascii	"param_struct\000"
 4128      6D5F7374 
 4128      72756374 
ARM GAS  /tmp/cc5pUpZ5.s 			page 113


 4128      00
 4129              	.LASF99:
 4130 006b 6C617374 		.ascii	"last_program_deep_in_flash\000"
 4130      5F70726F 
 4130      6772616D 
 4130      5F646565 
 4130      705F696E 
 4131              	.LASF12:
 4132 0086 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4132      345F3135 
 4132      5F495251 
 4132      6E00
 4133              	.LASF83:
 4134 0094 42535252 		.ascii	"BSRR\000"
 4134      00
 4135              	.LASF97:
 4136 0099 6C617374 		.ascii	"last_function_in_flash\000"
 4136      5F66756E 
 4136      6374696F 
 4136      6E5F696E 
 4136      5F666C61 
 4137              	.LASF11:
 4138 00b0 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4138      325F335F 
 4138      4952516E 
 4138      00
 4139              	.LASF129:
 4140 00bd 6D61696E 		.ascii	"main_state\000"
 4140      5F737461 
 4140      746500
 4141              	.LASF141:
 4142 00c8 705F6D65 		.ascii	"p_mem_init\000"
 4142      6D5F696E 
 4142      697400
 4143              	.LASF2:
 4144 00d3 5356435F 		.ascii	"SVC_IRQn\000"
 4144      4952516E 
 4144      00
 4145              	.LASF143:
 4146 00dc 62756666 		.ascii	"buffer\000"
 4146      657200
 4147              	.LASF196:
 4148 00e3 76706F74 		.ascii	"vpote\000"
 4148      6500
 4149              	.LASF201:
 4150 00e9 4E564943 		.ascii	"NVIC_SetPriority\000"
 4150      5F536574 
 4150      5072696F 
 4150      72697479 
 4150      00
 4151              	.LASF47:
 4152 00fa 756E7369 		.ascii	"unsigned int\000"
 4152      676E6564 
 4152      20696E74 
 4152      00
 4153              	.LASF71:
 4154 0107 4C4F4144 		.ascii	"LOAD\000"
ARM GAS  /tmp/cc5pUpZ5.s 			page 114


 4154      00
 4155              	.LASF25:
 4156 010c 54494D31 		.ascii	"TIM16_IRQn\000"
 4156      365F4952 
 4156      516E00
 4157              	.LASF189:
 4158 0117 7463705F 		.ascii	"tcp_kalive_timer\000"
 4158      6B616C69 
 4158      76655F74 
 4158      696D6572 
 4158      00
 4159              	.LASF41:
 4160 0128 5F5F696E 		.ascii	"__int32_t\000"
 4160      7433325F 
 4160      7400
 4161              	.LASF149:
 4162 0132 72783262 		.ascii	"rx2buff\000"
 4162      75666600 
 4163              	.LASF8:
 4164 013a 464C4153 		.ascii	"FLASH_IRQn\000"
 4164      485F4952 
 4164      516E00
 4165              	.LASF151:
 4166 0145 72783162 		.ascii	"rx1buff\000"
 4166      75666600 
 4167              	.LASF194:
 4168 014d 706F7765 		.ascii	"power_vect\000"
 4168      725F7665 
 4168      637400
 4169              	.LASF100:
 4170 0158 64756D6D 		.ascii	"dummy\000"
 4170      7900
 4171              	.LASF72:
 4172 015e 43414C49 		.ascii	"CALIB\000"
 4172      4200
 4173              	.LASF175:
 4174 0164 75736172 		.ascii	"usart2_pckt_ready\000"
 4174      74325F70 
 4174      636B745F 
 4174      72656164 
 4174      7900
 4175              	.LASF148:
 4176 0176 74783262 		.ascii	"tx2buff\000"
 4176      75666600 
 4177              	.LASF10:
 4178 017e 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4178      305F315F 
 4178      4952516E 
 4178      00
 4179              	.LASF159:
 4180 018b 67726F75 		.ascii	"grouped_master_timeout_timer\000"
 4180      7065645F 
 4180      6D617374 
 4180      65725F74 
 4180      696D656F 
 4181              	.LASF27:
 4182 01a8 49324331 		.ascii	"I2C1_IRQn\000"
ARM GAS  /tmp/cc5pUpZ5.s 			page 115


 4182      5F495251 
 4182      6E00
 4183              	.LASF3:
 4184 01b2 50656E64 		.ascii	"PendSV_IRQn\000"
 4184      53565F49 
 4184      52516E00 
 4185              	.LASF176:
 4186 01be 75736172 		.ascii	"usart2_have_data\000"
 4186      74325F68 
 4186      6176655F 
 4186      64617461 
 4186      00
 4187              	.LASF9:
 4188 01cf 5243435F 		.ascii	"RCC_IRQn\000"
 4188      4952516E 
 4188      00
 4189              	.LASF127:
 4190 01d8 6663616C 		.ascii	"fcalc\000"
 4190      6300
 4191              	.LASF138:
 4192 01de 73686F77 		.ascii	"show_ldr\000"
 4192      5F6C6472 
 4192      00
 4193              	.LASF51:
 4194 01e7 75696E74 		.ascii	"uint32_t\000"
 4194      33325F74 
 4194      00
 4195              	.LASF52:
 4196 01f0 49534552 		.ascii	"ISER\000"
 4196      00
 4197              	.LASF180:
 4198 01f5 706F7765 		.ascii	"power_2secs_acum\000"
 4198      725F3273 
 4198      6563735F 
 4198      6163756D 
 4198      00
 4199              	.LASF142:
 4200 0206 666C6F61 		.ascii	"float\000"
 4200      7400
 4201              	.LASF131:
 4202 020c 68797374 		.ascii	"hyst\000"
 4202      00
 4203              	.LASF55:
 4204 0211 52534552 		.ascii	"RSERVED1\000"
 4204      56454431 
 4204      00
 4205              	.LASF29:
 4206 021a 53504931 		.ascii	"SPI1_IRQn\000"
 4206      5F495251 
 4206      6E00
 4207              	.LASF46:
 4208 0224 6C6F6E67 		.ascii	"long long unsigned int\000"
 4208      206C6F6E 
 4208      6720756E 
 4208      7369676E 
 4208      65642069 
 4209              	.LASF68:
ARM GAS  /tmp/cc5pUpZ5.s 			page 116


 4210 023b 44465352 		.ascii	"DFSR\000"
 4210      00
 4211              	.LASF173:
 4212 0240 75736172 		.ascii	"usart1_pckt_bytes\000"
 4212      74315F70 
 4212      636B745F 
 4212      62797465 
 4212      7300
 4213              	.LASF39:
 4214 0252 5F5F7569 		.ascii	"__uint16_t\000"
 4214      6E743136 
 4214      5F7400
 4215              	.LASF193:
 4216 025d 6D696E75 		.ascii	"minutes\000"
 4216      74657300 
 4217              	.LASF79:
 4218 0265 4D4F4445 		.ascii	"MODER\000"
 4218      5200
 4219              	.LASF77:
 4220 026b 43485345 		.ascii	"CHSELR\000"
 4220      4C5200
 4221              	.LASF171:
 4222 0272 75736172 		.ascii	"usart1_pckt_ready\000"
 4222      74315F70 
 4222      636B745F 
 4222      72656164 
 4222      7900
 4223              	.LASF34:
 4224 0284 4952516E 		.ascii	"IRQn_Type\000"
 4224      5F547970 
 4224      6500
 4225              	.LASF110:
 4226 028e 5463704D 		.ascii	"TcpMessages\000"
 4226      65737361 
 4226      67657300 
 4227              	.LASF32:
 4228 029a 55534152 		.ascii	"USART2_IRQn\000"
 4228      54325F49 
 4228      52516E00 
 4229              	.LASF63:
 4230 02a6 43505549 		.ascii	"CPUID\000"
 4230      4400
 4231              	.LASF163:
 4232 02ac 74745F74 		.ascii	"tt_take_photo_sample\000"
 4232      616B655F 
 4232      70686F74 
 4232      6F5F7361 
 4232      6D706C65 
 4233              	.LASF202:
 4234 02c1 53797354 		.ascii	"SysTick_Config\000"
 4234      69636B5F 
 4234      436F6E66 
 4234      696700
 4235              	.LASF76:
 4236 02d0 534D5052 		.ascii	"SMPR\000"
 4236      00
 4237              	.LASF182:
ARM GAS  /tmp/cc5pUpZ5.s 			page 117


 4238 02d5 706F7765 		.ascii	"power_minutes\000"
 4238      725F6D69 
 4238      6E757465 
 4238      7300
 4239              	.LASF111:
 4240 02e3 4E4F4E45 		.ascii	"NONE_MSG\000"
 4240      5F4D5347 
 4240      00
 4241              	.LASF90:
 4242 02ec 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4242      5A45524F 
 4242      5F435552 
 4242      52454E54 
 4242      00
 4243              	.LASF172:
 4244 02fd 75736172 		.ascii	"usart1_have_data\000"
 4244      74315F68 
 4244      6176655F 
 4244      64617461 
 4244      00
 4245              	.LASF82:
 4246 030e 50555044 		.ascii	"PUPDR\000"
 4246      5200
 4247              	.LASF119:
 4248 0314 7469636B 		.ascii	"ticks\000"
 4248      7300
 4249              	.LASF152:
 4250 031a 73686F77 		.ascii	"show_select_timer\000"
 4250      5F73656C 
 4250      6563745F 
 4250      74696D65 
 4250      7200
 4251              	.LASF102:
 4252 032c 64756D6D 		.ascii	"dummy1\000"
 4252      793100
 4253              	.LASF103:
 4254 0333 64756D6D 		.ascii	"dummy2\000"
 4254      793200
 4255              	.LASF87:
 4256 033a 63686172 		.ascii	"char\000"
 4256      00
 4257              	.LASF146:
 4258 033f 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4258      45524154 
 4258      5552455F 
 4258      56616C75 
 4258      6500
 4259              	.LASF125:
 4260 0351 706F7765 		.ascii	"power_dec\000"
 4260      725F6465 
 4260      6300
 4261              	.LASF65:
 4262 035b 41495243 		.ascii	"AIRCR\000"
 4262      5200
 4263              	.LASF160:
 4264 0361 74616B65 		.ascii	"take_temp_sample\000"
 4264      5F74656D 
ARM GAS  /tmp/cc5pUpZ5.s 			page 118


 4264      705F7361 
 4264      6D706C65 
 4264      00
 4265              	.LASF21:
 4266 0372 54494D33 		.ascii	"TIM3_IRQn\000"
 4266      5F495251 
 4266      6E00
 4267              	.LASF14:
 4268 037c 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4268      5F436861 
 4268      6E6E656C 
 4268      315F4952 
 4268      516E00
 4269              	.LASF121:
 4270 038f 62797465 		.ascii	"bytes_read\000"
 4270      735F7265 
 4270      616400
 4271              	.LASF96:
 4272 039a 6D61696E 		.ascii	"main_state_t\000"
 4272      5F737461 
 4272      74655F74 
 4272      00
 4273              	.LASF24:
 4274 03a7 54494D31 		.ascii	"TIM15_IRQn\000"
 4274      355F4952 
 4274      516E00
 4275              	.LASF48:
 4276 03b2 75696E74 		.ascii	"uint8_t\000"
 4276      385F7400 
 4277              	.LASF94:
 4278 03ba 57454C43 		.ascii	"WELCOME_GSM\000"
 4278      4F4D455F 
 4278      47534D00 
 4279              	.LASF174:
 4280 03c6 75736172 		.ascii	"usart2_mini_timeout\000"
 4280      74325F6D 
 4280      696E695F 
 4280      74696D65 
 4280      6F757400 
 4281              	.LASF184:
 4282 03da 706F7765 		.ascii	"power_hours\000"
 4282      725F686F 
 4282      75727300 
 4283              	.LASF150:
 4284 03e6 74783162 		.ascii	"tx1buff\000"
 4284      75666600 
 4285              	.LASF177:
 4286 03ee 75736172 		.ascii	"usart2_pckt_bytes\000"
 4286      74325F70 
 4286      636B745F 
 4286      62797465 
 4286      7300
 4287              	.LASF164:
 4288 0400 74745F72 		.ascii	"tt_relay_on_off\000"
 4288      656C6179 
 4288      5F6F6E5F 
 4288      6F666600 
ARM GAS  /tmp/cc5pUpZ5.s 			page 119


 4289              	.LASF191:
 4290 0410 73656373 		.ascii	"secs\000"
 4290      00
 4291              	.LASF95:
 4292 0415 4C414D50 		.ascii	"LAMP_ON\000"
 4292      5F4F4E00 
 4293              	.LASF78:
 4294 041d 4144435F 		.ascii	"ADC_TypeDef\000"
 4294      54797065 
 4294      44656600 
 4295              	.LASF45:
 4296 0429 6C6F6E67 		.ascii	"long long int\000"
 4296      206C6F6E 
 4296      6720696E 
 4296      7400
 4297              	.LASF5:
 4298 0437 57574447 		.ascii	"WWDG_IRQn\000"
 4298      5F495251 
 4298      6E00
 4299              	.LASF67:
 4300 0441 53484353 		.ascii	"SHCSR\000"
 4300      5200
 4301              	.LASF170:
 4302 0447 75736172 		.ascii	"usart1_mini_timeout\000"
 4302      74315F6D 
 4302      696E695F 
 4302      74696D65 
 4302      6F757400 
 4303              	.LASF92:
 4304 045b 53544152 		.ascii	"START_GSM\000"
 4304      545F4753 
 4304      4D00
 4305              	.LASF165:
 4306 0465 73617665 		.ascii	"saved_mode\000"
 4306      645F6D6F 
 4306      646500
 4307              	.LASF190:
 4308 0470 66696C74 		.ascii	"filter_timer\000"
 4308      65725F74 
 4308      696D6572 
 4308      00
 4309              	.LASF200:
 4310 047d 70617261 		.ascii	"parameters\000"
 4310      6D657465 
 4310      727300
 4311              	.LASF162:
 4312 0488 74696D65 		.ascii	"timer_relay\000"
 4312      725F7265 
 4312      6C617900 
 4313              	.LASF88:
 4314 0494 4D41494E 		.ascii	"MAIN_INIT\000"
 4314      5F494E49 
 4314      5400
 4315              	.LASF93:
 4316 049e 434F4E46 		.ascii	"CONFIG_GSM\000"
 4316      49475F47 
 4316      534D00
ARM GAS  /tmp/cc5pUpZ5.s 			page 120


 4317              	.LASF113:
 4318 04a9 524F4F4D 		.ascii	"ROOM_BRIGHT\000"
 4318      5F425249 
 4318      47485400 
 4319              	.LASF169:
 4320 04b5 7A65726F 		.ascii	"zero_current\000"
 4320      5F637572 
 4320      72656E74 
 4320      00
 4321              	.LASF13:
 4322 04c2 54535F49 		.ascii	"TS_IRQn\000"
 4322      52516E00 
 4323              	.LASF139:
 4324 04ca 64756D6D 		.ascii	"dummy_resp\000"
 4324      795F7265 
 4324      737000
 4325              	.LASF18:
 4326 04d5 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4326      5F42524B 
 4326      5F55505F 
 4326      5452475F 
 4326      434F4D5F 
 4327              	.LASF144:
 4328 04ee 74656D70 		.ascii	"tempbuff\000"
 4328      62756666 
 4328      00
 4329              	.LASF6:
 4330 04f7 5056445F 		.ascii	"PVD_IRQn\000"
 4330      4952516E 
 4330      00
 4331              	.LASF74:
 4332 0500 43464752 		.ascii	"CFGR1\000"
 4332      3100
 4333              	.LASF75:
 4334 0506 43464752 		.ascii	"CFGR2\000"
 4334      3200
 4335              	.LASF117:
 4336 050c 4C494748 		.ascii	"LIGHTS_ON\000"
 4336      54535F4F 
 4336      4E00
 4337              	.LASF58:
 4338 0516 49435052 		.ascii	"ICPR\000"
 4338      00
 4339              	.LASF17:
 4340 051b 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4340      5F434F4D 
 4340      505F4952 
 4340      516E00
 4341              	.LASF181:
 4342 052a 706F7765 		.ascii	"power_2secs_index\000"
 4342      725F3273 
 4342      6563735F 
 4342      696E6465 
 4342      7800
 4343              	.LASF153:
 4344 053c 73776974 		.ascii	"switches_timer\000"
 4344      63686573 
ARM GAS  /tmp/cc5pUpZ5.s 			page 121


 4344      5F74696D 
 4344      657200
 4345              	.LASF134:
 4346 054b 7463705F 		.ascii	"tcp_msg\000"
 4346      6D736700 
 4347              	.LASF81:
 4348 0553 4F535045 		.ascii	"OSPEEDR\000"
 4348      45445200 
 4349              	.LASF73:
 4350 055b 53797354 		.ascii	"SysTick_Type\000"
 4350      69636B5F 
 4350      54797065 
 4350      00
 4351              	.LASF86:
 4352 0568 6C6F6E67 		.ascii	"long double\000"
 4352      20646F75 
 4352      626C6500 
 4353              	.LASF49:
 4354 0574 75696E74 		.ascii	"uint16_t\000"
 4354      31365F74 
 4354      00
 4355              	.LASF178:
 4356 057d 62756666 		.ascii	"buffUARTGSMrx2\000"
 4356      55415254 
 4356      47534D72 
 4356      783200
 4357              	.LASF109:
 4358 058c 4952516E 		.ascii	"IRQn\000"
 4358      00
 4359              	.LASF101:
 4360 0591 6C617374 		.ascii	"last_channel_in_flash\000"
 4360      5F636861 
 4360      6E6E656C 
 4360      5F696E5F 
 4360      666C6173 
 4361              	.LASF185:
 4362 05a7 67736D4E 		.ascii	"gsmNUM\000"
 4362      554D00
 4363              	.LASF155:
 4364 05ae 7363726F 		.ascii	"scroll1_timer\000"
 4364      6C6C315F 
 4364      74696D65 
 4364      7200
 4365              	.LASF7:
 4366 05bc 5254435F 		.ascii	"RTC_IRQn\000"
 4366      4952516E 
 4366      00
 4367              	.LASF53:
 4368 05c5 52455345 		.ascii	"RESERVED0\000"
 4368      52564544 
 4368      3000
 4369              	.LASF66:
 4370 05cf 52455345 		.ascii	"RESERVED1\000"
 4370      52564544 
 4370      3100
 4371              	.LASF57:
 4372 05d9 52455345 		.ascii	"RESERVED2\000"
ARM GAS  /tmp/cc5pUpZ5.s 			page 122


 4372      52564544 
 4372      3200
 4373              	.LASF59:
 4374 05e3 52455345 		.ascii	"RESERVED3\000"
 4374      52564544 
 4374      3300
 4375              	.LASF60:
 4376 05ed 52455345 		.ascii	"RESERVED4\000"
 4376      52564544 
 4376      3400
 4377              	.LASF38:
 4378 05f7 73686F72 		.ascii	"short int\000"
 4378      7420696E 
 4378      7400
 4379              	.LASF42:
 4380 0601 6C6F6E67 		.ascii	"long int\000"
 4380      20696E74 
 4380      00
 4381              	.LASF31:
 4382 060a 55534152 		.ascii	"USART1_IRQn\000"
 4382      54315F49 
 4382      52516E00 
 4383              	.LASF0:
 4384 0616 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4384      61736B61 
 4384      626C6549 
 4384      6E745F49 
 4384      52516E00 
 4385              	.LASF118:
 4386 062a 7072696F 		.ascii	"priority\000"
 4386      72697479 
 4386      00
 4387              	.LASF19:
 4388 0633 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4388      5F43435F 
 4388      4952516E 
 4388      00
 4389              	.LASF80:
 4390 0640 4F545950 		.ascii	"OTYPER\000"
 4390      455200
 4391              	.LASF136:
 4392 0647 6E65775F 		.ascii	"new_lamp\000"
 4392      6C616D70 
 4392      00
 4393              	.LASF187:
 4394 0650 77616974 		.ascii	"wait_ms_var\000"
 4394      5F6D735F 
 4394      76617200 
 4395              	.LASF26:
 4396 065c 54494D31 		.ascii	"TIM17_IRQn\000"
 4396      375F4952 
 4396      516E00
 4397              	.LASF89:
 4398 0667 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4398      48524F5F 
 4398      41444300 
 4399              	.LASF16:
ARM GAS  /tmp/cc5pUpZ5.s 			page 123


 4400 0673 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4400      5F436861 
 4400      6E6E656C 
 4400      345F355F 
 4400      4952516E 
 4401              	.LASF186:
 4402 0688 67736D4D 		.ascii	"gsmMSG\000"
 4402      534700
 4403              	.LASF192:
 4404 068f 686F7572 		.ascii	"hours\000"
 4404      7300
 4405              	.LASF35:
 4406 0695 5F5F7569 		.ascii	"__uint8_t\000"
 4406      6E74385F 
 4406      7400
 4407              	.LASF114:
 4408 069f 4C414D50 		.ascii	"LAMP_BRIGHT\000"
 4408      5F425249 
 4408      47485400 
 4409              	.LASF62:
 4410 06ab 4E564943 		.ascii	"NVIC_Type\000"
 4410      5F547970 
 4410      6500
 4411              	.LASF69:
 4412 06b5 5343425F 		.ascii	"SCB_Type\000"
 4412      54797065 
 4412      00
 4413              	.LASF85:
 4414 06be 4750494F 		.ascii	"GPIO_TypeDef\000"
 4414      5F547970 
 4414      65446566 
 4414      00
 4415              	.LASF130:
 4416 06cb 73656E64 		.ascii	"sended\000"
 4416      656400
 4417              	.LASF4:
 4418 06d2 53797354 		.ascii	"SysTick_IRQn\000"
 4418      69636B5F 
 4418      4952516E 
 4418      00
 4419              	.LASF33:
 4420 06df 4345435F 		.ascii	"CEC_IRQn\000"
 4420      4952516E 
 4420      00
 4421              	.LASF61:
 4422 06e8 73697A65 		.ascii	"sizetype\000"
 4422      74797065 
 4422      00
 4423              	.LASF64:
 4424 06f1 49435352 		.ascii	"ICSR\000"
 4424      00
 4425              	.LASF28:
 4426 06f6 49324332 		.ascii	"I2C2_IRQn\000"
 4426      5F495251 
 4426      6E00
 4427              	.LASF44:
 4428 0700 6C6F6E67 		.ascii	"long unsigned int\000"
ARM GAS  /tmp/cc5pUpZ5.s 			page 124


 4428      20756E73 
 4428      69676E65 
 4428      6420696E 
 4428      7400
 4429              	.LASF20:
 4430 0712 54494D32 		.ascii	"TIM2_IRQn\000"
 4430      5F495251 
 4430      6E00
 4431              	.LASF147:
 4432 071c 50524553 		.ascii	"PRESSURE_Value\000"
 4432      53555245 
 4432      5F56616C 
 4432      756500
 4433              	.LASF199:
 4434 072b 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4434      652F6D65 
 4434      642F446F 
 4434      63756D65 
 4434      6E74732F 
 4435 075e 6100     		.ascii	"a\000"
 4436              	.LASF145:
 4437 0760 48554D49 		.ascii	"HUMIDITY_Value\000"
 4437      44495459 
 4437      5F56616C 
 4437      756500
 4438              	.LASF50:
 4439 076f 696E7433 		.ascii	"int32_t\000"
 4439      325F7400 
 4440              	.LASF158:
 4441 0777 7374616E 		.ascii	"standalone_enable_menu_timer\000"
 4441      64616C6F 
 4441      6E655F65 
 4441      6E61626C 
 4441      655F6D65 
 4442              	.LASF167:
 4443 0794 6164635F 		.ascii	"adc_ch\000"
 4443      636800
 4444              	.LASF23:
 4445 079b 54494D31 		.ascii	"TIM14_IRQn\000"
 4445      345F4952 
 4445      516E00
 4446              	.LASF15:
 4447 07a6 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4447      5F436861 
 4447      6E6E656C 
 4447      325F335F 
 4447      4952516E 
 4448              	.LASF140:
 4449 07bb 7070735F 		.ascii	"pps_one\000"
 4449      6F6E6500 
 4450              	.LASF22:
 4451 07c3 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4451      5F444143 
 4451      5F495251 
 4451      6E00
 4452              	.LASF37:
 4453 07d1 756E7369 		.ascii	"unsigned char\000"
ARM GAS  /tmp/cc5pUpZ5.s 			page 125


 4453      676E6564 
 4453      20636861 
 4453      7200
 4454              	.LASF91:
 4455 07df 4C414D50 		.ascii	"LAMP_OFF\000"
 4455      5F4F4646 
 4455      00
 4456              	.LASF43:
 4457 07e8 5F5F7569 		.ascii	"__uint32_t\000"
 4457      6E743332 
 4457      5F7400
 4458              	.LASF137:
 4459 07f3 6C617374 		.ascii	"last_bright\000"
 4459      5F627269 
 4459      67687400 
 4460              	.LASF122:
 4461 07ff 6E656564 		.ascii	"need_ack\000"
 4461      5F61636B 
 4461      00
 4462              	.LASF98:
 4463 0808 6C617374 		.ascii	"last_program_in_flash\000"
 4463      5F70726F 
 4463      6772616D 
 4463      5F696E5F 
 4463      666C6173 
 4464              	.LASF166:
 4465 081e 7361635F 		.ascii	"sac_aux\000"
 4465      61757800 
 4466              	.LASF135:
 4467 0826 6E65775F 		.ascii	"new_room\000"
 4467      726F6F6D 
 4467      00
 4468              	.LASF205:
 4469 082f 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4469      6E674465 
 4469      6C61795F 
 4469      44656372 
 4469      656D656E 
 4470              	.LASF161:
 4471 0845 74696D65 		.ascii	"timer_wifi_bright\000"
 4471      725F7769 
 4471      66695F62 
 4471      72696768 
 4471      7400
 4472              	.LASF54:
 4473 0857 49434552 		.ascii	"ICER\000"
 4473      00
 4474              	.LASF132:
 4475 085c 6F6E655F 		.ascii	"one_to_ten\000"
 4475      746F5F74 
 4475      656E00
 4476              	.LASF30:
 4477 0867 53504932 		.ascii	"SPI2_IRQn\000"
 4477      5F495251 
 4477      6E00
 4478              	.LASF204:
 4479 0871 70726570 		.ascii	"prepare_json_pkt\000"
ARM GAS  /tmp/cc5pUpZ5.s 			page 126


 4479      6172655F 
 4479      6A736F6E 
 4479      5F706B74 
 4479      00
 4480              	.LASF112:
 4481 0882 4B454550 		.ascii	"KEEP_ALIVE\000"
 4481      5F414C49 
 4481      564500
 4482              	.LASF126:
 4483 088d 706F7765 		.ascii	"power\000"
 4483      7200
 4484              	.LASF108:
 4485 0893 70617261 		.ascii	"parameters_typedef\000"
 4485      6D657465 
 4485      72735F74 
 4485      79706564 
 4485      656600
 4486              	.LASF36:
 4487 08a6 7369676E 		.ascii	"signed char\000"
 4487      65642063 
 4487      68617200 
 4488              	.LASF198:
 4489 08b2 7372632F 		.ascii	"src/main.c\000"
 4489      6D61696E 
 4489      2E6300
 4490              	.LASF124:
 4491 08bd 706F7765 		.ascii	"power_int\000"
 4491      725F696E 
 4491      7400
 4492              	.LASF116:
 4493 08c7 4C494748 		.ascii	"LIGHTS_OFF\000"
 4493      54535F4F 
 4493      464600
 4494              	.LASF40:
 4495 08d2 73686F72 		.ascii	"short unsigned int\000"
 4495      7420756E 
 4495      7369676E 
 4495      65642069 
 4495      6E7400
 4496              	.LASF197:
 4497 08e5 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4497      43313120 
 4497      352E322E 
 4497      31203230 
 4497      31353132 
 4498 0918 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4498      20726576 
 4498      6973696F 
 4498      6E203233 
 4498      31383438 
 4499 094b 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4499      662D3220 
 4499      2D4F3020 
 4499      2D666F6D 
 4499      69742D66 
 4500 097e 66756E63 		.ascii	"function-sections\000"
 4500      74696F6E 
ARM GAS  /tmp/cc5pUpZ5.s 			page 127


 4500      2D736563 
 4500      74696F6E 
 4500      7300
 4501              	.LASF157:
 4502 0990 7374616E 		.ascii	"standalone_timer\000"
 4502      64616C6F 
 4502      6E655F74 
 4502      696D6572 
 4502      00
 4503              	.LASF203:
 4504 09a1 6D61696E 		.ascii	"main\000"
 4504      00
 4505              	.LASF1:
 4506 09a6 48617264 		.ascii	"HardFault_IRQn\000"
 4506      4661756C 
 4506      745F4952 
 4506      516E00
 4507              	.LASF183:
 4508 09b5 706F7765 		.ascii	"power_minutes_index\000"
 4508      725F6D69 
 4508      6E757465 
 4508      735F696E 
 4508      64657800 
 4509              	.LASF56:
 4510 09c9 49535052 		.ascii	"ISPR\000"
 4510      00
 4511              	.LASF123:
 4512 09ce 72657370 		.ascii	"resp\000"
 4512      00
 4513              	.LASF168:
 4514 09d3 7365715F 		.ascii	"seq_ready\000"
 4514      72656164 
 4514      7900
 4515              	.LASF195:
 4516 09dd 7674656D 		.ascii	"vtemp\000"
 4516      7000
 4517              	.LASF156:
 4518 09e3 7363726F 		.ascii	"scroll2_timer\000"
 4518      6C6C325F 
 4518      74696D65 
 4518      7200
 4519              	.LASF188:
 4520 09f1 74696D65 		.ascii	"timer_standby\000"
 4520      725F7374 
 4520      616E6462 
 4520      7900
 4521              	.LASF120:
 4522 09ff 62797465 		.ascii	"bytes_remain\000"
 4522      735F7265 
 4522      6D61696E 
 4522      00
 4523              	.LASF84:
 4524 0a0c 4C434B52 		.ascii	"LCKR\000"
 4524      00
 4525              	.LASF70:
 4526 0a11 4354524C 		.ascii	"CTRL\000"
 4526      00
ARM GAS  /tmp/cc5pUpZ5.s 			page 128


 4527              	.LASF115:
 4528 0a16 4745545F 		.ascii	"GET_A\000"
 4528      4100
 4529              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/cc5pUpZ5.s 			page 129


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc5pUpZ5.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/cc5pUpZ5.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/cc5pUpZ5.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/cc5pUpZ5.s:206    .text.SysTick_Config:00000000 $t
     /tmp/cc5pUpZ5.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/cc5pUpZ5.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/cc5pUpZ5.s:277    .bss.show_select_timer:00000000 show_select_timer
     /tmp/cc5pUpZ5.s:274    .bss.show_select_timer:00000000 $d
     /tmp/cc5pUpZ5.s:283    .bss.switches_timer:00000000 switches_timer
     /tmp/cc5pUpZ5.s:284    .bss.switches_timer:00000000 $d
     /tmp/cc5pUpZ5.s:289    .bss.acswitch_timer:00000000 acswitch_timer
     /tmp/cc5pUpZ5.s:290    .bss.acswitch_timer:00000000 $d
     /tmp/cc5pUpZ5.s:296    .bss.scroll1_timer:00000000 scroll1_timer
     /tmp/cc5pUpZ5.s:293    .bss.scroll1_timer:00000000 $d
     /tmp/cc5pUpZ5.s:303    .bss.scroll2_timer:00000000 scroll2_timer
     /tmp/cc5pUpZ5.s:300    .bss.scroll2_timer:00000000 $d
                            *COM*:00000002 standalone_timer
                            *COM*:00000002 standalone_enable_menu_timer
                            *COM*:00000001 grouped_master_timeout_timer
     /tmp/cc5pUpZ5.s:313    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/cc5pUpZ5.s:310    .bss.take_temp_sample:00000000 $d
     /tmp/cc5pUpZ5.s:319    .bss.timer_wifi_bright:00000000 timer_wifi_bright
     /tmp/cc5pUpZ5.s:320    .bss.timer_wifi_bright:00000000 $d
     /tmp/cc5pUpZ5.s:326    .bss.timer_relay:00000000 timer_relay
     /tmp/cc5pUpZ5.s:323    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000006 adc_ch
     /tmp/cc5pUpZ5.s:340    .bss.seq_ready:00000000 seq_ready
     /tmp/cc5pUpZ5.s:341    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:0000000c param_struct
     /tmp/cc5pUpZ5.s:357    .bss.power_2secs_acum:00000000 power_2secs_acum
     /tmp/cc5pUpZ5.s:354    .bss.power_2secs_acum:00000000 $d
     /tmp/cc5pUpZ5.s:363    .bss.power_2secs_index:00000000 power_2secs_index
     /tmp/cc5pUpZ5.s:364    .bss.power_2secs_index:00000000 $d
     /tmp/cc5pUpZ5.s:370    .bss.power_minutes:00000000 power_minutes
     /tmp/cc5pUpZ5.s:367    .bss.power_minutes:00000000 $d
ARM GAS  /tmp/cc5pUpZ5.s 			page 130


     /tmp/cc5pUpZ5.s:376    .bss.power_minutes_index:00000000 power_minutes_index
     /tmp/cc5pUpZ5.s:377    .bss.power_minutes_index:00000000 $d
     /tmp/cc5pUpZ5.s:383    .bss.power_hours:00000000 power_hours
     /tmp/cc5pUpZ5.s:380    .bss.power_hours:00000000 $d
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/cc5pUpZ5.s:392    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/cc5pUpZ5.s:389    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/cc5pUpZ5.s:402    .bss.secs:00000000 secs
     /tmp/cc5pUpZ5.s:399    .bss.secs:00000000 $d
     /tmp/cc5pUpZ5.s:408    .bss.hours:00000000 hours
     /tmp/cc5pUpZ5.s:409    .bss.hours:00000000 $d
     /tmp/cc5pUpZ5.s:414    .bss.minutes:00000000 minutes
     /tmp/cc5pUpZ5.s:415    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/cc5pUpZ5.s:420    .rodata:00000000 $d
     /tmp/cc5pUpZ5.s:465    .text.main:00000000 $t
     /tmp/cc5pUpZ5.s:470    .text.main:00000000 main
     /tmp/cc5pUpZ5.s:742    .rodata.main:00000000 $d
     /tmp/cc5pUpZ5.s:932    .text.main:000002c0 $d
     /tmp/cc5pUpZ5.s:950    .text.main:00000300 $t
     /tmp/cc5pUpZ5.s:1245   .text.main:000004fc $d
     /tmp/cc5pUpZ5.s:1282   .text.prepare_json_pkt:00000000 $t
     /tmp/cc5pUpZ5.s:1287   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/cc5pUpZ5.s:1379   .text.prepare_json_pkt:0000009c $d
     /tmp/cc5pUpZ5.s:1388   .text.TimingDelay_Decrement:00000000 $t
     /tmp/cc5pUpZ5.s:1393   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/cc5pUpZ5.s:1595   .text.TimingDelay_Decrement:00000130 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_ui2f
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2uiz
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
GPIO_Config
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
ARM GAS  /tmp/cc5pUpZ5.s 			page 131


GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
sprintf
FuncsGSMMessageFlagsAsk
FuncsGSMShutdown
UpdateVGrid
UpdateIGrid
UpdateRelay
FuncsGSM
memcpy
strcat
strlen
GSMTimeoutCounters
