ARM GAS  /tmp/cc0FodwT.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/cc0FodwT.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/cc0FodwT.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/cc0FodwT.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/cc0FodwT.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/cc0FodwT.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/cc0FodwT.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc0FodwT.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc0FodwT.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/cc0FodwT.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc0FodwT.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/cc0FodwT.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc0FodwT.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/cc0FodwT.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/cc0FodwT.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/cc0FodwT.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/cc0FodwT.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/cc0FodwT.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7153,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7154, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7155, D.7154
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7155, D.7155
  92 0026 083B     		subs	r3, r3, #8	@ D.7155,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7155, D.7155,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7153,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7154, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7155, D.7154
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7155, D.7155
 101 0038 083B     		subs	r3, r3, #8	@ D.7155,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7155, D.7155,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7153, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7155, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7154, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7155, D.7154
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7155, D.7155
 114 0052 D200     		lsls	r2, r2, #3	@ D.7155, D.7155,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7156, D.7156, D.7155
 117 0058 0200     		movs	r2, r0	@ D.7156, D.7156
 118 005a D243     		mvns	r2, r2	@ D.7156, D.7156
 119 005c 1A40     		ands	r2, r3	@ D.7155, D.7155
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7155, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7155, D.7155
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7154, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7155, D.7154
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7155, D.7155
ARM GAS  /tmp/cc0FodwT.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7155, D.7155,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7155, D.7155, D.7155
 133 0076 0300     		movs	r3, r0	@ D.7155, D.7155
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7155, D.7155
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7155,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7153, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7155, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7157,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7155, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7155, D.7155
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7155, D.7155,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7157,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7155, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7155, D.7155
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7155, D.7155,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7155, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7154, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7155, D.7154
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7155, D.7155
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7155, D.7155,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7156, D.7156, D.7155
 169 00b6 0100     		movs	r1, r0	@ D.7156, D.7156
 170 00b8 C943     		mvns	r1, r1	@ D.7156, D.7156
 171 00ba 1140     		ands	r1, r2	@ D.7155, D.7155
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7155, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7155, D.7155
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7154, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7155, D.7154
ARM GAS  /tmp/cc0FodwT.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7155, D.7155
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7155, D.7155,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7155, D.7155, D.7155
 185 00d4 0200     		movs	r2, r0	@ D.7155, D.7155
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7155, D.7155
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7155, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/cc0FodwT.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7158,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7159,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7160, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7160,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7160, _6->LOAD
ARM GAS  /tmp/cc0FodwT.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7159,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7159,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7158,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	show_select_timer
 273              		.section	.bss.show_select_timer,"aw",%nobits
 274              		.align	1
 275              		.type	show_select_timer, %object
 276              		.size	show_select_timer, 2
 277              	show_select_timer:
 278 0000 0000     		.space	2
 279              		.global	switches_timer
 280              		.section	.bss.switches_timer,"aw",%nobits
 281              		.type	switches_timer, %object
 282              		.size	switches_timer, 1
 283              	switches_timer:
 284 0000 00       		.space	1
 285              		.global	acswitch_timer
 286              		.section	.bss.acswitch_timer,"aw",%nobits
 287              		.type	acswitch_timer, %object
ARM GAS  /tmp/cc0FodwT.s 			page 23


 288              		.size	acswitch_timer, 1
 289              	acswitch_timer:
 290 0000 00       		.space	1
 291              		.global	scroll1_timer
 292              		.section	.bss.scroll1_timer,"aw",%nobits
 293              		.align	1
 294              		.type	scroll1_timer, %object
 295              		.size	scroll1_timer, 2
 296              	scroll1_timer:
 297 0000 0000     		.space	2
 298              		.global	scroll2_timer
 299              		.section	.bss.scroll2_timer,"aw",%nobits
 300              		.align	1
 301              		.type	scroll2_timer, %object
 302              		.size	scroll2_timer, 2
 303              	scroll2_timer:
 304 0000 0000     		.space	2
 305              		.comm	standalone_timer,2,2
 306              		.comm	standalone_enable_menu_timer,2,2
 307              		.comm	grouped_master_timeout_timer,1,1
 308              		.global	take_temp_sample
 309              		.section	.bss.take_temp_sample,"aw",%nobits
 310              		.align	1
 311              		.type	take_temp_sample, %object
 312              		.size	take_temp_sample, 2
 313              	take_temp_sample:
 314 0000 0000     		.space	2
 315              		.global	timer_wifi_bright
 316              		.section	.bss.timer_wifi_bright,"aw",%nobits
 317              		.type	timer_wifi_bright, %object
 318              		.size	timer_wifi_bright, 1
 319              	timer_wifi_bright:
 320 0000 00       		.space	1
 321              		.global	timer_relay
 322              		.section	.bss.timer_relay,"aw",%nobits
 323              		.align	1
 324              		.type	timer_relay, %object
 325              		.size	timer_relay, 2
 326              	timer_relay:
 327 0000 0000     		.space	2
 328              		.comm	tt_take_photo_sample,2,2
 329              		.comm	tt_relay_on_off,2,2
 330              		.comm	saved_mode,1,1
 331              		.comm	s1,2,2
 332              		.comm	s2,2,2
 333              		.comm	sac,2,2
 334              		.comm	sac_aux,1,1
 335              		.comm	adc_ch,6,4
 336              		.global	seq_ready
 337              		.section	.bss.seq_ready,"aw",%nobits
 338              		.type	seq_ready, %object
 339              		.size	seq_ready, 1
 340              	seq_ready:
 341 0000 00       		.space	1
 342              		.comm	zero_current,2,2
 343              		.comm	usart1_mini_timeout,1,1
 344              		.comm	usart1_pckt_ready,1,1
ARM GAS  /tmp/cc0FodwT.s 			page 24


 345              		.comm	usart1_have_data,1,1
 346              		.comm	usart1_pckt_bytes,1,1
 347              		.comm	usart2_mini_timeout,1,1
 348              		.comm	usart2_pckt_ready,1,1
 349              		.comm	usart2_have_data,1,1
 350              		.comm	usart2_pckt_bytes,1,1
 351              		.comm	param_struct,12,4
 352              		.global	power_2secs_acum
 353              		.section	.bss.power_2secs_acum,"aw",%nobits
 354              		.align	2
 355              		.type	power_2secs_acum, %object
 356              		.size	power_2secs_acum, 4
 357              	power_2secs_acum:
 358 0000 00000000 		.space	4
 359              		.global	power_2secs_index
 360              		.section	.bss.power_2secs_index,"aw",%nobits
 361              		.type	power_2secs_index, %object
 362              		.size	power_2secs_index, 1
 363              	power_2secs_index:
 364 0000 00       		.space	1
 365              		.global	power_minutes
 366              		.section	.bss.power_minutes,"aw",%nobits
 367              		.align	1
 368              		.type	power_minutes, %object
 369              		.size	power_minutes, 2
 370              	power_minutes:
 371 0000 0000     		.space	2
 372              		.global	power_minutes_index
 373              		.section	.bss.power_minutes_index,"aw",%nobits
 374              		.type	power_minutes_index, %object
 375              		.size	power_minutes_index, 1
 376              	power_minutes_index:
 377 0000 00       		.space	1
 378              		.global	power_hours
 379              		.section	.bss.power_hours,"aw",%nobits
 380              		.align	1
 381              		.type	power_hours, %object
 382              		.size	power_hours, 2
 383              	power_hours:
 384 0000 0000     		.space	2
 385              		.comm	gsmNUM,20,4
 386              		.comm	gsmMSG,180,4
 387              		.global	wait_ms_var
 388              		.section	.bss.wait_ms_var,"aw",%nobits
 389              		.align	1
 390              		.type	wait_ms_var, %object
 391              		.size	wait_ms_var, 2
 392              	wait_ms_var:
 393 0000 0000     		.space	2
 394              		.comm	timer_standby,2,2
 395              		.comm	tcp_kalive_timer,2,2
 396              		.comm	filter_timer,1,1
 397              		.global	secs
 398              		.section	.bss.secs,"aw",%nobits
 399              		.align	1
 400              		.type	secs, %object
 401              		.size	secs, 2
ARM GAS  /tmp/cc0FodwT.s 			page 25


 402              	secs:
 403 0000 0000     		.space	2
 404              		.global	hours
 405              		.section	.bss.hours,"aw",%nobits
 406              		.type	hours, %object
 407              		.size	hours, 1
 408              	hours:
 409 0000 00       		.space	1
 410              		.global	minutes
 411              		.section	.bss.minutes,"aw",%nobits
 412              		.type	minutes, %object
 413              		.size	minutes, 1
 414              	minutes:
 415 0000 00       		.space	1
 416              		.comm	power_vect,20,4
 417              		.comm	vtemp,34,4
 418              		.comm	vpote,34,4
 419              		.section	.rodata
 420              		.align	2
 421              	.LC0:
 422 0000 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 422      726E6F20 
 422      506C6163 
 422      61205265 
 422      646F6E64 
 423 0025 000000   		.align	2
 424              	.LC2:
 425 0028 20204665 		.ascii	"  Features:\015\012\000"
 425      61747572 
 425      65733A0D 
 425      0A00
 426 0036 0000     		.align	2
 427              	.LC4:
 428 0038 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 428      6D6D6572 
 428      20312074 
 428      6F203130 
 428      560D0A00 
 429              		.align	2
 430              	.LC6:
 431 004c 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 431      67687420 
 431      48797374 
 431      65726573 
 431      69730D0A 
 432 0061 000000   		.align	2
 433              	.LC8:
 434 0064 20205379 		.ascii	"  Sync by ADC\015\012\000"
 434      6E632062 
 434      79204144 
 434      430D0A00 
 435              		.align	2
 436              	.LC10:
 437 0074 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 437      65732047 
 437      534D2066 
 437      6F722053 
ARM GAS  /tmp/cc0FodwT.s 			page 26


 437      4D532064 
 438 008e 0000     		.align	2
 439              	.LC15:
 440 0090 47657474 		.ascii	"Getted\015\012\000"
 440      65640D0A 
 440      00
 441 0099 000000   		.align	2
 442              	.LC17:
 443 009c 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 443      696E6720 
 443      47534D20 
 443      53746172 
 443      74757020 
 444              		.global	__aeabi_ui2f
 445              		.global	__aeabi_i2d
 446              		.global	__aeabi_dmul
 447              		.global	__aeabi_d2f
 448              		.global	__aeabi_f2uiz
 449              		.global	__aeabi_i2f
 450              		.global	__aeabi_fsub
 451              		.global	__aeabi_fmul
 452 00c3 00       		.align	2
 453              	.LC24:
 454 00c4 703A2025 		.ascii	"p: %3d.%02d d: %d\015\012\000"
 454      33642E25 
 454      30326420 
 454      643A2025 
 454      640D0A00 
 455              		.align	2
 456              	.LC29:
 457 00d8 4C6C616D 		.ascii	"Llamadas Listas!\015\012\000"
 457      61646173 
 457      204C6973 
 457      74617321 
 457      0D0A00
 458 00eb 00       		.align	2
 459              	.LC31:
 460 00ec 534D5320 		.ascii	"SMS Listo!\015\012\000"
 460      4C697374 
 460      6F210D0A 
 460      00
 461              		.section	.text.main,"ax",%progbits
 462              		.align	2
 463              		.global	main
 464              		.code	16
 465              		.thumb_func
 466              		.type	main, %function
 467              	main:
 468              	.LFB20:
 469              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
ARM GAS  /tmp/cc0FodwT.s 			page 27


   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
ARM GAS  /tmp/cc0FodwT.s 			page 28


  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** //volatile unsigned short prog_timer = 0;
  72:src/main.c    **** //volatile unsigned short mainmenu_timer = 0;
  73:src/main.c    **** volatile unsigned short show_select_timer = 0;
  74:src/main.c    **** volatile unsigned char switches_timer = 0;
  75:src/main.c    **** volatile unsigned char acswitch_timer = 0;
  76:src/main.c    **** 
  77:src/main.c    **** volatile unsigned short scroll1_timer = 0;
  78:src/main.c    **** volatile unsigned short scroll2_timer = 0;
  79:src/main.c    **** 
  80:src/main.c    **** volatile unsigned short standalone_timer;
  81:src/main.c    **** volatile unsigned short standalone_enable_menu_timer;
  82:src/main.c    **** //volatile unsigned short standalone_menu_timer;
  83:src/main.c    **** volatile unsigned char grouped_master_timeout_timer;
  84:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  85:src/main.c    **** volatile unsigned char timer_wifi_bright = 0;
  86:src/main.c    **** 
  87:src/main.c    **** #ifdef USE_REDONDA_BASIC
  88:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  89:src/main.c    **** 
  90:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  91:src/main.c    **** volatile unsigned short tt_relay_on_off;
  92:src/main.c    **** #endif
  93:src/main.c    **** 
  94:src/main.c    **** 
  95:src/main.c    **** unsigned char saved_mode;
  96:src/main.c    **** 
  97:src/main.c    **** 
  98:src/main.c    **** // ------- Externals de los switches -------
  99:src/main.c    **** unsigned short s1;
 100:src/main.c    **** unsigned short s2;
 101:src/main.c    **** unsigned short sac;
 102:src/main.c    **** unsigned char sac_aux;
 103:src/main.c    **** 
 104:src/main.c    **** // ------- Externals de los switches -------
 105:src/main.c    **** #ifdef ADC_WITH_INT
 106:src/main.c    **** volatile unsigned short adc_ch[3];
 107:src/main.c    **** volatile unsigned char seq_ready = 0;
 108:src/main.c    **** unsigned short zero_current;
 109:src/main.c    **** #endif
 110:src/main.c    **** 
 111:src/main.c    **** // ------- Externals del GPS & GSM -------
 112:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 113:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 114:src/main.c    **** volatile unsigned char usart1_have_data;
 115:src/main.c    **** unsigned char usart1_pckt_bytes;
 116:src/main.c    **** 
 117:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 118:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 119:src/main.c    **** #define gps_have_data		usart1_have_data
 120:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 121:src/main.c    **** 
ARM GAS  /tmp/cc0FodwT.s 			page 29


 122:src/main.c    **** #ifdef USE_GPS
 123:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 124:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 125:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 126:src/main.c    **** volatile unsigned char usart2_have_data;
 127:src/main.c    **** unsigned char usart2_pckt_bytes;
 128:src/main.c    **** 
 129:src/main.c    **** #endif
 130:src/main.c    **** 
 131:src/main.c    **** // ------- Externals del GSM -------
 132:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 133:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 134:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 135:src/main.c    **** #define gsm_have_data		usart1_have_data
 136:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 137:src/main.c    **** 
 138:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 139:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 140:src/main.c    **** volatile unsigned char usart2_have_data;
 141:src/main.c    **** unsigned char usart2_pckt_bytes;
 142:src/main.c    **** 
 143:src/main.c    **** //unsigned char AlertasReportar[5] = {0,0,0,0,0};
 144:src/main.c    **** //unsigned char ActDact = 0;
 145:src/main.c    **** //unsigned char claveAct[5] = {0,0,0,0,0};
 146:src/main.c    **** //volatile char USERCODE[8] = "123456";
 147:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 148:src/main.c    **** #endif
 149:src/main.c    **** 
 150:src/main.c    **** //--- VARIABLES GLOBALES ---//
 151:src/main.c    **** parameters_typedef param_struct;
 152:src/main.c    **** 
 153:src/main.c    **** //para las mediciones
 154:src/main.c    **** unsigned int power_2secs_acum = 0;
 155:src/main.c    **** unsigned char power_2secs_index = 0;
 156:src/main.c    **** unsigned short power_minutes = 0;
 157:src/main.c    **** unsigned char power_minutes_index = 0;
 158:src/main.c    **** unsigned short power_hours = 0;
 159:src/main.c    **** 
 160:src/main.c    **** //para los msjs GSM
 161:src/main.c    **** char gsmNUM [20];
 162:src/main.c    **** char gsmMSG [180];
 163:src/main.c    **** 
 164:src/main.c    **** 
 165:src/main.c    **** 
 166:src/main.c    **** 
 167:src/main.c    **** 
 168:src/main.c    **** 
 169:src/main.c    **** // ------- de los timers -------
 170:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 171:src/main.c    **** volatile unsigned short timer_standby;
 172:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 173:src/main.c    **** //volatile unsigned char display_timer;
 174:src/main.c    **** volatile unsigned char filter_timer;
 175:src/main.c    **** 
 176:src/main.c    **** //volatile unsigned char door_filter;
 177:src/main.c    **** //volatile unsigned char take_sample;
 178:src/main.c    **** //volatile unsigned char move_relay;
ARM GAS  /tmp/cc0FodwT.s 			page 30


 179:src/main.c    **** volatile unsigned short secs = 0;
 180:src/main.c    **** volatile unsigned char hours = 0;
 181:src/main.c    **** volatile unsigned char minutes = 0;
 182:src/main.c    **** 
 183:src/main.c    **** #define SIZEOF_POWER_VECT		10
 184:src/main.c    **** 
 185:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 186:src/main.c    **** 
 187:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 188:src/main.c    **** void TimingDelay_Decrement(void);
 189:src/main.c    **** 
 190:src/main.c    **** // ------- del DMX -------
 191:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 192:src/main.c    **** #define DMX_TIMEOUT	20
 193:src/main.c    **** 
 194:src/main.c    **** //--- FILTROS DE SENSORES ---//
 195:src/main.c    **** #define LARGO_FILTRO 16
 196:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 197:src/main.c    **** //#define LARGO_FILTRO 32
 198:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 199:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 200:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 201:src/main.c    **** 
 202:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 203:src/main.c    **** 
 204:src/main.c    **** // #define KW			0.009721
 205:src/main.c    **** // #define KW			0.00945
 206:src/main.c    **** // #define KW			0.00959
 207:src/main.c    **** #define KW			0.01013
 208:src/main.c    **** 
 209:src/main.c    **** 
 210:src/main.c    **** //-------------------------------------------//
 211:src/main.c    **** // @brief  Main program.
 212:src/main.c    **** // @param  None
 213:src/main.c    **** // @retval None
 214:src/main.c    **** //------------------------------------------//
 215:src/main.c    **** int main(void)
 216:src/main.c    **** {
 470              		.loc 2 216 0
 471              		.cfi_startproc
 472 0000 30B5     		push	{r4, r5, lr}	@
 473              	.LCFI4:
 474              		.cfi_def_cfa_offset 12
 475              		.cfi_offset 4, -12
 476              		.cfi_offset 5, -8
 477              		.cfi_offset 14, -4
 478 0002 91B0     		sub	sp, sp, #68	@,,
 479              	.LCFI5:
 480              		.cfi_def_cfa_offset 80
 217:src/main.c    **** 	unsigned char i, ii;
 218:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 481              		.loc 2 218 0
 482 0004 3523     		movs	r3, #53	@ tmp179,
 483 0006 6B44     		add	r3, r3, sp	@ tmp179,
 484 0008 0022     		movs	r2, #0	@ tmp180,
 485 000a 1A70     		strb	r2, [r3]	@ tmp181, need_ack
 219:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
ARM GAS  /tmp/cc0FodwT.s 			page 31


 486              		.loc 2 219 0
 487 000c 0DAB     		add	r3, sp, #52	@ tmp182,,
 488 000e 0022     		movs	r2, #0	@ tmp183,
 489 0010 1A70     		strb	r2, [r3]	@ tmp184, resp
 220:src/main.c    **** 	unsigned short power_int, power_dec;
 221:src/main.c    **** 	unsigned short power;
 222:src/main.c    **** 	float fcalc = 1.0;
 490              		.loc 2 222 0
 491 0012 FE23     		movs	r3, #254	@ tmp185,
 492 0014 9B05     		lsls	r3, r3, #22	@ tmp185, tmp185,
 493 0016 0C93     		str	r3, [sp, #48]	@ tmp185, fcalc
 223:src/main.c    **** 	unsigned int zero_current_loc = 0;
 494              		.loc 2 223 0
 495 0018 0023     		movs	r3, #0	@ tmp186,
 496 001a 0E93     		str	r3, [sp, #56]	@ tmp186, zero_current_loc
 224:src/main.c    **** 
 225:src/main.c    **** #ifdef USE_REDONDA_BASIC
 226:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 497              		.loc 2 226 0
 498 001c 3723     		movs	r3, #55	@ tmp187,
 499 001e 6B44     		add	r3, r3, sp	@ tmp187,
 500 0020 0022     		movs	r2, #0	@ tmp188,
 501 0022 1A70     		strb	r2, [r3]	@ tmp189, main_state
 227:src/main.c    **** 	unsigned char sended = 0;
 502              		.loc 2 227 0
 503 0024 3623     		movs	r3, #54	@ tmp190,
 504 0026 6B44     		add	r3, r3, sp	@ tmp190,
 505 0028 0022     		movs	r2, #0	@ tmp191,
 506 002a 1A70     		strb	r2, [r3]	@ tmp192, sended
 228:src/main.c    **** #ifdef WITH_HYST
 229:src/main.c    **** 	unsigned short hyst;
 230:src/main.c    **** #endif
 231:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 232:src/main.c    **** 	unsigned char one_to_ten;
 233:src/main.c    **** #endif
 234:src/main.c    **** 
 235:src/main.c    **** #else		//USE_REDONDA_BASIC
 236:src/main.c    **** 	unsigned char main_state = 0;
 237:src/main.c    **** #endif
 238:src/main.c    **** 	char s_lcd [20];
 239:src/main.c    **** 	enum TcpMessages tcp_msg = NONE_MSG;
 507              		.loc 2 239 0
 508 002c 2F23     		movs	r3, #47	@ tmp193,
 509 002e 6B44     		add	r3, r3, sp	@ tmp193,
 510 0030 0022     		movs	r2, #0	@ tmp194,
 511 0032 1A70     		strb	r2, [r3]	@ tmp195, tcp_msg
 240:src/main.c    **** 	unsigned char new_room = 0;
 512              		.loc 2 240 0
 513 0034 2E23     		movs	r3, #46	@ tmp196,
 514 0036 6B44     		add	r3, r3, sp	@ tmp196,
 515 0038 0022     		movs	r2, #0	@ tmp197,
 516 003a 1A70     		strb	r2, [r3]	@ tmp198, new_room
 241:src/main.c    **** 	unsigned char new_lamp = 0;
 517              		.loc 2 241 0
 518 003c 2D23     		movs	r3, #45	@ tmp199,
 519 003e 6B44     		add	r3, r3, sp	@ tmp199,
 520 0040 0022     		movs	r2, #0	@ tmp200,
ARM GAS  /tmp/cc0FodwT.s 			page 32


 521 0042 1A70     		strb	r2, [r3]	@ tmp201, new_lamp
 242:src/main.c    **** 	unsigned char last_bright = 0;
 522              		.loc 2 242 0
 523 0044 0BAB     		add	r3, sp, #44	@ tmp202,,
 524 0046 0022     		movs	r2, #0	@ tmp203,
 525 0048 1A70     		strb	r2, [r3]	@ tmp204, last_bright
 243:src/main.c    **** 	unsigned char show_ldr = 0;
 526              		.loc 2 243 0
 527 004a 2B23     		movs	r3, #43	@ tmp205,
 528 004c 6B44     		add	r3, r3, sp	@ tmp205,
 529 004e 0022     		movs	r2, #0	@ tmp206,
 530 0050 1A70     		strb	r2, [r3]	@ tmp207, show_ldr
 244:src/main.c    **** 	int dummy_resp = 0;
 531              		.loc 2 244 0
 532 0052 0023     		movs	r3, #0	@ tmp208,
 533 0054 0993     		str	r3, [sp, #36]	@ tmp208, dummy_resp
 245:src/main.c    **** 	unsigned char pps_one = 0;
 534              		.loc 2 245 0
 535 0056 2323     		movs	r3, #35	@ tmp209,
 536 0058 6B44     		add	r3, r3, sp	@ tmp209,
 537 005a 0022     		movs	r2, #0	@ tmp210,
 538 005c 1A70     		strb	r2, [r3]	@ tmp211, pps_one
 246:src/main.c    **** 
 247:src/main.c    **** #ifdef USE_PROD_PROGRAM
 248:src/main.c    **** 	unsigned char jump_the_menu = 0;
 249:src/main.c    **** #endif
 250:src/main.c    **** 	parameters_typedef * p_mem_init;
 251:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 252:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 253:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 254:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 255:src/main.c    ****     //   system_stm32f0xx.c file
 256:src/main.c    **** 
 257:src/main.c    **** 	//GPIO Configuration.
 258:src/main.c    **** 	GPIO_Config();
 539              		.loc 2 258 0
 540 005e FFF7FEFF 		bl	GPIO_Config	@
 259:src/main.c    **** 
 260:src/main.c    **** 
 261:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 262:src/main.c    **** 	if (SysTick_Config(48000))
 541              		.loc 2 262 0
 542 0062 974B     		ldr	r3, .L46	@ tmp212,
 543 0064 1800     		movs	r0, r3	@, tmp212
 544 0066 FFF7FEFF 		bl	SysTick_Config	@
 545 006a 031E     		subs	r3, r0, #0	@ D.7161,,
 546 006c 28D0     		beq	.L13	@,
 547              	.L18:
 263:src/main.c    **** 	{
 264:src/main.c    **** 		while (1)	/* Capture error */
 265:src/main.c    **** 		{
 266:src/main.c    **** 			if (LED)
 548              		.loc 2 266 0
 549 006e 9023     		movs	r3, #144	@ tmp442,
 550 0070 DB05     		lsls	r3, r3, #23	@ D.7162, tmp442,
 551 0072 9B8A     		ldrh	r3, [r3, #20]	@ tmp214,
 552 0074 9BB2     		uxth	r3, r3	@ D.7163, tmp214
ARM GAS  /tmp/cc0FodwT.s 			page 33


 553 0076 1A00     		movs	r2, r3	@ D.7164, D.7163
 554 0078 8023     		movs	r3, #128	@ tmp443,
 555 007a 5B01     		lsls	r3, r3, #5	@ tmp215, tmp443,
 556 007c 1340     		ands	r3, r2	@ D.7164, D.7164
 557 007e 05D0     		beq	.L14	@,
 267:src/main.c    **** 				LED_OFF;
 558              		.loc 2 267 0
 559 0080 9023     		movs	r3, #144	@ tmp440,
 560 0082 DB05     		lsls	r3, r3, #23	@ D.7162, tmp440,
 561 0084 8022     		movs	r2, #128	@ tmp441,
 562 0086 5205     		lsls	r2, r2, #21	@ tmp216, tmp441,
 563 0088 9A61     		str	r2, [r3, #24]	@ tmp216, _58->BSRR
 564 008a 04E0     		b	.L15	@
 565              	.L14:
 268:src/main.c    **** 			else
 269:src/main.c    **** 				LED_ON;
 566              		.loc 2 269 0
 567 008c 9023     		movs	r3, #144	@ tmp438,
 568 008e DB05     		lsls	r3, r3, #23	@ D.7162, tmp438,
 569 0090 8022     		movs	r2, #128	@ tmp439,
 570 0092 5201     		lsls	r2, r2, #5	@ tmp217, tmp439,
 571 0094 9A61     		str	r2, [r3, #24]	@ tmp217, _60->BSRR
 572              	.L15:
 270:src/main.c    **** 
 271:src/main.c    **** 			for (i = 0; i < 255; i++)
 573              		.loc 2 271 0
 574 0096 3F23     		movs	r3, #63	@ tmp218,
 575 0098 6B44     		add	r3, r3, sp	@ tmp218,
 576 009a 0022     		movs	r2, #0	@ tmp219,
 577 009c 1A70     		strb	r2, [r3]	@ tmp220, i
 578 009e 09E0     		b	.L16	@
 579              	.L17:
 272:src/main.c    **** 			{
 273:src/main.c    **** 				asm (	"nop \n\t"
 580              		.loc 2 273 0 discriminator 3
 581              		.syntax divided
 582              	@ 273 "src/main.c" 1
 583 00a0 C046     		nop 
 584 00a2 C046     		nop 
 585 00a4 C046     		nop 
 586              		
 587              	@ 0 "" 2
 271:src/main.c    **** 			{
 588              		.loc 2 271 0 discriminator 3
 589              		.thumb
 590              		.syntax unified
 591 00a6 3F23     		movs	r3, #63	@ tmp221,
 592 00a8 6B44     		add	r3, r3, sp	@ tmp221,
 593 00aa 1A78     		ldrb	r2, [r3]	@ D.7165, i
 594 00ac 3F23     		movs	r3, #63	@ tmp222,
 595 00ae 6B44     		add	r3, r3, sp	@ tmp222,
 596 00b0 0132     		adds	r2, r2, #1	@ tmp223,
 597 00b2 1A70     		strb	r2, [r3]	@ tmp224, i
 598              	.L16:
 271:src/main.c    **** 			{
 599              		.loc 2 271 0 is_stmt 0 discriminator 1
 600 00b4 3F23     		movs	r3, #63	@ tmp225,
ARM GAS  /tmp/cc0FodwT.s 			page 34


 601 00b6 6B44     		add	r3, r3, sp	@ tmp225,
 602 00b8 1B78     		ldrb	r3, [r3]	@ tmp226, i
 603 00ba FF2B     		cmp	r3, #255	@ tmp226,
 604 00bc F0D1     		bne	.L17	@,
 274:src/main.c    **** 						"nop \n\t"
 275:src/main.c    **** 						"nop \n\t" );
 276:src/main.c    **** 			}
 277:src/main.c    **** 		}
 605              		.loc 2 277 0 is_stmt 1
 606 00be D6E7     		b	.L18	@
 607              	.L13:
 278:src/main.c    **** 	}
 279:src/main.c    **** 
 280:src/main.c    **** 
 281:src/main.c    **** 	//ADC Configuration
 282:src/main.c    **** //	AdcConfig();
 283:src/main.c    **** 
 284:src/main.c    **** 	//TIM Configuration.
 285:src/main.c    **** 	// TIM_3_Init();
 286:src/main.c    **** //	TIM_14_Init();
 287:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 288:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 289:src/main.c    **** 
 290:src/main.c    **** //	EXTIOff ();
 291:src/main.c    **** 
 292:src/main.c    **** 	// while (1)
 293:src/main.c    **** 	// {
 294:src/main.c    **** 	// 	// if (SYNCP)
 295:src/main.c    **** 	// 	// {
 296:src/main.c    **** 	// 	// 	SYNCP_OFF;
 297:src/main.c    **** 	// 	// 	LED_OFF;
 298:src/main.c    **** 	// 	// }
 299:src/main.c    **** 	// 	// else
 300:src/main.c    **** 	// 	// {
 301:src/main.c    **** 	// 	// 	SYNCP_ON;
 302:src/main.c    **** 	// 	// 	LED_ON;
 303:src/main.c    **** 	// 	// }
 304:src/main.c    **** 	// 	// Wait_ms(10);
 305:src/main.c    **** 	//
 306:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 307:src/main.c    **** 	// 	// {
 308:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 309:src/main.c    **** 	// 	// 	Wait_ms (10);
 310:src/main.c    **** 	// 	// }
 311:src/main.c    **** 	// }
 312:src/main.c    **** 
 313:src/main.c    **** //		while (1)
 314:src/main.c    **** //		{
 315:src/main.c    **** //			PIN3_OFF;
 316:src/main.c    **** //			Wait_ms (10);
 317:src/main.c    **** //			PIN3_ON;
 318:src/main.c    **** //			Wait_ms (10);
 319:src/main.c    **** //		}
 320:src/main.c    **** 
 321:src/main.c    **** 	//--- Welcome code ---//
 322:src/main.c    **** 	LED_OFF;
 608              		.loc 2 322 0
ARM GAS  /tmp/cc0FodwT.s 			page 35


 609 00c0 9023     		movs	r3, #144	@ tmp432,
 610 00c2 DB05     		lsls	r3, r3, #23	@ D.7162, tmp432,
 611 00c4 8022     		movs	r2, #128	@ tmp433,
 612 00c6 5205     		lsls	r2, r2, #21	@ tmp227, tmp433,
 613 00c8 9A61     		str	r2, [r3, #24]	@ tmp227, _65->BSRR
 323:src/main.c    **** //	EN_GPS_OFF;
 324:src/main.c    **** 	EN_GPS_ON;
 614              		.loc 2 324 0
 615 00ca 9023     		movs	r3, #144	@ tmp434,
 616 00cc DB05     		lsls	r3, r3, #23	@ D.7162, tmp434,
 617 00ce 8022     		movs	r2, #128	@ tmp435,
 618 00d0 1202     		lsls	r2, r2, #8	@ tmp228, tmp435,
 619 00d2 9A61     		str	r2, [r3, #24]	@ tmp228, _67->BSRR
 325:src/main.c    **** 	//RELAY_ON;
 326:src/main.c    **** 	RELAY_OFF;
 620              		.loc 2 326 0
 621 00d4 9023     		movs	r3, #144	@ tmp436,
 622 00d6 DB05     		lsls	r3, r3, #23	@ D.7162, tmp436,
 623 00d8 8022     		movs	r2, #128	@ tmp437,
 624 00da 1205     		lsls	r2, r2, #20	@ tmp229, tmp437,
 625 00dc 9A61     		str	r2, [r3, #24]	@ tmp229, _69->BSRR
 327:src/main.c    **** 
 328:src/main.c    **** 	USART1Config();
 626              		.loc 2 328 0
 627 00de FFF7FEFF 		bl	USART1Config	@
 329:src/main.c    **** 	USART2Config();
 628              		.loc 2 329 0
 629 00e2 FFF7FEFF 		bl	USART2Config	@
 330:src/main.c    **** 
 331:src/main.c    **** 	EXTIOff();
 630              		.loc 2 331 0
 631 00e6 FFF7FEFF 		bl	EXTIOff	@
 332:src/main.c    **** 
 333:src/main.c    **** 
 334:src/main.c    **** #ifdef USE_REDONDA_BASIC
 335:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 336:src/main.c    **** 	// USART1Config();
 337:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 632              		.loc 2 337 0
 633 00ea FFF7FEFF 		bl	AdcConfig	@
 338:src/main.c    **** 
 339:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 340:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 634              		.loc 2 340 0
 635 00ee FFF7FEFF 		bl	TIM_3_Init	@
 341:src/main.c    **** #endif
 342:src/main.c    **** 
 343:src/main.c    **** 	TIM_16_Init();					//o tuilizo para synchro de relay
 636              		.loc 2 343 0
 637 00f2 FFF7FEFF 		bl	TIM_16_Init	@
 344:src/main.c    **** 	TIM16Enable();
 638              		.loc 2 344 0
 639 00f6 FFF7FEFF 		bl	TIM16Enable	@
 345:src/main.c    **** 
 346:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 640              		.loc 2 346 0
 641 00fa 724B     		ldr	r3, .L46+4	@ tmp230,
ARM GAS  /tmp/cc0FodwT.s 			page 36


 642 00fc 1800     		movs	r0, r3	@, tmp230
 643 00fe FFF7FEFF 		bl	Usart2Send	@
 347:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 644              		.loc 2 347 0
 645 0102 714B     		ldr	r3, .L46+8	@ tmp231,
 646 0104 1800     		movs	r0, r3	@, tmp231
 647 0106 FFF7FEFF 		bl	Usart2Send	@
 348:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 349:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 648              		.loc 2 349 0
 649 010a 704B     		ldr	r3, .L46+12	@ tmp232,
 650 010c 1800     		movs	r0, r3	@, tmp232
 651 010e FFF7FEFF 		bl	Usart2Send	@
 350:src/main.c    **** 	#endif
 351:src/main.c    **** 	#ifdef WITH_HYST
 352:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 652              		.loc 2 352 0
 653 0112 6F4B     		ldr	r3, .L46+16	@ tmp233,
 654 0114 1800     		movs	r0, r3	@, tmp233
 655 0116 FFF7FEFF 		bl	Usart2Send	@
 353:src/main.c    **** 	#endif
 354:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 355:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 356:src/main.c    **** 	#endif
 357:src/main.c    **** 	#ifdef USE_WITH_SYNC
 358:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 359:src/main.c    **** 	#else
 360:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 656              		.loc 2 360 0
 657 011a 6E4B     		ldr	r3, .L46+20	@ tmp234,
 658 011c 1800     		movs	r0, r3	@, tmp234
 659 011e FFF7FEFF 		bl	Usart2Send	@
 361:src/main.c    **** 	#endif
 362:src/main.c    **** 	#ifdef USE_GSM
 363:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 660              		.loc 2 363 0
 661 0122 6D4B     		ldr	r3, .L46+24	@ tmp235,
 662 0124 1800     		movs	r0, r3	@, tmp235
 663 0126 FFF7FEFF 		bl	Usart2Send	@
 364:src/main.c    **** 	#endif
 365:src/main.c    **** 
 366:src/main.c    **** 
 367:src/main.c    **** 
 368:src/main.c    **** 	for (i = 0; i < 8; i++)
 664              		.loc 2 368 0
 665 012a 3F23     		movs	r3, #63	@ tmp236,
 666 012c 6B44     		add	r3, r3, sp	@ tmp236,
 667 012e 0022     		movs	r2, #0	@ tmp237,
 668 0130 1A70     		strb	r2, [r3]	@ tmp238, i
 669 0132 1DE0     		b	.L19	@
 670              	.L22:
 369:src/main.c    **** 	{
 370:src/main.c    **** 		if (LED)
 671              		.loc 2 370 0
 672 0134 9023     		movs	r3, #144	@ tmp430,
 673 0136 DB05     		lsls	r3, r3, #23	@ D.7162, tmp430,
 674 0138 9B8A     		ldrh	r3, [r3, #20]	@ tmp240,
ARM GAS  /tmp/cc0FodwT.s 			page 37


 675 013a 9BB2     		uxth	r3, r3	@ D.7163, tmp240
 676 013c 1A00     		movs	r2, r3	@ D.7164, D.7163
 677 013e 8023     		movs	r3, #128	@ tmp431,
 678 0140 5B01     		lsls	r3, r3, #5	@ tmp241, tmp431,
 679 0142 1340     		ands	r3, r2	@ D.7164, D.7164
 680 0144 05D0     		beq	.L20	@,
 371:src/main.c    **** 			LED_OFF;
 681              		.loc 2 371 0
 682 0146 9023     		movs	r3, #144	@ tmp428,
 683 0148 DB05     		lsls	r3, r3, #23	@ D.7162, tmp428,
 684 014a 8022     		movs	r2, #128	@ tmp429,
 685 014c 5205     		lsls	r2, r2, #21	@ tmp242, tmp429,
 686 014e 9A61     		str	r2, [r3, #24]	@ tmp242, _89->BSRR
 687 0150 04E0     		b	.L21	@
 688              	.L20:
 372:src/main.c    **** 		else
 373:src/main.c    **** 			LED_ON;
 689              		.loc 2 373 0
 690 0152 9023     		movs	r3, #144	@ tmp426,
 691 0154 DB05     		lsls	r3, r3, #23	@ D.7162, tmp426,
 692 0156 8022     		movs	r2, #128	@ tmp427,
 693 0158 5201     		lsls	r2, r2, #5	@ tmp243, tmp427,
 694 015a 9A61     		str	r2, [r3, #24]	@ tmp243, _91->BSRR
 695              	.L21:
 374:src/main.c    **** 
 375:src/main.c    **** 		Wait_ms (250);
 696              		.loc 2 375 0 discriminator 2
 697 015c FA20     		movs	r0, #250	@,
 698 015e FFF7FEFF 		bl	Wait_ms	@
 368:src/main.c    **** 	{
 699              		.loc 2 368 0 discriminator 2
 700 0162 3F23     		movs	r3, #63	@ tmp244,
 701 0164 6B44     		add	r3, r3, sp	@ tmp244,
 702 0166 1A78     		ldrb	r2, [r3]	@ D.7165, i
 703 0168 3F23     		movs	r3, #63	@ tmp245,
 704 016a 6B44     		add	r3, r3, sp	@ tmp245,
 705 016c 0132     		adds	r2, r2, #1	@ tmp246,
 706 016e 1A70     		strb	r2, [r3]	@ tmp247, i
 707              	.L19:
 368:src/main.c    **** 	{
 708              		.loc 2 368 0 is_stmt 0 discriminator 1
 709 0170 3F23     		movs	r3, #63	@ tmp248,
 710 0172 6B44     		add	r3, r3, sp	@ tmp248,
 711 0174 1B78     		ldrb	r3, [r3]	@ tmp249, i
 712 0176 072B     		cmp	r3, #7	@ tmp249,
 713 0178 DCD9     		bls	.L22	@,
 376:src/main.c    **** 	}
 377:src/main.c    **** 
 378:src/main.c    **** 	timer_standby = 2000;
 714              		.loc 2 378 0 is_stmt 1
 715 017a 584B     		ldr	r3, .L46+28	@ tmp250,
 716 017c FA22     		movs	r2, #250	@ tmp425,
 717 017e D200     		lsls	r2, r2, #3	@ tmp251, tmp425,
 718 0180 1A80     		strh	r2, [r3]	@ tmp252, timer_standby
 379:src/main.c    **** 	FuncsGSMReset();
 719              		.loc 2 379 0
 720 0182 FFF7FEFF 		bl	FuncsGSMReset	@
ARM GAS  /tmp/cc0FodwT.s 			page 38


 380:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 721              		.loc 2 380 0
 722 0186 0220     		movs	r0, #2	@,
 723 0188 FFF7FEFF 		bl	Usart1Mode	@
 724              	.L41:
 381:src/main.c    **** 
 382:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 383:src/main.c    **** 	// while (1)
 384:src/main.c    **** 	// {
 385:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 386:src/main.c    **** 	// 	{
 387:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 388:src/main.c    **** 	// 		Wait_ms(10);
 389:src/main.c    **** 	// 	}
 390:src/main.c    **** 	//
 391:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 392:src/main.c    **** 	// 	{
 393:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 394:src/main.c    **** 	// 		Wait_ms(10);
 395:src/main.c    **** 	// 	}
 396:src/main.c    **** 	// }
 397:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 398:src/main.c    **** 
 399:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 400:src/main.c    **** 	// i = 0;
 401:src/main.c    **** 	// while (1)
 402:src/main.c    **** 	// {
 403:src/main.c    **** 	// 	switch (i)
 404:src/main.c    **** 	// 	{
 405:src/main.c    **** 	// 		case 0:
 406:src/main.c    **** 	// 			RelayOn();
 407:src/main.c    **** 	// 			timer_standby = 50;
 408:src/main.c    **** 	// 			LED_ON;
 409:src/main.c    **** 	// 			i++;
 410:src/main.c    **** 	// 			break;
 411:src/main.c    **** 	//
 412:src/main.c    **** 	// 		case 1:
 413:src/main.c    **** 	// 			if (!timer_standby)
 414:src/main.c    **** 	// 			{
 415:src/main.c    **** 	// 				RelayOff();
 416:src/main.c    **** 	// 				LED_OFF;
 417:src/main.c    **** 	// 				i++;
 418:src/main.c    **** 	// 				timer_standby = 10000;
 419:src/main.c    **** 	// 			}
 420:src/main.c    **** 	// 			break;
 421:src/main.c    **** 	//
 422:src/main.c    **** 	// 		case 2:
 423:src/main.c    **** 	// 			if (!timer_standby)
 424:src/main.c    **** 	// 			{
 425:src/main.c    **** 	// 				i = 0;
 426:src/main.c    **** 	// 			}
 427:src/main.c    **** 	// 			break;
 428:src/main.c    **** 	// 	}
 429:src/main.c    **** 	//
 430:src/main.c    **** 	// 	UpdateRelay ();
 431:src/main.c    **** 	// }
 432:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
ARM GAS  /tmp/cc0FodwT.s 			page 39


 433:src/main.c    **** 
 434:src/main.c    **** 
 435:src/main.c    **** //--- Programa de pruebas I meas -----
 436:src/main.c    **** 	while (1)
 437:src/main.c    **** 	{
 438:src/main.c    **** 		switch (main_state)
 725              		.loc 2 438 0
 726 018c 3723     		movs	r3, #55	@ tmp253,
 727 018e 6B44     		add	r3, r3, sp	@ tmp253,
 728 0190 1B78     		ldrb	r3, [r3]	@ D.7164, main_state
 729 0192 072B     		cmp	r3, #7	@ D.7164,
 730 0194 00D9     		bls	.LCB424	@
 731 0196 69E1     		b	.L23	@long jump	@
 732              	.LCB424:
 733 0198 9A00     		lsls	r2, r3, #2	@ tmp254, D.7164,
 734 019a 514B     		ldr	r3, .L46+32	@ tmp256,
 735 019c D318     		adds	r3, r2, r3	@ tmp255, tmp254, tmp256
 736 019e 1B68     		ldr	r3, [r3]	@ tmp257,
 737 01a0 9F46     		mov	pc, r3	@ tmp257
 738              		.section	.rodata.main,"a",%progbits
 739              		.align	2
 740              	.L25:
 741 0000 A2010000 		.word	.L24
 742 0004 C4010000 		.word	.L26
 743 0008 FC010000 		.word	.L27
 744 000c 76040000 		.word	.L42
 745 0010 6C040000 		.word	.L23
 746 0014 6C040000 		.word	.L23
 747 0018 6C040000 		.word	.L23
 748 001c 72020000 		.word	.L29
 749              		.section	.text.main
 750              	.L24:
 439:src/main.c    **** 		{
 440:src/main.c    **** 			case MAIN_INIT:
 441:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 751              		.loc 2 441 0
 752 01a2 0A20     		movs	r0, #10	@,
 753 01a4 FFF7FEFF 		bl	Update_TIM3_CH1	@
 442:src/main.c    **** 				main_state = SYNCHRO_ADC;
 754              		.loc 2 442 0
 755 01a8 3723     		movs	r3, #55	@ tmp258,
 756 01aa 6B44     		add	r3, r3, sp	@ tmp258,
 757 01ac 0122     		movs	r2, #1	@ tmp259,
 758 01ae 1A70     		strb	r2, [r3]	@ tmp260, main_state
 443:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 759              		.loc 2 443 0
 760 01b0 4C4B     		ldr	r3, .L46+36	@ D.7166,
 761 01b2 4C4A     		ldr	r2, .L46+36	@ D.7166,
 762 01b4 9268     		ldr	r2, [r2, #8]	@ D.7161, _103->CR
 763 01b6 0421     		movs	r1, #4	@ tmp261,
 764 01b8 0A43     		orrs	r2, r1	@ D.7161, tmp261
 765 01ba 9A60     		str	r2, [r3, #8]	@ D.7161, _102->CR
 444:src/main.c    **** 				seq_ready = 0;
 766              		.loc 2 444 0
 767 01bc 4A4B     		ldr	r3, .L46+40	@ tmp262,
 768 01be 0022     		movs	r2, #0	@ tmp263,
 769 01c0 1A70     		strb	r2, [r3]	@ tmp264, seq_ready
ARM GAS  /tmp/cc0FodwT.s 			page 40


 445:src/main.c    **** 				break;
 770              		.loc 2 445 0
 771 01c2 5FE1     		b	.L30	@
 772              	.L26:
 446:src/main.c    **** 
 447:src/main.c    **** 			case SYNCHRO_ADC:
 448:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 773              		.loc 2 448 0
 774 01c4 484B     		ldr	r3, .L46+40	@ tmp265,
 775 01c6 1B78     		ldrb	r3, [r3]	@ tmp266, seq_ready
 776 01c8 DBB2     		uxtb	r3, r3	@ D.7165, tmp266
 777 01ca 002B     		cmp	r3, #0	@ D.7165,
 778 01cc 00D1     		bne	.LCB459	@
 779 01ce 54E1     		b	.L43	@long jump	@
 780              	.LCB459:
 449:src/main.c    **** 				{
 450:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 781              		.loc 2 450 0
 782 01d0 464B     		ldr	r3, .L46+44	@ tmp267,
 783 01d2 1800     		movs	r0, r3	@, tmp267
 784 01d4 FFF7FEFF 		bl	Usart2Send	@
 451:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 785              		.loc 2 451 0
 786 01d8 454B     		ldr	r3, .L46+48	@ tmp268,
 787 01da 1800     		movs	r0, r3	@, tmp268
 788 01dc FFF7FEFF 		bl	Usart2Send	@
 452:src/main.c    **** #ifdef USE_GSM
 453:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 789              		.loc 2 453 0
 790 01e0 3723     		movs	r3, #55	@ tmp269,
 791 01e2 6B44     		add	r3, r3, sp	@ tmp269,
 792 01e4 0222     		movs	r2, #2	@ tmp270,
 793 01e6 1A70     		strb	r2, [r3]	@ tmp271, main_state
 454:src/main.c    **** 					timer_standby = 0;
 794              		.loc 2 454 0
 795 01e8 3C4B     		ldr	r3, .L46+28	@ tmp272,
 796 01ea 0022     		movs	r2, #0	@ tmp273,
 797 01ec 1A80     		strh	r2, [r3]	@ tmp274, timer_standby
 455:src/main.c    **** 					zero_current_loc = 0;
 798              		.loc 2 455 0
 799 01ee 0023     		movs	r3, #0	@ tmp275,
 800 01f0 0E93     		str	r3, [sp, #56]	@ tmp275, zero_current_loc
 456:src/main.c    **** 					i = 0;
 801              		.loc 2 456 0
 802 01f2 3F23     		movs	r3, #63	@ tmp276,
 803 01f4 6B44     		add	r3, r3, sp	@ tmp276,
 804 01f6 0022     		movs	r2, #0	@ tmp277,
 805 01f8 1A70     		strb	r2, [r3]	@ tmp278, i
 457:src/main.c    **** #else
 458:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 459:src/main.c    **** 					timer_standby = 60000;
 460:src/main.c    **** 					zero_current_loc = 0;
 461:src/main.c    **** 					i = 0;
 462:src/main.c    **** #endif
 463:src/main.c    **** 				}
 464:src/main.c    **** 				break;
 806              		.loc 2 464 0
ARM GAS  /tmp/cc0FodwT.s 			page 41


 807 01fa 3EE1     		b	.L43	@
 808              	.L27:
 465:src/main.c    **** 
 466:src/main.c    **** 			case SET_ZERO_CURRENT:
 467:src/main.c    **** 				if (!timer_standby)
 809              		.loc 2 467 0
 810 01fc 374B     		ldr	r3, .L46+28	@ tmp279,
 811 01fe 1B88     		ldrh	r3, [r3]	@ tmp280, timer_standby
 812 0200 9BB2     		uxth	r3, r3	@ D.7163, tmp280
 813 0202 002B     		cmp	r3, #0	@ D.7163,
 814 0204 00D0     		beq	.LCB487	@
 815 0206 3AE1     		b	.L44	@long jump	@
 816              	.LCB487:
 468:src/main.c    **** 				{
 469:src/main.c    **** 					if (i < 32)
 817              		.loc 2 469 0
 818 0208 3F23     		movs	r3, #63	@ tmp281,
 819 020a 6B44     		add	r3, r3, sp	@ tmp281,
 820 020c 1B78     		ldrb	r3, [r3]	@ tmp282, i
 821 020e 1F2B     		cmp	r3, #31	@ tmp282,
 822 0210 1AD8     		bhi	.L33	@,
 470:src/main.c    **** 					// if (i < 4)
 471:src/main.c    **** 					{
 472:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 823              		.loc 2 472 0
 824 0212 354B     		ldr	r3, .L46+40	@ tmp283,
 825 0214 1B78     		ldrb	r3, [r3]	@ tmp284, seq_ready
 826 0216 DBB2     		uxtb	r3, r3	@ D.7165, tmp284
 827 0218 002B     		cmp	r3, #0	@ D.7165,
 828 021a 00D1     		bne	.LCB497	@
 829 021c 2FE1     		b	.L44	@long jump	@
 830              	.LCB497:
 473:src/main.c    **** 						{
 474:src/main.c    **** 							seq_ready = 0;
 831              		.loc 2 474 0
 832 021e 324B     		ldr	r3, .L46+40	@ tmp285,
 833 0220 0022     		movs	r2, #0	@ tmp286,
 834 0222 1A70     		strb	r2, [r3]	@ tmp287, seq_ready
 475:src/main.c    **** 							zero_current_loc += I_Sense;
 835              		.loc 2 475 0
 836 0224 334B     		ldr	r3, .L46+52	@ tmp288,
 837 0226 9B88     		ldrh	r3, [r3, #4]	@ tmp290,
 838 0228 9BB2     		uxth	r3, r3	@ D.7163, tmp290
 839 022a 1A00     		movs	r2, r3	@ D.7167, D.7163
 840 022c 0E9B     		ldr	r3, [sp, #56]	@ tmp292, zero_current_loc
 841 022e 9B18     		adds	r3, r3, r2	@ tmp291, tmp292, D.7167
 842 0230 0E93     		str	r3, [sp, #56]	@ tmp291, zero_current_loc
 476:src/main.c    **** 							i++;
 843              		.loc 2 476 0
 844 0232 3F23     		movs	r3, #63	@ tmp293,
 845 0234 6B44     		add	r3, r3, sp	@ tmp293,
 846 0236 1A78     		ldrb	r2, [r3]	@ D.7165, i
 847 0238 3F23     		movs	r3, #63	@ tmp294,
 848 023a 6B44     		add	r3, r3, sp	@ tmp294,
 849 023c 0132     		adds	r2, r2, #1	@ tmp295,
 850 023e 1A70     		strb	r2, [r3]	@ tmp296, i
 477:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
ARM GAS  /tmp/cc0FodwT.s 			page 42


 851              		.loc 2 477 0
 852 0240 264B     		ldr	r3, .L46+28	@ tmp297,
 853 0242 0222     		movs	r2, #2	@ tmp298,
 854 0244 1A80     		strh	r2, [r3]	@ tmp299, timer_standby
 478:src/main.c    **** 						}
 479:src/main.c    **** 					}
 480:src/main.c    **** 					else
 481:src/main.c    **** 					{
 482:src/main.c    **** 						zero_current_loc >>= 5;
 483:src/main.c    **** 						// zero_current_loc >>= 2;
 484:src/main.c    **** 						zero_current = zero_current_loc;
 485:src/main.c    **** 						main_state = LAMP_ON;
 486:src/main.c    **** 						RELAY_ON;
 487:src/main.c    **** 						i = 0;
 488:src/main.c    **** 					}
 489:src/main.c    **** 				}
 490:src/main.c    **** 				break;
 855              		.loc 2 490 0
 856 0246 1AE1     		b	.L44	@
 857              	.L33:
 482:src/main.c    **** 						// zero_current_loc >>= 2;
 858              		.loc 2 482 0
 859 0248 0E9B     		ldr	r3, [sp, #56]	@ tmp301, zero_current_loc
 860 024a 5B09     		lsrs	r3, r3, #5	@ tmp300, tmp301,
 861 024c 0E93     		str	r3, [sp, #56]	@ tmp300, zero_current_loc
 484:src/main.c    **** 						main_state = LAMP_ON;
 862              		.loc 2 484 0
 863 024e 0E9B     		ldr	r3, [sp, #56]	@ tmp303, zero_current_loc
 864 0250 9AB2     		uxth	r2, r3	@ D.7163, tmp302
 865 0252 294B     		ldr	r3, .L46+56	@ tmp304,
 866 0254 1A80     		strh	r2, [r3]	@ tmp305, zero_current
 485:src/main.c    **** 						RELAY_ON;
 867              		.loc 2 485 0
 868 0256 3723     		movs	r3, #55	@ tmp306,
 869 0258 6B44     		add	r3, r3, sp	@ tmp306,
 870 025a 0722     		movs	r2, #7	@ tmp307,
 871 025c 1A70     		strb	r2, [r3]	@ tmp308, main_state
 486:src/main.c    **** 						i = 0;
 872              		.loc 2 486 0
 873 025e 9023     		movs	r3, #144	@ tmp423,
 874 0260 DB05     		lsls	r3, r3, #23	@ D.7162, tmp423,
 875 0262 8022     		movs	r2, #128	@ tmp424,
 876 0264 1201     		lsls	r2, r2, #4	@ tmp309, tmp424,
 877 0266 9A61     		str	r2, [r3, #24]	@ tmp309, _128->BSRR
 487:src/main.c    **** 					}
 878              		.loc 2 487 0
 879 0268 3F23     		movs	r3, #63	@ tmp310,
 880 026a 6B44     		add	r3, r3, sp	@ tmp310,
 881 026c 0022     		movs	r2, #0	@ tmp311,
 882 026e 1A70     		strb	r2, [r3]	@ tmp312, i
 883              		.loc 2 490 0
 884 0270 05E1     		b	.L44	@
 885              	.L29:
 491:src/main.c    **** 
 492:src/main.c    **** 			case LAMP_OFF:
 493:src/main.c    **** 				break;
 494:src/main.c    **** 
ARM GAS  /tmp/cc0FodwT.s 			page 43


 495:src/main.c    **** 			case LAMP_ON:
 496:src/main.c    **** 				if (!timer_standby)
 886              		.loc 2 496 0
 887 0272 1A4B     		ldr	r3, .L46+28	@ tmp313,
 888 0274 1B88     		ldrh	r3, [r3]	@ tmp314, timer_standby
 889 0276 9BB2     		uxth	r3, r3	@ D.7163, tmp314
 890 0278 002B     		cmp	r3, #0	@ D.7163,
 891 027a 00D0     		beq	.LCB550	@
 892 027c 01E1     		b	.L45	@long jump	@
 893              	.LCB550:
 497:src/main.c    **** 				{
 498:src/main.c    **** 					if (i < SIZEOF_POWER_VECT)
 894              		.loc 2 498 0
 895 027e 3F23     		movs	r3, #63	@ tmp315,
 896 0280 6B44     		add	r3, r3, sp	@ tmp315,
 897 0282 1B78     		ldrb	r3, [r3]	@ tmp316, i
 898 0284 092B     		cmp	r3, #9	@ tmp316,
 899 0286 3BD8     		bhi	.L36	@,
 499:src/main.c    **** 					{
 500:src/main.c    **** 						power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 900              		.loc 2 500 0
 901 0288 3F23     		movs	r3, #63	@ tmp317,
 902 028a 6B44     		add	r3, r3, sp	@ tmp317,
 903 028c 1C78     		ldrb	r4, [r3]	@ D.7164, i
 904 028e FFF7FEFF 		bl	GetVGrid	@
 905 0292 0300     		movs	r3, r0	@ tmp318,
 906 0294 1D00     		movs	r5, r3	@ D.7163, tmp319
 907 0296 FFF7FEFF 		bl	GetIGrid	@
 908 029a 0300     		movs	r3, r0	@ tmp320,
 909 029c 1900     		movs	r1, r3	@, D.7163
 910 029e 2800     		movs	r0, r5	@, D.7163
 911 02a0 FFF7FEFF 		bl	PowerCalc	@
 912 02a4 0300     		movs	r3, r0	@ tmp322,
 913 02a6 1900     		movs	r1, r3	@ D.7163, tmp323
 914 02a8 144B     		ldr	r3, .L46+60	@ tmp324,
 915 02aa 6200     		lsls	r2, r4, #1	@ tmp325, D.7164,
 916 02ac D152     		strh	r1, [r2, r3]	@ tmp326, power_vect
 501:src/main.c    **** 						i++;
 917              		.loc 2 501 0
 918 02ae 3F23     		movs	r3, #63	@ tmp327,
 919 02b0 6B44     		add	r3, r3, sp	@ tmp327,
 920 02b2 1A78     		ldrb	r2, [r3]	@ D.7165, i
 921 02b4 3F23     		movs	r3, #63	@ tmp328,
 922 02b6 6B44     		add	r3, r3, sp	@ tmp328,
 923 02b8 0132     		adds	r2, r2, #1	@ tmp329,
 924 02ba 1A70     		strb	r2, [r3]	@ tmp330, i
 925 02bc A4E0     		b	.L37	@
 926              	.L47:
 927 02be C046     		.align	2
 928              	.L46:
 929 02c0 80BB0000 		.word	48000
 930 02c4 00000000 		.word	.LC0
 931 02c8 28000000 		.word	.LC2
 932 02cc 38000000 		.word	.LC4
 933 02d0 4C000000 		.word	.LC6
 934 02d4 64000000 		.word	.LC8
 935 02d8 74000000 		.word	.LC10
ARM GAS  /tmp/cc0FodwT.s 			page 44


 936 02dc 00000000 		.word	timer_standby
 937 02e0 00000000 		.word	.L25
 938 02e4 00240140 		.word	1073816576
 939 02e8 00000000 		.word	seq_ready
 940 02ec 90000000 		.word	.LC15
 941 02f0 9C000000 		.word	.LC17
 942 02f4 00000000 		.word	adc_ch
 943 02f8 00000000 		.word	zero_current
 944 02fc 00000000 		.word	power_vect
 945              	.L36:
 502:src/main.c    **** 					}
 503:src/main.c    **** 					else
 504:src/main.c    **** 					{
 505:src/main.c    **** 						//termine de cargar el vector, muestro info
 506:src/main.c    **** 						power = PowerCalcMean8(power_vect);
 946              		.loc 2 506 0
 947 0300 08AC     		add	r4, sp, #32	@ tmp331,,
 948 0302 694B     		ldr	r3, .L48	@ tmp332,
 949 0304 1800     		movs	r0, r3	@, tmp332
 950 0306 FFF7FEFF 		bl	PowerCalcMean8	@
 951 030a 0300     		movs	r3, r0	@ tmp333,
 952 030c 2380     		strh	r3, [r4]	@ tmp335, power
 507:src/main.c    **** 						power_2secs_acum += power;
 953              		.loc 2 507 0
 954 030e 08AB     		add	r3, sp, #32	@ tmp336,,
 955 0310 1A88     		ldrh	r2, [r3]	@ D.7167, power
 956 0312 664B     		ldr	r3, .L48+4	@ tmp337,
 957 0314 1B68     		ldr	r3, [r3]	@ D.7167, power_2secs_acum
 958 0316 D218     		adds	r2, r2, r3	@ D.7167, D.7167, D.7167
 959 0318 644B     		ldr	r3, .L48+4	@ tmp338,
 960 031a 1A60     		str	r2, [r3]	@ D.7167, power_2secs_acum
 508:src/main.c    **** 						power_2secs_index++;
 961              		.loc 2 508 0
 962 031c 644B     		ldr	r3, .L48+8	@ tmp339,
 963 031e 1B78     		ldrb	r3, [r3]	@ D.7165, power_2secs_index
 964 0320 0133     		adds	r3, r3, #1	@ tmp340,
 965 0322 DAB2     		uxtb	r2, r3	@ D.7165, tmp340
 966 0324 624B     		ldr	r3, .L48+8	@ tmp341,
 967 0326 1A70     		strb	r2, [r3]	@ tmp342, power_2secs_index
 509:src/main.c    **** 						fcalc = power;
 968              		.loc 2 509 0
 969 0328 08AB     		add	r3, sp, #32	@ tmp343,,
 970 032a 1B88     		ldrh	r3, [r3]	@ tmp344, power
 971 032c 1800     		movs	r0, r3	@, tmp344
 972 032e FFF7FEFF 		bl	__aeabi_ui2f	@
 973 0332 031C     		adds	r3, r0, #0	@ tmp345,
 974 0334 0C93     		str	r3, [sp, #48]	@ tmp345, fcalc
 510:src/main.c    **** 						fcalc = power * KW;
 975              		.loc 2 510 0
 976 0336 08AB     		add	r3, sp, #32	@ tmp346,,
 977 0338 1B88     		ldrh	r3, [r3]	@ D.7164, power
 978 033a 1800     		movs	r0, r3	@, D.7164
 979 033c FFF7FEFF 		bl	__aeabi_i2d	@
 980 0340 5C4A     		ldr	r2, .L48+12	@,
 981 0342 5D4B     		ldr	r3, .L48+16	@,
 982 0344 FFF7FEFF 		bl	__aeabi_dmul	@
 983 0348 0300     		movs	r3, r0	@ tmp347,
ARM GAS  /tmp/cc0FodwT.s 			page 45


 984 034a 0C00     		movs	r4, r1	@,
 985 034c 1800     		movs	r0, r3	@, D.7168
 986 034e 2100     		movs	r1, r4	@, D.7168
 987 0350 FFF7FEFF 		bl	__aeabi_d2f	@
 988 0354 031C     		adds	r3, r0, #0	@ tmp348,
 989 0356 0C93     		str	r3, [sp, #48]	@ tmp348, fcalc
 511:src/main.c    **** 						power_int = (unsigned short) fcalc;
 990              		.loc 2 511 0
 991 0358 1E24     		movs	r4, #30	@ tmp349,
 992 035a 6C44     		add	r4, r4, sp	@ tmp349,
 993 035c 0C98     		ldr	r0, [sp, #48]	@, fcalc
 994 035e FFF7FEFF 		bl	__aeabi_f2uiz	@
 995 0362 0300     		movs	r3, r0	@ tmp350,
 996 0364 2380     		strh	r3, [r4]	@ tmp351, power_int
 512:src/main.c    **** 						fcalc = fcalc - power_int;
 997              		.loc 2 512 0
 998 0366 1E23     		movs	r3, #30	@ tmp352,
 999 0368 6B44     		add	r3, r3, sp	@ tmp352,
 1000 036a 1B88     		ldrh	r3, [r3]	@ D.7164, power_int
 1001 036c 1800     		movs	r0, r3	@, D.7164
 1002 036e FFF7FEFF 		bl	__aeabi_i2f	@
 1003 0372 031C     		adds	r3, r0, #0	@ D.7169,
 1004 0374 191C     		adds	r1, r3, #0	@, D.7169
 1005 0376 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1006 0378 FFF7FEFF 		bl	__aeabi_fsub	@
 1007 037c 031C     		adds	r3, r0, #0	@ tmp353,
 1008 037e 0C93     		str	r3, [sp, #48]	@ tmp353, fcalc
 513:src/main.c    **** 						fcalc = fcalc * 100;
 1009              		.loc 2 513 0
 1010 0380 4E49     		ldr	r1, .L48+20	@,
 1011 0382 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1012 0384 FFF7FEFF 		bl	__aeabi_fmul	@
 1013 0388 031C     		adds	r3, r0, #0	@ tmp354,
 1014 038a 0C93     		str	r3, [sp, #48]	@ tmp354, fcalc
 514:src/main.c    **** 						power_dec = (unsigned short) fcalc;
 1015              		.loc 2 514 0
 1016 038c 07AC     		add	r4, sp, #28	@ tmp355,,
 1017 038e 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1018 0390 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1019 0394 0300     		movs	r3, r0	@ tmp356,
 1020 0396 2380     		strh	r3, [r4]	@ tmp357, power_dec
 515:src/main.c    **** 						sprintf(s_lcd, "p: %3d.%02d d: %d\r\n", power_int, power_dec, power);
 1021              		.loc 2 515 0
 1022 0398 1E23     		movs	r3, #30	@ tmp358,
 1023 039a 6B44     		add	r3, r3, sp	@ tmp358,
 1024 039c 1A88     		ldrh	r2, [r3]	@ D.7164, power_int
 1025 039e 07AB     		add	r3, sp, #28	@ tmp359,,
 1026 03a0 1C88     		ldrh	r4, [r3]	@ D.7164, power_dec
 1027 03a2 08AB     		add	r3, sp, #32	@ tmp360,,
 1028 03a4 1B88     		ldrh	r3, [r3]	@ D.7164, power
 1029 03a6 4649     		ldr	r1, .L48+24	@ tmp361,
 1030 03a8 02A8     		add	r0, sp, #8	@ tmp362,,
 1031 03aa 0093     		str	r3, [sp]	@ D.7164,
 1032 03ac 2300     		movs	r3, r4	@, D.7164
 1033 03ae FFF7FEFF 		bl	sprintf	@
 516:src/main.c    **** 
 517:src/main.c    **** 						// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, V_Sense, I_Sense);
ARM GAS  /tmp/cc0FodwT.s 			page 46


 518:src/main.c    **** 						// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, GetVGrid(), GetIGrid());
 519:src/main.c    **** 						//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 520:src/main.c    **** 						//TODO: para debug no envio datos
 521:src/main.c    **** 						// Usart2Send(s_lcd);
 522:src/main.c    **** 						i = 0;
 1034              		.loc 2 522 0
 1035 03b2 3F23     		movs	r3, #63	@ tmp363,
 1036 03b4 6B44     		add	r3, r3, sp	@ tmp363,
 1037 03b6 0022     		movs	r2, #0	@ tmp364,
 1038 03b8 1A70     		strb	r2, [r3]	@ tmp365, i
 523:src/main.c    **** 
 524:src/main.c    **** 						if (power_2secs_index >= 30)	//1 a 30 es el contador
 1039              		.loc 2 524 0
 1040 03ba 3D4B     		ldr	r3, .L48+8	@ tmp366,
 1041 03bc 1B78     		ldrb	r3, [r3]	@ D.7165, power_2secs_index
 1042 03be 1D2B     		cmp	r3, #29	@ D.7165,
 1043 03c0 10D9     		bls	.L38	@,
 525:src/main.c    **** 						{
 526:src/main.c    **** 							power_2secs_index = 0;
 1044              		.loc 2 526 0
 1045 03c2 3B4B     		ldr	r3, .L48+8	@ tmp367,
 1046 03c4 0022     		movs	r2, #0	@ tmp368,
 1047 03c6 1A70     		strb	r2, [r3]	@ tmp369, power_2secs_index
 527:src/main.c    **** 							power_minutes += power;		//TODO: supongo todo el minuto el mismo consumo ver power_2secs_acu
 1048              		.loc 2 527 0
 1049 03c8 3E4B     		ldr	r3, .L48+28	@ tmp370,
 1050 03ca 1A88     		ldrh	r2, [r3]	@ D.7163, power_minutes
 1051 03cc 08AB     		add	r3, sp, #32	@ tmp371,,
 1052 03ce 1B88     		ldrh	r3, [r3]	@ tmp372, power
 1053 03d0 D318     		adds	r3, r2, r3	@ tmp373, D.7163, tmp372
 1054 03d2 9AB2     		uxth	r2, r3	@ D.7163, tmp373
 1055 03d4 3B4B     		ldr	r3, .L48+28	@ tmp374,
 1056 03d6 1A80     		strh	r2, [r3]	@ tmp375, power_minutes
 528:src/main.c    **** 							power_minutes_index++;
 1057              		.loc 2 528 0
 1058 03d8 3B4B     		ldr	r3, .L48+32	@ tmp376,
 1059 03da 1B78     		ldrb	r3, [r3]	@ D.7165, power_minutes_index
 1060 03dc 0133     		adds	r3, r3, #1	@ tmp377,
 1061 03de DAB2     		uxtb	r2, r3	@ D.7165, tmp377
 1062 03e0 394B     		ldr	r3, .L48+32	@ tmp378,
 1063 03e2 1A70     		strb	r2, [r3]	@ tmp379, power_minutes_index
 1064              	.L38:
 529:src/main.c    **** 						}
 530:src/main.c    **** 
 531:src/main.c    **** 						if (power_minutes_index >= 60)	//1 a 60 es el contador
 1065              		.loc 2 531 0
 1066 03e4 384B     		ldr	r3, .L48+32	@ tmp380,
 1067 03e6 1B78     		ldrb	r3, [r3]	@ D.7165, power_minutes_index
 1068 03e8 3B2B     		cmp	r3, #59	@ D.7165,
 1069 03ea 0DD9     		bls	.L37	@,
 532:src/main.c    **** 						{
 533:src/main.c    **** 							power_minutes_index = 0;
 1070              		.loc 2 533 0
 1071 03ec 364B     		ldr	r3, .L48+32	@ tmp381,
 1072 03ee 0022     		movs	r2, #0	@ tmp382,
 1073 03f0 1A70     		strb	r2, [r3]	@ tmp383, power_minutes_index
 534:src/main.c    **** 							power_hours += power_minutes;		//TODO: OJO se supuso todo el minuto el mismo consumo
ARM GAS  /tmp/cc0FodwT.s 			page 47


 1074              		.loc 2 534 0
 1075 03f2 364B     		ldr	r3, .L48+36	@ tmp384,
 1076 03f4 1A88     		ldrh	r2, [r3]	@ D.7163, power_hours
 1077 03f6 334B     		ldr	r3, .L48+28	@ tmp385,
 1078 03f8 1B88     		ldrh	r3, [r3]	@ D.7163, power_minutes
 1079 03fa D318     		adds	r3, r2, r3	@ tmp386, D.7163, D.7163
 1080 03fc 9AB2     		uxth	r2, r3	@ D.7163, tmp386
 1081 03fe 334B     		ldr	r3, .L48+36	@ tmp387,
 1082 0400 1A80     		strh	r2, [r3]	@ tmp388, power_hours
 535:src/main.c    **** 							power_minutes = 0;
 1083              		.loc 2 535 0
 1084 0402 304B     		ldr	r3, .L48+28	@ tmp389,
 1085 0404 0022     		movs	r2, #0	@ tmp390,
 1086 0406 1A80     		strh	r2, [r3]	@ tmp391, power_minutes
 1087              	.L37:
 536:src/main.c    **** 						}
 537:src/main.c    **** 
 538:src/main.c    **** 
 539:src/main.c    **** 					}
 540:src/main.c    **** 					timer_standby = 200;		//10 veces 200ms
 1088              		.loc 2 540 0
 1089 0408 314B     		ldr	r3, .L48+40	@ tmp392,
 1090 040a C822     		movs	r2, #200	@ tmp393,
 1091 040c 1A80     		strh	r2, [r3]	@ tmp394, timer_standby
 541:src/main.c    **** 
 542:src/main.c    **** 					// if ((FuncsGSMReady() == resp_gsm_ok) && (!sended))
 543:src/main.c    **** 					if ((FuncsGSMMessageFlagsAsk () & GSM_SET_CALL) && (!sended))
 1092              		.loc 2 543 0
 1093 040e FFF7FEFF 		bl	FuncsGSMMessageFlagsAsk	@
 1094 0412 0300     		movs	r3, r0	@ tmp395,
 1095 0414 1A00     		movs	r2, r3	@ D.7164, D.7163
 1096 0416 0123     		movs	r3, #1	@ tmp397,
 1097 0418 1340     		ands	r3, r2	@ D.7164, D.7164
 1098 041a 0FD0     		beq	.L39	@,
 1099              		.loc 2 543 0 is_stmt 0 discriminator 1
 1100 041c 3623     		movs	r3, #54	@ tmp398,
 1101 041e 6B44     		add	r3, r3, sp	@ tmp398,
 1102 0420 1B78     		ldrb	r3, [r3]	@ tmp399, sended
 1103 0422 002B     		cmp	r3, #0	@ tmp399,
 1104 0424 0AD1     		bne	.L39	@,
 544:src/main.c    **** 					{
 545:src/main.c    **** 						Usart2Send((char *) (const char *) "Llamadas Listas!\r\n");
 1105              		.loc 2 545 0 is_stmt 1
 1106 0426 2B4B     		ldr	r3, .L48+44	@ tmp400,
 1107 0428 1800     		movs	r0, r3	@, tmp400
 1108 042a FFF7FEFF 		bl	Usart2Send	@
 546:src/main.c    **** 						// FuncsGSMSendSMS("Hola", "1145376762");
 547:src/main.c    **** 						sended++;
 1109              		.loc 2 547 0
 1110 042e 3623     		movs	r3, #54	@ tmp401,
 1111 0430 6B44     		add	r3, r3, sp	@ tmp401,
 1112 0432 1A78     		ldrb	r2, [r3]	@ D.7165, sended
 1113 0434 3623     		movs	r3, #54	@ tmp402,
 1114 0436 6B44     		add	r3, r3, sp	@ tmp402,
 1115 0438 0132     		adds	r2, r2, #1	@ tmp403,
 1116 043a 1A70     		strb	r2, [r3]	@ tmp404, sended
 1117              	.L39:
ARM GAS  /tmp/cc0FodwT.s 			page 48


 548:src/main.c    **** 					}
 549:src/main.c    **** 
 550:src/main.c    **** 					if ((FuncsGSMMessageFlagsAsk () & GSM_SET_SMS) && (sended < 2))
 1118              		.loc 2 550 0
 1119 043c FFF7FEFF 		bl	FuncsGSMMessageFlagsAsk	@
 1120 0440 0300     		movs	r3, r0	@ tmp405,
 1121 0442 1A00     		movs	r2, r3	@ D.7164, D.7163
 1122 0444 0223     		movs	r3, #2	@ tmp407,
 1123 0446 1340     		ands	r3, r2	@ D.7164, D.7164
 1124 0448 1BD0     		beq	.L45	@,
 1125              		.loc 2 550 0 is_stmt 0 discriminator 1
 1126 044a 3623     		movs	r3, #54	@ tmp408,
 1127 044c 6B44     		add	r3, r3, sp	@ tmp408,
 1128 044e 1B78     		ldrb	r3, [r3]	@ tmp409, sended
 1129 0450 012B     		cmp	r3, #1	@ tmp409,
 1130 0452 16D8     		bhi	.L45	@,
 551:src/main.c    **** 					{
 552:src/main.c    **** 						Usart2Send((char *) (const char *) "SMS Listo!\r\n");
 1131              		.loc 2 552 0 is_stmt 1
 1132 0454 204B     		ldr	r3, .L48+48	@ tmp410,
 1133 0456 1800     		movs	r0, r3	@, tmp410
 1134 0458 FFF7FEFF 		bl	Usart2Send	@
 553:src/main.c    **** 						// FuncsGSMSendSMS("Hola", "1145376762");
 554:src/main.c    **** 						sended++;
 1135              		.loc 2 554 0
 1136 045c 3623     		movs	r3, #54	@ tmp411,
 1137 045e 6B44     		add	r3, r3, sp	@ tmp411,
 1138 0460 1A78     		ldrb	r2, [r3]	@ D.7165, sended
 1139 0462 3623     		movs	r3, #54	@ tmp412,
 1140 0464 6B44     		add	r3, r3, sp	@ tmp412,
 1141 0466 0132     		adds	r2, r2, #1	@ tmp413,
 1142 0468 1A70     		strb	r2, [r3]	@ tmp414, sended
 555:src/main.c    **** 					}
 556:src/main.c    **** 
 557:src/main.c    **** 					// fcalc = voltage;
 558:src/main.c    **** 					// fcalc = fcalc * KV;
 559:src/main.c    **** 					// volt_int = (short) fcalc;
 560:src/main.c    **** 					// fcalc = fcalc - volt_int;
 561:src/main.c    **** 					// fcalc = fcalc * 100;
 562:src/main.c    **** 					// volt_dec = (short) fcalc;
 563:src/main.c    **** 					//
 564:src/main.c    **** 					// sprintf(str, "%2d.%02d", volt_int, volt_dec);
 565:src/main.c    **** 					//
 566:src/main.c    **** 					// //sprintf(str, "%4d        ", voltage);
 567:src/main.c    **** 					// LCDTransmitStr(str);
 568:src/main.c    **** 
 569:src/main.c    **** 				}
 570:src/main.c    **** 
 571:src/main.c    **** 				break;
 1143              		.loc 2 571 0
 1144 046a 0AE0     		b	.L45	@
 1145              	.L23:
 572:src/main.c    **** 
 573:src/main.c    **** 			default:
 574:src/main.c    **** 				main_state = MAIN_INIT;
 1146              		.loc 2 574 0
 1147 046c 3723     		movs	r3, #55	@ tmp415,
ARM GAS  /tmp/cc0FodwT.s 			page 49


 1148 046e 6B44     		add	r3, r3, sp	@ tmp415,
 1149 0470 0022     		movs	r2, #0	@ tmp416,
 1150 0472 1A70     		strb	r2, [r3]	@ tmp417, main_state
 575:src/main.c    **** 				break;
 1151              		.loc 2 575 0
 1152 0474 06E0     		b	.L30	@
 1153              	.L42:
 493:src/main.c    **** 
 1154              		.loc 2 493 0
 1155 0476 C046     		nop
 1156 0478 04E0     		b	.L30	@
 1157              	.L43:
 464:src/main.c    **** 
 1158              		.loc 2 464 0
 1159 047a C046     		nop
 1160 047c 02E0     		b	.L30	@
 1161              	.L44:
 490:src/main.c    **** 
 1162              		.loc 2 490 0
 1163 047e C046     		nop
 1164 0480 00E0     		b	.L30	@
 1165              	.L45:
 571:src/main.c    **** 
 1166              		.loc 2 571 0
 1167 0482 C046     		nop
 1168              	.L30:
 576:src/main.c    **** 		}
 577:src/main.c    **** 
 578:src/main.c    **** 		//Cosas que dependen de las muestras
 579:src/main.c    **** 		if (seq_ready)
 1169              		.loc 2 579 0
 1170 0484 154B     		ldr	r3, .L48+52	@ tmp418,
 1171 0486 1B78     		ldrb	r3, [r3]	@ tmp419, seq_ready
 1172 0488 DBB2     		uxtb	r3, r3	@ D.7165, tmp419
 1173 048a 002B     		cmp	r3, #0	@ D.7165,
 1174 048c 06D0     		beq	.L40	@,
 580:src/main.c    **** 		{
 581:src/main.c    **** 			seq_ready = 0;
 1175              		.loc 2 581 0
 1176 048e 134B     		ldr	r3, .L48+52	@ tmp420,
 1177 0490 0022     		movs	r2, #0	@ tmp421,
 1178 0492 1A70     		strb	r2, [r3]	@ tmp422, seq_ready
 582:src/main.c    **** 			UpdateVGrid ();
 1179              		.loc 2 582 0
 1180 0494 FFF7FEFF 		bl	UpdateVGrid	@
 583:src/main.c    **** 			UpdateIGrid ();
 1181              		.loc 2 583 0
 1182 0498 FFF7FEFF 		bl	UpdateIGrid	@
 1183              	.L40:
 584:src/main.c    **** 		}
 585:src/main.c    **** 
 586:src/main.c    **** 		//Cosas que no dependen del estado del programa
 587:src/main.c    **** 		UpdateRelay ();
 1184              		.loc 2 587 0
 1185 049c FFF7FEFF 		bl	UpdateRelay	@
 588:src/main.c    **** 		// UpdatePhotoTransistor();
 589:src/main.c    **** #ifdef USE_GSM
ARM GAS  /tmp/cc0FodwT.s 			page 50


 590:src/main.c    **** 		FuncsGSM();
 1186              		.loc 2 590 0
 1187 04a0 FFF7FEFF 		bl	FuncsGSM	@
 591:src/main.c    **** #endif
 592:src/main.c    **** 	}	//end while 1
 1188              		.loc 2 592 0
 1189 04a4 72E6     		b	.L41	@
 1190              	.L49:
 1191 04a6 C046     		.align	2
 1192              	.L48:
 1193 04a8 00000000 		.word	power_vect
 1194 04ac 00000000 		.word	power_2secs_acum
 1195 04b0 00000000 		.word	power_2secs_index
 1196 04b4 90F7AA95 		.word	-1783957616
 1197 04b8 09BF843F 		.word	1065664265
 1198 04bc 0000C842 		.word	1120403456
 1199 04c0 C4000000 		.word	.LC24
 1200 04c4 00000000 		.word	power_minutes
 1201 04c8 00000000 		.word	power_minutes_index
 1202 04cc 00000000 		.word	power_hours
 1203 04d0 00000000 		.word	timer_standby
 1204 04d4 D8000000 		.word	.LC29
 1205 04d8 EC000000 		.word	.LC31
 1206 04dc 00000000 		.word	seq_ready
 1207              		.cfi_endproc
 1208              	.LFE20:
 1209              		.size	main, .-main
 1210              		.section	.rodata
 1211 00f9 000000   		.align	2
 1212              	.LC33:
 1213 00fc 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1213      3A7B226D 
 1213      794E616D 
 1213      65223A22 
 1213      4E75636C 
 1214              		.align	2
 1215              	.LC35:
 1216 0114 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1216      54656D70 
 1216      65726174 
 1216      75726522 
 1216      3A256C75 
 1217 012d 000000   		.align	2
 1218              	.LC37:
 1219 0130 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1219      48756D69 
 1219      64697479 
 1219      223A256C 
 1219      752E256C 
 1220 0146 0000     		.align	2
 1221              	.LC39:
 1222 0148 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1222      50726573 
 1222      73757265 
 1222      223A256C 
 1222      752E256C 
 1223 015e 0000     		.align	2
ARM GAS  /tmp/cc0FodwT.s 			page 51


 1224              	.LC41:
 1225 0160 7D7D00   		.ascii	"}}\000"
 1226              		.section	.text.prepare_json_pkt,"ax",%progbits
 1227              		.align	2
 1228              		.global	prepare_json_pkt
 1229              		.code	16
 1230              		.thumb_func
 1231              		.type	prepare_json_pkt, %function
 1232              	prepare_json_pkt:
 1233              	.LFB21:
 593:src/main.c    **** 
 594:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 595:src/main.c    **** 
 596:src/main.c    **** 	while (1)
 597:src/main.c    **** 	{
 598:src/main.c    **** 		switch (main_state)
 599:src/main.c    **** 		{
 600:src/main.c    **** 			case MAIN_INIT:
 601:src/main.c    **** 				RelayOff();
 602:src/main.c    **** 				LED_OFF;
 603:src/main.c    **** 				FillPhotoBuffer();
 604:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 605:src/main.c    **** 				FillTempBuffer();
 606:src/main.c    **** #endif
 607:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 608:src/main.c    **** 				Update_TIM3_CH1 (0);
 609:src/main.c    **** #endif
 610:src/main.c    **** 				main_state = SYNCHRO_ADC;
 611:src/main.c    **** #ifdef ADC_WITH_INT
 612:src/main.c    **** 				seq_ready = 0;
 613:src/main.c    **** #endif
 614:src/main.c    **** 				break;
 615:src/main.c    **** 
 616:src/main.c    **** 			case SYNCHRO_ADC:
 617:src/main.c    **** #ifdef ADC_WITH_INT
 618:src/main.c    **** 				if (seq_ready)
 619:src/main.c    **** #endif
 620:src/main.c    **** 				{
 621:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 622:src/main.c    **** 				}
 623:src/main.c    **** 				break;
 624:src/main.c    **** 
 625:src/main.c    **** 			case SET_ZERO_CURRENT:
 626:src/main.c    **** 				main_state = LAMP_OFF;
 627:src/main.c    **** 				break;
 628:src/main.c    **** 
 629:src/main.c    **** 			case LAMP_OFF:
 630:src/main.c    **** 				if (!tt_relay_on_off)
 631:src/main.c    **** 				{
 632:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 633:src/main.c    **** 					{
 634:src/main.c    **** 						main_state = LAMP_ON;
 635:src/main.c    **** 						tt_relay_on_off = 10000;
 636:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 637:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 638:src/main.c    **** 	#endif
 639:src/main.c    **** 
ARM GAS  /tmp/cc0FodwT.s 			page 52


 640:src/main.c    **** 						RelayOn();
 641:src/main.c    **** 						LED_ON;
 642:src/main.c    **** 	#ifdef WITH_HYST
 643:src/main.c    **** 						hours = 0;
 644:src/main.c    **** 	#endif
 645:src/main.c    **** 					}
 646:src/main.c    **** 				}
 647:src/main.c    **** 				break;
 648:src/main.c    **** 
 649:src/main.c    **** 			case LAMP_ON:
 650:src/main.c    **** 				if (!tt_relay_on_off)
 651:src/main.c    **** 				{
 652:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 653:src/main.c    **** 					hyst = GetHysteresis (hours);
 654:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 655:src/main.c    **** 	#else
 656:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 657:src/main.c    **** 	#endif
 658:src/main.c    **** 					{
 659:src/main.c    **** 						main_state = LAMP_OFF;
 660:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 661:src/main.c    **** 						Update_TIM3_CH1 (0);
 662:src/main.c    **** 	#endif
 663:src/main.c    **** 						tt_relay_on_off = 10000;
 664:src/main.c    **** 						RelayOff();
 665:src/main.c    **** 						LED_OFF;
 666:src/main.c    **** 					}
 667:src/main.c    **** 				}
 668:src/main.c    **** 
 669:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 670:src/main.c    **** 				if (main_state == LAMP_ON)
 671:src/main.c    **** 				{
 672:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
 673:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
 674:src/main.c    **** 				}
 675:src/main.c    **** 	#endif
 676:src/main.c    **** 				break;
 677:src/main.c    **** 
 678:src/main.c    **** 			default:
 679:src/main.c    **** 				main_state = MAIN_INIT;
 680:src/main.c    **** 				break;
 681:src/main.c    **** 		}
 682:src/main.c    **** 
 683:src/main.c    **** 		if (!timer_standby)
 684:src/main.c    **** 		{
 685:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 686:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
 687:src/main.c    **** #else
 688:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
 689:src/main.c    **** #endif
 690:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 691:src/main.c    **** 			Usart2Send(s_lcd);
 692:src/main.c    **** 			timer_standby = 2000;
 693:src/main.c    **** 		}
 694:src/main.c    **** 
 695:src/main.c    **** 		//Cosas que no dependen del estado del programa
 696:src/main.c    **** 		UpdateRelay ();
ARM GAS  /tmp/cc0FodwT.s 			page 53


 697:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 698:src/main.c    **** 		UpdateTemp();
 699:src/main.c    **** #endif
 700:src/main.c    **** 		UpdatePhotoTransistor();
 701:src/main.c    **** 	}	//end while 1
 702:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
 703:src/main.c    **** #endif	//USE_REDONDA_BASIC
 704:src/main.c    **** 
 705:src/main.c    **** 
 706:src/main.c    **** #ifdef USE_MQTT_LIB
 707:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 708:src/main.c    **** 	int rc = 0;
 709:src/main.c    **** 	char buf[200];
 710:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
 711:src/main.c    **** 	char* payload = "mypayload";
 712:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
 713:src/main.c    **** 	int len = 0;
 714:src/main.c    **** 
 715:src/main.c    **** 	data.clientID.cstring = "me";
 716:src/main.c    **** 	data.keepAliveInterval = 20;
 717:src/main.c    **** 	data.cleansession = 1;
 718:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
 719:src/main.c    **** 
 720:src/main.c    **** 	topicString.cstring = "mytopic";
 721:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
 722:src/main.c    **** 
 723:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
 724:src/main.c    **** 	//falta abrir puerto
 725:src/main.c    **** 	//falta enviar al socket
 726:src/main.c    **** 	//falta cerrar socket
 727:src/main.c    **** #endif
 728:src/main.c    **** 
 729:src/main.c    **** //	//---------- Prueba USART2 --------//
 730:src/main.c    **** //
 731:src/main.c    **** //    while( 1 )
 732:src/main.c    **** //    {
 733:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 734:src/main.c    **** //        Wait_ms(3000);
 735:src/main.c    **** //    }
 736:src/main.c    **** //
 737:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
 738:src/main.c    **** 
 739:src/main.c    **** 	//---------- Prueba con GPS --------//
 740:src/main.c    **** #ifdef USE_GPS
 741:src/main.c    **** 	Usart2SendSingle('M');
 742:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 743:src/main.c    **** 	Wait_ms(1000);
 744:src/main.c    **** 
 745:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
 746:src/main.c    **** 
 747:src/main.c    **** 	//mando reset al gps
 748:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
 749:src/main.c    **** 	GPSStartResetSM ();
 750:src/main.c    **** 	while (GPSStart() != RESP_OK);
 751:src/main.c    **** 
 752:src/main.c    **** 	//mando conf al gps
 753:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
ARM GAS  /tmp/cc0FodwT.s 			page 54


 754:src/main.c    **** 	GPSConfigResetSM ();
 755:src/main.c    **** 	while (GPSConfig() != RESP_OK);
 756:src/main.c    **** 
 757:src/main.c    **** //	//mando reset factory al gps
 758:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
 759:src/main.c    **** //	GPSResetFactoryResetSM ();
 760:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
 761:src/main.c    **** 
 762:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
 763:src/main.c    **** //	timer_standby = 60000;
 764:src/main.c    **** //	while( timer_standby )
 765:src/main.c    **** 	while( 1 )
 766:src/main.c    **** 	{
 767:src/main.c    **** 		if (gps_pckt_ready)
 768:src/main.c    **** 		{
 769:src/main.c    **** 			gps_pckt_ready = 0;
 770:src/main.c    **** 			//Usart2SendSingle('P');
 771:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
 772:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
 773:src/main.c    **** 		}
 774:src/main.c    **** 
 775:src/main.c    **** 		GPSProcess();
 776:src/main.c    **** 	}
 777:src/main.c    **** #endif
 778:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
 779:src/main.c    **** 
 780:src/main.c    **** 	//---------- Prueba con GSM --------//
 781:src/main.c    **** #ifdef USE_GSM
 782:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
 783:src/main.c    **** 
 784:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 785:src/main.c    **** 
 786:src/main.c    **** 
 787:src/main.c    **** 	//Pruebo USART1
 788:src/main.c    **** //	while (1)
 789:src/main.c    **** //	{
 790:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
 791:src/main.c    **** //			Wait_ms(50);
 792:src/main.c    **** //	}
 793:src/main.c    **** 
 794:src/main.c    **** 
 795:src/main.c    **** 	//mando start al gsm
 796:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 797:src/main.c    **** 	//GPSStartResetSM ();
 798:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 799:src/main.c    **** 	while (timer_standby)
 800:src/main.c    **** 	{
 801:src/main.c    **** 		i = GSM_Start();
 802:src/main.c    **** 		if (i == 2)
 803:src/main.c    **** 		{
 804:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 805:src/main.c    **** 			timer_standby = 0;
 806:src/main.c    **** 		}
 807:src/main.c    **** 
 808:src/main.c    **** 		if (i == 4)
 809:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 810:src/main.c    **** 	}
ARM GAS  /tmp/cc0FodwT.s 			page 55


 811:src/main.c    **** 
 812:src/main.c    **** 	//mando conf al gsm
 813:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
 814:src/main.c    **** 	//GPSConfigResetSM ();
 815:src/main.c    **** 
 816:src/main.c    **** 	i = 0;
 817:src/main.c    **** 	while (i == 0)
 818:src/main.c    **** 	{
 819:src/main.c    **** 		ii = GSM_Config(1000);
 820:src/main.c    **** 
 821:src/main.c    **** 		if (ii == 2)
 822:src/main.c    **** 			i = 0;
 823:src/main.c    **** 		else if (ii > 2)
 824:src/main.c    **** 		{
 825:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
 826:src/main.c    **** 			while (1);
 827:src/main.c    **** 		}
 828:src/main.c    **** 
 829:src/main.c    **** 		GSMProcess();
 830:src/main.c    **** 		GSMReceive ();
 831:src/main.c    **** 
 832:src/main.c    **** 		if (gsm_pckt_ready)
 833:src/main.c    **** 		{
 834:src/main.c    **** 			gsm_pckt_ready = 0;
 835:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 836:src/main.c    **** 		}
 837:src/main.c    **** 
 838:src/main.c    **** 		if (LIGHT)
 839:src/main.c    **** 			LED_ON;
 840:src/main.c    **** 		else
 841:src/main.c    **** 			LED_OFF;
 842:src/main.c    **** 	}
 843:src/main.c    **** 
 844:src/main.c    **** 
 845:src/main.c    **** 	while( 1 )
 846:src/main.c    **** 	{
 847:src/main.c    **** 		if (gsm_pckt_ready)
 848:src/main.c    **** 		{
 849:src/main.c    **** 			gsm_pckt_ready = 0;
 850:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 851:src/main.c    **** 		}
 852:src/main.c    **** 
 853:src/main.c    **** 		GSMProcess();
 854:src/main.c    **** 
 855:src/main.c    **** 		if (LIGHT)
 856:src/main.c    **** 			LED_ON;
 857:src/main.c    **** 
 858:src/main.c    **** 	}
 859:src/main.c    **** #endif
 860:src/main.c    **** 
 861:src/main.c    **** 	//---------- Pruebas con GSM GATEWAY --------//
 862:src/main.c    **** #ifdef USE_GSM_GATEWAY
 863:src/main.c    **** 	LED_OFF;
 864:src/main.c    **** 	for (i = 0; i < 6; i++)
 865:src/main.c    **** 	{
 866:src/main.c    **** 		if (LED)
 867:src/main.c    **** 			LED_OFF;
ARM GAS  /tmp/cc0FodwT.s 			page 56


 868:src/main.c    **** 		else
 869:src/main.c    **** 			LED_ON;
 870:src/main.c    **** 
 871:src/main.c    **** 		Wait_ms (300);
 872:src/main.c    **** 	}
 873:src/main.c    **** 	Wait_ms (3000);
 874:src/main.c    **** 
 875:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 876:src/main.c    **** 
 877:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 878:src/main.c    **** 
 879:src/main.c    **** 
 880:src/main.c    **** 	//mando start al gsm
 881:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 882:src/main.c    **** 	//GPSStartResetSM ();
 883:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 884:src/main.c    **** 	while (timer_standby)
 885:src/main.c    **** 	{
 886:src/main.c    **** 		i = GSM_Start();
 887:src/main.c    **** 		if (i == 2)
 888:src/main.c    **** 		{
 889:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 890:src/main.c    **** 			timer_standby = 0;
 891:src/main.c    **** 		}
 892:src/main.c    **** 		else
 893:src/main.c    **** 
 894:src/main.c    **** 		if (i == 4)
 895:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 896:src/main.c    **** 	}
 897:src/main.c    **** 
 898:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 899:src/main.c    **** 
 900:src/main.c    **** 	while (1)
 901:src/main.c    **** 	{
 902:src/main.c    **** 		GSMProcess();
 903:src/main.c    **** 
 904:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 905:src/main.c    **** 		{
 906:src/main.c    **** 			usart2_pckt_ready = 0;
 907:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 908:src/main.c    **** 		}
 909:src/main.c    **** 
 910:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 911:src/main.c    **** 		{
 912:src/main.c    **** 			gsm_pckt_ready = 0;
 913:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 914:src/main.c    **** 		}
 915:src/main.c    **** 
 916:src/main.c    **** 		if (LIGHT)
 917:src/main.c    **** 			LED_ON;
 918:src/main.c    **** 		else
 919:src/main.c    **** 			LED_OFF;
 920:src/main.c    **** 	}
 921:src/main.c    **** #endif
 922:src/main.c    **** 
 923:src/main.c    **** 	//---------- Fin Prueba con GSM GATEWAY --------//
 924:src/main.c    **** 
ARM GAS  /tmp/cc0FodwT.s 			page 57


 925:src/main.c    **** 
 926:src/main.c    **** 
 927:src/main.c    **** 	//---------- Prueba temp --------//
 928:src/main.c    **** 	/*
 929:src/main.c    **** 	while (1)
 930:src/main.c    **** 	{
 931:src/main.c    **** 		local_meas = GetTemp();
 932:src/main.c    **** 		if (local_meas != local_meas_last)
 933:src/main.c    **** 		{
 934:src/main.c    **** 			LED_ON;
 935:src/main.c    **** 			local_meas_last = local_meas;
 936:src/main.c    **** 			LCD_2DO_RENGLON;
 937:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
 938:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
 939:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
 940:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
 941:src/main.c    **** 			LCDTransmitStr(s_lcd);
 942:src/main.c    **** 			LED_OFF;
 943:src/main.c    **** 		}
 944:src/main.c    **** 
 945:src/main.c    **** 		UpdateTemp();
 946:src/main.c    **** 	}
 947:src/main.c    **** 	*/
 948:src/main.c    **** 	//---------- Fin prueba temp --------//
 949:src/main.c    **** 
 950:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
 951:src/main.c    **** 	/*
 952:src/main.c    **** 	local_meas = 0;
 953:src/main.c    **** 	while (1)
 954:src/main.c    **** 	{
 955:src/main.c    **** 		LCD_2DO_RENGLON;
 956:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
 957:src/main.c    **** 		fcalc = local_meas;
 958:src/main.c    **** 		fcalc = fcalc * K_1TO10;
 959:src/main.c    **** 		one_int = (short) fcalc;
 960:src/main.c    **** 		fcalc = fcalc - one_int;
 961:src/main.c    **** 		fcalc = fcalc * 10;
 962:src/main.c    **** 		one_dec = (short) fcalc;
 963:src/main.c    **** 
 964:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
 965:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
 966:src/main.c    **** 		LCDTransmitStr(s_lcd);
 967:src/main.c    **** 
 968:src/main.c    **** 		Wait_ms (1000);
 969:src/main.c    **** 		if (local_meas <= 255)
 970:src/main.c    **** 			local_meas = 0;
 971:src/main.c    **** 		else
 972:src/main.c    **** 			local_meas++;
 973:src/main.c    **** 	}
 974:src/main.c    **** 	*/
 975:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
 976:src/main.c    **** 
 977:src/main.c    **** 
 978:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
 979:src/main.c    **** 
 980:src/main.c    **** 	return 0;
 981:src/main.c    **** }
ARM GAS  /tmp/cc0FodwT.s 			page 58


 982:src/main.c    **** 
 983:src/main.c    **** //--- End of Main ---//
 984:src/main.c    **** 
 985:src/main.c    **** 
 986:src/main.c    **** 
 987:src/main.c    **** 
 988:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
 989:src/main.c    **** {
 1234              		.loc 2 989 0
 1235              		.cfi_startproc
 1236 0000 00B5     		push	{lr}	@
 1237              	.LCFI6:
 1238              		.cfi_def_cfa_offset 4
 1239              		.cfi_offset 14, -4
 1240 0002 97B0     		sub	sp, sp, #92	@,,
 1241              	.LCFI7:
 1242              		.cfi_def_cfa_offset 96
 1243 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
 990:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1244              		.loc 2 990 0
 1245 0006 0123     		movs	r3, #1	@ tmp112,
 1246 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1247 000a 0223     		movs	r3, #2	@ tmp113,
 1248 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1249 000e 0323     		movs	r3, #3	@ tmp114,
 1250 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1251 0012 0423     		movs	r3, #4	@ tmp115,
 1252 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1253 0016 0523     		movs	r3, #5	@ tmp116,
 1254 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1255 001a 0623     		movs	r3, #6	@ tmp117,
 1256 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
 991:src/main.c    ****       char tempbuff[40];
 992:src/main.c    ****       volatile float HUMIDITY_Value;
 993:src/main.c    ****       volatile float TEMPERATURE_Value;
 994:src/main.c    ****       volatile float PRESSURE_Value;
 995:src/main.c    **** 
 996:src/main.c    **** 
 997:src/main.c    **** 
 998:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1257              		.loc 2 998 0
 1258 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1259 0020 1E4B     		ldr	r3, .L52	@ tmp119,
 1260 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1261 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1262 0026 1823     		movs	r3, #24	@ tmp122,
 1263 0028 1A00     		movs	r2, r3	@, tmp122
 1264 002a FFF7FEFF 		bl	memcpy	@
 999:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1000:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1001:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1265              		.loc 2 1001 0
 1266 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1267 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1268 0032 1B49     		ldr	r1, .L52+4	@ tmp127,
 1269 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1270 0036 FFF7FEFF 		bl	sprintf	@
ARM GAS  /tmp/cc0FodwT.s 			page 59


1002:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1271              		.loc 2 1002 0
 1272 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1273 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1274 003e 1100     		movs	r1, r2	@, tmp129
 1275 0040 1800     		movs	r0, r3	@, tmp130
 1276 0042 FFF7FEFF 		bl	strcat	@
1003:src/main.c    **** 
1004:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1005:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1006:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1277              		.loc 2 1006 0
 1278 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1279 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1280 004a 1649     		ldr	r1, .L52+8	@ tmp133,
 1281 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1282 004e FFF7FEFF 		bl	sprintf	@
1007:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1283              		.loc 2 1007 0
 1284 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1285 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1286 0056 1100     		movs	r1, r2	@, tmp135
 1287 0058 1800     		movs	r0, r3	@, tmp136
 1288 005a FFF7FEFF 		bl	strcat	@
1008:src/main.c    **** 
1009:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1010:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1011:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1289              		.loc 2 1011 0
 1290 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1291 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1292 0062 1149     		ldr	r1, .L52+12	@ tmp139,
 1293 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1294 0066 FFF7FEFF 		bl	sprintf	@
1012:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1295              		.loc 2 1012 0
 1296 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1297 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1298 006e 1100     		movs	r1, r2	@, tmp141
 1299 0070 1800     		movs	r0, r3	@, tmp142
 1300 0072 FFF7FEFF 		bl	strcat	@
1013:src/main.c    **** 
1014:src/main.c    **** 
1015:src/main.c    ****       strcat((char *)buffer,"}}");
 1301              		.loc 2 1015 0
 1302 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1303 0078 1800     		movs	r0, r3	@, tmp143
 1304 007a FFF7FEFF 		bl	strlen	@
 1305 007e 0300     		movs	r3, r0	@ tmp144,
 1306 0080 1A00     		movs	r2, r3	@ D.7182, tmp145
 1307 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1308 0084 9A18     		adds	r2, r3, r2	@ D.7183, tmp146, D.7182
 1309 0086 094B     		ldr	r3, .L52+16	@ tmp147,
 1310 0088 1000     		movs	r0, r2	@ tmp148, D.7183
 1311 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1312 008c 0323     		movs	r3, #3	@ tmp150,
 1313 008e 1A00     		movs	r2, r3	@, tmp150
ARM GAS  /tmp/cc0FodwT.s 			page 60


 1314 0090 FFF7FEFF 		bl	memcpy	@
1016:src/main.c    **** 
1017:src/main.c    ****       return;
 1315              		.loc 2 1017 0
 1316 0094 C046     		nop
1018:src/main.c    **** }
 1317              		.loc 2 1018 0
 1318 0096 17B0     		add	sp, sp, #92	@,,
 1319              		@ sp needed	@
 1320 0098 00BD     		pop	{pc}
 1321              	.L53:
 1322 009a C046     		.align	2
 1323              	.L52:
 1324 009c FC000000 		.word	.LC33
 1325 00a0 14010000 		.word	.LC35
 1326 00a4 30010000 		.word	.LC37
 1327 00a8 48010000 		.word	.LC39
 1328 00ac 60010000 		.word	.LC41
 1329              		.cfi_endproc
 1330              	.LFE21:
 1331              		.size	prepare_json_pkt, .-prepare_json_pkt
 1332              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1333              		.align	2
 1334              		.global	TimingDelay_Decrement
 1335              		.code	16
 1336              		.thumb_func
 1337              		.type	TimingDelay_Decrement, %function
 1338              	TimingDelay_Decrement:
 1339              	.LFB22:
1019:src/main.c    **** 
1020:src/main.c    **** //void EXTI4_15_IRQHandler(void)
1021:src/main.c    **** //{
1022:src/main.c    **** //	unsigned short aux;
1023:src/main.c    **** //
1024:src/main.c    **** ////--- SOLO PRUEBA DE INTERRUPCIONES ---//
1025:src/main.c    **** ////	if (DMX_INPUT)
1026:src/main.c    **** ////		LED_ON;
1027:src/main.c    **** ////	else
1028:src/main.c    **** ////		LED_OFF;
1029:src/main.c    **** ////
1030:src/main.c    **** ////	EXTI->PR |= 0x0100;
1031:src/main.c    **** //
1032:src/main.c    **** //	if(EXTI->PR & 0x0100)	//Line8
1033:src/main.c    **** //	{
1034:src/main.c    **** //
1035:src/main.c    **** //		//si no esta con el USART detecta el flanco	PONER TIMEOUT ACA?????
1036:src/main.c    **** //		if ((dmx_receive_flag == 0) || (dmx_timeout_timer == 0))
1037:src/main.c    **** //		//if (dmx_receive_flag == 0)
1038:src/main.c    **** //		{
1039:src/main.c    **** //			switch (signal_state)
1040:src/main.c    **** //			{
1041:src/main.c    **** //				case IDLE:
1042:src/main.c    **** //					if (!(DMX_INPUT))
1043:src/main.c    **** //					{
1044:src/main.c    **** //						//Activo timer en Falling.
1045:src/main.c    **** //						TIM14->CNT = 0;
1046:src/main.c    **** //						TIM14->CR1 |= 0x0001;
ARM GAS  /tmp/cc0FodwT.s 			page 61


1047:src/main.c    **** //						signal_state++;
1048:src/main.c    **** //					}
1049:src/main.c    **** //					break;
1050:src/main.c    **** //
1051:src/main.c    **** //				case LOOK_FOR_BREAK:
1052:src/main.c    **** //					if (DMX_INPUT)
1053:src/main.c    **** //					{
1054:src/main.c    **** //						//Desactivo timer en Rising.
1055:src/main.c    **** //						aux = TIM14->CNT;
1056:src/main.c    **** //
1057:src/main.c    **** //						//reviso BREAK
1058:src/main.c    **** //						//if (((tim_counter_65ms) || (aux > 88)) && (tim_counter_65ms <= 20))
1059:src/main.c    **** //						if ((aux > 87) && (aux < 210))	//Consola STARLET 6
1060:src/main.c    **** //						//if ((aux > 87) && (aux < 2000))		//Consola marca CODE tiene break 1.88ms
1061:src/main.c    **** //						{
1062:src/main.c    **** //							LED_ON;
1063:src/main.c    **** //							//Activo timer para ver MARK.
1064:src/main.c    **** //							//TIM2->CNT = 0;
1065:src/main.c    **** //							//TIM2->CR1 |= 0x0001;
1066:src/main.c    **** //
1067:src/main.c    **** //							signal_state++;
1068:src/main.c    **** //							//tengo el break, activo el puerto serie
1069:src/main.c    **** //							DMX_channel_received = 0;
1070:src/main.c    **** //							//dmx_receive_flag = 1;
1071:src/main.c    **** //
1072:src/main.c    **** //							dmx_timeout_timer = DMX_TIMEOUT;		//activo el timer cuando prendo el puerto serie
1073:src/main.c    **** //							//USARTx_RX_ENA;
1074:src/main.c    **** //						}
1075:src/main.c    **** //						else	//falso disparo
1076:src/main.c    **** //							signal_state = IDLE;
1077:src/main.c    **** //					}
1078:src/main.c    **** //					else	//falso disparo
1079:src/main.c    **** //						signal_state = IDLE;
1080:src/main.c    **** //
1081:src/main.c    **** //					TIM14->CR1 &= 0xFFFE;
1082:src/main.c    **** //					break;
1083:src/main.c    **** //
1084:src/main.c    **** //				case LOOK_FOR_MARK:
1085:src/main.c    **** //					if ((!(DMX_INPUT)) && (dmx_timeout_timer))	//termino Mark after break
1086:src/main.c    **** //					{
1087:src/main.c    **** //						//ya tenia el serie habilitado
1088:src/main.c    **** //						//if ((aux > 7) && (aux < 12))
1089:src/main.c    **** //						dmx_receive_flag = 1;
1090:src/main.c    **** //					}
1091:src/main.c    **** //					else	//falso disparo
1092:src/main.c    **** //					{
1093:src/main.c    **** //						//termine por timeout
1094:src/main.c    **** //						dmx_receive_flag = 0;
1095:src/main.c    **** //						//USARTx_RX_DISA;
1096:src/main.c    **** //					}
1097:src/main.c    **** //					signal_state = IDLE;
1098:src/main.c    **** //					LED_OFF;
1099:src/main.c    **** //					break;
1100:src/main.c    **** //
1101:src/main.c    **** //				default:
1102:src/main.c    **** //					signal_state = IDLE;
1103:src/main.c    **** //					break;
ARM GAS  /tmp/cc0FodwT.s 			page 62


1104:src/main.c    **** //			}
1105:src/main.c    **** //		}
1106:src/main.c    **** //
1107:src/main.c    **** //		EXTI->PR |= 0x0100;
1108:src/main.c    **** //	}
1109:src/main.c    **** //}
1110:src/main.c    **** 
1111:src/main.c    **** void TimingDelay_Decrement(void)
1112:src/main.c    **** {
 1340              		.loc 2 1112 0
 1341              		.cfi_startproc
 1342 0000 10B5     		push	{r4, lr}	@
 1343              	.LCFI8:
 1344              		.cfi_def_cfa_offset 8
 1345              		.cfi_offset 4, -8
 1346              		.cfi_offset 14, -4
1113:src/main.c    **** 	if (wait_ms_var)
 1347              		.loc 2 1113 0
 1348 0002 4B4B     		ldr	r3, .L67	@ tmp145,
 1349 0004 1B88     		ldrh	r3, [r3]	@ tmp146, wait_ms_var
 1350 0006 9BB2     		uxth	r3, r3	@ D.7196, tmp146
 1351 0008 002B     		cmp	r3, #0	@ D.7196,
 1352 000a 06D0     		beq	.L55	@,
1114:src/main.c    **** 		wait_ms_var--;
 1353              		.loc 2 1114 0
 1354 000c 484B     		ldr	r3, .L67	@ tmp147,
 1355 000e 1B88     		ldrh	r3, [r3]	@ tmp148, wait_ms_var
 1356 0010 9BB2     		uxth	r3, r3	@ D.7196, tmp148
 1357 0012 013B     		subs	r3, r3, #1	@ tmp149,
 1358 0014 9AB2     		uxth	r2, r3	@ D.7196, tmp149
 1359 0016 464B     		ldr	r3, .L67	@ tmp150,
 1360 0018 1A80     		strh	r2, [r3]	@ tmp151, wait_ms_var
 1361              	.L55:
1115:src/main.c    **** 
1116:src/main.c    **** //	if (display_timer)
1117:src/main.c    **** //		display_timer--;
1118:src/main.c    **** 
1119:src/main.c    **** 	if (timer_standby)
 1362              		.loc 2 1119 0
 1363 001a 464B     		ldr	r3, .L67+4	@ tmp152,
 1364 001c 1B88     		ldrh	r3, [r3]	@ tmp153, timer_standby
 1365 001e 9BB2     		uxth	r3, r3	@ D.7196, tmp153
 1366 0020 002B     		cmp	r3, #0	@ D.7196,
 1367 0022 06D0     		beq	.L56	@,
1120:src/main.c    **** 		timer_standby--;
 1368              		.loc 2 1120 0
 1369 0024 434B     		ldr	r3, .L67+4	@ tmp154,
 1370 0026 1B88     		ldrh	r3, [r3]	@ tmp155, timer_standby
 1371 0028 9BB2     		uxth	r3, r3	@ D.7196, tmp155
 1372 002a 013B     		subs	r3, r3, #1	@ tmp156,
 1373 002c 9AB2     		uxth	r2, r3	@ D.7196, tmp156
 1374 002e 414B     		ldr	r3, .L67+4	@ tmp157,
 1375 0030 1A80     		strh	r2, [r3]	@ tmp158, timer_standby
 1376              	.L56:
1121:src/main.c    **** 
1122:src/main.c    **** 	if (acswitch_timer)
 1377              		.loc 2 1122 0
ARM GAS  /tmp/cc0FodwT.s 			page 63


 1378 0032 414B     		ldr	r3, .L67+8	@ tmp159,
 1379 0034 1B78     		ldrb	r3, [r3]	@ tmp160, acswitch_timer
 1380 0036 DBB2     		uxtb	r3, r3	@ D.7197, tmp160
 1381 0038 002B     		cmp	r3, #0	@ D.7197,
 1382 003a 06D0     		beq	.L57	@,
1123:src/main.c    **** 		acswitch_timer--;
 1383              		.loc 2 1123 0
 1384 003c 3E4B     		ldr	r3, .L67+8	@ tmp161,
 1385 003e 1B78     		ldrb	r3, [r3]	@ tmp162, acswitch_timer
 1386 0040 DBB2     		uxtb	r3, r3	@ D.7197, tmp162
 1387 0042 013B     		subs	r3, r3, #1	@ tmp163,
 1388 0044 DAB2     		uxtb	r2, r3	@ D.7197, tmp163
 1389 0046 3C4B     		ldr	r3, .L67+8	@ tmp164,
 1390 0048 1A70     		strb	r2, [r3]	@ tmp165, acswitch_timer
 1391              	.L57:
1124:src/main.c    **** 
1125:src/main.c    **** #ifdef USE_REDONDA_BASIC
1126:src/main.c    **** 	if (tt_take_photo_sample)
 1392              		.loc 2 1126 0
 1393 004a 3C4B     		ldr	r3, .L67+12	@ tmp166,
 1394 004c 1B88     		ldrh	r3, [r3]	@ tmp167, tt_take_photo_sample
 1395 004e 9BB2     		uxth	r3, r3	@ D.7196, tmp167
 1396 0050 002B     		cmp	r3, #0	@ D.7196,
 1397 0052 06D0     		beq	.L58	@,
1127:src/main.c    **** 		tt_take_photo_sample--;
 1398              		.loc 2 1127 0
 1399 0054 394B     		ldr	r3, .L67+12	@ tmp168,
 1400 0056 1B88     		ldrh	r3, [r3]	@ tmp169, tt_take_photo_sample
 1401 0058 9BB2     		uxth	r3, r3	@ D.7196, tmp169
 1402 005a 013B     		subs	r3, r3, #1	@ tmp170,
 1403 005c 9AB2     		uxth	r2, r3	@ D.7196, tmp170
 1404 005e 374B     		ldr	r3, .L67+12	@ tmp171,
 1405 0060 1A80     		strh	r2, [r3]	@ tmp172, tt_take_photo_sample
 1406              	.L58:
1128:src/main.c    **** 
1129:src/main.c    **** 	if (tt_relay_on_off)
 1407              		.loc 2 1129 0
 1408 0062 374B     		ldr	r3, .L67+16	@ tmp173,
 1409 0064 1B88     		ldrh	r3, [r3]	@ tmp174, tt_relay_on_off
 1410 0066 9BB2     		uxth	r3, r3	@ D.7196, tmp174
 1411 0068 002B     		cmp	r3, #0	@ D.7196,
 1412 006a 06D0     		beq	.L59	@,
1130:src/main.c    **** 		tt_relay_on_off--;
 1413              		.loc 2 1130 0
 1414 006c 344B     		ldr	r3, .L67+16	@ tmp175,
 1415 006e 1B88     		ldrh	r3, [r3]	@ tmp176, tt_relay_on_off
 1416 0070 9BB2     		uxth	r3, r3	@ D.7196, tmp176
 1417 0072 013B     		subs	r3, r3, #1	@ tmp177,
 1418 0074 9AB2     		uxth	r2, r3	@ D.7196, tmp177
 1419 0076 324B     		ldr	r3, .L67+16	@ tmp178,
 1420 0078 1A80     		strh	r2, [r3]	@ tmp179, tt_relay_on_off
 1421              	.L59:
1131:src/main.c    **** #endif
1132:src/main.c    **** 
1133:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1134:src/main.c    **** 	if (tt_take_temp_sample)
1135:src/main.c    **** 		tt_take_temp_sample--;
ARM GAS  /tmp/cc0FodwT.s 			page 64


1136:src/main.c    **** #endif
1137:src/main.c    **** 
1138:src/main.c    **** 	if (take_temp_sample)
 1422              		.loc 2 1138 0
 1423 007a 324B     		ldr	r3, .L67+20	@ tmp180,
 1424 007c 1B88     		ldrh	r3, [r3]	@ tmp181, take_temp_sample
 1425 007e 9BB2     		uxth	r3, r3	@ D.7196, tmp181
 1426 0080 002B     		cmp	r3, #0	@ D.7196,
 1427 0082 06D0     		beq	.L60	@,
1139:src/main.c    **** 		take_temp_sample--;
 1428              		.loc 2 1139 0
 1429 0084 2F4B     		ldr	r3, .L67+20	@ tmp182,
 1430 0086 1B88     		ldrh	r3, [r3]	@ tmp183, take_temp_sample
 1431 0088 9BB2     		uxth	r3, r3	@ D.7196, tmp183
 1432 008a 013B     		subs	r3, r3, #1	@ tmp184,
 1433 008c 9AB2     		uxth	r2, r3	@ D.7196, tmp184
 1434 008e 2D4B     		ldr	r3, .L67+20	@ tmp185,
 1435 0090 1A80     		strh	r2, [r3]	@ tmp186, take_temp_sample
 1436              	.L60:
1140:src/main.c    **** 
1141:src/main.c    **** 	if (filter_timer)
 1437              		.loc 2 1141 0
 1438 0092 2D4B     		ldr	r3, .L67+24	@ tmp187,
 1439 0094 1B78     		ldrb	r3, [r3]	@ tmp188, filter_timer
 1440 0096 DBB2     		uxtb	r3, r3	@ D.7197, tmp188
 1441 0098 002B     		cmp	r3, #0	@ D.7197,
 1442 009a 06D0     		beq	.L61	@,
1142:src/main.c    **** 		filter_timer--;
 1443              		.loc 2 1142 0
 1444 009c 2A4B     		ldr	r3, .L67+24	@ tmp189,
 1445 009e 1B78     		ldrb	r3, [r3]	@ tmp190, filter_timer
 1446 00a0 DBB2     		uxtb	r3, r3	@ D.7197, tmp190
 1447 00a2 013B     		subs	r3, r3, #1	@ tmp191,
 1448 00a4 DAB2     		uxtb	r2, r3	@ D.7197, tmp191
 1449 00a6 284B     		ldr	r3, .L67+24	@ tmp192,
 1450 00a8 1A70     		strb	r2, [r3]	@ tmp193, filter_timer
 1451              	.L61:
1143:src/main.c    **** 
1144:src/main.c    **** 	//cuenta de a 1 minuto
1145:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 1452              		.loc 2 1145 0
 1453 00aa 284B     		ldr	r3, .L67+28	@ tmp194,
 1454 00ac 1B88     		ldrh	r3, [r3]	@ tmp195, secs
 1455 00ae 9BB2     		uxth	r3, r3	@ D.7196, tmp195
 1456 00b0 274A     		ldr	r2, .L67+32	@ tmp196,
 1457 00b2 9342     		cmp	r3, r2	@ D.7196, tmp196
 1458 00b4 0AD9     		bls	.L62	@,
1146:src/main.c    **** 	{
1147:src/main.c    **** 		minutes++;
 1459              		.loc 2 1147 0
 1460 00b6 274B     		ldr	r3, .L67+36	@ tmp197,
 1461 00b8 1B78     		ldrb	r3, [r3]	@ tmp198, minutes
 1462 00ba DBB2     		uxtb	r3, r3	@ D.7197, tmp198
 1463 00bc 0133     		adds	r3, r3, #1	@ tmp199,
 1464 00be DAB2     		uxtb	r2, r3	@ D.7197, tmp199
 1465 00c0 244B     		ldr	r3, .L67+36	@ tmp200,
 1466 00c2 1A70     		strb	r2, [r3]	@ tmp201, minutes
ARM GAS  /tmp/cc0FodwT.s 			page 65


1148:src/main.c    **** 		secs = 0;
 1467              		.loc 2 1148 0
 1468 00c4 214B     		ldr	r3, .L67+28	@ tmp202,
 1469 00c6 0022     		movs	r2, #0	@ tmp203,
 1470 00c8 1A80     		strh	r2, [r3]	@ tmp204, secs
 1471 00ca 06E0     		b	.L63	@
 1472              	.L62:
1149:src/main.c    **** 	}
1150:src/main.c    **** 	else
1151:src/main.c    **** 		secs++;
 1473              		.loc 2 1151 0
 1474 00cc 1F4B     		ldr	r3, .L67+28	@ tmp205,
 1475 00ce 1B88     		ldrh	r3, [r3]	@ tmp206, secs
 1476 00d0 9BB2     		uxth	r3, r3	@ D.7196, tmp206
 1477 00d2 0133     		adds	r3, r3, #1	@ tmp207,
 1478 00d4 9AB2     		uxth	r2, r3	@ D.7196, tmp207
 1479 00d6 1D4B     		ldr	r3, .L67+28	@ tmp208,
 1480 00d8 1A80     		strh	r2, [r3]	@ tmp209, secs
 1481              	.L63:
1152:src/main.c    **** 
1153:src/main.c    **** 	if (minutes > 60)
 1482              		.loc 2 1153 0
 1483 00da 1E4B     		ldr	r3, .L67+36	@ tmp210,
 1484 00dc 1B78     		ldrb	r3, [r3]	@ tmp211, minutes
 1485 00de DBB2     		uxtb	r3, r3	@ D.7197, tmp211
 1486 00e0 3C2B     		cmp	r3, #60	@ D.7197,
 1487 00e2 09D9     		bls	.L64	@,
1154:src/main.c    **** 	{
1155:src/main.c    **** 		hours++;
 1488              		.loc 2 1155 0
 1489 00e4 1C4B     		ldr	r3, .L67+40	@ tmp212,
 1490 00e6 1B78     		ldrb	r3, [r3]	@ tmp213, hours
 1491 00e8 DBB2     		uxtb	r3, r3	@ D.7197, tmp213
 1492 00ea 0133     		adds	r3, r3, #1	@ tmp214,
 1493 00ec DAB2     		uxtb	r2, r3	@ D.7197, tmp214
 1494 00ee 1A4B     		ldr	r3, .L67+40	@ tmp215,
 1495 00f0 1A70     		strb	r2, [r3]	@ tmp216, hours
1156:src/main.c    **** 		minutes = 0;
 1496              		.loc 2 1156 0
 1497 00f2 184B     		ldr	r3, .L67+36	@ tmp217,
 1498 00f4 0022     		movs	r2, #0	@ tmp218,
 1499 00f6 1A70     		strb	r2, [r3]	@ tmp219, minutes
 1500              	.L64:
1157:src/main.c    **** 	}
1158:src/main.c    **** 
1159:src/main.c    **** 
1160:src/main.c    **** #ifdef USE_MQTT_LIB
1161:src/main.c    **** 	//timer del MQTT
1162:src/main.c    **** 	SysTickIntHandler();
1163:src/main.c    **** #endif
1164:src/main.c    **** 
1165:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1166:src/main.c    **** 	if (usart1_mini_timeout)
 1501              		.loc 2 1166 0
 1502 00f8 184B     		ldr	r3, .L67+44	@ tmp220,
 1503 00fa 1B78     		ldrb	r3, [r3]	@ tmp221, usart1_mini_timeout
 1504 00fc DBB2     		uxtb	r3, r3	@ D.7197, tmp221
ARM GAS  /tmp/cc0FodwT.s 			page 66


 1505 00fe 002B     		cmp	r3, #0	@ D.7197,
 1506 0100 06D0     		beq	.L65	@,
1167:src/main.c    **** 		usart1_mini_timeout--;
 1507              		.loc 2 1167 0
 1508 0102 164B     		ldr	r3, .L67+44	@ tmp222,
 1509 0104 1B78     		ldrb	r3, [r3]	@ tmp223, usart1_mini_timeout
 1510 0106 DBB2     		uxtb	r3, r3	@ D.7197, tmp223
 1511 0108 013B     		subs	r3, r3, #1	@ tmp224,
 1512 010a DAB2     		uxtb	r2, r3	@ D.7197, tmp224
 1513 010c 134B     		ldr	r3, .L67+44	@ tmp225,
 1514 010e 1A70     		strb	r2, [r3]	@ tmp226, usart1_mini_timeout
 1515              	.L65:
1168:src/main.c    **** 	if (usart2_mini_timeout)
 1516              		.loc 2 1168 0
 1517 0110 134B     		ldr	r3, .L67+48	@ tmp227,
 1518 0112 1B78     		ldrb	r3, [r3]	@ tmp228, usart2_mini_timeout
 1519 0114 DBB2     		uxtb	r3, r3	@ D.7197, tmp228
 1520 0116 002B     		cmp	r3, #0	@ D.7197,
 1521 0118 06D0     		beq	.L66	@,
1169:src/main.c    **** 		usart2_mini_timeout--;
 1522              		.loc 2 1169 0
 1523 011a 114B     		ldr	r3, .L67+48	@ tmp229,
 1524 011c 1B78     		ldrb	r3, [r3]	@ tmp230, usart2_mini_timeout
 1525 011e DBB2     		uxtb	r3, r3	@ D.7197, tmp230
 1526 0120 013B     		subs	r3, r3, #1	@ tmp231,
 1527 0122 DAB2     		uxtb	r2, r3	@ D.7197, tmp231
 1528 0124 0E4B     		ldr	r3, .L67+48	@ tmp232,
 1529 0126 1A70     		strb	r2, [r3]	@ tmp233, usart2_mini_timeout
 1530              	.L66:
1170:src/main.c    **** #endif
1171:src/main.c    **** #ifdef USE_GPS
1172:src/main.c    **** 	GPSTimeoutCounters ();
1173:src/main.c    **** #endif
1174:src/main.c    **** 
1175:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1176:src/main.c    **** 	GSMTimeoutCounters ();
 1531              		.loc 2 1176 0
 1532 0128 FFF7FEFF 		bl	GSMTimeoutCounters	@
1177:src/main.c    **** #endif
1178:src/main.c    **** }
 1533              		.loc 2 1178 0
 1534 012c C046     		nop
 1535              		@ sp needed	@
 1536 012e 10BD     		pop	{r4, pc}
 1537              	.L68:
 1538              		.align	2
 1539              	.L67:
 1540 0130 00000000 		.word	wait_ms_var
 1541 0134 00000000 		.word	timer_standby
 1542 0138 00000000 		.word	acswitch_timer
 1543 013c 00000000 		.word	tt_take_photo_sample
 1544 0140 00000000 		.word	tt_relay_on_off
 1545 0144 00000000 		.word	take_temp_sample
 1546 0148 00000000 		.word	filter_timer
 1547 014c 00000000 		.word	secs
 1548 0150 5FEA0000 		.word	59999
 1549 0154 00000000 		.word	minutes
ARM GAS  /tmp/cc0FodwT.s 			page 67


 1550 0158 00000000 		.word	hours
 1551 015c 00000000 		.word	usart1_mini_timeout
 1552 0160 00000000 		.word	usart2_mini_timeout
 1553              		.cfi_endproc
 1554              	.LFE22:
 1555              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1556              		.text
 1557              	.Letext0:
 1558              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1559              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1560              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1561              		.file 6 "src/hard.h"
 1562              		.file 7 "src/flash_program.h"
 1563              		.file 8 "src/tcp_transceiver.h"
 1564              		.section	.debug_info,"",%progbits
 1565              	.Ldebug_info0:
 1566 0000 E10D0000 		.4byte	0xde1
 1567 0004 0200     		.2byte	0x2
 1568 0006 00000000 		.4byte	.Ldebug_abbrev0
 1569 000a 04       		.byte	0x4
 1570 000b 01       		.uleb128 0x1
 1571 000c E5080000 		.4byte	.LASF197
 1572 0010 0C       		.byte	0xc
 1573 0011 B2080000 		.4byte	.LASF198
 1574 0015 2B070000 		.4byte	.LASF199
 1575 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1576 001d 00000000 		.4byte	0
 1577 0021 00000000 		.4byte	0
 1578 0025 00000000 		.4byte	.Ldebug_line0
 1579 0029 02       		.uleb128 0x2
 1580 002a 8C050000 		.4byte	.LASF109
 1581 002e 01       		.byte	0x1
 1582 002f 06010000 		.4byte	0x106
 1583 0033 03       		.byte	0x3
 1584 0034 C7       		.byte	0xc7
 1585 0035 06010000 		.4byte	0x106
 1586 0039 03       		.uleb128 0x3
 1587 003a 16060000 		.4byte	.LASF0
 1588 003e 72       		.sleb128 -14
 1589 003f 03       		.uleb128 0x3
 1590 0040 A6090000 		.4byte	.LASF1
 1591 0044 73       		.sleb128 -13
 1592 0045 03       		.uleb128 0x3
 1593 0046 D3000000 		.4byte	.LASF2
 1594 004a 7B       		.sleb128 -5
 1595 004b 03       		.uleb128 0x3
 1596 004c B2010000 		.4byte	.LASF3
 1597 0050 7E       		.sleb128 -2
 1598 0051 03       		.uleb128 0x3
 1599 0052 D2060000 		.4byte	.LASF4
 1600 0056 7F       		.sleb128 -1
 1601 0057 04       		.uleb128 0x4
 1602 0058 37040000 		.4byte	.LASF5
 1603 005c 00       		.byte	0
 1604 005d 04       		.uleb128 0x4
 1605 005e F7040000 		.4byte	.LASF6
 1606 0062 01       		.byte	0x1
ARM GAS  /tmp/cc0FodwT.s 			page 68


 1607 0063 04       		.uleb128 0x4
 1608 0064 BC050000 		.4byte	.LASF7
 1609 0068 02       		.byte	0x2
 1610 0069 04       		.uleb128 0x4
 1611 006a 3A010000 		.4byte	.LASF8
 1612 006e 03       		.byte	0x3
 1613 006f 04       		.uleb128 0x4
 1614 0070 CF010000 		.4byte	.LASF9
 1615 0074 04       		.byte	0x4
 1616 0075 04       		.uleb128 0x4
 1617 0076 7E010000 		.4byte	.LASF10
 1618 007a 05       		.byte	0x5
 1619 007b 04       		.uleb128 0x4
 1620 007c B0000000 		.4byte	.LASF11
 1621 0080 06       		.byte	0x6
 1622 0081 04       		.uleb128 0x4
 1623 0082 86000000 		.4byte	.LASF12
 1624 0086 07       		.byte	0x7
 1625 0087 04       		.uleb128 0x4
 1626 0088 C2040000 		.4byte	.LASF13
 1627 008c 08       		.byte	0x8
 1628 008d 04       		.uleb128 0x4
 1629 008e 7C030000 		.4byte	.LASF14
 1630 0092 09       		.byte	0x9
 1631 0093 04       		.uleb128 0x4
 1632 0094 A6070000 		.4byte	.LASF15
 1633 0098 0A       		.byte	0xa
 1634 0099 04       		.uleb128 0x4
 1635 009a 73060000 		.4byte	.LASF16
 1636 009e 0B       		.byte	0xb
 1637 009f 04       		.uleb128 0x4
 1638 00a0 1B050000 		.4byte	.LASF17
 1639 00a4 0C       		.byte	0xc
 1640 00a5 04       		.uleb128 0x4
 1641 00a6 D5040000 		.4byte	.LASF18
 1642 00aa 0D       		.byte	0xd
 1643 00ab 04       		.uleb128 0x4
 1644 00ac 33060000 		.4byte	.LASF19
 1645 00b0 0E       		.byte	0xe
 1646 00b1 04       		.uleb128 0x4
 1647 00b2 12070000 		.4byte	.LASF20
 1648 00b6 0F       		.byte	0xf
 1649 00b7 04       		.uleb128 0x4
 1650 00b8 72030000 		.4byte	.LASF21
 1651 00bc 10       		.byte	0x10
 1652 00bd 04       		.uleb128 0x4
 1653 00be C3070000 		.4byte	.LASF22
 1654 00c2 11       		.byte	0x11
 1655 00c3 04       		.uleb128 0x4
 1656 00c4 9B070000 		.4byte	.LASF23
 1657 00c8 13       		.byte	0x13
 1658 00c9 04       		.uleb128 0x4
 1659 00ca A7030000 		.4byte	.LASF24
 1660 00ce 14       		.byte	0x14
 1661 00cf 04       		.uleb128 0x4
 1662 00d0 0C010000 		.4byte	.LASF25
 1663 00d4 15       		.byte	0x15
ARM GAS  /tmp/cc0FodwT.s 			page 69


 1664 00d5 04       		.uleb128 0x4
 1665 00d6 5C060000 		.4byte	.LASF26
 1666 00da 16       		.byte	0x16
 1667 00db 04       		.uleb128 0x4
 1668 00dc A8010000 		.4byte	.LASF27
 1669 00e0 17       		.byte	0x17
 1670 00e1 04       		.uleb128 0x4
 1671 00e2 F6060000 		.4byte	.LASF28
 1672 00e6 18       		.byte	0x18
 1673 00e7 04       		.uleb128 0x4
 1674 00e8 1A020000 		.4byte	.LASF29
 1675 00ec 19       		.byte	0x19
 1676 00ed 04       		.uleb128 0x4
 1677 00ee 67080000 		.4byte	.LASF30
 1678 00f2 1A       		.byte	0x1a
 1679 00f3 04       		.uleb128 0x4
 1680 00f4 0A060000 		.4byte	.LASF31
 1681 00f8 1B       		.byte	0x1b
 1682 00f9 04       		.uleb128 0x4
 1683 00fa 9A020000 		.4byte	.LASF32
 1684 00fe 1C       		.byte	0x1c
 1685 00ff 04       		.uleb128 0x4
 1686 0100 DF060000 		.4byte	.LASF33
 1687 0104 1E       		.byte	0x1e
 1688 0105 00       		.byte	0
 1689 0106 05       		.uleb128 0x5
 1690 0107 01       		.byte	0x1
 1691 0108 06       		.byte	0x6
 1692 0109 A6080000 		.4byte	.LASF36
 1693 010d 06       		.uleb128 0x6
 1694 010e 84020000 		.4byte	.LASF34
 1695 0112 03       		.byte	0x3
 1696 0113 5F01     		.2byte	0x15f
 1697 0115 29000000 		.4byte	0x29
 1698 0119 07       		.uleb128 0x7
 1699 011a 95060000 		.4byte	.LASF35
 1700 011e 04       		.byte	0x4
 1701 011f 1D       		.byte	0x1d
 1702 0120 24010000 		.4byte	0x124
 1703 0124 05       		.uleb128 0x5
 1704 0125 01       		.byte	0x1
 1705 0126 08       		.byte	0x8
 1706 0127 D1070000 		.4byte	.LASF37
 1707 012b 05       		.uleb128 0x5
 1708 012c 02       		.byte	0x2
 1709 012d 05       		.byte	0x5
 1710 012e F7050000 		.4byte	.LASF38
 1711 0132 07       		.uleb128 0x7
 1712 0133 52020000 		.4byte	.LASF39
 1713 0137 04       		.byte	0x4
 1714 0138 2B       		.byte	0x2b
 1715 0139 3D010000 		.4byte	0x13d
 1716 013d 05       		.uleb128 0x5
 1717 013e 02       		.byte	0x2
 1718 013f 07       		.byte	0x7
 1719 0140 D2080000 		.4byte	.LASF40
 1720 0144 07       		.uleb128 0x7
ARM GAS  /tmp/cc0FodwT.s 			page 70


 1721 0145 28010000 		.4byte	.LASF41
 1722 0149 04       		.byte	0x4
 1723 014a 3F       		.byte	0x3f
 1724 014b 4F010000 		.4byte	0x14f
 1725 014f 05       		.uleb128 0x5
 1726 0150 04       		.byte	0x4
 1727 0151 05       		.byte	0x5
 1728 0152 01060000 		.4byte	.LASF42
 1729 0156 07       		.uleb128 0x7
 1730 0157 E8070000 		.4byte	.LASF43
 1731 015b 04       		.byte	0x4
 1732 015c 41       		.byte	0x41
 1733 015d 61010000 		.4byte	0x161
 1734 0161 05       		.uleb128 0x5
 1735 0162 04       		.byte	0x4
 1736 0163 07       		.byte	0x7
 1737 0164 00070000 		.4byte	.LASF44
 1738 0168 05       		.uleb128 0x5
 1739 0169 08       		.byte	0x8
 1740 016a 05       		.byte	0x5
 1741 016b 29040000 		.4byte	.LASF45
 1742 016f 05       		.uleb128 0x5
 1743 0170 08       		.byte	0x8
 1744 0171 07       		.byte	0x7
 1745 0172 24020000 		.4byte	.LASF46
 1746 0176 08       		.uleb128 0x8
 1747 0177 04       		.byte	0x4
 1748 0178 05       		.byte	0x5
 1749 0179 696E7400 		.ascii	"int\000"
 1750 017d 05       		.uleb128 0x5
 1751 017e 04       		.byte	0x4
 1752 017f 07       		.byte	0x7
 1753 0180 FA000000 		.4byte	.LASF47
 1754 0184 07       		.uleb128 0x7
 1755 0185 B2030000 		.4byte	.LASF48
 1756 0189 05       		.byte	0x5
 1757 018a 14       		.byte	0x14
 1758 018b 19010000 		.4byte	0x119
 1759 018f 07       		.uleb128 0x7
 1760 0190 74050000 		.4byte	.LASF49
 1761 0194 05       		.byte	0x5
 1762 0195 1A       		.byte	0x1a
 1763 0196 32010000 		.4byte	0x132
 1764 019a 07       		.uleb128 0x7
 1765 019b 6F070000 		.4byte	.LASF50
 1766 019f 05       		.byte	0x5
 1767 01a0 1F       		.byte	0x1f
 1768 01a1 44010000 		.4byte	0x144
 1769 01a5 07       		.uleb128 0x7
 1770 01a6 E7010000 		.4byte	.LASF51
 1771 01aa 05       		.byte	0x5
 1772 01ab 20       		.byte	0x20
 1773 01ac 56010000 		.4byte	0x156
 1774 01b0 09       		.uleb128 0x9
 1775 01b1 2003     		.2byte	0x320
 1776 01b3 01       		.byte	0x1
 1777 01b4 71       		.byte	0x71
ARM GAS  /tmp/cc0FodwT.s 			page 71


 1778 01b5 4D020000 		.4byte	0x24d
 1779 01b9 0A       		.uleb128 0xa
 1780 01ba F0010000 		.4byte	.LASF52
 1781 01be 01       		.byte	0x1
 1782 01bf 73       		.byte	0x73
 1783 01c0 64020000 		.4byte	0x264
 1784 01c4 02       		.byte	0x2
 1785 01c5 23       		.byte	0x23
 1786 01c6 00       		.uleb128 0
 1787 01c7 0A       		.uleb128 0xa
 1788 01c8 C5050000 		.4byte	.LASF53
 1789 01cc 01       		.byte	0x1
 1790 01cd 74       		.byte	0x74
 1791 01ce 69020000 		.4byte	0x269
 1792 01d2 02       		.byte	0x2
 1793 01d3 23       		.byte	0x23
 1794 01d4 04       		.uleb128 0x4
 1795 01d5 0A       		.uleb128 0xa
 1796 01d6 57080000 		.4byte	.LASF54
 1797 01da 01       		.byte	0x1
 1798 01db 75       		.byte	0x75
 1799 01dc 79020000 		.4byte	0x279
 1800 01e0 03       		.byte	0x3
 1801 01e1 23       		.byte	0x23
 1802 01e2 8001     		.uleb128 0x80
 1803 01e4 0A       		.uleb128 0xa
 1804 01e5 11020000 		.4byte	.LASF55
 1805 01e9 01       		.byte	0x1
 1806 01ea 76       		.byte	0x76
 1807 01eb 69020000 		.4byte	0x269
 1808 01ef 03       		.byte	0x3
 1809 01f0 23       		.byte	0x23
 1810 01f1 8401     		.uleb128 0x84
 1811 01f3 0A       		.uleb128 0xa
 1812 01f4 C9090000 		.4byte	.LASF56
 1813 01f8 01       		.byte	0x1
 1814 01f9 77       		.byte	0x77
 1815 01fa 7E020000 		.4byte	0x27e
 1816 01fe 03       		.byte	0x3
 1817 01ff 23       		.byte	0x23
 1818 0200 8002     		.uleb128 0x100
 1819 0202 0A       		.uleb128 0xa
 1820 0203 D9050000 		.4byte	.LASF57
 1821 0207 01       		.byte	0x1
 1822 0208 78       		.byte	0x78
 1823 0209 69020000 		.4byte	0x269
 1824 020d 03       		.byte	0x3
 1825 020e 23       		.byte	0x23
 1826 020f 8402     		.uleb128 0x104
 1827 0211 0A       		.uleb128 0xa
 1828 0212 16050000 		.4byte	.LASF58
 1829 0216 01       		.byte	0x1
 1830 0217 79       		.byte	0x79
 1831 0218 83020000 		.4byte	0x283
 1832 021c 03       		.byte	0x3
 1833 021d 23       		.byte	0x23
 1834 021e 8003     		.uleb128 0x180
ARM GAS  /tmp/cc0FodwT.s 			page 72


 1835 0220 0A       		.uleb128 0xa
 1836 0221 E3050000 		.4byte	.LASF59
 1837 0225 01       		.byte	0x1
 1838 0226 7A       		.byte	0x7a
 1839 0227 69020000 		.4byte	0x269
 1840 022b 03       		.byte	0x3
 1841 022c 23       		.byte	0x23
 1842 022d 8403     		.uleb128 0x184
 1843 022f 0A       		.uleb128 0xa
 1844 0230 ED050000 		.4byte	.LASF60
 1845 0234 01       		.byte	0x1
 1846 0235 7B       		.byte	0x7b
 1847 0236 88020000 		.4byte	0x288
 1848 023a 03       		.byte	0x3
 1849 023b 23       		.byte	0x23
 1850 023c 8004     		.uleb128 0x200
 1851 023e 0B       		.uleb128 0xb
 1852 023f 495000   		.ascii	"IP\000"
 1853 0242 01       		.byte	0x1
 1854 0243 7C       		.byte	0x7c
 1855 0244 A8020000 		.4byte	0x2a8
 1856 0248 03       		.byte	0x3
 1857 0249 23       		.byte	0x23
 1858 024a 8006     		.uleb128 0x300
 1859 024c 00       		.byte	0
 1860 024d 0C       		.uleb128 0xc
 1861 024e A5010000 		.4byte	0x1a5
 1862 0252 5D020000 		.4byte	0x25d
 1863 0256 0D       		.uleb128 0xd
 1864 0257 5D020000 		.4byte	0x25d
 1865 025b 00       		.byte	0
 1866 025c 00       		.byte	0
 1867 025d 05       		.uleb128 0x5
 1868 025e 04       		.byte	0x4
 1869 025f 07       		.byte	0x7
 1870 0260 E8060000 		.4byte	.LASF61
 1871 0264 0E       		.uleb128 0xe
 1872 0265 4D020000 		.4byte	0x24d
 1873 0269 0C       		.uleb128 0xc
 1874 026a A5010000 		.4byte	0x1a5
 1875 026e 79020000 		.4byte	0x279
 1876 0272 0D       		.uleb128 0xd
 1877 0273 5D020000 		.4byte	0x25d
 1878 0277 1E       		.byte	0x1e
 1879 0278 00       		.byte	0
 1880 0279 0E       		.uleb128 0xe
 1881 027a 4D020000 		.4byte	0x24d
 1882 027e 0E       		.uleb128 0xe
 1883 027f 4D020000 		.4byte	0x24d
 1884 0283 0E       		.uleb128 0xe
 1885 0284 4D020000 		.4byte	0x24d
 1886 0288 0C       		.uleb128 0xc
 1887 0289 A5010000 		.4byte	0x1a5
 1888 028d 98020000 		.4byte	0x298
 1889 0291 0D       		.uleb128 0xd
 1890 0292 5D020000 		.4byte	0x25d
 1891 0296 3F       		.byte	0x3f
ARM GAS  /tmp/cc0FodwT.s 			page 73


 1892 0297 00       		.byte	0
 1893 0298 0C       		.uleb128 0xc
 1894 0299 A5010000 		.4byte	0x1a5
 1895 029d A8020000 		.4byte	0x2a8
 1896 02a1 0D       		.uleb128 0xd
 1897 02a2 5D020000 		.4byte	0x25d
 1898 02a6 07       		.byte	0x7
 1899 02a7 00       		.byte	0
 1900 02a8 0E       		.uleb128 0xe
 1901 02a9 98020000 		.4byte	0x298
 1902 02ad 07       		.uleb128 0x7
 1903 02ae AB060000 		.4byte	.LASF62
 1904 02b2 01       		.byte	0x1
 1905 02b3 7D       		.byte	0x7d
 1906 02b4 B0010000 		.4byte	0x1b0
 1907 02b8 0F       		.uleb128 0xf
 1908 02b9 34       		.byte	0x34
 1909 02ba 01       		.byte	0x1
 1910 02bb 86       		.byte	0x86
 1911 02bc 5B030000 		.4byte	0x35b
 1912 02c0 0A       		.uleb128 0xa
 1913 02c1 A6020000 		.4byte	.LASF63
 1914 02c5 01       		.byte	0x1
 1915 02c6 88       		.byte	0x88
 1916 02c7 60030000 		.4byte	0x360
 1917 02cb 02       		.byte	0x2
 1918 02cc 23       		.byte	0x23
 1919 02cd 00       		.uleb128 0
 1920 02ce 0A       		.uleb128 0xa
 1921 02cf F1060000 		.4byte	.LASF64
 1922 02d3 01       		.byte	0x1
 1923 02d4 89       		.byte	0x89
 1924 02d5 5B030000 		.4byte	0x35b
 1925 02d9 02       		.byte	0x2
 1926 02da 23       		.byte	0x23
 1927 02db 04       		.uleb128 0x4
 1928 02dc 0A       		.uleb128 0xa
 1929 02dd C5050000 		.4byte	.LASF53
 1930 02e1 01       		.byte	0x1
 1931 02e2 8A       		.byte	0x8a
 1932 02e3 A5010000 		.4byte	0x1a5
 1933 02e7 02       		.byte	0x2
 1934 02e8 23       		.byte	0x23
 1935 02e9 08       		.uleb128 0x8
 1936 02ea 0A       		.uleb128 0xa
 1937 02eb 5B030000 		.4byte	.LASF65
 1938 02ef 01       		.byte	0x1
 1939 02f0 8B       		.byte	0x8b
 1940 02f1 5B030000 		.4byte	0x35b
 1941 02f5 02       		.byte	0x2
 1942 02f6 23       		.byte	0x23
 1943 02f7 0C       		.uleb128 0xc
 1944 02f8 0B       		.uleb128 0xb
 1945 02f9 53435200 		.ascii	"SCR\000"
 1946 02fd 01       		.byte	0x1
 1947 02fe 8C       		.byte	0x8c
 1948 02ff 5B030000 		.4byte	0x35b
ARM GAS  /tmp/cc0FodwT.s 			page 74


 1949 0303 02       		.byte	0x2
 1950 0304 23       		.byte	0x23
 1951 0305 10       		.uleb128 0x10
 1952 0306 0B       		.uleb128 0xb
 1953 0307 43435200 		.ascii	"CCR\000"
 1954 030b 01       		.byte	0x1
 1955 030c 8D       		.byte	0x8d
 1956 030d 5B030000 		.4byte	0x35b
 1957 0311 02       		.byte	0x2
 1958 0312 23       		.byte	0x23
 1959 0313 14       		.uleb128 0x14
 1960 0314 0A       		.uleb128 0xa
 1961 0315 CF050000 		.4byte	.LASF66
 1962 0319 01       		.byte	0x1
 1963 031a 8E       		.byte	0x8e
 1964 031b A5010000 		.4byte	0x1a5
 1965 031f 02       		.byte	0x2
 1966 0320 23       		.byte	0x23
 1967 0321 18       		.uleb128 0x18
 1968 0322 0B       		.uleb128 0xb
 1969 0323 53485000 		.ascii	"SHP\000"
 1970 0327 01       		.byte	0x1
 1971 0328 8F       		.byte	0x8f
 1972 0329 75030000 		.4byte	0x375
 1973 032d 02       		.byte	0x2
 1974 032e 23       		.byte	0x23
 1975 032f 1C       		.uleb128 0x1c
 1976 0330 0A       		.uleb128 0xa
 1977 0331 41040000 		.4byte	.LASF67
 1978 0335 01       		.byte	0x1
 1979 0336 90       		.byte	0x90
 1980 0337 5B030000 		.4byte	0x35b
 1981 033b 02       		.byte	0x2
 1982 033c 23       		.byte	0x23
 1983 033d 24       		.uleb128 0x24
 1984 033e 0A       		.uleb128 0xa
 1985 033f D9050000 		.4byte	.LASF57
 1986 0343 01       		.byte	0x1
 1987 0344 91       		.byte	0x91
 1988 0345 65030000 		.4byte	0x365
 1989 0349 02       		.byte	0x2
 1990 034a 23       		.byte	0x23
 1991 034b 28       		.uleb128 0x28
 1992 034c 0A       		.uleb128 0xa
 1993 034d 3B020000 		.4byte	.LASF68
 1994 0351 01       		.byte	0x1
 1995 0352 92       		.byte	0x92
 1996 0353 5B030000 		.4byte	0x35b
 1997 0357 02       		.byte	0x2
 1998 0358 23       		.byte	0x23
 1999 0359 30       		.uleb128 0x30
 2000 035a 00       		.byte	0
 2001 035b 0E       		.uleb128 0xe
 2002 035c A5010000 		.4byte	0x1a5
 2003 0360 10       		.uleb128 0x10
 2004 0361 5B030000 		.4byte	0x35b
 2005 0365 0C       		.uleb128 0xc
ARM GAS  /tmp/cc0FodwT.s 			page 75


 2006 0366 A5010000 		.4byte	0x1a5
 2007 036a 75030000 		.4byte	0x375
 2008 036e 0D       		.uleb128 0xd
 2009 036f 5D020000 		.4byte	0x25d
 2010 0373 01       		.byte	0x1
 2011 0374 00       		.byte	0
 2012 0375 0E       		.uleb128 0xe
 2013 0376 65030000 		.4byte	0x365
 2014 037a 07       		.uleb128 0x7
 2015 037b B5060000 		.4byte	.LASF69
 2016 037f 01       		.byte	0x1
 2017 0380 93       		.byte	0x93
 2018 0381 B8020000 		.4byte	0x2b8
 2019 0385 0F       		.uleb128 0xf
 2020 0386 10       		.byte	0x10
 2021 0387 01       		.byte	0x1
 2022 0388 FC       		.byte	0xfc
 2023 0389 C8030000 		.4byte	0x3c8
 2024 038d 0A       		.uleb128 0xa
 2025 038e 110A0000 		.4byte	.LASF70
 2026 0392 01       		.byte	0x1
 2027 0393 FE       		.byte	0xfe
 2028 0394 5B030000 		.4byte	0x35b
 2029 0398 02       		.byte	0x2
 2030 0399 23       		.byte	0x23
 2031 039a 00       		.uleb128 0
 2032 039b 0A       		.uleb128 0xa
 2033 039c 07010000 		.4byte	.LASF71
 2034 03a0 01       		.byte	0x1
 2035 03a1 FF       		.byte	0xff
 2036 03a2 5B030000 		.4byte	0x35b
 2037 03a6 02       		.byte	0x2
 2038 03a7 23       		.byte	0x23
 2039 03a8 04       		.uleb128 0x4
 2040 03a9 11       		.uleb128 0x11
 2041 03aa 56414C00 		.ascii	"VAL\000"
 2042 03ae 01       		.byte	0x1
 2043 03af 0001     		.2byte	0x100
 2044 03b1 5B030000 		.4byte	0x35b
 2045 03b5 02       		.byte	0x2
 2046 03b6 23       		.byte	0x23
 2047 03b7 08       		.uleb128 0x8
 2048 03b8 12       		.uleb128 0x12
 2049 03b9 5E010000 		.4byte	.LASF72
 2050 03bd 01       		.byte	0x1
 2051 03be 0101     		.2byte	0x101
 2052 03c0 60030000 		.4byte	0x360
 2053 03c4 02       		.byte	0x2
 2054 03c5 23       		.byte	0x23
 2055 03c6 0C       		.uleb128 0xc
 2056 03c7 00       		.byte	0
 2057 03c8 06       		.uleb128 0x6
 2058 03c9 5B050000 		.4byte	.LASF73
 2059 03cd 01       		.byte	0x1
 2060 03ce 0201     		.2byte	0x102
 2061 03d0 85030000 		.4byte	0x385
 2062 03d4 13       		.uleb128 0x13
ARM GAS  /tmp/cc0FodwT.s 			page 76


 2063 03d5 44       		.byte	0x44
 2064 03d6 03       		.byte	0x3
 2065 03d7 7C01     		.2byte	0x17c
 2066 03d9 9E040000 		.4byte	0x49e
 2067 03dd 11       		.uleb128 0x11
 2068 03de 49535200 		.ascii	"ISR\000"
 2069 03e2 03       		.byte	0x3
 2070 03e3 7E01     		.2byte	0x17e
 2071 03e5 5B030000 		.4byte	0x35b
 2072 03e9 02       		.byte	0x2
 2073 03ea 23       		.byte	0x23
 2074 03eb 00       		.uleb128 0
 2075 03ec 11       		.uleb128 0x11
 2076 03ed 49455200 		.ascii	"IER\000"
 2077 03f1 03       		.byte	0x3
 2078 03f2 7F01     		.2byte	0x17f
 2079 03f4 5B030000 		.4byte	0x35b
 2080 03f8 02       		.byte	0x2
 2081 03f9 23       		.byte	0x23
 2082 03fa 04       		.uleb128 0x4
 2083 03fb 11       		.uleb128 0x11
 2084 03fc 435200   		.ascii	"CR\000"
 2085 03ff 03       		.byte	0x3
 2086 0400 8001     		.2byte	0x180
 2087 0402 5B030000 		.4byte	0x35b
 2088 0406 02       		.byte	0x2
 2089 0407 23       		.byte	0x23
 2090 0408 08       		.uleb128 0x8
 2091 0409 12       		.uleb128 0x12
 2092 040a 00050000 		.4byte	.LASF74
 2093 040e 03       		.byte	0x3
 2094 040f 8101     		.2byte	0x181
 2095 0411 5B030000 		.4byte	0x35b
 2096 0415 02       		.byte	0x2
 2097 0416 23       		.byte	0x23
 2098 0417 0C       		.uleb128 0xc
 2099 0418 12       		.uleb128 0x12
 2100 0419 06050000 		.4byte	.LASF75
 2101 041d 03       		.byte	0x3
 2102 041e 8201     		.2byte	0x182
 2103 0420 5B030000 		.4byte	0x35b
 2104 0424 02       		.byte	0x2
 2105 0425 23       		.byte	0x23
 2106 0426 10       		.uleb128 0x10
 2107 0427 12       		.uleb128 0x12
 2108 0428 D0020000 		.4byte	.LASF76
 2109 042c 03       		.byte	0x3
 2110 042d 8301     		.2byte	0x183
 2111 042f 5B030000 		.4byte	0x35b
 2112 0433 02       		.byte	0x2
 2113 0434 23       		.byte	0x23
 2114 0435 14       		.uleb128 0x14
 2115 0436 12       		.uleb128 0x12
 2116 0437 CF050000 		.4byte	.LASF66
 2117 043b 03       		.byte	0x3
 2118 043c 8401     		.2byte	0x184
 2119 043e A5010000 		.4byte	0x1a5
ARM GAS  /tmp/cc0FodwT.s 			page 77


 2120 0442 02       		.byte	0x2
 2121 0443 23       		.byte	0x23
 2122 0444 18       		.uleb128 0x18
 2123 0445 12       		.uleb128 0x12
 2124 0446 D9050000 		.4byte	.LASF57
 2125 044a 03       		.byte	0x3
 2126 044b 8501     		.2byte	0x185
 2127 044d A5010000 		.4byte	0x1a5
 2128 0451 02       		.byte	0x2
 2129 0452 23       		.byte	0x23
 2130 0453 1C       		.uleb128 0x1c
 2131 0454 11       		.uleb128 0x11
 2132 0455 545200   		.ascii	"TR\000"
 2133 0458 03       		.byte	0x3
 2134 0459 8601     		.2byte	0x186
 2135 045b 5B030000 		.4byte	0x35b
 2136 045f 02       		.byte	0x2
 2137 0460 23       		.byte	0x23
 2138 0461 20       		.uleb128 0x20
 2139 0462 12       		.uleb128 0x12
 2140 0463 E3050000 		.4byte	.LASF59
 2141 0467 03       		.byte	0x3
 2142 0468 8701     		.2byte	0x187
 2143 046a A5010000 		.4byte	0x1a5
 2144 046e 02       		.byte	0x2
 2145 046f 23       		.byte	0x23
 2146 0470 24       		.uleb128 0x24
 2147 0471 12       		.uleb128 0x12
 2148 0472 6B020000 		.4byte	.LASF77
 2149 0476 03       		.byte	0x3
 2150 0477 8801     		.2byte	0x188
 2151 0479 5B030000 		.4byte	0x35b
 2152 047d 02       		.byte	0x2
 2153 047e 23       		.byte	0x23
 2154 047f 28       		.uleb128 0x28
 2155 0480 12       		.uleb128 0x12
 2156 0481 ED050000 		.4byte	.LASF60
 2157 0485 03       		.byte	0x3
 2158 0486 8901     		.2byte	0x189
 2159 0488 9E040000 		.4byte	0x49e
 2160 048c 02       		.byte	0x2
 2161 048d 23       		.byte	0x23
 2162 048e 2C       		.uleb128 0x2c
 2163 048f 11       		.uleb128 0x11
 2164 0490 445200   		.ascii	"DR\000"
 2165 0493 03       		.byte	0x3
 2166 0494 8A01     		.2byte	0x18a
 2167 0496 5B030000 		.4byte	0x35b
 2168 049a 02       		.byte	0x2
 2169 049b 23       		.byte	0x23
 2170 049c 40       		.uleb128 0x40
 2171 049d 00       		.byte	0
 2172 049e 0C       		.uleb128 0xc
 2173 049f A5010000 		.4byte	0x1a5
 2174 04a3 AE040000 		.4byte	0x4ae
 2175 04a7 0D       		.uleb128 0xd
 2176 04a8 5D020000 		.4byte	0x25d
ARM GAS  /tmp/cc0FodwT.s 			page 78


 2177 04ac 04       		.byte	0x4
 2178 04ad 00       		.byte	0
 2179 04ae 06       		.uleb128 0x6
 2180 04af 1D040000 		.4byte	.LASF78
 2181 04b3 03       		.byte	0x3
 2182 04b4 8B01     		.2byte	0x18b
 2183 04b6 D4030000 		.4byte	0x3d4
 2184 04ba 0E       		.uleb128 0xe
 2185 04bb 8F010000 		.4byte	0x18f
 2186 04bf 13       		.uleb128 0x13
 2187 04c0 2C       		.byte	0x2c
 2188 04c1 03       		.byte	0x3
 2189 04c2 6902     		.2byte	0x269
 2190 04c4 9B050000 		.4byte	0x59b
 2191 04c8 12       		.uleb128 0x12
 2192 04c9 65020000 		.4byte	.LASF79
 2193 04cd 03       		.byte	0x3
 2194 04ce 6B02     		.2byte	0x26b
 2195 04d0 5B030000 		.4byte	0x35b
 2196 04d4 02       		.byte	0x2
 2197 04d5 23       		.byte	0x23
 2198 04d6 00       		.uleb128 0
 2199 04d7 12       		.uleb128 0x12
 2200 04d8 40060000 		.4byte	.LASF80
 2201 04dc 03       		.byte	0x3
 2202 04dd 6C02     		.2byte	0x26c
 2203 04df BA040000 		.4byte	0x4ba
 2204 04e3 02       		.byte	0x2
 2205 04e4 23       		.byte	0x23
 2206 04e5 04       		.uleb128 0x4
 2207 04e6 12       		.uleb128 0x12
 2208 04e7 C5050000 		.4byte	.LASF53
 2209 04eb 03       		.byte	0x3
 2210 04ec 6D02     		.2byte	0x26d
 2211 04ee 8F010000 		.4byte	0x18f
 2212 04f2 02       		.byte	0x2
 2213 04f3 23       		.byte	0x23
 2214 04f4 06       		.uleb128 0x6
 2215 04f5 12       		.uleb128 0x12
 2216 04f6 53050000 		.4byte	.LASF81
 2217 04fa 03       		.byte	0x3
 2218 04fb 6E02     		.2byte	0x26e
 2219 04fd 5B030000 		.4byte	0x35b
 2220 0501 02       		.byte	0x2
 2221 0502 23       		.byte	0x23
 2222 0503 08       		.uleb128 0x8
 2223 0504 12       		.uleb128 0x12
 2224 0505 0E030000 		.4byte	.LASF82
 2225 0509 03       		.byte	0x3
 2226 050a 6F02     		.2byte	0x26f
 2227 050c 5B030000 		.4byte	0x35b
 2228 0510 02       		.byte	0x2
 2229 0511 23       		.byte	0x23
 2230 0512 0C       		.uleb128 0xc
 2231 0513 11       		.uleb128 0x11
 2232 0514 49445200 		.ascii	"IDR\000"
 2233 0518 03       		.byte	0x3
ARM GAS  /tmp/cc0FodwT.s 			page 79


 2234 0519 7002     		.2byte	0x270
 2235 051b BA040000 		.4byte	0x4ba
 2236 051f 02       		.byte	0x2
 2237 0520 23       		.byte	0x23
 2238 0521 10       		.uleb128 0x10
 2239 0522 12       		.uleb128 0x12
 2240 0523 CF050000 		.4byte	.LASF66
 2241 0527 03       		.byte	0x3
 2242 0528 7102     		.2byte	0x271
 2243 052a 8F010000 		.4byte	0x18f
 2244 052e 02       		.byte	0x2
 2245 052f 23       		.byte	0x23
 2246 0530 12       		.uleb128 0x12
 2247 0531 11       		.uleb128 0x11
 2248 0532 4F445200 		.ascii	"ODR\000"
 2249 0536 03       		.byte	0x3
 2250 0537 7202     		.2byte	0x272
 2251 0539 BA040000 		.4byte	0x4ba
 2252 053d 02       		.byte	0x2
 2253 053e 23       		.byte	0x23
 2254 053f 14       		.uleb128 0x14
 2255 0540 12       		.uleb128 0x12
 2256 0541 D9050000 		.4byte	.LASF57
 2257 0545 03       		.byte	0x3
 2258 0546 7302     		.2byte	0x273
 2259 0548 8F010000 		.4byte	0x18f
 2260 054c 02       		.byte	0x2
 2261 054d 23       		.byte	0x23
 2262 054e 16       		.uleb128 0x16
 2263 054f 12       		.uleb128 0x12
 2264 0550 94000000 		.4byte	.LASF83
 2265 0554 03       		.byte	0x3
 2266 0555 7402     		.2byte	0x274
 2267 0557 5B030000 		.4byte	0x35b
 2268 055b 02       		.byte	0x2
 2269 055c 23       		.byte	0x23
 2270 055d 18       		.uleb128 0x18
 2271 055e 12       		.uleb128 0x12
 2272 055f 0C0A0000 		.4byte	.LASF84
 2273 0563 03       		.byte	0x3
 2274 0564 7502     		.2byte	0x275
 2275 0566 5B030000 		.4byte	0x35b
 2276 056a 02       		.byte	0x2
 2277 056b 23       		.byte	0x23
 2278 056c 1C       		.uleb128 0x1c
 2279 056d 11       		.uleb128 0x11
 2280 056e 41465200 		.ascii	"AFR\000"
 2281 0572 03       		.byte	0x3
 2282 0573 7602     		.2byte	0x276
 2283 0575 9B050000 		.4byte	0x59b
 2284 0579 02       		.byte	0x2
 2285 057a 23       		.byte	0x23
 2286 057b 20       		.uleb128 0x20
 2287 057c 11       		.uleb128 0x11
 2288 057d 42525200 		.ascii	"BRR\000"
 2289 0581 03       		.byte	0x3
 2290 0582 7702     		.2byte	0x277
ARM GAS  /tmp/cc0FodwT.s 			page 80


 2291 0584 BA040000 		.4byte	0x4ba
 2292 0588 02       		.byte	0x2
 2293 0589 23       		.byte	0x23
 2294 058a 28       		.uleb128 0x28
 2295 058b 12       		.uleb128 0x12
 2296 058c E3050000 		.4byte	.LASF59
 2297 0590 03       		.byte	0x3
 2298 0591 7802     		.2byte	0x278
 2299 0593 8F010000 		.4byte	0x18f
 2300 0597 02       		.byte	0x2
 2301 0598 23       		.byte	0x23
 2302 0599 2A       		.uleb128 0x2a
 2303 059a 00       		.byte	0
 2304 059b 0E       		.uleb128 0xe
 2305 059c 65030000 		.4byte	0x365
 2306 05a0 06       		.uleb128 0x6
 2307 05a1 BE060000 		.4byte	.LASF85
 2308 05a5 03       		.byte	0x3
 2309 05a6 7902     		.2byte	0x279
 2310 05a8 BF040000 		.4byte	0x4bf
 2311 05ac 05       		.uleb128 0x5
 2312 05ad 08       		.byte	0x8
 2313 05ae 04       		.byte	0x4
 2314 05af 68050000 		.4byte	.LASF86
 2315 05b3 05       		.uleb128 0x5
 2316 05b4 01       		.byte	0x1
 2317 05b5 08       		.byte	0x8
 2318 05b6 3A030000 		.4byte	.LASF87
 2319 05ba 0C       		.uleb128 0xc
 2320 05bb 3D010000 		.4byte	0x13d
 2321 05bf CA050000 		.4byte	0x5ca
 2322 05c3 0D       		.uleb128 0xd
 2323 05c4 5D020000 		.4byte	0x25d
 2324 05c8 02       		.byte	0x2
 2325 05c9 00       		.byte	0
 2326 05ca 14       		.uleb128 0x14
 2327 05cb 01       		.byte	0x1
 2328 05cc 24010000 		.4byte	0x124
 2329 05d0 06       		.byte	0x6
 2330 05d1 B9       		.byte	0xb9
 2331 05d2 07060000 		.4byte	0x607
 2332 05d6 04       		.uleb128 0x4
 2333 05d7 94040000 		.4byte	.LASF88
 2334 05db 00       		.byte	0
 2335 05dc 04       		.uleb128 0x4
 2336 05dd 67060000 		.4byte	.LASF89
 2337 05e1 01       		.byte	0x1
 2338 05e2 04       		.uleb128 0x4
 2339 05e3 EC020000 		.4byte	.LASF90
 2340 05e7 02       		.byte	0x2
 2341 05e8 04       		.uleb128 0x4
 2342 05e9 DF070000 		.4byte	.LASF91
 2343 05ed 03       		.byte	0x3
 2344 05ee 04       		.uleb128 0x4
 2345 05ef 5B040000 		.4byte	.LASF92
 2346 05f3 04       		.byte	0x4
 2347 05f4 04       		.uleb128 0x4
ARM GAS  /tmp/cc0FodwT.s 			page 81


 2348 05f5 9E040000 		.4byte	.LASF93
 2349 05f9 05       		.byte	0x5
 2350 05fa 04       		.uleb128 0x4
 2351 05fb BA030000 		.4byte	.LASF94
 2352 05ff 06       		.byte	0x6
 2353 0600 04       		.uleb128 0x4
 2354 0601 15040000 		.4byte	.LASF95
 2355 0605 07       		.byte	0x7
 2356 0606 00       		.byte	0
 2357 0607 07       		.uleb128 0x7
 2358 0608 9A030000 		.4byte	.LASF96
 2359 060c 06       		.byte	0x6
 2360 060d C5       		.byte	0xc5
 2361 060e CA050000 		.4byte	0x5ca
 2362 0612 15       		.uleb128 0x15
 2363 0613 7D040000 		.4byte	.LASF200
 2364 0617 0C       		.byte	0xc
 2365 0618 07       		.byte	0x7
 2366 0619 34       		.byte	0x34
 2367 061a B9060000 		.4byte	0x6b9
 2368 061e 0A       		.uleb128 0xa
 2369 061f 99000000 		.4byte	.LASF97
 2370 0623 07       		.byte	0x7
 2371 0624 36       		.byte	0x36
 2372 0625 24010000 		.4byte	0x124
 2373 0629 02       		.byte	0x2
 2374 062a 23       		.byte	0x23
 2375 062b 00       		.uleb128 0
 2376 062c 0A       		.uleb128 0xa
 2377 062d 08080000 		.4byte	.LASF98
 2378 0631 07       		.byte	0x7
 2379 0632 38       		.byte	0x38
 2380 0633 24010000 		.4byte	0x124
 2381 0637 02       		.byte	0x2
 2382 0638 23       		.byte	0x23
 2383 0639 01       		.uleb128 0x1
 2384 063a 0A       		.uleb128 0xa
 2385 063b 6B000000 		.4byte	.LASF99
 2386 063f 07       		.byte	0x7
 2387 0640 39       		.byte	0x39
 2388 0641 24010000 		.4byte	0x124
 2389 0645 02       		.byte	0x2
 2390 0646 23       		.byte	0x23
 2391 0647 02       		.uleb128 0x2
 2392 0648 0A       		.uleb128 0xa
 2393 0649 58010000 		.4byte	.LASF100
 2394 064d 07       		.byte	0x7
 2395 064e 3A       		.byte	0x3a
 2396 064f 24010000 		.4byte	0x124
 2397 0653 02       		.byte	0x2
 2398 0654 23       		.byte	0x23
 2399 0655 03       		.uleb128 0x3
 2400 0656 0A       		.uleb128 0xa
 2401 0657 91050000 		.4byte	.LASF101
 2402 065b 07       		.byte	0x7
 2403 065c 3C       		.byte	0x3c
 2404 065d 3D010000 		.4byte	0x13d
ARM GAS  /tmp/cc0FodwT.s 			page 82


 2405 0661 02       		.byte	0x2
 2406 0662 23       		.byte	0x23
 2407 0663 04       		.uleb128 0x4
 2408 0664 0A       		.uleb128 0xa
 2409 0665 2C030000 		.4byte	.LASF102
 2410 0669 07       		.byte	0x7
 2411 066a 3D       		.byte	0x3d
 2412 066b 24010000 		.4byte	0x124
 2413 066f 02       		.byte	0x2
 2414 0670 23       		.byte	0x23
 2415 0671 06       		.uleb128 0x6
 2416 0672 0A       		.uleb128 0xa
 2417 0673 33030000 		.4byte	.LASF103
 2418 0677 07       		.byte	0x7
 2419 0678 3E       		.byte	0x3e
 2420 0679 24010000 		.4byte	0x124
 2421 067d 02       		.byte	0x2
 2422 067e 23       		.byte	0x23
 2423 067f 07       		.uleb128 0x7
 2424 0680 0A       		.uleb128 0xa
 2425 0681 06000000 		.4byte	.LASF104
 2426 0685 07       		.byte	0x7
 2427 0686 41       		.byte	0x41
 2428 0687 24010000 		.4byte	0x124
 2429 068b 02       		.byte	0x2
 2430 068c 23       		.byte	0x23
 2431 068d 08       		.uleb128 0x8
 2432 068e 0A       		.uleb128 0xa
 2433 068f 14000000 		.4byte	.LASF105
 2434 0693 07       		.byte	0x7
 2435 0694 42       		.byte	0x42
 2436 0695 24010000 		.4byte	0x124
 2437 0699 02       		.byte	0x2
 2438 069a 23       		.byte	0x23
 2439 069b 09       		.uleb128 0x9
 2440 069c 0A       		.uleb128 0xa
 2441 069d 22000000 		.4byte	.LASF106
 2442 06a1 07       		.byte	0x7
 2443 06a2 43       		.byte	0x43
 2444 06a3 24010000 		.4byte	0x124
 2445 06a7 02       		.byte	0x2
 2446 06a8 23       		.byte	0x23
 2447 06a9 0A       		.uleb128 0xa
 2448 06aa 0A       		.uleb128 0xa
 2449 06ab 30000000 		.4byte	.LASF107
 2450 06af 07       		.byte	0x7
 2451 06b0 44       		.byte	0x44
 2452 06b1 24010000 		.4byte	0x124
 2453 06b5 02       		.byte	0x2
 2454 06b6 23       		.byte	0x23
 2455 06b7 0B       		.uleb128 0xb
 2456 06b8 00       		.byte	0
 2457 06b9 07       		.uleb128 0x7
 2458 06ba 93080000 		.4byte	.LASF108
 2459 06be 07       		.byte	0x7
 2460 06bf 46       		.byte	0x46
 2461 06c0 12060000 		.4byte	0x612
ARM GAS  /tmp/cc0FodwT.s 			page 83


 2462 06c4 02       		.uleb128 0x2
 2463 06c5 8E020000 		.4byte	.LASF110
 2464 06c9 01       		.byte	0x1
 2465 06ca 24010000 		.4byte	0x124
 2466 06ce 08       		.byte	0x8
 2467 06cf 0D       		.byte	0xd
 2468 06d0 FF060000 		.4byte	0x6ff
 2469 06d4 04       		.uleb128 0x4
 2470 06d5 E3020000 		.4byte	.LASF111
 2471 06d9 00       		.byte	0
 2472 06da 04       		.uleb128 0x4
 2473 06db 82080000 		.4byte	.LASF112
 2474 06df 01       		.byte	0x1
 2475 06e0 04       		.uleb128 0x4
 2476 06e1 A9040000 		.4byte	.LASF113
 2477 06e5 02       		.byte	0x2
 2478 06e6 04       		.uleb128 0x4
 2479 06e7 9F060000 		.4byte	.LASF114
 2480 06eb 03       		.byte	0x3
 2481 06ec 04       		.uleb128 0x4
 2482 06ed 160A0000 		.4byte	.LASF115
 2483 06f1 04       		.byte	0x4
 2484 06f2 04       		.uleb128 0x4
 2485 06f3 C7080000 		.4byte	.LASF116
 2486 06f7 05       		.byte	0x5
 2487 06f8 04       		.uleb128 0x4
 2488 06f9 0C050000 		.4byte	.LASF117
 2489 06fd 06       		.byte	0x6
 2490 06fe 00       		.byte	0
 2491 06ff 16       		.uleb128 0x16
 2492 0700 E9000000 		.4byte	.LASF201
 2493 0704 01       		.byte	0x1
 2494 0705 7C03     		.2byte	0x37c
 2495 0707 01       		.byte	0x1
 2496 0708 00000000 		.4byte	.LFB16
 2497 070c EC000000 		.4byte	.LFE16
 2498 0710 00000000 		.4byte	.LLST0
 2499 0714 01       		.byte	0x1
 2500 0715 38070000 		.4byte	0x738
 2501 0719 17       		.uleb128 0x17
 2502 071a 8C050000 		.4byte	.LASF109
 2503 071e 01       		.byte	0x1
 2504 071f 7C03     		.2byte	0x37c
 2505 0721 0D010000 		.4byte	0x10d
 2506 0725 02       		.byte	0x2
 2507 0726 91       		.byte	0x91
 2508 0727 6F       		.sleb128 -17
 2509 0728 17       		.uleb128 0x17
 2510 0729 2A060000 		.4byte	.LASF118
 2511 072d 01       		.byte	0x1
 2512 072e 7C03     		.2byte	0x37c
 2513 0730 A5010000 		.4byte	0x1a5
 2514 0734 02       		.byte	0x2
 2515 0735 91       		.byte	0x91
 2516 0736 68       		.sleb128 -24
 2517 0737 00       		.byte	0
 2518 0738 18       		.uleb128 0x18
ARM GAS  /tmp/cc0FodwT.s 			page 84


 2519 0739 C1020000 		.4byte	.LASF202
 2520 073d 01       		.byte	0x1
 2521 073e B803     		.2byte	0x3b8
 2522 0740 01       		.byte	0x1
 2523 0741 A5010000 		.4byte	0x1a5
 2524 0745 00000000 		.4byte	.LFB18
 2525 0749 48000000 		.4byte	.LFE18
 2526 074d 2C000000 		.4byte	.LLST1
 2527 0751 01       		.byte	0x1
 2528 0752 66070000 		.4byte	0x766
 2529 0756 17       		.uleb128 0x17
 2530 0757 14030000 		.4byte	.LASF119
 2531 075b 01       		.byte	0x1
 2532 075c B803     		.2byte	0x3b8
 2533 075e A5010000 		.4byte	0x1a5
 2534 0762 02       		.byte	0x2
 2535 0763 91       		.byte	0x91
 2536 0764 74       		.sleb128 -12
 2537 0765 00       		.byte	0
 2538 0766 19       		.uleb128 0x19
 2539 0767 01       		.byte	0x1
 2540 0768 A1090000 		.4byte	.LASF203
 2541 076c 02       		.byte	0x2
 2542 076d D7       		.byte	0xd7
 2543 076e 01       		.byte	0x1
 2544 076f 76010000 		.4byte	0x176
 2545 0773 00000000 		.4byte	.LFB20
 2546 0777 E0040000 		.4byte	.LFE20
 2547 077b 58000000 		.4byte	.LLST2
 2548 077f 01       		.byte	0x1
 2549 0780 C1080000 		.4byte	0x8c1
 2550 0784 1A       		.uleb128 0x1a
 2551 0785 6900     		.ascii	"i\000"
 2552 0787 02       		.byte	0x2
 2553 0788 D9       		.byte	0xd9
 2554 0789 24010000 		.4byte	0x124
 2555 078d 02       		.byte	0x2
 2556 078e 91       		.byte	0x91
 2557 078f 6F       		.sleb128 -17
 2558 0790 1B       		.uleb128 0x1b
 2559 0791 696900   		.ascii	"ii\000"
 2560 0794 02       		.byte	0x2
 2561 0795 D9       		.byte	0xd9
 2562 0796 24010000 		.4byte	0x124
 2563 079a 1C       		.uleb128 0x1c
 2564 079b FF090000 		.4byte	.LASF120
 2565 079f 02       		.byte	0x2
 2566 07a0 DA       		.byte	0xda
 2567 07a1 24010000 		.4byte	0x124
 2568 07a5 1C       		.uleb128 0x1c
 2569 07a6 8F030000 		.4byte	.LASF121
 2570 07aa 02       		.byte	0x2
 2571 07ab DA       		.byte	0xda
 2572 07ac 24010000 		.4byte	0x124
 2573 07b0 1D       		.uleb128 0x1d
 2574 07b1 FF070000 		.4byte	.LASF122
 2575 07b5 02       		.byte	0x2
ARM GAS  /tmp/cc0FodwT.s 			page 85


 2576 07b6 DA       		.byte	0xda
 2577 07b7 24010000 		.4byte	0x124
 2578 07bb 02       		.byte	0x2
 2579 07bc 91       		.byte	0x91
 2580 07bd 65       		.sleb128 -27
 2581 07be 1D       		.uleb128 0x1d
 2582 07bf CE090000 		.4byte	.LASF123
 2583 07c3 02       		.byte	0x2
 2584 07c4 DB       		.byte	0xdb
 2585 07c5 24010000 		.4byte	0x124
 2586 07c9 02       		.byte	0x2
 2587 07ca 91       		.byte	0x91
 2588 07cb 64       		.sleb128 -28
 2589 07cc 1D       		.uleb128 0x1d
 2590 07cd BD080000 		.4byte	.LASF124
 2591 07d1 02       		.byte	0x2
 2592 07d2 DC       		.byte	0xdc
 2593 07d3 3D010000 		.4byte	0x13d
 2594 07d7 02       		.byte	0x2
 2595 07d8 91       		.byte	0x91
 2596 07d9 4E       		.sleb128 -50
 2597 07da 1D       		.uleb128 0x1d
 2598 07db 51030000 		.4byte	.LASF125
 2599 07df 02       		.byte	0x2
 2600 07e0 DC       		.byte	0xdc
 2601 07e1 3D010000 		.4byte	0x13d
 2602 07e5 02       		.byte	0x2
 2603 07e6 91       		.byte	0x91
 2604 07e7 4C       		.sleb128 -52
 2605 07e8 1D       		.uleb128 0x1d
 2606 07e9 8D080000 		.4byte	.LASF126
 2607 07ed 02       		.byte	0x2
 2608 07ee DD       		.byte	0xdd
 2609 07ef 3D010000 		.4byte	0x13d
 2610 07f3 02       		.byte	0x2
 2611 07f4 91       		.byte	0x91
 2612 07f5 50       		.sleb128 -48
 2613 07f6 1D       		.uleb128 0x1d
 2614 07f7 D8010000 		.4byte	.LASF127
 2615 07fb 02       		.byte	0x2
 2616 07fc DE       		.byte	0xde
 2617 07fd C1080000 		.4byte	0x8c1
 2618 0801 02       		.byte	0x2
 2619 0802 91       		.byte	0x91
 2620 0803 60       		.sleb128 -32
 2621 0804 1D       		.uleb128 0x1d
 2622 0805 3E000000 		.4byte	.LASF128
 2623 0809 02       		.byte	0x2
 2624 080a DF       		.byte	0xdf
 2625 080b 7D010000 		.4byte	0x17d
 2626 080f 02       		.byte	0x2
 2627 0810 91       		.byte	0x91
 2628 0811 68       		.sleb128 -24
 2629 0812 1D       		.uleb128 0x1d
 2630 0813 BD000000 		.4byte	.LASF129
 2631 0817 02       		.byte	0x2
 2632 0818 E2       		.byte	0xe2
ARM GAS  /tmp/cc0FodwT.s 			page 86


 2633 0819 07060000 		.4byte	0x607
 2634 081d 02       		.byte	0x2
 2635 081e 91       		.byte	0x91
 2636 081f 67       		.sleb128 -25
 2637 0820 1D       		.uleb128 0x1d
 2638 0821 CB060000 		.4byte	.LASF130
 2639 0825 02       		.byte	0x2
 2640 0826 E3       		.byte	0xe3
 2641 0827 24010000 		.4byte	0x124
 2642 082b 02       		.byte	0x2
 2643 082c 91       		.byte	0x91
 2644 082d 66       		.sleb128 -26
 2645 082e 1C       		.uleb128 0x1c
 2646 082f 0C020000 		.4byte	.LASF131
 2647 0833 02       		.byte	0x2
 2648 0834 E5       		.byte	0xe5
 2649 0835 3D010000 		.4byte	0x13d
 2650 0839 1C       		.uleb128 0x1c
 2651 083a 5C080000 		.4byte	.LASF132
 2652 083e 02       		.byte	0x2
 2653 083f E8       		.byte	0xe8
 2654 0840 24010000 		.4byte	0x124
 2655 0844 1D       		.uleb128 0x1d
 2656 0845 00000000 		.4byte	.LASF133
 2657 0849 02       		.byte	0x2
 2658 084a EE       		.byte	0xee
 2659 084b C8080000 		.4byte	0x8c8
 2660 084f 03       		.byte	0x3
 2661 0850 91       		.byte	0x91
 2662 0851 B87F     		.sleb128 -72
 2663 0853 1D       		.uleb128 0x1d
 2664 0854 4B050000 		.4byte	.LASF134
 2665 0858 02       		.byte	0x2
 2666 0859 EF       		.byte	0xef
 2667 085a C4060000 		.4byte	0x6c4
 2668 085e 02       		.byte	0x2
 2669 085f 91       		.byte	0x91
 2670 0860 5F       		.sleb128 -33
 2671 0861 1D       		.uleb128 0x1d
 2672 0862 26080000 		.4byte	.LASF135
 2673 0866 02       		.byte	0x2
 2674 0867 F0       		.byte	0xf0
 2675 0868 24010000 		.4byte	0x124
 2676 086c 02       		.byte	0x2
 2677 086d 91       		.byte	0x91
 2678 086e 5E       		.sleb128 -34
 2679 086f 1D       		.uleb128 0x1d
 2680 0870 47060000 		.4byte	.LASF136
 2681 0874 02       		.byte	0x2
 2682 0875 F1       		.byte	0xf1
 2683 0876 24010000 		.4byte	0x124
 2684 087a 02       		.byte	0x2
 2685 087b 91       		.byte	0x91
 2686 087c 5D       		.sleb128 -35
 2687 087d 1D       		.uleb128 0x1d
 2688 087e F3070000 		.4byte	.LASF137
 2689 0882 02       		.byte	0x2
ARM GAS  /tmp/cc0FodwT.s 			page 87


 2690 0883 F2       		.byte	0xf2
 2691 0884 24010000 		.4byte	0x124
 2692 0888 02       		.byte	0x2
 2693 0889 91       		.byte	0x91
 2694 088a 5C       		.sleb128 -36
 2695 088b 1D       		.uleb128 0x1d
 2696 088c DE010000 		.4byte	.LASF138
 2697 0890 02       		.byte	0x2
 2698 0891 F3       		.byte	0xf3
 2699 0892 24010000 		.4byte	0x124
 2700 0896 02       		.byte	0x2
 2701 0897 91       		.byte	0x91
 2702 0898 5B       		.sleb128 -37
 2703 0899 1D       		.uleb128 0x1d
 2704 089a CA040000 		.4byte	.LASF139
 2705 089e 02       		.byte	0x2
 2706 089f F4       		.byte	0xf4
 2707 08a0 76010000 		.4byte	0x176
 2708 08a4 02       		.byte	0x2
 2709 08a5 91       		.byte	0x91
 2710 08a6 54       		.sleb128 -44
 2711 08a7 1D       		.uleb128 0x1d
 2712 08a8 BB070000 		.4byte	.LASF140
 2713 08ac 02       		.byte	0x2
 2714 08ad F5       		.byte	0xf5
 2715 08ae 24010000 		.4byte	0x124
 2716 08b2 02       		.byte	0x2
 2717 08b3 91       		.byte	0x91
 2718 08b4 53       		.sleb128 -45
 2719 08b5 1C       		.uleb128 0x1c
 2720 08b6 C8000000 		.4byte	.LASF141
 2721 08ba 02       		.byte	0x2
 2722 08bb FA       		.byte	0xfa
 2723 08bc D8080000 		.4byte	0x8d8
 2724 08c0 00       		.byte	0
 2725 08c1 05       		.uleb128 0x5
 2726 08c2 04       		.byte	0x4
 2727 08c3 04       		.byte	0x4
 2728 08c4 06020000 		.4byte	.LASF142
 2729 08c8 0C       		.uleb128 0xc
 2730 08c9 B3050000 		.4byte	0x5b3
 2731 08cd D8080000 		.4byte	0x8d8
 2732 08d1 0D       		.uleb128 0xd
 2733 08d2 5D020000 		.4byte	0x25d
 2734 08d6 13       		.byte	0x13
 2735 08d7 00       		.byte	0
 2736 08d8 1E       		.uleb128 0x1e
 2737 08d9 04       		.byte	0x4
 2738 08da B9060000 		.4byte	0x6b9
 2739 08de 1F       		.uleb128 0x1f
 2740 08df 01       		.byte	0x1
 2741 08e0 71080000 		.4byte	.LASF204
 2742 08e4 02       		.byte	0x2
 2743 08e5 DC03     		.2byte	0x3dc
 2744 08e7 01       		.byte	0x1
 2745 08e8 00000000 		.4byte	.LFB21
 2746 08ec B0000000 		.4byte	.LFE21
ARM GAS  /tmp/cc0FodwT.s 			page 88


 2747 08f0 85000000 		.4byte	.LLST3
 2748 08f4 01       		.byte	0x1
 2749 08f5 9E090000 		.4byte	0x99e
 2750 08f9 17       		.uleb128 0x17
 2751 08fa DC000000 		.4byte	.LASF143
 2752 08fe 02       		.byte	0x2
 2753 08ff DC03     		.2byte	0x3dc
 2754 0901 9E090000 		.4byte	0x99e
 2755 0905 03       		.byte	0x3
 2756 0906 91       		.byte	0x91
 2757 0907 A47F     		.sleb128 -92
 2758 0909 20       		.uleb128 0x20
 2759 090a 643100   		.ascii	"d1\000"
 2760 090d 02       		.byte	0x2
 2761 090e DE03     		.2byte	0x3de
 2762 0910 9A010000 		.4byte	0x19a
 2763 0914 02       		.byte	0x2
 2764 0915 91       		.byte	0x91
 2765 0916 74       		.sleb128 -12
 2766 0917 20       		.uleb128 0x20
 2767 0918 643200   		.ascii	"d2\000"
 2768 091b 02       		.byte	0x2
 2769 091c DE03     		.2byte	0x3de
 2770 091e 9A010000 		.4byte	0x19a
 2771 0922 02       		.byte	0x2
 2772 0923 91       		.byte	0x91
 2773 0924 70       		.sleb128 -16
 2774 0925 20       		.uleb128 0x20
 2775 0926 643300   		.ascii	"d3\000"
 2776 0929 02       		.byte	0x2
 2777 092a DE03     		.2byte	0x3de
 2778 092c 9A010000 		.4byte	0x19a
 2779 0930 02       		.byte	0x2
 2780 0931 91       		.byte	0x91
 2781 0932 6C       		.sleb128 -20
 2782 0933 20       		.uleb128 0x20
 2783 0934 643400   		.ascii	"d4\000"
 2784 0937 02       		.byte	0x2
 2785 0938 DE03     		.2byte	0x3de
 2786 093a 9A010000 		.4byte	0x19a
 2787 093e 02       		.byte	0x2
 2788 093f 91       		.byte	0x91
 2789 0940 68       		.sleb128 -24
 2790 0941 20       		.uleb128 0x20
 2791 0942 643500   		.ascii	"d5\000"
 2792 0945 02       		.byte	0x2
 2793 0946 DE03     		.2byte	0x3de
 2794 0948 9A010000 		.4byte	0x19a
 2795 094c 02       		.byte	0x2
 2796 094d 91       		.byte	0x91
 2797 094e 64       		.sleb128 -28
 2798 094f 20       		.uleb128 0x20
 2799 0950 643600   		.ascii	"d6\000"
 2800 0953 02       		.byte	0x2
 2801 0954 DE03     		.2byte	0x3de
 2802 0956 9A010000 		.4byte	0x19a
 2803 095a 02       		.byte	0x2
ARM GAS  /tmp/cc0FodwT.s 			page 89


 2804 095b 91       		.byte	0x91
 2805 095c 60       		.sleb128 -32
 2806 095d 21       		.uleb128 0x21
 2807 095e EE040000 		.4byte	.LASF144
 2808 0962 02       		.byte	0x2
 2809 0963 DF03     		.2byte	0x3df
 2810 0965 A4090000 		.4byte	0x9a4
 2811 0969 03       		.byte	0x3
 2812 096a 91       		.byte	0x91
 2813 096b B87F     		.sleb128 -72
 2814 096d 21       		.uleb128 0x21
 2815 096e 60070000 		.4byte	.LASF145
 2816 0972 02       		.byte	0x2
 2817 0973 E003     		.2byte	0x3e0
 2818 0975 B4090000 		.4byte	0x9b4
 2819 0979 03       		.byte	0x3
 2820 097a 91       		.byte	0x91
 2821 097b B47F     		.sleb128 -76
 2822 097d 21       		.uleb128 0x21
 2823 097e 3F030000 		.4byte	.LASF146
 2824 0982 02       		.byte	0x2
 2825 0983 E103     		.2byte	0x3e1
 2826 0985 B4090000 		.4byte	0x9b4
 2827 0989 03       		.byte	0x3
 2828 098a 91       		.byte	0x91
 2829 098b B07F     		.sleb128 -80
 2830 098d 21       		.uleb128 0x21
 2831 098e 1C070000 		.4byte	.LASF147
 2832 0992 02       		.byte	0x2
 2833 0993 E203     		.2byte	0x3e2
 2834 0995 B4090000 		.4byte	0x9b4
 2835 0999 03       		.byte	0x3
 2836 099a 91       		.byte	0x91
 2837 099b AC7F     		.sleb128 -84
 2838 099d 00       		.byte	0
 2839 099e 1E       		.uleb128 0x1e
 2840 099f 04       		.byte	0x4
 2841 09a0 84010000 		.4byte	0x184
 2842 09a4 0C       		.uleb128 0xc
 2843 09a5 B3050000 		.4byte	0x5b3
 2844 09a9 B4090000 		.4byte	0x9b4
 2845 09ad 0D       		.uleb128 0xd
 2846 09ae 5D020000 		.4byte	0x25d
 2847 09b2 27       		.byte	0x27
 2848 09b3 00       		.byte	0
 2849 09b4 0E       		.uleb128 0xe
 2850 09b5 C1080000 		.4byte	0x8c1
 2851 09b9 22       		.uleb128 0x22
 2852 09ba 01       		.byte	0x1
 2853 09bb 2F080000 		.4byte	.LASF205
 2854 09bf 02       		.byte	0x2
 2855 09c0 5704     		.2byte	0x457
 2856 09c2 01       		.byte	0x1
 2857 09c3 00000000 		.4byte	.LFB22
 2858 09c7 64010000 		.4byte	.LFE22
 2859 09cb B2000000 		.4byte	.LLST4
 2860 09cf 01       		.byte	0x1
ARM GAS  /tmp/cc0FodwT.s 			page 90


 2861 09d0 0C       		.uleb128 0xc
 2862 09d1 24010000 		.4byte	0x124
 2863 09d5 E0090000 		.4byte	0x9e0
 2864 09d9 0D       		.uleb128 0xd
 2865 09da 5D020000 		.4byte	0x25d
 2866 09de FF       		.byte	0xff
 2867 09df 00       		.byte	0
 2868 09e0 23       		.uleb128 0x23
 2869 09e1 76010000 		.4byte	.LASF148
 2870 09e5 02       		.byte	0x2
 2871 09e6 3B       		.byte	0x3b
 2872 09e7 F2090000 		.4byte	0x9f2
 2873 09eb 01       		.byte	0x1
 2874 09ec 05       		.byte	0x5
 2875 09ed 03       		.byte	0x3
 2876 09ee 00000000 		.4byte	tx2buff
 2877 09f2 0E       		.uleb128 0xe
 2878 09f3 D0090000 		.4byte	0x9d0
 2879 09f7 23       		.uleb128 0x23
 2880 09f8 32010000 		.4byte	.LASF149
 2881 09fc 02       		.byte	0x2
 2882 09fd 3C       		.byte	0x3c
 2883 09fe 090A0000 		.4byte	0xa09
 2884 0a02 01       		.byte	0x1
 2885 0a03 05       		.byte	0x5
 2886 0a04 03       		.byte	0x3
 2887 0a05 00000000 		.4byte	rx2buff
 2888 0a09 0E       		.uleb128 0xe
 2889 0a0a D0090000 		.4byte	0x9d0
 2890 0a0e 23       		.uleb128 0x23
 2891 0a0f E6030000 		.4byte	.LASF150
 2892 0a13 02       		.byte	0x2
 2893 0a14 3E       		.byte	0x3e
 2894 0a15 200A0000 		.4byte	0xa20
 2895 0a19 01       		.byte	0x1
 2896 0a1a 05       		.byte	0x5
 2897 0a1b 03       		.byte	0x3
 2898 0a1c 00000000 		.4byte	tx1buff
 2899 0a20 0E       		.uleb128 0xe
 2900 0a21 D0090000 		.4byte	0x9d0
 2901 0a25 23       		.uleb128 0x23
 2902 0a26 45010000 		.4byte	.LASF151
 2903 0a2a 02       		.byte	0x2
 2904 0a2b 3F       		.byte	0x3f
 2905 0a2c 370A0000 		.4byte	0xa37
 2906 0a30 01       		.byte	0x1
 2907 0a31 05       		.byte	0x5
 2908 0a32 03       		.byte	0x3
 2909 0a33 00000000 		.4byte	rx1buff
 2910 0a37 0E       		.uleb128 0xe
 2911 0a38 D0090000 		.4byte	0x9d0
 2912 0a3c 23       		.uleb128 0x23
 2913 0a3d 1A030000 		.4byte	.LASF152
 2914 0a41 02       		.byte	0x2
 2915 0a42 49       		.byte	0x49
 2916 0a43 4E0A0000 		.4byte	0xa4e
 2917 0a47 01       		.byte	0x1
ARM GAS  /tmp/cc0FodwT.s 			page 91


 2918 0a48 05       		.byte	0x5
 2919 0a49 03       		.byte	0x3
 2920 0a4a 00000000 		.4byte	show_select_timer
 2921 0a4e 0E       		.uleb128 0xe
 2922 0a4f 3D010000 		.4byte	0x13d
 2923 0a53 23       		.uleb128 0x23
 2924 0a54 3C050000 		.4byte	.LASF153
 2925 0a58 02       		.byte	0x2
 2926 0a59 4A       		.byte	0x4a
 2927 0a5a 650A0000 		.4byte	0xa65
 2928 0a5e 01       		.byte	0x1
 2929 0a5f 05       		.byte	0x5
 2930 0a60 03       		.byte	0x3
 2931 0a61 00000000 		.4byte	switches_timer
 2932 0a65 0E       		.uleb128 0xe
 2933 0a66 24010000 		.4byte	0x124
 2934 0a6a 23       		.uleb128 0x23
 2935 0a6b 4F000000 		.4byte	.LASF154
 2936 0a6f 02       		.byte	0x2
 2937 0a70 4B       		.byte	0x4b
 2938 0a71 650A0000 		.4byte	0xa65
 2939 0a75 01       		.byte	0x1
 2940 0a76 05       		.byte	0x5
 2941 0a77 03       		.byte	0x3
 2942 0a78 00000000 		.4byte	acswitch_timer
 2943 0a7c 23       		.uleb128 0x23
 2944 0a7d AE050000 		.4byte	.LASF155
 2945 0a81 02       		.byte	0x2
 2946 0a82 4D       		.byte	0x4d
 2947 0a83 4E0A0000 		.4byte	0xa4e
 2948 0a87 01       		.byte	0x1
 2949 0a88 05       		.byte	0x5
 2950 0a89 03       		.byte	0x3
 2951 0a8a 00000000 		.4byte	scroll1_timer
 2952 0a8e 23       		.uleb128 0x23
 2953 0a8f E3090000 		.4byte	.LASF156
 2954 0a93 02       		.byte	0x2
 2955 0a94 4E       		.byte	0x4e
 2956 0a95 4E0A0000 		.4byte	0xa4e
 2957 0a99 01       		.byte	0x1
 2958 0a9a 05       		.byte	0x5
 2959 0a9b 03       		.byte	0x3
 2960 0a9c 00000000 		.4byte	scroll2_timer
 2961 0aa0 23       		.uleb128 0x23
 2962 0aa1 90090000 		.4byte	.LASF157
 2963 0aa5 02       		.byte	0x2
 2964 0aa6 50       		.byte	0x50
 2965 0aa7 4E0A0000 		.4byte	0xa4e
 2966 0aab 01       		.byte	0x1
 2967 0aac 05       		.byte	0x5
 2968 0aad 03       		.byte	0x3
 2969 0aae 00000000 		.4byte	standalone_timer
 2970 0ab2 23       		.uleb128 0x23
 2971 0ab3 77070000 		.4byte	.LASF158
 2972 0ab7 02       		.byte	0x2
 2973 0ab8 51       		.byte	0x51
 2974 0ab9 4E0A0000 		.4byte	0xa4e
ARM GAS  /tmp/cc0FodwT.s 			page 92


 2975 0abd 01       		.byte	0x1
 2976 0abe 05       		.byte	0x5
 2977 0abf 03       		.byte	0x3
 2978 0ac0 00000000 		.4byte	standalone_enable_menu_timer
 2979 0ac4 23       		.uleb128 0x23
 2980 0ac5 8B010000 		.4byte	.LASF159
 2981 0ac9 02       		.byte	0x2
 2982 0aca 53       		.byte	0x53
 2983 0acb 650A0000 		.4byte	0xa65
 2984 0acf 01       		.byte	0x1
 2985 0ad0 05       		.byte	0x5
 2986 0ad1 03       		.byte	0x3
 2987 0ad2 00000000 		.4byte	grouped_master_timeout_timer
 2988 0ad6 23       		.uleb128 0x23
 2989 0ad7 61030000 		.4byte	.LASF160
 2990 0adb 02       		.byte	0x2
 2991 0adc 54       		.byte	0x54
 2992 0add 4E0A0000 		.4byte	0xa4e
 2993 0ae1 01       		.byte	0x1
 2994 0ae2 05       		.byte	0x5
 2995 0ae3 03       		.byte	0x3
 2996 0ae4 00000000 		.4byte	take_temp_sample
 2997 0ae8 23       		.uleb128 0x23
 2998 0ae9 45080000 		.4byte	.LASF161
 2999 0aed 02       		.byte	0x2
 3000 0aee 55       		.byte	0x55
 3001 0aef 650A0000 		.4byte	0xa65
 3002 0af3 01       		.byte	0x1
 3003 0af4 05       		.byte	0x5
 3004 0af5 03       		.byte	0x3
 3005 0af6 00000000 		.4byte	timer_wifi_bright
 3006 0afa 23       		.uleb128 0x23
 3007 0afb 88040000 		.4byte	.LASF162
 3008 0aff 02       		.byte	0x2
 3009 0b00 58       		.byte	0x58
 3010 0b01 4E0A0000 		.4byte	0xa4e
 3011 0b05 01       		.byte	0x1
 3012 0b06 05       		.byte	0x5
 3013 0b07 03       		.byte	0x3
 3014 0b08 00000000 		.4byte	timer_relay
 3015 0b0c 23       		.uleb128 0x23
 3016 0b0d AC020000 		.4byte	.LASF163
 3017 0b11 02       		.byte	0x2
 3018 0b12 5A       		.byte	0x5a
 3019 0b13 4E0A0000 		.4byte	0xa4e
 3020 0b17 01       		.byte	0x1
 3021 0b18 05       		.byte	0x5
 3022 0b19 03       		.byte	0x3
 3023 0b1a 00000000 		.4byte	tt_take_photo_sample
 3024 0b1e 23       		.uleb128 0x23
 3025 0b1f 00040000 		.4byte	.LASF164
 3026 0b23 02       		.byte	0x2
 3027 0b24 5B       		.byte	0x5b
 3028 0b25 4E0A0000 		.4byte	0xa4e
 3029 0b29 01       		.byte	0x1
 3030 0b2a 05       		.byte	0x5
 3031 0b2b 03       		.byte	0x3
ARM GAS  /tmp/cc0FodwT.s 			page 93


 3032 0b2c 00000000 		.4byte	tt_relay_on_off
 3033 0b30 23       		.uleb128 0x23
 3034 0b31 65040000 		.4byte	.LASF165
 3035 0b35 02       		.byte	0x2
 3036 0b36 5F       		.byte	0x5f
 3037 0b37 24010000 		.4byte	0x124
 3038 0b3b 01       		.byte	0x1
 3039 0b3c 05       		.byte	0x5
 3040 0b3d 03       		.byte	0x3
 3041 0b3e 00000000 		.4byte	saved_mode
 3042 0b42 24       		.uleb128 0x24
 3043 0b43 733100   		.ascii	"s1\000"
 3044 0b46 02       		.byte	0x2
 3045 0b47 63       		.byte	0x63
 3046 0b48 3D010000 		.4byte	0x13d
 3047 0b4c 01       		.byte	0x1
 3048 0b4d 05       		.byte	0x5
 3049 0b4e 03       		.byte	0x3
 3050 0b4f 00000000 		.4byte	s1
 3051 0b53 24       		.uleb128 0x24
 3052 0b54 733200   		.ascii	"s2\000"
 3053 0b57 02       		.byte	0x2
 3054 0b58 64       		.byte	0x64
 3055 0b59 3D010000 		.4byte	0x13d
 3056 0b5d 01       		.byte	0x1
 3057 0b5e 05       		.byte	0x5
 3058 0b5f 03       		.byte	0x3
 3059 0b60 00000000 		.4byte	s2
 3060 0b64 24       		.uleb128 0x24
 3061 0b65 73616300 		.ascii	"sac\000"
 3062 0b69 02       		.byte	0x2
 3063 0b6a 65       		.byte	0x65
 3064 0b6b 3D010000 		.4byte	0x13d
 3065 0b6f 01       		.byte	0x1
 3066 0b70 05       		.byte	0x5
 3067 0b71 03       		.byte	0x3
 3068 0b72 00000000 		.4byte	sac
 3069 0b76 23       		.uleb128 0x23
 3070 0b77 1E080000 		.4byte	.LASF166
 3071 0b7b 02       		.byte	0x2
 3072 0b7c 66       		.byte	0x66
 3073 0b7d 24010000 		.4byte	0x124
 3074 0b81 01       		.byte	0x1
 3075 0b82 05       		.byte	0x5
 3076 0b83 03       		.byte	0x3
 3077 0b84 00000000 		.4byte	sac_aux
 3078 0b88 23       		.uleb128 0x23
 3079 0b89 94070000 		.4byte	.LASF167
 3080 0b8d 02       		.byte	0x2
 3081 0b8e 6A       		.byte	0x6a
 3082 0b8f 9A0B0000 		.4byte	0xb9a
 3083 0b93 01       		.byte	0x1
 3084 0b94 05       		.byte	0x5
 3085 0b95 03       		.byte	0x3
 3086 0b96 00000000 		.4byte	adc_ch
 3087 0b9a 0E       		.uleb128 0xe
 3088 0b9b BA050000 		.4byte	0x5ba
ARM GAS  /tmp/cc0FodwT.s 			page 94


 3089 0b9f 23       		.uleb128 0x23
 3090 0ba0 D3090000 		.4byte	.LASF168
 3091 0ba4 02       		.byte	0x2
 3092 0ba5 6B       		.byte	0x6b
 3093 0ba6 650A0000 		.4byte	0xa65
 3094 0baa 01       		.byte	0x1
 3095 0bab 05       		.byte	0x5
 3096 0bac 03       		.byte	0x3
 3097 0bad 00000000 		.4byte	seq_ready
 3098 0bb1 23       		.uleb128 0x23
 3099 0bb2 B5040000 		.4byte	.LASF169
 3100 0bb6 02       		.byte	0x2
 3101 0bb7 6C       		.byte	0x6c
 3102 0bb8 3D010000 		.4byte	0x13d
 3103 0bbc 01       		.byte	0x1
 3104 0bbd 05       		.byte	0x5
 3105 0bbe 03       		.byte	0x3
 3106 0bbf 00000000 		.4byte	zero_current
 3107 0bc3 23       		.uleb128 0x23
 3108 0bc4 47040000 		.4byte	.LASF170
 3109 0bc8 02       		.byte	0x2
 3110 0bc9 70       		.byte	0x70
 3111 0bca 650A0000 		.4byte	0xa65
 3112 0bce 01       		.byte	0x1
 3113 0bcf 05       		.byte	0x5
 3114 0bd0 03       		.byte	0x3
 3115 0bd1 00000000 		.4byte	usart1_mini_timeout
 3116 0bd5 23       		.uleb128 0x23
 3117 0bd6 72020000 		.4byte	.LASF171
 3118 0bda 02       		.byte	0x2
 3119 0bdb 71       		.byte	0x71
 3120 0bdc 650A0000 		.4byte	0xa65
 3121 0be0 01       		.byte	0x1
 3122 0be1 05       		.byte	0x5
 3123 0be2 03       		.byte	0x3
 3124 0be3 00000000 		.4byte	usart1_pckt_ready
 3125 0be7 23       		.uleb128 0x23
 3126 0be8 FD020000 		.4byte	.LASF172
 3127 0bec 02       		.byte	0x2
 3128 0bed 72       		.byte	0x72
 3129 0bee 650A0000 		.4byte	0xa65
 3130 0bf2 01       		.byte	0x1
 3131 0bf3 05       		.byte	0x5
 3132 0bf4 03       		.byte	0x3
 3133 0bf5 00000000 		.4byte	usart1_have_data
 3134 0bf9 23       		.uleb128 0x23
 3135 0bfa 40020000 		.4byte	.LASF173
 3136 0bfe 02       		.byte	0x2
 3137 0bff 73       		.byte	0x73
 3138 0c00 24010000 		.4byte	0x124
 3139 0c04 01       		.byte	0x1
 3140 0c05 05       		.byte	0x5
 3141 0c06 03       		.byte	0x3
 3142 0c07 00000000 		.4byte	usart1_pckt_bytes
 3143 0c0b 23       		.uleb128 0x23
 3144 0c0c C6030000 		.4byte	.LASF174
 3145 0c10 02       		.byte	0x2
ARM GAS  /tmp/cc0FodwT.s 			page 95


 3146 0c11 8A       		.byte	0x8a
 3147 0c12 650A0000 		.4byte	0xa65
 3148 0c16 01       		.byte	0x1
 3149 0c17 05       		.byte	0x5
 3150 0c18 03       		.byte	0x3
 3151 0c19 00000000 		.4byte	usart2_mini_timeout
 3152 0c1d 23       		.uleb128 0x23
 3153 0c1e 64010000 		.4byte	.LASF175
 3154 0c22 02       		.byte	0x2
 3155 0c23 8B       		.byte	0x8b
 3156 0c24 650A0000 		.4byte	0xa65
 3157 0c28 01       		.byte	0x1
 3158 0c29 05       		.byte	0x5
 3159 0c2a 03       		.byte	0x3
 3160 0c2b 00000000 		.4byte	usart2_pckt_ready
 3161 0c2f 23       		.uleb128 0x23
 3162 0c30 BE010000 		.4byte	.LASF176
 3163 0c34 02       		.byte	0x2
 3164 0c35 8C       		.byte	0x8c
 3165 0c36 650A0000 		.4byte	0xa65
 3166 0c3a 01       		.byte	0x1
 3167 0c3b 05       		.byte	0x5
 3168 0c3c 03       		.byte	0x3
 3169 0c3d 00000000 		.4byte	usart2_have_data
 3170 0c41 23       		.uleb128 0x23
 3171 0c42 EE030000 		.4byte	.LASF177
 3172 0c46 02       		.byte	0x2
 3173 0c47 8D       		.byte	0x8d
 3174 0c48 24010000 		.4byte	0x124
 3175 0c4c 01       		.byte	0x1
 3176 0c4d 05       		.byte	0x5
 3177 0c4e 03       		.byte	0x3
 3178 0c4f 00000000 		.4byte	usart2_pckt_bytes
 3179 0c53 0C       		.uleb128 0xc
 3180 0c54 B3050000 		.4byte	0x5b3
 3181 0c58 5E0C0000 		.4byte	0xc5e
 3182 0c5c 25       		.uleb128 0x25
 3183 0c5d 00       		.byte	0
 3184 0c5e 26       		.uleb128 0x26
 3185 0c5f 7D050000 		.4byte	.LASF178
 3186 0c63 02       		.byte	0x2
 3187 0c64 93       		.byte	0x93
 3188 0c65 6B0C0000 		.4byte	0xc6b
 3189 0c69 01       		.byte	0x1
 3190 0c6a 01       		.byte	0x1
 3191 0c6b 0E       		.uleb128 0xe
 3192 0c6c 530C0000 		.4byte	0xc53
 3193 0c70 23       		.uleb128 0x23
 3194 0c71 5E000000 		.4byte	.LASF179
 3195 0c75 02       		.byte	0x2
 3196 0c76 97       		.byte	0x97
 3197 0c77 B9060000 		.4byte	0x6b9
 3198 0c7b 01       		.byte	0x1
 3199 0c7c 05       		.byte	0x5
 3200 0c7d 03       		.byte	0x3
 3201 0c7e 00000000 		.4byte	param_struct
 3202 0c82 23       		.uleb128 0x23
ARM GAS  /tmp/cc0FodwT.s 			page 96


 3203 0c83 F5010000 		.4byte	.LASF180
 3204 0c87 02       		.byte	0x2
 3205 0c88 9A       		.byte	0x9a
 3206 0c89 7D010000 		.4byte	0x17d
 3207 0c8d 01       		.byte	0x1
 3208 0c8e 05       		.byte	0x5
 3209 0c8f 03       		.byte	0x3
 3210 0c90 00000000 		.4byte	power_2secs_acum
 3211 0c94 23       		.uleb128 0x23
 3212 0c95 2A050000 		.4byte	.LASF181
 3213 0c99 02       		.byte	0x2
 3214 0c9a 9B       		.byte	0x9b
 3215 0c9b 24010000 		.4byte	0x124
 3216 0c9f 01       		.byte	0x1
 3217 0ca0 05       		.byte	0x5
 3218 0ca1 03       		.byte	0x3
 3219 0ca2 00000000 		.4byte	power_2secs_index
 3220 0ca6 23       		.uleb128 0x23
 3221 0ca7 D5020000 		.4byte	.LASF182
 3222 0cab 02       		.byte	0x2
 3223 0cac 9C       		.byte	0x9c
 3224 0cad 3D010000 		.4byte	0x13d
 3225 0cb1 01       		.byte	0x1
 3226 0cb2 05       		.byte	0x5
 3227 0cb3 03       		.byte	0x3
 3228 0cb4 00000000 		.4byte	power_minutes
 3229 0cb8 23       		.uleb128 0x23
 3230 0cb9 B5090000 		.4byte	.LASF183
 3231 0cbd 02       		.byte	0x2
 3232 0cbe 9D       		.byte	0x9d
 3233 0cbf 24010000 		.4byte	0x124
 3234 0cc3 01       		.byte	0x1
 3235 0cc4 05       		.byte	0x5
 3236 0cc5 03       		.byte	0x3
 3237 0cc6 00000000 		.4byte	power_minutes_index
 3238 0cca 23       		.uleb128 0x23
 3239 0ccb DA030000 		.4byte	.LASF184
 3240 0ccf 02       		.byte	0x2
 3241 0cd0 9E       		.byte	0x9e
 3242 0cd1 3D010000 		.4byte	0x13d
 3243 0cd5 01       		.byte	0x1
 3244 0cd6 05       		.byte	0x5
 3245 0cd7 03       		.byte	0x3
 3246 0cd8 00000000 		.4byte	power_hours
 3247 0cdc 23       		.uleb128 0x23
 3248 0cdd A7050000 		.4byte	.LASF185
 3249 0ce1 02       		.byte	0x2
 3250 0ce2 A1       		.byte	0xa1
 3251 0ce3 C8080000 		.4byte	0x8c8
 3252 0ce7 01       		.byte	0x1
 3253 0ce8 05       		.byte	0x5
 3254 0ce9 03       		.byte	0x3
 3255 0cea 00000000 		.4byte	gsmNUM
 3256 0cee 0C       		.uleb128 0xc
 3257 0cef B3050000 		.4byte	0x5b3
 3258 0cf3 FE0C0000 		.4byte	0xcfe
 3259 0cf7 0D       		.uleb128 0xd
ARM GAS  /tmp/cc0FodwT.s 			page 97


 3260 0cf8 5D020000 		.4byte	0x25d
 3261 0cfc B3       		.byte	0xb3
 3262 0cfd 00       		.byte	0
 3263 0cfe 23       		.uleb128 0x23
 3264 0cff 88060000 		.4byte	.LASF186
 3265 0d03 02       		.byte	0x2
 3266 0d04 A2       		.byte	0xa2
 3267 0d05 EE0C0000 		.4byte	0xcee
 3268 0d09 01       		.byte	0x1
 3269 0d0a 05       		.byte	0x5
 3270 0d0b 03       		.byte	0x3
 3271 0d0c 00000000 		.4byte	gsmMSG
 3272 0d10 23       		.uleb128 0x23
 3273 0d11 50060000 		.4byte	.LASF187
 3274 0d15 02       		.byte	0x2
 3275 0d16 AA       		.byte	0xaa
 3276 0d17 4E0A0000 		.4byte	0xa4e
 3277 0d1b 01       		.byte	0x1
 3278 0d1c 05       		.byte	0x5
 3279 0d1d 03       		.byte	0x3
 3280 0d1e 00000000 		.4byte	wait_ms_var
 3281 0d22 23       		.uleb128 0x23
 3282 0d23 F1090000 		.4byte	.LASF188
 3283 0d27 02       		.byte	0x2
 3284 0d28 AB       		.byte	0xab
 3285 0d29 4E0A0000 		.4byte	0xa4e
 3286 0d2d 01       		.byte	0x1
 3287 0d2e 05       		.byte	0x5
 3288 0d2f 03       		.byte	0x3
 3289 0d30 00000000 		.4byte	timer_standby
 3290 0d34 23       		.uleb128 0x23
 3291 0d35 17010000 		.4byte	.LASF189
 3292 0d39 02       		.byte	0x2
 3293 0d3a AC       		.byte	0xac
 3294 0d3b 4E0A0000 		.4byte	0xa4e
 3295 0d3f 01       		.byte	0x1
 3296 0d40 05       		.byte	0x5
 3297 0d41 03       		.byte	0x3
 3298 0d42 00000000 		.4byte	tcp_kalive_timer
 3299 0d46 23       		.uleb128 0x23
 3300 0d47 70040000 		.4byte	.LASF190
 3301 0d4b 02       		.byte	0x2
 3302 0d4c AE       		.byte	0xae
 3303 0d4d 650A0000 		.4byte	0xa65
 3304 0d51 01       		.byte	0x1
 3305 0d52 05       		.byte	0x5
 3306 0d53 03       		.byte	0x3
 3307 0d54 00000000 		.4byte	filter_timer
 3308 0d58 23       		.uleb128 0x23
 3309 0d59 10040000 		.4byte	.LASF191
 3310 0d5d 02       		.byte	0x2
 3311 0d5e B3       		.byte	0xb3
 3312 0d5f 4E0A0000 		.4byte	0xa4e
 3313 0d63 01       		.byte	0x1
 3314 0d64 05       		.byte	0x5
 3315 0d65 03       		.byte	0x3
 3316 0d66 00000000 		.4byte	secs
ARM GAS  /tmp/cc0FodwT.s 			page 98


 3317 0d6a 23       		.uleb128 0x23
 3318 0d6b 8F060000 		.4byte	.LASF192
 3319 0d6f 02       		.byte	0x2
 3320 0d70 B4       		.byte	0xb4
 3321 0d71 650A0000 		.4byte	0xa65
 3322 0d75 01       		.byte	0x1
 3323 0d76 05       		.byte	0x5
 3324 0d77 03       		.byte	0x3
 3325 0d78 00000000 		.4byte	hours
 3326 0d7c 23       		.uleb128 0x23
 3327 0d7d 5D020000 		.4byte	.LASF193
 3328 0d81 02       		.byte	0x2
 3329 0d82 B5       		.byte	0xb5
 3330 0d83 650A0000 		.4byte	0xa65
 3331 0d87 01       		.byte	0x1
 3332 0d88 05       		.byte	0x5
 3333 0d89 03       		.byte	0x3
 3334 0d8a 00000000 		.4byte	minutes
 3335 0d8e 0C       		.uleb128 0xc
 3336 0d8f 3D010000 		.4byte	0x13d
 3337 0d93 9E0D0000 		.4byte	0xd9e
 3338 0d97 0D       		.uleb128 0xd
 3339 0d98 5D020000 		.4byte	0x25d
 3340 0d9c 09       		.byte	0x9
 3341 0d9d 00       		.byte	0
 3342 0d9e 23       		.uleb128 0x23
 3343 0d9f 4D010000 		.4byte	.LASF194
 3344 0da3 02       		.byte	0x2
 3345 0da4 B9       		.byte	0xb9
 3346 0da5 8E0D0000 		.4byte	0xd8e
 3347 0da9 01       		.byte	0x1
 3348 0daa 05       		.byte	0x5
 3349 0dab 03       		.byte	0x3
 3350 0dac 00000000 		.4byte	power_vect
 3351 0db0 0C       		.uleb128 0xc
 3352 0db1 3D010000 		.4byte	0x13d
 3353 0db5 C00D0000 		.4byte	0xdc0
 3354 0db9 0D       		.uleb128 0xd
 3355 0dba 5D020000 		.4byte	0x25d
 3356 0dbe 10       		.byte	0x10
 3357 0dbf 00       		.byte	0
 3358 0dc0 23       		.uleb128 0x23
 3359 0dc1 DD090000 		.4byte	.LASF195
 3360 0dc5 02       		.byte	0x2
 3361 0dc6 C7       		.byte	0xc7
 3362 0dc7 B00D0000 		.4byte	0xdb0
 3363 0dcb 01       		.byte	0x1
 3364 0dcc 05       		.byte	0x5
 3365 0dcd 03       		.byte	0x3
 3366 0dce 00000000 		.4byte	vtemp
 3367 0dd2 23       		.uleb128 0x23
 3368 0dd3 E3000000 		.4byte	.LASF196
 3369 0dd7 02       		.byte	0x2
 3370 0dd8 C8       		.byte	0xc8
 3371 0dd9 B00D0000 		.4byte	0xdb0
 3372 0ddd 01       		.byte	0x1
 3373 0dde 05       		.byte	0x5
ARM GAS  /tmp/cc0FodwT.s 			page 99


 3374 0ddf 03       		.byte	0x3
 3375 0de0 00000000 		.4byte	vpote
 3376 0de4 00       		.byte	0
 3377              		.section	.debug_abbrev,"",%progbits
 3378              	.Ldebug_abbrev0:
 3379 0000 01       		.uleb128 0x1
 3380 0001 11       		.uleb128 0x11
 3381 0002 01       		.byte	0x1
 3382 0003 25       		.uleb128 0x25
 3383 0004 0E       		.uleb128 0xe
 3384 0005 13       		.uleb128 0x13
 3385 0006 0B       		.uleb128 0xb
 3386 0007 03       		.uleb128 0x3
 3387 0008 0E       		.uleb128 0xe
 3388 0009 1B       		.uleb128 0x1b
 3389 000a 0E       		.uleb128 0xe
 3390 000b 55       		.uleb128 0x55
 3391 000c 06       		.uleb128 0x6
 3392 000d 11       		.uleb128 0x11
 3393 000e 01       		.uleb128 0x1
 3394 000f 52       		.uleb128 0x52
 3395 0010 01       		.uleb128 0x1
 3396 0011 10       		.uleb128 0x10
 3397 0012 06       		.uleb128 0x6
 3398 0013 00       		.byte	0
 3399 0014 00       		.byte	0
 3400 0015 02       		.uleb128 0x2
 3401 0016 04       		.uleb128 0x4
 3402 0017 01       		.byte	0x1
 3403 0018 03       		.uleb128 0x3
 3404 0019 0E       		.uleb128 0xe
 3405 001a 0B       		.uleb128 0xb
 3406 001b 0B       		.uleb128 0xb
 3407 001c 49       		.uleb128 0x49
 3408 001d 13       		.uleb128 0x13
 3409 001e 3A       		.uleb128 0x3a
 3410 001f 0B       		.uleb128 0xb
 3411 0020 3B       		.uleb128 0x3b
 3412 0021 0B       		.uleb128 0xb
 3413 0022 01       		.uleb128 0x1
 3414 0023 13       		.uleb128 0x13
 3415 0024 00       		.byte	0
 3416 0025 00       		.byte	0
 3417 0026 03       		.uleb128 0x3
 3418 0027 28       		.uleb128 0x28
 3419 0028 00       		.byte	0
 3420 0029 03       		.uleb128 0x3
 3421 002a 0E       		.uleb128 0xe
 3422 002b 1C       		.uleb128 0x1c
 3423 002c 0D       		.uleb128 0xd
 3424 002d 00       		.byte	0
 3425 002e 00       		.byte	0
 3426 002f 04       		.uleb128 0x4
 3427 0030 28       		.uleb128 0x28
 3428 0031 00       		.byte	0
 3429 0032 03       		.uleb128 0x3
 3430 0033 0E       		.uleb128 0xe
ARM GAS  /tmp/cc0FodwT.s 			page 100


 3431 0034 1C       		.uleb128 0x1c
 3432 0035 0B       		.uleb128 0xb
 3433 0036 00       		.byte	0
 3434 0037 00       		.byte	0
 3435 0038 05       		.uleb128 0x5
 3436 0039 24       		.uleb128 0x24
 3437 003a 00       		.byte	0
 3438 003b 0B       		.uleb128 0xb
 3439 003c 0B       		.uleb128 0xb
 3440 003d 3E       		.uleb128 0x3e
 3441 003e 0B       		.uleb128 0xb
 3442 003f 03       		.uleb128 0x3
 3443 0040 0E       		.uleb128 0xe
 3444 0041 00       		.byte	0
 3445 0042 00       		.byte	0
 3446 0043 06       		.uleb128 0x6
 3447 0044 16       		.uleb128 0x16
 3448 0045 00       		.byte	0
 3449 0046 03       		.uleb128 0x3
 3450 0047 0E       		.uleb128 0xe
 3451 0048 3A       		.uleb128 0x3a
 3452 0049 0B       		.uleb128 0xb
 3453 004a 3B       		.uleb128 0x3b
 3454 004b 05       		.uleb128 0x5
 3455 004c 49       		.uleb128 0x49
 3456 004d 13       		.uleb128 0x13
 3457 004e 00       		.byte	0
 3458 004f 00       		.byte	0
 3459 0050 07       		.uleb128 0x7
 3460 0051 16       		.uleb128 0x16
 3461 0052 00       		.byte	0
 3462 0053 03       		.uleb128 0x3
 3463 0054 0E       		.uleb128 0xe
 3464 0055 3A       		.uleb128 0x3a
 3465 0056 0B       		.uleb128 0xb
 3466 0057 3B       		.uleb128 0x3b
 3467 0058 0B       		.uleb128 0xb
 3468 0059 49       		.uleb128 0x49
 3469 005a 13       		.uleb128 0x13
 3470 005b 00       		.byte	0
 3471 005c 00       		.byte	0
 3472 005d 08       		.uleb128 0x8
 3473 005e 24       		.uleb128 0x24
 3474 005f 00       		.byte	0
 3475 0060 0B       		.uleb128 0xb
 3476 0061 0B       		.uleb128 0xb
 3477 0062 3E       		.uleb128 0x3e
 3478 0063 0B       		.uleb128 0xb
 3479 0064 03       		.uleb128 0x3
 3480 0065 08       		.uleb128 0x8
 3481 0066 00       		.byte	0
 3482 0067 00       		.byte	0
 3483 0068 09       		.uleb128 0x9
 3484 0069 13       		.uleb128 0x13
 3485 006a 01       		.byte	0x1
 3486 006b 0B       		.uleb128 0xb
 3487 006c 05       		.uleb128 0x5
ARM GAS  /tmp/cc0FodwT.s 			page 101


 3488 006d 3A       		.uleb128 0x3a
 3489 006e 0B       		.uleb128 0xb
 3490 006f 3B       		.uleb128 0x3b
 3491 0070 0B       		.uleb128 0xb
 3492 0071 01       		.uleb128 0x1
 3493 0072 13       		.uleb128 0x13
 3494 0073 00       		.byte	0
 3495 0074 00       		.byte	0
 3496 0075 0A       		.uleb128 0xa
 3497 0076 0D       		.uleb128 0xd
 3498 0077 00       		.byte	0
 3499 0078 03       		.uleb128 0x3
 3500 0079 0E       		.uleb128 0xe
 3501 007a 3A       		.uleb128 0x3a
 3502 007b 0B       		.uleb128 0xb
 3503 007c 3B       		.uleb128 0x3b
 3504 007d 0B       		.uleb128 0xb
 3505 007e 49       		.uleb128 0x49
 3506 007f 13       		.uleb128 0x13
 3507 0080 38       		.uleb128 0x38
 3508 0081 0A       		.uleb128 0xa
 3509 0082 00       		.byte	0
 3510 0083 00       		.byte	0
 3511 0084 0B       		.uleb128 0xb
 3512 0085 0D       		.uleb128 0xd
 3513 0086 00       		.byte	0
 3514 0087 03       		.uleb128 0x3
 3515 0088 08       		.uleb128 0x8
 3516 0089 3A       		.uleb128 0x3a
 3517 008a 0B       		.uleb128 0xb
 3518 008b 3B       		.uleb128 0x3b
 3519 008c 0B       		.uleb128 0xb
 3520 008d 49       		.uleb128 0x49
 3521 008e 13       		.uleb128 0x13
 3522 008f 38       		.uleb128 0x38
 3523 0090 0A       		.uleb128 0xa
 3524 0091 00       		.byte	0
 3525 0092 00       		.byte	0
 3526 0093 0C       		.uleb128 0xc
 3527 0094 01       		.uleb128 0x1
 3528 0095 01       		.byte	0x1
 3529 0096 49       		.uleb128 0x49
 3530 0097 13       		.uleb128 0x13
 3531 0098 01       		.uleb128 0x1
 3532 0099 13       		.uleb128 0x13
 3533 009a 00       		.byte	0
 3534 009b 00       		.byte	0
 3535 009c 0D       		.uleb128 0xd
 3536 009d 21       		.uleb128 0x21
 3537 009e 00       		.byte	0
 3538 009f 49       		.uleb128 0x49
 3539 00a0 13       		.uleb128 0x13
 3540 00a1 2F       		.uleb128 0x2f
 3541 00a2 0B       		.uleb128 0xb
 3542 00a3 00       		.byte	0
 3543 00a4 00       		.byte	0
 3544 00a5 0E       		.uleb128 0xe
ARM GAS  /tmp/cc0FodwT.s 			page 102


 3545 00a6 35       		.uleb128 0x35
 3546 00a7 00       		.byte	0
 3547 00a8 49       		.uleb128 0x49
 3548 00a9 13       		.uleb128 0x13
 3549 00aa 00       		.byte	0
 3550 00ab 00       		.byte	0
 3551 00ac 0F       		.uleb128 0xf
 3552 00ad 13       		.uleb128 0x13
 3553 00ae 01       		.byte	0x1
 3554 00af 0B       		.uleb128 0xb
 3555 00b0 0B       		.uleb128 0xb
 3556 00b1 3A       		.uleb128 0x3a
 3557 00b2 0B       		.uleb128 0xb
 3558 00b3 3B       		.uleb128 0x3b
 3559 00b4 0B       		.uleb128 0xb
 3560 00b5 01       		.uleb128 0x1
 3561 00b6 13       		.uleb128 0x13
 3562 00b7 00       		.byte	0
 3563 00b8 00       		.byte	0
 3564 00b9 10       		.uleb128 0x10
 3565 00ba 26       		.uleb128 0x26
 3566 00bb 00       		.byte	0
 3567 00bc 49       		.uleb128 0x49
 3568 00bd 13       		.uleb128 0x13
 3569 00be 00       		.byte	0
 3570 00bf 00       		.byte	0
 3571 00c0 11       		.uleb128 0x11
 3572 00c1 0D       		.uleb128 0xd
 3573 00c2 00       		.byte	0
 3574 00c3 03       		.uleb128 0x3
 3575 00c4 08       		.uleb128 0x8
 3576 00c5 3A       		.uleb128 0x3a
 3577 00c6 0B       		.uleb128 0xb
 3578 00c7 3B       		.uleb128 0x3b
 3579 00c8 05       		.uleb128 0x5
 3580 00c9 49       		.uleb128 0x49
 3581 00ca 13       		.uleb128 0x13
 3582 00cb 38       		.uleb128 0x38
 3583 00cc 0A       		.uleb128 0xa
 3584 00cd 00       		.byte	0
 3585 00ce 00       		.byte	0
 3586 00cf 12       		.uleb128 0x12
 3587 00d0 0D       		.uleb128 0xd
 3588 00d1 00       		.byte	0
 3589 00d2 03       		.uleb128 0x3
 3590 00d3 0E       		.uleb128 0xe
 3591 00d4 3A       		.uleb128 0x3a
 3592 00d5 0B       		.uleb128 0xb
 3593 00d6 3B       		.uleb128 0x3b
 3594 00d7 05       		.uleb128 0x5
 3595 00d8 49       		.uleb128 0x49
 3596 00d9 13       		.uleb128 0x13
 3597 00da 38       		.uleb128 0x38
 3598 00db 0A       		.uleb128 0xa
 3599 00dc 00       		.byte	0
 3600 00dd 00       		.byte	0
 3601 00de 13       		.uleb128 0x13
ARM GAS  /tmp/cc0FodwT.s 			page 103


 3602 00df 13       		.uleb128 0x13
 3603 00e0 01       		.byte	0x1
 3604 00e1 0B       		.uleb128 0xb
 3605 00e2 0B       		.uleb128 0xb
 3606 00e3 3A       		.uleb128 0x3a
 3607 00e4 0B       		.uleb128 0xb
 3608 00e5 3B       		.uleb128 0x3b
 3609 00e6 05       		.uleb128 0x5
 3610 00e7 01       		.uleb128 0x1
 3611 00e8 13       		.uleb128 0x13
 3612 00e9 00       		.byte	0
 3613 00ea 00       		.byte	0
 3614 00eb 14       		.uleb128 0x14
 3615 00ec 04       		.uleb128 0x4
 3616 00ed 01       		.byte	0x1
 3617 00ee 0B       		.uleb128 0xb
 3618 00ef 0B       		.uleb128 0xb
 3619 00f0 49       		.uleb128 0x49
 3620 00f1 13       		.uleb128 0x13
 3621 00f2 3A       		.uleb128 0x3a
 3622 00f3 0B       		.uleb128 0xb
 3623 00f4 3B       		.uleb128 0x3b
 3624 00f5 0B       		.uleb128 0xb
 3625 00f6 01       		.uleb128 0x1
 3626 00f7 13       		.uleb128 0x13
 3627 00f8 00       		.byte	0
 3628 00f9 00       		.byte	0
 3629 00fa 15       		.uleb128 0x15
 3630 00fb 13       		.uleb128 0x13
 3631 00fc 01       		.byte	0x1
 3632 00fd 03       		.uleb128 0x3
 3633 00fe 0E       		.uleb128 0xe
 3634 00ff 0B       		.uleb128 0xb
 3635 0100 0B       		.uleb128 0xb
 3636 0101 3A       		.uleb128 0x3a
 3637 0102 0B       		.uleb128 0xb
 3638 0103 3B       		.uleb128 0x3b
 3639 0104 0B       		.uleb128 0xb
 3640 0105 01       		.uleb128 0x1
 3641 0106 13       		.uleb128 0x13
 3642 0107 00       		.byte	0
 3643 0108 00       		.byte	0
 3644 0109 16       		.uleb128 0x16
 3645 010a 2E       		.uleb128 0x2e
 3646 010b 01       		.byte	0x1
 3647 010c 03       		.uleb128 0x3
 3648 010d 0E       		.uleb128 0xe
 3649 010e 3A       		.uleb128 0x3a
 3650 010f 0B       		.uleb128 0xb
 3651 0110 3B       		.uleb128 0x3b
 3652 0111 05       		.uleb128 0x5
 3653 0112 27       		.uleb128 0x27
 3654 0113 0C       		.uleb128 0xc
 3655 0114 11       		.uleb128 0x11
 3656 0115 01       		.uleb128 0x1
 3657 0116 12       		.uleb128 0x12
 3658 0117 01       		.uleb128 0x1
ARM GAS  /tmp/cc0FodwT.s 			page 104


 3659 0118 40       		.uleb128 0x40
 3660 0119 06       		.uleb128 0x6
 3661 011a 9742     		.uleb128 0x2117
 3662 011c 0C       		.uleb128 0xc
 3663 011d 01       		.uleb128 0x1
 3664 011e 13       		.uleb128 0x13
 3665 011f 00       		.byte	0
 3666 0120 00       		.byte	0
 3667 0121 17       		.uleb128 0x17
 3668 0122 05       		.uleb128 0x5
 3669 0123 00       		.byte	0
 3670 0124 03       		.uleb128 0x3
 3671 0125 0E       		.uleb128 0xe
 3672 0126 3A       		.uleb128 0x3a
 3673 0127 0B       		.uleb128 0xb
 3674 0128 3B       		.uleb128 0x3b
 3675 0129 05       		.uleb128 0x5
 3676 012a 49       		.uleb128 0x49
 3677 012b 13       		.uleb128 0x13
 3678 012c 02       		.uleb128 0x2
 3679 012d 0A       		.uleb128 0xa
 3680 012e 00       		.byte	0
 3681 012f 00       		.byte	0
 3682 0130 18       		.uleb128 0x18
 3683 0131 2E       		.uleb128 0x2e
 3684 0132 01       		.byte	0x1
 3685 0133 03       		.uleb128 0x3
 3686 0134 0E       		.uleb128 0xe
 3687 0135 3A       		.uleb128 0x3a
 3688 0136 0B       		.uleb128 0xb
 3689 0137 3B       		.uleb128 0x3b
 3690 0138 05       		.uleb128 0x5
 3691 0139 27       		.uleb128 0x27
 3692 013a 0C       		.uleb128 0xc
 3693 013b 49       		.uleb128 0x49
 3694 013c 13       		.uleb128 0x13
 3695 013d 11       		.uleb128 0x11
 3696 013e 01       		.uleb128 0x1
 3697 013f 12       		.uleb128 0x12
 3698 0140 01       		.uleb128 0x1
 3699 0141 40       		.uleb128 0x40
 3700 0142 06       		.uleb128 0x6
 3701 0143 9642     		.uleb128 0x2116
 3702 0145 0C       		.uleb128 0xc
 3703 0146 01       		.uleb128 0x1
 3704 0147 13       		.uleb128 0x13
 3705 0148 00       		.byte	0
 3706 0149 00       		.byte	0
 3707 014a 19       		.uleb128 0x19
 3708 014b 2E       		.uleb128 0x2e
 3709 014c 01       		.byte	0x1
 3710 014d 3F       		.uleb128 0x3f
 3711 014e 0C       		.uleb128 0xc
 3712 014f 03       		.uleb128 0x3
 3713 0150 0E       		.uleb128 0xe
 3714 0151 3A       		.uleb128 0x3a
 3715 0152 0B       		.uleb128 0xb
ARM GAS  /tmp/cc0FodwT.s 			page 105


 3716 0153 3B       		.uleb128 0x3b
 3717 0154 0B       		.uleb128 0xb
 3718 0155 27       		.uleb128 0x27
 3719 0156 0C       		.uleb128 0xc
 3720 0157 49       		.uleb128 0x49
 3721 0158 13       		.uleb128 0x13
 3722 0159 11       		.uleb128 0x11
 3723 015a 01       		.uleb128 0x1
 3724 015b 12       		.uleb128 0x12
 3725 015c 01       		.uleb128 0x1
 3726 015d 40       		.uleb128 0x40
 3727 015e 06       		.uleb128 0x6
 3728 015f 9642     		.uleb128 0x2116
 3729 0161 0C       		.uleb128 0xc
 3730 0162 01       		.uleb128 0x1
 3731 0163 13       		.uleb128 0x13
 3732 0164 00       		.byte	0
 3733 0165 00       		.byte	0
 3734 0166 1A       		.uleb128 0x1a
 3735 0167 34       		.uleb128 0x34
 3736 0168 00       		.byte	0
 3737 0169 03       		.uleb128 0x3
 3738 016a 08       		.uleb128 0x8
 3739 016b 3A       		.uleb128 0x3a
 3740 016c 0B       		.uleb128 0xb
 3741 016d 3B       		.uleb128 0x3b
 3742 016e 0B       		.uleb128 0xb
 3743 016f 49       		.uleb128 0x49
 3744 0170 13       		.uleb128 0x13
 3745 0171 02       		.uleb128 0x2
 3746 0172 0A       		.uleb128 0xa
 3747 0173 00       		.byte	0
 3748 0174 00       		.byte	0
 3749 0175 1B       		.uleb128 0x1b
 3750 0176 34       		.uleb128 0x34
 3751 0177 00       		.byte	0
 3752 0178 03       		.uleb128 0x3
 3753 0179 08       		.uleb128 0x8
 3754 017a 3A       		.uleb128 0x3a
 3755 017b 0B       		.uleb128 0xb
 3756 017c 3B       		.uleb128 0x3b
 3757 017d 0B       		.uleb128 0xb
 3758 017e 49       		.uleb128 0x49
 3759 017f 13       		.uleb128 0x13
 3760 0180 00       		.byte	0
 3761 0181 00       		.byte	0
 3762 0182 1C       		.uleb128 0x1c
 3763 0183 34       		.uleb128 0x34
 3764 0184 00       		.byte	0
 3765 0185 03       		.uleb128 0x3
 3766 0186 0E       		.uleb128 0xe
 3767 0187 3A       		.uleb128 0x3a
 3768 0188 0B       		.uleb128 0xb
 3769 0189 3B       		.uleb128 0x3b
 3770 018a 0B       		.uleb128 0xb
 3771 018b 49       		.uleb128 0x49
 3772 018c 13       		.uleb128 0x13
ARM GAS  /tmp/cc0FodwT.s 			page 106


 3773 018d 00       		.byte	0
 3774 018e 00       		.byte	0
 3775 018f 1D       		.uleb128 0x1d
 3776 0190 34       		.uleb128 0x34
 3777 0191 00       		.byte	0
 3778 0192 03       		.uleb128 0x3
 3779 0193 0E       		.uleb128 0xe
 3780 0194 3A       		.uleb128 0x3a
 3781 0195 0B       		.uleb128 0xb
 3782 0196 3B       		.uleb128 0x3b
 3783 0197 0B       		.uleb128 0xb
 3784 0198 49       		.uleb128 0x49
 3785 0199 13       		.uleb128 0x13
 3786 019a 02       		.uleb128 0x2
 3787 019b 0A       		.uleb128 0xa
 3788 019c 00       		.byte	0
 3789 019d 00       		.byte	0
 3790 019e 1E       		.uleb128 0x1e
 3791 019f 0F       		.uleb128 0xf
 3792 01a0 00       		.byte	0
 3793 01a1 0B       		.uleb128 0xb
 3794 01a2 0B       		.uleb128 0xb
 3795 01a3 49       		.uleb128 0x49
 3796 01a4 13       		.uleb128 0x13
 3797 01a5 00       		.byte	0
 3798 01a6 00       		.byte	0
 3799 01a7 1F       		.uleb128 0x1f
 3800 01a8 2E       		.uleb128 0x2e
 3801 01a9 01       		.byte	0x1
 3802 01aa 3F       		.uleb128 0x3f
 3803 01ab 0C       		.uleb128 0xc
 3804 01ac 03       		.uleb128 0x3
 3805 01ad 0E       		.uleb128 0xe
 3806 01ae 3A       		.uleb128 0x3a
 3807 01af 0B       		.uleb128 0xb
 3808 01b0 3B       		.uleb128 0x3b
 3809 01b1 05       		.uleb128 0x5
 3810 01b2 27       		.uleb128 0x27
 3811 01b3 0C       		.uleb128 0xc
 3812 01b4 11       		.uleb128 0x11
 3813 01b5 01       		.uleb128 0x1
 3814 01b6 12       		.uleb128 0x12
 3815 01b7 01       		.uleb128 0x1
 3816 01b8 40       		.uleb128 0x40
 3817 01b9 06       		.uleb128 0x6
 3818 01ba 9642     		.uleb128 0x2116
 3819 01bc 0C       		.uleb128 0xc
 3820 01bd 01       		.uleb128 0x1
 3821 01be 13       		.uleb128 0x13
 3822 01bf 00       		.byte	0
 3823 01c0 00       		.byte	0
 3824 01c1 20       		.uleb128 0x20
 3825 01c2 34       		.uleb128 0x34
 3826 01c3 00       		.byte	0
 3827 01c4 03       		.uleb128 0x3
 3828 01c5 08       		.uleb128 0x8
 3829 01c6 3A       		.uleb128 0x3a
ARM GAS  /tmp/cc0FodwT.s 			page 107


 3830 01c7 0B       		.uleb128 0xb
 3831 01c8 3B       		.uleb128 0x3b
 3832 01c9 05       		.uleb128 0x5
 3833 01ca 49       		.uleb128 0x49
 3834 01cb 13       		.uleb128 0x13
 3835 01cc 02       		.uleb128 0x2
 3836 01cd 0A       		.uleb128 0xa
 3837 01ce 00       		.byte	0
 3838 01cf 00       		.byte	0
 3839 01d0 21       		.uleb128 0x21
 3840 01d1 34       		.uleb128 0x34
 3841 01d2 00       		.byte	0
 3842 01d3 03       		.uleb128 0x3
 3843 01d4 0E       		.uleb128 0xe
 3844 01d5 3A       		.uleb128 0x3a
 3845 01d6 0B       		.uleb128 0xb
 3846 01d7 3B       		.uleb128 0x3b
 3847 01d8 05       		.uleb128 0x5
 3848 01d9 49       		.uleb128 0x49
 3849 01da 13       		.uleb128 0x13
 3850 01db 02       		.uleb128 0x2
 3851 01dc 0A       		.uleb128 0xa
 3852 01dd 00       		.byte	0
 3853 01de 00       		.byte	0
 3854 01df 22       		.uleb128 0x22
 3855 01e0 2E       		.uleb128 0x2e
 3856 01e1 00       		.byte	0
 3857 01e2 3F       		.uleb128 0x3f
 3858 01e3 0C       		.uleb128 0xc
 3859 01e4 03       		.uleb128 0x3
 3860 01e5 0E       		.uleb128 0xe
 3861 01e6 3A       		.uleb128 0x3a
 3862 01e7 0B       		.uleb128 0xb
 3863 01e8 3B       		.uleb128 0x3b
 3864 01e9 05       		.uleb128 0x5
 3865 01ea 27       		.uleb128 0x27
 3866 01eb 0C       		.uleb128 0xc
 3867 01ec 11       		.uleb128 0x11
 3868 01ed 01       		.uleb128 0x1
 3869 01ee 12       		.uleb128 0x12
 3870 01ef 01       		.uleb128 0x1
 3871 01f0 40       		.uleb128 0x40
 3872 01f1 06       		.uleb128 0x6
 3873 01f2 9642     		.uleb128 0x2116
 3874 01f4 0C       		.uleb128 0xc
 3875 01f5 00       		.byte	0
 3876 01f6 00       		.byte	0
 3877 01f7 23       		.uleb128 0x23
 3878 01f8 34       		.uleb128 0x34
 3879 01f9 00       		.byte	0
 3880 01fa 03       		.uleb128 0x3
 3881 01fb 0E       		.uleb128 0xe
 3882 01fc 3A       		.uleb128 0x3a
 3883 01fd 0B       		.uleb128 0xb
 3884 01fe 3B       		.uleb128 0x3b
 3885 01ff 0B       		.uleb128 0xb
 3886 0200 49       		.uleb128 0x49
ARM GAS  /tmp/cc0FodwT.s 			page 108


 3887 0201 13       		.uleb128 0x13
 3888 0202 3F       		.uleb128 0x3f
 3889 0203 0C       		.uleb128 0xc
 3890 0204 02       		.uleb128 0x2
 3891 0205 0A       		.uleb128 0xa
 3892 0206 00       		.byte	0
 3893 0207 00       		.byte	0
 3894 0208 24       		.uleb128 0x24
 3895 0209 34       		.uleb128 0x34
 3896 020a 00       		.byte	0
 3897 020b 03       		.uleb128 0x3
 3898 020c 08       		.uleb128 0x8
 3899 020d 3A       		.uleb128 0x3a
 3900 020e 0B       		.uleb128 0xb
 3901 020f 3B       		.uleb128 0x3b
 3902 0210 0B       		.uleb128 0xb
 3903 0211 49       		.uleb128 0x49
 3904 0212 13       		.uleb128 0x13
 3905 0213 3F       		.uleb128 0x3f
 3906 0214 0C       		.uleb128 0xc
 3907 0215 02       		.uleb128 0x2
 3908 0216 0A       		.uleb128 0xa
 3909 0217 00       		.byte	0
 3910 0218 00       		.byte	0
 3911 0219 25       		.uleb128 0x25
 3912 021a 21       		.uleb128 0x21
 3913 021b 00       		.byte	0
 3914 021c 00       		.byte	0
 3915 021d 00       		.byte	0
 3916 021e 26       		.uleb128 0x26
 3917 021f 34       		.uleb128 0x34
 3918 0220 00       		.byte	0
 3919 0221 03       		.uleb128 0x3
 3920 0222 0E       		.uleb128 0xe
 3921 0223 3A       		.uleb128 0x3a
 3922 0224 0B       		.uleb128 0xb
 3923 0225 3B       		.uleb128 0x3b
 3924 0226 0B       		.uleb128 0xb
 3925 0227 49       		.uleb128 0x49
 3926 0228 13       		.uleb128 0x13
 3927 0229 3F       		.uleb128 0x3f
 3928 022a 0C       		.uleb128 0xc
 3929 022b 3C       		.uleb128 0x3c
 3930 022c 0C       		.uleb128 0xc
 3931 022d 00       		.byte	0
 3932 022e 00       		.byte	0
 3933 022f 00       		.byte	0
 3934              		.section	.debug_loc,"",%progbits
 3935              	.Ldebug_loc0:
 3936              	.LLST0:
 3937 0000 00000000 		.4byte	.LFB16
 3938 0004 02000000 		.4byte	.LCFI0
 3939 0008 0200     		.2byte	0x2
 3940 000a 7D       		.byte	0x7d
 3941 000b 00       		.sleb128 0
 3942 000c 02000000 		.4byte	.LCFI0
 3943 0010 04000000 		.4byte	.LCFI1
ARM GAS  /tmp/cc0FodwT.s 			page 109


 3944 0014 0200     		.2byte	0x2
 3945 0016 7D       		.byte	0x7d
 3946 0017 0C       		.sleb128 12
 3947 0018 04000000 		.4byte	.LCFI1
 3948 001c EC000000 		.4byte	.LFE16
 3949 0020 0200     		.2byte	0x2
 3950 0022 7D       		.byte	0x7d
 3951 0023 18       		.sleb128 24
 3952 0024 00000000 		.4byte	0
 3953 0028 00000000 		.4byte	0
 3954              	.LLST1:
 3955 002c 00000000 		.4byte	.LFB18
 3956 0030 02000000 		.4byte	.LCFI2
 3957 0034 0200     		.2byte	0x2
 3958 0036 7D       		.byte	0x7d
 3959 0037 00       		.sleb128 0
 3960 0038 02000000 		.4byte	.LCFI2
 3961 003c 04000000 		.4byte	.LCFI3
 3962 0040 0200     		.2byte	0x2
 3963 0042 7D       		.byte	0x7d
 3964 0043 04       		.sleb128 4
 3965 0044 04000000 		.4byte	.LCFI3
 3966 0048 48000000 		.4byte	.LFE18
 3967 004c 0200     		.2byte	0x2
 3968 004e 7D       		.byte	0x7d
 3969 004f 10       		.sleb128 16
 3970 0050 00000000 		.4byte	0
 3971 0054 00000000 		.4byte	0
 3972              	.LLST2:
 3973 0058 00000000 		.4byte	.LFB20
 3974 005c 02000000 		.4byte	.LCFI4
 3975 0060 0200     		.2byte	0x2
 3976 0062 7D       		.byte	0x7d
 3977 0063 00       		.sleb128 0
 3978 0064 02000000 		.4byte	.LCFI4
 3979 0068 04000000 		.4byte	.LCFI5
 3980 006c 0200     		.2byte	0x2
 3981 006e 7D       		.byte	0x7d
 3982 006f 0C       		.sleb128 12
 3983 0070 04000000 		.4byte	.LCFI5
 3984 0074 E0040000 		.4byte	.LFE20
 3985 0078 0300     		.2byte	0x3
 3986 007a 7D       		.byte	0x7d
 3987 007b D000     		.sleb128 80
 3988 007d 00000000 		.4byte	0
 3989 0081 00000000 		.4byte	0
 3990              	.LLST3:
 3991 0085 00000000 		.4byte	.LFB21
 3992 0089 02000000 		.4byte	.LCFI6
 3993 008d 0200     		.2byte	0x2
 3994 008f 7D       		.byte	0x7d
 3995 0090 00       		.sleb128 0
 3996 0091 02000000 		.4byte	.LCFI6
 3997 0095 04000000 		.4byte	.LCFI7
 3998 0099 0200     		.2byte	0x2
 3999 009b 7D       		.byte	0x7d
 4000 009c 04       		.sleb128 4
ARM GAS  /tmp/cc0FodwT.s 			page 110


 4001 009d 04000000 		.4byte	.LCFI7
 4002 00a1 B0000000 		.4byte	.LFE21
 4003 00a5 0300     		.2byte	0x3
 4004 00a7 7D       		.byte	0x7d
 4005 00a8 E000     		.sleb128 96
 4006 00aa 00000000 		.4byte	0
 4007 00ae 00000000 		.4byte	0
 4008              	.LLST4:
 4009 00b2 00000000 		.4byte	.LFB22
 4010 00b6 02000000 		.4byte	.LCFI8
 4011 00ba 0200     		.2byte	0x2
 4012 00bc 7D       		.byte	0x7d
 4013 00bd 00       		.sleb128 0
 4014 00be 02000000 		.4byte	.LCFI8
 4015 00c2 64010000 		.4byte	.LFE22
 4016 00c6 0200     		.2byte	0x2
 4017 00c8 7D       		.byte	0x7d
 4018 00c9 08       		.sleb128 8
 4019 00ca 00000000 		.4byte	0
 4020 00ce 00000000 		.4byte	0
 4021              		.section	.debug_aranges,"",%progbits
 4022 0000 3C000000 		.4byte	0x3c
 4023 0004 0200     		.2byte	0x2
 4024 0006 00000000 		.4byte	.Ldebug_info0
 4025 000a 04       		.byte	0x4
 4026 000b 00       		.byte	0
 4027 000c 0000     		.2byte	0
 4028 000e 0000     		.2byte	0
 4029 0010 00000000 		.4byte	.LFB16
 4030 0014 EC000000 		.4byte	.LFE16-.LFB16
 4031 0018 00000000 		.4byte	.LFB18
 4032 001c 48000000 		.4byte	.LFE18-.LFB18
 4033 0020 00000000 		.4byte	.LFB20
 4034 0024 E0040000 		.4byte	.LFE20-.LFB20
 4035 0028 00000000 		.4byte	.LFB21
 4036 002c B0000000 		.4byte	.LFE21-.LFB21
 4037 0030 00000000 		.4byte	.LFB22
 4038 0034 64010000 		.4byte	.LFE22-.LFB22
 4039 0038 00000000 		.4byte	0
 4040 003c 00000000 		.4byte	0
 4041              		.section	.debug_ranges,"",%progbits
 4042              	.Ldebug_ranges0:
 4043 0000 00000000 		.4byte	.LFB16
 4044 0004 EC000000 		.4byte	.LFE16
 4045 0008 00000000 		.4byte	.LFB18
 4046 000c 48000000 		.4byte	.LFE18
 4047 0010 00000000 		.4byte	.LFB20
 4048 0014 E0040000 		.4byte	.LFE20
 4049 0018 00000000 		.4byte	.LFB21
 4050 001c B0000000 		.4byte	.LFE21
 4051 0020 00000000 		.4byte	.LFB22
 4052 0024 64010000 		.4byte	.LFE22
 4053 0028 00000000 		.4byte	0
 4054 002c 00000000 		.4byte	0
 4055              		.section	.debug_line,"",%progbits
 4056              	.Ldebug_line0:
 4057 0000 9E020000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  /tmp/cc0FodwT.s 			page 111


 4057      02003D01 
 4057      00000201 
 4057      FB0E0D00 
 4057      01010101 
 4058              	.LASF133:
 4059 0000 735F6C63 		.ascii	"s_lcd\000"
 4059      6400
 4060              	.LASF104:
 4061 0006 70776D5F 		.ascii	"pwm_channel_1\000"
 4061      6368616E 
 4061      6E656C5F 
 4061      3100
 4062              	.LASF105:
 4063 0014 70776D5F 		.ascii	"pwm_channel_2\000"
 4063      6368616E 
 4063      6E656C5F 
 4063      3200
 4064              	.LASF106:
 4065 0022 70776D5F 		.ascii	"pwm_channel_3\000"
 4065      6368616E 
 4065      6E656C5F 
 4065      3300
 4066              	.LASF107:
 4067 0030 70776D5F 		.ascii	"pwm_channel_4\000"
 4067      6368616E 
 4067      6E656C5F 
 4067      3400
 4068              	.LASF128:
 4069 003e 7A65726F 		.ascii	"zero_current_loc\000"
 4069      5F637572 
 4069      72656E74 
 4069      5F6C6F63 
 4069      00
 4070              	.LASF154:
 4071 004f 61637377 		.ascii	"acswitch_timer\000"
 4071      69746368 
 4071      5F74696D 
 4071      657200
 4072              	.LASF179:
 4073 005e 70617261 		.ascii	"param_struct\000"
 4073      6D5F7374 
 4073      72756374 
 4073      00
 4074              	.LASF99:
 4075 006b 6C617374 		.ascii	"last_program_deep_in_flash\000"
 4075      5F70726F 
 4075      6772616D 
 4075      5F646565 
 4075      705F696E 
 4076              	.LASF12:
 4077 0086 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4077      345F3135 
 4077      5F495251 
 4077      6E00
 4078              	.LASF83:
 4079 0094 42535252 		.ascii	"BSRR\000"
 4079      00
ARM GAS  /tmp/cc0FodwT.s 			page 112


 4080              	.LASF97:
 4081 0099 6C617374 		.ascii	"last_function_in_flash\000"
 4081      5F66756E 
 4081      6374696F 
 4081      6E5F696E 
 4081      5F666C61 
 4082              	.LASF11:
 4083 00b0 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4083      325F335F 
 4083      4952516E 
 4083      00
 4084              	.LASF129:
 4085 00bd 6D61696E 		.ascii	"main_state\000"
 4085      5F737461 
 4085      746500
 4086              	.LASF141:
 4087 00c8 705F6D65 		.ascii	"p_mem_init\000"
 4087      6D5F696E 
 4087      697400
 4088              	.LASF2:
 4089 00d3 5356435F 		.ascii	"SVC_IRQn\000"
 4089      4952516E 
 4089      00
 4090              	.LASF143:
 4091 00dc 62756666 		.ascii	"buffer\000"
 4091      657200
 4092              	.LASF196:
 4093 00e3 76706F74 		.ascii	"vpote\000"
 4093      6500
 4094              	.LASF201:
 4095 00e9 4E564943 		.ascii	"NVIC_SetPriority\000"
 4095      5F536574 
 4095      5072696F 
 4095      72697479 
 4095      00
 4096              	.LASF47:
 4097 00fa 756E7369 		.ascii	"unsigned int\000"
 4097      676E6564 
 4097      20696E74 
 4097      00
 4098              	.LASF71:
 4099 0107 4C4F4144 		.ascii	"LOAD\000"
 4099      00
 4100              	.LASF25:
 4101 010c 54494D31 		.ascii	"TIM16_IRQn\000"
 4101      365F4952 
 4101      516E00
 4102              	.LASF189:
 4103 0117 7463705F 		.ascii	"tcp_kalive_timer\000"
 4103      6B616C69 
 4103      76655F74 
 4103      696D6572 
 4103      00
 4104              	.LASF41:
 4105 0128 5F5F696E 		.ascii	"__int32_t\000"
 4105      7433325F 
 4105      7400
ARM GAS  /tmp/cc0FodwT.s 			page 113


 4106              	.LASF149:
 4107 0132 72783262 		.ascii	"rx2buff\000"
 4107      75666600 
 4108              	.LASF8:
 4109 013a 464C4153 		.ascii	"FLASH_IRQn\000"
 4109      485F4952 
 4109      516E00
 4110              	.LASF151:
 4111 0145 72783162 		.ascii	"rx1buff\000"
 4111      75666600 
 4112              	.LASF194:
 4113 014d 706F7765 		.ascii	"power_vect\000"
 4113      725F7665 
 4113      637400
 4114              	.LASF100:
 4115 0158 64756D6D 		.ascii	"dummy\000"
 4115      7900
 4116              	.LASF72:
 4117 015e 43414C49 		.ascii	"CALIB\000"
 4117      4200
 4118              	.LASF175:
 4119 0164 75736172 		.ascii	"usart2_pckt_ready\000"
 4119      74325F70 
 4119      636B745F 
 4119      72656164 
 4119      7900
 4120              	.LASF148:
 4121 0176 74783262 		.ascii	"tx2buff\000"
 4121      75666600 
 4122              	.LASF10:
 4123 017e 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4123      305F315F 
 4123      4952516E 
 4123      00
 4124              	.LASF159:
 4125 018b 67726F75 		.ascii	"grouped_master_timeout_timer\000"
 4125      7065645F 
 4125      6D617374 
 4125      65725F74 
 4125      696D656F 
 4126              	.LASF27:
 4127 01a8 49324331 		.ascii	"I2C1_IRQn\000"
 4127      5F495251 
 4127      6E00
 4128              	.LASF3:
 4129 01b2 50656E64 		.ascii	"PendSV_IRQn\000"
 4129      53565F49 
 4129      52516E00 
 4130              	.LASF176:
 4131 01be 75736172 		.ascii	"usart2_have_data\000"
 4131      74325F68 
 4131      6176655F 
 4131      64617461 
 4131      00
 4132              	.LASF9:
 4133 01cf 5243435F 		.ascii	"RCC_IRQn\000"
 4133      4952516E 
ARM GAS  /tmp/cc0FodwT.s 			page 114


 4133      00
 4134              	.LASF127:
 4135 01d8 6663616C 		.ascii	"fcalc\000"
 4135      6300
 4136              	.LASF138:
 4137 01de 73686F77 		.ascii	"show_ldr\000"
 4137      5F6C6472 
 4137      00
 4138              	.LASF51:
 4139 01e7 75696E74 		.ascii	"uint32_t\000"
 4139      33325F74 
 4139      00
 4140              	.LASF52:
 4141 01f0 49534552 		.ascii	"ISER\000"
 4141      00
 4142              	.LASF180:
 4143 01f5 706F7765 		.ascii	"power_2secs_acum\000"
 4143      725F3273 
 4143      6563735F 
 4143      6163756D 
 4143      00
 4144              	.LASF142:
 4145 0206 666C6F61 		.ascii	"float\000"
 4145      7400
 4146              	.LASF131:
 4147 020c 68797374 		.ascii	"hyst\000"
 4147      00
 4148              	.LASF55:
 4149 0211 52534552 		.ascii	"RSERVED1\000"
 4149      56454431 
 4149      00
 4150              	.LASF29:
 4151 021a 53504931 		.ascii	"SPI1_IRQn\000"
 4151      5F495251 
 4151      6E00
 4152              	.LASF46:
 4153 0224 6C6F6E67 		.ascii	"long long unsigned int\000"
 4153      206C6F6E 
 4153      6720756E 
 4153      7369676E 
 4153      65642069 
 4154              	.LASF68:
 4155 023b 44465352 		.ascii	"DFSR\000"
 4155      00
 4156              	.LASF173:
 4157 0240 75736172 		.ascii	"usart1_pckt_bytes\000"
 4157      74315F70 
 4157      636B745F 
 4157      62797465 
 4157      7300
 4158              	.LASF39:
 4159 0252 5F5F7569 		.ascii	"__uint16_t\000"
 4159      6E743136 
 4159      5F7400
 4160              	.LASF193:
 4161 025d 6D696E75 		.ascii	"minutes\000"
 4161      74657300 
ARM GAS  /tmp/cc0FodwT.s 			page 115


 4162              	.LASF79:
 4163 0265 4D4F4445 		.ascii	"MODER\000"
 4163      5200
 4164              	.LASF77:
 4165 026b 43485345 		.ascii	"CHSELR\000"
 4165      4C5200
 4166              	.LASF171:
 4167 0272 75736172 		.ascii	"usart1_pckt_ready\000"
 4167      74315F70 
 4167      636B745F 
 4167      72656164 
 4167      7900
 4168              	.LASF34:
 4169 0284 4952516E 		.ascii	"IRQn_Type\000"
 4169      5F547970 
 4169      6500
 4170              	.LASF110:
 4171 028e 5463704D 		.ascii	"TcpMessages\000"
 4171      65737361 
 4171      67657300 
 4172              	.LASF32:
 4173 029a 55534152 		.ascii	"USART2_IRQn\000"
 4173      54325F49 
 4173      52516E00 
 4174              	.LASF63:
 4175 02a6 43505549 		.ascii	"CPUID\000"
 4175      4400
 4176              	.LASF163:
 4177 02ac 74745F74 		.ascii	"tt_take_photo_sample\000"
 4177      616B655F 
 4177      70686F74 
 4177      6F5F7361 
 4177      6D706C65 
 4178              	.LASF202:
 4179 02c1 53797354 		.ascii	"SysTick_Config\000"
 4179      69636B5F 
 4179      436F6E66 
 4179      696700
 4180              	.LASF76:
 4181 02d0 534D5052 		.ascii	"SMPR\000"
 4181      00
 4182              	.LASF182:
 4183 02d5 706F7765 		.ascii	"power_minutes\000"
 4183      725F6D69 
 4183      6E757465 
 4183      7300
 4184              	.LASF111:
 4185 02e3 4E4F4E45 		.ascii	"NONE_MSG\000"
 4185      5F4D5347 
 4185      00
 4186              	.LASF90:
 4187 02ec 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4187      5A45524F 
 4187      5F435552 
 4187      52454E54 
 4187      00
 4188              	.LASF172:
ARM GAS  /tmp/cc0FodwT.s 			page 116


 4189 02fd 75736172 		.ascii	"usart1_have_data\000"
 4189      74315F68 
 4189      6176655F 
 4189      64617461 
 4189      00
 4190              	.LASF82:
 4191 030e 50555044 		.ascii	"PUPDR\000"
 4191      5200
 4192              	.LASF119:
 4193 0314 7469636B 		.ascii	"ticks\000"
 4193      7300
 4194              	.LASF152:
 4195 031a 73686F77 		.ascii	"show_select_timer\000"
 4195      5F73656C 
 4195      6563745F 
 4195      74696D65 
 4195      7200
 4196              	.LASF102:
 4197 032c 64756D6D 		.ascii	"dummy1\000"
 4197      793100
 4198              	.LASF103:
 4199 0333 64756D6D 		.ascii	"dummy2\000"
 4199      793200
 4200              	.LASF87:
 4201 033a 63686172 		.ascii	"char\000"
 4201      00
 4202              	.LASF146:
 4203 033f 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4203      45524154 
 4203      5552455F 
 4203      56616C75 
 4203      6500
 4204              	.LASF125:
 4205 0351 706F7765 		.ascii	"power_dec\000"
 4205      725F6465 
 4205      6300
 4206              	.LASF65:
 4207 035b 41495243 		.ascii	"AIRCR\000"
 4207      5200
 4208              	.LASF160:
 4209 0361 74616B65 		.ascii	"take_temp_sample\000"
 4209      5F74656D 
 4209      705F7361 
 4209      6D706C65 
 4209      00
 4210              	.LASF21:
 4211 0372 54494D33 		.ascii	"TIM3_IRQn\000"
 4211      5F495251 
 4211      6E00
 4212              	.LASF14:
 4213 037c 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4213      5F436861 
 4213      6E6E656C 
 4213      315F4952 
 4213      516E00
 4214              	.LASF121:
 4215 038f 62797465 		.ascii	"bytes_read\000"
ARM GAS  /tmp/cc0FodwT.s 			page 117


 4215      735F7265 
 4215      616400
 4216              	.LASF96:
 4217 039a 6D61696E 		.ascii	"main_state_t\000"
 4217      5F737461 
 4217      74655F74 
 4217      00
 4218              	.LASF24:
 4219 03a7 54494D31 		.ascii	"TIM15_IRQn\000"
 4219      355F4952 
 4219      516E00
 4220              	.LASF48:
 4221 03b2 75696E74 		.ascii	"uint8_t\000"
 4221      385F7400 
 4222              	.LASF94:
 4223 03ba 57454C43 		.ascii	"WELCOME_GSM\000"
 4223      4F4D455F 
 4223      47534D00 
 4224              	.LASF174:
 4225 03c6 75736172 		.ascii	"usart2_mini_timeout\000"
 4225      74325F6D 
 4225      696E695F 
 4225      74696D65 
 4225      6F757400 
 4226              	.LASF184:
 4227 03da 706F7765 		.ascii	"power_hours\000"
 4227      725F686F 
 4227      75727300 
 4228              	.LASF150:
 4229 03e6 74783162 		.ascii	"tx1buff\000"
 4229      75666600 
 4230              	.LASF177:
 4231 03ee 75736172 		.ascii	"usart2_pckt_bytes\000"
 4231      74325F70 
 4231      636B745F 
 4231      62797465 
 4231      7300
 4232              	.LASF164:
 4233 0400 74745F72 		.ascii	"tt_relay_on_off\000"
 4233      656C6179 
 4233      5F6F6E5F 
 4233      6F666600 
 4234              	.LASF191:
 4235 0410 73656373 		.ascii	"secs\000"
 4235      00
 4236              	.LASF95:
 4237 0415 4C414D50 		.ascii	"LAMP_ON\000"
 4237      5F4F4E00 
 4238              	.LASF78:
 4239 041d 4144435F 		.ascii	"ADC_TypeDef\000"
 4239      54797065 
 4239      44656600 
 4240              	.LASF45:
 4241 0429 6C6F6E67 		.ascii	"long long int\000"
 4241      206C6F6E 
 4241      6720696E 
 4241      7400
ARM GAS  /tmp/cc0FodwT.s 			page 118


 4242              	.LASF5:
 4243 0437 57574447 		.ascii	"WWDG_IRQn\000"
 4243      5F495251 
 4243      6E00
 4244              	.LASF67:
 4245 0441 53484353 		.ascii	"SHCSR\000"
 4245      5200
 4246              	.LASF170:
 4247 0447 75736172 		.ascii	"usart1_mini_timeout\000"
 4247      74315F6D 
 4247      696E695F 
 4247      74696D65 
 4247      6F757400 
 4248              	.LASF92:
 4249 045b 53544152 		.ascii	"START_GSM\000"
 4249      545F4753 
 4249      4D00
 4250              	.LASF165:
 4251 0465 73617665 		.ascii	"saved_mode\000"
 4251      645F6D6F 
 4251      646500
 4252              	.LASF190:
 4253 0470 66696C74 		.ascii	"filter_timer\000"
 4253      65725F74 
 4253      696D6572 
 4253      00
 4254              	.LASF200:
 4255 047d 70617261 		.ascii	"parameters\000"
 4255      6D657465 
 4255      727300
 4256              	.LASF162:
 4257 0488 74696D65 		.ascii	"timer_relay\000"
 4257      725F7265 
 4257      6C617900 
 4258              	.LASF88:
 4259 0494 4D41494E 		.ascii	"MAIN_INIT\000"
 4259      5F494E49 
 4259      5400
 4260              	.LASF93:
 4261 049e 434F4E46 		.ascii	"CONFIG_GSM\000"
 4261      49475F47 
 4261      534D00
 4262              	.LASF113:
 4263 04a9 524F4F4D 		.ascii	"ROOM_BRIGHT\000"
 4263      5F425249 
 4263      47485400 
 4264              	.LASF169:
 4265 04b5 7A65726F 		.ascii	"zero_current\000"
 4265      5F637572 
 4265      72656E74 
 4265      00
 4266              	.LASF13:
 4267 04c2 54535F49 		.ascii	"TS_IRQn\000"
 4267      52516E00 
 4268              	.LASF139:
 4269 04ca 64756D6D 		.ascii	"dummy_resp\000"
 4269      795F7265 
ARM GAS  /tmp/cc0FodwT.s 			page 119


 4269      737000
 4270              	.LASF18:
 4271 04d5 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4271      5F42524B 
 4271      5F55505F 
 4271      5452475F 
 4271      434F4D5F 
 4272              	.LASF144:
 4273 04ee 74656D70 		.ascii	"tempbuff\000"
 4273      62756666 
 4273      00
 4274              	.LASF6:
 4275 04f7 5056445F 		.ascii	"PVD_IRQn\000"
 4275      4952516E 
 4275      00
 4276              	.LASF74:
 4277 0500 43464752 		.ascii	"CFGR1\000"
 4277      3100
 4278              	.LASF75:
 4279 0506 43464752 		.ascii	"CFGR2\000"
 4279      3200
 4280              	.LASF117:
 4281 050c 4C494748 		.ascii	"LIGHTS_ON\000"
 4281      54535F4F 
 4281      4E00
 4282              	.LASF58:
 4283 0516 49435052 		.ascii	"ICPR\000"
 4283      00
 4284              	.LASF17:
 4285 051b 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4285      5F434F4D 
 4285      505F4952 
 4285      516E00
 4286              	.LASF181:
 4287 052a 706F7765 		.ascii	"power_2secs_index\000"
 4287      725F3273 
 4287      6563735F 
 4287      696E6465 
 4287      7800
 4288              	.LASF153:
 4289 053c 73776974 		.ascii	"switches_timer\000"
 4289      63686573 
 4289      5F74696D 
 4289      657200
 4290              	.LASF134:
 4291 054b 7463705F 		.ascii	"tcp_msg\000"
 4291      6D736700 
 4292              	.LASF81:
 4293 0553 4F535045 		.ascii	"OSPEEDR\000"
 4293      45445200 
 4294              	.LASF73:
 4295 055b 53797354 		.ascii	"SysTick_Type\000"
 4295      69636B5F 
 4295      54797065 
 4295      00
 4296              	.LASF86:
 4297 0568 6C6F6E67 		.ascii	"long double\000"
ARM GAS  /tmp/cc0FodwT.s 			page 120


 4297      20646F75 
 4297      626C6500 
 4298              	.LASF49:
 4299 0574 75696E74 		.ascii	"uint16_t\000"
 4299      31365F74 
 4299      00
 4300              	.LASF178:
 4301 057d 62756666 		.ascii	"buffUARTGSMrx2\000"
 4301      55415254 
 4301      47534D72 
 4301      783200
 4302              	.LASF109:
 4303 058c 4952516E 		.ascii	"IRQn\000"
 4303      00
 4304              	.LASF101:
 4305 0591 6C617374 		.ascii	"last_channel_in_flash\000"
 4305      5F636861 
 4305      6E6E656C 
 4305      5F696E5F 
 4305      666C6173 
 4306              	.LASF185:
 4307 05a7 67736D4E 		.ascii	"gsmNUM\000"
 4307      554D00
 4308              	.LASF155:
 4309 05ae 7363726F 		.ascii	"scroll1_timer\000"
 4309      6C6C315F 
 4309      74696D65 
 4309      7200
 4310              	.LASF7:
 4311 05bc 5254435F 		.ascii	"RTC_IRQn\000"
 4311      4952516E 
 4311      00
 4312              	.LASF53:
 4313 05c5 52455345 		.ascii	"RESERVED0\000"
 4313      52564544 
 4313      3000
 4314              	.LASF66:
 4315 05cf 52455345 		.ascii	"RESERVED1\000"
 4315      52564544 
 4315      3100
 4316              	.LASF57:
 4317 05d9 52455345 		.ascii	"RESERVED2\000"
 4317      52564544 
 4317      3200
 4318              	.LASF59:
 4319 05e3 52455345 		.ascii	"RESERVED3\000"
 4319      52564544 
 4319      3300
 4320              	.LASF60:
 4321 05ed 52455345 		.ascii	"RESERVED4\000"
 4321      52564544 
 4321      3400
 4322              	.LASF38:
 4323 05f7 73686F72 		.ascii	"short int\000"
 4323      7420696E 
 4323      7400
 4324              	.LASF42:
ARM GAS  /tmp/cc0FodwT.s 			page 121


 4325 0601 6C6F6E67 		.ascii	"long int\000"
 4325      20696E74 
 4325      00
 4326              	.LASF31:
 4327 060a 55534152 		.ascii	"USART1_IRQn\000"
 4327      54315F49 
 4327      52516E00 
 4328              	.LASF0:
 4329 0616 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4329      61736B61 
 4329      626C6549 
 4329      6E745F49 
 4329      52516E00 
 4330              	.LASF118:
 4331 062a 7072696F 		.ascii	"priority\000"
 4331      72697479 
 4331      00
 4332              	.LASF19:
 4333 0633 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4333      5F43435F 
 4333      4952516E 
 4333      00
 4334              	.LASF80:
 4335 0640 4F545950 		.ascii	"OTYPER\000"
 4335      455200
 4336              	.LASF136:
 4337 0647 6E65775F 		.ascii	"new_lamp\000"
 4337      6C616D70 
 4337      00
 4338              	.LASF187:
 4339 0650 77616974 		.ascii	"wait_ms_var\000"
 4339      5F6D735F 
 4339      76617200 
 4340              	.LASF26:
 4341 065c 54494D31 		.ascii	"TIM17_IRQn\000"
 4341      375F4952 
 4341      516E00
 4342              	.LASF89:
 4343 0667 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4343      48524F5F 
 4343      41444300 
 4344              	.LASF16:
 4345 0673 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4345      5F436861 
 4345      6E6E656C 
 4345      345F355F 
 4345      4952516E 
 4346              	.LASF186:
 4347 0688 67736D4D 		.ascii	"gsmMSG\000"
 4347      534700
 4348              	.LASF192:
 4349 068f 686F7572 		.ascii	"hours\000"
 4349      7300
 4350              	.LASF35:
 4351 0695 5F5F7569 		.ascii	"__uint8_t\000"
 4351      6E74385F 
 4351      7400
ARM GAS  /tmp/cc0FodwT.s 			page 122


 4352              	.LASF114:
 4353 069f 4C414D50 		.ascii	"LAMP_BRIGHT\000"
 4353      5F425249 
 4353      47485400 
 4354              	.LASF62:
 4355 06ab 4E564943 		.ascii	"NVIC_Type\000"
 4355      5F547970 
 4355      6500
 4356              	.LASF69:
 4357 06b5 5343425F 		.ascii	"SCB_Type\000"
 4357      54797065 
 4357      00
 4358              	.LASF85:
 4359 06be 4750494F 		.ascii	"GPIO_TypeDef\000"
 4359      5F547970 
 4359      65446566 
 4359      00
 4360              	.LASF130:
 4361 06cb 73656E64 		.ascii	"sended\000"
 4361      656400
 4362              	.LASF4:
 4363 06d2 53797354 		.ascii	"SysTick_IRQn\000"
 4363      69636B5F 
 4363      4952516E 
 4363      00
 4364              	.LASF33:
 4365 06df 4345435F 		.ascii	"CEC_IRQn\000"
 4365      4952516E 
 4365      00
 4366              	.LASF61:
 4367 06e8 73697A65 		.ascii	"sizetype\000"
 4367      74797065 
 4367      00
 4368              	.LASF64:
 4369 06f1 49435352 		.ascii	"ICSR\000"
 4369      00
 4370              	.LASF28:
 4371 06f6 49324332 		.ascii	"I2C2_IRQn\000"
 4371      5F495251 
 4371      6E00
 4372              	.LASF44:
 4373 0700 6C6F6E67 		.ascii	"long unsigned int\000"
 4373      20756E73 
 4373      69676E65 
 4373      6420696E 
 4373      7400
 4374              	.LASF20:
 4375 0712 54494D32 		.ascii	"TIM2_IRQn\000"
 4375      5F495251 
 4375      6E00
 4376              	.LASF147:
 4377 071c 50524553 		.ascii	"PRESSURE_Value\000"
 4377      53555245 
 4377      5F56616C 
 4377      756500
 4378              	.LASF199:
 4379 072b 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
ARM GAS  /tmp/cc0FodwT.s 			page 123


 4379      652F6D65 
 4379      642F446F 
 4379      63756D65 
 4379      6E74732F 
 4380 075e 6100     		.ascii	"a\000"
 4381              	.LASF145:
 4382 0760 48554D49 		.ascii	"HUMIDITY_Value\000"
 4382      44495459 
 4382      5F56616C 
 4382      756500
 4383              	.LASF50:
 4384 076f 696E7433 		.ascii	"int32_t\000"
 4384      325F7400 
 4385              	.LASF158:
 4386 0777 7374616E 		.ascii	"standalone_enable_menu_timer\000"
 4386      64616C6F 
 4386      6E655F65 
 4386      6E61626C 
 4386      655F6D65 
 4387              	.LASF167:
 4388 0794 6164635F 		.ascii	"adc_ch\000"
 4388      636800
 4389              	.LASF23:
 4390 079b 54494D31 		.ascii	"TIM14_IRQn\000"
 4390      345F4952 
 4390      516E00
 4391              	.LASF15:
 4392 07a6 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4392      5F436861 
 4392      6E6E656C 
 4392      325F335F 
 4392      4952516E 
 4393              	.LASF140:
 4394 07bb 7070735F 		.ascii	"pps_one\000"
 4394      6F6E6500 
 4395              	.LASF22:
 4396 07c3 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4396      5F444143 
 4396      5F495251 
 4396      6E00
 4397              	.LASF37:
 4398 07d1 756E7369 		.ascii	"unsigned char\000"
 4398      676E6564 
 4398      20636861 
 4398      7200
 4399              	.LASF91:
 4400 07df 4C414D50 		.ascii	"LAMP_OFF\000"
 4400      5F4F4646 
 4400      00
 4401              	.LASF43:
 4402 07e8 5F5F7569 		.ascii	"__uint32_t\000"
 4402      6E743332 
 4402      5F7400
 4403              	.LASF137:
 4404 07f3 6C617374 		.ascii	"last_bright\000"
 4404      5F627269 
 4404      67687400 
ARM GAS  /tmp/cc0FodwT.s 			page 124


 4405              	.LASF122:
 4406 07ff 6E656564 		.ascii	"need_ack\000"
 4406      5F61636B 
 4406      00
 4407              	.LASF98:
 4408 0808 6C617374 		.ascii	"last_program_in_flash\000"
 4408      5F70726F 
 4408      6772616D 
 4408      5F696E5F 
 4408      666C6173 
 4409              	.LASF166:
 4410 081e 7361635F 		.ascii	"sac_aux\000"
 4410      61757800 
 4411              	.LASF135:
 4412 0826 6E65775F 		.ascii	"new_room\000"
 4412      726F6F6D 
 4412      00
 4413              	.LASF205:
 4414 082f 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4414      6E674465 
 4414      6C61795F 
 4414      44656372 
 4414      656D656E 
 4415              	.LASF161:
 4416 0845 74696D65 		.ascii	"timer_wifi_bright\000"
 4416      725F7769 
 4416      66695F62 
 4416      72696768 
 4416      7400
 4417              	.LASF54:
 4418 0857 49434552 		.ascii	"ICER\000"
 4418      00
 4419              	.LASF132:
 4420 085c 6F6E655F 		.ascii	"one_to_ten\000"
 4420      746F5F74 
 4420      656E00
 4421              	.LASF30:
 4422 0867 53504932 		.ascii	"SPI2_IRQn\000"
 4422      5F495251 
 4422      6E00
 4423              	.LASF204:
 4424 0871 70726570 		.ascii	"prepare_json_pkt\000"
 4424      6172655F 
 4424      6A736F6E 
 4424      5F706B74 
 4424      00
 4425              	.LASF112:
 4426 0882 4B454550 		.ascii	"KEEP_ALIVE\000"
 4426      5F414C49 
 4426      564500
 4427              	.LASF126:
 4428 088d 706F7765 		.ascii	"power\000"
 4428      7200
 4429              	.LASF108:
 4430 0893 70617261 		.ascii	"parameters_typedef\000"
 4430      6D657465 
 4430      72735F74 
ARM GAS  /tmp/cc0FodwT.s 			page 125


 4430      79706564 
 4430      656600
 4431              	.LASF36:
 4432 08a6 7369676E 		.ascii	"signed char\000"
 4432      65642063 
 4432      68617200 
 4433              	.LASF198:
 4434 08b2 7372632F 		.ascii	"src/main.c\000"
 4434      6D61696E 
 4434      2E6300
 4435              	.LASF124:
 4436 08bd 706F7765 		.ascii	"power_int\000"
 4436      725F696E 
 4436      7400
 4437              	.LASF116:
 4438 08c7 4C494748 		.ascii	"LIGHTS_OFF\000"
 4438      54535F4F 
 4438      464600
 4439              	.LASF40:
 4440 08d2 73686F72 		.ascii	"short unsigned int\000"
 4440      7420756E 
 4440      7369676E 
 4440      65642069 
 4440      6E7400
 4441              	.LASF197:
 4442 08e5 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4442      43313120 
 4442      352E322E 
 4442      31203230 
 4442      31353132 
 4443 0918 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4443      20726576 
 4443      6973696F 
 4443      6E203233 
 4443      31383438 
 4444 094b 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4444      662D3220 
 4444      2D4F3020 
 4444      2D666F6D 
 4444      69742D66 
 4445 097e 66756E63 		.ascii	"function-sections\000"
 4445      74696F6E 
 4445      2D736563 
 4445      74696F6E 
 4445      7300
 4446              	.LASF157:
 4447 0990 7374616E 		.ascii	"standalone_timer\000"
 4447      64616C6F 
 4447      6E655F74 
 4447      696D6572 
 4447      00
 4448              	.LASF203:
 4449 09a1 6D61696E 		.ascii	"main\000"
 4449      00
 4450              	.LASF1:
 4451 09a6 48617264 		.ascii	"HardFault_IRQn\000"
 4451      4661756C 
ARM GAS  /tmp/cc0FodwT.s 			page 126


 4451      745F4952 
 4451      516E00
 4452              	.LASF183:
 4453 09b5 706F7765 		.ascii	"power_minutes_index\000"
 4453      725F6D69 
 4453      6E757465 
 4453      735F696E 
 4453      64657800 
 4454              	.LASF56:
 4455 09c9 49535052 		.ascii	"ISPR\000"
 4455      00
 4456              	.LASF123:
 4457 09ce 72657370 		.ascii	"resp\000"
 4457      00
 4458              	.LASF168:
 4459 09d3 7365715F 		.ascii	"seq_ready\000"
 4459      72656164 
 4459      7900
 4460              	.LASF195:
 4461 09dd 7674656D 		.ascii	"vtemp\000"
 4461      7000
 4462              	.LASF156:
 4463 09e3 7363726F 		.ascii	"scroll2_timer\000"
 4463      6C6C325F 
 4463      74696D65 
 4463      7200
 4464              	.LASF188:
 4465 09f1 74696D65 		.ascii	"timer_standby\000"
 4465      725F7374 
 4465      616E6462 
 4465      7900
 4466              	.LASF120:
 4467 09ff 62797465 		.ascii	"bytes_remain\000"
 4467      735F7265 
 4467      6D61696E 
 4467      00
 4468              	.LASF84:
 4469 0a0c 4C434B52 		.ascii	"LCKR\000"
 4469      00
 4470              	.LASF70:
 4471 0a11 4354524C 		.ascii	"CTRL\000"
 4471      00
 4472              	.LASF115:
 4473 0a16 4745545F 		.ascii	"GET_A\000"
 4473      4100
 4474              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/cc0FodwT.s 			page 127


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc0FodwT.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/cc0FodwT.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/cc0FodwT.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/cc0FodwT.s:206    .text.SysTick_Config:00000000 $t
     /tmp/cc0FodwT.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/cc0FodwT.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/cc0FodwT.s:277    .bss.show_select_timer:00000000 show_select_timer
     /tmp/cc0FodwT.s:274    .bss.show_select_timer:00000000 $d
     /tmp/cc0FodwT.s:283    .bss.switches_timer:00000000 switches_timer
     /tmp/cc0FodwT.s:284    .bss.switches_timer:00000000 $d
     /tmp/cc0FodwT.s:289    .bss.acswitch_timer:00000000 acswitch_timer
     /tmp/cc0FodwT.s:290    .bss.acswitch_timer:00000000 $d
     /tmp/cc0FodwT.s:296    .bss.scroll1_timer:00000000 scroll1_timer
     /tmp/cc0FodwT.s:293    .bss.scroll1_timer:00000000 $d
     /tmp/cc0FodwT.s:303    .bss.scroll2_timer:00000000 scroll2_timer
     /tmp/cc0FodwT.s:300    .bss.scroll2_timer:00000000 $d
                            *COM*:00000002 standalone_timer
                            *COM*:00000002 standalone_enable_menu_timer
                            *COM*:00000001 grouped_master_timeout_timer
     /tmp/cc0FodwT.s:313    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/cc0FodwT.s:310    .bss.take_temp_sample:00000000 $d
     /tmp/cc0FodwT.s:319    .bss.timer_wifi_bright:00000000 timer_wifi_bright
     /tmp/cc0FodwT.s:320    .bss.timer_wifi_bright:00000000 $d
     /tmp/cc0FodwT.s:326    .bss.timer_relay:00000000 timer_relay
     /tmp/cc0FodwT.s:323    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000006 adc_ch
     /tmp/cc0FodwT.s:340    .bss.seq_ready:00000000 seq_ready
     /tmp/cc0FodwT.s:341    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:0000000c param_struct
     /tmp/cc0FodwT.s:357    .bss.power_2secs_acum:00000000 power_2secs_acum
     /tmp/cc0FodwT.s:354    .bss.power_2secs_acum:00000000 $d
     /tmp/cc0FodwT.s:363    .bss.power_2secs_index:00000000 power_2secs_index
     /tmp/cc0FodwT.s:364    .bss.power_2secs_index:00000000 $d
     /tmp/cc0FodwT.s:370    .bss.power_minutes:00000000 power_minutes
     /tmp/cc0FodwT.s:367    .bss.power_minutes:00000000 $d
ARM GAS  /tmp/cc0FodwT.s 			page 128


     /tmp/cc0FodwT.s:376    .bss.power_minutes_index:00000000 power_minutes_index
     /tmp/cc0FodwT.s:377    .bss.power_minutes_index:00000000 $d
     /tmp/cc0FodwT.s:383    .bss.power_hours:00000000 power_hours
     /tmp/cc0FodwT.s:380    .bss.power_hours:00000000 $d
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/cc0FodwT.s:392    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/cc0FodwT.s:389    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/cc0FodwT.s:402    .bss.secs:00000000 secs
     /tmp/cc0FodwT.s:399    .bss.secs:00000000 $d
     /tmp/cc0FodwT.s:408    .bss.hours:00000000 hours
     /tmp/cc0FodwT.s:409    .bss.hours:00000000 $d
     /tmp/cc0FodwT.s:414    .bss.minutes:00000000 minutes
     /tmp/cc0FodwT.s:415    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/cc0FodwT.s:420    .rodata:00000000 $d
     /tmp/cc0FodwT.s:462    .text.main:00000000 $t
     /tmp/cc0FodwT.s:467    .text.main:00000000 main
     /tmp/cc0FodwT.s:739    .rodata.main:00000000 $d
     /tmp/cc0FodwT.s:929    .text.main:000002c0 $d
     /tmp/cc0FodwT.s:947    .text.main:00000300 $t
     /tmp/cc0FodwT.s:1193   .text.main:000004a8 $d
     /tmp/cc0FodwT.s:1227   .text.prepare_json_pkt:00000000 $t
     /tmp/cc0FodwT.s:1232   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/cc0FodwT.s:1324   .text.prepare_json_pkt:0000009c $d
     /tmp/cc0FodwT.s:1333   .text.TimingDelay_Decrement:00000000 $t
     /tmp/cc0FodwT.s:1338   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/cc0FodwT.s:1540   .text.TimingDelay_Decrement:00000130 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_ui2f
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2uiz
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
GPIO_Config
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
ARM GAS  /tmp/cc0FodwT.s 			page 129


GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
sprintf
FuncsGSMMessageFlagsAsk
UpdateVGrid
UpdateIGrid
UpdateRelay
FuncsGSM
memcpy
strcat
strlen
GSMTimeoutCounters
