ARM GAS  /tmp/ccQGhvTg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccQGhvTg.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccQGhvTg.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccQGhvTg.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccQGhvTg.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccQGhvTg.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccQGhvTg.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccQGhvTg.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccQGhvTg.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccQGhvTg.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccQGhvTg.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccQGhvTg.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccQGhvTg.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccQGhvTg.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccQGhvTg.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccQGhvTg.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccQGhvTg.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccQGhvTg.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7188,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7189, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7190, D.7189
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7190, D.7190
  92 0026 083B     		subs	r3, r3, #8	@ D.7190,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7190, D.7190,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7188,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7189, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7190, D.7189
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7190, D.7190
 101 0038 083B     		subs	r3, r3, #8	@ D.7190,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7190, D.7190,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7188, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7190, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7189, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7190, D.7189
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7190, D.7190
 114 0052 D200     		lsls	r2, r2, #3	@ D.7190, D.7190,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7191, D.7191, D.7190
 117 0058 0200     		movs	r2, r0	@ D.7191, D.7191
 118 005a D243     		mvns	r2, r2	@ D.7191, D.7191
 119 005c 1A40     		ands	r2, r3	@ D.7190, D.7190
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7190, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7190, D.7190
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7189, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7190, D.7189
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7190, D.7190
ARM GAS  /tmp/ccQGhvTg.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7190, D.7190,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7190, D.7190, D.7190
 133 0076 0300     		movs	r3, r0	@ D.7190, D.7190
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7190, D.7190
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7190,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7188, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7190, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7192,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7190, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7190, D.7190
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7190, D.7190,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7192,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7190, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7190, D.7190
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7190, D.7190,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7190, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7189, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7190, D.7189
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7190, D.7190
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7190, D.7190,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7191, D.7191, D.7190
 169 00b6 0100     		movs	r1, r0	@ D.7191, D.7191
 170 00b8 C943     		mvns	r1, r1	@ D.7191, D.7191
 171 00ba 1140     		ands	r1, r2	@ D.7190, D.7190
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7190, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7190, D.7190
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7189, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7190, D.7189
ARM GAS  /tmp/ccQGhvTg.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7190, D.7190
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7190, D.7190,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7190, D.7190, D.7190
 185 00d4 0200     		movs	r2, r0	@ D.7190, D.7190
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7190, D.7190
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7190, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccQGhvTg.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7193,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7194,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7195, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7195,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7195, _6->LOAD
ARM GAS  /tmp/ccQGhvTg.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7194,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7194,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7193,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	take_temp_sample
 273              		.section	.bss.take_temp_sample,"aw",%nobits
 274              		.align	1
 275              		.type	take_temp_sample, %object
 276              		.size	take_temp_sample, 2
 277              	take_temp_sample:
 278 0000 0000     		.space	2
 279              		.global	timer_rep
 280              		.section	.bss.timer_rep,"aw",%nobits
 281              		.align	1
 282              		.type	timer_rep, %object
 283              		.size	timer_rep, 2
 284              	timer_rep:
 285 0000 0000     		.space	2
 286              		.global	timer_relay
 287              		.section	.bss.timer_relay,"aw",%nobits
ARM GAS  /tmp/ccQGhvTg.s 			page 23


 288              		.align	1
 289              		.type	timer_relay, %object
 290              		.size	timer_relay, 2
 291              	timer_relay:
 292 0000 0000     		.space	2
 293              		.comm	tt_take_photo_sample,2,2
 294              		.comm	tt_relay_on_off,2,2
 295              		.comm	saved_mode,1,1
 296              		.comm	s1,2,2
 297              		.comm	s2,2,2
 298              		.comm	sac,2,2
 299              		.comm	sac_aux,1,1
 300              		.comm	adc_ch,6,4
 301              		.global	seq_ready
 302              		.section	.bss.seq_ready,"aw",%nobits
 303              		.type	seq_ready, %object
 304              		.size	seq_ready, 1
 305              	seq_ready:
 306 0000 00       		.space	1
 307              		.comm	zero_current,2,2
 308              		.comm	usart1_mini_timeout,1,1
 309              		.comm	usart1_pckt_ready,1,1
 310              		.comm	usart1_have_data,1,1
 311              		.comm	usart1_pckt_bytes,1,1
 312              		.comm	usart2_mini_timeout,1,1
 313              		.comm	usart2_pckt_ready,1,1
 314              		.comm	usart2_have_data,1,1
 315              		.comm	usart2_pckt_bytes,1,1
 316              		.comm	param_struct,84,4
 317              		.comm	gsmNUM,20,4
 318              		.comm	gsmMSG,180,4
 319              		.global	wait_ms_var
 320              		.section	.bss.wait_ms_var,"aw",%nobits
 321              		.align	1
 322              		.type	wait_ms_var, %object
 323              		.size	wait_ms_var, 2
 324              	wait_ms_var:
 325 0000 0000     		.space	2
 326              		.comm	timer_standby,2,2
 327              		.comm	tcp_kalive_timer,2,2
 328              		.comm	filter_timer,1,1
 329              		.global	secs
 330              		.section	.bss.secs,"aw",%nobits
 331              		.align	1
 332              		.type	secs, %object
 333              		.size	secs, 2
 334              	secs:
 335 0000 0000     		.space	2
 336              		.global	hours
 337              		.section	.bss.hours,"aw",%nobits
 338              		.type	hours, %object
 339              		.size	hours, 1
 340              	hours:
 341 0000 00       		.space	1
 342              		.global	minutes
 343              		.section	.bss.minutes,"aw",%nobits
 344              		.type	minutes, %object
ARM GAS  /tmp/ccQGhvTg.s 			page 24


 345              		.size	minutes, 1
 346              	minutes:
 347 0000 00       		.space	1
 348              		.comm	power_vect,20,4
 349              		.comm	vtemp,34,4
 350              		.comm	vpote,34,4
 351              		.section	.rodata
 352              		.align	2
 353              	.LC1:
 354 0000 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 354      726E6F20 
 354      506C6163 
 354      61205265 
 354      646F6E64 
 355 0025 000000   		.align	2
 356              	.LC3:
 357 0028 20204665 		.ascii	"  Features:\015\012\000"
 357      61747572 
 357      65733A0D 
 357      0A00
 358 0036 0000     		.align	2
 359              	.LC5:
 360 0038 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 360      6D6D6572 
 360      20312074 
 360      6F203130 
 360      560D0A00 
 361              		.align	2
 362              	.LC7:
 363 004c 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 363      67687420 
 363      48797374 
 363      65726573 
 363      69730D0A 
 364 0061 000000   		.align	2
 365              	.LC9:
 366 0064 20205379 		.ascii	"  Sync by ADC\015\012\000"
 366      6E632062 
 366      79204144 
 366      430D0A00 
 367              		.align	2
 368              	.LC11:
 369 0074 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 369      65732047 
 369      534D2066 
 369      6F722053 
 369      4D532064 
 370 008e 0000     		.align	2
 371              	.LC16:
 372 0090 47657474 		.ascii	"Getted\015\012\000"
 372      65640D0A 
 372      00
 373 0099 000000   		.align	2
 374              	.LC18:
 375 009c 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 375      696E6720 
 375      47534D20 
ARM GAS  /tmp/ccQGhvTg.s 			page 25


 375      53746172 
 375      74757020 
 376 00c3 00       		.align	2
 377              	.LC22:
 378 00c4 5265706F 		.ascii	"Reports by SMS\015\012\000"
 378      72747320 
 378      62792053 
 378      4D530D0A 
 378      00
 379 00d5 000000   		.align	2
 380              	.LC25:
 381 00d8 41542B43 		.ascii	"AT+CFUN=4\015\012\000"
 381      46554E3D 
 381      340D0A00 
 382              		.align	2
 383              	.LC27:
 384 00e4 4F4B00   		.ascii	"OK\000"
 385 00e7 00       		.align	2
 386              	.LC30:
 387 00e8 41542B43 		.ascii	"AT+CFUN=1\015\012\000"
 387      46554E3D 
 387      310D0A00 
 388              		.global	__aeabi_i2d
 389              		.global	__aeabi_dmul
 390              		.global	__aeabi_d2f
 391              		.global	__aeabi_f2uiz
 392              		.global	__aeabi_i2f
 393              		.global	__aeabi_fsub
 394              		.global	__aeabi_fmul
 395              		.global	__aeabi_uidiv
 396              		.global	__aeabi_ui2d
 397              		.align	2
 398              	.LC32:
 399 00f4 70693A20 		.ascii	"pi: %3d.%02d wh: %3d.%01d\015\012\000"
 399      2533642E 
 399      25303264 
 399      2077683A 
 399      20253364 
 400              		.align	2
 401              	.LC34:
 402 0110 31313435 		.ascii	"1145376762\000"
 402      33373637 
 402      363200
 403              		.section	.text.main,"ax",%progbits
 404              		.align	2
 405              		.global	main
 406              		.code	16
 407              		.thumb_func
 408              		.type	main, %function
 409              	main:
 410              	.LFB20:
 411              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
ARM GAS  /tmp/ccQGhvTg.s 			page 26


   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
ARM GAS  /tmp/ccQGhvTg.s 			page 27


  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** // volatile unsigned char switches_timer = 0;
  72:src/main.c    **** //
  73:src/main.c    **** //
  74:src/main.c    **** // volatile unsigned short scroll1_timer = 0;
  75:src/main.c    **** // volatile unsigned short scroll2_timer = 0;
  76:src/main.c    **** //
  77:src/main.c    **** // volatile unsigned short standalone_timer;
  78:src/main.c    **** // volatile unsigned short standalone_enable_menu_timer;
  79:src/main.c    **** // //volatile unsigned short standalone_menu_timer;
  80:src/main.c    **** // volatile unsigned char grouped_master_timeout_timer;
  81:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  82:src/main.c    **** volatile unsigned short timer_rep = 0;
  83:src/main.c    **** // volatile unsigned char timer_wifi_bright = 0;
  84:src/main.c    **** 
  85:src/main.c    **** #ifdef USE_REDONDA_BASIC
  86:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  87:src/main.c    **** 
  88:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  89:src/main.c    **** volatile unsigned short tt_relay_on_off;
  90:src/main.c    **** #endif
  91:src/main.c    **** 
  92:src/main.c    **** 
  93:src/main.c    **** unsigned char saved_mode;
  94:src/main.c    **** 
  95:src/main.c    **** 
  96:src/main.c    **** // ------- Externals de los switches -------
  97:src/main.c    **** unsigned short s1;
  98:src/main.c    **** unsigned short s2;
  99:src/main.c    **** unsigned short sac;
 100:src/main.c    **** unsigned char sac_aux;
 101:src/main.c    **** 
 102:src/main.c    **** // ------- Externals de los switches -------
 103:src/main.c    **** #ifdef ADC_WITH_INT
 104:src/main.c    **** volatile unsigned short adc_ch[3];
 105:src/main.c    **** volatile unsigned char seq_ready = 0;
 106:src/main.c    **** unsigned short zero_current;
 107:src/main.c    **** #endif
 108:src/main.c    **** 
 109:src/main.c    **** // ------- Externals del GPS & GSM -------
 110:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 111:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 112:src/main.c    **** volatile unsigned char usart1_have_data;
 113:src/main.c    **** unsigned char usart1_pckt_bytes;
 114:src/main.c    **** 
 115:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 116:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 117:src/main.c    **** #define gps_have_data		usart1_have_data
 118:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 119:src/main.c    **** 
ARM GAS  /tmp/ccQGhvTg.s 			page 28


 120:src/main.c    **** #ifdef USE_GPS
 121:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 122:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 123:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 124:src/main.c    **** volatile unsigned char usart2_have_data;
 125:src/main.c    **** unsigned char usart2_pckt_bytes;
 126:src/main.c    **** 
 127:src/main.c    **** #endif
 128:src/main.c    **** 
 129:src/main.c    **** // ------- Externals del GSM -------
 130:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 131:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 132:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 133:src/main.c    **** #define gsm_have_data		usart1_have_data
 134:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 135:src/main.c    **** 
 136:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 137:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 138:src/main.c    **** volatile unsigned char usart2_have_data;
 139:src/main.c    **** unsigned char usart2_pckt_bytes;
 140:src/main.c    **** 
 141:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 142:src/main.c    **** #endif
 143:src/main.c    **** 
 144:src/main.c    **** parameters_typedef param_struct;
 145:src/main.c    **** 
 146:src/main.c    **** //--- VARIABLES GLOBALES ---//
 147:src/main.c    **** 
 148:src/main.c    **** 
 149:src/main.c    **** //para las mediciones
 150:src/main.c    **** // unsigned int power_2secs_acum = 0;
 151:src/main.c    **** // unsigned char power_2secs_index = 0;
 152:src/main.c    **** // unsigned short power_minutes = 0;
 153:src/main.c    **** // unsigned char power_minutes_index = 0;
 154:src/main.c    **** // unsigned short power_hours = 0;
 155:src/main.c    **** 
 156:src/main.c    **** //para los msjs GSM
 157:src/main.c    **** char gsmNUM [20];
 158:src/main.c    **** char gsmMSG [180];
 159:src/main.c    **** 
 160:src/main.c    **** 
 161:src/main.c    **** 
 162:src/main.c    **** 
 163:src/main.c    **** 
 164:src/main.c    **** 
 165:src/main.c    **** // ------- de los timers -------
 166:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 167:src/main.c    **** volatile unsigned short timer_standby;
 168:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 169:src/main.c    **** //volatile unsigned char display_timer;
 170:src/main.c    **** volatile unsigned char filter_timer;
 171:src/main.c    **** 
 172:src/main.c    **** //volatile unsigned char door_filter;
 173:src/main.c    **** //volatile unsigned char take_sample;
 174:src/main.c    **** //volatile unsigned char move_relay;
 175:src/main.c    **** #ifdef WITH_HYST
 176:src/main.c    **** volatile unsigned short secs = 0;
ARM GAS  /tmp/ccQGhvTg.s 			page 29


 177:src/main.c    **** volatile unsigned char hours = 0;
 178:src/main.c    **** volatile unsigned char minutes = 0;
 179:src/main.c    **** #endif
 180:src/main.c    **** 
 181:src/main.c    **** #define SIZEOF_POWER_VECT		10
 182:src/main.c    **** 
 183:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 184:src/main.c    **** 
 185:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 186:src/main.c    **** void TimingDelay_Decrement(void);
 187:src/main.c    **** 
 188:src/main.c    **** // ------- del DMX -------
 189:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 190:src/main.c    **** #define DMX_TIMEOUT	20
 191:src/main.c    **** 
 192:src/main.c    **** //--- FILTROS DE SENSORES ---//
 193:src/main.c    **** #define LARGO_FILTRO 16
 194:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 195:src/main.c    **** //#define LARGO_FILTRO 32
 196:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 197:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 198:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 199:src/main.c    **** 
 200:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 201:src/main.c    **** 
 202:src/main.c    **** // #define KW			0.009721
 203:src/main.c    **** // #define KW			0.00945
 204:src/main.c    **** // #define KW			0.00959
 205:src/main.c    **** #define KW			0.01013
 206:src/main.c    **** 
 207:src/main.c    **** //--- Private Definitions ---//
 208:src/main.c    **** #define num_tel_rep		param_struct.num_reportar
 209:src/main.c    **** 
 210:src/main.c    **** 
 211:src/main.c    **** //-------------------------------------------//
 212:src/main.c    **** // @brief  Main program.
 213:src/main.c    **** // @param  None
 214:src/main.c    **** // @retval None
 215:src/main.c    **** //------------------------------------------//
 216:src/main.c    **** int main(void)
 217:src/main.c    **** {
 412              		.loc 2 217 0
 413              		.cfi_startproc
 414 0000 30B5     		push	{r4, r5, lr}	@
 415              	.LCFI4:
 416              		.cfi_def_cfa_offset 12
 417              		.cfi_offset 4, -12
 418              		.cfi_offset 5, -8
 419              		.cfi_offset 14, -4
 420 0002 99B0     		sub	sp, sp, #100	@,,
 421              	.LCFI5:
 422              		.cfi_def_cfa_offset 112
 218:src/main.c    **** 	unsigned char i, ii;
 219:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 423              		.loc 2 219 0
 424 0004 4123     		movs	r3, #65	@ tmp184,
 425 0006 6B44     		add	r3, r3, sp	@ tmp184,
ARM GAS  /tmp/ccQGhvTg.s 			page 30


 426 0008 0022     		movs	r2, #0	@ tmp185,
 427 000a 1A70     		strb	r2, [r3]	@ tmp186, need_ack
 220:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 428              		.loc 2 220 0
 429 000c 10AB     		add	r3, sp, #64	@ tmp187,,
 430 000e 0022     		movs	r2, #0	@ tmp188,
 431 0010 1A70     		strb	r2, [r3]	@ tmp189, resp
 221:src/main.c    **** 	unsigned short power_int, power_dec;
 222:src/main.c    **** 	unsigned short wh_int, wh_dec;
 223:src/main.c    **** 	unsigned short power, last_power;
 224:src/main.c    **** 	float fcalc = 1.0;
 432              		.loc 2 224 0
 433 0012 FE23     		movs	r3, #254	@ tmp190,
 434 0014 9B05     		lsls	r3, r3, #22	@ tmp190, tmp190,
 435 0016 0F93     		str	r3, [sp, #60]	@ tmp190, fcalc
 225:src/main.c    **** 	unsigned int zero_current_loc = 0;
 436              		.loc 2 225 0
 437 0018 0023     		movs	r3, #0	@ tmp191,
 438 001a 1593     		str	r3, [sp, #84]	@ tmp191, zero_current_loc
 226:src/main.c    **** 
 227:src/main.c    **** 	unsigned short acum_secs_index;
 228:src/main.c    **** 	unsigned int acum_secs, acum_hours;
 229:src/main.c    **** 	unsigned char show_power_index = 0;
 439              		.loc 2 229 0
 440 001c 4723     		movs	r3, #71	@ tmp192,
 441 001e 6B44     		add	r3, r3, sp	@ tmp192,
 442 0020 0022     		movs	r2, #0	@ tmp193,
 443 0022 1A70     		strb	r2, [r3]	@ tmp194, show_power_index
 230:src/main.c    **** 	unsigned char show_power = 0;
 444              		.loc 2 230 0
 445 0024 3B23     		movs	r3, #59	@ tmp195,
 446 0026 6B44     		add	r3, r3, sp	@ tmp195,
 447 0028 0022     		movs	r2, #0	@ tmp196,
 448 002a 1A70     		strb	r2, [r3]	@ tmp197, show_power
 231:src/main.c    **** 
 232:src/main.c    **** #ifdef USE_REDONDA_BASIC
 233:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 449              		.loc 2 233 0
 450 002c 4623     		movs	r3, #70	@ tmp198,
 451 002e 6B44     		add	r3, r3, sp	@ tmp198,
 452 0030 0022     		movs	r2, #0	@ tmp199,
 453 0032 1A70     		strb	r2, [r3]	@ tmp200, main_state
 234:src/main.c    **** 	unsigned char reportar_SMS = 0;
 454              		.loc 2 234 0
 455 0034 4523     		movs	r3, #69	@ tmp201,
 456 0036 6B44     		add	r3, r3, sp	@ tmp201,
 457 0038 0022     		movs	r2, #0	@ tmp202,
 458 003a 1A70     		strb	r2, [r3]	@ tmp203, reportar_SMS
 235:src/main.c    **** 	unsigned char sended = 0;
 459              		.loc 2 235 0
 460 003c 3A23     		movs	r3, #58	@ tmp204,
 461 003e 6B44     		add	r3, r3, sp	@ tmp204,
 462 0040 0022     		movs	r2, #0	@ tmp205,
 463 0042 1A70     		strb	r2, [r3]	@ tmp206, sended
 236:src/main.c    **** 	lamp_on_state_t lamp_on_state = init_airplane0;
 464              		.loc 2 236 0
 465 0044 11AB     		add	r3, sp, #68	@ tmp207,,
ARM GAS  /tmp/ccQGhvTg.s 			page 31


 466 0046 0022     		movs	r2, #0	@ tmp208,
 467 0048 1A70     		strb	r2, [r3]	@ tmp209, lamp_on_state
 237:src/main.c    **** 	unsigned char counters_mode = 0;
 468              		.loc 2 237 0
 469 004a 4323     		movs	r3, #67	@ tmp210,
 470 004c 6B44     		add	r3, r3, sp	@ tmp210,
 471 004e 0022     		movs	r2, #0	@ tmp211,
 472 0050 1A70     		strb	r2, [r3]	@ tmp212, counters_mode
 238:src/main.c    **** 	unsigned char meas_end = 0;
 473              		.loc 2 238 0
 474 0052 4223     		movs	r3, #66	@ tmp213,
 475 0054 6B44     		add	r3, r3, sp	@ tmp213,
 476 0056 0022     		movs	r2, #0	@ tmp214,
 477 0058 1A70     		strb	r2, [r3]	@ tmp215, meas_end
 239:src/main.c    **** 
 240:src/main.c    **** #ifdef WITH_HYST
 241:src/main.c    **** 	unsigned short hyst;
 242:src/main.c    **** #endif
 243:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 244:src/main.c    **** 	unsigned char one_to_ten;
 245:src/main.c    **** #endif
 246:src/main.c    **** 
 247:src/main.c    **** #else		//USE_REDONDA_BASIC
 248:src/main.c    **** 	unsigned char main_state = 0;
 249:src/main.c    **** #endif
 250:src/main.c    **** 	char s_lcd [40];
 251:src/main.c    **** 	// enum TcpMessages tcp_msg = NONE_MSG;
 252:src/main.c    **** 	// unsigned char new_room = 0;
 253:src/main.c    **** 	// unsigned char new_lamp = 0;
 254:src/main.c    **** 	// unsigned char last_bright = 0;
 255:src/main.c    **** 	// unsigned char show_ldr = 0;
 256:src/main.c    **** 	// int dummy_resp = 0;
 257:src/main.c    **** 	// unsigned char pps_one = 0;
 258:src/main.c    **** 
 259:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 260:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 261:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 262:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 263:src/main.c    ****     //   system_stm32f0xx.c file
 264:src/main.c    **** 
 265:src/main.c    **** 	//GPIO Configuration.
 266:src/main.c    **** 	GPIO_Config();
 478              		.loc 2 266 0
 479 005a FFF7FEFF 		bl	GPIO_Config	@
 267:src/main.c    **** 
 268:src/main.c    **** 
 269:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 270:src/main.c    **** 	if (SysTick_Config(48000))
 480              		.loc 2 270 0
 481 005e DD4B     		ldr	r3, .L74	@ tmp216,
 482 0060 1800     		movs	r0, r3	@, tmp216
 483 0062 FFF7FEFF 		bl	SysTick_Config	@
 484 0066 031E     		subs	r3, r0, #0	@ D.7196,,
 485 0068 28D0     		beq	.L13	@,
 486              	.L18:
 271:src/main.c    **** 	{
 272:src/main.c    **** 		while (1)	/* Capture error */
ARM GAS  /tmp/ccQGhvTg.s 			page 32


 273:src/main.c    **** 		{
 274:src/main.c    **** 			if (LED)
 487              		.loc 2 274 0
 488 006a 9023     		movs	r3, #144	@ tmp556,
 489 006c DB05     		lsls	r3, r3, #23	@ D.7197, tmp556,
 490 006e 9B8A     		ldrh	r3, [r3, #20]	@ tmp218,
 491 0070 9BB2     		uxth	r3, r3	@ D.7198, tmp218
 492 0072 1A00     		movs	r2, r3	@ D.7199, D.7198
 493 0074 8023     		movs	r3, #128	@ tmp557,
 494 0076 5B01     		lsls	r3, r3, #5	@ tmp219, tmp557,
 495 0078 1340     		ands	r3, r2	@ D.7199, D.7199
 496 007a 05D0     		beq	.L14	@,
 275:src/main.c    **** 				LED_OFF;
 497              		.loc 2 275 0
 498 007c 9023     		movs	r3, #144	@ tmp554,
 499 007e DB05     		lsls	r3, r3, #23	@ D.7197, tmp554,
 500 0080 8022     		movs	r2, #128	@ tmp555,
 501 0082 5205     		lsls	r2, r2, #21	@ tmp220, tmp555,
 502 0084 9A61     		str	r2, [r3, #24]	@ tmp220, _113->BSRR
 503 0086 04E0     		b	.L15	@
 504              	.L14:
 276:src/main.c    **** 			else
 277:src/main.c    **** 				LED_ON;
 505              		.loc 2 277 0
 506 0088 9023     		movs	r3, #144	@ tmp552,
 507 008a DB05     		lsls	r3, r3, #23	@ D.7197, tmp552,
 508 008c 8022     		movs	r2, #128	@ tmp553,
 509 008e 5201     		lsls	r2, r2, #5	@ tmp221, tmp553,
 510 0090 9A61     		str	r2, [r3, #24]	@ tmp221, _115->BSRR
 511              	.L15:
 278:src/main.c    **** 
 279:src/main.c    **** 			for (i = 0; i < 255; i++)
 512              		.loc 2 279 0
 513 0092 5F23     		movs	r3, #95	@ tmp222,
 514 0094 6B44     		add	r3, r3, sp	@ tmp222,
 515 0096 0022     		movs	r2, #0	@ tmp223,
 516 0098 1A70     		strb	r2, [r3]	@ tmp224, i
 517 009a 09E0     		b	.L16	@
 518              	.L17:
 280:src/main.c    **** 			{
 281:src/main.c    **** 				asm (	"nop \n\t"
 519              		.loc 2 281 0 discriminator 3
 520              		.syntax divided
 521              	@ 281 "src/main.c" 1
 522 009c C046     		nop 
 523 009e C046     		nop 
 524 00a0 C046     		nop 
 525              		
 526              	@ 0 "" 2
 279:src/main.c    **** 			{
 527              		.loc 2 279 0 discriminator 3
 528              		.thumb
 529              		.syntax unified
 530 00a2 5F23     		movs	r3, #95	@ tmp225,
 531 00a4 6B44     		add	r3, r3, sp	@ tmp225,
 532 00a6 1A78     		ldrb	r2, [r3]	@ D.7200, i
 533 00a8 5F23     		movs	r3, #95	@ tmp226,
ARM GAS  /tmp/ccQGhvTg.s 			page 33


 534 00aa 6B44     		add	r3, r3, sp	@ tmp226,
 535 00ac 0132     		adds	r2, r2, #1	@ tmp227,
 536 00ae 1A70     		strb	r2, [r3]	@ tmp228, i
 537              	.L16:
 279:src/main.c    **** 			{
 538              		.loc 2 279 0 is_stmt 0 discriminator 1
 539 00b0 5F23     		movs	r3, #95	@ tmp229,
 540 00b2 6B44     		add	r3, r3, sp	@ tmp229,
 541 00b4 1B78     		ldrb	r3, [r3]	@ tmp230, i
 542 00b6 FF2B     		cmp	r3, #255	@ tmp230,
 543 00b8 F0D1     		bne	.L17	@,
 282:src/main.c    **** 						"nop \n\t"
 283:src/main.c    **** 						"nop \n\t" );
 284:src/main.c    **** 			}
 285:src/main.c    **** 		}
 544              		.loc 2 285 0 is_stmt 1
 545 00ba D6E7     		b	.L18	@
 546              	.L13:
 286:src/main.c    **** 	}
 287:src/main.c    **** 
 288:src/main.c    **** 
 289:src/main.c    **** 	//ADC Configuration
 290:src/main.c    **** //	AdcConfig();
 291:src/main.c    **** 
 292:src/main.c    **** 	//TIM Configuration.
 293:src/main.c    **** 	// TIM_3_Init();
 294:src/main.c    **** //	TIM_14_Init();
 295:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 296:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 297:src/main.c    **** 
 298:src/main.c    **** //	EXTIOff ();
 299:src/main.c    **** 
 300:src/main.c    **** 	// while (1)
 301:src/main.c    **** 	// {
 302:src/main.c    **** 	// 	// if (SYNCP)
 303:src/main.c    **** 	// 	// {
 304:src/main.c    **** 	// 	// 	SYNCP_OFF;
 305:src/main.c    **** 	// 	// 	LED_OFF;
 306:src/main.c    **** 	// 	// }
 307:src/main.c    **** 	// 	// else
 308:src/main.c    **** 	// 	// {
 309:src/main.c    **** 	// 	// 	SYNCP_ON;
 310:src/main.c    **** 	// 	// 	LED_ON;
 311:src/main.c    **** 	// 	// }
 312:src/main.c    **** 	// 	// Wait_ms(10);
 313:src/main.c    **** 	//
 314:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 315:src/main.c    **** 	// 	// {
 316:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 317:src/main.c    **** 	// 	// 	Wait_ms (10);
 318:src/main.c    **** 	// 	// }
 319:src/main.c    **** 	// }
 320:src/main.c    **** 
 321:src/main.c    **** //		while (1)
 322:src/main.c    **** //		{
 323:src/main.c    **** //			PIN3_OFF;
 324:src/main.c    **** //			Wait_ms (10);
ARM GAS  /tmp/ccQGhvTg.s 			page 34


 325:src/main.c    **** //			PIN3_ON;
 326:src/main.c    **** //			Wait_ms (10);
 327:src/main.c    **** //		}
 328:src/main.c    **** 
 329:src/main.c    **** 	//--- Leo los parametros de memoria ---//
 330:src/main.c    **** 	param_struct.acumm_historico = ((parameters_typedef *) (unsigned int *) PAGE63)->acumm_historico;
 547              		.loc 2 330 0
 548 00bc C64B     		ldr	r3, .L74+4	@ D.7201,
 549 00be 9A6C     		ldr	r2, [r3, #72]	@ D.7202, _120->acumm_historico
 550 00c0 C64B     		ldr	r3, .L74+8	@ tmp231,
 551 00c2 9A64     		str	r2, [r3, #72]	@ D.7202, param_struct.acumm_historico
 331:src/main.c    **** 	if (param_struct.acumm_historico != 0xFFFFFFFF)
 552              		.loc 2 331 0
 553 00c4 C54B     		ldr	r3, .L74+8	@ tmp232,
 554 00c6 9B6C     		ldr	r3, [r3, #72]	@ D.7202, param_struct.acumm_historico
 555 00c8 0133     		adds	r3, r3, #1	@ tmp558, D.7202,
 556 00ca 10D0     		beq	.L19	@,
 332:src/main.c    **** 	{
 333:src/main.c    **** 		//memoria no vacia
 334:src/main.c    **** 		strncpy( param_struct.num_reportar,
 557              		.loc 2 334 0
 558 00cc C249     		ldr	r1, .L74+4	@ tmp233,
 559 00ce C34B     		ldr	r3, .L74+8	@ tmp234,
 560 00d0 1822     		movs	r2, #24	@,
 561 00d2 1800     		movs	r0, r3	@, tmp234
 562 00d4 FFF7FEFF 		bl	strncpy	@
 335:src/main.c    **** 					((parameters_typedef *) (char *) PAGE63)->num_reportar,
 336:src/main.c    **** 					sizeof(param_struct.num_reportar));
 337:src/main.c    **** 
 338:src/main.c    **** 
 339:src/main.c    **** 		param_struct.timer_reportar = ((parameters_typedef *) (unsigned int *) PAGE63)->timer_reportar;
 563              		.loc 2 339 0
 564 00d8 BF4A     		ldr	r2, .L74+4	@ D.7201,
 565 00da 5223     		movs	r3, #82	@ tmp235,
 566 00dc D15C     		ldrb	r1, [r2, r3]	@ D.7200,
 567 00de BF4B     		ldr	r3, .L74+8	@ tmp236,
 568 00e0 5222     		movs	r2, #82	@ tmp237,
 569 00e2 9954     		strb	r1, [r3, r2]	@ tmp238, param_struct.timer_reportar
 340:src/main.c    **** 		reportar_SMS = 1;
 570              		.loc 2 340 0
 571 00e4 4523     		movs	r3, #69	@ tmp239,
 572 00e6 6B44     		add	r3, r3, sp	@ tmp239,
 573 00e8 0122     		movs	r2, #1	@ tmp240,
 574 00ea 1A70     		strb	r2, [r3]	@ tmp241, reportar_SMS
 575 00ec 0AE0     		b	.L20	@
 576              	.L19:
 341:src/main.c    **** 	}
 342:src/main.c    **** 	else
 343:src/main.c    **** 	{
 344:src/main.c    **** 		//memoria vacia
 345:src/main.c    **** 		param_struct.acumm_historico = 0;
 577              		.loc 2 345 0
 578 00ee BB4B     		ldr	r3, .L74+8	@ tmp242,
 579 00f0 0022     		movs	r2, #0	@ tmp243,
 580 00f2 9A64     		str	r2, [r3, #72]	@ tmp243, param_struct.acumm_historico
 346:src/main.c    **** 		param_struct.timer_reportar = 0;
 581              		.loc 2 346 0
ARM GAS  /tmp/ccQGhvTg.s 			page 35


 582 00f4 B94B     		ldr	r3, .L74+8	@ tmp244,
 583 00f6 5222     		movs	r2, #82	@ tmp245,
 584 00f8 0021     		movs	r1, #0	@ tmp246,
 585 00fa 9954     		strb	r1, [r3, r2]	@ tmp247, param_struct.timer_reportar
 347:src/main.c    **** 		reportar_SMS = 0;
 586              		.loc 2 347 0
 587 00fc 4523     		movs	r3, #69	@ tmp248,
 588 00fe 6B44     		add	r3, r3, sp	@ tmp248,
 589 0100 0022     		movs	r2, #0	@ tmp249,
 590 0102 1A70     		strb	r2, [r3]	@ tmp250, reportar_SMS
 591              	.L20:
 348:src/main.c    **** 	}
 349:src/main.c    **** 
 350:src/main.c    **** 
 351:src/main.c    **** 
 352:src/main.c    **** 	//--- Welcome code ---//
 353:src/main.c    **** 	LED_OFF;
 592              		.loc 2 353 0
 593 0104 9023     		movs	r3, #144	@ tmp546,
 594 0106 DB05     		lsls	r3, r3, #23	@ D.7197, tmp546,
 595 0108 8022     		movs	r2, #128	@ tmp547,
 596 010a 5205     		lsls	r2, r2, #21	@ tmp251, tmp547,
 597 010c 9A61     		str	r2, [r3, #24]	@ tmp251, _132->BSRR
 354:src/main.c    **** //	EN_GPS_OFF;
 355:src/main.c    **** 	EN_GPS_ON;
 598              		.loc 2 355 0
 599 010e 9023     		movs	r3, #144	@ tmp548,
 600 0110 DB05     		lsls	r3, r3, #23	@ D.7197, tmp548,
 601 0112 8022     		movs	r2, #128	@ tmp549,
 602 0114 1202     		lsls	r2, r2, #8	@ tmp252, tmp549,
 603 0116 9A61     		str	r2, [r3, #24]	@ tmp252, _134->BSRR
 356:src/main.c    **** 	//RELAY_ON;
 357:src/main.c    **** 	RELAY_OFF;
 604              		.loc 2 357 0
 605 0118 9023     		movs	r3, #144	@ tmp550,
 606 011a DB05     		lsls	r3, r3, #23	@ D.7197, tmp550,
 607 011c 8022     		movs	r2, #128	@ tmp551,
 608 011e 1205     		lsls	r2, r2, #20	@ tmp253, tmp551,
 609 0120 9A61     		str	r2, [r3, #24]	@ tmp253, _136->BSRR
 358:src/main.c    **** 
 359:src/main.c    **** 	USART1Config();
 610              		.loc 2 359 0
 611 0122 FFF7FEFF 		bl	USART1Config	@
 360:src/main.c    **** 	USART2Config();
 612              		.loc 2 360 0
 613 0126 FFF7FEFF 		bl	USART2Config	@
 361:src/main.c    **** 
 362:src/main.c    **** 	EXTIOff();
 614              		.loc 2 362 0
 615 012a FFF7FEFF 		bl	EXTIOff	@
 363:src/main.c    **** 
 364:src/main.c    **** 
 365:src/main.c    **** #ifdef USE_REDONDA_BASIC
 366:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 367:src/main.c    **** 	// USART1Config();
 368:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 616              		.loc 2 368 0
ARM GAS  /tmp/ccQGhvTg.s 			page 36


 617 012e FFF7FEFF 		bl	AdcConfig	@
 369:src/main.c    **** 
 370:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 371:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 618              		.loc 2 371 0
 619 0132 FFF7FEFF 		bl	TIM_3_Init	@
 372:src/main.c    **** #endif
 373:src/main.c    **** 
 374:src/main.c    **** 	TIM_16_Init();					//o tuilizo para synchro de relay
 620              		.loc 2 374 0
 621 0136 FFF7FEFF 		bl	TIM_16_Init	@
 375:src/main.c    **** 	TIM16Enable();
 622              		.loc 2 375 0
 623 013a FFF7FEFF 		bl	TIM16Enable	@
 376:src/main.c    **** 
 377:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 624              		.loc 2 377 0
 625 013e A84B     		ldr	r3, .L74+12	@ tmp254,
 626 0140 1800     		movs	r0, r3	@, tmp254
 627 0142 FFF7FEFF 		bl	Usart2Send	@
 378:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 628              		.loc 2 378 0
 629 0146 A74B     		ldr	r3, .L74+16	@ tmp255,
 630 0148 1800     		movs	r0, r3	@, tmp255
 631 014a FFF7FEFF 		bl	Usart2Send	@
 379:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 380:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 632              		.loc 2 380 0
 633 014e A64B     		ldr	r3, .L74+20	@ tmp256,
 634 0150 1800     		movs	r0, r3	@, tmp256
 635 0152 FFF7FEFF 		bl	Usart2Send	@
 381:src/main.c    **** 	#endif
 382:src/main.c    **** 	#ifdef WITH_HYST
 383:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 636              		.loc 2 383 0
 637 0156 A54B     		ldr	r3, .L74+24	@ tmp257,
 638 0158 1800     		movs	r0, r3	@, tmp257
 639 015a FFF7FEFF 		bl	Usart2Send	@
 384:src/main.c    **** 	#endif
 385:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 386:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 387:src/main.c    **** 	#endif
 388:src/main.c    **** 	#ifdef USE_WITH_SYNC
 389:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 390:src/main.c    **** 	#else
 391:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 640              		.loc 2 391 0
 641 015e A44B     		ldr	r3, .L74+28	@ tmp258,
 642 0160 1800     		movs	r0, r3	@, tmp258
 643 0162 FFF7FEFF 		bl	Usart2Send	@
 392:src/main.c    **** 	#endif
 393:src/main.c    **** 	#ifdef USE_GSM
 394:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 644              		.loc 2 394 0
 645 0166 A34B     		ldr	r3, .L74+32	@ tmp259,
 646 0168 1800     		movs	r0, r3	@, tmp259
 647 016a FFF7FEFF 		bl	Usart2Send	@
ARM GAS  /tmp/ccQGhvTg.s 			page 37


 395:src/main.c    **** 	#endif
 396:src/main.c    **** 
 397:src/main.c    **** 
 398:src/main.c    **** 
 399:src/main.c    **** 	for (i = 0; i < 8; i++)
 648              		.loc 2 399 0
 649 016e 5F23     		movs	r3, #95	@ tmp260,
 650 0170 6B44     		add	r3, r3, sp	@ tmp260,
 651 0172 0022     		movs	r2, #0	@ tmp261,
 652 0174 1A70     		strb	r2, [r3]	@ tmp262, i
 653 0176 1DE0     		b	.L21	@
 654              	.L24:
 400:src/main.c    **** 	{
 401:src/main.c    **** 		if (LED)
 655              		.loc 2 401 0
 656 0178 9023     		movs	r3, #144	@ tmp544,
 657 017a DB05     		lsls	r3, r3, #23	@ D.7197, tmp544,
 658 017c 9B8A     		ldrh	r3, [r3, #20]	@ tmp264,
 659 017e 9BB2     		uxth	r3, r3	@ D.7198, tmp264
 660 0180 1A00     		movs	r2, r3	@ D.7199, D.7198
 661 0182 8023     		movs	r3, #128	@ tmp545,
 662 0184 5B01     		lsls	r3, r3, #5	@ tmp265, tmp545,
 663 0186 1340     		ands	r3, r2	@ D.7199, D.7199
 664 0188 05D0     		beq	.L22	@,
 402:src/main.c    **** 			LED_OFF;
 665              		.loc 2 402 0
 666 018a 9023     		movs	r3, #144	@ tmp542,
 667 018c DB05     		lsls	r3, r3, #23	@ D.7197, tmp542,
 668 018e 8022     		movs	r2, #128	@ tmp543,
 669 0190 5205     		lsls	r2, r2, #21	@ tmp266, tmp543,
 670 0192 9A61     		str	r2, [r3, #24]	@ tmp266, _156->BSRR
 671 0194 04E0     		b	.L23	@
 672              	.L22:
 403:src/main.c    **** 		else
 404:src/main.c    **** 			LED_ON;
 673              		.loc 2 404 0
 674 0196 9023     		movs	r3, #144	@ tmp540,
 675 0198 DB05     		lsls	r3, r3, #23	@ D.7197, tmp540,
 676 019a 8022     		movs	r2, #128	@ tmp541,
 677 019c 5201     		lsls	r2, r2, #5	@ tmp267, tmp541,
 678 019e 9A61     		str	r2, [r3, #24]	@ tmp267, _158->BSRR
 679              	.L23:
 405:src/main.c    **** 
 406:src/main.c    **** 		Wait_ms (250);
 680              		.loc 2 406 0 discriminator 2
 681 01a0 FA20     		movs	r0, #250	@,
 682 01a2 FFF7FEFF 		bl	Wait_ms	@
 399:src/main.c    **** 	{
 683              		.loc 2 399 0 discriminator 2
 684 01a6 5F23     		movs	r3, #95	@ tmp268,
 685 01a8 6B44     		add	r3, r3, sp	@ tmp268,
 686 01aa 1A78     		ldrb	r2, [r3]	@ D.7200, i
 687 01ac 5F23     		movs	r3, #95	@ tmp269,
 688 01ae 6B44     		add	r3, r3, sp	@ tmp269,
 689 01b0 0132     		adds	r2, r2, #1	@ tmp270,
 690 01b2 1A70     		strb	r2, [r3]	@ tmp271, i
 691              	.L21:
ARM GAS  /tmp/ccQGhvTg.s 			page 38


 399:src/main.c    **** 	{
 692              		.loc 2 399 0 is_stmt 0 discriminator 1
 693 01b4 5F23     		movs	r3, #95	@ tmp272,
 694 01b6 6B44     		add	r3, r3, sp	@ tmp272,
 695 01b8 1B78     		ldrb	r3, [r3]	@ tmp273, i
 696 01ba 072B     		cmp	r3, #7	@ tmp273,
 697 01bc DCD9     		bls	.L24	@,
 407:src/main.c    **** 	}
 408:src/main.c    **** 
 409:src/main.c    **** 	timer_standby = 2000;
 698              		.loc 2 409 0 is_stmt 1
 699 01be 8E4B     		ldr	r3, .L74+36	@ tmp274,
 700 01c0 FA22     		movs	r2, #250	@ tmp539,
 701 01c2 D200     		lsls	r2, r2, #3	@ tmp275, tmp539,
 702 01c4 1A80     		strh	r2, [r3]	@ tmp276, timer_standby
 410:src/main.c    **** 	FuncsGSMReset();
 703              		.loc 2 410 0
 704 01c6 FFF7FEFF 		bl	FuncsGSMReset	@
 411:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 705              		.loc 2 411 0
 706 01ca 0220     		movs	r0, #2	@,
 707 01cc FFF7FEFF 		bl	Usart1Mode	@
 708              	.L63:
 412:src/main.c    **** 
 413:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 414:src/main.c    **** 	// while (1)
 415:src/main.c    **** 	// {
 416:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 417:src/main.c    **** 	// 	{
 418:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 419:src/main.c    **** 	// 		Wait_ms(10);
 420:src/main.c    **** 	// 	}
 421:src/main.c    **** 	//
 422:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 423:src/main.c    **** 	// 	{
 424:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 425:src/main.c    **** 	// 		Wait_ms(10);
 426:src/main.c    **** 	// 	}
 427:src/main.c    **** 	// }
 428:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 429:src/main.c    **** 
 430:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 431:src/main.c    **** 	// i = 0;
 432:src/main.c    **** 	// while (1)
 433:src/main.c    **** 	// {
 434:src/main.c    **** 	// 	switch (i)
 435:src/main.c    **** 	// 	{
 436:src/main.c    **** 	// 		case 0:
 437:src/main.c    **** 	// 			RelayOn();
 438:src/main.c    **** 	// 			timer_standby = 50;
 439:src/main.c    **** 	// 			LED_ON;
 440:src/main.c    **** 	// 			i++;
 441:src/main.c    **** 	// 			break;
 442:src/main.c    **** 	//
 443:src/main.c    **** 	// 		case 1:
 444:src/main.c    **** 	// 			if (!timer_standby)
 445:src/main.c    **** 	// 			{
ARM GAS  /tmp/ccQGhvTg.s 			page 39


 446:src/main.c    **** 	// 				RelayOff();
 447:src/main.c    **** 	// 				LED_OFF;
 448:src/main.c    **** 	// 				i++;
 449:src/main.c    **** 	// 				timer_standby = 10000;
 450:src/main.c    **** 	// 			}
 451:src/main.c    **** 	// 			break;
 452:src/main.c    **** 	//
 453:src/main.c    **** 	// 		case 2:
 454:src/main.c    **** 	// 			if (!timer_standby)
 455:src/main.c    **** 	// 			{
 456:src/main.c    **** 	// 				i = 0;
 457:src/main.c    **** 	// 			}
 458:src/main.c    **** 	// 			break;
 459:src/main.c    **** 	// 	}
 460:src/main.c    **** 	//
 461:src/main.c    **** 	// 	UpdateRelay ();
 462:src/main.c    **** 	// }
 463:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 464:src/main.c    **** 
 465:src/main.c    **** 
 466:src/main.c    **** //--- Programa de pruebas I meas -----
 467:src/main.c    **** 	while (1)
 468:src/main.c    **** 	{
 469:src/main.c    **** 		switch (main_state)
 709              		.loc 2 469 0
 710 01d0 4623     		movs	r3, #70	@ tmp277,
 711 01d2 6B44     		add	r3, r3, sp	@ tmp277,
 712 01d4 1B78     		ldrb	r3, [r3]	@ D.7199, main_state
 713 01d6 082B     		cmp	r3, #8	@ D.7199,
 714 01d8 00D9     		bls	.LCB462	@
 715 01da 4AE2     		b	.L25	@long jump	@
 716              	.LCB462:
 717 01dc 9A00     		lsls	r2, r3, #2	@ tmp278, D.7199,
 718 01de 874B     		ldr	r3, .L74+40	@ tmp280,
 719 01e0 D318     		adds	r3, r2, r3	@ tmp279, tmp278, tmp280
 720 01e2 1B68     		ldr	r3, [r3]	@ tmp281,
 721 01e4 9F46     		mov	pc, r3	@ tmp281
 722              		.section	.rodata.main,"a",%progbits
 723              		.align	2
 724              	.L27:
 725 0000 E6010000 		.word	.L26
 726 0004 08020000 		.word	.L28
 727 0008 40020000 		.word	.L29
 728 000c B6020000 		.word	.L30
 729 0010 7C060000 		.word	.L64
 730 0014 72060000 		.word	.L25
 731 0018 72060000 		.word	.L25
 732 001c 72060000 		.word	.L25
 733 0020 0A030000 		.word	.L32
 734              		.section	.text.main
 735              	.L26:
 470:src/main.c    **** 		{
 471:src/main.c    **** 			case MAIN_INIT:
 472:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 736              		.loc 2 472 0
 737 01e6 0A20     		movs	r0, #10	@,
 738 01e8 FFF7FEFF 		bl	Update_TIM3_CH1	@
ARM GAS  /tmp/ccQGhvTg.s 			page 40


 473:src/main.c    **** 				main_state = SYNCHRO_ADC;
 739              		.loc 2 473 0
 740 01ec 4623     		movs	r3, #70	@ tmp282,
 741 01ee 6B44     		add	r3, r3, sp	@ tmp282,
 742 01f0 0122     		movs	r2, #1	@ tmp283,
 743 01f2 1A70     		strb	r2, [r3]	@ tmp284, main_state
 474:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 744              		.loc 2 474 0
 745 01f4 824B     		ldr	r3, .L74+44	@ D.7203,
 746 01f6 824A     		ldr	r2, .L74+44	@ D.7203,
 747 01f8 9268     		ldr	r2, [r2, #8]	@ D.7196, _175->CR
 748 01fa 0421     		movs	r1, #4	@ tmp285,
 749 01fc 0A43     		orrs	r2, r1	@ D.7196, tmp285
 750 01fe 9A60     		str	r2, [r3, #8]	@ D.7196, _174->CR
 475:src/main.c    **** 				seq_ready = 0;
 751              		.loc 2 475 0
 752 0200 804B     		ldr	r3, .L74+48	@ tmp286,
 753 0202 0022     		movs	r2, #0	@ tmp287,
 754 0204 1A70     		strb	r2, [r3]	@ tmp288, seq_ready
 476:src/main.c    **** 				break;
 755              		.loc 2 476 0
 756 0206 42E2     		b	.L33	@
 757              	.L28:
 477:src/main.c    **** 
 478:src/main.c    **** 			case SYNCHRO_ADC:
 479:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 758              		.loc 2 479 0
 759 0208 7E4B     		ldr	r3, .L74+48	@ tmp289,
 760 020a 1B78     		ldrb	r3, [r3]	@ tmp290, seq_ready
 761 020c DBB2     		uxtb	r3, r3	@ D.7200, tmp290
 762 020e 002B     		cmp	r3, #0	@ D.7200,
 763 0210 00D1     		bne	.LCB497	@
 764 0212 35E2     		b	.L65	@long jump	@
 765              	.LCB497:
 480:src/main.c    **** 				{
 481:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 766              		.loc 2 481 0
 767 0214 7C4B     		ldr	r3, .L74+52	@ tmp291,
 768 0216 1800     		movs	r0, r3	@, tmp291
 769 0218 FFF7FEFF 		bl	Usart2Send	@
 482:src/main.c    **** 
 483:src/main.c    **** #ifdef USE_GSM
 484:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 770              		.loc 2 484 0
 771 021c 7B4B     		ldr	r3, .L74+56	@ tmp292,
 772 021e 1800     		movs	r0, r3	@, tmp292
 773 0220 FFF7FEFF 		bl	Usart2Send	@
 485:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 774              		.loc 2 485 0
 775 0224 4623     		movs	r3, #70	@ tmp293,
 776 0226 6B44     		add	r3, r3, sp	@ tmp293,
 777 0228 0222     		movs	r2, #2	@ tmp294,
 778 022a 1A70     		strb	r2, [r3]	@ tmp295, main_state
 486:src/main.c    **** 					timer_standby = 0;
 779              		.loc 2 486 0
 780 022c 724B     		ldr	r3, .L74+36	@ tmp296,
 781 022e 0022     		movs	r2, #0	@ tmp297,
ARM GAS  /tmp/ccQGhvTg.s 			page 41


 782 0230 1A80     		strh	r2, [r3]	@ tmp298, timer_standby
 487:src/main.c    **** 					zero_current_loc = 0;
 783              		.loc 2 487 0
 784 0232 0023     		movs	r3, #0	@ tmp299,
 785 0234 1593     		str	r3, [sp, #84]	@ tmp299, zero_current_loc
 488:src/main.c    **** 					i = 0;
 786              		.loc 2 488 0
 787 0236 5F23     		movs	r3, #95	@ tmp300,
 788 0238 6B44     		add	r3, r3, sp	@ tmp300,
 789 023a 0022     		movs	r2, #0	@ tmp301,
 790 023c 1A70     		strb	r2, [r3]	@ tmp302, i
 489:src/main.c    **** #else
 490:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 491:src/main.c    **** 					timer_standby = 60000;
 492:src/main.c    **** 					zero_current_loc = 0;
 493:src/main.c    **** 					i = 0;
 494:src/main.c    **** #endif
 495:src/main.c    **** 				}
 496:src/main.c    **** 				break;
 791              		.loc 2 496 0
 792 023e 1FE2     		b	.L65	@
 793              	.L29:
 497:src/main.c    **** 
 498:src/main.c    **** 			case SET_ZERO_CURRENT:
 499:src/main.c    **** 				if (!timer_standby)
 794              		.loc 2 499 0
 795 0240 6D4B     		ldr	r3, .L74+36	@ tmp303,
 796 0242 1B88     		ldrh	r3, [r3]	@ tmp304, timer_standby
 797 0244 9BB2     		uxth	r3, r3	@ D.7198, tmp304
 798 0246 002B     		cmp	r3, #0	@ D.7198,
 799 0248 00D0     		beq	.LCB525	@
 800 024a 1BE2     		b	.L66	@long jump	@
 801              	.LCB525:
 500:src/main.c    **** 				{
 501:src/main.c    **** 					if (i < 32)
 802              		.loc 2 501 0
 803 024c 5F23     		movs	r3, #95	@ tmp305,
 804 024e 6B44     		add	r3, r3, sp	@ tmp305,
 805 0250 1B78     		ldrb	r3, [r3]	@ tmp306, i
 806 0252 1F2B     		cmp	r3, #31	@ tmp306,
 807 0254 1AD8     		bhi	.L36	@,
 502:src/main.c    **** 					// if (i < 4)
 503:src/main.c    **** 					{
 504:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 808              		.loc 2 504 0
 809 0256 6B4B     		ldr	r3, .L74+48	@ tmp307,
 810 0258 1B78     		ldrb	r3, [r3]	@ tmp308, seq_ready
 811 025a DBB2     		uxtb	r3, r3	@ D.7200, tmp308
 812 025c 002B     		cmp	r3, #0	@ D.7200,
 813 025e 00D1     		bne	.LCB535	@
 814 0260 10E2     		b	.L66	@long jump	@
 815              	.LCB535:
 505:src/main.c    **** 						{
 506:src/main.c    **** 							seq_ready = 0;
 816              		.loc 2 506 0
 817 0262 684B     		ldr	r3, .L74+48	@ tmp309,
 818 0264 0022     		movs	r2, #0	@ tmp310,
ARM GAS  /tmp/ccQGhvTg.s 			page 42


 819 0266 1A70     		strb	r2, [r3]	@ tmp311, seq_ready
 507:src/main.c    **** 							zero_current_loc += I_Sense;
 820              		.loc 2 507 0
 821 0268 694B     		ldr	r3, .L74+60	@ tmp312,
 822 026a 9B88     		ldrh	r3, [r3, #4]	@ tmp314,
 823 026c 9BB2     		uxth	r3, r3	@ D.7198, tmp314
 824 026e 1A00     		movs	r2, r3	@ D.7202, D.7198
 825 0270 159B     		ldr	r3, [sp, #84]	@ tmp316, zero_current_loc
 826 0272 9B18     		adds	r3, r3, r2	@ tmp315, tmp316, D.7202
 827 0274 1593     		str	r3, [sp, #84]	@ tmp315, zero_current_loc
 508:src/main.c    **** 							i++;
 828              		.loc 2 508 0
 829 0276 5F23     		movs	r3, #95	@ tmp317,
 830 0278 6B44     		add	r3, r3, sp	@ tmp317,
 831 027a 1A78     		ldrb	r2, [r3]	@ D.7200, i
 832 027c 5F23     		movs	r3, #95	@ tmp318,
 833 027e 6B44     		add	r3, r3, sp	@ tmp318,
 834 0280 0132     		adds	r2, r2, #1	@ tmp319,
 835 0282 1A70     		strb	r2, [r3]	@ tmp320, i
 509:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 836              		.loc 2 509 0
 837 0284 5C4B     		ldr	r3, .L74+36	@ tmp321,
 838 0286 0222     		movs	r2, #2	@ tmp322,
 839 0288 1A80     		strh	r2, [r3]	@ tmp323, timer_standby
 510:src/main.c    **** 						}
 511:src/main.c    **** 					}
 512:src/main.c    **** 					else
 513:src/main.c    **** 					{
 514:src/main.c    **** 						zero_current_loc >>= 5;
 515:src/main.c    **** 						// zero_current_loc >>= 2;
 516:src/main.c    **** 						zero_current = zero_current_loc;
 517:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE;
 518:src/main.c    **** 						RELAY_ON;
 519:src/main.c    **** 						i = 0;
 520:src/main.c    **** 					}
 521:src/main.c    **** 				}
 522:src/main.c    **** 				break;
 840              		.loc 2 522 0
 841 028a FBE1     		b	.L66	@
 842              	.L36:
 514:src/main.c    **** 						// zero_current_loc >>= 2;
 843              		.loc 2 514 0
 844 028c 159B     		ldr	r3, [sp, #84]	@ tmp325, zero_current_loc
 845 028e 5B09     		lsrs	r3, r3, #5	@ tmp324, tmp325,
 846 0290 1593     		str	r3, [sp, #84]	@ tmp324, zero_current_loc
 516:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE;
 847              		.loc 2 516 0
 848 0292 159B     		ldr	r3, [sp, #84]	@ tmp327, zero_current_loc
 849 0294 9AB2     		uxth	r2, r3	@ D.7198, tmp326
 850 0296 5F4B     		ldr	r3, .L74+64	@ tmp328,
 851 0298 1A80     		strh	r2, [r3]	@ tmp329, zero_current
 517:src/main.c    **** 						RELAY_ON;
 852              		.loc 2 517 0
 853 029a 4623     		movs	r3, #70	@ tmp330,
 854 029c 6B44     		add	r3, r3, sp	@ tmp330,
 855 029e 0322     		movs	r2, #3	@ tmp331,
 856 02a0 1A70     		strb	r2, [r3]	@ tmp332, main_state
ARM GAS  /tmp/ccQGhvTg.s 			page 43


 518:src/main.c    **** 						i = 0;
 857              		.loc 2 518 0
 858 02a2 9023     		movs	r3, #144	@ tmp537,
 859 02a4 DB05     		lsls	r3, r3, #23	@ D.7197, tmp537,
 860 02a6 8022     		movs	r2, #128	@ tmp538,
 861 02a8 1201     		lsls	r2, r2, #4	@ tmp333, tmp538,
 862 02aa 9A61     		str	r2, [r3, #24]	@ tmp333, _200->BSRR
 519:src/main.c    **** 					}
 863              		.loc 2 519 0
 864 02ac 5F23     		movs	r3, #95	@ tmp334,
 865 02ae 6B44     		add	r3, r3, sp	@ tmp334,
 866 02b0 0022     		movs	r2, #0	@ tmp335,
 867 02b2 1A70     		strb	r2, [r3]	@ tmp336, i
 868              		.loc 2 522 0
 869 02b4 E6E1     		b	.L66	@
 870              	.L30:
 523:src/main.c    **** 
 524:src/main.c    **** 			case SET_COUNTERS_AND_PHONE:
 525:src/main.c    **** 				acum_secs = 0;
 871              		.loc 2 525 0
 872 02b6 0023     		movs	r3, #0	@ tmp337,
 873 02b8 1393     		str	r3, [sp, #76]	@ tmp337, acum_secs
 526:src/main.c    **** 				acum_secs_index = 0;
 874              		.loc 2 526 0
 875 02ba 5223     		movs	r3, #82	@ tmp338,
 876 02bc 6B44     		add	r3, r3, sp	@ tmp338,
 877 02be 0022     		movs	r2, #0	@ tmp339,
 878 02c0 1A80     		strh	r2, [r3]	@ tmp340, acum_secs_index
 527:src/main.c    **** 				acum_hours = 0;
 879              		.loc 2 527 0
 880 02c2 0023     		movs	r3, #0	@ tmp341,
 881 02c4 1293     		str	r3, [sp, #72]	@ tmp341, acum_hours
 528:src/main.c    **** 
 529:src/main.c    **** 				counters_mode = 0;
 882              		.loc 2 529 0
 883 02c6 4323     		movs	r3, #67	@ tmp342,
 884 02c8 6B44     		add	r3, r3, sp	@ tmp342,
 885 02ca 0022     		movs	r2, #0	@ tmp343,
 886 02cc 1A70     		strb	r2, [r3]	@ tmp344, counters_mode
 530:src/main.c    **** 
 531:src/main.c    **** 				if (reportar_SMS)
 887              		.loc 2 531 0
 888 02ce 4523     		movs	r3, #69	@ tmp345,
 889 02d0 6B44     		add	r3, r3, sp	@ tmp345,
 890 02d2 1B78     		ldrb	r3, [r3]	@ tmp346, reportar_SMS
 891 02d4 002B     		cmp	r3, #0	@ tmp346,
 892 02d6 13D0     		beq	.L38	@,
 532:src/main.c    **** 				{
 533:src/main.c    **** 					if (FuncsGSMStateAsk() == gsm_state_ready)
 893              		.loc 2 533 0
 894 02d8 FFF7FEFF 		bl	FuncsGSMStateAsk	@
 895 02dc 031E     		subs	r3, r0, #0	@ tmp347,,
 896 02de 032B     		cmp	r3, #3	@ tmp347,
 897 02e0 00D0     		beq	.LCB604	@
 898 02e2 D1E1     		b	.L67	@long jump	@
 899              	.LCB604:
 534:src/main.c    **** 					{
ARM GAS  /tmp/ccQGhvTg.s 			page 44


 535:src/main.c    **** 						Usart2Send((char *) (const char *) "Reports by SMS\r\n");
 900              		.loc 2 535 0
 901 02e4 4C4B     		ldr	r3, .L74+68	@ tmp349,
 902 02e6 1800     		movs	r0, r3	@, tmp349
 903 02e8 FFF7FEFF 		bl	Usart2Send	@
 536:src/main.c    **** 						main_state = LAMP_ON;
 904              		.loc 2 536 0
 905 02ec 4623     		movs	r3, #70	@ tmp350,
 906 02ee 6B44     		add	r3, r3, sp	@ tmp350,
 907 02f0 0822     		movs	r2, #8	@ tmp351,
 908 02f2 1A70     		strb	r2, [r3]	@ tmp352, main_state
 537:src/main.c    **** 						RELAY_ON;
 909              		.loc 2 537 0
 910 02f4 9023     		movs	r3, #144	@ tmp535,
 911 02f6 DB05     		lsls	r3, r3, #23	@ D.7197, tmp535,
 912 02f8 8022     		movs	r2, #128	@ tmp536,
 913 02fa 1201     		lsls	r2, r2, #4	@ tmp353, tmp536,
 914 02fc 9A61     		str	r2, [r3, #24]	@ tmp353, _211->BSRR
 538:src/main.c    **** 
 539:src/main.c    **** 
 540:src/main.c    **** 
 541:src/main.c    **** 					}
 542:src/main.c    **** 				}
 543:src/main.c    **** 				else
 544:src/main.c    **** 					main_state = LAMP_ON;
 545:src/main.c    **** 
 546:src/main.c    **** 
 547:src/main.c    **** 				break;
 915              		.loc 2 547 0
 916 02fe C3E1     		b	.L67	@
 917              	.L38:
 544:src/main.c    **** 
 918              		.loc 2 544 0
 919 0300 4623     		movs	r3, #70	@ tmp354,
 920 0302 6B44     		add	r3, r3, sp	@ tmp354,
 921 0304 0822     		movs	r2, #8	@ tmp355,
 922 0306 1A70     		strb	r2, [r3]	@ tmp356, main_state
 923              		.loc 2 547 0
 924 0308 BEE1     		b	.L67	@
 925              	.L32:
 548:src/main.c    **** 
 549:src/main.c    **** 			case LAMP_OFF:
 550:src/main.c    **** 				break;
 551:src/main.c    **** 
 552:src/main.c    **** 			case LAMP_ON:
 553:src/main.c    **** 				switch (lamp_on_state)
 926              		.loc 2 553 0
 927 030a 11AB     		add	r3, sp, #68	@ tmp357,,
 928 030c 1B78     		ldrb	r3, [r3]	@ D.7199, lamp_on_state
 929 030e 052B     		cmp	r3, #5	@ D.7199,
 930 0310 00D9     		bls	.LCB632	@
 931 0312 24E1     		b	.L41	@long jump	@
 932              	.LCB632:
 933 0314 9A00     		lsls	r2, r3, #2	@ tmp358, D.7199,
 934 0316 414B     		ldr	r3, .L74+72	@ tmp360,
 935 0318 D318     		adds	r3, r2, r3	@ tmp359, tmp358, tmp360
 936 031a 1B68     		ldr	r3, [r3]	@ tmp361,
ARM GAS  /tmp/ccQGhvTg.s 			page 45


 937 031c 9F46     		mov	pc, r3	@ tmp361
 938              		.section	.rodata.main
 939              		.align	2
 940              	.L43:
 941 0024 1E030000 		.word	.L42
 942 0028 44030000 		.word	.L44
 943 002c 62030000 		.word	.L45
 944 0030 7C030000 		.word	.L46
 945 0034 B8030000 		.word	.L47
 946 0038 30040000 		.word	.L48
 947              		.section	.text.main
 948              	.L42:
 554:src/main.c    **** 				{
 555:src/main.c    **** 					case init_airplane0:
 556:src/main.c    **** 						if (FuncsGSMStateAsk() == gsm_state_ready)
 949              		.loc 2 556 0
 950 031e FFF7FEFF 		bl	FuncsGSMStateAsk	@
 951 0322 031E     		subs	r3, r0, #0	@ tmp362,,
 952 0324 032B     		cmp	r3, #3	@ tmp362,
 953 0326 00D0     		beq	.LCB647	@
 954 0328 1DE1     		b	.L68	@long jump	@
 955              	.LCB647:
 557:src/main.c    **** 						{
 558:src/main.c    **** 							//lo paso a modo avion
 559:src/main.c    **** 							s_lcd[0] = '\0';
 956              		.loc 2 559 0
 957 032a 02AB     		add	r3, sp, #8	@ tmp364,,
 958 032c 0022     		movs	r2, #0	@ tmp365,
 959 032e 1A70     		strb	r2, [r3]	@ tmp366, s_lcd
 560:src/main.c    **** 							FuncsGSMCommandAnswer ("AT+CFUN=4\r\n" , s_lcd);
 960              		.loc 2 560 0
 961 0330 02AA     		add	r2, sp, #8	@ tmp367,,
 962 0332 3B4B     		ldr	r3, .L74+76	@ tmp368,
 963 0334 1100     		movs	r1, r2	@, tmp367
 964 0336 1800     		movs	r0, r3	@, tmp368
 965 0338 FFF7FEFF 		bl	FuncsGSMCommandAnswer	@
 561:src/main.c    **** 							lamp_on_state = init_airplane1;
 966              		.loc 2 561 0
 967 033c 11AB     		add	r3, sp, #68	@ tmp369,,
 968 033e 0122     		movs	r2, #1	@ tmp370,
 969 0340 1A70     		strb	r2, [r3]	@ tmp371, lamp_on_state
 562:src/main.c    **** 						}
 563:src/main.c    **** 						break;
 970              		.loc 2 563 0
 971 0342 10E1     		b	.L68	@
 972              	.L44:
 564:src/main.c    **** 
 565:src/main.c    **** 					case init_airplane1:
 566:src/main.c    **** 						if (strncmp(s_lcd, "OK", sizeof("OK") - 1))
 973              		.loc 2 566 0
 974 0344 3749     		ldr	r1, .L74+80	@ tmp372,
 975 0346 02AB     		add	r3, sp, #8	@ tmp373,,
 976 0348 0222     		movs	r2, #2	@,
 977 034a 1800     		movs	r0, r3	@, tmp373
 978 034c FFF7FEFF 		bl	strncmp	@
 979 0350 031E     		subs	r3, r0, #0	@ D.7199,,
 980 0352 00D1     		bne	.LCB670	@
ARM GAS  /tmp/ccQGhvTg.s 			page 46


 981 0354 09E1     		b	.L69	@long jump	@
 982              	.LCB670:
 567:src/main.c    **** 						{
 568:src/main.c    **** 							//en modo avion, prendo y mido
 569:src/main.c    **** 							RelayOn();
 983              		.loc 2 569 0
 984 0356 FFF7FEFF 		bl	RelayOn	@
 570:src/main.c    **** 							lamp_on_state = meas_init;
 985              		.loc 2 570 0
 986 035a 11AB     		add	r3, sp, #68	@ tmp374,,
 987 035c 0222     		movs	r2, #2	@ tmp375,
 988 035e 1A70     		strb	r2, [r3]	@ tmp376, lamp_on_state
 571:src/main.c    **** 						}
 572:src/main.c    **** 						break;
 989              		.loc 2 572 0
 990 0360 03E1     		b	.L69	@
 991              	.L45:
 573:src/main.c    **** 
 574:src/main.c    **** 					case meas_init:
 575:src/main.c    **** 						if (RelayIsOn())
 992              		.loc 2 575 0
 993 0362 FFF7FEFF 		bl	RelayIsOn	@
 994 0366 031E     		subs	r3, r0, #0	@ tmp377,,
 995 0368 00D1     		bne	.LCB682	@
 996 036a 00E1     		b	.L70	@long jump	@
 997              	.LCB682:
 576:src/main.c    **** 						{
 577:src/main.c    **** 							lamp_on_state = meas_meas;
 998              		.loc 2 577 0
 999 036c 11AB     		add	r3, sp, #68	@ tmp379,,
 1000 036e 0322     		movs	r2, #3	@ tmp380,
 1001 0370 1A70     		strb	r2, [r3]	@ tmp381, lamp_on_state
 578:src/main.c    **** 							counters_mode = 1;
 1002              		.loc 2 578 0
 1003 0372 4323     		movs	r3, #67	@ tmp382,
 1004 0374 6B44     		add	r3, r3, sp	@ tmp382,
 1005 0376 0122     		movs	r2, #1	@ tmp383,
 1006 0378 1A70     		strb	r2, [r3]	@ tmp384, counters_mode
 579:src/main.c    **** 						}
 580:src/main.c    **** 						break;
 1007              		.loc 2 580 0
 1008 037a F8E0     		b	.L70	@
 1009              	.L46:
 581:src/main.c    **** 
 582:src/main.c    **** 					case meas_meas:
 583:src/main.c    **** 						if (meas_end)
 1010              		.loc 2 583 0
 1011 037c 4223     		movs	r3, #66	@ tmp385,
 1012 037e 6B44     		add	r3, r3, sp	@ tmp385,
 1013 0380 1B78     		ldrb	r3, [r3]	@ tmp386, meas_end
 1014 0382 002B     		cmp	r3, #0	@ tmp386,
 1015 0384 00D1     		bne	.LCB698	@
 1016 0386 F4E0     		b	.L71	@long jump	@
 1017              	.LCB698:
 584:src/main.c    **** 						{
 585:src/main.c    **** 							meas_end = 0;
 1018              		.loc 2 585 0
ARM GAS  /tmp/ccQGhvTg.s 			page 47


 1019 0388 4223     		movs	r3, #66	@ tmp387,
 1020 038a 6B44     		add	r3, r3, sp	@ tmp387,
 1021 038c 0022     		movs	r2, #0	@ tmp388,
 1022 038e 1A70     		strb	r2, [r3]	@ tmp389, meas_end
 586:src/main.c    **** 
 587:src/main.c    **** 							if (!timer_rep)
 1023              		.loc 2 587 0
 1024 0390 254B     		ldr	r3, .L74+84	@ tmp390,
 1025 0392 1B88     		ldrh	r3, [r3]	@ tmp391, timer_rep
 1026 0394 9BB2     		uxth	r3, r3	@ D.7198, tmp391
 1027 0396 002B     		cmp	r3, #0	@ D.7198,
 1028 0398 00D0     		beq	.LCB707	@
 1029 039a EAE0     		b	.L71	@long jump	@
 1030              	.LCB707:
 588:src/main.c    **** 							{
 589:src/main.c    **** 								timer_rep = param_struct.timer_reportar;
 1031              		.loc 2 589 0
 1032 039c 0F4B     		ldr	r3, .L74+8	@ tmp392,
 1033 039e 5222     		movs	r2, #82	@ tmp393,
 1034 03a0 9B5C     		ldrb	r3, [r3, r2]	@ D.7200,
 1035 03a2 9AB2     		uxth	r2, r3	@ D.7198, D.7200
 1036 03a4 204B     		ldr	r3, .L74+84	@ tmp394,
 1037 03a6 1A80     		strh	r2, [r3]	@ tmp395, timer_rep
 590:src/main.c    **** 								counters_mode = 2;
 1038              		.loc 2 590 0
 1039 03a8 4323     		movs	r3, #67	@ tmp396,
 1040 03aa 6B44     		add	r3, r3, sp	@ tmp396,
 1041 03ac 0222     		movs	r2, #2	@ tmp397,
 1042 03ae 1A70     		strb	r2, [r3]	@ tmp398, counters_mode
 591:src/main.c    **** 								lamp_on_state = meas_reporting0;
 1043              		.loc 2 591 0
 1044 03b0 11AB     		add	r3, sp, #68	@ tmp399,,
 1045 03b2 0422     		movs	r2, #4	@ tmp400,
 1046 03b4 1A70     		strb	r2, [r3]	@ tmp401, lamp_on_state
 592:src/main.c    **** 							}
 593:src/main.c    **** 						}
 594:src/main.c    **** 						break;
 1047              		.loc 2 594 0
 1048 03b6 DCE0     		b	.L71	@
 1049              	.L47:
 595:src/main.c    **** 
 596:src/main.c    **** 					case meas_reporting0:
 597:src/main.c    **** 						//lo saco de modo avion
 598:src/main.c    **** 						s_lcd[0] = '\0';
 1050              		.loc 2 598 0
 1051 03b8 02AB     		add	r3, sp, #8	@ tmp402,,
 1052 03ba 0022     		movs	r2, #0	@ tmp403,
 1053 03bc 1A70     		strb	r2, [r3]	@ tmp404, s_lcd
 599:src/main.c    **** 						FuncsGSMCommandAnswer ("AT+CFUN=1\r\n" , s_lcd);
 1054              		.loc 2 599 0
 1055 03be 02AA     		add	r2, sp, #8	@ tmp405,,
 1056 03c0 1A4B     		ldr	r3, .L74+88	@ tmp406,
 1057 03c2 1100     		movs	r1, r2	@, tmp405
 1058 03c4 1800     		movs	r0, r3	@, tmp406
 1059 03c6 FFF7FEFF 		bl	FuncsGSMCommandAnswer	@
 600:src/main.c    **** 						lamp_on_state = meas_reporting1;
 1060              		.loc 2 600 0
ARM GAS  /tmp/ccQGhvTg.s 			page 48


 1061 03ca 11AB     		add	r3, sp, #68	@ tmp407,,
 1062 03cc 0522     		movs	r2, #5	@ tmp408,
 1063 03ce 1A70     		strb	r2, [r3]	@ tmp409, lamp_on_state
 601:src/main.c    **** 						break;
 1064              		.loc 2 601 0
 1065 03d0 D2E0     		b	.L50	@
 1066              	.L75:
 1067 03d2 C046     		.align	2
 1068              	.L74:
 1069 03d4 80BB0000 		.word	48000
 1070 03d8 00FC0008 		.word	134282240
 1071 03dc 00000000 		.word	param_struct
 1072 03e0 00000000 		.word	.LC1
 1073 03e4 28000000 		.word	.LC3
 1074 03e8 38000000 		.word	.LC5
 1075 03ec 4C000000 		.word	.LC7
 1076 03f0 64000000 		.word	.LC9
 1077 03f4 74000000 		.word	.LC11
 1078 03f8 00000000 		.word	timer_standby
 1079 03fc 00000000 		.word	.L27
 1080 0400 00240140 		.word	1073816576
 1081 0404 00000000 		.word	seq_ready
 1082 0408 90000000 		.word	.LC16
 1083 040c 9C000000 		.word	.LC18
 1084 0410 00000000 		.word	adc_ch
 1085 0414 00000000 		.word	zero_current
 1086 0418 C4000000 		.word	.LC22
 1087 041c 24000000 		.word	.L43
 1088 0420 D8000000 		.word	.LC25
 1089 0424 E4000000 		.word	.LC27
 1090 0428 00000000 		.word	timer_rep
 1091 042c E8000000 		.word	.LC30
 1092              	.L48:
 602:src/main.c    **** 
 603:src/main.c    **** 					case meas_reporting1:
 604:src/main.c    **** 						if (strncmp(s_lcd, "OK", sizeof("OK") - 1))
 1093              		.loc 2 604 0
 1094 0430 9F49     		ldr	r1, .L76	@ tmp410,
 1095 0432 02AB     		add	r3, sp, #8	@ tmp411,,
 1096 0434 0222     		movs	r2, #2	@,
 1097 0436 1800     		movs	r0, r3	@, tmp411
 1098 0438 FFF7FEFF 		bl	strncmp	@
 1099 043c 031E     		subs	r3, r0, #0	@ D.7199,,
 1100 043e 00D1     		bne	.LCB775	@
 1101 0440 99E0     		b	.L72	@long jump	@
 1102              	.LCB775:
 605:src/main.c    **** 						{
 606:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 1103              		.loc 2 606 0
 1104 0442 FFF7FEFF 		bl	FuncsGSMStateAsk	@
 1105 0446 031E     		subs	r3, r0, #0	@ tmp412,,
 1106 0448 032B     		cmp	r3, #3	@ tmp412,
 1107 044a 00D0     		beq	.LCB779	@
 1108 044c 83E0     		b	.L55	@long jump	@
 1109              	.LCB779:
 607:src/main.c    **** 							{
 608:src/main.c    **** 								// fcalc = power;
ARM GAS  /tmp/ccQGhvTg.s 			page 49


 609:src/main.c    **** 								fcalc = power * KW;
 1110              		.loc 2 609 0
 1111 044e 17AB     		add	r3, sp, #92	@ tmp414,,
 1112 0450 1B88     		ldrh	r3, [r3]	@ D.7199, power
 1113 0452 1800     		movs	r0, r3	@, D.7199
 1114 0454 FFF7FEFF 		bl	__aeabi_i2d	@
 1115 0458 964A     		ldr	r2, .L76+4	@,
 1116 045a 974B     		ldr	r3, .L76+8	@,
 1117 045c FFF7FEFF 		bl	__aeabi_dmul	@
 1118 0460 0300     		movs	r3, r0	@ tmp415,
 1119 0462 0C00     		movs	r4, r1	@,
 1120 0464 1800     		movs	r0, r3	@, D.7204
 1121 0466 2100     		movs	r1, r4	@, D.7204
 1122 0468 FFF7FEFF 		bl	__aeabi_d2f	@
 1123 046c 031C     		adds	r3, r0, #0	@ tmp416,
 1124 046e 0F93     		str	r3, [sp, #60]	@ tmp416, fcalc
 610:src/main.c    **** 								power_int = (unsigned short) fcalc;
 1125              		.loc 2 610 0
 1126 0470 0EAC     		add	r4, sp, #56	@ tmp417,,
 1127 0472 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1128 0474 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1129 0478 0300     		movs	r3, r0	@ tmp418,
 1130 047a 2380     		strh	r3, [r4]	@ tmp419, power_int
 611:src/main.c    **** 								fcalc = fcalc - power_int;
 1131              		.loc 2 611 0
 1132 047c 0EAB     		add	r3, sp, #56	@ tmp420,,
 1133 047e 1B88     		ldrh	r3, [r3]	@ D.7199, power_int
 1134 0480 1800     		movs	r0, r3	@, D.7199
 1135 0482 FFF7FEFF 		bl	__aeabi_i2f	@
 1136 0486 031C     		adds	r3, r0, #0	@ D.7205,
 1137 0488 191C     		adds	r1, r3, #0	@, D.7205
 1138 048a 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1139 048c FFF7FEFF 		bl	__aeabi_fsub	@
 1140 0490 031C     		adds	r3, r0, #0	@ tmp421,
 1141 0492 0F93     		str	r3, [sp, #60]	@ tmp421, fcalc
 612:src/main.c    **** 								fcalc = fcalc * 100;
 1142              		.loc 2 612 0
 1143 0494 8949     		ldr	r1, .L76+12	@,
 1144 0496 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1145 0498 FFF7FEFF 		bl	__aeabi_fmul	@
 1146 049c 031C     		adds	r3, r0, #0	@ tmp422,
 1147 049e 0F93     		str	r3, [sp, #60]	@ tmp422, fcalc
 613:src/main.c    **** 								power_dec = (unsigned short) fcalc;
 1148              		.loc 2 613 0
 1149 04a0 3624     		movs	r4, #54	@ tmp423,
 1150 04a2 6C44     		add	r4, r4, sp	@ tmp423,
 1151 04a4 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1152 04a6 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1153 04aa 0300     		movs	r3, r0	@ tmp424,
 1154 04ac 2380     		strh	r3, [r4]	@ tmp425, power_dec
 614:src/main.c    **** 
 615:src/main.c    **** 								fcalc = (acum_hours + acum_secs / 1800) * KW;
 1155              		.loc 2 615 0
 1156 04ae 139A     		ldr	r2, [sp, #76]	@ tmp426, acum_secs
 1157 04b0 E123     		movs	r3, #225	@ tmp534,
 1158 04b2 D900     		lsls	r1, r3, #3	@, tmp534,
 1159 04b4 1000     		movs	r0, r2	@, tmp426
ARM GAS  /tmp/ccQGhvTg.s 			page 50


 1160 04b6 FFF7FEFF 		bl	__aeabi_uidiv	@
 1161 04ba 0300     		movs	r3, r0	@ tmp429,
 1162 04bc 1A00     		movs	r2, r3	@ D.7202, tmp429
 1163 04be 129B     		ldr	r3, [sp, #72]	@ tmp430, acum_hours
 1164 04c0 D318     		adds	r3, r2, r3	@ D.7202, D.7202, tmp430
 1165 04c2 1800     		movs	r0, r3	@, D.7202
 1166 04c4 FFF7FEFF 		bl	__aeabi_ui2d	@
 1167 04c8 7A4A     		ldr	r2, .L76+4	@,
 1168 04ca 7B4B     		ldr	r3, .L76+8	@,
 1169 04cc FFF7FEFF 		bl	__aeabi_dmul	@
 1170 04d0 0300     		movs	r3, r0	@ tmp431,
 1171 04d2 0C00     		movs	r4, r1	@,
 1172 04d4 1800     		movs	r0, r3	@, D.7204
 1173 04d6 2100     		movs	r1, r4	@, D.7204
 1174 04d8 FFF7FEFF 		bl	__aeabi_d2f	@
 1175 04dc 031C     		adds	r3, r0, #0	@ tmp432,
 1176 04de 0F93     		str	r3, [sp, #60]	@ tmp432, fcalc
 616:src/main.c    **** 								wh_int = (unsigned short) fcalc;
 1177              		.loc 2 616 0
 1178 04e0 0DAC     		add	r4, sp, #52	@ tmp433,,
 1179 04e2 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1180 04e4 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1181 04e8 0300     		movs	r3, r0	@ tmp434,
 1182 04ea 2380     		strh	r3, [r4]	@ tmp435, wh_int
 617:src/main.c    **** 								fcalc = fcalc - wh_int;
 1183              		.loc 2 617 0
 1184 04ec 0DAB     		add	r3, sp, #52	@ tmp436,,
 1185 04ee 1B88     		ldrh	r3, [r3]	@ D.7199, wh_int
 1186 04f0 1800     		movs	r0, r3	@, D.7199
 1187 04f2 FFF7FEFF 		bl	__aeabi_i2f	@
 1188 04f6 031C     		adds	r3, r0, #0	@ D.7205,
 1189 04f8 191C     		adds	r1, r3, #0	@, D.7205
 1190 04fa 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1191 04fc FFF7FEFF 		bl	__aeabi_fsub	@
 1192 0500 031C     		adds	r3, r0, #0	@ tmp437,
 1193 0502 0F93     		str	r3, [sp, #60]	@ tmp437, fcalc
 618:src/main.c    **** 								fcalc = fcalc * 10;
 1194              		.loc 2 618 0
 1195 0504 6E49     		ldr	r1, .L76+16	@,
 1196 0506 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1197 0508 FFF7FEFF 		bl	__aeabi_fmul	@
 1198 050c 031C     		adds	r3, r0, #0	@ tmp438,
 1199 050e 0F93     		str	r3, [sp, #60]	@ tmp438, fcalc
 619:src/main.c    **** 								wh_dec = (unsigned short) fcalc;
 1200              		.loc 2 619 0
 1201 0510 3224     		movs	r4, #50	@ tmp439,
 1202 0512 6C44     		add	r4, r4, sp	@ tmp439,
 1203 0514 0F98     		ldr	r0, [sp, #60]	@, fcalc
 1204 0516 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1205 051a 0300     		movs	r3, r0	@ tmp440,
 1206 051c 2380     		strh	r3, [r4]	@ tmp441, wh_dec
 620:src/main.c    **** 
 621:src/main.c    **** 								sprintf(s_lcd, "pi: %3d.%02d wh: %3d.%01d\r\n", power_int, power_dec, wh_int, wh_dec);
 1207              		.loc 2 621 0
 1208 051e 0EAB     		add	r3, sp, #56	@ tmp442,,
 1209 0520 1C88     		ldrh	r4, [r3]	@ D.7199, power_int
 1210 0522 3623     		movs	r3, #54	@ tmp443,
ARM GAS  /tmp/ccQGhvTg.s 			page 51


 1211 0524 6B44     		add	r3, r3, sp	@ tmp443,
 1212 0526 1D88     		ldrh	r5, [r3]	@ D.7199, power_dec
 1213 0528 0DAB     		add	r3, sp, #52	@ tmp444,,
 1214 052a 1B88     		ldrh	r3, [r3]	@ D.7199, wh_int
 1215 052c 3222     		movs	r2, #50	@ tmp445,
 1216 052e 6A44     		add	r2, r2, sp	@ tmp445,
 1217 0530 1288     		ldrh	r2, [r2]	@ D.7199, wh_dec
 1218 0532 6449     		ldr	r1, .L76+20	@ tmp446,
 1219 0534 02A8     		add	r0, sp, #8	@ tmp447,,
 1220 0536 0192     		str	r2, [sp, #4]	@ D.7199,
 1221 0538 0093     		str	r3, [sp]	@ D.7199,
 1222 053a 2B00     		movs	r3, r5	@, D.7199
 1223 053c 2200     		movs	r2, r4	@, D.7199
 1224 053e FFF7FEFF 		bl	sprintf	@
 622:src/main.c    **** 
 623:src/main.c    **** 								//TODO: para debug no envio datos
 624:src/main.c    **** 								Usart2Send(s_lcd);
 1225              		.loc 2 624 0
 1226 0542 02AB     		add	r3, sp, #8	@ tmp448,,
 1227 0544 1800     		movs	r0, r3	@, tmp448
 1228 0546 FFF7FEFF 		bl	Usart2Send	@
 625:src/main.c    **** 								FuncsGSMSendSMS ("1145376762", s_lcd);
 1229              		.loc 2 625 0
 1230 054a 02AA     		add	r2, sp, #8	@ tmp449,,
 1231 054c 5E4B     		ldr	r3, .L76+24	@ tmp450,
 1232 054e 1100     		movs	r1, r2	@, tmp449
 1233 0550 1800     		movs	r0, r3	@, tmp450
 1234 0552 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 1235              	.L55:
 626:src/main.c    **** 							}
 627:src/main.c    **** 							lamp_on_state = init_airplane0;
 1236              		.loc 2 627 0
 1237 0556 11AB     		add	r3, sp, #68	@ tmp451,,
 1238 0558 0022     		movs	r2, #0	@ tmp452,
 1239 055a 1A70     		strb	r2, [r3]	@ tmp453, lamp_on_state
 628:src/main.c    **** 						}
 629:src/main.c    **** 						break;
 1240              		.loc 2 629 0
 1241 055c 0BE0     		b	.L72	@
 1242              	.L41:
 630:src/main.c    **** 
 631:src/main.c    **** 					default:
 632:src/main.c    **** 						lamp_on_state = init_airplane0;
 1243              		.loc 2 632 0
 1244 055e 11AB     		add	r3, sp, #68	@ tmp454,,
 1245 0560 0022     		movs	r2, #0	@ tmp455,
 1246 0562 1A70     		strb	r2, [r3]	@ tmp456, lamp_on_state
 633:src/main.c    **** 						break;
 1247              		.loc 2 633 0
 1248 0564 08E0     		b	.L50	@
 1249              	.L68:
 563:src/main.c    **** 
 1250              		.loc 2 563 0
 1251 0566 C046     		nop
 1252 0568 06E0     		b	.L50	@
 1253              	.L69:
 572:src/main.c    **** 
ARM GAS  /tmp/ccQGhvTg.s 			page 52


 1254              		.loc 2 572 0
 1255 056a C046     		nop
 1256 056c 04E0     		b	.L50	@
 1257              	.L70:
 580:src/main.c    **** 
 1258              		.loc 2 580 0
 1259 056e C046     		nop
 1260 0570 02E0     		b	.L50	@
 1261              	.L71:
 594:src/main.c    **** 
 1262              		.loc 2 594 0
 1263 0572 C046     		nop
 1264 0574 00E0     		b	.L50	@
 1265              	.L72:
 629:src/main.c    **** 
 1266              		.loc 2 629 0
 1267 0576 C046     		nop
 1268              	.L50:
 634:src/main.c    **** 				}
 635:src/main.c    **** 
 636:src/main.c    **** 				if (counters_mode)	//si esta activo el modo de contadores mido
 1269              		.loc 2 636 0
 1270 0578 4323     		movs	r3, #67	@ tmp457,
 1271 057a 6B44     		add	r3, r3, sp	@ tmp457,
 1272 057c 1B78     		ldrb	r3, [r3]	@ tmp458, counters_mode
 1273 057e 002B     		cmp	r3, #0	@ tmp458,
 1274 0580 00D1     		bne	.LCB935	@
 1275 0582 83E0     		b	.L73	@long jump	@
 1276              	.LCB935:
 637:src/main.c    **** 				{
 638:src/main.c    **** 					if (!timer_standby)	//update cada 200ms
 1277              		.loc 2 638 0
 1278 0584 514B     		ldr	r3, .L76+28	@ tmp459,
 1279 0586 1B88     		ldrh	r3, [r3]	@ tmp460, timer_standby
 1280 0588 9BB2     		uxth	r3, r3	@ D.7198, tmp460
 1281 058a 002B     		cmp	r3, #0	@ D.7198,
 1282 058c 00D0     		beq	.LCB940	@
 1283 058e 7DE0     		b	.L73	@long jump	@
 1284              	.LCB940:
 639:src/main.c    **** 					{
 640:src/main.c    **** 						if (i < SIZEOF_POWER_VECT)
 1285              		.loc 2 640 0
 1286 0590 5F23     		movs	r3, #95	@ tmp461,
 1287 0592 6B44     		add	r3, r3, sp	@ tmp461,
 1288 0594 1B78     		ldrb	r3, [r3]	@ tmp462, i
 1289 0596 092B     		cmp	r3, #9	@ tmp462,
 1290 0598 1AD8     		bhi	.L57	@,
 641:src/main.c    **** 						{
 642:src/main.c    **** 							power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 1291              		.loc 2 642 0
 1292 059a 5F23     		movs	r3, #95	@ tmp463,
 1293 059c 6B44     		add	r3, r3, sp	@ tmp463,
 1294 059e 1C78     		ldrb	r4, [r3]	@ D.7199, i
 1295 05a0 FFF7FEFF 		bl	GetVGrid	@
 1296 05a4 0300     		movs	r3, r0	@ tmp464,
 1297 05a6 1D00     		movs	r5, r3	@ D.7198, tmp465
 1298 05a8 FFF7FEFF 		bl	GetIGrid	@
ARM GAS  /tmp/ccQGhvTg.s 			page 53


 1299 05ac 0300     		movs	r3, r0	@ tmp466,
 1300 05ae 1900     		movs	r1, r3	@, D.7198
 1301 05b0 2800     		movs	r0, r5	@, D.7198
 1302 05b2 FFF7FEFF 		bl	PowerCalc	@
 1303 05b6 0300     		movs	r3, r0	@ tmp468,
 1304 05b8 1900     		movs	r1, r3	@ D.7198, tmp469
 1305 05ba 454B     		ldr	r3, .L76+32	@ tmp470,
 1306 05bc 6200     		lsls	r2, r4, #1	@ tmp471, D.7199,
 1307 05be D152     		strh	r1, [r2, r3]	@ tmp472, power_vect
 643:src/main.c    **** 							i++;
 1308              		.loc 2 643 0
 1309 05c0 5F23     		movs	r3, #95	@ tmp473,
 1310 05c2 6B44     		add	r3, r3, sp	@ tmp473,
 1311 05c4 1A78     		ldrb	r2, [r3]	@ D.7200, i
 1312 05c6 5F23     		movs	r3, #95	@ tmp474,
 1313 05c8 6B44     		add	r3, r3, sp	@ tmp474,
 1314 05ca 0132     		adds	r2, r2, #1	@ tmp475,
 1315 05cc 1A70     		strb	r2, [r3]	@ tmp476, i
 1316 05ce 4CE0     		b	.L58	@
 1317              	.L57:
 644:src/main.c    **** 						}
 645:src/main.c    **** 						else
 646:src/main.c    **** 						{		//termine de cargar el vector, guardo muestro info
 647:src/main.c    **** 							i = 0;
 1318              		.loc 2 647 0
 1319 05d0 5F23     		movs	r3, #95	@ tmp477,
 1320 05d2 6B44     		add	r3, r3, sp	@ tmp477,
 1321 05d4 0022     		movs	r2, #0	@ tmp478,
 1322 05d6 1A70     		strb	r2, [r3]	@ tmp479, i
 648:src/main.c    **** 
 649:src/main.c    **** 							if (counters_mode == 1)	//mido normalmente
 1323              		.loc 2 649 0
 1324 05d8 4323     		movs	r3, #67	@ tmp480,
 1325 05da 6B44     		add	r3, r3, sp	@ tmp480,
 1326 05dc 1B78     		ldrb	r3, [r3]	@ tmp481, counters_mode
 1327 05de 012B     		cmp	r3, #1	@ tmp481,
 1328 05e0 0BD1     		bne	.L59	@,
 650:src/main.c    **** 							{
 651:src/main.c    **** 								power = PowerCalcMean8(power_vect);
 1329              		.loc 2 651 0
 1330 05e2 17AC     		add	r4, sp, #92	@ tmp482,,
 1331 05e4 3A4B     		ldr	r3, .L76+32	@ tmp483,
 1332 05e6 1800     		movs	r0, r3	@, tmp483
 1333 05e8 FFF7FEFF 		bl	PowerCalcMean8	@
 1334 05ec 0300     		movs	r3, r0	@ tmp484,
 1335 05ee 2380     		strh	r3, [r4]	@ tmp486, power
 652:src/main.c    **** 								last_power = power;
 1336              		.loc 2 652 0
 1337 05f0 5A23     		movs	r3, #90	@ tmp487,
 1338 05f2 6B44     		add	r3, r3, sp	@ tmp487,
 1339 05f4 17AA     		add	r2, sp, #92	@ tmp488,,
 1340 05f6 1288     		ldrh	r2, [r2]	@ tmp489, power
 1341 05f8 1A80     		strh	r2, [r3]	@ tmp489, last_power
 1342              	.L59:
 653:src/main.c    **** 							}
 654:src/main.c    **** 
 655:src/main.c    **** 							if (counters_mode == 2)	//no mido solo update de lo viejo
ARM GAS  /tmp/ccQGhvTg.s 			page 54


 1343              		.loc 2 655 0
 1344 05fa 4323     		movs	r3, #67	@ tmp490,
 1345 05fc 6B44     		add	r3, r3, sp	@ tmp490,
 1346 05fe 1B78     		ldrb	r3, [r3]	@ tmp491, counters_mode
 1347 0600 022B     		cmp	r3, #2	@ tmp491,
 1348 0602 04D1     		bne	.L60	@,
 656:src/main.c    **** 								power = last_power;
 1349              		.loc 2 656 0
 1350 0604 17AB     		add	r3, sp, #92	@ tmp492,,
 1351 0606 5A22     		movs	r2, #90	@ tmp493,
 1352 0608 6A44     		add	r2, r2, sp	@ tmp493,
 1353 060a 1288     		ldrh	r2, [r2]	@ tmp494, last_power
 1354 060c 1A80     		strh	r2, [r3]	@ tmp494, power
 1355              	.L60:
 657:src/main.c    **** 
 658:src/main.c    **** 							acum_secs += power;
 1356              		.loc 2 658 0
 1357 060e 17AB     		add	r3, sp, #92	@ tmp495,,
 1358 0610 1B88     		ldrh	r3, [r3]	@ D.7202, power
 1359 0612 139A     		ldr	r2, [sp, #76]	@ tmp497, acum_secs
 1360 0614 D318     		adds	r3, r2, r3	@ tmp496, tmp497, D.7202
 1361 0616 1393     		str	r3, [sp, #76]	@ tmp496, acum_secs
 659:src/main.c    **** 							acum_secs_index++;
 1362              		.loc 2 659 0
 1363 0618 5223     		movs	r3, #82	@ tmp498,
 1364 061a 6B44     		add	r3, r3, sp	@ tmp498,
 1365 061c 1A88     		ldrh	r2, [r3]	@ D.7198, acum_secs_index
 1366 061e 5223     		movs	r3, #82	@ tmp499,
 1367 0620 6B44     		add	r3, r3, sp	@ tmp499,
 1368 0622 0132     		adds	r2, r2, #1	@ tmp500,
 1369 0624 1A80     		strh	r2, [r3]	@ tmp501, acum_secs_index
 660:src/main.c    **** 							show_power_index++;
 1370              		.loc 2 660 0
 1371 0626 4723     		movs	r3, #71	@ tmp502,
 1372 0628 6B44     		add	r3, r3, sp	@ tmp502,
 1373 062a 1A78     		ldrb	r2, [r3]	@ D.7200, show_power_index
 1374 062c 4723     		movs	r3, #71	@ tmp503,
 1375 062e 6B44     		add	r3, r3, sp	@ tmp503,
 1376 0630 0132     		adds	r2, r2, #1	@ tmp504,
 1377 0632 1A70     		strb	r2, [r3]	@ tmp505, show_power_index
 661:src/main.c    **** 
 662:src/main.c    **** 							if (acum_secs_index >= 1800)
 1378              		.loc 2 662 0
 1379 0634 5223     		movs	r3, #82	@ tmp506,
 1380 0636 6B44     		add	r3, r3, sp	@ tmp506,
 1381 0638 1B88     		ldrh	r3, [r3]	@ tmp507, acum_secs_index
 1382 063a 264A     		ldr	r2, .L76+36	@ tmp508,
 1383 063c 9342     		cmp	r3, r2	@ tmp507, tmp508
 1384 063e 10D9     		bls	.L61	@,
 663:src/main.c    **** 							{
 664:src/main.c    **** 								acum_hours += (acum_secs / 1800);	//lo convierto a Wh, para no perder bits en cada cuenta
 1385              		.loc 2 664 0
 1386 0640 139A     		ldr	r2, [sp, #76]	@ tmp509, acum_secs
 1387 0642 E123     		movs	r3, #225	@ tmp533,
 1388 0644 D900     		lsls	r1, r3, #3	@, tmp533,
 1389 0646 1000     		movs	r0, r2	@, tmp509
 1390 0648 FFF7FEFF 		bl	__aeabi_uidiv	@
ARM GAS  /tmp/ccQGhvTg.s 			page 55


 1391 064c 0300     		movs	r3, r0	@ tmp512,
 1392 064e 1A00     		movs	r2, r3	@ D.7202, tmp512
 1393 0650 129B     		ldr	r3, [sp, #72]	@ tmp514, acum_hours
 1394 0652 9B18     		adds	r3, r3, r2	@ tmp513, tmp514, D.7202
 1395 0654 1293     		str	r3, [sp, #72]	@ tmp513, acum_hours
 665:src/main.c    **** 								acum_secs = 0;
 1396              		.loc 2 665 0
 1397 0656 0023     		movs	r3, #0	@ tmp515,
 1398 0658 1393     		str	r3, [sp, #76]	@ tmp515, acum_secs
 666:src/main.c    **** 								acum_secs_index = 0;
 1399              		.loc 2 666 0
 1400 065a 5223     		movs	r3, #82	@ tmp516,
 1401 065c 6B44     		add	r3, r3, sp	@ tmp516,
 1402 065e 0022     		movs	r2, #0	@ tmp517,
 1403 0660 1A80     		strh	r2, [r3]	@ tmp518, acum_secs_index
 1404              	.L61:
 667:src/main.c    **** 							}
 668:src/main.c    **** 
 669:src/main.c    **** 							//cuando termino una medicion completa aviso con meas_end
 670:src/main.c    **** 							meas_end = 1;
 1405              		.loc 2 670 0
 1406 0662 4223     		movs	r3, #66	@ tmp519,
 1407 0664 6B44     		add	r3, r3, sp	@ tmp519,
 1408 0666 0122     		movs	r2, #1	@ tmp520,
 1409 0668 1A70     		strb	r2, [r3]	@ tmp521, meas_end
 1410              	.L58:
 671:src/main.c    **** 
 672:src/main.c    **** 
 673:src/main.c    **** 							// if (show_power_index >= 30)
 674:src/main.c    **** 							// {
 675:src/main.c    **** 							// 	show_power = 1;
 676:src/main.c    **** 							// 	show_power_index = 0;
 677:src/main.c    **** 							// }
 678:src/main.c    **** 							//
 679:src/main.c    **** 							// if (show_power)
 680:src/main.c    **** 							// {
 681:src/main.c    **** 							// 	// fcalc = power;
 682:src/main.c    **** 							// 	fcalc = power * KW;
 683:src/main.c    **** 							// 	power_int = (unsigned short) fcalc;
 684:src/main.c    **** 							// 	fcalc = fcalc - power_int;
 685:src/main.c    **** 							// 	fcalc = fcalc * 100;
 686:src/main.c    **** 							// 	power_dec = (unsigned short) fcalc;
 687:src/main.c    **** 							//
 688:src/main.c    **** 							// 	fcalc = (acum_hours + acum_secs / 1800) * KW;
 689:src/main.c    **** 							// 	wh_int = (unsigned short) fcalc;
 690:src/main.c    **** 							// 	fcalc = fcalc - wh_int;
 691:src/main.c    **** 							// 	fcalc = fcalc * 10;
 692:src/main.c    **** 							// 	wh_dec = (unsigned short) fcalc;
 693:src/main.c    **** 							//
 694:src/main.c    **** 							// 	sprintf(s_lcd, "pi: %3d.%02d wh: %3d.%01d\r\n", power_int, power_dec, wh_int, wh_dec);
 695:src/main.c    **** 							//
 696:src/main.c    **** 							// 	//TODO: para debug no envio datos
 697:src/main.c    **** 							// 	Usart2Send(s_lcd);
 698:src/main.c    **** 							//
 699:src/main.c    **** 							// 	show_power = 0;
 700:src/main.c    **** 							// }
 701:src/main.c    **** 						}
ARM GAS  /tmp/ccQGhvTg.s 			page 56


 702:src/main.c    **** 						timer_standby = 200;		//10 veces 200ms
 1411              		.loc 2 702 0
 1412 066a 184B     		ldr	r3, .L76+28	@ tmp522,
 1413 066c C822     		movs	r2, #200	@ tmp523,
 1414 066e 1A80     		strh	r2, [r3]	@ tmp524, timer_standby
 703:src/main.c    **** 					}
 704:src/main.c    **** 				}
 705:src/main.c    **** 				break;
 1415              		.loc 2 705 0
 1416 0670 0CE0     		b	.L73	@
 1417              	.L25:
 706:src/main.c    **** 
 707:src/main.c    **** 			default:
 708:src/main.c    **** 				main_state = MAIN_INIT;
 1418              		.loc 2 708 0
 1419 0672 4623     		movs	r3, #70	@ tmp525,
 1420 0674 6B44     		add	r3, r3, sp	@ tmp525,
 1421 0676 0022     		movs	r2, #0	@ tmp526,
 1422 0678 1A70     		strb	r2, [r3]	@ tmp527, main_state
 709:src/main.c    **** 				break;
 1423              		.loc 2 709 0
 1424 067a 08E0     		b	.L33	@
 1425              	.L64:
 550:src/main.c    **** 
 1426              		.loc 2 550 0
 1427 067c C046     		nop
 1428 067e 06E0     		b	.L33	@
 1429              	.L65:
 496:src/main.c    **** 
 1430              		.loc 2 496 0
 1431 0680 C046     		nop
 1432 0682 04E0     		b	.L33	@
 1433              	.L66:
 522:src/main.c    **** 
 1434              		.loc 2 522 0
 1435 0684 C046     		nop
 1436 0686 02E0     		b	.L33	@
 1437              	.L67:
 547:src/main.c    **** 
 1438              		.loc 2 547 0
 1439 0688 C046     		nop
 1440 068a 00E0     		b	.L33	@
 1441              	.L73:
 705:src/main.c    **** 
 1442              		.loc 2 705 0
 1443 068c C046     		nop
 1444              	.L33:
 710:src/main.c    **** 		}
 711:src/main.c    **** 
 712:src/main.c    **** 		//Cosas que dependen de las muestras
 713:src/main.c    **** 		if (seq_ready)
 1445              		.loc 2 713 0
 1446 068e 124B     		ldr	r3, .L76+40	@ tmp528,
 1447 0690 1B78     		ldrb	r3, [r3]	@ tmp529, seq_ready
 1448 0692 DBB2     		uxtb	r3, r3	@ D.7200, tmp529
 1449 0694 002B     		cmp	r3, #0	@ D.7200,
 1450 0696 06D0     		beq	.L62	@,
ARM GAS  /tmp/ccQGhvTg.s 			page 57


 714:src/main.c    **** 		{
 715:src/main.c    **** 			seq_ready = 0;
 1451              		.loc 2 715 0
 1452 0698 0F4B     		ldr	r3, .L76+40	@ tmp530,
 1453 069a 0022     		movs	r2, #0	@ tmp531,
 1454 069c 1A70     		strb	r2, [r3]	@ tmp532, seq_ready
 716:src/main.c    **** 			UpdateVGrid ();
 1455              		.loc 2 716 0
 1456 069e FFF7FEFF 		bl	UpdateVGrid	@
 717:src/main.c    **** 			UpdateIGrid ();
 1457              		.loc 2 717 0
 1458 06a2 FFF7FEFF 		bl	UpdateIGrid	@
 1459              	.L62:
 718:src/main.c    **** 		}
 719:src/main.c    **** 
 720:src/main.c    **** 		//Cosas que no dependen del estado del programa
 721:src/main.c    **** 		UpdateRelay ();
 1460              		.loc 2 721 0
 1461 06a6 FFF7FEFF 		bl	UpdateRelay	@
 722:src/main.c    **** 		// UpdatePhotoTransistor();
 723:src/main.c    **** #ifdef USE_GSM
 724:src/main.c    **** 		FuncsGSM();
 1462              		.loc 2 724 0
 1463 06aa FFF7FEFF 		bl	FuncsGSM	@
 725:src/main.c    **** #endif
 726:src/main.c    **** 	}	//end while 1
 1464              		.loc 2 726 0
 1465 06ae 8FE5     		b	.L63	@
 1466              	.L77:
 1467              		.align	2
 1468              	.L76:
 1469 06b0 E4000000 		.word	.LC27
 1470 06b4 90F7AA95 		.word	-1783957616
 1471 06b8 09BF843F 		.word	1065664265
 1472 06bc 0000C842 		.word	1120403456
 1473 06c0 00002041 		.word	1092616192
 1474 06c4 F4000000 		.word	.LC32
 1475 06c8 10010000 		.word	.LC34
 1476 06cc 00000000 		.word	timer_standby
 1477 06d0 00000000 		.word	power_vect
 1478 06d4 07070000 		.word	1799
 1479 06d8 00000000 		.word	seq_ready
 1480              		.cfi_endproc
 1481              	.LFE20:
 1482              		.size	main, .-main
 1483              		.section	.rodata
 1484 011b 00       		.align	2
 1485              	.LC37:
 1486 011c 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1486      3A7B226D 
 1486      794E616D 
 1486      65223A22 
 1486      4E75636C 
 1487              		.align	2
 1488              	.LC39:
 1489 0134 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1489      54656D70 
ARM GAS  /tmp/ccQGhvTg.s 			page 58


 1489      65726174 
 1489      75726522 
 1489      3A256C75 
 1490 014d 000000   		.align	2
 1491              	.LC41:
 1492 0150 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1492      48756D69 
 1492      64697479 
 1492      223A256C 
 1492      752E256C 
 1493 0166 0000     		.align	2
 1494              	.LC43:
 1495 0168 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1495      50726573 
 1495      73757265 
 1495      223A256C 
 1495      752E256C 
 1496 017e 0000     		.align	2
 1497              	.LC45:
 1498 0180 7D7D00   		.ascii	"}}\000"
 1499              		.section	.text.prepare_json_pkt,"ax",%progbits
 1500              		.align	2
 1501              		.global	prepare_json_pkt
 1502              		.code	16
 1503              		.thumb_func
 1504              		.type	prepare_json_pkt, %function
 1505              	prepare_json_pkt:
 1506              	.LFB21:
 727:src/main.c    **** 
 728:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 729:src/main.c    **** 
 730:src/main.c    **** 	while (1)
 731:src/main.c    **** 	{
 732:src/main.c    **** 		switch (main_state)
 733:src/main.c    **** 		{
 734:src/main.c    **** 			case MAIN_INIT:
 735:src/main.c    **** 				RelayOff();
 736:src/main.c    **** 				LED_OFF;
 737:src/main.c    **** 				FillPhotoBuffer();
 738:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 739:src/main.c    **** 				FillTempBuffer();
 740:src/main.c    **** #endif
 741:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 742:src/main.c    **** 				Update_TIM3_CH1 (0);
 743:src/main.c    **** #endif
 744:src/main.c    **** 				main_state = SYNCHRO_ADC;
 745:src/main.c    **** #ifdef ADC_WITH_INT
 746:src/main.c    **** 				seq_ready = 0;
 747:src/main.c    **** #endif
 748:src/main.c    **** 				break;
 749:src/main.c    **** 
 750:src/main.c    **** 			case SYNCHRO_ADC:
 751:src/main.c    **** #ifdef ADC_WITH_INT
 752:src/main.c    **** 				if (seq_ready)
 753:src/main.c    **** #endif
 754:src/main.c    **** 				{
 755:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
ARM GAS  /tmp/ccQGhvTg.s 			page 59


 756:src/main.c    **** 				}
 757:src/main.c    **** 				break;
 758:src/main.c    **** 
 759:src/main.c    **** 			case SET_ZERO_CURRENT:
 760:src/main.c    **** 				main_state = LAMP_OFF;
 761:src/main.c    **** 				break;
 762:src/main.c    **** 
 763:src/main.c    **** 			case LAMP_OFF:
 764:src/main.c    **** 				if (!tt_relay_on_off)
 765:src/main.c    **** 				{
 766:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 767:src/main.c    **** 					{
 768:src/main.c    **** 						main_state = LAMP_ON;
 769:src/main.c    **** 						tt_relay_on_off = 10000;
 770:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 771:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 772:src/main.c    **** 	#endif
 773:src/main.c    **** 
 774:src/main.c    **** 						RelayOn();
 775:src/main.c    **** 						LED_ON;
 776:src/main.c    **** 	#ifdef WITH_HYST
 777:src/main.c    **** 						hours = 0;
 778:src/main.c    **** 	#endif
 779:src/main.c    **** 					}
 780:src/main.c    **** 				}
 781:src/main.c    **** 				break;
 782:src/main.c    **** 
 783:src/main.c    **** 			case LAMP_ON:
 784:src/main.c    **** 				if (!tt_relay_on_off)
 785:src/main.c    **** 				{
 786:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 787:src/main.c    **** 					hyst = GetHysteresis (hours);
 788:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 789:src/main.c    **** 	#else
 790:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 791:src/main.c    **** 	#endif
 792:src/main.c    **** 					{
 793:src/main.c    **** 						main_state = LAMP_OFF;
 794:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 795:src/main.c    **** 						Update_TIM3_CH1 (0);
 796:src/main.c    **** 	#endif
 797:src/main.c    **** 						tt_relay_on_off = 10000;
 798:src/main.c    **** 						RelayOff();
 799:src/main.c    **** 						LED_OFF;
 800:src/main.c    **** 					}
 801:src/main.c    **** 				}
 802:src/main.c    **** 
 803:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 804:src/main.c    **** 				if (main_state == LAMP_ON)
 805:src/main.c    **** 				{
 806:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
 807:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
 808:src/main.c    **** 				}
 809:src/main.c    **** 	#endif
 810:src/main.c    **** 				break;
 811:src/main.c    **** 
 812:src/main.c    **** 			default:
ARM GAS  /tmp/ccQGhvTg.s 			page 60


 813:src/main.c    **** 				main_state = MAIN_INIT;
 814:src/main.c    **** 				break;
 815:src/main.c    **** 		}
 816:src/main.c    **** 
 817:src/main.c    **** 		if (!timer_standby)
 818:src/main.c    **** 		{
 819:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 820:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
 821:src/main.c    **** #else
 822:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
 823:src/main.c    **** #endif
 824:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 825:src/main.c    **** 			Usart2Send(s_lcd);
 826:src/main.c    **** 			timer_standby = 2000;
 827:src/main.c    **** 		}
 828:src/main.c    **** 
 829:src/main.c    **** 		//Cosas que no dependen del estado del programa
 830:src/main.c    **** 		UpdateRelay ();
 831:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 832:src/main.c    **** 		UpdateTemp();
 833:src/main.c    **** #endif
 834:src/main.c    **** 		UpdatePhotoTransistor();
 835:src/main.c    **** 	}	//end while 1
 836:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
 837:src/main.c    **** #endif	//USE_REDONDA_BASIC
 838:src/main.c    **** 
 839:src/main.c    **** 
 840:src/main.c    **** #ifdef USE_MQTT_LIB
 841:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 842:src/main.c    **** 	int rc = 0;
 843:src/main.c    **** 	char buf[200];
 844:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
 845:src/main.c    **** 	char* payload = "mypayload";
 846:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
 847:src/main.c    **** 	int len = 0;
 848:src/main.c    **** 
 849:src/main.c    **** 	data.clientID.cstring = "me";
 850:src/main.c    **** 	data.keepAliveInterval = 20;
 851:src/main.c    **** 	data.cleansession = 1;
 852:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
 853:src/main.c    **** 
 854:src/main.c    **** 	topicString.cstring = "mytopic";
 855:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
 856:src/main.c    **** 
 857:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
 858:src/main.c    **** 	//falta abrir puerto
 859:src/main.c    **** 	//falta enviar al socket
 860:src/main.c    **** 	//falta cerrar socket
 861:src/main.c    **** #endif
 862:src/main.c    **** 
 863:src/main.c    **** //	//---------- Prueba USART2 --------//
 864:src/main.c    **** //
 865:src/main.c    **** //    while( 1 )
 866:src/main.c    **** //    {
 867:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 868:src/main.c    **** //        Wait_ms(3000);
 869:src/main.c    **** //    }
ARM GAS  /tmp/ccQGhvTg.s 			page 61


 870:src/main.c    **** //
 871:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
 872:src/main.c    **** 
 873:src/main.c    **** 	//---------- Prueba con GPS --------//
 874:src/main.c    **** #ifdef USE_GPS
 875:src/main.c    **** 	Usart2SendSingle('M');
 876:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 877:src/main.c    **** 	Wait_ms(1000);
 878:src/main.c    **** 
 879:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
 880:src/main.c    **** 
 881:src/main.c    **** 	//mando reset al gps
 882:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
 883:src/main.c    **** 	GPSStartResetSM ();
 884:src/main.c    **** 	while (GPSStart() != RESP_OK);
 885:src/main.c    **** 
 886:src/main.c    **** 	//mando conf al gps
 887:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
 888:src/main.c    **** 	GPSConfigResetSM ();
 889:src/main.c    **** 	while (GPSConfig() != RESP_OK);
 890:src/main.c    **** 
 891:src/main.c    **** //	//mando reset factory al gps
 892:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
 893:src/main.c    **** //	GPSResetFactoryResetSM ();
 894:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
 895:src/main.c    **** 
 896:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
 897:src/main.c    **** //	timer_standby = 60000;
 898:src/main.c    **** //	while( timer_standby )
 899:src/main.c    **** 	while( 1 )
 900:src/main.c    **** 	{
 901:src/main.c    **** 		if (gps_pckt_ready)
 902:src/main.c    **** 		{
 903:src/main.c    **** 			gps_pckt_ready = 0;
 904:src/main.c    **** 			//Usart2SendSingle('P');
 905:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
 906:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
 907:src/main.c    **** 		}
 908:src/main.c    **** 
 909:src/main.c    **** 		GPSProcess();
 910:src/main.c    **** 	}
 911:src/main.c    **** #endif
 912:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
 913:src/main.c    **** 
 914:src/main.c    **** 	//---------- Prueba con GSM --------//
 915:src/main.c    **** #ifdef USE_GSM
 916:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
 917:src/main.c    **** 
 918:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 919:src/main.c    **** 
 920:src/main.c    **** 
 921:src/main.c    **** 	//Pruebo USART1
 922:src/main.c    **** //	while (1)
 923:src/main.c    **** //	{
 924:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
 925:src/main.c    **** //			Wait_ms(50);
 926:src/main.c    **** //	}
ARM GAS  /tmp/ccQGhvTg.s 			page 62


 927:src/main.c    **** 
 928:src/main.c    **** 
 929:src/main.c    **** 	//mando start al gsm
 930:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 931:src/main.c    **** 	//GPSStartResetSM ();
 932:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 933:src/main.c    **** 	while (timer_standby)
 934:src/main.c    **** 	{
 935:src/main.c    **** 		i = GSM_Start();
 936:src/main.c    **** 		if (i == 2)
 937:src/main.c    **** 		{
 938:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 939:src/main.c    **** 			timer_standby = 0;
 940:src/main.c    **** 		}
 941:src/main.c    **** 
 942:src/main.c    **** 		if (i == 4)
 943:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 944:src/main.c    **** 	}
 945:src/main.c    **** 
 946:src/main.c    **** 	//mando conf al gsm
 947:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
 948:src/main.c    **** 	//GPSConfigResetSM ();
 949:src/main.c    **** 
 950:src/main.c    **** 	i = 0;
 951:src/main.c    **** 	while (i == 0)
 952:src/main.c    **** 	{
 953:src/main.c    **** 		ii = GSM_Config(1000);
 954:src/main.c    **** 
 955:src/main.c    **** 		if (ii == 2)
 956:src/main.c    **** 			i = 0;
 957:src/main.c    **** 		else if (ii > 2)
 958:src/main.c    **** 		{
 959:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
 960:src/main.c    **** 			while (1);
 961:src/main.c    **** 		}
 962:src/main.c    **** 
 963:src/main.c    **** 		GSMProcess();
 964:src/main.c    **** 		GSMReceive ();
 965:src/main.c    **** 
 966:src/main.c    **** 		if (gsm_pckt_ready)
 967:src/main.c    **** 		{
 968:src/main.c    **** 			gsm_pckt_ready = 0;
 969:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 970:src/main.c    **** 		}
 971:src/main.c    **** 
 972:src/main.c    **** 		if (LIGHT)
 973:src/main.c    **** 			LED_ON;
 974:src/main.c    **** 		else
 975:src/main.c    **** 			LED_OFF;
 976:src/main.c    **** 	}
 977:src/main.c    **** 
 978:src/main.c    **** 
 979:src/main.c    **** 	while( 1 )
 980:src/main.c    **** 	{
 981:src/main.c    **** 		if (gsm_pckt_ready)
 982:src/main.c    **** 		{
 983:src/main.c    **** 			gsm_pckt_ready = 0;
ARM GAS  /tmp/ccQGhvTg.s 			page 63


 984:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 985:src/main.c    **** 		}
 986:src/main.c    **** 
 987:src/main.c    **** 		GSMProcess();
 988:src/main.c    **** 
 989:src/main.c    **** 		if (LIGHT)
 990:src/main.c    **** 			LED_ON;
 991:src/main.c    **** 
 992:src/main.c    **** 	}
 993:src/main.c    **** #endif
 994:src/main.c    **** 
 995:src/main.c    **** 	//---------- Pruebas con GSM GATEWAY --------//
 996:src/main.c    **** #ifdef USE_GSM_GATEWAY
 997:src/main.c    **** 	LED_OFF;
 998:src/main.c    **** 	for (i = 0; i < 6; i++)
 999:src/main.c    **** 	{
1000:src/main.c    **** 		if (LED)
1001:src/main.c    **** 			LED_OFF;
1002:src/main.c    **** 		else
1003:src/main.c    **** 			LED_ON;
1004:src/main.c    **** 
1005:src/main.c    **** 		Wait_ms (300);
1006:src/main.c    **** 	}
1007:src/main.c    **** 	Wait_ms (3000);
1008:src/main.c    **** 
1009:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
1010:src/main.c    **** 
1011:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
1012:src/main.c    **** 
1013:src/main.c    **** 
1014:src/main.c    **** 	//mando start al gsm
1015:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
1016:src/main.c    **** 	//GPSStartResetSM ();
1017:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
1018:src/main.c    **** 	while (timer_standby)
1019:src/main.c    **** 	{
1020:src/main.c    **** 		i = GSM_Start();
1021:src/main.c    **** 		if (i == 2)
1022:src/main.c    **** 		{
1023:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
1024:src/main.c    **** 			timer_standby = 0;
1025:src/main.c    **** 		}
1026:src/main.c    **** 		else
1027:src/main.c    **** 
1028:src/main.c    **** 		if (i == 4)
1029:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
1030:src/main.c    **** 	}
1031:src/main.c    **** 
1032:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
1033:src/main.c    **** 
1034:src/main.c    **** 	while (1)
1035:src/main.c    **** 	{
1036:src/main.c    **** 		GSMProcess();
1037:src/main.c    **** 
1038:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
1039:src/main.c    **** 		{
1040:src/main.c    **** 			usart2_pckt_ready = 0;
ARM GAS  /tmp/ccQGhvTg.s 			page 64


1041:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
1042:src/main.c    **** 		}
1043:src/main.c    **** 
1044:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
1045:src/main.c    **** 		{
1046:src/main.c    **** 			gsm_pckt_ready = 0;
1047:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
1048:src/main.c    **** 		}
1049:src/main.c    **** 
1050:src/main.c    **** 		if (LIGHT)
1051:src/main.c    **** 			LED_ON;
1052:src/main.c    **** 		else
1053:src/main.c    **** 			LED_OFF;
1054:src/main.c    **** 	}
1055:src/main.c    **** #endif
1056:src/main.c    **** 
1057:src/main.c    **** 	//---------- Fin Prueba con GSM GATEWAY --------//
1058:src/main.c    **** 
1059:src/main.c    **** 
1060:src/main.c    **** 
1061:src/main.c    **** 	//---------- Prueba temp --------//
1062:src/main.c    **** 	/*
1063:src/main.c    **** 	while (1)
1064:src/main.c    **** 	{
1065:src/main.c    **** 		local_meas = GetTemp();
1066:src/main.c    **** 		if (local_meas != local_meas_last)
1067:src/main.c    **** 		{
1068:src/main.c    **** 			LED_ON;
1069:src/main.c    **** 			local_meas_last = local_meas;
1070:src/main.c    **** 			LCD_2DO_RENGLON;
1071:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
1072:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
1073:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
1074:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
1075:src/main.c    **** 			LCDTransmitStr(s_lcd);
1076:src/main.c    **** 			LED_OFF;
1077:src/main.c    **** 		}
1078:src/main.c    **** 
1079:src/main.c    **** 		UpdateTemp();
1080:src/main.c    **** 	}
1081:src/main.c    **** 	*/
1082:src/main.c    **** 	//---------- Fin prueba temp --------//
1083:src/main.c    **** 
1084:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
1085:src/main.c    **** 	/*
1086:src/main.c    **** 	local_meas = 0;
1087:src/main.c    **** 	while (1)
1088:src/main.c    **** 	{
1089:src/main.c    **** 		LCD_2DO_RENGLON;
1090:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
1091:src/main.c    **** 		fcalc = local_meas;
1092:src/main.c    **** 		fcalc = fcalc * K_1TO10;
1093:src/main.c    **** 		one_int = (short) fcalc;
1094:src/main.c    **** 		fcalc = fcalc - one_int;
1095:src/main.c    **** 		fcalc = fcalc * 10;
1096:src/main.c    **** 		one_dec = (short) fcalc;
1097:src/main.c    **** 
ARM GAS  /tmp/ccQGhvTg.s 			page 65


1098:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
1099:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
1100:src/main.c    **** 		LCDTransmitStr(s_lcd);
1101:src/main.c    **** 
1102:src/main.c    **** 		Wait_ms (1000);
1103:src/main.c    **** 		if (local_meas <= 255)
1104:src/main.c    **** 			local_meas = 0;
1105:src/main.c    **** 		else
1106:src/main.c    **** 			local_meas++;
1107:src/main.c    **** 	}
1108:src/main.c    **** 	*/
1109:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
1110:src/main.c    **** 
1111:src/main.c    **** 
1112:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
1113:src/main.c    **** 
1114:src/main.c    **** 	return 0;
1115:src/main.c    **** }
1116:src/main.c    **** 
1117:src/main.c    **** //--- End of Main ---//
1118:src/main.c    **** 
1119:src/main.c    **** 
1120:src/main.c    **** 
1121:src/main.c    **** 
1122:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
1123:src/main.c    **** {
 1507              		.loc 2 1123 0
 1508              		.cfi_startproc
 1509 0000 00B5     		push	{lr}	@
 1510              	.LCFI6:
 1511              		.cfi_def_cfa_offset 4
 1512              		.cfi_offset 14, -4
 1513 0002 97B0     		sub	sp, sp, #92	@,,
 1514              	.LCFI7:
 1515              		.cfi_def_cfa_offset 96
 1516 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
1124:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1517              		.loc 2 1124 0
 1518 0006 0123     		movs	r3, #1	@ tmp112,
 1519 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1520 000a 0223     		movs	r3, #2	@ tmp113,
 1521 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1522 000e 0323     		movs	r3, #3	@ tmp114,
 1523 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1524 0012 0423     		movs	r3, #4	@ tmp115,
 1525 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1526 0016 0523     		movs	r3, #5	@ tmp116,
 1527 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1528 001a 0623     		movs	r3, #6	@ tmp117,
 1529 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
1125:src/main.c    ****       char tempbuff[40];
1126:src/main.c    ****       volatile float HUMIDITY_Value;
1127:src/main.c    ****       volatile float TEMPERATURE_Value;
1128:src/main.c    ****       volatile float PRESSURE_Value;
1129:src/main.c    **** 
1130:src/main.c    **** 
1131:src/main.c    **** 
ARM GAS  /tmp/ccQGhvTg.s 			page 66


1132:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1530              		.loc 2 1132 0
 1531 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1532 0020 1E4B     		ldr	r3, .L80	@ tmp119,
 1533 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1534 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1535 0026 1823     		movs	r3, #24	@ tmp122,
 1536 0028 1A00     		movs	r2, r3	@, tmp122
 1537 002a FFF7FEFF 		bl	memcpy	@
1133:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1134:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1135:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1538              		.loc 2 1135 0
 1539 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1540 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1541 0032 1B49     		ldr	r1, .L80+4	@ tmp127,
 1542 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1543 0036 FFF7FEFF 		bl	sprintf	@
1136:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1544              		.loc 2 1136 0
 1545 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1546 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1547 003e 1100     		movs	r1, r2	@, tmp129
 1548 0040 1800     		movs	r0, r3	@, tmp130
 1549 0042 FFF7FEFF 		bl	strcat	@
1137:src/main.c    **** 
1138:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1139:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1140:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1550              		.loc 2 1140 0
 1551 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1552 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1553 004a 1649     		ldr	r1, .L80+8	@ tmp133,
 1554 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1555 004e FFF7FEFF 		bl	sprintf	@
1141:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1556              		.loc 2 1141 0
 1557 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1558 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1559 0056 1100     		movs	r1, r2	@, tmp135
 1560 0058 1800     		movs	r0, r3	@, tmp136
 1561 005a FFF7FEFF 		bl	strcat	@
1142:src/main.c    **** 
1143:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1144:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1145:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1562              		.loc 2 1145 0
 1563 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1564 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1565 0062 1149     		ldr	r1, .L80+12	@ tmp139,
 1566 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1567 0066 FFF7FEFF 		bl	sprintf	@
1146:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1568              		.loc 2 1146 0
 1569 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1570 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1571 006e 1100     		movs	r1, r2	@, tmp141
ARM GAS  /tmp/ccQGhvTg.s 			page 67


 1572 0070 1800     		movs	r0, r3	@, tmp142
 1573 0072 FFF7FEFF 		bl	strcat	@
1147:src/main.c    **** 
1148:src/main.c    **** 
1149:src/main.c    ****       strcat((char *)buffer,"}}");
 1574              		.loc 2 1149 0
 1575 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1576 0078 1800     		movs	r0, r3	@, tmp143
 1577 007a FFF7FEFF 		bl	strlen	@
 1578 007e 0300     		movs	r3, r0	@ tmp144,
 1579 0080 1A00     		movs	r2, r3	@ D.7222, tmp145
 1580 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1581 0084 9A18     		adds	r2, r3, r2	@ D.7223, tmp146, D.7222
 1582 0086 094B     		ldr	r3, .L80+16	@ tmp147,
 1583 0088 1000     		movs	r0, r2	@ tmp148, D.7223
 1584 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1585 008c 0323     		movs	r3, #3	@ tmp150,
 1586 008e 1A00     		movs	r2, r3	@, tmp150
 1587 0090 FFF7FEFF 		bl	memcpy	@
1150:src/main.c    **** 
1151:src/main.c    ****       return;
 1588              		.loc 2 1151 0
 1589 0094 C046     		nop
1152:src/main.c    **** }
 1590              		.loc 2 1152 0
 1591 0096 17B0     		add	sp, sp, #92	@,,
 1592              		@ sp needed	@
 1593 0098 00BD     		pop	{pc}
 1594              	.L81:
 1595 009a C046     		.align	2
 1596              	.L80:
 1597 009c 1C010000 		.word	.LC37
 1598 00a0 34010000 		.word	.LC39
 1599 00a4 50010000 		.word	.LC41
 1600 00a8 68010000 		.word	.LC43
 1601 00ac 80010000 		.word	.LC45
 1602              		.cfi_endproc
 1603              	.LFE21:
 1604              		.size	prepare_json_pkt, .-prepare_json_pkt
 1605              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1606              		.align	2
 1607              		.global	TimingDelay_Decrement
 1608              		.code	16
 1609              		.thumb_func
 1610              		.type	TimingDelay_Decrement, %function
 1611              	TimingDelay_Decrement:
 1612              	.LFB22:
1153:src/main.c    **** 
1154:src/main.c    **** //void EXTI4_15_IRQHandler(void)
1155:src/main.c    **** //{
1156:src/main.c    **** //	unsigned short aux;
1157:src/main.c    **** //
1158:src/main.c    **** ////--- SOLO PRUEBA DE INTERRUPCIONES ---//
1159:src/main.c    **** ////	if (DMX_INPUT)
1160:src/main.c    **** ////		LED_ON;
1161:src/main.c    **** ////	else
1162:src/main.c    **** ////		LED_OFF;
ARM GAS  /tmp/ccQGhvTg.s 			page 68


1163:src/main.c    **** ////
1164:src/main.c    **** ////	EXTI->PR |= 0x0100;
1165:src/main.c    **** //
1166:src/main.c    **** //	if(EXTI->PR & 0x0100)	//Line8
1167:src/main.c    **** //	{
1168:src/main.c    **** //
1169:src/main.c    **** //		//si no esta con el USART detecta el flanco	PONER TIMEOUT ACA?????
1170:src/main.c    **** //		if ((dmx_receive_flag == 0) || (dmx_timeout_timer == 0))
1171:src/main.c    **** //		//if (dmx_receive_flag == 0)
1172:src/main.c    **** //		{
1173:src/main.c    **** //			switch (signal_state)
1174:src/main.c    **** //			{
1175:src/main.c    **** //				case IDLE:
1176:src/main.c    **** //					if (!(DMX_INPUT))
1177:src/main.c    **** //					{
1178:src/main.c    **** //						//Activo timer en Falling.
1179:src/main.c    **** //						TIM14->CNT = 0;
1180:src/main.c    **** //						TIM14->CR1 |= 0x0001;
1181:src/main.c    **** //						signal_state++;
1182:src/main.c    **** //					}
1183:src/main.c    **** //					break;
1184:src/main.c    **** //
1185:src/main.c    **** //				case LOOK_FOR_BREAK:
1186:src/main.c    **** //					if (DMX_INPUT)
1187:src/main.c    **** //					{
1188:src/main.c    **** //						//Desactivo timer en Rising.
1189:src/main.c    **** //						aux = TIM14->CNT;
1190:src/main.c    **** //
1191:src/main.c    **** //						//reviso BREAK
1192:src/main.c    **** //						//if (((tim_counter_65ms) || (aux > 88)) && (tim_counter_65ms <= 20))
1193:src/main.c    **** //						if ((aux > 87) && (aux < 210))	//Consola STARLET 6
1194:src/main.c    **** //						//if ((aux > 87) && (aux < 2000))		//Consola marca CODE tiene break 1.88ms
1195:src/main.c    **** //						{
1196:src/main.c    **** //							LED_ON;
1197:src/main.c    **** //							//Activo timer para ver MARK.
1198:src/main.c    **** //							//TIM2->CNT = 0;
1199:src/main.c    **** //							//TIM2->CR1 |= 0x0001;
1200:src/main.c    **** //
1201:src/main.c    **** //							signal_state++;
1202:src/main.c    **** //							//tengo el break, activo el puerto serie
1203:src/main.c    **** //							DMX_channel_received = 0;
1204:src/main.c    **** //							//dmx_receive_flag = 1;
1205:src/main.c    **** //
1206:src/main.c    **** //							dmx_timeout_timer = DMX_TIMEOUT;		//activo el timer cuando prendo el puerto serie
1207:src/main.c    **** //							//USARTx_RX_ENA;
1208:src/main.c    **** //						}
1209:src/main.c    **** //						else	//falso disparo
1210:src/main.c    **** //							signal_state = IDLE;
1211:src/main.c    **** //					}
1212:src/main.c    **** //					else	//falso disparo
1213:src/main.c    **** //						signal_state = IDLE;
1214:src/main.c    **** //
1215:src/main.c    **** //					TIM14->CR1 &= 0xFFFE;
1216:src/main.c    **** //					break;
1217:src/main.c    **** //
1218:src/main.c    **** //				case LOOK_FOR_MARK:
1219:src/main.c    **** //					if ((!(DMX_INPUT)) && (dmx_timeout_timer))	//termino Mark after break
ARM GAS  /tmp/ccQGhvTg.s 			page 69


1220:src/main.c    **** //					{
1221:src/main.c    **** //						//ya tenia el serie habilitado
1222:src/main.c    **** //						//if ((aux > 7) && (aux < 12))
1223:src/main.c    **** //						dmx_receive_flag = 1;
1224:src/main.c    **** //					}
1225:src/main.c    **** //					else	//falso disparo
1226:src/main.c    **** //					{
1227:src/main.c    **** //						//termine por timeout
1228:src/main.c    **** //						dmx_receive_flag = 0;
1229:src/main.c    **** //						//USARTx_RX_DISA;
1230:src/main.c    **** //					}
1231:src/main.c    **** //					signal_state = IDLE;
1232:src/main.c    **** //					LED_OFF;
1233:src/main.c    **** //					break;
1234:src/main.c    **** //
1235:src/main.c    **** //				default:
1236:src/main.c    **** //					signal_state = IDLE;
1237:src/main.c    **** //					break;
1238:src/main.c    **** //			}
1239:src/main.c    **** //		}
1240:src/main.c    **** //
1241:src/main.c    **** //		EXTI->PR |= 0x0100;
1242:src/main.c    **** //	}
1243:src/main.c    **** //}
1244:src/main.c    **** 
1245:src/main.c    **** void TimingDelay_Decrement(void)
1246:src/main.c    **** {
 1613              		.loc 2 1246 0
 1614              		.cfi_startproc
 1615 0000 10B5     		push	{r4, lr}	@
 1616              	.LCFI8:
 1617              		.cfi_def_cfa_offset 8
 1618              		.cfi_offset 4, -8
 1619              		.cfi_offset 14, -4
1247:src/main.c    **** 	if (wait_ms_var)
 1620              		.loc 2 1247 0
 1621 0002 4B4B     		ldr	r3, .L95	@ tmp145,
 1622 0004 1B88     		ldrh	r3, [r3]	@ tmp146, wait_ms_var
 1623 0006 9BB2     		uxth	r3, r3	@ D.7236, tmp146
 1624 0008 002B     		cmp	r3, #0	@ D.7236,
 1625 000a 06D0     		beq	.L83	@,
1248:src/main.c    **** 		wait_ms_var--;
 1626              		.loc 2 1248 0
 1627 000c 484B     		ldr	r3, .L95	@ tmp147,
 1628 000e 1B88     		ldrh	r3, [r3]	@ tmp148, wait_ms_var
 1629 0010 9BB2     		uxth	r3, r3	@ D.7236, tmp148
 1630 0012 013B     		subs	r3, r3, #1	@ tmp149,
 1631 0014 9AB2     		uxth	r2, r3	@ D.7236, tmp149
 1632 0016 464B     		ldr	r3, .L95	@ tmp150,
 1633 0018 1A80     		strh	r2, [r3]	@ tmp151, wait_ms_var
 1634              	.L83:
1249:src/main.c    **** 
1250:src/main.c    **** 	if (timer_rep)
 1635              		.loc 2 1250 0
 1636 001a 464B     		ldr	r3, .L95+4	@ tmp152,
 1637 001c 1B88     		ldrh	r3, [r3]	@ tmp153, timer_rep
 1638 001e 9BB2     		uxth	r3, r3	@ D.7236, tmp153
ARM GAS  /tmp/ccQGhvTg.s 			page 70


 1639 0020 002B     		cmp	r3, #0	@ D.7236,
 1640 0022 06D0     		beq	.L84	@,
1251:src/main.c    **** 		timer_rep--;
 1641              		.loc 2 1251 0
 1642 0024 434B     		ldr	r3, .L95+4	@ tmp154,
 1643 0026 1B88     		ldrh	r3, [r3]	@ tmp155, timer_rep
 1644 0028 9BB2     		uxth	r3, r3	@ D.7236, tmp155
 1645 002a 013B     		subs	r3, r3, #1	@ tmp156,
 1646 002c 9AB2     		uxth	r2, r3	@ D.7236, tmp156
 1647 002e 414B     		ldr	r3, .L95+4	@ tmp157,
 1648 0030 1A80     		strh	r2, [r3]	@ tmp158, timer_rep
 1649              	.L84:
1252:src/main.c    **** 
1253:src/main.c    **** 	if (timer_standby)
 1650              		.loc 2 1253 0
 1651 0032 414B     		ldr	r3, .L95+8	@ tmp159,
 1652 0034 1B88     		ldrh	r3, [r3]	@ tmp160, timer_standby
 1653 0036 9BB2     		uxth	r3, r3	@ D.7236, tmp160
 1654 0038 002B     		cmp	r3, #0	@ D.7236,
 1655 003a 06D0     		beq	.L85	@,
1254:src/main.c    **** 		timer_standby--;
 1656              		.loc 2 1254 0
 1657 003c 3E4B     		ldr	r3, .L95+8	@ tmp161,
 1658 003e 1B88     		ldrh	r3, [r3]	@ tmp162, timer_standby
 1659 0040 9BB2     		uxth	r3, r3	@ D.7236, tmp162
 1660 0042 013B     		subs	r3, r3, #1	@ tmp163,
 1661 0044 9AB2     		uxth	r2, r3	@ D.7236, tmp163
 1662 0046 3C4B     		ldr	r3, .L95+8	@ tmp164,
 1663 0048 1A80     		strh	r2, [r3]	@ tmp165, timer_standby
 1664              	.L85:
1255:src/main.c    **** 
1256:src/main.c    **** 
1257:src/main.c    **** #ifdef USE_REDONDA_BASIC
1258:src/main.c    **** 	if (tt_take_photo_sample)
 1665              		.loc 2 1258 0
 1666 004a 3C4B     		ldr	r3, .L95+12	@ tmp166,
 1667 004c 1B88     		ldrh	r3, [r3]	@ tmp167, tt_take_photo_sample
 1668 004e 9BB2     		uxth	r3, r3	@ D.7236, tmp167
 1669 0050 002B     		cmp	r3, #0	@ D.7236,
 1670 0052 06D0     		beq	.L86	@,
1259:src/main.c    **** 		tt_take_photo_sample--;
 1671              		.loc 2 1259 0
 1672 0054 394B     		ldr	r3, .L95+12	@ tmp168,
 1673 0056 1B88     		ldrh	r3, [r3]	@ tmp169, tt_take_photo_sample
 1674 0058 9BB2     		uxth	r3, r3	@ D.7236, tmp169
 1675 005a 013B     		subs	r3, r3, #1	@ tmp170,
 1676 005c 9AB2     		uxth	r2, r3	@ D.7236, tmp170
 1677 005e 374B     		ldr	r3, .L95+12	@ tmp171,
 1678 0060 1A80     		strh	r2, [r3]	@ tmp172, tt_take_photo_sample
 1679              	.L86:
1260:src/main.c    **** 
1261:src/main.c    **** 	if (tt_relay_on_off)
 1680              		.loc 2 1261 0
 1681 0062 374B     		ldr	r3, .L95+16	@ tmp173,
 1682 0064 1B88     		ldrh	r3, [r3]	@ tmp174, tt_relay_on_off
 1683 0066 9BB2     		uxth	r3, r3	@ D.7236, tmp174
 1684 0068 002B     		cmp	r3, #0	@ D.7236,
ARM GAS  /tmp/ccQGhvTg.s 			page 71


 1685 006a 06D0     		beq	.L87	@,
1262:src/main.c    **** 		tt_relay_on_off--;
 1686              		.loc 2 1262 0
 1687 006c 344B     		ldr	r3, .L95+16	@ tmp175,
 1688 006e 1B88     		ldrh	r3, [r3]	@ tmp176, tt_relay_on_off
 1689 0070 9BB2     		uxth	r3, r3	@ D.7236, tmp176
 1690 0072 013B     		subs	r3, r3, #1	@ tmp177,
 1691 0074 9AB2     		uxth	r2, r3	@ D.7236, tmp177
 1692 0076 324B     		ldr	r3, .L95+16	@ tmp178,
 1693 0078 1A80     		strh	r2, [r3]	@ tmp179, tt_relay_on_off
 1694              	.L87:
1263:src/main.c    **** #endif
1264:src/main.c    **** 
1265:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1266:src/main.c    **** 	if (tt_take_temp_sample)
1267:src/main.c    **** 		tt_take_temp_sample--;
1268:src/main.c    **** #endif
1269:src/main.c    **** 
1270:src/main.c    **** 	if (take_temp_sample)
 1695              		.loc 2 1270 0
 1696 007a 324B     		ldr	r3, .L95+20	@ tmp180,
 1697 007c 1B88     		ldrh	r3, [r3]	@ tmp181, take_temp_sample
 1698 007e 9BB2     		uxth	r3, r3	@ D.7236, tmp181
 1699 0080 002B     		cmp	r3, #0	@ D.7236,
 1700 0082 06D0     		beq	.L88	@,
1271:src/main.c    **** 		take_temp_sample--;
 1701              		.loc 2 1271 0
 1702 0084 2F4B     		ldr	r3, .L95+20	@ tmp182,
 1703 0086 1B88     		ldrh	r3, [r3]	@ tmp183, take_temp_sample
 1704 0088 9BB2     		uxth	r3, r3	@ D.7236, tmp183
 1705 008a 013B     		subs	r3, r3, #1	@ tmp184,
 1706 008c 9AB2     		uxth	r2, r3	@ D.7236, tmp184
 1707 008e 2D4B     		ldr	r3, .L95+20	@ tmp185,
 1708 0090 1A80     		strh	r2, [r3]	@ tmp186, take_temp_sample
 1709              	.L88:
1272:src/main.c    **** 
1273:src/main.c    **** 	if (filter_timer)
 1710              		.loc 2 1273 0
 1711 0092 2D4B     		ldr	r3, .L95+24	@ tmp187,
 1712 0094 1B78     		ldrb	r3, [r3]	@ tmp188, filter_timer
 1713 0096 DBB2     		uxtb	r3, r3	@ D.7237, tmp188
 1714 0098 002B     		cmp	r3, #0	@ D.7237,
 1715 009a 06D0     		beq	.L89	@,
1274:src/main.c    **** 		filter_timer--;
 1716              		.loc 2 1274 0
 1717 009c 2A4B     		ldr	r3, .L95+24	@ tmp189,
 1718 009e 1B78     		ldrb	r3, [r3]	@ tmp190, filter_timer
 1719 00a0 DBB2     		uxtb	r3, r3	@ D.7237, tmp190
 1720 00a2 013B     		subs	r3, r3, #1	@ tmp191,
 1721 00a4 DAB2     		uxtb	r2, r3	@ D.7237, tmp191
 1722 00a6 284B     		ldr	r3, .L95+24	@ tmp192,
 1723 00a8 1A70     		strb	r2, [r3]	@ tmp193, filter_timer
 1724              	.L89:
1275:src/main.c    **** 
1276:src/main.c    **** #ifdef WITH_HYST
1277:src/main.c    **** 	//cuenta de a 1 minuto
1278:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
ARM GAS  /tmp/ccQGhvTg.s 			page 72


 1725              		.loc 2 1278 0
 1726 00aa 284B     		ldr	r3, .L95+28	@ tmp194,
 1727 00ac 1B88     		ldrh	r3, [r3]	@ tmp195, secs
 1728 00ae 9BB2     		uxth	r3, r3	@ D.7236, tmp195
 1729 00b0 274A     		ldr	r2, .L95+32	@ tmp196,
 1730 00b2 9342     		cmp	r3, r2	@ D.7236, tmp196
 1731 00b4 0AD9     		bls	.L90	@,
1279:src/main.c    **** 	{
1280:src/main.c    **** 		minutes++;
 1732              		.loc 2 1280 0
 1733 00b6 274B     		ldr	r3, .L95+36	@ tmp197,
 1734 00b8 1B78     		ldrb	r3, [r3]	@ tmp198, minutes
 1735 00ba DBB2     		uxtb	r3, r3	@ D.7237, tmp198
 1736 00bc 0133     		adds	r3, r3, #1	@ tmp199,
 1737 00be DAB2     		uxtb	r2, r3	@ D.7237, tmp199
 1738 00c0 244B     		ldr	r3, .L95+36	@ tmp200,
 1739 00c2 1A70     		strb	r2, [r3]	@ tmp201, minutes
1281:src/main.c    **** 		secs = 0;
 1740              		.loc 2 1281 0
 1741 00c4 214B     		ldr	r3, .L95+28	@ tmp202,
 1742 00c6 0022     		movs	r2, #0	@ tmp203,
 1743 00c8 1A80     		strh	r2, [r3]	@ tmp204, secs
 1744 00ca 06E0     		b	.L91	@
 1745              	.L90:
1282:src/main.c    **** 	}
1283:src/main.c    **** 	else
1284:src/main.c    **** 		secs++;
 1746              		.loc 2 1284 0
 1747 00cc 1F4B     		ldr	r3, .L95+28	@ tmp205,
 1748 00ce 1B88     		ldrh	r3, [r3]	@ tmp206, secs
 1749 00d0 9BB2     		uxth	r3, r3	@ D.7236, tmp206
 1750 00d2 0133     		adds	r3, r3, #1	@ tmp207,
 1751 00d4 9AB2     		uxth	r2, r3	@ D.7236, tmp207
 1752 00d6 1D4B     		ldr	r3, .L95+28	@ tmp208,
 1753 00d8 1A80     		strh	r2, [r3]	@ tmp209, secs
 1754              	.L91:
1285:src/main.c    **** 
1286:src/main.c    **** 	if (minutes > 60)
 1755              		.loc 2 1286 0
 1756 00da 1E4B     		ldr	r3, .L95+36	@ tmp210,
 1757 00dc 1B78     		ldrb	r3, [r3]	@ tmp211, minutes
 1758 00de DBB2     		uxtb	r3, r3	@ D.7237, tmp211
 1759 00e0 3C2B     		cmp	r3, #60	@ D.7237,
 1760 00e2 09D9     		bls	.L92	@,
1287:src/main.c    **** 	{
1288:src/main.c    **** 		hours++;
 1761              		.loc 2 1288 0
 1762 00e4 1C4B     		ldr	r3, .L95+40	@ tmp212,
 1763 00e6 1B78     		ldrb	r3, [r3]	@ tmp213, hours
 1764 00e8 DBB2     		uxtb	r3, r3	@ D.7237, tmp213
 1765 00ea 0133     		adds	r3, r3, #1	@ tmp214,
 1766 00ec DAB2     		uxtb	r2, r3	@ D.7237, tmp214
 1767 00ee 1A4B     		ldr	r3, .L95+40	@ tmp215,
 1768 00f0 1A70     		strb	r2, [r3]	@ tmp216, hours
1289:src/main.c    **** 		minutes = 0;
 1769              		.loc 2 1289 0
 1770 00f2 184B     		ldr	r3, .L95+36	@ tmp217,
ARM GAS  /tmp/ccQGhvTg.s 			page 73


 1771 00f4 0022     		movs	r2, #0	@ tmp218,
 1772 00f6 1A70     		strb	r2, [r3]	@ tmp219, minutes
 1773              	.L92:
1290:src/main.c    **** 	}
1291:src/main.c    **** #endif
1292:src/main.c    **** 
1293:src/main.c    **** 
1294:src/main.c    **** #ifdef USE_MQTT_LIB
1295:src/main.c    **** 	//timer del MQTT
1296:src/main.c    **** 	SysTickIntHandler();
1297:src/main.c    **** #endif
1298:src/main.c    **** 
1299:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1300:src/main.c    **** 	if (usart1_mini_timeout)
 1774              		.loc 2 1300 0
 1775 00f8 184B     		ldr	r3, .L95+44	@ tmp220,
 1776 00fa 1B78     		ldrb	r3, [r3]	@ tmp221, usart1_mini_timeout
 1777 00fc DBB2     		uxtb	r3, r3	@ D.7237, tmp221
 1778 00fe 002B     		cmp	r3, #0	@ D.7237,
 1779 0100 06D0     		beq	.L93	@,
1301:src/main.c    **** 		usart1_mini_timeout--;
 1780              		.loc 2 1301 0
 1781 0102 164B     		ldr	r3, .L95+44	@ tmp222,
 1782 0104 1B78     		ldrb	r3, [r3]	@ tmp223, usart1_mini_timeout
 1783 0106 DBB2     		uxtb	r3, r3	@ D.7237, tmp223
 1784 0108 013B     		subs	r3, r3, #1	@ tmp224,
 1785 010a DAB2     		uxtb	r2, r3	@ D.7237, tmp224
 1786 010c 134B     		ldr	r3, .L95+44	@ tmp225,
 1787 010e 1A70     		strb	r2, [r3]	@ tmp226, usart1_mini_timeout
 1788              	.L93:
1302:src/main.c    **** 	if (usart2_mini_timeout)
 1789              		.loc 2 1302 0
 1790 0110 134B     		ldr	r3, .L95+48	@ tmp227,
 1791 0112 1B78     		ldrb	r3, [r3]	@ tmp228, usart2_mini_timeout
 1792 0114 DBB2     		uxtb	r3, r3	@ D.7237, tmp228
 1793 0116 002B     		cmp	r3, #0	@ D.7237,
 1794 0118 06D0     		beq	.L94	@,
1303:src/main.c    **** 		usart2_mini_timeout--;
 1795              		.loc 2 1303 0
 1796 011a 114B     		ldr	r3, .L95+48	@ tmp229,
 1797 011c 1B78     		ldrb	r3, [r3]	@ tmp230, usart2_mini_timeout
 1798 011e DBB2     		uxtb	r3, r3	@ D.7237, tmp230
 1799 0120 013B     		subs	r3, r3, #1	@ tmp231,
 1800 0122 DAB2     		uxtb	r2, r3	@ D.7237, tmp231
 1801 0124 0E4B     		ldr	r3, .L95+48	@ tmp232,
 1802 0126 1A70     		strb	r2, [r3]	@ tmp233, usart2_mini_timeout
 1803              	.L94:
1304:src/main.c    **** #endif
1305:src/main.c    **** #ifdef USE_GPS
1306:src/main.c    **** 	GPSTimeoutCounters ();
1307:src/main.c    **** #endif
1308:src/main.c    **** 
1309:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1310:src/main.c    **** 	GSMTimeoutCounters ();
 1804              		.loc 2 1310 0
 1805 0128 FFF7FEFF 		bl	GSMTimeoutCounters	@
1311:src/main.c    **** #endif
ARM GAS  /tmp/ccQGhvTg.s 			page 74


1312:src/main.c    **** }
 1806              		.loc 2 1312 0
 1807 012c C046     		nop
 1808              		@ sp needed	@
 1809 012e 10BD     		pop	{r4, pc}
 1810              	.L96:
 1811              		.align	2
 1812              	.L95:
 1813 0130 00000000 		.word	wait_ms_var
 1814 0134 00000000 		.word	timer_rep
 1815 0138 00000000 		.word	timer_standby
 1816 013c 00000000 		.word	tt_take_photo_sample
 1817 0140 00000000 		.word	tt_relay_on_off
 1818 0144 00000000 		.word	take_temp_sample
 1819 0148 00000000 		.word	filter_timer
 1820 014c 00000000 		.word	secs
 1821 0150 5FEA0000 		.word	59999
 1822 0154 00000000 		.word	minutes
 1823 0158 00000000 		.word	hours
 1824 015c 00000000 		.word	usart1_mini_timeout
 1825 0160 00000000 		.word	usart2_mini_timeout
 1826              		.cfi_endproc
 1827              	.LFE22:
 1828              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1829              		.text
 1830              	.Letext0:
 1831              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1832              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1833              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1834              		.file 6 "src/hard.h"
 1835              		.file 7 "src/flash_program.h"
 1836              		.file 8 "src/funcs_gsm.h"
 1837              		.section	.debug_info,"",%progbits
 1838              	.Ldebug_info0:
 1839 0000 7A0D0000 		.4byte	0xd7a
 1840 0004 0200     		.2byte	0x2
 1841 0006 00000000 		.4byte	.Ldebug_abbrev0
 1842 000a 04       		.byte	0x4
 1843 000b 01       		.uleb128 0x1
 1844 000c 2C090000 		.4byte	.LASF199
 1845 0010 0C       		.byte	0xc
 1846 0011 04090000 		.4byte	.LASF200
 1847 0015 44070000 		.4byte	.LASF201
 1848 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1849 001d 00000000 		.4byte	0
 1850 0021 00000000 		.4byte	0
 1851 0025 00000000 		.4byte	.Ldebug_line0
 1852 0029 02       		.uleb128 0x2
 1853 002a 86050000 		.4byte	.LASF128
 1854 002e 01       		.byte	0x1
 1855 002f 06010000 		.4byte	0x106
 1856 0033 03       		.byte	0x3
 1857 0034 C7       		.byte	0xc7
 1858 0035 06010000 		.4byte	0x106
 1859 0039 03       		.uleb128 0x3
 1860 003a 1D060000 		.4byte	.LASF0
 1861 003e 72       		.sleb128 -14
ARM GAS  /tmp/ccQGhvTg.s 			page 75


 1862 003f 03       		.uleb128 0x3
 1863 0040 DC090000 		.4byte	.LASF1
 1864 0044 73       		.sleb128 -13
 1865 0045 03       		.uleb128 0x3
 1866 0046 7C000000 		.4byte	.LASF2
 1867 004a 7B       		.sleb128 -5
 1868 004b 03       		.uleb128 0x3
 1869 004c 84010000 		.4byte	.LASF3
 1870 0050 7E       		.sleb128 -2
 1871 0051 03       		.uleb128 0x3
 1872 0052 DE060000 		.4byte	.LASF4
 1873 0056 7F       		.sleb128 -1
 1874 0057 04       		.uleb128 0x4
 1875 0058 39040000 		.4byte	.LASF5
 1876 005c 00       		.byte	0
 1877 005d 04       		.uleb128 0x4
 1878 005e 16050000 		.4byte	.LASF6
 1879 0062 01       		.byte	0x1
 1880 0063 04       		.uleb128 0x4
 1881 0064 9F050000 		.4byte	.LASF7
 1882 0068 02       		.byte	0x2
 1883 0069 04       		.uleb128 0x4
 1884 006a 06010000 		.4byte	.LASF8
 1885 006e 03       		.byte	0x3
 1886 006f 04       		.uleb128 0x4
 1887 0070 A0010000 		.4byte	.LASF9
 1888 0074 04       		.byte	0x4
 1889 0075 04       		.uleb128 0x4
 1890 0076 45010000 		.4byte	.LASF10
 1891 007a 05       		.byte	0x5
 1892 007b 04       		.uleb128 0x4
 1893 007c 46000000 		.4byte	.LASF11
 1894 0080 06       		.byte	0x6
 1895 0081 04       		.uleb128 0x4
 1896 0082 33000000 		.4byte	.LASF12
 1897 0086 07       		.byte	0x7
 1898 0087 04       		.uleb128 0x4
 1899 0088 DB040000 		.4byte	.LASF13
 1900 008c 08       		.byte	0x8
 1901 008d 04       		.uleb128 0x4
 1902 008e 7F030000 		.4byte	.LASF14
 1903 0092 09       		.byte	0x9
 1904 0093 04       		.uleb128 0x4
 1905 0094 AD070000 		.4byte	.LASF15
 1906 0098 0A       		.byte	0xa
 1907 0099 04       		.uleb128 0x4
 1908 009a 81060000 		.4byte	.LASF16
 1909 009e 0B       		.byte	0xb
 1910 009f 04       		.uleb128 0x4
 1911 00a0 30050000 		.4byte	.LASF17
 1912 00a4 0C       		.byte	0xc
 1913 00a5 04       		.uleb128 0x4
 1914 00a6 E3040000 		.4byte	.LASF18
 1915 00aa 0D       		.byte	0xd
 1916 00ab 04       		.uleb128 0x4
 1917 00ac 3A060000 		.4byte	.LASF19
 1918 00b0 0E       		.byte	0xe
ARM GAS  /tmp/ccQGhvTg.s 			page 76


 1919 00b1 04       		.uleb128 0x4
 1920 00b2 2B070000 		.4byte	.LASF20
 1921 00b6 0F       		.byte	0xf
 1922 00b7 04       		.uleb128 0x4
 1923 00b8 75030000 		.4byte	.LASF21
 1924 00bc 10       		.byte	0x10
 1925 00bd 04       		.uleb128 0x4
 1926 00be D0070000 		.4byte	.LASF22
 1927 00c2 11       		.byte	0x11
 1928 00c3 04       		.uleb128 0x4
 1929 00c4 A2070000 		.4byte	.LASF23
 1930 00c8 13       		.byte	0x13
 1931 00c9 04       		.uleb128 0x4
 1932 00ca B5030000 		.4byte	.LASF24
 1933 00ce 14       		.byte	0x14
 1934 00cf 04       		.uleb128 0x4
 1935 00d0 D8000000 		.4byte	.LASF25
 1936 00d4 15       		.byte	0x15
 1937 00d5 04       		.uleb128 0x4
 1938 00d6 6A060000 		.4byte	.LASF26
 1939 00da 16       		.byte	0x16
 1940 00db 04       		.uleb128 0x4
 1941 00dc 7A010000 		.4byte	.LASF27
 1942 00e0 17       		.byte	0x17
 1943 00e1 04       		.uleb128 0x4
 1944 00e2 02070000 		.4byte	.LASF28
 1945 00e6 18       		.byte	0x18
 1946 00e7 04       		.uleb128 0x4
 1947 00e8 EA010000 		.4byte	.LASF29
 1948 00ec 19       		.byte	0x19
 1949 00ed 04       		.uleb128 0x4
 1950 00ee 80080000 		.4byte	.LASF30
 1951 00f2 1A       		.byte	0x1a
 1952 00f3 04       		.uleb128 0x4
 1953 00f4 ED050000 		.4byte	.LASF31
 1954 00f8 1B       		.byte	0x1b
 1955 00f9 04       		.uleb128 0x4
 1956 00fa 9F020000 		.4byte	.LASF32
 1957 00fe 1C       		.byte	0x1c
 1958 00ff 04       		.uleb128 0x4
 1959 0100 EB060000 		.4byte	.LASF33
 1960 0104 1E       		.byte	0x1e
 1961 0105 00       		.byte	0
 1962 0106 05       		.uleb128 0x5
 1963 0107 01       		.byte	0x1
 1964 0108 06       		.byte	0x6
 1965 0109 F8080000 		.4byte	.LASF36
 1966 010d 06       		.uleb128 0x6
 1967 010e 86020000 		.4byte	.LASF34
 1968 0112 03       		.byte	0x3
 1969 0113 5F01     		.2byte	0x15f
 1970 0115 29000000 		.4byte	0x29
 1971 0119 07       		.uleb128 0x7
 1972 011a A3060000 		.4byte	.LASF35
 1973 011e 04       		.byte	0x4
 1974 011f 1D       		.byte	0x1d
 1975 0120 24010000 		.4byte	0x124
ARM GAS  /tmp/ccQGhvTg.s 			page 77


 1976 0124 05       		.uleb128 0x5
 1977 0125 01       		.byte	0x1
 1978 0126 08       		.byte	0x8
 1979 0127 DE070000 		.4byte	.LASF37
 1980 012b 05       		.uleb128 0x5
 1981 012c 02       		.byte	0x2
 1982 012d 05       		.byte	0x5
 1983 012e DA050000 		.4byte	.LASF38
 1984 0132 07       		.uleb128 0x7
 1985 0133 54020000 		.4byte	.LASF39
 1986 0137 04       		.byte	0x4
 1987 0138 2B       		.byte	0x2b
 1988 0139 3D010000 		.4byte	0x13d
 1989 013d 05       		.uleb128 0x5
 1990 013e 02       		.byte	0x2
 1991 013f 07       		.byte	0x7
 1992 0140 19090000 		.4byte	.LASF40
 1993 0144 07       		.uleb128 0x7
 1994 0145 F4000000 		.4byte	.LASF41
 1995 0149 04       		.byte	0x4
 1996 014a 3F       		.byte	0x3f
 1997 014b 4F010000 		.4byte	0x14f
 1998 014f 05       		.uleb128 0x5
 1999 0150 04       		.byte	0x4
 2000 0151 05       		.byte	0x5
 2001 0152 E4050000 		.4byte	.LASF42
 2002 0156 07       		.uleb128 0x7
 2003 0157 F5070000 		.4byte	.LASF43
 2004 015b 04       		.byte	0x4
 2005 015c 41       		.byte	0x41
 2006 015d 61010000 		.4byte	0x161
 2007 0161 05       		.uleb128 0x5
 2008 0162 04       		.byte	0x4
 2009 0163 07       		.byte	0x7
 2010 0164 0C070000 		.4byte	.LASF44
 2011 0168 05       		.uleb128 0x5
 2012 0169 08       		.byte	0x8
 2013 016a 05       		.byte	0x5
 2014 016b 2B040000 		.4byte	.LASF45
 2015 016f 05       		.uleb128 0x5
 2016 0170 08       		.byte	0x8
 2017 0171 07       		.byte	0x7
 2018 0172 F4010000 		.4byte	.LASF46
 2019 0176 08       		.uleb128 0x8
 2020 0177 04       		.byte	0x4
 2021 0178 05       		.byte	0x5
 2022 0179 696E7400 		.ascii	"int\000"
 2023 017d 05       		.uleb128 0x5
 2024 017e 04       		.byte	0x4
 2025 017f 07       		.byte	0x7
 2026 0180 C6000000 		.4byte	.LASF47
 2027 0184 07       		.uleb128 0x7
 2028 0185 C0030000 		.4byte	.LASF48
 2029 0189 05       		.byte	0x5
 2030 018a 14       		.byte	0x14
 2031 018b 19010000 		.4byte	0x119
 2032 018f 07       		.uleb128 0x7
ARM GAS  /tmp/ccQGhvTg.s 			page 78


 2033 0190 6E050000 		.4byte	.LASF49
 2034 0194 05       		.byte	0x5
 2035 0195 1A       		.byte	0x1a
 2036 0196 32010000 		.4byte	0x132
 2037 019a 07       		.uleb128 0x7
 2038 019b 88070000 		.4byte	.LASF50
 2039 019f 05       		.byte	0x5
 2040 01a0 1F       		.byte	0x1f
 2041 01a1 44010000 		.4byte	0x144
 2042 01a5 07       		.uleb128 0x7
 2043 01a6 BF010000 		.4byte	.LASF51
 2044 01aa 05       		.byte	0x5
 2045 01ab 20       		.byte	0x20
 2046 01ac 56010000 		.4byte	0x156
 2047 01b0 09       		.uleb128 0x9
 2048 01b1 2003     		.2byte	0x320
 2049 01b3 01       		.byte	0x1
 2050 01b4 71       		.byte	0x71
 2051 01b5 4D020000 		.4byte	0x24d
 2052 01b9 0A       		.uleb128 0xa
 2053 01ba D1010000 		.4byte	.LASF52
 2054 01be 01       		.byte	0x1
 2055 01bf 73       		.byte	0x73
 2056 01c0 64020000 		.4byte	0x264
 2057 01c4 02       		.byte	0x2
 2058 01c5 23       		.byte	0x23
 2059 01c6 00       		.uleb128 0
 2060 01c7 0A       		.uleb128 0xa
 2061 01c8 A8050000 		.4byte	.LASF53
 2062 01cc 01       		.byte	0x1
 2063 01cd 74       		.byte	0x74
 2064 01ce 69020000 		.4byte	0x269
 2065 01d2 02       		.byte	0x2
 2066 01d3 23       		.byte	0x23
 2067 01d4 04       		.uleb128 0x4
 2068 01d5 0A       		.uleb128 0xa
 2069 01d6 70080000 		.4byte	.LASF54
 2070 01da 01       		.byte	0x1
 2071 01db 75       		.byte	0x75
 2072 01dc 79020000 		.4byte	0x279
 2073 01e0 03       		.byte	0x3
 2074 01e1 23       		.byte	0x23
 2075 01e2 8001     		.uleb128 0x80
 2076 01e4 0A       		.uleb128 0xa
 2077 01e5 E1010000 		.4byte	.LASF55
 2078 01e9 01       		.byte	0x1
 2079 01ea 76       		.byte	0x76
 2080 01eb 69020000 		.4byte	0x269
 2081 01ef 03       		.byte	0x3
 2082 01f0 23       		.byte	0x23
 2083 01f1 8401     		.uleb128 0x84
 2084 01f3 0A       		.uleb128 0xa
 2085 01f4 F5090000 		.4byte	.LASF56
 2086 01f8 01       		.byte	0x1
 2087 01f9 77       		.byte	0x77
 2088 01fa 7E020000 		.4byte	0x27e
 2089 01fe 03       		.byte	0x3
ARM GAS  /tmp/ccQGhvTg.s 			page 79


 2090 01ff 23       		.byte	0x23
 2091 0200 8002     		.uleb128 0x100
 2092 0202 0A       		.uleb128 0xa
 2093 0203 BC050000 		.4byte	.LASF57
 2094 0207 01       		.byte	0x1
 2095 0208 78       		.byte	0x78
 2096 0209 69020000 		.4byte	0x269
 2097 020d 03       		.byte	0x3
 2098 020e 23       		.byte	0x23
 2099 020f 8402     		.uleb128 0x104
 2100 0211 0A       		.uleb128 0xa
 2101 0212 2B050000 		.4byte	.LASF58
 2102 0216 01       		.byte	0x1
 2103 0217 79       		.byte	0x79
 2104 0218 83020000 		.4byte	0x283
 2105 021c 03       		.byte	0x3
 2106 021d 23       		.byte	0x23
 2107 021e 8003     		.uleb128 0x180
 2108 0220 0A       		.uleb128 0xa
 2109 0221 C6050000 		.4byte	.LASF59
 2110 0225 01       		.byte	0x1
 2111 0226 7A       		.byte	0x7a
 2112 0227 69020000 		.4byte	0x269
 2113 022b 03       		.byte	0x3
 2114 022c 23       		.byte	0x23
 2115 022d 8403     		.uleb128 0x184
 2116 022f 0A       		.uleb128 0xa
 2117 0230 D0050000 		.4byte	.LASF60
 2118 0234 01       		.byte	0x1
 2119 0235 7B       		.byte	0x7b
 2120 0236 88020000 		.4byte	0x288
 2121 023a 03       		.byte	0x3
 2122 023b 23       		.byte	0x23
 2123 023c 8004     		.uleb128 0x200
 2124 023e 0B       		.uleb128 0xb
 2125 023f 495000   		.ascii	"IP\000"
 2126 0242 01       		.byte	0x1
 2127 0243 7C       		.byte	0x7c
 2128 0244 A8020000 		.4byte	0x2a8
 2129 0248 03       		.byte	0x3
 2130 0249 23       		.byte	0x23
 2131 024a 8006     		.uleb128 0x300
 2132 024c 00       		.byte	0
 2133 024d 0C       		.uleb128 0xc
 2134 024e A5010000 		.4byte	0x1a5
 2135 0252 5D020000 		.4byte	0x25d
 2136 0256 0D       		.uleb128 0xd
 2137 0257 5D020000 		.4byte	0x25d
 2138 025b 00       		.byte	0
 2139 025c 00       		.byte	0
 2140 025d 05       		.uleb128 0x5
 2141 025e 04       		.byte	0x4
 2142 025f 07       		.byte	0x7
 2143 0260 F4060000 		.4byte	.LASF61
 2144 0264 0E       		.uleb128 0xe
 2145 0265 4D020000 		.4byte	0x24d
 2146 0269 0C       		.uleb128 0xc
ARM GAS  /tmp/ccQGhvTg.s 			page 80


 2147 026a A5010000 		.4byte	0x1a5
 2148 026e 79020000 		.4byte	0x279
 2149 0272 0D       		.uleb128 0xd
 2150 0273 5D020000 		.4byte	0x25d
 2151 0277 1E       		.byte	0x1e
 2152 0278 00       		.byte	0
 2153 0279 0E       		.uleb128 0xe
 2154 027a 4D020000 		.4byte	0x24d
 2155 027e 0E       		.uleb128 0xe
 2156 027f 4D020000 		.4byte	0x24d
 2157 0283 0E       		.uleb128 0xe
 2158 0284 4D020000 		.4byte	0x24d
 2159 0288 0C       		.uleb128 0xc
 2160 0289 A5010000 		.4byte	0x1a5
 2161 028d 98020000 		.4byte	0x298
 2162 0291 0D       		.uleb128 0xd
 2163 0292 5D020000 		.4byte	0x25d
 2164 0296 3F       		.byte	0x3f
 2165 0297 00       		.byte	0
 2166 0298 0C       		.uleb128 0xc
 2167 0299 A5010000 		.4byte	0x1a5
 2168 029d A8020000 		.4byte	0x2a8
 2169 02a1 0D       		.uleb128 0xd
 2170 02a2 5D020000 		.4byte	0x25d
 2171 02a6 07       		.byte	0x7
 2172 02a7 00       		.byte	0
 2173 02a8 0E       		.uleb128 0xe
 2174 02a9 98020000 		.4byte	0x298
 2175 02ad 07       		.uleb128 0x7
 2176 02ae AD060000 		.4byte	.LASF62
 2177 02b2 01       		.byte	0x1
 2178 02b3 7D       		.byte	0x7d
 2179 02b4 B0010000 		.4byte	0x1b0
 2180 02b8 0F       		.uleb128 0xf
 2181 02b9 34       		.byte	0x34
 2182 02ba 01       		.byte	0x1
 2183 02bb 86       		.byte	0x86
 2184 02bc 5B030000 		.4byte	0x35b
 2185 02c0 0A       		.uleb128 0xa
 2186 02c1 AB020000 		.4byte	.LASF63
 2187 02c5 01       		.byte	0x1
 2188 02c6 88       		.byte	0x88
 2189 02c7 60030000 		.4byte	0x360
 2190 02cb 02       		.byte	0x2
 2191 02cc 23       		.byte	0x23
 2192 02cd 00       		.uleb128 0
 2193 02ce 0A       		.uleb128 0xa
 2194 02cf FD060000 		.4byte	.LASF64
 2195 02d3 01       		.byte	0x1
 2196 02d4 89       		.byte	0x89
 2197 02d5 5B030000 		.4byte	0x35b
 2198 02d9 02       		.byte	0x2
 2199 02da 23       		.byte	0x23
 2200 02db 04       		.uleb128 0x4
 2201 02dc 0A       		.uleb128 0xa
 2202 02dd A8050000 		.4byte	.LASF53
 2203 02e1 01       		.byte	0x1
ARM GAS  /tmp/ccQGhvTg.s 			page 81


 2204 02e2 8A       		.byte	0x8a
 2205 02e3 A5010000 		.4byte	0x1a5
 2206 02e7 02       		.byte	0x2
 2207 02e8 23       		.byte	0x23
 2208 02e9 08       		.uleb128 0x8
 2209 02ea 0A       		.uleb128 0xa
 2210 02eb 5E030000 		.4byte	.LASF65
 2211 02ef 01       		.byte	0x1
 2212 02f0 8B       		.byte	0x8b
 2213 02f1 5B030000 		.4byte	0x35b
 2214 02f5 02       		.byte	0x2
 2215 02f6 23       		.byte	0x23
 2216 02f7 0C       		.uleb128 0xc
 2217 02f8 0B       		.uleb128 0xb
 2218 02f9 53435200 		.ascii	"SCR\000"
 2219 02fd 01       		.byte	0x1
 2220 02fe 8C       		.byte	0x8c
 2221 02ff 5B030000 		.4byte	0x35b
 2222 0303 02       		.byte	0x2
 2223 0304 23       		.byte	0x23
 2224 0305 10       		.uleb128 0x10
 2225 0306 0B       		.uleb128 0xb
 2226 0307 43435200 		.ascii	"CCR\000"
 2227 030b 01       		.byte	0x1
 2228 030c 8D       		.byte	0x8d
 2229 030d 5B030000 		.4byte	0x35b
 2230 0311 02       		.byte	0x2
 2231 0312 23       		.byte	0x23
 2232 0313 14       		.uleb128 0x14
 2233 0314 0A       		.uleb128 0xa
 2234 0315 B2050000 		.4byte	.LASF66
 2235 0319 01       		.byte	0x1
 2236 031a 8E       		.byte	0x8e
 2237 031b A5010000 		.4byte	0x1a5
 2238 031f 02       		.byte	0x2
 2239 0320 23       		.byte	0x23
 2240 0321 18       		.uleb128 0x18
 2241 0322 0B       		.uleb128 0xb
 2242 0323 53485000 		.ascii	"SHP\000"
 2243 0327 01       		.byte	0x1
 2244 0328 8F       		.byte	0x8f
 2245 0329 75030000 		.4byte	0x375
 2246 032d 02       		.byte	0x2
 2247 032e 23       		.byte	0x23
 2248 032f 1C       		.uleb128 0x1c
 2249 0330 0A       		.uleb128 0xa
 2250 0331 43040000 		.4byte	.LASF67
 2251 0335 01       		.byte	0x1
 2252 0336 90       		.byte	0x90
 2253 0337 5B030000 		.4byte	0x35b
 2254 033b 02       		.byte	0x2
 2255 033c 23       		.byte	0x23
 2256 033d 24       		.uleb128 0x24
 2257 033e 0A       		.uleb128 0xa
 2258 033f BC050000 		.4byte	.LASF57
 2259 0343 01       		.byte	0x1
 2260 0344 91       		.byte	0x91
ARM GAS  /tmp/ccQGhvTg.s 			page 82


 2261 0345 65030000 		.4byte	0x365
 2262 0349 02       		.byte	0x2
 2263 034a 23       		.byte	0x23
 2264 034b 28       		.uleb128 0x28
 2265 034c 0A       		.uleb128 0xa
 2266 034d 0B020000 		.4byte	.LASF68
 2267 0351 01       		.byte	0x1
 2268 0352 92       		.byte	0x92
 2269 0353 5B030000 		.4byte	0x35b
 2270 0357 02       		.byte	0x2
 2271 0358 23       		.byte	0x23
 2272 0359 30       		.uleb128 0x30
 2273 035a 00       		.byte	0
 2274 035b 0E       		.uleb128 0xe
 2275 035c A5010000 		.4byte	0x1a5
 2276 0360 10       		.uleb128 0x10
 2277 0361 5B030000 		.4byte	0x35b
 2278 0365 0C       		.uleb128 0xc
 2279 0366 A5010000 		.4byte	0x1a5
 2280 036a 75030000 		.4byte	0x375
 2281 036e 0D       		.uleb128 0xd
 2282 036f 5D020000 		.4byte	0x25d
 2283 0373 01       		.byte	0x1
 2284 0374 00       		.byte	0
 2285 0375 0E       		.uleb128 0xe
 2286 0376 65030000 		.4byte	0x365
 2287 037a 07       		.uleb128 0x7
 2288 037b B7060000 		.4byte	.LASF69
 2289 037f 01       		.byte	0x1
 2290 0380 93       		.byte	0x93
 2291 0381 B8020000 		.4byte	0x2b8
 2292 0385 0F       		.uleb128 0xf
 2293 0386 10       		.byte	0x10
 2294 0387 01       		.byte	0x1
 2295 0388 FC       		.byte	0xfc
 2296 0389 C8030000 		.4byte	0x3c8
 2297 038d 0A       		.uleb128 0xa
 2298 038e 550A0000 		.4byte	.LASF70
 2299 0392 01       		.byte	0x1
 2300 0393 FE       		.byte	0xfe
 2301 0394 5B030000 		.4byte	0x35b
 2302 0398 02       		.byte	0x2
 2303 0399 23       		.byte	0x23
 2304 039a 00       		.uleb128 0
 2305 039b 0A       		.uleb128 0xa
 2306 039c D3000000 		.4byte	.LASF71
 2307 03a0 01       		.byte	0x1
 2308 03a1 FF       		.byte	0xff
 2309 03a2 5B030000 		.4byte	0x35b
 2310 03a6 02       		.byte	0x2
 2311 03a7 23       		.byte	0x23
 2312 03a8 04       		.uleb128 0x4
 2313 03a9 11       		.uleb128 0x11
 2314 03aa 56414C00 		.ascii	"VAL\000"
 2315 03ae 01       		.byte	0x1
 2316 03af 0001     		.2byte	0x100
 2317 03b1 5B030000 		.4byte	0x35b
ARM GAS  /tmp/ccQGhvTg.s 			page 83


 2318 03b5 02       		.byte	0x2
 2319 03b6 23       		.byte	0x23
 2320 03b7 08       		.uleb128 0x8
 2321 03b8 12       		.uleb128 0x12
 2322 03b9 19010000 		.4byte	.LASF72
 2323 03bd 01       		.byte	0x1
 2324 03be 0101     		.2byte	0x101
 2325 03c0 60030000 		.4byte	0x360
 2326 03c4 02       		.byte	0x2
 2327 03c5 23       		.byte	0x23
 2328 03c6 0C       		.uleb128 0xc
 2329 03c7 00       		.byte	0
 2330 03c8 06       		.uleb128 0x6
 2331 03c9 55050000 		.4byte	.LASF73
 2332 03cd 01       		.byte	0x1
 2333 03ce 0201     		.2byte	0x102
 2334 03d0 85030000 		.4byte	0x385
 2335 03d4 13       		.uleb128 0x13
 2336 03d5 44       		.byte	0x44
 2337 03d6 03       		.byte	0x3
 2338 03d7 7C01     		.2byte	0x17c
 2339 03d9 9E040000 		.4byte	0x49e
 2340 03dd 11       		.uleb128 0x11
 2341 03de 49535200 		.ascii	"ISR\000"
 2342 03e2 03       		.byte	0x3
 2343 03e3 7E01     		.2byte	0x17e
 2344 03e5 5B030000 		.4byte	0x35b
 2345 03e9 02       		.byte	0x2
 2346 03ea 23       		.byte	0x23
 2347 03eb 00       		.uleb128 0
 2348 03ec 11       		.uleb128 0x11
 2349 03ed 49455200 		.ascii	"IER\000"
 2350 03f1 03       		.byte	0x3
 2351 03f2 7F01     		.2byte	0x17f
 2352 03f4 5B030000 		.4byte	0x35b
 2353 03f8 02       		.byte	0x2
 2354 03f9 23       		.byte	0x23
 2355 03fa 04       		.uleb128 0x4
 2356 03fb 11       		.uleb128 0x11
 2357 03fc 435200   		.ascii	"CR\000"
 2358 03ff 03       		.byte	0x3
 2359 0400 8001     		.2byte	0x180
 2360 0402 5B030000 		.4byte	0x35b
 2361 0406 02       		.byte	0x2
 2362 0407 23       		.byte	0x23
 2363 0408 08       		.uleb128 0x8
 2364 0409 12       		.uleb128 0x12
 2365 040a 1F050000 		.4byte	.LASF74
 2366 040e 03       		.byte	0x3
 2367 040f 8101     		.2byte	0x181
 2368 0411 5B030000 		.4byte	0x35b
 2369 0415 02       		.byte	0x2
 2370 0416 23       		.byte	0x23
 2371 0417 0C       		.uleb128 0xc
 2372 0418 12       		.uleb128 0x12
 2373 0419 25050000 		.4byte	.LASF75
 2374 041d 03       		.byte	0x3
ARM GAS  /tmp/ccQGhvTg.s 			page 84


 2375 041e 8201     		.2byte	0x182
 2376 0420 5B030000 		.4byte	0x35b
 2377 0424 02       		.byte	0x2
 2378 0425 23       		.byte	0x23
 2379 0426 10       		.uleb128 0x10
 2380 0427 12       		.uleb128 0x12
 2381 0428 F6020000 		.4byte	.LASF76
 2382 042c 03       		.byte	0x3
 2383 042d 8301     		.2byte	0x183
 2384 042f 5B030000 		.4byte	0x35b
 2385 0433 02       		.byte	0x2
 2386 0434 23       		.byte	0x23
 2387 0435 14       		.uleb128 0x14
 2388 0436 12       		.uleb128 0x12
 2389 0437 B2050000 		.4byte	.LASF66
 2390 043b 03       		.byte	0x3
 2391 043c 8401     		.2byte	0x184
 2392 043e A5010000 		.4byte	0x1a5
 2393 0442 02       		.byte	0x2
 2394 0443 23       		.byte	0x23
 2395 0444 18       		.uleb128 0x18
 2396 0445 12       		.uleb128 0x12
 2397 0446 BC050000 		.4byte	.LASF57
 2398 044a 03       		.byte	0x3
 2399 044b 8501     		.2byte	0x185
 2400 044d A5010000 		.4byte	0x1a5
 2401 0451 02       		.byte	0x2
 2402 0452 23       		.byte	0x23
 2403 0453 1C       		.uleb128 0x1c
 2404 0454 11       		.uleb128 0x11
 2405 0455 545200   		.ascii	"TR\000"
 2406 0458 03       		.byte	0x3
 2407 0459 8601     		.2byte	0x186
 2408 045b 5B030000 		.4byte	0x35b
 2409 045f 02       		.byte	0x2
 2410 0460 23       		.byte	0x23
 2411 0461 20       		.uleb128 0x20
 2412 0462 12       		.uleb128 0x12
 2413 0463 C6050000 		.4byte	.LASF59
 2414 0467 03       		.byte	0x3
 2415 0468 8701     		.2byte	0x187
 2416 046a A5010000 		.4byte	0x1a5
 2417 046e 02       		.byte	0x2
 2418 046f 23       		.byte	0x23
 2419 0470 24       		.uleb128 0x24
 2420 0471 12       		.uleb128 0x12
 2421 0472 6D020000 		.4byte	.LASF77
 2422 0476 03       		.byte	0x3
 2423 0477 8801     		.2byte	0x188
 2424 0479 5B030000 		.4byte	0x35b
 2425 047d 02       		.byte	0x2
 2426 047e 23       		.byte	0x23
 2427 047f 28       		.uleb128 0x28
 2428 0480 12       		.uleb128 0x12
 2429 0481 D0050000 		.4byte	.LASF60
 2430 0485 03       		.byte	0x3
 2431 0486 8901     		.2byte	0x189
ARM GAS  /tmp/ccQGhvTg.s 			page 85


 2432 0488 9E040000 		.4byte	0x49e
 2433 048c 02       		.byte	0x2
 2434 048d 23       		.byte	0x23
 2435 048e 2C       		.uleb128 0x2c
 2436 048f 11       		.uleb128 0x11
 2437 0490 445200   		.ascii	"DR\000"
 2438 0493 03       		.byte	0x3
 2439 0494 8A01     		.2byte	0x18a
 2440 0496 5B030000 		.4byte	0x35b
 2441 049a 02       		.byte	0x2
 2442 049b 23       		.byte	0x23
 2443 049c 40       		.uleb128 0x40
 2444 049d 00       		.byte	0
 2445 049e 0C       		.uleb128 0xc
 2446 049f A5010000 		.4byte	0x1a5
 2447 04a3 AE040000 		.4byte	0x4ae
 2448 04a7 0D       		.uleb128 0xd
 2449 04a8 5D020000 		.4byte	0x25d
 2450 04ac 04       		.byte	0x4
 2451 04ad 00       		.byte	0
 2452 04ae 06       		.uleb128 0x6
 2453 04af 1F040000 		.4byte	.LASF78
 2454 04b3 03       		.byte	0x3
 2455 04b4 8B01     		.2byte	0x18b
 2456 04b6 D4030000 		.4byte	0x3d4
 2457 04ba 0E       		.uleb128 0xe
 2458 04bb 8F010000 		.4byte	0x18f
 2459 04bf 13       		.uleb128 0x13
 2460 04c0 2C       		.byte	0x2c
 2461 04c1 03       		.byte	0x3
 2462 04c2 6902     		.2byte	0x269
 2463 04c4 9B050000 		.4byte	0x59b
 2464 04c8 12       		.uleb128 0x12
 2465 04c9 67020000 		.4byte	.LASF79
 2466 04cd 03       		.byte	0x3
 2467 04ce 6B02     		.2byte	0x26b
 2468 04d0 5B030000 		.4byte	0x35b
 2469 04d4 02       		.byte	0x2
 2470 04d5 23       		.byte	0x23
 2471 04d6 00       		.uleb128 0
 2472 04d7 12       		.uleb128 0x12
 2473 04d8 47060000 		.4byte	.LASF80
 2474 04dc 03       		.byte	0x3
 2475 04dd 6C02     		.2byte	0x26c
 2476 04df BA040000 		.4byte	0x4ba
 2477 04e3 02       		.byte	0x2
 2478 04e4 23       		.byte	0x23
 2479 04e5 04       		.uleb128 0x4
 2480 04e6 12       		.uleb128 0x12
 2481 04e7 A8050000 		.4byte	.LASF53
 2482 04eb 03       		.byte	0x3
 2483 04ec 6D02     		.2byte	0x26d
 2484 04ee 8F010000 		.4byte	0x18f
 2485 04f2 02       		.byte	0x2
 2486 04f3 23       		.byte	0x23
 2487 04f4 06       		.uleb128 0x6
 2488 04f5 12       		.uleb128 0x12
ARM GAS  /tmp/ccQGhvTg.s 			page 86


 2489 04f6 4D050000 		.4byte	.LASF81
 2490 04fa 03       		.byte	0x3
 2491 04fb 6E02     		.2byte	0x26e
 2492 04fd 5B030000 		.4byte	0x35b
 2493 0501 02       		.byte	0x2
 2494 0502 23       		.byte	0x23
 2495 0503 08       		.uleb128 0x8
 2496 0504 12       		.uleb128 0x12
 2497 0505 1D030000 		.4byte	.LASF82
 2498 0509 03       		.byte	0x3
 2499 050a 6F02     		.2byte	0x26f
 2500 050c 5B030000 		.4byte	0x35b
 2501 0510 02       		.byte	0x2
 2502 0511 23       		.byte	0x23
 2503 0512 0C       		.uleb128 0xc
 2504 0513 11       		.uleb128 0x11
 2505 0514 49445200 		.ascii	"IDR\000"
 2506 0518 03       		.byte	0x3
 2507 0519 7002     		.2byte	0x270
 2508 051b BA040000 		.4byte	0x4ba
 2509 051f 02       		.byte	0x2
 2510 0520 23       		.byte	0x23
 2511 0521 10       		.uleb128 0x10
 2512 0522 12       		.uleb128 0x12
 2513 0523 B2050000 		.4byte	.LASF66
 2514 0527 03       		.byte	0x3
 2515 0528 7102     		.2byte	0x271
 2516 052a 8F010000 		.4byte	0x18f
 2517 052e 02       		.byte	0x2
 2518 052f 23       		.byte	0x23
 2519 0530 12       		.uleb128 0x12
 2520 0531 11       		.uleb128 0x11
 2521 0532 4F445200 		.ascii	"ODR\000"
 2522 0536 03       		.byte	0x3
 2523 0537 7202     		.2byte	0x272
 2524 0539 BA040000 		.4byte	0x4ba
 2525 053d 02       		.byte	0x2
 2526 053e 23       		.byte	0x23
 2527 053f 14       		.uleb128 0x14
 2528 0540 12       		.uleb128 0x12
 2529 0541 BC050000 		.4byte	.LASF57
 2530 0545 03       		.byte	0x3
 2531 0546 7302     		.2byte	0x273
 2532 0548 8F010000 		.4byte	0x18f
 2533 054c 02       		.byte	0x2
 2534 054d 23       		.byte	0x23
 2535 054e 16       		.uleb128 0x16
 2536 054f 12       		.uleb128 0x12
 2537 0550 41000000 		.4byte	.LASF83
 2538 0554 03       		.byte	0x3
 2539 0555 7402     		.2byte	0x274
 2540 0557 5B030000 		.4byte	0x35b
 2541 055b 02       		.byte	0x2
 2542 055c 23       		.byte	0x23
 2543 055d 18       		.uleb128 0x18
 2544 055e 12       		.uleb128 0x12
 2545 055f 500A0000 		.4byte	.LASF84
ARM GAS  /tmp/ccQGhvTg.s 			page 87


 2546 0563 03       		.byte	0x3
 2547 0564 7502     		.2byte	0x275
 2548 0566 5B030000 		.4byte	0x35b
 2549 056a 02       		.byte	0x2
 2550 056b 23       		.byte	0x23
 2551 056c 1C       		.uleb128 0x1c
 2552 056d 11       		.uleb128 0x11
 2553 056e 41465200 		.ascii	"AFR\000"
 2554 0572 03       		.byte	0x3
 2555 0573 7602     		.2byte	0x276
 2556 0575 9B050000 		.4byte	0x59b
 2557 0579 02       		.byte	0x2
 2558 057a 23       		.byte	0x23
 2559 057b 20       		.uleb128 0x20
 2560 057c 11       		.uleb128 0x11
 2561 057d 42525200 		.ascii	"BRR\000"
 2562 0581 03       		.byte	0x3
 2563 0582 7702     		.2byte	0x277
 2564 0584 BA040000 		.4byte	0x4ba
 2565 0588 02       		.byte	0x2
 2566 0589 23       		.byte	0x23
 2567 058a 28       		.uleb128 0x28
 2568 058b 12       		.uleb128 0x12
 2569 058c C6050000 		.4byte	.LASF59
 2570 0590 03       		.byte	0x3
 2571 0591 7802     		.2byte	0x278
 2572 0593 8F010000 		.4byte	0x18f
 2573 0597 02       		.byte	0x2
 2574 0598 23       		.byte	0x23
 2575 0599 2A       		.uleb128 0x2a
 2576 059a 00       		.byte	0
 2577 059b 0E       		.uleb128 0xe
 2578 059c 65030000 		.4byte	0x365
 2579 05a0 06       		.uleb128 0x6
 2580 05a1 C0060000 		.4byte	.LASF85
 2581 05a5 03       		.byte	0x3
 2582 05a6 7902     		.2byte	0x279
 2583 05a8 BF040000 		.4byte	0x4bf
 2584 05ac 05       		.uleb128 0x5
 2585 05ad 08       		.byte	0x8
 2586 05ae 04       		.byte	0x4
 2587 05af 62050000 		.4byte	.LASF86
 2588 05b3 05       		.uleb128 0x5
 2589 05b4 01       		.byte	0x1
 2590 05b5 08       		.byte	0x8
 2591 05b6 29030000 		.4byte	.LASF87
 2592 05ba 0C       		.uleb128 0xc
 2593 05bb 3D010000 		.4byte	0x13d
 2594 05bf CA050000 		.4byte	0x5ca
 2595 05c3 0D       		.uleb128 0xd
 2596 05c4 5D020000 		.4byte	0x25d
 2597 05c8 02       		.byte	0x2
 2598 05c9 00       		.byte	0
 2599 05ca 0C       		.uleb128 0xc
 2600 05cb B3050000 		.4byte	0x5b3
 2601 05cf DA050000 		.4byte	0x5da
 2602 05d3 0D       		.uleb128 0xd
ARM GAS  /tmp/ccQGhvTg.s 			page 88


 2603 05d4 5D020000 		.4byte	0x25d
 2604 05d8 17       		.byte	0x17
 2605 05d9 00       		.byte	0
 2606 05da 14       		.uleb128 0x14
 2607 05db 01       		.byte	0x1
 2608 05dc 24010000 		.4byte	0x124
 2609 05e0 06       		.byte	0x6
 2610 05e1 B9       		.byte	0xb9
 2611 05e2 1D060000 		.4byte	0x61d
 2612 05e6 04       		.uleb128 0x4
 2613 05e7 9D040000 		.4byte	.LASF88
 2614 05eb 00       		.byte	0
 2615 05ec 04       		.uleb128 0x4
 2616 05ed 75060000 		.4byte	.LASF89
 2617 05f1 01       		.byte	0x1
 2618 05f2 04       		.uleb128 0x4
 2619 05f3 FB020000 		.4byte	.LASF90
 2620 05f7 02       		.byte	0x2
 2621 05f8 04       		.uleb128 0x4
 2622 05f9 3D020000 		.4byte	.LASF91
 2623 05fd 03       		.byte	0x3
 2624 05fe 04       		.uleb128 0x4
 2625 05ff EC070000 		.4byte	.LASF92
 2626 0603 04       		.byte	0x4
 2627 0604 04       		.uleb128 0x4
 2628 0605 5D040000 		.4byte	.LASF93
 2629 0609 05       		.byte	0x5
 2630 060a 04       		.uleb128 0x4
 2631 060b A7040000 		.4byte	.LASF94
 2632 060f 06       		.byte	0x6
 2633 0610 04       		.uleb128 0x4
 2634 0611 C8030000 		.4byte	.LASF95
 2635 0615 07       		.byte	0x7
 2636 0616 04       		.uleb128 0x4
 2637 0617 17040000 		.4byte	.LASF96
 2638 061b 08       		.byte	0x8
 2639 061c 00       		.byte	0
 2640 061d 07       		.uleb128 0x7
 2641 061e A8030000 		.4byte	.LASF97
 2642 0622 06       		.byte	0x6
 2643 0623 C6       		.byte	0xc6
 2644 0624 DA050000 		.4byte	0x5da
 2645 0628 14       		.uleb128 0x14
 2646 0629 01       		.byte	0x1
 2647 062a 24010000 		.4byte	0x124
 2648 062e 06       		.byte	0x6
 2649 062f CA       		.byte	0xca
 2650 0630 5F060000 		.4byte	0x65f
 2651 0634 04       		.uleb128 0x4
 2652 0635 5E000000 		.4byte	.LASF98
 2653 0639 00       		.byte	0
 2654 063a 04       		.uleb128 0x4
 2655 063b 6D000000 		.4byte	.LASF99
 2656 063f 01       		.byte	0x1
 2657 0640 04       		.uleb128 0x4
 2658 0641 CD060000 		.4byte	.LASF100
 2659 0645 02       		.byte	0x2
ARM GAS  /tmp/ccQGhvTg.s 			page 89


 2660 0646 04       		.uleb128 0x4
 2661 0647 2B0A0000 		.4byte	.LASF101
 2662 064b 03       		.byte	0x3
 2663 064c 04       		.uleb128 0x4
 2664 064d 5A060000 		.4byte	.LASF102
 2665 0651 04       		.byte	0x4
 2666 0652 04       		.uleb128 0x4
 2667 0653 AF010000 		.4byte	.LASF103
 2668 0657 05       		.byte	0x5
 2669 0658 04       		.uleb128 0x4
 2670 0659 B5000000 		.4byte	.LASF104
 2671 065d 06       		.byte	0x6
 2672 065e 00       		.byte	0
 2673 065f 07       		.uleb128 0x7
 2674 0660 00080000 		.4byte	.LASF105
 2675 0664 06       		.byte	0x6
 2676 0665 D3       		.byte	0xd3
 2677 0666 28060000 		.4byte	0x628
 2678 066a 15       		.uleb128 0x15
 2679 066b 7F040000 		.4byte	.LASF202
 2680 066f 54       		.byte	0x54
 2681 0670 07       		.byte	0x7
 2682 0671 36       		.byte	0x36
 2683 0672 E7060000 		.4byte	0x6e7
 2684 0676 0A       		.uleb128 0xa
 2685 0677 92050000 		.4byte	.LASF106
 2686 067b 07       		.byte	0x7
 2687 067c 38       		.byte	0x38
 2688 067d CA050000 		.4byte	0x5ca
 2689 0681 02       		.byte	0x2
 2690 0682 23       		.byte	0x23
 2691 0683 00       		.uleb128 0
 2692 0684 0A       		.uleb128 0xa
 2693 0685 1F010000 		.4byte	.LASF107
 2694 0689 07       		.byte	0x7
 2695 068a 39       		.byte	0x39
 2696 068b CA050000 		.4byte	0x5ca
 2697 068f 02       		.byte	0x2
 2698 0690 23       		.byte	0x23
 2699 0691 18       		.uleb128 0x18
 2700 0692 0A       		.uleb128 0xa
 2701 0693 FF090000 		.4byte	.LASF108
 2702 0697 07       		.byte	0x7
 2703 0698 3A       		.byte	0x3a
 2704 0699 CA050000 		.4byte	0x5ca
 2705 069d 02       		.byte	0x2
 2706 069e 23       		.byte	0x23
 2707 069f 30       		.uleb128 0x30
 2708 06a0 0A       		.uleb128 0xa
 2709 06a1 42080000 		.4byte	.LASF109
 2710 06a5 07       		.byte	0x7
 2711 06a6 3C       		.byte	0x3c
 2712 06a7 7D010000 		.4byte	0x17d
 2713 06ab 02       		.byte	0x2
 2714 06ac 23       		.byte	0x23
 2715 06ad 48       		.uleb128 0x48
 2716 06ae 0A       		.uleb128 0xa
ARM GAS  /tmp/ccQGhvTg.s 			page 90


 2717 06af 1E070000 		.4byte	.LASF110
 2718 06b3 07       		.byte	0x7
 2719 06b4 3D       		.byte	0x3d
 2720 06b5 7D010000 		.4byte	0x17d
 2721 06b9 02       		.byte	0x2
 2722 06ba 23       		.byte	0x23
 2723 06bb 4C       		.uleb128 0x4c
 2724 06bc 0A       		.uleb128 0xa
 2725 06bd F9050000 		.4byte	.LASF111
 2726 06c1 07       		.byte	0x7
 2727 06c2 3E       		.byte	0x3e
 2728 06c3 3D010000 		.4byte	0x13d
 2729 06c7 02       		.byte	0x2
 2730 06c8 23       		.byte	0x23
 2731 06c9 50       		.uleb128 0x50
 2732 06ca 0A       		.uleb128 0xa
 2733 06cb 90020000 		.4byte	.LASF112
 2734 06cf 07       		.byte	0x7
 2735 06d0 40       		.byte	0x40
 2736 06d1 24010000 		.4byte	0x124
 2737 06d5 02       		.byte	0x2
 2738 06d6 23       		.byte	0x23
 2739 06d7 52       		.uleb128 0x52
 2740 06d8 0A       		.uleb128 0xa
 2741 06d9 1A0A0000 		.4byte	.LASF113
 2742 06dd 07       		.byte	0x7
 2743 06de 41       		.byte	0x41
 2744 06df 24010000 		.4byte	0x124
 2745 06e3 02       		.byte	0x2
 2746 06e4 23       		.byte	0x23
 2747 06e5 53       		.uleb128 0x53
 2748 06e6 00       		.byte	0
 2749 06e7 07       		.uleb128 0x7
 2750 06e8 E5080000 		.4byte	.LASF114
 2751 06ec 07       		.byte	0x7
 2752 06ed 47       		.byte	0x47
 2753 06ee 6A060000 		.4byte	0x66a
 2754 06f2 14       		.uleb128 0x14
 2755 06f3 01       		.byte	0x1
 2756 06f4 24010000 		.4byte	0x124
 2757 06f8 08       		.byte	0x8
 2758 06f9 0A       		.byte	0xa
 2759 06fa 4D070000 		.4byte	0x74d
 2760 06fe 04       		.uleb128 0x4
 2761 06ff 22020000 		.4byte	.LASF115
 2762 0703 00       		.byte	0
 2763 0704 04       		.uleb128 0x4
 2764 0705 09060000 		.4byte	.LASF116
 2765 0709 01       		.byte	0x1
 2766 070a 04       		.uleb128 0x4
 2767 070b D0080000 		.4byte	.LASF117
 2768 070f 02       		.byte	0x2
 2769 0710 04       		.uleb128 0x4
 2770 0711 8C000000 		.4byte	.LASF118
 2771 0715 03       		.byte	0x3
 2772 0716 04       		.uleb128 0x4
 2773 0717 63010000 		.4byte	.LASF119
ARM GAS  /tmp/ccQGhvTg.s 			page 91


 2774 071b 04       		.byte	0x4
 2775 071c 04       		.uleb128 0x4
 2776 071d 8A080000 		.4byte	.LASF120
 2777 0721 05       		.byte	0x5
 2778 0722 04       		.uleb128 0x4
 2779 0723 B7080000 		.4byte	.LASF121
 2780 0727 06       		.byte	0x6
 2781 0728 04       		.uleb128 0x4
 2782 0729 06000000 		.4byte	.LASF122
 2783 072d 07       		.byte	0x7
 2784 072e 04       		.uleb128 0x4
 2785 072f 2D080000 		.4byte	.LASF123
 2786 0733 08       		.byte	0x8
 2787 0734 04       		.uleb128 0x4
 2788 0735 10080000 		.4byte	.LASF124
 2789 0739 09       		.byte	0x9
 2790 073a 04       		.uleb128 0x4
 2791 073b C6020000 		.4byte	.LASF125
 2792 073f 0A       		.byte	0xa
 2793 0740 04       		.uleb128 0x4
 2794 0741 9C000000 		.4byte	.LASF126
 2795 0745 0B       		.byte	0xb
 2796 0746 04       		.uleb128 0x4
 2797 0747 2E030000 		.4byte	.LASF127
 2798 074b 0C       		.byte	0xc
 2799 074c 00       		.byte	0
 2800 074d 16       		.uleb128 0x16
 2801 074e 05050000 		.4byte	.LASF203
 2802 0752 01       		.byte	0x1
 2803 0753 7C03     		.2byte	0x37c
 2804 0755 01       		.byte	0x1
 2805 0756 00000000 		.4byte	.LFB16
 2806 075a EC000000 		.4byte	.LFE16
 2807 075e 00000000 		.4byte	.LLST0
 2808 0762 01       		.byte	0x1
 2809 0763 86070000 		.4byte	0x786
 2810 0767 17       		.uleb128 0x17
 2811 0768 86050000 		.4byte	.LASF128
 2812 076c 01       		.byte	0x1
 2813 076d 7C03     		.2byte	0x37c
 2814 076f 0D010000 		.4byte	0x10d
 2815 0773 02       		.byte	0x2
 2816 0774 91       		.byte	0x91
 2817 0775 6F       		.sleb128 -17
 2818 0776 17       		.uleb128 0x17
 2819 0777 31060000 		.4byte	.LASF129
 2820 077b 01       		.byte	0x1
 2821 077c 7C03     		.2byte	0x37c
 2822 077e A5010000 		.4byte	0x1a5
 2823 0782 02       		.byte	0x2
 2824 0783 91       		.byte	0x91
 2825 0784 68       		.sleb128 -24
 2826 0785 00       		.byte	0
 2827 0786 18       		.uleb128 0x18
 2828 0787 E7020000 		.4byte	.LASF204
 2829 078b 01       		.byte	0x1
 2830 078c B803     		.2byte	0x3b8
ARM GAS  /tmp/ccQGhvTg.s 			page 92


 2831 078e 01       		.byte	0x1
 2832 078f A5010000 		.4byte	0x1a5
 2833 0793 00000000 		.4byte	.LFB18
 2834 0797 48000000 		.4byte	.LFE18
 2835 079b 2C000000 		.4byte	.LLST1
 2836 079f 01       		.byte	0x1
 2837 07a0 B4070000 		.4byte	0x7b4
 2838 07a4 17       		.uleb128 0x17
 2839 07a5 23030000 		.4byte	.LASF130
 2840 07a9 01       		.byte	0x1
 2841 07aa B803     		.2byte	0x3b8
 2842 07ac A5010000 		.4byte	0x1a5
 2843 07b0 02       		.byte	0x2
 2844 07b1 91       		.byte	0x91
 2845 07b2 74       		.sleb128 -12
 2846 07b3 00       		.byte	0
 2847 07b4 19       		.uleb128 0x19
 2848 07b5 01       		.byte	0x1
 2849 07b6 D7090000 		.4byte	.LASF205
 2850 07ba 02       		.byte	0x2
 2851 07bb D8       		.byte	0xd8
 2852 07bc 01       		.byte	0x1
 2853 07bd 76010000 		.4byte	0x176
 2854 07c1 00000000 		.4byte	.LFB20
 2855 07c5 DC060000 		.4byte	.LFE20
 2856 07c9 58000000 		.4byte	.LLST2
 2857 07cd 01       		.byte	0x1
 2858 07ce 4A090000 		.4byte	0x94a
 2859 07d2 1A       		.uleb128 0x1a
 2860 07d3 6900     		.ascii	"i\000"
 2861 07d5 02       		.byte	0x2
 2862 07d6 DA       		.byte	0xda
 2863 07d7 24010000 		.4byte	0x124
 2864 07db 02       		.byte	0x2
 2865 07dc 91       		.byte	0x91
 2866 07dd 6F       		.sleb128 -17
 2867 07de 1B       		.uleb128 0x1b
 2868 07df 696900   		.ascii	"ii\000"
 2869 07e2 02       		.byte	0x2
 2870 07e3 DA       		.byte	0xda
 2871 07e4 24010000 		.4byte	0x124
 2872 07e8 1C       		.uleb128 0x1c
 2873 07e9 430A0000 		.4byte	.LASF131
 2874 07ed 02       		.byte	0x2
 2875 07ee DB       		.byte	0xdb
 2876 07ef 24010000 		.4byte	0x124
 2877 07f3 1C       		.uleb128 0x1c
 2878 07f4 9D030000 		.4byte	.LASF132
 2879 07f8 02       		.byte	0x2
 2880 07f9 DB       		.byte	0xdb
 2881 07fa 24010000 		.4byte	0x124
 2882 07fe 1D       		.uleb128 0x1d
 2883 07ff 24080000 		.4byte	.LASF133
 2884 0803 02       		.byte	0x2
 2885 0804 DB       		.byte	0xdb
 2886 0805 24010000 		.4byte	0x124
 2887 0809 02       		.byte	0x2
ARM GAS  /tmp/ccQGhvTg.s 			page 93


 2888 080a 91       		.byte	0x91
 2889 080b 51       		.sleb128 -47
 2890 080c 1D       		.uleb128 0x1d
 2891 080d FA090000 		.4byte	.LASF134
 2892 0811 02       		.byte	0x2
 2893 0812 DC       		.byte	0xdc
 2894 0813 24010000 		.4byte	0x124
 2895 0817 02       		.byte	0x2
 2896 0818 91       		.byte	0x91
 2897 0819 50       		.sleb128 -48
 2898 081a 1D       		.uleb128 0x1d
 2899 081b 0F090000 		.4byte	.LASF135
 2900 081f 02       		.byte	0x2
 2901 0820 DD       		.byte	0xdd
 2902 0821 3D010000 		.4byte	0x13d
 2903 0825 02       		.byte	0x2
 2904 0826 91       		.byte	0x91
 2905 0827 48       		.sleb128 -56
 2906 0828 1D       		.uleb128 0x1d
 2907 0829 54030000 		.4byte	.LASF136
 2908 082d 02       		.byte	0x2
 2909 082e DD       		.byte	0xdd
 2910 082f 3D010000 		.4byte	0x13d
 2911 0833 02       		.byte	0x2
 2912 0834 91       		.byte	0x91
 2913 0835 46       		.sleb128 -58
 2914 0836 1D       		.uleb128 0x1d
 2915 0837 24010000 		.4byte	.LASF137
 2916 083b 02       		.byte	0x2
 2917 083c DE       		.byte	0xde
 2918 083d 3D010000 		.4byte	0x13d
 2919 0841 02       		.byte	0x2
 2920 0842 91       		.byte	0x91
 2921 0843 44       		.sleb128 -60
 2922 0844 1D       		.uleb128 0x1d
 2923 0845 96040000 		.4byte	.LASF138
 2924 0849 02       		.byte	0x2
 2925 084a DE       		.byte	0xde
 2926 084b 3D010000 		.4byte	0x13d
 2927 084f 02       		.byte	0x2
 2928 0850 91       		.byte	0x91
 2929 0851 42       		.sleb128 -62
 2930 0852 1D       		.uleb128 0x1d
 2931 0853 B1080000 		.4byte	.LASF139
 2932 0857 02       		.byte	0x2
 2933 0858 DF       		.byte	0xdf
 2934 0859 3D010000 		.4byte	0x13d
 2935 085d 02       		.byte	0x2
 2936 085e 91       		.byte	0x91
 2937 085f 6C       		.sleb128 -20
 2938 0860 1D       		.uleb128 0x1d
 2939 0861 B2040000 		.4byte	.LASF140
 2940 0865 02       		.byte	0x2
 2941 0866 DF       		.byte	0xdf
 2942 0867 3D010000 		.4byte	0x13d
 2943 086b 02       		.byte	0x2
 2944 086c 91       		.byte	0x91
ARM GAS  /tmp/ccQGhvTg.s 			page 94


 2945 086d 6A       		.sleb128 -22
 2946 086e 1D       		.uleb128 0x1d
 2947 086f A9010000 		.4byte	.LASF141
 2948 0873 02       		.byte	0x2
 2949 0874 E0       		.byte	0xe0
 2950 0875 4A090000 		.4byte	0x94a
 2951 0879 02       		.byte	0x2
 2952 087a 91       		.byte	0x91
 2953 087b 4C       		.sleb128 -52
 2954 087c 1D       		.uleb128 0x1d
 2955 087d 15000000 		.4byte	.LASF142
 2956 0881 02       		.byte	0x2
 2957 0882 E1       		.byte	0xe1
 2958 0883 7D010000 		.4byte	0x17d
 2959 0887 02       		.byte	0x2
 2960 0888 91       		.byte	0x91
 2961 0889 64       		.sleb128 -28
 2962 088a 1D       		.uleb128 0x1d
 2963 088b 90010000 		.4byte	.LASF143
 2964 088f 02       		.byte	0x2
 2965 0890 E3       		.byte	0xe3
 2966 0891 3D010000 		.4byte	0x13d
 2967 0895 02       		.byte	0x2
 2968 0896 91       		.byte	0x91
 2969 0897 62       		.sleb128 -30
 2970 0898 1D       		.uleb128 0x1d
 2971 0899 EB090000 		.4byte	.LASF144
 2972 089d 02       		.byte	0x2
 2973 089e E4       		.byte	0xe4
 2974 089f 7D010000 		.4byte	0x17d
 2975 08a3 02       		.byte	0x2
 2976 08a4 91       		.byte	0x91
 2977 08a5 5C       		.sleb128 -36
 2978 08a6 1D       		.uleb128 0x1d
 2979 08a7 32020000 		.4byte	.LASF145
 2980 08ab 02       		.byte	0x2
 2981 08ac E4       		.byte	0xe4
 2982 08ad 7D010000 		.4byte	0x17d
 2983 08b1 02       		.byte	0x2
 2984 08b2 91       		.byte	0x91
 2985 08b3 58       		.sleb128 -40
 2986 08b4 1D       		.uleb128 0x1d
 2987 08b5 BD040000 		.4byte	.LASF146
 2988 08b9 02       		.byte	0x2
 2989 08ba E5       		.byte	0xe5
 2990 08bb 24010000 		.4byte	0x124
 2991 08bf 02       		.byte	0x2
 2992 08c0 91       		.byte	0x91
 2993 08c1 57       		.sleb128 -41
 2994 08c2 1D       		.uleb128 0x1d
 2995 08c3 92030000 		.4byte	.LASF147
 2996 08c7 02       		.byte	0x2
 2997 08c8 E6       		.byte	0xe6
 2998 08c9 24010000 		.4byte	0x124
 2999 08cd 02       		.byte	0x2
 3000 08ce 91       		.byte	0x91
 3001 08cf 4B       		.sleb128 -53
ARM GAS  /tmp/ccQGhvTg.s 			page 95


 3002 08d0 1D       		.uleb128 0x1d
 3003 08d1 53000000 		.4byte	.LASF148
 3004 08d5 02       		.byte	0x2
 3005 08d6 E9       		.byte	0xe9
 3006 08d7 1D060000 		.4byte	0x61d
 3007 08db 02       		.byte	0x2
 3008 08dc 91       		.byte	0x91
 3009 08dd 56       		.sleb128 -42
 3010 08de 1D       		.uleb128 0x1d
 3011 08df 5A0A0000 		.4byte	.LASF149
 3012 08e3 02       		.byte	0x2
 3013 08e4 EA       		.byte	0xea
 3014 08e5 24010000 		.4byte	0x124
 3015 08e9 02       		.byte	0x2
 3016 08ea 91       		.byte	0x91
 3017 08eb 55       		.sleb128 -43
 3018 08ec 1D       		.uleb128 0x1d
 3019 08ed D7060000 		.4byte	.LASF150
 3020 08f1 02       		.byte	0x2
 3021 08f2 EB       		.byte	0xeb
 3022 08f3 24010000 		.4byte	0x124
 3023 08f7 02       		.byte	0x2
 3024 08f8 91       		.byte	0x91
 3025 08f9 4A       		.sleb128 -54
 3026 08fa 1D       		.uleb128 0x1d
 3027 08fb C2070000 		.4byte	.LASF151
 3028 08ff 02       		.byte	0x2
 3029 0900 EC       		.byte	0xec
 3030 0901 5F060000 		.4byte	0x65f
 3031 0905 02       		.byte	0x2
 3032 0906 91       		.byte	0x91
 3033 0907 54       		.sleb128 -44
 3034 0908 1D       		.uleb128 0x1d
 3035 0909 3F050000 		.4byte	.LASF152
 3036 090d 02       		.byte	0x2
 3037 090e ED       		.byte	0xed
 3038 090f 24010000 		.4byte	0x124
 3039 0913 02       		.byte	0x2
 3040 0914 91       		.byte	0x91
 3041 0915 53       		.sleb128 -45
 3042 0916 1D       		.uleb128 0x1d
 3043 0917 C8010000 		.4byte	.LASF153
 3044 091b 02       		.byte	0x2
 3045 091c EE       		.byte	0xee
 3046 091d 24010000 		.4byte	0x124
 3047 0921 02       		.byte	0x2
 3048 0922 91       		.byte	0x91
 3049 0923 52       		.sleb128 -46
 3050 0924 1C       		.uleb128 0x1c
 3051 0925 DC010000 		.4byte	.LASF154
 3052 0929 02       		.byte	0x2
 3053 092a F1       		.byte	0xf1
 3054 092b 3D010000 		.4byte	0x13d
 3055 092f 1C       		.uleb128 0x1c
 3056 0930 75080000 		.4byte	.LASF155
 3057 0934 02       		.byte	0x2
 3058 0935 F4       		.byte	0xf4
ARM GAS  /tmp/ccQGhvTg.s 			page 96


 3059 0936 24010000 		.4byte	0x124
 3060 093a 1D       		.uleb128 0x1d
 3061 093b 00000000 		.4byte	.LASF156
 3062 093f 02       		.byte	0x2
 3063 0940 FA       		.byte	0xfa
 3064 0941 51090000 		.4byte	0x951
 3065 0945 03       		.byte	0x3
 3066 0946 91       		.byte	0x91
 3067 0947 987F     		.sleb128 -104
 3068 0949 00       		.byte	0
 3069 094a 05       		.uleb128 0x5
 3070 094b 04       		.byte	0x4
 3071 094c 04       		.byte	0x4
 3072 094d D6010000 		.4byte	.LASF157
 3073 0951 0C       		.uleb128 0xc
 3074 0952 B3050000 		.4byte	0x5b3
 3075 0956 61090000 		.4byte	0x961
 3076 095a 0D       		.uleb128 0xd
 3077 095b 5D020000 		.4byte	0x25d
 3078 095f 27       		.byte	0x27
 3079 0960 00       		.byte	0
 3080 0961 1E       		.uleb128 0x1e
 3081 0962 01       		.byte	0x1
 3082 0963 A0080000 		.4byte	.LASF206
 3083 0967 02       		.byte	0x2
 3084 0968 6204     		.2byte	0x462
 3085 096a 01       		.byte	0x1
 3086 096b 00000000 		.4byte	.LFB21
 3087 096f B0000000 		.4byte	.LFE21
 3088 0973 85000000 		.4byte	.LLST3
 3089 0977 01       		.byte	0x1
 3090 0978 210A0000 		.4byte	0xa21
 3091 097c 17       		.uleb128 0x17
 3092 097d 85000000 		.4byte	.LASF158
 3093 0981 02       		.byte	0x2
 3094 0982 6204     		.2byte	0x462
 3095 0984 210A0000 		.4byte	0xa21
 3096 0988 03       		.byte	0x3
 3097 0989 91       		.byte	0x91
 3098 098a A47F     		.sleb128 -92
 3099 098c 1F       		.uleb128 0x1f
 3100 098d 643100   		.ascii	"d1\000"
 3101 0990 02       		.byte	0x2
 3102 0991 6404     		.2byte	0x464
 3103 0993 9A010000 		.4byte	0x19a
 3104 0997 02       		.byte	0x2
 3105 0998 91       		.byte	0x91
 3106 0999 74       		.sleb128 -12
 3107 099a 1F       		.uleb128 0x1f
 3108 099b 643200   		.ascii	"d2\000"
 3109 099e 02       		.byte	0x2
 3110 099f 6404     		.2byte	0x464
 3111 09a1 9A010000 		.4byte	0x19a
 3112 09a5 02       		.byte	0x2
 3113 09a6 91       		.byte	0x91
 3114 09a7 70       		.sleb128 -16
 3115 09a8 1F       		.uleb128 0x1f
ARM GAS  /tmp/ccQGhvTg.s 			page 97


 3116 09a9 643300   		.ascii	"d3\000"
 3117 09ac 02       		.byte	0x2
 3118 09ad 6404     		.2byte	0x464
 3119 09af 9A010000 		.4byte	0x19a
 3120 09b3 02       		.byte	0x2
 3121 09b4 91       		.byte	0x91
 3122 09b5 6C       		.sleb128 -20
 3123 09b6 1F       		.uleb128 0x1f
 3124 09b7 643400   		.ascii	"d4\000"
 3125 09ba 02       		.byte	0x2
 3126 09bb 6404     		.2byte	0x464
 3127 09bd 9A010000 		.4byte	0x19a
 3128 09c1 02       		.byte	0x2
 3129 09c2 91       		.byte	0x91
 3130 09c3 68       		.sleb128 -24
 3131 09c4 1F       		.uleb128 0x1f
 3132 09c5 643500   		.ascii	"d5\000"
 3133 09c8 02       		.byte	0x2
 3134 09c9 6404     		.2byte	0x464
 3135 09cb 9A010000 		.4byte	0x19a
 3136 09cf 02       		.byte	0x2
 3137 09d0 91       		.byte	0x91
 3138 09d1 64       		.sleb128 -28
 3139 09d2 1F       		.uleb128 0x1f
 3140 09d3 643600   		.ascii	"d6\000"
 3141 09d6 02       		.byte	0x2
 3142 09d7 6404     		.2byte	0x464
 3143 09d9 9A010000 		.4byte	0x19a
 3144 09dd 02       		.byte	0x2
 3145 09de 91       		.byte	0x91
 3146 09df 60       		.sleb128 -32
 3147 09e0 20       		.uleb128 0x20
 3148 09e1 FC040000 		.4byte	.LASF159
 3149 09e5 02       		.byte	0x2
 3150 09e6 6504     		.2byte	0x465
 3151 09e8 51090000 		.4byte	0x951
 3152 09ec 03       		.byte	0x3
 3153 09ed 91       		.byte	0x91
 3154 09ee B87F     		.sleb128 -72
 3155 09f0 20       		.uleb128 0x20
 3156 09f1 79070000 		.4byte	.LASF160
 3157 09f5 02       		.byte	0x2
 3158 09f6 6604     		.2byte	0x466
 3159 09f8 270A0000 		.4byte	0xa27
 3160 09fc 03       		.byte	0x3
 3161 09fd 91       		.byte	0x91
 3162 09fe B47F     		.sleb128 -76
 3163 0a00 20       		.uleb128 0x20
 3164 0a01 42030000 		.4byte	.LASF161
 3165 0a05 02       		.byte	0x2
 3166 0a06 6704     		.2byte	0x467
 3167 0a08 270A0000 		.4byte	0xa27
 3168 0a0c 03       		.byte	0x3
 3169 0a0d 91       		.byte	0x91
 3170 0a0e B07F     		.sleb128 -80
 3171 0a10 20       		.uleb128 0x20
 3172 0a11 35070000 		.4byte	.LASF162
ARM GAS  /tmp/ccQGhvTg.s 			page 98


 3173 0a15 02       		.byte	0x2
 3174 0a16 6804     		.2byte	0x468
 3175 0a18 270A0000 		.4byte	0xa27
 3176 0a1c 03       		.byte	0x3
 3177 0a1d 91       		.byte	0x91
 3178 0a1e AC7F     		.sleb128 -84
 3179 0a20 00       		.byte	0
 3180 0a21 21       		.uleb128 0x21
 3181 0a22 04       		.byte	0x4
 3182 0a23 84010000 		.4byte	0x184
 3183 0a27 0E       		.uleb128 0xe
 3184 0a28 4A090000 		.4byte	0x94a
 3185 0a2c 22       		.uleb128 0x22
 3186 0a2d 01       		.byte	0x1
 3187 0a2e 5A080000 		.4byte	.LASF207
 3188 0a32 02       		.byte	0x2
 3189 0a33 DD04     		.2byte	0x4dd
 3190 0a35 01       		.byte	0x1
 3191 0a36 00000000 		.4byte	.LFB22
 3192 0a3a 64010000 		.4byte	.LFE22
 3193 0a3e B2000000 		.4byte	.LLST4
 3194 0a42 01       		.byte	0x1
 3195 0a43 0C       		.uleb128 0xc
 3196 0a44 24010000 		.4byte	0x124
 3197 0a48 530A0000 		.4byte	0xa53
 3198 0a4c 0D       		.uleb128 0xd
 3199 0a4d 5D020000 		.4byte	0x25d
 3200 0a51 FF       		.byte	0xff
 3201 0a52 00       		.byte	0
 3202 0a53 23       		.uleb128 0x23
 3203 0a54 3D010000 		.4byte	.LASF163
 3204 0a58 02       		.byte	0x2
 3205 0a59 3B       		.byte	0x3b
 3206 0a5a 650A0000 		.4byte	0xa65
 3207 0a5e 01       		.byte	0x1
 3208 0a5f 05       		.byte	0x5
 3209 0a60 03       		.byte	0x3
 3210 0a61 00000000 		.4byte	tx2buff
 3211 0a65 0E       		.uleb128 0xe
 3212 0a66 430A0000 		.4byte	0xa43
 3213 0a6a 23       		.uleb128 0x23
 3214 0a6b FE000000 		.4byte	.LASF164
 3215 0a6f 02       		.byte	0x2
 3216 0a70 3C       		.byte	0x3c
 3217 0a71 7C0A0000 		.4byte	0xa7c
 3218 0a75 01       		.byte	0x1
 3219 0a76 05       		.byte	0x5
 3220 0a77 03       		.byte	0x3
 3221 0a78 00000000 		.4byte	rx2buff
 3222 0a7c 0E       		.uleb128 0xe
 3223 0a7d 430A0000 		.4byte	0xa43
 3224 0a81 23       		.uleb128 0x23
 3225 0a82 E8030000 		.4byte	.LASF165
 3226 0a86 02       		.byte	0x2
 3227 0a87 3E       		.byte	0x3e
 3228 0a88 930A0000 		.4byte	0xa93
 3229 0a8c 01       		.byte	0x1
ARM GAS  /tmp/ccQGhvTg.s 			page 99


 3230 0a8d 05       		.byte	0x5
 3231 0a8e 03       		.byte	0x3
 3232 0a8f 00000000 		.4byte	tx1buff
 3233 0a93 0E       		.uleb128 0xe
 3234 0a94 430A0000 		.4byte	0xa43
 3235 0a98 23       		.uleb128 0x23
 3236 0a99 11010000 		.4byte	.LASF166
 3237 0a9d 02       		.byte	0x2
 3238 0a9e 3F       		.byte	0x3f
 3239 0a9f AA0A0000 		.4byte	0xaaa
 3240 0aa3 01       		.byte	0x1
 3241 0aa4 05       		.byte	0x5
 3242 0aa5 03       		.byte	0x3
 3243 0aa6 00000000 		.4byte	rx1buff
 3244 0aaa 0E       		.uleb128 0xe
 3245 0aab 430A0000 		.4byte	0xa43
 3246 0aaf 23       		.uleb128 0x23
 3247 0ab0 64030000 		.4byte	.LASF167
 3248 0ab4 02       		.byte	0x2
 3249 0ab5 51       		.byte	0x51
 3250 0ab6 C10A0000 		.4byte	0xac1
 3251 0aba 01       		.byte	0x1
 3252 0abb 05       		.byte	0x5
 3253 0abc 03       		.byte	0x3
 3254 0abd 00000000 		.4byte	take_temp_sample
 3255 0ac1 0E       		.uleb128 0xe
 3256 0ac2 3D010000 		.4byte	0x13d
 3257 0ac6 23       		.uleb128 0x23
 3258 0ac7 DD020000 		.4byte	.LASF168
 3259 0acb 02       		.byte	0x2
 3260 0acc 52       		.byte	0x52
 3261 0acd C10A0000 		.4byte	0xac1
 3262 0ad1 01       		.byte	0x1
 3263 0ad2 05       		.byte	0x5
 3264 0ad3 03       		.byte	0x3
 3265 0ad4 00000000 		.4byte	timer_rep
 3266 0ad8 23       		.uleb128 0x23
 3267 0ad9 8A040000 		.4byte	.LASF169
 3268 0add 02       		.byte	0x2
 3269 0ade 56       		.byte	0x56
 3270 0adf C10A0000 		.4byte	0xac1
 3271 0ae3 01       		.byte	0x1
 3272 0ae4 05       		.byte	0x5
 3273 0ae5 03       		.byte	0x3
 3274 0ae6 00000000 		.4byte	timer_relay
 3275 0aea 23       		.uleb128 0x23
 3276 0aeb B1020000 		.4byte	.LASF170
 3277 0aef 02       		.byte	0x2
 3278 0af0 58       		.byte	0x58
 3279 0af1 C10A0000 		.4byte	0xac1
 3280 0af5 01       		.byte	0x1
 3281 0af6 05       		.byte	0x5
 3282 0af7 03       		.byte	0x3
 3283 0af8 00000000 		.4byte	tt_take_photo_sample
 3284 0afc 23       		.uleb128 0x23
 3285 0afd 02040000 		.4byte	.LASF171
 3286 0b01 02       		.byte	0x2
ARM GAS  /tmp/ccQGhvTg.s 			page 100


 3287 0b02 59       		.byte	0x59
 3288 0b03 C10A0000 		.4byte	0xac1
 3289 0b07 01       		.byte	0x1
 3290 0b08 05       		.byte	0x5
 3291 0b09 03       		.byte	0x3
 3292 0b0a 00000000 		.4byte	tt_relay_on_off
 3293 0b0e 23       		.uleb128 0x23
 3294 0b0f 67040000 		.4byte	.LASF172
 3295 0b13 02       		.byte	0x2
 3296 0b14 5D       		.byte	0x5d
 3297 0b15 24010000 		.4byte	0x124
 3298 0b19 01       		.byte	0x1
 3299 0b1a 05       		.byte	0x5
 3300 0b1b 03       		.byte	0x3
 3301 0b1c 00000000 		.4byte	saved_mode
 3302 0b20 24       		.uleb128 0x24
 3303 0b21 733100   		.ascii	"s1\000"
 3304 0b24 02       		.byte	0x2
 3305 0b25 61       		.byte	0x61
 3306 0b26 3D010000 		.4byte	0x13d
 3307 0b2a 01       		.byte	0x1
 3308 0b2b 05       		.byte	0x5
 3309 0b2c 03       		.byte	0x3
 3310 0b2d 00000000 		.4byte	s1
 3311 0b31 24       		.uleb128 0x24
 3312 0b32 733200   		.ascii	"s2\000"
 3313 0b35 02       		.byte	0x2
 3314 0b36 62       		.byte	0x62
 3315 0b37 3D010000 		.4byte	0x13d
 3316 0b3b 01       		.byte	0x1
 3317 0b3c 05       		.byte	0x5
 3318 0b3d 03       		.byte	0x3
 3319 0b3e 00000000 		.4byte	s2
 3320 0b42 24       		.uleb128 0x24
 3321 0b43 73616300 		.ascii	"sac\000"
 3322 0b47 02       		.byte	0x2
 3323 0b48 63       		.byte	0x63
 3324 0b49 3D010000 		.4byte	0x13d
 3325 0b4d 01       		.byte	0x1
 3326 0b4e 05       		.byte	0x5
 3327 0b4f 03       		.byte	0x3
 3328 0b50 00000000 		.4byte	sac
 3329 0b54 23       		.uleb128 0x23
 3330 0b55 52080000 		.4byte	.LASF173
 3331 0b59 02       		.byte	0x2
 3332 0b5a 64       		.byte	0x64
 3333 0b5b 24010000 		.4byte	0x124
 3334 0b5f 01       		.byte	0x1
 3335 0b60 05       		.byte	0x5
 3336 0b61 03       		.byte	0x3
 3337 0b62 00000000 		.4byte	sac_aux
 3338 0b66 23       		.uleb128 0x23
 3339 0b67 9B070000 		.4byte	.LASF174
 3340 0b6b 02       		.byte	0x2
 3341 0b6c 68       		.byte	0x68
 3342 0b6d 780B0000 		.4byte	0xb78
 3343 0b71 01       		.byte	0x1
ARM GAS  /tmp/ccQGhvTg.s 			page 101


 3344 0b72 05       		.byte	0x5
 3345 0b73 03       		.byte	0x3
 3346 0b74 00000000 		.4byte	adc_ch
 3347 0b78 0E       		.uleb128 0xe
 3348 0b79 BA050000 		.4byte	0x5ba
 3349 0b7d 23       		.uleb128 0x23
 3350 0b7e 0A0A0000 		.4byte	.LASF175
 3351 0b82 02       		.byte	0x2
 3352 0b83 69       		.byte	0x69
 3353 0b84 8F0B0000 		.4byte	0xb8f
 3354 0b88 01       		.byte	0x1
 3355 0b89 05       		.byte	0x5
 3356 0b8a 03       		.byte	0x3
 3357 0b8b 00000000 		.4byte	seq_ready
 3358 0b8f 0E       		.uleb128 0xe
 3359 0b90 24010000 		.4byte	0x124
 3360 0b94 23       		.uleb128 0x23
 3361 0b95 CE040000 		.4byte	.LASF176
 3362 0b99 02       		.byte	0x2
 3363 0b9a 6A       		.byte	0x6a
 3364 0b9b 3D010000 		.4byte	0x13d
 3365 0b9f 01       		.byte	0x1
 3366 0ba0 05       		.byte	0x5
 3367 0ba1 03       		.byte	0x3
 3368 0ba2 00000000 		.4byte	zero_current
 3369 0ba6 23       		.uleb128 0x23
 3370 0ba7 49040000 		.4byte	.LASF177
 3371 0bab 02       		.byte	0x2
 3372 0bac 6E       		.byte	0x6e
 3373 0bad 8F0B0000 		.4byte	0xb8f
 3374 0bb1 01       		.byte	0x1
 3375 0bb2 05       		.byte	0x5
 3376 0bb3 03       		.byte	0x3
 3377 0bb4 00000000 		.4byte	usart1_mini_timeout
 3378 0bb8 23       		.uleb128 0x23
 3379 0bb9 74020000 		.4byte	.LASF178
 3380 0bbd 02       		.byte	0x2
 3381 0bbe 6F       		.byte	0x6f
 3382 0bbf 8F0B0000 		.4byte	0xb8f
 3383 0bc3 01       		.byte	0x1
 3384 0bc4 05       		.byte	0x5
 3385 0bc5 03       		.byte	0x3
 3386 0bc6 00000000 		.4byte	usart1_pckt_ready
 3387 0bca 23       		.uleb128 0x23
 3388 0bcb 0C030000 		.4byte	.LASF179
 3389 0bcf 02       		.byte	0x2
 3390 0bd0 70       		.byte	0x70
 3391 0bd1 8F0B0000 		.4byte	0xb8f
 3392 0bd5 01       		.byte	0x1
 3393 0bd6 05       		.byte	0x5
 3394 0bd7 03       		.byte	0x3
 3395 0bd8 00000000 		.4byte	usart1_have_data
 3396 0bdc 23       		.uleb128 0x23
 3397 0bdd 10020000 		.4byte	.LASF180
 3398 0be1 02       		.byte	0x2
 3399 0be2 71       		.byte	0x71
 3400 0be3 24010000 		.4byte	0x124
ARM GAS  /tmp/ccQGhvTg.s 			page 102


 3401 0be7 01       		.byte	0x1
 3402 0be8 05       		.byte	0x5
 3403 0be9 03       		.byte	0x3
 3404 0bea 00000000 		.4byte	usart1_pckt_bytes
 3405 0bee 23       		.uleb128 0x23
 3406 0bef D4030000 		.4byte	.LASF181
 3407 0bf3 02       		.byte	0x2
 3408 0bf4 88       		.byte	0x88
 3409 0bf5 8F0B0000 		.4byte	0xb8f
 3410 0bf9 01       		.byte	0x1
 3411 0bfa 05       		.byte	0x5
 3412 0bfb 03       		.byte	0x3
 3413 0bfc 00000000 		.4byte	usart2_mini_timeout
 3414 0c00 23       		.uleb128 0x23
 3415 0c01 2B010000 		.4byte	.LASF182
 3416 0c05 02       		.byte	0x2
 3417 0c06 89       		.byte	0x89
 3418 0c07 8F0B0000 		.4byte	0xb8f
 3419 0c0b 01       		.byte	0x1
 3420 0c0c 05       		.byte	0x5
 3421 0c0d 03       		.byte	0x3
 3422 0c0e 00000000 		.4byte	usart2_pckt_ready
 3423 0c12 23       		.uleb128 0x23
 3424 0c13 52010000 		.4byte	.LASF183
 3425 0c17 02       		.byte	0x2
 3426 0c18 8A       		.byte	0x8a
 3427 0c19 8F0B0000 		.4byte	0xb8f
 3428 0c1d 01       		.byte	0x1
 3429 0c1e 05       		.byte	0x5
 3430 0c1f 03       		.byte	0x3
 3431 0c20 00000000 		.4byte	usart2_have_data
 3432 0c24 23       		.uleb128 0x23
 3433 0c25 F0030000 		.4byte	.LASF184
 3434 0c29 02       		.byte	0x2
 3435 0c2a 8B       		.byte	0x8b
 3436 0c2b 24010000 		.4byte	0x124
 3437 0c2f 01       		.byte	0x1
 3438 0c30 05       		.byte	0x5
 3439 0c31 03       		.byte	0x3
 3440 0c32 00000000 		.4byte	usart2_pckt_bytes
 3441 0c36 0C       		.uleb128 0xc
 3442 0c37 B3050000 		.4byte	0x5b3
 3443 0c3b 410C0000 		.4byte	0xc41
 3444 0c3f 25       		.uleb128 0x25
 3445 0c40 00       		.byte	0
 3446 0c41 26       		.uleb128 0x26
 3447 0c42 77050000 		.4byte	.LASF185
 3448 0c46 02       		.byte	0x2
 3449 0c47 8D       		.byte	0x8d
 3450 0c48 4E0C0000 		.4byte	0xc4e
 3451 0c4c 01       		.byte	0x1
 3452 0c4d 01       		.byte	0x1
 3453 0c4e 0E       		.uleb128 0xe
 3454 0c4f 360C0000 		.4byte	0xc36
 3455 0c53 23       		.uleb128 0x23
 3456 0c54 26000000 		.4byte	.LASF186
 3457 0c58 02       		.byte	0x2
ARM GAS  /tmp/ccQGhvTg.s 			page 103


 3458 0c59 90       		.byte	0x90
 3459 0c5a E7060000 		.4byte	0x6e7
 3460 0c5e 01       		.byte	0x1
 3461 0c5f 05       		.byte	0x5
 3462 0c60 03       		.byte	0x3
 3463 0c61 00000000 		.4byte	param_struct
 3464 0c65 0C       		.uleb128 0xc
 3465 0c66 B3050000 		.4byte	0x5b3
 3466 0c6a 750C0000 		.4byte	0xc75
 3467 0c6e 0D       		.uleb128 0xd
 3468 0c6f 5D020000 		.4byte	0x25d
 3469 0c73 13       		.byte	0x13
 3470 0c74 00       		.byte	0
 3471 0c75 23       		.uleb128 0x23
 3472 0c76 8B050000 		.4byte	.LASF187
 3473 0c7a 02       		.byte	0x2
 3474 0c7b 9D       		.byte	0x9d
 3475 0c7c 650C0000 		.4byte	0xc65
 3476 0c80 01       		.byte	0x1
 3477 0c81 05       		.byte	0x5
 3478 0c82 03       		.byte	0x3
 3479 0c83 00000000 		.4byte	gsmNUM
 3480 0c87 0C       		.uleb128 0xc
 3481 0c88 B3050000 		.4byte	0x5b3
 3482 0c8c 970C0000 		.4byte	0xc97
 3483 0c90 0D       		.uleb128 0xd
 3484 0c91 5D020000 		.4byte	0x25d
 3485 0c95 B3       		.byte	0xb3
 3486 0c96 00       		.byte	0
 3487 0c97 23       		.uleb128 0x23
 3488 0c98 96060000 		.4byte	.LASF188
 3489 0c9c 02       		.byte	0x2
 3490 0c9d 9E       		.byte	0x9e
 3491 0c9e 870C0000 		.4byte	0xc87
 3492 0ca2 01       		.byte	0x1
 3493 0ca3 05       		.byte	0x5
 3494 0ca4 03       		.byte	0x3
 3495 0ca5 00000000 		.4byte	gsmMSG
 3496 0ca9 23       		.uleb128 0x23
 3497 0caa 4E060000 		.4byte	.LASF189
 3498 0cae 02       		.byte	0x2
 3499 0caf A6       		.byte	0xa6
 3500 0cb0 C10A0000 		.4byte	0xac1
 3501 0cb4 01       		.byte	0x1
 3502 0cb5 05       		.byte	0x5
 3503 0cb6 03       		.byte	0x3
 3504 0cb7 00000000 		.4byte	wait_ms_var
 3505 0cbb 23       		.uleb128 0x23
 3506 0cbc 350A0000 		.4byte	.LASF190
 3507 0cc0 02       		.byte	0x2
 3508 0cc1 A7       		.byte	0xa7
 3509 0cc2 C10A0000 		.4byte	0xac1
 3510 0cc6 01       		.byte	0x1
 3511 0cc7 05       		.byte	0x5
 3512 0cc8 03       		.byte	0x3
 3513 0cc9 00000000 		.4byte	timer_standby
 3514 0ccd 23       		.uleb128 0x23
ARM GAS  /tmp/ccQGhvTg.s 			page 104


 3515 0cce E3000000 		.4byte	.LASF191
 3516 0cd2 02       		.byte	0x2
 3517 0cd3 A8       		.byte	0xa8
 3518 0cd4 C10A0000 		.4byte	0xac1
 3519 0cd8 01       		.byte	0x1
 3520 0cd9 05       		.byte	0x5
 3521 0cda 03       		.byte	0x3
 3522 0cdb 00000000 		.4byte	tcp_kalive_timer
 3523 0cdf 23       		.uleb128 0x23
 3524 0ce0 72040000 		.4byte	.LASF192
 3525 0ce4 02       		.byte	0x2
 3526 0ce5 AA       		.byte	0xaa
 3527 0ce6 8F0B0000 		.4byte	0xb8f
 3528 0cea 01       		.byte	0x1
 3529 0ceb 05       		.byte	0x5
 3530 0cec 03       		.byte	0x3
 3531 0ced 00000000 		.4byte	filter_timer
 3532 0cf1 23       		.uleb128 0x23
 3533 0cf2 12040000 		.4byte	.LASF193
 3534 0cf6 02       		.byte	0x2
 3535 0cf7 B0       		.byte	0xb0
 3536 0cf8 C10A0000 		.4byte	0xac1
 3537 0cfc 01       		.byte	0x1
 3538 0cfd 05       		.byte	0x5
 3539 0cfe 03       		.byte	0x3
 3540 0cff 00000000 		.4byte	secs
 3541 0d03 23       		.uleb128 0x23
 3542 0d04 9D060000 		.4byte	.LASF194
 3543 0d08 02       		.byte	0x2
 3544 0d09 B1       		.byte	0xb1
 3545 0d0a 8F0B0000 		.4byte	0xb8f
 3546 0d0e 01       		.byte	0x1
 3547 0d0f 05       		.byte	0x5
 3548 0d10 03       		.byte	0x3
 3549 0d11 00000000 		.4byte	hours
 3550 0d15 23       		.uleb128 0x23
 3551 0d16 5F020000 		.4byte	.LASF195
 3552 0d1a 02       		.byte	0x2
 3553 0d1b B2       		.byte	0xb2
 3554 0d1c 8F0B0000 		.4byte	0xb8f
 3555 0d20 01       		.byte	0x1
 3556 0d21 05       		.byte	0x5
 3557 0d22 03       		.byte	0x3
 3558 0d23 00000000 		.4byte	minutes
 3559 0d27 0C       		.uleb128 0xc
 3560 0d28 3D010000 		.4byte	0x13d
 3561 0d2c 370D0000 		.4byte	0xd37
 3562 0d30 0D       		.uleb128 0xd
 3563 0d31 5D020000 		.4byte	0x25d
 3564 0d35 09       		.byte	0x9
 3565 0d36 00       		.byte	0
 3566 0d37 23       		.uleb128 0x23
 3567 0d38 90070000 		.4byte	.LASF196
 3568 0d3c 02       		.byte	0x2
 3569 0d3d B7       		.byte	0xb7
 3570 0d3e 270D0000 		.4byte	0xd27
 3571 0d42 01       		.byte	0x1
ARM GAS  /tmp/ccQGhvTg.s 			page 105


 3572 0d43 05       		.byte	0x5
 3573 0d44 03       		.byte	0x3
 3574 0d45 00000000 		.4byte	power_vect
 3575 0d49 0C       		.uleb128 0xc
 3576 0d4a 3D010000 		.4byte	0x13d
 3577 0d4e 590D0000 		.4byte	0xd59
 3578 0d52 0D       		.uleb128 0xd
 3579 0d53 5D020000 		.4byte	0x25d
 3580 0d57 10       		.byte	0x10
 3581 0d58 00       		.byte	0
 3582 0d59 23       		.uleb128 0x23
 3583 0d5a 140A0000 		.4byte	.LASF197
 3584 0d5e 02       		.byte	0x2
 3585 0d5f C5       		.byte	0xc5
 3586 0d60 490D0000 		.4byte	0xd49
 3587 0d64 01       		.byte	0x1
 3588 0d65 05       		.byte	0x5
 3589 0d66 03       		.byte	0x3
 3590 0d67 00000000 		.4byte	vtemp
 3591 0d6b 23       		.uleb128 0x23
 3592 0d6c AF000000 		.4byte	.LASF198
 3593 0d70 02       		.byte	0x2
 3594 0d71 C6       		.byte	0xc6
 3595 0d72 490D0000 		.4byte	0xd49
 3596 0d76 01       		.byte	0x1
 3597 0d77 05       		.byte	0x5
 3598 0d78 03       		.byte	0x3
 3599 0d79 00000000 		.4byte	vpote
 3600 0d7d 00       		.byte	0
 3601              		.section	.debug_abbrev,"",%progbits
 3602              	.Ldebug_abbrev0:
 3603 0000 01       		.uleb128 0x1
 3604 0001 11       		.uleb128 0x11
 3605 0002 01       		.byte	0x1
 3606 0003 25       		.uleb128 0x25
 3607 0004 0E       		.uleb128 0xe
 3608 0005 13       		.uleb128 0x13
 3609 0006 0B       		.uleb128 0xb
 3610 0007 03       		.uleb128 0x3
 3611 0008 0E       		.uleb128 0xe
 3612 0009 1B       		.uleb128 0x1b
 3613 000a 0E       		.uleb128 0xe
 3614 000b 55       		.uleb128 0x55
 3615 000c 06       		.uleb128 0x6
 3616 000d 11       		.uleb128 0x11
 3617 000e 01       		.uleb128 0x1
 3618 000f 52       		.uleb128 0x52
 3619 0010 01       		.uleb128 0x1
 3620 0011 10       		.uleb128 0x10
 3621 0012 06       		.uleb128 0x6
 3622 0013 00       		.byte	0
 3623 0014 00       		.byte	0
 3624 0015 02       		.uleb128 0x2
 3625 0016 04       		.uleb128 0x4
 3626 0017 01       		.byte	0x1
 3627 0018 03       		.uleb128 0x3
 3628 0019 0E       		.uleb128 0xe
ARM GAS  /tmp/ccQGhvTg.s 			page 106


 3629 001a 0B       		.uleb128 0xb
 3630 001b 0B       		.uleb128 0xb
 3631 001c 49       		.uleb128 0x49
 3632 001d 13       		.uleb128 0x13
 3633 001e 3A       		.uleb128 0x3a
 3634 001f 0B       		.uleb128 0xb
 3635 0020 3B       		.uleb128 0x3b
 3636 0021 0B       		.uleb128 0xb
 3637 0022 01       		.uleb128 0x1
 3638 0023 13       		.uleb128 0x13
 3639 0024 00       		.byte	0
 3640 0025 00       		.byte	0
 3641 0026 03       		.uleb128 0x3
 3642 0027 28       		.uleb128 0x28
 3643 0028 00       		.byte	0
 3644 0029 03       		.uleb128 0x3
 3645 002a 0E       		.uleb128 0xe
 3646 002b 1C       		.uleb128 0x1c
 3647 002c 0D       		.uleb128 0xd
 3648 002d 00       		.byte	0
 3649 002e 00       		.byte	0
 3650 002f 04       		.uleb128 0x4
 3651 0030 28       		.uleb128 0x28
 3652 0031 00       		.byte	0
 3653 0032 03       		.uleb128 0x3
 3654 0033 0E       		.uleb128 0xe
 3655 0034 1C       		.uleb128 0x1c
 3656 0035 0B       		.uleb128 0xb
 3657 0036 00       		.byte	0
 3658 0037 00       		.byte	0
 3659 0038 05       		.uleb128 0x5
 3660 0039 24       		.uleb128 0x24
 3661 003a 00       		.byte	0
 3662 003b 0B       		.uleb128 0xb
 3663 003c 0B       		.uleb128 0xb
 3664 003d 3E       		.uleb128 0x3e
 3665 003e 0B       		.uleb128 0xb
 3666 003f 03       		.uleb128 0x3
 3667 0040 0E       		.uleb128 0xe
 3668 0041 00       		.byte	0
 3669 0042 00       		.byte	0
 3670 0043 06       		.uleb128 0x6
 3671 0044 16       		.uleb128 0x16
 3672 0045 00       		.byte	0
 3673 0046 03       		.uleb128 0x3
 3674 0047 0E       		.uleb128 0xe
 3675 0048 3A       		.uleb128 0x3a
 3676 0049 0B       		.uleb128 0xb
 3677 004a 3B       		.uleb128 0x3b
 3678 004b 05       		.uleb128 0x5
 3679 004c 49       		.uleb128 0x49
 3680 004d 13       		.uleb128 0x13
 3681 004e 00       		.byte	0
 3682 004f 00       		.byte	0
 3683 0050 07       		.uleb128 0x7
 3684 0051 16       		.uleb128 0x16
 3685 0052 00       		.byte	0
ARM GAS  /tmp/ccQGhvTg.s 			page 107


 3686 0053 03       		.uleb128 0x3
 3687 0054 0E       		.uleb128 0xe
 3688 0055 3A       		.uleb128 0x3a
 3689 0056 0B       		.uleb128 0xb
 3690 0057 3B       		.uleb128 0x3b
 3691 0058 0B       		.uleb128 0xb
 3692 0059 49       		.uleb128 0x49
 3693 005a 13       		.uleb128 0x13
 3694 005b 00       		.byte	0
 3695 005c 00       		.byte	0
 3696 005d 08       		.uleb128 0x8
 3697 005e 24       		.uleb128 0x24
 3698 005f 00       		.byte	0
 3699 0060 0B       		.uleb128 0xb
 3700 0061 0B       		.uleb128 0xb
 3701 0062 3E       		.uleb128 0x3e
 3702 0063 0B       		.uleb128 0xb
 3703 0064 03       		.uleb128 0x3
 3704 0065 08       		.uleb128 0x8
 3705 0066 00       		.byte	0
 3706 0067 00       		.byte	0
 3707 0068 09       		.uleb128 0x9
 3708 0069 13       		.uleb128 0x13
 3709 006a 01       		.byte	0x1
 3710 006b 0B       		.uleb128 0xb
 3711 006c 05       		.uleb128 0x5
 3712 006d 3A       		.uleb128 0x3a
 3713 006e 0B       		.uleb128 0xb
 3714 006f 3B       		.uleb128 0x3b
 3715 0070 0B       		.uleb128 0xb
 3716 0071 01       		.uleb128 0x1
 3717 0072 13       		.uleb128 0x13
 3718 0073 00       		.byte	0
 3719 0074 00       		.byte	0
 3720 0075 0A       		.uleb128 0xa
 3721 0076 0D       		.uleb128 0xd
 3722 0077 00       		.byte	0
 3723 0078 03       		.uleb128 0x3
 3724 0079 0E       		.uleb128 0xe
 3725 007a 3A       		.uleb128 0x3a
 3726 007b 0B       		.uleb128 0xb
 3727 007c 3B       		.uleb128 0x3b
 3728 007d 0B       		.uleb128 0xb
 3729 007e 49       		.uleb128 0x49
 3730 007f 13       		.uleb128 0x13
 3731 0080 38       		.uleb128 0x38
 3732 0081 0A       		.uleb128 0xa
 3733 0082 00       		.byte	0
 3734 0083 00       		.byte	0
 3735 0084 0B       		.uleb128 0xb
 3736 0085 0D       		.uleb128 0xd
 3737 0086 00       		.byte	0
 3738 0087 03       		.uleb128 0x3
 3739 0088 08       		.uleb128 0x8
 3740 0089 3A       		.uleb128 0x3a
 3741 008a 0B       		.uleb128 0xb
 3742 008b 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccQGhvTg.s 			page 108


 3743 008c 0B       		.uleb128 0xb
 3744 008d 49       		.uleb128 0x49
 3745 008e 13       		.uleb128 0x13
 3746 008f 38       		.uleb128 0x38
 3747 0090 0A       		.uleb128 0xa
 3748 0091 00       		.byte	0
 3749 0092 00       		.byte	0
 3750 0093 0C       		.uleb128 0xc
 3751 0094 01       		.uleb128 0x1
 3752 0095 01       		.byte	0x1
 3753 0096 49       		.uleb128 0x49
 3754 0097 13       		.uleb128 0x13
 3755 0098 01       		.uleb128 0x1
 3756 0099 13       		.uleb128 0x13
 3757 009a 00       		.byte	0
 3758 009b 00       		.byte	0
 3759 009c 0D       		.uleb128 0xd
 3760 009d 21       		.uleb128 0x21
 3761 009e 00       		.byte	0
 3762 009f 49       		.uleb128 0x49
 3763 00a0 13       		.uleb128 0x13
 3764 00a1 2F       		.uleb128 0x2f
 3765 00a2 0B       		.uleb128 0xb
 3766 00a3 00       		.byte	0
 3767 00a4 00       		.byte	0
 3768 00a5 0E       		.uleb128 0xe
 3769 00a6 35       		.uleb128 0x35
 3770 00a7 00       		.byte	0
 3771 00a8 49       		.uleb128 0x49
 3772 00a9 13       		.uleb128 0x13
 3773 00aa 00       		.byte	0
 3774 00ab 00       		.byte	0
 3775 00ac 0F       		.uleb128 0xf
 3776 00ad 13       		.uleb128 0x13
 3777 00ae 01       		.byte	0x1
 3778 00af 0B       		.uleb128 0xb
 3779 00b0 0B       		.uleb128 0xb
 3780 00b1 3A       		.uleb128 0x3a
 3781 00b2 0B       		.uleb128 0xb
 3782 00b3 3B       		.uleb128 0x3b
 3783 00b4 0B       		.uleb128 0xb
 3784 00b5 01       		.uleb128 0x1
 3785 00b6 13       		.uleb128 0x13
 3786 00b7 00       		.byte	0
 3787 00b8 00       		.byte	0
 3788 00b9 10       		.uleb128 0x10
 3789 00ba 26       		.uleb128 0x26
 3790 00bb 00       		.byte	0
 3791 00bc 49       		.uleb128 0x49
 3792 00bd 13       		.uleb128 0x13
 3793 00be 00       		.byte	0
 3794 00bf 00       		.byte	0
 3795 00c0 11       		.uleb128 0x11
 3796 00c1 0D       		.uleb128 0xd
 3797 00c2 00       		.byte	0
 3798 00c3 03       		.uleb128 0x3
 3799 00c4 08       		.uleb128 0x8
ARM GAS  /tmp/ccQGhvTg.s 			page 109


 3800 00c5 3A       		.uleb128 0x3a
 3801 00c6 0B       		.uleb128 0xb
 3802 00c7 3B       		.uleb128 0x3b
 3803 00c8 05       		.uleb128 0x5
 3804 00c9 49       		.uleb128 0x49
 3805 00ca 13       		.uleb128 0x13
 3806 00cb 38       		.uleb128 0x38
 3807 00cc 0A       		.uleb128 0xa
 3808 00cd 00       		.byte	0
 3809 00ce 00       		.byte	0
 3810 00cf 12       		.uleb128 0x12
 3811 00d0 0D       		.uleb128 0xd
 3812 00d1 00       		.byte	0
 3813 00d2 03       		.uleb128 0x3
 3814 00d3 0E       		.uleb128 0xe
 3815 00d4 3A       		.uleb128 0x3a
 3816 00d5 0B       		.uleb128 0xb
 3817 00d6 3B       		.uleb128 0x3b
 3818 00d7 05       		.uleb128 0x5
 3819 00d8 49       		.uleb128 0x49
 3820 00d9 13       		.uleb128 0x13
 3821 00da 38       		.uleb128 0x38
 3822 00db 0A       		.uleb128 0xa
 3823 00dc 00       		.byte	0
 3824 00dd 00       		.byte	0
 3825 00de 13       		.uleb128 0x13
 3826 00df 13       		.uleb128 0x13
 3827 00e0 01       		.byte	0x1
 3828 00e1 0B       		.uleb128 0xb
 3829 00e2 0B       		.uleb128 0xb
 3830 00e3 3A       		.uleb128 0x3a
 3831 00e4 0B       		.uleb128 0xb
 3832 00e5 3B       		.uleb128 0x3b
 3833 00e6 05       		.uleb128 0x5
 3834 00e7 01       		.uleb128 0x1
 3835 00e8 13       		.uleb128 0x13
 3836 00e9 00       		.byte	0
 3837 00ea 00       		.byte	0
 3838 00eb 14       		.uleb128 0x14
 3839 00ec 04       		.uleb128 0x4
 3840 00ed 01       		.byte	0x1
 3841 00ee 0B       		.uleb128 0xb
 3842 00ef 0B       		.uleb128 0xb
 3843 00f0 49       		.uleb128 0x49
 3844 00f1 13       		.uleb128 0x13
 3845 00f2 3A       		.uleb128 0x3a
 3846 00f3 0B       		.uleb128 0xb
 3847 00f4 3B       		.uleb128 0x3b
 3848 00f5 0B       		.uleb128 0xb
 3849 00f6 01       		.uleb128 0x1
 3850 00f7 13       		.uleb128 0x13
 3851 00f8 00       		.byte	0
 3852 00f9 00       		.byte	0
 3853 00fa 15       		.uleb128 0x15
 3854 00fb 13       		.uleb128 0x13
 3855 00fc 01       		.byte	0x1
 3856 00fd 03       		.uleb128 0x3
ARM GAS  /tmp/ccQGhvTg.s 			page 110


 3857 00fe 0E       		.uleb128 0xe
 3858 00ff 0B       		.uleb128 0xb
 3859 0100 0B       		.uleb128 0xb
 3860 0101 3A       		.uleb128 0x3a
 3861 0102 0B       		.uleb128 0xb
 3862 0103 3B       		.uleb128 0x3b
 3863 0104 0B       		.uleb128 0xb
 3864 0105 01       		.uleb128 0x1
 3865 0106 13       		.uleb128 0x13
 3866 0107 00       		.byte	0
 3867 0108 00       		.byte	0
 3868 0109 16       		.uleb128 0x16
 3869 010a 2E       		.uleb128 0x2e
 3870 010b 01       		.byte	0x1
 3871 010c 03       		.uleb128 0x3
 3872 010d 0E       		.uleb128 0xe
 3873 010e 3A       		.uleb128 0x3a
 3874 010f 0B       		.uleb128 0xb
 3875 0110 3B       		.uleb128 0x3b
 3876 0111 05       		.uleb128 0x5
 3877 0112 27       		.uleb128 0x27
 3878 0113 0C       		.uleb128 0xc
 3879 0114 11       		.uleb128 0x11
 3880 0115 01       		.uleb128 0x1
 3881 0116 12       		.uleb128 0x12
 3882 0117 01       		.uleb128 0x1
 3883 0118 40       		.uleb128 0x40
 3884 0119 06       		.uleb128 0x6
 3885 011a 9742     		.uleb128 0x2117
 3886 011c 0C       		.uleb128 0xc
 3887 011d 01       		.uleb128 0x1
 3888 011e 13       		.uleb128 0x13
 3889 011f 00       		.byte	0
 3890 0120 00       		.byte	0
 3891 0121 17       		.uleb128 0x17
 3892 0122 05       		.uleb128 0x5
 3893 0123 00       		.byte	0
 3894 0124 03       		.uleb128 0x3
 3895 0125 0E       		.uleb128 0xe
 3896 0126 3A       		.uleb128 0x3a
 3897 0127 0B       		.uleb128 0xb
 3898 0128 3B       		.uleb128 0x3b
 3899 0129 05       		.uleb128 0x5
 3900 012a 49       		.uleb128 0x49
 3901 012b 13       		.uleb128 0x13
 3902 012c 02       		.uleb128 0x2
 3903 012d 0A       		.uleb128 0xa
 3904 012e 00       		.byte	0
 3905 012f 00       		.byte	0
 3906 0130 18       		.uleb128 0x18
 3907 0131 2E       		.uleb128 0x2e
 3908 0132 01       		.byte	0x1
 3909 0133 03       		.uleb128 0x3
 3910 0134 0E       		.uleb128 0xe
 3911 0135 3A       		.uleb128 0x3a
 3912 0136 0B       		.uleb128 0xb
 3913 0137 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccQGhvTg.s 			page 111


 3914 0138 05       		.uleb128 0x5
 3915 0139 27       		.uleb128 0x27
 3916 013a 0C       		.uleb128 0xc
 3917 013b 49       		.uleb128 0x49
 3918 013c 13       		.uleb128 0x13
 3919 013d 11       		.uleb128 0x11
 3920 013e 01       		.uleb128 0x1
 3921 013f 12       		.uleb128 0x12
 3922 0140 01       		.uleb128 0x1
 3923 0141 40       		.uleb128 0x40
 3924 0142 06       		.uleb128 0x6
 3925 0143 9642     		.uleb128 0x2116
 3926 0145 0C       		.uleb128 0xc
 3927 0146 01       		.uleb128 0x1
 3928 0147 13       		.uleb128 0x13
 3929 0148 00       		.byte	0
 3930 0149 00       		.byte	0
 3931 014a 19       		.uleb128 0x19
 3932 014b 2E       		.uleb128 0x2e
 3933 014c 01       		.byte	0x1
 3934 014d 3F       		.uleb128 0x3f
 3935 014e 0C       		.uleb128 0xc
 3936 014f 03       		.uleb128 0x3
 3937 0150 0E       		.uleb128 0xe
 3938 0151 3A       		.uleb128 0x3a
 3939 0152 0B       		.uleb128 0xb
 3940 0153 3B       		.uleb128 0x3b
 3941 0154 0B       		.uleb128 0xb
 3942 0155 27       		.uleb128 0x27
 3943 0156 0C       		.uleb128 0xc
 3944 0157 49       		.uleb128 0x49
 3945 0158 13       		.uleb128 0x13
 3946 0159 11       		.uleb128 0x11
 3947 015a 01       		.uleb128 0x1
 3948 015b 12       		.uleb128 0x12
 3949 015c 01       		.uleb128 0x1
 3950 015d 40       		.uleb128 0x40
 3951 015e 06       		.uleb128 0x6
 3952 015f 9642     		.uleb128 0x2116
 3953 0161 0C       		.uleb128 0xc
 3954 0162 01       		.uleb128 0x1
 3955 0163 13       		.uleb128 0x13
 3956 0164 00       		.byte	0
 3957 0165 00       		.byte	0
 3958 0166 1A       		.uleb128 0x1a
 3959 0167 34       		.uleb128 0x34
 3960 0168 00       		.byte	0
 3961 0169 03       		.uleb128 0x3
 3962 016a 08       		.uleb128 0x8
 3963 016b 3A       		.uleb128 0x3a
 3964 016c 0B       		.uleb128 0xb
 3965 016d 3B       		.uleb128 0x3b
 3966 016e 0B       		.uleb128 0xb
 3967 016f 49       		.uleb128 0x49
 3968 0170 13       		.uleb128 0x13
 3969 0171 02       		.uleb128 0x2
 3970 0172 0A       		.uleb128 0xa
ARM GAS  /tmp/ccQGhvTg.s 			page 112


 3971 0173 00       		.byte	0
 3972 0174 00       		.byte	0
 3973 0175 1B       		.uleb128 0x1b
 3974 0176 34       		.uleb128 0x34
 3975 0177 00       		.byte	0
 3976 0178 03       		.uleb128 0x3
 3977 0179 08       		.uleb128 0x8
 3978 017a 3A       		.uleb128 0x3a
 3979 017b 0B       		.uleb128 0xb
 3980 017c 3B       		.uleb128 0x3b
 3981 017d 0B       		.uleb128 0xb
 3982 017e 49       		.uleb128 0x49
 3983 017f 13       		.uleb128 0x13
 3984 0180 00       		.byte	0
 3985 0181 00       		.byte	0
 3986 0182 1C       		.uleb128 0x1c
 3987 0183 34       		.uleb128 0x34
 3988 0184 00       		.byte	0
 3989 0185 03       		.uleb128 0x3
 3990 0186 0E       		.uleb128 0xe
 3991 0187 3A       		.uleb128 0x3a
 3992 0188 0B       		.uleb128 0xb
 3993 0189 3B       		.uleb128 0x3b
 3994 018a 0B       		.uleb128 0xb
 3995 018b 49       		.uleb128 0x49
 3996 018c 13       		.uleb128 0x13
 3997 018d 00       		.byte	0
 3998 018e 00       		.byte	0
 3999 018f 1D       		.uleb128 0x1d
 4000 0190 34       		.uleb128 0x34
 4001 0191 00       		.byte	0
 4002 0192 03       		.uleb128 0x3
 4003 0193 0E       		.uleb128 0xe
 4004 0194 3A       		.uleb128 0x3a
 4005 0195 0B       		.uleb128 0xb
 4006 0196 3B       		.uleb128 0x3b
 4007 0197 0B       		.uleb128 0xb
 4008 0198 49       		.uleb128 0x49
 4009 0199 13       		.uleb128 0x13
 4010 019a 02       		.uleb128 0x2
 4011 019b 0A       		.uleb128 0xa
 4012 019c 00       		.byte	0
 4013 019d 00       		.byte	0
 4014 019e 1E       		.uleb128 0x1e
 4015 019f 2E       		.uleb128 0x2e
 4016 01a0 01       		.byte	0x1
 4017 01a1 3F       		.uleb128 0x3f
 4018 01a2 0C       		.uleb128 0xc
 4019 01a3 03       		.uleb128 0x3
 4020 01a4 0E       		.uleb128 0xe
 4021 01a5 3A       		.uleb128 0x3a
 4022 01a6 0B       		.uleb128 0xb
 4023 01a7 3B       		.uleb128 0x3b
 4024 01a8 05       		.uleb128 0x5
 4025 01a9 27       		.uleb128 0x27
 4026 01aa 0C       		.uleb128 0xc
 4027 01ab 11       		.uleb128 0x11
ARM GAS  /tmp/ccQGhvTg.s 			page 113


 4028 01ac 01       		.uleb128 0x1
 4029 01ad 12       		.uleb128 0x12
 4030 01ae 01       		.uleb128 0x1
 4031 01af 40       		.uleb128 0x40
 4032 01b0 06       		.uleb128 0x6
 4033 01b1 9642     		.uleb128 0x2116
 4034 01b3 0C       		.uleb128 0xc
 4035 01b4 01       		.uleb128 0x1
 4036 01b5 13       		.uleb128 0x13
 4037 01b6 00       		.byte	0
 4038 01b7 00       		.byte	0
 4039 01b8 1F       		.uleb128 0x1f
 4040 01b9 34       		.uleb128 0x34
 4041 01ba 00       		.byte	0
 4042 01bb 03       		.uleb128 0x3
 4043 01bc 08       		.uleb128 0x8
 4044 01bd 3A       		.uleb128 0x3a
 4045 01be 0B       		.uleb128 0xb
 4046 01bf 3B       		.uleb128 0x3b
 4047 01c0 05       		.uleb128 0x5
 4048 01c1 49       		.uleb128 0x49
 4049 01c2 13       		.uleb128 0x13
 4050 01c3 02       		.uleb128 0x2
 4051 01c4 0A       		.uleb128 0xa
 4052 01c5 00       		.byte	0
 4053 01c6 00       		.byte	0
 4054 01c7 20       		.uleb128 0x20
 4055 01c8 34       		.uleb128 0x34
 4056 01c9 00       		.byte	0
 4057 01ca 03       		.uleb128 0x3
 4058 01cb 0E       		.uleb128 0xe
 4059 01cc 3A       		.uleb128 0x3a
 4060 01cd 0B       		.uleb128 0xb
 4061 01ce 3B       		.uleb128 0x3b
 4062 01cf 05       		.uleb128 0x5
 4063 01d0 49       		.uleb128 0x49
 4064 01d1 13       		.uleb128 0x13
 4065 01d2 02       		.uleb128 0x2
 4066 01d3 0A       		.uleb128 0xa
 4067 01d4 00       		.byte	0
 4068 01d5 00       		.byte	0
 4069 01d6 21       		.uleb128 0x21
 4070 01d7 0F       		.uleb128 0xf
 4071 01d8 00       		.byte	0
 4072 01d9 0B       		.uleb128 0xb
 4073 01da 0B       		.uleb128 0xb
 4074 01db 49       		.uleb128 0x49
 4075 01dc 13       		.uleb128 0x13
 4076 01dd 00       		.byte	0
 4077 01de 00       		.byte	0
 4078 01df 22       		.uleb128 0x22
 4079 01e0 2E       		.uleb128 0x2e
 4080 01e1 00       		.byte	0
 4081 01e2 3F       		.uleb128 0x3f
 4082 01e3 0C       		.uleb128 0xc
 4083 01e4 03       		.uleb128 0x3
 4084 01e5 0E       		.uleb128 0xe
ARM GAS  /tmp/ccQGhvTg.s 			page 114


 4085 01e6 3A       		.uleb128 0x3a
 4086 01e7 0B       		.uleb128 0xb
 4087 01e8 3B       		.uleb128 0x3b
 4088 01e9 05       		.uleb128 0x5
 4089 01ea 27       		.uleb128 0x27
 4090 01eb 0C       		.uleb128 0xc
 4091 01ec 11       		.uleb128 0x11
 4092 01ed 01       		.uleb128 0x1
 4093 01ee 12       		.uleb128 0x12
 4094 01ef 01       		.uleb128 0x1
 4095 01f0 40       		.uleb128 0x40
 4096 01f1 06       		.uleb128 0x6
 4097 01f2 9642     		.uleb128 0x2116
 4098 01f4 0C       		.uleb128 0xc
 4099 01f5 00       		.byte	0
 4100 01f6 00       		.byte	0
 4101 01f7 23       		.uleb128 0x23
 4102 01f8 34       		.uleb128 0x34
 4103 01f9 00       		.byte	0
 4104 01fa 03       		.uleb128 0x3
 4105 01fb 0E       		.uleb128 0xe
 4106 01fc 3A       		.uleb128 0x3a
 4107 01fd 0B       		.uleb128 0xb
 4108 01fe 3B       		.uleb128 0x3b
 4109 01ff 0B       		.uleb128 0xb
 4110 0200 49       		.uleb128 0x49
 4111 0201 13       		.uleb128 0x13
 4112 0202 3F       		.uleb128 0x3f
 4113 0203 0C       		.uleb128 0xc
 4114 0204 02       		.uleb128 0x2
 4115 0205 0A       		.uleb128 0xa
 4116 0206 00       		.byte	0
 4117 0207 00       		.byte	0
 4118 0208 24       		.uleb128 0x24
 4119 0209 34       		.uleb128 0x34
 4120 020a 00       		.byte	0
 4121 020b 03       		.uleb128 0x3
 4122 020c 08       		.uleb128 0x8
 4123 020d 3A       		.uleb128 0x3a
 4124 020e 0B       		.uleb128 0xb
 4125 020f 3B       		.uleb128 0x3b
 4126 0210 0B       		.uleb128 0xb
 4127 0211 49       		.uleb128 0x49
 4128 0212 13       		.uleb128 0x13
 4129 0213 3F       		.uleb128 0x3f
 4130 0214 0C       		.uleb128 0xc
 4131 0215 02       		.uleb128 0x2
 4132 0216 0A       		.uleb128 0xa
 4133 0217 00       		.byte	0
 4134 0218 00       		.byte	0
 4135 0219 25       		.uleb128 0x25
 4136 021a 21       		.uleb128 0x21
 4137 021b 00       		.byte	0
 4138 021c 00       		.byte	0
 4139 021d 00       		.byte	0
 4140 021e 26       		.uleb128 0x26
 4141 021f 34       		.uleb128 0x34
ARM GAS  /tmp/ccQGhvTg.s 			page 115


 4142 0220 00       		.byte	0
 4143 0221 03       		.uleb128 0x3
 4144 0222 0E       		.uleb128 0xe
 4145 0223 3A       		.uleb128 0x3a
 4146 0224 0B       		.uleb128 0xb
 4147 0225 3B       		.uleb128 0x3b
 4148 0226 0B       		.uleb128 0xb
 4149 0227 49       		.uleb128 0x49
 4150 0228 13       		.uleb128 0x13
 4151 0229 3F       		.uleb128 0x3f
 4152 022a 0C       		.uleb128 0xc
 4153 022b 3C       		.uleb128 0x3c
 4154 022c 0C       		.uleb128 0xc
 4155 022d 00       		.byte	0
 4156 022e 00       		.byte	0
 4157 022f 00       		.byte	0
 4158              		.section	.debug_loc,"",%progbits
 4159              	.Ldebug_loc0:
 4160              	.LLST0:
 4161 0000 00000000 		.4byte	.LFB16
 4162 0004 02000000 		.4byte	.LCFI0
 4163 0008 0200     		.2byte	0x2
 4164 000a 7D       		.byte	0x7d
 4165 000b 00       		.sleb128 0
 4166 000c 02000000 		.4byte	.LCFI0
 4167 0010 04000000 		.4byte	.LCFI1
 4168 0014 0200     		.2byte	0x2
 4169 0016 7D       		.byte	0x7d
 4170 0017 0C       		.sleb128 12
 4171 0018 04000000 		.4byte	.LCFI1
 4172 001c EC000000 		.4byte	.LFE16
 4173 0020 0200     		.2byte	0x2
 4174 0022 7D       		.byte	0x7d
 4175 0023 18       		.sleb128 24
 4176 0024 00000000 		.4byte	0
 4177 0028 00000000 		.4byte	0
 4178              	.LLST1:
 4179 002c 00000000 		.4byte	.LFB18
 4180 0030 02000000 		.4byte	.LCFI2
 4181 0034 0200     		.2byte	0x2
 4182 0036 7D       		.byte	0x7d
 4183 0037 00       		.sleb128 0
 4184 0038 02000000 		.4byte	.LCFI2
 4185 003c 04000000 		.4byte	.LCFI3
 4186 0040 0200     		.2byte	0x2
 4187 0042 7D       		.byte	0x7d
 4188 0043 04       		.sleb128 4
 4189 0044 04000000 		.4byte	.LCFI3
 4190 0048 48000000 		.4byte	.LFE18
 4191 004c 0200     		.2byte	0x2
 4192 004e 7D       		.byte	0x7d
 4193 004f 10       		.sleb128 16
 4194 0050 00000000 		.4byte	0
 4195 0054 00000000 		.4byte	0
 4196              	.LLST2:
 4197 0058 00000000 		.4byte	.LFB20
 4198 005c 02000000 		.4byte	.LCFI4
ARM GAS  /tmp/ccQGhvTg.s 			page 116


 4199 0060 0200     		.2byte	0x2
 4200 0062 7D       		.byte	0x7d
 4201 0063 00       		.sleb128 0
 4202 0064 02000000 		.4byte	.LCFI4
 4203 0068 04000000 		.4byte	.LCFI5
 4204 006c 0200     		.2byte	0x2
 4205 006e 7D       		.byte	0x7d
 4206 006f 0C       		.sleb128 12
 4207 0070 04000000 		.4byte	.LCFI5
 4208 0074 DC060000 		.4byte	.LFE20
 4209 0078 0300     		.2byte	0x3
 4210 007a 7D       		.byte	0x7d
 4211 007b F000     		.sleb128 112
 4212 007d 00000000 		.4byte	0
 4213 0081 00000000 		.4byte	0
 4214              	.LLST3:
 4215 0085 00000000 		.4byte	.LFB21
 4216 0089 02000000 		.4byte	.LCFI6
 4217 008d 0200     		.2byte	0x2
 4218 008f 7D       		.byte	0x7d
 4219 0090 00       		.sleb128 0
 4220 0091 02000000 		.4byte	.LCFI6
 4221 0095 04000000 		.4byte	.LCFI7
 4222 0099 0200     		.2byte	0x2
 4223 009b 7D       		.byte	0x7d
 4224 009c 04       		.sleb128 4
 4225 009d 04000000 		.4byte	.LCFI7
 4226 00a1 B0000000 		.4byte	.LFE21
 4227 00a5 0300     		.2byte	0x3
 4228 00a7 7D       		.byte	0x7d
 4229 00a8 E000     		.sleb128 96
 4230 00aa 00000000 		.4byte	0
 4231 00ae 00000000 		.4byte	0
 4232              	.LLST4:
 4233 00b2 00000000 		.4byte	.LFB22
 4234 00b6 02000000 		.4byte	.LCFI8
 4235 00ba 0200     		.2byte	0x2
 4236 00bc 7D       		.byte	0x7d
 4237 00bd 00       		.sleb128 0
 4238 00be 02000000 		.4byte	.LCFI8
 4239 00c2 64010000 		.4byte	.LFE22
 4240 00c6 0200     		.2byte	0x2
 4241 00c8 7D       		.byte	0x7d
 4242 00c9 08       		.sleb128 8
 4243 00ca 00000000 		.4byte	0
 4244 00ce 00000000 		.4byte	0
 4245              		.section	.debug_aranges,"",%progbits
 4246 0000 3C000000 		.4byte	0x3c
 4247 0004 0200     		.2byte	0x2
 4248 0006 00000000 		.4byte	.Ldebug_info0
 4249 000a 04       		.byte	0x4
 4250 000b 00       		.byte	0
 4251 000c 0000     		.2byte	0
 4252 000e 0000     		.2byte	0
 4253 0010 00000000 		.4byte	.LFB16
 4254 0014 EC000000 		.4byte	.LFE16-.LFB16
 4255 0018 00000000 		.4byte	.LFB18
ARM GAS  /tmp/ccQGhvTg.s 			page 117


 4256 001c 48000000 		.4byte	.LFE18-.LFB18
 4257 0020 00000000 		.4byte	.LFB20
 4258 0024 DC060000 		.4byte	.LFE20-.LFB20
 4259 0028 00000000 		.4byte	.LFB21
 4260 002c B0000000 		.4byte	.LFE21-.LFB21
 4261 0030 00000000 		.4byte	.LFB22
 4262 0034 64010000 		.4byte	.LFE22-.LFB22
 4263 0038 00000000 		.4byte	0
 4264 003c 00000000 		.4byte	0
 4265              		.section	.debug_ranges,"",%progbits
 4266              	.Ldebug_ranges0:
 4267 0000 00000000 		.4byte	.LFB16
 4268 0004 EC000000 		.4byte	.LFE16
 4269 0008 00000000 		.4byte	.LFB18
 4270 000c 48000000 		.4byte	.LFE18
 4271 0010 00000000 		.4byte	.LFB20
 4272 0014 DC060000 		.4byte	.LFE20
 4273 0018 00000000 		.4byte	.LFB21
 4274 001c B0000000 		.4byte	.LFE21
 4275 0020 00000000 		.4byte	.LFB22
 4276 0024 64010000 		.4byte	.LFE22
 4277 0028 00000000 		.4byte	0
 4278 002c 00000000 		.4byte	0
 4279              		.section	.debug_line,"",%progbits
 4280              	.Ldebug_line0:
 4281 0000 D2020000 		.section	.debug_str,"MS",%progbits,1
 4281      02003701 
 4281      00000201 
 4281      FB0E0D00 
 4281      01010101 
 4282              	.LASF156:
 4283 0000 735F6C63 		.ascii	"s_lcd\000"
 4283      6400
 4284              	.LASF122:
 4285 0006 67736D5F 		.ascii	"gsm_state_idle\000"
 4285      73746174 
 4285      655F6964 
 4285      6C6500
 4286              	.LASF142:
 4287 0015 7A65726F 		.ascii	"zero_current_loc\000"
 4287      5F637572 
 4287      72656E74 
 4287      5F6C6F63 
 4287      00
 4288              	.LASF186:
 4289 0026 70617261 		.ascii	"param_struct\000"
 4289      6D5F7374 
 4289      72756374 
 4289      00
 4290              	.LASF12:
 4291 0033 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4291      345F3135 
 4291      5F495251 
 4291      6E00
 4292              	.LASF83:
 4293 0041 42535252 		.ascii	"BSRR\000"
 4293      00
ARM GAS  /tmp/ccQGhvTg.s 			page 118


 4294              	.LASF11:
 4295 0046 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4295      325F335F 
 4295      4952516E 
 4295      00
 4296              	.LASF148:
 4297 0053 6D61696E 		.ascii	"main_state\000"
 4297      5F737461 
 4297      746500
 4298              	.LASF98:
 4299 005e 696E6974 		.ascii	"init_airplane0\000"
 4299      5F616972 
 4299      706C616E 
 4299      653000
 4300              	.LASF99:
 4301 006d 696E6974 		.ascii	"init_airplane1\000"
 4301      5F616972 
 4301      706C616E 
 4301      653100
 4302              	.LASF2:
 4303 007c 5356435F 		.ascii	"SVC_IRQn\000"
 4303      4952516E 
 4303      00
 4304              	.LASF158:
 4305 0085 62756666 		.ascii	"buffer\000"
 4305      657200
 4306              	.LASF118:
 4307 008c 67736D5F 		.ascii	"gsm_state_ready\000"
 4307      73746174 
 4307      655F7265 
 4307      61647900 
 4308              	.LASF126:
 4309 009c 67736D5F 		.ascii	"gsm_state_shutdown\000"
 4309      73746174 
 4309      655F7368 
 4309      7574646F 
 4309      776E00
 4310              	.LASF198:
 4311 00af 76706F74 		.ascii	"vpote\000"
 4311      6500
 4312              	.LASF104:
 4313 00b5 6D656173 		.ascii	"meas_go_airplane\000"
 4313      5F676F5F 
 4313      61697270 
 4313      6C616E65 
 4313      00
 4314              	.LASF47:
 4315 00c6 756E7369 		.ascii	"unsigned int\000"
 4315      676E6564 
 4315      20696E74 
 4315      00
 4316              	.LASF71:
 4317 00d3 4C4F4144 		.ascii	"LOAD\000"
 4317      00
 4318              	.LASF25:
 4319 00d8 54494D31 		.ascii	"TIM16_IRQn\000"
 4319      365F4952 
ARM GAS  /tmp/ccQGhvTg.s 			page 119


 4319      516E00
 4320              	.LASF191:
 4321 00e3 7463705F 		.ascii	"tcp_kalive_timer\000"
 4321      6B616C69 
 4321      76655F74 
 4321      696D6572 
 4321      00
 4322              	.LASF41:
 4323 00f4 5F5F696E 		.ascii	"__int32_t\000"
 4323      7433325F 
 4323      7400
 4324              	.LASF164:
 4325 00fe 72783262 		.ascii	"rx2buff\000"
 4325      75666600 
 4326              	.LASF8:
 4327 0106 464C4153 		.ascii	"FLASH_IRQn\000"
 4327      485F4952 
 4327      516E00
 4328              	.LASF166:
 4329 0111 72783162 		.ascii	"rx1buff\000"
 4329      75666600 
 4330              	.LASF72:
 4331 0119 43414C49 		.ascii	"CALIB\000"
 4331      4200
 4332              	.LASF107:
 4333 011f 696D6569 		.ascii	"imei\000"
 4333      00
 4334              	.LASF137:
 4335 0124 77685F69 		.ascii	"wh_int\000"
 4335      6E7400
 4336              	.LASF182:
 4337 012b 75736172 		.ascii	"usart2_pckt_ready\000"
 4337      74325F70 
 4337      636B745F 
 4337      72656164 
 4337      7900
 4338              	.LASF163:
 4339 013d 74783262 		.ascii	"tx2buff\000"
 4339      75666600 
 4340              	.LASF10:
 4341 0145 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4341      305F315F 
 4341      4952516E 
 4341      00
 4342              	.LASF183:
 4343 0152 75736172 		.ascii	"usart2_have_data\000"
 4343      74325F68 
 4343      6176655F 
 4343      64617461 
 4343      00
 4344              	.LASF119:
 4345 0163 67736D5F 		.ascii	"gsm_state_sending_conf\000"
 4345      73746174 
 4345      655F7365 
 4345      6E64696E 
 4345      675F636F 
 4346              	.LASF27:
ARM GAS  /tmp/ccQGhvTg.s 			page 120


 4347 017a 49324331 		.ascii	"I2C1_IRQn\000"
 4347      5F495251 
 4347      6E00
 4348              	.LASF3:
 4349 0184 50656E64 		.ascii	"PendSV_IRQn\000"
 4349      53565F49 
 4349      52516E00 
 4350              	.LASF143:
 4351 0190 6163756D 		.ascii	"acum_secs_index\000"
 4351      5F736563 
 4351      735F696E 
 4351      64657800 
 4352              	.LASF9:
 4353 01a0 5243435F 		.ascii	"RCC_IRQn\000"
 4353      4952516E 
 4353      00
 4354              	.LASF141:
 4355 01a9 6663616C 		.ascii	"fcalc\000"
 4355      6300
 4356              	.LASF103:
 4357 01af 6D656173 		.ascii	"meas_reporting1\000"
 4357      5F726570 
 4357      6F727469 
 4357      6E673100 
 4358              	.LASF51:
 4359 01bf 75696E74 		.ascii	"uint32_t\000"
 4359      33325F74 
 4359      00
 4360              	.LASF153:
 4361 01c8 6D656173 		.ascii	"meas_end\000"
 4361      5F656E64 
 4361      00
 4362              	.LASF52:
 4363 01d1 49534552 		.ascii	"ISER\000"
 4363      00
 4364              	.LASF157:
 4365 01d6 666C6F61 		.ascii	"float\000"
 4365      7400
 4366              	.LASF154:
 4367 01dc 68797374 		.ascii	"hyst\000"
 4367      00
 4368              	.LASF55:
 4369 01e1 52534552 		.ascii	"RSERVED1\000"
 4369      56454431 
 4369      00
 4370              	.LASF29:
 4371 01ea 53504931 		.ascii	"SPI1_IRQn\000"
 4371      5F495251 
 4371      6E00
 4372              	.LASF46:
 4373 01f4 6C6F6E67 		.ascii	"long long unsigned int\000"
 4373      206C6F6E 
 4373      6720756E 
 4373      7369676E 
 4373      65642069 
 4374              	.LASF68:
 4375 020b 44465352 		.ascii	"DFSR\000"
ARM GAS  /tmp/ccQGhvTg.s 			page 121


 4375      00
 4376              	.LASF180:
 4377 0210 75736172 		.ascii	"usart1_pckt_bytes\000"
 4377      74315F70 
 4377      636B745F 
 4377      62797465 
 4377      7300
 4378              	.LASF115:
 4379 0222 67736D5F 		.ascii	"gsm_state_reset\000"
 4379      73746174 
 4379      655F7265 
 4379      73657400 
 4380              	.LASF145:
 4381 0232 6163756D 		.ascii	"acum_hours\000"
 4381      5F686F75 
 4381      727300
 4382              	.LASF91:
 4383 023d 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE\000"
 4383      434F554E 
 4383      54455253 
 4383      5F414E44 
 4383      5F50484F 
 4384              	.LASF39:
 4385 0254 5F5F7569 		.ascii	"__uint16_t\000"
 4385      6E743136 
 4385      5F7400
 4386              	.LASF195:
 4387 025f 6D696E75 		.ascii	"minutes\000"
 4387      74657300 
 4388              	.LASF79:
 4389 0267 4D4F4445 		.ascii	"MODER\000"
 4389      5200
 4390              	.LASF77:
 4391 026d 43485345 		.ascii	"CHSELR\000"
 4391      4C5200
 4392              	.LASF178:
 4393 0274 75736172 		.ascii	"usart1_pckt_ready\000"
 4393      74315F70 
 4393      636B745F 
 4393      72656164 
 4393      7900
 4394              	.LASF34:
 4395 0286 4952516E 		.ascii	"IRQn_Type\000"
 4395      5F547970 
 4395      6500
 4396              	.LASF112:
 4397 0290 74696D65 		.ascii	"timer_reportar\000"
 4397      725F7265 
 4397      706F7274 
 4397      617200
 4398              	.LASF32:
 4399 029f 55534152 		.ascii	"USART2_IRQn\000"
 4399      54325F49 
 4399      52516E00 
 4400              	.LASF63:
 4401 02ab 43505549 		.ascii	"CPUID\000"
 4401      4400
ARM GAS  /tmp/ccQGhvTg.s 			page 122


 4402              	.LASF170:
 4403 02b1 74745F74 		.ascii	"tt_take_photo_sample\000"
 4403      616B655F 
 4403      70686F74 
 4403      6F5F7361 
 4403      6D706C65 
 4404              	.LASF125:
 4405 02c6 67736D5F 		.ascii	"gsm_state_disconnected\000"
 4405      73746174 
 4405      655F6469 
 4405      73636F6E 
 4405      6E656374 
 4406              	.LASF168:
 4407 02dd 74696D65 		.ascii	"timer_rep\000"
 4407      725F7265 
 4407      7000
 4408              	.LASF204:
 4409 02e7 53797354 		.ascii	"SysTick_Config\000"
 4409      69636B5F 
 4409      436F6E66 
 4409      696700
 4410              	.LASF76:
 4411 02f6 534D5052 		.ascii	"SMPR\000"
 4411      00
 4412              	.LASF90:
 4413 02fb 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4413      5A45524F 
 4413      5F435552 
 4413      52454E54 
 4413      00
 4414              	.LASF179:
 4415 030c 75736172 		.ascii	"usart1_have_data\000"
 4415      74315F68 
 4415      6176655F 
 4415      64617461 
 4415      00
 4416              	.LASF82:
 4417 031d 50555044 		.ascii	"PUPDR\000"
 4417      5200
 4418              	.LASF130:
 4419 0323 7469636B 		.ascii	"ticks\000"
 4419      7300
 4420              	.LASF87:
 4421 0329 63686172 		.ascii	"char\000"
 4421      00
 4422              	.LASF127:
 4423 032e 67736D5F 		.ascii	"gsm_state_stop_wait\000"
 4423      73746174 
 4423      655F7374 
 4423      6F705F77 
 4423      61697400 
 4424              	.LASF161:
 4425 0342 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4425      45524154 
 4425      5552455F 
 4425      56616C75 
 4425      6500
ARM GAS  /tmp/ccQGhvTg.s 			page 123


 4426              	.LASF136:
 4427 0354 706F7765 		.ascii	"power_dec\000"
 4427      725F6465 
 4427      6300
 4428              	.LASF65:
 4429 035e 41495243 		.ascii	"AIRCR\000"
 4429      5200
 4430              	.LASF167:
 4431 0364 74616B65 		.ascii	"take_temp_sample\000"
 4431      5F74656D 
 4431      705F7361 
 4431      6D706C65 
 4431      00
 4432              	.LASF21:
 4433 0375 54494D33 		.ascii	"TIM3_IRQn\000"
 4433      5F495251 
 4433      6E00
 4434              	.LASF14:
 4435 037f 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4435      5F436861 
 4435      6E6E656C 
 4435      315F4952 
 4435      516E00
 4436              	.LASF147:
 4437 0392 73686F77 		.ascii	"show_power\000"
 4437      5F706F77 
 4437      657200
 4438              	.LASF132:
 4439 039d 62797465 		.ascii	"bytes_read\000"
 4439      735F7265 
 4439      616400
 4440              	.LASF97:
 4441 03a8 6D61696E 		.ascii	"main_state_t\000"
 4441      5F737461 
 4441      74655F74 
 4441      00
 4442              	.LASF24:
 4443 03b5 54494D31 		.ascii	"TIM15_IRQn\000"
 4443      355F4952 
 4443      516E00
 4444              	.LASF48:
 4445 03c0 75696E74 		.ascii	"uint8_t\000"
 4445      385F7400 
 4446              	.LASF95:
 4447 03c8 57454C43 		.ascii	"WELCOME_GSM\000"
 4447      4F4D455F 
 4447      47534D00 
 4448              	.LASF181:
 4449 03d4 75736172 		.ascii	"usart2_mini_timeout\000"
 4449      74325F6D 
 4449      696E695F 
 4449      74696D65 
 4449      6F757400 
 4450              	.LASF165:
 4451 03e8 74783162 		.ascii	"tx1buff\000"
 4451      75666600 
 4452              	.LASF184:
ARM GAS  /tmp/ccQGhvTg.s 			page 124


 4453 03f0 75736172 		.ascii	"usart2_pckt_bytes\000"
 4453      74325F70 
 4453      636B745F 
 4453      62797465 
 4453      7300
 4454              	.LASF171:
 4455 0402 74745F72 		.ascii	"tt_relay_on_off\000"
 4455      656C6179 
 4455      5F6F6E5F 
 4455      6F666600 
 4456              	.LASF193:
 4457 0412 73656373 		.ascii	"secs\000"
 4457      00
 4458              	.LASF96:
 4459 0417 4C414D50 		.ascii	"LAMP_ON\000"
 4459      5F4F4E00 
 4460              	.LASF78:
 4461 041f 4144435F 		.ascii	"ADC_TypeDef\000"
 4461      54797065 
 4461      44656600 
 4462              	.LASF45:
 4463 042b 6C6F6E67 		.ascii	"long long int\000"
 4463      206C6F6E 
 4463      6720696E 
 4463      7400
 4464              	.LASF5:
 4465 0439 57574447 		.ascii	"WWDG_IRQn\000"
 4465      5F495251 
 4465      6E00
 4466              	.LASF67:
 4467 0443 53484353 		.ascii	"SHCSR\000"
 4467      5200
 4468              	.LASF177:
 4469 0449 75736172 		.ascii	"usart1_mini_timeout\000"
 4469      74315F6D 
 4469      696E695F 
 4469      74696D65 
 4469      6F757400 
 4470              	.LASF93:
 4471 045d 53544152 		.ascii	"START_GSM\000"
 4471      545F4753 
 4471      4D00
 4472              	.LASF172:
 4473 0467 73617665 		.ascii	"saved_mode\000"
 4473      645F6D6F 
 4473      646500
 4474              	.LASF192:
 4475 0472 66696C74 		.ascii	"filter_timer\000"
 4475      65725F74 
 4475      696D6572 
 4475      00
 4476              	.LASF202:
 4477 047f 70617261 		.ascii	"parameters\000"
 4477      6D657465 
 4477      727300
 4478              	.LASF169:
 4479 048a 74696D65 		.ascii	"timer_relay\000"
ARM GAS  /tmp/ccQGhvTg.s 			page 125


 4479      725F7265 
 4479      6C617900 
 4480              	.LASF138:
 4481 0496 77685F64 		.ascii	"wh_dec\000"
 4481      656300
 4482              	.LASF88:
 4483 049d 4D41494E 		.ascii	"MAIN_INIT\000"
 4483      5F494E49 
 4483      5400
 4484              	.LASF94:
 4485 04a7 434F4E46 		.ascii	"CONFIG_GSM\000"
 4485      49475F47 
 4485      534D00
 4486              	.LASF140:
 4487 04b2 6C617374 		.ascii	"last_power\000"
 4487      5F706F77 
 4487      657200
 4488              	.LASF146:
 4489 04bd 73686F77 		.ascii	"show_power_index\000"
 4489      5F706F77 
 4489      65725F69 
 4489      6E646578 
 4489      00
 4490              	.LASF176:
 4491 04ce 7A65726F 		.ascii	"zero_current\000"
 4491      5F637572 
 4491      72656E74 
 4491      00
 4492              	.LASF13:
 4493 04db 54535F49 		.ascii	"TS_IRQn\000"
 4493      52516E00 
 4494              	.LASF18:
 4495 04e3 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4495      5F42524B 
 4495      5F55505F 
 4495      5452475F 
 4495      434F4D5F 
 4496              	.LASF159:
 4497 04fc 74656D70 		.ascii	"tempbuff\000"
 4497      62756666 
 4497      00
 4498              	.LASF203:
 4499 0505 4E564943 		.ascii	"NVIC_SetPriority\000"
 4499      5F536574 
 4499      5072696F 
 4499      72697479 
 4499      00
 4500              	.LASF6:
 4501 0516 5056445F 		.ascii	"PVD_IRQn\000"
 4501      4952516E 
 4501      00
 4502              	.LASF74:
 4503 051f 43464752 		.ascii	"CFGR1\000"
 4503      3100
 4504              	.LASF75:
 4505 0525 43464752 		.ascii	"CFGR2\000"
 4505      3200
ARM GAS  /tmp/ccQGhvTg.s 			page 126


 4506              	.LASF58:
 4507 052b 49435052 		.ascii	"ICPR\000"
 4507      00
 4508              	.LASF17:
 4509 0530 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4509      5F434F4D 
 4509      505F4952 
 4509      516E00
 4510              	.LASF152:
 4511 053f 636F756E 		.ascii	"counters_mode\000"
 4511      74657273 
 4511      5F6D6F64 
 4511      6500
 4512              	.LASF81:
 4513 054d 4F535045 		.ascii	"OSPEEDR\000"
 4513      45445200 
 4514              	.LASF73:
 4515 0555 53797354 		.ascii	"SysTick_Type\000"
 4515      69636B5F 
 4515      54797065 
 4515      00
 4516              	.LASF86:
 4517 0562 6C6F6E67 		.ascii	"long double\000"
 4517      20646F75 
 4517      626C6500 
 4518              	.LASF49:
 4519 056e 75696E74 		.ascii	"uint16_t\000"
 4519      31365F74 
 4519      00
 4520              	.LASF185:
 4521 0577 62756666 		.ascii	"buffUARTGSMrx2\000"
 4521      55415254 
 4521      47534D72 
 4521      783200
 4522              	.LASF128:
 4523 0586 4952516E 		.ascii	"IRQn\000"
 4523      00
 4524              	.LASF187:
 4525 058b 67736D4E 		.ascii	"gsmNUM\000"
 4525      554D00
 4526              	.LASF106:
 4527 0592 6E756D5F 		.ascii	"num_reportar\000"
 4527      7265706F 
 4527      72746172 
 4527      00
 4528              	.LASF7:
 4529 059f 5254435F 		.ascii	"RTC_IRQn\000"
 4529      4952516E 
 4529      00
 4530              	.LASF53:
 4531 05a8 52455345 		.ascii	"RESERVED0\000"
 4531      52564544 
 4531      3000
 4532              	.LASF66:
 4533 05b2 52455345 		.ascii	"RESERVED1\000"
 4533      52564544 
 4533      3100
ARM GAS  /tmp/ccQGhvTg.s 			page 127


 4534              	.LASF57:
 4535 05bc 52455345 		.ascii	"RESERVED2\000"
 4535      52564544 
 4535      3200
 4536              	.LASF59:
 4537 05c6 52455345 		.ascii	"RESERVED3\000"
 4537      52564544 
 4537      3300
 4538              	.LASF60:
 4539 05d0 52455345 		.ascii	"RESERVED4\000"
 4539      52564544 
 4539      3400
 4540              	.LASF38:
 4541 05da 73686F72 		.ascii	"short int\000"
 4541      7420696E 
 4541      7400
 4542              	.LASF42:
 4543 05e4 6C6F6E67 		.ascii	"long int\000"
 4543      20696E74 
 4543      00
 4544              	.LASF31:
 4545 05ed 55534152 		.ascii	"USART1_IRQn\000"
 4545      54315F49 
 4545      52516E00 
 4546              	.LASF111:
 4547 05f9 706F745F 		.ascii	"pot_instantanea\000"
 4547      696E7374 
 4547      616E7461 
 4547      6E656100 
 4548              	.LASF116:
 4549 0609 67736D5F 		.ascii	"gsm_state_verify_at\000"
 4549      73746174 
 4549      655F7665 
 4549      72696679 
 4549      5F617400 
 4550              	.LASF0:
 4551 061d 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4551      61736B61 
 4551      626C6549 
 4551      6E745F49 
 4551      52516E00 
 4552              	.LASF129:
 4553 0631 7072696F 		.ascii	"priority\000"
 4553      72697479 
 4553      00
 4554              	.LASF19:
 4555 063a 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4555      5F43435F 
 4555      4952516E 
 4555      00
 4556              	.LASF80:
 4557 0647 4F545950 		.ascii	"OTYPER\000"
 4557      455200
 4558              	.LASF189:
 4559 064e 77616974 		.ascii	"wait_ms_var\000"
 4559      5F6D735F 
 4559      76617200 
ARM GAS  /tmp/ccQGhvTg.s 			page 128


 4560              	.LASF102:
 4561 065a 6D656173 		.ascii	"meas_reporting0\000"
 4561      5F726570 
 4561      6F727469 
 4561      6E673000 
 4562              	.LASF26:
 4563 066a 54494D31 		.ascii	"TIM17_IRQn\000"
 4563      375F4952 
 4563      516E00
 4564              	.LASF89:
 4565 0675 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4565      48524F5F 
 4565      41444300 
 4566              	.LASF16:
 4567 0681 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4567      5F436861 
 4567      6E6E656C 
 4567      345F355F 
 4567      4952516E 
 4568              	.LASF188:
 4569 0696 67736D4D 		.ascii	"gsmMSG\000"
 4569      534700
 4570              	.LASF194:
 4571 069d 686F7572 		.ascii	"hours\000"
 4571      7300
 4572              	.LASF35:
 4573 06a3 5F5F7569 		.ascii	"__uint8_t\000"
 4573      6E74385F 
 4573      7400
 4574              	.LASF62:
 4575 06ad 4E564943 		.ascii	"NVIC_Type\000"
 4575      5F547970 
 4575      6500
 4576              	.LASF69:
 4577 06b7 5343425F 		.ascii	"SCB_Type\000"
 4577      54797065 
 4577      00
 4578              	.LASF85:
 4579 06c0 4750494F 		.ascii	"GPIO_TypeDef\000"
 4579      5F547970 
 4579      65446566 
 4579      00
 4580              	.LASF100:
 4581 06cd 6D656173 		.ascii	"meas_init\000"
 4581      5F696E69 
 4581      7400
 4582              	.LASF150:
 4583 06d7 73656E64 		.ascii	"sended\000"
 4583      656400
 4584              	.LASF4:
 4585 06de 53797354 		.ascii	"SysTick_IRQn\000"
 4585      69636B5F 
 4585      4952516E 
 4585      00
 4586              	.LASF33:
 4587 06eb 4345435F 		.ascii	"CEC_IRQn\000"
 4587      4952516E 
ARM GAS  /tmp/ccQGhvTg.s 			page 129


 4587      00
 4588              	.LASF61:
 4589 06f4 73697A65 		.ascii	"sizetype\000"
 4589      74797065 
 4589      00
 4590              	.LASF64:
 4591 06fd 49435352 		.ascii	"ICSR\000"
 4591      00
 4592              	.LASF28:
 4593 0702 49324332 		.ascii	"I2C2_IRQn\000"
 4593      5F495251 
 4593      6E00
 4594              	.LASF44:
 4595 070c 6C6F6E67 		.ascii	"long unsigned int\000"
 4595      20756E73 
 4595      69676E65 
 4595      6420696E 
 4595      7400
 4596              	.LASF110:
 4597 071e 6163756D 		.ascii	"acumm_diario\000"
 4597      6D5F6469 
 4597      6172696F 
 4597      00
 4598              	.LASF20:
 4599 072b 54494D32 		.ascii	"TIM2_IRQn\000"
 4599      5F495251 
 4599      6E00
 4600              	.LASF162:
 4601 0735 50524553 		.ascii	"PRESSURE_Value\000"
 4601      53555245 
 4601      5F56616C 
 4601      756500
 4602              	.LASF201:
 4603 0744 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4603      652F6D65 
 4603      642F446F 
 4603      63756D65 
 4603      6E74732F 
 4604 0777 6100     		.ascii	"a\000"
 4605              	.LASF160:
 4606 0779 48554D49 		.ascii	"HUMIDITY_Value\000"
 4606      44495459 
 4606      5F56616C 
 4606      756500
 4607              	.LASF50:
 4608 0788 696E7433 		.ascii	"int32_t\000"
 4608      325F7400 
 4609              	.LASF196:
 4610 0790 706F7765 		.ascii	"power_vect\000"
 4610      725F7665 
 4610      637400
 4611              	.LASF174:
 4612 079b 6164635F 		.ascii	"adc_ch\000"
 4612      636800
 4613              	.LASF23:
 4614 07a2 54494D31 		.ascii	"TIM14_IRQn\000"
 4614      345F4952 
ARM GAS  /tmp/ccQGhvTg.s 			page 130


 4614      516E00
 4615              	.LASF15:
 4616 07ad 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4616      5F436861 
 4616      6E6E656C 
 4616      325F335F 
 4616      4952516E 
 4617              	.LASF151:
 4618 07c2 6C616D70 		.ascii	"lamp_on_state\000"
 4618      5F6F6E5F 
 4618      73746174 
 4618      6500
 4619              	.LASF22:
 4620 07d0 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4620      5F444143 
 4620      5F495251 
 4620      6E00
 4621              	.LASF37:
 4622 07de 756E7369 		.ascii	"unsigned char\000"
 4622      676E6564 
 4622      20636861 
 4622      7200
 4623              	.LASF92:
 4624 07ec 4C414D50 		.ascii	"LAMP_OFF\000"
 4624      5F4F4646 
 4624      00
 4625              	.LASF43:
 4626 07f5 5F5F7569 		.ascii	"__uint32_t\000"
 4626      6E743332 
 4626      5F7400
 4627              	.LASF105:
 4628 0800 6C616D70 		.ascii	"lamp_on_state_t\000"
 4628      5F6F6E5F 
 4628      73746174 
 4628      655F7400 
 4629              	.LASF124:
 4630 0810 67736D5F 		.ascii	"gsm_state_connected\000"
 4630      73746174 
 4630      655F636F 
 4630      6E6E6563 
 4630      74656400 
 4631              	.LASF133:
 4632 0824 6E656564 		.ascii	"need_ack\000"
 4632      5F61636B 
 4632      00
 4633              	.LASF123:
 4634 082d 67736D5F 		.ascii	"gsm_state_connecting\000"
 4634      73746174 
 4634      655F636F 
 4634      6E6E6563 
 4634      74696E67 
 4635              	.LASF109:
 4636 0842 6163756D 		.ascii	"acumm_historico\000"
 4636      6D5F6869 
 4636      73746F72 
 4636      69636F00 
 4637              	.LASF173:
ARM GAS  /tmp/ccQGhvTg.s 			page 131


 4638 0852 7361635F 		.ascii	"sac_aux\000"
 4638      61757800 
 4639              	.LASF207:
 4640 085a 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4640      6E674465 
 4640      6C61795F 
 4640      44656372 
 4640      656D656E 
 4641              	.LASF54:
 4642 0870 49434552 		.ascii	"ICER\000"
 4642      00
 4643              	.LASF155:
 4644 0875 6F6E655F 		.ascii	"one_to_ten\000"
 4644      746F5F74 
 4644      656E00
 4645              	.LASF30:
 4646 0880 53504932 		.ascii	"SPI2_IRQn\000"
 4646      5F495251 
 4646      6E00
 4647              	.LASF120:
 4648 088a 67736D5F 		.ascii	"gsm_state_sending_sms\000"
 4648      73746174 
 4648      655F7365 
 4648      6E64696E 
 4648      675F736D 
 4649              	.LASF206:
 4650 08a0 70726570 		.ascii	"prepare_json_pkt\000"
 4650      6172655F 
 4650      6A736F6E 
 4650      5F706B74 
 4650      00
 4651              	.LASF139:
 4652 08b1 706F7765 		.ascii	"power\000"
 4652      7200
 4653              	.LASF121:
 4654 08b7 67736D5F 		.ascii	"gsm_state_command_answer\000"
 4654      73746174 
 4654      655F636F 
 4654      6D6D616E 
 4654      645F616E 
 4655              	.LASF117:
 4656 08d0 67736D5F 		.ascii	"gsm_state_ready_wait\000"
 4656      73746174 
 4656      655F7265 
 4656      6164795F 
 4656      77616974 
 4657              	.LASF114:
 4658 08e5 70617261 		.ascii	"parameters_typedef\000"
 4658      6D657465 
 4658      72735F74 
 4658      79706564 
 4658      656600
 4659              	.LASF36:
 4660 08f8 7369676E 		.ascii	"signed char\000"
 4660      65642063 
 4660      68617200 
 4661              	.LASF200:
ARM GAS  /tmp/ccQGhvTg.s 			page 132


 4662 0904 7372632F 		.ascii	"src/main.c\000"
 4662      6D61696E 
 4662      2E6300
 4663              	.LASF135:
 4664 090f 706F7765 		.ascii	"power_int\000"
 4664      725F696E 
 4664      7400
 4665              	.LASF40:
 4666 0919 73686F72 		.ascii	"short unsigned int\000"
 4666      7420756E 
 4666      7369676E 
 4666      65642069 
 4666      6E7400
 4667              	.LASF199:
 4668 092c 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4668      43313120 
 4668      352E322E 
 4668      31203230 
 4668      31353132 
 4669 095f 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4669      20726576 
 4669      6973696F 
 4669      6E203233 
 4669      31383438 
 4670 0992 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4670      662D3220 
 4670      2D4F3020 
 4670      2D666F6D 
 4670      69742D66 
 4671 09c5 66756E63 		.ascii	"function-sections\000"
 4671      74696F6E 
 4671      2D736563 
 4671      74696F6E 
 4671      7300
 4672              	.LASF205:
 4673 09d7 6D61696E 		.ascii	"main\000"
 4673      00
 4674              	.LASF1:
 4675 09dc 48617264 		.ascii	"HardFault_IRQn\000"
 4675      4661756C 
 4675      745F4952 
 4675      516E00
 4676              	.LASF144:
 4677 09eb 6163756D 		.ascii	"acum_secs\000"
 4677      5F736563 
 4677      7300
 4678              	.LASF56:
 4679 09f5 49535052 		.ascii	"ISPR\000"
 4679      00
 4680              	.LASF134:
 4681 09fa 72657370 		.ascii	"resp\000"
 4681      00
 4682              	.LASF108:
 4683 09ff 6E756D5F 		.ascii	"num_propio\000"
 4683      70726F70 
 4683      696F00
 4684              	.LASF175:
ARM GAS  /tmp/ccQGhvTg.s 			page 133


 4685 0a0a 7365715F 		.ascii	"seq_ready\000"
 4685      72656164 
 4685      7900
 4686              	.LASF197:
 4687 0a14 7674656D 		.ascii	"vtemp\000"
 4687      7000
 4688              	.LASF113:
 4689 0a1a 73656E64 		.ascii	"send_energy_flag\000"
 4689      5F656E65 
 4689      7267795F 
 4689      666C6167 
 4689      00
 4690              	.LASF101:
 4691 0a2b 6D656173 		.ascii	"meas_meas\000"
 4691      5F6D6561 
 4691      7300
 4692              	.LASF190:
 4693 0a35 74696D65 		.ascii	"timer_standby\000"
 4693      725F7374 
 4693      616E6462 
 4693      7900
 4694              	.LASF131:
 4695 0a43 62797465 		.ascii	"bytes_remain\000"
 4695      735F7265 
 4695      6D61696E 
 4695      00
 4696              	.LASF84:
 4697 0a50 4C434B52 		.ascii	"LCKR\000"
 4697      00
 4698              	.LASF70:
 4699 0a55 4354524C 		.ascii	"CTRL\000"
 4699      00
 4700              	.LASF149:
 4701 0a5a 7265706F 		.ascii	"reportar_SMS\000"
 4701      72746172 
 4701      5F534D53 
 4701      00
 4702              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccQGhvTg.s 			page 134


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccQGhvTg.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccQGhvTg.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccQGhvTg.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccQGhvTg.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccQGhvTg.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccQGhvTg.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/ccQGhvTg.s:277    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccQGhvTg.s:274    .bss.take_temp_sample:00000000 $d
     /tmp/ccQGhvTg.s:284    .bss.timer_rep:00000000 timer_rep
     /tmp/ccQGhvTg.s:281    .bss.timer_rep:00000000 $d
     /tmp/ccQGhvTg.s:291    .bss.timer_relay:00000000 timer_relay
     /tmp/ccQGhvTg.s:288    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000006 adc_ch
     /tmp/ccQGhvTg.s:305    .bss.seq_ready:00000000 seq_ready
     /tmp/ccQGhvTg.s:306    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:00000054 param_struct
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/ccQGhvTg.s:324    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccQGhvTg.s:321    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/ccQGhvTg.s:334    .bss.secs:00000000 secs
     /tmp/ccQGhvTg.s:331    .bss.secs:00000000 $d
     /tmp/ccQGhvTg.s:340    .bss.hours:00000000 hours
     /tmp/ccQGhvTg.s:341    .bss.hours:00000000 $d
     /tmp/ccQGhvTg.s:346    .bss.minutes:00000000 minutes
     /tmp/ccQGhvTg.s:347    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccQGhvTg.s:352    .rodata:00000000 $d
     /tmp/ccQGhvTg.s:404    .text.main:00000000 $t
     /tmp/ccQGhvTg.s:409    .text.main:00000000 main
ARM GAS  /tmp/ccQGhvTg.s 			page 135


     /tmp/ccQGhvTg.s:723    .rodata.main:00000000 $d
     /tmp/ccQGhvTg.s:1069   .text.main:000003d4 $d
     /tmp/ccQGhvTg.s:1094   .text.main:00000430 $t
     /tmp/ccQGhvTg.s:1469   .text.main:000006b0 $d
     /tmp/ccQGhvTg.s:1500   .text.prepare_json_pkt:00000000 $t
     /tmp/ccQGhvTg.s:1505   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccQGhvTg.s:1597   .text.prepare_json_pkt:0000009c $d
     /tmp/ccQGhvTg.s:1606   .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccQGhvTg.s:1611   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccQGhvTg.s:1813   .text.TimingDelay_Decrement:00000130 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2uiz
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_uidiv
__aeabi_ui2d
GPIO_Config
strncpy
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
FuncsGSMStateAsk
FuncsGSMCommandAnswer
strncmp
RelayOn
RelayIsOn
sprintf
FuncsGSMSendSMS
GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
UpdateVGrid
UpdateIGrid
UpdateRelay
FuncsGSM
memcpy
strcat
strlen
GSMTimeoutCounters
