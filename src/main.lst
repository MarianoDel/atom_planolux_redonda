ARM GAS  /tmp/ccI8cyDB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccI8cyDB.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccI8cyDB.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccI8cyDB.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccI8cyDB.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccI8cyDB.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccI8cyDB.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccI8cyDB.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccI8cyDB.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccI8cyDB.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccI8cyDB.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccI8cyDB.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccI8cyDB.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccI8cyDB.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccI8cyDB.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccI8cyDB.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccI8cyDB.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccI8cyDB.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7142,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7143, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7144, D.7143
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7144, D.7144
  92 0026 083B     		subs	r3, r3, #8	@ D.7144,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7144, D.7144,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7142,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7143, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7144, D.7143
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7144, D.7144
 101 0038 083B     		subs	r3, r3, #8	@ D.7144,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7144, D.7144,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7142, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7144, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7143, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7144, D.7143
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7144, D.7144
 114 0052 D200     		lsls	r2, r2, #3	@ D.7144, D.7144,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7145, D.7145, D.7144
 117 0058 0200     		movs	r2, r0	@ D.7145, D.7145
 118 005a D243     		mvns	r2, r2	@ D.7145, D.7145
 119 005c 1A40     		ands	r2, r3	@ D.7144, D.7144
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7144, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7144, D.7144
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7143, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7144, D.7143
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7144, D.7144
ARM GAS  /tmp/ccI8cyDB.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7144, D.7144,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7144, D.7144, D.7144
 133 0076 0300     		movs	r3, r0	@ D.7144, D.7144
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7144, D.7144
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7144,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7142, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7144, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7146,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7144, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7144, D.7144
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7144, D.7144,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7146,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7144, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7144, D.7144
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7144, D.7144,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7144, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7143, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7144, D.7143
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7144, D.7144
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7144, D.7144,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7145, D.7145, D.7144
 169 00b6 0100     		movs	r1, r0	@ D.7145, D.7145
 170 00b8 C943     		mvns	r1, r1	@ D.7145, D.7145
 171 00ba 1140     		ands	r1, r2	@ D.7144, D.7144
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7144, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7144, D.7144
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7143, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7144, D.7143
ARM GAS  /tmp/ccI8cyDB.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7144, D.7144
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7144, D.7144,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7144, D.7144, D.7144
 185 00d4 0200     		movs	r2, r0	@ D.7144, D.7144
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7144, D.7144
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7144, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccI8cyDB.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7147,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7148,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7149, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7149,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7149, _6->LOAD
ARM GAS  /tmp/ccI8cyDB.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7148,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7148,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7147,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	take_temp_sample
 273              		.section	.bss.take_temp_sample,"aw",%nobits
 274              		.align	1
 275              		.type	take_temp_sample, %object
 276              		.size	take_temp_sample, 2
 277              	take_temp_sample:
 278 0000 0000     		.space	2
 279              		.global	timer_rep
 280              		.section	.bss.timer_rep,"aw",%nobits
 281              		.align	1
 282              		.type	timer_rep, %object
 283              		.size	timer_rep, 2
 284              	timer_rep:
 285 0000 0000     		.space	2
 286              		.global	timer_relay
 287              		.section	.bss.timer_relay,"aw",%nobits
ARM GAS  /tmp/ccI8cyDB.s 			page 23


 288              		.align	1
 289              		.type	timer_relay, %object
 290              		.size	timer_relay, 2
 291              	timer_relay:
 292 0000 0000     		.space	2
 293              		.comm	tt_take_photo_sample,2,2
 294              		.comm	tt_relay_on_off,2,2
 295              		.comm	saved_mode,1,1
 296              		.global	send_energy
 297              		.section	.bss.send_energy,"aw",%nobits
 298              		.type	send_energy, %object
 299              		.size	send_energy, 1
 300              	send_energy:
 301 0000 00       		.space	1
 302              		.comm	adc_ch,6,4
 303              		.global	seq_ready
 304              		.section	.bss.seq_ready,"aw",%nobits
 305              		.type	seq_ready, %object
 306              		.size	seq_ready, 1
 307              	seq_ready:
 308 0000 00       		.space	1
 309              		.comm	zero_current,2,2
 310              		.comm	usart1_mini_timeout,1,1
 311              		.comm	usart1_pckt_ready,1,1
 312              		.comm	usart1_have_data,1,1
 313              		.comm	usart1_pckt_bytes,1,1
 314              		.comm	usart2_mini_timeout,1,1
 315              		.comm	usart2_pckt_ready,1,1
 316              		.comm	usart2_have_data,1,1
 317              		.comm	usart2_pckt_bytes,1,1
 318              		.comm	param_struct,84,4
 319              		.global	show_power_index
 320              		.section	.bss.show_power_index,"aw",%nobits
 321              		.align	1
 322              		.type	show_power_index, %object
 323              		.size	show_power_index, 2
 324              	show_power_index:
 325 0000 0000     		.space	2
 326              		.comm	gsmNUM,20,4
 327              		.comm	gsmMSG,180,4
 328              		.global	wait_ms_var
 329              		.section	.bss.wait_ms_var,"aw",%nobits
 330              		.align	1
 331              		.type	wait_ms_var, %object
 332              		.size	wait_ms_var, 2
 333              	wait_ms_var:
 334 0000 0000     		.space	2
 335              		.comm	timer_standby,2,2
 336              		.comm	tcp_kalive_timer,2,2
 337              		.comm	timer_meas,1,1
 338              		.global	secs
 339              		.section	.bss.secs,"aw",%nobits
 340              		.align	1
 341              		.type	secs, %object
 342              		.size	secs, 2
 343              	secs:
 344 0000 0000     		.space	2
ARM GAS  /tmp/ccI8cyDB.s 			page 24


 345              		.global	hours
 346              		.section	.bss.hours,"aw",%nobits
 347              		.type	hours, %object
 348              		.size	hours, 1
 349              	hours:
 350 0000 00       		.space	1
 351              		.global	minutes
 352              		.section	.bss.minutes,"aw",%nobits
 353              		.type	minutes, %object
 354              		.size	minutes, 1
 355              	minutes:
 356 0000 00       		.space	1
 357              		.comm	power_vect,20,4
 358              		.comm	vtemp,34,4
 359              		.comm	vpote,34,4
 360              		.section	.rodata
 361              		.align	2
 362              	.LC1:
 363 0000 31313439 		.ascii	"1149867843\000"
 363      38363738 
 363      343300
 364 000b 00       		.align	2
 365              	.LC3:
 366 000c 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 366      726E6F20 
 366      506C6163 
 366      61205265 
 366      646F6E64 
 367 0031 000000   		.align	2
 368              	.LC5:
 369 0034 20204665 		.ascii	"  Features:\015\012\000"
 369      61747572 
 369      65733A0D 
 369      0A00
 370 0042 0000     		.align	2
 371              	.LC7:
 372 0044 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 372      6D6D6572 
 372      20312074 
 372      6F203130 
 372      560D0A00 
 373              		.align	2
 374              	.LC9:
 375 0058 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 375      67687420 
 375      48797374 
 375      65726573 
 375      69730D0A 
 376 006d 000000   		.align	2
 377              	.LC11:
 378 0070 20205379 		.ascii	"  Sync by ADC\015\012\000"
 378      6E632062 
 378      79204144 
 378      430D0A00 
 379              		.align	2
 380              	.LC13:
 381 0080 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
ARM GAS  /tmp/ccI8cyDB.s 			page 25


 381      65732047 
 381      534D2066 
 381      6F722053 
 381      4D532064 
 382 009a 0000     		.align	2
 383              	.LC18:
 384 009c 47657474 		.ascii	"Getted\015\012\000"
 384      65640D0A 
 384      00
 385 00a5 000000   		.align	2
 386              	.LC20:
 387 00a8 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 387      696E6720 
 387      47534D20 
 387      53746172 
 387      74757020 
 388 00cf 00       		.align	2
 389              	.LC24:
 390 00d0 5265706F 		.ascii	"Reports by SMS\015\012\000"
 390      72747320 
 390      62792053 
 390      4D530D0A 
 390      00
 391 00e1 000000   		.align	2
 392              	.LC26:
 393 00e4 41542B47 		.ascii	"AT+GSN\015\012\000"
 393      534E0D0A 
 393      00
 394 00ed 000000   		.align	2
 395              	.LC29:
 396 00f0 494D4549 		.ascii	"IMEI: \000"
 396      3A2000
 397 00f7 00       		.align	2
 398              	.LC31:
 399 00f8 0D0A00   		.ascii	"\015\012\000"
 400 00fb 00       		.align	2
 401              	.LC33:
 402 00fc 2C204143 		.ascii	", ACTIVO\000"
 402      5449564F 
 402      00
 403 0105 000000   		.align	2
 404              	.LC36:
 405 0108 5052454E 		.ascii	"PRENDIDO\015\012\000"
 405      4449444F 
 405      0D0A00
 406 0113 00       		.align	2
 407              	.LC38:
 408 0114 5052454E 		.ascii	"PRENDIDO\000"
 408      4449444F 
 408      00
 409 011d 000000   		.align	2
 410              	.LC44:
 411 0120 41504147 		.ascii	"APAGADO\000"
 411      41444F00 
 412              		.global	__aeabi_uidiv
 413              		.section	.text.main,"ax",%progbits
 414              		.align	2
ARM GAS  /tmp/ccI8cyDB.s 			page 26


 415              		.global	main
 416              		.code	16
 417              		.thumb_func
 418              		.type	main, %function
 419              	main:
 420              	.LFB20:
 421              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
ARM GAS  /tmp/ccI8cyDB.s 			page 27


  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** // volatile unsigned char switches_timer = 0;
  72:src/main.c    **** //
  73:src/main.c    **** //
  74:src/main.c    **** // volatile unsigned short scroll1_timer = 0;
  75:src/main.c    **** // volatile unsigned short scroll2_timer = 0;
  76:src/main.c    **** //
  77:src/main.c    **** // volatile unsigned short standalone_timer;
  78:src/main.c    **** // volatile unsigned short standalone_enable_menu_timer;
  79:src/main.c    **** // //volatile unsigned short standalone_menu_timer;
  80:src/main.c    **** // volatile unsigned char grouped_master_timeout_timer;
  81:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  82:src/main.c    **** unsigned short timer_rep = 0;
  83:src/main.c    **** // volatile unsigned char timer_wifi_bright = 0;
  84:src/main.c    **** 
  85:src/main.c    **** #ifdef USE_REDONDA_BASIC
  86:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  87:src/main.c    **** 
  88:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  89:src/main.c    **** volatile unsigned short tt_relay_on_off;
  90:src/main.c    **** #endif
  91:src/main.c    **** 
  92:src/main.c    **** 
  93:src/main.c    **** unsigned char saved_mode;
  94:src/main.c    **** 
  95:src/main.c    **** 
  96:src/main.c    **** unsigned char send_energy = 0;
  97:src/main.c    **** // ------- Externals del o para el ADC -------
  98:src/main.c    **** #ifdef ADC_WITH_INT
  99:src/main.c    **** volatile unsigned short adc_ch[3];
 100:src/main.c    **** volatile unsigned char seq_ready = 0;
 101:src/main.c    **** unsigned short zero_current;
 102:src/main.c    **** #endif
 103:src/main.c    **** 
 104:src/main.c    **** // ------- Externals del GPS & GSM -------
 105:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 106:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 107:src/main.c    **** volatile unsigned char usart1_have_data;
ARM GAS  /tmp/ccI8cyDB.s 			page 28


 108:src/main.c    **** unsigned char usart1_pckt_bytes;
 109:src/main.c    **** 
 110:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 111:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 112:src/main.c    **** #define gps_have_data		usart1_have_data
 113:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 114:src/main.c    **** 
 115:src/main.c    **** #ifdef USE_GPS
 116:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 117:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 118:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 119:src/main.c    **** volatile unsigned char usart2_have_data;
 120:src/main.c    **** unsigned char usart2_pckt_bytes;
 121:src/main.c    **** 
 122:src/main.c    **** #endif
 123:src/main.c    **** 
 124:src/main.c    **** // ------- Externals del GSM -------
 125:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 126:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 127:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 128:src/main.c    **** #define gsm_have_data		usart1_have_data
 129:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 130:src/main.c    **** 
 131:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 132:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 133:src/main.c    **** volatile unsigned char usart2_have_data;
 134:src/main.c    **** unsigned char usart2_pckt_bytes;
 135:src/main.c    **** 
 136:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 137:src/main.c    **** #endif
 138:src/main.c    **** 
 139:src/main.c    **** parameters_typedef param_struct;
 140:src/main.c    **** 
 141:src/main.c    **** //--- VARIABLES GLOBALES ---//
 142:src/main.c    **** unsigned short show_power_index = 0;	//lo uso como timer sincronizado con la mediciontick 2 secs.
 143:src/main.c    **** 
 144:src/main.c    **** //para las mediciones
 145:src/main.c    **** // unsigned int power_2secs_acum = 0;
 146:src/main.c    **** // unsigned char power_2secs_index = 0;
 147:src/main.c    **** // unsigned short power_minutes = 0;
 148:src/main.c    **** // unsigned char power_minutes_index = 0;
 149:src/main.c    **** // unsigned short power_hours = 0;
 150:src/main.c    **** 
 151:src/main.c    **** //para los msjs GSM
 152:src/main.c    **** char gsmNUM [20];
 153:src/main.c    **** char gsmMSG [180];
 154:src/main.c    **** 
 155:src/main.c    **** 
 156:src/main.c    **** 
 157:src/main.c    **** 
 158:src/main.c    **** 
 159:src/main.c    **** 
 160:src/main.c    **** // ------- de los timers -------
 161:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 162:src/main.c    **** volatile unsigned short timer_standby;
 163:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 164:src/main.c    **** //volatile unsigned char display_timer;
ARM GAS  /tmp/ccI8cyDB.s 			page 29


 165:src/main.c    **** volatile unsigned char timer_meas;
 166:src/main.c    **** 
 167:src/main.c    **** //volatile unsigned char door_filter;
 168:src/main.c    **** //volatile unsigned char take_sample;
 169:src/main.c    **** //volatile unsigned char move_relay;
 170:src/main.c    **** #ifdef WITH_HYST
 171:src/main.c    **** volatile unsigned short secs = 0;
 172:src/main.c    **** volatile unsigned char hours = 0;
 173:src/main.c    **** volatile unsigned char minutes = 0;
 174:src/main.c    **** #endif
 175:src/main.c    **** 
 176:src/main.c    **** #define SIZEOF_POWER_VECT		10
 177:src/main.c    **** 
 178:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 179:src/main.c    **** 
 180:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 181:src/main.c    **** void TimingDelay_Decrement(void);
 182:src/main.c    **** 
 183:src/main.c    **** // ------- del DMX -------
 184:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 185:src/main.c    **** #define DMX_TIMEOUT	20
 186:src/main.c    **** 
 187:src/main.c    **** //--- FILTROS DE SENSORES ---//
 188:src/main.c    **** #define LARGO_FILTRO 16
 189:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 190:src/main.c    **** //#define LARGO_FILTRO 32
 191:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 192:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 193:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 194:src/main.c    **** 
 195:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 196:src/main.c    **** 
 197:src/main.c    **** 
 198:src/main.c    **** //--- Private Definitions ---//
 199:src/main.c    **** #define num_tel_rep		param_struct.num_reportar
 200:src/main.c    **** 
 201:src/main.c    **** 
 202:src/main.c    **** //-------------------------------------------//
 203:src/main.c    **** // @brief  Main program.
 204:src/main.c    **** // @param  None
 205:src/main.c    **** // @retval None
 206:src/main.c    **** //------------------------------------------//
 207:src/main.c    **** int main(void)
 208:src/main.c    **** {
 422              		.loc 2 208 0
 423              		.cfi_startproc
 424 0000 30B5     		push	{r4, r5, lr}	@
 425              	.LCFI4:
 426              		.cfi_def_cfa_offset 12
 427              		.cfi_offset 4, -12
 428              		.cfi_offset 5, -8
 429              		.cfi_offset 14, -4
 430 0002 A5B0     		sub	sp, sp, #148	@,,
 431              	.LCFI5:
 432              		.cfi_def_cfa_offset 160
 209:src/main.c    **** 	unsigned char i, ii;
 210:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
ARM GAS  /tmp/ccI8cyDB.s 			page 30


 433              		.loc 2 210 0
 434 0004 7323     		movs	r3, #115	@ tmp192,
 435 0006 6B44     		add	r3, r3, sp	@ tmp192,
 436 0008 0022     		movs	r2, #0	@ tmp193,
 437 000a 1A70     		strb	r2, [r3]	@ tmp194, need_ack
 211:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 438              		.loc 2 211 0
 439 000c 7223     		movs	r3, #114	@ tmp195,
 440 000e 6B44     		add	r3, r3, sp	@ tmp195,
 441 0010 0022     		movs	r2, #0	@ tmp196,
 442 0012 1A70     		strb	r2, [r3]	@ tmp197, resp
 212:src/main.c    **** 	// unsigned short power_int, power_dec;
 213:src/main.c    **** 	// unsigned short wh_int, wh_dec;
 214:src/main.c    **** 	// float fcalc = 1.0;
 215:src/main.c    **** 	unsigned short power, last_power;
 216:src/main.c    **** 	unsigned int zero_current_loc = 0;
 443              		.loc 2 216 0
 444 0014 0023     		movs	r3, #0	@ tmp198,
 445 0016 2193     		str	r3, [sp, #132]	@ tmp198, zero_current_loc
 217:src/main.c    **** 
 218:src/main.c    **** 	unsigned short acum_secs_index;
 219:src/main.c    **** 	unsigned int acum_secs, acum_hours;
 220:src/main.c    **** 	unsigned char show_power = 0;
 446              		.loc 2 220 0
 447 0018 7123     		movs	r3, #113	@ tmp199,
 448 001a 6B44     		add	r3, r3, sp	@ tmp199,
 449 001c 0022     		movs	r2, #0	@ tmp200,
 450 001e 1A70     		strb	r2, [r3]	@ tmp201, show_power
 221:src/main.c    **** 
 222:src/main.c    **** #ifdef USE_REDONDA_BASIC
 223:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 451              		.loc 2 223 0
 452 0020 7723     		movs	r3, #119	@ tmp202,
 453 0022 6B44     		add	r3, r3, sp	@ tmp202,
 454 0024 0022     		movs	r2, #0	@ tmp203,
 455 0026 1A70     		strb	r2, [r3]	@ tmp204, main_state
 224:src/main.c    **** 	unsigned char reportar_SMS = 0;
 456              		.loc 2 224 0
 457 0028 1CAB     		add	r3, sp, #112	@ tmp205,,
 458 002a 0022     		movs	r2, #0	@ tmp206,
 459 002c 1A70     		strb	r2, [r3]	@ tmp207, reportar_SMS
 225:src/main.c    **** 	unsigned char sended = 0;
 460              		.loc 2 225 0
 461 002e 6F23     		movs	r3, #111	@ tmp208,
 462 0030 6B44     		add	r3, r3, sp	@ tmp208,
 463 0032 0022     		movs	r2, #0	@ tmp209,
 464 0034 1A70     		strb	r2, [r3]	@ tmp210, sended
 226:src/main.c    **** 	lamp_on_state_t lamp_on_state = init_airplane0;
 465              		.loc 2 226 0
 466 0036 7623     		movs	r3, #118	@ tmp211,
 467 0038 6B44     		add	r3, r3, sp	@ tmp211,
 468 003a 0022     		movs	r2, #0	@ tmp212,
 469 003c 1A70     		strb	r2, [r3]	@ tmp213, lamp_on_state
 227:src/main.c    **** 	unsigned char counters_mode = 0;
 470              		.loc 2 227 0
 471 003e 7523     		movs	r3, #117	@ tmp214,
 472 0040 6B44     		add	r3, r3, sp	@ tmp214,
ARM GAS  /tmp/ccI8cyDB.s 			page 31


 473 0042 0022     		movs	r2, #0	@ tmp215,
 474 0044 1A70     		strb	r2, [r3]	@ tmp216, counters_mode
 228:src/main.c    **** 	unsigned char meas_end = 0;
 475              		.loc 2 228 0
 476 0046 1DAB     		add	r3, sp, #116	@ tmp217,,
 477 0048 0022     		movs	r2, #0	@ tmp218,
 478 004a 1A70     		strb	r2, [r3]	@ tmp219, meas_end
 229:src/main.c    **** 
 230:src/main.c    **** #ifdef WITH_HYST
 231:src/main.c    **** 	unsigned short hyst;
 232:src/main.c    **** #endif
 233:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 234:src/main.c    **** 	unsigned char one_to_ten;
 235:src/main.c    **** #endif
 236:src/main.c    **** 
 237:src/main.c    **** #else		//USE_REDONDA_BASIC
 238:src/main.c    **** 	unsigned char main_state = 0;
 239:src/main.c    **** #endif
 240:src/main.c    **** 	char s_lcd [100];		//lo agrando porque lo uso tambien para enviar SMS
 241:src/main.c    **** 	// enum TcpMessages tcp_msg = NONE_MSG;
 242:src/main.c    **** 	// unsigned char new_room = 0;
 243:src/main.c    **** 	// unsigned char new_lamp = 0;
 244:src/main.c    **** 	// unsigned char last_bright = 0;
 245:src/main.c    **** 	// unsigned char show_ldr = 0;
 246:src/main.c    **** 	// int dummy_resp = 0;
 247:src/main.c    **** 	// unsigned char pps_one = 0;
 248:src/main.c    **** 
 249:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 250:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 251:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 252:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 253:src/main.c    ****     //   system_stm32f0xx.c file
 254:src/main.c    **** 
 255:src/main.c    **** 	//GPIO Configuration.
 256:src/main.c    **** 	GPIO_Config();
 479              		.loc 2 256 0
 480 004c FFF7FEFF 		bl	GPIO_Config	@
 257:src/main.c    **** 
 258:src/main.c    **** 
 259:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 260:src/main.c    **** 	if (SysTick_Config(48000))
 481              		.loc 2 260 0
 482 0050 D64B     		ldr	r3, .L72	@ tmp220,
 483 0052 1800     		movs	r0, r3	@, tmp220
 484 0054 FFF7FEFF 		bl	SysTick_Config	@
 485 0058 031E     		subs	r3, r0, #0	@ D.7150,,
 486 005a 28D0     		beq	.L13	@,
 487              	.L18:
 261:src/main.c    **** 	{
 262:src/main.c    **** 		while (1)	/* Capture error */
 263:src/main.c    **** 		{
 264:src/main.c    **** 			if (LED)
 488              		.loc 2 264 0
 489 005c 9023     		movs	r3, #144	@ tmp643,
 490 005e DB05     		lsls	r3, r3, #23	@ D.7151, tmp643,
 491 0060 9B8A     		ldrh	r3, [r3, #20]	@ tmp222,
 492 0062 9BB2     		uxth	r3, r3	@ D.7152, tmp222
ARM GAS  /tmp/ccI8cyDB.s 			page 32


 493 0064 1A00     		movs	r2, r3	@ D.7153, D.7152
 494 0066 8023     		movs	r3, #128	@ tmp644,
 495 0068 5B01     		lsls	r3, r3, #5	@ tmp223, tmp644,
 496 006a 1340     		ands	r3, r2	@ D.7153, D.7153
 497 006c 05D0     		beq	.L14	@,
 265:src/main.c    **** 				LED_OFF;
 498              		.loc 2 265 0
 499 006e 9023     		movs	r3, #144	@ tmp641,
 500 0070 DB05     		lsls	r3, r3, #23	@ D.7151, tmp641,
 501 0072 8022     		movs	r2, #128	@ tmp642,
 502 0074 5205     		lsls	r2, r2, #21	@ tmp224, tmp642,
 503 0076 9A61     		str	r2, [r3, #24]	@ tmp224, _110->BSRR
 504 0078 04E0     		b	.L15	@
 505              	.L14:
 266:src/main.c    **** 			else
 267:src/main.c    **** 				LED_ON;
 506              		.loc 2 267 0
 507 007a 9023     		movs	r3, #144	@ tmp639,
 508 007c DB05     		lsls	r3, r3, #23	@ D.7151, tmp639,
 509 007e 8022     		movs	r2, #128	@ tmp640,
 510 0080 5201     		lsls	r2, r2, #5	@ tmp225, tmp640,
 511 0082 9A61     		str	r2, [r3, #24]	@ tmp225, _112->BSRR
 512              	.L15:
 268:src/main.c    **** 
 269:src/main.c    **** 			for (i = 0; i < 255; i++)
 513              		.loc 2 269 0
 514 0084 8F23     		movs	r3, #143	@ tmp226,
 515 0086 6B44     		add	r3, r3, sp	@ tmp226,
 516 0088 0022     		movs	r2, #0	@ tmp227,
 517 008a 1A70     		strb	r2, [r3]	@ tmp228, i
 518 008c 09E0     		b	.L16	@
 519              	.L17:
 270:src/main.c    **** 			{
 271:src/main.c    **** 				asm (	"nop \n\t"
 520              		.loc 2 271 0 discriminator 3
 521              		.syntax divided
 522              	@ 271 "src/main.c" 1
 523 008e C046     		nop 
 524 0090 C046     		nop 
 525 0092 C046     		nop 
 526              		
 527              	@ 0 "" 2
 269:src/main.c    **** 			{
 528              		.loc 2 269 0 discriminator 3
 529              		.thumb
 530              		.syntax unified
 531 0094 8F23     		movs	r3, #143	@ tmp229,
 532 0096 6B44     		add	r3, r3, sp	@ tmp229,
 533 0098 1A78     		ldrb	r2, [r3]	@ D.7154, i
 534 009a 8F23     		movs	r3, #143	@ tmp230,
 535 009c 6B44     		add	r3, r3, sp	@ tmp230,
 536 009e 0132     		adds	r2, r2, #1	@ tmp231,
 537 00a0 1A70     		strb	r2, [r3]	@ tmp232, i
 538              	.L16:
 269:src/main.c    **** 			{
 539              		.loc 2 269 0 is_stmt 0 discriminator 1
 540 00a2 8F23     		movs	r3, #143	@ tmp233,
ARM GAS  /tmp/ccI8cyDB.s 			page 33


 541 00a4 6B44     		add	r3, r3, sp	@ tmp233,
 542 00a6 1B78     		ldrb	r3, [r3]	@ tmp234, i
 543 00a8 FF2B     		cmp	r3, #255	@ tmp234,
 544 00aa F0D1     		bne	.L17	@,
 272:src/main.c    **** 						"nop \n\t"
 273:src/main.c    **** 						"nop \n\t" );
 274:src/main.c    **** 			}
 275:src/main.c    **** 		}
 545              		.loc 2 275 0 is_stmt 1
 546 00ac D6E7     		b	.L18	@
 547              	.L13:
 276:src/main.c    **** 	}
 277:src/main.c    **** 
 278:src/main.c    **** 
 279:src/main.c    **** 	//ADC Configuration
 280:src/main.c    **** //	AdcConfig();
 281:src/main.c    **** 
 282:src/main.c    **** 	//TIM Configuration.
 283:src/main.c    **** 	// TIM_3_Init();
 284:src/main.c    **** //	TIM_14_Init();
 285:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 286:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 287:src/main.c    **** 
 288:src/main.c    **** //	EXTIOff ();
 289:src/main.c    **** 
 290:src/main.c    **** 
 291:src/main.c    **** //		while (1)
 292:src/main.c    **** //		{
 293:src/main.c    **** //			PIN3_OFF;
 294:src/main.c    **** //			Wait_ms (10);
 295:src/main.c    **** //			PIN3_ON;
 296:src/main.c    **** //			Wait_ms (10);
 297:src/main.c    **** //		}
 298:src/main.c    **** 
 299:src/main.c    **** 	//--- Leo los parametros de memoria ---//
 300:src/main.c    **** #ifdef USE_REDONDA_BASIC
 301:src/main.c    **** 	param_struct.acumm_wh = ((parameters_typedef *) (unsigned int *) PAGE63)->acumm_wh;
 548              		.loc 2 301 0
 549 00ae C04B     		ldr	r3, .L72+4	@ D.7155,
 550 00b0 9A6C     		ldr	r2, [r3, #72]	@ D.7156, _117->acumm_wh
 551 00b2 C04B     		ldr	r3, .L72+8	@ tmp235,
 552 00b4 9A64     		str	r2, [r3, #72]	@ D.7156, param_struct.acumm_wh
 302:src/main.c    **** 	if (param_struct.acumm_wh != 0xFFFFFFFF)
 553              		.loc 2 302 0
 554 00b6 BF4B     		ldr	r3, .L72+8	@ tmp236,
 555 00b8 9B6C     		ldr	r3, [r3, #72]	@ D.7156, param_struct.acumm_wh
 556 00ba 0133     		adds	r3, r3, #1	@ tmp645, D.7156,
 557 00bc 16D0     		beq	.L19	@,
 303:src/main.c    **** 	{
 304:src/main.c    **** 		//memoria no vacia
 305:src/main.c    **** 		strncpy( param_struct.num_reportar,
 558              		.loc 2 305 0
 559 00be BC49     		ldr	r1, .L72+4	@ tmp237,
 560 00c0 BC4B     		ldr	r3, .L72+8	@ tmp238,
 561 00c2 1822     		movs	r2, #24	@,
 562 00c4 1800     		movs	r0, r3	@, tmp238
 563 00c6 FFF7FEFF 		bl	strncpy	@
ARM GAS  /tmp/ccI8cyDB.s 			page 34


 306:src/main.c    **** 					((parameters_typedef *) (char *) PAGE63)->num_reportar,
 307:src/main.c    **** 					sizeof(param_struct.num_reportar));
 308:src/main.c    **** 
 309:src/main.c    **** 		param_struct.acumm_w2s = ((parameters_typedef *) (unsigned int *) PAGE63)->acumm_w2s;
 564              		.loc 2 309 0
 565 00ca B94B     		ldr	r3, .L72+4	@ D.7155,
 566 00cc DA6C     		ldr	r2, [r3, #76]	@ D.7156, _122->acumm_w2s
 567 00ce B94B     		ldr	r3, .L72+8	@ tmp239,
 568 00d0 DA64     		str	r2, [r3, #76]	@ D.7156, param_struct.acumm_w2s
 310:src/main.c    **** 		param_struct.acumm_w2s_index = ((parameters_typedef *) (unsigned short *) PAGE63)->acumm_w2s_inde
 569              		.loc 2 310 0
 570 00d2 B74A     		ldr	r2, .L72+4	@ D.7155,
 571 00d4 5023     		movs	r3, #80	@ tmp240,
 572 00d6 D15A     		ldrh	r1, [r2, r3]	@ D.7152,
 573 00d8 B64B     		ldr	r3, .L72+8	@ tmp241,
 574 00da 5022     		movs	r2, #80	@ tmp242,
 575 00dc 9952     		strh	r1, [r3, r2]	@ tmp243, param_struct.acumm_w2s_index
 311:src/main.c    **** 		param_struct.timer_reportar = ((parameters_typedef *) (unsigned char *) PAGE63)->timer_reportar;
 576              		.loc 2 311 0
 577 00de B44A     		ldr	r2, .L72+4	@ D.7155,
 578 00e0 5223     		movs	r3, #82	@ tmp244,
 579 00e2 D15C     		ldrb	r1, [r2, r3]	@ D.7154,
 580 00e4 B34B     		ldr	r3, .L72+8	@ tmp245,
 581 00e6 5222     		movs	r2, #82	@ tmp246,
 582 00e8 9954     		strb	r1, [r3, r2]	@ tmp247, param_struct.timer_reportar
 583 00ea 15E0     		b	.L20	@
 584              	.L19:
 312:src/main.c    **** 	}
 313:src/main.c    **** 	else
 314:src/main.c    **** 	{
 315:src/main.c    **** 		//memoria vacia
 316:src/main.c    **** 		param_struct.acumm_wh = 0;
 585              		.loc 2 316 0
 586 00ec B14B     		ldr	r3, .L72+8	@ tmp248,
 587 00ee 0022     		movs	r2, #0	@ tmp249,
 588 00f0 9A64     		str	r2, [r3, #72]	@ tmp249, param_struct.acumm_wh
 317:src/main.c    **** 		param_struct.acumm_w2s = 0;
 589              		.loc 2 317 0
 590 00f2 B04B     		ldr	r3, .L72+8	@ tmp250,
 591 00f4 0022     		movs	r2, #0	@ tmp251,
 592 00f6 DA64     		str	r2, [r3, #76]	@ tmp251, param_struct.acumm_w2s
 318:src/main.c    **** 		param_struct.acumm_w2s_index = 0;
 593              		.loc 2 318 0
 594 00f8 AE4B     		ldr	r3, .L72+8	@ tmp252,
 595 00fa 5022     		movs	r2, #80	@ tmp253,
 596 00fc 0021     		movs	r1, #0	@ tmp254,
 597 00fe 9952     		strh	r1, [r3, r2]	@ tmp255, param_struct.acumm_w2s_index
 319:src/main.c    **** 		param_struct.timer_reportar = 2;
 598              		.loc 2 319 0
 599 0100 AC4B     		ldr	r3, .L72+8	@ tmp256,
 600 0102 5222     		movs	r2, #82	@ tmp257,
 601 0104 0221     		movs	r1, #2	@ tmp258,
 602 0106 9954     		strb	r1, [r3, r2]	@ tmp259, param_struct.timer_reportar
 320:src/main.c    **** 		//el timer a reportar esta n minutos, yo tengo tick cada 2 segundos
 321:src/main.c    **** 
 322:src/main.c    **** 		strcpy( param_struct.num_reportar, "1149867843");	//segunda sim de claro
 603              		.loc 2 322 0
ARM GAS  /tmp/ccI8cyDB.s 			page 35


 604 0108 AA4B     		ldr	r3, .L72+8	@ tmp260,
 605 010a AB4A     		ldr	r2, .L72+12	@ tmp261,
 606 010c 03CA     		ldmia	r2!, {r0, r1}	@ tmp263, tmp647, tmp646
 607 010e 03C3     		stmia	r3!, {r0, r1}	@ tmp262, tmp647, tmp646
 608 0110 1188     		ldrh	r1, [r2]	@ tmp264,
 609 0112 1980     		strh	r1, [r3]	@ tmp264,
 610 0114 9278     		ldrb	r2, [r2, #2]	@ tmp265,
 611 0116 9A70     		strb	r2, [r3, #2]	@ tmp265,
 612              	.L20:
 323:src/main.c    **** 	}
 324:src/main.c    **** #endif
 325:src/main.c    **** 
 326:src/main.c    **** 
 327:src/main.c    **** 	//--- Welcome code ---//
 328:src/main.c    **** 	LED_OFF;
 613              		.loc 2 328 0
 614 0118 9023     		movs	r3, #144	@ tmp633,
 615 011a DB05     		lsls	r3, r3, #23	@ D.7151, tmp633,
 616 011c 8022     		movs	r2, #128	@ tmp634,
 617 011e 5205     		lsls	r2, r2, #21	@ tmp266, tmp634,
 618 0120 9A61     		str	r2, [r3, #24]	@ tmp266, _136->BSRR
 329:src/main.c    **** //	EN_GPS_OFF;
 330:src/main.c    **** 	EN_GPS_ON;
 619              		.loc 2 330 0
 620 0122 9023     		movs	r3, #144	@ tmp635,
 621 0124 DB05     		lsls	r3, r3, #23	@ D.7151, tmp635,
 622 0126 8022     		movs	r2, #128	@ tmp636,
 623 0128 1202     		lsls	r2, r2, #8	@ tmp267, tmp636,
 624 012a 9A61     		str	r2, [r3, #24]	@ tmp267, _138->BSRR
 331:src/main.c    **** 	//RELAY_ON;
 332:src/main.c    **** 	RELAY_OFF;
 625              		.loc 2 332 0
 626 012c 9023     		movs	r3, #144	@ tmp637,
 627 012e DB05     		lsls	r3, r3, #23	@ D.7151, tmp637,
 628 0130 8022     		movs	r2, #128	@ tmp638,
 629 0132 1205     		lsls	r2, r2, #20	@ tmp268, tmp638,
 630 0134 9A61     		str	r2, [r3, #24]	@ tmp268, _140->BSRR
 333:src/main.c    **** 
 334:src/main.c    **** 	USART1Config();
 631              		.loc 2 334 0
 632 0136 FFF7FEFF 		bl	USART1Config	@
 335:src/main.c    **** 	USART2Config();
 633              		.loc 2 335 0
 634 013a FFF7FEFF 		bl	USART2Config	@
 336:src/main.c    **** 
 337:src/main.c    **** 	EXTIOff();
 635              		.loc 2 337 0
 636 013e FFF7FEFF 		bl	EXTIOff	@
 338:src/main.c    **** 
 339:src/main.c    **** 
 340:src/main.c    **** 
 341:src/main.c    **** //---------- Pruebas con GSM GATEWAY --------//
 342:src/main.c    **** #ifdef USE_GSM_GATEWAY
 343:src/main.c    **** 	LED_OFF;
 344:src/main.c    **** 	for (i = 0; i < 6; i++)
 345:src/main.c    **** 	{
 346:src/main.c    **** 		if (LED)
ARM GAS  /tmp/ccI8cyDB.s 			page 36


 347:src/main.c    **** 			LED_OFF;
 348:src/main.c    **** 		else
 349:src/main.c    **** 			LED_ON;
 350:src/main.c    **** 
 351:src/main.c    **** 		Wait_ms (300);
 352:src/main.c    **** 	}
 353:src/main.c    **** 
 354:src/main.c    **** 	Wait_ms (3000);
 355:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 356:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 357:src/main.c    **** 
 358:src/main.c    **** 	//mando start al gsm
 359:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 360:src/main.c    **** 	//GPSStartResetSM ();
 361:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 362:src/main.c    **** 	while (timer_standby)
 363:src/main.c    **** 	{
 364:src/main.c    **** 		i = GSM_Start();
 365:src/main.c    **** 		if (i == 1)
 366:src/main.c    **** 		{
 367:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 368:src/main.c    **** 			timer_standby = 0;
 369:src/main.c    **** 		}
 370:src/main.c    **** 		else
 371:src/main.c    **** 
 372:src/main.c    **** 		if (i > 1)
 373:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 374:src/main.c    **** 	}
 375:src/main.c    **** 
 376:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 377:src/main.c    **** 
 378:src/main.c    **** 	while (1)
 379:src/main.c    **** 	{
 380:src/main.c    **** 		GSMProcess();
 381:src/main.c    **** 
 382:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 383:src/main.c    **** 		{
 384:src/main.c    **** 			usart2_pckt_ready = 0;
 385:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 386:src/main.c    **** 		}
 387:src/main.c    **** 
 388:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 389:src/main.c    **** 		{
 390:src/main.c    **** 			gsm_pckt_ready = 0;
 391:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 392:src/main.c    **** 		}
 393:src/main.c    **** 
 394:src/main.c    **** 		if (LIGHT)
 395:src/main.c    **** 			LED_ON;
 396:src/main.c    **** 		else
 397:src/main.c    **** 			LED_OFF;
 398:src/main.c    **** 	}
 399:src/main.c    **** #endif
 400:src/main.c    **** //---------- Fin Prueba con GSM GATEWAY --------//
 401:src/main.c    **** 
 402:src/main.c    **** 
 403:src/main.c    **** 
ARM GAS  /tmp/ccI8cyDB.s 			page 37


 404:src/main.c    **** 
 405:src/main.c    **** 
 406:src/main.c    **** #ifdef USE_REDONDA_BASIC
 407:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 408:src/main.c    **** 	// USART1Config();
 409:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 637              		.loc 2 409 0
 638 0142 FFF7FEFF 		bl	AdcConfig	@
 410:src/main.c    **** 
 411:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 412:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 639              		.loc 2 412 0
 640 0146 FFF7FEFF 		bl	TIM_3_Init	@
 413:src/main.c    **** #endif
 414:src/main.c    **** 
 415:src/main.c    **** 	TIM_16_Init();					//o utilizo para synchro de relay
 641              		.loc 2 415 0
 642 014a FFF7FEFF 		bl	TIM_16_Init	@
 416:src/main.c    **** 	TIM16Enable();
 643              		.loc 2 416 0
 644 014e FFF7FEFF 		bl	TIM16Enable	@
 417:src/main.c    **** 
 418:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 645              		.loc 2 418 0
 646 0152 9A4B     		ldr	r3, .L72+16	@ tmp269,
 647 0154 1800     		movs	r0, r3	@, tmp269
 648 0156 FFF7FEFF 		bl	Usart2Send	@
 419:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 649              		.loc 2 419 0
 650 015a 994B     		ldr	r3, .L72+20	@ tmp270,
 651 015c 1800     		movs	r0, r3	@, tmp270
 652 015e FFF7FEFF 		bl	Usart2Send	@
 420:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 421:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 653              		.loc 2 421 0
 654 0162 984B     		ldr	r3, .L72+24	@ tmp271,
 655 0164 1800     		movs	r0, r3	@, tmp271
 656 0166 FFF7FEFF 		bl	Usart2Send	@
 422:src/main.c    **** 	#endif
 423:src/main.c    **** 	#ifdef WITH_HYST
 424:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 657              		.loc 2 424 0
 658 016a 974B     		ldr	r3, .L72+28	@ tmp272,
 659 016c 1800     		movs	r0, r3	@, tmp272
 660 016e FFF7FEFF 		bl	Usart2Send	@
 425:src/main.c    **** 	#endif
 426:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 427:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 428:src/main.c    **** 	#endif
 429:src/main.c    **** 	#ifdef USE_WITH_SYNC
 430:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 431:src/main.c    **** 	#else
 432:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 661              		.loc 2 432 0
 662 0172 964B     		ldr	r3, .L72+32	@ tmp273,
 663 0174 1800     		movs	r0, r3	@, tmp273
 664 0176 FFF7FEFF 		bl	Usart2Send	@
ARM GAS  /tmp/ccI8cyDB.s 			page 38


 433:src/main.c    **** 	#endif
 434:src/main.c    **** 	#ifdef USE_GSM
 435:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 665              		.loc 2 435 0
 666 017a 954B     		ldr	r3, .L72+36	@ tmp274,
 667 017c 1800     		movs	r0, r3	@, tmp274
 668 017e FFF7FEFF 		bl	Usart2Send	@
 436:src/main.c    **** 	#endif
 437:src/main.c    **** 
 438:src/main.c    **** 
 439:src/main.c    **** 
 440:src/main.c    **** 	for (i = 0; i < 8; i++)
 669              		.loc 2 440 0
 670 0182 8F23     		movs	r3, #143	@ tmp275,
 671 0184 6B44     		add	r3, r3, sp	@ tmp275,
 672 0186 0022     		movs	r2, #0	@ tmp276,
 673 0188 1A70     		strb	r2, [r3]	@ tmp277, i
 674 018a 1DE0     		b	.L21	@
 675              	.L24:
 441:src/main.c    **** 	{
 442:src/main.c    **** 		if (LED)
 676              		.loc 2 442 0
 677 018c 9023     		movs	r3, #144	@ tmp631,
 678 018e DB05     		lsls	r3, r3, #23	@ D.7151, tmp631,
 679 0190 9B8A     		ldrh	r3, [r3, #20]	@ tmp279,
 680 0192 9BB2     		uxth	r3, r3	@ D.7152, tmp279
 681 0194 1A00     		movs	r2, r3	@ D.7153, D.7152
 682 0196 8023     		movs	r3, #128	@ tmp632,
 683 0198 5B01     		lsls	r3, r3, #5	@ tmp280, tmp632,
 684 019a 1340     		ands	r3, r2	@ D.7153, D.7153
 685 019c 05D0     		beq	.L22	@,
 443:src/main.c    **** 			LED_OFF;
 686              		.loc 2 443 0
 687 019e 9023     		movs	r3, #144	@ tmp629,
 688 01a0 DB05     		lsls	r3, r3, #23	@ D.7151, tmp629,
 689 01a2 8022     		movs	r2, #128	@ tmp630,
 690 01a4 5205     		lsls	r2, r2, #21	@ tmp281, tmp630,
 691 01a6 9A61     		str	r2, [r3, #24]	@ tmp281, _160->BSRR
 692 01a8 04E0     		b	.L23	@
 693              	.L22:
 444:src/main.c    **** 		else
 445:src/main.c    **** 			LED_ON;
 694              		.loc 2 445 0
 695 01aa 9023     		movs	r3, #144	@ tmp627,
 696 01ac DB05     		lsls	r3, r3, #23	@ D.7151, tmp627,
 697 01ae 8022     		movs	r2, #128	@ tmp628,
 698 01b0 5201     		lsls	r2, r2, #5	@ tmp282, tmp628,
 699 01b2 9A61     		str	r2, [r3, #24]	@ tmp282, _162->BSRR
 700              	.L23:
 446:src/main.c    **** 
 447:src/main.c    **** 		Wait_ms (250);
 701              		.loc 2 447 0 discriminator 2
 702 01b4 FA20     		movs	r0, #250	@,
 703 01b6 FFF7FEFF 		bl	Wait_ms	@
 440:src/main.c    **** 	{
 704              		.loc 2 440 0 discriminator 2
 705 01ba 8F23     		movs	r3, #143	@ tmp283,
ARM GAS  /tmp/ccI8cyDB.s 			page 39


 706 01bc 6B44     		add	r3, r3, sp	@ tmp283,
 707 01be 1A78     		ldrb	r2, [r3]	@ D.7154, i
 708 01c0 8F23     		movs	r3, #143	@ tmp284,
 709 01c2 6B44     		add	r3, r3, sp	@ tmp284,
 710 01c4 0132     		adds	r2, r2, #1	@ tmp285,
 711 01c6 1A70     		strb	r2, [r3]	@ tmp286, i
 712              	.L21:
 440:src/main.c    **** 	{
 713              		.loc 2 440 0 is_stmt 0 discriminator 1
 714 01c8 8F23     		movs	r3, #143	@ tmp287,
 715 01ca 6B44     		add	r3, r3, sp	@ tmp287,
 716 01cc 1B78     		ldrb	r3, [r3]	@ tmp288, i
 717 01ce 072B     		cmp	r3, #7	@ tmp288,
 718 01d0 DCD9     		bls	.L24	@,
 448:src/main.c    **** 	}
 449:src/main.c    **** 
 450:src/main.c    **** 
 451:src/main.c    **** 	timer_standby = 2000;
 719              		.loc 2 451 0 is_stmt 1
 720 01d2 804B     		ldr	r3, .L72+40	@ tmp289,
 721 01d4 FA22     		movs	r2, #250	@ tmp626,
 722 01d6 D200     		lsls	r2, r2, #3	@ tmp290, tmp626,
 723 01d8 1A80     		strh	r2, [r3]	@ tmp291, timer_standby
 452:src/main.c    **** 	FuncsGSMReset();
 724              		.loc 2 452 0
 725 01da FFF7FEFF 		bl	FuncsGSMReset	@
 453:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 726              		.loc 2 453 0
 727 01de 0220     		movs	r0, #2	@,
 728 01e0 FFF7FEFF 		bl	Usart1Mode	@
 729              	.L63:
 454:src/main.c    **** 
 455:src/main.c    **** 	// while (1)
 456:src/main.c    **** 	// {
 457:src/main.c    **** 	// 	if (SYNCP)
 458:src/main.c    **** 	// 	{
 459:src/main.c    **** 	// 		SYNCP_OFF;
 460:src/main.c    **** 	// 		LED_OFF;
 461:src/main.c    **** 	// 	}
 462:src/main.c    **** 	// 	else
 463:src/main.c    **** 	// 	{
 464:src/main.c    **** 	// 		SYNCP_ON;
 465:src/main.c    **** 	// 		LED_ON;
 466:src/main.c    **** 	// 	}
 467:src/main.c    **** 	// 	Wait_ms(10);
 468:src/main.c    **** 	//
 469:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 470:src/main.c    **** 	// 	// {
 471:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 472:src/main.c    **** 	// 	// 	Wait_ms (10);
 473:src/main.c    **** 	// 	// }
 474:src/main.c    **** 	// }
 475:src/main.c    **** 
 476:src/main.c    **** 
 477:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 478:src/main.c    **** 	// while (1)
 479:src/main.c    **** 	// {
ARM GAS  /tmp/ccI8cyDB.s 			page 40


 480:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 481:src/main.c    **** 	// 	{
 482:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 483:src/main.c    **** 	// 		Wait_ms(10);
 484:src/main.c    **** 	// 	}
 485:src/main.c    **** 	//
 486:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 487:src/main.c    **** 	// 	{
 488:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 489:src/main.c    **** 	// 		Wait_ms(10);
 490:src/main.c    **** 	// 	}
 491:src/main.c    **** 	// }
 492:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 493:src/main.c    **** 
 494:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 495:src/main.c    **** 	// i = 0;
 496:src/main.c    **** 	// while (1)
 497:src/main.c    **** 	// {
 498:src/main.c    **** 	// 	switch (i)
 499:src/main.c    **** 	// 	{
 500:src/main.c    **** 	// 		case 0:
 501:src/main.c    **** 	// 			//habilitar y esperar el final de la secuencia
 502:src/main.c    **** 	// 			ADC1->CR |= ADC_CR_ADSTART;
 503:src/main.c    **** 	// 			seq_ready = 0;
 504:src/main.c    **** 	// 			i++;
 505:src/main.c    **** 	// 			break;
 506:src/main.c    **** 	//
 507:src/main.c    **** 	// 		case 1:
 508:src/main.c    **** 	// 			if (seq_ready)		//esoty sincronizado
 509:src/main.c    **** 	// 				i++;
 510:src/main.c    **** 	// 			break;
 511:src/main.c    **** 	//
 512:src/main.c    **** 	// 		case 2:
 513:src/main.c    **** 	// 			RelayOn();
 514:src/main.c    **** 	// 			timer_standby = 50;
 515:src/main.c    **** 	// 			LED_ON;
 516:src/main.c    **** 	// 			i++;
 517:src/main.c    **** 	// 			break;
 518:src/main.c    **** 	//
 519:src/main.c    **** 	// 		case 3:
 520:src/main.c    **** 	// 			if (!timer_standby)
 521:src/main.c    **** 	// 			{
 522:src/main.c    **** 	// 				RelayOff();
 523:src/main.c    **** 	// 				LED_OFF;
 524:src/main.c    **** 	// 				i++;
 525:src/main.c    **** 	// 				timer_standby = 10000;
 526:src/main.c    **** 	// 			}
 527:src/main.c    **** 	// 			break;
 528:src/main.c    **** 	//
 529:src/main.c    **** 	// 		case 4:
 530:src/main.c    **** 	// 			if (!timer_standby)
 531:src/main.c    **** 	// 			{
 532:src/main.c    **** 	// 				i = 2;
 533:src/main.c    **** 	// 			}
 534:src/main.c    **** 	// 			break;
 535:src/main.c    **** 	// 	}
 536:src/main.c    **** 	//
ARM GAS  /tmp/ccI8cyDB.s 			page 41


 537:src/main.c    **** 	// 	UpdateRelay ();
 538:src/main.c    **** 	// }
 539:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 540:src/main.c    **** 
 541:src/main.c    **** 
 542:src/main.c    **** //--- Programa de pruebas I meas -----
 543:src/main.c    **** 	while (1)
 544:src/main.c    **** 	{
 545:src/main.c    **** 		switch (main_state)
 730              		.loc 2 545 0
 731 01e4 7723     		movs	r3, #119	@ tmp292,
 732 01e6 6B44     		add	r3, r3, sp	@ tmp292,
 733 01e8 1B78     		ldrb	r3, [r3]	@ D.7153, main_state
 734 01ea 092B     		cmp	r3, #9	@ D.7153,
 735 01ec 00D9     		bls	.LCB471	@
 736 01ee 8BE2     		b	.L25	@long jump	@
 737              	.LCB471:
 738 01f0 9A00     		lsls	r2, r3, #2	@ tmp293, D.7153,
 739 01f2 794B     		ldr	r3, .L72+44	@ tmp295,
 740 01f4 D318     		adds	r3, r2, r3	@ tmp294, tmp293, tmp295
 741 01f6 1B68     		ldr	r3, [r3]	@ tmp296,
 742 01f8 9F46     		mov	pc, r3	@ tmp296
 743              		.section	.rodata.main,"a",%progbits
 744              		.align	2
 745              	.L27:
 746 0000 FA010000 		.word	.L26
 747 0004 1C020000 		.word	.L28
 748 0008 54020000 		.word	.L29
 749 000c C0020000 		.word	.L30
 750 0010 12030000 		.word	.L31
 751 0014 0C040000 		.word	.L32
 752 0018 08070000 		.word	.L25
 753 001c 08070000 		.word	.L25
 754 0020 08070000 		.word	.L25
 755 0024 62040000 		.word	.L33
 756              		.section	.text.main
 757              	.L26:
 546:src/main.c    **** 		{
 547:src/main.c    **** 			case MAIN_INIT:
 548:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 758              		.loc 2 548 0
 759 01fa 0A20     		movs	r0, #10	@,
 760 01fc FFF7FEFF 		bl	Update_TIM3_CH1	@
 549:src/main.c    **** 				main_state = SYNCHRO_ADC;
 761              		.loc 2 549 0
 762 0200 7723     		movs	r3, #119	@ tmp297,
 763 0202 6B44     		add	r3, r3, sp	@ tmp297,
 764 0204 0122     		movs	r2, #1	@ tmp298,
 765 0206 1A70     		strb	r2, [r3]	@ tmp299, main_state
 550:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 766              		.loc 2 550 0
 767 0208 744B     		ldr	r3, .L72+48	@ D.7157,
 768 020a 744A     		ldr	r2, .L72+48	@ D.7157,
 769 020c 9268     		ldr	r2, [r2, #8]	@ D.7150, _179->CR
 770 020e 0421     		movs	r1, #4	@ tmp300,
 771 0210 0A43     		orrs	r2, r1	@ D.7150, tmp300
 772 0212 9A60     		str	r2, [r3, #8]	@ D.7150, _178->CR
ARM GAS  /tmp/ccI8cyDB.s 			page 42


 551:src/main.c    **** 				seq_ready = 0;
 773              		.loc 2 551 0
 774 0214 724B     		ldr	r3, .L72+52	@ tmp301,
 775 0216 0022     		movs	r2, #0	@ tmp302,
 776 0218 1A70     		strb	r2, [r3]	@ tmp303, seq_ready
 552:src/main.c    **** 				break;
 777              		.loc 2 552 0
 778 021a 85E2     		b	.L34	@
 779              	.L28:
 553:src/main.c    **** 
 554:src/main.c    **** 			case SYNCHRO_ADC:
 555:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 780              		.loc 2 555 0
 781 021c 704B     		ldr	r3, .L72+52	@ tmp304,
 782 021e 1B78     		ldrb	r3, [r3]	@ tmp305, seq_ready
 783 0220 DBB2     		uxtb	r3, r3	@ D.7154, tmp305
 784 0222 002B     		cmp	r3, #0	@ D.7154,
 785 0224 00D1     		bne	.LCB506	@
 786 0226 74E2     		b	.L64	@long jump	@
 787              	.LCB506:
 556:src/main.c    **** 				{
 557:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 788              		.loc 2 557 0
 789 0228 6E4B     		ldr	r3, .L72+56	@ tmp306,
 790 022a 1800     		movs	r0, r3	@, tmp306
 791 022c FFF7FEFF 		bl	Usart2Send	@
 558:src/main.c    **** 
 559:src/main.c    **** #ifdef USE_GSM
 560:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 792              		.loc 2 560 0
 793 0230 6D4B     		ldr	r3, .L72+60	@ tmp307,
 794 0232 1800     		movs	r0, r3	@, tmp307
 795 0234 FFF7FEFF 		bl	Usart2Send	@
 561:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 796              		.loc 2 561 0
 797 0238 7723     		movs	r3, #119	@ tmp308,
 798 023a 6B44     		add	r3, r3, sp	@ tmp308,
 799 023c 0222     		movs	r2, #2	@ tmp309,
 800 023e 1A70     		strb	r2, [r3]	@ tmp310, main_state
 562:src/main.c    **** 					timer_standby = 0;
 801              		.loc 2 562 0
 802 0240 644B     		ldr	r3, .L72+40	@ tmp311,
 803 0242 0022     		movs	r2, #0	@ tmp312,
 804 0244 1A80     		strh	r2, [r3]	@ tmp313, timer_standby
 563:src/main.c    **** 					zero_current_loc = 0;
 805              		.loc 2 563 0
 806 0246 0023     		movs	r3, #0	@ tmp314,
 807 0248 2193     		str	r3, [sp, #132]	@ tmp314, zero_current_loc
 564:src/main.c    **** 					i = 0;
 808              		.loc 2 564 0
 809 024a 8F23     		movs	r3, #143	@ tmp315,
 810 024c 6B44     		add	r3, r3, sp	@ tmp315,
 811 024e 0022     		movs	r2, #0	@ tmp316,
 812 0250 1A70     		strb	r2, [r3]	@ tmp317, i
 565:src/main.c    **** #else
 566:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 567:src/main.c    **** 					timer_standby = 60000;
ARM GAS  /tmp/ccI8cyDB.s 			page 43


 568:src/main.c    **** 					zero_current_loc = 0;
 569:src/main.c    **** 					i = 0;
 570:src/main.c    **** #endif
 571:src/main.c    **** 				}
 572:src/main.c    **** 				break;
 813              		.loc 2 572 0
 814 0252 5EE2     		b	.L64	@
 815              	.L29:
 573:src/main.c    **** 
 574:src/main.c    **** 			case SET_ZERO_CURRENT:
 575:src/main.c    **** 				if (!timer_standby)
 816              		.loc 2 575 0
 817 0254 5F4B     		ldr	r3, .L72+40	@ tmp318,
 818 0256 1B88     		ldrh	r3, [r3]	@ tmp319, timer_standby
 819 0258 9BB2     		uxth	r3, r3	@ D.7152, tmp319
 820 025a 002B     		cmp	r3, #0	@ D.7152,
 821 025c 00D0     		beq	.LCB534	@
 822 025e 5AE2     		b	.L65	@long jump	@
 823              	.LCB534:
 576:src/main.c    **** 				{
 577:src/main.c    **** 					if (i < 32)
 824              		.loc 2 577 0
 825 0260 8F23     		movs	r3, #143	@ tmp320,
 826 0262 6B44     		add	r3, r3, sp	@ tmp320,
 827 0264 1B78     		ldrb	r3, [r3]	@ tmp321, i
 828 0266 1F2B     		cmp	r3, #31	@ tmp321,
 829 0268 1AD8     		bhi	.L37	@,
 578:src/main.c    **** 					{
 579:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 830              		.loc 2 579 0
 831 026a 5D4B     		ldr	r3, .L72+52	@ tmp322,
 832 026c 1B78     		ldrb	r3, [r3]	@ tmp323, seq_ready
 833 026e DBB2     		uxtb	r3, r3	@ D.7154, tmp323
 834 0270 002B     		cmp	r3, #0	@ D.7154,
 835 0272 00D1     		bne	.LCB544	@
 836 0274 4FE2     		b	.L65	@long jump	@
 837              	.LCB544:
 580:src/main.c    **** 						{
 581:src/main.c    **** 							seq_ready = 0;
 838              		.loc 2 581 0
 839 0276 5A4B     		ldr	r3, .L72+52	@ tmp324,
 840 0278 0022     		movs	r2, #0	@ tmp325,
 841 027a 1A70     		strb	r2, [r3]	@ tmp326, seq_ready
 582:src/main.c    **** 							zero_current_loc += I_Sense;
 842              		.loc 2 582 0
 843 027c 5B4B     		ldr	r3, .L72+64	@ tmp327,
 844 027e 9B88     		ldrh	r3, [r3, #4]	@ tmp329,
 845 0280 9BB2     		uxth	r3, r3	@ D.7152, tmp329
 846 0282 1A00     		movs	r2, r3	@ D.7156, D.7152
 847 0284 219B     		ldr	r3, [sp, #132]	@ tmp331, zero_current_loc
 848 0286 9B18     		adds	r3, r3, r2	@ tmp330, tmp331, D.7156
 849 0288 2193     		str	r3, [sp, #132]	@ tmp330, zero_current_loc
 583:src/main.c    **** 							i++;
 850              		.loc 2 583 0
 851 028a 8F23     		movs	r3, #143	@ tmp332,
 852 028c 6B44     		add	r3, r3, sp	@ tmp332,
 853 028e 1A78     		ldrb	r2, [r3]	@ D.7154, i
ARM GAS  /tmp/ccI8cyDB.s 			page 44


 854 0290 8F23     		movs	r3, #143	@ tmp333,
 855 0292 6B44     		add	r3, r3, sp	@ tmp333,
 856 0294 0132     		adds	r2, r2, #1	@ tmp334,
 857 0296 1A70     		strb	r2, [r3]	@ tmp335, i
 584:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 858              		.loc 2 584 0
 859 0298 4E4B     		ldr	r3, .L72+40	@ tmp336,
 860 029a 0222     		movs	r2, #2	@ tmp337,
 861 029c 1A80     		strh	r2, [r3]	@ tmp338, timer_standby
 585:src/main.c    **** 						}
 586:src/main.c    **** 					}
 587:src/main.c    **** 					else
 588:src/main.c    **** 					{
 589:src/main.c    **** 						zero_current_loc >>= 5;
 590:src/main.c    **** 						zero_current = zero_current_loc;
 591:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
 592:src/main.c    **** 						i = 0;
 593:src/main.c    **** 					}
 594:src/main.c    **** 				}
 595:src/main.c    **** 				break;
 862              		.loc 2 595 0
 863 029e 3AE2     		b	.L65	@
 864              	.L37:
 589:src/main.c    **** 						zero_current = zero_current_loc;
 865              		.loc 2 589 0
 866 02a0 219B     		ldr	r3, [sp, #132]	@ tmp340, zero_current_loc
 867 02a2 5B09     		lsrs	r3, r3, #5	@ tmp339, tmp340,
 868 02a4 2193     		str	r3, [sp, #132]	@ tmp339, zero_current_loc
 590:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
 869              		.loc 2 590 0
 870 02a6 219B     		ldr	r3, [sp, #132]	@ tmp342, zero_current_loc
 871 02a8 9AB2     		uxth	r2, r3	@ D.7152, tmp341
 872 02aa 514B     		ldr	r3, .L72+68	@ tmp343,
 873 02ac 1A80     		strh	r2, [r3]	@ tmp344, zero_current
 591:src/main.c    **** 						i = 0;
 874              		.loc 2 591 0
 875 02ae 7723     		movs	r3, #119	@ tmp345,
 876 02b0 6B44     		add	r3, r3, sp	@ tmp345,
 877 02b2 0322     		movs	r2, #3	@ tmp346,
 878 02b4 1A70     		strb	r2, [r3]	@ tmp347, main_state
 592:src/main.c    **** 					}
 879              		.loc 2 592 0
 880 02b6 8F23     		movs	r3, #143	@ tmp348,
 881 02b8 6B44     		add	r3, r3, sp	@ tmp348,
 882 02ba 0022     		movs	r2, #0	@ tmp349,
 883 02bc 1A70     		strb	r2, [r3]	@ tmp350, i
 884              		.loc 2 595 0
 885 02be 2AE2     		b	.L65	@
 886              	.L30:
 596:src/main.c    **** 
 597:src/main.c    **** 			case SET_COUNTERS_AND_PHONE0:
 598:src/main.c    **** 				acum_secs = 0;
 887              		.loc 2 598 0
 888 02c0 0023     		movs	r3, #0	@ tmp351,
 889 02c2 1F93     		str	r3, [sp, #124]	@ tmp351, acum_secs
 599:src/main.c    **** 				acum_secs_index = 0;
 890              		.loc 2 599 0
ARM GAS  /tmp/ccI8cyDB.s 			page 45


 891 02c4 8223     		movs	r3, #130	@ tmp352,
 892 02c6 6B44     		add	r3, r3, sp	@ tmp352,
 893 02c8 0022     		movs	r2, #0	@ tmp353,
 894 02ca 1A80     		strh	r2, [r3]	@ tmp354, acum_secs_index
 600:src/main.c    **** 				acum_hours = 0;
 895              		.loc 2 600 0
 896 02cc 0023     		movs	r3, #0	@ tmp355,
 897 02ce 1E93     		str	r3, [sp, #120]	@ tmp355, acum_hours
 601:src/main.c    **** 
 602:src/main.c    **** 				counters_mode = 0;
 898              		.loc 2 602 0
 899 02d0 7523     		movs	r3, #117	@ tmp356,
 900 02d2 6B44     		add	r3, r3, sp	@ tmp356,
 901 02d4 0022     		movs	r2, #0	@ tmp357,
 902 02d6 1A70     		strb	r2, [r3]	@ tmp358, counters_mode
 603:src/main.c    **** 				LED_OFF;
 903              		.loc 2 603 0
 904 02d8 9023     		movs	r3, #144	@ tmp624,
 905 02da DB05     		lsls	r3, r3, #23	@ D.7151, tmp624,
 906 02dc 8022     		movs	r2, #128	@ tmp625,
 907 02de 5205     		lsls	r2, r2, #21	@ tmp359, tmp625,
 908 02e0 9A61     		str	r2, [r3, #24]	@ tmp359, _209->BSRR
 604:src/main.c    **** 
 605:src/main.c    **** 				//espero que el telefono este libre
 606:src/main.c    **** 				//TODO: timeout aca
 607:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_ready)
 909              		.loc 2 607 0
 910 02e2 FFF7FEFF 		bl	FuncsGSMStateAsk	@
 911 02e6 031E     		subs	r3, r0, #0	@ tmp360,,
 912 02e8 052B     		cmp	r3, #5	@ tmp360,
 913 02ea 00D0     		beq	.LCB608	@
 914 02ec 15E2     		b	.L66	@long jump	@
 915              	.LCB608:
 608:src/main.c    **** 				{
 609:src/main.c    **** 					Usart2Send((char *) (const char *) "Reports by SMS\r\n");
 916              		.loc 2 609 0
 917 02ee 414B     		ldr	r3, .L72+72	@ tmp362,
 918 02f0 1800     		movs	r0, r3	@, tmp362
 919 02f2 FFF7FEFF 		bl	Usart2Send	@
 610:src/main.c    **** 					main_state = SET_COUNTERS_AND_PHONE1;
 920              		.loc 2 610 0
 921 02f6 7723     		movs	r3, #119	@ tmp363,
 922 02f8 6B44     		add	r3, r3, sp	@ tmp363,
 923 02fa 0422     		movs	r2, #4	@ tmp364,
 924 02fc 1A70     		strb	r2, [r3]	@ tmp365, main_state
 611:src/main.c    **** 
 612:src/main.c    **** 					//pido imei
 613:src/main.c    **** 					s_lcd[0] = '\0';
 925              		.loc 2 613 0
 926 02fe 01AB     		add	r3, sp, #4	@ tmp366,,
 927 0300 0022     		movs	r2, #0	@ tmp367,
 928 0302 1A70     		strb	r2, [r3]	@ tmp368, s_lcd
 614:src/main.c    **** 					FuncsGSMCommandAnswer ("AT+GSN\r\n" , s_lcd);
 929              		.loc 2 614 0
 930 0304 01AA     		add	r2, sp, #4	@ tmp369,,
 931 0306 3C4B     		ldr	r3, .L72+76	@ tmp370,
 932 0308 1100     		movs	r1, r2	@, tmp369
ARM GAS  /tmp/ccI8cyDB.s 			page 46


 933 030a 1800     		movs	r0, r3	@, tmp370
 934 030c FFF7FEFF 		bl	FuncsGSMCommandAnswer	@
 615:src/main.c    **** 				}
 616:src/main.c    **** 				break;
 935              		.loc 2 616 0
 936 0310 03E2     		b	.L66	@
 937              	.L31:
 617:src/main.c    **** 
 618:src/main.c    **** 			case SET_COUNTERS_AND_PHONE1:
 619:src/main.c    **** 				//espero que el telefono este libre
 620:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_ready)
 938              		.loc 2 620 0
 939 0312 FFF7FEFF 		bl	FuncsGSMStateAsk	@
 940 0316 031E     		subs	r3, r0, #0	@ tmp371,,
 941 0318 052B     		cmp	r3, #5	@ tmp371,
 942 031a 00D0     		beq	.LCB631	@
 943 031c FFE1     		b	.L67	@long jump	@
 944              	.LCB631:
 621:src/main.c    **** 				{
 622:src/main.c    **** 					i = strlen(s_lcd);
 945              		.loc 2 622 0
 946 031e 01AB     		add	r3, sp, #4	@ tmp373,,
 947 0320 1800     		movs	r0, r3	@, tmp373
 948 0322 FFF7FEFF 		bl	strlen	@
 949 0326 0200     		movs	r2, r0	@ D.7156,
 950 0328 8F23     		movs	r3, #143	@ tmp374,
 951 032a 6B44     		add	r3, r3, sp	@ tmp374,
 952 032c 1A70     		strb	r2, [r3]	@ tmp375, i
 623:src/main.c    **** 					strncpy(param_struct.imei, s_lcd, (i - 2));
 953              		.loc 2 623 0
 954 032e 8F23     		movs	r3, #143	@ tmp376,
 955 0330 6B44     		add	r3, r3, sp	@ tmp376,
 956 0332 1B78     		ldrb	r3, [r3]	@ D.7153, i
 957 0334 023B     		subs	r3, r3, #2	@ D.7153,
 958 0336 1A00     		movs	r2, r3	@ D.7156, D.7153
 959 0338 01A9     		add	r1, sp, #4	@ tmp377,,
 960 033a 304B     		ldr	r3, .L72+80	@ tmp378,
 961 033c 1800     		movs	r0, r3	@, tmp378
 962 033e FFF7FEFF 		bl	strncpy	@
 624:src/main.c    **** 					Usart2Send("IMEI: ");
 963              		.loc 2 624 0
 964 0342 2F4B     		ldr	r3, .L72+84	@ tmp379,
 965 0344 1800     		movs	r0, r3	@, tmp379
 966 0346 FFF7FEFF 		bl	Usart2Send	@
 625:src/main.c    **** 					Usart2Send(param_struct.imei);
 967              		.loc 2 625 0
 968 034a 2C4B     		ldr	r3, .L72+80	@ tmp380,
 969 034c 1800     		movs	r0, r3	@, tmp380
 970 034e FFF7FEFF 		bl	Usart2Send	@
 626:src/main.c    **** 					Usart2Send("\r\n");
 971              		.loc 2 626 0
 972 0352 2C4B     		ldr	r3, .L72+88	@ tmp381,
 973 0354 1800     		movs	r0, r3	@, tmp381
 974 0356 FFF7FEFF 		bl	Usart2Send	@
 627:src/main.c    **** 
 628:src/main.c    **** 					//mando SMS con mi info
 629:src/main.c    **** 					strcpy(s_lcd, "IMEI: ");
ARM GAS  /tmp/ccI8cyDB.s 			page 47


 975              		.loc 2 629 0
 976 035a 01AB     		add	r3, sp, #4	@ tmp382,,
 977 035c 284A     		ldr	r2, .L72+84	@ tmp383,
 978 035e 1168     		ldr	r1, [r2]	@ tmp386,
 979 0360 1960     		str	r1, [r3]	@ tmp386,
 980 0362 9188     		ldrh	r1, [r2, #4]	@ tmp387,
 981 0364 9980     		strh	r1, [r3, #4]	@ tmp387,
 982 0366 9279     		ldrb	r2, [r2, #6]	@ tmp388,
 983 0368 9A71     		strb	r2, [r3, #6]	@ tmp388,
 630:src/main.c    **** 					strcat(s_lcd, param_struct.imei);
 984              		.loc 2 630 0
 985 036a 244A     		ldr	r2, .L72+80	@ tmp389,
 986 036c 01AB     		add	r3, sp, #4	@ tmp390,,
 987 036e 1100     		movs	r1, r2	@, tmp389
 988 0370 1800     		movs	r0, r3	@, tmp390
 989 0372 FFF7FEFF 		bl	strcat	@
 631:src/main.c    **** 					strcat(s_lcd, ", ACTIVO");
 990              		.loc 2 631 0
 991 0376 01AB     		add	r3, sp, #4	@ tmp391,,
 992 0378 1800     		movs	r0, r3	@, tmp391
 993 037a FFF7FEFF 		bl	strlen	@
 994 037e 0300     		movs	r3, r0	@ tmp392,
 995 0380 1A00     		movs	r2, r3	@ D.7156, tmp393
 996 0382 01AB     		add	r3, sp, #4	@ tmp394,,
 997 0384 9A18     		adds	r2, r3, r2	@ D.7158, tmp394, D.7156
 998 0386 204B     		ldr	r3, .L72+92	@ tmp395,
 999 0388 1000     		movs	r0, r2	@ tmp396, D.7158
 1000 038a 1900     		movs	r1, r3	@ tmp397, tmp395
 1001 038c 0923     		movs	r3, #9	@ tmp398,
 1002 038e 1A00     		movs	r2, r3	@, tmp398
 1003 0390 FFF7FEFF 		bl	memcpy	@
 632:src/main.c    **** 
 633:src/main.c    **** 					FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 1004              		.loc 2 633 0
 1005 0394 074A     		ldr	r2, .L72+8	@ tmp401,
 1006 0396 01AB     		add	r3, sp, #4	@ tmp402,,
 1007 0398 1100     		movs	r1, r2	@, tmp401
 1008 039a 1800     		movs	r0, r3	@, tmp402
 1009 039c FFF7FEFF 		bl	FuncsGSMSendSMS	@
 634:src/main.c    **** 					// FuncsGSMSendSMS("forro", param_struct.num_reportar);
 635:src/main.c    **** 					main_state = LAMP_OFF;
 1010              		.loc 2 635 0
 1011 03a0 7723     		movs	r3, #119	@ tmp403,
 1012 03a2 6B44     		add	r3, r3, sp	@ tmp403,
 1013 03a4 0522     		movs	r2, #5	@ tmp404,
 1014 03a6 1A70     		strb	r2, [r3]	@ tmp405, main_state
 636:src/main.c    **** 				}
 637:src/main.c    **** 				break;
 1015              		.loc 2 637 0
 1016 03a8 B9E1     		b	.L67	@
 1017              	.L73:
 1018 03aa C046     		.align	2
 1019              	.L72:
 1020 03ac 80BB0000 		.word	48000
 1021 03b0 00FC0008 		.word	134282240
 1022 03b4 00000000 		.word	param_struct
 1023 03b8 00000000 		.word	.LC1
ARM GAS  /tmp/ccI8cyDB.s 			page 48


 1024 03bc 0C000000 		.word	.LC3
 1025 03c0 34000000 		.word	.LC5
 1026 03c4 44000000 		.word	.LC7
 1027 03c8 58000000 		.word	.LC9
 1028 03cc 70000000 		.word	.LC11
 1029 03d0 80000000 		.word	.LC13
 1030 03d4 00000000 		.word	timer_standby
 1031 03d8 00000000 		.word	.L27
 1032 03dc 00240140 		.word	1073816576
 1033 03e0 00000000 		.word	seq_ready
 1034 03e4 9C000000 		.word	.LC18
 1035 03e8 A8000000 		.word	.LC20
 1036 03ec 00000000 		.word	adc_ch
 1037 03f0 00000000 		.word	zero_current
 1038 03f4 D0000000 		.word	.LC24
 1039 03f8 E4000000 		.word	.LC26
 1040 03fc 18000000 		.word	param_struct+24
 1041 0400 F0000000 		.word	.LC29
 1042 0404 F8000000 		.word	.LC31
 1043 0408 FC000000 		.word	.LC33
 1044              	.L32:
 638:src/main.c    **** 
 639:src/main.c    **** 			case LAMP_OFF:
 640:src/main.c    **** 				if (!tt_relay_on_off)
 1045              		.loc 2 640 0
 1046 040c D04B     		ldr	r3, .L74	@ tmp406,
 1047 040e 1B88     		ldrh	r3, [r3]	@ tmp407, tt_relay_on_off
 1048 0410 9BB2     		uxth	r3, r3	@ D.7152, tmp407
 1049 0412 002B     		cmp	r3, #0	@ D.7152,
 1050 0414 00D0     		beq	.LCB729	@
 1051 0416 84E1     		b	.L68	@long jump	@
 1052              	.LCB729:
 641:src/main.c    **** 				{
 642:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 1053              		.loc 2 642 0
 1054 0418 FFF7FEFF 		bl	GetPhoto	@
 1055 041c 0300     		movs	r3, r0	@ tmp408,
 1056 041e 1A1E     		subs	r2, r3, #0	@ D.7152, tmp409,
 1057 0420 CC4B     		ldr	r3, .L74+4	@ tmp410,
 1058 0422 9A42     		cmp	r2, r3	@ D.7152, tmp410
 1059 0424 00D8     		bhi	.LCB735	@
 1060 0426 7CE1     		b	.L68	@long jump	@
 1061              	.LCB735:
 643:src/main.c    **** 					{
 644:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 645:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 1062              		.loc 2 645 0
 1063 0428 1A20     		movs	r0, #26	@,
 1064 042a FFF7FEFF 		bl	Update_TIM3_CH1	@
 646:src/main.c    **** #else
 647:src/main.c    **** 						Update_TIM3_CH1 (PWM_MAX);
 648:src/main.c    **** #endif
 649:src/main.c    **** 						// RelayOn();
 650:src/main.c    **** 						main_state = LAMP_ON;
 1065              		.loc 2 650 0
 1066 042e 7723     		movs	r3, #119	@ tmp411,
 1067 0430 6B44     		add	r3, r3, sp	@ tmp411,
ARM GAS  /tmp/ccI8cyDB.s 			page 49


 1068 0432 0922     		movs	r2, #9	@ tmp412,
 1069 0434 1A70     		strb	r2, [r3]	@ tmp413, main_state
 651:src/main.c    **** 						tt_relay_on_off = 10000;
 1070              		.loc 2 651 0
 1071 0436 C64B     		ldr	r3, .L74	@ tmp414,
 1072 0438 C74A     		ldr	r2, .L74+8	@ tmp415,
 1073 043a 1A80     		strh	r2, [r3]	@ tmp416, tt_relay_on_off
 652:src/main.c    **** 						Usart2Send("PRENDIDO\r\n");
 1074              		.loc 2 652 0
 1075 043c C74B     		ldr	r3, .L74+12	@ tmp417,
 1076 043e 1800     		movs	r0, r3	@, tmp417
 1077 0440 FFF7FEFF 		bl	Usart2Send	@
 653:src/main.c    **** 						FuncsGSMSendSMS("PRENDIDO", param_struct.num_reportar);
 1078              		.loc 2 653 0
 1079 0444 C64A     		ldr	r2, .L74+16	@ tmp418,
 1080 0446 C74B     		ldr	r3, .L74+20	@ tmp419,
 1081 0448 1100     		movs	r1, r2	@, tmp418
 1082 044a 1800     		movs	r0, r3	@, tmp419
 1083 044c FFF7FEFF 		bl	FuncsGSMSendSMS	@
 654:src/main.c    **** 						LED_ON;
 1084              		.loc 2 654 0
 1085 0450 9023     		movs	r3, #144	@ tmp622,
 1086 0452 DB05     		lsls	r3, r3, #23	@ D.7151, tmp622,
 1087 0454 8022     		movs	r2, #128	@ tmp623,
 1088 0456 5201     		lsls	r2, r2, #5	@ tmp420, tmp623,
 1089 0458 9A61     		str	r2, [r3, #24]	@ tmp420, _243->BSRR
 655:src/main.c    **** #ifdef WITH_HYST
 656:src/main.c    **** 						hours = 0;
 1090              		.loc 2 656 0
 1091 045a C34B     		ldr	r3, .L74+24	@ tmp421,
 1092 045c 0022     		movs	r2, #0	@ tmp422,
 1093 045e 1A70     		strb	r2, [r3]	@ tmp423, hours
 657:src/main.c    **** #endif
 658:src/main.c    **** 					}
 659:src/main.c    **** 				}
 660:src/main.c    **** 				break;
 1094              		.loc 2 660 0
 1095 0460 5FE1     		b	.L68	@
 1096              	.L33:
 661:src/main.c    **** 
 662:src/main.c    **** 			case LAMP_ON:
 663:src/main.c    **** #if defined REPORTS_AIRPLANE_MODE
 664:src/main.c    **** 				switch (lamp_on_state)
 665:src/main.c    **** 				{
 666:src/main.c    **** 					case init_airplane0:
 667:src/main.c    **** 						if (FuncsGSMStateAsk() == gsm_state_ready)
 668:src/main.c    **** 						{
 669:src/main.c    **** 							//lo paso a modo avion
 670:src/main.c    **** 							s_lcd[0] = '\0';
 671:src/main.c    **** 							FuncsGSMCommandAnswer ("AT+CFUN=4\r\n" , s_lcd);
 672:src/main.c    **** 							lamp_on_state = init_airplane1;
 673:src/main.c    **** 						}
 674:src/main.c    **** 						break;
 675:src/main.c    **** 
 676:src/main.c    **** 					case init_airplane1:
 677:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 678:src/main.c    **** 						{
ARM GAS  /tmp/ccI8cyDB.s 			page 50


 679:src/main.c    **** 							//en modo avion, prendo y mido
 680:src/main.c    **** 							RelayOn();
 681:src/main.c    **** 							lamp_on_state = meas_init;
 682:src/main.c    **** 						}
 683:src/main.c    **** 						break;
 684:src/main.c    **** 
 685:src/main.c    **** 					case meas_init:
 686:src/main.c    **** 						if (RelayIsOn())
 687:src/main.c    **** 						{
 688:src/main.c    **** 							lamp_on_state = meas_meas;
 689:src/main.c    **** 							counters_mode = 1;
 690:src/main.c    **** 						}
 691:src/main.c    **** 						break;
 692:src/main.c    **** 
 693:src/main.c    **** 					case meas_meas:
 694:src/main.c    **** 						if (meas_end)
 695:src/main.c    **** 						{
 696:src/main.c    **** 							meas_end = 0;
 697:src/main.c    **** 
 698:src/main.c    **** 							if (!tt_relay_on_off)
 699:src/main.c    **** 							{
 700:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 701:src/main.c    **** 								hyst = GetHysteresis (hours);
 702:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 703:src/main.c    **** #else
 704:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 705:src/main.c    **** #endif
 706:src/main.c    **** 								{
 707:src/main.c    **** 									main_state = LAMP_OFF;
 708:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 709:src/main.c    **** 									Update_TIM3_CH1 (0);
 710:src/main.c    **** #endif
 711:src/main.c    **** 									lamp_on_state = init_airplane0;
 712:src/main.c    **** 									counters_mode = 0;
 713:src/main.c    **** 									Usart2Send("APAGADO\r\n");
 714:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 715:src/main.c    **** 									tt_relay_on_off = 10000;
 716:src/main.c    **** 									RelayOff();
 717:src/main.c    **** 									LED_OFF;
 718:src/main.c    **** 								}
 719:src/main.c    **** 								else
 720:src/main.c    **** 								{
 721:src/main.c    **** 									//No apago, tengo que reportar?
 722:src/main.c    **** 									if (show_power_index >= timer_rep)
 723:src/main.c    **** 									{
 724:src/main.c    **** 										show_power_index = 0;
 725:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 726:src/main.c    **** 										lamp_on_state = meas_reporting0;
 727:src/main.c    **** 									}
 728:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 729:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 730:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 731:src/main.c    **** #endif
 732:src/main.c    **** 								}
 733:src/main.c    **** 							}
 734:src/main.c    **** 						}
 735:src/main.c    **** 						break;
ARM GAS  /tmp/ccI8cyDB.s 			page 51


 736:src/main.c    **** 
 737:src/main.c    **** 					case meas_reporting0:
 738:src/main.c    **** 						//lo saco de modo avion
 739:src/main.c    **** 						s_lcd[0] = '\0';
 740:src/main.c    **** 						FuncsGSMCommandAnswer ("AT+CFUN=1\r\n" , s_lcd);
 741:src/main.c    **** 						lamp_on_state = meas_reporting1;
 742:src/main.c    **** 						break;
 743:src/main.c    **** 
 744:src/main.c    **** 					case meas_reporting1:
 745:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 746:src/main.c    **** 						{
 747:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 748:src/main.c    **** 							{
 749:src/main.c    **** 								ShowPower(s_lcd, power, acum_hours, acum_secs);
 750:src/main.c    **** 								Usart2Send(s_lcd);
 751:src/main.c    **** 								FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 752:src/main.c    **** 							}
 753:src/main.c    **** 							lamp_on_state = init_airplane0;
 754:src/main.c    **** 						}
 755:src/main.c    **** 						break;
 756:src/main.c    **** 
 757:src/main.c    **** 					default:
 758:src/main.c    **** 						lamp_on_state = init_airplane0;
 759:src/main.c    **** 						break;
 760:src/main.c    **** 				}
 761:src/main.c    **** 
 762:src/main.c    **** #elif defined REPORTS_NORMAL_MODE
 763:src/main.c    **** 				switch (lamp_on_state)
 1097              		.loc 2 763 0
 1098 0462 7623     		movs	r3, #118	@ tmp424,
 1099 0464 6B44     		add	r3, r3, sp	@ tmp424,
 1100 0466 1B78     		ldrb	r3, [r3]	@ D.7153, lamp_on_state
 1101 0468 052B     		cmp	r3, #5	@ D.7153,
 1102 046a 00D9     		bls	.LCB769	@
 1103 046c C1E0     		b	.L42	@long jump	@
 1104              	.LCB769:
 1105 046e 9A00     		lsls	r2, r3, #2	@ tmp425, D.7153,
 1106 0470 BE4B     		ldr	r3, .L74+28	@ tmp427,
 1107 0472 D318     		adds	r3, r2, r3	@ tmp426, tmp425, tmp427
 1108 0474 1B68     		ldr	r3, [r3]	@ tmp428,
 1109 0476 9F46     		mov	pc, r3	@ tmp428
 1110              		.section	.rodata.main
 1111              		.align	2
 1112              	.L44:
 1113 0028 78040000 		.word	.L43
 1114 002c 88040000 		.word	.L45
 1115 0030 98040000 		.word	.L46
 1116 0034 CA040000 		.word	.L47
 1117 0038 9A050000 		.word	.L48
 1118 003c C8050000 		.word	.L49
 1119              		.section	.text.main
 1120              	.L43:
 764:src/main.c    **** 				{
 765:src/main.c    **** 					case init_airplane0:
 766:src/main.c    **** 						lamp_on_state++;
 1121              		.loc 2 766 0
 1122 0478 7623     		movs	r3, #118	@ tmp429,
ARM GAS  /tmp/ccI8cyDB.s 			page 52


 1123 047a 6B44     		add	r3, r3, sp	@ tmp429,
 1124 047c 1A78     		ldrb	r2, [r3]	@ D.7159, lamp_on_state
 1125 047e 7623     		movs	r3, #118	@ tmp430,
 1126 0480 6B44     		add	r3, r3, sp	@ tmp430,
 1127 0482 0132     		adds	r2, r2, #1	@ tmp431,
 1128 0484 1A70     		strb	r2, [r3]	@ tmp432, lamp_on_state
 767:src/main.c    **** 						break;
 1129              		.loc 2 767 0
 1130 0486 BCE0     		b	.L50	@
 1131              	.L45:
 768:src/main.c    **** 
 769:src/main.c    **** 					case init_airplane1:
 770:src/main.c    **** 						lamp_on_state++;
 1132              		.loc 2 770 0
 1133 0488 7623     		movs	r3, #118	@ tmp433,
 1134 048a 6B44     		add	r3, r3, sp	@ tmp433,
 1135 048c 1A78     		ldrb	r2, [r3]	@ D.7159, lamp_on_state
 1136 048e 7623     		movs	r3, #118	@ tmp434,
 1137 0490 6B44     		add	r3, r3, sp	@ tmp434,
 1138 0492 0132     		adds	r2, r2, #1	@ tmp435,
 1139 0494 1A70     		strb	r2, [r3]	@ tmp436, lamp_on_state
 771:src/main.c    **** 						break;
 1140              		.loc 2 771 0
 1141 0496 B4E0     		b	.L50	@
 1142              	.L46:
 772:src/main.c    **** 
 773:src/main.c    **** 					case meas_init:
 774:src/main.c    **** 						RelayOn();
 1143              		.loc 2 774 0
 1144 0498 FFF7FEFF 		bl	RelayOn	@
 775:src/main.c    **** 						lamp_on_state = meas_meas;
 1145              		.loc 2 775 0
 1146 049c 7623     		movs	r3, #118	@ tmp437,
 1147 049e 6B44     		add	r3, r3, sp	@ tmp437,
 1148 04a0 0322     		movs	r2, #3	@ tmp438,
 1149 04a2 1A70     		strb	r2, [r3]	@ tmp439, lamp_on_state
 776:src/main.c    **** 						counters_mode = 1;
 1150              		.loc 2 776 0
 1151 04a4 7523     		movs	r3, #117	@ tmp440,
 1152 04a6 6B44     		add	r3, r3, sp	@ tmp440,
 1153 04a8 0122     		movs	r2, #1	@ tmp441,
 1154 04aa 1A70     		strb	r2, [r3]	@ tmp442, counters_mode
 777:src/main.c    **** 						timer_meas = 200;		//le doy 200ms de buffer a la medicion
 1155              		.loc 2 777 0
 1156 04ac B04B     		ldr	r3, .L74+32	@ tmp443,
 1157 04ae C822     		movs	r2, #200	@ tmp444,
 1158 04b0 1A70     		strb	r2, [r3]	@ tmp445, timer_meas
 778:src/main.c    **** 						//esto en realidad es un indice de 2 segundos de tick, la info esta en minutos
 779:src/main.c    **** 						timer_rep = param_struct.timer_reportar * 30;
 1159              		.loc 2 779 0
 1160 04b2 AB4B     		ldr	r3, .L74+16	@ tmp446,
 1161 04b4 5222     		movs	r2, #82	@ tmp447,
 1162 04b6 9B5C     		ldrb	r3, [r3, r2]	@ D.7154,
 1163 04b8 9BB2     		uxth	r3, r3	@ D.7152, D.7154
 1164 04ba 1A1C     		adds	r2, r3, #0	@ tmp449, tmp448
 1165 04bc 1201     		lsls	r2, r2, #4	@ tmp450, tmp449,
 1166 04be D31A     		subs	r3, r2, r3	@ tmp452, tmp451, tmp448
ARM GAS  /tmp/ccI8cyDB.s 			page 53


 1167 04c0 DB18     		adds	r3, r3, r3	@ tmp454, tmp453, tmp453
 1168 04c2 9AB2     		uxth	r2, r3	@ D.7152, tmp452
 1169 04c4 AB4B     		ldr	r3, .L74+36	@ tmp455,
 1170 04c6 1A80     		strh	r2, [r3]	@ tmp456, timer_rep
 780:src/main.c    **** 						break;
 1171              		.loc 2 780 0
 1172 04c8 9BE0     		b	.L50	@
 1173              	.L47:
 781:src/main.c    **** 
 782:src/main.c    **** 					case meas_meas:
 783:src/main.c    **** 						if (meas_end)		//termino una vuelta de mediciones, generalmente 2 segundos
 1174              		.loc 2 783 0
 1175 04ca 1DAB     		add	r3, sp, #116	@ tmp457,,
 1176 04cc 1B78     		ldrb	r3, [r3]	@ tmp458, meas_end
 1177 04ce 002B     		cmp	r3, #0	@ tmp458,
 1178 04d0 00D1     		bne	.LCB833	@
 1179 04d2 93E0     		b	.L69	@long jump	@
 1180              	.LCB833:
 784:src/main.c    **** 						{
 785:src/main.c    **** 							meas_end = 0;
 1181              		.loc 2 785 0
 1182 04d4 1DAB     		add	r3, sp, #116	@ tmp459,,
 1183 04d6 0022     		movs	r2, #0	@ tmp460,
 1184 04d8 1A70     		strb	r2, [r3]	@ tmp461, meas_end
 786:src/main.c    **** 
 787:src/main.c    **** 							if (!tt_relay_on_off)
 1185              		.loc 2 787 0
 1186 04da 9D4B     		ldr	r3, .L74	@ tmp462,
 1187 04dc 1B88     		ldrh	r3, [r3]	@ tmp463, tt_relay_on_off
 1188 04de 9BB2     		uxth	r3, r3	@ D.7152, tmp463
 1189 04e0 002B     		cmp	r3, #0	@ D.7152,
 1190 04e2 00D0     		beq	.LCB841	@
 1191 04e4 8AE0     		b	.L69	@long jump	@
 1192              	.LCB841:
 788:src/main.c    **** 							{
 789:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 790:src/main.c    **** 								hyst = GetHysteresis (hours);
 1193              		.loc 2 790 0
 1194 04e6 A04B     		ldr	r3, .L74+24	@ tmp464,
 1195 04e8 1B78     		ldrb	r3, [r3]	@ tmp465, hours
 1196 04ea DBB2     		uxtb	r3, r3	@ D.7154, tmp465
 1197 04ec 1BAC     		add	r4, sp, #108	@ tmp466,,
 1198 04ee 1800     		movs	r0, r3	@, D.7154
 1199 04f0 FFF7FEFF 		bl	GetHysteresis	@
 1200 04f4 0300     		movs	r3, r0	@ tmp467,
 1201 04f6 2380     		strh	r3, [r4]	@ tmp469, hyst
 791:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 1202              		.loc 2 791 0
 1203 04f8 FFF7FEFF 		bl	GetPhoto	@
 1204 04fc 0300     		movs	r3, r0	@ tmp470,
 1205 04fe 1900     		movs	r1, r3	@ D.7153, D.7152
 1206 0500 1BAB     		add	r3, sp, #108	@ tmp472,,
 1207 0502 1B88     		ldrh	r3, [r3]	@ D.7153, hyst
 1208 0504 934A     		ldr	r2, .L74+4	@ tmp473,
 1209 0506 D31A     		subs	r3, r2, r3	@ D.7153, tmp473, D.7153
 1210 0508 9942     		cmp	r1, r3	@ D.7153, D.7153
 1211 050a 23DA     		bge	.L52	@,
ARM GAS  /tmp/ccI8cyDB.s 			page 54


 792:src/main.c    **** #else
 793:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 794:src/main.c    **** #endif
 795:src/main.c    **** 								{
 796:src/main.c    **** 									main_state = LAMP_OFF;
 1212              		.loc 2 796 0
 1213 050c 7723     		movs	r3, #119	@ tmp474,
 1214 050e 6B44     		add	r3, r3, sp	@ tmp474,
 1215 0510 0522     		movs	r2, #5	@ tmp475,
 1216 0512 1A70     		strb	r2, [r3]	@ tmp476, main_state
 797:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 798:src/main.c    **** 									Update_TIM3_CH1 (0);
 1217              		.loc 2 798 0
 1218 0514 0020     		movs	r0, #0	@,
 1219 0516 FFF7FEFF 		bl	Update_TIM3_CH1	@
 799:src/main.c    **** #endif
 800:src/main.c    **** 									lamp_on_state = init_airplane0;
 1220              		.loc 2 800 0
 1221 051a 7623     		movs	r3, #118	@ tmp477,
 1222 051c 6B44     		add	r3, r3, sp	@ tmp477,
 1223 051e 0022     		movs	r2, #0	@ tmp478,
 1224 0520 1A70     		strb	r2, [r3]	@ tmp479, lamp_on_state
 801:src/main.c    **** 									counters_mode = 0;
 1225              		.loc 2 801 0
 1226 0522 7523     		movs	r3, #117	@ tmp480,
 1227 0524 6B44     		add	r3, r3, sp	@ tmp480,
 1228 0526 0022     		movs	r2, #0	@ tmp481,
 1229 0528 1A70     		strb	r2, [r3]	@ tmp482, counters_mode
 802:src/main.c    **** 									Usart2Send("APAGADO");
 1230              		.loc 2 802 0
 1231 052a 934B     		ldr	r3, .L74+40	@ tmp483,
 1232 052c 1800     		movs	r0, r3	@, tmp483
 1233 052e FFF7FEFF 		bl	Usart2Send	@
 803:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 1234              		.loc 2 803 0
 1235 0532 8B4A     		ldr	r2, .L74+16	@ tmp484,
 1236 0534 904B     		ldr	r3, .L74+40	@ tmp485,
 1237 0536 1100     		movs	r1, r2	@, tmp484
 1238 0538 1800     		movs	r0, r3	@, tmp485
 1239 053a FFF7FEFF 		bl	FuncsGSMSendSMS	@
 804:src/main.c    **** 									tt_relay_on_off = 10000;
 1240              		.loc 2 804 0
 1241 053e 844B     		ldr	r3, .L74	@ tmp486,
 1242 0540 854A     		ldr	r2, .L74+8	@ tmp487,
 1243 0542 1A80     		strh	r2, [r3]	@ tmp488, tt_relay_on_off
 805:src/main.c    **** 									RelayOff();
 1244              		.loc 2 805 0
 1245 0544 FFF7FEFF 		bl	RelayOff	@
 806:src/main.c    **** 									LED_OFF;
 1246              		.loc 2 806 0
 1247 0548 9023     		movs	r3, #144	@ tmp620,
 1248 054a DB05     		lsls	r3, r3, #23	@ D.7151, tmp620,
 1249 054c 8022     		movs	r2, #128	@ tmp621,
 1250 054e 5205     		lsls	r2, r2, #21	@ tmp489, tmp621,
 1251 0550 9A61     		str	r2, [r3, #24]	@ tmp489, _277->BSRR
 807:src/main.c    **** 								}
 808:src/main.c    **** 								else
ARM GAS  /tmp/ccI8cyDB.s 			page 55


 809:src/main.c    **** 								{
 810:src/main.c    **** 									//No apago, tengo que reportar?
 811:src/main.c    **** 									if (show_power_index >= timer_rep)
 812:src/main.c    **** 									{
 813:src/main.c    **** 										show_power_index = 0;
 814:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 815:src/main.c    **** 										lamp_on_state = meas_reporting0;
 816:src/main.c    **** 									}
 817:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 818:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 819:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 820:src/main.c    **** #endif
 821:src/main.c    **** 								}
 822:src/main.c    **** 							}
 823:src/main.c    **** 						}
 824:src/main.c    **** 						break;
 1252              		.loc 2 824 0
 1253 0552 53E0     		b	.L69	@
 1254              	.L52:
 811:src/main.c    **** 									{
 1255              		.loc 2 811 0
 1256 0554 894B     		ldr	r3, .L74+44	@ tmp490,
 1257 0556 1A88     		ldrh	r2, [r3]	@ D.7152, show_power_index
 1258 0558 864B     		ldr	r3, .L74+36	@ tmp491,
 1259 055a 1B88     		ldrh	r3, [r3]	@ D.7152, timer_rep
 1260 055c 9A42     		cmp	r2, r3	@ D.7152, D.7152
 1261 055e 0AD3     		bcc	.L53	@,
 813:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 1262              		.loc 2 813 0
 1263 0560 864B     		ldr	r3, .L74+44	@ tmp492,
 1264 0562 0022     		movs	r2, #0	@ tmp493,
 1265 0564 1A80     		strh	r2, [r3]	@ tmp494, show_power_index
 814:src/main.c    **** 										lamp_on_state = meas_reporting0;
 1266              		.loc 2 814 0
 1267 0566 7523     		movs	r3, #117	@ tmp495,
 1268 0568 6B44     		add	r3, r3, sp	@ tmp495,
 1269 056a 0222     		movs	r2, #2	@ tmp496,
 1270 056c 1A70     		strb	r2, [r3]	@ tmp497, counters_mode
 815:src/main.c    **** 									}
 1271              		.loc 2 815 0
 1272 056e 7623     		movs	r3, #118	@ tmp498,
 1273 0570 6B44     		add	r3, r3, sp	@ tmp498,
 1274 0572 0422     		movs	r2, #4	@ tmp499,
 1275 0574 1A70     		strb	r2, [r3]	@ tmp500, lamp_on_state
 1276              	.L53:
 818:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 1277              		.loc 2 818 0
 1278 0576 FFF7FEFF 		bl	GetPhoto	@
 1279 057a 0300     		movs	r3, r0	@ tmp501,
 1280 057c 6B24     		movs	r4, #107	@ tmp503,
 1281 057e 6C44     		add	r4, r4, sp	@ tmp503,
 1282 0580 1800     		movs	r0, r3	@, D.7152
 1283 0582 FFF7FEFF 		bl	GetNew1to10	@
 1284 0586 0300     		movs	r3, r0	@ tmp504,
 1285 0588 2370     		strb	r3, [r4]	@ tmp506, one_to_ten
 819:src/main.c    **** #endif
 1286              		.loc 2 819 0
ARM GAS  /tmp/ccI8cyDB.s 			page 56


 1287 058a 6B23     		movs	r3, #107	@ tmp507,
 1288 058c 6B44     		add	r3, r3, sp	@ tmp507,
 1289 058e 1B78     		ldrb	r3, [r3]	@ tmp509, one_to_ten
 1290 0590 9BB2     		uxth	r3, r3	@ D.7152, tmp508
 1291 0592 1800     		movs	r0, r3	@, D.7152
 1292 0594 FFF7FEFF 		bl	Update_TIM3_CH1	@
 1293              		.loc 2 824 0
 1294 0598 30E0     		b	.L69	@
 1295              	.L48:
 825:src/main.c    **** 
 826:src/main.c    **** 					case meas_reporting0:
 827:src/main.c    **** 						ShowPower(s_lcd, power, acum_hours, acum_secs);
 1296              		.loc 2 827 0
 1297 059a 1F9C     		ldr	r4, [sp, #124]	@ tmp510, acum_secs
 1298 059c 1E9A     		ldr	r2, [sp, #120]	@ tmp511, acum_hours
 1299 059e 23AB     		add	r3, sp, #140	@ tmp512,,
 1300 05a0 1988     		ldrh	r1, [r3]	@ tmp513, power
 1301 05a2 01A8     		add	r0, sp, #4	@ tmp514,,
 1302 05a4 2300     		movs	r3, r4	@, tmp510
 1303 05a6 FFF7FEFF 		bl	ShowPower	@
 828:src/main.c    **** 						Usart2Send(s_lcd);
 1304              		.loc 2 828 0
 1305 05aa 01AB     		add	r3, sp, #4	@ tmp515,,
 1306 05ac 1800     		movs	r0, r3	@, tmp515
 1307 05ae FFF7FEFF 		bl	Usart2Send	@
 829:src/main.c    **** 						FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 1308              		.loc 2 829 0
 1309 05b2 6B4A     		ldr	r2, .L74+16	@ tmp516,
 1310 05b4 01AB     		add	r3, sp, #4	@ tmp517,,
 1311 05b6 1100     		movs	r1, r2	@, tmp516
 1312 05b8 1800     		movs	r0, r3	@, tmp517
 1313 05ba FFF7FEFF 		bl	FuncsGSMSendSMS	@
 830:src/main.c    **** 						lamp_on_state = meas_reporting1;
 1314              		.loc 2 830 0
 1315 05be 7623     		movs	r3, #118	@ tmp518,
 1316 05c0 6B44     		add	r3, r3, sp	@ tmp518,
 1317 05c2 0522     		movs	r2, #5	@ tmp519,
 1318 05c4 1A70     		strb	r2, [r3]	@ tmp520, lamp_on_state
 831:src/main.c    **** 						break;
 1319              		.loc 2 831 0
 1320 05c6 1CE0     		b	.L50	@
 1321              	.L49:
 832:src/main.c    **** 
 833:src/main.c    **** 					case meas_reporting1:
 834:src/main.c    **** 						if (meas_end)		//me sincronizo nuevamente con la medicion
 1322              		.loc 2 834 0
 1323 05c8 1DAB     		add	r3, sp, #116	@ tmp521,,
 1324 05ca 1B78     		ldrb	r3, [r3]	@ tmp522, meas_end
 1325 05cc 002B     		cmp	r3, #0	@ tmp522,
 1326 05ce 17D0     		beq	.L70	@,
 835:src/main.c    **** 						{
 836:src/main.c    **** 							meas_end = 0;
 1327              		.loc 2 836 0
 1328 05d0 1DAB     		add	r3, sp, #116	@ tmp523,,
 1329 05d2 0022     		movs	r2, #0	@ tmp524,
 1330 05d4 1A70     		strb	r2, [r3]	@ tmp525, meas_end
 837:src/main.c    **** 
ARM GAS  /tmp/ccI8cyDB.s 			page 57


 838:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 1331              		.loc 2 838 0
 1332 05d6 FFF7FEFF 		bl	FuncsGSMStateAsk	@
 1333 05da 031E     		subs	r3, r0, #0	@ tmp526,,
 1334 05dc 052B     		cmp	r3, #5	@ tmp526,
 1335 05de 0FD1     		bne	.L70	@,
 839:src/main.c    **** 							{
 840:src/main.c    **** 								counters_mode = 1;
 1336              		.loc 2 840 0
 1337 05e0 7523     		movs	r3, #117	@ tmp528,
 1338 05e2 6B44     		add	r3, r3, sp	@ tmp528,
 1339 05e4 0122     		movs	r2, #1	@ tmp529,
 1340 05e6 1A70     		strb	r2, [r3]	@ tmp530, counters_mode
 841:src/main.c    **** 								lamp_on_state = meas_meas;
 1341              		.loc 2 841 0
 1342 05e8 7623     		movs	r3, #118	@ tmp531,
 1343 05ea 6B44     		add	r3, r3, sp	@ tmp531,
 1344 05ec 0322     		movs	r2, #3	@ tmp532,
 1345 05ee 1A70     		strb	r2, [r3]	@ tmp533, lamp_on_state
 842:src/main.c    **** 							}
 843:src/main.c    **** 						}
 844:src/main.c    **** 						break;
 1346              		.loc 2 844 0
 1347 05f0 06E0     		b	.L70	@
 1348              	.L42:
 845:src/main.c    **** 
 846:src/main.c    **** 					default:
 847:src/main.c    **** 						lamp_on_state = init_airplane0;
 1349              		.loc 2 847 0
 1350 05f2 7623     		movs	r3, #118	@ tmp534,
 1351 05f4 6B44     		add	r3, r3, sp	@ tmp534,
 1352 05f6 0022     		movs	r2, #0	@ tmp535,
 1353 05f8 1A70     		strb	r2, [r3]	@ tmp536, lamp_on_state
 848:src/main.c    **** 						break;
 1354              		.loc 2 848 0
 1355 05fa 02E0     		b	.L50	@
 1356              	.L69:
 824:src/main.c    **** 
 1357              		.loc 2 824 0
 1358 05fc C046     		nop
 1359 05fe 00E0     		b	.L50	@
 1360              	.L70:
 844:src/main.c    **** 
 1361              		.loc 2 844 0
 1362 0600 C046     		nop
 1363              	.L50:
 849:src/main.c    **** 				}
 850:src/main.c    **** 
 851:src/main.c    **** #else
 852:src/main.c    **** #error "Debe elegir la forma de reportar Normal / Airplane"
 853:src/main.c    **** #endif
 854:src/main.c    **** 
 855:src/main.c    **** 				if (counters_mode)	//si esta activo el modo de contadores mido
 1364              		.loc 2 855 0
 1365 0602 7523     		movs	r3, #117	@ tmp537,
 1366 0604 6B44     		add	r3, r3, sp	@ tmp537,
 1367 0606 1B78     		ldrb	r3, [r3]	@ tmp538, counters_mode
ARM GAS  /tmp/ccI8cyDB.s 			page 58


 1368 0608 002B     		cmp	r3, #0	@ tmp538,
 1369 060a 00D1     		bne	.LCB997	@
 1370 060c 8BE0     		b	.L71	@long jump	@
 1371              	.LCB997:
 856:src/main.c    **** 				{
 857:src/main.c    **** 					if (!timer_meas)	//update cada 200ms
 1372              		.loc 2 857 0
 1373 060e 584B     		ldr	r3, .L74+32	@ tmp539,
 1374 0610 1B78     		ldrb	r3, [r3]	@ tmp540, timer_meas
 1375 0612 DBB2     		uxtb	r3, r3	@ D.7154, tmp540
 1376 0614 002B     		cmp	r3, #0	@ D.7154,
 1377 0616 00D0     		beq	.LCB1002	@
 1378 0618 85E0     		b	.L71	@long jump	@
 1379              	.LCB1002:
 858:src/main.c    **** 					{
 859:src/main.c    **** 						if (i < SIZEOF_POWER_VECT)
 1380              		.loc 2 859 0
 1381 061a 8F23     		movs	r3, #143	@ tmp541,
 1382 061c 6B44     		add	r3, r3, sp	@ tmp541,
 1383 061e 1B78     		ldrb	r3, [r3]	@ tmp542, i
 1384 0620 092B     		cmp	r3, #9	@ tmp542,
 1385 0622 1AD8     		bhi	.L56	@,
 860:src/main.c    **** 						{
 861:src/main.c    **** 							power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 1386              		.loc 2 861 0
 1387 0624 8F23     		movs	r3, #143	@ tmp543,
 1388 0626 6B44     		add	r3, r3, sp	@ tmp543,
 1389 0628 1C78     		ldrb	r4, [r3]	@ D.7153, i
 1390 062a FFF7FEFF 		bl	GetVGrid	@
 1391 062e 0300     		movs	r3, r0	@ tmp544,
 1392 0630 1D00     		movs	r5, r3	@ D.7152, tmp545
 1393 0632 FFF7FEFF 		bl	GetIGrid	@
 1394 0636 0300     		movs	r3, r0	@ tmp546,
 1395 0638 1900     		movs	r1, r3	@, D.7152
 1396 063a 2800     		movs	r0, r5	@, D.7152
 1397 063c FFF7FEFF 		bl	PowerCalc	@
 1398 0640 0300     		movs	r3, r0	@ tmp548,
 1399 0642 1900     		movs	r1, r3	@ D.7152, tmp549
 1400 0644 4E4B     		ldr	r3, .L74+48	@ tmp550,
 1401 0646 6200     		lsls	r2, r4, #1	@ tmp551, D.7153,
 1402 0648 D152     		strh	r1, [r2, r3]	@ tmp552, power_vect
 862:src/main.c    **** 							i++;
 1403              		.loc 2 862 0
 1404 064a 8F23     		movs	r3, #143	@ tmp553,
 1405 064c 6B44     		add	r3, r3, sp	@ tmp553,
 1406 064e 1A78     		ldrb	r2, [r3]	@ D.7154, i
 1407 0650 8F23     		movs	r3, #143	@ tmp554,
 1408 0652 6B44     		add	r3, r3, sp	@ tmp554,
 1409 0654 0132     		adds	r2, r2, #1	@ tmp555,
 1410 0656 1A70     		strb	r2, [r3]	@ tmp556, i
 1411 0658 52E0     		b	.L57	@
 1412              	.L56:
 863:src/main.c    **** 						}
 864:src/main.c    **** 						else
 865:src/main.c    **** 						{		//termine de cargar el vector, guardo muestro info
 866:src/main.c    **** 							i = 0;
 1413              		.loc 2 866 0
ARM GAS  /tmp/ccI8cyDB.s 			page 59


 1414 065a 8F23     		movs	r3, #143	@ tmp557,
 1415 065c 6B44     		add	r3, r3, sp	@ tmp557,
 1416 065e 0022     		movs	r2, #0	@ tmp558,
 1417 0660 1A70     		strb	r2, [r3]	@ tmp559, i
 867:src/main.c    **** 
 868:src/main.c    **** 							if (counters_mode == 1)	//mido normalmente
 1418              		.loc 2 868 0
 1419 0662 7523     		movs	r3, #117	@ tmp560,
 1420 0664 6B44     		add	r3, r3, sp	@ tmp560,
 1421 0666 1B78     		ldrb	r3, [r3]	@ tmp561, counters_mode
 1422 0668 012B     		cmp	r3, #1	@ tmp561,
 1423 066a 13D1     		bne	.L58	@,
 869:src/main.c    **** 							{
 870:src/main.c    **** 								power = PowerCalcMean8(power_vect);
 1424              		.loc 2 870 0
 1425 066c 23AC     		add	r4, sp, #140	@ tmp562,,
 1426 066e 444B     		ldr	r3, .L74+48	@ tmp563,
 1427 0670 1800     		movs	r0, r3	@, tmp563
 1428 0672 FFF7FEFF 		bl	PowerCalcMean8	@
 1429 0676 0300     		movs	r3, r0	@ tmp564,
 1430 0678 2380     		strh	r3, [r4]	@ tmp566, power
 871:src/main.c    **** 								// power = 9871;	//100w forzados para evaluar contadores
 872:src/main.c    **** 														//9871 * KW = 100
 873:src/main.c    **** 								if (power < MIN_SENSE_POWER)	//minimo de medicion
 1431              		.loc 2 873 0
 1432 067a 23AB     		add	r3, sp, #140	@ tmp567,,
 1433 067c 1B88     		ldrh	r3, [r3]	@ tmp568, power
 1434 067e 414A     		ldr	r2, .L74+52	@ tmp569,
 1435 0680 9342     		cmp	r3, r2	@ tmp568, tmp569
 1436 0682 02D8     		bhi	.L59	@,
 874:src/main.c    **** 									power = 0;
 1437              		.loc 2 874 0
 1438 0684 23AB     		add	r3, sp, #140	@ tmp570,,
 1439 0686 0022     		movs	r2, #0	@ tmp571,
 1440 0688 1A80     		strh	r2, [r3]	@ tmp572, power
 1441              	.L59:
 875:src/main.c    **** 
 876:src/main.c    **** 								last_power = power;
 1442              		.loc 2 876 0
 1443 068a 8A23     		movs	r3, #138	@ tmp573,
 1444 068c 6B44     		add	r3, r3, sp	@ tmp573,
 1445 068e 23AA     		add	r2, sp, #140	@ tmp574,,
 1446 0690 1288     		ldrh	r2, [r2]	@ tmp575, power
 1447 0692 1A80     		strh	r2, [r3]	@ tmp575, last_power
 1448              	.L58:
 877:src/main.c    **** 							}
 878:src/main.c    **** 
 879:src/main.c    **** 							if (counters_mode == 2)	//no mido solo update de lo viejo
 1449              		.loc 2 879 0
 1450 0694 7523     		movs	r3, #117	@ tmp576,
 1451 0696 6B44     		add	r3, r3, sp	@ tmp576,
 1452 0698 1B78     		ldrb	r3, [r3]	@ tmp577, counters_mode
 1453 069a 022B     		cmp	r3, #2	@ tmp577,
 1454 069c 04D1     		bne	.L60	@,
 880:src/main.c    **** 								power = last_power;
 1455              		.loc 2 880 0
 1456 069e 23AB     		add	r3, sp, #140	@ tmp578,,
ARM GAS  /tmp/ccI8cyDB.s 			page 60


 1457 06a0 8A22     		movs	r2, #138	@ tmp579,
 1458 06a2 6A44     		add	r2, r2, sp	@ tmp579,
 1459 06a4 1288     		ldrh	r2, [r2]	@ tmp580, last_power
 1460 06a6 1A80     		strh	r2, [r3]	@ tmp580, power
 1461              	.L60:
 881:src/main.c    **** 
 882:src/main.c    **** 							acum_secs += power;
 1462              		.loc 2 882 0
 1463 06a8 23AB     		add	r3, sp, #140	@ tmp581,,
 1464 06aa 1B88     		ldrh	r3, [r3]	@ D.7156, power
 1465 06ac 1F9A     		ldr	r2, [sp, #124]	@ tmp583, acum_secs
 1466 06ae D318     		adds	r3, r2, r3	@ tmp582, tmp583, D.7156
 1467 06b0 1F93     		str	r3, [sp, #124]	@ tmp582, acum_secs
 883:src/main.c    **** 							acum_secs_index++;
 1468              		.loc 2 883 0
 1469 06b2 8223     		movs	r3, #130	@ tmp584,
 1470 06b4 6B44     		add	r3, r3, sp	@ tmp584,
 1471 06b6 1A88     		ldrh	r2, [r3]	@ D.7152, acum_secs_index
 1472 06b8 8223     		movs	r3, #130	@ tmp585,
 1473 06ba 6B44     		add	r3, r3, sp	@ tmp585,
 1474 06bc 0132     		adds	r2, r2, #1	@ tmp586,
 1475 06be 1A80     		strh	r2, [r3]	@ tmp587, acum_secs_index
 884:src/main.c    **** 							show_power_index++;
 1476              		.loc 2 884 0
 1477 06c0 2E4B     		ldr	r3, .L74+44	@ tmp588,
 1478 06c2 1B88     		ldrh	r3, [r3]	@ D.7152, show_power_index
 1479 06c4 0133     		adds	r3, r3, #1	@ tmp589,
 1480 06c6 9AB2     		uxth	r2, r3	@ D.7152, tmp589
 1481 06c8 2C4B     		ldr	r3, .L74+44	@ tmp590,
 1482 06ca 1A80     		strh	r2, [r3]	@ tmp591, show_power_index
 885:src/main.c    **** 
 886:src/main.c    **** 							if (acum_secs_index >= 1800)
 1483              		.loc 2 886 0
 1484 06cc 8223     		movs	r3, #130	@ tmp592,
 1485 06ce 6B44     		add	r3, r3, sp	@ tmp592,
 1486 06d0 1B88     		ldrh	r3, [r3]	@ tmp593, acum_secs_index
 1487 06d2 2D4A     		ldr	r2, .L74+56	@ tmp594,
 1488 06d4 9342     		cmp	r3, r2	@ tmp593, tmp594
 1489 06d6 10D9     		bls	.L61	@,
 887:src/main.c    **** 							{
 888:src/main.c    **** 								acum_hours += (acum_secs / 1800);	//lo convierto a Wh, para no perder bits en cada cuenta
 1490              		.loc 2 888 0
 1491 06d8 1F9A     		ldr	r2, [sp, #124]	@ tmp595, acum_secs
 1492 06da E123     		movs	r3, #225	@ tmp619,
 1493 06dc D900     		lsls	r1, r3, #3	@, tmp619,
 1494 06de 1000     		movs	r0, r2	@, tmp595
 1495 06e0 FFF7FEFF 		bl	__aeabi_uidiv	@
 1496 06e4 0300     		movs	r3, r0	@ tmp598,
 1497 06e6 1A00     		movs	r2, r3	@ D.7156, tmp598
 1498 06e8 1E9B     		ldr	r3, [sp, #120]	@ tmp600, acum_hours
 1499 06ea 9B18     		adds	r3, r3, r2	@ tmp599, tmp600, D.7156
 1500 06ec 1E93     		str	r3, [sp, #120]	@ tmp599, acum_hours
 889:src/main.c    **** 								acum_secs = 0;
 1501              		.loc 2 889 0
 1502 06ee 0023     		movs	r3, #0	@ tmp601,
 1503 06f0 1F93     		str	r3, [sp, #124]	@ tmp601, acum_secs
 890:src/main.c    **** 								acum_secs_index = 0;
ARM GAS  /tmp/ccI8cyDB.s 			page 61


 1504              		.loc 2 890 0
 1505 06f2 8223     		movs	r3, #130	@ tmp602,
 1506 06f4 6B44     		add	r3, r3, sp	@ tmp602,
 1507 06f6 0022     		movs	r2, #0	@ tmp603,
 1508 06f8 1A80     		strh	r2, [r3]	@ tmp604, acum_secs_index
 1509              	.L61:
 891:src/main.c    **** 							}
 892:src/main.c    **** 							//cuando termino una medicion completa aviso con meas_end
 893:src/main.c    **** 							meas_end = 1;
 1510              		.loc 2 893 0
 1511 06fa 1DAB     		add	r3, sp, #116	@ tmp605,,
 1512 06fc 0122     		movs	r2, #1	@ tmp606,
 1513 06fe 1A70     		strb	r2, [r3]	@ tmp607, meas_end
 1514              	.L57:
 894:src/main.c    **** 						}
 895:src/main.c    **** 						timer_meas = 200;		//10 veces 200ms
 1515              		.loc 2 895 0
 1516 0700 1B4B     		ldr	r3, .L74+32	@ tmp608,
 1517 0702 C822     		movs	r2, #200	@ tmp609,
 1518 0704 1A70     		strb	r2, [r3]	@ tmp610, timer_meas
 896:src/main.c    **** 					}
 897:src/main.c    **** 				}
 898:src/main.c    **** 				break;
 1519              		.loc 2 898 0
 1520 0706 0EE0     		b	.L71	@
 1521              	.L25:
 899:src/main.c    **** 
 900:src/main.c    **** 			default:
 901:src/main.c    **** 				main_state = MAIN_INIT;
 1522              		.loc 2 901 0
 1523 0708 7723     		movs	r3, #119	@ tmp611,
 1524 070a 6B44     		add	r3, r3, sp	@ tmp611,
 1525 070c 0022     		movs	r2, #0	@ tmp612,
 1526 070e 1A70     		strb	r2, [r3]	@ tmp613, main_state
 902:src/main.c    **** 				break;
 1527              		.loc 2 902 0
 1528 0710 0AE0     		b	.L34	@
 1529              	.L64:
 572:src/main.c    **** 
 1530              		.loc 2 572 0
 1531 0712 C046     		nop
 1532 0714 08E0     		b	.L34	@
 1533              	.L65:
 595:src/main.c    **** 
 1534              		.loc 2 595 0
 1535 0716 C046     		nop
 1536 0718 06E0     		b	.L34	@
 1537              	.L66:
 616:src/main.c    **** 
 1538              		.loc 2 616 0
 1539 071a C046     		nop
 1540 071c 04E0     		b	.L34	@
 1541              	.L67:
 637:src/main.c    **** 
 1542              		.loc 2 637 0
 1543 071e C046     		nop
 1544 0720 02E0     		b	.L34	@
ARM GAS  /tmp/ccI8cyDB.s 			page 62


 1545              	.L68:
 660:src/main.c    **** 
 1546              		.loc 2 660 0
 1547 0722 C046     		nop
 1548 0724 00E0     		b	.L34	@
 1549              	.L71:
 898:src/main.c    **** 
 1550              		.loc 2 898 0
 1551 0726 C046     		nop
 1552              	.L34:
 903:src/main.c    **** 		}
 904:src/main.c    **** 
 905:src/main.c    **** 		//Cosas que dependen de las muestras
 906:src/main.c    **** 		if (seq_ready)
 1553              		.loc 2 906 0
 1554 0728 184B     		ldr	r3, .L74+60	@ tmp614,
 1555 072a 1B78     		ldrb	r3, [r3]	@ tmp615, seq_ready
 1556 072c DBB2     		uxtb	r3, r3	@ D.7154, tmp615
 1557 072e 002B     		cmp	r3, #0	@ D.7154,
 1558 0730 06D0     		beq	.L62	@,
 907:src/main.c    **** 		{
 908:src/main.c    **** 			seq_ready = 0;
 1559              		.loc 2 908 0
 1560 0732 164B     		ldr	r3, .L74+60	@ tmp616,
 1561 0734 0022     		movs	r2, #0	@ tmp617,
 1562 0736 1A70     		strb	r2, [r3]	@ tmp618, seq_ready
 909:src/main.c    **** 			UpdateVGrid ();
 1563              		.loc 2 909 0
 1564 0738 FFF7FEFF 		bl	UpdateVGrid	@
 910:src/main.c    **** 			UpdateIGrid ();
 1565              		.loc 2 910 0
 1566 073c FFF7FEFF 		bl	UpdateIGrid	@
 1567              	.L62:
 911:src/main.c    **** 		}
 912:src/main.c    **** 
 913:src/main.c    **** 		//Cosas que no dependen del estado del programa
 914:src/main.c    **** 		UpdateRelay ();
 1568              		.loc 2 914 0
 1569 0740 FFF7FEFF 		bl	UpdateRelay	@
 915:src/main.c    **** 		UpdatePhotoTransistor();
 1570              		.loc 2 915 0
 1571 0744 FFF7FEFF 		bl	UpdatePhotoTransistor	@
 916:src/main.c    **** #ifdef USE_GSM
 917:src/main.c    **** 		FuncsGSM();
 1572              		.loc 2 917 0
 1573 0748 FFF7FEFF 		bl	FuncsGSM	@
 918:src/main.c    **** #endif
 919:src/main.c    **** 	}	//end while 1
 1574              		.loc 2 919 0
 1575 074c 4AE5     		b	.L63	@
 1576              	.L75:
 1577 074e C046     		.align	2
 1578              	.L74:
 1579 0750 00000000 		.word	tt_relay_on_off
 1580 0754 8A0E0000 		.word	3722
 1581 0758 10270000 		.word	10000
 1582 075c 08010000 		.word	.LC36
ARM GAS  /tmp/ccI8cyDB.s 			page 63


 1583 0760 00000000 		.word	param_struct
 1584 0764 14010000 		.word	.LC38
 1585 0768 00000000 		.word	hours
 1586 076c 28000000 		.word	.L44
 1587 0770 00000000 		.word	timer_meas
 1588 0774 00000000 		.word	timer_rep
 1589 0778 20010000 		.word	.LC44
 1590 077c 00000000 		.word	show_power_index
 1591 0780 00000000 		.word	power_vect
 1592 0784 E1050000 		.word	1505
 1593 0788 07070000 		.word	1799
 1594 078c 00000000 		.word	seq_ready
 1595              		.cfi_endproc
 1596              	.LFE20:
 1597              		.size	main, .-main
 1598              		.section	.rodata
 1599              		.align	2
 1600              	.LC48:
 1601 0128 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1601      3A7B226D 
 1601      794E616D 
 1601      65223A22 
 1601      4E75636C 
 1602              		.align	2
 1603              	.LC50:
 1604 0140 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1604      54656D70 
 1604      65726174 
 1604      75726522 
 1604      3A256C75 
 1605 0159 000000   		.align	2
 1606              	.LC52:
 1607 015c 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1607      48756D69 
 1607      64697479 
 1607      223A256C 
 1607      752E256C 
 1608 0172 0000     		.align	2
 1609              	.LC54:
 1610 0174 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1610      50726573 
 1610      73757265 
 1610      223A256C 
 1610      752E256C 
 1611 018a 0000     		.align	2
 1612              	.LC56:
 1613 018c 7D7D00   		.ascii	"}}\000"
 1614              		.section	.text.prepare_json_pkt,"ax",%progbits
 1615              		.align	2
 1616              		.global	prepare_json_pkt
 1617              		.code	16
 1618              		.thumb_func
 1619              		.type	prepare_json_pkt, %function
 1620              	prepare_json_pkt:
 1621              	.LFB21:
 920:src/main.c    **** 
 921:src/main.c    **** //--- FIN Programa de pruebas I meas -----
ARM GAS  /tmp/ccI8cyDB.s 			page 64


 922:src/main.c    **** 
 923:src/main.c    **** 	while (1)
 924:src/main.c    **** 	{
 925:src/main.c    **** 		switch (main_state)
 926:src/main.c    **** 		{
 927:src/main.c    **** 			case MAIN_INIT:
 928:src/main.c    **** 				RelayOff();
 929:src/main.c    **** 				LED_OFF;
 930:src/main.c    **** 				FillPhotoBuffer();
 931:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 932:src/main.c    **** 				FillTempBuffer();
 933:src/main.c    **** #endif
 934:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 935:src/main.c    **** 				Update_TIM3_CH1 (0);
 936:src/main.c    **** #endif
 937:src/main.c    **** 				main_state = SYNCHRO_ADC;
 938:src/main.c    **** #ifdef ADC_WITH_INT
 939:src/main.c    **** 				seq_ready = 0;
 940:src/main.c    **** #endif
 941:src/main.c    **** 				break;
 942:src/main.c    **** 
 943:src/main.c    **** 			case SYNCHRO_ADC:
 944:src/main.c    **** #ifdef ADC_WITH_INT
 945:src/main.c    **** 				if (seq_ready)
 946:src/main.c    **** #endif
 947:src/main.c    **** 				{
 948:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 949:src/main.c    **** 				}
 950:src/main.c    **** 				break;
 951:src/main.c    **** 
 952:src/main.c    **** 			case SET_ZERO_CURRENT:
 953:src/main.c    **** 				main_state = LAMP_OFF;
 954:src/main.c    **** 				break;
 955:src/main.c    **** 
 956:src/main.c    **** 			case LAMP_OFF:
 957:src/main.c    **** 				if (!tt_relay_on_off)
 958:src/main.c    **** 				{
 959:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 960:src/main.c    **** 					{
 961:src/main.c    **** 						main_state = LAMP_ON;
 962:src/main.c    **** 						tt_relay_on_off = 10000;
 963:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 964:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 965:src/main.c    **** 	#endif
 966:src/main.c    **** 
 967:src/main.c    **** 						RelayOn();
 968:src/main.c    **** 						LED_ON;
 969:src/main.c    **** 	#ifdef WITH_HYST
 970:src/main.c    **** 						hours = 0;
 971:src/main.c    **** 	#endif
 972:src/main.c    **** 					}
 973:src/main.c    **** 				}
 974:src/main.c    **** 				break;
 975:src/main.c    **** 
 976:src/main.c    **** 			case LAMP_ON:
 977:src/main.c    **** 				if (!tt_relay_on_off)
 978:src/main.c    **** 				{
ARM GAS  /tmp/ccI8cyDB.s 			page 65


 979:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 980:src/main.c    **** 					hyst = GetHysteresis (hours);
 981:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 982:src/main.c    **** 	#else
 983:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 984:src/main.c    **** 	#endif
 985:src/main.c    **** 					{
 986:src/main.c    **** 						main_state = LAMP_OFF;
 987:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 988:src/main.c    **** 						Update_TIM3_CH1 (0);
 989:src/main.c    **** 	#endif
 990:src/main.c    **** 						tt_relay_on_off = 10000;
 991:src/main.c    **** 						RelayOff();
 992:src/main.c    **** 						LED_OFF;
 993:src/main.c    **** 					}
 994:src/main.c    **** 				}
 995:src/main.c    **** 
 996:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 997:src/main.c    **** 				if (main_state == LAMP_ON)
 998:src/main.c    **** 				{
 999:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
1000:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
1001:src/main.c    **** 				}
1002:src/main.c    **** 	#endif
1003:src/main.c    **** 				break;
1004:src/main.c    **** 
1005:src/main.c    **** 			default:
1006:src/main.c    **** 				main_state = MAIN_INIT;
1007:src/main.c    **** 				break;
1008:src/main.c    **** 		}
1009:src/main.c    **** 
1010:src/main.c    **** 		if (!timer_standby)
1011:src/main.c    **** 		{
1012:src/main.c    **** #ifdef WITH_TEMP_CONTROL
1013:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
1014:src/main.c    **** #else
1015:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
1016:src/main.c    **** #endif
1017:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
1018:src/main.c    **** 			Usart2Send(s_lcd);
1019:src/main.c    **** 			timer_standby = 2000;
1020:src/main.c    **** 		}
1021:src/main.c    **** 
1022:src/main.c    **** 		//Cosas que no dependen del estado del programa
1023:src/main.c    **** 		UpdateRelay ();
1024:src/main.c    **** #ifdef WITH_TEMP_CONTROL
1025:src/main.c    **** 		UpdateTemp();
1026:src/main.c    **** #endif
1027:src/main.c    **** 		UpdatePhotoTransistor();
1028:src/main.c    **** 	}	//end while 1
1029:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
1030:src/main.c    **** #endif	//USE_REDONDA_BASIC
1031:src/main.c    **** 
1032:src/main.c    **** 
1033:src/main.c    **** #ifdef USE_MQTT_LIB
1034:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
1035:src/main.c    **** 	int rc = 0;
ARM GAS  /tmp/ccI8cyDB.s 			page 66


1036:src/main.c    **** 	char buf[200];
1037:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
1038:src/main.c    **** 	char* payload = "mypayload";
1039:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
1040:src/main.c    **** 	int len = 0;
1041:src/main.c    **** 
1042:src/main.c    **** 	data.clientID.cstring = "me";
1043:src/main.c    **** 	data.keepAliveInterval = 20;
1044:src/main.c    **** 	data.cleansession = 1;
1045:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
1046:src/main.c    **** 
1047:src/main.c    **** 	topicString.cstring = "mytopic";
1048:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
1049:src/main.c    **** 
1050:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
1051:src/main.c    **** 	//falta abrir puerto
1052:src/main.c    **** 	//falta enviar al socket
1053:src/main.c    **** 	//falta cerrar socket
1054:src/main.c    **** #endif
1055:src/main.c    **** 
1056:src/main.c    **** //	//---------- Prueba USART2 --------//
1057:src/main.c    **** //
1058:src/main.c    **** //    while( 1 )
1059:src/main.c    **** //    {
1060:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1061:src/main.c    **** //        Wait_ms(3000);
1062:src/main.c    **** //    }
1063:src/main.c    **** //
1064:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
1065:src/main.c    **** 
1066:src/main.c    **** 	//---------- Prueba con GPS --------//
1067:src/main.c    **** #ifdef USE_GPS
1068:src/main.c    **** 	Usart2SendSingle('M');
1069:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1070:src/main.c    **** 	Wait_ms(1000);
1071:src/main.c    **** 
1072:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
1073:src/main.c    **** 
1074:src/main.c    **** 	//mando reset al gps
1075:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
1076:src/main.c    **** 	GPSStartResetSM ();
1077:src/main.c    **** 	while (GPSStart() != RESP_OK);
1078:src/main.c    **** 
1079:src/main.c    **** 	//mando conf al gps
1080:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
1081:src/main.c    **** 	GPSConfigResetSM ();
1082:src/main.c    **** 	while (GPSConfig() != RESP_OK);
1083:src/main.c    **** 
1084:src/main.c    **** //	//mando reset factory al gps
1085:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
1086:src/main.c    **** //	GPSResetFactoryResetSM ();
1087:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
1088:src/main.c    **** 
1089:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
1090:src/main.c    **** //	timer_standby = 60000;
1091:src/main.c    **** //	while( timer_standby )
1092:src/main.c    **** 	while( 1 )
ARM GAS  /tmp/ccI8cyDB.s 			page 67


1093:src/main.c    **** 	{
1094:src/main.c    **** 		if (gps_pckt_ready)
1095:src/main.c    **** 		{
1096:src/main.c    **** 			gps_pckt_ready = 0;
1097:src/main.c    **** 			//Usart2SendSingle('P');
1098:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
1099:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
1100:src/main.c    **** 		}
1101:src/main.c    **** 
1102:src/main.c    **** 		GPSProcess();
1103:src/main.c    **** 	}
1104:src/main.c    **** #endif
1105:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
1106:src/main.c    **** 
1107:src/main.c    **** 	//---------- Prueba con GSM --------//
1108:src/main.c    **** #ifdef USE_GSM
1109:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
1110:src/main.c    **** 
1111:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
1112:src/main.c    **** 
1113:src/main.c    **** 
1114:src/main.c    **** 	//Pruebo USART1
1115:src/main.c    **** //	while (1)
1116:src/main.c    **** //	{
1117:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
1118:src/main.c    **** //			Wait_ms(50);
1119:src/main.c    **** //	}
1120:src/main.c    **** 
1121:src/main.c    **** 
1122:src/main.c    **** 	//mando start al gsm
1123:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
1124:src/main.c    **** 	//GPSStartResetSM ();
1125:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
1126:src/main.c    **** 	while (timer_standby)
1127:src/main.c    **** 	{
1128:src/main.c    **** 		i = GSM_Start();
1129:src/main.c    **** 		if (i == 2)
1130:src/main.c    **** 		{
1131:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
1132:src/main.c    **** 			timer_standby = 0;
1133:src/main.c    **** 		}
1134:src/main.c    **** 
1135:src/main.c    **** 		if (i == 4)
1136:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
1137:src/main.c    **** 	}
1138:src/main.c    **** 
1139:src/main.c    **** 	//mando conf al gsm
1140:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
1141:src/main.c    **** 	//GPSConfigResetSM ();
1142:src/main.c    **** 
1143:src/main.c    **** 	i = 0;
1144:src/main.c    **** 	while (i == 0)
1145:src/main.c    **** 	{
1146:src/main.c    **** 		ii = GSM_Config(1000);
1147:src/main.c    **** 
1148:src/main.c    **** 		if (ii == 2)
1149:src/main.c    **** 			i = 0;
ARM GAS  /tmp/ccI8cyDB.s 			page 68


1150:src/main.c    **** 		else if (ii > 2)
1151:src/main.c    **** 		{
1152:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
1153:src/main.c    **** 			while (1);
1154:src/main.c    **** 		}
1155:src/main.c    **** 
1156:src/main.c    **** 		GSMProcess();
1157:src/main.c    **** 		GSMReceive ();
1158:src/main.c    **** 
1159:src/main.c    **** 		if (gsm_pckt_ready)
1160:src/main.c    **** 		{
1161:src/main.c    **** 			gsm_pckt_ready = 0;
1162:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1163:src/main.c    **** 		}
1164:src/main.c    **** 
1165:src/main.c    **** 		if (LIGHT)
1166:src/main.c    **** 			LED_ON;
1167:src/main.c    **** 		else
1168:src/main.c    **** 			LED_OFF;
1169:src/main.c    **** 	}
1170:src/main.c    **** 
1171:src/main.c    **** 
1172:src/main.c    **** 	while( 1 )
1173:src/main.c    **** 	{
1174:src/main.c    **** 		if (gsm_pckt_ready)
1175:src/main.c    **** 		{
1176:src/main.c    **** 			gsm_pckt_ready = 0;
1177:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1178:src/main.c    **** 		}
1179:src/main.c    **** 
1180:src/main.c    **** 		GSMProcess();
1181:src/main.c    **** 
1182:src/main.c    **** 		if (LIGHT)
1183:src/main.c    **** 			LED_ON;
1184:src/main.c    **** 
1185:src/main.c    **** 	}
1186:src/main.c    **** #endif
1187:src/main.c    **** 
1188:src/main.c    **** 
1189:src/main.c    **** 
1190:src/main.c    **** 
1191:src/main.c    **** 	//---------- Prueba temp --------//
1192:src/main.c    **** 	/*
1193:src/main.c    **** 	while (1)
1194:src/main.c    **** 	{
1195:src/main.c    **** 		local_meas = GetTemp();
1196:src/main.c    **** 		if (local_meas != local_meas_last)
1197:src/main.c    **** 		{
1198:src/main.c    **** 			LED_ON;
1199:src/main.c    **** 			local_meas_last = local_meas;
1200:src/main.c    **** 			LCD_2DO_RENGLON;
1201:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
1202:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
1203:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
1204:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
1205:src/main.c    **** 			LCDTransmitStr(s_lcd);
1206:src/main.c    **** 			LED_OFF;
ARM GAS  /tmp/ccI8cyDB.s 			page 69


1207:src/main.c    **** 		}
1208:src/main.c    **** 
1209:src/main.c    **** 		UpdateTemp();
1210:src/main.c    **** 	}
1211:src/main.c    **** 	*/
1212:src/main.c    **** 	//---------- Fin prueba temp --------//
1213:src/main.c    **** 
1214:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
1215:src/main.c    **** 	/*
1216:src/main.c    **** 	local_meas = 0;
1217:src/main.c    **** 	while (1)
1218:src/main.c    **** 	{
1219:src/main.c    **** 		LCD_2DO_RENGLON;
1220:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
1221:src/main.c    **** 		fcalc = local_meas;
1222:src/main.c    **** 		fcalc = fcalc * K_1TO10;
1223:src/main.c    **** 		one_int = (short) fcalc;
1224:src/main.c    **** 		fcalc = fcalc - one_int;
1225:src/main.c    **** 		fcalc = fcalc * 10;
1226:src/main.c    **** 		one_dec = (short) fcalc;
1227:src/main.c    **** 
1228:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
1229:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
1230:src/main.c    **** 		LCDTransmitStr(s_lcd);
1231:src/main.c    **** 
1232:src/main.c    **** 		Wait_ms (1000);
1233:src/main.c    **** 		if (local_meas <= 255)
1234:src/main.c    **** 			local_meas = 0;
1235:src/main.c    **** 		else
1236:src/main.c    **** 			local_meas++;
1237:src/main.c    **** 	}
1238:src/main.c    **** 	*/
1239:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
1240:src/main.c    **** 
1241:src/main.c    **** 
1242:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
1243:src/main.c    **** 
1244:src/main.c    **** 	return 0;
1245:src/main.c    **** }
1246:src/main.c    **** 
1247:src/main.c    **** //--- End of Main ---//
1248:src/main.c    **** 
1249:src/main.c    **** 
1250:src/main.c    **** 
1251:src/main.c    **** 
1252:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
1253:src/main.c    **** {
 1622              		.loc 2 1253 0
 1623              		.cfi_startproc
 1624 0000 00B5     		push	{lr}	@
 1625              	.LCFI6:
 1626              		.cfi_def_cfa_offset 4
 1627              		.cfi_offset 14, -4
 1628 0002 97B0     		sub	sp, sp, #92	@,,
 1629              	.LCFI7:
 1630              		.cfi_def_cfa_offset 96
 1631 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
ARM GAS  /tmp/ccI8cyDB.s 			page 70


1254:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1632              		.loc 2 1254 0
 1633 0006 0123     		movs	r3, #1	@ tmp112,
 1634 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1635 000a 0223     		movs	r3, #2	@ tmp113,
 1636 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1637 000e 0323     		movs	r3, #3	@ tmp114,
 1638 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1639 0012 0423     		movs	r3, #4	@ tmp115,
 1640 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1641 0016 0523     		movs	r3, #5	@ tmp116,
 1642 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1643 001a 0623     		movs	r3, #6	@ tmp117,
 1644 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
1255:src/main.c    ****       char tempbuff[40];
1256:src/main.c    ****       volatile float HUMIDITY_Value;
1257:src/main.c    ****       volatile float TEMPERATURE_Value;
1258:src/main.c    ****       volatile float PRESSURE_Value;
1259:src/main.c    **** 
1260:src/main.c    **** 
1261:src/main.c    **** 
1262:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1645              		.loc 2 1262 0
 1646 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1647 0020 1E4B     		ldr	r3, .L78	@ tmp119,
 1648 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1649 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1650 0026 1823     		movs	r3, #24	@ tmp122,
 1651 0028 1A00     		movs	r2, r3	@, tmp122
 1652 002a FFF7FEFF 		bl	memcpy	@
1263:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1264:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1265:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1653              		.loc 2 1265 0
 1654 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1655 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1656 0032 1B49     		ldr	r1, .L78+4	@ tmp127,
 1657 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1658 0036 FFF7FEFF 		bl	sprintf	@
1266:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1659              		.loc 2 1266 0
 1660 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1661 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1662 003e 1100     		movs	r1, r2	@, tmp129
 1663 0040 1800     		movs	r0, r3	@, tmp130
 1664 0042 FFF7FEFF 		bl	strcat	@
1267:src/main.c    **** 
1268:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1269:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1270:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1665              		.loc 2 1270 0
 1666 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1667 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1668 004a 1649     		ldr	r1, .L78+8	@ tmp133,
 1669 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1670 004e FFF7FEFF 		bl	sprintf	@
1271:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
ARM GAS  /tmp/ccI8cyDB.s 			page 71


 1671              		.loc 2 1271 0
 1672 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1673 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1674 0056 1100     		movs	r1, r2	@, tmp135
 1675 0058 1800     		movs	r0, r3	@, tmp136
 1676 005a FFF7FEFF 		bl	strcat	@
1272:src/main.c    **** 
1273:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1274:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1275:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1677              		.loc 2 1275 0
 1678 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1679 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1680 0062 1149     		ldr	r1, .L78+12	@ tmp139,
 1681 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1682 0066 FFF7FEFF 		bl	sprintf	@
1276:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1683              		.loc 2 1276 0
 1684 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1685 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1686 006e 1100     		movs	r1, r2	@, tmp141
 1687 0070 1800     		movs	r0, r3	@, tmp142
 1688 0072 FFF7FEFF 		bl	strcat	@
1277:src/main.c    **** 
1278:src/main.c    **** 
1279:src/main.c    ****       strcat((char *)buffer,"}}");
 1689              		.loc 2 1279 0
 1690 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1691 0078 1800     		movs	r0, r3	@, tmp143
 1692 007a FFF7FEFF 		bl	strlen	@
 1693 007e 0300     		movs	r3, r0	@ tmp144,
 1694 0080 1A00     		movs	r2, r3	@ D.7183, tmp145
 1695 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1696 0084 9A18     		adds	r2, r3, r2	@ D.7184, tmp146, D.7183
 1697 0086 094B     		ldr	r3, .L78+16	@ tmp147,
 1698 0088 1000     		movs	r0, r2	@ tmp148, D.7184
 1699 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1700 008c 0323     		movs	r3, #3	@ tmp150,
 1701 008e 1A00     		movs	r2, r3	@, tmp150
 1702 0090 FFF7FEFF 		bl	memcpy	@
1280:src/main.c    **** 
1281:src/main.c    ****       return;
 1703              		.loc 2 1281 0
 1704 0094 C046     		nop
1282:src/main.c    **** }
 1705              		.loc 2 1282 0
 1706 0096 17B0     		add	sp, sp, #92	@,,
 1707              		@ sp needed	@
 1708 0098 00BD     		pop	{pc}
 1709              	.L79:
 1710 009a C046     		.align	2
 1711              	.L78:
 1712 009c 28010000 		.word	.LC48
 1713 00a0 40010000 		.word	.LC50
 1714 00a4 5C010000 		.word	.LC52
 1715 00a8 74010000 		.word	.LC54
 1716 00ac 8C010000 		.word	.LC56
ARM GAS  /tmp/ccI8cyDB.s 			page 72


 1717              		.cfi_endproc
 1718              	.LFE21:
 1719              		.size	prepare_json_pkt, .-prepare_json_pkt
 1720              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1721              		.align	2
 1722              		.global	TimingDelay_Decrement
 1723              		.code	16
 1724              		.thumb_func
 1725              		.type	TimingDelay_Decrement, %function
 1726              	TimingDelay_Decrement:
 1727              	.LFB22:
1283:src/main.c    **** 
1284:src/main.c    **** void TimingDelay_Decrement(void)
1285:src/main.c    **** {
 1728              		.loc 2 1285 0
 1729              		.cfi_startproc
 1730 0000 10B5     		push	{r4, lr}	@
 1731              	.LCFI8:
 1732              		.cfi_def_cfa_offset 8
 1733              		.cfi_offset 4, -8
 1734              		.cfi_offset 14, -4
1286:src/main.c    **** 	if (wait_ms_var)
 1735              		.loc 2 1286 0
 1736 0002 324B     		ldr	r3, .L89	@ tmp134,
 1737 0004 1B88     		ldrh	r3, [r3]	@ tmp135, wait_ms_var
 1738 0006 9BB2     		uxth	r3, r3	@ D.7196, tmp135
 1739 0008 002B     		cmp	r3, #0	@ D.7196,
 1740 000a 06D0     		beq	.L81	@,
1287:src/main.c    **** 		wait_ms_var--;
 1741              		.loc 2 1287 0
 1742 000c 2F4B     		ldr	r3, .L89	@ tmp136,
 1743 000e 1B88     		ldrh	r3, [r3]	@ tmp137, wait_ms_var
 1744 0010 9BB2     		uxth	r3, r3	@ D.7196, tmp137
 1745 0012 013B     		subs	r3, r3, #1	@ tmp138,
 1746 0014 9AB2     		uxth	r2, r3	@ D.7196, tmp138
 1747 0016 2D4B     		ldr	r3, .L89	@ tmp139,
 1748 0018 1A80     		strh	r2, [r3]	@ tmp140, wait_ms_var
 1749              	.L81:
1288:src/main.c    **** 
1289:src/main.c    **** 	if (timer_standby)
 1750              		.loc 2 1289 0
 1751 001a 2D4B     		ldr	r3, .L89+4	@ tmp141,
 1752 001c 1B88     		ldrh	r3, [r3]	@ tmp142, timer_standby
 1753 001e 9BB2     		uxth	r3, r3	@ D.7196, tmp142
 1754 0020 002B     		cmp	r3, #0	@ D.7196,
 1755 0022 06D0     		beq	.L82	@,
1290:src/main.c    **** 		timer_standby--;
 1756              		.loc 2 1290 0
 1757 0024 2A4B     		ldr	r3, .L89+4	@ tmp143,
 1758 0026 1B88     		ldrh	r3, [r3]	@ tmp144, timer_standby
 1759 0028 9BB2     		uxth	r3, r3	@ D.7196, tmp144
 1760 002a 013B     		subs	r3, r3, #1	@ tmp145,
 1761 002c 9AB2     		uxth	r2, r3	@ D.7196, tmp145
 1762 002e 284B     		ldr	r3, .L89+4	@ tmp146,
 1763 0030 1A80     		strh	r2, [r3]	@ tmp147, timer_standby
 1764              	.L82:
1291:src/main.c    **** 
ARM GAS  /tmp/ccI8cyDB.s 			page 73


1292:src/main.c    **** #ifdef USE_REDONDA_BASIC
1293:src/main.c    **** 	if (tt_take_photo_sample)
 1765              		.loc 2 1293 0
 1766 0032 284B     		ldr	r3, .L89+8	@ tmp148,
 1767 0034 1B88     		ldrh	r3, [r3]	@ tmp149, tt_take_photo_sample
 1768 0036 9BB2     		uxth	r3, r3	@ D.7196, tmp149
 1769 0038 002B     		cmp	r3, #0	@ D.7196,
 1770 003a 06D0     		beq	.L83	@,
1294:src/main.c    **** 		tt_take_photo_sample--;
 1771              		.loc 2 1294 0
 1772 003c 254B     		ldr	r3, .L89+8	@ tmp150,
 1773 003e 1B88     		ldrh	r3, [r3]	@ tmp151, tt_take_photo_sample
 1774 0040 9BB2     		uxth	r3, r3	@ D.7196, tmp151
 1775 0042 013B     		subs	r3, r3, #1	@ tmp152,
 1776 0044 9AB2     		uxth	r2, r3	@ D.7196, tmp152
 1777 0046 234B     		ldr	r3, .L89+8	@ tmp153,
 1778 0048 1A80     		strh	r2, [r3]	@ tmp154, tt_take_photo_sample
 1779              	.L83:
1295:src/main.c    **** 
1296:src/main.c    **** 	if (tt_relay_on_off)
 1780              		.loc 2 1296 0
 1781 004a 234B     		ldr	r3, .L89+12	@ tmp155,
 1782 004c 1B88     		ldrh	r3, [r3]	@ tmp156, tt_relay_on_off
 1783 004e 9BB2     		uxth	r3, r3	@ D.7196, tmp156
 1784 0050 002B     		cmp	r3, #0	@ D.7196,
 1785 0052 06D0     		beq	.L84	@,
1297:src/main.c    **** 		tt_relay_on_off--;
 1786              		.loc 2 1297 0
 1787 0054 204B     		ldr	r3, .L89+12	@ tmp157,
 1788 0056 1B88     		ldrh	r3, [r3]	@ tmp158, tt_relay_on_off
 1789 0058 9BB2     		uxth	r3, r3	@ D.7196, tmp158
 1790 005a 013B     		subs	r3, r3, #1	@ tmp159,
 1791 005c 9AB2     		uxth	r2, r3	@ D.7196, tmp159
 1792 005e 1E4B     		ldr	r3, .L89+12	@ tmp160,
 1793 0060 1A80     		strh	r2, [r3]	@ tmp161, tt_relay_on_off
 1794              	.L84:
1298:src/main.c    **** #endif
1299:src/main.c    **** 
1300:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1301:src/main.c    **** 	if (tt_take_temp_sample)
1302:src/main.c    **** 		tt_take_temp_sample--;
1303:src/main.c    **** #endif
1304:src/main.c    **** 
1305:src/main.c    **** 	if (take_temp_sample)
 1795              		.loc 2 1305 0
 1796 0062 1E4B     		ldr	r3, .L89+16	@ tmp162,
 1797 0064 1B88     		ldrh	r3, [r3]	@ tmp163, take_temp_sample
 1798 0066 9BB2     		uxth	r3, r3	@ D.7196, tmp163
 1799 0068 002B     		cmp	r3, #0	@ D.7196,
 1800 006a 06D0     		beq	.L85	@,
1306:src/main.c    **** 		take_temp_sample--;
 1801              		.loc 2 1306 0
 1802 006c 1B4B     		ldr	r3, .L89+16	@ tmp164,
 1803 006e 1B88     		ldrh	r3, [r3]	@ tmp165, take_temp_sample
 1804 0070 9BB2     		uxth	r3, r3	@ D.7196, tmp165
 1805 0072 013B     		subs	r3, r3, #1	@ tmp166,
 1806 0074 9AB2     		uxth	r2, r3	@ D.7196, tmp166
ARM GAS  /tmp/ccI8cyDB.s 			page 74


 1807 0076 194B     		ldr	r3, .L89+16	@ tmp167,
 1808 0078 1A80     		strh	r2, [r3]	@ tmp168, take_temp_sample
 1809              	.L85:
1307:src/main.c    **** 
1308:src/main.c    **** 	if (timer_meas)
 1810              		.loc 2 1308 0
 1811 007a 194B     		ldr	r3, .L89+20	@ tmp169,
 1812 007c 1B78     		ldrb	r3, [r3]	@ tmp170, timer_meas
 1813 007e DBB2     		uxtb	r3, r3	@ D.7197, tmp170
 1814 0080 002B     		cmp	r3, #0	@ D.7197,
 1815 0082 06D0     		beq	.L86	@,
1309:src/main.c    **** 		timer_meas--;
 1816              		.loc 2 1309 0
 1817 0084 164B     		ldr	r3, .L89+20	@ tmp171,
 1818 0086 1B78     		ldrb	r3, [r3]	@ tmp172, timer_meas
 1819 0088 DBB2     		uxtb	r3, r3	@ D.7197, tmp172
 1820 008a 013B     		subs	r3, r3, #1	@ tmp173,
 1821 008c DAB2     		uxtb	r2, r3	@ D.7197, tmp173
 1822 008e 144B     		ldr	r3, .L89+20	@ tmp174,
 1823 0090 1A70     		strb	r2, [r3]	@ tmp175, timer_meas
 1824              	.L86:
1310:src/main.c    **** 
1311:src/main.c    **** 	// //cuenta de a 1 minuto
1312:src/main.c    **** 	// if (secs > 59999)	//pasaron 1 min
1313:src/main.c    **** 	// {
1314:src/main.c    **** 	// 	minutes++;
1315:src/main.c    **** 	// 	secs = 0;
1316:src/main.c    **** 	// }
1317:src/main.c    **** 	// else
1318:src/main.c    **** 	// 	secs++;
1319:src/main.c    **** 	//
1320:src/main.c    **** 	// if (minutes > 60)
1321:src/main.c    **** 	// {
1322:src/main.c    **** 	// 	hours++;
1323:src/main.c    **** 	// 	minutes = 0;
1324:src/main.c    **** 	// }
1325:src/main.c    **** 
1326:src/main.c    **** #ifdef USE_MQTT_LIB
1327:src/main.c    **** 	//timer del MQTT
1328:src/main.c    **** 	SysTickIntHandler();
1329:src/main.c    **** #endif
1330:src/main.c    **** 
1331:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1332:src/main.c    **** 	if (usart1_mini_timeout)
 1825              		.loc 2 1332 0
 1826 0092 144B     		ldr	r3, .L89+24	@ tmp176,
 1827 0094 1B78     		ldrb	r3, [r3]	@ tmp177, usart1_mini_timeout
 1828 0096 DBB2     		uxtb	r3, r3	@ D.7197, tmp177
 1829 0098 002B     		cmp	r3, #0	@ D.7197,
 1830 009a 06D0     		beq	.L87	@,
1333:src/main.c    **** 		usart1_mini_timeout--;
 1831              		.loc 2 1333 0
 1832 009c 114B     		ldr	r3, .L89+24	@ tmp178,
 1833 009e 1B78     		ldrb	r3, [r3]	@ tmp179, usart1_mini_timeout
 1834 00a0 DBB2     		uxtb	r3, r3	@ D.7197, tmp179
 1835 00a2 013B     		subs	r3, r3, #1	@ tmp180,
 1836 00a4 DAB2     		uxtb	r2, r3	@ D.7197, tmp180
ARM GAS  /tmp/ccI8cyDB.s 			page 75


 1837 00a6 0F4B     		ldr	r3, .L89+24	@ tmp181,
 1838 00a8 1A70     		strb	r2, [r3]	@ tmp182, usart1_mini_timeout
 1839              	.L87:
1334:src/main.c    **** 	if (usart2_mini_timeout)
 1840              		.loc 2 1334 0
 1841 00aa 0F4B     		ldr	r3, .L89+28	@ tmp183,
 1842 00ac 1B78     		ldrb	r3, [r3]	@ tmp184, usart2_mini_timeout
 1843 00ae DBB2     		uxtb	r3, r3	@ D.7197, tmp184
 1844 00b0 002B     		cmp	r3, #0	@ D.7197,
 1845 00b2 06D0     		beq	.L88	@,
1335:src/main.c    **** 		usart2_mini_timeout--;
 1846              		.loc 2 1335 0
 1847 00b4 0C4B     		ldr	r3, .L89+28	@ tmp185,
 1848 00b6 1B78     		ldrb	r3, [r3]	@ tmp186, usart2_mini_timeout
 1849 00b8 DBB2     		uxtb	r3, r3	@ D.7197, tmp186
 1850 00ba 013B     		subs	r3, r3, #1	@ tmp187,
 1851 00bc DAB2     		uxtb	r2, r3	@ D.7197, tmp187
 1852 00be 0A4B     		ldr	r3, .L89+28	@ tmp188,
 1853 00c0 1A70     		strb	r2, [r3]	@ tmp189, usart2_mini_timeout
 1854              	.L88:
1336:src/main.c    **** #endif
1337:src/main.c    **** #ifdef USE_GPS
1338:src/main.c    **** 	GPSTimeoutCounters ();
1339:src/main.c    **** #endif
1340:src/main.c    **** 
1341:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1342:src/main.c    **** 	GSMTimeoutCounters ();
 1855              		.loc 2 1342 0
 1856 00c2 FFF7FEFF 		bl	GSMTimeoutCounters	@
1343:src/main.c    **** #endif
1344:src/main.c    **** }
 1857              		.loc 2 1344 0
 1858 00c6 C046     		nop
 1859              		@ sp needed	@
 1860 00c8 10BD     		pop	{r4, pc}
 1861              	.L90:
 1862 00ca C046     		.align	2
 1863              	.L89:
 1864 00cc 00000000 		.word	wait_ms_var
 1865 00d0 00000000 		.word	timer_standby
 1866 00d4 00000000 		.word	tt_take_photo_sample
 1867 00d8 00000000 		.word	tt_relay_on_off
 1868 00dc 00000000 		.word	take_temp_sample
 1869 00e0 00000000 		.word	timer_meas
 1870 00e4 00000000 		.word	usart1_mini_timeout
 1871 00e8 00000000 		.word	usart2_mini_timeout
 1872              		.cfi_endproc
 1873              	.LFE22:
 1874              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1875              		.text
 1876              	.Letext0:
 1877              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1878              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1879              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1880              		.file 6 "src/hard.h"
 1881              		.file 7 "src/flash_program.h"
 1882              		.file 8 "src/funcs_gsm.h"
ARM GAS  /tmp/ccI8cyDB.s 			page 76


 1883              		.section	.debug_info,"",%progbits
 1884              	.Ldebug_info0:
 1885 0000 2C0D0000 		.4byte	0xd2c
 1886 0004 0200     		.2byte	0x2
 1887 0006 00000000 		.4byte	.Ldebug_abbrev0
 1888 000a 04       		.byte	0x4
 1889 000b 01       		.uleb128 0x1
 1890 000c 4B090000 		.4byte	.LASF197
 1891 0010 0C       		.byte	0xc
 1892 0011 2D090000 		.4byte	.LASF198
 1893 0015 67070000 		.4byte	.LASF199
 1894 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1895 001d 00000000 		.4byte	0
 1896 0021 00000000 		.4byte	0
 1897 0025 00000000 		.4byte	.Ldebug_line0
 1898 0029 02       		.uleb128 0x2
 1899 002a C6050000 		.4byte	.LASF131
 1900 002e 01       		.byte	0x1
 1901 002f 06010000 		.4byte	0x106
 1902 0033 03       		.byte	0x3
 1903 0034 C7       		.byte	0xc7
 1904 0035 06010000 		.4byte	0x106
 1905 0039 03       		.uleb128 0x3
 1906 003a 4D060000 		.4byte	.LASF0
 1907 003e 72       		.sleb128 -14
 1908 003f 03       		.uleb128 0x3
 1909 0040 FB090000 		.4byte	.LASF1
 1910 0044 73       		.sleb128 -13
 1911 0045 03       		.uleb128 0x3
 1912 0046 7C000000 		.4byte	.LASF2
 1913 004a 7B       		.sleb128 -5
 1914 004b 03       		.uleb128 0x3
 1915 004c 7E010000 		.4byte	.LASF3
 1916 0050 7E       		.sleb128 -2
 1917 0051 03       		.uleb128 0x3
 1918 0052 0E070000 		.4byte	.LASF4
 1919 0056 7F       		.sleb128 -1
 1920 0057 04       		.uleb128 0x4
 1921 0058 82040000 		.4byte	.LASF5
 1922 005c 00       		.byte	0
 1923 005d 04       		.uleb128 0x4
 1924 005e 56050000 		.4byte	.LASF6
 1925 0062 01       		.byte	0x1
 1926 0063 04       		.uleb128 0x4
 1927 0064 DF050000 		.4byte	.LASF7
 1928 0068 02       		.byte	0x2
 1929 0069 04       		.uleb128 0x4
 1930 006a 06010000 		.4byte	.LASF8
 1931 006e 03       		.byte	0x3
 1932 006f 04       		.uleb128 0x4
 1933 0070 9A010000 		.4byte	.LASF9
 1934 0074 04       		.byte	0x4
 1935 0075 04       		.uleb128 0x4
 1936 0076 34010000 		.4byte	.LASF10
 1937 007a 05       		.byte	0x5
 1938 007b 04       		.uleb128 0x4
 1939 007c 46000000 		.4byte	.LASF11
ARM GAS  /tmp/ccI8cyDB.s 			page 77


 1940 0080 06       		.byte	0x6
 1941 0081 04       		.uleb128 0x4
 1942 0082 33000000 		.4byte	.LASF12
 1943 0086 07       		.byte	0x7
 1944 0087 04       		.uleb128 0x4
 1945 0088 1B050000 		.4byte	.LASF13
 1946 008c 08       		.byte	0x8
 1947 008d 04       		.uleb128 0x4
 1948 008e A6030000 		.4byte	.LASF14
 1949 0092 09       		.byte	0x9
 1950 0093 04       		.uleb128 0x4
 1951 0094 D0070000 		.4byte	.LASF15
 1952 0098 0A       		.byte	0xa
 1953 0099 04       		.uleb128 0x4
 1954 009a B1060000 		.4byte	.LASF16
 1955 009e 0B       		.byte	0xb
 1956 009f 04       		.uleb128 0x4
 1957 00a0 70050000 		.4byte	.LASF17
 1958 00a4 0C       		.byte	0xc
 1959 00a5 04       		.uleb128 0x4
 1960 00a6 23050000 		.4byte	.LASF18
 1961 00aa 0D       		.byte	0xd
 1962 00ab 04       		.uleb128 0x4
 1963 00ac 6A060000 		.4byte	.LASF19
 1964 00b0 0E       		.byte	0xe
 1965 00b1 04       		.uleb128 0x4
 1966 00b2 4E070000 		.4byte	.LASF20
 1967 00b6 0F       		.byte	0xf
 1968 00b7 04       		.uleb128 0x4
 1969 00b8 9C030000 		.4byte	.LASF21
 1970 00bc 10       		.byte	0x10
 1971 00bd 04       		.uleb128 0x4
 1972 00be F3070000 		.4byte	.LASF22
 1973 00c2 11       		.byte	0x11
 1974 00c3 04       		.uleb128 0x4
 1975 00c4 C5070000 		.4byte	.LASF23
 1976 00c8 13       		.byte	0x13
 1977 00c9 04       		.uleb128 0x4
 1978 00ca EB030000 		.4byte	.LASF24
 1979 00ce 14       		.byte	0x14
 1980 00cf 04       		.uleb128 0x4
 1981 00d0 D8000000 		.4byte	.LASF25
 1982 00d4 15       		.byte	0x15
 1983 00d5 04       		.uleb128 0x4
 1984 00d6 9A060000 		.4byte	.LASF26
 1985 00da 16       		.byte	0x16
 1986 00db 04       		.uleb128 0x4
 1987 00dc 74010000 		.4byte	.LASF27
 1988 00e0 17       		.byte	0x17
 1989 00e1 04       		.uleb128 0x4
 1990 00e2 32070000 		.4byte	.LASF28
 1991 00e6 18       		.byte	0x18
 1992 00e7 04       		.uleb128 0x4
 1993 00e8 E7010000 		.4byte	.LASF29
 1994 00ec 19       		.byte	0x19
 1995 00ed 04       		.uleb128 0x4
 1996 00ee BE080000 		.4byte	.LASF30
ARM GAS  /tmp/ccI8cyDB.s 			page 78


 1997 00f2 1A       		.byte	0x1a
 1998 00f3 04       		.uleb128 0x4
 1999 00f4 2D060000 		.4byte	.LASF31
 2000 00f8 1B       		.byte	0x1b
 2001 00f9 04       		.uleb128 0x4
 2002 00fa AD020000 		.4byte	.LASF32
 2003 00fe 1C       		.byte	0x1c
 2004 00ff 04       		.uleb128 0x4
 2005 0100 1B070000 		.4byte	.LASF33
 2006 0104 1E       		.byte	0x1e
 2007 0105 00       		.byte	0
 2008 0106 05       		.uleb128 0x5
 2009 0107 01       		.byte	0x1
 2010 0108 06       		.byte	0x6
 2011 0109 21090000 		.4byte	.LASF36
 2012 010d 06       		.uleb128 0x6
 2013 010e 94020000 		.4byte	.LASF34
 2014 0112 03       		.byte	0x3
 2015 0113 5F01     		.2byte	0x15f
 2016 0115 29000000 		.4byte	0x29
 2017 0119 07       		.uleb128 0x7
 2018 011a D3060000 		.4byte	.LASF35
 2019 011e 04       		.byte	0x4
 2020 011f 1D       		.byte	0x1d
 2021 0120 24010000 		.4byte	0x124
 2022 0124 05       		.uleb128 0x5
 2023 0125 01       		.byte	0x1
 2024 0126 08       		.byte	0x8
 2025 0127 01080000 		.4byte	.LASF37
 2026 012b 05       		.uleb128 0x5
 2027 012c 02       		.byte	0x2
 2028 012d 05       		.byte	0x5
 2029 012e 1A060000 		.4byte	.LASF38
 2030 0132 07       		.uleb128 0x7
 2031 0133 3A020000 		.4byte	.LASF39
 2032 0137 04       		.byte	0x4
 2033 0138 2B       		.byte	0x2b
 2034 0139 3D010000 		.4byte	0x13d
 2035 013d 05       		.uleb128 0x5
 2036 013e 02       		.byte	0x2
 2037 013f 07       		.byte	0x7
 2038 0140 38090000 		.4byte	.LASF40
 2039 0144 07       		.uleb128 0x7
 2040 0145 F4000000 		.4byte	.LASF41
 2041 0149 04       		.byte	0x4
 2042 014a 3F       		.byte	0x3f
 2043 014b 4F010000 		.4byte	0x14f
 2044 014f 05       		.uleb128 0x5
 2045 0150 04       		.byte	0x4
 2046 0151 05       		.byte	0x5
 2047 0152 24060000 		.4byte	.LASF42
 2048 0156 07       		.uleb128 0x7
 2049 0157 18080000 		.4byte	.LASF43
 2050 015b 04       		.byte	0x4
 2051 015c 41       		.byte	0x41
 2052 015d 61010000 		.4byte	0x161
 2053 0161 05       		.uleb128 0x5
ARM GAS  /tmp/ccI8cyDB.s 			page 79


 2054 0162 04       		.byte	0x4
 2055 0163 07       		.byte	0x7
 2056 0164 3C070000 		.4byte	.LASF44
 2057 0168 05       		.uleb128 0x5
 2058 0169 08       		.byte	0x8
 2059 016a 05       		.byte	0x5
 2060 016b 74040000 		.4byte	.LASF45
 2061 016f 05       		.uleb128 0x5
 2062 0170 08       		.byte	0x8
 2063 0171 07       		.byte	0x7
 2064 0172 F1010000 		.4byte	.LASF46
 2065 0176 08       		.uleb128 0x8
 2066 0177 04       		.byte	0x4
 2067 0178 05       		.byte	0x5
 2068 0179 696E7400 		.ascii	"int\000"
 2069 017d 05       		.uleb128 0x5
 2070 017e 04       		.byte	0x4
 2071 017f 07       		.byte	0x7
 2072 0180 C6000000 		.4byte	.LASF47
 2073 0184 07       		.uleb128 0x7
 2074 0185 F6030000 		.4byte	.LASF48
 2075 0189 05       		.byte	0x5
 2076 018a 14       		.byte	0x14
 2077 018b 19010000 		.4byte	0x119
 2078 018f 07       		.uleb128 0x7
 2079 0190 AE050000 		.4byte	.LASF49
 2080 0194 05       		.byte	0x5
 2081 0195 1A       		.byte	0x1a
 2082 0196 32010000 		.4byte	0x132
 2083 019a 07       		.uleb128 0x7
 2084 019b AB070000 		.4byte	.LASF50
 2085 019f 05       		.byte	0x5
 2086 01a0 1F       		.byte	0x1f
 2087 01a1 44010000 		.4byte	0x144
 2088 01a5 07       		.uleb128 0x7
 2089 01a6 B3010000 		.4byte	.LASF51
 2090 01aa 05       		.byte	0x5
 2091 01ab 20       		.byte	0x20
 2092 01ac 56010000 		.4byte	0x156
 2093 01b0 09       		.uleb128 0x9
 2094 01b1 2003     		.2byte	0x320
 2095 01b3 01       		.byte	0x1
 2096 01b4 71       		.byte	0x71
 2097 01b5 4D020000 		.4byte	0x24d
 2098 01b9 0A       		.uleb128 0xa
 2099 01ba CE010000 		.4byte	.LASF52
 2100 01be 01       		.byte	0x1
 2101 01bf 73       		.byte	0x73
 2102 01c0 64020000 		.4byte	0x264
 2103 01c4 02       		.byte	0x2
 2104 01c5 23       		.byte	0x23
 2105 01c6 00       		.uleb128 0
 2106 01c7 0A       		.uleb128 0xa
 2107 01c8 E8050000 		.4byte	.LASF53
 2108 01cc 01       		.byte	0x1
 2109 01cd 74       		.byte	0x74
 2110 01ce 69020000 		.4byte	0x269
ARM GAS  /tmp/ccI8cyDB.s 			page 80


 2111 01d2 02       		.byte	0x2
 2112 01d3 23       		.byte	0x23
 2113 01d4 04       		.uleb128 0x4
 2114 01d5 0A       		.uleb128 0xa
 2115 01d6 AE080000 		.4byte	.LASF54
 2116 01da 01       		.byte	0x1
 2117 01db 75       		.byte	0x75
 2118 01dc 79020000 		.4byte	0x279
 2119 01e0 03       		.byte	0x3
 2120 01e1 23       		.byte	0x23
 2121 01e2 8001     		.uleb128 0x80
 2122 01e4 0A       		.uleb128 0xa
 2123 01e5 DE010000 		.4byte	.LASF55
 2124 01e9 01       		.byte	0x1
 2125 01ea 76       		.byte	0x76
 2126 01eb 69020000 		.4byte	0x269
 2127 01ef 03       		.byte	0x3
 2128 01f0 23       		.byte	0x23
 2129 01f1 8401     		.uleb128 0x84
 2130 01f3 0A       		.uleb128 0xa
 2131 01f4 140A0000 		.4byte	.LASF56
 2132 01f8 01       		.byte	0x1
 2133 01f9 77       		.byte	0x77
 2134 01fa 7E020000 		.4byte	0x27e
 2135 01fe 03       		.byte	0x3
 2136 01ff 23       		.byte	0x23
 2137 0200 8002     		.uleb128 0x100
 2138 0202 0A       		.uleb128 0xa
 2139 0203 FC050000 		.4byte	.LASF57
 2140 0207 01       		.byte	0x1
 2141 0208 78       		.byte	0x78
 2142 0209 69020000 		.4byte	0x269
 2143 020d 03       		.byte	0x3
 2144 020e 23       		.byte	0x23
 2145 020f 8402     		.uleb128 0x104
 2146 0211 0A       		.uleb128 0xa
 2147 0212 6B050000 		.4byte	.LASF58
 2148 0216 01       		.byte	0x1
 2149 0217 79       		.byte	0x79
 2150 0218 83020000 		.4byte	0x283
 2151 021c 03       		.byte	0x3
 2152 021d 23       		.byte	0x23
 2153 021e 8003     		.uleb128 0x180
 2154 0220 0A       		.uleb128 0xa
 2155 0221 06060000 		.4byte	.LASF59
 2156 0225 01       		.byte	0x1
 2157 0226 7A       		.byte	0x7a
 2158 0227 69020000 		.4byte	0x269
 2159 022b 03       		.byte	0x3
 2160 022c 23       		.byte	0x23
 2161 022d 8403     		.uleb128 0x184
 2162 022f 0A       		.uleb128 0xa
 2163 0230 10060000 		.4byte	.LASF60
 2164 0234 01       		.byte	0x1
 2165 0235 7B       		.byte	0x7b
 2166 0236 88020000 		.4byte	0x288
 2167 023a 03       		.byte	0x3
ARM GAS  /tmp/ccI8cyDB.s 			page 81


 2168 023b 23       		.byte	0x23
 2169 023c 8004     		.uleb128 0x200
 2170 023e 0B       		.uleb128 0xb
 2171 023f 495000   		.ascii	"IP\000"
 2172 0242 01       		.byte	0x1
 2173 0243 7C       		.byte	0x7c
 2174 0244 A8020000 		.4byte	0x2a8
 2175 0248 03       		.byte	0x3
 2176 0249 23       		.byte	0x23
 2177 024a 8006     		.uleb128 0x300
 2178 024c 00       		.byte	0
 2179 024d 0C       		.uleb128 0xc
 2180 024e A5010000 		.4byte	0x1a5
 2181 0252 5D020000 		.4byte	0x25d
 2182 0256 0D       		.uleb128 0xd
 2183 0257 5D020000 		.4byte	0x25d
 2184 025b 00       		.byte	0
 2185 025c 00       		.byte	0
 2186 025d 05       		.uleb128 0x5
 2187 025e 04       		.byte	0x4
 2188 025f 07       		.byte	0x7
 2189 0260 24070000 		.4byte	.LASF61
 2190 0264 0E       		.uleb128 0xe
 2191 0265 4D020000 		.4byte	0x24d
 2192 0269 0C       		.uleb128 0xc
 2193 026a A5010000 		.4byte	0x1a5
 2194 026e 79020000 		.4byte	0x279
 2195 0272 0D       		.uleb128 0xd
 2196 0273 5D020000 		.4byte	0x25d
 2197 0277 1E       		.byte	0x1e
 2198 0278 00       		.byte	0
 2199 0279 0E       		.uleb128 0xe
 2200 027a 4D020000 		.4byte	0x24d
 2201 027e 0E       		.uleb128 0xe
 2202 027f 4D020000 		.4byte	0x24d
 2203 0283 0E       		.uleb128 0xe
 2204 0284 4D020000 		.4byte	0x24d
 2205 0288 0C       		.uleb128 0xc
 2206 0289 A5010000 		.4byte	0x1a5
 2207 028d 98020000 		.4byte	0x298
 2208 0291 0D       		.uleb128 0xd
 2209 0292 5D020000 		.4byte	0x25d
 2210 0296 3F       		.byte	0x3f
 2211 0297 00       		.byte	0
 2212 0298 0C       		.uleb128 0xc
 2213 0299 A5010000 		.4byte	0x1a5
 2214 029d A8020000 		.4byte	0x2a8
 2215 02a1 0D       		.uleb128 0xd
 2216 02a2 5D020000 		.4byte	0x25d
 2217 02a6 07       		.byte	0x7
 2218 02a7 00       		.byte	0
 2219 02a8 0E       		.uleb128 0xe
 2220 02a9 98020000 		.4byte	0x298
 2221 02ad 07       		.uleb128 0x7
 2222 02ae DD060000 		.4byte	.LASF62
 2223 02b2 01       		.byte	0x1
 2224 02b3 7D       		.byte	0x7d
ARM GAS  /tmp/ccI8cyDB.s 			page 82


 2225 02b4 B0010000 		.4byte	0x1b0
 2226 02b8 0F       		.uleb128 0xf
 2227 02b9 34       		.byte	0x34
 2228 02ba 01       		.byte	0x1
 2229 02bb 86       		.byte	0x86
 2230 02bc 5B030000 		.4byte	0x35b
 2231 02c0 0A       		.uleb128 0xa
 2232 02c1 B9020000 		.4byte	.LASF63
 2233 02c5 01       		.byte	0x1
 2234 02c6 88       		.byte	0x88
 2235 02c7 60030000 		.4byte	0x360
 2236 02cb 02       		.byte	0x2
 2237 02cc 23       		.byte	0x23
 2238 02cd 00       		.uleb128 0
 2239 02ce 0A       		.uleb128 0xa
 2240 02cf 2D070000 		.4byte	.LASF64
 2241 02d3 01       		.byte	0x1
 2242 02d4 89       		.byte	0x89
 2243 02d5 5B030000 		.4byte	0x35b
 2244 02d9 02       		.byte	0x2
 2245 02da 23       		.byte	0x23
 2246 02db 04       		.uleb128 0x4
 2247 02dc 0A       		.uleb128 0xa
 2248 02dd E8050000 		.4byte	.LASF53
 2249 02e1 01       		.byte	0x1
 2250 02e2 8A       		.byte	0x8a
 2251 02e3 A5010000 		.4byte	0x1a5
 2252 02e7 02       		.byte	0x2
 2253 02e8 23       		.byte	0x23
 2254 02e9 08       		.uleb128 0x8
 2255 02ea 0A       		.uleb128 0xa
 2256 02eb 85030000 		.4byte	.LASF65
 2257 02ef 01       		.byte	0x1
 2258 02f0 8B       		.byte	0x8b
 2259 02f1 5B030000 		.4byte	0x35b
 2260 02f5 02       		.byte	0x2
 2261 02f6 23       		.byte	0x23
 2262 02f7 0C       		.uleb128 0xc
 2263 02f8 0B       		.uleb128 0xb
 2264 02f9 53435200 		.ascii	"SCR\000"
 2265 02fd 01       		.byte	0x1
 2266 02fe 8C       		.byte	0x8c
 2267 02ff 5B030000 		.4byte	0x35b
 2268 0303 02       		.byte	0x2
 2269 0304 23       		.byte	0x23
 2270 0305 10       		.uleb128 0x10
 2271 0306 0B       		.uleb128 0xb
 2272 0307 43435200 		.ascii	"CCR\000"
 2273 030b 01       		.byte	0x1
 2274 030c 8D       		.byte	0x8d
 2275 030d 5B030000 		.4byte	0x35b
 2276 0311 02       		.byte	0x2
 2277 0312 23       		.byte	0x23
 2278 0313 14       		.uleb128 0x14
 2279 0314 0A       		.uleb128 0xa
 2280 0315 F2050000 		.4byte	.LASF66
 2281 0319 01       		.byte	0x1
ARM GAS  /tmp/ccI8cyDB.s 			page 83


 2282 031a 8E       		.byte	0x8e
 2283 031b A5010000 		.4byte	0x1a5
 2284 031f 02       		.byte	0x2
 2285 0320 23       		.byte	0x23
 2286 0321 18       		.uleb128 0x18
 2287 0322 0B       		.uleb128 0xb
 2288 0323 53485000 		.ascii	"SHP\000"
 2289 0327 01       		.byte	0x1
 2290 0328 8F       		.byte	0x8f
 2291 0329 75030000 		.4byte	0x375
 2292 032d 02       		.byte	0x2
 2293 032e 23       		.byte	0x23
 2294 032f 1C       		.uleb128 0x1c
 2295 0330 0A       		.uleb128 0xa
 2296 0331 8C040000 		.4byte	.LASF67
 2297 0335 01       		.byte	0x1
 2298 0336 90       		.byte	0x90
 2299 0337 5B030000 		.4byte	0x35b
 2300 033b 02       		.byte	0x2
 2301 033c 23       		.byte	0x23
 2302 033d 24       		.uleb128 0x24
 2303 033e 0A       		.uleb128 0xa
 2304 033f FC050000 		.4byte	.LASF57
 2305 0343 01       		.byte	0x1
 2306 0344 91       		.byte	0x91
 2307 0345 65030000 		.4byte	0x365
 2308 0349 02       		.byte	0x2
 2309 034a 23       		.byte	0x23
 2310 034b 28       		.uleb128 0x28
 2311 034c 0A       		.uleb128 0xa
 2312 034d 08020000 		.4byte	.LASF68
 2313 0351 01       		.byte	0x1
 2314 0352 92       		.byte	0x92
 2315 0353 5B030000 		.4byte	0x35b
 2316 0357 02       		.byte	0x2
 2317 0358 23       		.byte	0x23
 2318 0359 30       		.uleb128 0x30
 2319 035a 00       		.byte	0
 2320 035b 0E       		.uleb128 0xe
 2321 035c A5010000 		.4byte	0x1a5
 2322 0360 10       		.uleb128 0x10
 2323 0361 5B030000 		.4byte	0x35b
 2324 0365 0C       		.uleb128 0xc
 2325 0366 A5010000 		.4byte	0x1a5
 2326 036a 75030000 		.4byte	0x375
 2327 036e 0D       		.uleb128 0xd
 2328 036f 5D020000 		.4byte	0x25d
 2329 0373 01       		.byte	0x1
 2330 0374 00       		.byte	0
 2331 0375 0E       		.uleb128 0xe
 2332 0376 65030000 		.4byte	0x365
 2333 037a 07       		.uleb128 0x7
 2334 037b E7060000 		.4byte	.LASF69
 2335 037f 01       		.byte	0x1
 2336 0380 93       		.byte	0x93
 2337 0381 B8020000 		.4byte	0x2b8
 2338 0385 0F       		.uleb128 0xf
ARM GAS  /tmp/ccI8cyDB.s 			page 84


 2339 0386 10       		.byte	0x10
 2340 0387 01       		.byte	0x1
 2341 0388 FC       		.byte	0xfc
 2342 0389 C8030000 		.4byte	0x3c8
 2343 038d 0A       		.uleb128 0xa
 2344 038e 630A0000 		.4byte	.LASF70
 2345 0392 01       		.byte	0x1
 2346 0393 FE       		.byte	0xfe
 2347 0394 5B030000 		.4byte	0x35b
 2348 0398 02       		.byte	0x2
 2349 0399 23       		.byte	0x23
 2350 039a 00       		.uleb128 0
 2351 039b 0A       		.uleb128 0xa
 2352 039c D3000000 		.4byte	.LASF71
 2353 03a0 01       		.byte	0x1
 2354 03a1 FF       		.byte	0xff
 2355 03a2 5B030000 		.4byte	0x35b
 2356 03a6 02       		.byte	0x2
 2357 03a7 23       		.byte	0x23
 2358 03a8 04       		.uleb128 0x4
 2359 03a9 11       		.uleb128 0x11
 2360 03aa 56414C00 		.ascii	"VAL\000"
 2361 03ae 01       		.byte	0x1
 2362 03af 0001     		.2byte	0x100
 2363 03b1 5B030000 		.4byte	0x35b
 2364 03b5 02       		.byte	0x2
 2365 03b6 23       		.byte	0x23
 2366 03b7 08       		.uleb128 0x8
 2367 03b8 12       		.uleb128 0x12
 2368 03b9 19010000 		.4byte	.LASF72
 2369 03bd 01       		.byte	0x1
 2370 03be 0101     		.2byte	0x101
 2371 03c0 60030000 		.4byte	0x360
 2372 03c4 02       		.byte	0x2
 2373 03c5 23       		.byte	0x23
 2374 03c6 0C       		.uleb128 0xc
 2375 03c7 00       		.byte	0
 2376 03c8 06       		.uleb128 0x6
 2377 03c9 95050000 		.4byte	.LASF73
 2378 03cd 01       		.byte	0x1
 2379 03ce 0201     		.2byte	0x102
 2380 03d0 85030000 		.4byte	0x385
 2381 03d4 13       		.uleb128 0x13
 2382 03d5 44       		.byte	0x44
 2383 03d6 03       		.byte	0x3
 2384 03d7 7C01     		.2byte	0x17c
 2385 03d9 9E040000 		.4byte	0x49e
 2386 03dd 11       		.uleb128 0x11
 2387 03de 49535200 		.ascii	"ISR\000"
 2388 03e2 03       		.byte	0x3
 2389 03e3 7E01     		.2byte	0x17e
 2390 03e5 5B030000 		.4byte	0x35b
 2391 03e9 02       		.byte	0x2
 2392 03ea 23       		.byte	0x23
 2393 03eb 00       		.uleb128 0
 2394 03ec 11       		.uleb128 0x11
 2395 03ed 49455200 		.ascii	"IER\000"
ARM GAS  /tmp/ccI8cyDB.s 			page 85


 2396 03f1 03       		.byte	0x3
 2397 03f2 7F01     		.2byte	0x17f
 2398 03f4 5B030000 		.4byte	0x35b
 2399 03f8 02       		.byte	0x2
 2400 03f9 23       		.byte	0x23
 2401 03fa 04       		.uleb128 0x4
 2402 03fb 11       		.uleb128 0x11
 2403 03fc 435200   		.ascii	"CR\000"
 2404 03ff 03       		.byte	0x3
 2405 0400 8001     		.2byte	0x180
 2406 0402 5B030000 		.4byte	0x35b
 2407 0406 02       		.byte	0x2
 2408 0407 23       		.byte	0x23
 2409 0408 08       		.uleb128 0x8
 2410 0409 12       		.uleb128 0x12
 2411 040a 5F050000 		.4byte	.LASF74
 2412 040e 03       		.byte	0x3
 2413 040f 8101     		.2byte	0x181
 2414 0411 5B030000 		.4byte	0x35b
 2415 0415 02       		.byte	0x2
 2416 0416 23       		.byte	0x23
 2417 0417 0C       		.uleb128 0xc
 2418 0418 12       		.uleb128 0x12
 2419 0419 65050000 		.4byte	.LASF75
 2420 041d 03       		.byte	0x3
 2421 041e 8201     		.2byte	0x182
 2422 0420 5B030000 		.4byte	0x35b
 2423 0424 02       		.byte	0x2
 2424 0425 23       		.byte	0x23
 2425 0426 10       		.uleb128 0x10
 2426 0427 12       		.uleb128 0x12
 2427 0428 04030000 		.4byte	.LASF76
 2428 042c 03       		.byte	0x3
 2429 042d 8301     		.2byte	0x183
 2430 042f 5B030000 		.4byte	0x35b
 2431 0433 02       		.byte	0x2
 2432 0434 23       		.byte	0x23
 2433 0435 14       		.uleb128 0x14
 2434 0436 12       		.uleb128 0x12
 2435 0437 F2050000 		.4byte	.LASF66
 2436 043b 03       		.byte	0x3
 2437 043c 8401     		.2byte	0x184
 2438 043e A5010000 		.4byte	0x1a5
 2439 0442 02       		.byte	0x2
 2440 0443 23       		.byte	0x23
 2441 0444 18       		.uleb128 0x18
 2442 0445 12       		.uleb128 0x12
 2443 0446 FC050000 		.4byte	.LASF57
 2444 044a 03       		.byte	0x3
 2445 044b 8501     		.2byte	0x185
 2446 044d A5010000 		.4byte	0x1a5
 2447 0451 02       		.byte	0x2
 2448 0452 23       		.byte	0x23
 2449 0453 1C       		.uleb128 0x1c
 2450 0454 11       		.uleb128 0x11
 2451 0455 545200   		.ascii	"TR\000"
 2452 0458 03       		.byte	0x3
ARM GAS  /tmp/ccI8cyDB.s 			page 86


 2453 0459 8601     		.2byte	0x186
 2454 045b 5B030000 		.4byte	0x35b
 2455 045f 02       		.byte	0x2
 2456 0460 23       		.byte	0x23
 2457 0461 20       		.uleb128 0x20
 2458 0462 12       		.uleb128 0x12
 2459 0463 06060000 		.4byte	.LASF59
 2460 0467 03       		.byte	0x3
 2461 0468 8701     		.2byte	0x187
 2462 046a A5010000 		.4byte	0x1a5
 2463 046e 02       		.byte	0x2
 2464 046f 23       		.byte	0x23
 2465 0470 24       		.uleb128 0x24
 2466 0471 12       		.uleb128 0x12
 2467 0472 7B020000 		.4byte	.LASF77
 2468 0476 03       		.byte	0x3
 2469 0477 8801     		.2byte	0x188
 2470 0479 5B030000 		.4byte	0x35b
 2471 047d 02       		.byte	0x2
 2472 047e 23       		.byte	0x23
 2473 047f 28       		.uleb128 0x28
 2474 0480 12       		.uleb128 0x12
 2475 0481 10060000 		.4byte	.LASF60
 2476 0485 03       		.byte	0x3
 2477 0486 8901     		.2byte	0x189
 2478 0488 9E040000 		.4byte	0x49e
 2479 048c 02       		.byte	0x2
 2480 048d 23       		.byte	0x23
 2481 048e 2C       		.uleb128 0x2c
 2482 048f 11       		.uleb128 0x11
 2483 0490 445200   		.ascii	"DR\000"
 2484 0493 03       		.byte	0x3
 2485 0494 8A01     		.2byte	0x18a
 2486 0496 5B030000 		.4byte	0x35b
 2487 049a 02       		.byte	0x2
 2488 049b 23       		.byte	0x23
 2489 049c 40       		.uleb128 0x40
 2490 049d 00       		.byte	0
 2491 049e 0C       		.uleb128 0xc
 2492 049f A5010000 		.4byte	0x1a5
 2493 04a3 AE040000 		.4byte	0x4ae
 2494 04a7 0D       		.uleb128 0xd
 2495 04a8 5D020000 		.4byte	0x25d
 2496 04ac 04       		.byte	0x4
 2497 04ad 00       		.byte	0
 2498 04ae 06       		.uleb128 0x6
 2499 04af 68040000 		.4byte	.LASF78
 2500 04b3 03       		.byte	0x3
 2501 04b4 8B01     		.2byte	0x18b
 2502 04b6 D4030000 		.4byte	0x3d4
 2503 04ba 0E       		.uleb128 0xe
 2504 04bb 8F010000 		.4byte	0x18f
 2505 04bf 13       		.uleb128 0x13
 2506 04c0 2C       		.byte	0x2c
 2507 04c1 03       		.byte	0x3
 2508 04c2 6902     		.2byte	0x269
 2509 04c4 9B050000 		.4byte	0x59b
ARM GAS  /tmp/ccI8cyDB.s 			page 87


 2510 04c8 12       		.uleb128 0x12
 2511 04c9 75020000 		.4byte	.LASF79
 2512 04cd 03       		.byte	0x3
 2513 04ce 6B02     		.2byte	0x26b
 2514 04d0 5B030000 		.4byte	0x35b
 2515 04d4 02       		.byte	0x2
 2516 04d5 23       		.byte	0x23
 2517 04d6 00       		.uleb128 0
 2518 04d7 12       		.uleb128 0x12
 2519 04d8 77060000 		.4byte	.LASF80
 2520 04dc 03       		.byte	0x3
 2521 04dd 6C02     		.2byte	0x26c
 2522 04df BA040000 		.4byte	0x4ba
 2523 04e3 02       		.byte	0x2
 2524 04e4 23       		.byte	0x23
 2525 04e5 04       		.uleb128 0x4
 2526 04e6 12       		.uleb128 0x12
 2527 04e7 E8050000 		.4byte	.LASF53
 2528 04eb 03       		.byte	0x3
 2529 04ec 6D02     		.2byte	0x26d
 2530 04ee 8F010000 		.4byte	0x18f
 2531 04f2 02       		.byte	0x2
 2532 04f3 23       		.byte	0x23
 2533 04f4 06       		.uleb128 0x6
 2534 04f5 12       		.uleb128 0x12
 2535 04f6 8D050000 		.4byte	.LASF81
 2536 04fa 03       		.byte	0x3
 2537 04fb 6E02     		.2byte	0x26e
 2538 04fd 5B030000 		.4byte	0x35b
 2539 0501 02       		.byte	0x2
 2540 0502 23       		.byte	0x23
 2541 0503 08       		.uleb128 0x8
 2542 0504 12       		.uleb128 0x12
 2543 0505 2B030000 		.4byte	.LASF82
 2544 0509 03       		.byte	0x3
 2545 050a 6F02     		.2byte	0x26f
 2546 050c 5B030000 		.4byte	0x35b
 2547 0510 02       		.byte	0x2
 2548 0511 23       		.byte	0x23
 2549 0512 0C       		.uleb128 0xc
 2550 0513 11       		.uleb128 0x11
 2551 0514 49445200 		.ascii	"IDR\000"
 2552 0518 03       		.byte	0x3
 2553 0519 7002     		.2byte	0x270
 2554 051b BA040000 		.4byte	0x4ba
 2555 051f 02       		.byte	0x2
 2556 0520 23       		.byte	0x23
 2557 0521 10       		.uleb128 0x10
 2558 0522 12       		.uleb128 0x12
 2559 0523 F2050000 		.4byte	.LASF66
 2560 0527 03       		.byte	0x3
 2561 0528 7102     		.2byte	0x271
 2562 052a 8F010000 		.4byte	0x18f
 2563 052e 02       		.byte	0x2
 2564 052f 23       		.byte	0x23
 2565 0530 12       		.uleb128 0x12
 2566 0531 11       		.uleb128 0x11
ARM GAS  /tmp/ccI8cyDB.s 			page 88


 2567 0532 4F445200 		.ascii	"ODR\000"
 2568 0536 03       		.byte	0x3
 2569 0537 7202     		.2byte	0x272
 2570 0539 BA040000 		.4byte	0x4ba
 2571 053d 02       		.byte	0x2
 2572 053e 23       		.byte	0x23
 2573 053f 14       		.uleb128 0x14
 2574 0540 12       		.uleb128 0x12
 2575 0541 FC050000 		.4byte	.LASF57
 2576 0545 03       		.byte	0x3
 2577 0546 7302     		.2byte	0x273
 2578 0548 8F010000 		.4byte	0x18f
 2579 054c 02       		.byte	0x2
 2580 054d 23       		.byte	0x23
 2581 054e 16       		.uleb128 0x16
 2582 054f 12       		.uleb128 0x12
 2583 0550 41000000 		.4byte	.LASF83
 2584 0554 03       		.byte	0x3
 2585 0555 7402     		.2byte	0x274
 2586 0557 5B030000 		.4byte	0x35b
 2587 055b 02       		.byte	0x2
 2588 055c 23       		.byte	0x23
 2589 055d 18       		.uleb128 0x18
 2590 055e 12       		.uleb128 0x12
 2591 055f 5E0A0000 		.4byte	.LASF84
 2592 0563 03       		.byte	0x3
 2593 0564 7502     		.2byte	0x275
 2594 0566 5B030000 		.4byte	0x35b
 2595 056a 02       		.byte	0x2
 2596 056b 23       		.byte	0x23
 2597 056c 1C       		.uleb128 0x1c
 2598 056d 11       		.uleb128 0x11
 2599 056e 41465200 		.ascii	"AFR\000"
 2600 0572 03       		.byte	0x3
 2601 0573 7602     		.2byte	0x276
 2602 0575 9B050000 		.4byte	0x59b
 2603 0579 02       		.byte	0x2
 2604 057a 23       		.byte	0x23
 2605 057b 20       		.uleb128 0x20
 2606 057c 11       		.uleb128 0x11
 2607 057d 42525200 		.ascii	"BRR\000"
 2608 0581 03       		.byte	0x3
 2609 0582 7702     		.2byte	0x277
 2610 0584 BA040000 		.4byte	0x4ba
 2611 0588 02       		.byte	0x2
 2612 0589 23       		.byte	0x23
 2613 058a 28       		.uleb128 0x28
 2614 058b 12       		.uleb128 0x12
 2615 058c 06060000 		.4byte	.LASF59
 2616 0590 03       		.byte	0x3
 2617 0591 7802     		.2byte	0x278
 2618 0593 8F010000 		.4byte	0x18f
 2619 0597 02       		.byte	0x2
 2620 0598 23       		.byte	0x23
 2621 0599 2A       		.uleb128 0x2a
 2622 059a 00       		.byte	0
 2623 059b 0E       		.uleb128 0xe
ARM GAS  /tmp/ccI8cyDB.s 			page 89


 2624 059c 65030000 		.4byte	0x365
 2625 05a0 06       		.uleb128 0x6
 2626 05a1 F0060000 		.4byte	.LASF85
 2627 05a5 03       		.byte	0x3
 2628 05a6 7902     		.2byte	0x279
 2629 05a8 BF040000 		.4byte	0x4bf
 2630 05ac 05       		.uleb128 0x5
 2631 05ad 08       		.byte	0x8
 2632 05ae 04       		.byte	0x4
 2633 05af A2050000 		.4byte	.LASF86
 2634 05b3 05       		.uleb128 0x5
 2635 05b4 01       		.byte	0x1
 2636 05b5 08       		.byte	0x8
 2637 05b6 5A030000 		.4byte	.LASF87
 2638 05ba 0C       		.uleb128 0xc
 2639 05bb 3D010000 		.4byte	0x13d
 2640 05bf CA050000 		.4byte	0x5ca
 2641 05c3 0D       		.uleb128 0xd
 2642 05c4 5D020000 		.4byte	0x25d
 2643 05c8 02       		.byte	0x2
 2644 05c9 00       		.byte	0
 2645 05ca 0C       		.uleb128 0xc
 2646 05cb B3050000 		.4byte	0x5b3
 2647 05cf DA050000 		.4byte	0x5da
 2648 05d3 0D       		.uleb128 0xd
 2649 05d4 5D020000 		.4byte	0x25d
 2650 05d8 17       		.byte	0x17
 2651 05d9 00       		.byte	0
 2652 05da 14       		.uleb128 0x14
 2653 05db 01       		.byte	0x1
 2654 05dc 24010000 		.4byte	0x124
 2655 05e0 06       		.byte	0x6
 2656 05e1 BF       		.byte	0xbf
 2657 05e2 23060000 		.4byte	0x623
 2658 05e6 04       		.uleb128 0x4
 2659 05e7 DD040000 		.4byte	.LASF88
 2660 05eb 00       		.byte	0
 2661 05ec 04       		.uleb128 0x4
 2662 05ed A5060000 		.4byte	.LASF89
 2663 05f1 01       		.byte	0x1
 2664 05f2 04       		.uleb128 0x4
 2665 05f3 09030000 		.4byte	.LASF90
 2666 05f7 02       		.byte	0x2
 2667 05f8 04       		.uleb128 0x4
 2668 05f9 45020000 		.4byte	.LASF91
 2669 05fd 03       		.byte	0x3
 2670 05fe 04       		.uleb128 0x4
 2671 05ff 5D020000 		.4byte	.LASF92
 2672 0603 04       		.byte	0x4
 2673 0604 04       		.uleb128 0x4
 2674 0605 0F080000 		.4byte	.LASF93
 2675 0609 05       		.byte	0x5
 2676 060a 04       		.uleb128 0x4
 2677 060b A6040000 		.4byte	.LASF94
 2678 060f 06       		.byte	0x6
 2679 0610 04       		.uleb128 0x4
 2680 0611 E7040000 		.4byte	.LASF95
ARM GAS  /tmp/ccI8cyDB.s 			page 90


 2681 0615 07       		.byte	0x7
 2682 0616 04       		.uleb128 0x4
 2683 0617 FE030000 		.4byte	.LASF96
 2684 061b 08       		.byte	0x8
 2685 061c 04       		.uleb128 0x4
 2686 061d 4D040000 		.4byte	.LASF97
 2687 0621 09       		.byte	0x9
 2688 0622 00       		.byte	0
 2689 0623 07       		.uleb128 0x7
 2690 0624 DE030000 		.4byte	.LASF98
 2691 0628 06       		.byte	0x6
 2692 0629 CD       		.byte	0xcd
 2693 062a DA050000 		.4byte	0x5da
 2694 062e 14       		.uleb128 0x14
 2695 062f 01       		.byte	0x1
 2696 0630 24010000 		.4byte	0x124
 2697 0634 06       		.byte	0x6
 2698 0635 D1       		.byte	0xd1
 2699 0636 65060000 		.4byte	0x665
 2700 063a 04       		.uleb128 0x4
 2701 063b 5E000000 		.4byte	.LASF99
 2702 063f 00       		.byte	0
 2703 0640 04       		.uleb128 0x4
 2704 0641 6D000000 		.4byte	.LASF100
 2705 0645 01       		.byte	0x1
 2706 0646 04       		.uleb128 0x4
 2707 0647 FD060000 		.4byte	.LASF101
 2708 064b 02       		.byte	0x2
 2709 064c 04       		.uleb128 0x4
 2710 064d 390A0000 		.4byte	.LASF102
 2711 0651 03       		.byte	0x3
 2712 0652 04       		.uleb128 0x4
 2713 0653 8A060000 		.4byte	.LASF103
 2714 0657 04       		.byte	0x4
 2715 0658 04       		.uleb128 0x4
 2716 0659 A3010000 		.4byte	.LASF104
 2717 065d 05       		.byte	0x5
 2718 065e 04       		.uleb128 0x4
 2719 065f B5000000 		.4byte	.LASF105
 2720 0663 06       		.byte	0x6
 2721 0664 00       		.byte	0
 2722 0665 07       		.uleb128 0x7
 2723 0666 2F080000 		.4byte	.LASF106
 2724 066a 06       		.byte	0x6
 2725 066b DA       		.byte	0xda
 2726 066c 2E060000 		.4byte	0x62e
 2727 0670 15       		.uleb128 0x15
 2728 0671 C6040000 		.4byte	.LASF200
 2729 0675 54       		.byte	0x54
 2730 0676 07       		.byte	0x7
 2731 0677 40       		.byte	0x40
 2732 0678 ED060000 		.4byte	0x6ed
 2733 067c 0A       		.uleb128 0xa
 2734 067d D2050000 		.4byte	.LASF107
 2735 0681 07       		.byte	0x7
 2736 0682 42       		.byte	0x42
 2737 0683 CA050000 		.4byte	0x5ca
ARM GAS  /tmp/ccI8cyDB.s 			page 91


 2738 0687 02       		.byte	0x2
 2739 0688 23       		.byte	0x23
 2740 0689 00       		.uleb128 0
 2741 068a 0A       		.uleb128 0xa
 2742 068b 1F010000 		.4byte	.LASF108
 2743 068f 07       		.byte	0x7
 2744 0690 43       		.byte	0x43
 2745 0691 CA050000 		.4byte	0x5ca
 2746 0695 02       		.byte	0x2
 2747 0696 23       		.byte	0x23
 2748 0697 18       		.uleb128 0x18
 2749 0698 0A       		.uleb128 0xa
 2750 0699 1E0A0000 		.4byte	.LASF109
 2751 069d 07       		.byte	0x7
 2752 069e 44       		.byte	0x44
 2753 069f CA050000 		.4byte	0x5ca
 2754 06a3 02       		.byte	0x2
 2755 06a4 23       		.byte	0x23
 2756 06a5 30       		.uleb128 0x30
 2757 06a6 0A       		.uleb128 0xa
 2758 06a7 BC010000 		.4byte	.LASF110
 2759 06ab 07       		.byte	0x7
 2760 06ac 46       		.byte	0x46
 2761 06ad 7D010000 		.4byte	0x17d
 2762 06b1 02       		.byte	0x2
 2763 06b2 23       		.byte	0x23
 2764 06b3 48       		.uleb128 0x48
 2765 06b4 0A       		.uleb128 0xa
 2766 06b5 C9030000 		.4byte	.LASF111
 2767 06b9 07       		.byte	0x7
 2768 06ba 47       		.byte	0x47
 2769 06bb 7D010000 		.4byte	0x17d
 2770 06bf 02       		.byte	0x2
 2771 06c0 23       		.byte	0x23
 2772 06c1 4C       		.uleb128 0x4c
 2773 06c2 0A       		.uleb128 0xa
 2774 06c3 B9030000 		.4byte	.LASF112
 2775 06c7 07       		.byte	0x7
 2776 06c8 48       		.byte	0x48
 2777 06c9 3D010000 		.4byte	0x13d
 2778 06cd 02       		.byte	0x2
 2779 06ce 23       		.byte	0x23
 2780 06cf 50       		.uleb128 0x50
 2781 06d0 0A       		.uleb128 0xa
 2782 06d1 9E020000 		.4byte	.LASF113
 2783 06d5 07       		.byte	0x7
 2784 06d6 4A       		.byte	0x4a
 2785 06d7 24010000 		.4byte	0x124
 2786 06db 02       		.byte	0x2
 2787 06dc 23       		.byte	0x23
 2788 06dd 52       		.uleb128 0x52
 2789 06de 0A       		.uleb128 0xa
 2790 06df 37030000 		.4byte	.LASF114
 2791 06e3 07       		.byte	0x7
 2792 06e4 4D       		.byte	0x4d
 2793 06e5 24010000 		.4byte	0x124
 2794 06e9 02       		.byte	0x2
ARM GAS  /tmp/ccI8cyDB.s 			page 92


 2795 06ea 23       		.byte	0x23
 2796 06eb 53       		.uleb128 0x53
 2797 06ec 00       		.byte	0
 2798 06ed 07       		.uleb128 0x7
 2799 06ee 0E090000 		.4byte	.LASF115
 2800 06f2 07       		.byte	0x7
 2801 06f3 51       		.byte	0x51
 2802 06f4 70060000 		.4byte	0x670
 2803 06f8 14       		.uleb128 0x14
 2804 06f9 01       		.byte	0x1
 2805 06fa 24010000 		.4byte	0x124
 2806 06fe 08       		.byte	0x8
 2807 06ff 0A       		.byte	0xa
 2808 0700 5F070000 		.4byte	0x75f
 2809 0704 04       		.uleb128 0x4
 2810 0705 1F020000 		.4byte	.LASF116
 2811 0709 00       		.byte	0
 2812 070a 04       		.uleb128 0x4
 2813 070b 39060000 		.4byte	.LASF117
 2814 070f 01       		.byte	0x1
 2815 0710 04       		.uleb128 0x4
 2816 0711 3E030000 		.4byte	.LASF118
 2817 0715 02       		.byte	0x2
 2818 0716 04       		.uleb128 0x4
 2819 0717 55040000 		.4byte	.LASF119
 2820 071b 03       		.byte	0x3
 2821 071c 04       		.uleb128 0x4
 2822 071d 5C080000 		.4byte	.LASF120
 2823 0721 04       		.byte	0x4
 2824 0722 04       		.uleb128 0x4
 2825 0723 8C000000 		.4byte	.LASF121
 2826 0727 05       		.byte	0x5
 2827 0728 04       		.uleb128 0x4
 2828 0729 5D010000 		.4byte	.LASF122
 2829 072d 06       		.byte	0x6
 2830 072e 04       		.uleb128 0x4
 2831 072f C8080000 		.4byte	.LASF123
 2832 0733 07       		.byte	0x7
 2833 0734 04       		.uleb128 0x4
 2834 0735 F5080000 		.4byte	.LASF124
 2835 0739 08       		.byte	0x8
 2836 073a 04       		.uleb128 0x4
 2837 073b 06000000 		.4byte	.LASF125
 2838 073f 09       		.byte	0x9
 2839 0740 04       		.uleb128 0x4
 2840 0741 71080000 		.4byte	.LASF126
 2841 0745 0A       		.byte	0xa
 2842 0746 04       		.uleb128 0x4
 2843 0747 3F080000 		.4byte	.LASF127
 2844 074b 0B       		.byte	0xb
 2845 074c 04       		.uleb128 0x4
 2846 074d D4020000 		.4byte	.LASF128
 2847 0751 0C       		.byte	0xc
 2848 0752 04       		.uleb128 0x4
 2849 0753 9C000000 		.4byte	.LASF129
 2850 0757 0D       		.byte	0xd
 2851 0758 04       		.uleb128 0x4
ARM GAS  /tmp/ccI8cyDB.s 			page 93


 2852 0759 5F030000 		.4byte	.LASF130
 2853 075d 0E       		.byte	0xe
 2854 075e 00       		.byte	0
 2855 075f 16       		.uleb128 0x16
 2856 0760 45050000 		.4byte	.LASF201
 2857 0764 01       		.byte	0x1
 2858 0765 7C03     		.2byte	0x37c
 2859 0767 01       		.byte	0x1
 2860 0768 00000000 		.4byte	.LFB16
 2861 076c EC000000 		.4byte	.LFE16
 2862 0770 00000000 		.4byte	.LLST0
 2863 0774 01       		.byte	0x1
 2864 0775 98070000 		.4byte	0x798
 2865 0779 17       		.uleb128 0x17
 2866 077a C6050000 		.4byte	.LASF131
 2867 077e 01       		.byte	0x1
 2868 077f 7C03     		.2byte	0x37c
 2869 0781 0D010000 		.4byte	0x10d
 2870 0785 02       		.byte	0x2
 2871 0786 91       		.byte	0x91
 2872 0787 6F       		.sleb128 -17
 2873 0788 17       		.uleb128 0x17
 2874 0789 61060000 		.4byte	.LASF132
 2875 078d 01       		.byte	0x1
 2876 078e 7C03     		.2byte	0x37c
 2877 0790 A5010000 		.4byte	0x1a5
 2878 0794 02       		.byte	0x2
 2879 0795 91       		.byte	0x91
 2880 0796 68       		.sleb128 -24
 2881 0797 00       		.byte	0
 2882 0798 18       		.uleb128 0x18
 2883 0799 F5020000 		.4byte	.LASF202
 2884 079d 01       		.byte	0x1
 2885 079e B803     		.2byte	0x3b8
 2886 07a0 01       		.byte	0x1
 2887 07a1 A5010000 		.4byte	0x1a5
 2888 07a5 00000000 		.4byte	.LFB18
 2889 07a9 48000000 		.4byte	.LFE18
 2890 07ad 2C000000 		.4byte	.LLST1
 2891 07b1 01       		.byte	0x1
 2892 07b2 C6070000 		.4byte	0x7c6
 2893 07b6 17       		.uleb128 0x17
 2894 07b7 31030000 		.4byte	.LASF133
 2895 07bb 01       		.byte	0x1
 2896 07bc B803     		.2byte	0x3b8
 2897 07be A5010000 		.4byte	0x1a5
 2898 07c2 02       		.byte	0x2
 2899 07c3 91       		.byte	0x91
 2900 07c4 74       		.sleb128 -12
 2901 07c5 00       		.byte	0
 2902 07c6 19       		.uleb128 0x19
 2903 07c7 01       		.byte	0x1
 2904 07c8 F6090000 		.4byte	.LASF203
 2905 07cc 02       		.byte	0x2
 2906 07cd CF       		.byte	0xcf
 2907 07ce 01       		.byte	0x1
 2908 07cf 76010000 		.4byte	0x176
ARM GAS  /tmp/ccI8cyDB.s 			page 94


 2909 07d3 00000000 		.4byte	.LFB20
 2910 07d7 90070000 		.4byte	.LFE20
 2911 07db 58000000 		.4byte	.LLST2
 2912 07df 01       		.byte	0x1
 2913 07e0 0E090000 		.4byte	0x90e
 2914 07e4 1A       		.uleb128 0x1a
 2915 07e5 6900     		.ascii	"i\000"
 2916 07e7 02       		.byte	0x2
 2917 07e8 D1       		.byte	0xd1
 2918 07e9 24010000 		.4byte	0x124
 2919 07ed 02       		.byte	0x2
 2920 07ee 91       		.byte	0x91
 2921 07ef 6F       		.sleb128 -17
 2922 07f0 1B       		.uleb128 0x1b
 2923 07f1 696900   		.ascii	"ii\000"
 2924 07f4 02       		.byte	0x2
 2925 07f5 D1       		.byte	0xd1
 2926 07f6 24010000 		.4byte	0x124
 2927 07fa 1C       		.uleb128 0x1c
 2928 07fb 510A0000 		.4byte	.LASF134
 2929 07ff 02       		.byte	0x2
 2930 0800 D2       		.byte	0xd2
 2931 0801 24010000 		.4byte	0x124
 2932 0805 1C       		.uleb128 0x1c
 2933 0806 D3030000 		.4byte	.LASF135
 2934 080a 02       		.byte	0x2
 2935 080b D2       		.byte	0xd2
 2936 080c 24010000 		.4byte	0x124
 2937 0810 1D       		.uleb128 0x1d
 2938 0811 53080000 		.4byte	.LASF136
 2939 0815 02       		.byte	0x2
 2940 0816 D2       		.byte	0xd2
 2941 0817 24010000 		.4byte	0x124
 2942 081b 02       		.byte	0x2
 2943 081c 91       		.byte	0x91
 2944 081d 53       		.sleb128 -45
 2945 081e 1D       		.uleb128 0x1d
 2946 081f 190A0000 		.4byte	.LASF137
 2947 0823 02       		.byte	0x2
 2948 0824 D3       		.byte	0xd3
 2949 0825 24010000 		.4byte	0x124
 2950 0829 02       		.byte	0x2
 2951 082a 91       		.byte	0x91
 2952 082b 52       		.sleb128 -46
 2953 082c 1D       		.uleb128 0x1d
 2954 082d EF080000 		.4byte	.LASF138
 2955 0831 02       		.byte	0x2
 2956 0832 D7       		.byte	0xd7
 2957 0833 3D010000 		.4byte	0x13d
 2958 0837 02       		.byte	0x2
 2959 0838 91       		.byte	0x91
 2960 0839 6C       		.sleb128 -20
 2961 083a 1D       		.uleb128 0x1d
 2962 083b F2040000 		.4byte	.LASF139
 2963 083f 02       		.byte	0x2
 2964 0840 D7       		.byte	0xd7
 2965 0841 3D010000 		.4byte	0x13d
ARM GAS  /tmp/ccI8cyDB.s 			page 95


 2966 0845 02       		.byte	0x2
 2967 0846 91       		.byte	0x91
 2968 0847 6A       		.sleb128 -22
 2969 0848 1D       		.uleb128 0x1d
 2970 0849 15000000 		.4byte	.LASF140
 2971 084d 02       		.byte	0x2
 2972 084e D8       		.byte	0xd8
 2973 084f 7D010000 		.4byte	0x17d
 2974 0853 02       		.byte	0x2
 2975 0854 91       		.byte	0x91
 2976 0855 64       		.sleb128 -28
 2977 0856 1D       		.uleb128 0x1d
 2978 0857 8A010000 		.4byte	.LASF141
 2979 085b 02       		.byte	0x2
 2980 085c DA       		.byte	0xda
 2981 085d 3D010000 		.4byte	0x13d
 2982 0861 02       		.byte	0x2
 2983 0862 91       		.byte	0x91
 2984 0863 62       		.sleb128 -30
 2985 0864 1D       		.uleb128 0x1d
 2986 0865 0A0A0000 		.4byte	.LASF142
 2987 0869 02       		.byte	0x2
 2988 086a DB       		.byte	0xdb
 2989 086b 7D010000 		.4byte	0x17d
 2990 086f 02       		.byte	0x2
 2991 0870 91       		.byte	0x91
 2992 0871 5C       		.sleb128 -36
 2993 0872 1D       		.uleb128 0x1d
 2994 0873 2F020000 		.4byte	.LASF143
 2995 0877 02       		.byte	0x2
 2996 0878 DB       		.byte	0xdb
 2997 0879 7D010000 		.4byte	0x17d
 2998 087d 02       		.byte	0x2
 2999 087e 91       		.byte	0x91
 3000 087f 58       		.sleb128 -40
 3001 0880 1D       		.uleb128 0x1d
 3002 0881 B0040000 		.4byte	.LASF144
 3003 0885 02       		.byte	0x2
 3004 0886 DC       		.byte	0xdc
 3005 0887 24010000 		.4byte	0x124
 3006 088b 02       		.byte	0x2
 3007 088c 91       		.byte	0x91
 3008 088d 51       		.sleb128 -47
 3009 088e 1D       		.uleb128 0x1d
 3010 088f 53000000 		.4byte	.LASF145
 3011 0893 02       		.byte	0x2
 3012 0894 DF       		.byte	0xdf
 3013 0895 23060000 		.4byte	0x623
 3014 0899 02       		.byte	0x2
 3015 089a 91       		.byte	0x91
 3016 089b 57       		.sleb128 -41
 3017 089c 1D       		.uleb128 0x1d
 3018 089d 680A0000 		.4byte	.LASF146
 3019 08a1 02       		.byte	0x2
 3020 08a2 E0       		.byte	0xe0
 3021 08a3 24010000 		.4byte	0x124
 3022 08a7 02       		.byte	0x2
ARM GAS  /tmp/ccI8cyDB.s 			page 96


 3023 08a8 91       		.byte	0x91
 3024 08a9 50       		.sleb128 -48
 3025 08aa 1D       		.uleb128 0x1d
 3026 08ab 07070000 		.4byte	.LASF147
 3027 08af 02       		.byte	0x2
 3028 08b0 E1       		.byte	0xe1
 3029 08b1 24010000 		.4byte	0x124
 3030 08b5 02       		.byte	0x2
 3031 08b6 91       		.byte	0x91
 3032 08b7 4F       		.sleb128 -49
 3033 08b8 1D       		.uleb128 0x1d
 3034 08b9 E5070000 		.4byte	.LASF148
 3035 08bd 02       		.byte	0x2
 3036 08be E2       		.byte	0xe2
 3037 08bf 65060000 		.4byte	0x665
 3038 08c3 02       		.byte	0x2
 3039 08c4 91       		.byte	0x91
 3040 08c5 56       		.sleb128 -42
 3041 08c6 1D       		.uleb128 0x1d
 3042 08c7 7F050000 		.4byte	.LASF149
 3043 08cb 02       		.byte	0x2
 3044 08cc E3       		.byte	0xe3
 3045 08cd 24010000 		.4byte	0x124
 3046 08d1 02       		.byte	0x2
 3047 08d2 91       		.byte	0x91
 3048 08d3 55       		.sleb128 -43
 3049 08d4 1D       		.uleb128 0x1d
 3050 08d5 C5010000 		.4byte	.LASF150
 3051 08d9 02       		.byte	0x2
 3052 08da E4       		.byte	0xe4
 3053 08db 24010000 		.4byte	0x124
 3054 08df 02       		.byte	0x2
 3055 08e0 91       		.byte	0x91
 3056 08e1 54       		.sleb128 -44
 3057 08e2 1D       		.uleb128 0x1d
 3058 08e3 D9010000 		.4byte	.LASF151
 3059 08e7 02       		.byte	0x2
 3060 08e8 E7       		.byte	0xe7
 3061 08e9 3D010000 		.4byte	0x13d
 3062 08ed 02       		.byte	0x2
 3063 08ee 91       		.byte	0x91
 3064 08ef 4C       		.sleb128 -52
 3065 08f0 1D       		.uleb128 0x1d
 3066 08f1 B3080000 		.4byte	.LASF152
 3067 08f5 02       		.byte	0x2
 3068 08f6 EA       		.byte	0xea
 3069 08f7 24010000 		.4byte	0x124
 3070 08fb 02       		.byte	0x2
 3071 08fc 91       		.byte	0x91
 3072 08fd 4B       		.sleb128 -53
 3073 08fe 1D       		.uleb128 0x1d
 3074 08ff 00000000 		.4byte	.LASF153
 3075 0903 02       		.byte	0x2
 3076 0904 F0       		.byte	0xf0
 3077 0905 0E090000 		.4byte	0x90e
 3078 0909 03       		.byte	0x3
 3079 090a 91       		.byte	0x91
ARM GAS  /tmp/ccI8cyDB.s 			page 97


 3080 090b E47E     		.sleb128 -156
 3081 090d 00       		.byte	0
 3082 090e 0C       		.uleb128 0xc
 3083 090f B3050000 		.4byte	0x5b3
 3084 0913 1E090000 		.4byte	0x91e
 3085 0917 0D       		.uleb128 0xd
 3086 0918 5D020000 		.4byte	0x25d
 3087 091c 63       		.byte	0x63
 3088 091d 00       		.byte	0
 3089 091e 1E       		.uleb128 0x1e
 3090 091f 01       		.byte	0x1
 3091 0920 DE080000 		.4byte	.LASF204
 3092 0924 02       		.byte	0x2
 3093 0925 E404     		.2byte	0x4e4
 3094 0927 01       		.byte	0x1
 3095 0928 00000000 		.4byte	.LFB21
 3096 092c B0000000 		.4byte	.LFE21
 3097 0930 85000000 		.4byte	.LLST3
 3098 0934 01       		.byte	0x1
 3099 0935 DE090000 		.4byte	0x9de
 3100 0939 17       		.uleb128 0x17
 3101 093a 85000000 		.4byte	.LASF154
 3102 093e 02       		.byte	0x2
 3103 093f E404     		.2byte	0x4e4
 3104 0941 DE090000 		.4byte	0x9de
 3105 0945 03       		.byte	0x3
 3106 0946 91       		.byte	0x91
 3107 0947 A47F     		.sleb128 -92
 3108 0949 1F       		.uleb128 0x1f
 3109 094a 643100   		.ascii	"d1\000"
 3110 094d 02       		.byte	0x2
 3111 094e E604     		.2byte	0x4e6
 3112 0950 9A010000 		.4byte	0x19a
 3113 0954 02       		.byte	0x2
 3114 0955 91       		.byte	0x91
 3115 0956 74       		.sleb128 -12
 3116 0957 1F       		.uleb128 0x1f
 3117 0958 643200   		.ascii	"d2\000"
 3118 095b 02       		.byte	0x2
 3119 095c E604     		.2byte	0x4e6
 3120 095e 9A010000 		.4byte	0x19a
 3121 0962 02       		.byte	0x2
 3122 0963 91       		.byte	0x91
 3123 0964 70       		.sleb128 -16
 3124 0965 1F       		.uleb128 0x1f
 3125 0966 643300   		.ascii	"d3\000"
 3126 0969 02       		.byte	0x2
 3127 096a E604     		.2byte	0x4e6
 3128 096c 9A010000 		.4byte	0x19a
 3129 0970 02       		.byte	0x2
 3130 0971 91       		.byte	0x91
 3131 0972 6C       		.sleb128 -20
 3132 0973 1F       		.uleb128 0x1f
 3133 0974 643400   		.ascii	"d4\000"
 3134 0977 02       		.byte	0x2
 3135 0978 E604     		.2byte	0x4e6
 3136 097a 9A010000 		.4byte	0x19a
ARM GAS  /tmp/ccI8cyDB.s 			page 98


 3137 097e 02       		.byte	0x2
 3138 097f 91       		.byte	0x91
 3139 0980 68       		.sleb128 -24
 3140 0981 1F       		.uleb128 0x1f
 3141 0982 643500   		.ascii	"d5\000"
 3142 0985 02       		.byte	0x2
 3143 0986 E604     		.2byte	0x4e6
 3144 0988 9A010000 		.4byte	0x19a
 3145 098c 02       		.byte	0x2
 3146 098d 91       		.byte	0x91
 3147 098e 64       		.sleb128 -28
 3148 098f 1F       		.uleb128 0x1f
 3149 0990 643600   		.ascii	"d6\000"
 3150 0993 02       		.byte	0x2
 3151 0994 E604     		.2byte	0x4e6
 3152 0996 9A010000 		.4byte	0x19a
 3153 099a 02       		.byte	0x2
 3154 099b 91       		.byte	0x91
 3155 099c 60       		.sleb128 -32
 3156 099d 20       		.uleb128 0x20
 3157 099e 3C050000 		.4byte	.LASF155
 3158 09a2 02       		.byte	0x2
 3159 09a3 E704     		.2byte	0x4e7
 3160 09a5 E4090000 		.4byte	0x9e4
 3161 09a9 03       		.byte	0x3
 3162 09aa 91       		.byte	0x91
 3163 09ab B87F     		.sleb128 -72
 3164 09ad 20       		.uleb128 0x20
 3165 09ae 9C070000 		.4byte	.LASF156
 3166 09b2 02       		.byte	0x2
 3167 09b3 E804     		.2byte	0x4e8
 3168 09b5 FB090000 		.4byte	0x9fb
 3169 09b9 03       		.byte	0x3
 3170 09ba 91       		.byte	0x91
 3171 09bb B47F     		.sleb128 -76
 3172 09bd 20       		.uleb128 0x20
 3173 09be 73030000 		.4byte	.LASF157
 3174 09c2 02       		.byte	0x2
 3175 09c3 E904     		.2byte	0x4e9
 3176 09c5 FB090000 		.4byte	0x9fb
 3177 09c9 03       		.byte	0x3
 3178 09ca 91       		.byte	0x91
 3179 09cb B07F     		.sleb128 -80
 3180 09cd 20       		.uleb128 0x20
 3181 09ce 58070000 		.4byte	.LASF158
 3182 09d2 02       		.byte	0x2
 3183 09d3 EA04     		.2byte	0x4ea
 3184 09d5 FB090000 		.4byte	0x9fb
 3185 09d9 03       		.byte	0x3
 3186 09da 91       		.byte	0x91
 3187 09db AC7F     		.sleb128 -84
 3188 09dd 00       		.byte	0
 3189 09de 21       		.uleb128 0x21
 3190 09df 04       		.byte	0x4
 3191 09e0 84010000 		.4byte	0x184
 3192 09e4 0C       		.uleb128 0xc
 3193 09e5 B3050000 		.4byte	0x5b3
ARM GAS  /tmp/ccI8cyDB.s 			page 99


 3194 09e9 F4090000 		.4byte	0x9f4
 3195 09ed 0D       		.uleb128 0xd
 3196 09ee 5D020000 		.4byte	0x25d
 3197 09f2 27       		.byte	0x27
 3198 09f3 00       		.byte	0
 3199 09f4 05       		.uleb128 0x5
 3200 09f5 04       		.byte	0x4
 3201 09f6 04       		.byte	0x4
 3202 09f7 D3010000 		.4byte	.LASF159
 3203 09fb 0E       		.uleb128 0xe
 3204 09fc F4090000 		.4byte	0x9f4
 3205 0a00 22       		.uleb128 0x22
 3206 0a01 01       		.byte	0x1
 3207 0a02 98080000 		.4byte	.LASF205
 3208 0a06 02       		.byte	0x2
 3209 0a07 0405     		.2byte	0x504
 3210 0a09 01       		.byte	0x1
 3211 0a0a 00000000 		.4byte	.LFB22
 3212 0a0e EC000000 		.4byte	.LFE22
 3213 0a12 B2000000 		.4byte	.LLST4
 3214 0a16 01       		.byte	0x1
 3215 0a17 0C       		.uleb128 0xc
 3216 0a18 24010000 		.4byte	0x124
 3217 0a1c 270A0000 		.4byte	0xa27
 3218 0a20 0D       		.uleb128 0xd
 3219 0a21 5D020000 		.4byte	0x25d
 3220 0a25 FF       		.byte	0xff
 3221 0a26 00       		.byte	0
 3222 0a27 23       		.uleb128 0x23
 3223 0a28 2C010000 		.4byte	.LASF160
 3224 0a2c 02       		.byte	0x2
 3225 0a2d 3B       		.byte	0x3b
 3226 0a2e 390A0000 		.4byte	0xa39
 3227 0a32 01       		.byte	0x1
 3228 0a33 05       		.byte	0x5
 3229 0a34 03       		.byte	0x3
 3230 0a35 00000000 		.4byte	tx2buff
 3231 0a39 0E       		.uleb128 0xe
 3232 0a3a 170A0000 		.4byte	0xa17
 3233 0a3e 23       		.uleb128 0x23
 3234 0a3f FE000000 		.4byte	.LASF161
 3235 0a43 02       		.byte	0x2
 3236 0a44 3C       		.byte	0x3c
 3237 0a45 500A0000 		.4byte	0xa50
 3238 0a49 01       		.byte	0x1
 3239 0a4a 05       		.byte	0x5
 3240 0a4b 03       		.byte	0x3
 3241 0a4c 00000000 		.4byte	rx2buff
 3242 0a50 0E       		.uleb128 0xe
 3243 0a51 170A0000 		.4byte	0xa17
 3244 0a55 23       		.uleb128 0x23
 3245 0a56 1E040000 		.4byte	.LASF162
 3246 0a5a 02       		.byte	0x2
 3247 0a5b 3E       		.byte	0x3e
 3248 0a5c 670A0000 		.4byte	0xa67
 3249 0a60 01       		.byte	0x1
 3250 0a61 05       		.byte	0x5
ARM GAS  /tmp/ccI8cyDB.s 			page 100


 3251 0a62 03       		.byte	0x3
 3252 0a63 00000000 		.4byte	tx1buff
 3253 0a67 0E       		.uleb128 0xe
 3254 0a68 170A0000 		.4byte	0xa17
 3255 0a6c 23       		.uleb128 0x23
 3256 0a6d 11010000 		.4byte	.LASF163
 3257 0a71 02       		.byte	0x2
 3258 0a72 3F       		.byte	0x3f
 3259 0a73 7E0A0000 		.4byte	0xa7e
 3260 0a77 01       		.byte	0x1
 3261 0a78 05       		.byte	0x5
 3262 0a79 03       		.byte	0x3
 3263 0a7a 00000000 		.4byte	rx1buff
 3264 0a7e 0E       		.uleb128 0xe
 3265 0a7f 170A0000 		.4byte	0xa17
 3266 0a83 23       		.uleb128 0x23
 3267 0a84 8B030000 		.4byte	.LASF164
 3268 0a88 02       		.byte	0x2
 3269 0a89 51       		.byte	0x51
 3270 0a8a 950A0000 		.4byte	0xa95
 3271 0a8e 01       		.byte	0x1
 3272 0a8f 05       		.byte	0x5
 3273 0a90 03       		.byte	0x3
 3274 0a91 00000000 		.4byte	take_temp_sample
 3275 0a95 0E       		.uleb128 0xe
 3276 0a96 3D010000 		.4byte	0x13d
 3277 0a9a 23       		.uleb128 0x23
 3278 0a9b EB020000 		.4byte	.LASF165
 3279 0a9f 02       		.byte	0x2
 3280 0aa0 52       		.byte	0x52
 3281 0aa1 3D010000 		.4byte	0x13d
 3282 0aa5 01       		.byte	0x1
 3283 0aa6 05       		.byte	0x5
 3284 0aa7 03       		.byte	0x3
 3285 0aa8 00000000 		.4byte	timer_rep
 3286 0aac 23       		.uleb128 0x23
 3287 0aad D1040000 		.4byte	.LASF166
 3288 0ab1 02       		.byte	0x2
 3289 0ab2 56       		.byte	0x56
 3290 0ab3 950A0000 		.4byte	0xa95
 3291 0ab7 01       		.byte	0x1
 3292 0ab8 05       		.byte	0x5
 3293 0ab9 03       		.byte	0x3
 3294 0aba 00000000 		.4byte	timer_relay
 3295 0abe 23       		.uleb128 0x23
 3296 0abf BF020000 		.4byte	.LASF167
 3297 0ac3 02       		.byte	0x2
 3298 0ac4 58       		.byte	0x58
 3299 0ac5 950A0000 		.4byte	0xa95
 3300 0ac9 01       		.byte	0x1
 3301 0aca 05       		.byte	0x5
 3302 0acb 03       		.byte	0x3
 3303 0acc 00000000 		.4byte	tt_take_photo_sample
 3304 0ad0 23       		.uleb128 0x23
 3305 0ad1 38040000 		.4byte	.LASF168
 3306 0ad5 02       		.byte	0x2
 3307 0ad6 59       		.byte	0x59
ARM GAS  /tmp/ccI8cyDB.s 			page 101


 3308 0ad7 950A0000 		.4byte	0xa95
 3309 0adb 01       		.byte	0x1
 3310 0adc 05       		.byte	0x5
 3311 0add 03       		.byte	0x3
 3312 0ade 00000000 		.4byte	tt_relay_on_off
 3313 0ae2 23       		.uleb128 0x23
 3314 0ae3 BB040000 		.4byte	.LASF169
 3315 0ae7 02       		.byte	0x2
 3316 0ae8 5D       		.byte	0x5d
 3317 0ae9 24010000 		.4byte	0x124
 3318 0aed 01       		.byte	0x1
 3319 0aee 05       		.byte	0x5
 3320 0aef 03       		.byte	0x3
 3321 0af0 00000000 		.4byte	saved_mode
 3322 0af4 23       		.uleb128 0x23
 3323 0af5 23080000 		.4byte	.LASF170
 3324 0af9 02       		.byte	0x2
 3325 0afa 60       		.byte	0x60
 3326 0afb 24010000 		.4byte	0x124
 3327 0aff 01       		.byte	0x1
 3328 0b00 05       		.byte	0x5
 3329 0b01 03       		.byte	0x3
 3330 0b02 00000000 		.4byte	send_energy
 3331 0b06 23       		.uleb128 0x23
 3332 0b07 BE070000 		.4byte	.LASF171
 3333 0b0b 02       		.byte	0x2
 3334 0b0c 63       		.byte	0x63
 3335 0b0d 180B0000 		.4byte	0xb18
 3336 0b11 01       		.byte	0x1
 3337 0b12 05       		.byte	0x5
 3338 0b13 03       		.byte	0x3
 3339 0b14 00000000 		.4byte	adc_ch
 3340 0b18 0E       		.uleb128 0xe
 3341 0b19 BA050000 		.4byte	0x5ba
 3342 0b1d 23       		.uleb128 0x23
 3343 0b1e 290A0000 		.4byte	.LASF172
 3344 0b22 02       		.byte	0x2
 3345 0b23 64       		.byte	0x64
 3346 0b24 2F0B0000 		.4byte	0xb2f
 3347 0b28 01       		.byte	0x1
 3348 0b29 05       		.byte	0x5
 3349 0b2a 03       		.byte	0x3
 3350 0b2b 00000000 		.4byte	seq_ready
 3351 0b2f 0E       		.uleb128 0xe
 3352 0b30 24010000 		.4byte	0x124
 3353 0b34 23       		.uleb128 0x23
 3354 0b35 0E050000 		.4byte	.LASF173
 3355 0b39 02       		.byte	0x2
 3356 0b3a 65       		.byte	0x65
 3357 0b3b 3D010000 		.4byte	0x13d
 3358 0b3f 01       		.byte	0x1
 3359 0b40 05       		.byte	0x5
 3360 0b41 03       		.byte	0x3
 3361 0b42 00000000 		.4byte	zero_current
 3362 0b46 23       		.uleb128 0x23
 3363 0b47 92040000 		.4byte	.LASF174
 3364 0b4b 02       		.byte	0x2
ARM GAS  /tmp/ccI8cyDB.s 			page 102


 3365 0b4c 69       		.byte	0x69
 3366 0b4d 2F0B0000 		.4byte	0xb2f
 3367 0b51 01       		.byte	0x1
 3368 0b52 05       		.byte	0x5
 3369 0b53 03       		.byte	0x3
 3370 0b54 00000000 		.4byte	usart1_mini_timeout
 3371 0b58 23       		.uleb128 0x23
 3372 0b59 82020000 		.4byte	.LASF175
 3373 0b5d 02       		.byte	0x2
 3374 0b5e 6A       		.byte	0x6a
 3375 0b5f 2F0B0000 		.4byte	0xb2f
 3376 0b63 01       		.byte	0x1
 3377 0b64 05       		.byte	0x5
 3378 0b65 03       		.byte	0x3
 3379 0b66 00000000 		.4byte	usart1_pckt_ready
 3380 0b6a 23       		.uleb128 0x23
 3381 0b6b 1A030000 		.4byte	.LASF176
 3382 0b6f 02       		.byte	0x2
 3383 0b70 6B       		.byte	0x6b
 3384 0b71 2F0B0000 		.4byte	0xb2f
 3385 0b75 01       		.byte	0x1
 3386 0b76 05       		.byte	0x5
 3387 0b77 03       		.byte	0x3
 3388 0b78 00000000 		.4byte	usart1_have_data
 3389 0b7c 23       		.uleb128 0x23
 3390 0b7d 0D020000 		.4byte	.LASF177
 3391 0b81 02       		.byte	0x2
 3392 0b82 6C       		.byte	0x6c
 3393 0b83 24010000 		.4byte	0x124
 3394 0b87 01       		.byte	0x1
 3395 0b88 05       		.byte	0x5
 3396 0b89 03       		.byte	0x3
 3397 0b8a 00000000 		.4byte	usart1_pckt_bytes
 3398 0b8e 23       		.uleb128 0x23
 3399 0b8f 0A040000 		.4byte	.LASF178
 3400 0b93 02       		.byte	0x2
 3401 0b94 83       		.byte	0x83
 3402 0b95 2F0B0000 		.4byte	0xb2f
 3403 0b99 01       		.byte	0x1
 3404 0b9a 05       		.byte	0x5
 3405 0b9b 03       		.byte	0x3
 3406 0b9c 00000000 		.4byte	usart2_mini_timeout
 3407 0ba0 23       		.uleb128 0x23
 3408 0ba1 86080000 		.4byte	.LASF179
 3409 0ba5 02       		.byte	0x2
 3410 0ba6 84       		.byte	0x84
 3411 0ba7 2F0B0000 		.4byte	0xb2f
 3412 0bab 01       		.byte	0x1
 3413 0bac 05       		.byte	0x5
 3414 0bad 03       		.byte	0x3
 3415 0bae 00000000 		.4byte	usart2_pckt_ready
 3416 0bb2 23       		.uleb128 0x23
 3417 0bb3 4C010000 		.4byte	.LASF180
 3418 0bb7 02       		.byte	0x2
 3419 0bb8 85       		.byte	0x85
 3420 0bb9 2F0B0000 		.4byte	0xb2f
 3421 0bbd 01       		.byte	0x1
ARM GAS  /tmp/ccI8cyDB.s 			page 103


 3422 0bbe 05       		.byte	0x5
 3423 0bbf 03       		.byte	0x3
 3424 0bc0 00000000 		.4byte	usart2_have_data
 3425 0bc4 23       		.uleb128 0x23
 3426 0bc5 26040000 		.4byte	.LASF181
 3427 0bc9 02       		.byte	0x2
 3428 0bca 86       		.byte	0x86
 3429 0bcb 24010000 		.4byte	0x124
 3430 0bcf 01       		.byte	0x1
 3431 0bd0 05       		.byte	0x5
 3432 0bd1 03       		.byte	0x3
 3433 0bd2 00000000 		.4byte	usart2_pckt_bytes
 3434 0bd6 0C       		.uleb128 0xc
 3435 0bd7 B3050000 		.4byte	0x5b3
 3436 0bdb E10B0000 		.4byte	0xbe1
 3437 0bdf 24       		.uleb128 0x24
 3438 0be0 00       		.byte	0
 3439 0be1 25       		.uleb128 0x25
 3440 0be2 B7050000 		.4byte	.LASF182
 3441 0be6 02       		.byte	0x2
 3442 0be7 88       		.byte	0x88
 3443 0be8 EE0B0000 		.4byte	0xbee
 3444 0bec 01       		.byte	0x1
 3445 0bed 01       		.byte	0x1
 3446 0bee 0E       		.uleb128 0xe
 3447 0bef D60B0000 		.4byte	0xbd6
 3448 0bf3 23       		.uleb128 0x23
 3449 0bf4 26000000 		.4byte	.LASF183
 3450 0bf8 02       		.byte	0x2
 3451 0bf9 8B       		.byte	0x8b
 3452 0bfa ED060000 		.4byte	0x6ed
 3453 0bfe 01       		.byte	0x1
 3454 0bff 05       		.byte	0x5
 3455 0c00 03       		.byte	0x3
 3456 0c01 00000000 		.4byte	param_struct
 3457 0c05 23       		.uleb128 0x23
 3458 0c06 FD040000 		.4byte	.LASF184
 3459 0c0a 02       		.byte	0x2
 3460 0c0b 8E       		.byte	0x8e
 3461 0c0c 3D010000 		.4byte	0x13d
 3462 0c10 01       		.byte	0x1
 3463 0c11 05       		.byte	0x5
 3464 0c12 03       		.byte	0x3
 3465 0c13 00000000 		.4byte	show_power_index
 3466 0c17 0C       		.uleb128 0xc
 3467 0c18 B3050000 		.4byte	0x5b3
 3468 0c1c 270C0000 		.4byte	0xc27
 3469 0c20 0D       		.uleb128 0xd
 3470 0c21 5D020000 		.4byte	0x25d
 3471 0c25 13       		.byte	0x13
 3472 0c26 00       		.byte	0
 3473 0c27 23       		.uleb128 0x23
 3474 0c28 CB050000 		.4byte	.LASF185
 3475 0c2c 02       		.byte	0x2
 3476 0c2d 98       		.byte	0x98
 3477 0c2e 170C0000 		.4byte	0xc17
 3478 0c32 01       		.byte	0x1
ARM GAS  /tmp/ccI8cyDB.s 			page 104


 3479 0c33 05       		.byte	0x5
 3480 0c34 03       		.byte	0x3
 3481 0c35 00000000 		.4byte	gsmNUM
 3482 0c39 0C       		.uleb128 0xc
 3483 0c3a B3050000 		.4byte	0x5b3
 3484 0c3e 490C0000 		.4byte	0xc49
 3485 0c42 0D       		.uleb128 0xd
 3486 0c43 5D020000 		.4byte	0x25d
 3487 0c47 B3       		.byte	0xb3
 3488 0c48 00       		.byte	0
 3489 0c49 23       		.uleb128 0x23
 3490 0c4a C6060000 		.4byte	.LASF186
 3491 0c4e 02       		.byte	0x2
 3492 0c4f 99       		.byte	0x99
 3493 0c50 390C0000 		.4byte	0xc39
 3494 0c54 01       		.byte	0x1
 3495 0c55 05       		.byte	0x5
 3496 0c56 03       		.byte	0x3
 3497 0c57 00000000 		.4byte	gsmMSG
 3498 0c5b 23       		.uleb128 0x23
 3499 0c5c 7E060000 		.4byte	.LASF187
 3500 0c60 02       		.byte	0x2
 3501 0c61 A1       		.byte	0xa1
 3502 0c62 950A0000 		.4byte	0xa95
 3503 0c66 01       		.byte	0x1
 3504 0c67 05       		.byte	0x5
 3505 0c68 03       		.byte	0x3
 3506 0c69 00000000 		.4byte	wait_ms_var
 3507 0c6d 23       		.uleb128 0x23
 3508 0c6e 430A0000 		.4byte	.LASF188
 3509 0c72 02       		.byte	0x2
 3510 0c73 A2       		.byte	0xa2
 3511 0c74 950A0000 		.4byte	0xa95
 3512 0c78 01       		.byte	0x1
 3513 0c79 05       		.byte	0x5
 3514 0c7a 03       		.byte	0x3
 3515 0c7b 00000000 		.4byte	timer_standby
 3516 0c7f 23       		.uleb128 0x23
 3517 0c80 E3000000 		.4byte	.LASF189
 3518 0c84 02       		.byte	0x2
 3519 0c85 A3       		.byte	0xa3
 3520 0c86 950A0000 		.4byte	0xa95
 3521 0c8a 01       		.byte	0x1
 3522 0c8b 05       		.byte	0x5
 3523 0c8c 03       		.byte	0x3
 3524 0c8d 00000000 		.4byte	tcp_kalive_timer
 3525 0c91 23       		.uleb128 0x23
 3526 0c92 41010000 		.4byte	.LASF190
 3527 0c96 02       		.byte	0x2
 3528 0c97 A5       		.byte	0xa5
 3529 0c98 2F0B0000 		.4byte	0xb2f
 3530 0c9c 01       		.byte	0x1
 3531 0c9d 05       		.byte	0x5
 3532 0c9e 03       		.byte	0x3
 3533 0c9f 00000000 		.4byte	timer_meas
 3534 0ca3 23       		.uleb128 0x23
 3535 0ca4 48040000 		.4byte	.LASF191
ARM GAS  /tmp/ccI8cyDB.s 			page 105


 3536 0ca8 02       		.byte	0x2
 3537 0ca9 AB       		.byte	0xab
 3538 0caa 950A0000 		.4byte	0xa95
 3539 0cae 01       		.byte	0x1
 3540 0caf 05       		.byte	0x5
 3541 0cb0 03       		.byte	0x3
 3542 0cb1 00000000 		.4byte	secs
 3543 0cb5 23       		.uleb128 0x23
 3544 0cb6 CD060000 		.4byte	.LASF192
 3545 0cba 02       		.byte	0x2
 3546 0cbb AC       		.byte	0xac
 3547 0cbc 2F0B0000 		.4byte	0xb2f
 3548 0cc0 01       		.byte	0x1
 3549 0cc1 05       		.byte	0x5
 3550 0cc2 03       		.byte	0x3
 3551 0cc3 00000000 		.4byte	hours
 3552 0cc7 23       		.uleb128 0x23
 3553 0cc8 24010000 		.4byte	.LASF193
 3554 0ccc 02       		.byte	0x2
 3555 0ccd AD       		.byte	0xad
 3556 0cce 2F0B0000 		.4byte	0xb2f
 3557 0cd2 01       		.byte	0x1
 3558 0cd3 05       		.byte	0x5
 3559 0cd4 03       		.byte	0x3
 3560 0cd5 00000000 		.4byte	minutes
 3561 0cd9 0C       		.uleb128 0xc
 3562 0cda 3D010000 		.4byte	0x13d
 3563 0cde E90C0000 		.4byte	0xce9
 3564 0ce2 0D       		.uleb128 0xd
 3565 0ce3 5D020000 		.4byte	0x25d
 3566 0ce7 09       		.byte	0x9
 3567 0ce8 00       		.byte	0
 3568 0ce9 23       		.uleb128 0x23
 3569 0cea B3070000 		.4byte	.LASF194
 3570 0cee 02       		.byte	0x2
 3571 0cef B2       		.byte	0xb2
 3572 0cf0 D90C0000 		.4byte	0xcd9
 3573 0cf4 01       		.byte	0x1
 3574 0cf5 05       		.byte	0x5
 3575 0cf6 03       		.byte	0x3
 3576 0cf7 00000000 		.4byte	power_vect
 3577 0cfb 0C       		.uleb128 0xc
 3578 0cfc 3D010000 		.4byte	0x13d
 3579 0d00 0B0D0000 		.4byte	0xd0b
 3580 0d04 0D       		.uleb128 0xd
 3581 0d05 5D020000 		.4byte	0x25d
 3582 0d09 10       		.byte	0x10
 3583 0d0a 00       		.byte	0
 3584 0d0b 23       		.uleb128 0x23
 3585 0d0c 330A0000 		.4byte	.LASF195
 3586 0d10 02       		.byte	0x2
 3587 0d11 C0       		.byte	0xc0
 3588 0d12 FB0C0000 		.4byte	0xcfb
 3589 0d16 01       		.byte	0x1
 3590 0d17 05       		.byte	0x5
 3591 0d18 03       		.byte	0x3
 3592 0d19 00000000 		.4byte	vtemp
ARM GAS  /tmp/ccI8cyDB.s 			page 106


 3593 0d1d 23       		.uleb128 0x23
 3594 0d1e AF000000 		.4byte	.LASF196
 3595 0d22 02       		.byte	0x2
 3596 0d23 C1       		.byte	0xc1
 3597 0d24 FB0C0000 		.4byte	0xcfb
 3598 0d28 01       		.byte	0x1
 3599 0d29 05       		.byte	0x5
 3600 0d2a 03       		.byte	0x3
 3601 0d2b 00000000 		.4byte	vpote
 3602 0d2f 00       		.byte	0
 3603              		.section	.debug_abbrev,"",%progbits
 3604              	.Ldebug_abbrev0:
 3605 0000 01       		.uleb128 0x1
 3606 0001 11       		.uleb128 0x11
 3607 0002 01       		.byte	0x1
 3608 0003 25       		.uleb128 0x25
 3609 0004 0E       		.uleb128 0xe
 3610 0005 13       		.uleb128 0x13
 3611 0006 0B       		.uleb128 0xb
 3612 0007 03       		.uleb128 0x3
 3613 0008 0E       		.uleb128 0xe
 3614 0009 1B       		.uleb128 0x1b
 3615 000a 0E       		.uleb128 0xe
 3616 000b 55       		.uleb128 0x55
 3617 000c 06       		.uleb128 0x6
 3618 000d 11       		.uleb128 0x11
 3619 000e 01       		.uleb128 0x1
 3620 000f 52       		.uleb128 0x52
 3621 0010 01       		.uleb128 0x1
 3622 0011 10       		.uleb128 0x10
 3623 0012 06       		.uleb128 0x6
 3624 0013 00       		.byte	0
 3625 0014 00       		.byte	0
 3626 0015 02       		.uleb128 0x2
 3627 0016 04       		.uleb128 0x4
 3628 0017 01       		.byte	0x1
 3629 0018 03       		.uleb128 0x3
 3630 0019 0E       		.uleb128 0xe
 3631 001a 0B       		.uleb128 0xb
 3632 001b 0B       		.uleb128 0xb
 3633 001c 49       		.uleb128 0x49
 3634 001d 13       		.uleb128 0x13
 3635 001e 3A       		.uleb128 0x3a
 3636 001f 0B       		.uleb128 0xb
 3637 0020 3B       		.uleb128 0x3b
 3638 0021 0B       		.uleb128 0xb
 3639 0022 01       		.uleb128 0x1
 3640 0023 13       		.uleb128 0x13
 3641 0024 00       		.byte	0
 3642 0025 00       		.byte	0
 3643 0026 03       		.uleb128 0x3
 3644 0027 28       		.uleb128 0x28
 3645 0028 00       		.byte	0
 3646 0029 03       		.uleb128 0x3
 3647 002a 0E       		.uleb128 0xe
 3648 002b 1C       		.uleb128 0x1c
 3649 002c 0D       		.uleb128 0xd
ARM GAS  /tmp/ccI8cyDB.s 			page 107


 3650 002d 00       		.byte	0
 3651 002e 00       		.byte	0
 3652 002f 04       		.uleb128 0x4
 3653 0030 28       		.uleb128 0x28
 3654 0031 00       		.byte	0
 3655 0032 03       		.uleb128 0x3
 3656 0033 0E       		.uleb128 0xe
 3657 0034 1C       		.uleb128 0x1c
 3658 0035 0B       		.uleb128 0xb
 3659 0036 00       		.byte	0
 3660 0037 00       		.byte	0
 3661 0038 05       		.uleb128 0x5
 3662 0039 24       		.uleb128 0x24
 3663 003a 00       		.byte	0
 3664 003b 0B       		.uleb128 0xb
 3665 003c 0B       		.uleb128 0xb
 3666 003d 3E       		.uleb128 0x3e
 3667 003e 0B       		.uleb128 0xb
 3668 003f 03       		.uleb128 0x3
 3669 0040 0E       		.uleb128 0xe
 3670 0041 00       		.byte	0
 3671 0042 00       		.byte	0
 3672 0043 06       		.uleb128 0x6
 3673 0044 16       		.uleb128 0x16
 3674 0045 00       		.byte	0
 3675 0046 03       		.uleb128 0x3
 3676 0047 0E       		.uleb128 0xe
 3677 0048 3A       		.uleb128 0x3a
 3678 0049 0B       		.uleb128 0xb
 3679 004a 3B       		.uleb128 0x3b
 3680 004b 05       		.uleb128 0x5
 3681 004c 49       		.uleb128 0x49
 3682 004d 13       		.uleb128 0x13
 3683 004e 00       		.byte	0
 3684 004f 00       		.byte	0
 3685 0050 07       		.uleb128 0x7
 3686 0051 16       		.uleb128 0x16
 3687 0052 00       		.byte	0
 3688 0053 03       		.uleb128 0x3
 3689 0054 0E       		.uleb128 0xe
 3690 0055 3A       		.uleb128 0x3a
 3691 0056 0B       		.uleb128 0xb
 3692 0057 3B       		.uleb128 0x3b
 3693 0058 0B       		.uleb128 0xb
 3694 0059 49       		.uleb128 0x49
 3695 005a 13       		.uleb128 0x13
 3696 005b 00       		.byte	0
 3697 005c 00       		.byte	0
 3698 005d 08       		.uleb128 0x8
 3699 005e 24       		.uleb128 0x24
 3700 005f 00       		.byte	0
 3701 0060 0B       		.uleb128 0xb
 3702 0061 0B       		.uleb128 0xb
 3703 0062 3E       		.uleb128 0x3e
 3704 0063 0B       		.uleb128 0xb
 3705 0064 03       		.uleb128 0x3
 3706 0065 08       		.uleb128 0x8
ARM GAS  /tmp/ccI8cyDB.s 			page 108


 3707 0066 00       		.byte	0
 3708 0067 00       		.byte	0
 3709 0068 09       		.uleb128 0x9
 3710 0069 13       		.uleb128 0x13
 3711 006a 01       		.byte	0x1
 3712 006b 0B       		.uleb128 0xb
 3713 006c 05       		.uleb128 0x5
 3714 006d 3A       		.uleb128 0x3a
 3715 006e 0B       		.uleb128 0xb
 3716 006f 3B       		.uleb128 0x3b
 3717 0070 0B       		.uleb128 0xb
 3718 0071 01       		.uleb128 0x1
 3719 0072 13       		.uleb128 0x13
 3720 0073 00       		.byte	0
 3721 0074 00       		.byte	0
 3722 0075 0A       		.uleb128 0xa
 3723 0076 0D       		.uleb128 0xd
 3724 0077 00       		.byte	0
 3725 0078 03       		.uleb128 0x3
 3726 0079 0E       		.uleb128 0xe
 3727 007a 3A       		.uleb128 0x3a
 3728 007b 0B       		.uleb128 0xb
 3729 007c 3B       		.uleb128 0x3b
 3730 007d 0B       		.uleb128 0xb
 3731 007e 49       		.uleb128 0x49
 3732 007f 13       		.uleb128 0x13
 3733 0080 38       		.uleb128 0x38
 3734 0081 0A       		.uleb128 0xa
 3735 0082 00       		.byte	0
 3736 0083 00       		.byte	0
 3737 0084 0B       		.uleb128 0xb
 3738 0085 0D       		.uleb128 0xd
 3739 0086 00       		.byte	0
 3740 0087 03       		.uleb128 0x3
 3741 0088 08       		.uleb128 0x8
 3742 0089 3A       		.uleb128 0x3a
 3743 008a 0B       		.uleb128 0xb
 3744 008b 3B       		.uleb128 0x3b
 3745 008c 0B       		.uleb128 0xb
 3746 008d 49       		.uleb128 0x49
 3747 008e 13       		.uleb128 0x13
 3748 008f 38       		.uleb128 0x38
 3749 0090 0A       		.uleb128 0xa
 3750 0091 00       		.byte	0
 3751 0092 00       		.byte	0
 3752 0093 0C       		.uleb128 0xc
 3753 0094 01       		.uleb128 0x1
 3754 0095 01       		.byte	0x1
 3755 0096 49       		.uleb128 0x49
 3756 0097 13       		.uleb128 0x13
 3757 0098 01       		.uleb128 0x1
 3758 0099 13       		.uleb128 0x13
 3759 009a 00       		.byte	0
 3760 009b 00       		.byte	0
 3761 009c 0D       		.uleb128 0xd
 3762 009d 21       		.uleb128 0x21
 3763 009e 00       		.byte	0
ARM GAS  /tmp/ccI8cyDB.s 			page 109


 3764 009f 49       		.uleb128 0x49
 3765 00a0 13       		.uleb128 0x13
 3766 00a1 2F       		.uleb128 0x2f
 3767 00a2 0B       		.uleb128 0xb
 3768 00a3 00       		.byte	0
 3769 00a4 00       		.byte	0
 3770 00a5 0E       		.uleb128 0xe
 3771 00a6 35       		.uleb128 0x35
 3772 00a7 00       		.byte	0
 3773 00a8 49       		.uleb128 0x49
 3774 00a9 13       		.uleb128 0x13
 3775 00aa 00       		.byte	0
 3776 00ab 00       		.byte	0
 3777 00ac 0F       		.uleb128 0xf
 3778 00ad 13       		.uleb128 0x13
 3779 00ae 01       		.byte	0x1
 3780 00af 0B       		.uleb128 0xb
 3781 00b0 0B       		.uleb128 0xb
 3782 00b1 3A       		.uleb128 0x3a
 3783 00b2 0B       		.uleb128 0xb
 3784 00b3 3B       		.uleb128 0x3b
 3785 00b4 0B       		.uleb128 0xb
 3786 00b5 01       		.uleb128 0x1
 3787 00b6 13       		.uleb128 0x13
 3788 00b7 00       		.byte	0
 3789 00b8 00       		.byte	0
 3790 00b9 10       		.uleb128 0x10
 3791 00ba 26       		.uleb128 0x26
 3792 00bb 00       		.byte	0
 3793 00bc 49       		.uleb128 0x49
 3794 00bd 13       		.uleb128 0x13
 3795 00be 00       		.byte	0
 3796 00bf 00       		.byte	0
 3797 00c0 11       		.uleb128 0x11
 3798 00c1 0D       		.uleb128 0xd
 3799 00c2 00       		.byte	0
 3800 00c3 03       		.uleb128 0x3
 3801 00c4 08       		.uleb128 0x8
 3802 00c5 3A       		.uleb128 0x3a
 3803 00c6 0B       		.uleb128 0xb
 3804 00c7 3B       		.uleb128 0x3b
 3805 00c8 05       		.uleb128 0x5
 3806 00c9 49       		.uleb128 0x49
 3807 00ca 13       		.uleb128 0x13
 3808 00cb 38       		.uleb128 0x38
 3809 00cc 0A       		.uleb128 0xa
 3810 00cd 00       		.byte	0
 3811 00ce 00       		.byte	0
 3812 00cf 12       		.uleb128 0x12
 3813 00d0 0D       		.uleb128 0xd
 3814 00d1 00       		.byte	0
 3815 00d2 03       		.uleb128 0x3
 3816 00d3 0E       		.uleb128 0xe
 3817 00d4 3A       		.uleb128 0x3a
 3818 00d5 0B       		.uleb128 0xb
 3819 00d6 3B       		.uleb128 0x3b
 3820 00d7 05       		.uleb128 0x5
ARM GAS  /tmp/ccI8cyDB.s 			page 110


 3821 00d8 49       		.uleb128 0x49
 3822 00d9 13       		.uleb128 0x13
 3823 00da 38       		.uleb128 0x38
 3824 00db 0A       		.uleb128 0xa
 3825 00dc 00       		.byte	0
 3826 00dd 00       		.byte	0
 3827 00de 13       		.uleb128 0x13
 3828 00df 13       		.uleb128 0x13
 3829 00e0 01       		.byte	0x1
 3830 00e1 0B       		.uleb128 0xb
 3831 00e2 0B       		.uleb128 0xb
 3832 00e3 3A       		.uleb128 0x3a
 3833 00e4 0B       		.uleb128 0xb
 3834 00e5 3B       		.uleb128 0x3b
 3835 00e6 05       		.uleb128 0x5
 3836 00e7 01       		.uleb128 0x1
 3837 00e8 13       		.uleb128 0x13
 3838 00e9 00       		.byte	0
 3839 00ea 00       		.byte	0
 3840 00eb 14       		.uleb128 0x14
 3841 00ec 04       		.uleb128 0x4
 3842 00ed 01       		.byte	0x1
 3843 00ee 0B       		.uleb128 0xb
 3844 00ef 0B       		.uleb128 0xb
 3845 00f0 49       		.uleb128 0x49
 3846 00f1 13       		.uleb128 0x13
 3847 00f2 3A       		.uleb128 0x3a
 3848 00f3 0B       		.uleb128 0xb
 3849 00f4 3B       		.uleb128 0x3b
 3850 00f5 0B       		.uleb128 0xb
 3851 00f6 01       		.uleb128 0x1
 3852 00f7 13       		.uleb128 0x13
 3853 00f8 00       		.byte	0
 3854 00f9 00       		.byte	0
 3855 00fa 15       		.uleb128 0x15
 3856 00fb 13       		.uleb128 0x13
 3857 00fc 01       		.byte	0x1
 3858 00fd 03       		.uleb128 0x3
 3859 00fe 0E       		.uleb128 0xe
 3860 00ff 0B       		.uleb128 0xb
 3861 0100 0B       		.uleb128 0xb
 3862 0101 3A       		.uleb128 0x3a
 3863 0102 0B       		.uleb128 0xb
 3864 0103 3B       		.uleb128 0x3b
 3865 0104 0B       		.uleb128 0xb
 3866 0105 01       		.uleb128 0x1
 3867 0106 13       		.uleb128 0x13
 3868 0107 00       		.byte	0
 3869 0108 00       		.byte	0
 3870 0109 16       		.uleb128 0x16
 3871 010a 2E       		.uleb128 0x2e
 3872 010b 01       		.byte	0x1
 3873 010c 03       		.uleb128 0x3
 3874 010d 0E       		.uleb128 0xe
 3875 010e 3A       		.uleb128 0x3a
 3876 010f 0B       		.uleb128 0xb
 3877 0110 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccI8cyDB.s 			page 111


 3878 0111 05       		.uleb128 0x5
 3879 0112 27       		.uleb128 0x27
 3880 0113 0C       		.uleb128 0xc
 3881 0114 11       		.uleb128 0x11
 3882 0115 01       		.uleb128 0x1
 3883 0116 12       		.uleb128 0x12
 3884 0117 01       		.uleb128 0x1
 3885 0118 40       		.uleb128 0x40
 3886 0119 06       		.uleb128 0x6
 3887 011a 9742     		.uleb128 0x2117
 3888 011c 0C       		.uleb128 0xc
 3889 011d 01       		.uleb128 0x1
 3890 011e 13       		.uleb128 0x13
 3891 011f 00       		.byte	0
 3892 0120 00       		.byte	0
 3893 0121 17       		.uleb128 0x17
 3894 0122 05       		.uleb128 0x5
 3895 0123 00       		.byte	0
 3896 0124 03       		.uleb128 0x3
 3897 0125 0E       		.uleb128 0xe
 3898 0126 3A       		.uleb128 0x3a
 3899 0127 0B       		.uleb128 0xb
 3900 0128 3B       		.uleb128 0x3b
 3901 0129 05       		.uleb128 0x5
 3902 012a 49       		.uleb128 0x49
 3903 012b 13       		.uleb128 0x13
 3904 012c 02       		.uleb128 0x2
 3905 012d 0A       		.uleb128 0xa
 3906 012e 00       		.byte	0
 3907 012f 00       		.byte	0
 3908 0130 18       		.uleb128 0x18
 3909 0131 2E       		.uleb128 0x2e
 3910 0132 01       		.byte	0x1
 3911 0133 03       		.uleb128 0x3
 3912 0134 0E       		.uleb128 0xe
 3913 0135 3A       		.uleb128 0x3a
 3914 0136 0B       		.uleb128 0xb
 3915 0137 3B       		.uleb128 0x3b
 3916 0138 05       		.uleb128 0x5
 3917 0139 27       		.uleb128 0x27
 3918 013a 0C       		.uleb128 0xc
 3919 013b 49       		.uleb128 0x49
 3920 013c 13       		.uleb128 0x13
 3921 013d 11       		.uleb128 0x11
 3922 013e 01       		.uleb128 0x1
 3923 013f 12       		.uleb128 0x12
 3924 0140 01       		.uleb128 0x1
 3925 0141 40       		.uleb128 0x40
 3926 0142 06       		.uleb128 0x6
 3927 0143 9642     		.uleb128 0x2116
 3928 0145 0C       		.uleb128 0xc
 3929 0146 01       		.uleb128 0x1
 3930 0147 13       		.uleb128 0x13
 3931 0148 00       		.byte	0
 3932 0149 00       		.byte	0
 3933 014a 19       		.uleb128 0x19
 3934 014b 2E       		.uleb128 0x2e
ARM GAS  /tmp/ccI8cyDB.s 			page 112


 3935 014c 01       		.byte	0x1
 3936 014d 3F       		.uleb128 0x3f
 3937 014e 0C       		.uleb128 0xc
 3938 014f 03       		.uleb128 0x3
 3939 0150 0E       		.uleb128 0xe
 3940 0151 3A       		.uleb128 0x3a
 3941 0152 0B       		.uleb128 0xb
 3942 0153 3B       		.uleb128 0x3b
 3943 0154 0B       		.uleb128 0xb
 3944 0155 27       		.uleb128 0x27
 3945 0156 0C       		.uleb128 0xc
 3946 0157 49       		.uleb128 0x49
 3947 0158 13       		.uleb128 0x13
 3948 0159 11       		.uleb128 0x11
 3949 015a 01       		.uleb128 0x1
 3950 015b 12       		.uleb128 0x12
 3951 015c 01       		.uleb128 0x1
 3952 015d 40       		.uleb128 0x40
 3953 015e 06       		.uleb128 0x6
 3954 015f 9642     		.uleb128 0x2116
 3955 0161 0C       		.uleb128 0xc
 3956 0162 01       		.uleb128 0x1
 3957 0163 13       		.uleb128 0x13
 3958 0164 00       		.byte	0
 3959 0165 00       		.byte	0
 3960 0166 1A       		.uleb128 0x1a
 3961 0167 34       		.uleb128 0x34
 3962 0168 00       		.byte	0
 3963 0169 03       		.uleb128 0x3
 3964 016a 08       		.uleb128 0x8
 3965 016b 3A       		.uleb128 0x3a
 3966 016c 0B       		.uleb128 0xb
 3967 016d 3B       		.uleb128 0x3b
 3968 016e 0B       		.uleb128 0xb
 3969 016f 49       		.uleb128 0x49
 3970 0170 13       		.uleb128 0x13
 3971 0171 02       		.uleb128 0x2
 3972 0172 0A       		.uleb128 0xa
 3973 0173 00       		.byte	0
 3974 0174 00       		.byte	0
 3975 0175 1B       		.uleb128 0x1b
 3976 0176 34       		.uleb128 0x34
 3977 0177 00       		.byte	0
 3978 0178 03       		.uleb128 0x3
 3979 0179 08       		.uleb128 0x8
 3980 017a 3A       		.uleb128 0x3a
 3981 017b 0B       		.uleb128 0xb
 3982 017c 3B       		.uleb128 0x3b
 3983 017d 0B       		.uleb128 0xb
 3984 017e 49       		.uleb128 0x49
 3985 017f 13       		.uleb128 0x13
 3986 0180 00       		.byte	0
 3987 0181 00       		.byte	0
 3988 0182 1C       		.uleb128 0x1c
 3989 0183 34       		.uleb128 0x34
 3990 0184 00       		.byte	0
 3991 0185 03       		.uleb128 0x3
ARM GAS  /tmp/ccI8cyDB.s 			page 113


 3992 0186 0E       		.uleb128 0xe
 3993 0187 3A       		.uleb128 0x3a
 3994 0188 0B       		.uleb128 0xb
 3995 0189 3B       		.uleb128 0x3b
 3996 018a 0B       		.uleb128 0xb
 3997 018b 49       		.uleb128 0x49
 3998 018c 13       		.uleb128 0x13
 3999 018d 00       		.byte	0
 4000 018e 00       		.byte	0
 4001 018f 1D       		.uleb128 0x1d
 4002 0190 34       		.uleb128 0x34
 4003 0191 00       		.byte	0
 4004 0192 03       		.uleb128 0x3
 4005 0193 0E       		.uleb128 0xe
 4006 0194 3A       		.uleb128 0x3a
 4007 0195 0B       		.uleb128 0xb
 4008 0196 3B       		.uleb128 0x3b
 4009 0197 0B       		.uleb128 0xb
 4010 0198 49       		.uleb128 0x49
 4011 0199 13       		.uleb128 0x13
 4012 019a 02       		.uleb128 0x2
 4013 019b 0A       		.uleb128 0xa
 4014 019c 00       		.byte	0
 4015 019d 00       		.byte	0
 4016 019e 1E       		.uleb128 0x1e
 4017 019f 2E       		.uleb128 0x2e
 4018 01a0 01       		.byte	0x1
 4019 01a1 3F       		.uleb128 0x3f
 4020 01a2 0C       		.uleb128 0xc
 4021 01a3 03       		.uleb128 0x3
 4022 01a4 0E       		.uleb128 0xe
 4023 01a5 3A       		.uleb128 0x3a
 4024 01a6 0B       		.uleb128 0xb
 4025 01a7 3B       		.uleb128 0x3b
 4026 01a8 05       		.uleb128 0x5
 4027 01a9 27       		.uleb128 0x27
 4028 01aa 0C       		.uleb128 0xc
 4029 01ab 11       		.uleb128 0x11
 4030 01ac 01       		.uleb128 0x1
 4031 01ad 12       		.uleb128 0x12
 4032 01ae 01       		.uleb128 0x1
 4033 01af 40       		.uleb128 0x40
 4034 01b0 06       		.uleb128 0x6
 4035 01b1 9642     		.uleb128 0x2116
 4036 01b3 0C       		.uleb128 0xc
 4037 01b4 01       		.uleb128 0x1
 4038 01b5 13       		.uleb128 0x13
 4039 01b6 00       		.byte	0
 4040 01b7 00       		.byte	0
 4041 01b8 1F       		.uleb128 0x1f
 4042 01b9 34       		.uleb128 0x34
 4043 01ba 00       		.byte	0
 4044 01bb 03       		.uleb128 0x3
 4045 01bc 08       		.uleb128 0x8
 4046 01bd 3A       		.uleb128 0x3a
 4047 01be 0B       		.uleb128 0xb
 4048 01bf 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccI8cyDB.s 			page 114


 4049 01c0 05       		.uleb128 0x5
 4050 01c1 49       		.uleb128 0x49
 4051 01c2 13       		.uleb128 0x13
 4052 01c3 02       		.uleb128 0x2
 4053 01c4 0A       		.uleb128 0xa
 4054 01c5 00       		.byte	0
 4055 01c6 00       		.byte	0
 4056 01c7 20       		.uleb128 0x20
 4057 01c8 34       		.uleb128 0x34
 4058 01c9 00       		.byte	0
 4059 01ca 03       		.uleb128 0x3
 4060 01cb 0E       		.uleb128 0xe
 4061 01cc 3A       		.uleb128 0x3a
 4062 01cd 0B       		.uleb128 0xb
 4063 01ce 3B       		.uleb128 0x3b
 4064 01cf 05       		.uleb128 0x5
 4065 01d0 49       		.uleb128 0x49
 4066 01d1 13       		.uleb128 0x13
 4067 01d2 02       		.uleb128 0x2
 4068 01d3 0A       		.uleb128 0xa
 4069 01d4 00       		.byte	0
 4070 01d5 00       		.byte	0
 4071 01d6 21       		.uleb128 0x21
 4072 01d7 0F       		.uleb128 0xf
 4073 01d8 00       		.byte	0
 4074 01d9 0B       		.uleb128 0xb
 4075 01da 0B       		.uleb128 0xb
 4076 01db 49       		.uleb128 0x49
 4077 01dc 13       		.uleb128 0x13
 4078 01dd 00       		.byte	0
 4079 01de 00       		.byte	0
 4080 01df 22       		.uleb128 0x22
 4081 01e0 2E       		.uleb128 0x2e
 4082 01e1 00       		.byte	0
 4083 01e2 3F       		.uleb128 0x3f
 4084 01e3 0C       		.uleb128 0xc
 4085 01e4 03       		.uleb128 0x3
 4086 01e5 0E       		.uleb128 0xe
 4087 01e6 3A       		.uleb128 0x3a
 4088 01e7 0B       		.uleb128 0xb
 4089 01e8 3B       		.uleb128 0x3b
 4090 01e9 05       		.uleb128 0x5
 4091 01ea 27       		.uleb128 0x27
 4092 01eb 0C       		.uleb128 0xc
 4093 01ec 11       		.uleb128 0x11
 4094 01ed 01       		.uleb128 0x1
 4095 01ee 12       		.uleb128 0x12
 4096 01ef 01       		.uleb128 0x1
 4097 01f0 40       		.uleb128 0x40
 4098 01f1 06       		.uleb128 0x6
 4099 01f2 9642     		.uleb128 0x2116
 4100 01f4 0C       		.uleb128 0xc
 4101 01f5 00       		.byte	0
 4102 01f6 00       		.byte	0
 4103 01f7 23       		.uleb128 0x23
 4104 01f8 34       		.uleb128 0x34
 4105 01f9 00       		.byte	0
ARM GAS  /tmp/ccI8cyDB.s 			page 115


 4106 01fa 03       		.uleb128 0x3
 4107 01fb 0E       		.uleb128 0xe
 4108 01fc 3A       		.uleb128 0x3a
 4109 01fd 0B       		.uleb128 0xb
 4110 01fe 3B       		.uleb128 0x3b
 4111 01ff 0B       		.uleb128 0xb
 4112 0200 49       		.uleb128 0x49
 4113 0201 13       		.uleb128 0x13
 4114 0202 3F       		.uleb128 0x3f
 4115 0203 0C       		.uleb128 0xc
 4116 0204 02       		.uleb128 0x2
 4117 0205 0A       		.uleb128 0xa
 4118 0206 00       		.byte	0
 4119 0207 00       		.byte	0
 4120 0208 24       		.uleb128 0x24
 4121 0209 21       		.uleb128 0x21
 4122 020a 00       		.byte	0
 4123 020b 00       		.byte	0
 4124 020c 00       		.byte	0
 4125 020d 25       		.uleb128 0x25
 4126 020e 34       		.uleb128 0x34
 4127 020f 00       		.byte	0
 4128 0210 03       		.uleb128 0x3
 4129 0211 0E       		.uleb128 0xe
 4130 0212 3A       		.uleb128 0x3a
 4131 0213 0B       		.uleb128 0xb
 4132 0214 3B       		.uleb128 0x3b
 4133 0215 0B       		.uleb128 0xb
 4134 0216 49       		.uleb128 0x49
 4135 0217 13       		.uleb128 0x13
 4136 0218 3F       		.uleb128 0x3f
 4137 0219 0C       		.uleb128 0xc
 4138 021a 3C       		.uleb128 0x3c
 4139 021b 0C       		.uleb128 0xc
 4140 021c 00       		.byte	0
 4141 021d 00       		.byte	0
 4142 021e 00       		.byte	0
 4143              		.section	.debug_loc,"",%progbits
 4144              	.Ldebug_loc0:
 4145              	.LLST0:
 4146 0000 00000000 		.4byte	.LFB16
 4147 0004 02000000 		.4byte	.LCFI0
 4148 0008 0200     		.2byte	0x2
 4149 000a 7D       		.byte	0x7d
 4150 000b 00       		.sleb128 0
 4151 000c 02000000 		.4byte	.LCFI0
 4152 0010 04000000 		.4byte	.LCFI1
 4153 0014 0200     		.2byte	0x2
 4154 0016 7D       		.byte	0x7d
 4155 0017 0C       		.sleb128 12
 4156 0018 04000000 		.4byte	.LCFI1
 4157 001c EC000000 		.4byte	.LFE16
 4158 0020 0200     		.2byte	0x2
 4159 0022 7D       		.byte	0x7d
 4160 0023 18       		.sleb128 24
 4161 0024 00000000 		.4byte	0
 4162 0028 00000000 		.4byte	0
ARM GAS  /tmp/ccI8cyDB.s 			page 116


 4163              	.LLST1:
 4164 002c 00000000 		.4byte	.LFB18
 4165 0030 02000000 		.4byte	.LCFI2
 4166 0034 0200     		.2byte	0x2
 4167 0036 7D       		.byte	0x7d
 4168 0037 00       		.sleb128 0
 4169 0038 02000000 		.4byte	.LCFI2
 4170 003c 04000000 		.4byte	.LCFI3
 4171 0040 0200     		.2byte	0x2
 4172 0042 7D       		.byte	0x7d
 4173 0043 04       		.sleb128 4
 4174 0044 04000000 		.4byte	.LCFI3
 4175 0048 48000000 		.4byte	.LFE18
 4176 004c 0200     		.2byte	0x2
 4177 004e 7D       		.byte	0x7d
 4178 004f 10       		.sleb128 16
 4179 0050 00000000 		.4byte	0
 4180 0054 00000000 		.4byte	0
 4181              	.LLST2:
 4182 0058 00000000 		.4byte	.LFB20
 4183 005c 02000000 		.4byte	.LCFI4
 4184 0060 0200     		.2byte	0x2
 4185 0062 7D       		.byte	0x7d
 4186 0063 00       		.sleb128 0
 4187 0064 02000000 		.4byte	.LCFI4
 4188 0068 04000000 		.4byte	.LCFI5
 4189 006c 0200     		.2byte	0x2
 4190 006e 7D       		.byte	0x7d
 4191 006f 0C       		.sleb128 12
 4192 0070 04000000 		.4byte	.LCFI5
 4193 0074 90070000 		.4byte	.LFE20
 4194 0078 0300     		.2byte	0x3
 4195 007a 7D       		.byte	0x7d
 4196 007b A001     		.sleb128 160
 4197 007d 00000000 		.4byte	0
 4198 0081 00000000 		.4byte	0
 4199              	.LLST3:
 4200 0085 00000000 		.4byte	.LFB21
 4201 0089 02000000 		.4byte	.LCFI6
 4202 008d 0200     		.2byte	0x2
 4203 008f 7D       		.byte	0x7d
 4204 0090 00       		.sleb128 0
 4205 0091 02000000 		.4byte	.LCFI6
 4206 0095 04000000 		.4byte	.LCFI7
 4207 0099 0200     		.2byte	0x2
 4208 009b 7D       		.byte	0x7d
 4209 009c 04       		.sleb128 4
 4210 009d 04000000 		.4byte	.LCFI7
 4211 00a1 B0000000 		.4byte	.LFE21
 4212 00a5 0300     		.2byte	0x3
 4213 00a7 7D       		.byte	0x7d
 4214 00a8 E000     		.sleb128 96
 4215 00aa 00000000 		.4byte	0
 4216 00ae 00000000 		.4byte	0
 4217              	.LLST4:
 4218 00b2 00000000 		.4byte	.LFB22
 4219 00b6 02000000 		.4byte	.LCFI8
ARM GAS  /tmp/ccI8cyDB.s 			page 117


 4220 00ba 0200     		.2byte	0x2
 4221 00bc 7D       		.byte	0x7d
 4222 00bd 00       		.sleb128 0
 4223 00be 02000000 		.4byte	.LCFI8
 4224 00c2 EC000000 		.4byte	.LFE22
 4225 00c6 0200     		.2byte	0x2
 4226 00c8 7D       		.byte	0x7d
 4227 00c9 08       		.sleb128 8
 4228 00ca 00000000 		.4byte	0
 4229 00ce 00000000 		.4byte	0
 4230              		.section	.debug_aranges,"",%progbits
 4231 0000 3C000000 		.4byte	0x3c
 4232 0004 0200     		.2byte	0x2
 4233 0006 00000000 		.4byte	.Ldebug_info0
 4234 000a 04       		.byte	0x4
 4235 000b 00       		.byte	0
 4236 000c 0000     		.2byte	0
 4237 000e 0000     		.2byte	0
 4238 0010 00000000 		.4byte	.LFB16
 4239 0014 EC000000 		.4byte	.LFE16-.LFB16
 4240 0018 00000000 		.4byte	.LFB18
 4241 001c 48000000 		.4byte	.LFE18-.LFB18
 4242 0020 00000000 		.4byte	.LFB20
 4243 0024 90070000 		.4byte	.LFE20-.LFB20
 4244 0028 00000000 		.4byte	.LFB21
 4245 002c B0000000 		.4byte	.LFE21-.LFB21
 4246 0030 00000000 		.4byte	.LFB22
 4247 0034 EC000000 		.4byte	.LFE22-.LFB22
 4248 0038 00000000 		.4byte	0
 4249 003c 00000000 		.4byte	0
 4250              		.section	.debug_ranges,"",%progbits
 4251              	.Ldebug_ranges0:
 4252 0000 00000000 		.4byte	.LFB16
 4253 0004 EC000000 		.4byte	.LFE16
 4254 0008 00000000 		.4byte	.LFB18
 4255 000c 48000000 		.4byte	.LFE18
 4256 0010 00000000 		.4byte	.LFB20
 4257 0014 90070000 		.4byte	.LFE20
 4258 0018 00000000 		.4byte	.LFB21
 4259 001c B0000000 		.4byte	.LFE21
 4260 0020 00000000 		.4byte	.LFB22
 4261 0024 EC000000 		.4byte	.LFE22
 4262 0028 00000000 		.4byte	0
 4263 002c 00000000 		.4byte	0
 4264              		.section	.debug_line,"",%progbits
 4265              	.Ldebug_line0:
 4266 0000 E4020000 		.section	.debug_str,"MS",%progbits,1
 4266      02003701 
 4266      00000201 
 4266      FB0E0D00 
 4266      01010101 
 4267              	.LASF153:
 4268 0000 735F6C63 		.ascii	"s_lcd\000"
 4268      6400
 4269              	.LASF125:
 4270 0006 67736D5F 		.ascii	"gsm_state_idle\000"
 4270      73746174 
ARM GAS  /tmp/ccI8cyDB.s 			page 118


 4270      655F6964 
 4270      6C6500
 4271              	.LASF140:
 4272 0015 7A65726F 		.ascii	"zero_current_loc\000"
 4272      5F637572 
 4272      72656E74 
 4272      5F6C6F63 
 4272      00
 4273              	.LASF183:
 4274 0026 70617261 		.ascii	"param_struct\000"
 4274      6D5F7374 
 4274      72756374 
 4274      00
 4275              	.LASF12:
 4276 0033 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4276      345F3135 
 4276      5F495251 
 4276      6E00
 4277              	.LASF83:
 4278 0041 42535252 		.ascii	"BSRR\000"
 4278      00
 4279              	.LASF11:
 4280 0046 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4280      325F335F 
 4280      4952516E 
 4280      00
 4281              	.LASF145:
 4282 0053 6D61696E 		.ascii	"main_state\000"
 4282      5F737461 
 4282      746500
 4283              	.LASF99:
 4284 005e 696E6974 		.ascii	"init_airplane0\000"
 4284      5F616972 
 4284      706C616E 
 4284      653000
 4285              	.LASF100:
 4286 006d 696E6974 		.ascii	"init_airplane1\000"
 4286      5F616972 
 4286      706C616E 
 4286      653100
 4287              	.LASF2:
 4288 007c 5356435F 		.ascii	"SVC_IRQn\000"
 4288      4952516E 
 4288      00
 4289              	.LASF154:
 4290 0085 62756666 		.ascii	"buffer\000"
 4290      657200
 4291              	.LASF121:
 4292 008c 67736D5F 		.ascii	"gsm_state_ready\000"
 4292      73746174 
 4292      655F7265 
 4292      61647900 
 4293              	.LASF129:
 4294 009c 67736D5F 		.ascii	"gsm_state_shutdown\000"
 4294      73746174 
 4294      655F7368 
 4294      7574646F 
ARM GAS  /tmp/ccI8cyDB.s 			page 119


 4294      776E00
 4295              	.LASF196:
 4296 00af 76706F74 		.ascii	"vpote\000"
 4296      6500
 4297              	.LASF105:
 4298 00b5 6D656173 		.ascii	"meas_go_airplane\000"
 4298      5F676F5F 
 4298      61697270 
 4298      6C616E65 
 4298      00
 4299              	.LASF47:
 4300 00c6 756E7369 		.ascii	"unsigned int\000"
 4300      676E6564 
 4300      20696E74 
 4300      00
 4301              	.LASF71:
 4302 00d3 4C4F4144 		.ascii	"LOAD\000"
 4302      00
 4303              	.LASF25:
 4304 00d8 54494D31 		.ascii	"TIM16_IRQn\000"
 4304      365F4952 
 4304      516E00
 4305              	.LASF189:
 4306 00e3 7463705F 		.ascii	"tcp_kalive_timer\000"
 4306      6B616C69 
 4306      76655F74 
 4306      696D6572 
 4306      00
 4307              	.LASF41:
 4308 00f4 5F5F696E 		.ascii	"__int32_t\000"
 4308      7433325F 
 4308      7400
 4309              	.LASF161:
 4310 00fe 72783262 		.ascii	"rx2buff\000"
 4310      75666600 
 4311              	.LASF8:
 4312 0106 464C4153 		.ascii	"FLASH_IRQn\000"
 4312      485F4952 
 4312      516E00
 4313              	.LASF163:
 4314 0111 72783162 		.ascii	"rx1buff\000"
 4314      75666600 
 4315              	.LASF72:
 4316 0119 43414C49 		.ascii	"CALIB\000"
 4316      4200
 4317              	.LASF108:
 4318 011f 696D6569 		.ascii	"imei\000"
 4318      00
 4319              	.LASF193:
 4320 0124 6D696E75 		.ascii	"minutes\000"
 4320      74657300 
 4321              	.LASF160:
 4322 012c 74783262 		.ascii	"tx2buff\000"
 4322      75666600 
 4323              	.LASF10:
 4324 0134 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4324      305F315F 
ARM GAS  /tmp/ccI8cyDB.s 			page 120


 4324      4952516E 
 4324      00
 4325              	.LASF190:
 4326 0141 74696D65 		.ascii	"timer_meas\000"
 4326      725F6D65 
 4326      617300
 4327              	.LASF180:
 4328 014c 75736172 		.ascii	"usart2_have_data\000"
 4328      74325F68 
 4328      6176655F 
 4328      64617461 
 4328      00
 4329              	.LASF122:
 4330 015d 67736D5F 		.ascii	"gsm_state_sending_conf\000"
 4330      73746174 
 4330      655F7365 
 4330      6E64696E 
 4330      675F636F 
 4331              	.LASF27:
 4332 0174 49324331 		.ascii	"I2C1_IRQn\000"
 4332      5F495251 
 4332      6E00
 4333              	.LASF3:
 4334 017e 50656E64 		.ascii	"PendSV_IRQn\000"
 4334      53565F49 
 4334      52516E00 
 4335              	.LASF141:
 4336 018a 6163756D 		.ascii	"acum_secs_index\000"
 4336      5F736563 
 4336      735F696E 
 4336      64657800 
 4337              	.LASF9:
 4338 019a 5243435F 		.ascii	"RCC_IRQn\000"
 4338      4952516E 
 4338      00
 4339              	.LASF104:
 4340 01a3 6D656173 		.ascii	"meas_reporting1\000"
 4340      5F726570 
 4340      6F727469 
 4340      6E673100 
 4341              	.LASF51:
 4342 01b3 75696E74 		.ascii	"uint32_t\000"
 4342      33325F74 
 4342      00
 4343              	.LASF110:
 4344 01bc 6163756D 		.ascii	"acumm_wh\000"
 4344      6D5F7768 
 4344      00
 4345              	.LASF150:
 4346 01c5 6D656173 		.ascii	"meas_end\000"
 4346      5F656E64 
 4346      00
 4347              	.LASF52:
 4348 01ce 49534552 		.ascii	"ISER\000"
 4348      00
 4349              	.LASF159:
 4350 01d3 666C6F61 		.ascii	"float\000"
ARM GAS  /tmp/ccI8cyDB.s 			page 121


 4350      7400
 4351              	.LASF151:
 4352 01d9 68797374 		.ascii	"hyst\000"
 4352      00
 4353              	.LASF55:
 4354 01de 52534552 		.ascii	"RSERVED1\000"
 4354      56454431 
 4354      00
 4355              	.LASF29:
 4356 01e7 53504931 		.ascii	"SPI1_IRQn\000"
 4356      5F495251 
 4356      6E00
 4357              	.LASF46:
 4358 01f1 6C6F6E67 		.ascii	"long long unsigned int\000"
 4358      206C6F6E 
 4358      6720756E 
 4358      7369676E 
 4358      65642069 
 4359              	.LASF68:
 4360 0208 44465352 		.ascii	"DFSR\000"
 4360      00
 4361              	.LASF177:
 4362 020d 75736172 		.ascii	"usart1_pckt_bytes\000"
 4362      74315F70 
 4362      636B745F 
 4362      62797465 
 4362      7300
 4363              	.LASF116:
 4364 021f 67736D5F 		.ascii	"gsm_state_reset\000"
 4364      73746174 
 4364      655F7265 
 4364      73657400 
 4365              	.LASF143:
 4366 022f 6163756D 		.ascii	"acum_hours\000"
 4366      5F686F75 
 4366      727300
 4367              	.LASF39:
 4368 023a 5F5F7569 		.ascii	"__uint16_t\000"
 4368      6E743136 
 4368      5F7400
 4369              	.LASF91:
 4370 0245 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE0\000"
 4370      434F554E 
 4370      54455253 
 4370      5F414E44 
 4370      5F50484F 
 4371              	.LASF92:
 4372 025d 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE1\000"
 4372      434F554E 
 4372      54455253 
 4372      5F414E44 
 4372      5F50484F 
 4373              	.LASF79:
 4374 0275 4D4F4445 		.ascii	"MODER\000"
 4374      5200
 4375              	.LASF77:
 4376 027b 43485345 		.ascii	"CHSELR\000"
ARM GAS  /tmp/ccI8cyDB.s 			page 122


 4376      4C5200
 4377              	.LASF175:
 4378 0282 75736172 		.ascii	"usart1_pckt_ready\000"
 4378      74315F70 
 4378      636B745F 
 4378      72656164 
 4378      7900
 4379              	.LASF34:
 4380 0294 4952516E 		.ascii	"IRQn_Type\000"
 4380      5F547970 
 4380      6500
 4381              	.LASF113:
 4382 029e 74696D65 		.ascii	"timer_reportar\000"
 4382      725F7265 
 4382      706F7274 
 4382      617200
 4383              	.LASF32:
 4384 02ad 55534152 		.ascii	"USART2_IRQn\000"
 4384      54325F49 
 4384      52516E00 
 4385              	.LASF63:
 4386 02b9 43505549 		.ascii	"CPUID\000"
 4386      4400
 4387              	.LASF167:
 4388 02bf 74745F74 		.ascii	"tt_take_photo_sample\000"
 4388      616B655F 
 4388      70686F74 
 4388      6F5F7361 
 4388      6D706C65 
 4389              	.LASF128:
 4390 02d4 67736D5F 		.ascii	"gsm_state_disconnected\000"
 4390      73746174 
 4390      655F6469 
 4390      73636F6E 
 4390      6E656374 
 4391              	.LASF165:
 4392 02eb 74696D65 		.ascii	"timer_rep\000"
 4392      725F7265 
 4392      7000
 4393              	.LASF202:
 4394 02f5 53797354 		.ascii	"SysTick_Config\000"
 4394      69636B5F 
 4394      436F6E66 
 4394      696700
 4395              	.LASF76:
 4396 0304 534D5052 		.ascii	"SMPR\000"
 4396      00
 4397              	.LASF90:
 4398 0309 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4398      5A45524F 
 4398      5F435552 
 4398      52454E54 
 4398      00
 4399              	.LASF176:
 4400 031a 75736172 		.ascii	"usart1_have_data\000"
 4400      74315F68 
 4400      6176655F 
ARM GAS  /tmp/ccI8cyDB.s 			page 123


 4400      64617461 
 4400      00
 4401              	.LASF82:
 4402 032b 50555044 		.ascii	"PUPDR\000"
 4402      5200
 4403              	.LASF133:
 4404 0331 7469636B 		.ascii	"ticks\000"
 4404      7300
 4405              	.LASF114:
 4406 0337 64756D6D 		.ascii	"dummy1\000"
 4406      793100
 4407              	.LASF118:
 4408 033e 67736D5F 		.ascii	"gsm_state_verify_fully_func\000"
 4408      73746174 
 4408      655F7665 
 4408      72696679 
 4408      5F66756C 
 4409              	.LASF87:
 4410 035a 63686172 		.ascii	"char\000"
 4410      00
 4411              	.LASF130:
 4412 035f 67736D5F 		.ascii	"gsm_state_stop_wait\000"
 4412      73746174 
 4412      655F7374 
 4412      6F705F77 
 4412      61697400 
 4413              	.LASF157:
 4414 0373 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4414      45524154 
 4414      5552455F 
 4414      56616C75 
 4414      6500
 4415              	.LASF65:
 4416 0385 41495243 		.ascii	"AIRCR\000"
 4416      5200
 4417              	.LASF164:
 4418 038b 74616B65 		.ascii	"take_temp_sample\000"
 4418      5F74656D 
 4418      705F7361 
 4418      6D706C65 
 4418      00
 4419              	.LASF21:
 4420 039c 54494D33 		.ascii	"TIM3_IRQn\000"
 4420      5F495251 
 4420      6E00
 4421              	.LASF14:
 4422 03a6 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4422      5F436861 
 4422      6E6E656C 
 4422      315F4952 
 4422      516E00
 4423              	.LASF112:
 4424 03b9 6163756D 		.ascii	"acumm_w2s_index\000"
 4424      6D5F7732 
 4424      735F696E 
 4424      64657800 
 4425              	.LASF111:
ARM GAS  /tmp/ccI8cyDB.s 			page 124


 4426 03c9 6163756D 		.ascii	"acumm_w2s\000"
 4426      6D5F7732 
 4426      7300
 4427              	.LASF135:
 4428 03d3 62797465 		.ascii	"bytes_read\000"
 4428      735F7265 
 4428      616400
 4429              	.LASF98:
 4430 03de 6D61696E 		.ascii	"main_state_t\000"
 4430      5F737461 
 4430      74655F74 
 4430      00
 4431              	.LASF24:
 4432 03eb 54494D31 		.ascii	"TIM15_IRQn\000"
 4432      355F4952 
 4432      516E00
 4433              	.LASF48:
 4434 03f6 75696E74 		.ascii	"uint8_t\000"
 4434      385F7400 
 4435              	.LASF96:
 4436 03fe 57454C43 		.ascii	"WELCOME_GSM\000"
 4436      4F4D455F 
 4436      47534D00 
 4437              	.LASF178:
 4438 040a 75736172 		.ascii	"usart2_mini_timeout\000"
 4438      74325F6D 
 4438      696E695F 
 4438      74696D65 
 4438      6F757400 
 4439              	.LASF162:
 4440 041e 74783162 		.ascii	"tx1buff\000"
 4440      75666600 
 4441              	.LASF181:
 4442 0426 75736172 		.ascii	"usart2_pckt_bytes\000"
 4442      74325F70 
 4442      636B745F 
 4442      62797465 
 4442      7300
 4443              	.LASF168:
 4444 0438 74745F72 		.ascii	"tt_relay_on_off\000"
 4444      656C6179 
 4444      5F6F6E5F 
 4444      6F666600 
 4445              	.LASF191:
 4446 0448 73656373 		.ascii	"secs\000"
 4446      00
 4447              	.LASF97:
 4448 044d 4C414D50 		.ascii	"LAMP_ON\000"
 4448      5F4F4E00 
 4449              	.LASF119:
 4450 0455 67736D5F 		.ascii	"gsm_state_wait_reg\000"
 4450      73746174 
 4450      655F7761 
 4450      69745F72 
 4450      656700
 4451              	.LASF78:
 4452 0468 4144435F 		.ascii	"ADC_TypeDef\000"
ARM GAS  /tmp/ccI8cyDB.s 			page 125


 4452      54797065 
 4452      44656600 
 4453              	.LASF45:
 4454 0474 6C6F6E67 		.ascii	"long long int\000"
 4454      206C6F6E 
 4454      6720696E 
 4454      7400
 4455              	.LASF5:
 4456 0482 57574447 		.ascii	"WWDG_IRQn\000"
 4456      5F495251 
 4456      6E00
 4457              	.LASF67:
 4458 048c 53484353 		.ascii	"SHCSR\000"
 4458      5200
 4459              	.LASF174:
 4460 0492 75736172 		.ascii	"usart1_mini_timeout\000"
 4460      74315F6D 
 4460      696E695F 
 4460      74696D65 
 4460      6F757400 
 4461              	.LASF94:
 4462 04a6 53544152 		.ascii	"START_GSM\000"
 4462      545F4753 
 4462      4D00
 4463              	.LASF144:
 4464 04b0 73686F77 		.ascii	"show_power\000"
 4464      5F706F77 
 4464      657200
 4465              	.LASF169:
 4466 04bb 73617665 		.ascii	"saved_mode\000"
 4466      645F6D6F 
 4466      646500
 4467              	.LASF200:
 4468 04c6 70617261 		.ascii	"parameters\000"
 4468      6D657465 
 4468      727300
 4469              	.LASF166:
 4470 04d1 74696D65 		.ascii	"timer_relay\000"
 4470      725F7265 
 4470      6C617900 
 4471              	.LASF88:
 4472 04dd 4D41494E 		.ascii	"MAIN_INIT\000"
 4472      5F494E49 
 4472      5400
 4473              	.LASF95:
 4474 04e7 434F4E46 		.ascii	"CONFIG_GSM\000"
 4474      49475F47 
 4474      534D00
 4475              	.LASF139:
 4476 04f2 6C617374 		.ascii	"last_power\000"
 4476      5F706F77 
 4476      657200
 4477              	.LASF184:
 4478 04fd 73686F77 		.ascii	"show_power_index\000"
 4478      5F706F77 
 4478      65725F69 
 4478      6E646578 
ARM GAS  /tmp/ccI8cyDB.s 			page 126


 4478      00
 4479              	.LASF173:
 4480 050e 7A65726F 		.ascii	"zero_current\000"
 4480      5F637572 
 4480      72656E74 
 4480      00
 4481              	.LASF13:
 4482 051b 54535F49 		.ascii	"TS_IRQn\000"
 4482      52516E00 
 4483              	.LASF18:
 4484 0523 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4484      5F42524B 
 4484      5F55505F 
 4484      5452475F 
 4484      434F4D5F 
 4485              	.LASF155:
 4486 053c 74656D70 		.ascii	"tempbuff\000"
 4486      62756666 
 4486      00
 4487              	.LASF201:
 4488 0545 4E564943 		.ascii	"NVIC_SetPriority\000"
 4488      5F536574 
 4488      5072696F 
 4488      72697479 
 4488      00
 4489              	.LASF6:
 4490 0556 5056445F 		.ascii	"PVD_IRQn\000"
 4490      4952516E 
 4490      00
 4491              	.LASF74:
 4492 055f 43464752 		.ascii	"CFGR1\000"
 4492      3100
 4493              	.LASF75:
 4494 0565 43464752 		.ascii	"CFGR2\000"
 4494      3200
 4495              	.LASF58:
 4496 056b 49435052 		.ascii	"ICPR\000"
 4496      00
 4497              	.LASF17:
 4498 0570 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4498      5F434F4D 
 4498      505F4952 
 4498      516E00
 4499              	.LASF149:
 4500 057f 636F756E 		.ascii	"counters_mode\000"
 4500      74657273 
 4500      5F6D6F64 
 4500      6500
 4501              	.LASF81:
 4502 058d 4F535045 		.ascii	"OSPEEDR\000"
 4502      45445200 
 4503              	.LASF73:
 4504 0595 53797354 		.ascii	"SysTick_Type\000"
 4504      69636B5F 
 4504      54797065 
 4504      00
 4505              	.LASF86:
ARM GAS  /tmp/ccI8cyDB.s 			page 127


 4506 05a2 6C6F6E67 		.ascii	"long double\000"
 4506      20646F75 
 4506      626C6500 
 4507              	.LASF49:
 4508 05ae 75696E74 		.ascii	"uint16_t\000"
 4508      31365F74 
 4508      00
 4509              	.LASF182:
 4510 05b7 62756666 		.ascii	"buffUARTGSMrx2\000"
 4510      55415254 
 4510      47534D72 
 4510      783200
 4511              	.LASF131:
 4512 05c6 4952516E 		.ascii	"IRQn\000"
 4512      00
 4513              	.LASF185:
 4514 05cb 67736D4E 		.ascii	"gsmNUM\000"
 4514      554D00
 4515              	.LASF107:
 4516 05d2 6E756D5F 		.ascii	"num_reportar\000"
 4516      7265706F 
 4516      72746172 
 4516      00
 4517              	.LASF7:
 4518 05df 5254435F 		.ascii	"RTC_IRQn\000"
 4518      4952516E 
 4518      00
 4519              	.LASF53:
 4520 05e8 52455345 		.ascii	"RESERVED0\000"
 4520      52564544 
 4520      3000
 4521              	.LASF66:
 4522 05f2 52455345 		.ascii	"RESERVED1\000"
 4522      52564544 
 4522      3100
 4523              	.LASF57:
 4524 05fc 52455345 		.ascii	"RESERVED2\000"
 4524      52564544 
 4524      3200
 4525              	.LASF59:
 4526 0606 52455345 		.ascii	"RESERVED3\000"
 4526      52564544 
 4526      3300
 4527              	.LASF60:
 4528 0610 52455345 		.ascii	"RESERVED4\000"
 4528      52564544 
 4528      3400
 4529              	.LASF38:
 4530 061a 73686F72 		.ascii	"short int\000"
 4530      7420696E 
 4530      7400
 4531              	.LASF42:
 4532 0624 6C6F6E67 		.ascii	"long int\000"
 4532      20696E74 
 4532      00
 4533              	.LASF31:
 4534 062d 55534152 		.ascii	"USART1_IRQn\000"
ARM GAS  /tmp/ccI8cyDB.s 			page 128


 4534      54315F49 
 4534      52516E00 
 4535              	.LASF117:
 4536 0639 67736D5F 		.ascii	"gsm_state_verify_at\000"
 4536      73746174 
 4536      655F7665 
 4536      72696679 
 4536      5F617400 
 4537              	.LASF0:
 4538 064d 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4538      61736B61 
 4538      626C6549 
 4538      6E745F49 
 4538      52516E00 
 4539              	.LASF132:
 4540 0661 7072696F 		.ascii	"priority\000"
 4540      72697479 
 4540      00
 4541              	.LASF19:
 4542 066a 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4542      5F43435F 
 4542      4952516E 
 4542      00
 4543              	.LASF80:
 4544 0677 4F545950 		.ascii	"OTYPER\000"
 4544      455200
 4545              	.LASF187:
 4546 067e 77616974 		.ascii	"wait_ms_var\000"
 4546      5F6D735F 
 4546      76617200 
 4547              	.LASF103:
 4548 068a 6D656173 		.ascii	"meas_reporting0\000"
 4548      5F726570 
 4548      6F727469 
 4548      6E673000 
 4549              	.LASF26:
 4550 069a 54494D31 		.ascii	"TIM17_IRQn\000"
 4550      375F4952 
 4550      516E00
 4551              	.LASF89:
 4552 06a5 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4552      48524F5F 
 4552      41444300 
 4553              	.LASF16:
 4554 06b1 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4554      5F436861 
 4554      6E6E656C 
 4554      345F355F 
 4554      4952516E 
 4555              	.LASF186:
 4556 06c6 67736D4D 		.ascii	"gsmMSG\000"
 4556      534700
 4557              	.LASF192:
 4558 06cd 686F7572 		.ascii	"hours\000"
 4558      7300
 4559              	.LASF35:
 4560 06d3 5F5F7569 		.ascii	"__uint8_t\000"
ARM GAS  /tmp/ccI8cyDB.s 			page 129


 4560      6E74385F 
 4560      7400
 4561              	.LASF62:
 4562 06dd 4E564943 		.ascii	"NVIC_Type\000"
 4562      5F547970 
 4562      6500
 4563              	.LASF69:
 4564 06e7 5343425F 		.ascii	"SCB_Type\000"
 4564      54797065 
 4564      00
 4565              	.LASF85:
 4566 06f0 4750494F 		.ascii	"GPIO_TypeDef\000"
 4566      5F547970 
 4566      65446566 
 4566      00
 4567              	.LASF101:
 4568 06fd 6D656173 		.ascii	"meas_init\000"
 4568      5F696E69 
 4568      7400
 4569              	.LASF147:
 4570 0707 73656E64 		.ascii	"sended\000"
 4570      656400
 4571              	.LASF4:
 4572 070e 53797354 		.ascii	"SysTick_IRQn\000"
 4572      69636B5F 
 4572      4952516E 
 4572      00
 4573              	.LASF33:
 4574 071b 4345435F 		.ascii	"CEC_IRQn\000"
 4574      4952516E 
 4574      00
 4575              	.LASF61:
 4576 0724 73697A65 		.ascii	"sizetype\000"
 4576      74797065 
 4576      00
 4577              	.LASF64:
 4578 072d 49435352 		.ascii	"ICSR\000"
 4578      00
 4579              	.LASF28:
 4580 0732 49324332 		.ascii	"I2C2_IRQn\000"
 4580      5F495251 
 4580      6E00
 4581              	.LASF44:
 4582 073c 6C6F6E67 		.ascii	"long unsigned int\000"
 4582      20756E73 
 4582      69676E65 
 4582      6420696E 
 4582      7400
 4583              	.LASF20:
 4584 074e 54494D32 		.ascii	"TIM2_IRQn\000"
 4584      5F495251 
 4584      6E00
 4585              	.LASF158:
 4586 0758 50524553 		.ascii	"PRESSURE_Value\000"
 4586      53555245 
 4586      5F56616C 
 4586      756500
ARM GAS  /tmp/ccI8cyDB.s 			page 130


 4587              	.LASF199:
 4588 0767 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4588      652F6D65 
 4588      642F446F 
 4588      63756D65 
 4588      6E74732F 
 4589 079a 6100     		.ascii	"a\000"
 4590              	.LASF156:
 4591 079c 48554D49 		.ascii	"HUMIDITY_Value\000"
 4591      44495459 
 4591      5F56616C 
 4591      756500
 4592              	.LASF50:
 4593 07ab 696E7433 		.ascii	"int32_t\000"
 4593      325F7400 
 4594              	.LASF194:
 4595 07b3 706F7765 		.ascii	"power_vect\000"
 4595      725F7665 
 4595      637400
 4596              	.LASF171:
 4597 07be 6164635F 		.ascii	"adc_ch\000"
 4597      636800
 4598              	.LASF23:
 4599 07c5 54494D31 		.ascii	"TIM14_IRQn\000"
 4599      345F4952 
 4599      516E00
 4600              	.LASF15:
 4601 07d0 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4601      5F436861 
 4601      6E6E656C 
 4601      325F335F 
 4601      4952516E 
 4602              	.LASF148:
 4603 07e5 6C616D70 		.ascii	"lamp_on_state\000"
 4603      5F6F6E5F 
 4603      73746174 
 4603      6500
 4604              	.LASF22:
 4605 07f3 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4605      5F444143 
 4605      5F495251 
 4605      6E00
 4606              	.LASF37:
 4607 0801 756E7369 		.ascii	"unsigned char\000"
 4607      676E6564 
 4607      20636861 
 4607      7200
 4608              	.LASF93:
 4609 080f 4C414D50 		.ascii	"LAMP_OFF\000"
 4609      5F4F4646 
 4609      00
 4610              	.LASF43:
 4611 0818 5F5F7569 		.ascii	"__uint32_t\000"
 4611      6E743332 
 4611      5F7400
 4612              	.LASF170:
 4613 0823 73656E64 		.ascii	"send_energy\000"
ARM GAS  /tmp/ccI8cyDB.s 			page 131


 4613      5F656E65 
 4613      72677900 
 4614              	.LASF106:
 4615 082f 6C616D70 		.ascii	"lamp_on_state_t\000"
 4615      5F6F6E5F 
 4615      73746174 
 4615      655F7400 
 4616              	.LASF127:
 4617 083f 67736D5F 		.ascii	"gsm_state_connected\000"
 4617      73746174 
 4617      655F636F 
 4617      6E6E6563 
 4617      74656400 
 4618              	.LASF136:
 4619 0853 6E656564 		.ascii	"need_ack\000"
 4619      5F61636B 
 4619      00
 4620              	.LASF120:
 4621 085c 67736D5F 		.ascii	"gsm_state_verify_reg\000"
 4621      73746174 
 4621      655F7665 
 4621      72696679 
 4621      5F726567 
 4622              	.LASF126:
 4623 0871 67736D5F 		.ascii	"gsm_state_connecting\000"
 4623      73746174 
 4623      655F636F 
 4623      6E6E6563 
 4623      74696E67 
 4624              	.LASF179:
 4625 0886 75736172 		.ascii	"usart2_pckt_ready\000"
 4625      74325F70 
 4625      636B745F 
 4625      72656164 
 4625      7900
 4626              	.LASF205:
 4627 0898 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4627      6E674465 
 4627      6C61795F 
 4627      44656372 
 4627      656D656E 
 4628              	.LASF54:
 4629 08ae 49434552 		.ascii	"ICER\000"
 4629      00
 4630              	.LASF152:
 4631 08b3 6F6E655F 		.ascii	"one_to_ten\000"
 4631      746F5F74 
 4631      656E00
 4632              	.LASF30:
 4633 08be 53504932 		.ascii	"SPI2_IRQn\000"
 4633      5F495251 
 4633      6E00
 4634              	.LASF123:
 4635 08c8 67736D5F 		.ascii	"gsm_state_sending_sms\000"
 4635      73746174 
 4635      655F7365 
 4635      6E64696E 
ARM GAS  /tmp/ccI8cyDB.s 			page 132


 4635      675F736D 
 4636              	.LASF204:
 4637 08de 70726570 		.ascii	"prepare_json_pkt\000"
 4637      6172655F 
 4637      6A736F6E 
 4637      5F706B74 
 4637      00
 4638              	.LASF138:
 4639 08ef 706F7765 		.ascii	"power\000"
 4639      7200
 4640              	.LASF124:
 4641 08f5 67736D5F 		.ascii	"gsm_state_command_answer\000"
 4641      73746174 
 4641      655F636F 
 4641      6D6D616E 
 4641      645F616E 
 4642              	.LASF115:
 4643 090e 70617261 		.ascii	"parameters_typedef\000"
 4643      6D657465 
 4643      72735F74 
 4643      79706564 
 4643      656600
 4644              	.LASF36:
 4645 0921 7369676E 		.ascii	"signed char\000"
 4645      65642063 
 4645      68617200 
 4646              	.LASF198:
 4647 092d 7372632F 		.ascii	"src/main.c\000"
 4647      6D61696E 
 4647      2E6300
 4648              	.LASF40:
 4649 0938 73686F72 		.ascii	"short unsigned int\000"
 4649      7420756E 
 4649      7369676E 
 4649      65642069 
 4649      6E7400
 4650              	.LASF197:
 4651 094b 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4651      43313120 
 4651      352E322E 
 4651      31203230 
 4651      31353132 
 4652 097e 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4652      20726576 
 4652      6973696F 
 4652      6E203233 
 4652      31383438 
 4653 09b1 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4653      662D3220 
 4653      2D4F3020 
 4653      2D666F6D 
 4653      69742D66 
 4654 09e4 66756E63 		.ascii	"function-sections\000"
 4654      74696F6E 
 4654      2D736563 
 4654      74696F6E 
 4654      7300
ARM GAS  /tmp/ccI8cyDB.s 			page 133


 4655              	.LASF203:
 4656 09f6 6D61696E 		.ascii	"main\000"
 4656      00
 4657              	.LASF1:
 4658 09fb 48617264 		.ascii	"HardFault_IRQn\000"
 4658      4661756C 
 4658      745F4952 
 4658      516E00
 4659              	.LASF142:
 4660 0a0a 6163756D 		.ascii	"acum_secs\000"
 4660      5F736563 
 4660      7300
 4661              	.LASF56:
 4662 0a14 49535052 		.ascii	"ISPR\000"
 4662      00
 4663              	.LASF137:
 4664 0a19 72657370 		.ascii	"resp\000"
 4664      00
 4665              	.LASF109:
 4666 0a1e 6E756D5F 		.ascii	"num_propio\000"
 4666      70726F70 
 4666      696F00
 4667              	.LASF172:
 4668 0a29 7365715F 		.ascii	"seq_ready\000"
 4668      72656164 
 4668      7900
 4669              	.LASF195:
 4670 0a33 7674656D 		.ascii	"vtemp\000"
 4670      7000
 4671              	.LASF102:
 4672 0a39 6D656173 		.ascii	"meas_meas\000"
 4672      5F6D6561 
 4672      7300
 4673              	.LASF188:
 4674 0a43 74696D65 		.ascii	"timer_standby\000"
 4674      725F7374 
 4674      616E6462 
 4674      7900
 4675              	.LASF134:
 4676 0a51 62797465 		.ascii	"bytes_remain\000"
 4676      735F7265 
 4676      6D61696E 
 4676      00
 4677              	.LASF84:
 4678 0a5e 4C434B52 		.ascii	"LCKR\000"
 4678      00
 4679              	.LASF70:
 4680 0a63 4354524C 		.ascii	"CTRL\000"
 4680      00
 4681              	.LASF146:
 4682 0a68 7265706F 		.ascii	"reportar_SMS\000"
 4682      72746172 
 4682      5F534D53 
 4682      00
 4683              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccI8cyDB.s 			page 134


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccI8cyDB.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccI8cyDB.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccI8cyDB.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccI8cyDB.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccI8cyDB.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccI8cyDB.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/ccI8cyDB.s:277    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccI8cyDB.s:274    .bss.take_temp_sample:00000000 $d
     /tmp/ccI8cyDB.s:284    .bss.timer_rep:00000000 timer_rep
     /tmp/ccI8cyDB.s:281    .bss.timer_rep:00000000 $d
     /tmp/ccI8cyDB.s:291    .bss.timer_relay:00000000 timer_relay
     /tmp/ccI8cyDB.s:288    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
     /tmp/ccI8cyDB.s:300    .bss.send_energy:00000000 send_energy
     /tmp/ccI8cyDB.s:301    .bss.send_energy:00000000 $d
                            *COM*:00000006 adc_ch
     /tmp/ccI8cyDB.s:307    .bss.seq_ready:00000000 seq_ready
     /tmp/ccI8cyDB.s:308    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:00000054 param_struct
     /tmp/ccI8cyDB.s:324    .bss.show_power_index:00000000 show_power_index
     /tmp/ccI8cyDB.s:321    .bss.show_power_index:00000000 $d
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/ccI8cyDB.s:333    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccI8cyDB.s:330    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 timer_meas
     /tmp/ccI8cyDB.s:343    .bss.secs:00000000 secs
     /tmp/ccI8cyDB.s:340    .bss.secs:00000000 $d
     /tmp/ccI8cyDB.s:349    .bss.hours:00000000 hours
     /tmp/ccI8cyDB.s:350    .bss.hours:00000000 $d
     /tmp/ccI8cyDB.s:355    .bss.minutes:00000000 minutes
     /tmp/ccI8cyDB.s:356    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccI8cyDB.s:361    .rodata:00000000 $d
     /tmp/ccI8cyDB.s:414    .text.main:00000000 $t
     /tmp/ccI8cyDB.s:419    .text.main:00000000 main
ARM GAS  /tmp/ccI8cyDB.s 			page 135


     /tmp/ccI8cyDB.s:744    .rodata.main:00000000 $d
     /tmp/ccI8cyDB.s:1020   .text.main:000003ac $d
     /tmp/ccI8cyDB.s:1046   .text.main:0000040c $t
     /tmp/ccI8cyDB.s:1579   .text.main:00000750 $d
     /tmp/ccI8cyDB.s:1615   .text.prepare_json_pkt:00000000 $t
     /tmp/ccI8cyDB.s:1620   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccI8cyDB.s:1712   .text.prepare_json_pkt:0000009c $d
     /tmp/ccI8cyDB.s:1721   .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccI8cyDB.s:1726   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccI8cyDB.s:1864   .text.TimingDelay_Decrement:000000cc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
GPIO_Config
strncpy
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
FuncsGSMStateAsk
FuncsGSMCommandAnswer
strlen
strcat
memcpy
FuncsGSMSendSMS
GetPhoto
RelayOn
GetHysteresis
RelayOff
GetNew1to10
ShowPower
GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
UpdateVGrid
UpdateIGrid
UpdateRelay
UpdatePhotoTransistor
FuncsGSM
sprintf
GSMTimeoutCounters
