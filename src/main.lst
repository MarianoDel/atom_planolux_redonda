ARM GAS  /tmp/ccGoSbLI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccGoSbLI.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccGoSbLI.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccGoSbLI.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccGoSbLI.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccGoSbLI.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccGoSbLI.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccGoSbLI.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccGoSbLI.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccGoSbLI.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccGoSbLI.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccGoSbLI.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccGoSbLI.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccGoSbLI.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccGoSbLI.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccGoSbLI.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccGoSbLI.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccGoSbLI.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7134,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7135, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7136, D.7135
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7136, D.7136
  92 0026 083B     		subs	r3, r3, #8	@ D.7136,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7136, D.7136,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7134,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7135, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7136, D.7135
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7136, D.7136
 101 0038 083B     		subs	r3, r3, #8	@ D.7136,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7136, D.7136,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7134, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7136, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7135, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7136, D.7135
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7136, D.7136
 114 0052 D200     		lsls	r2, r2, #3	@ D.7136, D.7136,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7137, D.7137, D.7136
 117 0058 0200     		movs	r2, r0	@ D.7137, D.7137
 118 005a D243     		mvns	r2, r2	@ D.7137, D.7137
 119 005c 1A40     		ands	r2, r3	@ D.7136, D.7136
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7136, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7136, D.7136
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7135, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7136, D.7135
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7136, D.7136
ARM GAS  /tmp/ccGoSbLI.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7136, D.7136,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7136, D.7136, D.7136
 133 0076 0300     		movs	r3, r0	@ D.7136, D.7136
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7136, D.7136
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7136,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7134, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7136, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7138,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7136, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7136, D.7136
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7136, D.7136,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7138,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7136, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7136, D.7136
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7136, D.7136,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7136, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7135, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7136, D.7135
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7136, D.7136
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7136, D.7136,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7137, D.7137, D.7136
 169 00b6 0100     		movs	r1, r0	@ D.7137, D.7137
 170 00b8 C943     		mvns	r1, r1	@ D.7137, D.7137
 171 00ba 1140     		ands	r1, r2	@ D.7136, D.7136
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7136, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7136, D.7136
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7135, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7136, D.7135
ARM GAS  /tmp/ccGoSbLI.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7136, D.7136
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7136, D.7136,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7136, D.7136, D.7136
 185 00d4 0200     		movs	r2, r0	@ D.7136, D.7136
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7136, D.7136
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7136, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccGoSbLI.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7139,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7140,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7141, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7141,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7141, _6->LOAD
ARM GAS  /tmp/ccGoSbLI.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7140,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7140,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7139,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.comm	mains_voltage_filtered,2,2
 273              		.global	take_temp_sample
 274              		.section	.bss.take_temp_sample,"aw",%nobits
 275              		.align	1
 276              		.type	take_temp_sample, %object
 277              		.size	take_temp_sample, 2
 278              	take_temp_sample:
 279 0000 0000     		.space	2
 280              		.global	timer_rep
 281              		.section	.bss.timer_rep,"aw",%nobits
 282              		.align	1
 283              		.type	timer_rep, %object
 284              		.size	timer_rep, 2
 285              	timer_rep:
 286 0000 0000     		.space	2
 287              		.global	timer_relay
ARM GAS  /tmp/ccGoSbLI.s 			page 23


 288              		.section	.bss.timer_relay,"aw",%nobits
 289              		.align	1
 290              		.type	timer_relay, %object
 291              		.size	timer_relay, 2
 292              	timer_relay:
 293 0000 0000     		.space	2
 294              		.comm	tt_take_photo_sample,2,2
 295              		.comm	tt_relay_on_off,2,2
 296              		.comm	saved_mode,1,1
 297              		.global	send_energy
 298              		.section	.bss.send_energy,"aw",%nobits
 299              		.type	send_energy, %object
 300              		.size	send_energy, 1
 301              	send_energy:
 302 0000 00       		.space	1
 303              		.comm	adc_ch,6,4
 304              		.global	seq_ready
 305              		.section	.bss.seq_ready,"aw",%nobits
 306              		.type	seq_ready, %object
 307              		.size	seq_ready, 1
 308              	seq_ready:
 309 0000 00       		.space	1
 310              		.comm	zero_current,2,2
 311              		.comm	usart1_mini_timeout,1,1
 312              		.comm	usart1_pckt_ready,1,1
 313              		.comm	usart1_have_data,1,1
 314              		.comm	usart1_pckt_bytes,1,1
 315              		.comm	usart2_mini_timeout,1,1
 316              		.comm	usart2_pckt_ready,1,1
 317              		.comm	usart2_have_data,1,1
 318              		.comm	usart2_pckt_bytes,1,1
 319              		.comm	param_struct,84,4
 320              		.global	show_power_index
 321              		.section	.bss.show_power_index,"aw",%nobits
 322              		.align	1
 323              		.type	show_power_index, %object
 324              		.size	show_power_index, 2
 325              	show_power_index:
 326 0000 0000     		.space	2
 327              		.comm	gsmNUM,20,4
 328              		.comm	gsmMSG,180,4
 329              		.global	wait_ms_var
 330              		.section	.bss.wait_ms_var,"aw",%nobits
 331              		.align	1
 332              		.type	wait_ms_var, %object
 333              		.size	wait_ms_var, 2
 334              	wait_ms_var:
 335 0000 0000     		.space	2
 336              		.comm	timer_standby,2,2
 337              		.comm	tcp_kalive_timer,2,2
 338              		.comm	timer_meas,1,1
 339              		.global	secs
 340              		.section	.bss.secs,"aw",%nobits
 341              		.align	1
 342              		.type	secs, %object
 343              		.size	secs, 2
 344              	secs:
ARM GAS  /tmp/ccGoSbLI.s 			page 24


 345 0000 0000     		.space	2
 346              		.global	hours
 347              		.section	.bss.hours,"aw",%nobits
 348              		.type	hours, %object
 349              		.size	hours, 1
 350              	hours:
 351 0000 00       		.space	1
 352              		.global	minutes
 353              		.section	.bss.minutes,"aw",%nobits
 354              		.type	minutes, %object
 355              		.size	minutes, 1
 356              	minutes:
 357 0000 00       		.space	1
 358              		.comm	power_vect,20,4
 359              		.comm	vtemp,34,4
 360              		.comm	vpote,34,4
 361              		.section	.rodata
 362              		.align	2
 363              	.LC1:
 364 0000 31313439 		.ascii	"1149867843\000"
 364      38363738 
 364      343300
 365 000b 00       		.align	2
 366              	.LC3:
 367 000c 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 367      726E6F20 
 367      506C6163 
 367      61205265 
 367      646F6E64 
 368 0031 000000   		.align	2
 369              	.LC5:
 370 0034 20204665 		.ascii	"  Features:\015\012\000"
 370      61747572 
 370      65733A0D 
 370      0A00
 371 0042 0000     		.align	2
 372              	.LC7:
 373 0044 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 373      67687420 
 373      48797374 
 373      65726573 
 373      69730D0A 
 374 0059 000000   		.align	2
 375              	.LC9:
 376 005c 20205379 		.ascii	"  Sync by ADC\015\012\000"
 376      6E632062 
 376      79204144 
 376      430D0A00 
 377              		.align	2
 378              	.LC11:
 379 006c 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 379      65732047 
 379      534D2066 
 379      6F722053 
 379      4D532064 
 380 0086 0000     		.align	2
 381              	.LC16:
ARM GAS  /tmp/ccGoSbLI.s 			page 25


 382 0088 47657474 		.ascii	"Getted\015\012\000"
 382      65640D0A 
 382      00
 383 0091 000000   		.align	2
 384              	.LC18:
 385 0094 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 385      696E6720 
 385      47534D20 
 385      53746172 
 385      74757020 
 386 00bb 00       		.align	2
 387              	.LC24:
 388 00bc 5052454E 		.ascii	"PRENDIDO\015\012\000"
 388      4449444F 
 388      0D0A00
 389 00c7 00       		.align	2
 390              	.LC26:
 391 00c8 5052454E 		.ascii	"PRENDIDO\000"
 391      4449444F 
 391      00
 392 00d1 000000   		.align	2
 393              	.LC32:
 394 00d4 41504147 		.ascii	"APAGADO\015\012\000"
 394      41444F0D 
 394      0A00
 395 00de 0000     		.align	2
 396              	.LC34:
 397 00e0 41504147 		.ascii	"APAGADO\000"
 397      41444F00 
 398              		.global	__aeabi_uidiv
 399              		.align	2
 400              	.LC38:
 401 00e8 4C4F5720 		.ascii	"LOW MAINS VOLTAGE\015\012\000"
 401      4D41494E 
 401      5320564F 
 401      4C544147 
 401      450D0A00 
 402              		.align	2
 403              	.LC40:
 404 00fc 53617665 		.ascii	"Saved OK!\015\012\000"
 404      64204F4B 
 404      210D0A00 
 405              		.align	2
 406              	.LC42:
 407 0108 4D656D20 		.ascii	"Mem Error!\015\012\000"
 407      4572726F 
 407      72210D0A 
 407      00
 408              		.section	.text.main,"ax",%progbits
 409              		.align	2
 410              		.global	main
 411              		.code	16
 412              		.thumb_func
 413              		.type	main, %function
 414              	main:
 415              	.LFB20:
 416              		.file 2 "src/main.c"
ARM GAS  /tmp/ccGoSbLI.s 			page 26


   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY) || (defined USE_ONLY_POWER_SENSE)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
ARM GAS  /tmp/ccGoSbLI.s 			page 27


  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals para filtros -------
  71:src/main.c    **** unsigned short mains_voltage_filtered;
  72:src/main.c    **** //
  73:src/main.c    **** //
  74:src/main.c    **** // volatile unsigned short scroll1_timer = 0;
  75:src/main.c    **** // volatile unsigned short scroll2_timer = 0;
  76:src/main.c    **** //
  77:src/main.c    **** // volatile unsigned short standalone_timer;
  78:src/main.c    **** // volatile unsigned short standalone_enable_menu_timer;
  79:src/main.c    **** // //volatile unsigned short standalone_menu_timer;
  80:src/main.c    **** // volatile unsigned char grouped_master_timeout_timer;
  81:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  82:src/main.c    **** unsigned short timer_rep = 0;
  83:src/main.c    **** // volatile unsigned char timer_wifi_bright = 0;
  84:src/main.c    **** 
  85:src/main.c    **** #ifdef USE_REDONDA_BASIC
  86:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  87:src/main.c    **** 
  88:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  89:src/main.c    **** volatile unsigned short tt_relay_on_off;
  90:src/main.c    **** #endif
  91:src/main.c    **** 
  92:src/main.c    **** 
  93:src/main.c    **** unsigned char saved_mode;
  94:src/main.c    **** 
  95:src/main.c    **** 
  96:src/main.c    **** unsigned char send_energy = 0;
  97:src/main.c    **** // ------- Externals del o para el ADC -------
  98:src/main.c    **** #ifdef ADC_WITH_INT
  99:src/main.c    **** volatile unsigned short adc_ch[3];
 100:src/main.c    **** volatile unsigned char seq_ready = 0;
 101:src/main.c    **** unsigned short zero_current;
 102:src/main.c    **** #endif
 103:src/main.c    **** 
 104:src/main.c    **** // ------- Externals del GPS & GSM -------
 105:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 106:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 107:src/main.c    **** volatile unsigned char usart1_have_data;
 108:src/main.c    **** unsigned char usart1_pckt_bytes;
 109:src/main.c    **** 
 110:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 111:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 112:src/main.c    **** #define gps_have_data		usart1_have_data
 113:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 114:src/main.c    **** 
ARM GAS  /tmp/ccGoSbLI.s 			page 28


 115:src/main.c    **** #ifdef USE_GPS
 116:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 117:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 118:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 119:src/main.c    **** volatile unsigned char usart2_have_data;
 120:src/main.c    **** unsigned char usart2_pckt_bytes;
 121:src/main.c    **** 
 122:src/main.c    **** #endif
 123:src/main.c    **** 
 124:src/main.c    **** // ------- Externals del GSM -------
 125:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 126:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 127:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 128:src/main.c    **** #define gsm_have_data		usart1_have_data
 129:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 130:src/main.c    **** 
 131:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 132:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 133:src/main.c    **** volatile unsigned char usart2_have_data;
 134:src/main.c    **** unsigned char usart2_pckt_bytes;
 135:src/main.c    **** 
 136:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 137:src/main.c    **** #endif
 138:src/main.c    **** 
 139:src/main.c    **** parameters_typedef param_struct;
 140:src/main.c    **** 
 141:src/main.c    **** //--- VARIABLES GLOBALES ---//
 142:src/main.c    **** unsigned short show_power_index = 0;	//lo uso como timer sincronizado con la mediciontick 2 secs.
 143:src/main.c    **** 
 144:src/main.c    **** //para las mediciones
 145:src/main.c    **** // unsigned int power_2secs_acum = 0;
 146:src/main.c    **** // unsigned char power_2secs_index = 0;
 147:src/main.c    **** // unsigned short power_minutes = 0;
 148:src/main.c    **** // unsigned char power_minutes_index = 0;
 149:src/main.c    **** // unsigned short power_hours = 0;
 150:src/main.c    **** 
 151:src/main.c    **** //para los msjs GSM
 152:src/main.c    **** char gsmNUM [20];
 153:src/main.c    **** char gsmMSG [180];
 154:src/main.c    **** 
 155:src/main.c    **** 
 156:src/main.c    **** 
 157:src/main.c    **** 
 158:src/main.c    **** 
 159:src/main.c    **** 
 160:src/main.c    **** // ------- de los timers -------
 161:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 162:src/main.c    **** volatile unsigned short timer_standby;
 163:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 164:src/main.c    **** //volatile unsigned char display_timer;
 165:src/main.c    **** volatile unsigned char timer_meas;
 166:src/main.c    **** 
 167:src/main.c    **** //volatile unsigned char door_filter;
 168:src/main.c    **** //volatile unsigned char take_sample;
 169:src/main.c    **** //volatile unsigned char move_relay;
 170:src/main.c    **** #ifdef WITH_HYST
 171:src/main.c    **** volatile unsigned short secs = 0;
ARM GAS  /tmp/ccGoSbLI.s 			page 29


 172:src/main.c    **** volatile unsigned char hours = 0;
 173:src/main.c    **** volatile unsigned char minutes = 0;
 174:src/main.c    **** #endif
 175:src/main.c    **** 
 176:src/main.c    **** #define SIZEOF_POWER_VECT		10
 177:src/main.c    **** 
 178:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 179:src/main.c    **** 
 180:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 181:src/main.c    **** void TimingDelay_Decrement(void);
 182:src/main.c    **** 
 183:src/main.c    **** // ------- del DMX -------
 184:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 185:src/main.c    **** #define DMX_TIMEOUT	20
 186:src/main.c    **** 
 187:src/main.c    **** //--- FILTROS DE SENSORES ---//
 188:src/main.c    **** #define LARGO_FILTRO 16
 189:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 190:src/main.c    **** //#define LARGO_FILTRO 32
 191:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 192:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 193:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 194:src/main.c    **** 
 195:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 196:src/main.c    **** 
 197:src/main.c    **** 
 198:src/main.c    **** //--- Private Definitions ---//
 199:src/main.c    **** #define num_tel_rep		param_struct.num_reportar
 200:src/main.c    **** 
 201:src/main.c    **** 
 202:src/main.c    **** //-------------------------------------------//
 203:src/main.c    **** // @brief  Main program.
 204:src/main.c    **** // @param  None
 205:src/main.c    **** // @retval None
 206:src/main.c    **** //------------------------------------------//
 207:src/main.c    **** int main(void)
 208:src/main.c    **** {
 417              		.loc 2 208 0
 418              		.cfi_startproc
 419 0000 30B5     		push	{r4, r5, lr}	@
 420              	.LCFI4:
 421              		.cfi_def_cfa_offset 12
 422              		.cfi_offset 4, -12
 423              		.cfi_offset 5, -8
 424              		.cfi_offset 14, -4
 425 0002 A3B0     		sub	sp, sp, #140	@,,
 426              	.LCFI5:
 427              		.cfi_def_cfa_offset 152
 209:src/main.c    **** 	unsigned char i, ii;
 210:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 428              		.loc 2 210 0
 429 0004 6B23     		movs	r3, #107	@ tmp185,
 430 0006 6B44     		add	r3, r3, sp	@ tmp185,
 431 0008 0022     		movs	r2, #0	@ tmp186,
 432 000a 1A70     		strb	r2, [r3]	@ tmp187, need_ack
 211:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 433              		.loc 2 211 0
ARM GAS  /tmp/ccGoSbLI.s 			page 30


 434 000c 6A23     		movs	r3, #106	@ tmp188,
 435 000e 6B44     		add	r3, r3, sp	@ tmp188,
 436 0010 0022     		movs	r2, #0	@ tmp189,
 437 0012 1A70     		strb	r2, [r3]	@ tmp190, resp
 212:src/main.c    **** 	unsigned char need_to_save = 0;
 438              		.loc 2 212 0
 439 0014 8623     		movs	r3, #134	@ tmp191,
 440 0016 6B44     		add	r3, r3, sp	@ tmp191,
 441 0018 0022     		movs	r2, #0	@ tmp192,
 442 001a 1A70     		strb	r2, [r3]	@ tmp193, need_to_save
 213:src/main.c    **** 	// unsigned short wh_int, wh_dec;
 214:src/main.c    **** 	// float fcalc = 1.0;
 215:src/main.c    **** 	unsigned short power, last_power;
 216:src/main.c    **** 	unsigned int zero_current_loc = 0;
 443              		.loc 2 216 0
 444 001c 0023     		movs	r3, #0	@ tmp194,
 445 001e 1F93     		str	r3, [sp, #124]	@ tmp194, zero_current_loc
 217:src/main.c    **** 
 218:src/main.c    **** 	unsigned short acum_secs_index;
 219:src/main.c    **** 	unsigned int acum_secs, acum_hours;
 220:src/main.c    **** 	unsigned char show_power = 0;
 446              		.loc 2 220 0
 447 0020 6923     		movs	r3, #105	@ tmp195,
 448 0022 6B44     		add	r3, r3, sp	@ tmp195,
 449 0024 0022     		movs	r2, #0	@ tmp196,
 450 0026 1A70     		strb	r2, [r3]	@ tmp197, show_power
 221:src/main.c    **** 
 222:src/main.c    **** #if (defined USE_REDONDA_BASIC) || (defined USE_ONLY_POWER_SENSE)
 223:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 451              		.loc 2 223 0
 452 0028 6F23     		movs	r3, #111	@ tmp198,
 453 002a 6B44     		add	r3, r3, sp	@ tmp198,
 454 002c 0022     		movs	r2, #0	@ tmp199,
 455 002e 1A70     		strb	r2, [r3]	@ tmp200, main_state
 224:src/main.c    **** 	unsigned char reportar_SMS = 0;
 456              		.loc 2 224 0
 457 0030 1AAB     		add	r3, sp, #104	@ tmp201,,
 458 0032 0022     		movs	r2, #0	@ tmp202,
 459 0034 1A70     		strb	r2, [r3]	@ tmp203, reportar_SMS
 225:src/main.c    **** 	unsigned char sended = 0;
 460              		.loc 2 225 0
 461 0036 6723     		movs	r3, #103	@ tmp204,
 462 0038 6B44     		add	r3, r3, sp	@ tmp204,
 463 003a 0022     		movs	r2, #0	@ tmp205,
 464 003c 1A70     		strb	r2, [r3]	@ tmp206, sended
 226:src/main.c    **** 	lamp_on_state_t lamp_on_state = init_airplane0;
 465              		.loc 2 226 0
 466 003e 6E23     		movs	r3, #110	@ tmp207,
 467 0040 6B44     		add	r3, r3, sp	@ tmp207,
 468 0042 0022     		movs	r2, #0	@ tmp208,
 469 0044 1A70     		strb	r2, [r3]	@ tmp209, lamp_on_state
 227:src/main.c    **** 	unsigned char counters_mode = 0;
 470              		.loc 2 227 0
 471 0046 6D23     		movs	r3, #109	@ tmp210,
 472 0048 6B44     		add	r3, r3, sp	@ tmp210,
 473 004a 0022     		movs	r2, #0	@ tmp211,
 474 004c 1A70     		strb	r2, [r3]	@ tmp212, counters_mode
ARM GAS  /tmp/ccGoSbLI.s 			page 31


 228:src/main.c    **** 	unsigned char meas_end = 0;
 475              		.loc 2 228 0
 476 004e 1BAB     		add	r3, sp, #108	@ tmp213,,
 477 0050 0022     		movs	r2, #0	@ tmp214,
 478 0052 1A70     		strb	r2, [r3]	@ tmp215, meas_end
 229:src/main.c    **** 
 230:src/main.c    **** #ifdef WITH_HYST
 231:src/main.c    **** 	unsigned short hyst;
 232:src/main.c    **** #endif
 233:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 234:src/main.c    **** 	unsigned char one_to_ten;
 235:src/main.c    **** #endif
 236:src/main.c    **** 
 237:src/main.c    **** #else		//USE_REDONDA_BASIC
 238:src/main.c    **** 	unsigned char main_state = 0;
 239:src/main.c    **** #endif
 240:src/main.c    **** 	char s_lcd [100];		//lo agrando porque lo uso tambien para enviar SMS
 241:src/main.c    **** 	// enum TcpMessages tcp_msg = NONE_MSG;
 242:src/main.c    **** 	// unsigned char new_room = 0;
 243:src/main.c    **** 	// unsigned char new_lamp = 0;
 244:src/main.c    **** 	// unsigned char last_bright = 0;
 245:src/main.c    **** 	// unsigned char show_ldr = 0;
 246:src/main.c    **** 	// int dummy_resp = 0;
 247:src/main.c    **** 	// unsigned char pps_one = 0;
 248:src/main.c    **** 
 249:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 250:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 251:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 252:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 253:src/main.c    ****     //   system_stm32f0xx.c file
 254:src/main.c    **** 
 255:src/main.c    **** 	//GPIO Configuration.
 256:src/main.c    **** 	GPIO_Config();
 479              		.loc 2 256 0
 480 0054 FFF7FEFF 		bl	GPIO_Config	@
 257:src/main.c    **** 
 258:src/main.c    **** 
 259:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 260:src/main.c    **** 	if (SysTick_Config(48000))
 481              		.loc 2 260 0
 482 0058 D34B     		ldr	r3, .L80	@ tmp216,
 483 005a 1800     		movs	r0, r3	@, tmp216
 484 005c FFF7FEFF 		bl	SysTick_Config	@
 485 0060 031E     		subs	r3, r0, #0	@ D.7142,,
 486 0062 28D0     		beq	.L13	@,
 487              	.L18:
 261:src/main.c    **** 	{
 262:src/main.c    **** 		while (1)	/* Capture error */
 263:src/main.c    **** 		{
 264:src/main.c    **** 			if (LED)
 488              		.loc 2 264 0
 489 0064 9023     		movs	r3, #144	@ tmp657,
 490 0066 DB05     		lsls	r3, r3, #23	@ D.7143, tmp657,
 491 0068 9B8A     		ldrh	r3, [r3, #20]	@ tmp218,
 492 006a 9BB2     		uxth	r3, r3	@ D.7144, tmp218
 493 006c 1A00     		movs	r2, r3	@ D.7145, D.7144
 494 006e 8023     		movs	r3, #128	@ tmp658,
ARM GAS  /tmp/ccGoSbLI.s 			page 32


 495 0070 5B01     		lsls	r3, r3, #5	@ tmp219, tmp658,
 496 0072 1340     		ands	r3, r2	@ D.7145, D.7145
 497 0074 05D0     		beq	.L14	@,
 265:src/main.c    **** 				LED_OFF;
 498              		.loc 2 265 0
 499 0076 9023     		movs	r3, #144	@ tmp655,
 500 0078 DB05     		lsls	r3, r3, #23	@ D.7143, tmp655,
 501 007a 8022     		movs	r2, #128	@ tmp656,
 502 007c 5205     		lsls	r2, r2, #21	@ tmp220, tmp656,
 503 007e 9A61     		str	r2, [r3, #24]	@ tmp220, _120->BSRR
 504 0080 04E0     		b	.L15	@
 505              	.L14:
 266:src/main.c    **** 			else
 267:src/main.c    **** 				LED_ON;
 506              		.loc 2 267 0
 507 0082 9023     		movs	r3, #144	@ tmp653,
 508 0084 DB05     		lsls	r3, r3, #23	@ D.7143, tmp653,
 509 0086 8022     		movs	r2, #128	@ tmp654,
 510 0088 5201     		lsls	r2, r2, #5	@ tmp221, tmp654,
 511 008a 9A61     		str	r2, [r3, #24]	@ tmp221, _122->BSRR
 512              	.L15:
 268:src/main.c    **** 
 269:src/main.c    **** 			for (i = 0; i < 255; i++)
 513              		.loc 2 269 0
 514 008c 8723     		movs	r3, #135	@ tmp222,
 515 008e 6B44     		add	r3, r3, sp	@ tmp222,
 516 0090 0022     		movs	r2, #0	@ tmp223,
 517 0092 1A70     		strb	r2, [r3]	@ tmp224, i
 518 0094 09E0     		b	.L16	@
 519              	.L17:
 270:src/main.c    **** 			{
 271:src/main.c    **** 				asm (	"nop \n\t"
 520              		.loc 2 271 0 discriminator 3
 521              		.syntax divided
 522              	@ 271 "src/main.c" 1
 523 0096 C046     		nop 
 524 0098 C046     		nop 
 525 009a C046     		nop 
 526              		
 527              	@ 0 "" 2
 269:src/main.c    **** 			{
 528              		.loc 2 269 0 discriminator 3
 529              		.thumb
 530              		.syntax unified
 531 009c 8723     		movs	r3, #135	@ tmp225,
 532 009e 6B44     		add	r3, r3, sp	@ tmp225,
 533 00a0 1A78     		ldrb	r2, [r3]	@ D.7146, i
 534 00a2 8723     		movs	r3, #135	@ tmp226,
 535 00a4 6B44     		add	r3, r3, sp	@ tmp226,
 536 00a6 0132     		adds	r2, r2, #1	@ tmp227,
 537 00a8 1A70     		strb	r2, [r3]	@ tmp228, i
 538              	.L16:
 269:src/main.c    **** 			{
 539              		.loc 2 269 0 is_stmt 0 discriminator 1
 540 00aa 8723     		movs	r3, #135	@ tmp229,
 541 00ac 6B44     		add	r3, r3, sp	@ tmp229,
 542 00ae 1B78     		ldrb	r3, [r3]	@ tmp230, i
ARM GAS  /tmp/ccGoSbLI.s 			page 33


 543 00b0 FF2B     		cmp	r3, #255	@ tmp230,
 544 00b2 F0D1     		bne	.L17	@,
 272:src/main.c    **** 						"nop \n\t"
 273:src/main.c    **** 						"nop \n\t" );
 274:src/main.c    **** 			}
 275:src/main.c    **** 		}
 545              		.loc 2 275 0 is_stmt 1
 546 00b4 D6E7     		b	.L18	@
 547              	.L13:
 276:src/main.c    **** 	}
 277:src/main.c    **** 
 278:src/main.c    **** 
 279:src/main.c    **** 	//ADC Configuration
 280:src/main.c    **** //	AdcConfig();
 281:src/main.c    **** 
 282:src/main.c    **** 	//TIM Configuration.
 283:src/main.c    **** 	// TIM_3_Init();
 284:src/main.c    **** //	TIM_14_Init();
 285:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 286:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 287:src/main.c    **** 
 288:src/main.c    **** //	EXTIOff ();
 289:src/main.c    **** 
 290:src/main.c    **** 
 291:src/main.c    **** //		while (1)
 292:src/main.c    **** //		{
 293:src/main.c    **** //			PIN3_OFF;
 294:src/main.c    **** //			Wait_ms (10);
 295:src/main.c    **** //			PIN3_ON;
 296:src/main.c    **** //			Wait_ms (10);
 297:src/main.c    **** //		}
 298:src/main.c    **** 
 299:src/main.c    **** 	//--- Leo los parametros de memoria ---//
 300:src/main.c    **** #ifdef USE_REDONDA_BASIC
 301:src/main.c    **** 	param_struct.acumm_wh = ((parameters_typedef *) (unsigned int *) PAGE63)->acumm_wh;
 548              		.loc 2 301 0
 549 00b6 BD4B     		ldr	r3, .L80+4	@ D.7147,
 550 00b8 9A6C     		ldr	r2, [r3, #72]	@ D.7148, _127->acumm_wh
 551 00ba BD4B     		ldr	r3, .L80+8	@ tmp231,
 552 00bc 9A64     		str	r2, [r3, #72]	@ D.7148, param_struct.acumm_wh
 302:src/main.c    **** 	if (param_struct.acumm_wh != 0xFFFFFFFF)
 553              		.loc 2 302 0
 554 00be BC4B     		ldr	r3, .L80+8	@ tmp232,
 555 00c0 9B6C     		ldr	r3, [r3, #72]	@ D.7148, param_struct.acumm_wh
 556 00c2 0133     		adds	r3, r3, #1	@ tmp659, D.7148,
 557 00c4 04D0     		beq	.L19	@,
 303:src/main.c    **** 	{
 304:src/main.c    **** 		GetFlashConf (&param_struct);
 558              		.loc 2 304 0
 559 00c6 BA4B     		ldr	r3, .L80+8	@ tmp233,
 560 00c8 1800     		movs	r0, r3	@, tmp233
 561 00ca FFF7FEFF 		bl	GetFlashConf	@
 562 00ce 15E0     		b	.L20	@
 563              	.L19:
 305:src/main.c    **** 	}
 306:src/main.c    **** 	else
 307:src/main.c    **** 	{
ARM GAS  /tmp/ccGoSbLI.s 			page 34


 308:src/main.c    **** 		//memoria vacia
 309:src/main.c    **** 		param_struct.acumm_wh = 0;
 564              		.loc 2 309 0
 565 00d0 B74B     		ldr	r3, .L80+8	@ tmp234,
 566 00d2 0022     		movs	r2, #0	@ tmp235,
 567 00d4 9A64     		str	r2, [r3, #72]	@ tmp235, param_struct.acumm_wh
 310:src/main.c    **** 		param_struct.acumm_w2s = 0;
 568              		.loc 2 310 0
 569 00d6 B64B     		ldr	r3, .L80+8	@ tmp236,
 570 00d8 0022     		movs	r2, #0	@ tmp237,
 571 00da DA64     		str	r2, [r3, #76]	@ tmp237, param_struct.acumm_w2s
 311:src/main.c    **** 		param_struct.acumm_w2s_index = 0;
 572              		.loc 2 311 0
 573 00dc B44B     		ldr	r3, .L80+8	@ tmp238,
 574 00de 5022     		movs	r2, #80	@ tmp239,
 575 00e0 0021     		movs	r1, #0	@ tmp240,
 576 00e2 9952     		strh	r1, [r3, r2]	@ tmp241, param_struct.acumm_w2s_index
 312:src/main.c    **** 		param_struct.timer_reportar = 2;
 577              		.loc 2 312 0
 578 00e4 B24B     		ldr	r3, .L80+8	@ tmp242,
 579 00e6 5222     		movs	r2, #82	@ tmp243,
 580 00e8 0221     		movs	r1, #2	@ tmp244,
 581 00ea 9954     		strb	r1, [r3, r2]	@ tmp245, param_struct.timer_reportar
 313:src/main.c    **** 		//el timer a reportar esta n minutos, yo tengo tick cada 2 segundos
 314:src/main.c    **** 
 315:src/main.c    **** 		strcpy( param_struct.num_reportar, "1149867843");	//segunda sim de claro
 582              		.loc 2 315 0
 583 00ec B04B     		ldr	r3, .L80+8	@ tmp246,
 584 00ee B14A     		ldr	r2, .L80+12	@ tmp247,
 585 00f0 03CA     		ldmia	r2!, {r0, r1}	@ tmp249, tmp661, tmp660
 586 00f2 03C3     		stmia	r3!, {r0, r1}	@ tmp248, tmp661, tmp660
 587 00f4 1188     		ldrh	r1, [r2]	@ tmp250,
 588 00f6 1980     		strh	r1, [r3]	@ tmp250,
 589 00f8 9278     		ldrb	r2, [r2, #2]	@ tmp251,
 590 00fa 9A70     		strb	r2, [r3, #2]	@ tmp251,
 591              	.L20:
 316:src/main.c    **** 	}
 317:src/main.c    **** #endif
 318:src/main.c    **** 
 319:src/main.c    **** 
 320:src/main.c    **** 	//--- Welcome code ---//
 321:src/main.c    **** 	LED_OFF;
 592              		.loc 2 321 0
 593 00fc 9023     		movs	r3, #144	@ tmp647,
 594 00fe DB05     		lsls	r3, r3, #23	@ D.7143, tmp647,
 595 0100 8022     		movs	r2, #128	@ tmp648,
 596 0102 5205     		lsls	r2, r2, #21	@ tmp252, tmp648,
 597 0104 9A61     		str	r2, [r3, #24]	@ tmp252, _137->BSRR
 322:src/main.c    **** //	EN_GPS_OFF;
 323:src/main.c    **** 	EN_GPS_ON;
 598              		.loc 2 323 0
 599 0106 9023     		movs	r3, #144	@ tmp649,
 600 0108 DB05     		lsls	r3, r3, #23	@ D.7143, tmp649,
 601 010a 8022     		movs	r2, #128	@ tmp650,
 602 010c 1202     		lsls	r2, r2, #8	@ tmp253, tmp650,
 603 010e 9A61     		str	r2, [r3, #24]	@ tmp253, _139->BSRR
 324:src/main.c    **** 	//RELAY_ON;
ARM GAS  /tmp/ccGoSbLI.s 			page 35


 325:src/main.c    **** 	RELAY_OFF;
 604              		.loc 2 325 0
 605 0110 9023     		movs	r3, #144	@ tmp651,
 606 0112 DB05     		lsls	r3, r3, #23	@ D.7143, tmp651,
 607 0114 8022     		movs	r2, #128	@ tmp652,
 608 0116 1205     		lsls	r2, r2, #20	@ tmp254, tmp652,
 609 0118 9A61     		str	r2, [r3, #24]	@ tmp254, _141->BSRR
 326:src/main.c    **** 
 327:src/main.c    **** 	USART1Config();
 610              		.loc 2 327 0
 611 011a FFF7FEFF 		bl	USART1Config	@
 328:src/main.c    **** 	USART2Config();
 612              		.loc 2 328 0
 613 011e FFF7FEFF 		bl	USART2Config	@
 329:src/main.c    **** 
 330:src/main.c    **** 	EXTIOff();
 614              		.loc 2 330 0
 615 0122 FFF7FEFF 		bl	EXTIOff	@
 331:src/main.c    **** 
 332:src/main.c    **** 
 333:src/main.c    **** 
 334:src/main.c    **** //---------- Pruebas con GSM GATEWAY --------//
 335:src/main.c    **** #ifdef USE_GSM_GATEWAY
 336:src/main.c    **** 	LED_OFF;
 337:src/main.c    **** 	for (i = 0; i < 6; i++)
 338:src/main.c    **** 	{
 339:src/main.c    **** 		if (LED)
 340:src/main.c    **** 			LED_OFF;
 341:src/main.c    **** 		else
 342:src/main.c    **** 			LED_ON;
 343:src/main.c    **** 
 344:src/main.c    **** 		Wait_ms (300);
 345:src/main.c    **** 	}
 346:src/main.c    **** 
 347:src/main.c    **** 	Wait_ms (3000);
 348:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 349:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 350:src/main.c    **** 
 351:src/main.c    **** 	//mando start al gsm
 352:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 353:src/main.c    **** 	//GPSStartResetSM ();
 354:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 355:src/main.c    **** 	while (timer_standby)
 356:src/main.c    **** 	{
 357:src/main.c    **** 		i = GSM_Start();
 358:src/main.c    **** 		if (i == 1)
 359:src/main.c    **** 		{
 360:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 361:src/main.c    **** 			timer_standby = 0;
 362:src/main.c    **** 		}
 363:src/main.c    **** 		else
 364:src/main.c    **** 
 365:src/main.c    **** 		if (i > 1)
 366:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 367:src/main.c    **** 	}
 368:src/main.c    **** 
 369:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
ARM GAS  /tmp/ccGoSbLI.s 			page 36


 370:src/main.c    **** 
 371:src/main.c    **** 	while (1)
 372:src/main.c    **** 	{
 373:src/main.c    **** 		GSMProcess();
 374:src/main.c    **** 
 375:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 376:src/main.c    **** 		{
 377:src/main.c    **** 			usart2_pckt_ready = 0;
 378:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 379:src/main.c    **** 		}
 380:src/main.c    **** 
 381:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 382:src/main.c    **** 		{
 383:src/main.c    **** 			gsm_pckt_ready = 0;
 384:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 385:src/main.c    **** 		}
 386:src/main.c    **** 
 387:src/main.c    **** 		if (LIGHT)
 388:src/main.c    **** 			LED_ON;
 389:src/main.c    **** 		else
 390:src/main.c    **** 			LED_OFF;
 391:src/main.c    **** 	}
 392:src/main.c    **** #endif
 393:src/main.c    **** //---------- Fin Prueba con GSM GATEWAY --------//
 394:src/main.c    **** 
 395:src/main.c    **** 
 396:src/main.c    **** 
 397:src/main.c    **** 
 398:src/main.c    **** 
 399:src/main.c    **** #ifdef USE_REDONDA_BASIC
 400:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 401:src/main.c    **** 	// USART1Config();
 402:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 616              		.loc 2 402 0
 617 0126 FFF7FEFF 		bl	AdcConfig	@
 403:src/main.c    **** 
 404:src/main.c    **** 	TIM_3_Init ();					//lo utilizo para 1 a 10V y para synchro ADC
 618              		.loc 2 404 0
 619 012a FFF7FEFF 		bl	TIM_3_Init	@
 405:src/main.c    **** 
 406:src/main.c    **** 	TIM_16_Init();					//o utilizo para synchro de relay
 620              		.loc 2 406 0
 621 012e FFF7FEFF 		bl	TIM_16_Init	@
 407:src/main.c    **** 	TIM16Enable();
 622              		.loc 2 407 0
 623 0132 FFF7FEFF 		bl	TIM16Enable	@
 408:src/main.c    **** 
 409:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 624              		.loc 2 409 0
 625 0136 A04B     		ldr	r3, .L80+16	@ tmp255,
 626 0138 1800     		movs	r0, r3	@, tmp255
 627 013a FFF7FEFF 		bl	Usart2Send	@
 410:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 628              		.loc 2 410 0
 629 013e 9F4B     		ldr	r3, .L80+20	@ tmp256,
 630 0140 1800     		movs	r0, r3	@, tmp256
 631 0142 FFF7FEFF 		bl	Usart2Send	@
ARM GAS  /tmp/ccGoSbLI.s 			page 37


 411:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 412:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 413:src/main.c    **** 	#endif
 414:src/main.c    **** 	#ifdef WITH_HYST
 415:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 632              		.loc 2 415 0
 633 0146 9E4B     		ldr	r3, .L80+24	@ tmp257,
 634 0148 1800     		movs	r0, r3	@, tmp257
 635 014a FFF7FEFF 		bl	Usart2Send	@
 416:src/main.c    **** 	#endif
 417:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 418:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 419:src/main.c    **** 	#endif
 420:src/main.c    **** 	#ifdef USE_WITH_SYNC
 421:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 422:src/main.c    **** 	#else
 423:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 636              		.loc 2 423 0
 637 014e 9D4B     		ldr	r3, .L80+28	@ tmp258,
 638 0150 1800     		movs	r0, r3	@, tmp258
 639 0152 FFF7FEFF 		bl	Usart2Send	@
 424:src/main.c    **** 	#endif
 425:src/main.c    **** 	#ifdef USE_GSM
 426:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 640              		.loc 2 426 0
 641 0156 9C4B     		ldr	r3, .L80+32	@ tmp259,
 642 0158 1800     		movs	r0, r3	@, tmp259
 643 015a FFF7FEFF 		bl	Usart2Send	@
 427:src/main.c    **** 	#endif
 428:src/main.c    **** 
 429:src/main.c    **** 
 430:src/main.c    **** 
 431:src/main.c    **** 	for (i = 0; i < 8; i++)
 644              		.loc 2 431 0
 645 015e 8723     		movs	r3, #135	@ tmp260,
 646 0160 6B44     		add	r3, r3, sp	@ tmp260,
 647 0162 0022     		movs	r2, #0	@ tmp261,
 648 0164 1A70     		strb	r2, [r3]	@ tmp262, i
 649 0166 1DE0     		b	.L21	@
 650              	.L24:
 432:src/main.c    **** 	{
 433:src/main.c    **** 		if (LED)
 651              		.loc 2 433 0
 652 0168 9023     		movs	r3, #144	@ tmp645,
 653 016a DB05     		lsls	r3, r3, #23	@ D.7143, tmp645,
 654 016c 9B8A     		ldrh	r3, [r3, #20]	@ tmp264,
 655 016e 9BB2     		uxth	r3, r3	@ D.7144, tmp264
 656 0170 1A00     		movs	r2, r3	@ D.7145, D.7144
 657 0172 8023     		movs	r3, #128	@ tmp646,
 658 0174 5B01     		lsls	r3, r3, #5	@ tmp265, tmp646,
 659 0176 1340     		ands	r3, r2	@ D.7145, D.7145
 660 0178 05D0     		beq	.L22	@,
 434:src/main.c    **** 			LED_OFF;
 661              		.loc 2 434 0
 662 017a 9023     		movs	r3, #144	@ tmp643,
 663 017c DB05     		lsls	r3, r3, #23	@ D.7143, tmp643,
 664 017e 8022     		movs	r2, #128	@ tmp644,
ARM GAS  /tmp/ccGoSbLI.s 			page 38


 665 0180 5205     		lsls	r2, r2, #21	@ tmp266, tmp644,
 666 0182 9A61     		str	r2, [r3, #24]	@ tmp266, _160->BSRR
 667 0184 04E0     		b	.L23	@
 668              	.L22:
 435:src/main.c    **** 		else
 436:src/main.c    **** 			LED_ON;
 669              		.loc 2 436 0
 670 0186 9023     		movs	r3, #144	@ tmp641,
 671 0188 DB05     		lsls	r3, r3, #23	@ D.7143, tmp641,
 672 018a 8022     		movs	r2, #128	@ tmp642,
 673 018c 5201     		lsls	r2, r2, #5	@ tmp267, tmp642,
 674 018e 9A61     		str	r2, [r3, #24]	@ tmp267, _162->BSRR
 675              	.L23:
 437:src/main.c    **** 
 438:src/main.c    **** 		Wait_ms (250);
 676              		.loc 2 438 0 discriminator 2
 677 0190 FA20     		movs	r0, #250	@,
 678 0192 FFF7FEFF 		bl	Wait_ms	@
 431:src/main.c    **** 	{
 679              		.loc 2 431 0 discriminator 2
 680 0196 8723     		movs	r3, #135	@ tmp268,
 681 0198 6B44     		add	r3, r3, sp	@ tmp268,
 682 019a 1A78     		ldrb	r2, [r3]	@ D.7146, i
 683 019c 8723     		movs	r3, #135	@ tmp269,
 684 019e 6B44     		add	r3, r3, sp	@ tmp269,
 685 01a0 0132     		adds	r2, r2, #1	@ tmp270,
 686 01a2 1A70     		strb	r2, [r3]	@ tmp271, i
 687              	.L21:
 431:src/main.c    **** 	{
 688              		.loc 2 431 0 is_stmt 0 discriminator 1
 689 01a4 8723     		movs	r3, #135	@ tmp272,
 690 01a6 6B44     		add	r3, r3, sp	@ tmp272,
 691 01a8 1B78     		ldrb	r3, [r3]	@ tmp273, i
 692 01aa 072B     		cmp	r3, #7	@ tmp273,
 693 01ac DCD9     		bls	.L24	@,
 439:src/main.c    **** 	}
 440:src/main.c    **** 
 441:src/main.c    **** 
 442:src/main.c    **** 	timer_standby = 2000;
 694              		.loc 2 442 0 is_stmt 1
 695 01ae 874B     		ldr	r3, .L80+36	@ tmp274,
 696 01b0 FA22     		movs	r2, #250	@ tmp640,
 697 01b2 D200     		lsls	r2, r2, #3	@ tmp275, tmp640,
 698 01b4 1A80     		strh	r2, [r3]	@ tmp276, timer_standby
 443:src/main.c    **** 	FuncsGSMReset();
 699              		.loc 2 443 0
 700 01b6 FFF7FEFF 		bl	FuncsGSMReset	@
 444:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 701              		.loc 2 444 0
 702 01ba 0220     		movs	r0, #2	@,
 703 01bc FFF7FEFF 		bl	Usart1Mode	@
 704              	.L71:
 445:src/main.c    **** 
 446:src/main.c    **** 	// while (1)
 447:src/main.c    **** 	// {
 448:src/main.c    **** 	// 	if (SYNCP)
 449:src/main.c    **** 	// 	{
ARM GAS  /tmp/ccGoSbLI.s 			page 39


 450:src/main.c    **** 	// 		SYNCP_OFF;
 451:src/main.c    **** 	// 		LED_OFF;
 452:src/main.c    **** 	// 	}
 453:src/main.c    **** 	// 	else
 454:src/main.c    **** 	// 	{
 455:src/main.c    **** 	// 		SYNCP_ON;
 456:src/main.c    **** 	// 		LED_ON;
 457:src/main.c    **** 	// 	}
 458:src/main.c    **** 	// 	Wait_ms(10);
 459:src/main.c    **** 	//
 460:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 461:src/main.c    **** 	// 	// {
 462:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 463:src/main.c    **** 	// 	// 	Wait_ms (10);
 464:src/main.c    **** 	// 	// }
 465:src/main.c    **** 	// }
 466:src/main.c    **** 
 467:src/main.c    **** 
 468:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 469:src/main.c    **** 	// while (1)
 470:src/main.c    **** 	// {
 471:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 472:src/main.c    **** 	// 	{
 473:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 474:src/main.c    **** 	// 		Wait_ms(10);
 475:src/main.c    **** 	// 	}
 476:src/main.c    **** 	//
 477:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 478:src/main.c    **** 	// 	{
 479:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 480:src/main.c    **** 	// 		Wait_ms(10);
 481:src/main.c    **** 	// 	}
 482:src/main.c    **** 	// }
 483:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 484:src/main.c    **** 
 485:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 486:src/main.c    **** 	// i = 0;
 487:src/main.c    **** 	// while (1)
 488:src/main.c    **** 	// {
 489:src/main.c    **** 	// 	switch (i)
 490:src/main.c    **** 	// 	{
 491:src/main.c    **** 	// 		case 0:
 492:src/main.c    **** 	// 			//habilitar y esperar el final de la secuencia
 493:src/main.c    **** 	// 			ADC1->CR |= ADC_CR_ADSTART;
 494:src/main.c    **** 	// 			seq_ready = 0;
 495:src/main.c    **** 	// 			i++;
 496:src/main.c    **** 	// 			break;
 497:src/main.c    **** 	//
 498:src/main.c    **** 	// 		case 1:
 499:src/main.c    **** 	// 			if (seq_ready)		//esoty sincronizado
 500:src/main.c    **** 	// 				i++;
 501:src/main.c    **** 	// 			break;
 502:src/main.c    **** 	//
 503:src/main.c    **** 	// 		case 2:
 504:src/main.c    **** 	// 			RelayOn();
 505:src/main.c    **** 	// 			timer_standby = 50;
 506:src/main.c    **** 	// 			LED_ON;
ARM GAS  /tmp/ccGoSbLI.s 			page 40


 507:src/main.c    **** 	// 			i++;
 508:src/main.c    **** 	// 			break;
 509:src/main.c    **** 	//
 510:src/main.c    **** 	// 		case 3:
 511:src/main.c    **** 	// 			if (!timer_standby)
 512:src/main.c    **** 	// 			{
 513:src/main.c    **** 	// 				RelayOff();
 514:src/main.c    **** 	// 				LED_OFF;
 515:src/main.c    **** 	// 				i++;
 516:src/main.c    **** 	// 				timer_standby = 10000;
 517:src/main.c    **** 	// 			}
 518:src/main.c    **** 	// 			break;
 519:src/main.c    **** 	//
 520:src/main.c    **** 	// 		case 4:
 521:src/main.c    **** 	// 			if (!timer_standby)
 522:src/main.c    **** 	// 			{
 523:src/main.c    **** 	// 				i = 2;
 524:src/main.c    **** 	// 			}
 525:src/main.c    **** 	// 			break;
 526:src/main.c    **** 	// 	}
 527:src/main.c    **** 	//
 528:src/main.c    **** 	// 	UpdateRelay ();
 529:src/main.c    **** 	// }
 530:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 531:src/main.c    **** 
 532:src/main.c    **** 
 533:src/main.c    **** //--- Programa de Redonda Basic - Produccion - -----
 534:src/main.c    **** 
 535:src/main.c    **** 	while (1)
 536:src/main.c    **** 	{
 537:src/main.c    **** 		switch (main_state)
 705              		.loc 2 537 0
 706 01c0 6F23     		movs	r3, #111	@ tmp277,
 707 01c2 6B44     		add	r3, r3, sp	@ tmp277,
 708 01c4 1B78     		ldrb	r3, [r3]	@ D.7145, main_state
 709 01c6 0A2B     		cmp	r3, #10	@ D.7145,
 710 01c8 00D9     		bls	.LCB454	@
 711 01ca 86E2     		b	.L25	@long jump	@
 712              	.LCB454:
 713 01cc 9A00     		lsls	r2, r3, #2	@ tmp278, D.7145,
 714 01ce 804B     		ldr	r3, .L80+40	@ tmp280,
 715 01d0 D318     		adds	r3, r2, r3	@ tmp279, tmp278, tmp280
 716 01d2 1B68     		ldr	r3, [r3]	@ tmp281,
 717 01d4 9F46     		mov	pc, r3	@ tmp281
 718              		.section	.rodata.main,"a",%progbits
 719              		.align	2
 720              	.L27:
 721 0000 D6010000 		.word	.L26
 722 0004 F8010000 		.word	.L28
 723 0008 30020000 		.word	.L29
 724 000c A8020000 		.word	.L30
 725 0010 E2020000 		.word	.L31
 726 0014 DA060000 		.word	.L25
 727 0018 DA060000 		.word	.L25
 728 001c DA060000 		.word	.L25
 729 0020 40030000 		.word	.L32
 730 0024 9A060000 		.word	.L33
ARM GAS  /tmp/ccGoSbLI.s 			page 41


 731 0028 BC060000 		.word	.L34
 732              		.section	.text.main
 733              	.L26:
 538:src/main.c    **** 		{
 539:src/main.c    **** 			case MAIN_INIT:
 540:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 734              		.loc 2 540 0
 735 01d6 0A20     		movs	r0, #10	@,
 736 01d8 FFF7FEFF 		bl	Update_TIM3_CH1	@
 541:src/main.c    **** 				main_state = SYNCHRO_ADC;
 737              		.loc 2 541 0
 738 01dc 6F23     		movs	r3, #111	@ tmp282,
 739 01de 6B44     		add	r3, r3, sp	@ tmp282,
 740 01e0 0122     		movs	r2, #1	@ tmp283,
 741 01e2 1A70     		strb	r2, [r3]	@ tmp284, main_state
 542:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 742              		.loc 2 542 0
 743 01e4 7B4B     		ldr	r3, .L80+44	@ D.7149,
 744 01e6 7B4A     		ldr	r2, .L80+44	@ D.7149,
 745 01e8 9268     		ldr	r2, [r2, #8]	@ D.7142, _179->CR
 746 01ea 0421     		movs	r1, #4	@ tmp285,
 747 01ec 0A43     		orrs	r2, r1	@ D.7142, tmp285
 748 01ee 9A60     		str	r2, [r3, #8]	@ D.7142, _178->CR
 543:src/main.c    **** 				seq_ready = 0;
 749              		.loc 2 543 0
 750 01f0 794B     		ldr	r3, .L80+48	@ tmp286,
 751 01f2 0022     		movs	r2, #0	@ tmp287,
 752 01f4 1A70     		strb	r2, [r3]	@ tmp288, seq_ready
 544:src/main.c    **** 				break;
 753              		.loc 2 544 0
 754 01f6 7EE2     		b	.L35	@
 755              	.L28:
 545:src/main.c    **** 
 546:src/main.c    **** 			case SYNCHRO_ADC:
 547:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 756              		.loc 2 547 0
 757 01f8 774B     		ldr	r3, .L80+48	@ tmp289,
 758 01fa 1B78     		ldrb	r3, [r3]	@ tmp290, seq_ready
 759 01fc DBB2     		uxtb	r3, r3	@ D.7146, tmp290
 760 01fe 002B     		cmp	r3, #0	@ D.7146,
 761 0200 00D1     		bne	.LCB489	@
 762 0202 6FE2     		b	.L72	@long jump	@
 763              	.LCB489:
 548:src/main.c    **** 				{
 549:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 764              		.loc 2 549 0
 765 0204 754B     		ldr	r3, .L80+52	@ tmp291,
 766 0206 1800     		movs	r0, r3	@, tmp291
 767 0208 FFF7FEFF 		bl	Usart2Send	@
 550:src/main.c    **** 
 551:src/main.c    **** #ifdef USE_GSM
 552:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 768              		.loc 2 552 0
 769 020c 744B     		ldr	r3, .L80+56	@ tmp292,
 770 020e 1800     		movs	r0, r3	@, tmp292
 771 0210 FFF7FEFF 		bl	Usart2Send	@
 553:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
ARM GAS  /tmp/ccGoSbLI.s 			page 42


 772              		.loc 2 553 0
 773 0214 6F23     		movs	r3, #111	@ tmp293,
 774 0216 6B44     		add	r3, r3, sp	@ tmp293,
 775 0218 0222     		movs	r2, #2	@ tmp294,
 776 021a 1A70     		strb	r2, [r3]	@ tmp295, main_state
 554:src/main.c    **** 					timer_standby = 0;
 777              		.loc 2 554 0
 778 021c 6B4B     		ldr	r3, .L80+36	@ tmp296,
 779 021e 0022     		movs	r2, #0	@ tmp297,
 780 0220 1A80     		strh	r2, [r3]	@ tmp298, timer_standby
 555:src/main.c    **** 					zero_current_loc = 0;
 781              		.loc 2 555 0
 782 0222 0023     		movs	r3, #0	@ tmp299,
 783 0224 1F93     		str	r3, [sp, #124]	@ tmp299, zero_current_loc
 556:src/main.c    **** 					i = 0;
 784              		.loc 2 556 0
 785 0226 8723     		movs	r3, #135	@ tmp300,
 786 0228 6B44     		add	r3, r3, sp	@ tmp300,
 787 022a 0022     		movs	r2, #0	@ tmp301,
 788 022c 1A70     		strb	r2, [r3]	@ tmp302, i
 557:src/main.c    **** #else
 558:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 559:src/main.c    **** 					timer_standby = 60000;
 560:src/main.c    **** 					zero_current_loc = 0;
 561:src/main.c    **** 					i = 0;
 562:src/main.c    **** #endif
 563:src/main.c    **** 				}
 564:src/main.c    **** 				break;
 789              		.loc 2 564 0
 790 022e 59E2     		b	.L72	@
 791              	.L29:
 565:src/main.c    **** 
 566:src/main.c    **** 			case SET_ZERO_CURRENT:
 567:src/main.c    **** 				if ((!timer_standby) && (mains_voltage_filtered > CONNECT_VOLTAGE))
 792              		.loc 2 567 0
 793 0230 664B     		ldr	r3, .L80+36	@ tmp303,
 794 0232 1B88     		ldrh	r3, [r3]	@ tmp304, timer_standby
 795 0234 9BB2     		uxth	r3, r3	@ D.7144, tmp304
 796 0236 002B     		cmp	r3, #0	@ D.7144,
 797 0238 00D0     		beq	.LCB517	@
 798 023a 55E2     		b	.L73	@long jump	@
 799              	.LCB517:
 800              		.loc 2 567 0 is_stmt 0 discriminator 1
 801 023c 694B     		ldr	r3, .L80+60	@ tmp305,
 802 023e 1B88     		ldrh	r3, [r3]	@ D.7144, mains_voltage_filtered
 803 0240 694A     		ldr	r2, .L80+64	@ tmp306,
 804 0242 9342     		cmp	r3, r2	@ D.7144, tmp306
 805 0244 00D8     		bhi	.LCB522	@
 806 0246 4FE2     		b	.L73	@long jump	@
 807              	.LCB522:
 568:src/main.c    **** 				{
 569:src/main.c    **** 					if (i < 32)
 808              		.loc 2 569 0 is_stmt 1
 809 0248 8723     		movs	r3, #135	@ tmp307,
 810 024a 6B44     		add	r3, r3, sp	@ tmp307,
 811 024c 1B78     		ldrb	r3, [r3]	@ tmp308, i
 812 024e 1F2B     		cmp	r3, #31	@ tmp308,
ARM GAS  /tmp/ccGoSbLI.s 			page 43


 813 0250 1AD8     		bhi	.L38	@,
 570:src/main.c    **** 					{
 571:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 814              		.loc 2 571 0
 815 0252 614B     		ldr	r3, .L80+48	@ tmp309,
 816 0254 1B78     		ldrb	r3, [r3]	@ tmp310, seq_ready
 817 0256 DBB2     		uxtb	r3, r3	@ D.7146, tmp310
 818 0258 002B     		cmp	r3, #0	@ D.7146,
 819 025a 00D1     		bne	.LCB532	@
 820 025c 44E2     		b	.L73	@long jump	@
 821              	.LCB532:
 572:src/main.c    **** 						{
 573:src/main.c    **** 							seq_ready = 0;
 822              		.loc 2 573 0
 823 025e 5E4B     		ldr	r3, .L80+48	@ tmp311,
 824 0260 0022     		movs	r2, #0	@ tmp312,
 825 0262 1A70     		strb	r2, [r3]	@ tmp313, seq_ready
 574:src/main.c    **** 							zero_current_loc += I_Sense;
 826              		.loc 2 574 0
 827 0264 614B     		ldr	r3, .L80+68	@ tmp314,
 828 0266 9B88     		ldrh	r3, [r3, #4]	@ tmp316,
 829 0268 9BB2     		uxth	r3, r3	@ D.7144, tmp316
 830 026a 1A00     		movs	r2, r3	@ D.7148, D.7144
 831 026c 1F9B     		ldr	r3, [sp, #124]	@ tmp318, zero_current_loc
 832 026e 9B18     		adds	r3, r3, r2	@ tmp317, tmp318, D.7148
 833 0270 1F93     		str	r3, [sp, #124]	@ tmp317, zero_current_loc
 575:src/main.c    **** 							i++;
 834              		.loc 2 575 0
 835 0272 8723     		movs	r3, #135	@ tmp319,
 836 0274 6B44     		add	r3, r3, sp	@ tmp319,
 837 0276 1A78     		ldrb	r2, [r3]	@ D.7146, i
 838 0278 8723     		movs	r3, #135	@ tmp320,
 839 027a 6B44     		add	r3, r3, sp	@ tmp320,
 840 027c 0132     		adds	r2, r2, #1	@ tmp321,
 841 027e 1A70     		strb	r2, [r3]	@ tmp322, i
 576:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 842              		.loc 2 576 0
 843 0280 524B     		ldr	r3, .L80+36	@ tmp323,
 844 0282 0222     		movs	r2, #2	@ tmp324,
 845 0284 1A80     		strh	r2, [r3]	@ tmp325, timer_standby
 577:src/main.c    **** 						}
 578:src/main.c    **** 					}
 579:src/main.c    **** 					else
 580:src/main.c    **** 					{
 581:src/main.c    **** 						zero_current_loc >>= 5;
 582:src/main.c    **** 						zero_current = zero_current_loc;
 583:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE;
 584:src/main.c    **** 						i = 0;
 585:src/main.c    **** 					}
 586:src/main.c    **** 				}
 587:src/main.c    **** 				break;
 846              		.loc 2 587 0
 847 0286 2FE2     		b	.L73	@
 848              	.L38:
 581:src/main.c    **** 						zero_current = zero_current_loc;
 849              		.loc 2 581 0
 850 0288 1F9B     		ldr	r3, [sp, #124]	@ tmp327, zero_current_loc
ARM GAS  /tmp/ccGoSbLI.s 			page 44


 851 028a 5B09     		lsrs	r3, r3, #5	@ tmp326, tmp327,
 852 028c 1F93     		str	r3, [sp, #124]	@ tmp326, zero_current_loc
 582:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE;
 853              		.loc 2 582 0
 854 028e 1F9B     		ldr	r3, [sp, #124]	@ tmp329, zero_current_loc
 855 0290 9AB2     		uxth	r2, r3	@ D.7144, tmp328
 856 0292 574B     		ldr	r3, .L80+72	@ tmp330,
 857 0294 1A80     		strh	r2, [r3]	@ tmp331, zero_current
 583:src/main.c    **** 						i = 0;
 858              		.loc 2 583 0
 859 0296 6F23     		movs	r3, #111	@ tmp332,
 860 0298 6B44     		add	r3, r3, sp	@ tmp332,
 861 029a 0322     		movs	r2, #3	@ tmp333,
 862 029c 1A70     		strb	r2, [r3]	@ tmp334, main_state
 584:src/main.c    **** 					}
 863              		.loc 2 584 0
 864 029e 8723     		movs	r3, #135	@ tmp335,
 865 02a0 6B44     		add	r3, r3, sp	@ tmp335,
 866 02a2 0022     		movs	r2, #0	@ tmp336,
 867 02a4 1A70     		strb	r2, [r3]	@ tmp337, i
 868              		.loc 2 587 0
 869 02a6 1FE2     		b	.L73	@
 870              	.L30:
 588:src/main.c    **** 
 589:src/main.c    **** 			case SET_COUNTERS_AND_PHONE:
 590:src/main.c    **** 				//cargo contadores desde la flash
 591:src/main.c    **** 				acum_secs = param_struct.acumm_w2s;
 871              		.loc 2 591 0
 872 02a8 414B     		ldr	r3, .L80+8	@ tmp338,
 873 02aa DB6C     		ldr	r3, [r3, #76]	@ tmp339, param_struct.acumm_w2s
 874 02ac 1D93     		str	r3, [sp, #116]	@ tmp339, acum_secs
 592:src/main.c    **** 				acum_secs_index = param_struct.acumm_w2s_index;
 875              		.loc 2 592 0
 876 02ae 7A23     		movs	r3, #122	@ tmp340,
 877 02b0 6B44     		add	r3, r3, sp	@ tmp340,
 878 02b2 3F4A     		ldr	r2, .L80+8	@ tmp341,
 879 02b4 5021     		movs	r1, #80	@ tmp342,
 880 02b6 525A     		ldrh	r2, [r2, r1]	@ tmp343,
 881 02b8 1A80     		strh	r2, [r3]	@ tmp343, acum_secs_index
 593:src/main.c    **** 				acum_hours = param_struct.acumm_wh;
 882              		.loc 2 593 0
 883 02ba 3D4B     		ldr	r3, .L80+8	@ tmp344,
 884 02bc 9B6C     		ldr	r3, [r3, #72]	@ tmp345, param_struct.acumm_wh
 885 02be 1C93     		str	r3, [sp, #112]	@ tmp345, acum_hours
 594:src/main.c    **** 
 595:src/main.c    **** 				counters_mode = 0;
 886              		.loc 2 595 0
 887 02c0 6D23     		movs	r3, #109	@ tmp346,
 888 02c2 6B44     		add	r3, r3, sp	@ tmp346,
 889 02c4 0022     		movs	r2, #0	@ tmp347,
 890 02c6 1A70     		strb	r2, [r3]	@ tmp348, counters_mode
 596:src/main.c    **** 				LED_OFF;
 891              		.loc 2 596 0
 892 02c8 9023     		movs	r3, #144	@ tmp638,
 893 02ca DB05     		lsls	r3, r3, #23	@ D.7143, tmp638,
 894 02cc 8022     		movs	r2, #128	@ tmp639,
 895 02ce 5205     		lsls	r2, r2, #21	@ tmp349, tmp639,
ARM GAS  /tmp/ccGoSbLI.s 			page 45


 896 02d0 9A61     		str	r2, [r3, #24]	@ tmp349, _210->BSRR
 597:src/main.c    **** 
 598:src/main.c    **** 				Update_TIM3_CH1 (0);		//fin de la prueba de synchro
 897              		.loc 2 598 0
 898 02d2 0020     		movs	r0, #0	@,
 899 02d4 FFF7FEFF 		bl	Update_TIM3_CH1	@
 599:src/main.c    **** 				main_state = LAMP_OFF;
 900              		.loc 2 599 0
 901 02d8 6F23     		movs	r3, #111	@ tmp350,
 902 02da 6B44     		add	r3, r3, sp	@ tmp350,
 903 02dc 0422     		movs	r2, #4	@ tmp351,
 904 02de 1A70     		strb	r2, [r3]	@ tmp352, main_state
 600:src/main.c    **** 				break;
 905              		.loc 2 600 0
 906 02e0 09E2     		b	.L35	@
 907              	.L31:
 601:src/main.c    **** 
 602:src/main.c    **** 			case LAMP_OFF:
 603:src/main.c    **** 				if (!tt_relay_on_off)
 908              		.loc 2 603 0
 909 02e2 444B     		ldr	r3, .L80+76	@ tmp353,
 910 02e4 1B88     		ldrh	r3, [r3]	@ tmp354, tt_relay_on_off
 911 02e6 9BB2     		uxth	r3, r3	@ D.7144, tmp354
 912 02e8 002B     		cmp	r3, #0	@ D.7144,
 913 02ea 00D0     		beq	.LCB611	@
 914 02ec FEE1     		b	.L74	@long jump	@
 915              	.LCB611:
 604:src/main.c    **** 				{
 605:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 916              		.loc 2 605 0
 917 02ee FFF7FEFF 		bl	GetPhoto	@
 918 02f2 0300     		movs	r3, r0	@ tmp355,
 919 02f4 1A1E     		subs	r2, r3, #0	@ D.7144, tmp356,
 920 02f6 404B     		ldr	r3, .L80+80	@ tmp357,
 921 02f8 9A42     		cmp	r2, r3	@ D.7144, tmp357
 922 02fa 00D8     		bhi	.LCB617	@
 923 02fc F6E1     		b	.L74	@long jump	@
 924              	.LCB617:
 606:src/main.c    **** 					{
 607:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 608:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 609:src/main.c    **** #else
 610:src/main.c    **** 						Update_TIM3_CH1 (PWM_MAX);
 925              		.loc 2 610 0
 926 02fe FF20     		movs	r0, #255	@,
 927 0300 FFF7FEFF 		bl	Update_TIM3_CH1	@
 611:src/main.c    **** #endif
 612:src/main.c    **** 						// RelayOn();
 613:src/main.c    **** 						main_state = LAMP_ON;
 928              		.loc 2 613 0
 929 0304 6F23     		movs	r3, #111	@ tmp358,
 930 0306 6B44     		add	r3, r3, sp	@ tmp358,
 931 0308 0822     		movs	r2, #8	@ tmp359,
 932 030a 1A70     		strb	r2, [r3]	@ tmp360, main_state
 614:src/main.c    **** 						lamp_on_state = init_airplane0;
 933              		.loc 2 614 0
 934 030c 6E23     		movs	r3, #110	@ tmp361,
ARM GAS  /tmp/ccGoSbLI.s 			page 46


 935 030e 6B44     		add	r3, r3, sp	@ tmp361,
 936 0310 0022     		movs	r2, #0	@ tmp362,
 937 0312 1A70     		strb	r2, [r3]	@ tmp363, lamp_on_state
 615:src/main.c    **** 						tt_relay_on_off = 10000;
 938              		.loc 2 615 0
 939 0314 374B     		ldr	r3, .L80+76	@ tmp364,
 940 0316 394A     		ldr	r2, .L80+84	@ tmp365,
 941 0318 1A80     		strh	r2, [r3]	@ tmp366, tt_relay_on_off
 616:src/main.c    **** 						Usart2Send("PRENDIDO\r\n");
 942              		.loc 2 616 0
 943 031a 394B     		ldr	r3, .L80+88	@ tmp367,
 944 031c 1800     		movs	r0, r3	@, tmp367
 945 031e FFF7FEFF 		bl	Usart2Send	@
 617:src/main.c    **** 						FuncsGSMSendSMS("PRENDIDO", param_struct.num_reportar);
 946              		.loc 2 617 0
 947 0322 234A     		ldr	r2, .L80+8	@ tmp368,
 948 0324 374B     		ldr	r3, .L80+92	@ tmp369,
 949 0326 1100     		movs	r1, r2	@, tmp368
 950 0328 1800     		movs	r0, r3	@, tmp369
 951 032a FFF7FEFF 		bl	FuncsGSMSendSMS	@
 618:src/main.c    **** 						LED_ON;
 952              		.loc 2 618 0
 953 032e 9023     		movs	r3, #144	@ tmp636,
 954 0330 DB05     		lsls	r3, r3, #23	@ D.7143, tmp636,
 955 0332 8022     		movs	r2, #128	@ tmp637,
 956 0334 5201     		lsls	r2, r2, #5	@ tmp370, tmp637,
 957 0336 9A61     		str	r2, [r3, #24]	@ tmp370, _223->BSRR
 619:src/main.c    **** #ifdef WITH_HYST
 620:src/main.c    **** 						hours = 0;
 958              		.loc 2 620 0
 959 0338 334B     		ldr	r3, .L80+96	@ tmp371,
 960 033a 0022     		movs	r2, #0	@ tmp372,
 961 033c 1A70     		strb	r2, [r3]	@ tmp373, hours
 621:src/main.c    **** #endif
 622:src/main.c    **** 					}
 623:src/main.c    **** 				}
 624:src/main.c    **** 				break;
 962              		.loc 2 624 0
 963 033e D5E1     		b	.L74	@
 964              	.L32:
 625:src/main.c    **** 
 626:src/main.c    **** 			case LAMP_ON:
 627:src/main.c    **** #if defined REPORTS_AIRPLANE_MODE
 628:src/main.c    **** 				switch (lamp_on_state)
 629:src/main.c    **** 				{
 630:src/main.c    **** 					case init_airplane0:
 631:src/main.c    **** 						if (FuncsGSMStateAsk() == gsm_state_ready)
 632:src/main.c    **** 						{
 633:src/main.c    **** 							//lo paso a modo avion
 634:src/main.c    **** 							s_lcd[0] = '\0';
 635:src/main.c    **** 							FuncsGSMCommandAnswer ("AT+CFUN=4\r\n" , s_lcd);
 636:src/main.c    **** 							lamp_on_state = init_airplane1;
 637:src/main.c    **** 						}
 638:src/main.c    **** 						break;
 639:src/main.c    **** 
 640:src/main.c    **** 					case init_airplane1:
 641:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
ARM GAS  /tmp/ccGoSbLI.s 			page 47


 642:src/main.c    **** 						{
 643:src/main.c    **** 							//en modo avion, prendo y mido
 644:src/main.c    **** 							RelayOn();
 645:src/main.c    **** 							lamp_on_state = meas_init;
 646:src/main.c    **** 						}
 647:src/main.c    **** 						break;
 648:src/main.c    **** 
 649:src/main.c    **** 					case meas_init:
 650:src/main.c    **** 						if (RelayIsOn())
 651:src/main.c    **** 						{
 652:src/main.c    **** 							lamp_on_state = meas_meas;
 653:src/main.c    **** 							counters_mode = 1;
 654:src/main.c    **** 						}
 655:src/main.c    **** 						break;
 656:src/main.c    **** 
 657:src/main.c    **** 					case meas_meas:
 658:src/main.c    **** 						if (meas_end)
 659:src/main.c    **** 						{
 660:src/main.c    **** 							meas_end = 0;
 661:src/main.c    **** 
 662:src/main.c    **** 							if (!tt_relay_on_off)
 663:src/main.c    **** 							{
 664:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 665:src/main.c    **** 								hyst = GetHysteresis (hours);
 666:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 667:src/main.c    **** #else
 668:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 669:src/main.c    **** #endif
 670:src/main.c    **** 								{
 671:src/main.c    **** 									main_state = LAMP_OFF;
 672:src/main.c    **** 									Update_TIM3_CH1 (0);
 673:src/main.c    **** 
 674:src/main.c    **** 									lamp_on_state = init_airplane0;
 675:src/main.c    **** 									counters_mode = 0;
 676:src/main.c    **** 									Usart2Send("APAGADO\r\n");
 677:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 678:src/main.c    **** 									tt_relay_on_off = 10000;
 679:src/main.c    **** 									RelayOff();
 680:src/main.c    **** 									LED_OFF;
 681:src/main.c    **** 								}
 682:src/main.c    **** 								else
 683:src/main.c    **** 								{
 684:src/main.c    **** 									//No apago, tengo que reportar?
 685:src/main.c    **** 									if (show_power_index >= timer_rep)
 686:src/main.c    **** 									{
 687:src/main.c    **** 										show_power_index = 0;
 688:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 689:src/main.c    **** 										lamp_on_state = meas_reporting0;
 690:src/main.c    **** 									}
 691:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 692:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 693:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 694:src/main.c    **** #endif
 695:src/main.c    **** 								}
 696:src/main.c    **** 							}
 697:src/main.c    **** 						}
 698:src/main.c    **** 						break;
ARM GAS  /tmp/ccGoSbLI.s 			page 48


 699:src/main.c    **** 
 700:src/main.c    **** 					case meas_reporting0:
 701:src/main.c    **** 						//lo saco de modo avion
 702:src/main.c    **** 						s_lcd[0] = '\0';
 703:src/main.c    **** 						FuncsGSMCommandAnswer ("AT+CFUN=1\r\n" , s_lcd);
 704:src/main.c    **** 						lamp_on_state = meas_reporting1;
 705:src/main.c    **** 						break;
 706:src/main.c    **** 
 707:src/main.c    **** 					case meas_reporting1:
 708:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 709:src/main.c    **** 						{
 710:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 711:src/main.c    **** 							{
 712:src/main.c    **** 								ShowPower(s_lcd, power, acum_hours, acum_secs);
 713:src/main.c    **** 								Usart2Send(s_lcd);
 714:src/main.c    **** 								FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 715:src/main.c    **** 							}
 716:src/main.c    **** 							lamp_on_state = init_airplane0;
 717:src/main.c    **** 						}
 718:src/main.c    **** 						break;
 719:src/main.c    **** 
 720:src/main.c    **** 					default:
 721:src/main.c    **** 						lamp_on_state = init_airplane0;
 722:src/main.c    **** 						break;
 723:src/main.c    **** 				}
 724:src/main.c    **** 
 725:src/main.c    **** #elif defined REPORTS_NORMAL_MODE
 726:src/main.c    **** 				switch (lamp_on_state)
 965              		.loc 2 726 0
 966 0340 6E23     		movs	r3, #110	@ tmp374,
 967 0342 6B44     		add	r3, r3, sp	@ tmp374,
 968 0344 1B78     		ldrb	r3, [r3]	@ D.7145, lamp_on_state
 969 0346 062B     		cmp	r3, #6	@ D.7145,
 970 0348 00D9     		bls	.LCB655	@
 971 034a 15E1     		b	.L41	@long jump	@
 972              	.LCB655:
 973 034c 9A00     		lsls	r2, r3, #2	@ tmp375, D.7145,
 974 034e 2F4B     		ldr	r3, .L80+100	@ tmp377,
 975 0350 D318     		adds	r3, r2, r3	@ tmp376, tmp375, tmp377
 976 0352 1B68     		ldr	r3, [r3]	@ tmp378,
 977 0354 9F46     		mov	pc, r3	@ tmp378
 978              		.section	.rodata.main
 979              		.align	2
 980              	.L43:
 981 002c 56030000 		.word	.L42
 982 0030 66030000 		.word	.L44
 983 0034 76030000 		.word	.L45
 984 0038 18040000 		.word	.L46
 985 003c D0040000 		.word	.L47
 986 0040 1A050000 		.word	.L48
 987 0044 44050000 		.word	.L49
 988              		.section	.text.main
 989              	.L42:
 727:src/main.c    **** 				{
 728:src/main.c    **** 					case init_airplane0:
 729:src/main.c    **** 						lamp_on_state++;
 990              		.loc 2 729 0
ARM GAS  /tmp/ccGoSbLI.s 			page 49


 991 0356 6E23     		movs	r3, #110	@ tmp379,
 992 0358 6B44     		add	r3, r3, sp	@ tmp379,
 993 035a 1A78     		ldrb	r2, [r3]	@ D.7150, lamp_on_state
 994 035c 6E23     		movs	r3, #110	@ tmp380,
 995 035e 6B44     		add	r3, r3, sp	@ tmp380,
 996 0360 0132     		adds	r2, r2, #1	@ tmp381,
 997 0362 1A70     		strb	r2, [r3]	@ tmp382, lamp_on_state
 730:src/main.c    **** 						break;
 998              		.loc 2 730 0
 999 0364 12E1     		b	.L50	@
 1000              	.L44:
 731:src/main.c    **** 
 732:src/main.c    **** 					case init_airplane1:
 733:src/main.c    **** 						lamp_on_state++;
 1001              		.loc 2 733 0
 1002 0366 6E23     		movs	r3, #110	@ tmp383,
 1003 0368 6B44     		add	r3, r3, sp	@ tmp383,
 1004 036a 1A78     		ldrb	r2, [r3]	@ D.7150, lamp_on_state
 1005 036c 6E23     		movs	r3, #110	@ tmp384,
 1006 036e 6B44     		add	r3, r3, sp	@ tmp384,
 1007 0370 0132     		adds	r2, r2, #1	@ tmp385,
 1008 0372 1A70     		strb	r2, [r3]	@ tmp386, lamp_on_state
 734:src/main.c    **** 						break;
 1009              		.loc 2 734 0
 1010 0374 0AE1     		b	.L50	@
 1011              	.L45:
 735:src/main.c    **** 
 736:src/main.c    **** 					case meas_init:
 737:src/main.c    **** 						RelayOn();
 1012              		.loc 2 737 0
 1013 0376 FFF7FEFF 		bl	RelayOn	@
 738:src/main.c    **** 						lamp_on_state = meas_meas;
 1014              		.loc 2 738 0
 1015 037a 6E23     		movs	r3, #110	@ tmp387,
 1016 037c 6B44     		add	r3, r3, sp	@ tmp387,
 1017 037e 0322     		movs	r2, #3	@ tmp388,
 1018 0380 1A70     		strb	r2, [r3]	@ tmp389, lamp_on_state
 739:src/main.c    **** 						counters_mode = 1;
 1019              		.loc 2 739 0
 1020 0382 6D23     		movs	r3, #109	@ tmp390,
 1021 0384 6B44     		add	r3, r3, sp	@ tmp390,
 1022 0386 0122     		movs	r2, #1	@ tmp391,
 1023 0388 1A70     		strb	r2, [r3]	@ tmp392, counters_mode
 740:src/main.c    **** 						timer_meas = 200;		//le doy 200ms de buffer a la medicion
 1024              		.loc 2 740 0
 1025 038a 214B     		ldr	r3, .L80+104	@ tmp393,
 1026 038c C822     		movs	r2, #200	@ tmp394,
 1027 038e 1A70     		strb	r2, [r3]	@ tmp395, timer_meas
 741:src/main.c    **** 						//esto en realidad es un indice de 2 segundos de tick, la info esta en minutos
 742:src/main.c    **** 						timer_rep = param_struct.timer_reportar * 30;
 1028              		.loc 2 742 0
 1029 0390 074B     		ldr	r3, .L80+8	@ tmp396,
 1030 0392 5222     		movs	r2, #82	@ tmp397,
 1031 0394 9B5C     		ldrb	r3, [r3, r2]	@ D.7146,
 1032 0396 9BB2     		uxth	r3, r3	@ D.7144, D.7146
 1033 0398 1A1C     		adds	r2, r3, #0	@ tmp399, tmp398
 1034 039a 1201     		lsls	r2, r2, #4	@ tmp400, tmp399,
ARM GAS  /tmp/ccGoSbLI.s 			page 50


 1035 039c D31A     		subs	r3, r2, r3	@ tmp402, tmp401, tmp398
 1036 039e DB18     		adds	r3, r3, r3	@ tmp404, tmp403, tmp403
 1037 03a0 9AB2     		uxth	r2, r3	@ D.7144, tmp402
 1038 03a2 1C4B     		ldr	r3, .L80+108	@ tmp405,
 1039 03a4 1A80     		strh	r2, [r3]	@ tmp406, timer_rep
 743:src/main.c    **** 						break;
 1040              		.loc 2 743 0
 1041 03a6 F1E0     		b	.L50	@
 1042              	.L81:
 1043              		.align	2
 1044              	.L80:
 1045 03a8 80BB0000 		.word	48000
 1046 03ac 00FC0008 		.word	134282240
 1047 03b0 00000000 		.word	param_struct
 1048 03b4 00000000 		.word	.LC1
 1049 03b8 0C000000 		.word	.LC3
 1050 03bc 34000000 		.word	.LC5
 1051 03c0 44000000 		.word	.LC7
 1052 03c4 5C000000 		.word	.LC9
 1053 03c8 6C000000 		.word	.LC11
 1054 03cc 00000000 		.word	timer_standby
 1055 03d0 00000000 		.word	.L27
 1056 03d4 00240140 		.word	1073816576
 1057 03d8 00000000 		.word	seq_ready
 1058 03dc 88000000 		.word	.LC16
 1059 03e0 94000000 		.word	.LC18
 1060 03e4 00000000 		.word	mains_voltage_filtered
 1061 03e8 F3070000 		.word	2035
 1062 03ec 00000000 		.word	adc_ch
 1063 03f0 00000000 		.word	zero_current
 1064 03f4 00000000 		.word	tt_relay_on_off
 1065 03f8 8A0E0000 		.word	3722
 1066 03fc 10270000 		.word	10000
 1067 0400 BC000000 		.word	.LC24
 1068 0404 C8000000 		.word	.LC26
 1069 0408 00000000 		.word	hours
 1070 040c 2C000000 		.word	.L43
 1071 0410 00000000 		.word	timer_meas
 1072 0414 00000000 		.word	timer_rep
 1073              	.L46:
 744:src/main.c    **** 
 745:src/main.c    **** 					case meas_meas:
 746:src/main.c    **** 						if (meas_end)		//termino una vuelta de mediciones, generalmente 2 segundos
 1074              		.loc 2 746 0
 1075 0418 1BAB     		add	r3, sp, #108	@ tmp407,,
 1076 041a 1B78     		ldrb	r3, [r3]	@ tmp408, meas_end
 1077 041c 002B     		cmp	r3, #0	@ tmp408,
 1078 041e 00D1     		bne	.LCB752	@
 1079 0420 AFE0     		b	.L75	@long jump	@
 1080              	.LCB752:
 747:src/main.c    **** 						{
 748:src/main.c    **** 							meas_end = 0;
 1081              		.loc 2 748 0
 1082 0422 1BAB     		add	r3, sp, #108	@ tmp409,,
 1083 0424 0022     		movs	r2, #0	@ tmp410,
 1084 0426 1A70     		strb	r2, [r3]	@ tmp411, meas_end
 749:src/main.c    **** 
ARM GAS  /tmp/ccGoSbLI.s 			page 51


 750:src/main.c    **** 							if (!tt_relay_on_off)
 1085              		.loc 2 750 0
 1086 0428 D14B     		ldr	r3, .L82	@ tmp412,
 1087 042a 1B88     		ldrh	r3, [r3]	@ tmp413, tt_relay_on_off
 1088 042c 9BB2     		uxth	r3, r3	@ D.7144, tmp413
 1089 042e 002B     		cmp	r3, #0	@ D.7144,
 1090 0430 00D0     		beq	.LCB760	@
 1091 0432 A6E0     		b	.L75	@long jump	@
 1092              	.LCB760:
 751:src/main.c    **** 							{
 752:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 753:src/main.c    **** 								hyst = GetHysteresis (hours);
 1093              		.loc 2 753 0
 1094 0434 CF4B     		ldr	r3, .L82+4	@ tmp414,
 1095 0436 1B78     		ldrb	r3, [r3]	@ tmp415, hours
 1096 0438 DBB2     		uxtb	r3, r3	@ D.7146, tmp415
 1097 043a 19AC     		add	r4, sp, #100	@ tmp416,,
 1098 043c 1800     		movs	r0, r3	@, D.7146
 1099 043e FFF7FEFF 		bl	GetHysteresis	@
 1100 0442 0300     		movs	r3, r0	@ tmp417,
 1101 0444 2380     		strh	r3, [r4]	@ tmp419, hyst
 754:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 1102              		.loc 2 754 0
 1103 0446 FFF7FEFF 		bl	GetPhoto	@
 1104 044a 0300     		movs	r3, r0	@ tmp420,
 1105 044c 1900     		movs	r1, r3	@ D.7145, D.7144
 1106 044e 19AB     		add	r3, sp, #100	@ tmp422,,
 1107 0450 1B88     		ldrh	r3, [r3]	@ D.7145, hyst
 1108 0452 C94A     		ldr	r2, .L82+8	@ tmp423,
 1109 0454 D31A     		subs	r3, r2, r3	@ D.7145, tmp423, D.7145
 1110 0456 9942     		cmp	r1, r3	@ D.7145, D.7145
 1111 0458 23DA     		bge	.L52	@,
 755:src/main.c    **** #else
 756:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 757:src/main.c    **** #endif
 758:src/main.c    **** 								{
 759:src/main.c    **** 									main_state = LAMP_OFF;
 1112              		.loc 2 759 0
 1113 045a 6F23     		movs	r3, #111	@ tmp424,
 1114 045c 6B44     		add	r3, r3, sp	@ tmp424,
 1115 045e 0422     		movs	r2, #4	@ tmp425,
 1116 0460 1A70     		strb	r2, [r3]	@ tmp426, main_state
 760:src/main.c    **** 									Update_TIM3_CH1 (0);
 1117              		.loc 2 760 0
 1118 0462 0020     		movs	r0, #0	@,
 1119 0464 FFF7FEFF 		bl	Update_TIM3_CH1	@
 761:src/main.c    **** 
 762:src/main.c    **** 									lamp_on_state = init_airplane0;
 1120              		.loc 2 762 0
 1121 0468 6E23     		movs	r3, #110	@ tmp427,
 1122 046a 6B44     		add	r3, r3, sp	@ tmp427,
 1123 046c 0022     		movs	r2, #0	@ tmp428,
 1124 046e 1A70     		strb	r2, [r3]	@ tmp429, lamp_on_state
 763:src/main.c    **** 									counters_mode = 0;
 1125              		.loc 2 763 0
 1126 0470 6D23     		movs	r3, #109	@ tmp430,
 1127 0472 6B44     		add	r3, r3, sp	@ tmp430,
ARM GAS  /tmp/ccGoSbLI.s 			page 52


 1128 0474 0022     		movs	r2, #0	@ tmp431,
 1129 0476 1A70     		strb	r2, [r3]	@ tmp432, counters_mode
 764:src/main.c    **** 									Usart2Send("APAGADO\r\n");
 1130              		.loc 2 764 0
 1131 0478 C04B     		ldr	r3, .L82+12	@ tmp433,
 1132 047a 1800     		movs	r0, r3	@, tmp433
 1133 047c FFF7FEFF 		bl	Usart2Send	@
 765:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 1134              		.loc 2 765 0
 1135 0480 BF4A     		ldr	r2, .L82+16	@ tmp434,
 1136 0482 C04B     		ldr	r3, .L82+20	@ tmp435,
 1137 0484 1100     		movs	r1, r2	@, tmp434
 1138 0486 1800     		movs	r0, r3	@, tmp435
 1139 0488 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 766:src/main.c    **** 									tt_relay_on_off = 10000;
 1140              		.loc 2 766 0
 1141 048c B84B     		ldr	r3, .L82	@ tmp436,
 1142 048e BE4A     		ldr	r2, .L82+24	@ tmp437,
 1143 0490 1A80     		strh	r2, [r3]	@ tmp438, tt_relay_on_off
 767:src/main.c    **** 									RelayOff();
 1144              		.loc 2 767 0
 1145 0492 FFF7FEFF 		bl	RelayOff	@
 768:src/main.c    **** 									LED_OFF;
 1146              		.loc 2 768 0
 1147 0496 9023     		movs	r3, #144	@ tmp634,
 1148 0498 DB05     		lsls	r3, r3, #23	@ D.7143, tmp634,
 1149 049a 8022     		movs	r2, #128	@ tmp635,
 1150 049c 5205     		lsls	r2, r2, #21	@ tmp439, tmp635,
 1151 049e 9A61     		str	r2, [r3, #24]	@ tmp439, _257->BSRR
 769:src/main.c    **** 								}
 770:src/main.c    **** 								else
 771:src/main.c    **** 								{
 772:src/main.c    **** 									//No apago, tengo que reportar?
 773:src/main.c    **** 									if (show_power_index >= timer_rep)
 774:src/main.c    **** 									{
 775:src/main.c    **** 										show_power_index = 0;
 776:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 777:src/main.c    **** 										lamp_on_state = meas_reporting0;
 778:src/main.c    **** 										LED_OFF;
 779:src/main.c    **** 									}
 780:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 781:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 782:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 783:src/main.c    **** #endif
 784:src/main.c    **** 								}
 785:src/main.c    **** 							}
 786:src/main.c    **** 						}
 787:src/main.c    **** 						break;
 1152              		.loc 2 787 0
 1153 04a0 6FE0     		b	.L75	@
 1154              	.L52:
 773:src/main.c    **** 									{
 1155              		.loc 2 773 0
 1156 04a2 BA4B     		ldr	r3, .L82+28	@ tmp440,
 1157 04a4 1A88     		ldrh	r2, [r3]	@ D.7144, show_power_index
 1158 04a6 BA4B     		ldr	r3, .L82+32	@ tmp441,
 1159 04a8 1B88     		ldrh	r3, [r3]	@ D.7144, timer_rep
ARM GAS  /tmp/ccGoSbLI.s 			page 53


 1160 04aa 9A42     		cmp	r2, r3	@ D.7144, D.7144
 1161 04ac 69D3     		bcc	.L75	@,
 775:src/main.c    **** 										counters_mode = 2;		//paso al modo memoria de medicion
 1162              		.loc 2 775 0
 1163 04ae B74B     		ldr	r3, .L82+28	@ tmp442,
 1164 04b0 0022     		movs	r2, #0	@ tmp443,
 1165 04b2 1A80     		strh	r2, [r3]	@ tmp444, show_power_index
 776:src/main.c    **** 										lamp_on_state = meas_reporting0;
 1166              		.loc 2 776 0
 1167 04b4 6D23     		movs	r3, #109	@ tmp445,
 1168 04b6 6B44     		add	r3, r3, sp	@ tmp445,
 1169 04b8 0222     		movs	r2, #2	@ tmp446,
 1170 04ba 1A70     		strb	r2, [r3]	@ tmp447, counters_mode
 777:src/main.c    **** 										LED_OFF;
 1171              		.loc 2 777 0
 1172 04bc 6E23     		movs	r3, #110	@ tmp448,
 1173 04be 6B44     		add	r3, r3, sp	@ tmp448,
 1174 04c0 0422     		movs	r2, #4	@ tmp449,
 1175 04c2 1A70     		strb	r2, [r3]	@ tmp450, lamp_on_state
 778:src/main.c    **** 									}
 1176              		.loc 2 778 0
 1177 04c4 9023     		movs	r3, #144	@ tmp632,
 1178 04c6 DB05     		lsls	r3, r3, #23	@ D.7143, tmp632,
 1179 04c8 8022     		movs	r2, #128	@ tmp633,
 1180 04ca 5205     		lsls	r2, r2, #21	@ tmp451, tmp633,
 1181 04cc 9A61     		str	r2, [r3, #24]	@ tmp451, _264->BSRR
 1182              		.loc 2 787 0
 1183 04ce 58E0     		b	.L75	@
 1184              	.L47:
 788:src/main.c    **** 
 789:src/main.c    **** 					case meas_reporting0:
 790:src/main.c    **** 						ShowPower(s_lcd, power, acum_hours, acum_secs);
 1185              		.loc 2 790 0
 1186 04d0 1D9C     		ldr	r4, [sp, #116]	@ tmp452, acum_secs
 1187 04d2 1C9A     		ldr	r2, [sp, #112]	@ tmp453, acum_hours
 1188 04d4 21AB     		add	r3, sp, #132	@ tmp454,,
 1189 04d6 1988     		ldrh	r1, [r3]	@ tmp455, power
 1190 04d8 6846     		mov	r0, sp	@ tmp456,
 1191 04da 2300     		movs	r3, r4	@, tmp452
 1192 04dc FFF7FEFF 		bl	ShowPower	@
 791:src/main.c    **** 						Usart2Send(s_lcd);
 1193              		.loc 2 791 0
 1194 04e0 6B46     		mov	r3, sp	@ tmp457,
 1195 04e2 1800     		movs	r0, r3	@, tmp457
 1196 04e4 FFF7FEFF 		bl	Usart2Send	@
 792:src/main.c    **** 						resp = FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 1197              		.loc 2 792 0
 1198 04e8 6A24     		movs	r4, #106	@ tmp458,
 1199 04ea 6C44     		add	r4, r4, sp	@ tmp458,
 1200 04ec A44A     		ldr	r2, .L82+16	@ tmp459,
 1201 04ee 6B46     		mov	r3, sp	@ tmp460,
 1202 04f0 1100     		movs	r1, r2	@, tmp459
 1203 04f2 1800     		movs	r0, r3	@, tmp460
 1204 04f4 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 1205 04f8 0300     		movs	r3, r0	@ tmp461,
 1206 04fa 2370     		strb	r3, [r4]	@ tmp463, resp
 793:src/main.c    **** 						if (resp == resp_gsm_error)
ARM GAS  /tmp/ccGoSbLI.s 			page 54


 1207              		.loc 2 793 0
 1208 04fc 6A23     		movs	r3, #106	@ tmp464,
 1209 04fe 6B44     		add	r3, r3, sp	@ tmp464,
 1210 0500 1B78     		ldrb	r3, [r3]	@ tmp465, resp
 1211 0502 022B     		cmp	r3, #2	@ tmp465,
 1212 0504 04D1     		bne	.L53	@,
 794:src/main.c    **** 							lamp_on_state = meas_reporting1;
 1213              		.loc 2 794 0
 1214 0506 6E23     		movs	r3, #110	@ tmp466,
 1215 0508 6B44     		add	r3, r3, sp	@ tmp466,
 1216 050a 0522     		movs	r2, #5	@ tmp467,
 1217 050c 1A70     		strb	r2, [r3]	@ tmp468, lamp_on_state
 795:src/main.c    **** 						else
 796:src/main.c    **** 							lamp_on_state = meas_reporting2;
 797:src/main.c    **** 
 798:src/main.c    **** 						break;
 1218              		.loc 2 798 0
 1219 050e 3DE0     		b	.L50	@
 1220              	.L53:
 796:src/main.c    **** 
 1221              		.loc 2 796 0
 1222 0510 6E23     		movs	r3, #110	@ tmp469,
 1223 0512 6B44     		add	r3, r3, sp	@ tmp469,
 1224 0514 0622     		movs	r2, #6	@ tmp470,
 1225 0516 1A70     		strb	r2, [r3]	@ tmp471, lamp_on_state
 1226              		.loc 2 798 0
 1227 0518 38E0     		b	.L50	@
 1228              	.L48:
 799:src/main.c    **** 
 800:src/main.c    **** 					case meas_reporting1:
 801:src/main.c    **** 						if (meas_end)		//me sincronizo nuevamente con la medicion
 1229              		.loc 2 801 0
 1230 051a 1BAB     		add	r3, sp, #108	@ tmp472,,
 1231 051c 1B78     		ldrb	r3, [r3]	@ tmp473, meas_end
 1232 051e 002B     		cmp	r3, #0	@ tmp473,
 1233 0520 31D0     		beq	.L76	@,
 802:src/main.c    **** 						{
 803:src/main.c    **** 							meas_end = 0;
 1234              		.loc 2 803 0
 1235 0522 1BAB     		add	r3, sp, #108	@ tmp474,,
 1236 0524 0022     		movs	r2, #0	@ tmp475,
 1237 0526 1A70     		strb	r2, [r3]	@ tmp476, meas_end
 804:src/main.c    **** 							LED_ON;
 1238              		.loc 2 804 0
 1239 0528 9023     		movs	r3, #144	@ tmp630,
 1240 052a DB05     		lsls	r3, r3, #23	@ D.7143, tmp630,
 1241 052c 8022     		movs	r2, #128	@ tmp631,
 1242 052e 5201     		lsls	r2, r2, #5	@ tmp477, tmp631,
 1243 0530 9A61     		str	r2, [r3, #24]	@ tmp477, _273->BSRR
 805:src/main.c    **** 							counters_mode = 1;
 1244              		.loc 2 805 0
 1245 0532 6D23     		movs	r3, #109	@ tmp478,
 1246 0534 6B44     		add	r3, r3, sp	@ tmp478,
 1247 0536 0122     		movs	r2, #1	@ tmp479,
 1248 0538 1A70     		strb	r2, [r3]	@ tmp480, counters_mode
 806:src/main.c    **** 							lamp_on_state = meas_meas;
 1249              		.loc 2 806 0
ARM GAS  /tmp/ccGoSbLI.s 			page 55


 1250 053a 6E23     		movs	r3, #110	@ tmp481,
 1251 053c 6B44     		add	r3, r3, sp	@ tmp481,
 1252 053e 0322     		movs	r2, #3	@ tmp482,
 1253 0540 1A70     		strb	r2, [r3]	@ tmp483, lamp_on_state
 807:src/main.c    **** 						}
 808:src/main.c    **** 						break;
 1254              		.loc 2 808 0
 1255 0542 20E0     		b	.L76	@
 1256              	.L49:
 809:src/main.c    **** 
 810:src/main.c    **** 					case meas_reporting2:
 811:src/main.c    **** 						if (meas_end)		//me sincronizo nuevamente con la medicion
 1257              		.loc 2 811 0
 1258 0544 1BAB     		add	r3, sp, #108	@ tmp484,,
 1259 0546 1B78     		ldrb	r3, [r3]	@ tmp485, meas_end
 1260 0548 002B     		cmp	r3, #0	@ tmp485,
 1261 054a 1ED0     		beq	.L77	@,
 812:src/main.c    **** 						{
 813:src/main.c    **** 							meas_end = 0;
 1262              		.loc 2 813 0
 1263 054c 1BAB     		add	r3, sp, #108	@ tmp486,,
 1264 054e 0022     		movs	r2, #0	@ tmp487,
 1265 0550 1A70     		strb	r2, [r3]	@ tmp488, meas_end
 814:src/main.c    **** 
 815:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 1266              		.loc 2 815 0
 1267 0552 FFF7FEFF 		bl	FuncsGSMStateAsk	@
 1268 0556 031E     		subs	r3, r0, #0	@ tmp489,,
 1269 0558 0A2B     		cmp	r3, #10	@ tmp489,
 1270 055a 16D1     		bne	.L77	@,
 816:src/main.c    **** 							{
 817:src/main.c    **** 								LED_ON;
 1271              		.loc 2 817 0
 1272 055c 9023     		movs	r3, #144	@ tmp628,
 1273 055e DB05     		lsls	r3, r3, #23	@ D.7143, tmp628,
 1274 0560 8022     		movs	r2, #128	@ tmp629,
 1275 0562 5201     		lsls	r2, r2, #5	@ tmp491, tmp629,
 1276 0564 9A61     		str	r2, [r3, #24]	@ tmp491, _280->BSRR
 818:src/main.c    **** 								counters_mode = 1;
 1277              		.loc 2 818 0
 1278 0566 6D23     		movs	r3, #109	@ tmp492,
 1279 0568 6B44     		add	r3, r3, sp	@ tmp492,
 1280 056a 0122     		movs	r2, #1	@ tmp493,
 1281 056c 1A70     		strb	r2, [r3]	@ tmp494, counters_mode
 819:src/main.c    **** 								lamp_on_state = meas_meas;
 1282              		.loc 2 819 0
 1283 056e 6E23     		movs	r3, #110	@ tmp495,
 1284 0570 6B44     		add	r3, r3, sp	@ tmp495,
 1285 0572 0322     		movs	r2, #3	@ tmp496,
 1286 0574 1A70     		strb	r2, [r3]	@ tmp497, lamp_on_state
 820:src/main.c    **** 							}
 821:src/main.c    **** 						}
 822:src/main.c    **** 						break;
 1287              		.loc 2 822 0
 1288 0576 08E0     		b	.L77	@
 1289              	.L41:
 823:src/main.c    **** 
ARM GAS  /tmp/ccGoSbLI.s 			page 56


 824:src/main.c    **** 					default:
 825:src/main.c    **** 						lamp_on_state = init_airplane0;
 1290              		.loc 2 825 0
 1291 0578 6E23     		movs	r3, #110	@ tmp498,
 1292 057a 6B44     		add	r3, r3, sp	@ tmp498,
 1293 057c 0022     		movs	r2, #0	@ tmp499,
 1294 057e 1A70     		strb	r2, [r3]	@ tmp500, lamp_on_state
 826:src/main.c    **** 						break;
 1295              		.loc 2 826 0
 1296 0580 04E0     		b	.L50	@
 1297              	.L75:
 787:src/main.c    **** 
 1298              		.loc 2 787 0
 1299 0582 C046     		nop
 1300 0584 02E0     		b	.L50	@
 1301              	.L76:
 808:src/main.c    **** 
 1302              		.loc 2 808 0
 1303 0586 C046     		nop
 1304 0588 00E0     		b	.L50	@
 1305              	.L77:
 822:src/main.c    **** 
 1306              		.loc 2 822 0
 1307 058a C046     		nop
 1308              	.L50:
 827:src/main.c    **** 				}
 828:src/main.c    **** 
 829:src/main.c    **** #else
 830:src/main.c    **** #error "Debe elegir la forma de reportar Normal / Airplane"
 831:src/main.c    **** #endif
 832:src/main.c    **** 
 833:src/main.c    **** 				if (counters_mode)	//si esta activo el modo de contadores mido
 1309              		.loc 2 833 0
 1310 058c 6D23     		movs	r3, #109	@ tmp501,
 1311 058e 6B44     		add	r3, r3, sp	@ tmp501,
 1312 0590 1B78     		ldrb	r3, [r3]	@ tmp502, counters_mode
 1313 0592 002B     		cmp	r3, #0	@ tmp502,
 1314 0594 00D1     		bne	.LCB956	@
 1315 0596 ABE0     		b	.L78	@long jump	@
 1316              	.LCB956:
 834:src/main.c    **** 				{
 835:src/main.c    **** 					if (!timer_meas)	//update cada 200ms
 1317              		.loc 2 835 0
 1318 0598 7E4B     		ldr	r3, .L82+36	@ tmp503,
 1319 059a 1B78     		ldrb	r3, [r3]	@ tmp504, timer_meas
 1320 059c DBB2     		uxtb	r3, r3	@ D.7146, tmp504
 1321 059e 002B     		cmp	r3, #0	@ D.7146,
 1322 05a0 00D0     		beq	.LCB961	@
 1323 05a2 A5E0     		b	.L78	@long jump	@
 1324              	.LCB961:
 836:src/main.c    **** 					{
 837:src/main.c    **** 						if (i < SIZEOF_POWER_VECT)
 1325              		.loc 2 837 0
 1326 05a4 8723     		movs	r3, #135	@ tmp505,
 1327 05a6 6B44     		add	r3, r3, sp	@ tmp505,
 1328 05a8 1B78     		ldrb	r3, [r3]	@ tmp506, i
 1329 05aa 092B     		cmp	r3, #9	@ tmp506,
ARM GAS  /tmp/ccGoSbLI.s 			page 57


 1330 05ac 1AD8     		bhi	.L58	@,
 838:src/main.c    **** 						{
 839:src/main.c    **** 							power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 1331              		.loc 2 839 0
 1332 05ae 8723     		movs	r3, #135	@ tmp507,
 1333 05b0 6B44     		add	r3, r3, sp	@ tmp507,
 1334 05b2 1C78     		ldrb	r4, [r3]	@ D.7145, i
 1335 05b4 FFF7FEFF 		bl	GetVGrid	@
 1336 05b8 0300     		movs	r3, r0	@ tmp508,
 1337 05ba 1D00     		movs	r5, r3	@ D.7144, tmp509
 1338 05bc FFF7FEFF 		bl	GetIGrid	@
 1339 05c0 0300     		movs	r3, r0	@ tmp510,
 1340 05c2 1900     		movs	r1, r3	@, D.7144
 1341 05c4 2800     		movs	r0, r5	@, D.7144
 1342 05c6 FFF7FEFF 		bl	PowerCalc	@
 1343 05ca 0300     		movs	r3, r0	@ tmp512,
 1344 05cc 1900     		movs	r1, r3	@ D.7144, tmp513
 1345 05ce 724B     		ldr	r3, .L82+40	@ tmp514,
 1346 05d0 6200     		lsls	r2, r4, #1	@ tmp515, D.7145,
 1347 05d2 D152     		strh	r1, [r2, r3]	@ tmp516, power_vect
 840:src/main.c    **** 							i++;
 1348              		.loc 2 840 0
 1349 05d4 8723     		movs	r3, #135	@ tmp517,
 1350 05d6 6B44     		add	r3, r3, sp	@ tmp517,
 1351 05d8 1A78     		ldrb	r2, [r3]	@ D.7146, i
 1352 05da 8723     		movs	r3, #135	@ tmp518,
 1353 05dc 6B44     		add	r3, r3, sp	@ tmp518,
 1354 05de 0132     		adds	r2, r2, #1	@ tmp519,
 1355 05e0 1A70     		strb	r2, [r3]	@ tmp520, i
 1356 05e2 56E0     		b	.L59	@
 1357              	.L58:
 841:src/main.c    **** 						}
 842:src/main.c    **** 						else
 843:src/main.c    **** 						{		//termine de cargar el vector, guardo muestro info
 844:src/main.c    **** 							i = 0;
 1358              		.loc 2 844 0
 1359 05e4 8723     		movs	r3, #135	@ tmp521,
 1360 05e6 6B44     		add	r3, r3, sp	@ tmp521,
 1361 05e8 0022     		movs	r2, #0	@ tmp522,
 1362 05ea 1A70     		strb	r2, [r3]	@ tmp523, i
 845:src/main.c    **** 
 846:src/main.c    **** 							if (counters_mode == 1)	//mido normalmente
 1363              		.loc 2 846 0
 1364 05ec 6D23     		movs	r3, #109	@ tmp524,
 1365 05ee 6B44     		add	r3, r3, sp	@ tmp524,
 1366 05f0 1B78     		ldrb	r3, [r3]	@ tmp525, counters_mode
 1367 05f2 012B     		cmp	r3, #1	@ tmp525,
 1368 05f4 13D1     		bne	.L60	@,
 847:src/main.c    **** 							{
 848:src/main.c    **** 								power = PowerCalcMean8(power_vect);
 1369              		.loc 2 848 0
 1370 05f6 21AC     		add	r4, sp, #132	@ tmp526,,
 1371 05f8 674B     		ldr	r3, .L82+40	@ tmp527,
 1372 05fa 1800     		movs	r0, r3	@, tmp527
 1373 05fc FFF7FEFF 		bl	PowerCalcMean8	@
 1374 0600 0300     		movs	r3, r0	@ tmp528,
 1375 0602 2380     		strh	r3, [r4]	@ tmp530, power
ARM GAS  /tmp/ccGoSbLI.s 			page 58


 849:src/main.c    **** 								// power = 9871;	//100w forzados para evaluar contadores
 850:src/main.c    **** 														//9871 * KW = 100
 851:src/main.c    **** 								if (power < MIN_SENSE_POWER)	//minimo de medicion
 1376              		.loc 2 851 0
 1377 0604 21AB     		add	r3, sp, #132	@ tmp531,,
 1378 0606 1B88     		ldrh	r3, [r3]	@ tmp532, power
 1379 0608 644A     		ldr	r2, .L82+44	@ tmp533,
 1380 060a 9342     		cmp	r3, r2	@ tmp532, tmp533
 1381 060c 02D8     		bhi	.L61	@,
 852:src/main.c    **** 									power = 0;
 1382              		.loc 2 852 0
 1383 060e 21AB     		add	r3, sp, #132	@ tmp534,,
 1384 0610 0022     		movs	r2, #0	@ tmp535,
 1385 0612 1A80     		strh	r2, [r3]	@ tmp536, power
 1386              	.L61:
 853:src/main.c    **** 
 854:src/main.c    **** 								last_power = power;
 1387              		.loc 2 854 0
 1388 0614 8223     		movs	r3, #130	@ tmp537,
 1389 0616 6B44     		add	r3, r3, sp	@ tmp537,
 1390 0618 21AA     		add	r2, sp, #132	@ tmp538,,
 1391 061a 1288     		ldrh	r2, [r2]	@ tmp539, power
 1392 061c 1A80     		strh	r2, [r3]	@ tmp539, last_power
 1393              	.L60:
 855:src/main.c    **** 							}
 856:src/main.c    **** 
 857:src/main.c    **** 							if (counters_mode == 2)	//no mido solo update de lo viejo
 1394              		.loc 2 857 0
 1395 061e 6D23     		movs	r3, #109	@ tmp540,
 1396 0620 6B44     		add	r3, r3, sp	@ tmp540,
 1397 0622 1B78     		ldrb	r3, [r3]	@ tmp541, counters_mode
 1398 0624 022B     		cmp	r3, #2	@ tmp541,
 1399 0626 04D1     		bne	.L62	@,
 858:src/main.c    **** 								power = last_power;
 1400              		.loc 2 858 0
 1401 0628 21AB     		add	r3, sp, #132	@ tmp542,,
 1402 062a 8222     		movs	r2, #130	@ tmp543,
 1403 062c 6A44     		add	r2, r2, sp	@ tmp543,
 1404 062e 1288     		ldrh	r2, [r2]	@ tmp544, last_power
 1405 0630 1A80     		strh	r2, [r3]	@ tmp544, power
 1406              	.L62:
 859:src/main.c    **** 
 860:src/main.c    **** 							acum_secs += power;
 1407              		.loc 2 860 0
 1408 0632 21AB     		add	r3, sp, #132	@ tmp545,,
 1409 0634 1B88     		ldrh	r3, [r3]	@ D.7148, power
 1410 0636 1D9A     		ldr	r2, [sp, #116]	@ tmp547, acum_secs
 1411 0638 D318     		adds	r3, r2, r3	@ tmp546, tmp547, D.7148
 1412 063a 1D93     		str	r3, [sp, #116]	@ tmp546, acum_secs
 861:src/main.c    **** 							acum_secs_index++;
 1413              		.loc 2 861 0
 1414 063c 7A23     		movs	r3, #122	@ tmp548,
 1415 063e 6B44     		add	r3, r3, sp	@ tmp548,
 1416 0640 1A88     		ldrh	r2, [r3]	@ D.7144, acum_secs_index
 1417 0642 7A23     		movs	r3, #122	@ tmp549,
 1418 0644 6B44     		add	r3, r3, sp	@ tmp549,
 1419 0646 0132     		adds	r2, r2, #1	@ tmp550,
ARM GAS  /tmp/ccGoSbLI.s 			page 59


 1420 0648 1A80     		strh	r2, [r3]	@ tmp551, acum_secs_index
 862:src/main.c    **** 							show_power_index++;
 1421              		.loc 2 862 0
 1422 064a 504B     		ldr	r3, .L82+28	@ tmp552,
 1423 064c 1B88     		ldrh	r3, [r3]	@ D.7144, show_power_index
 1424 064e 0133     		adds	r3, r3, #1	@ tmp553,
 1425 0650 9AB2     		uxth	r2, r3	@ D.7144, tmp553
 1426 0652 4E4B     		ldr	r3, .L82+28	@ tmp554,
 1427 0654 1A80     		strh	r2, [r3]	@ tmp555, show_power_index
 863:src/main.c    **** 							need_to_save = 1;			//aviso que en algun momento hay que guardar
 1428              		.loc 2 863 0
 1429 0656 8623     		movs	r3, #134	@ tmp556,
 1430 0658 6B44     		add	r3, r3, sp	@ tmp556,
 1431 065a 0122     		movs	r2, #1	@ tmp557,
 1432 065c 1A70     		strb	r2, [r3]	@ tmp558, need_to_save
 864:src/main.c    **** 
 865:src/main.c    **** 							if (acum_secs_index >= 1800)
 1433              		.loc 2 865 0
 1434 065e 7A23     		movs	r3, #122	@ tmp559,
 1435 0660 6B44     		add	r3, r3, sp	@ tmp559,
 1436 0662 1B88     		ldrh	r3, [r3]	@ tmp560, acum_secs_index
 1437 0664 4E4A     		ldr	r2, .L82+48	@ tmp561,
 1438 0666 9342     		cmp	r3, r2	@ tmp560, tmp561
 1439 0668 10D9     		bls	.L63	@,
 866:src/main.c    **** 							{
 867:src/main.c    **** 								acum_hours += (acum_secs / 1800);	//lo convierto a Wh, para no perder bits en cada cuenta
 1440              		.loc 2 867 0
 1441 066a 1D9A     		ldr	r2, [sp, #116]	@ tmp562, acum_secs
 1442 066c E123     		movs	r3, #225	@ tmp627,
 1443 066e D900     		lsls	r1, r3, #3	@, tmp627,
 1444 0670 1000     		movs	r0, r2	@, tmp562
 1445 0672 FFF7FEFF 		bl	__aeabi_uidiv	@
 1446 0676 0300     		movs	r3, r0	@ tmp565,
 1447 0678 1A00     		movs	r2, r3	@ D.7148, tmp565
 1448 067a 1C9B     		ldr	r3, [sp, #112]	@ tmp567, acum_hours
 1449 067c 9B18     		adds	r3, r3, r2	@ tmp566, tmp567, D.7148
 1450 067e 1C93     		str	r3, [sp, #112]	@ tmp566, acum_hours
 868:src/main.c    **** 								acum_secs = 0;
 1451              		.loc 2 868 0
 1452 0680 0023     		movs	r3, #0	@ tmp568,
 1453 0682 1D93     		str	r3, [sp, #116]	@ tmp568, acum_secs
 869:src/main.c    **** 								acum_secs_index = 0;
 1454              		.loc 2 869 0
 1455 0684 7A23     		movs	r3, #122	@ tmp569,
 1456 0686 6B44     		add	r3, r3, sp	@ tmp569,
 1457 0688 0022     		movs	r2, #0	@ tmp570,
 1458 068a 1A80     		strh	r2, [r3]	@ tmp571, acum_secs_index
 1459              	.L63:
 870:src/main.c    **** 							}
 871:src/main.c    **** 							//cuando termino una medicion completa aviso con meas_end
 872:src/main.c    **** 							meas_end = 1;
 1460              		.loc 2 872 0
 1461 068c 1BAB     		add	r3, sp, #108	@ tmp572,,
 1462 068e 0122     		movs	r2, #1	@ tmp573,
 1463 0690 1A70     		strb	r2, [r3]	@ tmp574, meas_end
 1464              	.L59:
 873:src/main.c    **** 						}
ARM GAS  /tmp/ccGoSbLI.s 			page 60


 874:src/main.c    **** 						timer_meas = 200;		//10 veces 200ms
 1465              		.loc 2 874 0
 1466 0692 404B     		ldr	r3, .L82+36	@ tmp575,
 1467 0694 C822     		movs	r2, #200	@ tmp576,
 1468 0696 1A70     		strb	r2, [r3]	@ tmp577, timer_meas
 875:src/main.c    **** 					}
 876:src/main.c    **** 				}
 877:src/main.c    **** 				break;	//termina LAMP_ON
 1469              		.loc 2 877 0
 1470 0698 2AE0     		b	.L78	@
 1471              	.L33:
 878:src/main.c    **** 
 879:src/main.c    **** 			case GO_TO_MAINS_FAILURE:
 880:src/main.c    **** 				//apago el gsm
 881:src/main.c    **** 				FuncsGSMShutdown ();
 1472              		.loc 2 881 0
 1473 069a FFF7FEFF 		bl	FuncsGSMShutdown	@
 882:src/main.c    **** 				main_state = MAINS_FAILURE;
 1474              		.loc 2 882 0
 1475 069e 6F23     		movs	r3, #111	@ tmp578,
 1476 06a0 6B44     		add	r3, r3, sp	@ tmp578,
 1477 06a2 0A22     		movs	r2, #10	@ tmp579,
 1478 06a4 1A70     		strb	r2, [r3]	@ tmp580, main_state
 883:src/main.c    **** 				Update_TIM3_CH1 (0);
 1479              		.loc 2 883 0
 1480 06a6 0020     		movs	r0, #0	@,
 1481 06a8 FFF7FEFF 		bl	Update_TIM3_CH1	@
 884:src/main.c    **** 
 885:src/main.c    **** 				//espero 10 segundos como minimo
 886:src/main.c    **** 				timer_standby = 10000;
 1482              		.loc 2 886 0
 1483 06ac 3D4B     		ldr	r3, .L82+52	@ tmp581,
 1484 06ae 364A     		ldr	r2, .L82+24	@ tmp582,
 1485 06b0 1A80     		strh	r2, [r3]	@ tmp583, timer_standby
 887:src/main.c    **** 				Usart2Send("LOW MAINS VOLTAGE\r\n");
 1486              		.loc 2 887 0
 1487 06b2 3D4B     		ldr	r3, .L82+56	@ tmp584,
 1488 06b4 1800     		movs	r0, r3	@, tmp584
 1489 06b6 FFF7FEFF 		bl	Usart2Send	@
 888:src/main.c    **** 				break;
 1490              		.loc 2 888 0
 1491 06ba 1CE0     		b	.L35	@
 1492              	.L34:
 889:src/main.c    **** 
 890:src/main.c    **** 			case MAINS_FAILURE:
 891:src/main.c    **** 				if ((!timer_standby) && (mains_voltage_filtered > CONNECT_VOLTAGE))
 1493              		.loc 2 891 0
 1494 06bc 394B     		ldr	r3, .L82+52	@ tmp585,
 1495 06be 1B88     		ldrh	r3, [r3]	@ tmp586, timer_standby
 1496 06c0 9BB2     		uxth	r3, r3	@ D.7144, tmp586
 1497 06c2 002B     		cmp	r3, #0	@ D.7144,
 1498 06c4 16D1     		bne	.L79	@,
 1499              		.loc 2 891 0 is_stmt 0 discriminator 1
 1500 06c6 394B     		ldr	r3, .L82+60	@ tmp587,
 1501 06c8 1B88     		ldrh	r3, [r3]	@ D.7144, mains_voltage_filtered
 1502 06ca 394A     		ldr	r2, .L82+64	@ tmp588,
 1503 06cc 9342     		cmp	r3, r2	@ D.7144, tmp588
ARM GAS  /tmp/ccGoSbLI.s 			page 61


 1504 06ce 11D9     		bls	.L79	@,
 892:src/main.c    **** 				{
 893:src/main.c    **** 					main_state = MAIN_INIT;
 1505              		.loc 2 893 0 is_stmt 1
 1506 06d0 6F23     		movs	r3, #111	@ tmp589,
 1507 06d2 6B44     		add	r3, r3, sp	@ tmp589,
 1508 06d4 0022     		movs	r2, #0	@ tmp590,
 1509 06d6 1A70     		strb	r2, [r3]	@ tmp591, main_state
 894:src/main.c    **** 				}
 895:src/main.c    **** 				break;
 1510              		.loc 2 895 0
 1511 06d8 0CE0     		b	.L79	@
 1512              	.L25:
 896:src/main.c    **** 
 897:src/main.c    **** 			default:
 898:src/main.c    **** 				main_state = MAIN_INIT;
 1513              		.loc 2 898 0
 1514 06da 6F23     		movs	r3, #111	@ tmp592,
 1515 06dc 6B44     		add	r3, r3, sp	@ tmp592,
 1516 06de 0022     		movs	r2, #0	@ tmp593,
 1517 06e0 1A70     		strb	r2, [r3]	@ tmp594, main_state
 899:src/main.c    **** 				break;
 1518              		.loc 2 899 0
 1519 06e2 08E0     		b	.L35	@
 1520              	.L72:
 564:src/main.c    **** 
 1521              		.loc 2 564 0
 1522 06e4 C046     		nop
 1523 06e6 06E0     		b	.L35	@
 1524              	.L73:
 587:src/main.c    **** 
 1525              		.loc 2 587 0
 1526 06e8 C046     		nop
 1527 06ea 04E0     		b	.L35	@
 1528              	.L74:
 624:src/main.c    **** 
 1529              		.loc 2 624 0
 1530 06ec C046     		nop
 1531 06ee 02E0     		b	.L35	@
 1532              	.L78:
 877:src/main.c    **** 
 1533              		.loc 2 877 0
 1534 06f0 C046     		nop
 1535 06f2 00E0     		b	.L35	@
 1536              	.L79:
 895:src/main.c    **** 
 1537              		.loc 2 895 0
 1538 06f4 C046     		nop
 1539              	.L35:
 900:src/main.c    **** 		}
 901:src/main.c    **** 
 902:src/main.c    **** 		//Cosas que dependen de las muestras
 903:src/main.c    **** 		if (seq_ready)
 1540              		.loc 2 903 0
 1541 06f6 2F4B     		ldr	r3, .L82+68	@ tmp595,
 1542 06f8 1B78     		ldrb	r3, [r3]	@ tmp596, seq_ready
 1543 06fa DBB2     		uxtb	r3, r3	@ D.7146, tmp596
ARM GAS  /tmp/ccGoSbLI.s 			page 62


 1544 06fc 002B     		cmp	r3, #0	@ D.7146,
 1545 06fe 06D0     		beq	.L65	@,
 904:src/main.c    **** 		{
 905:src/main.c    **** 			seq_ready = 0;
 1546              		.loc 2 905 0
 1547 0700 2C4B     		ldr	r3, .L82+68	@ tmp597,
 1548 0702 0022     		movs	r2, #0	@ tmp598,
 1549 0704 1A70     		strb	r2, [r3]	@ tmp599, seq_ready
 906:src/main.c    **** 			UpdateVGrid ();
 1550              		.loc 2 906 0
 1551 0706 FFF7FEFF 		bl	UpdateVGrid	@
 907:src/main.c    **** 			UpdateIGrid ();
 1552              		.loc 2 907 0
 1553 070a FFF7FEFF 		bl	UpdateIGrid	@
 1554              	.L65:
 908:src/main.c    **** 		}
 909:src/main.c    **** 
 910:src/main.c    **** 		//reviso si hay problemas de alimentacion
 911:src/main.c    **** 		if ((main_state > SET_ZERO_CURRENT) && (main_state < GO_TO_MAINS_FAILURE))		//TODO: si es un glit
 1555              		.loc 2 911 0
 1556 070e 6F23     		movs	r3, #111	@ tmp600,
 1557 0710 6B44     		add	r3, r3, sp	@ tmp600,
 1558 0712 1B78     		ldrb	r3, [r3]	@ tmp601, main_state
 1559 0714 022B     		cmp	r3, #2	@ tmp601,
 1560 0716 5FD9     		bls	.L66	@,
 1561              		.loc 2 911 0 is_stmt 0 discriminator 1
 1562 0718 6F23     		movs	r3, #111	@ tmp602,
 1563 071a 6B44     		add	r3, r3, sp	@ tmp602,
 1564 071c 1B78     		ldrb	r3, [r3]	@ tmp603, main_state
 1565 071e 082B     		cmp	r3, #8	@ tmp603,
 1566 0720 5AD8     		bhi	.L66	@,
 1567              	.LBB2:
 912:src/main.c    **** 		{
 913:src/main.c    **** 			if (Mains_Glitch() || (mains_voltage_filtered < DISCONNECT_VOLTAGE))
 1568              		.loc 2 913 0 is_stmt 1
 1569 0722 FFF7FEFF 		bl	Mains_Glitch	@
 1570 0726 031E     		subs	r3, r0, #0	@ D.7145,,
 1571 0728 04D1     		bne	.L67	@,
 1572              		.loc 2 913 0 is_stmt 0 discriminator 1
 1573 072a 204B     		ldr	r3, .L82+60	@ tmp604,
 1574 072c 1B88     		ldrh	r3, [r3]	@ D.7144, mains_voltage_filtered
 1575 072e 224A     		ldr	r2, .L82+72	@ tmp605,
 1576 0730 9342     		cmp	r3, r2	@ D.7144, tmp605
 1577 0732 51D8     		bhi	.L66	@,
 1578              	.L67:
 914:src/main.c    **** 			{
 915:src/main.c    **** 				if (need_to_save)
 1579              		.loc 2 915 0 is_stmt 1
 1580 0734 8623     		movs	r3, #134	@ tmp606,
 1581 0736 6B44     		add	r3, r3, sp	@ tmp606,
 1582 0738 1B78     		ldrb	r3, [r3]	@ tmp607, need_to_save
 1583 073a 002B     		cmp	r3, #0	@ tmp607,
 1584 073c 48D0     		beq	.L68	@,
 916:src/main.c    **** 				{
 917:src/main.c    **** 					RelayOffFast ();
 1585              		.loc 2 917 0
 1586 073e FFF7FEFF 		bl	RelayOffFast	@
ARM GAS  /tmp/ccGoSbLI.s 			page 63


 918:src/main.c    **** 					//update de memoria
 919:src/main.c    **** 					param_struct.acumm_w2s = acum_secs;
 1587              		.loc 2 919 0
 1588 0742 0F4B     		ldr	r3, .L82+16	@ tmp608,
 1589 0744 1D9A     		ldr	r2, [sp, #116]	@ tmp609, acum_secs
 1590 0746 DA64     		str	r2, [r3, #76]	@ tmp609, param_struct.acumm_w2s
 920:src/main.c    **** 					param_struct.acumm_w2s_index = acum_secs_index;
 1591              		.loc 2 920 0
 1592 0748 0D4B     		ldr	r3, .L82+16	@ tmp610,
 1593 074a 7A22     		movs	r2, #122	@ tmp611,
 1594 074c 6A44     		add	r2, r2, sp	@ tmp611,
 1595 074e 5021     		movs	r1, #80	@ tmp612,
 1596 0750 1288     		ldrh	r2, [r2]	@ tmp613, acum_secs_index
 1597 0752 5A52     		strh	r2, [r3, r1]	@ tmp613, param_struct.acumm_w2s_index
 921:src/main.c    **** 					param_struct.acumm_wh = acum_hours;
 1598              		.loc 2 921 0
 1599 0754 0A4B     		ldr	r3, .L82+16	@ tmp614,
 1600 0756 1C9A     		ldr	r2, [sp, #112]	@ tmp615, acum_hours
 1601 0758 9A64     		str	r2, [r3, #72]	@ tmp615, param_struct.acumm_wh
 922:src/main.c    **** 
 923:src/main.c    **** 					if (WriteConfigurations(&param_struct))
 1602              		.loc 2 923 0
 1603 075a 094B     		ldr	r3, .L82+16	@ tmp616,
 1604 075c 1800     		movs	r0, r3	@, tmp616
 1605 075e FFF7FEFF 		bl	WriteConfigurations	@
 1606 0762 031E     		subs	r3, r0, #0	@ tmp617,,
 1607 0764 2CD0     		beq	.L69	@,
 924:src/main.c    **** 						Usart2Send("Saved OK!\r\n");
 1608              		.loc 2 924 0
 1609 0766 154B     		ldr	r3, .L82+76	@ tmp619,
 1610 0768 1800     		movs	r0, r3	@, tmp619
 1611 076a FFF7FEFF 		bl	Usart2Send	@
 1612 076e 2BE0     		b	.L70	@
 1613              	.L83:
 1614              		.align	2
 1615              	.L82:
 1616 0770 00000000 		.word	tt_relay_on_off
 1617 0774 00000000 		.word	hours
 1618 0778 8A0E0000 		.word	3722
 1619 077c D4000000 		.word	.LC32
 1620 0780 00000000 		.word	param_struct
 1621 0784 E0000000 		.word	.LC34
 1622 0788 10270000 		.word	10000
 1623 078c 00000000 		.word	show_power_index
 1624 0790 00000000 		.word	timer_rep
 1625 0794 00000000 		.word	timer_meas
 1626 0798 00000000 		.word	power_vect
 1627 079c E1050000 		.word	1505
 1628 07a0 07070000 		.word	1799
 1629 07a4 00000000 		.word	timer_standby
 1630 07a8 E8000000 		.word	.LC38
 1631 07ac 00000000 		.word	mains_voltage_filtered
 1632 07b0 F3070000 		.word	2035
 1633 07b4 00000000 		.word	seq_ready
 1634 07b8 7D060000 		.word	1661
 1635 07bc FC000000 		.word	.LC40
 1636              	.L69:
ARM GAS  /tmp/ccGoSbLI.s 			page 64


 925:src/main.c    **** 					else
 926:src/main.c    **** 						Usart2Send("Mem Error!\r\n");
 1637              		.loc 2 926 0
 1638 07c0 094B     		ldr	r3, .L84	@ tmp620,
 1639 07c2 1800     		movs	r0, r3	@, tmp620
 1640 07c4 FFF7FEFF 		bl	Usart2Send	@
 1641              	.L70:
 927:src/main.c    **** 					need_to_save = 0;
 1642              		.loc 2 927 0
 1643 07c8 8623     		movs	r3, #134	@ tmp621,
 1644 07ca 6B44     		add	r3, r3, sp	@ tmp621,
 1645 07cc 0022     		movs	r2, #0	@ tmp622,
 1646 07ce 1A70     		strb	r2, [r3]	@ tmp623, need_to_save
 1647              	.L68:
 928:src/main.c    **** 				}
 929:src/main.c    **** 				main_state = GO_TO_MAINS_FAILURE;
 1648              		.loc 2 929 0
 1649 07d0 6F23     		movs	r3, #111	@ tmp624,
 1650 07d2 6B44     		add	r3, r3, sp	@ tmp624,
 1651 07d4 0922     		movs	r2, #9	@ tmp625,
 1652 07d6 1A70     		strb	r2, [r3]	@ tmp626, main_state
 1653              	.L66:
 1654              	.LBE2:
 930:src/main.c    **** 			}
 931:src/main.c    **** 		}
 932:src/main.c    **** 
 933:src/main.c    **** 		//Cosas que no dependen del estado del programa
 934:src/main.c    **** 		UpdateRelay ();
 1655              		.loc 2 934 0
 1656 07d8 FFF7FEFF 		bl	UpdateRelay	@
 935:src/main.c    **** 		UpdatePhotoTransistor();
 1657              		.loc 2 935 0
 1658 07dc FFF7FEFF 		bl	UpdatePhotoTransistor	@
 936:src/main.c    **** #ifdef USE_GSM
 937:src/main.c    **** 		FuncsGSM();
 1659              		.loc 2 937 0
 1660 07e0 FFF7FEFF 		bl	FuncsGSM	@
 938:src/main.c    **** #endif
 939:src/main.c    **** 	}	//end while 1
 1661              		.loc 2 939 0
 1662 07e4 ECE4     		b	.L71	@
 1663              	.L85:
 1664 07e6 C046     		.align	2
 1665              	.L84:
 1666 07e8 08010000 		.word	.LC42
 1667              		.cfi_endproc
 1668              	.LFE20:
 1669              		.size	main, .-main
 1670              		.section	.rodata
 1671 0115 000000   		.align	2
 1672              	.LC44:
 1673 0118 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1673      3A7B226D 
 1673      794E616D 
 1673      65223A22 
 1673      4E75636C 
 1674              		.align	2
ARM GAS  /tmp/ccGoSbLI.s 			page 65


 1675              	.LC46:
 1676 0130 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1676      54656D70 
 1676      65726174 
 1676      75726522 
 1676      3A256C75 
 1677 0149 000000   		.align	2
 1678              	.LC48:
 1679 014c 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1679      48756D69 
 1679      64697479 
 1679      223A256C 
 1679      752E256C 
 1680 0162 0000     		.align	2
 1681              	.LC50:
 1682 0164 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1682      50726573 
 1682      73757265 
 1682      223A256C 
 1682      752E256C 
 1683 017a 0000     		.align	2
 1684              	.LC52:
 1685 017c 7D7D00   		.ascii	"}}\000"
 1686              		.section	.text.prepare_json_pkt,"ax",%progbits
 1687              		.align	2
 1688              		.global	prepare_json_pkt
 1689              		.code	16
 1690              		.thumb_func
 1691              		.type	prepare_json_pkt, %function
 1692              	prepare_json_pkt:
 1693              	.LFB21:
 940:src/main.c    **** 
 941:src/main.c    **** //---------- Fin Programa de Produccion Redonda Basic--------//
 942:src/main.c    **** #endif	//USE_REDONDA_BASIC
 943:src/main.c    **** 
 944:src/main.c    **** 
 945:src/main.c    **** 
 946:src/main.c    **** //--- Programa Solo medicion de potencia -----
 947:src/main.c    **** #ifdef USE_ONLY_POWER_SENSE
 948:src/main.c    **** 	// USART1Config();
 949:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 950:src/main.c    **** 
 951:src/main.c    **** 	TIM_3_Init ();					//lo utilizo para 1 a 10V y para synchro ADC
 952:src/main.c    **** 
 953:src/main.c    **** 	TIM_16_Init();					//o utilizo para synchro de relay
 954:src/main.c    **** 	TIM16Enable();
 955:src/main.c    **** 
 956:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Only Power\r\n");
 957:src/main.c    **** 
 958:src/main.c    **** 	for (i = 0; i < 16; i++)
 959:src/main.c    **** 	{
 960:src/main.c    **** 		if (LED)
 961:src/main.c    **** 			LED_OFF;
 962:src/main.c    **** 		else
 963:src/main.c    **** 			LED_ON;
 964:src/main.c    **** 
 965:src/main.c    **** 		Wait_ms (250);
ARM GAS  /tmp/ccGoSbLI.s 			page 66


 966:src/main.c    **** 	}
 967:src/main.c    **** 
 968:src/main.c    **** 
 969:src/main.c    **** 	timer_standby = 2000;
 970:src/main.c    **** 	FuncsGSMReset();
 971:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 972:src/main.c    **** 
 973:src/main.c    **** 	while (1)
 974:src/main.c    **** 	{
 975:src/main.c    **** 		switch (main_state)
 976:src/main.c    **** 		{
 977:src/main.c    **** 			case MAIN_INIT:
 978:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 979:src/main.c    **** 				main_state = SYNCHRO_ADC;
 980:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 981:src/main.c    **** 				seq_ready = 0;
 982:src/main.c    **** 				break;
 983:src/main.c    **** 
 984:src/main.c    **** 			case SYNCHRO_ADC:
 985:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 986:src/main.c    **** 				{
 987:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 988:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 989:src/main.c    **** 					timer_standby = 8000;
 990:src/main.c    **** 					zero_current_loc = 0;
 991:src/main.c    **** 					i = 0;
 992:src/main.c    **** 				}
 993:src/main.c    **** 				break;
 994:src/main.c    **** 
 995:src/main.c    **** 			case SET_ZERO_CURRENT:
 996:src/main.c    **** 				if ((!timer_standby) && (mains_voltage_filtered > CONNECT_VOLTAGE))
 997:src/main.c    **** 				{
 998:src/main.c    **** 					if (i < 32)
 999:src/main.c    **** 					{
1000:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
1001:src/main.c    **** 						{
1002:src/main.c    **** 							seq_ready = 0;
1003:src/main.c    **** 							zero_current_loc += I_Sense;
1004:src/main.c    **** 							i++;
1005:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
1006:src/main.c    **** 						}
1007:src/main.c    **** 					}
1008:src/main.c    **** 					else
1009:src/main.c    **** 					{
1010:src/main.c    **** 						zero_current_loc >>= 5;
1011:src/main.c    **** 						zero_current = zero_current_loc;
1012:src/main.c    **** 						FuncsGSMShutdownAlways();
1013:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
1014:src/main.c    **** 						i = 0;
1015:src/main.c    **** 					}
1016:src/main.c    **** 				}
1017:src/main.c    **** 				break;
1018:src/main.c    **** 
1019:src/main.c    **** 			case SET_COUNTERS_AND_PHONE0:
1020:src/main.c    **** 				//cargo contadores desde la flash
1021:src/main.c    **** 				acum_secs = param_struct.acumm_w2s;
1022:src/main.c    **** 				acum_secs_index = param_struct.acumm_w2s_index;
ARM GAS  /tmp/ccGoSbLI.s 			page 67


1023:src/main.c    **** 				acum_hours = param_struct.acumm_wh;
1024:src/main.c    **** 
1025:src/main.c    **** 				counters_mode = 0;
1026:src/main.c    **** 				LED_OFF;
1027:src/main.c    **** 
1028:src/main.c    **** 				//espero que el telefono este libre
1029:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_stop_always)
1030:src/main.c    **** 				{
1031:src/main.c    **** 					Usart2Send((char *) (const char *) "Phone Shutdown\r\n");
1032:src/main.c    **** 					main_state = SET_COUNTERS_AND_PHONE1;
1033:src/main.c    **** 				}
1034:src/main.c    **** 				break;
1035:src/main.c    **** 
1036:src/main.c    **** 			case SET_COUNTERS_AND_PHONE1:
1037:src/main.c    **** 				LED_ON;
1038:src/main.c    **** 				Usart2Send("PRENDIDO\r\n");
1039:src/main.c    **** 				Update_TIM3_CH1 (PWM_MAX);
1040:src/main.c    **** 				main_state = LAMP_ON;
1041:src/main.c    **** 				break;
1042:src/main.c    **** 
1043:src/main.c    **** 			case LAMP_ON:
1044:src/main.c    **** 				switch (lamp_on_state)
1045:src/main.c    **** 				{
1046:src/main.c    **** 					case init_airplane0:
1047:src/main.c    **** 						lamp_on_state++;
1048:src/main.c    **** 						break;
1049:src/main.c    **** 
1050:src/main.c    **** 					case init_airplane1:
1051:src/main.c    **** 						lamp_on_state++;
1052:src/main.c    **** 						break;
1053:src/main.c    **** 
1054:src/main.c    **** 					case meas_init:
1055:src/main.c    **** 						RelayOn();
1056:src/main.c    **** 						lamp_on_state = meas_meas;
1057:src/main.c    **** 						counters_mode = 1;
1058:src/main.c    **** 						timer_meas = 200;		//le doy 200ms de buffer a la medicion
1059:src/main.c    **** 						//esto en realidad es un indice de 2 segundos de tick, la info esta en minutos
1060:src/main.c    **** 						timer_rep = param_struct.timer_reportar * 30;
1061:src/main.c    **** 						break;
1062:src/main.c    **** 
1063:src/main.c    **** 					case meas_meas:
1064:src/main.c    **** 						if (meas_end)		//termino una vuelta de mediciones, generalmente 2 segundos
1065:src/main.c    **** 						{
1066:src/main.c    **** 							meas_end = 0;
1067:src/main.c    **** 
1068:src/main.c    **** 							//No apago, tengo que reportar?
1069:src/main.c    **** 							if (show_power_index >= timer_rep)
1070:src/main.c    **** 							{
1071:src/main.c    **** 								show_power_index = 0;
1072:src/main.c    **** 								counters_mode = 2;		//paso al modo memoria de medicion
1073:src/main.c    **** 								lamp_on_state = meas_reporting0;
1074:src/main.c    **** 								LED_OFF;
1075:src/main.c    **** 							}
1076:src/main.c    **** 						}
1077:src/main.c    **** 						break;
1078:src/main.c    **** 
1079:src/main.c    **** 					case meas_reporting0:
ARM GAS  /tmp/ccGoSbLI.s 			page 68


1080:src/main.c    **** 						ShowPower(s_lcd, power, acum_hours, acum_secs);
1081:src/main.c    **** 						Usart2Send(s_lcd);
1082:src/main.c    **** 						lamp_on_state = meas_reporting1;
1083:src/main.c    **** 						break;
1084:src/main.c    **** 
1085:src/main.c    **** 					case meas_reporting1:
1086:src/main.c    **** 						if (meas_end)		//me sincronizo nuevamente con la medicion
1087:src/main.c    **** 						{
1088:src/main.c    **** 							meas_end = 0;
1089:src/main.c    **** 							LED_ON;
1090:src/main.c    **** 							counters_mode = 1;
1091:src/main.c    **** 							lamp_on_state = meas_meas;
1092:src/main.c    **** 						}
1093:src/main.c    **** 						break;
1094:src/main.c    **** 
1095:src/main.c    **** 					default:
1096:src/main.c    **** 						lamp_on_state = init_airplane0;
1097:src/main.c    **** 						break;
1098:src/main.c    **** 				}
1099:src/main.c    **** 
1100:src/main.c    **** 				if (counters_mode)	//si esta activo el modo de contadores mido
1101:src/main.c    **** 				{
1102:src/main.c    **** 					if (!timer_meas)	//update cada 200ms
1103:src/main.c    **** 					{
1104:src/main.c    **** 						if (i < SIZEOF_POWER_VECT)
1105:src/main.c    **** 						{
1106:src/main.c    **** 							power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
1107:src/main.c    **** 							i++;
1108:src/main.c    **** 						}
1109:src/main.c    **** 						else
1110:src/main.c    **** 						{		//termine de cargar el vector, guardo muestro info
1111:src/main.c    **** 							i = 0;
1112:src/main.c    **** 
1113:src/main.c    **** 							if (counters_mode == 1)	//mido normalmente
1114:src/main.c    **** 							{
1115:src/main.c    **** 								power = PowerCalcMean8(power_vect);
1116:src/main.c    **** 								// power = 9871;	//100w forzados para evaluar contadores
1117:src/main.c    **** 														//9871 * KW = 100
1118:src/main.c    **** 								if (power < MIN_SENSE_POWER)	//minimo de medicion
1119:src/main.c    **** 									power = 0;
1120:src/main.c    **** 
1121:src/main.c    **** 								last_power = power;
1122:src/main.c    **** 							}
1123:src/main.c    **** 
1124:src/main.c    **** 							if (counters_mode == 2)	//no mido solo update de lo viejo
1125:src/main.c    **** 								power = last_power;
1126:src/main.c    **** 
1127:src/main.c    **** 							acum_secs += power;
1128:src/main.c    **** 							acum_secs_index++;
1129:src/main.c    **** 							show_power_index++;
1130:src/main.c    **** 							need_to_save = 1;			//aviso que en algun momento hay que guardar
1131:src/main.c    **** 
1132:src/main.c    **** 							if (acum_secs_index >= 1800)
1133:src/main.c    **** 							{
1134:src/main.c    **** 								acum_hours += (acum_secs / 1800);	//lo convierto a Wh, para no perder bits en cada cuenta
1135:src/main.c    **** 								acum_secs = 0;
1136:src/main.c    **** 								acum_secs_index = 0;
ARM GAS  /tmp/ccGoSbLI.s 			page 69


1137:src/main.c    **** 							}
1138:src/main.c    **** 							//cuando termino una medicion completa aviso con meas_end
1139:src/main.c    **** 							meas_end = 1;
1140:src/main.c    **** 						}
1141:src/main.c    **** 						timer_meas = 200;		//10 veces 200ms
1142:src/main.c    **** 					}
1143:src/main.c    **** 				}
1144:src/main.c    **** 				break;	//termina LAMP_ON
1145:src/main.c    **** 
1146:src/main.c    **** 			case GO_TO_MAINS_FAILURE:
1147:src/main.c    **** 				break;
1148:src/main.c    **** 
1149:src/main.c    **** 			case MAINS_FAILURE:
1150:src/main.c    **** 				break;
1151:src/main.c    **** 
1152:src/main.c    **** 			default:
1153:src/main.c    **** 				main_state = MAIN_INIT;
1154:src/main.c    **** 				break;
1155:src/main.c    **** 		}	//fin switch main_state
1156:src/main.c    **** 
1157:src/main.c    **** 		//Cosas que dependen de las muestras
1158:src/main.c    **** 		if (seq_ready)
1159:src/main.c    **** 		{
1160:src/main.c    **** 			seq_ready = 0;
1161:src/main.c    **** 			UpdateVGrid ();
1162:src/main.c    **** 			UpdateIGrid ();
1163:src/main.c    **** 		}
1164:src/main.c    **** 
1165:src/main.c    **** 		//Cosas que no dependen del estado del programa
1166:src/main.c    **** 		UpdateRelay ();
1167:src/main.c    **** #ifdef USE_GSM
1168:src/main.c    **** 		FuncsGSM();
1169:src/main.c    **** #endif
1170:src/main.c    **** 	}	//end while 1
1171:src/main.c    **** 
1172:src/main.c    **** //--- FIN Programa de pruebas I meas -----
1173:src/main.c    **** #endif
1174:src/main.c    **** 
1175:src/main.c    **** #ifdef USE_MQTT_LIB
1176:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
1177:src/main.c    **** 	int rc = 0;
1178:src/main.c    **** 	char buf[200];
1179:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
1180:src/main.c    **** 	char* payload = "mypayload";
1181:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
1182:src/main.c    **** 	int len = 0;
1183:src/main.c    **** 
1184:src/main.c    **** 	data.clientID.cstring = "me";
1185:src/main.c    **** 	data.keepAliveInterval = 20;
1186:src/main.c    **** 	data.cleansession = 1;
1187:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
1188:src/main.c    **** 
1189:src/main.c    **** 	topicString.cstring = "mytopic";
1190:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
1191:src/main.c    **** 
1192:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
1193:src/main.c    **** 	//falta abrir puerto
ARM GAS  /tmp/ccGoSbLI.s 			page 70


1194:src/main.c    **** 	//falta enviar al socket
1195:src/main.c    **** 	//falta cerrar socket
1196:src/main.c    **** #endif
1197:src/main.c    **** 
1198:src/main.c    **** //	//---------- Prueba USART2 --------//
1199:src/main.c    **** //
1200:src/main.c    **** //    while( 1 )
1201:src/main.c    **** //    {
1202:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1203:src/main.c    **** //        Wait_ms(3000);
1204:src/main.c    **** //    }
1205:src/main.c    **** //
1206:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
1207:src/main.c    **** 
1208:src/main.c    **** 	//---------- Prueba con GPS --------//
1209:src/main.c    **** #ifdef USE_GPS
1210:src/main.c    **** 	Usart2SendSingle('M');
1211:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1212:src/main.c    **** 	Wait_ms(1000);
1213:src/main.c    **** 
1214:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
1215:src/main.c    **** 
1216:src/main.c    **** 	//mando reset al gps
1217:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
1218:src/main.c    **** 	GPSStartResetSM ();
1219:src/main.c    **** 	while (GPSStart() != RESP_OK);
1220:src/main.c    **** 
1221:src/main.c    **** 	//mando conf al gps
1222:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
1223:src/main.c    **** 	GPSConfigResetSM ();
1224:src/main.c    **** 	while (GPSConfig() != RESP_OK);
1225:src/main.c    **** 
1226:src/main.c    **** //	//mando reset factory al gps
1227:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
1228:src/main.c    **** //	GPSResetFactoryResetSM ();
1229:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
1230:src/main.c    **** 
1231:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
1232:src/main.c    **** //	timer_standby = 60000;
1233:src/main.c    **** //	while( timer_standby )
1234:src/main.c    **** 	while( 1 )
1235:src/main.c    **** 	{
1236:src/main.c    **** 		if (gps_pckt_ready)
1237:src/main.c    **** 		{
1238:src/main.c    **** 			gps_pckt_ready = 0;
1239:src/main.c    **** 			//Usart2SendSingle('P');
1240:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
1241:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
1242:src/main.c    **** 		}
1243:src/main.c    **** 
1244:src/main.c    **** 		GPSProcess();
1245:src/main.c    **** 	}
1246:src/main.c    **** #endif
1247:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
1248:src/main.c    **** 
1249:src/main.c    **** 	//---------- Prueba con GSM --------//
1250:src/main.c    **** #ifdef USE_GSM
ARM GAS  /tmp/ccGoSbLI.s 			page 71


1251:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
1252:src/main.c    **** 
1253:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
1254:src/main.c    **** 
1255:src/main.c    **** 
1256:src/main.c    **** 	//Pruebo USART1
1257:src/main.c    **** //	while (1)
1258:src/main.c    **** //	{
1259:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
1260:src/main.c    **** //			Wait_ms(50);
1261:src/main.c    **** //	}
1262:src/main.c    **** 
1263:src/main.c    **** 
1264:src/main.c    **** 	//mando start al gsm
1265:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
1266:src/main.c    **** 	//GPSStartResetSM ();
1267:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
1268:src/main.c    **** 	while (timer_standby)
1269:src/main.c    **** 	{
1270:src/main.c    **** 		i = GSM_Start();
1271:src/main.c    **** 		if (i == 2)
1272:src/main.c    **** 		{
1273:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
1274:src/main.c    **** 			timer_standby = 0;
1275:src/main.c    **** 		}
1276:src/main.c    **** 
1277:src/main.c    **** 		if (i == 4)
1278:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
1279:src/main.c    **** 	}
1280:src/main.c    **** 
1281:src/main.c    **** 	//mando conf al gsm
1282:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
1283:src/main.c    **** 	//GPSConfigResetSM ();
1284:src/main.c    **** 
1285:src/main.c    **** 	i = 0;
1286:src/main.c    **** 	while (i == 0)
1287:src/main.c    **** 	{
1288:src/main.c    **** 		ii = GSM_Config(1000);
1289:src/main.c    **** 
1290:src/main.c    **** 		if (ii == 2)
1291:src/main.c    **** 			i = 0;
1292:src/main.c    **** 		else if (ii > 2)
1293:src/main.c    **** 		{
1294:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
1295:src/main.c    **** 			while (1);
1296:src/main.c    **** 		}
1297:src/main.c    **** 
1298:src/main.c    **** 		GSMProcess();
1299:src/main.c    **** 		GSMReceive ();
1300:src/main.c    **** 
1301:src/main.c    **** 		if (gsm_pckt_ready)
1302:src/main.c    **** 		{
1303:src/main.c    **** 			gsm_pckt_ready = 0;
1304:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1305:src/main.c    **** 		}
1306:src/main.c    **** 
1307:src/main.c    **** 		if (LIGHT)
ARM GAS  /tmp/ccGoSbLI.s 			page 72


1308:src/main.c    **** 			LED_ON;
1309:src/main.c    **** 		else
1310:src/main.c    **** 			LED_OFF;
1311:src/main.c    **** 	}
1312:src/main.c    **** 
1313:src/main.c    **** 
1314:src/main.c    **** 	while( 1 )
1315:src/main.c    **** 	{
1316:src/main.c    **** 		if (gsm_pckt_ready)
1317:src/main.c    **** 		{
1318:src/main.c    **** 			gsm_pckt_ready = 0;
1319:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1320:src/main.c    **** 		}
1321:src/main.c    **** 
1322:src/main.c    **** 		GSMProcess();
1323:src/main.c    **** 
1324:src/main.c    **** 		if (LIGHT)
1325:src/main.c    **** 			LED_ON;
1326:src/main.c    **** 
1327:src/main.c    **** 	}
1328:src/main.c    **** #endif
1329:src/main.c    **** 
1330:src/main.c    **** 
1331:src/main.c    **** 
1332:src/main.c    **** 
1333:src/main.c    **** 	//---------- Prueba temp --------//
1334:src/main.c    **** 	/*
1335:src/main.c    **** 	while (1)
1336:src/main.c    **** 	{
1337:src/main.c    **** 		local_meas = GetTemp();
1338:src/main.c    **** 		if (local_meas != local_meas_last)
1339:src/main.c    **** 		{
1340:src/main.c    **** 			LED_ON;
1341:src/main.c    **** 			local_meas_last = local_meas;
1342:src/main.c    **** 			LCD_2DO_RENGLON;
1343:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
1344:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
1345:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
1346:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
1347:src/main.c    **** 			LCDTransmitStr(s_lcd);
1348:src/main.c    **** 			LED_OFF;
1349:src/main.c    **** 		}
1350:src/main.c    **** 
1351:src/main.c    **** 		UpdateTemp();
1352:src/main.c    **** 	}
1353:src/main.c    **** 	*/
1354:src/main.c    **** 	//---------- Fin prueba temp --------//
1355:src/main.c    **** 
1356:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
1357:src/main.c    **** 	/*
1358:src/main.c    **** 	local_meas = 0;
1359:src/main.c    **** 	while (1)
1360:src/main.c    **** 	{
1361:src/main.c    **** 		LCD_2DO_RENGLON;
1362:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
1363:src/main.c    **** 		fcalc = local_meas;
1364:src/main.c    **** 		fcalc = fcalc * K_1TO10;
ARM GAS  /tmp/ccGoSbLI.s 			page 73


1365:src/main.c    **** 		one_int = (short) fcalc;
1366:src/main.c    **** 		fcalc = fcalc - one_int;
1367:src/main.c    **** 		fcalc = fcalc * 10;
1368:src/main.c    **** 		one_dec = (short) fcalc;
1369:src/main.c    **** 
1370:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
1371:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
1372:src/main.c    **** 		LCDTransmitStr(s_lcd);
1373:src/main.c    **** 
1374:src/main.c    **** 		Wait_ms (1000);
1375:src/main.c    **** 		if (local_meas <= 255)
1376:src/main.c    **** 			local_meas = 0;
1377:src/main.c    **** 		else
1378:src/main.c    **** 			local_meas++;
1379:src/main.c    **** 	}
1380:src/main.c    **** 	*/
1381:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
1382:src/main.c    **** 
1383:src/main.c    **** 
1384:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
1385:src/main.c    **** 
1386:src/main.c    **** 	return 0;
1387:src/main.c    **** }
1388:src/main.c    **** 
1389:src/main.c    **** //--- End of Main ---//
1390:src/main.c    **** 
1391:src/main.c    **** 
1392:src/main.c    **** 
1393:src/main.c    **** 
1394:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
1395:src/main.c    **** {
 1694              		.loc 2 1395 0
 1695              		.cfi_startproc
 1696 0000 00B5     		push	{lr}	@
 1697              	.LCFI6:
 1698              		.cfi_def_cfa_offset 4
 1699              		.cfi_offset 14, -4
 1700 0002 97B0     		sub	sp, sp, #92	@,,
 1701              	.LCFI7:
 1702              		.cfi_def_cfa_offset 96
 1703 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
1396:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1704              		.loc 2 1396 0
 1705 0006 0123     		movs	r3, #1	@ tmp112,
 1706 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1707 000a 0223     		movs	r3, #2	@ tmp113,
 1708 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1709 000e 0323     		movs	r3, #3	@ tmp114,
 1710 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1711 0012 0423     		movs	r3, #4	@ tmp115,
 1712 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1713 0016 0523     		movs	r3, #5	@ tmp116,
 1714 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1715 001a 0623     		movs	r3, #6	@ tmp117,
 1716 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
1397:src/main.c    ****       char tempbuff[40];
1398:src/main.c    ****       volatile float HUMIDITY_Value;
ARM GAS  /tmp/ccGoSbLI.s 			page 74


1399:src/main.c    ****       volatile float TEMPERATURE_Value;
1400:src/main.c    ****       volatile float PRESSURE_Value;
1401:src/main.c    **** 
1402:src/main.c    **** 
1403:src/main.c    **** 
1404:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1717              		.loc 2 1404 0
 1718 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1719 0020 1E4B     		ldr	r3, .L88	@ tmp119,
 1720 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1721 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1722 0026 1823     		movs	r3, #24	@ tmp122,
 1723 0028 1A00     		movs	r2, r3	@, tmp122
 1724 002a FFF7FEFF 		bl	memcpy	@
1405:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1406:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1407:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1725              		.loc 2 1407 0
 1726 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1727 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1728 0032 1B49     		ldr	r1, .L88+4	@ tmp127,
 1729 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1730 0036 FFF7FEFF 		bl	sprintf	@
1408:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1731              		.loc 2 1408 0
 1732 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1733 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1734 003e 1100     		movs	r1, r2	@, tmp129
 1735 0040 1800     		movs	r0, r3	@, tmp130
 1736 0042 FFF7FEFF 		bl	strcat	@
1409:src/main.c    **** 
1410:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1411:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1412:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1737              		.loc 2 1412 0
 1738 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1739 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1740 004a 1649     		ldr	r1, .L88+8	@ tmp133,
 1741 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1742 004e FFF7FEFF 		bl	sprintf	@
1413:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1743              		.loc 2 1413 0
 1744 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1745 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1746 0056 1100     		movs	r1, r2	@, tmp135
 1747 0058 1800     		movs	r0, r3	@, tmp136
 1748 005a FFF7FEFF 		bl	strcat	@
1414:src/main.c    **** 
1415:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1416:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1417:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1749              		.loc 2 1417 0
 1750 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1751 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1752 0062 1149     		ldr	r1, .L88+12	@ tmp139,
 1753 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1754 0066 FFF7FEFF 		bl	sprintf	@
ARM GAS  /tmp/ccGoSbLI.s 			page 75


1418:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1755              		.loc 2 1418 0
 1756 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1757 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1758 006e 1100     		movs	r1, r2	@, tmp141
 1759 0070 1800     		movs	r0, r3	@, tmp142
 1760 0072 FFF7FEFF 		bl	strcat	@
1419:src/main.c    **** 
1420:src/main.c    **** 
1421:src/main.c    ****       strcat((char *)buffer,"}}");
 1761              		.loc 2 1421 0
 1762 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1763 0078 1800     		movs	r0, r3	@, tmp143
 1764 007a FFF7FEFF 		bl	strlen	@
 1765 007e 0300     		movs	r3, r0	@ tmp144,
 1766 0080 1A00     		movs	r2, r3	@ D.7168, tmp145
 1767 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1768 0084 9A18     		adds	r2, r3, r2	@ D.7169, tmp146, D.7168
 1769 0086 094B     		ldr	r3, .L88+16	@ tmp147,
 1770 0088 1000     		movs	r0, r2	@ tmp148, D.7169
 1771 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1772 008c 0323     		movs	r3, #3	@ tmp150,
 1773 008e 1A00     		movs	r2, r3	@, tmp150
 1774 0090 FFF7FEFF 		bl	memcpy	@
1422:src/main.c    **** 
1423:src/main.c    ****       return;
 1775              		.loc 2 1423 0
 1776 0094 C046     		nop
1424:src/main.c    **** }
 1777              		.loc 2 1424 0
 1778 0096 17B0     		add	sp, sp, #92	@,,
 1779              		@ sp needed	@
 1780 0098 00BD     		pop	{pc}
 1781              	.L89:
 1782 009a C046     		.align	2
 1783              	.L88:
 1784 009c 18010000 		.word	.LC44
 1785 00a0 30010000 		.word	.LC46
 1786 00a4 4C010000 		.word	.LC48
 1787 00a8 64010000 		.word	.LC50
 1788 00ac 7C010000 		.word	.LC52
 1789              		.cfi_endproc
 1790              	.LFE21:
 1791              		.size	prepare_json_pkt, .-prepare_json_pkt
 1792              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1793              		.align	2
 1794              		.global	TimingDelay_Decrement
 1795              		.code	16
 1796              		.thumb_func
 1797              		.type	TimingDelay_Decrement, %function
 1798              	TimingDelay_Decrement:
 1799              	.LFB22:
1425:src/main.c    **** 
1426:src/main.c    **** void TimingDelay_Decrement(void)
1427:src/main.c    **** {
 1800              		.loc 2 1427 0
 1801              		.cfi_startproc
ARM GAS  /tmp/ccGoSbLI.s 			page 76


 1802 0000 10B5     		push	{r4, lr}	@
 1803              	.LCFI8:
 1804              		.cfi_def_cfa_offset 8
 1805              		.cfi_offset 4, -8
 1806              		.cfi_offset 14, -4
1428:src/main.c    **** 	if (wait_ms_var)
 1807              		.loc 2 1428 0
 1808 0002 324B     		ldr	r3, .L99	@ tmp134,
 1809 0004 1B88     		ldrh	r3, [r3]	@ tmp135, wait_ms_var
 1810 0006 9BB2     		uxth	r3, r3	@ D.7182, tmp135
 1811 0008 002B     		cmp	r3, #0	@ D.7182,
 1812 000a 06D0     		beq	.L91	@,
1429:src/main.c    **** 		wait_ms_var--;
 1813              		.loc 2 1429 0
 1814 000c 2F4B     		ldr	r3, .L99	@ tmp136,
 1815 000e 1B88     		ldrh	r3, [r3]	@ tmp137, wait_ms_var
 1816 0010 9BB2     		uxth	r3, r3	@ D.7182, tmp137
 1817 0012 013B     		subs	r3, r3, #1	@ tmp138,
 1818 0014 9AB2     		uxth	r2, r3	@ D.7182, tmp138
 1819 0016 2D4B     		ldr	r3, .L99	@ tmp139,
 1820 0018 1A80     		strh	r2, [r3]	@ tmp140, wait_ms_var
 1821              	.L91:
1430:src/main.c    **** 
1431:src/main.c    **** 	if (timer_standby)
 1822              		.loc 2 1431 0
 1823 001a 2D4B     		ldr	r3, .L99+4	@ tmp141,
 1824 001c 1B88     		ldrh	r3, [r3]	@ tmp142, timer_standby
 1825 001e 9BB2     		uxth	r3, r3	@ D.7182, tmp142
 1826 0020 002B     		cmp	r3, #0	@ D.7182,
 1827 0022 06D0     		beq	.L92	@,
1432:src/main.c    **** 		timer_standby--;
 1828              		.loc 2 1432 0
 1829 0024 2A4B     		ldr	r3, .L99+4	@ tmp143,
 1830 0026 1B88     		ldrh	r3, [r3]	@ tmp144, timer_standby
 1831 0028 9BB2     		uxth	r3, r3	@ D.7182, tmp144
 1832 002a 013B     		subs	r3, r3, #1	@ tmp145,
 1833 002c 9AB2     		uxth	r2, r3	@ D.7182, tmp145
 1834 002e 284B     		ldr	r3, .L99+4	@ tmp146,
 1835 0030 1A80     		strh	r2, [r3]	@ tmp147, timer_standby
 1836              	.L92:
1433:src/main.c    **** 
1434:src/main.c    **** #ifdef USE_REDONDA_BASIC
1435:src/main.c    **** 	if (tt_take_photo_sample)
 1837              		.loc 2 1435 0
 1838 0032 284B     		ldr	r3, .L99+8	@ tmp148,
 1839 0034 1B88     		ldrh	r3, [r3]	@ tmp149, tt_take_photo_sample
 1840 0036 9BB2     		uxth	r3, r3	@ D.7182, tmp149
 1841 0038 002B     		cmp	r3, #0	@ D.7182,
 1842 003a 06D0     		beq	.L93	@,
1436:src/main.c    **** 		tt_take_photo_sample--;
 1843              		.loc 2 1436 0
 1844 003c 254B     		ldr	r3, .L99+8	@ tmp150,
 1845 003e 1B88     		ldrh	r3, [r3]	@ tmp151, tt_take_photo_sample
 1846 0040 9BB2     		uxth	r3, r3	@ D.7182, tmp151
 1847 0042 013B     		subs	r3, r3, #1	@ tmp152,
 1848 0044 9AB2     		uxth	r2, r3	@ D.7182, tmp152
 1849 0046 234B     		ldr	r3, .L99+8	@ tmp153,
ARM GAS  /tmp/ccGoSbLI.s 			page 77


 1850 0048 1A80     		strh	r2, [r3]	@ tmp154, tt_take_photo_sample
 1851              	.L93:
1437:src/main.c    **** 
1438:src/main.c    **** 	if (tt_relay_on_off)
 1852              		.loc 2 1438 0
 1853 004a 234B     		ldr	r3, .L99+12	@ tmp155,
 1854 004c 1B88     		ldrh	r3, [r3]	@ tmp156, tt_relay_on_off
 1855 004e 9BB2     		uxth	r3, r3	@ D.7182, tmp156
 1856 0050 002B     		cmp	r3, #0	@ D.7182,
 1857 0052 06D0     		beq	.L94	@,
1439:src/main.c    **** 		tt_relay_on_off--;
 1858              		.loc 2 1439 0
 1859 0054 204B     		ldr	r3, .L99+12	@ tmp157,
 1860 0056 1B88     		ldrh	r3, [r3]	@ tmp158, tt_relay_on_off
 1861 0058 9BB2     		uxth	r3, r3	@ D.7182, tmp158
 1862 005a 013B     		subs	r3, r3, #1	@ tmp159,
 1863 005c 9AB2     		uxth	r2, r3	@ D.7182, tmp159
 1864 005e 1E4B     		ldr	r3, .L99+12	@ tmp160,
 1865 0060 1A80     		strh	r2, [r3]	@ tmp161, tt_relay_on_off
 1866              	.L94:
1440:src/main.c    **** #endif
1441:src/main.c    **** 
1442:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1443:src/main.c    **** 	if (tt_take_temp_sample)
1444:src/main.c    **** 		tt_take_temp_sample--;
1445:src/main.c    **** #endif
1446:src/main.c    **** 
1447:src/main.c    **** 	if (take_temp_sample)
 1867              		.loc 2 1447 0
 1868 0062 1E4B     		ldr	r3, .L99+16	@ tmp162,
 1869 0064 1B88     		ldrh	r3, [r3]	@ tmp163, take_temp_sample
 1870 0066 9BB2     		uxth	r3, r3	@ D.7182, tmp163
 1871 0068 002B     		cmp	r3, #0	@ D.7182,
 1872 006a 06D0     		beq	.L95	@,
1448:src/main.c    **** 		take_temp_sample--;
 1873              		.loc 2 1448 0
 1874 006c 1B4B     		ldr	r3, .L99+16	@ tmp164,
 1875 006e 1B88     		ldrh	r3, [r3]	@ tmp165, take_temp_sample
 1876 0070 9BB2     		uxth	r3, r3	@ D.7182, tmp165
 1877 0072 013B     		subs	r3, r3, #1	@ tmp166,
 1878 0074 9AB2     		uxth	r2, r3	@ D.7182, tmp166
 1879 0076 194B     		ldr	r3, .L99+16	@ tmp167,
 1880 0078 1A80     		strh	r2, [r3]	@ tmp168, take_temp_sample
 1881              	.L95:
1449:src/main.c    **** 
1450:src/main.c    **** 	if (timer_meas)
 1882              		.loc 2 1450 0
 1883 007a 194B     		ldr	r3, .L99+20	@ tmp169,
 1884 007c 1B78     		ldrb	r3, [r3]	@ tmp170, timer_meas
 1885 007e DBB2     		uxtb	r3, r3	@ D.7183, tmp170
 1886 0080 002B     		cmp	r3, #0	@ D.7183,
 1887 0082 06D0     		beq	.L96	@,
1451:src/main.c    **** 		timer_meas--;
 1888              		.loc 2 1451 0
 1889 0084 164B     		ldr	r3, .L99+20	@ tmp171,
 1890 0086 1B78     		ldrb	r3, [r3]	@ tmp172, timer_meas
 1891 0088 DBB2     		uxtb	r3, r3	@ D.7183, tmp172
ARM GAS  /tmp/ccGoSbLI.s 			page 78


 1892 008a 013B     		subs	r3, r3, #1	@ tmp173,
 1893 008c DAB2     		uxtb	r2, r3	@ D.7183, tmp173
 1894 008e 144B     		ldr	r3, .L99+20	@ tmp174,
 1895 0090 1A70     		strb	r2, [r3]	@ tmp175, timer_meas
 1896              	.L96:
1452:src/main.c    **** 
1453:src/main.c    **** 	// //cuenta de a 1 minuto
1454:src/main.c    **** 	// if (secs > 59999)	//pasaron 1 min
1455:src/main.c    **** 	// {
1456:src/main.c    **** 	// 	minutes++;
1457:src/main.c    **** 	// 	secs = 0;
1458:src/main.c    **** 	// }
1459:src/main.c    **** 	// else
1460:src/main.c    **** 	// 	secs++;
1461:src/main.c    **** 	//
1462:src/main.c    **** 	// if (minutes > 60)
1463:src/main.c    **** 	// {
1464:src/main.c    **** 	// 	hours++;
1465:src/main.c    **** 	// 	minutes = 0;
1466:src/main.c    **** 	// }
1467:src/main.c    **** 
1468:src/main.c    **** #ifdef USE_MQTT_LIB
1469:src/main.c    **** 	//timer del MQTT
1470:src/main.c    **** 	SysTickIntHandler();
1471:src/main.c    **** #endif
1472:src/main.c    **** 
1473:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1474:src/main.c    **** 	if (usart1_mini_timeout)
 1897              		.loc 2 1474 0
 1898 0092 144B     		ldr	r3, .L99+24	@ tmp176,
 1899 0094 1B78     		ldrb	r3, [r3]	@ tmp177, usart1_mini_timeout
 1900 0096 DBB2     		uxtb	r3, r3	@ D.7183, tmp177
 1901 0098 002B     		cmp	r3, #0	@ D.7183,
 1902 009a 06D0     		beq	.L97	@,
1475:src/main.c    **** 		usart1_mini_timeout--;
 1903              		.loc 2 1475 0
 1904 009c 114B     		ldr	r3, .L99+24	@ tmp178,
 1905 009e 1B78     		ldrb	r3, [r3]	@ tmp179, usart1_mini_timeout
 1906 00a0 DBB2     		uxtb	r3, r3	@ D.7183, tmp179
 1907 00a2 013B     		subs	r3, r3, #1	@ tmp180,
 1908 00a4 DAB2     		uxtb	r2, r3	@ D.7183, tmp180
 1909 00a6 0F4B     		ldr	r3, .L99+24	@ tmp181,
 1910 00a8 1A70     		strb	r2, [r3]	@ tmp182, usart1_mini_timeout
 1911              	.L97:
1476:src/main.c    **** 	if (usart2_mini_timeout)
 1912              		.loc 2 1476 0
 1913 00aa 0F4B     		ldr	r3, .L99+28	@ tmp183,
 1914 00ac 1B78     		ldrb	r3, [r3]	@ tmp184, usart2_mini_timeout
 1915 00ae DBB2     		uxtb	r3, r3	@ D.7183, tmp184
 1916 00b0 002B     		cmp	r3, #0	@ D.7183,
 1917 00b2 06D0     		beq	.L98	@,
1477:src/main.c    **** 		usart2_mini_timeout--;
 1918              		.loc 2 1477 0
 1919 00b4 0C4B     		ldr	r3, .L99+28	@ tmp185,
 1920 00b6 1B78     		ldrb	r3, [r3]	@ tmp186, usart2_mini_timeout
 1921 00b8 DBB2     		uxtb	r3, r3	@ D.7183, tmp186
 1922 00ba 013B     		subs	r3, r3, #1	@ tmp187,
ARM GAS  /tmp/ccGoSbLI.s 			page 79


 1923 00bc DAB2     		uxtb	r2, r3	@ D.7183, tmp187
 1924 00be 0A4B     		ldr	r3, .L99+28	@ tmp188,
 1925 00c0 1A70     		strb	r2, [r3]	@ tmp189, usart2_mini_timeout
 1926              	.L98:
1478:src/main.c    **** #endif
1479:src/main.c    **** #ifdef USE_GPS
1480:src/main.c    **** 	GPSTimeoutCounters ();
1481:src/main.c    **** #endif
1482:src/main.c    **** 
1483:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1484:src/main.c    **** 	GSMTimeoutCounters ();
 1927              		.loc 2 1484 0
 1928 00c2 FFF7FEFF 		bl	GSMTimeoutCounters	@
1485:src/main.c    **** #endif
1486:src/main.c    **** }
 1929              		.loc 2 1486 0
 1930 00c6 C046     		nop
 1931              		@ sp needed	@
 1932 00c8 10BD     		pop	{r4, pc}
 1933              	.L100:
 1934 00ca C046     		.align	2
 1935              	.L99:
 1936 00cc 00000000 		.word	wait_ms_var
 1937 00d0 00000000 		.word	timer_standby
 1938 00d4 00000000 		.word	tt_take_photo_sample
 1939 00d8 00000000 		.word	tt_relay_on_off
 1940 00dc 00000000 		.word	take_temp_sample
 1941 00e0 00000000 		.word	timer_meas
 1942 00e4 00000000 		.word	usart1_mini_timeout
 1943 00e8 00000000 		.word	usart2_mini_timeout
 1944              		.cfi_endproc
 1945              	.LFE22:
 1946              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1947              		.text
 1948              	.Letext0:
 1949              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1950              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1951              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1952              		.file 6 "src/hard.h"
 1953              		.file 7 "src/flash_program.h"
 1954              		.file 8 "src/funcs_gsm.h"
 1955              		.section	.debug_info,"",%progbits
 1956              	.Ldebug_info0:
 1957 0000 B30D0000 		.4byte	0xdb3
 1958 0004 0200     		.2byte	0x2
 1959 0006 00000000 		.4byte	.Ldebug_abbrev0
 1960 000a 04       		.byte	0x4
 1961 000b 01       		.uleb128 0x1
 1962 000c 110A0000 		.4byte	.LASF211
 1963 0010 0C       		.byte	0xc
 1964 0011 F3090000 		.4byte	.LASF212
 1965 0015 06080000 		.4byte	.LASF213
 1966 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1967 001d 00000000 		.4byte	0
 1968 0021 00000000 		.4byte	0
 1969 0025 00000000 		.4byte	.Ldebug_line0
 1970 0029 02       		.uleb128 0x2
ARM GAS  /tmp/ccGoSbLI.s 			page 80


 1971 002a 55060000 		.4byte	.LASF144
 1972 002e 01       		.byte	0x1
 1973 002f 06010000 		.4byte	0x106
 1974 0033 03       		.byte	0x3
 1975 0034 C7       		.byte	0xc7
 1976 0035 06010000 		.4byte	0x106
 1977 0039 03       		.uleb128 0x3
 1978 003a DC060000 		.4byte	.LASF0
 1979 003e 72       		.sleb128 -14
 1980 003f 03       		.uleb128 0x3
 1981 0040 C10A0000 		.4byte	.LASF1
 1982 0044 73       		.sleb128 -13
 1983 0045 03       		.uleb128 0x3
 1984 0046 7C000000 		.4byte	.LASF2
 1985 004a 7B       		.sleb128 -5
 1986 004b 03       		.uleb128 0x3
 1987 004c 8A010000 		.4byte	.LASF3
 1988 0050 7E       		.sleb128 -2
 1989 0051 03       		.uleb128 0x3
 1990 0052 AD070000 		.4byte	.LASF4
 1991 0056 7F       		.sleb128 -1
 1992 0057 04       		.uleb128 0x4
 1993 0058 D7040000 		.4byte	.LASF5
 1994 005c 00       		.byte	0
 1995 005d 04       		.uleb128 0x4
 1996 005e BA050000 		.4byte	.LASF6
 1997 0062 01       		.byte	0x1
 1998 0063 04       		.uleb128 0x4
 1999 0064 6E060000 		.4byte	.LASF7
 2000 0068 02       		.byte	0x2
 2001 0069 04       		.uleb128 0x4
 2002 006a 06010000 		.4byte	.LASF8
 2003 006e 03       		.byte	0x3
 2004 006f 04       		.uleb128 0x4
 2005 0070 B3010000 		.4byte	.LASF9
 2006 0074 04       		.byte	0x4
 2007 0075 04       		.uleb128 0x4
 2008 0076 40010000 		.4byte	.LASF10
 2009 007a 05       		.byte	0x5
 2010 007b 04       		.uleb128 0x4
 2011 007c 46000000 		.4byte	.LASF11
 2012 0080 06       		.byte	0x6
 2013 0081 04       		.uleb128 0x4
 2014 0082 33000000 		.4byte	.LASF12
 2015 0086 07       		.byte	0x7
 2016 0087 04       		.uleb128 0x4
 2017 0088 7F050000 		.4byte	.LASF13
 2018 008c 08       		.byte	0x8
 2019 008d 04       		.uleb128 0x4
 2020 008e EA030000 		.4byte	.LASF14
 2021 0092 09       		.byte	0x9
 2022 0093 04       		.uleb128 0x4
 2023 0094 6F080000 		.4byte	.LASF15
 2024 0098 0A       		.byte	0xa
 2025 0099 04       		.uleb128 0x4
 2026 009a 50070000 		.4byte	.LASF16
 2027 009e 0B       		.byte	0xb
ARM GAS  /tmp/ccGoSbLI.s 			page 81


 2028 009f 04       		.uleb128 0x4
 2029 00a0 D4050000 		.4byte	.LASF17
 2030 00a4 0C       		.byte	0xc
 2031 00a5 04       		.uleb128 0x4
 2032 00a6 87050000 		.4byte	.LASF18
 2033 00aa 0D       		.byte	0xd
 2034 00ab 04       		.uleb128 0x4
 2035 00ac F9060000 		.4byte	.LASF19
 2036 00b0 0E       		.byte	0xe
 2037 00b1 04       		.uleb128 0x4
 2038 00b2 ED070000 		.4byte	.LASF20
 2039 00b6 0F       		.byte	0xf
 2040 00b7 04       		.uleb128 0x4
 2041 00b8 E0030000 		.4byte	.LASF21
 2042 00bc 10       		.byte	0x10
 2043 00bd 04       		.uleb128 0x4
 2044 00be 92080000 		.4byte	.LASF22
 2045 00c2 11       		.byte	0x11
 2046 00c3 04       		.uleb128 0x4
 2047 00c4 64080000 		.4byte	.LASF23
 2048 00c8 13       		.byte	0x13
 2049 00c9 04       		.uleb128 0x4
 2050 00ca 2F040000 		.4byte	.LASF24
 2051 00ce 14       		.byte	0x14
 2052 00cf 04       		.uleb128 0x4
 2053 00d0 D8000000 		.4byte	.LASF25
 2054 00d4 15       		.byte	0x15
 2055 00d5 04       		.uleb128 0x4
 2056 00d6 29070000 		.4byte	.LASF26
 2057 00da 16       		.byte	0x16
 2058 00db 04       		.uleb128 0x4
 2059 00dc 80010000 		.4byte	.LASF27
 2060 00e0 17       		.byte	0x17
 2061 00e1 04       		.uleb128 0x4
 2062 00e2 D1070000 		.4byte	.LASF28
 2063 00e6 18       		.byte	0x18
 2064 00e7 04       		.uleb128 0x4
 2065 00e8 0E020000 		.4byte	.LASF29
 2066 00ec 19       		.byte	0x19
 2067 00ed 04       		.uleb128 0x4
 2068 00ee 72090000 		.4byte	.LASF30
 2069 00f2 1A       		.byte	0x1a
 2070 00f3 04       		.uleb128 0x4
 2071 00f4 BC060000 		.4byte	.LASF31
 2072 00f8 1B       		.byte	0x1b
 2073 00f9 04       		.uleb128 0x4
 2074 00fa F1020000 		.4byte	.LASF32
 2075 00fe 1C       		.byte	0x1c
 2076 00ff 04       		.uleb128 0x4
 2077 0100 BA070000 		.4byte	.LASF33
 2078 0104 1E       		.byte	0x1e
 2079 0105 00       		.byte	0
 2080 0106 05       		.uleb128 0x5
 2081 0107 01       		.byte	0x1
 2082 0108 06       		.byte	0x6
 2083 0109 E7090000 		.4byte	.LASF36
 2084 010d 06       		.uleb128 0x6
ARM GAS  /tmp/ccGoSbLI.s 			page 82


 2085 010e D8020000 		.4byte	.LASF34
 2086 0112 03       		.byte	0x3
 2087 0113 5F01     		.2byte	0x15f
 2088 0115 29000000 		.4byte	0x29
 2089 0119 07       		.uleb128 0x7
 2090 011a 72070000 		.4byte	.LASF35
 2091 011e 04       		.byte	0x4
 2092 011f 1D       		.byte	0x1d
 2093 0120 24010000 		.4byte	0x124
 2094 0124 05       		.uleb128 0x5
 2095 0125 01       		.byte	0x1
 2096 0126 08       		.byte	0x8
 2097 0127 A0080000 		.4byte	.LASF37
 2098 012b 05       		.uleb128 0x5
 2099 012c 02       		.byte	0x2
 2100 012d 05       		.byte	0x5
 2101 012e A9060000 		.4byte	.LASF38
 2102 0132 07       		.uleb128 0x7
 2103 0133 78020000 		.4byte	.LASF39
 2104 0137 04       		.byte	0x4
 2105 0138 2B       		.byte	0x2b
 2106 0139 3D010000 		.4byte	0x13d
 2107 013d 05       		.uleb128 0x5
 2108 013e 02       		.byte	0x2
 2109 013f 07       		.byte	0x7
 2110 0140 FE090000 		.4byte	.LASF40
 2111 0144 07       		.uleb128 0x7
 2112 0145 F4000000 		.4byte	.LASF41
 2113 0149 04       		.byte	0x4
 2114 014a 3F       		.byte	0x3f
 2115 014b 4F010000 		.4byte	0x14f
 2116 014f 05       		.uleb128 0x5
 2117 0150 04       		.byte	0x4
 2118 0151 05       		.byte	0x5
 2119 0152 B3060000 		.4byte	.LASF42
 2120 0156 07       		.uleb128 0x7
 2121 0157 B7080000 		.4byte	.LASF43
 2122 015b 04       		.byte	0x4
 2123 015c 41       		.byte	0x41
 2124 015d 61010000 		.4byte	0x161
 2125 0161 05       		.uleb128 0x5
 2126 0162 04       		.byte	0x4
 2127 0163 07       		.byte	0x7
 2128 0164 DB070000 		.4byte	.LASF44
 2129 0168 05       		.uleb128 0x5
 2130 0169 08       		.byte	0x8
 2131 016a 05       		.byte	0x5
 2132 016b C9040000 		.4byte	.LASF45
 2133 016f 05       		.uleb128 0x5
 2134 0170 08       		.byte	0x8
 2135 0171 07       		.byte	0x7
 2136 0172 18020000 		.4byte	.LASF46
 2137 0176 08       		.uleb128 0x8
 2138 0177 04       		.byte	0x4
 2139 0178 05       		.byte	0x5
 2140 0179 696E7400 		.ascii	"int\000"
 2141 017d 05       		.uleb128 0x5
ARM GAS  /tmp/ccGoSbLI.s 			page 83


 2142 017e 04       		.byte	0x4
 2143 017f 07       		.byte	0x7
 2144 0180 C6000000 		.4byte	.LASF47
 2145 0184 07       		.uleb128 0x7
 2146 0185 3A040000 		.4byte	.LASF48
 2147 0189 05       		.byte	0x5
 2148 018a 14       		.byte	0x14
 2149 018b 19010000 		.4byte	0x119
 2150 018f 07       		.uleb128 0x7
 2151 0190 3D060000 		.4byte	.LASF49
 2152 0194 05       		.byte	0x5
 2153 0195 1A       		.byte	0x1a
 2154 0196 32010000 		.4byte	0x132
 2155 019a 07       		.uleb128 0x7
 2156 019b 4A080000 		.4byte	.LASF50
 2157 019f 05       		.byte	0x5
 2158 01a0 1F       		.byte	0x1f
 2159 01a1 44010000 		.4byte	0x144
 2160 01a5 07       		.uleb128 0x7
 2161 01a6 CC010000 		.4byte	.LASF51
 2162 01aa 05       		.byte	0x5
 2163 01ab 20       		.byte	0x20
 2164 01ac 56010000 		.4byte	0x156
 2165 01b0 09       		.uleb128 0x9
 2166 01b1 2003     		.2byte	0x320
 2167 01b3 01       		.byte	0x1
 2168 01b4 71       		.byte	0x71
 2169 01b5 4D020000 		.4byte	0x24d
 2170 01b9 0A       		.uleb128 0xa
 2171 01ba E7010000 		.4byte	.LASF52
 2172 01be 01       		.byte	0x1
 2173 01bf 73       		.byte	0x73
 2174 01c0 64020000 		.4byte	0x264
 2175 01c4 02       		.byte	0x2
 2176 01c5 23       		.byte	0x23
 2177 01c6 00       		.uleb128 0
 2178 01c7 0A       		.uleb128 0xa
 2179 01c8 77060000 		.4byte	.LASF53
 2180 01cc 01       		.byte	0x1
 2181 01cd 74       		.byte	0x74
 2182 01ce 69020000 		.4byte	0x269
 2183 01d2 02       		.byte	0x2
 2184 01d3 23       		.byte	0x23
 2185 01d4 04       		.uleb128 0x4
 2186 01d5 0A       		.uleb128 0xa
 2187 01d6 6D090000 		.4byte	.LASF54
 2188 01da 01       		.byte	0x1
 2189 01db 75       		.byte	0x75
 2190 01dc 79020000 		.4byte	0x279
 2191 01e0 03       		.byte	0x3
 2192 01e1 23       		.byte	0x23
 2193 01e2 8001     		.uleb128 0x80
 2194 01e4 0A       		.uleb128 0xa
 2195 01e5 05020000 		.4byte	.LASF55
 2196 01e9 01       		.byte	0x1
 2197 01ea 76       		.byte	0x76
 2198 01eb 69020000 		.4byte	0x269
ARM GAS  /tmp/ccGoSbLI.s 			page 84


 2199 01ef 03       		.byte	0x3
 2200 01f0 23       		.byte	0x23
 2201 01f1 8401     		.uleb128 0x84
 2202 01f3 0A       		.uleb128 0xa
 2203 01f4 F90A0000 		.4byte	.LASF56
 2204 01f8 01       		.byte	0x1
 2205 01f9 77       		.byte	0x77
 2206 01fa 7E020000 		.4byte	0x27e
 2207 01fe 03       		.byte	0x3
 2208 01ff 23       		.byte	0x23
 2209 0200 8002     		.uleb128 0x100
 2210 0202 0A       		.uleb128 0xa
 2211 0203 8B060000 		.4byte	.LASF57
 2212 0207 01       		.byte	0x1
 2213 0208 78       		.byte	0x78
 2214 0209 69020000 		.4byte	0x269
 2215 020d 03       		.byte	0x3
 2216 020e 23       		.byte	0x23
 2217 020f 8402     		.uleb128 0x104
 2218 0211 0A       		.uleb128 0xa
 2219 0212 CF050000 		.4byte	.LASF58
 2220 0216 01       		.byte	0x1
 2221 0217 79       		.byte	0x79
 2222 0218 83020000 		.4byte	0x283
 2223 021c 03       		.byte	0x3
 2224 021d 23       		.byte	0x23
 2225 021e 8003     		.uleb128 0x180
 2226 0220 0A       		.uleb128 0xa
 2227 0221 95060000 		.4byte	.LASF59
 2228 0225 01       		.byte	0x1
 2229 0226 7A       		.byte	0x7a
 2230 0227 69020000 		.4byte	0x269
 2231 022b 03       		.byte	0x3
 2232 022c 23       		.byte	0x23
 2233 022d 8403     		.uleb128 0x184
 2234 022f 0A       		.uleb128 0xa
 2235 0230 9F060000 		.4byte	.LASF60
 2236 0234 01       		.byte	0x1
 2237 0235 7B       		.byte	0x7b
 2238 0236 88020000 		.4byte	0x288
 2239 023a 03       		.byte	0x3
 2240 023b 23       		.byte	0x23
 2241 023c 8004     		.uleb128 0x200
 2242 023e 0B       		.uleb128 0xb
 2243 023f 495000   		.ascii	"IP\000"
 2244 0242 01       		.byte	0x1
 2245 0243 7C       		.byte	0x7c
 2246 0244 A8020000 		.4byte	0x2a8
 2247 0248 03       		.byte	0x3
 2248 0249 23       		.byte	0x23
 2249 024a 8006     		.uleb128 0x300
 2250 024c 00       		.byte	0
 2251 024d 0C       		.uleb128 0xc
 2252 024e A5010000 		.4byte	0x1a5
 2253 0252 5D020000 		.4byte	0x25d
 2254 0256 0D       		.uleb128 0xd
 2255 0257 5D020000 		.4byte	0x25d
ARM GAS  /tmp/ccGoSbLI.s 			page 85


 2256 025b 00       		.byte	0
 2257 025c 00       		.byte	0
 2258 025d 05       		.uleb128 0x5
 2259 025e 04       		.byte	0x4
 2260 025f 07       		.byte	0x7
 2261 0260 C3070000 		.4byte	.LASF61
 2262 0264 0E       		.uleb128 0xe
 2263 0265 4D020000 		.4byte	0x24d
 2264 0269 0C       		.uleb128 0xc
 2265 026a A5010000 		.4byte	0x1a5
 2266 026e 79020000 		.4byte	0x279
 2267 0272 0D       		.uleb128 0xd
 2268 0273 5D020000 		.4byte	0x25d
 2269 0277 1E       		.byte	0x1e
 2270 0278 00       		.byte	0
 2271 0279 0E       		.uleb128 0xe
 2272 027a 4D020000 		.4byte	0x24d
 2273 027e 0E       		.uleb128 0xe
 2274 027f 4D020000 		.4byte	0x24d
 2275 0283 0E       		.uleb128 0xe
 2276 0284 4D020000 		.4byte	0x24d
 2277 0288 0C       		.uleb128 0xc
 2278 0289 A5010000 		.4byte	0x1a5
 2279 028d 98020000 		.4byte	0x298
 2280 0291 0D       		.uleb128 0xd
 2281 0292 5D020000 		.4byte	0x25d
 2282 0296 3F       		.byte	0x3f
 2283 0297 00       		.byte	0
 2284 0298 0C       		.uleb128 0xc
 2285 0299 A5010000 		.4byte	0x1a5
 2286 029d A8020000 		.4byte	0x2a8
 2287 02a1 0D       		.uleb128 0xd
 2288 02a2 5D020000 		.4byte	0x25d
 2289 02a6 07       		.byte	0x7
 2290 02a7 00       		.byte	0
 2291 02a8 0E       		.uleb128 0xe
 2292 02a9 98020000 		.4byte	0x298
 2293 02ad 07       		.uleb128 0x7
 2294 02ae 7C070000 		.4byte	.LASF62
 2295 02b2 01       		.byte	0x1
 2296 02b3 7D       		.byte	0x7d
 2297 02b4 B0010000 		.4byte	0x1b0
 2298 02b8 0F       		.uleb128 0xf
 2299 02b9 34       		.byte	0x34
 2300 02ba 01       		.byte	0x1
 2301 02bb 86       		.byte	0x86
 2302 02bc 5B030000 		.4byte	0x35b
 2303 02c0 0A       		.uleb128 0xa
 2304 02c1 FD020000 		.4byte	.LASF63
 2305 02c5 01       		.byte	0x1
 2306 02c6 88       		.byte	0x88
 2307 02c7 60030000 		.4byte	0x360
 2308 02cb 02       		.byte	0x2
 2309 02cc 23       		.byte	0x23
 2310 02cd 00       		.uleb128 0
 2311 02ce 0A       		.uleb128 0xa
 2312 02cf CC070000 		.4byte	.LASF64
ARM GAS  /tmp/ccGoSbLI.s 			page 86


 2313 02d3 01       		.byte	0x1
 2314 02d4 89       		.byte	0x89
 2315 02d5 5B030000 		.4byte	0x35b
 2316 02d9 02       		.byte	0x2
 2317 02da 23       		.byte	0x23
 2318 02db 04       		.uleb128 0x4
 2319 02dc 0A       		.uleb128 0xa
 2320 02dd 77060000 		.4byte	.LASF53
 2321 02e1 01       		.byte	0x1
 2322 02e2 8A       		.byte	0x8a
 2323 02e3 A5010000 		.4byte	0x1a5
 2324 02e7 02       		.byte	0x2
 2325 02e8 23       		.byte	0x23
 2326 02e9 08       		.uleb128 0x8
 2327 02ea 0A       		.uleb128 0xa
 2328 02eb C9030000 		.4byte	.LASF65
 2329 02ef 01       		.byte	0x1
 2330 02f0 8B       		.byte	0x8b
 2331 02f1 5B030000 		.4byte	0x35b
 2332 02f5 02       		.byte	0x2
 2333 02f6 23       		.byte	0x23
 2334 02f7 0C       		.uleb128 0xc
 2335 02f8 0B       		.uleb128 0xb
 2336 02f9 53435200 		.ascii	"SCR\000"
 2337 02fd 01       		.byte	0x1
 2338 02fe 8C       		.byte	0x8c
 2339 02ff 5B030000 		.4byte	0x35b
 2340 0303 02       		.byte	0x2
 2341 0304 23       		.byte	0x23
 2342 0305 10       		.uleb128 0x10
 2343 0306 0B       		.uleb128 0xb
 2344 0307 43435200 		.ascii	"CCR\000"
 2345 030b 01       		.byte	0x1
 2346 030c 8D       		.byte	0x8d
 2347 030d 5B030000 		.4byte	0x35b
 2348 0311 02       		.byte	0x2
 2349 0312 23       		.byte	0x23
 2350 0313 14       		.uleb128 0x14
 2351 0314 0A       		.uleb128 0xa
 2352 0315 81060000 		.4byte	.LASF66
 2353 0319 01       		.byte	0x1
 2354 031a 8E       		.byte	0x8e
 2355 031b A5010000 		.4byte	0x1a5
 2356 031f 02       		.byte	0x2
 2357 0320 23       		.byte	0x23
 2358 0321 18       		.uleb128 0x18
 2359 0322 0B       		.uleb128 0xb
 2360 0323 53485000 		.ascii	"SHP\000"
 2361 0327 01       		.byte	0x1
 2362 0328 8F       		.byte	0x8f
 2363 0329 75030000 		.4byte	0x375
 2364 032d 02       		.byte	0x2
 2365 032e 23       		.byte	0x23
 2366 032f 1C       		.uleb128 0x1c
 2367 0330 0A       		.uleb128 0xa
 2368 0331 E1040000 		.4byte	.LASF67
 2369 0335 01       		.byte	0x1
ARM GAS  /tmp/ccGoSbLI.s 			page 87


 2370 0336 90       		.byte	0x90
 2371 0337 5B030000 		.4byte	0x35b
 2372 033b 02       		.byte	0x2
 2373 033c 23       		.byte	0x23
 2374 033d 24       		.uleb128 0x24
 2375 033e 0A       		.uleb128 0xa
 2376 033f 8B060000 		.4byte	.LASF57
 2377 0343 01       		.byte	0x1
 2378 0344 91       		.byte	0x91
 2379 0345 65030000 		.4byte	0x365
 2380 0349 02       		.byte	0x2
 2381 034a 23       		.byte	0x23
 2382 034b 28       		.uleb128 0x28
 2383 034c 0A       		.uleb128 0xa
 2384 034d 2F020000 		.4byte	.LASF68
 2385 0351 01       		.byte	0x1
 2386 0352 92       		.byte	0x92
 2387 0353 5B030000 		.4byte	0x35b
 2388 0357 02       		.byte	0x2
 2389 0358 23       		.byte	0x23
 2390 0359 30       		.uleb128 0x30
 2391 035a 00       		.byte	0
 2392 035b 0E       		.uleb128 0xe
 2393 035c A5010000 		.4byte	0x1a5
 2394 0360 10       		.uleb128 0x10
 2395 0361 5B030000 		.4byte	0x35b
 2396 0365 0C       		.uleb128 0xc
 2397 0366 A5010000 		.4byte	0x1a5
 2398 036a 75030000 		.4byte	0x375
 2399 036e 0D       		.uleb128 0xd
 2400 036f 5D020000 		.4byte	0x25d
 2401 0373 01       		.byte	0x1
 2402 0374 00       		.byte	0
 2403 0375 0E       		.uleb128 0xe
 2404 0376 65030000 		.4byte	0x365
 2405 037a 07       		.uleb128 0x7
 2406 037b 86070000 		.4byte	.LASF69
 2407 037f 01       		.byte	0x1
 2408 0380 93       		.byte	0x93
 2409 0381 B8020000 		.4byte	0x2b8
 2410 0385 0F       		.uleb128 0xf
 2411 0386 10       		.byte	0x10
 2412 0387 01       		.byte	0x1
 2413 0388 FC       		.byte	0xfc
 2414 0389 C8030000 		.4byte	0x3c8
 2415 038d 0A       		.uleb128 0xa
 2416 038e 790B0000 		.4byte	.LASF70
 2417 0392 01       		.byte	0x1
 2418 0393 FE       		.byte	0xfe
 2419 0394 5B030000 		.4byte	0x35b
 2420 0398 02       		.byte	0x2
 2421 0399 23       		.byte	0x23
 2422 039a 00       		.uleb128 0
 2423 039b 0A       		.uleb128 0xa
 2424 039c D3000000 		.4byte	.LASF71
 2425 03a0 01       		.byte	0x1
 2426 03a1 FF       		.byte	0xff
ARM GAS  /tmp/ccGoSbLI.s 			page 88


 2427 03a2 5B030000 		.4byte	0x35b
 2428 03a6 02       		.byte	0x2
 2429 03a7 23       		.byte	0x23
 2430 03a8 04       		.uleb128 0x4
 2431 03a9 11       		.uleb128 0x11
 2432 03aa 56414C00 		.ascii	"VAL\000"
 2433 03ae 01       		.byte	0x1
 2434 03af 0001     		.2byte	0x100
 2435 03b1 5B030000 		.4byte	0x35b
 2436 03b5 02       		.byte	0x2
 2437 03b6 23       		.byte	0x23
 2438 03b7 08       		.uleb128 0x8
 2439 03b8 12       		.uleb128 0x12
 2440 03b9 19010000 		.4byte	.LASF72
 2441 03bd 01       		.byte	0x1
 2442 03be 0101     		.2byte	0x101
 2443 03c0 60030000 		.4byte	0x360
 2444 03c4 02       		.byte	0x2
 2445 03c5 23       		.byte	0x23
 2446 03c6 0C       		.uleb128 0xc
 2447 03c7 00       		.byte	0
 2448 03c8 06       		.uleb128 0x6
 2449 03c9 24060000 		.4byte	.LASF73
 2450 03cd 01       		.byte	0x1
 2451 03ce 0201     		.2byte	0x102
 2452 03d0 85030000 		.4byte	0x385
 2453 03d4 13       		.uleb128 0x13
 2454 03d5 44       		.byte	0x44
 2455 03d6 03       		.byte	0x3
 2456 03d7 7C01     		.2byte	0x17c
 2457 03d9 9E040000 		.4byte	0x49e
 2458 03dd 11       		.uleb128 0x11
 2459 03de 49535200 		.ascii	"ISR\000"
 2460 03e2 03       		.byte	0x3
 2461 03e3 7E01     		.2byte	0x17e
 2462 03e5 5B030000 		.4byte	0x35b
 2463 03e9 02       		.byte	0x2
 2464 03ea 23       		.byte	0x23
 2465 03eb 00       		.uleb128 0
 2466 03ec 11       		.uleb128 0x11
 2467 03ed 49455200 		.ascii	"IER\000"
 2468 03f1 03       		.byte	0x3
 2469 03f2 7F01     		.2byte	0x17f
 2470 03f4 5B030000 		.4byte	0x35b
 2471 03f8 02       		.byte	0x2
 2472 03f9 23       		.byte	0x23
 2473 03fa 04       		.uleb128 0x4
 2474 03fb 11       		.uleb128 0x11
 2475 03fc 435200   		.ascii	"CR\000"
 2476 03ff 03       		.byte	0x3
 2477 0400 8001     		.2byte	0x180
 2478 0402 5B030000 		.4byte	0x35b
 2479 0406 02       		.byte	0x2
 2480 0407 23       		.byte	0x23
 2481 0408 08       		.uleb128 0x8
 2482 0409 12       		.uleb128 0x12
 2483 040a C3050000 		.4byte	.LASF74
ARM GAS  /tmp/ccGoSbLI.s 			page 89


 2484 040e 03       		.byte	0x3
 2485 040f 8101     		.2byte	0x181
 2486 0411 5B030000 		.4byte	0x35b
 2487 0415 02       		.byte	0x2
 2488 0416 23       		.byte	0x23
 2489 0417 0C       		.uleb128 0xc
 2490 0418 12       		.uleb128 0x12
 2491 0419 C9050000 		.4byte	.LASF75
 2492 041d 03       		.byte	0x3
 2493 041e 8201     		.2byte	0x182
 2494 0420 5B030000 		.4byte	0x35b
 2495 0424 02       		.byte	0x2
 2496 0425 23       		.byte	0x23
 2497 0426 10       		.uleb128 0x10
 2498 0427 12       		.uleb128 0x12
 2499 0428 48030000 		.4byte	.LASF76
 2500 042c 03       		.byte	0x3
 2501 042d 8301     		.2byte	0x183
 2502 042f 5B030000 		.4byte	0x35b
 2503 0433 02       		.byte	0x2
 2504 0434 23       		.byte	0x23
 2505 0435 14       		.uleb128 0x14
 2506 0436 12       		.uleb128 0x12
 2507 0437 81060000 		.4byte	.LASF66
 2508 043b 03       		.byte	0x3
 2509 043c 8401     		.2byte	0x184
 2510 043e A5010000 		.4byte	0x1a5
 2511 0442 02       		.byte	0x2
 2512 0443 23       		.byte	0x23
 2513 0444 18       		.uleb128 0x18
 2514 0445 12       		.uleb128 0x12
 2515 0446 8B060000 		.4byte	.LASF57
 2516 044a 03       		.byte	0x3
 2517 044b 8501     		.2byte	0x185
 2518 044d A5010000 		.4byte	0x1a5
 2519 0451 02       		.byte	0x2
 2520 0452 23       		.byte	0x23
 2521 0453 1C       		.uleb128 0x1c
 2522 0454 11       		.uleb128 0x11
 2523 0455 545200   		.ascii	"TR\000"
 2524 0458 03       		.byte	0x3
 2525 0459 8601     		.2byte	0x186
 2526 045b 5B030000 		.4byte	0x35b
 2527 045f 02       		.byte	0x2
 2528 0460 23       		.byte	0x23
 2529 0461 20       		.uleb128 0x20
 2530 0462 12       		.uleb128 0x12
 2531 0463 95060000 		.4byte	.LASF59
 2532 0467 03       		.byte	0x3
 2533 0468 8701     		.2byte	0x187
 2534 046a A5010000 		.4byte	0x1a5
 2535 046e 02       		.byte	0x2
 2536 046f 23       		.byte	0x23
 2537 0470 24       		.uleb128 0x24
 2538 0471 12       		.uleb128 0x12
 2539 0472 A9020000 		.4byte	.LASF77
 2540 0476 03       		.byte	0x3
ARM GAS  /tmp/ccGoSbLI.s 			page 90


 2541 0477 8801     		.2byte	0x188
 2542 0479 5B030000 		.4byte	0x35b
 2543 047d 02       		.byte	0x2
 2544 047e 23       		.byte	0x23
 2545 047f 28       		.uleb128 0x28
 2546 0480 12       		.uleb128 0x12
 2547 0481 9F060000 		.4byte	.LASF60
 2548 0485 03       		.byte	0x3
 2549 0486 8901     		.2byte	0x189
 2550 0488 9E040000 		.4byte	0x49e
 2551 048c 02       		.byte	0x2
 2552 048d 23       		.byte	0x23
 2553 048e 2C       		.uleb128 0x2c
 2554 048f 11       		.uleb128 0x11
 2555 0490 445200   		.ascii	"DR\000"
 2556 0493 03       		.byte	0x3
 2557 0494 8A01     		.2byte	0x18a
 2558 0496 5B030000 		.4byte	0x35b
 2559 049a 02       		.byte	0x2
 2560 049b 23       		.byte	0x23
 2561 049c 40       		.uleb128 0x40
 2562 049d 00       		.byte	0
 2563 049e 0C       		.uleb128 0xc
 2564 049f A5010000 		.4byte	0x1a5
 2565 04a3 AE040000 		.4byte	0x4ae
 2566 04a7 0D       		.uleb128 0xd
 2567 04a8 5D020000 		.4byte	0x25d
 2568 04ac 04       		.byte	0x4
 2569 04ad 00       		.byte	0
 2570 04ae 06       		.uleb128 0x6
 2571 04af BD040000 		.4byte	.LASF78
 2572 04b3 03       		.byte	0x3
 2573 04b4 8B01     		.2byte	0x18b
 2574 04b6 D4030000 		.4byte	0x3d4
 2575 04ba 0E       		.uleb128 0xe
 2576 04bb 8F010000 		.4byte	0x18f
 2577 04bf 13       		.uleb128 0x13
 2578 04c0 2C       		.byte	0x2c
 2579 04c1 03       		.byte	0x3
 2580 04c2 6902     		.2byte	0x269
 2581 04c4 9B050000 		.4byte	0x59b
 2582 04c8 12       		.uleb128 0x12
 2583 04c9 A3020000 		.4byte	.LASF79
 2584 04cd 03       		.byte	0x3
 2585 04ce 6B02     		.2byte	0x26b
 2586 04d0 5B030000 		.4byte	0x35b
 2587 04d4 02       		.byte	0x2
 2588 04d5 23       		.byte	0x23
 2589 04d6 00       		.uleb128 0
 2590 04d7 12       		.uleb128 0x12
 2591 04d8 06070000 		.4byte	.LASF80
 2592 04dc 03       		.byte	0x3
 2593 04dd 6C02     		.2byte	0x26c
 2594 04df BA040000 		.4byte	0x4ba
 2595 04e3 02       		.byte	0x2
 2596 04e4 23       		.byte	0x23
 2597 04e5 04       		.uleb128 0x4
ARM GAS  /tmp/ccGoSbLI.s 			page 91


 2598 04e6 12       		.uleb128 0x12
 2599 04e7 77060000 		.4byte	.LASF53
 2600 04eb 03       		.byte	0x3
 2601 04ec 6D02     		.2byte	0x26d
 2602 04ee 8F010000 		.4byte	0x18f
 2603 04f2 02       		.byte	0x2
 2604 04f3 23       		.byte	0x23
 2605 04f4 06       		.uleb128 0x6
 2606 04f5 12       		.uleb128 0x12
 2607 04f6 1C060000 		.4byte	.LASF81
 2608 04fa 03       		.byte	0x3
 2609 04fb 6E02     		.2byte	0x26e
 2610 04fd 5B030000 		.4byte	0x35b
 2611 0501 02       		.byte	0x2
 2612 0502 23       		.byte	0x23
 2613 0503 08       		.uleb128 0x8
 2614 0504 12       		.uleb128 0x12
 2615 0505 6F030000 		.4byte	.LASF82
 2616 0509 03       		.byte	0x3
 2617 050a 6F02     		.2byte	0x26f
 2618 050c 5B030000 		.4byte	0x35b
 2619 0510 02       		.byte	0x2
 2620 0511 23       		.byte	0x23
 2621 0512 0C       		.uleb128 0xc
 2622 0513 11       		.uleb128 0x11
 2623 0514 49445200 		.ascii	"IDR\000"
 2624 0518 03       		.byte	0x3
 2625 0519 7002     		.2byte	0x270
 2626 051b BA040000 		.4byte	0x4ba
 2627 051f 02       		.byte	0x2
 2628 0520 23       		.byte	0x23
 2629 0521 10       		.uleb128 0x10
 2630 0522 12       		.uleb128 0x12
 2631 0523 81060000 		.4byte	.LASF66
 2632 0527 03       		.byte	0x3
 2633 0528 7102     		.2byte	0x271
 2634 052a 8F010000 		.4byte	0x18f
 2635 052e 02       		.byte	0x2
 2636 052f 23       		.byte	0x23
 2637 0530 12       		.uleb128 0x12
 2638 0531 11       		.uleb128 0x11
 2639 0532 4F445200 		.ascii	"ODR\000"
 2640 0536 03       		.byte	0x3
 2641 0537 7202     		.2byte	0x272
 2642 0539 BA040000 		.4byte	0x4ba
 2643 053d 02       		.byte	0x2
 2644 053e 23       		.byte	0x23
 2645 053f 14       		.uleb128 0x14
 2646 0540 12       		.uleb128 0x12
 2647 0541 8B060000 		.4byte	.LASF57
 2648 0545 03       		.byte	0x3
 2649 0546 7302     		.2byte	0x273
 2650 0548 8F010000 		.4byte	0x18f
 2651 054c 02       		.byte	0x2
 2652 054d 23       		.byte	0x23
 2653 054e 16       		.uleb128 0x16
 2654 054f 12       		.uleb128 0x12
ARM GAS  /tmp/ccGoSbLI.s 			page 92


 2655 0550 41000000 		.4byte	.LASF83
 2656 0554 03       		.byte	0x3
 2657 0555 7402     		.2byte	0x274
 2658 0557 5B030000 		.4byte	0x35b
 2659 055b 02       		.byte	0x2
 2660 055c 23       		.byte	0x23
 2661 055d 18       		.uleb128 0x18
 2662 055e 12       		.uleb128 0x12
 2663 055f 740B0000 		.4byte	.LASF84
 2664 0563 03       		.byte	0x3
 2665 0564 7502     		.2byte	0x275
 2666 0566 5B030000 		.4byte	0x35b
 2667 056a 02       		.byte	0x2
 2668 056b 23       		.byte	0x23
 2669 056c 1C       		.uleb128 0x1c
 2670 056d 11       		.uleb128 0x11
 2671 056e 41465200 		.ascii	"AFR\000"
 2672 0572 03       		.byte	0x3
 2673 0573 7602     		.2byte	0x276
 2674 0575 9B050000 		.4byte	0x59b
 2675 0579 02       		.byte	0x2
 2676 057a 23       		.byte	0x23
 2677 057b 20       		.uleb128 0x20
 2678 057c 11       		.uleb128 0x11
 2679 057d 42525200 		.ascii	"BRR\000"
 2680 0581 03       		.byte	0x3
 2681 0582 7702     		.2byte	0x277
 2682 0584 BA040000 		.4byte	0x4ba
 2683 0588 02       		.byte	0x2
 2684 0589 23       		.byte	0x23
 2685 058a 28       		.uleb128 0x28
 2686 058b 12       		.uleb128 0x12
 2687 058c 95060000 		.4byte	.LASF59
 2688 0590 03       		.byte	0x3
 2689 0591 7802     		.2byte	0x278
 2690 0593 8F010000 		.4byte	0x18f
 2691 0597 02       		.byte	0x2
 2692 0598 23       		.byte	0x23
 2693 0599 2A       		.uleb128 0x2a
 2694 059a 00       		.byte	0
 2695 059b 0E       		.uleb128 0xe
 2696 059c 65030000 		.4byte	0x365
 2697 05a0 06       		.uleb128 0x6
 2698 05a1 8F070000 		.4byte	.LASF85
 2699 05a5 03       		.byte	0x3
 2700 05a6 7902     		.2byte	0x279
 2701 05a8 BF040000 		.4byte	0x4bf
 2702 05ac 05       		.uleb128 0x5
 2703 05ad 08       		.byte	0x8
 2704 05ae 04       		.byte	0x4
 2705 05af 31060000 		.4byte	.LASF86
 2706 05b3 05       		.uleb128 0x5
 2707 05b4 01       		.byte	0x1
 2708 05b5 08       		.byte	0x8
 2709 05b6 9E030000 		.4byte	.LASF87
 2710 05ba 0C       		.uleb128 0xc
 2711 05bb 3D010000 		.4byte	0x13d
ARM GAS  /tmp/ccGoSbLI.s 			page 93


 2712 05bf CA050000 		.4byte	0x5ca
 2713 05c3 0D       		.uleb128 0xd
 2714 05c4 5D020000 		.4byte	0x25d
 2715 05c8 02       		.byte	0x2
 2716 05c9 00       		.byte	0
 2717 05ca 0C       		.uleb128 0xc
 2718 05cb B3050000 		.4byte	0x5b3
 2719 05cf DA050000 		.4byte	0x5da
 2720 05d3 0D       		.uleb128 0xd
 2721 05d4 5D020000 		.4byte	0x25d
 2722 05d8 17       		.byte	0x17
 2723 05d9 00       		.byte	0
 2724 05da 14       		.uleb128 0x14
 2725 05db 01       		.byte	0x1
 2726 05dc 24010000 		.4byte	0x124
 2727 05e0 06       		.byte	0x6
 2728 05e1 BD       		.byte	0xbd
 2729 05e2 29060000 		.4byte	0x629
 2730 05e6 04       		.uleb128 0x4
 2731 05e7 32050000 		.4byte	.LASF88
 2732 05eb 00       		.byte	0
 2733 05ec 04       		.uleb128 0x4
 2734 05ed 44070000 		.4byte	.LASF89
 2735 05f1 01       		.byte	0x1
 2736 05f2 04       		.uleb128 0x4
 2737 05f3 4D030000 		.4byte	.LASF90
 2738 05f7 02       		.byte	0x2
 2739 05f8 04       		.uleb128 0x4
 2740 05f9 61020000 		.4byte	.LASF91
 2741 05fd 03       		.byte	0x3
 2742 05fe 04       		.uleb128 0x4
 2743 05ff AE080000 		.4byte	.LASF92
 2744 0603 04       		.byte	0x4
 2745 0604 04       		.uleb128 0x4
 2746 0605 FB040000 		.4byte	.LASF93
 2747 0609 05       		.byte	0x5
 2748 060a 04       		.uleb128 0x4
 2749 060b 4B050000 		.4byte	.LASF94
 2750 060f 06       		.byte	0x6
 2751 0610 04       		.uleb128 0x4
 2752 0611 42040000 		.4byte	.LASF95
 2753 0615 07       		.byte	0x7
 2754 0616 04       		.uleb128 0x4
 2755 0617 A2040000 		.4byte	.LASF96
 2756 061b 08       		.byte	0x8
 2757 061c 04       		.uleb128 0x4
 2758 061d E3050000 		.4byte	.LASF97
 2759 0621 09       		.byte	0x9
 2760 0622 04       		.uleb128 0x4
 2761 0623 F7010000 		.4byte	.LASF98
 2762 0627 0A       		.byte	0xa
 2763 0628 00       		.byte	0
 2764 0629 07       		.uleb128 0x7
 2765 062a 22040000 		.4byte	.LASF99
 2766 062e 06       		.byte	0x6
 2767 062f CA       		.byte	0xca
 2768 0630 DA050000 		.4byte	0x5da
ARM GAS  /tmp/ccGoSbLI.s 			page 94


 2769 0634 14       		.uleb128 0x14
 2770 0635 01       		.byte	0x1
 2771 0636 24010000 		.4byte	0x124
 2772 063a 06       		.byte	0x6
 2773 063b CE       		.byte	0xce
 2774 063c 71060000 		.4byte	0x671
 2775 0640 04       		.uleb128 0x4
 2776 0641 5E000000 		.4byte	.LASF100
 2777 0645 00       		.byte	0
 2778 0646 04       		.uleb128 0x4
 2779 0647 6D000000 		.4byte	.LASF101
 2780 064b 01       		.byte	0x1
 2781 064c 04       		.uleb128 0x4
 2782 064d 9C070000 		.4byte	.LASF102
 2783 0651 02       		.byte	0x2
 2784 0652 04       		.uleb128 0x4
 2785 0653 4F0B0000 		.4byte	.LASF103
 2786 0657 03       		.byte	0x3
 2787 0658 04       		.uleb128 0x4
 2788 0659 19070000 		.4byte	.LASF104
 2789 065d 04       		.byte	0x4
 2790 065e 04       		.uleb128 0x4
 2791 065f BC010000 		.4byte	.LASF105
 2792 0663 05       		.byte	0x5
 2793 0664 04       		.uleb128 0x4
 2794 0665 34070000 		.4byte	.LASF106
 2795 0669 06       		.byte	0x6
 2796 066a 04       		.uleb128 0x4
 2797 066b B5000000 		.4byte	.LASF107
 2798 066f 07       		.byte	0x7
 2799 0670 00       		.byte	0
 2800 0671 07       		.uleb128 0x7
 2801 0672 CE080000 		.4byte	.LASF108
 2802 0676 06       		.byte	0x6
 2803 0677 D8       		.byte	0xd8
 2804 0678 34060000 		.4byte	0x634
 2805 067c 15       		.uleb128 0x15
 2806 067d 1B050000 		.4byte	.LASF214
 2807 0681 54       		.byte	0x54
 2808 0682 07       		.byte	0x7
 2809 0683 40       		.byte	0x40
 2810 0684 F9060000 		.4byte	0x6f9
 2811 0688 0A       		.uleb128 0xa
 2812 0689 61060000 		.4byte	.LASF109
 2813 068d 07       		.byte	0x7
 2814 068e 42       		.byte	0x42
 2815 068f CA050000 		.4byte	0x5ca
 2816 0693 02       		.byte	0x2
 2817 0694 23       		.byte	0x23
 2818 0695 00       		.uleb128 0
 2819 0696 0A       		.uleb128 0xa
 2820 0697 1F010000 		.4byte	.LASF110
 2821 069b 07       		.byte	0x7
 2822 069c 43       		.byte	0x43
 2823 069d CA050000 		.4byte	0x5ca
 2824 06a1 02       		.byte	0x2
 2825 06a2 23       		.byte	0x23
ARM GAS  /tmp/ccGoSbLI.s 			page 95


 2826 06a3 18       		.uleb128 0x18
 2827 06a4 0A       		.uleb128 0xa
 2828 06a5 1D0B0000 		.4byte	.LASF111
 2829 06a9 07       		.byte	0x7
 2830 06aa 44       		.byte	0x44
 2831 06ab CA050000 		.4byte	0x5ca
 2832 06af 02       		.byte	0x2
 2833 06b0 23       		.byte	0x23
 2834 06b1 30       		.uleb128 0x30
 2835 06b2 0A       		.uleb128 0xa
 2836 06b3 D5010000 		.4byte	.LASF112
 2837 06b7 07       		.byte	0x7
 2838 06b8 46       		.byte	0x46
 2839 06b9 7D010000 		.4byte	0x17d
 2840 06bd 02       		.byte	0x2
 2841 06be 23       		.byte	0x23
 2842 06bf 48       		.uleb128 0x48
 2843 06c0 0A       		.uleb128 0xa
 2844 06c1 0D040000 		.4byte	.LASF113
 2845 06c5 07       		.byte	0x7
 2846 06c6 47       		.byte	0x47
 2847 06c7 7D010000 		.4byte	0x17d
 2848 06cb 02       		.byte	0x2
 2849 06cc 23       		.byte	0x23
 2850 06cd 4C       		.uleb128 0x4c
 2851 06ce 0A       		.uleb128 0xa
 2852 06cf FD030000 		.4byte	.LASF114
 2853 06d3 07       		.byte	0x7
 2854 06d4 48       		.byte	0x48
 2855 06d5 3D010000 		.4byte	0x13d
 2856 06d9 02       		.byte	0x2
 2857 06da 23       		.byte	0x23
 2858 06db 50       		.uleb128 0x50
 2859 06dc 0A       		.uleb128 0xa
 2860 06dd E2020000 		.4byte	.LASF115
 2861 06e1 07       		.byte	0x7
 2862 06e2 4A       		.byte	0x4a
 2863 06e3 24010000 		.4byte	0x124
 2864 06e7 02       		.byte	0x2
 2865 06e8 23       		.byte	0x23
 2866 06e9 52       		.uleb128 0x52
 2867 06ea 0A       		.uleb128 0xa
 2868 06eb 7B030000 		.4byte	.LASF116
 2869 06ef 07       		.byte	0x7
 2870 06f0 4D       		.byte	0x4d
 2871 06f1 24010000 		.4byte	0x124
 2872 06f5 02       		.byte	0x2
 2873 06f6 23       		.byte	0x23
 2874 06f7 53       		.uleb128 0x53
 2875 06f8 00       		.byte	0
 2876 06f9 07       		.uleb128 0x7
 2877 06fa D4090000 		.4byte	.LASF117
 2878 06fe 07       		.byte	0x7
 2879 06ff 51       		.byte	0x51
 2880 0700 7C060000 		.4byte	0x67c
 2881 0704 14       		.uleb128 0x14
 2882 0705 01       		.byte	0x1
ARM GAS  /tmp/ccGoSbLI.s 			page 96


 2883 0706 24010000 		.4byte	0x124
 2884 070a 08       		.byte	0x8
 2885 070b 0A       		.byte	0xa
 2886 070c 95070000 		.4byte	0x795
 2887 0710 04       		.uleb128 0x4
 2888 0711 46020000 		.4byte	.LASF118
 2889 0715 00       		.byte	0
 2890 0716 04       		.uleb128 0x4
 2891 0717 C8060000 		.4byte	.LASF119
 2892 071b 01       		.byte	0x1
 2893 071c 04       		.uleb128 0x4
 2894 071d 24010000 		.4byte	.LASF120
 2895 0721 02       		.byte	0x2
 2896 0722 04       		.uleb128 0x4
 2897 0723 380B0000 		.4byte	.LASF121
 2898 0727 03       		.byte	0x3
 2899 0728 04       		.uleb128 0x4
 2900 0729 5A090000 		.4byte	.LASF122
 2901 072d 04       		.byte	0x4
 2902 072e 04       		.uleb128 0x4
 2903 072f 8B020000 		.4byte	.LASF123
 2904 0733 05       		.byte	0x5
 2905 0734 04       		.uleb128 0x4
 2906 0735 82030000 		.4byte	.LASF124
 2907 0739 06       		.byte	0x6
 2908 073a 04       		.uleb128 0x4
 2909 073b AA040000 		.4byte	.LASF125
 2910 073f 07       		.byte	0x7
 2911 0740 04       		.uleb128 0x4
 2912 0741 08090000 		.4byte	.LASF126
 2913 0745 08       		.byte	0x8
 2914 0746 04       		.uleb128 0x4
 2915 0747 E60A0000 		.4byte	.LASF127
 2916 074b 09       		.byte	0x9
 2917 074c 04       		.uleb128 0x4
 2918 074d 8C000000 		.4byte	.LASF128
 2919 0751 0A       		.byte	0xa
 2920 0752 04       		.uleb128 0x4
 2921 0753 69010000 		.4byte	.LASF129
 2922 0757 0B       		.byte	0xb
 2923 0758 04       		.uleb128 0x4
 2924 0759 7C090000 		.4byte	.LASF130
 2925 075d 0C       		.byte	0xc
 2926 075e 04       		.uleb128 0x4
 2927 075f BB090000 		.4byte	.LASF131
 2928 0763 0D       		.byte	0xd
 2929 0764 04       		.uleb128 0x4
 2930 0765 06000000 		.4byte	.LASF132
 2931 0769 0E       		.byte	0xe
 2932 076a 04       		.uleb128 0x4
 2933 076b 1D090000 		.4byte	.LASF133
 2934 076f 0F       		.byte	0xf
 2935 0770 04       		.uleb128 0x4
 2936 0771 EB080000 		.4byte	.LASF134
 2937 0775 10       		.byte	0x10
 2938 0776 04       		.uleb128 0x4
 2939 0777 18030000 		.4byte	.LASF135
ARM GAS  /tmp/ccGoSbLI.s 			page 97


 2940 077b 11       		.byte	0x11
 2941 077c 04       		.uleb128 0x4
 2942 077d 9C000000 		.4byte	.LASF136
 2943 0781 12       		.byte	0x12
 2944 0782 04       		.uleb128 0x4
 2945 0783 A3030000 		.4byte	.LASF137
 2946 0787 13       		.byte	0x13
 2947 0788 04       		.uleb128 0x4
 2948 0789 030B0000 		.4byte	.LASF138
 2949 078d 14       		.byte	0x14
 2950 078e 04       		.uleb128 0x4
 2951 078f B0020000 		.4byte	.LASF139
 2952 0793 15       		.byte	0x15
 2953 0794 00       		.byte	0
 2954 0795 14       		.uleb128 0x14
 2955 0796 01       		.byte	0x1
 2956 0797 24010000 		.4byte	0x124
 2957 079b 08       		.byte	0x8
 2958 079c 24       		.byte	0x24
 2959 079d BA070000 		.4byte	0x7ba
 2960 07a1 04       		.uleb128 0x4
 2961 07a2 92090000 		.4byte	.LASF140
 2962 07a6 00       		.byte	0
 2963 07a7 04       		.uleb128 0x4
 2964 07a8 DA0A0000 		.4byte	.LASF141
 2965 07ac 01       		.byte	0x1
 2966 07ad 04       		.uleb128 0x4
 2967 07ae 3C050000 		.4byte	.LASF142
 2968 07b2 02       		.byte	0x2
 2969 07b3 04       		.uleb128 0x4
 2970 07b4 62040000 		.4byte	.LASF143
 2971 07b8 03       		.byte	0x3
 2972 07b9 00       		.byte	0
 2973 07ba 16       		.uleb128 0x16
 2974 07bb A9050000 		.4byte	.LASF215
 2975 07bf 01       		.byte	0x1
 2976 07c0 7C03     		.2byte	0x37c
 2977 07c2 01       		.byte	0x1
 2978 07c3 00000000 		.4byte	.LFB16
 2979 07c7 EC000000 		.4byte	.LFE16
 2980 07cb 00000000 		.4byte	.LLST0
 2981 07cf 01       		.byte	0x1
 2982 07d0 F3070000 		.4byte	0x7f3
 2983 07d4 17       		.uleb128 0x17
 2984 07d5 55060000 		.4byte	.LASF144
 2985 07d9 01       		.byte	0x1
 2986 07da 7C03     		.2byte	0x37c
 2987 07dc 0D010000 		.4byte	0x10d
 2988 07e0 02       		.byte	0x2
 2989 07e1 91       		.byte	0x91
 2990 07e2 6F       		.sleb128 -17
 2991 07e3 17       		.uleb128 0x17
 2992 07e4 F0060000 		.4byte	.LASF145
 2993 07e8 01       		.byte	0x1
 2994 07e9 7C03     		.2byte	0x37c
 2995 07eb A5010000 		.4byte	0x1a5
 2996 07ef 02       		.byte	0x2
ARM GAS  /tmp/ccGoSbLI.s 			page 98


 2997 07f0 91       		.byte	0x91
 2998 07f1 68       		.sleb128 -24
 2999 07f2 00       		.byte	0
 3000 07f3 18       		.uleb128 0x18
 3001 07f4 39030000 		.4byte	.LASF216
 3002 07f8 01       		.byte	0x1
 3003 07f9 B803     		.2byte	0x3b8
 3004 07fb 01       		.byte	0x1
 3005 07fc A5010000 		.4byte	0x1a5
 3006 0800 00000000 		.4byte	.LFB18
 3007 0804 48000000 		.4byte	.LFE18
 3008 0808 2C000000 		.4byte	.LLST1
 3009 080c 01       		.byte	0x1
 3010 080d 21080000 		.4byte	0x821
 3011 0811 17       		.uleb128 0x17
 3012 0812 75030000 		.4byte	.LASF146
 3013 0816 01       		.byte	0x1
 3014 0817 B803     		.2byte	0x3b8
 3015 0819 A5010000 		.4byte	0x1a5
 3016 081d 02       		.byte	0x2
 3017 081e 91       		.byte	0x91
 3018 081f 74       		.sleb128 -12
 3019 0820 00       		.byte	0
 3020 0821 19       		.uleb128 0x19
 3021 0822 01       		.byte	0x1
 3022 0823 BC0A0000 		.4byte	.LASF217
 3023 0827 02       		.byte	0x2
 3024 0828 CF       		.byte	0xcf
 3025 0829 01       		.byte	0x1
 3026 082a 76010000 		.4byte	0x176
 3027 082e 00000000 		.4byte	.LFB20
 3028 0832 EC070000 		.4byte	.LFE20
 3029 0836 58000000 		.4byte	.LLST2
 3030 083a 01       		.byte	0x1
 3031 083b 83090000 		.4byte	0x983
 3032 083f 1A       		.uleb128 0x1a
 3033 0840 6900     		.ascii	"i\000"
 3034 0842 02       		.byte	0x2
 3035 0843 D1       		.byte	0xd1
 3036 0844 24010000 		.4byte	0x124
 3037 0848 02       		.byte	0x2
 3038 0849 91       		.byte	0x91
 3039 084a 6F       		.sleb128 -17
 3040 084b 1B       		.uleb128 0x1b
 3041 084c 696900   		.ascii	"ii\000"
 3042 084f 02       		.byte	0x2
 3043 0850 D1       		.byte	0xd1
 3044 0851 24010000 		.4byte	0x124
 3045 0855 1C       		.uleb128 0x1c
 3046 0856 670B0000 		.4byte	.LASF147
 3047 085a 02       		.byte	0x2
 3048 085b D2       		.byte	0xd2
 3049 085c 24010000 		.4byte	0x124
 3050 0860 1C       		.uleb128 0x1c
 3051 0861 17040000 		.4byte	.LASF148
 3052 0865 02       		.byte	0x2
 3053 0866 D2       		.byte	0xd2
ARM GAS  /tmp/ccGoSbLI.s 			page 99


 3054 0867 24010000 		.4byte	0x124
 3055 086b 1D       		.uleb128 0x1d
 3056 086c FF080000 		.4byte	.LASF149
 3057 0870 02       		.byte	0x2
 3058 0871 D2       		.byte	0xd2
 3059 0872 24010000 		.4byte	0x124
 3060 0876 02       		.byte	0x2
 3061 0877 91       		.byte	0x91
 3062 0878 53       		.sleb128 -45
 3063 0879 1D       		.uleb128 0x1d
 3064 087a FE0A0000 		.4byte	.LASF150
 3065 087e 02       		.byte	0x2
 3066 087f D3       		.byte	0xd3
 3067 0880 24010000 		.4byte	0x124
 3068 0884 02       		.byte	0x2
 3069 0885 91       		.byte	0x91
 3070 0886 52       		.sleb128 -46
 3071 0887 1D       		.uleb128 0x1d
 3072 0888 DE080000 		.4byte	.LASF151
 3073 088c 02       		.byte	0x2
 3074 088d D4       		.byte	0xd4
 3075 088e 24010000 		.4byte	0x124
 3076 0892 02       		.byte	0x2
 3077 0893 91       		.byte	0x91
 3078 0894 6E       		.sleb128 -18
 3079 0895 1D       		.uleb128 0x1d
 3080 0896 B5090000 		.4byte	.LASF152
 3081 089a 02       		.byte	0x2
 3082 089b D7       		.byte	0xd7
 3083 089c 3D010000 		.4byte	0x13d
 3084 08a0 02       		.byte	0x2
 3085 08a1 91       		.byte	0x91
 3086 08a2 6C       		.sleb128 -20
 3087 08a3 1D       		.uleb128 0x1d
 3088 08a4 56050000 		.4byte	.LASF153
 3089 08a8 02       		.byte	0x2
 3090 08a9 D7       		.byte	0xd7
 3091 08aa 3D010000 		.4byte	0x13d
 3092 08ae 02       		.byte	0x2
 3093 08af 91       		.byte	0x91
 3094 08b0 6A       		.sleb128 -22
 3095 08b1 1D       		.uleb128 0x1d
 3096 08b2 15000000 		.4byte	.LASF154
 3097 08b6 02       		.byte	0x2
 3098 08b7 D8       		.byte	0xd8
 3099 08b8 7D010000 		.4byte	0x17d
 3100 08bc 02       		.byte	0x2
 3101 08bd 91       		.byte	0x91
 3102 08be 64       		.sleb128 -28
 3103 08bf 1D       		.uleb128 0x1d
 3104 08c0 A3010000 		.4byte	.LASF155
 3105 08c4 02       		.byte	0x2
 3106 08c5 DA       		.byte	0xda
 3107 08c6 3D010000 		.4byte	0x13d
 3108 08ca 02       		.byte	0x2
 3109 08cb 91       		.byte	0x91
 3110 08cc 62       		.sleb128 -30
ARM GAS  /tmp/ccGoSbLI.s 			page 100


 3111 08cd 1D       		.uleb128 0x1d
 3112 08ce D00A0000 		.4byte	.LASF156
 3113 08d2 02       		.byte	0x2
 3114 08d3 DB       		.byte	0xdb
 3115 08d4 7D010000 		.4byte	0x17d
 3116 08d8 02       		.byte	0x2
 3117 08d9 91       		.byte	0x91
 3118 08da 5C       		.sleb128 -36
 3119 08db 1D       		.uleb128 0x1d
 3120 08dc 56020000 		.4byte	.LASF157
 3121 08e0 02       		.byte	0x2
 3122 08e1 DB       		.byte	0xdb
 3123 08e2 7D010000 		.4byte	0x17d
 3124 08e6 02       		.byte	0x2
 3125 08e7 91       		.byte	0x91
 3126 08e8 58       		.sleb128 -40
 3127 08e9 1D       		.uleb128 0x1d
 3128 08ea 05050000 		.4byte	.LASF158
 3129 08ee 02       		.byte	0x2
 3130 08ef DC       		.byte	0xdc
 3131 08f0 24010000 		.4byte	0x124
 3132 08f4 02       		.byte	0x2
 3133 08f5 91       		.byte	0x91
 3134 08f6 51       		.sleb128 -47
 3135 08f7 1D       		.uleb128 0x1d
 3136 08f8 53000000 		.4byte	.LASF159
 3137 08fc 02       		.byte	0x2
 3138 08fd DF       		.byte	0xdf
 3139 08fe 29060000 		.4byte	0x629
 3140 0902 02       		.byte	0x2
 3141 0903 91       		.byte	0x91
 3142 0904 57       		.sleb128 -41
 3143 0905 1D       		.uleb128 0x1d
 3144 0906 7E0B0000 		.4byte	.LASF160
 3145 090a 02       		.byte	0x2
 3146 090b E0       		.byte	0xe0
 3147 090c 24010000 		.4byte	0x124
 3148 0910 02       		.byte	0x2
 3149 0911 91       		.byte	0x91
 3150 0912 50       		.sleb128 -48
 3151 0913 1D       		.uleb128 0x1d
 3152 0914 A6070000 		.4byte	.LASF161
 3153 0918 02       		.byte	0x2
 3154 0919 E1       		.byte	0xe1
 3155 091a 24010000 		.4byte	0x124
 3156 091e 02       		.byte	0x2
 3157 091f 91       		.byte	0x91
 3158 0920 4F       		.sleb128 -49
 3159 0921 1D       		.uleb128 0x1d
 3160 0922 84080000 		.4byte	.LASF162
 3161 0926 02       		.byte	0x2
 3162 0927 E2       		.byte	0xe2
 3163 0928 71060000 		.4byte	0x671
 3164 092c 02       		.byte	0x2
 3165 092d 91       		.byte	0x91
 3166 092e 56       		.sleb128 -42
 3167 092f 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccGoSbLI.s 			page 101


 3168 0930 0E060000 		.4byte	.LASF163
 3169 0934 02       		.byte	0x2
 3170 0935 E3       		.byte	0xe3
 3171 0936 24010000 		.4byte	0x124
 3172 093a 02       		.byte	0x2
 3173 093b 91       		.byte	0x91
 3174 093c 55       		.sleb128 -43
 3175 093d 1D       		.uleb128 0x1d
 3176 093e DE010000 		.4byte	.LASF164
 3177 0942 02       		.byte	0x2
 3178 0943 E4       		.byte	0xe4
 3179 0944 24010000 		.4byte	0x124
 3180 0948 02       		.byte	0x2
 3181 0949 91       		.byte	0x91
 3182 094a 54       		.sleb128 -44
 3183 094b 1D       		.uleb128 0x1d
 3184 094c F2010000 		.4byte	.LASF165
 3185 0950 02       		.byte	0x2
 3186 0951 E7       		.byte	0xe7
 3187 0952 3D010000 		.4byte	0x13d
 3188 0956 02       		.byte	0x2
 3189 0957 91       		.byte	0x91
 3190 0958 4C       		.sleb128 -52
 3191 0959 1D       		.uleb128 0x1d
 3192 095a 00000000 		.4byte	.LASF166
 3193 095e 02       		.byte	0x2
 3194 095f F0       		.byte	0xf0
 3195 0960 83090000 		.4byte	0x983
 3196 0964 03       		.byte	0x3
 3197 0965 91       		.byte	0x91
 3198 0966 E87E     		.sleb128 -152
 3199 0968 1E       		.uleb128 0x1e
 3200 0969 22070000 		.4byte	.LBB2
 3201 096d D8070000 		.4byte	.LBE2
 3202 0971 1F       		.uleb128 0x1f
 3203 0972 01       		.byte	0x1
 3204 0973 96010000 		.4byte	.LASF218
 3205 0977 02       		.byte	0x2
 3206 0978 9103     		.2byte	0x391
 3207 097a 76010000 		.4byte	0x176
 3208 097e 01       		.byte	0x1
 3209 097f 20       		.uleb128 0x20
 3210 0980 00       		.byte	0
 3211 0981 00       		.byte	0
 3212 0982 00       		.byte	0
 3213 0983 0C       		.uleb128 0xc
 3214 0984 B3050000 		.4byte	0x5b3
 3215 0988 93090000 		.4byte	0x993
 3216 098c 0D       		.uleb128 0xd
 3217 098d 5D020000 		.4byte	0x25d
 3218 0991 63       		.byte	0x63
 3219 0992 00       		.byte	0
 3220 0993 21       		.uleb128 0x21
 3221 0994 01       		.byte	0x1
 3222 0995 A4090000 		.4byte	.LASF219
 3223 0999 02       		.byte	0x2
 3224 099a 7205     		.2byte	0x572
ARM GAS  /tmp/ccGoSbLI.s 			page 102


 3225 099c 01       		.byte	0x1
 3226 099d 00000000 		.4byte	.LFB21
 3227 09a1 B0000000 		.4byte	.LFE21
 3228 09a5 85000000 		.4byte	.LLST3
 3229 09a9 01       		.byte	0x1
 3230 09aa 530A0000 		.4byte	0xa53
 3231 09ae 17       		.uleb128 0x17
 3232 09af 85000000 		.4byte	.LASF167
 3233 09b3 02       		.byte	0x2
 3234 09b4 7205     		.2byte	0x572
 3235 09b6 530A0000 		.4byte	0xa53
 3236 09ba 03       		.byte	0x3
 3237 09bb 91       		.byte	0x91
 3238 09bc A47F     		.sleb128 -92
 3239 09be 22       		.uleb128 0x22
 3240 09bf 643100   		.ascii	"d1\000"
 3241 09c2 02       		.byte	0x2
 3242 09c3 7405     		.2byte	0x574
 3243 09c5 9A010000 		.4byte	0x19a
 3244 09c9 02       		.byte	0x2
 3245 09ca 91       		.byte	0x91
 3246 09cb 74       		.sleb128 -12
 3247 09cc 22       		.uleb128 0x22
 3248 09cd 643200   		.ascii	"d2\000"
 3249 09d0 02       		.byte	0x2
 3250 09d1 7405     		.2byte	0x574
 3251 09d3 9A010000 		.4byte	0x19a
 3252 09d7 02       		.byte	0x2
 3253 09d8 91       		.byte	0x91
 3254 09d9 70       		.sleb128 -16
 3255 09da 22       		.uleb128 0x22
 3256 09db 643300   		.ascii	"d3\000"
 3257 09de 02       		.byte	0x2
 3258 09df 7405     		.2byte	0x574
 3259 09e1 9A010000 		.4byte	0x19a
 3260 09e5 02       		.byte	0x2
 3261 09e6 91       		.byte	0x91
 3262 09e7 6C       		.sleb128 -20
 3263 09e8 22       		.uleb128 0x22
 3264 09e9 643400   		.ascii	"d4\000"
 3265 09ec 02       		.byte	0x2
 3266 09ed 7405     		.2byte	0x574
 3267 09ef 9A010000 		.4byte	0x19a
 3268 09f3 02       		.byte	0x2
 3269 09f4 91       		.byte	0x91
 3270 09f5 68       		.sleb128 -24
 3271 09f6 22       		.uleb128 0x22
 3272 09f7 643500   		.ascii	"d5\000"
 3273 09fa 02       		.byte	0x2
 3274 09fb 7405     		.2byte	0x574
 3275 09fd 9A010000 		.4byte	0x19a
 3276 0a01 02       		.byte	0x2
 3277 0a02 91       		.byte	0x91
 3278 0a03 64       		.sleb128 -28
 3279 0a04 22       		.uleb128 0x22
 3280 0a05 643600   		.ascii	"d6\000"
 3281 0a08 02       		.byte	0x2
ARM GAS  /tmp/ccGoSbLI.s 			page 103


 3282 0a09 7405     		.2byte	0x574
 3283 0a0b 9A010000 		.4byte	0x19a
 3284 0a0f 02       		.byte	0x2
 3285 0a10 91       		.byte	0x91
 3286 0a11 60       		.sleb128 -32
 3287 0a12 23       		.uleb128 0x23
 3288 0a13 A0050000 		.4byte	.LASF168
 3289 0a17 02       		.byte	0x2
 3290 0a18 7505     		.2byte	0x575
 3291 0a1a 590A0000 		.4byte	0xa59
 3292 0a1e 03       		.byte	0x3
 3293 0a1f 91       		.byte	0x91
 3294 0a20 B87F     		.sleb128 -72
 3295 0a22 23       		.uleb128 0x23
 3296 0a23 3B080000 		.4byte	.LASF169
 3297 0a27 02       		.byte	0x2
 3298 0a28 7605     		.2byte	0x576
 3299 0a2a 700A0000 		.4byte	0xa70
 3300 0a2e 03       		.byte	0x3
 3301 0a2f 91       		.byte	0x91
 3302 0a30 B47F     		.sleb128 -76
 3303 0a32 23       		.uleb128 0x23
 3304 0a33 B7030000 		.4byte	.LASF170
 3305 0a37 02       		.byte	0x2
 3306 0a38 7705     		.2byte	0x577
 3307 0a3a 700A0000 		.4byte	0xa70
 3308 0a3e 03       		.byte	0x3
 3309 0a3f 91       		.byte	0x91
 3310 0a40 B07F     		.sleb128 -80
 3311 0a42 23       		.uleb128 0x23
 3312 0a43 F7070000 		.4byte	.LASF171
 3313 0a47 02       		.byte	0x2
 3314 0a48 7805     		.2byte	0x578
 3315 0a4a 700A0000 		.4byte	0xa70
 3316 0a4e 03       		.byte	0x3
 3317 0a4f 91       		.byte	0x91
 3318 0a50 AC7F     		.sleb128 -84
 3319 0a52 00       		.byte	0
 3320 0a53 24       		.uleb128 0x24
 3321 0a54 04       		.byte	0x4
 3322 0a55 84010000 		.4byte	0x184
 3323 0a59 0C       		.uleb128 0xc
 3324 0a5a B3050000 		.4byte	0x5b3
 3325 0a5e 690A0000 		.4byte	0xa69
 3326 0a62 0D       		.uleb128 0xd
 3327 0a63 5D020000 		.4byte	0x25d
 3328 0a67 27       		.byte	0x27
 3329 0a68 00       		.byte	0
 3330 0a69 05       		.uleb128 0x5
 3331 0a6a 04       		.byte	0x4
 3332 0a6b 04       		.byte	0x4
 3333 0a6c EC010000 		.4byte	.LASF172
 3334 0a70 0E       		.uleb128 0xe
 3335 0a71 690A0000 		.4byte	0xa69
 3336 0a75 25       		.uleb128 0x25
 3337 0a76 01       		.byte	0x1
 3338 0a77 44090000 		.4byte	.LASF220
ARM GAS  /tmp/ccGoSbLI.s 			page 104


 3339 0a7b 02       		.byte	0x2
 3340 0a7c 9205     		.2byte	0x592
 3341 0a7e 01       		.byte	0x1
 3342 0a7f 00000000 		.4byte	.LFB22
 3343 0a83 EC000000 		.4byte	.LFE22
 3344 0a87 B2000000 		.4byte	.LLST4
 3345 0a8b 01       		.byte	0x1
 3346 0a8c 0C       		.uleb128 0xc
 3347 0a8d 24010000 		.4byte	0x124
 3348 0a91 9C0A0000 		.4byte	0xa9c
 3349 0a95 0D       		.uleb128 0xd
 3350 0a96 5D020000 		.4byte	0x25d
 3351 0a9a FF       		.byte	0xff
 3352 0a9b 00       		.byte	0
 3353 0a9c 26       		.uleb128 0x26
 3354 0a9d 38010000 		.4byte	.LASF173
 3355 0aa1 02       		.byte	0x2
 3356 0aa2 3B       		.byte	0x3b
 3357 0aa3 AE0A0000 		.4byte	0xaae
 3358 0aa7 01       		.byte	0x1
 3359 0aa8 05       		.byte	0x5
 3360 0aa9 03       		.byte	0x3
 3361 0aaa 00000000 		.4byte	tx2buff
 3362 0aae 0E       		.uleb128 0xe
 3363 0aaf 8C0A0000 		.4byte	0xa8c
 3364 0ab3 26       		.uleb128 0x26
 3365 0ab4 FE000000 		.4byte	.LASF174
 3366 0ab8 02       		.byte	0x2
 3367 0ab9 3C       		.byte	0x3c
 3368 0aba C50A0000 		.4byte	0xac5
 3369 0abe 01       		.byte	0x1
 3370 0abf 05       		.byte	0x5
 3371 0ac0 03       		.byte	0x3
 3372 0ac1 00000000 		.4byte	rx2buff
 3373 0ac5 0E       		.uleb128 0xe
 3374 0ac6 8C0A0000 		.4byte	0xa8c
 3375 0aca 26       		.uleb128 0x26
 3376 0acb 73040000 		.4byte	.LASF175
 3377 0acf 02       		.byte	0x2
 3378 0ad0 3E       		.byte	0x3e
 3379 0ad1 DC0A0000 		.4byte	0xadc
 3380 0ad5 01       		.byte	0x1
 3381 0ad6 05       		.byte	0x5
 3382 0ad7 03       		.byte	0x3
 3383 0ad8 00000000 		.4byte	tx1buff
 3384 0adc 0E       		.uleb128 0xe
 3385 0add 8C0A0000 		.4byte	0xa8c
 3386 0ae1 26       		.uleb128 0x26
 3387 0ae2 11010000 		.4byte	.LASF176
 3388 0ae6 02       		.byte	0x2
 3389 0ae7 3F       		.byte	0x3f
 3390 0ae8 F30A0000 		.4byte	0xaf3
 3391 0aec 01       		.byte	0x1
 3392 0aed 05       		.byte	0x5
 3393 0aee 03       		.byte	0x3
 3394 0aef 00000000 		.4byte	rx1buff
 3395 0af3 0E       		.uleb128 0xe
ARM GAS  /tmp/ccGoSbLI.s 			page 105


 3396 0af4 8C0A0000 		.4byte	0xa8c
 3397 0af8 26       		.uleb128 0x26
 3398 0af9 F7050000 		.4byte	.LASF177
 3399 0afd 02       		.byte	0x2
 3400 0afe 47       		.byte	0x47
 3401 0aff 3D010000 		.4byte	0x13d
 3402 0b03 01       		.byte	0x1
 3403 0b04 05       		.byte	0x5
 3404 0b05 03       		.byte	0x3
 3405 0b06 00000000 		.4byte	mains_voltage_filtered
 3406 0b0a 26       		.uleb128 0x26
 3407 0b0b CF030000 		.4byte	.LASF178
 3408 0b0f 02       		.byte	0x2
 3409 0b10 51       		.byte	0x51
 3410 0b11 1C0B0000 		.4byte	0xb1c
 3411 0b15 01       		.byte	0x1
 3412 0b16 05       		.byte	0x5
 3413 0b17 03       		.byte	0x3
 3414 0b18 00000000 		.4byte	take_temp_sample
 3415 0b1c 0E       		.uleb128 0xe
 3416 0b1d 3D010000 		.4byte	0x13d
 3417 0b21 26       		.uleb128 0x26
 3418 0b22 2F030000 		.4byte	.LASF179
 3419 0b26 02       		.byte	0x2
 3420 0b27 52       		.byte	0x52
 3421 0b28 3D010000 		.4byte	0x13d
 3422 0b2c 01       		.byte	0x1
 3423 0b2d 05       		.byte	0x5
 3424 0b2e 03       		.byte	0x3
 3425 0b2f 00000000 		.4byte	timer_rep
 3426 0b33 26       		.uleb128 0x26
 3427 0b34 26050000 		.4byte	.LASF180
 3428 0b38 02       		.byte	0x2
 3429 0b39 56       		.byte	0x56
 3430 0b3a 1C0B0000 		.4byte	0xb1c
 3431 0b3e 01       		.byte	0x1
 3432 0b3f 05       		.byte	0x5
 3433 0b40 03       		.byte	0x3
 3434 0b41 00000000 		.4byte	timer_relay
 3435 0b45 26       		.uleb128 0x26
 3436 0b46 03030000 		.4byte	.LASF181
 3437 0b4a 02       		.byte	0x2
 3438 0b4b 58       		.byte	0x58
 3439 0b4c 1C0B0000 		.4byte	0xb1c
 3440 0b50 01       		.byte	0x1
 3441 0b51 05       		.byte	0x5
 3442 0b52 03       		.byte	0x3
 3443 0b53 00000000 		.4byte	tt_take_photo_sample
 3444 0b57 26       		.uleb128 0x26
 3445 0b58 8D040000 		.4byte	.LASF182
 3446 0b5c 02       		.byte	0x2
 3447 0b5d 59       		.byte	0x59
 3448 0b5e 1C0B0000 		.4byte	0xb1c
 3449 0b62 01       		.byte	0x1
 3450 0b63 05       		.byte	0x5
 3451 0b64 03       		.byte	0x3
 3452 0b65 00000000 		.4byte	tt_relay_on_off
ARM GAS  /tmp/ccGoSbLI.s 			page 106


 3453 0b69 26       		.uleb128 0x26
 3454 0b6a 10050000 		.4byte	.LASF183
 3455 0b6e 02       		.byte	0x2
 3456 0b6f 5D       		.byte	0x5d
 3457 0b70 24010000 		.4byte	0x124
 3458 0b74 01       		.byte	0x1
 3459 0b75 05       		.byte	0x5
 3460 0b76 03       		.byte	0x3
 3461 0b77 00000000 		.4byte	saved_mode
 3462 0b7b 26       		.uleb128 0x26
 3463 0b7c C2080000 		.4byte	.LASF184
 3464 0b80 02       		.byte	0x2
 3465 0b81 60       		.byte	0x60
 3466 0b82 24010000 		.4byte	0x124
 3467 0b86 01       		.byte	0x1
 3468 0b87 05       		.byte	0x5
 3469 0b88 03       		.byte	0x3
 3470 0b89 00000000 		.4byte	send_energy
 3471 0b8d 26       		.uleb128 0x26
 3472 0b8e 5D080000 		.4byte	.LASF185
 3473 0b92 02       		.byte	0x2
 3474 0b93 63       		.byte	0x63
 3475 0b94 9F0B0000 		.4byte	0xb9f
 3476 0b98 01       		.byte	0x1
 3477 0b99 05       		.byte	0x5
 3478 0b9a 03       		.byte	0x3
 3479 0b9b 00000000 		.4byte	adc_ch
 3480 0b9f 0E       		.uleb128 0xe
 3481 0ba0 BA050000 		.4byte	0x5ba
 3482 0ba4 26       		.uleb128 0x26
 3483 0ba5 280B0000 		.4byte	.LASF186
 3484 0ba9 02       		.byte	0x2
 3485 0baa 64       		.byte	0x64
 3486 0bab B60B0000 		.4byte	0xbb6
 3487 0baf 01       		.byte	0x1
 3488 0bb0 05       		.byte	0x5
 3489 0bb1 03       		.byte	0x3
 3490 0bb2 00000000 		.4byte	seq_ready
 3491 0bb6 0E       		.uleb128 0xe
 3492 0bb7 24010000 		.4byte	0x124
 3493 0bbb 26       		.uleb128 0x26
 3494 0bbc 72050000 		.4byte	.LASF187
 3495 0bc0 02       		.byte	0x2
 3496 0bc1 65       		.byte	0x65
 3497 0bc2 3D010000 		.4byte	0x13d
 3498 0bc6 01       		.byte	0x1
 3499 0bc7 05       		.byte	0x5
 3500 0bc8 03       		.byte	0x3
 3501 0bc9 00000000 		.4byte	zero_current
 3502 0bcd 26       		.uleb128 0x26
 3503 0bce E7040000 		.4byte	.LASF188
 3504 0bd2 02       		.byte	0x2
 3505 0bd3 69       		.byte	0x69
 3506 0bd4 B60B0000 		.4byte	0xbb6
 3507 0bd8 01       		.byte	0x1
 3508 0bd9 05       		.byte	0x5
 3509 0bda 03       		.byte	0x3
ARM GAS  /tmp/ccGoSbLI.s 			page 107


 3510 0bdb 00000000 		.4byte	usart1_mini_timeout
 3511 0bdf 26       		.uleb128 0x26
 3512 0be0 C6020000 		.4byte	.LASF189
 3513 0be4 02       		.byte	0x2
 3514 0be5 6A       		.byte	0x6a
 3515 0be6 B60B0000 		.4byte	0xbb6
 3516 0bea 01       		.byte	0x1
 3517 0beb 05       		.byte	0x5
 3518 0bec 03       		.byte	0x3
 3519 0bed 00000000 		.4byte	usart1_pckt_ready
 3520 0bf1 26       		.uleb128 0x26
 3521 0bf2 5E030000 		.4byte	.LASF190
 3522 0bf6 02       		.byte	0x2
 3523 0bf7 6B       		.byte	0x6b
 3524 0bf8 B60B0000 		.4byte	0xbb6
 3525 0bfc 01       		.byte	0x1
 3526 0bfd 05       		.byte	0x5
 3527 0bfe 03       		.byte	0x3
 3528 0bff 00000000 		.4byte	usart1_have_data
 3529 0c03 26       		.uleb128 0x26
 3530 0c04 34020000 		.4byte	.LASF191
 3531 0c08 02       		.byte	0x2
 3532 0c09 6C       		.byte	0x6c
 3533 0c0a 24010000 		.4byte	0x124
 3534 0c0e 01       		.byte	0x1
 3535 0c0f 05       		.byte	0x5
 3536 0c10 03       		.byte	0x3
 3537 0c11 00000000 		.4byte	usart1_pckt_bytes
 3538 0c15 26       		.uleb128 0x26
 3539 0c16 4E040000 		.4byte	.LASF192
 3540 0c1a 02       		.byte	0x2
 3541 0c1b 83       		.byte	0x83
 3542 0c1c B60B0000 		.4byte	0xbb6
 3543 0c20 01       		.byte	0x1
 3544 0c21 05       		.byte	0x5
 3545 0c22 03       		.byte	0x3
 3546 0c23 00000000 		.4byte	usart2_mini_timeout
 3547 0c27 26       		.uleb128 0x26
 3548 0c28 32090000 		.4byte	.LASF193
 3549 0c2c 02       		.byte	0x2
 3550 0c2d 84       		.byte	0x84
 3551 0c2e B60B0000 		.4byte	0xbb6
 3552 0c32 01       		.byte	0x1
 3553 0c33 05       		.byte	0x5
 3554 0c34 03       		.byte	0x3
 3555 0c35 00000000 		.4byte	usart2_pckt_ready
 3556 0c39 26       		.uleb128 0x26
 3557 0c3a 58010000 		.4byte	.LASF194
 3558 0c3e 02       		.byte	0x2
 3559 0c3f 85       		.byte	0x85
 3560 0c40 B60B0000 		.4byte	0xbb6
 3561 0c44 01       		.byte	0x1
 3562 0c45 05       		.byte	0x5
 3563 0c46 03       		.byte	0x3
 3564 0c47 00000000 		.4byte	usart2_have_data
 3565 0c4b 26       		.uleb128 0x26
 3566 0c4c 7B040000 		.4byte	.LASF195
ARM GAS  /tmp/ccGoSbLI.s 			page 108


 3567 0c50 02       		.byte	0x2
 3568 0c51 86       		.byte	0x86
 3569 0c52 24010000 		.4byte	0x124
 3570 0c56 01       		.byte	0x1
 3571 0c57 05       		.byte	0x5
 3572 0c58 03       		.byte	0x3
 3573 0c59 00000000 		.4byte	usart2_pckt_bytes
 3574 0c5d 0C       		.uleb128 0xc
 3575 0c5e B3050000 		.4byte	0x5b3
 3576 0c62 680C0000 		.4byte	0xc68
 3577 0c66 27       		.uleb128 0x27
 3578 0c67 00       		.byte	0
 3579 0c68 28       		.uleb128 0x28
 3580 0c69 46060000 		.4byte	.LASF196
 3581 0c6d 02       		.byte	0x2
 3582 0c6e 88       		.byte	0x88
 3583 0c6f 750C0000 		.4byte	0xc75
 3584 0c73 01       		.byte	0x1
 3585 0c74 01       		.byte	0x1
 3586 0c75 0E       		.uleb128 0xe
 3587 0c76 5D0C0000 		.4byte	0xc5d
 3588 0c7a 26       		.uleb128 0x26
 3589 0c7b 26000000 		.4byte	.LASF197
 3590 0c7f 02       		.byte	0x2
 3591 0c80 8B       		.byte	0x8b
 3592 0c81 F9060000 		.4byte	0x6f9
 3593 0c85 01       		.byte	0x1
 3594 0c86 05       		.byte	0x5
 3595 0c87 03       		.byte	0x3
 3596 0c88 00000000 		.4byte	param_struct
 3597 0c8c 26       		.uleb128 0x26
 3598 0c8d 61050000 		.4byte	.LASF198
 3599 0c91 02       		.byte	0x2
 3600 0c92 8E       		.byte	0x8e
 3601 0c93 3D010000 		.4byte	0x13d
 3602 0c97 01       		.byte	0x1
 3603 0c98 05       		.byte	0x5
 3604 0c99 03       		.byte	0x3
 3605 0c9a 00000000 		.4byte	show_power_index
 3606 0c9e 0C       		.uleb128 0xc
 3607 0c9f B3050000 		.4byte	0x5b3
 3608 0ca3 AE0C0000 		.4byte	0xcae
 3609 0ca7 0D       		.uleb128 0xd
 3610 0ca8 5D020000 		.4byte	0x25d
 3611 0cac 13       		.byte	0x13
 3612 0cad 00       		.byte	0
 3613 0cae 26       		.uleb128 0x26
 3614 0caf 5A060000 		.4byte	.LASF199
 3615 0cb3 02       		.byte	0x2
 3616 0cb4 98       		.byte	0x98
 3617 0cb5 9E0C0000 		.4byte	0xc9e
 3618 0cb9 01       		.byte	0x1
 3619 0cba 05       		.byte	0x5
 3620 0cbb 03       		.byte	0x3
 3621 0cbc 00000000 		.4byte	gsmNUM
 3622 0cc0 0C       		.uleb128 0xc
 3623 0cc1 B3050000 		.4byte	0x5b3
ARM GAS  /tmp/ccGoSbLI.s 			page 109


 3624 0cc5 D00C0000 		.4byte	0xcd0
 3625 0cc9 0D       		.uleb128 0xd
 3626 0cca 5D020000 		.4byte	0x25d
 3627 0cce B3       		.byte	0xb3
 3628 0ccf 00       		.byte	0
 3629 0cd0 26       		.uleb128 0x26
 3630 0cd1 65070000 		.4byte	.LASF200
 3631 0cd5 02       		.byte	0x2
 3632 0cd6 99       		.byte	0x99
 3633 0cd7 C00C0000 		.4byte	0xcc0
 3634 0cdb 01       		.byte	0x1
 3635 0cdc 05       		.byte	0x5
 3636 0cdd 03       		.byte	0x3
 3637 0cde 00000000 		.4byte	gsmMSG
 3638 0ce2 26       		.uleb128 0x26
 3639 0ce3 0D070000 		.4byte	.LASF201
 3640 0ce7 02       		.byte	0x2
 3641 0ce8 A1       		.byte	0xa1
 3642 0ce9 1C0B0000 		.4byte	0xb1c
 3643 0ced 01       		.byte	0x1
 3644 0cee 05       		.byte	0x5
 3645 0cef 03       		.byte	0x3
 3646 0cf0 00000000 		.4byte	wait_ms_var
 3647 0cf4 26       		.uleb128 0x26
 3648 0cf5 590B0000 		.4byte	.LASF202
 3649 0cf9 02       		.byte	0x2
 3650 0cfa A2       		.byte	0xa2
 3651 0cfb 1C0B0000 		.4byte	0xb1c
 3652 0cff 01       		.byte	0x1
 3653 0d00 05       		.byte	0x5
 3654 0d01 03       		.byte	0x3
 3655 0d02 00000000 		.4byte	timer_standby
 3656 0d06 26       		.uleb128 0x26
 3657 0d07 E3000000 		.4byte	.LASF203
 3658 0d0b 02       		.byte	0x2
 3659 0d0c A3       		.byte	0xa3
 3660 0d0d 1C0B0000 		.4byte	0xb1c
 3661 0d11 01       		.byte	0x1
 3662 0d12 05       		.byte	0x5
 3663 0d13 03       		.byte	0x3
 3664 0d14 00000000 		.4byte	tcp_kalive_timer
 3665 0d18 26       		.uleb128 0x26
 3666 0d19 4D010000 		.4byte	.LASF204
 3667 0d1d 02       		.byte	0x2
 3668 0d1e A5       		.byte	0xa5
 3669 0d1f B60B0000 		.4byte	0xbb6
 3670 0d23 01       		.byte	0x1
 3671 0d24 05       		.byte	0x5
 3672 0d25 03       		.byte	0x3
 3673 0d26 00000000 		.4byte	timer_meas
 3674 0d2a 26       		.uleb128 0x26
 3675 0d2b 9D040000 		.4byte	.LASF205
 3676 0d2f 02       		.byte	0x2
 3677 0d30 AB       		.byte	0xab
 3678 0d31 1C0B0000 		.4byte	0xb1c
 3679 0d35 01       		.byte	0x1
 3680 0d36 05       		.byte	0x5
ARM GAS  /tmp/ccGoSbLI.s 			page 110


 3681 0d37 03       		.byte	0x3
 3682 0d38 00000000 		.4byte	secs
 3683 0d3c 26       		.uleb128 0x26
 3684 0d3d 6C070000 		.4byte	.LASF206
 3685 0d41 02       		.byte	0x2
 3686 0d42 AC       		.byte	0xac
 3687 0d43 B60B0000 		.4byte	0xbb6
 3688 0d47 01       		.byte	0x1
 3689 0d48 05       		.byte	0x5
 3690 0d49 03       		.byte	0x3
 3691 0d4a 00000000 		.4byte	hours
 3692 0d4e 26       		.uleb128 0x26
 3693 0d4f 83020000 		.4byte	.LASF207
 3694 0d53 02       		.byte	0x2
 3695 0d54 AD       		.byte	0xad
 3696 0d55 B60B0000 		.4byte	0xbb6
 3697 0d59 01       		.byte	0x1
 3698 0d5a 05       		.byte	0x5
 3699 0d5b 03       		.byte	0x3
 3700 0d5c 00000000 		.4byte	minutes
 3701 0d60 0C       		.uleb128 0xc
 3702 0d61 3D010000 		.4byte	0x13d
 3703 0d65 700D0000 		.4byte	0xd70
 3704 0d69 0D       		.uleb128 0xd
 3705 0d6a 5D020000 		.4byte	0x25d
 3706 0d6e 09       		.byte	0x9
 3707 0d6f 00       		.byte	0
 3708 0d70 26       		.uleb128 0x26
 3709 0d71 52080000 		.4byte	.LASF208
 3710 0d75 02       		.byte	0x2
 3711 0d76 B2       		.byte	0xb2
 3712 0d77 600D0000 		.4byte	0xd60
 3713 0d7b 01       		.byte	0x1
 3714 0d7c 05       		.byte	0x5
 3715 0d7d 03       		.byte	0x3
 3716 0d7e 00000000 		.4byte	power_vect
 3717 0d82 0C       		.uleb128 0xc
 3718 0d83 3D010000 		.4byte	0x13d
 3719 0d87 920D0000 		.4byte	0xd92
 3720 0d8b 0D       		.uleb128 0xd
 3721 0d8c 5D020000 		.4byte	0x25d
 3722 0d90 10       		.byte	0x10
 3723 0d91 00       		.byte	0
 3724 0d92 26       		.uleb128 0x26
 3725 0d93 320B0000 		.4byte	.LASF209
 3726 0d97 02       		.byte	0x2
 3727 0d98 C0       		.byte	0xc0
 3728 0d99 820D0000 		.4byte	0xd82
 3729 0d9d 01       		.byte	0x1
 3730 0d9e 05       		.byte	0x5
 3731 0d9f 03       		.byte	0x3
 3732 0da0 00000000 		.4byte	vtemp
 3733 0da4 26       		.uleb128 0x26
 3734 0da5 AF000000 		.4byte	.LASF210
 3735 0da9 02       		.byte	0x2
 3736 0daa C1       		.byte	0xc1
 3737 0dab 820D0000 		.4byte	0xd82
ARM GAS  /tmp/ccGoSbLI.s 			page 111


 3738 0daf 01       		.byte	0x1
 3739 0db0 05       		.byte	0x5
 3740 0db1 03       		.byte	0x3
 3741 0db2 00000000 		.4byte	vpote
 3742 0db6 00       		.byte	0
 3743              		.section	.debug_abbrev,"",%progbits
 3744              	.Ldebug_abbrev0:
 3745 0000 01       		.uleb128 0x1
 3746 0001 11       		.uleb128 0x11
 3747 0002 01       		.byte	0x1
 3748 0003 25       		.uleb128 0x25
 3749 0004 0E       		.uleb128 0xe
 3750 0005 13       		.uleb128 0x13
 3751 0006 0B       		.uleb128 0xb
 3752 0007 03       		.uleb128 0x3
 3753 0008 0E       		.uleb128 0xe
 3754 0009 1B       		.uleb128 0x1b
 3755 000a 0E       		.uleb128 0xe
 3756 000b 55       		.uleb128 0x55
 3757 000c 06       		.uleb128 0x6
 3758 000d 11       		.uleb128 0x11
 3759 000e 01       		.uleb128 0x1
 3760 000f 52       		.uleb128 0x52
 3761 0010 01       		.uleb128 0x1
 3762 0011 10       		.uleb128 0x10
 3763 0012 06       		.uleb128 0x6
 3764 0013 00       		.byte	0
 3765 0014 00       		.byte	0
 3766 0015 02       		.uleb128 0x2
 3767 0016 04       		.uleb128 0x4
 3768 0017 01       		.byte	0x1
 3769 0018 03       		.uleb128 0x3
 3770 0019 0E       		.uleb128 0xe
 3771 001a 0B       		.uleb128 0xb
 3772 001b 0B       		.uleb128 0xb
 3773 001c 49       		.uleb128 0x49
 3774 001d 13       		.uleb128 0x13
 3775 001e 3A       		.uleb128 0x3a
 3776 001f 0B       		.uleb128 0xb
 3777 0020 3B       		.uleb128 0x3b
 3778 0021 0B       		.uleb128 0xb
 3779 0022 01       		.uleb128 0x1
 3780 0023 13       		.uleb128 0x13
 3781 0024 00       		.byte	0
 3782 0025 00       		.byte	0
 3783 0026 03       		.uleb128 0x3
 3784 0027 28       		.uleb128 0x28
 3785 0028 00       		.byte	0
 3786 0029 03       		.uleb128 0x3
 3787 002a 0E       		.uleb128 0xe
 3788 002b 1C       		.uleb128 0x1c
 3789 002c 0D       		.uleb128 0xd
 3790 002d 00       		.byte	0
 3791 002e 00       		.byte	0
 3792 002f 04       		.uleb128 0x4
 3793 0030 28       		.uleb128 0x28
 3794 0031 00       		.byte	0
ARM GAS  /tmp/ccGoSbLI.s 			page 112


 3795 0032 03       		.uleb128 0x3
 3796 0033 0E       		.uleb128 0xe
 3797 0034 1C       		.uleb128 0x1c
 3798 0035 0B       		.uleb128 0xb
 3799 0036 00       		.byte	0
 3800 0037 00       		.byte	0
 3801 0038 05       		.uleb128 0x5
 3802 0039 24       		.uleb128 0x24
 3803 003a 00       		.byte	0
 3804 003b 0B       		.uleb128 0xb
 3805 003c 0B       		.uleb128 0xb
 3806 003d 3E       		.uleb128 0x3e
 3807 003e 0B       		.uleb128 0xb
 3808 003f 03       		.uleb128 0x3
 3809 0040 0E       		.uleb128 0xe
 3810 0041 00       		.byte	0
 3811 0042 00       		.byte	0
 3812 0043 06       		.uleb128 0x6
 3813 0044 16       		.uleb128 0x16
 3814 0045 00       		.byte	0
 3815 0046 03       		.uleb128 0x3
 3816 0047 0E       		.uleb128 0xe
 3817 0048 3A       		.uleb128 0x3a
 3818 0049 0B       		.uleb128 0xb
 3819 004a 3B       		.uleb128 0x3b
 3820 004b 05       		.uleb128 0x5
 3821 004c 49       		.uleb128 0x49
 3822 004d 13       		.uleb128 0x13
 3823 004e 00       		.byte	0
 3824 004f 00       		.byte	0
 3825 0050 07       		.uleb128 0x7
 3826 0051 16       		.uleb128 0x16
 3827 0052 00       		.byte	0
 3828 0053 03       		.uleb128 0x3
 3829 0054 0E       		.uleb128 0xe
 3830 0055 3A       		.uleb128 0x3a
 3831 0056 0B       		.uleb128 0xb
 3832 0057 3B       		.uleb128 0x3b
 3833 0058 0B       		.uleb128 0xb
 3834 0059 49       		.uleb128 0x49
 3835 005a 13       		.uleb128 0x13
 3836 005b 00       		.byte	0
 3837 005c 00       		.byte	0
 3838 005d 08       		.uleb128 0x8
 3839 005e 24       		.uleb128 0x24
 3840 005f 00       		.byte	0
 3841 0060 0B       		.uleb128 0xb
 3842 0061 0B       		.uleb128 0xb
 3843 0062 3E       		.uleb128 0x3e
 3844 0063 0B       		.uleb128 0xb
 3845 0064 03       		.uleb128 0x3
 3846 0065 08       		.uleb128 0x8
 3847 0066 00       		.byte	0
 3848 0067 00       		.byte	0
 3849 0068 09       		.uleb128 0x9
 3850 0069 13       		.uleb128 0x13
 3851 006a 01       		.byte	0x1
ARM GAS  /tmp/ccGoSbLI.s 			page 113


 3852 006b 0B       		.uleb128 0xb
 3853 006c 05       		.uleb128 0x5
 3854 006d 3A       		.uleb128 0x3a
 3855 006e 0B       		.uleb128 0xb
 3856 006f 3B       		.uleb128 0x3b
 3857 0070 0B       		.uleb128 0xb
 3858 0071 01       		.uleb128 0x1
 3859 0072 13       		.uleb128 0x13
 3860 0073 00       		.byte	0
 3861 0074 00       		.byte	0
 3862 0075 0A       		.uleb128 0xa
 3863 0076 0D       		.uleb128 0xd
 3864 0077 00       		.byte	0
 3865 0078 03       		.uleb128 0x3
 3866 0079 0E       		.uleb128 0xe
 3867 007a 3A       		.uleb128 0x3a
 3868 007b 0B       		.uleb128 0xb
 3869 007c 3B       		.uleb128 0x3b
 3870 007d 0B       		.uleb128 0xb
 3871 007e 49       		.uleb128 0x49
 3872 007f 13       		.uleb128 0x13
 3873 0080 38       		.uleb128 0x38
 3874 0081 0A       		.uleb128 0xa
 3875 0082 00       		.byte	0
 3876 0083 00       		.byte	0
 3877 0084 0B       		.uleb128 0xb
 3878 0085 0D       		.uleb128 0xd
 3879 0086 00       		.byte	0
 3880 0087 03       		.uleb128 0x3
 3881 0088 08       		.uleb128 0x8
 3882 0089 3A       		.uleb128 0x3a
 3883 008a 0B       		.uleb128 0xb
 3884 008b 3B       		.uleb128 0x3b
 3885 008c 0B       		.uleb128 0xb
 3886 008d 49       		.uleb128 0x49
 3887 008e 13       		.uleb128 0x13
 3888 008f 38       		.uleb128 0x38
 3889 0090 0A       		.uleb128 0xa
 3890 0091 00       		.byte	0
 3891 0092 00       		.byte	0
 3892 0093 0C       		.uleb128 0xc
 3893 0094 01       		.uleb128 0x1
 3894 0095 01       		.byte	0x1
 3895 0096 49       		.uleb128 0x49
 3896 0097 13       		.uleb128 0x13
 3897 0098 01       		.uleb128 0x1
 3898 0099 13       		.uleb128 0x13
 3899 009a 00       		.byte	0
 3900 009b 00       		.byte	0
 3901 009c 0D       		.uleb128 0xd
 3902 009d 21       		.uleb128 0x21
 3903 009e 00       		.byte	0
 3904 009f 49       		.uleb128 0x49
 3905 00a0 13       		.uleb128 0x13
 3906 00a1 2F       		.uleb128 0x2f
 3907 00a2 0B       		.uleb128 0xb
 3908 00a3 00       		.byte	0
ARM GAS  /tmp/ccGoSbLI.s 			page 114


 3909 00a4 00       		.byte	0
 3910 00a5 0E       		.uleb128 0xe
 3911 00a6 35       		.uleb128 0x35
 3912 00a7 00       		.byte	0
 3913 00a8 49       		.uleb128 0x49
 3914 00a9 13       		.uleb128 0x13
 3915 00aa 00       		.byte	0
 3916 00ab 00       		.byte	0
 3917 00ac 0F       		.uleb128 0xf
 3918 00ad 13       		.uleb128 0x13
 3919 00ae 01       		.byte	0x1
 3920 00af 0B       		.uleb128 0xb
 3921 00b0 0B       		.uleb128 0xb
 3922 00b1 3A       		.uleb128 0x3a
 3923 00b2 0B       		.uleb128 0xb
 3924 00b3 3B       		.uleb128 0x3b
 3925 00b4 0B       		.uleb128 0xb
 3926 00b5 01       		.uleb128 0x1
 3927 00b6 13       		.uleb128 0x13
 3928 00b7 00       		.byte	0
 3929 00b8 00       		.byte	0
 3930 00b9 10       		.uleb128 0x10
 3931 00ba 26       		.uleb128 0x26
 3932 00bb 00       		.byte	0
 3933 00bc 49       		.uleb128 0x49
 3934 00bd 13       		.uleb128 0x13
 3935 00be 00       		.byte	0
 3936 00bf 00       		.byte	0
 3937 00c0 11       		.uleb128 0x11
 3938 00c1 0D       		.uleb128 0xd
 3939 00c2 00       		.byte	0
 3940 00c3 03       		.uleb128 0x3
 3941 00c4 08       		.uleb128 0x8
 3942 00c5 3A       		.uleb128 0x3a
 3943 00c6 0B       		.uleb128 0xb
 3944 00c7 3B       		.uleb128 0x3b
 3945 00c8 05       		.uleb128 0x5
 3946 00c9 49       		.uleb128 0x49
 3947 00ca 13       		.uleb128 0x13
 3948 00cb 38       		.uleb128 0x38
 3949 00cc 0A       		.uleb128 0xa
 3950 00cd 00       		.byte	0
 3951 00ce 00       		.byte	0
 3952 00cf 12       		.uleb128 0x12
 3953 00d0 0D       		.uleb128 0xd
 3954 00d1 00       		.byte	0
 3955 00d2 03       		.uleb128 0x3
 3956 00d3 0E       		.uleb128 0xe
 3957 00d4 3A       		.uleb128 0x3a
 3958 00d5 0B       		.uleb128 0xb
 3959 00d6 3B       		.uleb128 0x3b
 3960 00d7 05       		.uleb128 0x5
 3961 00d8 49       		.uleb128 0x49
 3962 00d9 13       		.uleb128 0x13
 3963 00da 38       		.uleb128 0x38
 3964 00db 0A       		.uleb128 0xa
 3965 00dc 00       		.byte	0
ARM GAS  /tmp/ccGoSbLI.s 			page 115


 3966 00dd 00       		.byte	0
 3967 00de 13       		.uleb128 0x13
 3968 00df 13       		.uleb128 0x13
 3969 00e0 01       		.byte	0x1
 3970 00e1 0B       		.uleb128 0xb
 3971 00e2 0B       		.uleb128 0xb
 3972 00e3 3A       		.uleb128 0x3a
 3973 00e4 0B       		.uleb128 0xb
 3974 00e5 3B       		.uleb128 0x3b
 3975 00e6 05       		.uleb128 0x5
 3976 00e7 01       		.uleb128 0x1
 3977 00e8 13       		.uleb128 0x13
 3978 00e9 00       		.byte	0
 3979 00ea 00       		.byte	0
 3980 00eb 14       		.uleb128 0x14
 3981 00ec 04       		.uleb128 0x4
 3982 00ed 01       		.byte	0x1
 3983 00ee 0B       		.uleb128 0xb
 3984 00ef 0B       		.uleb128 0xb
 3985 00f0 49       		.uleb128 0x49
 3986 00f1 13       		.uleb128 0x13
 3987 00f2 3A       		.uleb128 0x3a
 3988 00f3 0B       		.uleb128 0xb
 3989 00f4 3B       		.uleb128 0x3b
 3990 00f5 0B       		.uleb128 0xb
 3991 00f6 01       		.uleb128 0x1
 3992 00f7 13       		.uleb128 0x13
 3993 00f8 00       		.byte	0
 3994 00f9 00       		.byte	0
 3995 00fa 15       		.uleb128 0x15
 3996 00fb 13       		.uleb128 0x13
 3997 00fc 01       		.byte	0x1
 3998 00fd 03       		.uleb128 0x3
 3999 00fe 0E       		.uleb128 0xe
 4000 00ff 0B       		.uleb128 0xb
 4001 0100 0B       		.uleb128 0xb
 4002 0101 3A       		.uleb128 0x3a
 4003 0102 0B       		.uleb128 0xb
 4004 0103 3B       		.uleb128 0x3b
 4005 0104 0B       		.uleb128 0xb
 4006 0105 01       		.uleb128 0x1
 4007 0106 13       		.uleb128 0x13
 4008 0107 00       		.byte	0
 4009 0108 00       		.byte	0
 4010 0109 16       		.uleb128 0x16
 4011 010a 2E       		.uleb128 0x2e
 4012 010b 01       		.byte	0x1
 4013 010c 03       		.uleb128 0x3
 4014 010d 0E       		.uleb128 0xe
 4015 010e 3A       		.uleb128 0x3a
 4016 010f 0B       		.uleb128 0xb
 4017 0110 3B       		.uleb128 0x3b
 4018 0111 05       		.uleb128 0x5
 4019 0112 27       		.uleb128 0x27
 4020 0113 0C       		.uleb128 0xc
 4021 0114 11       		.uleb128 0x11
 4022 0115 01       		.uleb128 0x1
ARM GAS  /tmp/ccGoSbLI.s 			page 116


 4023 0116 12       		.uleb128 0x12
 4024 0117 01       		.uleb128 0x1
 4025 0118 40       		.uleb128 0x40
 4026 0119 06       		.uleb128 0x6
 4027 011a 9742     		.uleb128 0x2117
 4028 011c 0C       		.uleb128 0xc
 4029 011d 01       		.uleb128 0x1
 4030 011e 13       		.uleb128 0x13
 4031 011f 00       		.byte	0
 4032 0120 00       		.byte	0
 4033 0121 17       		.uleb128 0x17
 4034 0122 05       		.uleb128 0x5
 4035 0123 00       		.byte	0
 4036 0124 03       		.uleb128 0x3
 4037 0125 0E       		.uleb128 0xe
 4038 0126 3A       		.uleb128 0x3a
 4039 0127 0B       		.uleb128 0xb
 4040 0128 3B       		.uleb128 0x3b
 4041 0129 05       		.uleb128 0x5
 4042 012a 49       		.uleb128 0x49
 4043 012b 13       		.uleb128 0x13
 4044 012c 02       		.uleb128 0x2
 4045 012d 0A       		.uleb128 0xa
 4046 012e 00       		.byte	0
 4047 012f 00       		.byte	0
 4048 0130 18       		.uleb128 0x18
 4049 0131 2E       		.uleb128 0x2e
 4050 0132 01       		.byte	0x1
 4051 0133 03       		.uleb128 0x3
 4052 0134 0E       		.uleb128 0xe
 4053 0135 3A       		.uleb128 0x3a
 4054 0136 0B       		.uleb128 0xb
 4055 0137 3B       		.uleb128 0x3b
 4056 0138 05       		.uleb128 0x5
 4057 0139 27       		.uleb128 0x27
 4058 013a 0C       		.uleb128 0xc
 4059 013b 49       		.uleb128 0x49
 4060 013c 13       		.uleb128 0x13
 4061 013d 11       		.uleb128 0x11
 4062 013e 01       		.uleb128 0x1
 4063 013f 12       		.uleb128 0x12
 4064 0140 01       		.uleb128 0x1
 4065 0141 40       		.uleb128 0x40
 4066 0142 06       		.uleb128 0x6
 4067 0143 9642     		.uleb128 0x2116
 4068 0145 0C       		.uleb128 0xc
 4069 0146 01       		.uleb128 0x1
 4070 0147 13       		.uleb128 0x13
 4071 0148 00       		.byte	0
 4072 0149 00       		.byte	0
 4073 014a 19       		.uleb128 0x19
 4074 014b 2E       		.uleb128 0x2e
 4075 014c 01       		.byte	0x1
 4076 014d 3F       		.uleb128 0x3f
 4077 014e 0C       		.uleb128 0xc
 4078 014f 03       		.uleb128 0x3
 4079 0150 0E       		.uleb128 0xe
ARM GAS  /tmp/ccGoSbLI.s 			page 117


 4080 0151 3A       		.uleb128 0x3a
 4081 0152 0B       		.uleb128 0xb
 4082 0153 3B       		.uleb128 0x3b
 4083 0154 0B       		.uleb128 0xb
 4084 0155 27       		.uleb128 0x27
 4085 0156 0C       		.uleb128 0xc
 4086 0157 49       		.uleb128 0x49
 4087 0158 13       		.uleb128 0x13
 4088 0159 11       		.uleb128 0x11
 4089 015a 01       		.uleb128 0x1
 4090 015b 12       		.uleb128 0x12
 4091 015c 01       		.uleb128 0x1
 4092 015d 40       		.uleb128 0x40
 4093 015e 06       		.uleb128 0x6
 4094 015f 9642     		.uleb128 0x2116
 4095 0161 0C       		.uleb128 0xc
 4096 0162 01       		.uleb128 0x1
 4097 0163 13       		.uleb128 0x13
 4098 0164 00       		.byte	0
 4099 0165 00       		.byte	0
 4100 0166 1A       		.uleb128 0x1a
 4101 0167 34       		.uleb128 0x34
 4102 0168 00       		.byte	0
 4103 0169 03       		.uleb128 0x3
 4104 016a 08       		.uleb128 0x8
 4105 016b 3A       		.uleb128 0x3a
 4106 016c 0B       		.uleb128 0xb
 4107 016d 3B       		.uleb128 0x3b
 4108 016e 0B       		.uleb128 0xb
 4109 016f 49       		.uleb128 0x49
 4110 0170 13       		.uleb128 0x13
 4111 0171 02       		.uleb128 0x2
 4112 0172 0A       		.uleb128 0xa
 4113 0173 00       		.byte	0
 4114 0174 00       		.byte	0
 4115 0175 1B       		.uleb128 0x1b
 4116 0176 34       		.uleb128 0x34
 4117 0177 00       		.byte	0
 4118 0178 03       		.uleb128 0x3
 4119 0179 08       		.uleb128 0x8
 4120 017a 3A       		.uleb128 0x3a
 4121 017b 0B       		.uleb128 0xb
 4122 017c 3B       		.uleb128 0x3b
 4123 017d 0B       		.uleb128 0xb
 4124 017e 49       		.uleb128 0x49
 4125 017f 13       		.uleb128 0x13
 4126 0180 00       		.byte	0
 4127 0181 00       		.byte	0
 4128 0182 1C       		.uleb128 0x1c
 4129 0183 34       		.uleb128 0x34
 4130 0184 00       		.byte	0
 4131 0185 03       		.uleb128 0x3
 4132 0186 0E       		.uleb128 0xe
 4133 0187 3A       		.uleb128 0x3a
 4134 0188 0B       		.uleb128 0xb
 4135 0189 3B       		.uleb128 0x3b
 4136 018a 0B       		.uleb128 0xb
ARM GAS  /tmp/ccGoSbLI.s 			page 118


 4137 018b 49       		.uleb128 0x49
 4138 018c 13       		.uleb128 0x13
 4139 018d 00       		.byte	0
 4140 018e 00       		.byte	0
 4141 018f 1D       		.uleb128 0x1d
 4142 0190 34       		.uleb128 0x34
 4143 0191 00       		.byte	0
 4144 0192 03       		.uleb128 0x3
 4145 0193 0E       		.uleb128 0xe
 4146 0194 3A       		.uleb128 0x3a
 4147 0195 0B       		.uleb128 0xb
 4148 0196 3B       		.uleb128 0x3b
 4149 0197 0B       		.uleb128 0xb
 4150 0198 49       		.uleb128 0x49
 4151 0199 13       		.uleb128 0x13
 4152 019a 02       		.uleb128 0x2
 4153 019b 0A       		.uleb128 0xa
 4154 019c 00       		.byte	0
 4155 019d 00       		.byte	0
 4156 019e 1E       		.uleb128 0x1e
 4157 019f 0B       		.uleb128 0xb
 4158 01a0 01       		.byte	0x1
 4159 01a1 11       		.uleb128 0x11
 4160 01a2 01       		.uleb128 0x1
 4161 01a3 12       		.uleb128 0x12
 4162 01a4 01       		.uleb128 0x1
 4163 01a5 00       		.byte	0
 4164 01a6 00       		.byte	0
 4165 01a7 1F       		.uleb128 0x1f
 4166 01a8 2E       		.uleb128 0x2e
 4167 01a9 01       		.byte	0x1
 4168 01aa 3F       		.uleb128 0x3f
 4169 01ab 0C       		.uleb128 0xc
 4170 01ac 03       		.uleb128 0x3
 4171 01ad 0E       		.uleb128 0xe
 4172 01ae 3A       		.uleb128 0x3a
 4173 01af 0B       		.uleb128 0xb
 4174 01b0 3B       		.uleb128 0x3b
 4175 01b1 05       		.uleb128 0x5
 4176 01b2 49       		.uleb128 0x49
 4177 01b3 13       		.uleb128 0x13
 4178 01b4 3C       		.uleb128 0x3c
 4179 01b5 0C       		.uleb128 0xc
 4180 01b6 00       		.byte	0
 4181 01b7 00       		.byte	0
 4182 01b8 20       		.uleb128 0x20
 4183 01b9 18       		.uleb128 0x18
 4184 01ba 00       		.byte	0
 4185 01bb 00       		.byte	0
 4186 01bc 00       		.byte	0
 4187 01bd 21       		.uleb128 0x21
 4188 01be 2E       		.uleb128 0x2e
 4189 01bf 01       		.byte	0x1
 4190 01c0 3F       		.uleb128 0x3f
 4191 01c1 0C       		.uleb128 0xc
 4192 01c2 03       		.uleb128 0x3
 4193 01c3 0E       		.uleb128 0xe
ARM GAS  /tmp/ccGoSbLI.s 			page 119


 4194 01c4 3A       		.uleb128 0x3a
 4195 01c5 0B       		.uleb128 0xb
 4196 01c6 3B       		.uleb128 0x3b
 4197 01c7 05       		.uleb128 0x5
 4198 01c8 27       		.uleb128 0x27
 4199 01c9 0C       		.uleb128 0xc
 4200 01ca 11       		.uleb128 0x11
 4201 01cb 01       		.uleb128 0x1
 4202 01cc 12       		.uleb128 0x12
 4203 01cd 01       		.uleb128 0x1
 4204 01ce 40       		.uleb128 0x40
 4205 01cf 06       		.uleb128 0x6
 4206 01d0 9642     		.uleb128 0x2116
 4207 01d2 0C       		.uleb128 0xc
 4208 01d3 01       		.uleb128 0x1
 4209 01d4 13       		.uleb128 0x13
 4210 01d5 00       		.byte	0
 4211 01d6 00       		.byte	0
 4212 01d7 22       		.uleb128 0x22
 4213 01d8 34       		.uleb128 0x34
 4214 01d9 00       		.byte	0
 4215 01da 03       		.uleb128 0x3
 4216 01db 08       		.uleb128 0x8
 4217 01dc 3A       		.uleb128 0x3a
 4218 01dd 0B       		.uleb128 0xb
 4219 01de 3B       		.uleb128 0x3b
 4220 01df 05       		.uleb128 0x5
 4221 01e0 49       		.uleb128 0x49
 4222 01e1 13       		.uleb128 0x13
 4223 01e2 02       		.uleb128 0x2
 4224 01e3 0A       		.uleb128 0xa
 4225 01e4 00       		.byte	0
 4226 01e5 00       		.byte	0
 4227 01e6 23       		.uleb128 0x23
 4228 01e7 34       		.uleb128 0x34
 4229 01e8 00       		.byte	0
 4230 01e9 03       		.uleb128 0x3
 4231 01ea 0E       		.uleb128 0xe
 4232 01eb 3A       		.uleb128 0x3a
 4233 01ec 0B       		.uleb128 0xb
 4234 01ed 3B       		.uleb128 0x3b
 4235 01ee 05       		.uleb128 0x5
 4236 01ef 49       		.uleb128 0x49
 4237 01f0 13       		.uleb128 0x13
 4238 01f1 02       		.uleb128 0x2
 4239 01f2 0A       		.uleb128 0xa
 4240 01f3 00       		.byte	0
 4241 01f4 00       		.byte	0
 4242 01f5 24       		.uleb128 0x24
 4243 01f6 0F       		.uleb128 0xf
 4244 01f7 00       		.byte	0
 4245 01f8 0B       		.uleb128 0xb
 4246 01f9 0B       		.uleb128 0xb
 4247 01fa 49       		.uleb128 0x49
 4248 01fb 13       		.uleb128 0x13
 4249 01fc 00       		.byte	0
 4250 01fd 00       		.byte	0
ARM GAS  /tmp/ccGoSbLI.s 			page 120


 4251 01fe 25       		.uleb128 0x25
 4252 01ff 2E       		.uleb128 0x2e
 4253 0200 00       		.byte	0
 4254 0201 3F       		.uleb128 0x3f
 4255 0202 0C       		.uleb128 0xc
 4256 0203 03       		.uleb128 0x3
 4257 0204 0E       		.uleb128 0xe
 4258 0205 3A       		.uleb128 0x3a
 4259 0206 0B       		.uleb128 0xb
 4260 0207 3B       		.uleb128 0x3b
 4261 0208 05       		.uleb128 0x5
 4262 0209 27       		.uleb128 0x27
 4263 020a 0C       		.uleb128 0xc
 4264 020b 11       		.uleb128 0x11
 4265 020c 01       		.uleb128 0x1
 4266 020d 12       		.uleb128 0x12
 4267 020e 01       		.uleb128 0x1
 4268 020f 40       		.uleb128 0x40
 4269 0210 06       		.uleb128 0x6
 4270 0211 9642     		.uleb128 0x2116
 4271 0213 0C       		.uleb128 0xc
 4272 0214 00       		.byte	0
 4273 0215 00       		.byte	0
 4274 0216 26       		.uleb128 0x26
 4275 0217 34       		.uleb128 0x34
 4276 0218 00       		.byte	0
 4277 0219 03       		.uleb128 0x3
 4278 021a 0E       		.uleb128 0xe
 4279 021b 3A       		.uleb128 0x3a
 4280 021c 0B       		.uleb128 0xb
 4281 021d 3B       		.uleb128 0x3b
 4282 021e 0B       		.uleb128 0xb
 4283 021f 49       		.uleb128 0x49
 4284 0220 13       		.uleb128 0x13
 4285 0221 3F       		.uleb128 0x3f
 4286 0222 0C       		.uleb128 0xc
 4287 0223 02       		.uleb128 0x2
 4288 0224 0A       		.uleb128 0xa
 4289 0225 00       		.byte	0
 4290 0226 00       		.byte	0
 4291 0227 27       		.uleb128 0x27
 4292 0228 21       		.uleb128 0x21
 4293 0229 00       		.byte	0
 4294 022a 00       		.byte	0
 4295 022b 00       		.byte	0
 4296 022c 28       		.uleb128 0x28
 4297 022d 34       		.uleb128 0x34
 4298 022e 00       		.byte	0
 4299 022f 03       		.uleb128 0x3
 4300 0230 0E       		.uleb128 0xe
 4301 0231 3A       		.uleb128 0x3a
 4302 0232 0B       		.uleb128 0xb
 4303 0233 3B       		.uleb128 0x3b
 4304 0234 0B       		.uleb128 0xb
 4305 0235 49       		.uleb128 0x49
 4306 0236 13       		.uleb128 0x13
 4307 0237 3F       		.uleb128 0x3f
ARM GAS  /tmp/ccGoSbLI.s 			page 121


 4308 0238 0C       		.uleb128 0xc
 4309 0239 3C       		.uleb128 0x3c
 4310 023a 0C       		.uleb128 0xc
 4311 023b 00       		.byte	0
 4312 023c 00       		.byte	0
 4313 023d 00       		.byte	0
 4314              		.section	.debug_loc,"",%progbits
 4315              	.Ldebug_loc0:
 4316              	.LLST0:
 4317 0000 00000000 		.4byte	.LFB16
 4318 0004 02000000 		.4byte	.LCFI0
 4319 0008 0200     		.2byte	0x2
 4320 000a 7D       		.byte	0x7d
 4321 000b 00       		.sleb128 0
 4322 000c 02000000 		.4byte	.LCFI0
 4323 0010 04000000 		.4byte	.LCFI1
 4324 0014 0200     		.2byte	0x2
 4325 0016 7D       		.byte	0x7d
 4326 0017 0C       		.sleb128 12
 4327 0018 04000000 		.4byte	.LCFI1
 4328 001c EC000000 		.4byte	.LFE16
 4329 0020 0200     		.2byte	0x2
 4330 0022 7D       		.byte	0x7d
 4331 0023 18       		.sleb128 24
 4332 0024 00000000 		.4byte	0
 4333 0028 00000000 		.4byte	0
 4334              	.LLST1:
 4335 002c 00000000 		.4byte	.LFB18
 4336 0030 02000000 		.4byte	.LCFI2
 4337 0034 0200     		.2byte	0x2
 4338 0036 7D       		.byte	0x7d
 4339 0037 00       		.sleb128 0
 4340 0038 02000000 		.4byte	.LCFI2
 4341 003c 04000000 		.4byte	.LCFI3
 4342 0040 0200     		.2byte	0x2
 4343 0042 7D       		.byte	0x7d
 4344 0043 04       		.sleb128 4
 4345 0044 04000000 		.4byte	.LCFI3
 4346 0048 48000000 		.4byte	.LFE18
 4347 004c 0200     		.2byte	0x2
 4348 004e 7D       		.byte	0x7d
 4349 004f 10       		.sleb128 16
 4350 0050 00000000 		.4byte	0
 4351 0054 00000000 		.4byte	0
 4352              	.LLST2:
 4353 0058 00000000 		.4byte	.LFB20
 4354 005c 02000000 		.4byte	.LCFI4
 4355 0060 0200     		.2byte	0x2
 4356 0062 7D       		.byte	0x7d
 4357 0063 00       		.sleb128 0
 4358 0064 02000000 		.4byte	.LCFI4
 4359 0068 04000000 		.4byte	.LCFI5
 4360 006c 0200     		.2byte	0x2
 4361 006e 7D       		.byte	0x7d
 4362 006f 0C       		.sleb128 12
 4363 0070 04000000 		.4byte	.LCFI5
 4364 0074 EC070000 		.4byte	.LFE20
ARM GAS  /tmp/ccGoSbLI.s 			page 122


 4365 0078 0300     		.2byte	0x3
 4366 007a 7D       		.byte	0x7d
 4367 007b 9801     		.sleb128 152
 4368 007d 00000000 		.4byte	0
 4369 0081 00000000 		.4byte	0
 4370              	.LLST3:
 4371 0085 00000000 		.4byte	.LFB21
 4372 0089 02000000 		.4byte	.LCFI6
 4373 008d 0200     		.2byte	0x2
 4374 008f 7D       		.byte	0x7d
 4375 0090 00       		.sleb128 0
 4376 0091 02000000 		.4byte	.LCFI6
 4377 0095 04000000 		.4byte	.LCFI7
 4378 0099 0200     		.2byte	0x2
 4379 009b 7D       		.byte	0x7d
 4380 009c 04       		.sleb128 4
 4381 009d 04000000 		.4byte	.LCFI7
 4382 00a1 B0000000 		.4byte	.LFE21
 4383 00a5 0300     		.2byte	0x3
 4384 00a7 7D       		.byte	0x7d
 4385 00a8 E000     		.sleb128 96
 4386 00aa 00000000 		.4byte	0
 4387 00ae 00000000 		.4byte	0
 4388              	.LLST4:
 4389 00b2 00000000 		.4byte	.LFB22
 4390 00b6 02000000 		.4byte	.LCFI8
 4391 00ba 0200     		.2byte	0x2
 4392 00bc 7D       		.byte	0x7d
 4393 00bd 00       		.sleb128 0
 4394 00be 02000000 		.4byte	.LCFI8
 4395 00c2 EC000000 		.4byte	.LFE22
 4396 00c6 0200     		.2byte	0x2
 4397 00c8 7D       		.byte	0x7d
 4398 00c9 08       		.sleb128 8
 4399 00ca 00000000 		.4byte	0
 4400 00ce 00000000 		.4byte	0
 4401              		.section	.debug_aranges,"",%progbits
 4402 0000 3C000000 		.4byte	0x3c
 4403 0004 0200     		.2byte	0x2
 4404 0006 00000000 		.4byte	.Ldebug_info0
 4405 000a 04       		.byte	0x4
 4406 000b 00       		.byte	0
 4407 000c 0000     		.2byte	0
 4408 000e 0000     		.2byte	0
 4409 0010 00000000 		.4byte	.LFB16
 4410 0014 EC000000 		.4byte	.LFE16-.LFB16
 4411 0018 00000000 		.4byte	.LFB18
 4412 001c 48000000 		.4byte	.LFE18-.LFB18
 4413 0020 00000000 		.4byte	.LFB20
 4414 0024 EC070000 		.4byte	.LFE20-.LFB20
 4415 0028 00000000 		.4byte	.LFB21
 4416 002c B0000000 		.4byte	.LFE21-.LFB21
 4417 0030 00000000 		.4byte	.LFB22
 4418 0034 EC000000 		.4byte	.LFE22-.LFB22
 4419 0038 00000000 		.4byte	0
 4420 003c 00000000 		.4byte	0
 4421              		.section	.debug_ranges,"",%progbits
ARM GAS  /tmp/ccGoSbLI.s 			page 123


 4422              	.Ldebug_ranges0:
 4423 0000 00000000 		.4byte	.LFB16
 4424 0004 EC000000 		.4byte	.LFE16
 4425 0008 00000000 		.4byte	.LFB18
 4426 000c 48000000 		.4byte	.LFE18
 4427 0010 00000000 		.4byte	.LFB20
 4428 0014 EC070000 		.4byte	.LFE20
 4429 0018 00000000 		.4byte	.LFB21
 4430 001c B0000000 		.4byte	.LFE21
 4431 0020 00000000 		.4byte	.LFB22
 4432 0024 EC000000 		.4byte	.LFE22
 4433 0028 00000000 		.4byte	0
 4434 002c 00000000 		.4byte	0
 4435              		.section	.debug_line,"",%progbits
 4436              	.Ldebug_line0:
 4437 0000 12030000 		.section	.debug_str,"MS",%progbits,1
 4437      02003701 
 4437      00000201 
 4437      FB0E0D00 
 4437      01010101 
 4438              	.LASF166:
 4439 0000 735F6C63 		.ascii	"s_lcd\000"
 4439      6400
 4440              	.LASF132:
 4441 0006 67736D5F 		.ascii	"gsm_state_idle\000"
 4441      73746174 
 4441      655F6964 
 4441      6C6500
 4442              	.LASF154:
 4443 0015 7A65726F 		.ascii	"zero_current_loc\000"
 4443      5F637572 
 4443      72656E74 
 4443      5F6C6F63 
 4443      00
 4444              	.LASF197:
 4445 0026 70617261 		.ascii	"param_struct\000"
 4445      6D5F7374 
 4445      72756374 
 4445      00
 4446              	.LASF12:
 4447 0033 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4447      345F3135 
 4447      5F495251 
 4447      6E00
 4448              	.LASF83:
 4449 0041 42535252 		.ascii	"BSRR\000"
 4449      00
 4450              	.LASF11:
 4451 0046 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4451      325F335F 
 4451      4952516E 
 4451      00
 4452              	.LASF159:
 4453 0053 6D61696E 		.ascii	"main_state\000"
 4453      5F737461 
 4453      746500
 4454              	.LASF100:
ARM GAS  /tmp/ccGoSbLI.s 			page 124


 4455 005e 696E6974 		.ascii	"init_airplane0\000"
 4455      5F616972 
 4455      706C616E 
 4455      653000
 4456              	.LASF101:
 4457 006d 696E6974 		.ascii	"init_airplane1\000"
 4457      5F616972 
 4457      706C616E 
 4457      653100
 4458              	.LASF2:
 4459 007c 5356435F 		.ascii	"SVC_IRQn\000"
 4459      4952516E 
 4459      00
 4460              	.LASF167:
 4461 0085 62756666 		.ascii	"buffer\000"
 4461      657200
 4462              	.LASF128:
 4463 008c 67736D5F 		.ascii	"gsm_state_ready\000"
 4463      73746174 
 4463      655F7265 
 4463      61647900 
 4464              	.LASF136:
 4465 009c 67736D5F 		.ascii	"gsm_state_shutdown\000"
 4465      73746174 
 4465      655F7368 
 4465      7574646F 
 4465      776E00
 4466              	.LASF210:
 4467 00af 76706F74 		.ascii	"vpote\000"
 4467      6500
 4468              	.LASF107:
 4469 00b5 6D656173 		.ascii	"meas_go_airplane\000"
 4469      5F676F5F 
 4469      61697270 
 4469      6C616E65 
 4469      00
 4470              	.LASF47:
 4471 00c6 756E7369 		.ascii	"unsigned int\000"
 4471      676E6564 
 4471      20696E74 
 4471      00
 4472              	.LASF71:
 4473 00d3 4C4F4144 		.ascii	"LOAD\000"
 4473      00
 4474              	.LASF25:
 4475 00d8 54494D31 		.ascii	"TIM16_IRQn\000"
 4475      365F4952 
 4475      516E00
 4476              	.LASF203:
 4477 00e3 7463705F 		.ascii	"tcp_kalive_timer\000"
 4477      6B616C69 
 4477      76655F74 
 4477      696D6572 
 4477      00
 4478              	.LASF41:
 4479 00f4 5F5F696E 		.ascii	"__int32_t\000"
 4479      7433325F 
ARM GAS  /tmp/ccGoSbLI.s 			page 125


 4479      7400
 4480              	.LASF174:
 4481 00fe 72783262 		.ascii	"rx2buff\000"
 4481      75666600 
 4482              	.LASF8:
 4483 0106 464C4153 		.ascii	"FLASH_IRQn\000"
 4483      485F4952 
 4483      516E00
 4484              	.LASF176:
 4485 0111 72783162 		.ascii	"rx1buff\000"
 4485      75666600 
 4486              	.LASF72:
 4487 0119 43414C49 		.ascii	"CALIB\000"
 4487      4200
 4488              	.LASF110:
 4489 011f 696D6569 		.ascii	"imei\000"
 4489      00
 4490              	.LASF120:
 4491 0124 67736D5F 		.ascii	"gsm_state_wait_cpin\000"
 4491      73746174 
 4491      655F7761 
 4491      69745F63 
 4491      70696E00 
 4492              	.LASF173:
 4493 0138 74783262 		.ascii	"tx2buff\000"
 4493      75666600 
 4494              	.LASF10:
 4495 0140 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4495      305F315F 
 4495      4952516E 
 4495      00
 4496              	.LASF204:
 4497 014d 74696D65 		.ascii	"timer_meas\000"
 4497      725F6D65 
 4497      617300
 4498              	.LASF194:
 4499 0158 75736172 		.ascii	"usart2_have_data\000"
 4499      74325F68 
 4499      6176655F 
 4499      64617461 
 4499      00
 4500              	.LASF129:
 4501 0169 67736D5F 		.ascii	"gsm_state_sending_conf\000"
 4501      73746174 
 4501      655F7365 
 4501      6E64696E 
 4501      675F636F 
 4502              	.LASF27:
 4503 0180 49324331 		.ascii	"I2C1_IRQn\000"
 4503      5F495251 
 4503      6E00
 4504              	.LASF3:
 4505 018a 50656E64 		.ascii	"PendSV_IRQn\000"
 4505      53565F49 
 4505      52516E00 
 4506              	.LASF218:
 4507 0196 4D61696E 		.ascii	"Mains_Glitch\000"
ARM GAS  /tmp/ccGoSbLI.s 			page 126


 4507      735F476C 
 4507      69746368 
 4507      00
 4508              	.LASF155:
 4509 01a3 6163756D 		.ascii	"acum_secs_index\000"
 4509      5F736563 
 4509      735F696E 
 4509      64657800 
 4510              	.LASF9:
 4511 01b3 5243435F 		.ascii	"RCC_IRQn\000"
 4511      4952516E 
 4511      00
 4512              	.LASF105:
 4513 01bc 6D656173 		.ascii	"meas_reporting1\000"
 4513      5F726570 
 4513      6F727469 
 4513      6E673100 
 4514              	.LASF51:
 4515 01cc 75696E74 		.ascii	"uint32_t\000"
 4515      33325F74 
 4515      00
 4516              	.LASF112:
 4517 01d5 6163756D 		.ascii	"acumm_wh\000"
 4517      6D5F7768 
 4517      00
 4518              	.LASF164:
 4519 01de 6D656173 		.ascii	"meas_end\000"
 4519      5F656E64 
 4519      00
 4520              	.LASF52:
 4521 01e7 49534552 		.ascii	"ISER\000"
 4521      00
 4522              	.LASF172:
 4523 01ec 666C6F61 		.ascii	"float\000"
 4523      7400
 4524              	.LASF165:
 4525 01f2 68797374 		.ascii	"hyst\000"
 4525      00
 4526              	.LASF98:
 4527 01f7 4D41494E 		.ascii	"MAINS_FAILURE\000"
 4527      535F4641 
 4527      494C5552 
 4527      4500
 4528              	.LASF55:
 4529 0205 52534552 		.ascii	"RSERVED1\000"
 4529      56454431 
 4529      00
 4530              	.LASF29:
 4531 020e 53504931 		.ascii	"SPI1_IRQn\000"
 4531      5F495251 
 4531      6E00
 4532              	.LASF46:
 4533 0218 6C6F6E67 		.ascii	"long long unsigned int\000"
 4533      206C6F6E 
 4533      6720756E 
 4533      7369676E 
 4533      65642069 
ARM GAS  /tmp/ccGoSbLI.s 			page 127


 4534              	.LASF68:
 4535 022f 44465352 		.ascii	"DFSR\000"
 4535      00
 4536              	.LASF191:
 4537 0234 75736172 		.ascii	"usart1_pckt_bytes\000"
 4537      74315F70 
 4537      636B745F 
 4537      62797465 
 4537      7300
 4538              	.LASF118:
 4539 0246 67736D5F 		.ascii	"gsm_state_reset\000"
 4539      73746174 
 4539      655F7265 
 4539      73657400 
 4540              	.LASF157:
 4541 0256 6163756D 		.ascii	"acum_hours\000"
 4541      5F686F75 
 4541      727300
 4542              	.LASF91:
 4543 0261 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE\000"
 4543      434F554E 
 4543      54455253 
 4543      5F414E44 
 4543      5F50484F 
 4544              	.LASF39:
 4545 0278 5F5F7569 		.ascii	"__uint16_t\000"
 4545      6E743136 
 4545      5F7400
 4546              	.LASF207:
 4547 0283 6D696E75 		.ascii	"minutes\000"
 4547      74657300 
 4548              	.LASF123:
 4549 028b 67736D5F 		.ascii	"gsm_state_sms_character\000"
 4549      73746174 
 4549      655F736D 
 4549      735F6368 
 4549      61726163 
 4550              	.LASF79:
 4551 02a3 4D4F4445 		.ascii	"MODER\000"
 4551      5200
 4552              	.LASF77:
 4553 02a9 43485345 		.ascii	"CHSELR\000"
 4553      4C5200
 4554              	.LASF139:
 4555 02b0 67736D5F 		.ascii	"gsm_state_stop_always\000"
 4555      73746174 
 4555      655F7374 
 4555      6F705F61 
 4555      6C776179 
 4556              	.LASF189:
 4557 02c6 75736172 		.ascii	"usart1_pckt_ready\000"
 4557      74315F70 
 4557      636B745F 
 4557      72656164 
 4557      7900
 4558              	.LASF34:
 4559 02d8 4952516E 		.ascii	"IRQn_Type\000"
ARM GAS  /tmp/ccGoSbLI.s 			page 128


 4559      5F547970 
 4559      6500
 4560              	.LASF115:
 4561 02e2 74696D65 		.ascii	"timer_reportar\000"
 4561      725F7265 
 4561      706F7274 
 4561      617200
 4562              	.LASF32:
 4563 02f1 55534152 		.ascii	"USART2_IRQn\000"
 4563      54325F49 
 4563      52516E00 
 4564              	.LASF63:
 4565 02fd 43505549 		.ascii	"CPUID\000"
 4565      4400
 4566              	.LASF181:
 4567 0303 74745F74 		.ascii	"tt_take_photo_sample\000"
 4567      616B655F 
 4567      70686F74 
 4567      6F5F7361 
 4567      6D706C65 
 4568              	.LASF135:
 4569 0318 67736D5F 		.ascii	"gsm_state_disconnected\000"
 4569      73746174 
 4569      655F6469 
 4569      73636F6E 
 4569      6E656374 
 4570              	.LASF179:
 4571 032f 74696D65 		.ascii	"timer_rep\000"
 4571      725F7265 
 4571      7000
 4572              	.LASF216:
 4573 0339 53797354 		.ascii	"SysTick_Config\000"
 4573      69636B5F 
 4573      436F6E66 
 4573      696700
 4574              	.LASF76:
 4575 0348 534D5052 		.ascii	"SMPR\000"
 4575      00
 4576              	.LASF90:
 4577 034d 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4577      5A45524F 
 4577      5F435552 
 4577      52454E54 
 4577      00
 4578              	.LASF190:
 4579 035e 75736172 		.ascii	"usart1_have_data\000"
 4579      74315F68 
 4579      6176655F 
 4579      64617461 
 4579      00
 4580              	.LASF82:
 4581 036f 50555044 		.ascii	"PUPDR\000"
 4581      5200
 4582              	.LASF146:
 4583 0375 7469636B 		.ascii	"ticks\000"
 4583      7300
 4584              	.LASF116:
ARM GAS  /tmp/ccGoSbLI.s 			page 129


 4585 037b 64756D6D 		.ascii	"dummy1\000"
 4585      793100
 4586              	.LASF124:
 4587 0382 67736D5F 		.ascii	"gsm_state_verify_fully_func\000"
 4587      73746174 
 4587      655F7665 
 4587      72696679 
 4587      5F66756C 
 4588              	.LASF87:
 4589 039e 63686172 		.ascii	"char\000"
 4589      00
 4590              	.LASF137:
 4591 03a3 67736D5F 		.ascii	"gsm_state_stop_wait\000"
 4591      73746174 
 4591      655F7374 
 4591      6F705F77 
 4591      61697400 
 4592              	.LASF170:
 4593 03b7 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4593      45524154 
 4593      5552455F 
 4593      56616C75 
 4593      6500
 4594              	.LASF65:
 4595 03c9 41495243 		.ascii	"AIRCR\000"
 4595      5200
 4596              	.LASF178:
 4597 03cf 74616B65 		.ascii	"take_temp_sample\000"
 4597      5F74656D 
 4597      705F7361 
 4597      6D706C65 
 4597      00
 4598              	.LASF21:
 4599 03e0 54494D33 		.ascii	"TIM3_IRQn\000"
 4599      5F495251 
 4599      6E00
 4600              	.LASF14:
 4601 03ea 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4601      5F436861 
 4601      6E6E656C 
 4601      315F4952 
 4601      516E00
 4602              	.LASF114:
 4603 03fd 6163756D 		.ascii	"acumm_w2s_index\000"
 4603      6D5F7732 
 4603      735F696E 
 4603      64657800 
 4604              	.LASF113:
 4605 040d 6163756D 		.ascii	"acumm_w2s\000"
 4605      6D5F7732 
 4605      7300
 4606              	.LASF148:
 4607 0417 62797465 		.ascii	"bytes_read\000"
 4607      735F7265 
 4607      616400
 4608              	.LASF99:
 4609 0422 6D61696E 		.ascii	"main_state_t\000"
ARM GAS  /tmp/ccGoSbLI.s 			page 130


 4609      5F737461 
 4609      74655F74 
 4609      00
 4610              	.LASF24:
 4611 042f 54494D31 		.ascii	"TIM15_IRQn\000"
 4611      355F4952 
 4611      516E00
 4612              	.LASF48:
 4613 043a 75696E74 		.ascii	"uint8_t\000"
 4613      385F7400 
 4614              	.LASF95:
 4615 0442 57454C43 		.ascii	"WELCOME_GSM\000"
 4615      4F4D455F 
 4615      47534D00 
 4616              	.LASF192:
 4617 044e 75736172 		.ascii	"usart2_mini_timeout\000"
 4617      74325F6D 
 4617      696E695F 
 4617      74696D65 
 4617      6F757400 
 4618              	.LASF143:
 4619 0462 72657370 		.ascii	"resp_gsm_timeout\000"
 4619      5F67736D 
 4619      5F74696D 
 4619      656F7574 
 4619      00
 4620              	.LASF175:
 4621 0473 74783162 		.ascii	"tx1buff\000"
 4621      75666600 
 4622              	.LASF195:
 4623 047b 75736172 		.ascii	"usart2_pckt_bytes\000"
 4623      74325F70 
 4623      636B745F 
 4623      62797465 
 4623      7300
 4624              	.LASF182:
 4625 048d 74745F72 		.ascii	"tt_relay_on_off\000"
 4625      656C6179 
 4625      5F6F6E5F 
 4625      6F666600 
 4626              	.LASF205:
 4627 049d 73656373 		.ascii	"secs\000"
 4627      00
 4628              	.LASF96:
 4629 04a2 4C414D50 		.ascii	"LAMP_ON\000"
 4629      5F4F4E00 
 4630              	.LASF125:
 4631 04aa 67736D5F 		.ascii	"gsm_state_wait_reg\000"
 4631      73746174 
 4631      655F7761 
 4631      69745F72 
 4631      656700
 4632              	.LASF78:
 4633 04bd 4144435F 		.ascii	"ADC_TypeDef\000"
 4633      54797065 
 4633      44656600 
 4634              	.LASF45:
ARM GAS  /tmp/ccGoSbLI.s 			page 131


 4635 04c9 6C6F6E67 		.ascii	"long long int\000"
 4635      206C6F6E 
 4635      6720696E 
 4635      7400
 4636              	.LASF5:
 4637 04d7 57574447 		.ascii	"WWDG_IRQn\000"
 4637      5F495251 
 4637      6E00
 4638              	.LASF67:
 4639 04e1 53484353 		.ascii	"SHCSR\000"
 4639      5200
 4640              	.LASF188:
 4641 04e7 75736172 		.ascii	"usart1_mini_timeout\000"
 4641      74315F6D 
 4641      696E695F 
 4641      74696D65 
 4641      6F757400 
 4642              	.LASF93:
 4643 04fb 53544152 		.ascii	"START_GSM\000"
 4643      545F4753 
 4643      4D00
 4644              	.LASF158:
 4645 0505 73686F77 		.ascii	"show_power\000"
 4645      5F706F77 
 4645      657200
 4646              	.LASF183:
 4647 0510 73617665 		.ascii	"saved_mode\000"
 4647      645F6D6F 
 4647      646500
 4648              	.LASF214:
 4649 051b 70617261 		.ascii	"parameters\000"
 4649      6D657465 
 4649      727300
 4650              	.LASF180:
 4651 0526 74696D65 		.ascii	"timer_relay\000"
 4651      725F7265 
 4651      6C617900 
 4652              	.LASF88:
 4653 0532 4D41494E 		.ascii	"MAIN_INIT\000"
 4653      5F494E49 
 4653      5400
 4654              	.LASF142:
 4655 053c 72657370 		.ascii	"resp_gsm_error\000"
 4655      5F67736D 
 4655      5F657272 
 4655      6F7200
 4656              	.LASF94:
 4657 054b 434F4E46 		.ascii	"CONFIG_GSM\000"
 4657      49475F47 
 4657      534D00
 4658              	.LASF153:
 4659 0556 6C617374 		.ascii	"last_power\000"
 4659      5F706F77 
 4659      657200
 4660              	.LASF198:
 4661 0561 73686F77 		.ascii	"show_power_index\000"
 4661      5F706F77 
ARM GAS  /tmp/ccGoSbLI.s 			page 132


 4661      65725F69 
 4661      6E646578 
 4661      00
 4662              	.LASF187:
 4663 0572 7A65726F 		.ascii	"zero_current\000"
 4663      5F637572 
 4663      72656E74 
 4663      00
 4664              	.LASF13:
 4665 057f 54535F49 		.ascii	"TS_IRQn\000"
 4665      52516E00 
 4666              	.LASF18:
 4667 0587 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4667      5F42524B 
 4667      5F55505F 
 4667      5452475F 
 4667      434F4D5F 
 4668              	.LASF168:
 4669 05a0 74656D70 		.ascii	"tempbuff\000"
 4669      62756666 
 4669      00
 4670              	.LASF215:
 4671 05a9 4E564943 		.ascii	"NVIC_SetPriority\000"
 4671      5F536574 
 4671      5072696F 
 4671      72697479 
 4671      00
 4672              	.LASF6:
 4673 05ba 5056445F 		.ascii	"PVD_IRQn\000"
 4673      4952516E 
 4673      00
 4674              	.LASF74:
 4675 05c3 43464752 		.ascii	"CFGR1\000"
 4675      3100
 4676              	.LASF75:
 4677 05c9 43464752 		.ascii	"CFGR2\000"
 4677      3200
 4678              	.LASF58:
 4679 05cf 49435052 		.ascii	"ICPR\000"
 4679      00
 4680              	.LASF17:
 4681 05d4 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4681      5F434F4D 
 4681      505F4952 
 4681      516E00
 4682              	.LASF97:
 4683 05e3 474F5F54 		.ascii	"GO_TO_MAINS_FAILURE\000"
 4683      4F5F4D41 
 4683      494E535F 
 4683      4641494C 
 4683      55524500 
 4684              	.LASF177:
 4685 05f7 6D61696E 		.ascii	"mains_voltage_filtered\000"
 4685      735F766F 
 4685      6C746167 
 4685      655F6669 
 4685      6C746572 
ARM GAS  /tmp/ccGoSbLI.s 			page 133


 4686              	.LASF163:
 4687 060e 636F756E 		.ascii	"counters_mode\000"
 4687      74657273 
 4687      5F6D6F64 
 4687      6500
 4688              	.LASF81:
 4689 061c 4F535045 		.ascii	"OSPEEDR\000"
 4689      45445200 
 4690              	.LASF73:
 4691 0624 53797354 		.ascii	"SysTick_Type\000"
 4691      69636B5F 
 4691      54797065 
 4691      00
 4692              	.LASF86:
 4693 0631 6C6F6E67 		.ascii	"long double\000"
 4693      20646F75 
 4693      626C6500 
 4694              	.LASF49:
 4695 063d 75696E74 		.ascii	"uint16_t\000"
 4695      31365F74 
 4695      00
 4696              	.LASF196:
 4697 0646 62756666 		.ascii	"buffUARTGSMrx2\000"
 4697      55415254 
 4697      47534D72 
 4697      783200
 4698              	.LASF144:
 4699 0655 4952516E 		.ascii	"IRQn\000"
 4699      00
 4700              	.LASF199:
 4701 065a 67736D4E 		.ascii	"gsmNUM\000"
 4701      554D00
 4702              	.LASF109:
 4703 0661 6E756D5F 		.ascii	"num_reportar\000"
 4703      7265706F 
 4703      72746172 
 4703      00
 4704              	.LASF7:
 4705 066e 5254435F 		.ascii	"RTC_IRQn\000"
 4705      4952516E 
 4705      00
 4706              	.LASF53:
 4707 0677 52455345 		.ascii	"RESERVED0\000"
 4707      52564544 
 4707      3000
 4708              	.LASF66:
 4709 0681 52455345 		.ascii	"RESERVED1\000"
 4709      52564544 
 4709      3100
 4710              	.LASF57:
 4711 068b 52455345 		.ascii	"RESERVED2\000"
 4711      52564544 
 4711      3200
 4712              	.LASF59:
 4713 0695 52455345 		.ascii	"RESERVED3\000"
 4713      52564544 
 4713      3300
ARM GAS  /tmp/ccGoSbLI.s 			page 134


 4714              	.LASF60:
 4715 069f 52455345 		.ascii	"RESERVED4\000"
 4715      52564544 
 4715      3400
 4716              	.LASF38:
 4717 06a9 73686F72 		.ascii	"short int\000"
 4717      7420696E 
 4717      7400
 4718              	.LASF42:
 4719 06b3 6C6F6E67 		.ascii	"long int\000"
 4719      20696E74 
 4719      00
 4720              	.LASF31:
 4721 06bc 55534152 		.ascii	"USART1_IRQn\000"
 4721      54315F49 
 4721      52516E00 
 4722              	.LASF119:
 4723 06c8 67736D5F 		.ascii	"gsm_state_verify_at\000"
 4723      73746174 
 4723      655F7665 
 4723      72696679 
 4723      5F617400 
 4724              	.LASF0:
 4725 06dc 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4725      61736B61 
 4725      626C6549 
 4725      6E745F49 
 4725      52516E00 
 4726              	.LASF145:
 4727 06f0 7072696F 		.ascii	"priority\000"
 4727      72697479 
 4727      00
 4728              	.LASF19:
 4729 06f9 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4729      5F43435F 
 4729      4952516E 
 4729      00
 4730              	.LASF80:
 4731 0706 4F545950 		.ascii	"OTYPER\000"
 4731      455200
 4732              	.LASF201:
 4733 070d 77616974 		.ascii	"wait_ms_var\000"
 4733      5F6D735F 
 4733      76617200 
 4734              	.LASF104:
 4735 0719 6D656173 		.ascii	"meas_reporting0\000"
 4735      5F726570 
 4735      6F727469 
 4735      6E673000 
 4736              	.LASF26:
 4737 0729 54494D31 		.ascii	"TIM17_IRQn\000"
 4737      375F4952 
 4737      516E00
 4738              	.LASF106:
 4739 0734 6D656173 		.ascii	"meas_reporting2\000"
 4739      5F726570 
 4739      6F727469 
ARM GAS  /tmp/ccGoSbLI.s 			page 135


 4739      6E673200 
 4740              	.LASF89:
 4741 0744 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4741      48524F5F 
 4741      41444300 
 4742              	.LASF16:
 4743 0750 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4743      5F436861 
 4743      6E6E656C 
 4743      345F355F 
 4743      4952516E 
 4744              	.LASF200:
 4745 0765 67736D4D 		.ascii	"gsmMSG\000"
 4745      534700
 4746              	.LASF206:
 4747 076c 686F7572 		.ascii	"hours\000"
 4747      7300
 4748              	.LASF35:
 4749 0772 5F5F7569 		.ascii	"__uint8_t\000"
 4749      6E74385F 
 4749      7400
 4750              	.LASF62:
 4751 077c 4E564943 		.ascii	"NVIC_Type\000"
 4751      5F547970 
 4751      6500
 4752              	.LASF69:
 4753 0786 5343425F 		.ascii	"SCB_Type\000"
 4753      54797065 
 4753      00
 4754              	.LASF85:
 4755 078f 4750494F 		.ascii	"GPIO_TypeDef\000"
 4755      5F547970 
 4755      65446566 
 4755      00
 4756              	.LASF102:
 4757 079c 6D656173 		.ascii	"meas_init\000"
 4757      5F696E69 
 4757      7400
 4758              	.LASF161:
 4759 07a6 73656E64 		.ascii	"sended\000"
 4759      656400
 4760              	.LASF4:
 4761 07ad 53797354 		.ascii	"SysTick_IRQn\000"
 4761      69636B5F 
 4761      4952516E 
 4761      00
 4762              	.LASF33:
 4763 07ba 4345435F 		.ascii	"CEC_IRQn\000"
 4763      4952516E 
 4763      00
 4764              	.LASF61:
 4765 07c3 73697A65 		.ascii	"sizetype\000"
 4765      74797065 
 4765      00
 4766              	.LASF64:
 4767 07cc 49435352 		.ascii	"ICSR\000"
 4767      00
ARM GAS  /tmp/ccGoSbLI.s 			page 136


 4768              	.LASF28:
 4769 07d1 49324332 		.ascii	"I2C2_IRQn\000"
 4769      5F495251 
 4769      6E00
 4770              	.LASF44:
 4771 07db 6C6F6E67 		.ascii	"long unsigned int\000"
 4771      20756E73 
 4771      69676E65 
 4771      6420696E 
 4771      7400
 4772              	.LASF20:
 4773 07ed 54494D32 		.ascii	"TIM2_IRQn\000"
 4773      5F495251 
 4773      6E00
 4774              	.LASF171:
 4775 07f7 50524553 		.ascii	"PRESSURE_Value\000"
 4775      53555245 
 4775      5F56616C 
 4775      756500
 4776              	.LASF213:
 4777 0806 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4777      652F6D65 
 4777      642F446F 
 4777      63756D65 
 4777      6E74732F 
 4778 0839 6100     		.ascii	"a\000"
 4779              	.LASF169:
 4780 083b 48554D49 		.ascii	"HUMIDITY_Value\000"
 4780      44495459 
 4780      5F56616C 
 4780      756500
 4781              	.LASF50:
 4782 084a 696E7433 		.ascii	"int32_t\000"
 4782      325F7400 
 4783              	.LASF208:
 4784 0852 706F7765 		.ascii	"power_vect\000"
 4784      725F7665 
 4784      637400
 4785              	.LASF185:
 4786 085d 6164635F 		.ascii	"adc_ch\000"
 4786      636800
 4787              	.LASF23:
 4788 0864 54494D31 		.ascii	"TIM14_IRQn\000"
 4788      345F4952 
 4788      516E00
 4789              	.LASF15:
 4790 086f 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4790      5F436861 
 4790      6E6E656C 
 4790      325F335F 
 4790      4952516E 
 4791              	.LASF162:
 4792 0884 6C616D70 		.ascii	"lamp_on_state\000"
 4792      5F6F6E5F 
 4792      73746174 
 4792      6500
 4793              	.LASF22:
ARM GAS  /tmp/ccGoSbLI.s 			page 137


 4794 0892 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4794      5F444143 
 4794      5F495251 
 4794      6E00
 4795              	.LASF37:
 4796 08a0 756E7369 		.ascii	"unsigned char\000"
 4796      676E6564 
 4796      20636861 
 4796      7200
 4797              	.LASF92:
 4798 08ae 4C414D50 		.ascii	"LAMP_OFF\000"
 4798      5F4F4646 
 4798      00
 4799              	.LASF43:
 4800 08b7 5F5F7569 		.ascii	"__uint32_t\000"
 4800      6E743332 
 4800      5F7400
 4801              	.LASF184:
 4802 08c2 73656E64 		.ascii	"send_energy\000"
 4802      5F656E65 
 4802      72677900 
 4803              	.LASF108:
 4804 08ce 6C616D70 		.ascii	"lamp_on_state_t\000"
 4804      5F6F6E5F 
 4804      73746174 
 4804      655F7400 
 4805              	.LASF151:
 4806 08de 6E656564 		.ascii	"need_to_save\000"
 4806      5F746F5F 
 4806      73617665 
 4806      00
 4807              	.LASF134:
 4808 08eb 67736D5F 		.ascii	"gsm_state_connected\000"
 4808      73746174 
 4808      655F636F 
 4808      6E6E6563 
 4808      74656400 
 4809              	.LASF149:
 4810 08ff 6E656564 		.ascii	"need_ack\000"
 4810      5F61636B 
 4810      00
 4811              	.LASF126:
 4812 0908 67736D5F 		.ascii	"gsm_state_verify_reg\000"
 4812      73746174 
 4812      655F7665 
 4812      72696679 
 4812      5F726567 
 4813              	.LASF133:
 4814 091d 67736D5F 		.ascii	"gsm_state_connecting\000"
 4814      73746174 
 4814      655F636F 
 4814      6E6E6563 
 4814      74696E67 
 4815              	.LASF193:
 4816 0932 75736172 		.ascii	"usart2_pckt_ready\000"
 4816      74325F70 
 4816      636B745F 
ARM GAS  /tmp/ccGoSbLI.s 			page 138


 4816      72656164 
 4816      7900
 4817              	.LASF220:
 4818 0944 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4818      6E674465 
 4818      6C61795F 
 4818      44656372 
 4818      656D656E 
 4819              	.LASF122:
 4820 095a 67736D5F 		.ascii	"gsm_state_sms_mode\000"
 4820      73746174 
 4820      655F736D 
 4820      735F6D6F 
 4820      646500
 4821              	.LASF54:
 4822 096d 49434552 		.ascii	"ICER\000"
 4822      00
 4823              	.LASF30:
 4824 0972 53504932 		.ascii	"SPI2_IRQn\000"
 4824      5F495251 
 4824      6E00
 4825              	.LASF130:
 4826 097c 67736D5F 		.ascii	"gsm_state_sending_sms\000"
 4826      73746174 
 4826      655F7365 
 4826      6E64696E 
 4826      675F736D 
 4827              	.LASF140:
 4828 0992 72657370 		.ascii	"resp_gsm_continue\000"
 4828      5F67736D 
 4828      5F636F6E 
 4828      74696E75 
 4828      6500
 4829              	.LASF219:
 4830 09a4 70726570 		.ascii	"prepare_json_pkt\000"
 4830      6172655F 
 4830      6A736F6E 
 4830      5F706B74 
 4830      00
 4831              	.LASF152:
 4832 09b5 706F7765 		.ascii	"power\000"
 4832      7200
 4833              	.LASF131:
 4834 09bb 67736D5F 		.ascii	"gsm_state_command_answer\000"
 4834      73746174 
 4834      655F636F 
 4834      6D6D616E 
 4834      645F616E 
 4835              	.LASF117:
 4836 09d4 70617261 		.ascii	"parameters_typedef\000"
 4836      6D657465 
 4836      72735F74 
 4836      79706564 
 4836      656600
 4837              	.LASF36:
 4838 09e7 7369676E 		.ascii	"signed char\000"
 4838      65642063 
ARM GAS  /tmp/ccGoSbLI.s 			page 139


 4838      68617200 
 4839              	.LASF212:
 4840 09f3 7372632F 		.ascii	"src/main.c\000"
 4840      6D61696E 
 4840      2E6300
 4841              	.LASF40:
 4842 09fe 73686F72 		.ascii	"short unsigned int\000"
 4842      7420756E 
 4842      7369676E 
 4842      65642069 
 4842      6E7400
 4843              	.LASF211:
 4844 0a11 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4844      43313120 
 4844      352E322E 
 4844      31203230 
 4844      31353132 
 4845 0a44 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4845      20726576 
 4845      6973696F 
 4845      6E203233 
 4845      31383438 
 4846 0a77 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4846      662D3220 
 4846      2D4F3020 
 4846      2D666F6D 
 4846      69742D66 
 4847 0aaa 66756E63 		.ascii	"function-sections\000"
 4847      74696F6E 
 4847      2D736563 
 4847      74696F6E 
 4847      7300
 4848              	.LASF217:
 4849 0abc 6D61696E 		.ascii	"main\000"
 4849      00
 4850              	.LASF1:
 4851 0ac1 48617264 		.ascii	"HardFault_IRQn\000"
 4851      4661756C 
 4851      745F4952 
 4851      516E00
 4852              	.LASF156:
 4853 0ad0 6163756D 		.ascii	"acum_secs\000"
 4853      5F736563 
 4853      7300
 4854              	.LASF141:
 4855 0ada 72657370 		.ascii	"resp_gsm_ok\000"
 4855      5F67736D 
 4855      5F6F6B00 
 4856              	.LASF127:
 4857 0ae6 67736D5F 		.ascii	"gsm_state_get_imei\000"
 4857      73746174 
 4857      655F6765 
 4857      745F696D 
 4857      656900
 4858              	.LASF56:
 4859 0af9 49535052 		.ascii	"ISPR\000"
 4859      00
ARM GAS  /tmp/ccGoSbLI.s 			page 140


 4860              	.LASF150:
 4861 0afe 72657370 		.ascii	"resp\000"
 4861      00
 4862              	.LASF138:
 4863 0b03 67736D5F 		.ascii	"gsm_state_shutdown_always\000"
 4863      73746174 
 4863      655F7368 
 4863      7574646F 
 4863      776E5F61 
 4864              	.LASF111:
 4865 0b1d 6E756D5F 		.ascii	"num_propio\000"
 4865      70726F70 
 4865      696F00
 4866              	.LASF186:
 4867 0b28 7365715F 		.ascii	"seq_ready\000"
 4867      72656164 
 4867      7900
 4868              	.LASF209:
 4869 0b32 7674656D 		.ascii	"vtemp\000"
 4869      7000
 4870              	.LASF121:
 4871 0b38 67736D5F 		.ascii	"gsm_state_echo_disable\000"
 4871      73746174 
 4871      655F6563 
 4871      686F5F64 
 4871      69736162 
 4872              	.LASF103:
 4873 0b4f 6D656173 		.ascii	"meas_meas\000"
 4873      5F6D6561 
 4873      7300
 4874              	.LASF202:
 4875 0b59 74696D65 		.ascii	"timer_standby\000"
 4875      725F7374 
 4875      616E6462 
 4875      7900
 4876              	.LASF147:
 4877 0b67 62797465 		.ascii	"bytes_remain\000"
 4877      735F7265 
 4877      6D61696E 
 4877      00
 4878              	.LASF84:
 4879 0b74 4C434B52 		.ascii	"LCKR\000"
 4879      00
 4880              	.LASF70:
 4881 0b79 4354524C 		.ascii	"CTRL\000"
 4881      00
 4882              	.LASF160:
 4883 0b7e 7265706F 		.ascii	"reportar_SMS\000"
 4883      72746172 
 4883      5F534D53 
 4883      00
 4884              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccGoSbLI.s 			page 141


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccGoSbLI.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccGoSbLI.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccGoSbLI.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccGoSbLI.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccGoSbLI.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccGoSbLI.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
                            *COM*:00000002 mains_voltage_filtered
     /tmp/ccGoSbLI.s:278    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccGoSbLI.s:275    .bss.take_temp_sample:00000000 $d
     /tmp/ccGoSbLI.s:285    .bss.timer_rep:00000000 timer_rep
     /tmp/ccGoSbLI.s:282    .bss.timer_rep:00000000 $d
     /tmp/ccGoSbLI.s:292    .bss.timer_relay:00000000 timer_relay
     /tmp/ccGoSbLI.s:289    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
     /tmp/ccGoSbLI.s:301    .bss.send_energy:00000000 send_energy
     /tmp/ccGoSbLI.s:302    .bss.send_energy:00000000 $d
                            *COM*:00000006 adc_ch
     /tmp/ccGoSbLI.s:308    .bss.seq_ready:00000000 seq_ready
     /tmp/ccGoSbLI.s:309    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:00000054 param_struct
     /tmp/ccGoSbLI.s:325    .bss.show_power_index:00000000 show_power_index
     /tmp/ccGoSbLI.s:322    .bss.show_power_index:00000000 $d
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/ccGoSbLI.s:334    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccGoSbLI.s:331    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 timer_meas
     /tmp/ccGoSbLI.s:344    .bss.secs:00000000 secs
     /tmp/ccGoSbLI.s:341    .bss.secs:00000000 $d
     /tmp/ccGoSbLI.s:350    .bss.hours:00000000 hours
     /tmp/ccGoSbLI.s:351    .bss.hours:00000000 $d
     /tmp/ccGoSbLI.s:356    .bss.minutes:00000000 minutes
     /tmp/ccGoSbLI.s:357    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccGoSbLI.s:362    .rodata:00000000 $d
     /tmp/ccGoSbLI.s:409    .text.main:00000000 $t
ARM GAS  /tmp/ccGoSbLI.s 			page 142


     /tmp/ccGoSbLI.s:414    .text.main:00000000 main
     /tmp/ccGoSbLI.s:719    .rodata.main:00000000 $d
     /tmp/ccGoSbLI.s:1045   .text.main:000003a8 $d
     /tmp/ccGoSbLI.s:1075   .text.main:00000418 $t
     /tmp/ccGoSbLI.s:1616   .text.main:00000770 $d
     /tmp/ccGoSbLI.s:1638   .text.main:000007c0 $t
     /tmp/ccGoSbLI.s:1666   .text.main:000007e8 $d
     /tmp/ccGoSbLI.s:1687   .text.prepare_json_pkt:00000000 $t
     /tmp/ccGoSbLI.s:1692   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccGoSbLI.s:1784   .text.prepare_json_pkt:0000009c $d
     /tmp/ccGoSbLI.s:1793   .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccGoSbLI.s:1798   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccGoSbLI.s:1936   .text.TimingDelay_Decrement:000000cc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
GPIO_Config
GetFlashConf
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
GetPhoto
FuncsGSMSendSMS
RelayOn
GetHysteresis
RelayOff
ShowPower
FuncsGSMStateAsk
GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
FuncsGSMShutdown
UpdateVGrid
UpdateIGrid
Mains_Glitch
RelayOffFast
WriteConfigurations
UpdateRelay
UpdatePhotoTransistor
FuncsGSM
memcpy
sprintf
strcat
strlen
GSMTimeoutCounters
