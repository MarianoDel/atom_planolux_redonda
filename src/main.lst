ARM GAS  /tmp/ccJp2csF.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccJp2csF.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccJp2csF.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccJp2csF.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccJp2csF.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccJp2csF.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccJp2csF.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccJp2csF.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccJp2csF.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccJp2csF.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccJp2csF.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccJp2csF.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccJp2csF.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccJp2csF.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccJp2csF.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccJp2csF.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccJp2csF.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccJp2csF.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.6985,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.6986, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.6987, D.6986
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.6987, D.6987
  92 0026 083B     		subs	r3, r3, #8	@ D.6987,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.6987, D.6987,
  94 002a 2E4A     		ldr	r2, .L5	@ D.6985,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.6986, IRQn
  98 0032 1800     		movs	r0, r3	@ D.6987, D.6986
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.6987, D.6987
 101 0038 083B     		subs	r3, r3, #8	@ D.6987,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.6987, D.6987,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.6985, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.6987, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.6986, IRQn
 111 004c 1000     		movs	r0, r2	@ D.6987, D.6986
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.6987, D.6987
 114 0052 D200     		lsls	r2, r2, #3	@ D.6987, D.6987,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.6988, D.6988, D.6987
 117 0058 0200     		movs	r2, r0	@ D.6988, D.6988
 118 005a D243     		mvns	r2, r2	@ D.6988, D.6988
 119 005c 1A40     		ands	r2, r3	@ D.6987, D.6987
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.6987, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.6987, D.6987
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.6986, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.6987, D.6986
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.6987, D.6987
ARM GAS  /tmp/ccJp2csF.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.6987, D.6987,
 132 0074 9840     		lsls	r0, r0, r3	@ D.6987, D.6987, D.6987
 133 0076 0300     		movs	r3, r0	@ D.6987, D.6987
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.6987, D.6987
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.6987,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.6985, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.6987, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.6989,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.6987, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.6987, D.6987
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.6987, D.6987,
 151 0092 1549     		ldr	r1, .L5+4	@ D.6989,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.6987, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.6987, D.6987
 156 009c 9208     		lsrs	r2, r2, #2	@ D.6987, D.6987,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.6987, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.6986, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.6987, D.6986
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.6987, D.6987
 166 00b0 C900     		lsls	r1, r1, #3	@ D.6987, D.6987,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.6988, D.6988, D.6987
 169 00b6 0100     		movs	r1, r0	@ D.6988, D.6988
 170 00b8 C943     		mvns	r1, r1	@ D.6988, D.6988
 171 00ba 1140     		ands	r1, r2	@ D.6987, D.6987
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.6987, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.6987, D.6987
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.6986, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.6987, D.6986
ARM GAS  /tmp/ccJp2csF.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.6987, D.6987
 183 00d0 D200     		lsls	r2, r2, #3	@ D.6987, D.6987,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.6987, D.6987, D.6987
 185 00d4 0200     		movs	r2, r0	@ D.6987, D.6987
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.6987, D.6987
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.6987, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccJp2csF.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.6990,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.6991,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.6992, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.6992,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.6992, _6->LOAD
ARM GAS  /tmp/ccJp2csF.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.6991,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.6991,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.6990,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	show_select_timer
 273              		.section	.bss.show_select_timer,"aw",%nobits
 274              		.align	1
 275              		.type	show_select_timer, %object
 276              		.size	show_select_timer, 2
 277              	show_select_timer:
 278 0000 0000     		.space	2
 279              		.global	switches_timer
 280              		.section	.bss.switches_timer,"aw",%nobits
 281              		.type	switches_timer, %object
 282              		.size	switches_timer, 1
 283              	switches_timer:
 284 0000 00       		.space	1
 285              		.global	acswitch_timer
 286              		.section	.bss.acswitch_timer,"aw",%nobits
 287              		.type	acswitch_timer, %object
ARM GAS  /tmp/ccJp2csF.s 			page 23


 288              		.size	acswitch_timer, 1
 289              	acswitch_timer:
 290 0000 00       		.space	1
 291              		.global	scroll1_timer
 292              		.section	.bss.scroll1_timer,"aw",%nobits
 293              		.align	1
 294              		.type	scroll1_timer, %object
 295              		.size	scroll1_timer, 2
 296              	scroll1_timer:
 297 0000 0000     		.space	2
 298              		.global	scroll2_timer
 299              		.section	.bss.scroll2_timer,"aw",%nobits
 300              		.align	1
 301              		.type	scroll2_timer, %object
 302              		.size	scroll2_timer, 2
 303              	scroll2_timer:
 304 0000 0000     		.space	2
 305              		.comm	standalone_timer,2,2
 306              		.comm	standalone_enable_menu_timer,2,2
 307              		.comm	grouped_master_timeout_timer,1,1
 308              		.global	take_temp_sample
 309              		.section	.bss.take_temp_sample,"aw",%nobits
 310              		.align	1
 311              		.type	take_temp_sample, %object
 312              		.size	take_temp_sample, 2
 313              	take_temp_sample:
 314 0000 0000     		.space	2
 315              		.global	minutes
 316              		.section	.bss.minutes,"aw",%nobits
 317              		.align	1
 318              		.type	minutes, %object
 319              		.size	minutes, 2
 320              	minutes:
 321 0000 0000     		.space	2
 322              		.global	timer_wifi_bright
 323              		.section	.bss.timer_wifi_bright,"aw",%nobits
 324              		.type	timer_wifi_bright, %object
 325              		.size	timer_wifi_bright, 1
 326              	timer_wifi_bright:
 327 0000 00       		.space	1
 328              		.comm	saved_mode,1,1
 329              		.global	igrid_timer
 330              		.section	.bss.igrid_timer,"aw",%nobits
 331              		.type	igrid_timer, %object
 332              		.size	igrid_timer, 1
 333              	igrid_timer:
 334 0000 00       		.space	1
 335              		.global	vgrid_timer
 336              		.section	.bss.vgrid_timer,"aw",%nobits
 337              		.type	vgrid_timer, %object
 338              		.size	vgrid_timer, 1
 339              	vgrid_timer:
 340 0000 00       		.space	1
 341              		.comm	s1,2,2
 342              		.comm	s2,2,2
 343              		.comm	sac,2,2
 344              		.comm	sac_aux,1,1
ARM GAS  /tmp/ccJp2csF.s 			page 24


 345              		.comm	usart1_mini_timeout,1,1
 346              		.comm	usart1_pckt_ready,1,1
 347              		.comm	usart1_have_data,1,1
 348              		.comm	usart1_pckt_bytes,1,1
 349              		.comm	usart2_mini_timeout,1,1
 350              		.comm	usart2_pckt_ready,1,1
 351              		.comm	usart2_have_data,1,1
 352              		.comm	usart2_pckt_bytes,1,1
 353              		.comm	param_struct,12,4
 354              		.global	wait_ms_var
 355              		.section	.bss.wait_ms_var,"aw",%nobits
 356              		.align	1
 357              		.type	wait_ms_var, %object
 358              		.size	wait_ms_var, 2
 359              	wait_ms_var:
 360 0000 0000     		.space	2
 361              		.comm	timer_standby,2,2
 362              		.comm	tcp_kalive_timer,2,2
 363              		.comm	filter_timer,1,1
 364              		.global	secs
 365              		.section	.bss.secs,"aw",%nobits
 366              		.align	1
 367              		.type	secs, %object
 368              		.size	secs, 2
 369              	secs:
 370 0000 0000     		.space	2
 371              		.global	signal_state
 372              		.section	.bss.signal_state,"aw",%nobits
 373              		.type	signal_state, %object
 374              		.size	signal_state, 1
 375              	signal_state:
 376 0000 00       		.space	1
 377              		.global	dmx_timeout_timer
 378              		.section	.bss.dmx_timeout_timer,"aw",%nobits
 379              		.type	dmx_timeout_timer, %object
 380              		.size	dmx_timeout_timer, 1
 381              	dmx_timeout_timer:
 382 0000 00       		.space	1
 383              		.comm	vd0,33,4
 384              		.comm	vd1,33,4
 385              		.comm	vd2,33,4
 386              		.comm	vd3,33,4
 387              		.comm	vd4,33,4
 388              		.comm	vtemp,34,4
 389              		.comm	vpote,34,4
 390              		.section	.rodata
 391              		.align	2
 392              	.LC0:
 393 0000 47534D20 		.ascii	"GSM GATEWAY.. Cambio a GSM\015\012\000"
 393      47415445 
 393      5741592E 
 393      2E204361 
 393      6D62696F 
 394 001d 000000   		.align	2
 395              	.LC2:
 396 0020 52657365 		.ascii	"Reset y Start GSM\015\012\000"
 396      74207920 
ARM GAS  /tmp/ccJp2csF.s 			page 25


 396      53746172 
 396      74204753 
 396      4D0D0A00 
 397              		.align	2
 398              	.LC5:
 399 0034 53746172 		.ascii	"Start OK\015\012\000"
 399      74204F4B 
 399      0D0A00
 400 003f 00       		.align	2
 401              	.LC7:
 402 0040 53746172 		.ascii	"Start NOK\015\012\000"
 402      74204E4F 
 402      4B0D0A00 
 403              		.align	2
 404              	.LC9:
 405 004c 47534D20 		.ascii	"GSM GATEWAY Listo para empezar\015\012\000"
 405      47415445 
 405      57415920 
 405      4C697374 
 405      6F207061 
 406              		.section	.text.main,"ax",%progbits
 407              		.align	2
 408              		.global	main
 409              		.code	16
 410              		.thumb_func
 411              		.type	main, %function
 412              	main:
 413              	.LFB20:
 414              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** #include "stm32f0xx_adc.h"
  20:src/main.c    **** 
  21:src/main.c    **** #include <stdio.h>
  22:src/main.c    **** #include <string.h>
  23:src/main.c    **** #include <stdlib.h>
  24:src/main.c    **** 
  25:src/main.c    **** 
  26:src/main.c    **** //--- My includes ---//
  27:src/main.c    **** #include "stm32f0x_gpio.h"
  28:src/main.c    **** #include "stm32f0x_tim.h"
ARM GAS  /tmp/ccJp2csF.s 			page 26


  29:src/main.c    **** #include "uart.h"
  30:src/main.c    **** #include "hard.h"
  31:src/main.c    **** 
  32:src/main.c    **** #include "core_cm0.h"
  33:src/main.c    **** #include "adc.h"
  34:src/main.c    **** #include "flash_program.h"
  35:src/main.c    **** #include "main_menu.h"
  36:src/main.c    **** #include "synchro.h"
  37:src/main.c    **** 
  38:src/main.c    **** 
  39:src/main.c    **** #include "tcp_transceiver.h"
  40:src/main.c    **** 
  41:src/main.c    **** //Para MQTT
  42:src/main.c    **** #ifdef USE_GPS
  43:src/main.c    **** #include "MQTTPacket.h"
  44:src/main.c    **** #include "MQTTConnect.h"
  45:src/main.c    **** #endif
  46:src/main.c    **** 
  47:src/main.c    **** //Para Hardware de GPS
  48:src/main.c    **** #ifdef USE_GPS
  49:src/main.c    **** #include "gps_vktel.h"
  50:src/main.c    **** #endif
  51:src/main.c    **** 
  52:src/main.c    **** //Para Hardware de GSM
  53:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  54:src/main.c    **** #include "sim900_800.h"
  55:src/main.c    **** #endif
  56:src/main.c    **** 
  57:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  58:src/main.c    **** 
  59:src/main.c    **** 
  60:src/main.c    **** 
  61:src/main.c    **** // ------- Externals del Puerto serie  -------
  62:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  66:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  67:src/main.c    **** 
  68:src/main.c    **** //
  69:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  70:src/main.c    **** ////static unsigned char data_back[10];
  71:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  72:src/main.c    **** 
  73:src/main.c    **** // ------- Externals de los timers -------
  74:src/main.c    **** //volatile unsigned short prog_timer = 0;
  75:src/main.c    **** //volatile unsigned short mainmenu_timer = 0;
  76:src/main.c    **** volatile unsigned short show_select_timer = 0;
  77:src/main.c    **** volatile unsigned char switches_timer = 0;
  78:src/main.c    **** volatile unsigned char acswitch_timer = 0;
  79:src/main.c    **** 
  80:src/main.c    **** volatile unsigned short scroll1_timer = 0;
  81:src/main.c    **** volatile unsigned short scroll2_timer = 0;
  82:src/main.c    **** 
  83:src/main.c    **** volatile unsigned short standalone_timer;
  84:src/main.c    **** volatile unsigned short standalone_enable_menu_timer;
  85:src/main.c    **** //volatile unsigned short standalone_menu_timer;
ARM GAS  /tmp/ccJp2csF.s 			page 27


  86:src/main.c    **** volatile unsigned char grouped_master_timeout_timer;
  87:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  88:src/main.c    **** volatile unsigned short minutes = 0;
  89:src/main.c    **** volatile unsigned char timer_wifi_bright = 0;
  90:src/main.c    **** 
  91:src/main.c    **** 
  92:src/main.c    **** unsigned char saved_mode;
  93:src/main.c    **** 
  94:src/main.c    **** // ------- para determinar igrid -------
  95:src/main.c    **** volatile unsigned char igrid_timer = 0;
  96:src/main.c    **** volatile unsigned char vgrid_timer = 0;
  97:src/main.c    **** 
  98:src/main.c    **** // ------- Externals de los switches -------
  99:src/main.c    **** unsigned short s1;
 100:src/main.c    **** unsigned short s2;
 101:src/main.c    **** unsigned short sac;
 102:src/main.c    **** unsigned char sac_aux;
 103:src/main.c    **** 
 104:src/main.c    **** // ------- Externals del GPS & GSM -------
 105:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 106:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 107:src/main.c    **** volatile unsigned char usart1_have_data;
 108:src/main.c    **** unsigned char usart1_pckt_bytes;
 109:src/main.c    **** 
 110:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 111:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 112:src/main.c    **** #define gps_have_data		usart1_have_data
 113:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 114:src/main.c    **** 
 115:src/main.c    **** #ifdef USE_GPS
 116:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 117:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 118:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 119:src/main.c    **** volatile unsigned char usart2_have_data;
 120:src/main.c    **** unsigned char usart2_pckt_bytes;
 121:src/main.c    **** 
 122:src/main.c    **** #endif
 123:src/main.c    **** 
 124:src/main.c    **** // ------- Externals del GSM -------
 125:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 126:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 127:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 128:src/main.c    **** #define gsm_have_data		usart1_have_data
 129:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 130:src/main.c    **** 
 131:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 132:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 133:src/main.c    **** volatile unsigned char usart2_have_data;
 134:src/main.c    **** unsigned char usart2_pckt_bytes;
 135:src/main.c    **** 
 136:src/main.c    **** //unsigned char AlertasReportar[5] = {0,0,0,0,0};
 137:src/main.c    **** //unsigned char ActDact = 0;
 138:src/main.c    **** //unsigned char claveAct[5] = {0,0,0,0,0};
 139:src/main.c    **** //volatile char USERCODE[8] = "123456";
 140:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 141:src/main.c    **** #endif
 142:src/main.c    **** 
ARM GAS  /tmp/ccJp2csF.s 			page 28


 143:src/main.c    **** //--- VARIABLES GLOBALES ---//
 144:src/main.c    **** parameters_typedef param_struct;
 145:src/main.c    **** 
 146:src/main.c    **** // ------- de los timers -------
 147:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 148:src/main.c    **** volatile unsigned short timer_standby;
 149:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 150:src/main.c    **** //volatile unsigned char display_timer;
 151:src/main.c    **** volatile unsigned char filter_timer;
 152:src/main.c    **** 
 153:src/main.c    **** //volatile unsigned char door_filter;
 154:src/main.c    **** //volatile unsigned char take_sample;
 155:src/main.c    **** //volatile unsigned char move_relay;
 156:src/main.c    **** volatile unsigned short secs = 0;
 157:src/main.c    **** 
 158:src/main.c    **** 
 159:src/main.c    **** // ------- del DMX -------
 160:src/main.c    **** volatile unsigned char signal_state = 0;
 161:src/main.c    **** volatile unsigned char dmx_timeout_timer = 0;
 162:src/main.c    **** //unsigned short tim_counter_65ms = 0;
 163:src/main.c    **** 
 164:src/main.c    **** // ------- de los filtros DMX -------
 165:src/main.c    **** #define LARGO_F		32
 166:src/main.c    **** #define DIVISOR_F	5
 167:src/main.c    **** unsigned char vd0 [LARGO_F + 1];
 168:src/main.c    **** unsigned char vd1 [LARGO_F + 1];
 169:src/main.c    **** unsigned char vd2 [LARGO_F + 1];
 170:src/main.c    **** unsigned char vd3 [LARGO_F + 1];
 171:src/main.c    **** unsigned char vd4 [LARGO_F + 1];
 172:src/main.c    **** 
 173:src/main.c    **** 
 174:src/main.c    **** #define IDLE	0
 175:src/main.c    **** #define LOOK_FOR_BREAK	1
 176:src/main.c    **** #define LOOK_FOR_MARK	2
 177:src/main.c    **** #define LOOK_FOR_START	3
 178:src/main.c    **** 
 179:src/main.c    **** 
 180:src/main.c    **** 
 181:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 182:src/main.c    **** void TimingDelay_Decrement(void);
 183:src/main.c    **** void Update_PWM (unsigned short);
 184:src/main.c    **** void UpdatePackets (void);
 185:src/main.c    **** 
 186:src/main.c    **** // ------- del display -------
 187:src/main.c    **** 
 188:src/main.c    **** 
 189:src/main.c    **** // ------- del DMX -------
 190:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 191:src/main.c    **** #define DMX_TIMEOUT	20
 192:src/main.c    **** 
 193:src/main.c    **** //--- FILTROS DE SENSORES ---//
 194:src/main.c    **** #define LARGO_FILTRO 16
 195:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 196:src/main.c    **** //#define LARGO_FILTRO 32
 197:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 198:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 199:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
ARM GAS  /tmp/ccJp2csF.s 			page 29


 200:src/main.c    **** 
 201:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 202:src/main.c    **** 
 203:src/main.c    **** 
 204:src/main.c    **** //-------------------------------------------//
 205:src/main.c    **** // @brief  Main program.
 206:src/main.c    **** // @param  None
 207:src/main.c    **** // @retval None
 208:src/main.c    **** //------------------------------------------//
 209:src/main.c    **** int main(void)
 210:src/main.c    **** {
 415              		.loc 2 210 0
 416              		.cfi_startproc
 417 0000 10B5     		push	{r4, lr}	@
 418              	.LCFI4:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 4, -8
 421              		.cfi_offset 14, -4
 422 0002 8AB0     		sub	sp, sp, #40	@,,
 423              	.LCFI5:
 424              		.cfi_def_cfa_offset 48
 211:src/main.c    **** 	unsigned char i,ii;
 212:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 425              		.loc 2 212 0
 426 0004 2623     		movs	r3, #38	@ tmp141,
 427 0006 6B44     		add	r3, r3, sp	@ tmp141,
 428 0008 0022     		movs	r2, #0	@ tmp142,
 429 000a 1A70     		strb	r2, [r3]	@ tmp143, need_ack
 213:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 430              		.loc 2 213 0
 431 000c 2523     		movs	r3, #37	@ tmp144,
 432 000e 6B44     		add	r3, r3, sp	@ tmp144,
 433 0010 0022     		movs	r2, #0	@ tmp145,
 434 0012 1A70     		strb	r2, [r3]	@ tmp146, resp
 214:src/main.c    **** 	unsigned short local_meas, local_meas_last;
 215:src/main.c    **** 	unsigned char main_state = 0;
 435              		.loc 2 215 0
 436 0014 09AB     		add	r3, sp, #36	@ tmp147,,
 437 0016 0022     		movs	r2, #0	@ tmp148,
 438 0018 1A70     		strb	r2, [r3]	@ tmp149, main_state
 216:src/main.c    **** 	char s_lcd [20];
 217:src/main.c    **** 	enum TcpMessages tcp_msg = NONE_MSG;
 439              		.loc 2 217 0
 440 001a 2323     		movs	r3, #35	@ tmp150,
 441 001c 6B44     		add	r3, r3, sp	@ tmp150,
 442 001e 0022     		movs	r2, #0	@ tmp151,
 443 0020 1A70     		strb	r2, [r3]	@ tmp152, tcp_msg
 218:src/main.c    **** 	unsigned char new_room = 0;
 444              		.loc 2 218 0
 445 0022 2223     		movs	r3, #34	@ tmp153,
 446 0024 6B44     		add	r3, r3, sp	@ tmp153,
 447 0026 0022     		movs	r2, #0	@ tmp154,
 448 0028 1A70     		strb	r2, [r3]	@ tmp155, new_room
 219:src/main.c    **** 	unsigned char new_lamp = 0;
 449              		.loc 2 219 0
 450 002a 2123     		movs	r3, #33	@ tmp156,
 451 002c 6B44     		add	r3, r3, sp	@ tmp156,
ARM GAS  /tmp/ccJp2csF.s 			page 30


 452 002e 0022     		movs	r2, #0	@ tmp157,
 453 0030 1A70     		strb	r2, [r3]	@ tmp158, new_lamp
 220:src/main.c    **** 	unsigned char last_bright = 0;
 454              		.loc 2 220 0
 455 0032 08AB     		add	r3, sp, #32	@ tmp159,,
 456 0034 0022     		movs	r2, #0	@ tmp160,
 457 0036 1A70     		strb	r2, [r3]	@ tmp161, last_bright
 221:src/main.c    **** 	unsigned char show_ldr = 0;
 458              		.loc 2 221 0
 459 0038 1F23     		movs	r3, #31	@ tmp162,
 460 003a 6B44     		add	r3, r3, sp	@ tmp162,
 461 003c 0022     		movs	r2, #0	@ tmp163,
 462 003e 1A70     		strb	r2, [r3]	@ tmp164, show_ldr
 222:src/main.c    **** 	int dummy_resp = 0;
 463              		.loc 2 222 0
 464 0040 0023     		movs	r3, #0	@ tmp165,
 465 0042 0693     		str	r3, [sp, #24]	@ tmp165, dummy_resp
 223:src/main.c    **** 	unsigned char pps_one = 0;
 466              		.loc 2 223 0
 467 0044 1723     		movs	r3, #23	@ tmp166,
 468 0046 6B44     		add	r3, r3, sp	@ tmp166,
 469 0048 0022     		movs	r2, #0	@ tmp167,
 470 004a 1A70     		strb	r2, [r3]	@ tmp168, pps_one
 224:src/main.c    **** 
 225:src/main.c    **** #ifdef USE_PROD_PROGRAM
 226:src/main.c    **** 	unsigned char jump_the_menu = 0;
 227:src/main.c    **** #endif
 228:src/main.c    **** 	parameters_typedef * p_mem_init;
 229:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 230:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 231:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 232:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 233:src/main.c    ****     //   system_stm32f0xx.c file
 234:src/main.c    **** 
 235:src/main.c    **** 	//GPIO Configuration.
 236:src/main.c    **** 	GPIO_Config();
 471              		.loc 2 236 0
 472 004c FFF7FEFF 		bl	GPIO_Config	@
 237:src/main.c    **** 
 238:src/main.c    **** 
 239:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 240:src/main.c    **** 	if (SysTick_Config(48000))
 473              		.loc 2 240 0
 474 0050 704B     		ldr	r3, .L31	@ tmp169,
 475 0052 1800     		movs	r0, r3	@, tmp169
 476 0054 FFF7FEFF 		bl	SysTick_Config	@
 477 0058 031E     		subs	r3, r0, #0	@ D.6993,,
 478 005a 28D0     		beq	.L13	@,
 479              	.L18:
 241:src/main.c    **** 	{
 242:src/main.c    **** 		while (1)	/* Capture error */
 243:src/main.c    **** 		{
 244:src/main.c    **** 			if (LED)
 480              		.loc 2 244 0
 481 005c 9023     		movs	r3, #144	@ tmp268,
 482 005e DB05     		lsls	r3, r3, #23	@ D.6994, tmp268,
 483 0060 9B8A     		ldrh	r3, [r3, #20]	@ tmp171,
ARM GAS  /tmp/ccJp2csF.s 			page 31


 484 0062 9BB2     		uxth	r3, r3	@ D.6995, tmp171
 485 0064 1A00     		movs	r2, r3	@ D.6996, D.6995
 486 0066 8023     		movs	r3, #128	@ tmp269,
 487 0068 5B01     		lsls	r3, r3, #5	@ tmp172, tmp269,
 488 006a 1340     		ands	r3, r2	@ D.6996, D.6996
 489 006c 05D0     		beq	.L14	@,
 245:src/main.c    **** 				LED_OFF;
 490              		.loc 2 245 0
 491 006e 9023     		movs	r3, #144	@ tmp266,
 492 0070 DB05     		lsls	r3, r3, #23	@ D.6994, tmp266,
 493 0072 8022     		movs	r2, #128	@ tmp267,
 494 0074 5205     		lsls	r2, r2, #21	@ tmp173, tmp267,
 495 0076 9A61     		str	r2, [r3, #24]	@ tmp173, _30->BSRR
 496 0078 04E0     		b	.L15	@
 497              	.L14:
 246:src/main.c    **** 			else
 247:src/main.c    **** 				LED_ON;
 498              		.loc 2 247 0
 499 007a 9023     		movs	r3, #144	@ tmp264,
 500 007c DB05     		lsls	r3, r3, #23	@ D.6994, tmp264,
 501 007e 8022     		movs	r2, #128	@ tmp265,
 502 0080 5201     		lsls	r2, r2, #5	@ tmp174, tmp265,
 503 0082 9A61     		str	r2, [r3, #24]	@ tmp174, _32->BSRR
 504              	.L15:
 248:src/main.c    **** 
 249:src/main.c    **** 			for (i = 0; i < 255; i++)
 505              		.loc 2 249 0
 506 0084 2723     		movs	r3, #39	@ tmp175,
 507 0086 6B44     		add	r3, r3, sp	@ tmp175,
 508 0088 0022     		movs	r2, #0	@ tmp176,
 509 008a 1A70     		strb	r2, [r3]	@ tmp177, i
 510 008c 09E0     		b	.L16	@
 511              	.L17:
 250:src/main.c    **** 			{
 251:src/main.c    **** 				asm (	"nop \n\t"
 512              		.loc 2 251 0 discriminator 3
 513              		.syntax divided
 514              	@ 251 "src/main.c" 1
 515 008e C046     		nop 
 516 0090 C046     		nop 
 517 0092 C046     		nop 
 518              		
 519              	@ 0 "" 2
 249:src/main.c    **** 			{
 520              		.loc 2 249 0 discriminator 3
 521              		.thumb
 522              		.syntax unified
 523 0094 2723     		movs	r3, #39	@ tmp178,
 524 0096 6B44     		add	r3, r3, sp	@ tmp178,
 525 0098 1A78     		ldrb	r2, [r3]	@ D.6997, i
 526 009a 2723     		movs	r3, #39	@ tmp179,
 527 009c 6B44     		add	r3, r3, sp	@ tmp179,
 528 009e 0132     		adds	r2, r2, #1	@ tmp180,
 529 00a0 1A70     		strb	r2, [r3]	@ tmp181, i
 530              	.L16:
 249:src/main.c    **** 			{
 531              		.loc 2 249 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccJp2csF.s 			page 32


 532 00a2 2723     		movs	r3, #39	@ tmp182,
 533 00a4 6B44     		add	r3, r3, sp	@ tmp182,
 534 00a6 1B78     		ldrb	r3, [r3]	@ tmp183, i
 535 00a8 FF2B     		cmp	r3, #255	@ tmp183,
 536 00aa F0D1     		bne	.L17	@,
 252:src/main.c    **** 						"nop \n\t"
 253:src/main.c    **** 						"nop \n\t" );
 254:src/main.c    **** 			}
 255:src/main.c    **** 		}
 537              		.loc 2 255 0 is_stmt 1
 538 00ac D6E7     		b	.L18	@
 539              	.L13:
 256:src/main.c    **** 	}
 257:src/main.c    **** 
 258:src/main.c    **** 
 259:src/main.c    **** 	//ADC Configuration
 260:src/main.c    **** //	AdcConfig();
 261:src/main.c    **** 
 262:src/main.c    **** 	//TIM Configuration.
 263:src/main.c    **** 	TIM_3_Init();
 540              		.loc 2 263 0
 541 00ae FFF7FEFF 		bl	TIM_3_Init	@
 264:src/main.c    **** //	TIM_14_Init();
 265:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 266:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 267:src/main.c    **** 
 268:src/main.c    **** //	EXTIOff ();
 269:src/main.c    **** 
 270:src/main.c    **** //	while (1)
 271:src/main.c    **** //	{
 272:src/main.c    **** //		if (RELAY)
 273:src/main.c    **** //		{
 274:src/main.c    **** //			RELAY_OFF;
 275:src/main.c    **** //			LED_OFF;
 276:src/main.c    **** //		}
 277:src/main.c    **** //		else
 278:src/main.c    **** //		{
 279:src/main.c    **** //			RELAY_ON;
 280:src/main.c    **** //			LED_ON;
 281:src/main.c    **** //		}
 282:src/main.c    **** //
 283:src/main.c    **** //		for (i = 0; i < 255; i++)
 284:src/main.c    **** //		{
 285:src/main.c    **** //			Update_TIM3_CH1 (i);
 286:src/main.c    **** //			Wait_ms (10);
 287:src/main.c    **** //		}
 288:src/main.c    **** //	}
 289:src/main.c    **** 
 290:src/main.c    **** //		while (1)
 291:src/main.c    **** //		{
 292:src/main.c    **** //			PIN3_OFF;
 293:src/main.c    **** //			Wait_ms (10);
 294:src/main.c    **** //			PIN3_ON;
 295:src/main.c    **** //			Wait_ms (10);
 296:src/main.c    **** //		}
 297:src/main.c    **** 
 298:src/main.c    **** 	//--- Welcome code ---//
ARM GAS  /tmp/ccJp2csF.s 			page 33


 299:src/main.c    **** 	LED_OFF;
 542              		.loc 2 299 0
 543 00b2 9023     		movs	r3, #144	@ tmp256,
 544 00b4 DB05     		lsls	r3, r3, #23	@ D.6994, tmp256,
 545 00b6 8022     		movs	r2, #128	@ tmp257,
 546 00b8 5205     		lsls	r2, r2, #21	@ tmp184, tmp257,
 547 00ba 9A61     		str	r2, [r3, #24]	@ tmp184, _38->BSRR
 300:src/main.c    **** //	EN_GPS_OFF;
 301:src/main.c    **** 	EN_GPS_ON;
 548              		.loc 2 301 0
 549 00bc 9023     		movs	r3, #144	@ tmp258,
 550 00be DB05     		lsls	r3, r3, #23	@ D.6994, tmp258,
 551 00c0 8022     		movs	r2, #128	@ tmp259,
 552 00c2 1202     		lsls	r2, r2, #8	@ tmp185, tmp259,
 553 00c4 9A61     		str	r2, [r3, #24]	@ tmp185, _40->BSRR
 302:src/main.c    **** 	RELAY_ON;
 554              		.loc 2 302 0
 555 00c6 9023     		movs	r3, #144	@ tmp260,
 556 00c8 DB05     		lsls	r3, r3, #23	@ D.6994, tmp260,
 557 00ca 8022     		movs	r2, #128	@ tmp261,
 558 00cc 1201     		lsls	r2, r2, #4	@ tmp186, tmp261,
 559 00ce 9A61     		str	r2, [r3, #24]	@ tmp186, _42->BSRR
 303:src/main.c    **** 	//RELAY_OFF;
 304:src/main.c    **** 
 305:src/main.c    **** 	USART1Config();
 560              		.loc 2 305 0
 561 00d0 FFF7FEFF 		bl	USART1Config	@
 306:src/main.c    **** 	USART2Config();
 562              		.loc 2 306 0
 563 00d4 FFF7FEFF 		bl	USART2Config	@
 307:src/main.c    **** 
 308:src/main.c    **** 	EXTIOff();
 564              		.loc 2 308 0
 565 00d8 FFF7FEFF 		bl	EXTIOff	@
 309:src/main.c    **** 
 310:src/main.c    **** 
 311:src/main.c    **** #ifdef USE_MQTT_LIB
 312:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 313:src/main.c    **** 	int rc = 0;
 314:src/main.c    **** 	char buf[200];
 315:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
 316:src/main.c    **** 	char* payload = "mypayload";
 317:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
 318:src/main.c    **** 	int len = 0;
 319:src/main.c    **** 
 320:src/main.c    **** 	data.clientID.cstring = "me";
 321:src/main.c    **** 	data.keepAliveInterval = 20;
 322:src/main.c    **** 	data.cleansession = 1;
 323:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
 324:src/main.c    **** 
 325:src/main.c    **** 	topicString.cstring = "mytopic";
 326:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
 327:src/main.c    **** 
 328:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
 329:src/main.c    **** 	//falta abrir puerto
 330:src/main.c    **** 	//falta enviar al socket
 331:src/main.c    **** 	//falta cerrar socket
ARM GAS  /tmp/ccJp2csF.s 			page 34


 332:src/main.c    **** #endif
 333:src/main.c    **** 
 334:src/main.c    **** //	//---------- Prueba USART2 --------//
 335:src/main.c    **** //
 336:src/main.c    **** //    while( 1 )
 337:src/main.c    **** //    {
 338:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 339:src/main.c    **** //        Wait_ms(3000);
 340:src/main.c    **** //    }
 341:src/main.c    **** //
 342:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
 343:src/main.c    **** 
 344:src/main.c    **** 	//---------- Prueba con GPS --------//
 345:src/main.c    **** #ifdef USE_GPS
 346:src/main.c    **** 	Usart2SendSingle('M');
 347:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 348:src/main.c    **** 	Wait_ms(1000);
 349:src/main.c    **** 
 350:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
 351:src/main.c    **** 
 352:src/main.c    **** 	//mando reset al gps
 353:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
 354:src/main.c    **** 	GPSStartResetSM ();
 355:src/main.c    **** 	while (GPSStart() != RESP_OK);
 356:src/main.c    **** 
 357:src/main.c    **** 	//mando conf al gps
 358:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
 359:src/main.c    **** 	GPSConfigResetSM ();
 360:src/main.c    **** 	while (GPSConfig() != RESP_OK);
 361:src/main.c    **** 
 362:src/main.c    **** //	//mando reset factory al gps
 363:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
 364:src/main.c    **** //	GPSResetFactoryResetSM ();
 365:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
 366:src/main.c    **** 
 367:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
 368:src/main.c    **** //	timer_standby = 60000;
 369:src/main.c    **** //	while( timer_standby )
 370:src/main.c    **** 	while( 1 )
 371:src/main.c    **** 	{
 372:src/main.c    **** 		if (gps_pckt_ready)
 373:src/main.c    **** 		{
 374:src/main.c    **** 			gps_pckt_ready = 0;
 375:src/main.c    **** 			//Usart2SendSingle('P');
 376:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
 377:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
 378:src/main.c    **** 		}
 379:src/main.c    **** 
 380:src/main.c    **** 		GPSProcess();
 381:src/main.c    **** 	}
 382:src/main.c    **** #endif
 383:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
 384:src/main.c    **** 
 385:src/main.c    **** 	//---------- Prueba con GSM --------//
 386:src/main.c    **** #ifdef USE_GSM
 387:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
 388:src/main.c    **** 
ARM GAS  /tmp/ccJp2csF.s 			page 35


 389:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 390:src/main.c    **** 
 391:src/main.c    **** 
 392:src/main.c    **** 	//Pruebo USART1
 393:src/main.c    **** //	while (1)
 394:src/main.c    **** //	{
 395:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
 396:src/main.c    **** //			Wait_ms(50);
 397:src/main.c    **** //	}
 398:src/main.c    **** 
 399:src/main.c    **** 
 400:src/main.c    **** 	//mando start al gsm
 401:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 402:src/main.c    **** 	//GPSStartResetSM ();
 403:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 404:src/main.c    **** 	while (timer_standby)
 405:src/main.c    **** 	{
 406:src/main.c    **** 		i = GSM_Start();
 407:src/main.c    **** 		if (i == 2)
 408:src/main.c    **** 		{
 409:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 410:src/main.c    **** 			timer_standby = 0;
 411:src/main.c    **** 		}
 412:src/main.c    **** 
 413:src/main.c    **** 		if (i == 4)
 414:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 415:src/main.c    **** 	}
 416:src/main.c    **** 
 417:src/main.c    **** 	//mando conf al gsm
 418:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
 419:src/main.c    **** 	//GPSConfigResetSM ();
 420:src/main.c    **** 
 421:src/main.c    **** 	i = 0;
 422:src/main.c    **** 	while (i == 0)
 423:src/main.c    **** 	{
 424:src/main.c    **** 		ii = GSM_Config(1000);
 425:src/main.c    **** 
 426:src/main.c    **** 		if (ii == 2)
 427:src/main.c    **** 			i = 0;
 428:src/main.c    **** 		else if (ii > 2)
 429:src/main.c    **** 		{
 430:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
 431:src/main.c    **** 			while (1);
 432:src/main.c    **** 		}
 433:src/main.c    **** 
 434:src/main.c    **** 		GSMProcess();
 435:src/main.c    **** 		GSMReceive ();
 436:src/main.c    **** 
 437:src/main.c    **** 		if (gsm_pckt_ready)
 438:src/main.c    **** 		{
 439:src/main.c    **** 			gsm_pckt_ready = 0;
 440:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 441:src/main.c    **** 		}
 442:src/main.c    **** 
 443:src/main.c    **** 		if (LIGHT)
 444:src/main.c    **** 			LED_ON;
 445:src/main.c    **** 		else
ARM GAS  /tmp/ccJp2csF.s 			page 36


 446:src/main.c    **** 			LED_OFF;
 447:src/main.c    **** 	}
 448:src/main.c    **** 
 449:src/main.c    **** 
 450:src/main.c    **** 	while( 1 )
 451:src/main.c    **** 	{
 452:src/main.c    **** 		if (gsm_pckt_ready)
 453:src/main.c    **** 		{
 454:src/main.c    **** 			gsm_pckt_ready = 0;
 455:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 456:src/main.c    **** 		}
 457:src/main.c    **** 
 458:src/main.c    **** 		GSMProcess();
 459:src/main.c    **** 
 460:src/main.c    **** 		if (LIGHT)
 461:src/main.c    **** 			LED_ON;
 462:src/main.c    **** 
 463:src/main.c    **** 	}
 464:src/main.c    **** #endif
 465:src/main.c    **** 
 466:src/main.c    **** 	//---------- Pruebas con GSM GATEWAY --------//
 467:src/main.c    **** #ifdef USE_GSM_GATEWAY
 468:src/main.c    **** 	LED_OFF;
 566              		.loc 2 468 0
 567 00dc 9023     		movs	r3, #144	@ tmp262,
 568 00de DB05     		lsls	r3, r3, #23	@ D.6994, tmp262,
 569 00e0 8022     		movs	r2, #128	@ tmp263,
 570 00e2 5205     		lsls	r2, r2, #21	@ tmp187, tmp263,
 571 00e4 9A61     		str	r2, [r3, #24]	@ tmp187, _47->BSRR
 469:src/main.c    **** 	for (i = 0; i < 6; i++)
 572              		.loc 2 469 0
 573 00e6 2723     		movs	r3, #39	@ tmp188,
 574 00e8 6B44     		add	r3, r3, sp	@ tmp188,
 575 00ea 0022     		movs	r2, #0	@ tmp189,
 576 00ec 1A70     		strb	r2, [r3]	@ tmp190, i
 577 00ee 1FE0     		b	.L19	@
 578              	.L22:
 470:src/main.c    **** 	{
 471:src/main.c    **** 		if (LED)
 579              		.loc 2 471 0
 580 00f0 9023     		movs	r3, #144	@ tmp254,
 581 00f2 DB05     		lsls	r3, r3, #23	@ D.6994, tmp254,
 582 00f4 9B8A     		ldrh	r3, [r3, #20]	@ tmp192,
 583 00f6 9BB2     		uxth	r3, r3	@ D.6995, tmp192
 584 00f8 1A00     		movs	r2, r3	@ D.6996, D.6995
 585 00fa 8023     		movs	r3, #128	@ tmp255,
 586 00fc 5B01     		lsls	r3, r3, #5	@ tmp193, tmp255,
 587 00fe 1340     		ands	r3, r2	@ D.6996, D.6996
 588 0100 05D0     		beq	.L20	@,
 472:src/main.c    **** 			LED_OFF;
 589              		.loc 2 472 0
 590 0102 9023     		movs	r3, #144	@ tmp252,
 591 0104 DB05     		lsls	r3, r3, #23	@ D.6994, tmp252,
 592 0106 8022     		movs	r2, #128	@ tmp253,
 593 0108 5205     		lsls	r2, r2, #21	@ tmp194, tmp253,
 594 010a 9A61     		str	r2, [r3, #24]	@ tmp194, _54->BSRR
 595 010c 04E0     		b	.L21	@
ARM GAS  /tmp/ccJp2csF.s 			page 37


 596              	.L20:
 473:src/main.c    **** 		else
 474:src/main.c    **** 			LED_ON;
 597              		.loc 2 474 0
 598 010e 9023     		movs	r3, #144	@ tmp250,
 599 0110 DB05     		lsls	r3, r3, #23	@ D.6994, tmp250,
 600 0112 8022     		movs	r2, #128	@ tmp251,
 601 0114 5201     		lsls	r2, r2, #5	@ tmp195, tmp251,
 602 0116 9A61     		str	r2, [r3, #24]	@ tmp195, _56->BSRR
 603              	.L21:
 475:src/main.c    **** 
 476:src/main.c    **** 		Wait_ms (300);
 604              		.loc 2 476 0 discriminator 2
 605 0118 9623     		movs	r3, #150	@ tmp249,
 606 011a 5B00     		lsls	r3, r3, #1	@ tmp196, tmp249,
 607 011c 1800     		movs	r0, r3	@, tmp196
 608 011e FFF7FEFF 		bl	Wait_ms	@
 469:src/main.c    **** 	{
 609              		.loc 2 469 0 discriminator 2
 610 0122 2723     		movs	r3, #39	@ tmp197,
 611 0124 6B44     		add	r3, r3, sp	@ tmp197,
 612 0126 1A78     		ldrb	r2, [r3]	@ D.6997, i
 613 0128 2723     		movs	r3, #39	@ tmp198,
 614 012a 6B44     		add	r3, r3, sp	@ tmp198,
 615 012c 0132     		adds	r2, r2, #1	@ tmp199,
 616 012e 1A70     		strb	r2, [r3]	@ tmp200, i
 617              	.L19:
 469:src/main.c    **** 	{
 618              		.loc 2 469 0 is_stmt 0 discriminator 1
 619 0130 2723     		movs	r3, #39	@ tmp201,
 620 0132 6B44     		add	r3, r3, sp	@ tmp201,
 621 0134 1B78     		ldrb	r3, [r3]	@ tmp202, i
 622 0136 052B     		cmp	r3, #5	@ tmp202,
 623 0138 DAD9     		bls	.L22	@,
 477:src/main.c    **** 	}
 478:src/main.c    **** 	Wait_ms (3000);
 624              		.loc 2 478 0 is_stmt 1
 625 013a 374B     		ldr	r3, .L31+4	@ tmp203,
 626 013c 1800     		movs	r0, r3	@, tmp203
 627 013e FFF7FEFF 		bl	Wait_ms	@
 479:src/main.c    **** 
 480:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 628              		.loc 2 480 0
 629 0142 364B     		ldr	r3, .L31+8	@ tmp204,
 630 0144 1800     		movs	r0, r3	@, tmp204
 631 0146 FFF7FEFF 		bl	Usart2Send	@
 481:src/main.c    **** 
 482:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 632              		.loc 2 482 0
 633 014a 0220     		movs	r0, #2	@,
 634 014c FFF7FEFF 		bl	Usart1Mode	@
 483:src/main.c    **** 
 484:src/main.c    **** 
 485:src/main.c    **** 	//mando start al gsm
 486:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 635              		.loc 2 486 0
 636 0150 334B     		ldr	r3, .L31+12	@ tmp205,
ARM GAS  /tmp/ccJp2csF.s 			page 38


 637 0152 1800     		movs	r0, r3	@, tmp205
 638 0154 FFF7FEFF 		bl	Usart2Send	@
 487:src/main.c    **** 	//GPSStartResetSM ();
 488:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 639              		.loc 2 488 0
 640 0158 324B     		ldr	r3, .L31+16	@ tmp206,
 641 015a 334A     		ldr	r2, .L31+20	@ tmp207,
 642 015c 1A80     		strh	r2, [r3]	@ tmp208, timer_standby
 489:src/main.c    **** 	while (timer_standby)
 643              		.loc 2 489 0
 644 015e 1BE0     		b	.L23	@
 645              	.L25:
 490:src/main.c    **** 	{
 491:src/main.c    **** 		i = GSM_Start();
 646              		.loc 2 491 0
 647 0160 2724     		movs	r4, #39	@ tmp209,
 648 0162 6C44     		add	r4, r4, sp	@ tmp209,
 649 0164 FFF7FEFF 		bl	GSM_Start	@
 650 0168 0300     		movs	r3, r0	@ tmp210,
 651 016a 2370     		strb	r3, [r4]	@ tmp212, i
 492:src/main.c    **** 		if (i == 2)
 652              		.loc 2 492 0
 653 016c 2723     		movs	r3, #39	@ tmp213,
 654 016e 6B44     		add	r3, r3, sp	@ tmp213,
 655 0170 1B78     		ldrb	r3, [r3]	@ tmp214, i
 656 0172 022B     		cmp	r3, #2	@ tmp214,
 657 0174 07D1     		bne	.L24	@,
 493:src/main.c    **** 		{
 494:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 658              		.loc 2 494 0
 659 0176 2D4B     		ldr	r3, .L31+24	@ tmp215,
 660 0178 1800     		movs	r0, r3	@, tmp215
 661 017a FFF7FEFF 		bl	Usart2Send	@
 495:src/main.c    **** 			timer_standby = 0;
 662              		.loc 2 495 0
 663 017e 294B     		ldr	r3, .L31+16	@ tmp216,
 664 0180 0022     		movs	r2, #0	@ tmp217,
 665 0182 1A80     		strh	r2, [r3]	@ tmp218, timer_standby
 666 0184 08E0     		b	.L23	@
 667              	.L24:
 496:src/main.c    **** 		}
 497:src/main.c    **** 		else
 498:src/main.c    **** 
 499:src/main.c    **** 		if (i == 4)
 668              		.loc 2 499 0
 669 0186 2723     		movs	r3, #39	@ tmp219,
 670 0188 6B44     		add	r3, r3, sp	@ tmp219,
 671 018a 1B78     		ldrb	r3, [r3]	@ tmp220, i
 672 018c 042B     		cmp	r3, #4	@ tmp220,
 673 018e 03D1     		bne	.L23	@,
 500:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 674              		.loc 2 500 0
 675 0190 274B     		ldr	r3, .L31+28	@ tmp221,
 676 0192 1800     		movs	r0, r3	@, tmp221
 677 0194 FFF7FEFF 		bl	Usart2Send	@
 678              	.L23:
 489:src/main.c    **** 	{
ARM GAS  /tmp/ccJp2csF.s 			page 39


 679              		.loc 2 489 0
 680 0198 224B     		ldr	r3, .L31+16	@ tmp222,
 681 019a 1B88     		ldrh	r3, [r3]	@ tmp223, timer_standby
 682 019c 9BB2     		uxth	r3, r3	@ D.6995, tmp223
 683 019e 002B     		cmp	r3, #0	@ D.6995,
 684 01a0 DED1     		bne	.L25	@,
 501:src/main.c    **** 	}
 502:src/main.c    **** 
 503:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 685              		.loc 2 503 0
 686 01a2 244B     		ldr	r3, .L31+32	@ tmp224,
 687 01a4 1800     		movs	r0, r3	@, tmp224
 688 01a6 FFF7FEFF 		bl	Usart2Send	@
 689              	.L30:
 504:src/main.c    **** 
 505:src/main.c    **** 	while (1)
 506:src/main.c    **** 	{
 507:src/main.c    **** 		GSMProcess();
 690              		.loc 2 507 0
 691 01aa FFF7FEFF 		bl	GSMProcess	@
 508:src/main.c    **** 
 509:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 692              		.loc 2 509 0
 693 01ae 224B     		ldr	r3, .L31+36	@ tmp225,
 694 01b0 1B78     		ldrb	r3, [r3]	@ tmp226, usart2_pckt_ready
 695 01b2 DBB2     		uxtb	r3, r3	@ D.6997, tmp226
 696 01b4 002B     		cmp	r3, #0	@ D.6997,
 697 01b6 09D0     		beq	.L26	@,
 510:src/main.c    **** 		{
 511:src/main.c    **** 			usart2_pckt_ready = 0;
 698              		.loc 2 511 0
 699 01b8 1F4B     		ldr	r3, .L31+36	@ tmp227,
 700 01ba 0022     		movs	r2, #0	@ tmp228,
 701 01bc 1A70     		strb	r2, [r3]	@ tmp229, usart2_pckt_ready
 512:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 702              		.loc 2 512 0
 703 01be 1F4B     		ldr	r3, .L31+40	@ tmp230,
 704 01c0 1A78     		ldrb	r2, [r3]	@ D.6997, usart2_pckt_bytes
 705 01c2 1F4B     		ldr	r3, .L31+44	@ tmp231,
 706 01c4 1100     		movs	r1, r2	@, D.6997
 707 01c6 1800     		movs	r0, r3	@, tmp231
 708 01c8 FFF7FEFF 		bl	Usart1SendUnsigned	@
 709              	.L26:
 513:src/main.c    **** 		}
 514:src/main.c    **** 
 515:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 710              		.loc 2 515 0
 711 01cc 1D4B     		ldr	r3, .L31+48	@ tmp232,
 712 01ce 1B78     		ldrb	r3, [r3]	@ tmp233, usart1_pckt_ready
 713 01d0 DBB2     		uxtb	r3, r3	@ D.6997, tmp233
 714 01d2 002B     		cmp	r3, #0	@ D.6997,
 715 01d4 09D0     		beq	.L27	@,
 516:src/main.c    **** 		{
 517:src/main.c    **** 			gsm_pckt_ready = 0;
 716              		.loc 2 517 0
 717 01d6 1B4B     		ldr	r3, .L31+48	@ tmp234,
 718 01d8 0022     		movs	r2, #0	@ tmp235,
ARM GAS  /tmp/ccJp2csF.s 			page 40


 719 01da 1A70     		strb	r2, [r3]	@ tmp236, usart1_pckt_ready
 518:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 720              		.loc 2 518 0
 721 01dc 1A4B     		ldr	r3, .L31+52	@ tmp237,
 722 01de 1A78     		ldrb	r2, [r3]	@ D.6997, usart1_pckt_bytes
 723 01e0 174B     		ldr	r3, .L31+44	@ tmp238,
 724 01e2 1100     		movs	r1, r2	@, D.6997
 725 01e4 1800     		movs	r0, r3	@, tmp238
 726 01e6 FFF7FEFF 		bl	Usart2SendUnsigned	@
 727              	.L27:
 519:src/main.c    **** 		}
 520:src/main.c    **** 
 521:src/main.c    **** 		if (LIGHT)
 728              		.loc 2 521 0
 729 01ea 9023     		movs	r3, #144	@ tmp248,
 730 01ec DB05     		lsls	r3, r3, #23	@ D.6994, tmp248,
 731 01ee 1B8A     		ldrh	r3, [r3, #16]	@ tmp240,
 732 01f0 9BB2     		uxth	r3, r3	@ D.6995, tmp240
 733 01f2 1A00     		movs	r2, r3	@ D.6996, D.6995
 734 01f4 0223     		movs	r3, #2	@ tmp241,
 735 01f6 1340     		ands	r3, r2	@ D.6996, D.6996
 736 01f8 05D0     		beq	.L28	@,
 522:src/main.c    **** 			LED_ON;
 737              		.loc 2 522 0
 738 01fa 9023     		movs	r3, #144	@ tmp246,
 739 01fc DB05     		lsls	r3, r3, #23	@ D.6994, tmp246,
 740 01fe 8022     		movs	r2, #128	@ tmp247,
 741 0200 5201     		lsls	r2, r2, #5	@ tmp242, tmp247,
 742 0202 9A61     		str	r2, [r3, #24]	@ tmp242, _86->BSRR
 743 0204 D1E7     		b	.L30	@
 744              	.L28:
 523:src/main.c    **** 		else
 524:src/main.c    **** 			LED_OFF;
 745              		.loc 2 524 0
 746 0206 9023     		movs	r3, #144	@ tmp244,
 747 0208 DB05     		lsls	r3, r3, #23	@ D.6994, tmp244,
 748 020a 8022     		movs	r2, #128	@ tmp245,
 749 020c 5205     		lsls	r2, r2, #21	@ tmp243, tmp245,
 750 020e 9A61     		str	r2, [r3, #24]	@ tmp243, _88->BSRR
 525:src/main.c    **** 	}
 751              		.loc 2 525 0
 752 0210 CBE7     		b	.L30	@
 753              	.L32:
 754 0212 C046     		.align	2
 755              	.L31:
 756 0214 80BB0000 		.word	48000
 757 0218 B80B0000 		.word	3000
 758 021c 00000000 		.word	.LC0
 759 0220 20000000 		.word	.LC2
 760 0224 00000000 		.word	timer_standby
 761 0228 60EAFFFF 		.word	-5536
 762 022c 34000000 		.word	.LC5
 763 0230 40000000 		.word	.LC7
 764 0234 4C000000 		.word	.LC9
 765 0238 00000000 		.word	usart2_pckt_ready
 766 023c 00000000 		.word	usart2_pckt_bytes
 767 0240 00000000 		.word	buffUARTGSMrx2
ARM GAS  /tmp/ccJp2csF.s 			page 41


 768 0244 00000000 		.word	usart1_pckt_ready
 769 0248 00000000 		.word	usart1_pckt_bytes
 770              		.cfi_endproc
 771              	.LFE20:
 772              		.size	main, .-main
 773              		.section	.rodata
 774 006d 000000   		.align	2
 775              	.LC16:
 776 0070 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 776      3A7B226D 
 776      794E616D 
 776      65223A22 
 776      4E75636C 
 777              		.align	2
 778              	.LC18:
 779 0088 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 779      54656D70 
 779      65726174 
 779      75726522 
 779      3A256C75 
 780 00a1 000000   		.align	2
 781              	.LC20:
 782 00a4 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 782      48756D69 
 782      64697479 
 782      223A256C 
 782      752E256C 
 783 00ba 0000     		.align	2
 784              	.LC22:
 785 00bc 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 785      50726573 
 785      73757265 
 785      223A256C 
 785      752E256C 
 786 00d2 0000     		.align	2
 787              	.LC24:
 788 00d4 7D7D00   		.ascii	"}}\000"
 789              		.section	.text.prepare_json_pkt,"ax",%progbits
 790              		.align	2
 791              		.global	prepare_json_pkt
 792              		.code	16
 793              		.thumb_func
 794              		.type	prepare_json_pkt, %function
 795              	prepare_json_pkt:
 796              	.LFB21:
 526:src/main.c    **** #endif
 527:src/main.c    **** 
 528:src/main.c    **** 	//---------- Fin Prueba con GSM GATEWAY --------//
 529:src/main.c    **** 
 530:src/main.c    **** 
 531:src/main.c    **** 
 532:src/main.c    **** 	//---------- Prueba temp --------//
 533:src/main.c    **** 	/*
 534:src/main.c    **** 	while (1)
 535:src/main.c    **** 	{
 536:src/main.c    **** 		local_meas = GetTemp();
 537:src/main.c    **** 		if (local_meas != local_meas_last)
ARM GAS  /tmp/ccJp2csF.s 			page 42


 538:src/main.c    **** 		{
 539:src/main.c    **** 			LED_ON;
 540:src/main.c    **** 			local_meas_last = local_meas;
 541:src/main.c    **** 			LCD_2DO_RENGLON;
 542:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
 543:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
 544:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
 545:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
 546:src/main.c    **** 			LCDTransmitStr(s_lcd);
 547:src/main.c    **** 			LED_OFF;
 548:src/main.c    **** 		}
 549:src/main.c    **** 
 550:src/main.c    **** 		UpdateTemp();
 551:src/main.c    **** 	}
 552:src/main.c    **** 	*/
 553:src/main.c    **** 	//---------- Fin prueba temp --------//
 554:src/main.c    **** 
 555:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
 556:src/main.c    **** 	/*
 557:src/main.c    **** 	local_meas = 0;
 558:src/main.c    **** 	while (1)
 559:src/main.c    **** 	{
 560:src/main.c    **** 		LCD_2DO_RENGLON;
 561:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
 562:src/main.c    **** 		fcalc = local_meas;
 563:src/main.c    **** 		fcalc = fcalc * K_1TO10;
 564:src/main.c    **** 		one_int = (short) fcalc;
 565:src/main.c    **** 		fcalc = fcalc - one_int;
 566:src/main.c    **** 		fcalc = fcalc * 10;
 567:src/main.c    **** 		one_dec = (short) fcalc;
 568:src/main.c    **** 
 569:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
 570:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
 571:src/main.c    **** 		LCDTransmitStr(s_lcd);
 572:src/main.c    **** 
 573:src/main.c    **** 		Wait_ms (1000);
 574:src/main.c    **** 		if (local_meas <= 255)
 575:src/main.c    **** 			local_meas = 0;
 576:src/main.c    **** 		else
 577:src/main.c    **** 			local_meas++;
 578:src/main.c    **** 	}
 579:src/main.c    **** 	*/
 580:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
 581:src/main.c    **** 
 582:src/main.c    ****     //---------- Programa de Certificacion S.E. --------//
 583:src/main.c    **** #ifdef USE_CE_PROGRAM
 584:src/main.c    **** 	while (1)
 585:src/main.c    **** 	{
 586:src/main.c    **** 		resp = FuncStandAloneCert();
 587:src/main.c    **** 
 588:src/main.c    **** 
 589:src/main.c    **** 		UpdateSwitches();
 590:src/main.c    **** 		UpdateACSwitch();
 591:src/main.c    **** 		UpdatePackets();
 592:src/main.c    **** 		UpdateTemp();
 593:src/main.c    **** 		UpdateIGrid();
 594:src/main.c    **** 		UpdateVGrid();
ARM GAS  /tmp/ccJp2csF.s 			page 43


 595:src/main.c    **** 
 596:src/main.c    **** 	}	//termina while(1)
 597:src/main.c    **** #endif
 598:src/main.c    **** 	//---------- Fin Programa de Certificacion S.E. --------//
 599:src/main.c    **** 
 600:src/main.c    ****     //---------- Programa de Produccion --------//
 601:src/main.c    **** #ifdef USE_PROD_PROGRAM
 602:src/main.c    **** 	//--- PRUEBA FUNCION MAIN_MENU
 603:src/main.c    **** 	//leo la memoria, si tengo configuracion de modo
 604:src/main.c    **** 	//entro directo, sino a Main Menu
 605:src/main.c    **** 	if (saved_mode == 0xFF)	//memoria borrada
 606:src/main.c    **** 		main_state = MAIN_INIT;
 607:src/main.c    **** 	else
 608:src/main.c    **** 		jump_the_menu = RESP_YES;
 609:src/main.c    **** 
 610:src/main.c    **** #ifdef VER_1_2
 611:src/main.c    **** 	Update_TIM3_CH2 (255);
 612:src/main.c    **** #endif
 613:src/main.c    **** 	//Wait_ms(2000);
 614:src/main.c    **** 	while (1)
 615:src/main.c    **** 	{
 616:src/main.c    **** 		switch (main_state)
 617:src/main.c    **** 		{
 618:src/main.c    **** 			case MAIN_INIT:
 619:src/main.c    **** 				resp = FuncMainMenu();
 620:src/main.c    **** 
 621:src/main.c    **** 				if (resp == MAINMENU_SHOW_STANDALONE_SELECTED)	//TODO deberia forzar init
 622:src/main.c    **** 					main_state = MAIN_STAND_ALONE;
 623:src/main.c    **** 
 624:src/main.c    **** 				if (resp == MAINMENU_SHOW_GROUPED_SELECTED)
 625:src/main.c    **** 					main_state = MAIN_GROUPED;
 626:src/main.c    **** 
 627:src/main.c    **** 				if (resp == MAINMENU_SHOW_NETWORK_SELECTED)
 628:src/main.c    **** 					main_state = MAIN_NETWORKED;
 629:src/main.c    **** 
 630:src/main.c    **** 				jump_the_menu = RESP_NO;
 631:src/main.c    **** 				break;
 632:src/main.c    **** 
 633:src/main.c    **** 			case MAIN_STAND_ALONE:
 634:src/main.c    **** 				resp = FuncStandAlone();
 635:src/main.c    **** 
 636:src/main.c    **** 				if (resp == RESP_CHANGE_ALL_UP)
 637:src/main.c    **** 				{
 638:src/main.c    **** 					FuncStandAloneReset();
 639:src/main.c    **** 					main_state = MAIN_INIT;
 640:src/main.c    **** 				}
 641:src/main.c    **** 
 642:src/main.c    **** 				break;
 643:src/main.c    **** 
 644:src/main.c    **** 			case MAIN_GROUPED:
 645:src/main.c    **** 				resp = FuncGrouped();
 646:src/main.c    **** 
 647:src/main.c    **** 				if (resp == RESP_CHANGE_ALL_UP)
 648:src/main.c    **** 				{
 649:src/main.c    **** 					FuncGroupedReset();
 650:src/main.c    **** 					main_state = MAIN_INIT;
 651:src/main.c    **** 				}
ARM GAS  /tmp/ccJp2csF.s 			page 44


 652:src/main.c    **** 
 653:src/main.c    **** 				break;
 654:src/main.c    **** 
 655:src/main.c    **** 			case MAIN_NETWORKED:
 656:src/main.c    **** 				resp = FuncNetworked(jump_the_menu);
 657:src/main.c    **** 				jump_the_menu = RESP_NO_CHANGE;
 658:src/main.c    **** 				main_state++;
 659:src/main.c    **** 				break;
 660:src/main.c    **** 
 661:src/main.c    **** 			case MAIN_NETWORKED_1:
 662:src/main.c    **** 				resp = FuncNetworked(jump_the_menu);
 663:src/main.c    **** 
 664:src/main.c    **** 				if (resp == RESP_CHANGE_ALL_UP)
 665:src/main.c    **** 					main_state = MAIN_INIT;
 666:src/main.c    **** 
 667:src/main.c    **** 				break;
 668:src/main.c    **** 
 669:src/main.c    **** 			default:
 670:src/main.c    **** 				main_state = MAIN_INIT;
 671:src/main.c    **** 				break;
 672:src/main.c    **** 
 673:src/main.c    **** 		}
 674:src/main.c    **** 
 675:src/main.c    **** 		UpdateSwitches();
 676:src/main.c    **** 		UpdateACSwitch();
 677:src/main.c    **** 		UpdatePackets();
 678:src/main.c    **** 	}
 679:src/main.c    **** 
 680:src/main.c    **** 	//--- FIN PRUEBA FUNCION MAIN_MENU
 681:src/main.c    **** #endif
 682:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
 683:src/main.c    **** 
 684:src/main.c    **** 	return 0;
 685:src/main.c    **** }
 686:src/main.c    **** 
 687:src/main.c    **** //--- End of Main ---//
 688:src/main.c    **** 
 689:src/main.c    **** 
 690:src/main.c    **** 
 691:src/main.c    **** 
 692:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
 693:src/main.c    **** {
 797              		.loc 2 693 0
 798              		.cfi_startproc
 799 0000 00B5     		push	{lr}	@
 800              	.LCFI6:
 801              		.cfi_def_cfa_offset 4
 802              		.cfi_offset 14, -4
 803 0002 97B0     		sub	sp, sp, #92	@,,
 804              	.LCFI7:
 805              		.cfi_def_cfa_offset 96
 806 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
 694:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 807              		.loc 2 694 0
 808 0006 0123     		movs	r3, #1	@ tmp112,
 809 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 810 000a 0223     		movs	r3, #2	@ tmp113,
ARM GAS  /tmp/ccJp2csF.s 			page 45


 811 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 812 000e 0323     		movs	r3, #3	@ tmp114,
 813 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 814 0012 0423     		movs	r3, #4	@ tmp115,
 815 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 816 0016 0523     		movs	r3, #5	@ tmp116,
 817 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 818 001a 0623     		movs	r3, #6	@ tmp117,
 819 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
 695:src/main.c    ****       char tempbuff[40];
 696:src/main.c    ****       volatile float HUMIDITY_Value;
 697:src/main.c    ****       volatile float TEMPERATURE_Value;
 698:src/main.c    ****       volatile float PRESSURE_Value;
 699:src/main.c    **** 
 700:src/main.c    **** 
 701:src/main.c    **** 
 702:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 820              		.loc 2 702 0
 821 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 822 0020 1E4B     		ldr	r3, .L35	@ tmp119,
 823 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 824 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 825 0026 1823     		movs	r3, #24	@ tmp122,
 826 0028 1A00     		movs	r2, r3	@, tmp122
 827 002a FFF7FEFF 		bl	memcpy	@
 703:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
 704:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
 705:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 828              		.loc 2 705 0
 829 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 830 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 831 0032 1B49     		ldr	r1, .L35+4	@ tmp127,
 832 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 833 0036 FFF7FEFF 		bl	sprintf	@
 706:src/main.c    ****       strcat((char *)buffer,tempbuff);
 834              		.loc 2 706 0
 835 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 836 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 837 003e 1100     		movs	r1, r2	@, tmp129
 838 0040 1800     		movs	r0, r3	@, tmp130
 839 0042 FFF7FEFF 		bl	strcat	@
 707:src/main.c    **** 
 708:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
 709:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
 710:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 840              		.loc 2 710 0
 841 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 842 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 843 004a 1649     		ldr	r1, .L35+8	@ tmp133,
 844 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 845 004e FFF7FEFF 		bl	sprintf	@
 711:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 846              		.loc 2 711 0
 847 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 848 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 849 0056 1100     		movs	r1, r2	@, tmp135
 850 0058 1800     		movs	r0, r3	@, tmp136
ARM GAS  /tmp/ccJp2csF.s 			page 46


 851 005a FFF7FEFF 		bl	strcat	@
 712:src/main.c    **** 
 713:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
 714:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
 715:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 852              		.loc 2 715 0
 853 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 854 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 855 0062 1149     		ldr	r1, .L35+12	@ tmp139,
 856 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 857 0066 FFF7FEFF 		bl	sprintf	@
 716:src/main.c    ****       strcat((char *)buffer,tempbuff);
 858              		.loc 2 716 0
 859 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 860 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 861 006e 1100     		movs	r1, r2	@, tmp141
 862 0070 1800     		movs	r0, r3	@, tmp142
 863 0072 FFF7FEFF 		bl	strcat	@
 717:src/main.c    **** 
 718:src/main.c    **** 
 719:src/main.c    ****       strcat((char *)buffer,"}}");
 864              		.loc 2 719 0
 865 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 866 0078 1800     		movs	r0, r3	@, tmp143
 867 007a FFF7FEFF 		bl	strlen	@
 868 007e 0300     		movs	r3, r0	@ tmp144,
 869 0080 1A00     		movs	r2, r3	@ D.7003, tmp145
 870 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 871 0084 9A18     		adds	r2, r3, r2	@ D.7004, tmp146, D.7003
 872 0086 094B     		ldr	r3, .L35+16	@ tmp147,
 873 0088 1000     		movs	r0, r2	@ tmp148, D.7004
 874 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 875 008c 0323     		movs	r3, #3	@ tmp150,
 876 008e 1A00     		movs	r2, r3	@, tmp150
 877 0090 FFF7FEFF 		bl	memcpy	@
 720:src/main.c    **** 
 721:src/main.c    ****       return;
 878              		.loc 2 721 0
 879 0094 C046     		nop
 722:src/main.c    **** }
 880              		.loc 2 722 0
 881 0096 17B0     		add	sp, sp, #92	@,,
 882              		@ sp needed	@
 883 0098 00BD     		pop	{pc}
 884              	.L36:
 885 009a C046     		.align	2
 886              	.L35:
 887 009c 70000000 		.word	.LC16
 888 00a0 88000000 		.word	.LC18
 889 00a4 A4000000 		.word	.LC20
 890 00a8 BC000000 		.word	.LC22
 891 00ac D4000000 		.word	.LC24
 892              		.cfi_endproc
 893              	.LFE21:
 894              		.size	prepare_json_pkt, .-prepare_json_pkt
 895              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 896              		.align	2
ARM GAS  /tmp/ccJp2csF.s 			page 47


 897              		.global	TimingDelay_Decrement
 898              		.code	16
 899              		.thumb_func
 900              		.type	TimingDelay_Decrement, %function
 901              	TimingDelay_Decrement:
 902              	.LFB22:
 723:src/main.c    **** 
 724:src/main.c    **** //void EXTI4_15_IRQHandler(void)
 725:src/main.c    **** //{
 726:src/main.c    **** //	unsigned short aux;
 727:src/main.c    **** //
 728:src/main.c    **** ////--- SOLO PRUEBA DE INTERRUPCIONES ---//
 729:src/main.c    **** ////	if (DMX_INPUT)
 730:src/main.c    **** ////		LED_ON;
 731:src/main.c    **** ////	else
 732:src/main.c    **** ////		LED_OFF;
 733:src/main.c    **** ////
 734:src/main.c    **** ////	EXTI->PR |= 0x0100;
 735:src/main.c    **** //
 736:src/main.c    **** //	if(EXTI->PR & 0x0100)	//Line8
 737:src/main.c    **** //	{
 738:src/main.c    **** //
 739:src/main.c    **** //		//si no esta con el USART detecta el flanco	PONER TIMEOUT ACA?????
 740:src/main.c    **** //		if ((dmx_receive_flag == 0) || (dmx_timeout_timer == 0))
 741:src/main.c    **** //		//if (dmx_receive_flag == 0)
 742:src/main.c    **** //		{
 743:src/main.c    **** //			switch (signal_state)
 744:src/main.c    **** //			{
 745:src/main.c    **** //				case IDLE:
 746:src/main.c    **** //					if (!(DMX_INPUT))
 747:src/main.c    **** //					{
 748:src/main.c    **** //						//Activo timer en Falling.
 749:src/main.c    **** //						TIM14->CNT = 0;
 750:src/main.c    **** //						TIM14->CR1 |= 0x0001;
 751:src/main.c    **** //						signal_state++;
 752:src/main.c    **** //					}
 753:src/main.c    **** //					break;
 754:src/main.c    **** //
 755:src/main.c    **** //				case LOOK_FOR_BREAK:
 756:src/main.c    **** //					if (DMX_INPUT)
 757:src/main.c    **** //					{
 758:src/main.c    **** //						//Desactivo timer en Rising.
 759:src/main.c    **** //						aux = TIM14->CNT;
 760:src/main.c    **** //
 761:src/main.c    **** //						//reviso BREAK
 762:src/main.c    **** //						//if (((tim_counter_65ms) || (aux > 88)) && (tim_counter_65ms <= 20))
 763:src/main.c    **** //						if ((aux > 87) && (aux < 210))	//Consola STARLET 6
 764:src/main.c    **** //						//if ((aux > 87) && (aux < 2000))		//Consola marca CODE tiene break 1.88ms
 765:src/main.c    **** //						{
 766:src/main.c    **** //							LED_ON;
 767:src/main.c    **** //							//Activo timer para ver MARK.
 768:src/main.c    **** //							//TIM2->CNT = 0;
 769:src/main.c    **** //							//TIM2->CR1 |= 0x0001;
 770:src/main.c    **** //
 771:src/main.c    **** //							signal_state++;
 772:src/main.c    **** //							//tengo el break, activo el puerto serie
 773:src/main.c    **** //							DMX_channel_received = 0;
ARM GAS  /tmp/ccJp2csF.s 			page 48


 774:src/main.c    **** //							//dmx_receive_flag = 1;
 775:src/main.c    **** //
 776:src/main.c    **** //							dmx_timeout_timer = DMX_TIMEOUT;		//activo el timer cuando prendo el puerto serie
 777:src/main.c    **** //							//USARTx_RX_ENA;
 778:src/main.c    **** //						}
 779:src/main.c    **** //						else	//falso disparo
 780:src/main.c    **** //							signal_state = IDLE;
 781:src/main.c    **** //					}
 782:src/main.c    **** //					else	//falso disparo
 783:src/main.c    **** //						signal_state = IDLE;
 784:src/main.c    **** //
 785:src/main.c    **** //					TIM14->CR1 &= 0xFFFE;
 786:src/main.c    **** //					break;
 787:src/main.c    **** //
 788:src/main.c    **** //				case LOOK_FOR_MARK:
 789:src/main.c    **** //					if ((!(DMX_INPUT)) && (dmx_timeout_timer))	//termino Mark after break
 790:src/main.c    **** //					{
 791:src/main.c    **** //						//ya tenia el serie habilitado
 792:src/main.c    **** //						//if ((aux > 7) && (aux < 12))
 793:src/main.c    **** //						dmx_receive_flag = 1;
 794:src/main.c    **** //					}
 795:src/main.c    **** //					else	//falso disparo
 796:src/main.c    **** //					{
 797:src/main.c    **** //						//termine por timeout
 798:src/main.c    **** //						dmx_receive_flag = 0;
 799:src/main.c    **** //						//USARTx_RX_DISA;
 800:src/main.c    **** //					}
 801:src/main.c    **** //					signal_state = IDLE;
 802:src/main.c    **** //					LED_OFF;
 803:src/main.c    **** //					break;
 804:src/main.c    **** //
 805:src/main.c    **** //				default:
 806:src/main.c    **** //					signal_state = IDLE;
 807:src/main.c    **** //					break;
 808:src/main.c    **** //			}
 809:src/main.c    **** //		}
 810:src/main.c    **** //
 811:src/main.c    **** //		EXTI->PR |= 0x0100;
 812:src/main.c    **** //	}
 813:src/main.c    **** //}
 814:src/main.c    **** 
 815:src/main.c    **** void TimingDelay_Decrement(void)
 816:src/main.c    **** {
 903              		.loc 2 816 0
 904              		.cfi_startproc
 905 0000 10B5     		push	{r4, lr}	@
 906              	.LCFI8:
 907              		.cfi_def_cfa_offset 8
 908              		.cfi_offset 4, -8
 909              		.cfi_offset 14, -4
 817:src/main.c    **** 	if (wait_ms_var)
 910              		.loc 2 817 0
 911 0002 384B     		ldr	r3, .L47	@ tmp136,
 912 0004 1B88     		ldrh	r3, [r3]	@ tmp137, wait_ms_var
 913 0006 9BB2     		uxth	r3, r3	@ D.7017, tmp137
 914 0008 002B     		cmp	r3, #0	@ D.7017,
 915 000a 06D0     		beq	.L38	@,
ARM GAS  /tmp/ccJp2csF.s 			page 49


 818:src/main.c    **** 		wait_ms_var--;
 916              		.loc 2 818 0
 917 000c 354B     		ldr	r3, .L47	@ tmp138,
 918 000e 1B88     		ldrh	r3, [r3]	@ tmp139, wait_ms_var
 919 0010 9BB2     		uxth	r3, r3	@ D.7017, tmp139
 920 0012 013B     		subs	r3, r3, #1	@ tmp140,
 921 0014 9AB2     		uxth	r2, r3	@ D.7017, tmp140
 922 0016 334B     		ldr	r3, .L47	@ tmp141,
 923 0018 1A80     		strh	r2, [r3]	@ tmp142, wait_ms_var
 924              	.L38:
 819:src/main.c    **** 
 820:src/main.c    **** //	if (display_timer)
 821:src/main.c    **** //		display_timer--;
 822:src/main.c    **** 
 823:src/main.c    **** 	if (timer_standby)
 925              		.loc 2 823 0
 926 001a 334B     		ldr	r3, .L47+4	@ tmp143,
 927 001c 1B88     		ldrh	r3, [r3]	@ tmp144, timer_standby
 928 001e 9BB2     		uxth	r3, r3	@ D.7017, tmp144
 929 0020 002B     		cmp	r3, #0	@ D.7017,
 930 0022 06D0     		beq	.L39	@,
 824:src/main.c    **** 		timer_standby--;
 931              		.loc 2 824 0
 932 0024 304B     		ldr	r3, .L47+4	@ tmp145,
 933 0026 1B88     		ldrh	r3, [r3]	@ tmp146, timer_standby
 934 0028 9BB2     		uxth	r3, r3	@ D.7017, tmp146
 935 002a 013B     		subs	r3, r3, #1	@ tmp147,
 936 002c 9AB2     		uxth	r2, r3	@ D.7017, tmp147
 937 002e 2E4B     		ldr	r3, .L47+4	@ tmp148,
 938 0030 1A80     		strh	r2, [r3]	@ tmp149, timer_standby
 939              	.L39:
 825:src/main.c    **** 
 826:src/main.c    **** 	if (acswitch_timer)
 940              		.loc 2 826 0
 941 0032 2E4B     		ldr	r3, .L47+8	@ tmp150,
 942 0034 1B78     		ldrb	r3, [r3]	@ tmp151, acswitch_timer
 943 0036 DBB2     		uxtb	r3, r3	@ D.7018, tmp151
 944 0038 002B     		cmp	r3, #0	@ D.7018,
 945 003a 06D0     		beq	.L40	@,
 827:src/main.c    **** 		acswitch_timer--;
 946              		.loc 2 827 0
 947 003c 2B4B     		ldr	r3, .L47+8	@ tmp152,
 948 003e 1B78     		ldrb	r3, [r3]	@ tmp153, acswitch_timer
 949 0040 DBB2     		uxtb	r3, r3	@ D.7018, tmp153
 950 0042 013B     		subs	r3, r3, #1	@ tmp154,
 951 0044 DAB2     		uxtb	r2, r3	@ D.7018, tmp154
 952 0046 294B     		ldr	r3, .L47+8	@ tmp155,
 953 0048 1A70     		strb	r2, [r3]	@ tmp156, acswitch_timer
 954              	.L40:
 828:src/main.c    **** 
 829:src/main.c    **** //	if (prog_timer)
 830:src/main.c    **** //		prog_timer--;
 831:src/main.c    **** 
 832:src/main.c    **** 	if (take_temp_sample)
 955              		.loc 2 832 0
 956 004a 294B     		ldr	r3, .L47+12	@ tmp157,
 957 004c 1B88     		ldrh	r3, [r3]	@ tmp158, take_temp_sample
ARM GAS  /tmp/ccJp2csF.s 			page 50


 958 004e 9BB2     		uxth	r3, r3	@ D.7017, tmp158
 959 0050 002B     		cmp	r3, #0	@ D.7017,
 960 0052 06D0     		beq	.L41	@,
 833:src/main.c    **** 		take_temp_sample--;
 961              		.loc 2 833 0
 962 0054 264B     		ldr	r3, .L47+12	@ tmp159,
 963 0056 1B88     		ldrh	r3, [r3]	@ tmp160, take_temp_sample
 964 0058 9BB2     		uxth	r3, r3	@ D.7017, tmp160
 965 005a 013B     		subs	r3, r3, #1	@ tmp161,
 966 005c 9AB2     		uxth	r2, r3	@ D.7017, tmp161
 967 005e 244B     		ldr	r3, .L47+12	@ tmp162,
 968 0060 1A80     		strh	r2, [r3]	@ tmp163, take_temp_sample
 969              	.L41:
 834:src/main.c    **** 
 835:src/main.c    **** 	if (filter_timer)
 970              		.loc 2 835 0
 971 0062 244B     		ldr	r3, .L47+16	@ tmp164,
 972 0064 1B78     		ldrb	r3, [r3]	@ tmp165, filter_timer
 973 0066 DBB2     		uxtb	r3, r3	@ D.7018, tmp165
 974 0068 002B     		cmp	r3, #0	@ D.7018,
 975 006a 06D0     		beq	.L42	@,
 836:src/main.c    **** 		filter_timer--;
 976              		.loc 2 836 0
 977 006c 214B     		ldr	r3, .L47+16	@ tmp166,
 978 006e 1B78     		ldrb	r3, [r3]	@ tmp167, filter_timer
 979 0070 DBB2     		uxtb	r3, r3	@ D.7018, tmp167
 980 0072 013B     		subs	r3, r3, #1	@ tmp168,
 981 0074 DAB2     		uxtb	r2, r3	@ D.7018, tmp168
 982 0076 1F4B     		ldr	r3, .L47+16	@ tmp169,
 983 0078 1A70     		strb	r2, [r3]	@ tmp170, filter_timer
 984              	.L42:
 837:src/main.c    **** 
 838:src/main.c    **** 
 839:src/main.c    **** 	//cuenta de a 1 minuto
 840:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 985              		.loc 2 840 0
 986 007a 1F4B     		ldr	r3, .L47+20	@ tmp171,
 987 007c 1B88     		ldrh	r3, [r3]	@ tmp172, secs
 988 007e 9BB2     		uxth	r3, r3	@ D.7017, tmp172
 989 0080 1E4A     		ldr	r2, .L47+24	@ tmp173,
 990 0082 9342     		cmp	r3, r2	@ D.7017, tmp173
 991 0084 0AD9     		bls	.L43	@,
 841:src/main.c    **** 	{
 842:src/main.c    **** 		minutes++;
 992              		.loc 2 842 0
 993 0086 1E4B     		ldr	r3, .L47+28	@ tmp174,
 994 0088 1B88     		ldrh	r3, [r3]	@ tmp175, minutes
 995 008a 9BB2     		uxth	r3, r3	@ D.7017, tmp175
 996 008c 0133     		adds	r3, r3, #1	@ tmp176,
 997 008e 9AB2     		uxth	r2, r3	@ D.7017, tmp176
 998 0090 1B4B     		ldr	r3, .L47+28	@ tmp177,
 999 0092 1A80     		strh	r2, [r3]	@ tmp178, minutes
 843:src/main.c    **** 		secs = 0;
 1000              		.loc 2 843 0
 1001 0094 184B     		ldr	r3, .L47+20	@ tmp179,
 1002 0096 0022     		movs	r2, #0	@ tmp180,
 1003 0098 1A80     		strh	r2, [r3]	@ tmp181, secs
ARM GAS  /tmp/ccJp2csF.s 			page 51


 1004 009a 06E0     		b	.L44	@
 1005              	.L43:
 844:src/main.c    **** 	}
 845:src/main.c    **** 	else
 846:src/main.c    **** 		secs++;
 1006              		.loc 2 846 0
 1007 009c 164B     		ldr	r3, .L47+20	@ tmp182,
 1008 009e 1B88     		ldrh	r3, [r3]	@ tmp183, secs
 1009 00a0 9BB2     		uxth	r3, r3	@ D.7017, tmp183
 1010 00a2 0133     		adds	r3, r3, #1	@ tmp184,
 1011 00a4 9AB2     		uxth	r2, r3	@ D.7017, tmp184
 1012 00a6 144B     		ldr	r3, .L47+20	@ tmp185,
 1013 00a8 1A80     		strh	r2, [r3]	@ tmp186, secs
 1014              	.L44:
 847:src/main.c    **** 
 848:src/main.c    **** #ifdef USE_MQTT_LIB
 849:src/main.c    **** 	//timer del MQTT
 850:src/main.c    **** 	SysTickIntHandler();
 851:src/main.c    **** #endif
 852:src/main.c    **** 
 853:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 854:src/main.c    **** 	if (usart1_mini_timeout)
 1015              		.loc 2 854 0
 1016 00aa 164B     		ldr	r3, .L47+32	@ tmp187,
 1017 00ac 1B78     		ldrb	r3, [r3]	@ tmp188, usart1_mini_timeout
 1018 00ae DBB2     		uxtb	r3, r3	@ D.7018, tmp188
 1019 00b0 002B     		cmp	r3, #0	@ D.7018,
 1020 00b2 06D0     		beq	.L45	@,
 855:src/main.c    **** 		usart1_mini_timeout--;
 1021              		.loc 2 855 0
 1022 00b4 134B     		ldr	r3, .L47+32	@ tmp189,
 1023 00b6 1B78     		ldrb	r3, [r3]	@ tmp190, usart1_mini_timeout
 1024 00b8 DBB2     		uxtb	r3, r3	@ D.7018, tmp190
 1025 00ba 013B     		subs	r3, r3, #1	@ tmp191,
 1026 00bc DAB2     		uxtb	r2, r3	@ D.7018, tmp191
 1027 00be 114B     		ldr	r3, .L47+32	@ tmp192,
 1028 00c0 1A70     		strb	r2, [r3]	@ tmp193, usart1_mini_timeout
 1029              	.L45:
 856:src/main.c    **** 	if (usart2_mini_timeout)
 1030              		.loc 2 856 0
 1031 00c2 114B     		ldr	r3, .L47+36	@ tmp194,
 1032 00c4 1B78     		ldrb	r3, [r3]	@ tmp195, usart2_mini_timeout
 1033 00c6 DBB2     		uxtb	r3, r3	@ D.7018, tmp195
 1034 00c8 002B     		cmp	r3, #0	@ D.7018,
 1035 00ca 06D0     		beq	.L46	@,
 857:src/main.c    **** 		usart2_mini_timeout--;
 1036              		.loc 2 857 0
 1037 00cc 0E4B     		ldr	r3, .L47+36	@ tmp196,
 1038 00ce 1B78     		ldrb	r3, [r3]	@ tmp197, usart2_mini_timeout
 1039 00d0 DBB2     		uxtb	r3, r3	@ D.7018, tmp197
 1040 00d2 013B     		subs	r3, r3, #1	@ tmp198,
 1041 00d4 DAB2     		uxtb	r2, r3	@ D.7018, tmp198
 1042 00d6 0C4B     		ldr	r3, .L47+36	@ tmp199,
 1043 00d8 1A70     		strb	r2, [r3]	@ tmp200, usart2_mini_timeout
 1044              	.L46:
 858:src/main.c    **** #endif
 859:src/main.c    **** #ifdef USE_GPS
ARM GAS  /tmp/ccJp2csF.s 			page 52


 860:src/main.c    **** 	GPSTimeoutCounters ();
 861:src/main.c    **** #endif
 862:src/main.c    **** 
 863:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 864:src/main.c    **** 	GSMTimeoutCounters ();
 1045              		.loc 2 864 0
 1046 00da FFF7FEFF 		bl	GSMTimeoutCounters	@
 865:src/main.c    **** #endif
 866:src/main.c    **** }
 1047              		.loc 2 866 0
 1048 00de C046     		nop
 1049              		@ sp needed	@
 1050 00e0 10BD     		pop	{r4, pc}
 1051              	.L48:
 1052 00e2 C046     		.align	2
 1053              	.L47:
 1054 00e4 00000000 		.word	wait_ms_var
 1055 00e8 00000000 		.word	timer_standby
 1056 00ec 00000000 		.word	acswitch_timer
 1057 00f0 00000000 		.word	take_temp_sample
 1058 00f4 00000000 		.word	filter_timer
 1059 00f8 00000000 		.word	secs
 1060 00fc 5FEA0000 		.word	59999
 1061 0100 00000000 		.word	minutes
 1062 0104 00000000 		.word	usart1_mini_timeout
 1063 0108 00000000 		.word	usart2_mini_timeout
 1064              		.cfi_endproc
 1065              	.LFE22:
 1066              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1067              		.text
 1068              	.Letext0:
 1069              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1070              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1071              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1072              		.file 6 "src/flash_program.h"
 1073              		.file 7 "src/tcp_transceiver.h"
 1074              		.section	.debug_info,"",%progbits
 1075              	.Ldebug_info0:
 1076 0000 CD0B0000 		.4byte	0xbcd
 1077 0004 0200     		.2byte	0x2
 1078 0006 00000000 		.4byte	.Ldebug_abbrev0
 1079 000a 04       		.byte	0x4
 1080 000b 01       		.uleb128 0x1
 1081 000c C4070000 		.4byte	.LASF166
 1082 0010 0C       		.byte	0xc
 1083 0011 9B070000 		.4byte	.LASF167
 1084 0015 23060000 		.4byte	.LASF168
 1085 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1086 001d 00000000 		.4byte	0
 1087 0021 00000000 		.4byte	0
 1088 0025 00000000 		.4byte	.Ldebug_line0
 1089 0029 02       		.uleb128 0x2
 1090 002a AB040000 		.4byte	.LASF95
 1091 002e 01       		.byte	0x1
 1092 002f 06010000 		.4byte	0x106
 1093 0033 03       		.byte	0x3
 1094 0034 C7       		.byte	0xc7
ARM GAS  /tmp/ccJp2csF.s 			page 53


 1095 0035 06010000 		.4byte	0x106
 1096 0039 03       		.uleb128 0x3
 1097 003a 2E050000 		.4byte	.LASF0
 1098 003e 72       		.sleb128 -14
 1099 003f 03       		.uleb128 0x3
 1100 0040 85080000 		.4byte	.LASF1
 1101 0044 73       		.sleb128 -13
 1102 0045 03       		.uleb128 0x3
 1103 0046 C2000000 		.4byte	.LASF2
 1104 004a 7B       		.sleb128 -5
 1105 004b 03       		.uleb128 0x3
 1106 004c A2010000 		.4byte	.LASF3
 1107 0050 7E       		.sleb128 -2
 1108 0051 03       		.uleb128 0x3
 1109 0052 CA050000 		.4byte	.LASF4
 1110 0056 7F       		.sleb128 -1
 1111 0057 04       		.uleb128 0x4
 1112 0058 AC030000 		.4byte	.LASF5
 1113 005c 00       		.byte	0
 1114 005d 04       		.uleb128 0x4
 1115 005e 34040000 		.4byte	.LASF6
 1116 0062 01       		.byte	0x1
 1117 0063 04       		.uleb128 0x4
 1118 0064 D4040000 		.4byte	.LASF7
 1119 0068 02       		.byte	0x2
 1120 0069 04       		.uleb128 0x4
 1121 006a 29010000 		.4byte	.LASF8
 1122 006e 03       		.byte	0x3
 1123 006f 04       		.uleb128 0x4
 1124 0070 BF010000 		.4byte	.LASF9
 1125 0074 04       		.byte	0x4
 1126 0075 04       		.uleb128 0x4
 1127 0076 62010000 		.4byte	.LASF10
 1128 007a 05       		.byte	0x5
 1129 007b 04       		.uleb128 0x4
 1130 007c 9F000000 		.4byte	.LASF11
 1131 0080 06       		.byte	0x6
 1132 0081 04       		.uleb128 0x4
 1133 0082 75000000 		.4byte	.LASF12
 1134 0086 07       		.byte	0x7
 1135 0087 04       		.uleb128 0x4
 1136 0088 FF030000 		.4byte	.LASF13
 1137 008c 08       		.byte	0x8
 1138 008d 04       		.uleb128 0x4
 1139 008e 2A030000 		.4byte	.LASF14
 1140 0092 09       		.byte	0x9
 1141 0093 04       		.uleb128 0x4
 1142 0094 97060000 		.4byte	.LASF15
 1143 0098 0A       		.byte	0xa
 1144 0099 04       		.uleb128 0x4
 1145 009a 7F050000 		.4byte	.LASF16
 1146 009e 0B       		.byte	0xb
 1147 009f 04       		.uleb128 0x4
 1148 00a0 4C040000 		.4byte	.LASF17
 1149 00a4 0C       		.byte	0xc
 1150 00a5 04       		.uleb128 0x4
 1151 00a6 12040000 		.4byte	.LASF18
ARM GAS  /tmp/ccJp2csF.s 			page 54


 1152 00aa 0D       		.byte	0xd
 1153 00ab 04       		.uleb128 0x4
 1154 00ac 4B050000 		.4byte	.LASF19
 1155 00b0 0E       		.byte	0xe
 1156 00b1 04       		.uleb128 0x4
 1157 00b2 0A060000 		.4byte	.LASF20
 1158 00b6 0F       		.byte	0xf
 1159 00b7 04       		.uleb128 0x4
 1160 00b8 20030000 		.4byte	.LASF21
 1161 00bc 10       		.byte	0x10
 1162 00bd 04       		.uleb128 0x4
 1163 00be C6060000 		.4byte	.LASF22
 1164 00c2 11       		.byte	0x11
 1165 00c3 04       		.uleb128 0x4
 1166 00c4 8C060000 		.4byte	.LASF23
 1167 00c8 13       		.byte	0x13
 1168 00c9 04       		.uleb128 0x4
 1169 00ca 48030000 		.4byte	.LASF24
 1170 00ce 14       		.byte	0x14
 1171 00cf 04       		.uleb128 0x4
 1172 00d0 FB000000 		.4byte	.LASF25
 1173 00d4 15       		.byte	0x15
 1174 00d5 04       		.uleb128 0x4
 1175 00d6 74050000 		.4byte	.LASF26
 1176 00da 16       		.byte	0x16
 1177 00db 04       		.uleb128 0x4
 1178 00dc 98010000 		.4byte	.LASF27
 1179 00e0 17       		.byte	0x17
 1180 00e1 04       		.uleb128 0x4
 1181 00e2 EE050000 		.4byte	.LASF28
 1182 00e6 18       		.byte	0x18
 1183 00e7 04       		.uleb128 0x4
 1184 00e8 EE010000 		.4byte	.LASF29
 1185 00ec 19       		.byte	0x19
 1186 00ed 04       		.uleb128 0x4
 1187 00ee 56070000 		.4byte	.LASF30
 1188 00f2 1A       		.byte	0x1a
 1189 00f3 04       		.uleb128 0x4
 1190 00f4 22050000 		.4byte	.LASF31
 1191 00f8 1B       		.byte	0x1b
 1192 00f9 04       		.uleb128 0x4
 1193 00fa 74020000 		.4byte	.LASF32
 1194 00fe 1C       		.byte	0x1c
 1195 00ff 04       		.uleb128 0x4
 1196 0100 D7050000 		.4byte	.LASF33
 1197 0104 1E       		.byte	0x1e
 1198 0105 00       		.byte	0
 1199 0106 05       		.uleb128 0x5
 1200 0107 01       		.byte	0x1
 1201 0108 06       		.byte	0x6
 1202 0109 8F070000 		.4byte	.LASF36
 1203 010d 06       		.uleb128 0x6
 1204 010e 5E020000 		.4byte	.LASF34
 1205 0112 03       		.byte	0x3
 1206 0113 5F01     		.2byte	0x15f
 1207 0115 29000000 		.4byte	0x29
 1208 0119 07       		.uleb128 0x7
ARM GAS  /tmp/ccJp2csF.s 			page 55


 1209 011a 94050000 		.4byte	.LASF35
 1210 011e 04       		.byte	0x4
 1211 011f 1D       		.byte	0x1d
 1212 0120 24010000 		.4byte	0x124
 1213 0124 05       		.uleb128 0x5
 1214 0125 01       		.byte	0x1
 1215 0126 08       		.byte	0x8
 1216 0127 D4060000 		.4byte	.LASF37
 1217 012b 05       		.uleb128 0x5
 1218 012c 02       		.byte	0x2
 1219 012d 05       		.byte	0x5
 1220 012e 0F050000 		.4byte	.LASF38
 1221 0132 07       		.uleb128 0x7
 1222 0133 33020000 		.4byte	.LASF39
 1223 0137 04       		.byte	0x4
 1224 0138 2B       		.byte	0x2b
 1225 0139 3D010000 		.4byte	0x13d
 1226 013d 05       		.uleb128 0x5
 1227 013e 02       		.byte	0x2
 1228 013f 07       		.byte	0x7
 1229 0140 B1070000 		.4byte	.LASF40
 1230 0144 07       		.uleb128 0x7
 1231 0145 17010000 		.4byte	.LASF41
 1232 0149 04       		.byte	0x4
 1233 014a 3F       		.byte	0x3f
 1234 014b 4F010000 		.4byte	0x14f
 1235 014f 05       		.uleb128 0x5
 1236 0150 04       		.byte	0x4
 1237 0151 05       		.byte	0x5
 1238 0152 19050000 		.4byte	.LASF42
 1239 0156 07       		.uleb128 0x7
 1240 0157 E2060000 		.4byte	.LASF43
 1241 015b 04       		.byte	0x4
 1242 015c 41       		.byte	0x41
 1243 015d 61010000 		.4byte	0x161
 1244 0161 05       		.uleb128 0x5
 1245 0162 04       		.byte	0x4
 1246 0163 07       		.byte	0x7
 1247 0164 F8050000 		.4byte	.LASF44
 1248 0168 05       		.uleb128 0x5
 1249 0169 08       		.byte	0x8
 1250 016a 05       		.byte	0x5
 1251 016b 9E030000 		.4byte	.LASF45
 1252 016f 05       		.uleb128 0x5
 1253 0170 08       		.byte	0x8
 1254 0171 07       		.byte	0x7
 1255 0172 F8010000 		.4byte	.LASF46
 1256 0176 08       		.uleb128 0x8
 1257 0177 04       		.byte	0x4
 1258 0178 05       		.byte	0x5
 1259 0179 696E7400 		.ascii	"int\000"
 1260 017d 05       		.uleb128 0x5
 1261 017e 04       		.byte	0x4
 1262 017f 07       		.byte	0x7
 1263 0180 E9000000 		.4byte	.LASF47
 1264 0184 07       		.uleb128 0x7
 1265 0185 53030000 		.4byte	.LASF48
ARM GAS  /tmp/ccJp2csF.s 			page 56


 1266 0189 05       		.byte	0x5
 1267 018a 14       		.byte	0x14
 1268 018b 19010000 		.4byte	0x119
 1269 018f 07       		.uleb128 0x7
 1270 0190 93040000 		.4byte	.LASF49
 1271 0194 05       		.byte	0x5
 1272 0195 1A       		.byte	0x1a
 1273 0196 32010000 		.4byte	0x132
 1274 019a 07       		.uleb128 0x7
 1275 019b 67060000 		.4byte	.LASF50
 1276 019f 05       		.byte	0x5
 1277 01a0 1F       		.byte	0x1f
 1278 01a1 44010000 		.4byte	0x144
 1279 01a5 07       		.uleb128 0x7
 1280 01a6 D1010000 		.4byte	.LASF51
 1281 01aa 05       		.byte	0x5
 1282 01ab 20       		.byte	0x20
 1283 01ac 56010000 		.4byte	0x156
 1284 01b0 09       		.uleb128 0x9
 1285 01b1 2003     		.2byte	0x320
 1286 01b3 01       		.byte	0x1
 1287 01b4 71       		.byte	0x71
 1288 01b5 4D020000 		.4byte	0x24d
 1289 01b9 0A       		.uleb128 0xa
 1290 01ba DA010000 		.4byte	.LASF52
 1291 01be 01       		.byte	0x1
 1292 01bf 73       		.byte	0x73
 1293 01c0 64020000 		.4byte	0x264
 1294 01c4 02       		.byte	0x2
 1295 01c5 23       		.byte	0x23
 1296 01c6 00       		.uleb128 0
 1297 01c7 0A       		.uleb128 0xa
 1298 01c8 DD040000 		.4byte	.LASF53
 1299 01cc 01       		.byte	0x1
 1300 01cd 74       		.byte	0x74
 1301 01ce 69020000 		.4byte	0x269
 1302 01d2 02       		.byte	0x2
 1303 01d3 23       		.byte	0x23
 1304 01d4 04       		.uleb128 0x4
 1305 01d5 0A       		.uleb128 0xa
 1306 01d6 51070000 		.4byte	.LASF54
 1307 01da 01       		.byte	0x1
 1308 01db 75       		.byte	0x75
 1309 01dc 79020000 		.4byte	0x279
 1310 01e0 03       		.byte	0x3
 1311 01e1 23       		.byte	0x23
 1312 01e2 8001     		.uleb128 0x80
 1313 01e4 0A       		.uleb128 0xa
 1314 01e5 E5010000 		.4byte	.LASF55
 1315 01e9 01       		.byte	0x1
 1316 01ea 76       		.byte	0x76
 1317 01eb 69020000 		.4byte	0x269
 1318 01ef 03       		.byte	0x3
 1319 01f0 23       		.byte	0x23
 1320 01f1 8401     		.uleb128 0x84
 1321 01f3 0A       		.uleb128 0xa
 1322 01f4 94080000 		.4byte	.LASF56
ARM GAS  /tmp/ccJp2csF.s 			page 57


 1323 01f8 01       		.byte	0x1
 1324 01f9 77       		.byte	0x77
 1325 01fa 7E020000 		.4byte	0x27e
 1326 01fe 03       		.byte	0x3
 1327 01ff 23       		.byte	0x23
 1328 0200 8002     		.uleb128 0x100
 1329 0202 0A       		.uleb128 0xa
 1330 0203 F1040000 		.4byte	.LASF57
 1331 0207 01       		.byte	0x1
 1332 0208 78       		.byte	0x78
 1333 0209 69020000 		.4byte	0x269
 1334 020d 03       		.byte	0x3
 1335 020e 23       		.byte	0x23
 1336 020f 8402     		.uleb128 0x104
 1337 0211 0A       		.uleb128 0xa
 1338 0212 47040000 		.4byte	.LASF58
 1339 0216 01       		.byte	0x1
 1340 0217 79       		.byte	0x79
 1341 0218 83020000 		.4byte	0x283
 1342 021c 03       		.byte	0x3
 1343 021d 23       		.byte	0x23
 1344 021e 8003     		.uleb128 0x180
 1345 0220 0A       		.uleb128 0xa
 1346 0221 FB040000 		.4byte	.LASF59
 1347 0225 01       		.byte	0x1
 1348 0226 7A       		.byte	0x7a
 1349 0227 69020000 		.4byte	0x269
 1350 022b 03       		.byte	0x3
 1351 022c 23       		.byte	0x23
 1352 022d 8403     		.uleb128 0x184
 1353 022f 0A       		.uleb128 0xa
 1354 0230 05050000 		.4byte	.LASF60
 1355 0234 01       		.byte	0x1
 1356 0235 7B       		.byte	0x7b
 1357 0236 88020000 		.4byte	0x288
 1358 023a 03       		.byte	0x3
 1359 023b 23       		.byte	0x23
 1360 023c 8004     		.uleb128 0x200
 1361 023e 0B       		.uleb128 0xb
 1362 023f 495000   		.ascii	"IP\000"
 1363 0242 01       		.byte	0x1
 1364 0243 7C       		.byte	0x7c
 1365 0244 A8020000 		.4byte	0x2a8
 1366 0248 03       		.byte	0x3
 1367 0249 23       		.byte	0x23
 1368 024a 8006     		.uleb128 0x300
 1369 024c 00       		.byte	0
 1370 024d 0C       		.uleb128 0xc
 1371 024e A5010000 		.4byte	0x1a5
 1372 0252 5D020000 		.4byte	0x25d
 1373 0256 0D       		.uleb128 0xd
 1374 0257 5D020000 		.4byte	0x25d
 1375 025b 00       		.byte	0
 1376 025c 00       		.byte	0
 1377 025d 05       		.uleb128 0x5
 1378 025e 04       		.byte	0x4
 1379 025f 07       		.byte	0x7
ARM GAS  /tmp/ccJp2csF.s 			page 58


 1380 0260 E0050000 		.4byte	.LASF61
 1381 0264 0E       		.uleb128 0xe
 1382 0265 4D020000 		.4byte	0x24d
 1383 0269 0C       		.uleb128 0xc
 1384 026a A5010000 		.4byte	0x1a5
 1385 026e 79020000 		.4byte	0x279
 1386 0272 0D       		.uleb128 0xd
 1387 0273 5D020000 		.4byte	0x25d
 1388 0277 1E       		.byte	0x1e
 1389 0278 00       		.byte	0
 1390 0279 0E       		.uleb128 0xe
 1391 027a 4D020000 		.4byte	0x24d
 1392 027e 0E       		.uleb128 0xe
 1393 027f 4D020000 		.4byte	0x24d
 1394 0283 0E       		.uleb128 0xe
 1395 0284 4D020000 		.4byte	0x24d
 1396 0288 0C       		.uleb128 0xc
 1397 0289 A5010000 		.4byte	0x1a5
 1398 028d 98020000 		.4byte	0x298
 1399 0291 0D       		.uleb128 0xd
 1400 0292 5D020000 		.4byte	0x25d
 1401 0296 3F       		.byte	0x3f
 1402 0297 00       		.byte	0
 1403 0298 0C       		.uleb128 0xc
 1404 0299 A5010000 		.4byte	0x1a5
 1405 029d A8020000 		.4byte	0x2a8
 1406 02a1 0D       		.uleb128 0xd
 1407 02a2 5D020000 		.4byte	0x25d
 1408 02a6 07       		.byte	0x7
 1409 02a7 00       		.byte	0
 1410 02a8 0E       		.uleb128 0xe
 1411 02a9 98020000 		.4byte	0x298
 1412 02ad 07       		.uleb128 0x7
 1413 02ae AA050000 		.4byte	.LASF62
 1414 02b2 01       		.byte	0x1
 1415 02b3 7D       		.byte	0x7d
 1416 02b4 B0010000 		.4byte	0x1b0
 1417 02b8 0F       		.uleb128 0xf
 1418 02b9 34       		.byte	0x34
 1419 02ba 01       		.byte	0x1
 1420 02bb 86       		.byte	0x86
 1421 02bc 5B030000 		.4byte	0x35b
 1422 02c0 0A       		.uleb128 0xa
 1423 02c1 80020000 		.4byte	.LASF63
 1424 02c5 01       		.byte	0x1
 1425 02c6 88       		.byte	0x88
 1426 02c7 60030000 		.4byte	0x360
 1427 02cb 02       		.byte	0x2
 1428 02cc 23       		.byte	0x23
 1429 02cd 00       		.uleb128 0
 1430 02ce 0A       		.uleb128 0xa
 1431 02cf E9050000 		.4byte	.LASF64
 1432 02d3 01       		.byte	0x1
 1433 02d4 89       		.byte	0x89
 1434 02d5 5B030000 		.4byte	0x35b
 1435 02d9 02       		.byte	0x2
 1436 02da 23       		.byte	0x23
ARM GAS  /tmp/ccJp2csF.s 			page 59


 1437 02db 04       		.uleb128 0x4
 1438 02dc 0A       		.uleb128 0xa
 1439 02dd DD040000 		.4byte	.LASF53
 1440 02e1 01       		.byte	0x1
 1441 02e2 8A       		.byte	0x8a
 1442 02e3 A5010000 		.4byte	0x1a5
 1443 02e7 02       		.byte	0x2
 1444 02e8 23       		.byte	0x23
 1445 02e9 08       		.uleb128 0x8
 1446 02ea 0A       		.uleb128 0xa
 1447 02eb 09030000 		.4byte	.LASF65
 1448 02ef 01       		.byte	0x1
 1449 02f0 8B       		.byte	0x8b
 1450 02f1 5B030000 		.4byte	0x35b
 1451 02f5 02       		.byte	0x2
 1452 02f6 23       		.byte	0x23
 1453 02f7 0C       		.uleb128 0xc
 1454 02f8 0B       		.uleb128 0xb
 1455 02f9 53435200 		.ascii	"SCR\000"
 1456 02fd 01       		.byte	0x1
 1457 02fe 8C       		.byte	0x8c
 1458 02ff 5B030000 		.4byte	0x35b
 1459 0303 02       		.byte	0x2
 1460 0304 23       		.byte	0x23
 1461 0305 10       		.uleb128 0x10
 1462 0306 0B       		.uleb128 0xb
 1463 0307 43435200 		.ascii	"CCR\000"
 1464 030b 01       		.byte	0x1
 1465 030c 8D       		.byte	0x8d
 1466 030d 5B030000 		.4byte	0x35b
 1467 0311 02       		.byte	0x2
 1468 0312 23       		.byte	0x23
 1469 0313 14       		.uleb128 0x14
 1470 0314 0A       		.uleb128 0xa
 1471 0315 E7040000 		.4byte	.LASF66
 1472 0319 01       		.byte	0x1
 1473 031a 8E       		.byte	0x8e
 1474 031b A5010000 		.4byte	0x1a5
 1475 031f 02       		.byte	0x2
 1476 0320 23       		.byte	0x23
 1477 0321 18       		.uleb128 0x18
 1478 0322 0B       		.uleb128 0xb
 1479 0323 53485000 		.ascii	"SHP\000"
 1480 0327 01       		.byte	0x1
 1481 0328 8F       		.byte	0x8f
 1482 0329 75030000 		.4byte	0x375
 1483 032d 02       		.byte	0x2
 1484 032e 23       		.byte	0x23
 1485 032f 1C       		.uleb128 0x1c
 1486 0330 0A       		.uleb128 0xa
 1487 0331 B6030000 		.4byte	.LASF67
 1488 0335 01       		.byte	0x1
 1489 0336 90       		.byte	0x90
 1490 0337 5B030000 		.4byte	0x35b
 1491 033b 02       		.byte	0x2
 1492 033c 23       		.byte	0x23
 1493 033d 24       		.uleb128 0x24
ARM GAS  /tmp/ccJp2csF.s 			page 60


 1494 033e 0A       		.uleb128 0xa
 1495 033f F1040000 		.4byte	.LASF57
 1496 0343 01       		.byte	0x1
 1497 0344 91       		.byte	0x91
 1498 0345 65030000 		.4byte	0x365
 1499 0349 02       		.byte	0x2
 1500 034a 23       		.byte	0x23
 1501 034b 28       		.uleb128 0x28
 1502 034c 0A       		.uleb128 0xa
 1503 034d 0F020000 		.4byte	.LASF68
 1504 0351 01       		.byte	0x1
 1505 0352 92       		.byte	0x92
 1506 0353 5B030000 		.4byte	0x35b
 1507 0357 02       		.byte	0x2
 1508 0358 23       		.byte	0x23
 1509 0359 30       		.uleb128 0x30
 1510 035a 00       		.byte	0
 1511 035b 0E       		.uleb128 0xe
 1512 035c A5010000 		.4byte	0x1a5
 1513 0360 10       		.uleb128 0x10
 1514 0361 5B030000 		.4byte	0x35b
 1515 0365 0C       		.uleb128 0xc
 1516 0366 A5010000 		.4byte	0x1a5
 1517 036a 75030000 		.4byte	0x375
 1518 036e 0D       		.uleb128 0xd
 1519 036f 5D020000 		.4byte	0x25d
 1520 0373 01       		.byte	0x1
 1521 0374 00       		.byte	0
 1522 0375 0E       		.uleb128 0xe
 1523 0376 65030000 		.4byte	0x365
 1524 037a 07       		.uleb128 0x7
 1525 037b B4050000 		.4byte	.LASF69
 1526 037f 01       		.byte	0x1
 1527 0380 93       		.byte	0x93
 1528 0381 B8020000 		.4byte	0x2b8
 1529 0385 0F       		.uleb128 0xf
 1530 0386 10       		.byte	0x10
 1531 0387 01       		.byte	0x1
 1532 0388 FC       		.byte	0xfc
 1533 0389 C8030000 		.4byte	0x3c8
 1534 038d 0A       		.uleb128 0xa
 1535 038e D2080000 		.4byte	.LASF70
 1536 0392 01       		.byte	0x1
 1537 0393 FE       		.byte	0xfe
 1538 0394 5B030000 		.4byte	0x35b
 1539 0398 02       		.byte	0x2
 1540 0399 23       		.byte	0x23
 1541 039a 00       		.uleb128 0
 1542 039b 0A       		.uleb128 0xa
 1543 039c F6000000 		.4byte	.LASF71
 1544 03a0 01       		.byte	0x1
 1545 03a1 FF       		.byte	0xff
 1546 03a2 5B030000 		.4byte	0x35b
 1547 03a6 02       		.byte	0x2
 1548 03a7 23       		.byte	0x23
 1549 03a8 04       		.uleb128 0x4
 1550 03a9 11       		.uleb128 0x11
ARM GAS  /tmp/ccJp2csF.s 			page 61


 1551 03aa 56414C00 		.ascii	"VAL\000"
 1552 03ae 01       		.byte	0x1
 1553 03af 0001     		.2byte	0x100
 1554 03b1 5B030000 		.4byte	0x35b
 1555 03b5 02       		.byte	0x2
 1556 03b6 23       		.byte	0x23
 1557 03b7 08       		.uleb128 0x8
 1558 03b8 12       		.uleb128 0x12
 1559 03b9 42010000 		.4byte	.LASF72
 1560 03bd 01       		.byte	0x1
 1561 03be 0101     		.2byte	0x101
 1562 03c0 60030000 		.4byte	0x360
 1563 03c4 02       		.byte	0x2
 1564 03c5 23       		.byte	0x23
 1565 03c6 0C       		.uleb128 0xc
 1566 03c7 00       		.byte	0
 1567 03c8 06       		.uleb128 0x6
 1568 03c9 7A040000 		.4byte	.LASF73
 1569 03cd 01       		.byte	0x1
 1570 03ce 0201     		.2byte	0x102
 1571 03d0 85030000 		.4byte	0x385
 1572 03d4 0E       		.uleb128 0xe
 1573 03d5 8F010000 		.4byte	0x18f
 1574 03d9 13       		.uleb128 0x13
 1575 03da 2C       		.byte	0x2c
 1576 03db 03       		.byte	0x3
 1577 03dc 6902     		.2byte	0x269
 1578 03de B5040000 		.4byte	0x4b5
 1579 03e2 12       		.uleb128 0x12
 1580 03e3 46020000 		.4byte	.LASF74
 1581 03e7 03       		.byte	0x3
 1582 03e8 6B02     		.2byte	0x26b
 1583 03ea 5B030000 		.4byte	0x35b
 1584 03ee 02       		.byte	0x2
 1585 03ef 23       		.byte	0x23
 1586 03f0 00       		.uleb128 0
 1587 03f1 12       		.uleb128 0x12
 1588 03f2 58050000 		.4byte	.LASF75
 1589 03f6 03       		.byte	0x3
 1590 03f7 6C02     		.2byte	0x26c
 1591 03f9 D4030000 		.4byte	0x3d4
 1592 03fd 02       		.byte	0x2
 1593 03fe 23       		.byte	0x23
 1594 03ff 04       		.uleb128 0x4
 1595 0400 12       		.uleb128 0x12
 1596 0401 DD040000 		.4byte	.LASF53
 1597 0405 03       		.byte	0x3
 1598 0406 6D02     		.2byte	0x26d
 1599 0408 8F010000 		.4byte	0x18f
 1600 040c 02       		.byte	0x2
 1601 040d 23       		.byte	0x23
 1602 040e 06       		.uleb128 0x6
 1603 040f 12       		.uleb128 0x12
 1604 0410 72040000 		.4byte	.LASF76
 1605 0414 03       		.byte	0x3
 1606 0415 6E02     		.2byte	0x26e
 1607 0417 5B030000 		.4byte	0x35b
ARM GAS  /tmp/ccJp2csF.s 			page 62


 1608 041b 02       		.byte	0x2
 1609 041c 23       		.byte	0x23
 1610 041d 08       		.uleb128 0x8
 1611 041e 12       		.uleb128 0x12
 1612 041f BB020000 		.4byte	.LASF77
 1613 0423 03       		.byte	0x3
 1614 0424 6F02     		.2byte	0x26f
 1615 0426 5B030000 		.4byte	0x35b
 1616 042a 02       		.byte	0x2
 1617 042b 23       		.byte	0x23
 1618 042c 0C       		.uleb128 0xc
 1619 042d 11       		.uleb128 0x11
 1620 042e 49445200 		.ascii	"IDR\000"
 1621 0432 03       		.byte	0x3
 1622 0433 7002     		.2byte	0x270
 1623 0435 D4030000 		.4byte	0x3d4
 1624 0439 02       		.byte	0x2
 1625 043a 23       		.byte	0x23
 1626 043b 10       		.uleb128 0x10
 1627 043c 12       		.uleb128 0x12
 1628 043d E7040000 		.4byte	.LASF66
 1629 0441 03       		.byte	0x3
 1630 0442 7102     		.2byte	0x271
 1631 0444 8F010000 		.4byte	0x18f
 1632 0448 02       		.byte	0x2
 1633 0449 23       		.byte	0x23
 1634 044a 12       		.uleb128 0x12
 1635 044b 11       		.uleb128 0x11
 1636 044c 4F445200 		.ascii	"ODR\000"
 1637 0450 03       		.byte	0x3
 1638 0451 7202     		.2byte	0x272
 1639 0453 D4030000 		.4byte	0x3d4
 1640 0457 02       		.byte	0x2
 1641 0458 23       		.byte	0x23
 1642 0459 14       		.uleb128 0x14
 1643 045a 12       		.uleb128 0x12
 1644 045b F1040000 		.4byte	.LASF57
 1645 045f 03       		.byte	0x3
 1646 0460 7302     		.2byte	0x273
 1647 0462 8F010000 		.4byte	0x18f
 1648 0466 02       		.byte	0x2
 1649 0467 23       		.byte	0x23
 1650 0468 16       		.uleb128 0x16
 1651 0469 12       		.uleb128 0x12
 1652 046a 83000000 		.4byte	.LASF78
 1653 046e 03       		.byte	0x3
 1654 046f 7402     		.2byte	0x274
 1655 0471 5B030000 		.4byte	0x35b
 1656 0475 02       		.byte	0x2
 1657 0476 23       		.byte	0x23
 1658 0477 18       		.uleb128 0x18
 1659 0478 12       		.uleb128 0x12
 1660 0479 CD080000 		.4byte	.LASF79
 1661 047d 03       		.byte	0x3
 1662 047e 7502     		.2byte	0x275
 1663 0480 5B030000 		.4byte	0x35b
 1664 0484 02       		.byte	0x2
ARM GAS  /tmp/ccJp2csF.s 			page 63


 1665 0485 23       		.byte	0x23
 1666 0486 1C       		.uleb128 0x1c
 1667 0487 11       		.uleb128 0x11
 1668 0488 41465200 		.ascii	"AFR\000"
 1669 048c 03       		.byte	0x3
 1670 048d 7602     		.2byte	0x276
 1671 048f B5040000 		.4byte	0x4b5
 1672 0493 02       		.byte	0x2
 1673 0494 23       		.byte	0x23
 1674 0495 20       		.uleb128 0x20
 1675 0496 11       		.uleb128 0x11
 1676 0497 42525200 		.ascii	"BRR\000"
 1677 049b 03       		.byte	0x3
 1678 049c 7702     		.2byte	0x277
 1679 049e D4030000 		.4byte	0x3d4
 1680 04a2 02       		.byte	0x2
 1681 04a3 23       		.byte	0x23
 1682 04a4 28       		.uleb128 0x28
 1683 04a5 12       		.uleb128 0x12
 1684 04a6 FB040000 		.4byte	.LASF59
 1685 04aa 03       		.byte	0x3
 1686 04ab 7802     		.2byte	0x278
 1687 04ad 8F010000 		.4byte	0x18f
 1688 04b1 02       		.byte	0x2
 1689 04b2 23       		.byte	0x23
 1690 04b3 2A       		.uleb128 0x2a
 1691 04b4 00       		.byte	0
 1692 04b5 0E       		.uleb128 0xe
 1693 04b6 65030000 		.4byte	0x365
 1694 04ba 06       		.uleb128 0x6
 1695 04bb BD050000 		.4byte	.LASF80
 1696 04bf 03       		.byte	0x3
 1697 04c0 7902     		.2byte	0x279
 1698 04c2 D9030000 		.4byte	0x3d9
 1699 04c6 05       		.uleb128 0x5
 1700 04c7 08       		.byte	0x8
 1701 04c8 04       		.byte	0x4
 1702 04c9 87040000 		.4byte	.LASF81
 1703 04cd 05       		.uleb128 0x5
 1704 04ce 01       		.byte	0x1
 1705 04cf 08       		.byte	0x8
 1706 04d0 F2020000 		.4byte	.LASF82
 1707 04d4 14       		.uleb128 0x14
 1708 04d5 E8030000 		.4byte	.LASF169
 1709 04d9 0C       		.byte	0xc
 1710 04da 06       		.byte	0x6
 1711 04db 34       		.byte	0x34
 1712 04dc 7B050000 		.4byte	0x57b
 1713 04e0 0A       		.uleb128 0xa
 1714 04e1 88000000 		.4byte	.LASF83
 1715 04e5 06       		.byte	0x6
 1716 04e6 36       		.byte	0x36
 1717 04e7 24010000 		.4byte	0x124
 1718 04eb 02       		.byte	0x2
 1719 04ec 23       		.byte	0x23
 1720 04ed 00       		.uleb128 0
 1721 04ee 0A       		.uleb128 0xa
ARM GAS  /tmp/ccJp2csF.s 			page 64


 1722 04ef 02070000 		.4byte	.LASF84
 1723 04f3 06       		.byte	0x6
 1724 04f4 38       		.byte	0x38
 1725 04f5 24010000 		.4byte	0x124
 1726 04f9 02       		.byte	0x2
 1727 04fa 23       		.byte	0x23
 1728 04fb 01       		.uleb128 0x1
 1729 04fc 0A       		.uleb128 0xa
 1730 04fd 5A000000 		.4byte	.LASF85
 1731 0501 06       		.byte	0x6
 1732 0502 39       		.byte	0x39
 1733 0503 24010000 		.4byte	0x124
 1734 0507 02       		.byte	0x2
 1735 0508 23       		.byte	0x23
 1736 0509 02       		.uleb128 0x2
 1737 050a 0A       		.uleb128 0xa
 1738 050b 3C010000 		.4byte	.LASF86
 1739 050f 06       		.byte	0x6
 1740 0510 3A       		.byte	0x3a
 1741 0511 24010000 		.4byte	0x124
 1742 0515 02       		.byte	0x2
 1743 0516 23       		.byte	0x23
 1744 0517 03       		.uleb128 0x3
 1745 0518 0A       		.uleb128 0xa
 1746 0519 B0040000 		.4byte	.LASF87
 1747 051d 06       		.byte	0x6
 1748 051e 3C       		.byte	0x3c
 1749 051f 3D010000 		.4byte	0x13d
 1750 0523 02       		.byte	0x2
 1751 0524 23       		.byte	0x23
 1752 0525 04       		.uleb128 0x4
 1753 0526 0A       		.uleb128 0xa
 1754 0527 D9020000 		.4byte	.LASF88
 1755 052b 06       		.byte	0x6
 1756 052c 3D       		.byte	0x3d
 1757 052d 24010000 		.4byte	0x124
 1758 0531 02       		.byte	0x2
 1759 0532 23       		.byte	0x23
 1760 0533 06       		.uleb128 0x6
 1761 0534 0A       		.uleb128 0xa
 1762 0535 E0020000 		.4byte	.LASF89
 1763 0539 06       		.byte	0x6
 1764 053a 3E       		.byte	0x3e
 1765 053b 24010000 		.4byte	0x124
 1766 053f 02       		.byte	0x2
 1767 0540 23       		.byte	0x23
 1768 0541 07       		.uleb128 0x7
 1769 0542 0A       		.uleb128 0xa
 1770 0543 06000000 		.4byte	.LASF90
 1771 0547 06       		.byte	0x6
 1772 0548 41       		.byte	0x41
 1773 0549 24010000 		.4byte	0x124
 1774 054d 02       		.byte	0x2
 1775 054e 23       		.byte	0x23
 1776 054f 08       		.uleb128 0x8
 1777 0550 0A       		.uleb128 0xa
 1778 0551 14000000 		.4byte	.LASF91
ARM GAS  /tmp/ccJp2csF.s 			page 65


 1779 0555 06       		.byte	0x6
 1780 0556 42       		.byte	0x42
 1781 0557 24010000 		.4byte	0x124
 1782 055b 02       		.byte	0x2
 1783 055c 23       		.byte	0x23
 1784 055d 09       		.uleb128 0x9
 1785 055e 0A       		.uleb128 0xa
 1786 055f 22000000 		.4byte	.LASF92
 1787 0563 06       		.byte	0x6
 1788 0564 43       		.byte	0x43
 1789 0565 24010000 		.4byte	0x124
 1790 0569 02       		.byte	0x2
 1791 056a 23       		.byte	0x23
 1792 056b 0A       		.uleb128 0xa
 1793 056c 0A       		.uleb128 0xa
 1794 056d 30000000 		.4byte	.LASF93
 1795 0571 06       		.byte	0x6
 1796 0572 44       		.byte	0x44
 1797 0573 24010000 		.4byte	0x124
 1798 0577 02       		.byte	0x2
 1799 0578 23       		.byte	0x23
 1800 0579 0B       		.uleb128 0xb
 1801 057a 00       		.byte	0
 1802 057b 07       		.uleb128 0x7
 1803 057c 7C070000 		.4byte	.LASF94
 1804 0580 06       		.byte	0x6
 1805 0581 46       		.byte	0x46
 1806 0582 D4040000 		.4byte	0x4d4
 1807 0586 02       		.uleb128 0x2
 1808 0587 68020000 		.4byte	.LASF96
 1809 058b 01       		.byte	0x1
 1810 058c 24010000 		.4byte	0x124
 1811 0590 07       		.byte	0x7
 1812 0591 0D       		.byte	0xd
 1813 0592 C1050000 		.4byte	0x5c1
 1814 0596 04       		.uleb128 0x4
 1815 0597 A1020000 		.4byte	.LASF97
 1816 059b 00       		.byte	0
 1817 059c 04       		.uleb128 0x4
 1818 059d 71070000 		.4byte	.LASF98
 1819 05a1 01       		.byte	0x1
 1820 05a2 04       		.uleb128 0x4
 1821 05a3 F3030000 		.4byte	.LASF99
 1822 05a7 02       		.byte	0x2
 1823 05a8 04       		.uleb128 0x4
 1824 05a9 9E050000 		.4byte	.LASF100
 1825 05ad 03       		.byte	0x3
 1826 05ae 04       		.uleb128 0x4
 1827 05af D7080000 		.4byte	.LASF101
 1828 05b3 04       		.byte	0x4
 1829 05b4 04       		.uleb128 0x4
 1830 05b5 A6070000 		.4byte	.LASF102
 1831 05b9 05       		.byte	0x5
 1832 05ba 04       		.uleb128 0x4
 1833 05bb 3D040000 		.4byte	.LASF103
 1834 05bf 06       		.byte	0x6
 1835 05c0 00       		.byte	0
ARM GAS  /tmp/ccJp2csF.s 			page 66


 1836 05c1 15       		.uleb128 0x15
 1837 05c2 D8000000 		.4byte	.LASF170
 1838 05c6 01       		.byte	0x1
 1839 05c7 7C03     		.2byte	0x37c
 1840 05c9 01       		.byte	0x1
 1841 05ca 00000000 		.4byte	.LFB16
 1842 05ce EC000000 		.4byte	.LFE16
 1843 05d2 00000000 		.4byte	.LLST0
 1844 05d6 01       		.byte	0x1
 1845 05d7 FA050000 		.4byte	0x5fa
 1846 05db 16       		.uleb128 0x16
 1847 05dc AB040000 		.4byte	.LASF95
 1848 05e0 01       		.byte	0x1
 1849 05e1 7C03     		.2byte	0x37c
 1850 05e3 0D010000 		.4byte	0x10d
 1851 05e7 02       		.byte	0x2
 1852 05e8 91       		.byte	0x91
 1853 05e9 6F       		.sleb128 -17
 1854 05ea 16       		.uleb128 0x16
 1855 05eb 42050000 		.4byte	.LASF104
 1856 05ef 01       		.byte	0x1
 1857 05f0 7C03     		.2byte	0x37c
 1858 05f2 A5010000 		.4byte	0x1a5
 1859 05f6 02       		.byte	0x2
 1860 05f7 91       		.byte	0x91
 1861 05f8 68       		.sleb128 -24
 1862 05f9 00       		.byte	0
 1863 05fa 17       		.uleb128 0x17
 1864 05fb 92020000 		.4byte	.LASF171
 1865 05ff 01       		.byte	0x1
 1866 0600 B803     		.2byte	0x3b8
 1867 0602 01       		.byte	0x1
 1868 0603 A5010000 		.4byte	0x1a5
 1869 0607 00000000 		.4byte	.LFB18
 1870 060b 48000000 		.4byte	.LFE18
 1871 060f 2C000000 		.4byte	.LLST1
 1872 0613 01       		.byte	0x1
 1873 0614 28060000 		.4byte	0x628
 1874 0618 16       		.uleb128 0x16
 1875 0619 C1020000 		.4byte	.LASF105
 1876 061d 01       		.byte	0x1
 1877 061e B803     		.2byte	0x3b8
 1878 0620 A5010000 		.4byte	0x1a5
 1879 0624 02       		.byte	0x2
 1880 0625 91       		.byte	0x91
 1881 0626 74       		.sleb128 -12
 1882 0627 00       		.byte	0
 1883 0628 18       		.uleb128 0x18
 1884 0629 01       		.byte	0x1
 1885 062a 80080000 		.4byte	.LASF172
 1886 062e 02       		.byte	0x2
 1887 062f D1       		.byte	0xd1
 1888 0630 01       		.byte	0x1
 1889 0631 76010000 		.4byte	0x176
 1890 0635 00000000 		.4byte	.LFB20
 1891 0639 4C020000 		.4byte	.LFE20
 1892 063d 58000000 		.4byte	.LLST2
ARM GAS  /tmp/ccJp2csF.s 			page 67


 1893 0641 01       		.byte	0x1
 1894 0642 2E070000 		.4byte	0x72e
 1895 0646 19       		.uleb128 0x19
 1896 0647 6900     		.ascii	"i\000"
 1897 0649 02       		.byte	0x2
 1898 064a D3       		.byte	0xd3
 1899 064b 24010000 		.4byte	0x124
 1900 064f 02       		.byte	0x2
 1901 0650 91       		.byte	0x91
 1902 0651 77       		.sleb128 -9
 1903 0652 1A       		.uleb128 0x1a
 1904 0653 696900   		.ascii	"ii\000"
 1905 0656 02       		.byte	0x2
 1906 0657 D3       		.byte	0xd3
 1907 0658 24010000 		.4byte	0x124
 1908 065c 1B       		.uleb128 0x1b
 1909 065d C0080000 		.4byte	.LASF106
 1910 0661 02       		.byte	0x2
 1911 0662 D4       		.byte	0xd4
 1912 0663 24010000 		.4byte	0x124
 1913 0667 1B       		.uleb128 0x1b
 1914 0668 3D030000 		.4byte	.LASF107
 1915 066c 02       		.byte	0x2
 1916 066d D4       		.byte	0xd4
 1917 066e 24010000 		.4byte	0x124
 1918 0672 1C       		.uleb128 0x1c
 1919 0673 F9060000 		.4byte	.LASF108
 1920 0677 02       		.byte	0x2
 1921 0678 D4       		.byte	0xd4
 1922 0679 24010000 		.4byte	0x124
 1923 067d 02       		.byte	0x2
 1924 067e 91       		.byte	0x91
 1925 067f 76       		.sleb128 -10
 1926 0680 1C       		.uleb128 0x1c
 1927 0681 99080000 		.4byte	.LASF109
 1928 0685 02       		.byte	0x2
 1929 0686 D5       		.byte	0xd5
 1930 0687 24010000 		.4byte	0x124
 1931 068b 02       		.byte	0x2
 1932 068c 91       		.byte	0x91
 1933 068d 75       		.sleb128 -11
 1934 068e 1B       		.uleb128 0x1b
 1935 068f E7020000 		.4byte	.LASF110
 1936 0693 02       		.byte	0x2
 1937 0694 D6       		.byte	0xd6
 1938 0695 3D010000 		.4byte	0x13d
 1939 0699 1B       		.uleb128 0x1b
 1940 069a 8E030000 		.4byte	.LASF111
 1941 069e 02       		.byte	0x2
 1942 069f D6       		.byte	0xd6
 1943 06a0 3D010000 		.4byte	0x13d
 1944 06a4 1C       		.uleb128 0x1c
 1945 06a5 AC000000 		.4byte	.LASF112
 1946 06a9 02       		.byte	0x2
 1947 06aa D7       		.byte	0xd7
 1948 06ab 24010000 		.4byte	0x124
 1949 06af 02       		.byte	0x2
ARM GAS  /tmp/ccJp2csF.s 			page 68


 1950 06b0 91       		.byte	0x91
 1951 06b1 74       		.sleb128 -12
 1952 06b2 1C       		.uleb128 0x1c
 1953 06b3 00000000 		.4byte	.LASF113
 1954 06b7 02       		.byte	0x2
 1955 06b8 D8       		.byte	0xd8
 1956 06b9 2E070000 		.4byte	0x72e
 1957 06bd 02       		.byte	0x2
 1958 06be 91       		.byte	0x91
 1959 06bf 50       		.sleb128 -48
 1960 06c0 1C       		.uleb128 0x1c
 1961 06c1 6A040000 		.4byte	.LASF114
 1962 06c5 02       		.byte	0x2
 1963 06c6 D9       		.byte	0xd9
 1964 06c7 86050000 		.4byte	0x586
 1965 06cb 02       		.byte	0x2
 1966 06cc 91       		.byte	0x91
 1967 06cd 73       		.sleb128 -13
 1968 06ce 1C       		.uleb128 0x1c
 1969 06cf 20070000 		.4byte	.LASF115
 1970 06d3 02       		.byte	0x2
 1971 06d4 DA       		.byte	0xda
 1972 06d5 24010000 		.4byte	0x124
 1973 06d9 02       		.byte	0x2
 1974 06da 91       		.byte	0x91
 1975 06db 72       		.sleb128 -14
 1976 06dc 1C       		.uleb128 0x1c
 1977 06dd 5F050000 		.4byte	.LASF116
 1978 06e1 02       		.byte	0x2
 1979 06e2 DB       		.byte	0xdb
 1980 06e3 24010000 		.4byte	0x124
 1981 06e7 02       		.byte	0x2
 1982 06e8 91       		.byte	0x91
 1983 06e9 71       		.sleb128 -15
 1984 06ea 1C       		.uleb128 0x1c
 1985 06eb ED060000 		.4byte	.LASF117
 1986 06ef 02       		.byte	0x2
 1987 06f0 DC       		.byte	0xdc
 1988 06f1 24010000 		.4byte	0x124
 1989 06f5 02       		.byte	0x2
 1990 06f6 91       		.byte	0x91
 1991 06f7 70       		.sleb128 -16
 1992 06f8 1C       		.uleb128 0x1c
 1993 06f9 C8010000 		.4byte	.LASF118
 1994 06fd 02       		.byte	0x2
 1995 06fe DD       		.byte	0xdd
 1996 06ff 24010000 		.4byte	0x124
 1997 0703 02       		.byte	0x2
 1998 0704 91       		.byte	0x91
 1999 0705 6F       		.sleb128 -17
 2000 0706 1C       		.uleb128 0x1c
 2001 0707 07040000 		.4byte	.LASF119
 2002 070b 02       		.byte	0x2
 2003 070c DE       		.byte	0xde
 2004 070d 76010000 		.4byte	0x176
 2005 0711 02       		.byte	0x2
 2006 0712 91       		.byte	0x91
ARM GAS  /tmp/ccJp2csF.s 			page 69


 2007 0713 68       		.sleb128 -24
 2008 0714 1C       		.uleb128 0x1c
 2009 0715 AC060000 		.4byte	.LASF120
 2010 0719 02       		.byte	0x2
 2011 071a DF       		.byte	0xdf
 2012 071b 24010000 		.4byte	0x124
 2013 071f 02       		.byte	0x2
 2014 0720 91       		.byte	0x91
 2015 0721 67       		.sleb128 -25
 2016 0722 1B       		.uleb128 0x1b
 2017 0723 B7000000 		.4byte	.LASF121
 2018 0727 02       		.byte	0x2
 2019 0728 E4       		.byte	0xe4
 2020 0729 3E070000 		.4byte	0x73e
 2021 072d 00       		.byte	0
 2022 072e 0C       		.uleb128 0xc
 2023 072f CD040000 		.4byte	0x4cd
 2024 0733 3E070000 		.4byte	0x73e
 2025 0737 0D       		.uleb128 0xd
 2026 0738 5D020000 		.4byte	0x25d
 2027 073c 13       		.byte	0x13
 2028 073d 00       		.byte	0
 2029 073e 1D       		.uleb128 0x1d
 2030 073f 04       		.byte	0x4
 2031 0740 7B050000 		.4byte	0x57b
 2032 0744 1E       		.uleb128 0x1e
 2033 0745 01       		.byte	0x1
 2034 0746 60070000 		.4byte	.LASF173
 2035 074a 02       		.byte	0x2
 2036 074b B402     		.2byte	0x2b4
 2037 074d 01       		.byte	0x1
 2038 074e 00000000 		.4byte	.LFB21
 2039 0752 B0000000 		.4byte	.LFE21
 2040 0756 84000000 		.4byte	.LLST3
 2041 075a 01       		.byte	0x1
 2042 075b 04080000 		.4byte	0x804
 2043 075f 16       		.uleb128 0x16
 2044 0760 CB000000 		.4byte	.LASF122
 2045 0764 02       		.byte	0x2
 2046 0765 B402     		.2byte	0x2b4
 2047 0767 04080000 		.4byte	0x804
 2048 076b 03       		.byte	0x3
 2049 076c 91       		.byte	0x91
 2050 076d A47F     		.sleb128 -92
 2051 076f 1F       		.uleb128 0x1f
 2052 0770 643100   		.ascii	"d1\000"
 2053 0773 02       		.byte	0x2
 2054 0774 B602     		.2byte	0x2b6
 2055 0776 9A010000 		.4byte	0x19a
 2056 077a 02       		.byte	0x2
 2057 077b 91       		.byte	0x91
 2058 077c 74       		.sleb128 -12
 2059 077d 1F       		.uleb128 0x1f
 2060 077e 643200   		.ascii	"d2\000"
 2061 0781 02       		.byte	0x2
 2062 0782 B602     		.2byte	0x2b6
 2063 0784 9A010000 		.4byte	0x19a
ARM GAS  /tmp/ccJp2csF.s 			page 70


 2064 0788 02       		.byte	0x2
 2065 0789 91       		.byte	0x91
 2066 078a 70       		.sleb128 -16
 2067 078b 1F       		.uleb128 0x1f
 2068 078c 643300   		.ascii	"d3\000"
 2069 078f 02       		.byte	0x2
 2070 0790 B602     		.2byte	0x2b6
 2071 0792 9A010000 		.4byte	0x19a
 2072 0796 02       		.byte	0x2
 2073 0797 91       		.byte	0x91
 2074 0798 6C       		.sleb128 -20
 2075 0799 1F       		.uleb128 0x1f
 2076 079a 643400   		.ascii	"d4\000"
 2077 079d 02       		.byte	0x2
 2078 079e B602     		.2byte	0x2b6
 2079 07a0 9A010000 		.4byte	0x19a
 2080 07a4 02       		.byte	0x2
 2081 07a5 91       		.byte	0x91
 2082 07a6 68       		.sleb128 -24
 2083 07a7 1F       		.uleb128 0x1f
 2084 07a8 643500   		.ascii	"d5\000"
 2085 07ab 02       		.byte	0x2
 2086 07ac B602     		.2byte	0x2b6
 2087 07ae 9A010000 		.4byte	0x19a
 2088 07b2 02       		.byte	0x2
 2089 07b3 91       		.byte	0x91
 2090 07b4 64       		.sleb128 -28
 2091 07b5 1F       		.uleb128 0x1f
 2092 07b6 643600   		.ascii	"d6\000"
 2093 07b9 02       		.byte	0x2
 2094 07ba B602     		.2byte	0x2b6
 2095 07bc 9A010000 		.4byte	0x19a
 2096 07c0 02       		.byte	0x2
 2097 07c1 91       		.byte	0x91
 2098 07c2 60       		.sleb128 -32
 2099 07c3 20       		.uleb128 0x20
 2100 07c4 2B040000 		.4byte	.LASF123
 2101 07c8 02       		.byte	0x2
 2102 07c9 B702     		.2byte	0x2b7
 2103 07cb 0A080000 		.4byte	0x80a
 2104 07cf 03       		.byte	0x3
 2105 07d0 91       		.byte	0x91
 2106 07d1 B87F     		.sleb128 -72
 2107 07d3 20       		.uleb128 0x20
 2108 07d4 58060000 		.4byte	.LASF124
 2109 07d8 02       		.byte	0x2
 2110 07d9 B802     		.2byte	0x2b8
 2111 07db 21080000 		.4byte	0x821
 2112 07df 03       		.byte	0x3
 2113 07e0 91       		.byte	0x91
 2114 07e1 B47F     		.sleb128 -76
 2115 07e3 20       		.uleb128 0x20
 2116 07e4 F7020000 		.4byte	.LASF125
 2117 07e8 02       		.byte	0x2
 2118 07e9 B902     		.2byte	0x2b9
 2119 07eb 21080000 		.4byte	0x821
 2120 07ef 03       		.byte	0x3
ARM GAS  /tmp/ccJp2csF.s 			page 71


 2121 07f0 91       		.byte	0x91
 2122 07f1 B07F     		.sleb128 -80
 2123 07f3 20       		.uleb128 0x20
 2124 07f4 14060000 		.4byte	.LASF126
 2125 07f8 02       		.byte	0x2
 2126 07f9 BA02     		.2byte	0x2ba
 2127 07fb 21080000 		.4byte	0x821
 2128 07ff 03       		.byte	0x3
 2129 0800 91       		.byte	0x91
 2130 0801 AC7F     		.sleb128 -84
 2131 0803 00       		.byte	0
 2132 0804 1D       		.uleb128 0x1d
 2133 0805 04       		.byte	0x4
 2134 0806 84010000 		.4byte	0x184
 2135 080a 0C       		.uleb128 0xc
 2136 080b CD040000 		.4byte	0x4cd
 2137 080f 1A080000 		.4byte	0x81a
 2138 0813 0D       		.uleb128 0xd
 2139 0814 5D020000 		.4byte	0x25d
 2140 0818 27       		.byte	0x27
 2141 0819 00       		.byte	0
 2142 081a 05       		.uleb128 0x5
 2143 081b 04       		.byte	0x4
 2144 081c 04       		.byte	0x4
 2145 081d DF010000 		.4byte	.LASF127
 2146 0821 0E       		.uleb128 0xe
 2147 0822 1A080000 		.4byte	0x81a
 2148 0826 21       		.uleb128 0x21
 2149 0827 01       		.byte	0x1
 2150 0828 29070000 		.4byte	.LASF174
 2151 082c 02       		.byte	0x2
 2152 082d 2F03     		.2byte	0x32f
 2153 082f 01       		.byte	0x1
 2154 0830 00000000 		.4byte	.LFB22
 2155 0834 0C010000 		.4byte	.LFE22
 2156 0838 B1000000 		.4byte	.LLST4
 2157 083c 01       		.byte	0x1
 2158 083d 0C       		.uleb128 0xc
 2159 083e 24010000 		.4byte	0x124
 2160 0842 4D080000 		.4byte	0x84d
 2161 0846 0D       		.uleb128 0xd
 2162 0847 5D020000 		.4byte	0x25d
 2163 084b FF       		.byte	0xff
 2164 084c 00       		.byte	0
 2165 084d 22       		.uleb128 0x22
 2166 084e 5A010000 		.4byte	.LASF128
 2167 0852 02       		.byte	0x2
 2168 0853 3E       		.byte	0x3e
 2169 0854 5F080000 		.4byte	0x85f
 2170 0858 01       		.byte	0x1
 2171 0859 05       		.byte	0x5
 2172 085a 03       		.byte	0x3
 2173 085b 00000000 		.4byte	tx2buff
 2174 085f 0E       		.uleb128 0xe
 2175 0860 3D080000 		.4byte	0x83d
 2176 0864 22       		.uleb128 0x22
 2177 0865 21010000 		.4byte	.LASF129
ARM GAS  /tmp/ccJp2csF.s 			page 72


 2178 0869 02       		.byte	0x2
 2179 086a 3F       		.byte	0x3f
 2180 086b 76080000 		.4byte	0x876
 2181 086f 01       		.byte	0x1
 2182 0870 05       		.byte	0x5
 2183 0871 03       		.byte	0x3
 2184 0872 00000000 		.4byte	rx2buff
 2185 0876 0E       		.uleb128 0xe
 2186 0877 3D080000 		.4byte	0x83d
 2187 087b 22       		.uleb128 0x22
 2188 087c 6F030000 		.4byte	.LASF130
 2189 0880 02       		.byte	0x2
 2190 0881 41       		.byte	0x41
 2191 0882 8D080000 		.4byte	0x88d
 2192 0886 01       		.byte	0x1
 2193 0887 05       		.byte	0x5
 2194 0888 03       		.byte	0x3
 2195 0889 00000000 		.4byte	tx1buff
 2196 088d 0E       		.uleb128 0xe
 2197 088e 3D080000 		.4byte	0x83d
 2198 0892 22       		.uleb128 0x22
 2199 0893 34010000 		.4byte	.LASF131
 2200 0897 02       		.byte	0x2
 2201 0898 42       		.byte	0x42
 2202 0899 A4080000 		.4byte	0x8a4
 2203 089d 01       		.byte	0x1
 2204 089e 05       		.byte	0x5
 2205 089f 03       		.byte	0x3
 2206 08a0 00000000 		.4byte	rx1buff
 2207 08a4 0E       		.uleb128 0xe
 2208 08a5 3D080000 		.4byte	0x83d
 2209 08a9 22       		.uleb128 0x22
 2210 08aa C7020000 		.4byte	.LASF132
 2211 08ae 02       		.byte	0x2
 2212 08af 4C       		.byte	0x4c
 2213 08b0 BB080000 		.4byte	0x8bb
 2214 08b4 01       		.byte	0x1
 2215 08b5 05       		.byte	0x5
 2216 08b6 03       		.byte	0x3
 2217 08b7 00000000 		.4byte	show_select_timer
 2218 08bb 0E       		.uleb128 0xe
 2219 08bc 3D010000 		.4byte	0x13d
 2220 08c0 22       		.uleb128 0x22
 2221 08c1 5B040000 		.4byte	.LASF133
 2222 08c5 02       		.byte	0x2
 2223 08c6 4D       		.byte	0x4d
 2224 08c7 D2080000 		.4byte	0x8d2
 2225 08cb 01       		.byte	0x1
 2226 08cc 05       		.byte	0x5
 2227 08cd 03       		.byte	0x3
 2228 08ce 00000000 		.4byte	switches_timer
 2229 08d2 0E       		.uleb128 0xe
 2230 08d3 24010000 		.4byte	0x124
 2231 08d7 22       		.uleb128 0x22
 2232 08d8 3E000000 		.4byte	.LASF134
 2233 08dc 02       		.byte	0x2
 2234 08dd 4E       		.byte	0x4e
ARM GAS  /tmp/ccJp2csF.s 			page 73


 2235 08de D2080000 		.4byte	0x8d2
 2236 08e2 01       		.byte	0x1
 2237 08e3 05       		.byte	0x5
 2238 08e4 03       		.byte	0x3
 2239 08e5 00000000 		.4byte	acswitch_timer
 2240 08e9 22       		.uleb128 0x22
 2241 08ea C6040000 		.4byte	.LASF135
 2242 08ee 02       		.byte	0x2
 2243 08ef 50       		.byte	0x50
 2244 08f0 BB080000 		.4byte	0x8bb
 2245 08f4 01       		.byte	0x1
 2246 08f5 05       		.byte	0x5
 2247 08f6 03       		.byte	0x3
 2248 08f7 00000000 		.4byte	scroll1_timer
 2249 08fb 22       		.uleb128 0x22
 2250 08fc A4080000 		.4byte	.LASF136
 2251 0900 02       		.byte	0x2
 2252 0901 51       		.byte	0x51
 2253 0902 BB080000 		.4byte	0x8bb
 2254 0906 01       		.byte	0x1
 2255 0907 05       		.byte	0x5
 2256 0908 03       		.byte	0x3
 2257 0909 00000000 		.4byte	scroll2_timer
 2258 090d 22       		.uleb128 0x22
 2259 090e 6F080000 		.4byte	.LASF137
 2260 0912 02       		.byte	0x2
 2261 0913 53       		.byte	0x53
 2262 0914 BB080000 		.4byte	0x8bb
 2263 0918 01       		.byte	0x1
 2264 0919 05       		.byte	0x5
 2265 091a 03       		.byte	0x3
 2266 091b 00000000 		.4byte	standalone_timer
 2267 091f 22       		.uleb128 0x22
 2268 0920 6F060000 		.4byte	.LASF138
 2269 0924 02       		.byte	0x2
 2270 0925 54       		.byte	0x54
 2271 0926 BB080000 		.4byte	0x8bb
 2272 092a 01       		.byte	0x1
 2273 092b 05       		.byte	0x5
 2274 092c 03       		.byte	0x3
 2275 092d 00000000 		.4byte	standalone_enable_menu_timer
 2276 0931 22       		.uleb128 0x22
 2277 0932 6F010000 		.4byte	.LASF139
 2278 0936 02       		.byte	0x2
 2279 0937 56       		.byte	0x56
 2280 0938 D2080000 		.4byte	0x8d2
 2281 093c 01       		.byte	0x1
 2282 093d 05       		.byte	0x5
 2283 093e 03       		.byte	0x3
 2284 093f 00000000 		.4byte	grouped_master_timeout_timer
 2285 0943 22       		.uleb128 0x22
 2286 0944 0F030000 		.4byte	.LASF140
 2287 0948 02       		.byte	0x2
 2288 0949 57       		.byte	0x57
 2289 094a BB080000 		.4byte	0x8bb
 2290 094e 01       		.byte	0x1
 2291 094f 05       		.byte	0x5
ARM GAS  /tmp/ccJp2csF.s 			page 74


 2292 0950 03       		.byte	0x3
 2293 0951 00000000 		.4byte	take_temp_sample
 2294 0955 22       		.uleb128 0x22
 2295 0956 3E020000 		.4byte	.LASF141
 2296 095a 02       		.byte	0x2
 2297 095b 58       		.byte	0x58
 2298 095c BB080000 		.4byte	0x8bb
 2299 0960 01       		.byte	0x1
 2300 0961 05       		.byte	0x5
 2301 0962 03       		.byte	0x3
 2302 0963 00000000 		.4byte	minutes
 2303 0967 22       		.uleb128 0x22
 2304 0968 3F070000 		.4byte	.LASF142
 2305 096c 02       		.byte	0x2
 2306 096d 59       		.byte	0x59
 2307 096e D2080000 		.4byte	0x8d2
 2308 0972 01       		.byte	0x1
 2309 0973 05       		.byte	0x5
 2310 0974 03       		.byte	0x3
 2311 0975 00000000 		.4byte	timer_wifi_bright
 2312 0979 22       		.uleb128 0x22
 2313 097a D0030000 		.4byte	.LASF143
 2314 097e 02       		.byte	0x2
 2315 097f 5C       		.byte	0x5c
 2316 0980 24010000 		.4byte	0x124
 2317 0984 01       		.byte	0x1
 2318 0985 05       		.byte	0x5
 2319 0986 03       		.byte	0x3
 2320 0987 00000000 		.4byte	saved_mode
 2321 098b 22       		.uleb128 0x22
 2322 098c 86020000 		.4byte	.LASF144
 2323 0990 02       		.byte	0x2
 2324 0991 5F       		.byte	0x5f
 2325 0992 D2080000 		.4byte	0x8d2
 2326 0996 01       		.byte	0x1
 2327 0997 05       		.byte	0x5
 2328 0998 03       		.byte	0x3
 2329 0999 00000000 		.4byte	igrid_timer
 2330 099d 22       		.uleb128 0x22
 2331 099e 8C010000 		.4byte	.LASF145
 2332 09a2 02       		.byte	0x2
 2333 09a3 60       		.byte	0x60
 2334 09a4 D2080000 		.4byte	0x8d2
 2335 09a8 01       		.byte	0x1
 2336 09a9 05       		.byte	0x5
 2337 09aa 03       		.byte	0x3
 2338 09ab 00000000 		.4byte	vgrid_timer
 2339 09af 23       		.uleb128 0x23
 2340 09b0 733100   		.ascii	"s1\000"
 2341 09b3 02       		.byte	0x2
 2342 09b4 63       		.byte	0x63
 2343 09b5 3D010000 		.4byte	0x13d
 2344 09b9 01       		.byte	0x1
 2345 09ba 05       		.byte	0x5
 2346 09bb 03       		.byte	0x3
 2347 09bc 00000000 		.4byte	s1
 2348 09c0 23       		.uleb128 0x23
ARM GAS  /tmp/ccJp2csF.s 			page 75


 2349 09c1 733200   		.ascii	"s2\000"
 2350 09c4 02       		.byte	0x2
 2351 09c5 64       		.byte	0x64
 2352 09c6 3D010000 		.4byte	0x13d
 2353 09ca 01       		.byte	0x1
 2354 09cb 05       		.byte	0x5
 2355 09cc 03       		.byte	0x3
 2356 09cd 00000000 		.4byte	s2
 2357 09d1 23       		.uleb128 0x23
 2358 09d2 73616300 		.ascii	"sac\000"
 2359 09d6 02       		.byte	0x2
 2360 09d7 65       		.byte	0x65
 2361 09d8 3D010000 		.4byte	0x13d
 2362 09dc 01       		.byte	0x1
 2363 09dd 05       		.byte	0x5
 2364 09de 03       		.byte	0x3
 2365 09df 00000000 		.4byte	sac
 2366 09e3 22       		.uleb128 0x22
 2367 09e4 18070000 		.4byte	.LASF146
 2368 09e8 02       		.byte	0x2
 2369 09e9 66       		.byte	0x66
 2370 09ea 24010000 		.4byte	0x124
 2371 09ee 01       		.byte	0x1
 2372 09ef 05       		.byte	0x5
 2373 09f0 03       		.byte	0x3
 2374 09f1 00000000 		.4byte	sac_aux
 2375 09f5 22       		.uleb128 0x22
 2376 09f6 BC030000 		.4byte	.LASF147
 2377 09fa 02       		.byte	0x2
 2378 09fb 69       		.byte	0x69
 2379 09fc D2080000 		.4byte	0x8d2
 2380 0a00 01       		.byte	0x1
 2381 0a01 05       		.byte	0x5
 2382 0a02 03       		.byte	0x3
 2383 0a03 00000000 		.4byte	usart1_mini_timeout
 2384 0a07 22       		.uleb128 0x22
 2385 0a08 4C020000 		.4byte	.LASF148
 2386 0a0c 02       		.byte	0x2
 2387 0a0d 6A       		.byte	0x6a
 2388 0a0e D2080000 		.4byte	0x8d2
 2389 0a12 01       		.byte	0x1
 2390 0a13 05       		.byte	0x5
 2391 0a14 03       		.byte	0x3
 2392 0a15 00000000 		.4byte	usart1_pckt_ready
 2393 0a19 22       		.uleb128 0x22
 2394 0a1a AA020000 		.4byte	.LASF149
 2395 0a1e 02       		.byte	0x2
 2396 0a1f 6B       		.byte	0x6b
 2397 0a20 D2080000 		.4byte	0x8d2
 2398 0a24 01       		.byte	0x1
 2399 0a25 05       		.byte	0x5
 2400 0a26 03       		.byte	0x3
 2401 0a27 00000000 		.4byte	usart1_have_data
 2402 0a2b 22       		.uleb128 0x22
 2403 0a2c 14020000 		.4byte	.LASF150
 2404 0a30 02       		.byte	0x2
 2405 0a31 6C       		.byte	0x6c
ARM GAS  /tmp/ccJp2csF.s 			page 76


 2406 0a32 24010000 		.4byte	0x124
 2407 0a36 01       		.byte	0x1
 2408 0a37 05       		.byte	0x5
 2409 0a38 03       		.byte	0x3
 2410 0a39 00000000 		.4byte	usart1_pckt_bytes
 2411 0a3d 22       		.uleb128 0x22
 2412 0a3e 5B030000 		.4byte	.LASF151
 2413 0a42 02       		.byte	0x2
 2414 0a43 83       		.byte	0x83
 2415 0a44 D2080000 		.4byte	0x8d2
 2416 0a48 01       		.byte	0x1
 2417 0a49 05       		.byte	0x5
 2418 0a4a 03       		.byte	0x3
 2419 0a4b 00000000 		.4byte	usart2_mini_timeout
 2420 0a4f 22       		.uleb128 0x22
 2421 0a50 48010000 		.4byte	.LASF152
 2422 0a54 02       		.byte	0x2
 2423 0a55 84       		.byte	0x84
 2424 0a56 D2080000 		.4byte	0x8d2
 2425 0a5a 01       		.byte	0x1
 2426 0a5b 05       		.byte	0x5
 2427 0a5c 03       		.byte	0x3
 2428 0a5d 00000000 		.4byte	usart2_pckt_ready
 2429 0a61 22       		.uleb128 0x22
 2430 0a62 AE010000 		.4byte	.LASF153
 2431 0a66 02       		.byte	0x2
 2432 0a67 85       		.byte	0x85
 2433 0a68 D2080000 		.4byte	0x8d2
 2434 0a6c 01       		.byte	0x1
 2435 0a6d 05       		.byte	0x5
 2436 0a6e 03       		.byte	0x3
 2437 0a6f 00000000 		.4byte	usart2_have_data
 2438 0a73 22       		.uleb128 0x22
 2439 0a74 77030000 		.4byte	.LASF154
 2440 0a78 02       		.byte	0x2
 2441 0a79 86       		.byte	0x86
 2442 0a7a 24010000 		.4byte	0x124
 2443 0a7e 01       		.byte	0x1
 2444 0a7f 05       		.byte	0x5
 2445 0a80 03       		.byte	0x3
 2446 0a81 00000000 		.4byte	usart2_pckt_bytes
 2447 0a85 0C       		.uleb128 0xc
 2448 0a86 CD040000 		.4byte	0x4cd
 2449 0a8a 900A0000 		.4byte	0xa90
 2450 0a8e 24       		.uleb128 0x24
 2451 0a8f 00       		.byte	0
 2452 0a90 25       		.uleb128 0x25
 2453 0a91 9C040000 		.4byte	.LASF155
 2454 0a95 02       		.byte	0x2
 2455 0a96 8C       		.byte	0x8c
 2456 0a97 9D0A0000 		.4byte	0xa9d
 2457 0a9b 01       		.byte	0x1
 2458 0a9c 01       		.byte	0x1
 2459 0a9d 0E       		.uleb128 0xe
 2460 0a9e 850A0000 		.4byte	0xa85
 2461 0aa2 22       		.uleb128 0x22
 2462 0aa3 4D000000 		.4byte	.LASF156
ARM GAS  /tmp/ccJp2csF.s 			page 77


 2463 0aa7 02       		.byte	0x2
 2464 0aa8 90       		.byte	0x90
 2465 0aa9 7B050000 		.4byte	0x57b
 2466 0aad 01       		.byte	0x1
 2467 0aae 05       		.byte	0x5
 2468 0aaf 03       		.byte	0x3
 2469 0ab0 00000000 		.4byte	param_struct
 2470 0ab4 22       		.uleb128 0x22
 2471 0ab5 68050000 		.4byte	.LASF157
 2472 0ab9 02       		.byte	0x2
 2473 0aba 93       		.byte	0x93
 2474 0abb BB080000 		.4byte	0x8bb
 2475 0abf 01       		.byte	0x1
 2476 0ac0 05       		.byte	0x5
 2477 0ac1 03       		.byte	0x3
 2478 0ac2 00000000 		.4byte	wait_ms_var
 2479 0ac6 22       		.uleb128 0x22
 2480 0ac7 B2080000 		.4byte	.LASF158
 2481 0acb 02       		.byte	0x2
 2482 0acc 94       		.byte	0x94
 2483 0acd BB080000 		.4byte	0x8bb
 2484 0ad1 01       		.byte	0x1
 2485 0ad2 05       		.byte	0x5
 2486 0ad3 03       		.byte	0x3
 2487 0ad4 00000000 		.4byte	timer_standby
 2488 0ad8 22       		.uleb128 0x22
 2489 0ad9 06010000 		.4byte	.LASF159
 2490 0add 02       		.byte	0x2
 2491 0ade 95       		.byte	0x95
 2492 0adf BB080000 		.4byte	0x8bb
 2493 0ae3 01       		.byte	0x1
 2494 0ae4 05       		.byte	0x5
 2495 0ae5 03       		.byte	0x3
 2496 0ae6 00000000 		.4byte	tcp_kalive_timer
 2497 0aea 22       		.uleb128 0x22
 2498 0aeb DB030000 		.4byte	.LASF160
 2499 0aef 02       		.byte	0x2
 2500 0af0 97       		.byte	0x97
 2501 0af1 D2080000 		.4byte	0x8d2
 2502 0af5 01       		.byte	0x1
 2503 0af6 05       		.byte	0x5
 2504 0af7 03       		.byte	0x3
 2505 0af8 00000000 		.4byte	filter_timer
 2506 0afc 22       		.uleb128 0x22
 2507 0afd 89030000 		.4byte	.LASF161
 2508 0b01 02       		.byte	0x2
 2509 0b02 9C       		.byte	0x9c
 2510 0b03 BB080000 		.4byte	0x8bb
 2511 0b07 01       		.byte	0x1
 2512 0b08 05       		.byte	0x5
 2513 0b09 03       		.byte	0x3
 2514 0b0a 00000000 		.4byte	secs
 2515 0b0e 22       		.uleb128 0x22
 2516 0b0f 26020000 		.4byte	.LASF162
 2517 0b13 02       		.byte	0x2
 2518 0b14 A0       		.byte	0xa0
 2519 0b15 D2080000 		.4byte	0x8d2
ARM GAS  /tmp/ccJp2csF.s 			page 78


 2520 0b19 01       		.byte	0x1
 2521 0b1a 05       		.byte	0x5
 2522 0b1b 03       		.byte	0x3
 2523 0b1c 00000000 		.4byte	signal_state
 2524 0b20 22       		.uleb128 0x22
 2525 0b21 B4060000 		.4byte	.LASF163
 2526 0b25 02       		.byte	0x2
 2527 0b26 A1       		.byte	0xa1
 2528 0b27 D2080000 		.4byte	0x8d2
 2529 0b2b 01       		.byte	0x1
 2530 0b2c 05       		.byte	0x5
 2531 0b2d 03       		.byte	0x3
 2532 0b2e 00000000 		.4byte	dmx_timeout_timer
 2533 0b32 0C       		.uleb128 0xc
 2534 0b33 24010000 		.4byte	0x124
 2535 0b37 420B0000 		.4byte	0xb42
 2536 0b3b 0D       		.uleb128 0xd
 2537 0b3c 5D020000 		.4byte	0x25d
 2538 0b40 20       		.byte	0x20
 2539 0b41 00       		.byte	0
 2540 0b42 23       		.uleb128 0x23
 2541 0b43 76643000 		.ascii	"vd0\000"
 2542 0b47 02       		.byte	0x2
 2543 0b48 A7       		.byte	0xa7
 2544 0b49 320B0000 		.4byte	0xb32
 2545 0b4d 01       		.byte	0x1
 2546 0b4e 05       		.byte	0x5
 2547 0b4f 03       		.byte	0x3
 2548 0b50 00000000 		.4byte	vd0
 2549 0b54 23       		.uleb128 0x23
 2550 0b55 76643100 		.ascii	"vd1\000"
 2551 0b59 02       		.byte	0x2
 2552 0b5a A8       		.byte	0xa8
 2553 0b5b 320B0000 		.4byte	0xb32
 2554 0b5f 01       		.byte	0x1
 2555 0b60 05       		.byte	0x5
 2556 0b61 03       		.byte	0x3
 2557 0b62 00000000 		.4byte	vd1
 2558 0b66 23       		.uleb128 0x23
 2559 0b67 76643200 		.ascii	"vd2\000"
 2560 0b6b 02       		.byte	0x2
 2561 0b6c A9       		.byte	0xa9
 2562 0b6d 320B0000 		.4byte	0xb32
 2563 0b71 01       		.byte	0x1
 2564 0b72 05       		.byte	0x5
 2565 0b73 03       		.byte	0x3
 2566 0b74 00000000 		.4byte	vd2
 2567 0b78 23       		.uleb128 0x23
 2568 0b79 76643300 		.ascii	"vd3\000"
 2569 0b7d 02       		.byte	0x2
 2570 0b7e AA       		.byte	0xaa
 2571 0b7f 320B0000 		.4byte	0xb32
 2572 0b83 01       		.byte	0x1
 2573 0b84 05       		.byte	0x5
 2574 0b85 03       		.byte	0x3
 2575 0b86 00000000 		.4byte	vd3
 2576 0b8a 23       		.uleb128 0x23
ARM GAS  /tmp/ccJp2csF.s 			page 79


 2577 0b8b 76643400 		.ascii	"vd4\000"
 2578 0b8f 02       		.byte	0x2
 2579 0b90 AB       		.byte	0xab
 2580 0b91 320B0000 		.4byte	0xb32
 2581 0b95 01       		.byte	0x1
 2582 0b96 05       		.byte	0x5
 2583 0b97 03       		.byte	0x3
 2584 0b98 00000000 		.4byte	vd4
 2585 0b9c 0C       		.uleb128 0xc
 2586 0b9d 3D010000 		.4byte	0x13d
 2587 0ba1 AC0B0000 		.4byte	0xbac
 2588 0ba5 0D       		.uleb128 0xd
 2589 0ba6 5D020000 		.4byte	0x25d
 2590 0baa 10       		.byte	0x10
 2591 0bab 00       		.byte	0
 2592 0bac 22       		.uleb128 0x22
 2593 0bad 9E080000 		.4byte	.LASF164
 2594 0bb1 02       		.byte	0x2
 2595 0bb2 C6       		.byte	0xc6
 2596 0bb3 9C0B0000 		.4byte	0xb9c
 2597 0bb7 01       		.byte	0x1
 2598 0bb8 05       		.byte	0x5
 2599 0bb9 03       		.byte	0x3
 2600 0bba 00000000 		.4byte	vtemp
 2601 0bbe 22       		.uleb128 0x22
 2602 0bbf D2000000 		.4byte	.LASF165
 2603 0bc3 02       		.byte	0x2
 2604 0bc4 C7       		.byte	0xc7
 2605 0bc5 9C0B0000 		.4byte	0xb9c
 2606 0bc9 01       		.byte	0x1
 2607 0bca 05       		.byte	0x5
 2608 0bcb 03       		.byte	0x3
 2609 0bcc 00000000 		.4byte	vpote
 2610 0bd0 00       		.byte	0
 2611              		.section	.debug_abbrev,"",%progbits
 2612              	.Ldebug_abbrev0:
 2613 0000 01       		.uleb128 0x1
 2614 0001 11       		.uleb128 0x11
 2615 0002 01       		.byte	0x1
 2616 0003 25       		.uleb128 0x25
 2617 0004 0E       		.uleb128 0xe
 2618 0005 13       		.uleb128 0x13
 2619 0006 0B       		.uleb128 0xb
 2620 0007 03       		.uleb128 0x3
 2621 0008 0E       		.uleb128 0xe
 2622 0009 1B       		.uleb128 0x1b
 2623 000a 0E       		.uleb128 0xe
 2624 000b 55       		.uleb128 0x55
 2625 000c 06       		.uleb128 0x6
 2626 000d 11       		.uleb128 0x11
 2627 000e 01       		.uleb128 0x1
 2628 000f 52       		.uleb128 0x52
 2629 0010 01       		.uleb128 0x1
 2630 0011 10       		.uleb128 0x10
 2631 0012 06       		.uleb128 0x6
 2632 0013 00       		.byte	0
 2633 0014 00       		.byte	0
ARM GAS  /tmp/ccJp2csF.s 			page 80


 2634 0015 02       		.uleb128 0x2
 2635 0016 04       		.uleb128 0x4
 2636 0017 01       		.byte	0x1
 2637 0018 03       		.uleb128 0x3
 2638 0019 0E       		.uleb128 0xe
 2639 001a 0B       		.uleb128 0xb
 2640 001b 0B       		.uleb128 0xb
 2641 001c 49       		.uleb128 0x49
 2642 001d 13       		.uleb128 0x13
 2643 001e 3A       		.uleb128 0x3a
 2644 001f 0B       		.uleb128 0xb
 2645 0020 3B       		.uleb128 0x3b
 2646 0021 0B       		.uleb128 0xb
 2647 0022 01       		.uleb128 0x1
 2648 0023 13       		.uleb128 0x13
 2649 0024 00       		.byte	0
 2650 0025 00       		.byte	0
 2651 0026 03       		.uleb128 0x3
 2652 0027 28       		.uleb128 0x28
 2653 0028 00       		.byte	0
 2654 0029 03       		.uleb128 0x3
 2655 002a 0E       		.uleb128 0xe
 2656 002b 1C       		.uleb128 0x1c
 2657 002c 0D       		.uleb128 0xd
 2658 002d 00       		.byte	0
 2659 002e 00       		.byte	0
 2660 002f 04       		.uleb128 0x4
 2661 0030 28       		.uleb128 0x28
 2662 0031 00       		.byte	0
 2663 0032 03       		.uleb128 0x3
 2664 0033 0E       		.uleb128 0xe
 2665 0034 1C       		.uleb128 0x1c
 2666 0035 0B       		.uleb128 0xb
 2667 0036 00       		.byte	0
 2668 0037 00       		.byte	0
 2669 0038 05       		.uleb128 0x5
 2670 0039 24       		.uleb128 0x24
 2671 003a 00       		.byte	0
 2672 003b 0B       		.uleb128 0xb
 2673 003c 0B       		.uleb128 0xb
 2674 003d 3E       		.uleb128 0x3e
 2675 003e 0B       		.uleb128 0xb
 2676 003f 03       		.uleb128 0x3
 2677 0040 0E       		.uleb128 0xe
 2678 0041 00       		.byte	0
 2679 0042 00       		.byte	0
 2680 0043 06       		.uleb128 0x6
 2681 0044 16       		.uleb128 0x16
 2682 0045 00       		.byte	0
 2683 0046 03       		.uleb128 0x3
 2684 0047 0E       		.uleb128 0xe
 2685 0048 3A       		.uleb128 0x3a
 2686 0049 0B       		.uleb128 0xb
 2687 004a 3B       		.uleb128 0x3b
 2688 004b 05       		.uleb128 0x5
 2689 004c 49       		.uleb128 0x49
 2690 004d 13       		.uleb128 0x13
ARM GAS  /tmp/ccJp2csF.s 			page 81


 2691 004e 00       		.byte	0
 2692 004f 00       		.byte	0
 2693 0050 07       		.uleb128 0x7
 2694 0051 16       		.uleb128 0x16
 2695 0052 00       		.byte	0
 2696 0053 03       		.uleb128 0x3
 2697 0054 0E       		.uleb128 0xe
 2698 0055 3A       		.uleb128 0x3a
 2699 0056 0B       		.uleb128 0xb
 2700 0057 3B       		.uleb128 0x3b
 2701 0058 0B       		.uleb128 0xb
 2702 0059 49       		.uleb128 0x49
 2703 005a 13       		.uleb128 0x13
 2704 005b 00       		.byte	0
 2705 005c 00       		.byte	0
 2706 005d 08       		.uleb128 0x8
 2707 005e 24       		.uleb128 0x24
 2708 005f 00       		.byte	0
 2709 0060 0B       		.uleb128 0xb
 2710 0061 0B       		.uleb128 0xb
 2711 0062 3E       		.uleb128 0x3e
 2712 0063 0B       		.uleb128 0xb
 2713 0064 03       		.uleb128 0x3
 2714 0065 08       		.uleb128 0x8
 2715 0066 00       		.byte	0
 2716 0067 00       		.byte	0
 2717 0068 09       		.uleb128 0x9
 2718 0069 13       		.uleb128 0x13
 2719 006a 01       		.byte	0x1
 2720 006b 0B       		.uleb128 0xb
 2721 006c 05       		.uleb128 0x5
 2722 006d 3A       		.uleb128 0x3a
 2723 006e 0B       		.uleb128 0xb
 2724 006f 3B       		.uleb128 0x3b
 2725 0070 0B       		.uleb128 0xb
 2726 0071 01       		.uleb128 0x1
 2727 0072 13       		.uleb128 0x13
 2728 0073 00       		.byte	0
 2729 0074 00       		.byte	0
 2730 0075 0A       		.uleb128 0xa
 2731 0076 0D       		.uleb128 0xd
 2732 0077 00       		.byte	0
 2733 0078 03       		.uleb128 0x3
 2734 0079 0E       		.uleb128 0xe
 2735 007a 3A       		.uleb128 0x3a
 2736 007b 0B       		.uleb128 0xb
 2737 007c 3B       		.uleb128 0x3b
 2738 007d 0B       		.uleb128 0xb
 2739 007e 49       		.uleb128 0x49
 2740 007f 13       		.uleb128 0x13
 2741 0080 38       		.uleb128 0x38
 2742 0081 0A       		.uleb128 0xa
 2743 0082 00       		.byte	0
 2744 0083 00       		.byte	0
 2745 0084 0B       		.uleb128 0xb
 2746 0085 0D       		.uleb128 0xd
 2747 0086 00       		.byte	0
ARM GAS  /tmp/ccJp2csF.s 			page 82


 2748 0087 03       		.uleb128 0x3
 2749 0088 08       		.uleb128 0x8
 2750 0089 3A       		.uleb128 0x3a
 2751 008a 0B       		.uleb128 0xb
 2752 008b 3B       		.uleb128 0x3b
 2753 008c 0B       		.uleb128 0xb
 2754 008d 49       		.uleb128 0x49
 2755 008e 13       		.uleb128 0x13
 2756 008f 38       		.uleb128 0x38
 2757 0090 0A       		.uleb128 0xa
 2758 0091 00       		.byte	0
 2759 0092 00       		.byte	0
 2760 0093 0C       		.uleb128 0xc
 2761 0094 01       		.uleb128 0x1
 2762 0095 01       		.byte	0x1
 2763 0096 49       		.uleb128 0x49
 2764 0097 13       		.uleb128 0x13
 2765 0098 01       		.uleb128 0x1
 2766 0099 13       		.uleb128 0x13
 2767 009a 00       		.byte	0
 2768 009b 00       		.byte	0
 2769 009c 0D       		.uleb128 0xd
 2770 009d 21       		.uleb128 0x21
 2771 009e 00       		.byte	0
 2772 009f 49       		.uleb128 0x49
 2773 00a0 13       		.uleb128 0x13
 2774 00a1 2F       		.uleb128 0x2f
 2775 00a2 0B       		.uleb128 0xb
 2776 00a3 00       		.byte	0
 2777 00a4 00       		.byte	0
 2778 00a5 0E       		.uleb128 0xe
 2779 00a6 35       		.uleb128 0x35
 2780 00a7 00       		.byte	0
 2781 00a8 49       		.uleb128 0x49
 2782 00a9 13       		.uleb128 0x13
 2783 00aa 00       		.byte	0
 2784 00ab 00       		.byte	0
 2785 00ac 0F       		.uleb128 0xf
 2786 00ad 13       		.uleb128 0x13
 2787 00ae 01       		.byte	0x1
 2788 00af 0B       		.uleb128 0xb
 2789 00b0 0B       		.uleb128 0xb
 2790 00b1 3A       		.uleb128 0x3a
 2791 00b2 0B       		.uleb128 0xb
 2792 00b3 3B       		.uleb128 0x3b
 2793 00b4 0B       		.uleb128 0xb
 2794 00b5 01       		.uleb128 0x1
 2795 00b6 13       		.uleb128 0x13
 2796 00b7 00       		.byte	0
 2797 00b8 00       		.byte	0
 2798 00b9 10       		.uleb128 0x10
 2799 00ba 26       		.uleb128 0x26
 2800 00bb 00       		.byte	0
 2801 00bc 49       		.uleb128 0x49
 2802 00bd 13       		.uleb128 0x13
 2803 00be 00       		.byte	0
 2804 00bf 00       		.byte	0
ARM GAS  /tmp/ccJp2csF.s 			page 83


 2805 00c0 11       		.uleb128 0x11
 2806 00c1 0D       		.uleb128 0xd
 2807 00c2 00       		.byte	0
 2808 00c3 03       		.uleb128 0x3
 2809 00c4 08       		.uleb128 0x8
 2810 00c5 3A       		.uleb128 0x3a
 2811 00c6 0B       		.uleb128 0xb
 2812 00c7 3B       		.uleb128 0x3b
 2813 00c8 05       		.uleb128 0x5
 2814 00c9 49       		.uleb128 0x49
 2815 00ca 13       		.uleb128 0x13
 2816 00cb 38       		.uleb128 0x38
 2817 00cc 0A       		.uleb128 0xa
 2818 00cd 00       		.byte	0
 2819 00ce 00       		.byte	0
 2820 00cf 12       		.uleb128 0x12
 2821 00d0 0D       		.uleb128 0xd
 2822 00d1 00       		.byte	0
 2823 00d2 03       		.uleb128 0x3
 2824 00d3 0E       		.uleb128 0xe
 2825 00d4 3A       		.uleb128 0x3a
 2826 00d5 0B       		.uleb128 0xb
 2827 00d6 3B       		.uleb128 0x3b
 2828 00d7 05       		.uleb128 0x5
 2829 00d8 49       		.uleb128 0x49
 2830 00d9 13       		.uleb128 0x13
 2831 00da 38       		.uleb128 0x38
 2832 00db 0A       		.uleb128 0xa
 2833 00dc 00       		.byte	0
 2834 00dd 00       		.byte	0
 2835 00de 13       		.uleb128 0x13
 2836 00df 13       		.uleb128 0x13
 2837 00e0 01       		.byte	0x1
 2838 00e1 0B       		.uleb128 0xb
 2839 00e2 0B       		.uleb128 0xb
 2840 00e3 3A       		.uleb128 0x3a
 2841 00e4 0B       		.uleb128 0xb
 2842 00e5 3B       		.uleb128 0x3b
 2843 00e6 05       		.uleb128 0x5
 2844 00e7 01       		.uleb128 0x1
 2845 00e8 13       		.uleb128 0x13
 2846 00e9 00       		.byte	0
 2847 00ea 00       		.byte	0
 2848 00eb 14       		.uleb128 0x14
 2849 00ec 13       		.uleb128 0x13
 2850 00ed 01       		.byte	0x1
 2851 00ee 03       		.uleb128 0x3
 2852 00ef 0E       		.uleb128 0xe
 2853 00f0 0B       		.uleb128 0xb
 2854 00f1 0B       		.uleb128 0xb
 2855 00f2 3A       		.uleb128 0x3a
 2856 00f3 0B       		.uleb128 0xb
 2857 00f4 3B       		.uleb128 0x3b
 2858 00f5 0B       		.uleb128 0xb
 2859 00f6 01       		.uleb128 0x1
 2860 00f7 13       		.uleb128 0x13
 2861 00f8 00       		.byte	0
ARM GAS  /tmp/ccJp2csF.s 			page 84


 2862 00f9 00       		.byte	0
 2863 00fa 15       		.uleb128 0x15
 2864 00fb 2E       		.uleb128 0x2e
 2865 00fc 01       		.byte	0x1
 2866 00fd 03       		.uleb128 0x3
 2867 00fe 0E       		.uleb128 0xe
 2868 00ff 3A       		.uleb128 0x3a
 2869 0100 0B       		.uleb128 0xb
 2870 0101 3B       		.uleb128 0x3b
 2871 0102 05       		.uleb128 0x5
 2872 0103 27       		.uleb128 0x27
 2873 0104 0C       		.uleb128 0xc
 2874 0105 11       		.uleb128 0x11
 2875 0106 01       		.uleb128 0x1
 2876 0107 12       		.uleb128 0x12
 2877 0108 01       		.uleb128 0x1
 2878 0109 40       		.uleb128 0x40
 2879 010a 06       		.uleb128 0x6
 2880 010b 9742     		.uleb128 0x2117
 2881 010d 0C       		.uleb128 0xc
 2882 010e 01       		.uleb128 0x1
 2883 010f 13       		.uleb128 0x13
 2884 0110 00       		.byte	0
 2885 0111 00       		.byte	0
 2886 0112 16       		.uleb128 0x16
 2887 0113 05       		.uleb128 0x5
 2888 0114 00       		.byte	0
 2889 0115 03       		.uleb128 0x3
 2890 0116 0E       		.uleb128 0xe
 2891 0117 3A       		.uleb128 0x3a
 2892 0118 0B       		.uleb128 0xb
 2893 0119 3B       		.uleb128 0x3b
 2894 011a 05       		.uleb128 0x5
 2895 011b 49       		.uleb128 0x49
 2896 011c 13       		.uleb128 0x13
 2897 011d 02       		.uleb128 0x2
 2898 011e 0A       		.uleb128 0xa
 2899 011f 00       		.byte	0
 2900 0120 00       		.byte	0
 2901 0121 17       		.uleb128 0x17
 2902 0122 2E       		.uleb128 0x2e
 2903 0123 01       		.byte	0x1
 2904 0124 03       		.uleb128 0x3
 2905 0125 0E       		.uleb128 0xe
 2906 0126 3A       		.uleb128 0x3a
 2907 0127 0B       		.uleb128 0xb
 2908 0128 3B       		.uleb128 0x3b
 2909 0129 05       		.uleb128 0x5
 2910 012a 27       		.uleb128 0x27
 2911 012b 0C       		.uleb128 0xc
 2912 012c 49       		.uleb128 0x49
 2913 012d 13       		.uleb128 0x13
 2914 012e 11       		.uleb128 0x11
 2915 012f 01       		.uleb128 0x1
 2916 0130 12       		.uleb128 0x12
 2917 0131 01       		.uleb128 0x1
 2918 0132 40       		.uleb128 0x40
ARM GAS  /tmp/ccJp2csF.s 			page 85


 2919 0133 06       		.uleb128 0x6
 2920 0134 9642     		.uleb128 0x2116
 2921 0136 0C       		.uleb128 0xc
 2922 0137 01       		.uleb128 0x1
 2923 0138 13       		.uleb128 0x13
 2924 0139 00       		.byte	0
 2925 013a 00       		.byte	0
 2926 013b 18       		.uleb128 0x18
 2927 013c 2E       		.uleb128 0x2e
 2928 013d 01       		.byte	0x1
 2929 013e 3F       		.uleb128 0x3f
 2930 013f 0C       		.uleb128 0xc
 2931 0140 03       		.uleb128 0x3
 2932 0141 0E       		.uleb128 0xe
 2933 0142 3A       		.uleb128 0x3a
 2934 0143 0B       		.uleb128 0xb
 2935 0144 3B       		.uleb128 0x3b
 2936 0145 0B       		.uleb128 0xb
 2937 0146 27       		.uleb128 0x27
 2938 0147 0C       		.uleb128 0xc
 2939 0148 49       		.uleb128 0x49
 2940 0149 13       		.uleb128 0x13
 2941 014a 11       		.uleb128 0x11
 2942 014b 01       		.uleb128 0x1
 2943 014c 12       		.uleb128 0x12
 2944 014d 01       		.uleb128 0x1
 2945 014e 40       		.uleb128 0x40
 2946 014f 06       		.uleb128 0x6
 2947 0150 9642     		.uleb128 0x2116
 2948 0152 0C       		.uleb128 0xc
 2949 0153 01       		.uleb128 0x1
 2950 0154 13       		.uleb128 0x13
 2951 0155 00       		.byte	0
 2952 0156 00       		.byte	0
 2953 0157 19       		.uleb128 0x19
 2954 0158 34       		.uleb128 0x34
 2955 0159 00       		.byte	0
 2956 015a 03       		.uleb128 0x3
 2957 015b 08       		.uleb128 0x8
 2958 015c 3A       		.uleb128 0x3a
 2959 015d 0B       		.uleb128 0xb
 2960 015e 3B       		.uleb128 0x3b
 2961 015f 0B       		.uleb128 0xb
 2962 0160 49       		.uleb128 0x49
 2963 0161 13       		.uleb128 0x13
 2964 0162 02       		.uleb128 0x2
 2965 0163 0A       		.uleb128 0xa
 2966 0164 00       		.byte	0
 2967 0165 00       		.byte	0
 2968 0166 1A       		.uleb128 0x1a
 2969 0167 34       		.uleb128 0x34
 2970 0168 00       		.byte	0
 2971 0169 03       		.uleb128 0x3
 2972 016a 08       		.uleb128 0x8
 2973 016b 3A       		.uleb128 0x3a
 2974 016c 0B       		.uleb128 0xb
 2975 016d 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccJp2csF.s 			page 86


 2976 016e 0B       		.uleb128 0xb
 2977 016f 49       		.uleb128 0x49
 2978 0170 13       		.uleb128 0x13
 2979 0171 00       		.byte	0
 2980 0172 00       		.byte	0
 2981 0173 1B       		.uleb128 0x1b
 2982 0174 34       		.uleb128 0x34
 2983 0175 00       		.byte	0
 2984 0176 03       		.uleb128 0x3
 2985 0177 0E       		.uleb128 0xe
 2986 0178 3A       		.uleb128 0x3a
 2987 0179 0B       		.uleb128 0xb
 2988 017a 3B       		.uleb128 0x3b
 2989 017b 0B       		.uleb128 0xb
 2990 017c 49       		.uleb128 0x49
 2991 017d 13       		.uleb128 0x13
 2992 017e 00       		.byte	0
 2993 017f 00       		.byte	0
 2994 0180 1C       		.uleb128 0x1c
 2995 0181 34       		.uleb128 0x34
 2996 0182 00       		.byte	0
 2997 0183 03       		.uleb128 0x3
 2998 0184 0E       		.uleb128 0xe
 2999 0185 3A       		.uleb128 0x3a
 3000 0186 0B       		.uleb128 0xb
 3001 0187 3B       		.uleb128 0x3b
 3002 0188 0B       		.uleb128 0xb
 3003 0189 49       		.uleb128 0x49
 3004 018a 13       		.uleb128 0x13
 3005 018b 02       		.uleb128 0x2
 3006 018c 0A       		.uleb128 0xa
 3007 018d 00       		.byte	0
 3008 018e 00       		.byte	0
 3009 018f 1D       		.uleb128 0x1d
 3010 0190 0F       		.uleb128 0xf
 3011 0191 00       		.byte	0
 3012 0192 0B       		.uleb128 0xb
 3013 0193 0B       		.uleb128 0xb
 3014 0194 49       		.uleb128 0x49
 3015 0195 13       		.uleb128 0x13
 3016 0196 00       		.byte	0
 3017 0197 00       		.byte	0
 3018 0198 1E       		.uleb128 0x1e
 3019 0199 2E       		.uleb128 0x2e
 3020 019a 01       		.byte	0x1
 3021 019b 3F       		.uleb128 0x3f
 3022 019c 0C       		.uleb128 0xc
 3023 019d 03       		.uleb128 0x3
 3024 019e 0E       		.uleb128 0xe
 3025 019f 3A       		.uleb128 0x3a
 3026 01a0 0B       		.uleb128 0xb
 3027 01a1 3B       		.uleb128 0x3b
 3028 01a2 05       		.uleb128 0x5
 3029 01a3 27       		.uleb128 0x27
 3030 01a4 0C       		.uleb128 0xc
 3031 01a5 11       		.uleb128 0x11
 3032 01a6 01       		.uleb128 0x1
ARM GAS  /tmp/ccJp2csF.s 			page 87


 3033 01a7 12       		.uleb128 0x12
 3034 01a8 01       		.uleb128 0x1
 3035 01a9 40       		.uleb128 0x40
 3036 01aa 06       		.uleb128 0x6
 3037 01ab 9642     		.uleb128 0x2116
 3038 01ad 0C       		.uleb128 0xc
 3039 01ae 01       		.uleb128 0x1
 3040 01af 13       		.uleb128 0x13
 3041 01b0 00       		.byte	0
 3042 01b1 00       		.byte	0
 3043 01b2 1F       		.uleb128 0x1f
 3044 01b3 34       		.uleb128 0x34
 3045 01b4 00       		.byte	0
 3046 01b5 03       		.uleb128 0x3
 3047 01b6 08       		.uleb128 0x8
 3048 01b7 3A       		.uleb128 0x3a
 3049 01b8 0B       		.uleb128 0xb
 3050 01b9 3B       		.uleb128 0x3b
 3051 01ba 05       		.uleb128 0x5
 3052 01bb 49       		.uleb128 0x49
 3053 01bc 13       		.uleb128 0x13
 3054 01bd 02       		.uleb128 0x2
 3055 01be 0A       		.uleb128 0xa
 3056 01bf 00       		.byte	0
 3057 01c0 00       		.byte	0
 3058 01c1 20       		.uleb128 0x20
 3059 01c2 34       		.uleb128 0x34
 3060 01c3 00       		.byte	0
 3061 01c4 03       		.uleb128 0x3
 3062 01c5 0E       		.uleb128 0xe
 3063 01c6 3A       		.uleb128 0x3a
 3064 01c7 0B       		.uleb128 0xb
 3065 01c8 3B       		.uleb128 0x3b
 3066 01c9 05       		.uleb128 0x5
 3067 01ca 49       		.uleb128 0x49
 3068 01cb 13       		.uleb128 0x13
 3069 01cc 02       		.uleb128 0x2
 3070 01cd 0A       		.uleb128 0xa
 3071 01ce 00       		.byte	0
 3072 01cf 00       		.byte	0
 3073 01d0 21       		.uleb128 0x21
 3074 01d1 2E       		.uleb128 0x2e
 3075 01d2 00       		.byte	0
 3076 01d3 3F       		.uleb128 0x3f
 3077 01d4 0C       		.uleb128 0xc
 3078 01d5 03       		.uleb128 0x3
 3079 01d6 0E       		.uleb128 0xe
 3080 01d7 3A       		.uleb128 0x3a
 3081 01d8 0B       		.uleb128 0xb
 3082 01d9 3B       		.uleb128 0x3b
 3083 01da 05       		.uleb128 0x5
 3084 01db 27       		.uleb128 0x27
 3085 01dc 0C       		.uleb128 0xc
 3086 01dd 11       		.uleb128 0x11
 3087 01de 01       		.uleb128 0x1
 3088 01df 12       		.uleb128 0x12
 3089 01e0 01       		.uleb128 0x1
ARM GAS  /tmp/ccJp2csF.s 			page 88


 3090 01e1 40       		.uleb128 0x40
 3091 01e2 06       		.uleb128 0x6
 3092 01e3 9642     		.uleb128 0x2116
 3093 01e5 0C       		.uleb128 0xc
 3094 01e6 00       		.byte	0
 3095 01e7 00       		.byte	0
 3096 01e8 22       		.uleb128 0x22
 3097 01e9 34       		.uleb128 0x34
 3098 01ea 00       		.byte	0
 3099 01eb 03       		.uleb128 0x3
 3100 01ec 0E       		.uleb128 0xe
 3101 01ed 3A       		.uleb128 0x3a
 3102 01ee 0B       		.uleb128 0xb
 3103 01ef 3B       		.uleb128 0x3b
 3104 01f0 0B       		.uleb128 0xb
 3105 01f1 49       		.uleb128 0x49
 3106 01f2 13       		.uleb128 0x13
 3107 01f3 3F       		.uleb128 0x3f
 3108 01f4 0C       		.uleb128 0xc
 3109 01f5 02       		.uleb128 0x2
 3110 01f6 0A       		.uleb128 0xa
 3111 01f7 00       		.byte	0
 3112 01f8 00       		.byte	0
 3113 01f9 23       		.uleb128 0x23
 3114 01fa 34       		.uleb128 0x34
 3115 01fb 00       		.byte	0
 3116 01fc 03       		.uleb128 0x3
 3117 01fd 08       		.uleb128 0x8
 3118 01fe 3A       		.uleb128 0x3a
 3119 01ff 0B       		.uleb128 0xb
 3120 0200 3B       		.uleb128 0x3b
 3121 0201 0B       		.uleb128 0xb
 3122 0202 49       		.uleb128 0x49
 3123 0203 13       		.uleb128 0x13
 3124 0204 3F       		.uleb128 0x3f
 3125 0205 0C       		.uleb128 0xc
 3126 0206 02       		.uleb128 0x2
 3127 0207 0A       		.uleb128 0xa
 3128 0208 00       		.byte	0
 3129 0209 00       		.byte	0
 3130 020a 24       		.uleb128 0x24
 3131 020b 21       		.uleb128 0x21
 3132 020c 00       		.byte	0
 3133 020d 00       		.byte	0
 3134 020e 00       		.byte	0
 3135 020f 25       		.uleb128 0x25
 3136 0210 34       		.uleb128 0x34
 3137 0211 00       		.byte	0
 3138 0212 03       		.uleb128 0x3
 3139 0213 0E       		.uleb128 0xe
 3140 0214 3A       		.uleb128 0x3a
 3141 0215 0B       		.uleb128 0xb
 3142 0216 3B       		.uleb128 0x3b
 3143 0217 0B       		.uleb128 0xb
 3144 0218 49       		.uleb128 0x49
 3145 0219 13       		.uleb128 0x13
 3146 021a 3F       		.uleb128 0x3f
ARM GAS  /tmp/ccJp2csF.s 			page 89


 3147 021b 0C       		.uleb128 0xc
 3148 021c 3C       		.uleb128 0x3c
 3149 021d 0C       		.uleb128 0xc
 3150 021e 00       		.byte	0
 3151 021f 00       		.byte	0
 3152 0220 00       		.byte	0
 3153              		.section	.debug_loc,"",%progbits
 3154              	.Ldebug_loc0:
 3155              	.LLST0:
 3156 0000 00000000 		.4byte	.LFB16
 3157 0004 02000000 		.4byte	.LCFI0
 3158 0008 0200     		.2byte	0x2
 3159 000a 7D       		.byte	0x7d
 3160 000b 00       		.sleb128 0
 3161 000c 02000000 		.4byte	.LCFI0
 3162 0010 04000000 		.4byte	.LCFI1
 3163 0014 0200     		.2byte	0x2
 3164 0016 7D       		.byte	0x7d
 3165 0017 0C       		.sleb128 12
 3166 0018 04000000 		.4byte	.LCFI1
 3167 001c EC000000 		.4byte	.LFE16
 3168 0020 0200     		.2byte	0x2
 3169 0022 7D       		.byte	0x7d
 3170 0023 18       		.sleb128 24
 3171 0024 00000000 		.4byte	0
 3172 0028 00000000 		.4byte	0
 3173              	.LLST1:
 3174 002c 00000000 		.4byte	.LFB18
 3175 0030 02000000 		.4byte	.LCFI2
 3176 0034 0200     		.2byte	0x2
 3177 0036 7D       		.byte	0x7d
 3178 0037 00       		.sleb128 0
 3179 0038 02000000 		.4byte	.LCFI2
 3180 003c 04000000 		.4byte	.LCFI3
 3181 0040 0200     		.2byte	0x2
 3182 0042 7D       		.byte	0x7d
 3183 0043 04       		.sleb128 4
 3184 0044 04000000 		.4byte	.LCFI3
 3185 0048 48000000 		.4byte	.LFE18
 3186 004c 0200     		.2byte	0x2
 3187 004e 7D       		.byte	0x7d
 3188 004f 10       		.sleb128 16
 3189 0050 00000000 		.4byte	0
 3190 0054 00000000 		.4byte	0
 3191              	.LLST2:
 3192 0058 00000000 		.4byte	.LFB20
 3193 005c 02000000 		.4byte	.LCFI4
 3194 0060 0200     		.2byte	0x2
 3195 0062 7D       		.byte	0x7d
 3196 0063 00       		.sleb128 0
 3197 0064 02000000 		.4byte	.LCFI4
 3198 0068 04000000 		.4byte	.LCFI5
 3199 006c 0200     		.2byte	0x2
 3200 006e 7D       		.byte	0x7d
 3201 006f 08       		.sleb128 8
 3202 0070 04000000 		.4byte	.LCFI5
 3203 0074 4C020000 		.4byte	.LFE20
ARM GAS  /tmp/ccJp2csF.s 			page 90


 3204 0078 0200     		.2byte	0x2
 3205 007a 7D       		.byte	0x7d
 3206 007b 30       		.sleb128 48
 3207 007c 00000000 		.4byte	0
 3208 0080 00000000 		.4byte	0
 3209              	.LLST3:
 3210 0084 00000000 		.4byte	.LFB21
 3211 0088 02000000 		.4byte	.LCFI6
 3212 008c 0200     		.2byte	0x2
 3213 008e 7D       		.byte	0x7d
 3214 008f 00       		.sleb128 0
 3215 0090 02000000 		.4byte	.LCFI6
 3216 0094 04000000 		.4byte	.LCFI7
 3217 0098 0200     		.2byte	0x2
 3218 009a 7D       		.byte	0x7d
 3219 009b 04       		.sleb128 4
 3220 009c 04000000 		.4byte	.LCFI7
 3221 00a0 B0000000 		.4byte	.LFE21
 3222 00a4 0300     		.2byte	0x3
 3223 00a6 7D       		.byte	0x7d
 3224 00a7 E000     		.sleb128 96
 3225 00a9 00000000 		.4byte	0
 3226 00ad 00000000 		.4byte	0
 3227              	.LLST4:
 3228 00b1 00000000 		.4byte	.LFB22
 3229 00b5 02000000 		.4byte	.LCFI8
 3230 00b9 0200     		.2byte	0x2
 3231 00bb 7D       		.byte	0x7d
 3232 00bc 00       		.sleb128 0
 3233 00bd 02000000 		.4byte	.LCFI8
 3234 00c1 0C010000 		.4byte	.LFE22
 3235 00c5 0200     		.2byte	0x2
 3236 00c7 7D       		.byte	0x7d
 3237 00c8 08       		.sleb128 8
 3238 00c9 00000000 		.4byte	0
 3239 00cd 00000000 		.4byte	0
 3240              		.section	.debug_aranges,"",%progbits
 3241 0000 3C000000 		.4byte	0x3c
 3242 0004 0200     		.2byte	0x2
 3243 0006 00000000 		.4byte	.Ldebug_info0
 3244 000a 04       		.byte	0x4
 3245 000b 00       		.byte	0
 3246 000c 0000     		.2byte	0
 3247 000e 0000     		.2byte	0
 3248 0010 00000000 		.4byte	.LFB16
 3249 0014 EC000000 		.4byte	.LFE16-.LFB16
 3250 0018 00000000 		.4byte	.LFB18
 3251 001c 48000000 		.4byte	.LFE18-.LFB18
 3252 0020 00000000 		.4byte	.LFB20
 3253 0024 4C020000 		.4byte	.LFE20-.LFB20
 3254 0028 00000000 		.4byte	.LFB21
 3255 002c B0000000 		.4byte	.LFE21-.LFB21
 3256 0030 00000000 		.4byte	.LFB22
 3257 0034 0C010000 		.4byte	.LFE22-.LFB22
 3258 0038 00000000 		.4byte	0
 3259 003c 00000000 		.4byte	0
 3260              		.section	.debug_ranges,"",%progbits
ARM GAS  /tmp/ccJp2csF.s 			page 91


 3261              	.Ldebug_ranges0:
 3262 0000 00000000 		.4byte	.LFB16
 3263 0004 EC000000 		.4byte	.LFE16
 3264 0008 00000000 		.4byte	.LFB18
 3265 000c 48000000 		.4byte	.LFE18
 3266 0010 00000000 		.4byte	.LFB20
 3267 0014 4C020000 		.4byte	.LFE20
 3268 0018 00000000 		.4byte	.LFB21
 3269 001c B0000000 		.4byte	.LFE21
 3270 0020 00000000 		.4byte	.LFB22
 3271 0024 0C010000 		.4byte	.LFE22
 3272 0028 00000000 		.4byte	0
 3273 002c 00000000 		.4byte	0
 3274              		.section	.debug_line,"",%progbits
 3275              	.Ldebug_line0:
 3276 0000 2F020000 		.section	.debug_str,"MS",%progbits,1
 3276      02003301 
 3276      00000201 
 3276      FB0E0D00 
 3276      01010101 
 3277              	.LASF113:
 3278 0000 735F6C63 		.ascii	"s_lcd\000"
 3278      6400
 3279              	.LASF90:
 3280 0006 70776D5F 		.ascii	"pwm_channel_1\000"
 3280      6368616E 
 3280      6E656C5F 
 3280      3100
 3281              	.LASF91:
 3282 0014 70776D5F 		.ascii	"pwm_channel_2\000"
 3282      6368616E 
 3282      6E656C5F 
 3282      3200
 3283              	.LASF92:
 3284 0022 70776D5F 		.ascii	"pwm_channel_3\000"
 3284      6368616E 
 3284      6E656C5F 
 3284      3300
 3285              	.LASF93:
 3286 0030 70776D5F 		.ascii	"pwm_channel_4\000"
 3286      6368616E 
 3286      6E656C5F 
 3286      3400
 3287              	.LASF134:
 3288 003e 61637377 		.ascii	"acswitch_timer\000"
 3288      69746368 
 3288      5F74696D 
 3288      657200
 3289              	.LASF156:
 3290 004d 70617261 		.ascii	"param_struct\000"
 3290      6D5F7374 
 3290      72756374 
 3290      00
 3291              	.LASF85:
 3292 005a 6C617374 		.ascii	"last_program_deep_in_flash\000"
 3292      5F70726F 
 3292      6772616D 
ARM GAS  /tmp/ccJp2csF.s 			page 92


 3292      5F646565 
 3292      705F696E 
 3293              	.LASF12:
 3294 0075 45585449 		.ascii	"EXTI4_15_IRQn\000"
 3294      345F3135 
 3294      5F495251 
 3294      6E00
 3295              	.LASF78:
 3296 0083 42535252 		.ascii	"BSRR\000"
 3296      00
 3297              	.LASF83:
 3298 0088 6C617374 		.ascii	"last_function_in_flash\000"
 3298      5F66756E 
 3298      6374696F 
 3298      6E5F696E 
 3298      5F666C61 
 3299              	.LASF11:
 3300 009f 45585449 		.ascii	"EXTI2_3_IRQn\000"
 3300      325F335F 
 3300      4952516E 
 3300      00
 3301              	.LASF112:
 3302 00ac 6D61696E 		.ascii	"main_state\000"
 3302      5F737461 
 3302      746500
 3303              	.LASF121:
 3304 00b7 705F6D65 		.ascii	"p_mem_init\000"
 3304      6D5F696E 
 3304      697400
 3305              	.LASF2:
 3306 00c2 5356435F 		.ascii	"SVC_IRQn\000"
 3306      4952516E 
 3306      00
 3307              	.LASF122:
 3308 00cb 62756666 		.ascii	"buffer\000"
 3308      657200
 3309              	.LASF165:
 3310 00d2 76706F74 		.ascii	"vpote\000"
 3310      6500
 3311              	.LASF170:
 3312 00d8 4E564943 		.ascii	"NVIC_SetPriority\000"
 3312      5F536574 
 3312      5072696F 
 3312      72697479 
 3312      00
 3313              	.LASF47:
 3314 00e9 756E7369 		.ascii	"unsigned int\000"
 3314      676E6564 
 3314      20696E74 
 3314      00
 3315              	.LASF71:
 3316 00f6 4C4F4144 		.ascii	"LOAD\000"
 3316      00
 3317              	.LASF25:
 3318 00fb 54494D31 		.ascii	"TIM16_IRQn\000"
 3318      365F4952 
 3318      516E00
ARM GAS  /tmp/ccJp2csF.s 			page 93


 3319              	.LASF159:
 3320 0106 7463705F 		.ascii	"tcp_kalive_timer\000"
 3320      6B616C69 
 3320      76655F74 
 3320      696D6572 
 3320      00
 3321              	.LASF41:
 3322 0117 5F5F696E 		.ascii	"__int32_t\000"
 3322      7433325F 
 3322      7400
 3323              	.LASF129:
 3324 0121 72783262 		.ascii	"rx2buff\000"
 3324      75666600 
 3325              	.LASF8:
 3326 0129 464C4153 		.ascii	"FLASH_IRQn\000"
 3326      485F4952 
 3326      516E00
 3327              	.LASF131:
 3328 0134 72783162 		.ascii	"rx1buff\000"
 3328      75666600 
 3329              	.LASF86:
 3330 013c 64756D6D 		.ascii	"dummy\000"
 3330      7900
 3331              	.LASF72:
 3332 0142 43414C49 		.ascii	"CALIB\000"
 3332      4200
 3333              	.LASF152:
 3334 0148 75736172 		.ascii	"usart2_pckt_ready\000"
 3334      74325F70 
 3334      636B745F 
 3334      72656164 
 3334      7900
 3335              	.LASF128:
 3336 015a 74783262 		.ascii	"tx2buff\000"
 3336      75666600 
 3337              	.LASF10:
 3338 0162 45585449 		.ascii	"EXTI0_1_IRQn\000"
 3338      305F315F 
 3338      4952516E 
 3338      00
 3339              	.LASF139:
 3340 016f 67726F75 		.ascii	"grouped_master_timeout_timer\000"
 3340      7065645F 
 3340      6D617374 
 3340      65725F74 
 3340      696D656F 
 3341              	.LASF145:
 3342 018c 76677269 		.ascii	"vgrid_timer\000"
 3342      645F7469 
 3342      6D657200 
 3343              	.LASF27:
 3344 0198 49324331 		.ascii	"I2C1_IRQn\000"
 3344      5F495251 
 3344      6E00
 3345              	.LASF3:
 3346 01a2 50656E64 		.ascii	"PendSV_IRQn\000"
 3346      53565F49 
ARM GAS  /tmp/ccJp2csF.s 			page 94


 3346      52516E00 
 3347              	.LASF153:
 3348 01ae 75736172 		.ascii	"usart2_have_data\000"
 3348      74325F68 
 3348      6176655F 
 3348      64617461 
 3348      00
 3349              	.LASF9:
 3350 01bf 5243435F 		.ascii	"RCC_IRQn\000"
 3350      4952516E 
 3350      00
 3351              	.LASF118:
 3352 01c8 73686F77 		.ascii	"show_ldr\000"
 3352      5F6C6472 
 3352      00
 3353              	.LASF51:
 3354 01d1 75696E74 		.ascii	"uint32_t\000"
 3354      33325F74 
 3354      00
 3355              	.LASF52:
 3356 01da 49534552 		.ascii	"ISER\000"
 3356      00
 3357              	.LASF127:
 3358 01df 666C6F61 		.ascii	"float\000"
 3358      7400
 3359              	.LASF55:
 3360 01e5 52534552 		.ascii	"RSERVED1\000"
 3360      56454431 
 3360      00
 3361              	.LASF29:
 3362 01ee 53504931 		.ascii	"SPI1_IRQn\000"
 3362      5F495251 
 3362      6E00
 3363              	.LASF46:
 3364 01f8 6C6F6E67 		.ascii	"long long unsigned int\000"
 3364      206C6F6E 
 3364      6720756E 
 3364      7369676E 
 3364      65642069 
 3365              	.LASF68:
 3366 020f 44465352 		.ascii	"DFSR\000"
 3366      00
 3367              	.LASF150:
 3368 0214 75736172 		.ascii	"usart1_pckt_bytes\000"
 3368      74315F70 
 3368      636B745F 
 3368      62797465 
 3368      7300
 3369              	.LASF162:
 3370 0226 7369676E 		.ascii	"signal_state\000"
 3370      616C5F73 
 3370      74617465 
 3370      00
 3371              	.LASF39:
 3372 0233 5F5F7569 		.ascii	"__uint16_t\000"
 3372      6E743136 
 3372      5F7400
ARM GAS  /tmp/ccJp2csF.s 			page 95


 3373              	.LASF141:
 3374 023e 6D696E75 		.ascii	"minutes\000"
 3374      74657300 
 3375              	.LASF74:
 3376 0246 4D4F4445 		.ascii	"MODER\000"
 3376      5200
 3377              	.LASF148:
 3378 024c 75736172 		.ascii	"usart1_pckt_ready\000"
 3378      74315F70 
 3378      636B745F 
 3378      72656164 
 3378      7900
 3379              	.LASF34:
 3380 025e 4952516E 		.ascii	"IRQn_Type\000"
 3380      5F547970 
 3380      6500
 3381              	.LASF96:
 3382 0268 5463704D 		.ascii	"TcpMessages\000"
 3382      65737361 
 3382      67657300 
 3383              	.LASF32:
 3384 0274 55534152 		.ascii	"USART2_IRQn\000"
 3384      54325F49 
 3384      52516E00 
 3385              	.LASF63:
 3386 0280 43505549 		.ascii	"CPUID\000"
 3386      4400
 3387              	.LASF144:
 3388 0286 69677269 		.ascii	"igrid_timer\000"
 3388      645F7469 
 3388      6D657200 
 3389              	.LASF171:
 3390 0292 53797354 		.ascii	"SysTick_Config\000"
 3390      69636B5F 
 3390      436F6E66 
 3390      696700
 3391              	.LASF97:
 3392 02a1 4E4F4E45 		.ascii	"NONE_MSG\000"
 3392      5F4D5347 
 3392      00
 3393              	.LASF149:
 3394 02aa 75736172 		.ascii	"usart1_have_data\000"
 3394      74315F68 
 3394      6176655F 
 3394      64617461 
 3394      00
 3395              	.LASF77:
 3396 02bb 50555044 		.ascii	"PUPDR\000"
 3396      5200
 3397              	.LASF105:
 3398 02c1 7469636B 		.ascii	"ticks\000"
 3398      7300
 3399              	.LASF132:
 3400 02c7 73686F77 		.ascii	"show_select_timer\000"
 3400      5F73656C 
 3400      6563745F 
 3400      74696D65 
ARM GAS  /tmp/ccJp2csF.s 			page 96


 3400      7200
 3401              	.LASF88:
 3402 02d9 64756D6D 		.ascii	"dummy1\000"
 3402      793100
 3403              	.LASF89:
 3404 02e0 64756D6D 		.ascii	"dummy2\000"
 3404      793200
 3405              	.LASF110:
 3406 02e7 6C6F6361 		.ascii	"local_meas\000"
 3406      6C5F6D65 
 3406      617300
 3407              	.LASF82:
 3408 02f2 63686172 		.ascii	"char\000"
 3408      00
 3409              	.LASF125:
 3410 02f7 54454D50 		.ascii	"TEMPERATURE_Value\000"
 3410      45524154 
 3410      5552455F 
 3410      56616C75 
 3410      6500
 3411              	.LASF65:
 3412 0309 41495243 		.ascii	"AIRCR\000"
 3412      5200
 3413              	.LASF140:
 3414 030f 74616B65 		.ascii	"take_temp_sample\000"
 3414      5F74656D 
 3414      705F7361 
 3414      6D706C65 
 3414      00
 3415              	.LASF21:
 3416 0320 54494D33 		.ascii	"TIM3_IRQn\000"
 3416      5F495251 
 3416      6E00
 3417              	.LASF14:
 3418 032a 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 3418      5F436861 
 3418      6E6E656C 
 3418      315F4952 
 3418      516E00
 3419              	.LASF107:
 3420 033d 62797465 		.ascii	"bytes_read\000"
 3420      735F7265 
 3420      616400
 3421              	.LASF24:
 3422 0348 54494D31 		.ascii	"TIM15_IRQn\000"
 3422      355F4952 
 3422      516E00
 3423              	.LASF48:
 3424 0353 75696E74 		.ascii	"uint8_t\000"
 3424      385F7400 
 3425              	.LASF151:
 3426 035b 75736172 		.ascii	"usart2_mini_timeout\000"
 3426      74325F6D 
 3426      696E695F 
 3426      74696D65 
 3426      6F757400 
 3427              	.LASF130:
ARM GAS  /tmp/ccJp2csF.s 			page 97


 3428 036f 74783162 		.ascii	"tx1buff\000"
 3428      75666600 
 3429              	.LASF154:
 3430 0377 75736172 		.ascii	"usart2_pckt_bytes\000"
 3430      74325F70 
 3430      636B745F 
 3430      62797465 
 3430      7300
 3431              	.LASF161:
 3432 0389 73656373 		.ascii	"secs\000"
 3432      00
 3433              	.LASF111:
 3434 038e 6C6F6361 		.ascii	"local_meas_last\000"
 3434      6C5F6D65 
 3434      61735F6C 
 3434      61737400 
 3435              	.LASF45:
 3436 039e 6C6F6E67 		.ascii	"long long int\000"
 3436      206C6F6E 
 3436      6720696E 
 3436      7400
 3437              	.LASF5:
 3438 03ac 57574447 		.ascii	"WWDG_IRQn\000"
 3438      5F495251 
 3438      6E00
 3439              	.LASF67:
 3440 03b6 53484353 		.ascii	"SHCSR\000"
 3440      5200
 3441              	.LASF147:
 3442 03bc 75736172 		.ascii	"usart1_mini_timeout\000"
 3442      74315F6D 
 3442      696E695F 
 3442      74696D65 
 3442      6F757400 
 3443              	.LASF143:
 3444 03d0 73617665 		.ascii	"saved_mode\000"
 3444      645F6D6F 
 3444      646500
 3445              	.LASF160:
 3446 03db 66696C74 		.ascii	"filter_timer\000"
 3446      65725F74 
 3446      696D6572 
 3446      00
 3447              	.LASF169:
 3448 03e8 70617261 		.ascii	"parameters\000"
 3448      6D657465 
 3448      727300
 3449              	.LASF99:
 3450 03f3 524F4F4D 		.ascii	"ROOM_BRIGHT\000"
 3450      5F425249 
 3450      47485400 
 3451              	.LASF13:
 3452 03ff 54535F49 		.ascii	"TS_IRQn\000"
 3452      52516E00 
 3453              	.LASF119:
 3454 0407 64756D6D 		.ascii	"dummy_resp\000"
 3454      795F7265 
ARM GAS  /tmp/ccJp2csF.s 			page 98


 3454      737000
 3455              	.LASF18:
 3456 0412 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 3456      5F42524B 
 3456      5F55505F 
 3456      5452475F 
 3456      434F4D5F 
 3457              	.LASF123:
 3458 042b 74656D70 		.ascii	"tempbuff\000"
 3458      62756666 
 3458      00
 3459              	.LASF6:
 3460 0434 5056445F 		.ascii	"PVD_IRQn\000"
 3460      4952516E 
 3460      00
 3461              	.LASF103:
 3462 043d 4C494748 		.ascii	"LIGHTS_ON\000"
 3462      54535F4F 
 3462      4E00
 3463              	.LASF58:
 3464 0447 49435052 		.ascii	"ICPR\000"
 3464      00
 3465              	.LASF17:
 3466 044c 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 3466      5F434F4D 
 3466      505F4952 
 3466      516E00
 3467              	.LASF133:
 3468 045b 73776974 		.ascii	"switches_timer\000"
 3468      63686573 
 3468      5F74696D 
 3468      657200
 3469              	.LASF114:
 3470 046a 7463705F 		.ascii	"tcp_msg\000"
 3470      6D736700 
 3471              	.LASF76:
 3472 0472 4F535045 		.ascii	"OSPEEDR\000"
 3472      45445200 
 3473              	.LASF73:
 3474 047a 53797354 		.ascii	"SysTick_Type\000"
 3474      69636B5F 
 3474      54797065 
 3474      00
 3475              	.LASF81:
 3476 0487 6C6F6E67 		.ascii	"long double\000"
 3476      20646F75 
 3476      626C6500 
 3477              	.LASF49:
 3478 0493 75696E74 		.ascii	"uint16_t\000"
 3478      31365F74 
 3478      00
 3479              	.LASF155:
 3480 049c 62756666 		.ascii	"buffUARTGSMrx2\000"
 3480      55415254 
 3480      47534D72 
 3480      783200
 3481              	.LASF95:
ARM GAS  /tmp/ccJp2csF.s 			page 99


 3482 04ab 4952516E 		.ascii	"IRQn\000"
 3482      00
 3483              	.LASF87:
 3484 04b0 6C617374 		.ascii	"last_channel_in_flash\000"
 3484      5F636861 
 3484      6E6E656C 
 3484      5F696E5F 
 3484      666C6173 
 3485              	.LASF135:
 3486 04c6 7363726F 		.ascii	"scroll1_timer\000"
 3486      6C6C315F 
 3486      74696D65 
 3486      7200
 3487              	.LASF7:
 3488 04d4 5254435F 		.ascii	"RTC_IRQn\000"
 3488      4952516E 
 3488      00
 3489              	.LASF53:
 3490 04dd 52455345 		.ascii	"RESERVED0\000"
 3490      52564544 
 3490      3000
 3491              	.LASF66:
 3492 04e7 52455345 		.ascii	"RESERVED1\000"
 3492      52564544 
 3492      3100
 3493              	.LASF57:
 3494 04f1 52455345 		.ascii	"RESERVED2\000"
 3494      52564544 
 3494      3200
 3495              	.LASF59:
 3496 04fb 52455345 		.ascii	"RESERVED3\000"
 3496      52564544 
 3496      3300
 3497              	.LASF60:
 3498 0505 52455345 		.ascii	"RESERVED4\000"
 3498      52564544 
 3498      3400
 3499              	.LASF38:
 3500 050f 73686F72 		.ascii	"short int\000"
 3500      7420696E 
 3500      7400
 3501              	.LASF42:
 3502 0519 6C6F6E67 		.ascii	"long int\000"
 3502      20696E74 
 3502      00
 3503              	.LASF31:
 3504 0522 55534152 		.ascii	"USART1_IRQn\000"
 3504      54315F49 
 3504      52516E00 
 3505              	.LASF0:
 3506 052e 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 3506      61736B61 
 3506      626C6549 
 3506      6E745F49 
 3506      52516E00 
 3507              	.LASF104:
 3508 0542 7072696F 		.ascii	"priority\000"
ARM GAS  /tmp/ccJp2csF.s 			page 100


 3508      72697479 
 3508      00
 3509              	.LASF19:
 3510 054b 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 3510      5F43435F 
 3510      4952516E 
 3510      00
 3511              	.LASF75:
 3512 0558 4F545950 		.ascii	"OTYPER\000"
 3512      455200
 3513              	.LASF116:
 3514 055f 6E65775F 		.ascii	"new_lamp\000"
 3514      6C616D70 
 3514      00
 3515              	.LASF157:
 3516 0568 77616974 		.ascii	"wait_ms_var\000"
 3516      5F6D735F 
 3516      76617200 
 3517              	.LASF26:
 3518 0574 54494D31 		.ascii	"TIM17_IRQn\000"
 3518      375F4952 
 3518      516E00
 3519              	.LASF16:
 3520 057f 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 3520      5F436861 
 3520      6E6E656C 
 3520      345F355F 
 3520      4952516E 
 3521              	.LASF35:
 3522 0594 5F5F7569 		.ascii	"__uint8_t\000"
 3522      6E74385F 
 3522      7400
 3523              	.LASF100:
 3524 059e 4C414D50 		.ascii	"LAMP_BRIGHT\000"
 3524      5F425249 
 3524      47485400 
 3525              	.LASF62:
 3526 05aa 4E564943 		.ascii	"NVIC_Type\000"
 3526      5F547970 
 3526      6500
 3527              	.LASF69:
 3528 05b4 5343425F 		.ascii	"SCB_Type\000"
 3528      54797065 
 3528      00
 3529              	.LASF80:
 3530 05bd 4750494F 		.ascii	"GPIO_TypeDef\000"
 3530      5F547970 
 3530      65446566 
 3530      00
 3531              	.LASF4:
 3532 05ca 53797354 		.ascii	"SysTick_IRQn\000"
 3532      69636B5F 
 3532      4952516E 
 3532      00
 3533              	.LASF33:
 3534 05d7 4345435F 		.ascii	"CEC_IRQn\000"
 3534      4952516E 
ARM GAS  /tmp/ccJp2csF.s 			page 101


 3534      00
 3535              	.LASF61:
 3536 05e0 73697A65 		.ascii	"sizetype\000"
 3536      74797065 
 3536      00
 3537              	.LASF64:
 3538 05e9 49435352 		.ascii	"ICSR\000"
 3538      00
 3539              	.LASF28:
 3540 05ee 49324332 		.ascii	"I2C2_IRQn\000"
 3540      5F495251 
 3540      6E00
 3541              	.LASF44:
 3542 05f8 6C6F6E67 		.ascii	"long unsigned int\000"
 3542      20756E73 
 3542      69676E65 
 3542      6420696E 
 3542      7400
 3543              	.LASF20:
 3544 060a 54494D32 		.ascii	"TIM2_IRQn\000"
 3544      5F495251 
 3544      6E00
 3545              	.LASF126:
 3546 0614 50524553 		.ascii	"PRESSURE_Value\000"
 3546      53555245 
 3546      5F56616C 
 3546      756500
 3547              	.LASF168:
 3548 0623 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 3548      652F6D65 
 3548      642F446F 
 3548      63756D65 
 3548      6E74732F 
 3549 0656 6100     		.ascii	"a\000"
 3550              	.LASF124:
 3551 0658 48554D49 		.ascii	"HUMIDITY_Value\000"
 3551      44495459 
 3551      5F56616C 
 3551      756500
 3552              	.LASF50:
 3553 0667 696E7433 		.ascii	"int32_t\000"
 3553      325F7400 
 3554              	.LASF138:
 3555 066f 7374616E 		.ascii	"standalone_enable_menu_timer\000"
 3555      64616C6F 
 3555      6E655F65 
 3555      6E61626C 
 3555      655F6D65 
 3556              	.LASF23:
 3557 068c 54494D31 		.ascii	"TIM14_IRQn\000"
 3557      345F4952 
 3557      516E00
 3558              	.LASF15:
 3559 0697 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 3559      5F436861 
 3559      6E6E656C 
 3559      325F335F 
ARM GAS  /tmp/ccJp2csF.s 			page 102


 3559      4952516E 
 3560              	.LASF120:
 3561 06ac 7070735F 		.ascii	"pps_one\000"
 3561      6F6E6500 
 3562              	.LASF163:
 3563 06b4 646D785F 		.ascii	"dmx_timeout_timer\000"
 3563      74696D65 
 3563      6F75745F 
 3563      74696D65 
 3563      7200
 3564              	.LASF22:
 3565 06c6 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 3565      5F444143 
 3565      5F495251 
 3565      6E00
 3566              	.LASF37:
 3567 06d4 756E7369 		.ascii	"unsigned char\000"
 3567      676E6564 
 3567      20636861 
 3567      7200
 3568              	.LASF43:
 3569 06e2 5F5F7569 		.ascii	"__uint32_t\000"
 3569      6E743332 
 3569      5F7400
 3570              	.LASF117:
 3571 06ed 6C617374 		.ascii	"last_bright\000"
 3571      5F627269 
 3571      67687400 
 3572              	.LASF108:
 3573 06f9 6E656564 		.ascii	"need_ack\000"
 3573      5F61636B 
 3573      00
 3574              	.LASF84:
 3575 0702 6C617374 		.ascii	"last_program_in_flash\000"
 3575      5F70726F 
 3575      6772616D 
 3575      5F696E5F 
 3575      666C6173 
 3576              	.LASF146:
 3577 0718 7361635F 		.ascii	"sac_aux\000"
 3577      61757800 
 3578              	.LASF115:
 3579 0720 6E65775F 		.ascii	"new_room\000"
 3579      726F6F6D 
 3579      00
 3580              	.LASF174:
 3581 0729 54696D69 		.ascii	"TimingDelay_Decrement\000"
 3581      6E674465 
 3581      6C61795F 
 3581      44656372 
 3581      656D656E 
 3582              	.LASF142:
 3583 073f 74696D65 		.ascii	"timer_wifi_bright\000"
 3583      725F7769 
 3583      66695F62 
 3583      72696768 
 3583      7400
ARM GAS  /tmp/ccJp2csF.s 			page 103


 3584              	.LASF54:
 3585 0751 49434552 		.ascii	"ICER\000"
 3585      00
 3586              	.LASF30:
 3587 0756 53504932 		.ascii	"SPI2_IRQn\000"
 3587      5F495251 
 3587      6E00
 3588              	.LASF173:
 3589 0760 70726570 		.ascii	"prepare_json_pkt\000"
 3589      6172655F 
 3589      6A736F6E 
 3589      5F706B74 
 3589      00
 3590              	.LASF98:
 3591 0771 4B454550 		.ascii	"KEEP_ALIVE\000"
 3591      5F414C49 
 3591      564500
 3592              	.LASF94:
 3593 077c 70617261 		.ascii	"parameters_typedef\000"
 3593      6D657465 
 3593      72735F74 
 3593      79706564 
 3593      656600
 3594              	.LASF36:
 3595 078f 7369676E 		.ascii	"signed char\000"
 3595      65642063 
 3595      68617200 
 3596              	.LASF167:
 3597 079b 7372632F 		.ascii	"src/main.c\000"
 3597      6D61696E 
 3597      2E6300
 3598              	.LASF102:
 3599 07a6 4C494748 		.ascii	"LIGHTS_OFF\000"
 3599      54535F4F 
 3599      464600
 3600              	.LASF40:
 3601 07b1 73686F72 		.ascii	"short unsigned int\000"
 3601      7420756E 
 3601      7369676E 
 3601      65642069 
 3601      6E7400
 3602              	.LASF166:
 3603 07c4 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 3603      43313120 
 3603      352E322E 
 3603      31203230 
 3603      31353132 
 3604 07f7 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 3604      20726576 
 3604      6973696F 
 3604      6E203233 
 3604      31383438 
 3605 082a 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 3605      662D3220 
 3605      2D4F3020 
 3605      2D666F6D 
 3605      69742D66 
ARM GAS  /tmp/ccJp2csF.s 			page 104


 3606 085d 66756E63 		.ascii	"function-sections\000"
 3606      74696F6E 
 3606      2D736563 
 3606      74696F6E 
 3606      7300
 3607              	.LASF137:
 3608 086f 7374616E 		.ascii	"standalone_timer\000"
 3608      64616C6F 
 3608      6E655F74 
 3608      696D6572 
 3608      00
 3609              	.LASF172:
 3610 0880 6D61696E 		.ascii	"main\000"
 3610      00
 3611              	.LASF1:
 3612 0885 48617264 		.ascii	"HardFault_IRQn\000"
 3612      4661756C 
 3612      745F4952 
 3612      516E00
 3613              	.LASF56:
 3614 0894 49535052 		.ascii	"ISPR\000"
 3614      00
 3615              	.LASF109:
 3616 0899 72657370 		.ascii	"resp\000"
 3616      00
 3617              	.LASF164:
 3618 089e 7674656D 		.ascii	"vtemp\000"
 3618      7000
 3619              	.LASF136:
 3620 08a4 7363726F 		.ascii	"scroll2_timer\000"
 3620      6C6C325F 
 3620      74696D65 
 3620      7200
 3621              	.LASF158:
 3622 08b2 74696D65 		.ascii	"timer_standby\000"
 3622      725F7374 
 3622      616E6462 
 3622      7900
 3623              	.LASF106:
 3624 08c0 62797465 		.ascii	"bytes_remain\000"
 3624      735F7265 
 3624      6D61696E 
 3624      00
 3625              	.LASF79:
 3626 08cd 4C434B52 		.ascii	"LCKR\000"
 3626      00
 3627              	.LASF70:
 3628 08d2 4354524C 		.ascii	"CTRL\000"
 3628      00
 3629              	.LASF101:
 3630 08d7 4745545F 		.ascii	"GET_A\000"
 3630      4100
 3631              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccJp2csF.s 			page 105


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccJp2csF.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccJp2csF.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccJp2csF.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccJp2csF.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccJp2csF.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccJp2csF.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/ccJp2csF.s:277    .bss.show_select_timer:00000000 show_select_timer
     /tmp/ccJp2csF.s:274    .bss.show_select_timer:00000000 $d
     /tmp/ccJp2csF.s:283    .bss.switches_timer:00000000 switches_timer
     /tmp/ccJp2csF.s:284    .bss.switches_timer:00000000 $d
     /tmp/ccJp2csF.s:289    .bss.acswitch_timer:00000000 acswitch_timer
     /tmp/ccJp2csF.s:290    .bss.acswitch_timer:00000000 $d
     /tmp/ccJp2csF.s:296    .bss.scroll1_timer:00000000 scroll1_timer
     /tmp/ccJp2csF.s:293    .bss.scroll1_timer:00000000 $d
     /tmp/ccJp2csF.s:303    .bss.scroll2_timer:00000000 scroll2_timer
     /tmp/ccJp2csF.s:300    .bss.scroll2_timer:00000000 $d
                            *COM*:00000002 standalone_timer
                            *COM*:00000002 standalone_enable_menu_timer
                            *COM*:00000001 grouped_master_timeout_timer
     /tmp/ccJp2csF.s:313    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccJp2csF.s:310    .bss.take_temp_sample:00000000 $d
     /tmp/ccJp2csF.s:320    .bss.minutes:00000000 minutes
     /tmp/ccJp2csF.s:317    .bss.minutes:00000000 $d
     /tmp/ccJp2csF.s:326    .bss.timer_wifi_bright:00000000 timer_wifi_bright
     /tmp/ccJp2csF.s:327    .bss.timer_wifi_bright:00000000 $d
                            *COM*:00000001 saved_mode
     /tmp/ccJp2csF.s:333    .bss.igrid_timer:00000000 igrid_timer
     /tmp/ccJp2csF.s:334    .bss.igrid_timer:00000000 $d
     /tmp/ccJp2csF.s:339    .bss.vgrid_timer:00000000 vgrid_timer
     /tmp/ccJp2csF.s:340    .bss.vgrid_timer:00000000 $d
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:0000000c param_struct
     /tmp/ccJp2csF.s:359    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccJp2csF.s:356    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/ccJp2csF.s:369    .bss.secs:00000000 secs
     /tmp/ccJp2csF.s:366    .bss.secs:00000000 $d
     /tmp/ccJp2csF.s:375    .bss.signal_state:00000000 signal_state
ARM GAS  /tmp/ccJp2csF.s 			page 106


     /tmp/ccJp2csF.s:376    .bss.signal_state:00000000 $d
     /tmp/ccJp2csF.s:381    .bss.dmx_timeout_timer:00000000 dmx_timeout_timer
     /tmp/ccJp2csF.s:382    .bss.dmx_timeout_timer:00000000 $d
                            *COM*:00000021 vd0
                            *COM*:00000021 vd1
                            *COM*:00000021 vd2
                            *COM*:00000021 vd3
                            *COM*:00000021 vd4
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccJp2csF.s:391    .rodata:00000000 $d
     /tmp/ccJp2csF.s:407    .text.main:00000000 $t
     /tmp/ccJp2csF.s:412    .text.main:00000000 main
     /tmp/ccJp2csF.s:756    .text.main:00000214 $d
     /tmp/ccJp2csF.s:790    .text.prepare_json_pkt:00000000 $t
     /tmp/ccJp2csF.s:795    .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccJp2csF.s:887    .text.prepare_json_pkt:0000009c $d
     /tmp/ccJp2csF.s:896    .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccJp2csF.s:901    .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccJp2csF.s:1054   .text.TimingDelay_Decrement:000000e4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GPIO_Config
TIM_3_Init
USART1Config
USART2Config
EXTIOff
Wait_ms
Usart2Send
Usart1Mode
GSM_Start
GSMProcess
Usart1SendUnsigned
Usart2SendUnsigned
buffUARTGSMrx2
memcpy
sprintf
strcat
strlen
GSMTimeoutCounters
