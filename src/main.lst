ARM GAS  /tmp/ccxUmJh6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccxUmJh6.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccxUmJh6.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccxUmJh6.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccxUmJh6.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccxUmJh6.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccxUmJh6.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccxUmJh6.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccxUmJh6.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccxUmJh6.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccxUmJh6.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccxUmJh6.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccxUmJh6.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccxUmJh6.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccxUmJh6.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccxUmJh6.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccxUmJh6.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccxUmJh6.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.6875,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.6876, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.6877, D.6876
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.6877, D.6877
  92 0026 083B     		subs	r3, r3, #8	@ D.6877,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.6877, D.6877,
  94 002a 2E4A     		ldr	r2, .L5	@ D.6875,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.6876, IRQn
  98 0032 1800     		movs	r0, r3	@ D.6877, D.6876
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.6877, D.6877
 101 0038 083B     		subs	r3, r3, #8	@ D.6877,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.6877, D.6877,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.6875, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.6877, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.6876, IRQn
 111 004c 1000     		movs	r0, r2	@ D.6877, D.6876
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.6877, D.6877
 114 0052 D200     		lsls	r2, r2, #3	@ D.6877, D.6877,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.6878, D.6878, D.6877
 117 0058 0200     		movs	r2, r0	@ D.6878, D.6878
 118 005a D243     		mvns	r2, r2	@ D.6878, D.6878
 119 005c 1A40     		ands	r2, r3	@ D.6877, D.6877
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.6877, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.6877, D.6877
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.6876, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.6877, D.6876
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.6877, D.6877
ARM GAS  /tmp/ccxUmJh6.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.6877, D.6877,
 132 0074 9840     		lsls	r0, r0, r3	@ D.6877, D.6877, D.6877
 133 0076 0300     		movs	r3, r0	@ D.6877, D.6877
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.6877, D.6877
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.6877,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.6875, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.6877, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.6879,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.6877, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.6877, D.6877
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.6877, D.6877,
 151 0092 1549     		ldr	r1, .L5+4	@ D.6879,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.6877, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.6877, D.6877
 156 009c 9208     		lsrs	r2, r2, #2	@ D.6877, D.6877,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.6877, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.6876, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.6877, D.6876
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.6877, D.6877
 166 00b0 C900     		lsls	r1, r1, #3	@ D.6877, D.6877,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.6878, D.6878, D.6877
 169 00b6 0100     		movs	r1, r0	@ D.6878, D.6878
 170 00b8 C943     		mvns	r1, r1	@ D.6878, D.6878
 171 00ba 1140     		ands	r1, r2	@ D.6877, D.6877
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.6877, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.6877, D.6877
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.6876, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.6877, D.6876
ARM GAS  /tmp/ccxUmJh6.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.6877, D.6877
 183 00d0 D200     		lsls	r2, r2, #3	@ D.6877, D.6877,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.6877, D.6877, D.6877
 185 00d4 0200     		movs	r2, r0	@ D.6877, D.6877
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.6877, D.6877
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.6877, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccxUmJh6.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.6880,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.6881,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.6882, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.6882,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.6882, _6->LOAD
ARM GAS  /tmp/ccxUmJh6.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.6881,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.6881,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.6880,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	show_select_timer
 273              		.section	.bss.show_select_timer,"aw",%nobits
 274              		.align	1
 275              		.type	show_select_timer, %object
 276              		.size	show_select_timer, 2
 277              	show_select_timer:
 278 0000 0000     		.space	2
 279              		.global	switches_timer
 280              		.section	.bss.switches_timer,"aw",%nobits
 281              		.type	switches_timer, %object
 282              		.size	switches_timer, 1
 283              	switches_timer:
 284 0000 00       		.space	1
 285              		.global	acswitch_timer
 286              		.section	.bss.acswitch_timer,"aw",%nobits
 287              		.type	acswitch_timer, %object
ARM GAS  /tmp/ccxUmJh6.s 			page 23


 288              		.size	acswitch_timer, 1
 289              	acswitch_timer:
 290 0000 00       		.space	1
 291              		.global	scroll1_timer
 292              		.section	.bss.scroll1_timer,"aw",%nobits
 293              		.align	1
 294              		.type	scroll1_timer, %object
 295              		.size	scroll1_timer, 2
 296              	scroll1_timer:
 297 0000 0000     		.space	2
 298              		.global	scroll2_timer
 299              		.section	.bss.scroll2_timer,"aw",%nobits
 300              		.align	1
 301              		.type	scroll2_timer, %object
 302              		.size	scroll2_timer, 2
 303              	scroll2_timer:
 304 0000 0000     		.space	2
 305              		.comm	standalone_timer,2,2
 306              		.comm	standalone_enable_menu_timer,2,2
 307              		.comm	grouped_master_timeout_timer,1,1
 308              		.global	take_temp_sample
 309              		.section	.bss.take_temp_sample,"aw",%nobits
 310              		.align	1
 311              		.type	take_temp_sample, %object
 312              		.size	take_temp_sample, 2
 313              	take_temp_sample:
 314 0000 0000     		.space	2
 315              		.global	timer_wifi_bright
 316              		.section	.bss.timer_wifi_bright,"aw",%nobits
 317              		.type	timer_wifi_bright, %object
 318              		.size	timer_wifi_bright, 1
 319              	timer_wifi_bright:
 320 0000 00       		.space	1
 321              		.global	timer_relay
 322              		.section	.bss.timer_relay,"aw",%nobits
 323              		.align	1
 324              		.type	timer_relay, %object
 325              		.size	timer_relay, 2
 326              	timer_relay:
 327 0000 0000     		.space	2
 328              		.comm	tt_take_photo_sample,2,2
 329              		.comm	tt_relay_on_off,2,2
 330              		.comm	saved_mode,1,1
 331              		.global	igrid_timer
 332              		.section	.bss.igrid_timer,"aw",%nobits
 333              		.type	igrid_timer, %object
 334              		.size	igrid_timer, 1
 335              	igrid_timer:
 336 0000 00       		.space	1
 337              		.global	vgrid_timer
 338              		.section	.bss.vgrid_timer,"aw",%nobits
 339              		.type	vgrid_timer, %object
 340              		.size	vgrid_timer, 1
 341              	vgrid_timer:
 342 0000 00       		.space	1
 343              		.comm	s1,2,2
 344              		.comm	s2,2,2
ARM GAS  /tmp/ccxUmJh6.s 			page 24


 345              		.comm	sac,2,2
 346              		.comm	sac_aux,1,1
 347              		.comm	usart1_mini_timeout,1,1
 348              		.comm	usart1_pckt_ready,1,1
 349              		.comm	usart1_have_data,1,1
 350              		.comm	usart1_pckt_bytes,1,1
 351              		.comm	param_struct,12,4
 352              		.global	wait_ms_var
 353              		.section	.bss.wait_ms_var,"aw",%nobits
 354              		.align	1
 355              		.type	wait_ms_var, %object
 356              		.size	wait_ms_var, 2
 357              	wait_ms_var:
 358 0000 0000     		.space	2
 359              		.comm	timer_standby,2,2
 360              		.comm	tcp_kalive_timer,2,2
 361              		.comm	filter_timer,1,1
 362              		.global	secs
 363              		.section	.bss.secs,"aw",%nobits
 364              		.align	1
 365              		.type	secs, %object
 366              		.size	secs, 2
 367              	secs:
 368 0000 0000     		.space	2
 369              		.global	hours
 370              		.section	.bss.hours,"aw",%nobits
 371              		.type	hours, %object
 372              		.size	hours, 1
 373              	hours:
 374 0000 00       		.space	1
 375              		.global	minutes
 376              		.section	.bss.minutes,"aw",%nobits
 377              		.type	minutes, %object
 378              		.size	minutes, 1
 379              	minutes:
 380 0000 00       		.space	1
 381              		.global	signal_state
 382              		.section	.bss.signal_state,"aw",%nobits
 383              		.type	signal_state, %object
 384              		.size	signal_state, 1
 385              	signal_state:
 386 0000 00       		.space	1
 387              		.global	dmx_timeout_timer
 388              		.section	.bss.dmx_timeout_timer,"aw",%nobits
 389              		.type	dmx_timeout_timer, %object
 390              		.size	dmx_timeout_timer, 1
 391              	dmx_timeout_timer:
 392 0000 00       		.space	1
 393              		.comm	vd0,33,4
 394              		.comm	vd1,33,4
 395              		.comm	vd2,33,4
 396              		.comm	vd3,33,4
 397              		.comm	vd4,33,4
 398              		.comm	vtemp,34,4
 399              		.comm	vpote,34,4
 400              		.section	.rodata
 401              		.align	2
ARM GAS  /tmp/ccxUmJh6.s 			page 25


 402              	.LC0:
 403 0000 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 403      726E6F20 
 403      506C6163 
 403      61205265 
 403      646F6E64 
 404 0025 000000   		.align	2
 405              	.LC2:
 406 0028 20204665 		.ascii	"  Features:\015\012\000"
 406      61747572 
 406      65733A0D 
 406      0A00
 407 0036 0000     		.align	2
 408              	.LC4:
 409 0038 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 409      6D6D6572 
 409      20312074 
 409      6F203130 
 409      560D0A00 
 410              		.align	2
 411              	.LC6:
 412 004c 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 412      67687420 
 412      48797374 
 412      65726573 
 412      69730D0A 
 413 0061 000000   		.align	2
 414              	.LC11:
 415 0064 70686F74 		.ascii	"photo: %d\015\012\000"
 415      6F3A2025 
 415      640D0A00 
 416              		.section	.text.main,"ax",%progbits
 417              		.align	2
 418              		.global	main
 419              		.code	16
 420              		.thumb_func
 421              		.type	main, %function
 422              	main:
 423              	.LFB20:
 424              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccxUmJh6.s 			page 26


  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #endif
  53:src/main.c    **** 
  54:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  55:src/main.c    **** 
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** //volatile unsigned short prog_timer = 0;
  72:src/main.c    **** //volatile unsigned short mainmenu_timer = 0;
  73:src/main.c    **** volatile unsigned short show_select_timer = 0;
  74:src/main.c    **** volatile unsigned char switches_timer = 0;
ARM GAS  /tmp/ccxUmJh6.s 			page 27


  75:src/main.c    **** volatile unsigned char acswitch_timer = 0;
  76:src/main.c    **** 
  77:src/main.c    **** volatile unsigned short scroll1_timer = 0;
  78:src/main.c    **** volatile unsigned short scroll2_timer = 0;
  79:src/main.c    **** 
  80:src/main.c    **** volatile unsigned short standalone_timer;
  81:src/main.c    **** volatile unsigned short standalone_enable_menu_timer;
  82:src/main.c    **** //volatile unsigned short standalone_menu_timer;
  83:src/main.c    **** volatile unsigned char grouped_master_timeout_timer;
  84:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  85:src/main.c    **** volatile unsigned char timer_wifi_bright = 0;
  86:src/main.c    **** 
  87:src/main.c    **** #ifdef USE_REDONDA_BASIC
  88:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  89:src/main.c    **** 
  90:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  91:src/main.c    **** volatile unsigned short tt_relay_on_off;
  92:src/main.c    **** #endif
  93:src/main.c    **** 
  94:src/main.c    **** 
  95:src/main.c    **** unsigned char saved_mode;
  96:src/main.c    **** 
  97:src/main.c    **** // ------- para determinar igrid -------
  98:src/main.c    **** volatile unsigned char igrid_timer = 0;
  99:src/main.c    **** volatile unsigned char vgrid_timer = 0;
 100:src/main.c    **** 
 101:src/main.c    **** // ------- Externals de los switches -------
 102:src/main.c    **** unsigned short s1;
 103:src/main.c    **** unsigned short s2;
 104:src/main.c    **** unsigned short sac;
 105:src/main.c    **** unsigned char sac_aux;
 106:src/main.c    **** 
 107:src/main.c    **** // ------- Externals del GPS & GSM -------
 108:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 109:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 110:src/main.c    **** volatile unsigned char usart1_have_data;
 111:src/main.c    **** unsigned char usart1_pckt_bytes;
 112:src/main.c    **** 
 113:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 114:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 115:src/main.c    **** #define gps_have_data		usart1_have_data
 116:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 117:src/main.c    **** 
 118:src/main.c    **** #ifdef USE_GPS
 119:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 120:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 121:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 122:src/main.c    **** volatile unsigned char usart2_have_data;
 123:src/main.c    **** unsigned char usart2_pckt_bytes;
 124:src/main.c    **** 
 125:src/main.c    **** #endif
 126:src/main.c    **** 
 127:src/main.c    **** // ------- Externals del GSM -------
 128:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 129:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 130:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 131:src/main.c    **** #define gsm_have_data		usart1_have_data
ARM GAS  /tmp/ccxUmJh6.s 			page 28


 132:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 133:src/main.c    **** 
 134:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 135:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 136:src/main.c    **** volatile unsigned char usart2_have_data;
 137:src/main.c    **** unsigned char usart2_pckt_bytes;
 138:src/main.c    **** 
 139:src/main.c    **** //unsigned char AlertasReportar[5] = {0,0,0,0,0};
 140:src/main.c    **** //unsigned char ActDact = 0;
 141:src/main.c    **** //unsigned char claveAct[5] = {0,0,0,0,0};
 142:src/main.c    **** //volatile char USERCODE[8] = "123456";
 143:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 144:src/main.c    **** #endif
 145:src/main.c    **** 
 146:src/main.c    **** //--- VARIABLES GLOBALES ---//
 147:src/main.c    **** parameters_typedef param_struct;
 148:src/main.c    **** 
 149:src/main.c    **** // ------- de los timers -------
 150:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 151:src/main.c    **** volatile unsigned short timer_standby;
 152:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 153:src/main.c    **** //volatile unsigned char display_timer;
 154:src/main.c    **** volatile unsigned char filter_timer;
 155:src/main.c    **** 
 156:src/main.c    **** //volatile unsigned char door_filter;
 157:src/main.c    **** //volatile unsigned char take_sample;
 158:src/main.c    **** //volatile unsigned char move_relay;
 159:src/main.c    **** volatile unsigned short secs = 0;
 160:src/main.c    **** volatile unsigned char hours = 0;
 161:src/main.c    **** volatile unsigned char minutes = 0;
 162:src/main.c    **** 
 163:src/main.c    **** 
 164:src/main.c    **** // ------- del DMX -------
 165:src/main.c    **** volatile unsigned char signal_state = 0;
 166:src/main.c    **** volatile unsigned char dmx_timeout_timer = 0;
 167:src/main.c    **** //unsigned short tim_counter_65ms = 0;
 168:src/main.c    **** 
 169:src/main.c    **** // ------- de los filtros DMX -------
 170:src/main.c    **** #define LARGO_F		32
 171:src/main.c    **** #define DIVISOR_F	5
 172:src/main.c    **** unsigned char vd0 [LARGO_F + 1];
 173:src/main.c    **** unsigned char vd1 [LARGO_F + 1];
 174:src/main.c    **** unsigned char vd2 [LARGO_F + 1];
 175:src/main.c    **** unsigned char vd3 [LARGO_F + 1];
 176:src/main.c    **** unsigned char vd4 [LARGO_F + 1];
 177:src/main.c    **** 
 178:src/main.c    **** 
 179:src/main.c    **** #define IDLE	0
 180:src/main.c    **** #define LOOK_FOR_BREAK	1
 181:src/main.c    **** #define LOOK_FOR_MARK	2
 182:src/main.c    **** #define LOOK_FOR_START	3
 183:src/main.c    **** 
 184:src/main.c    **** 
 185:src/main.c    **** 
 186:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 187:src/main.c    **** void TimingDelay_Decrement(void);
 188:src/main.c    **** void Update_PWM (unsigned short);
ARM GAS  /tmp/ccxUmJh6.s 			page 29


 189:src/main.c    **** void UpdatePackets (void);
 190:src/main.c    **** 
 191:src/main.c    **** // ------- del display -------
 192:src/main.c    **** 
 193:src/main.c    **** 
 194:src/main.c    **** // ------- del DMX -------
 195:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 196:src/main.c    **** #define DMX_TIMEOUT	20
 197:src/main.c    **** 
 198:src/main.c    **** //--- FILTROS DE SENSORES ---//
 199:src/main.c    **** #define LARGO_FILTRO 16
 200:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 201:src/main.c    **** //#define LARGO_FILTRO 32
 202:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 203:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 204:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 205:src/main.c    **** 
 206:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 207:src/main.c    **** 
 208:src/main.c    **** 
 209:src/main.c    **** //-------------------------------------------//
 210:src/main.c    **** // @brief  Main program.
 211:src/main.c    **** // @param  None
 212:src/main.c    **** // @retval None
 213:src/main.c    **** //------------------------------------------//
 214:src/main.c    **** int main(void)
 215:src/main.c    **** {
 425              		.loc 2 215 0
 426              		.cfi_startproc
 427 0000 10B5     		push	{r4, lr}	@
 428              	.LCFI4:
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 4, -8
 431              		.cfi_offset 14, -4
 432 0002 8CB0     		sub	sp, sp, #48	@,,
 433              	.LCFI5:
 434              		.cfi_def_cfa_offset 56
 216:src/main.c    **** 	unsigned char i, ii;
 217:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 435              		.loc 2 217 0
 436 0004 2D23     		movs	r3, #45	@ tmp146,
 437 0006 6B44     		add	r3, r3, sp	@ tmp146,
 438 0008 0022     		movs	r2, #0	@ tmp147,
 439 000a 1A70     		strb	r2, [r3]	@ tmp148, need_ack
 218:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 440              		.loc 2 218 0
 441 000c 0BAB     		add	r3, sp, #44	@ tmp149,,
 442 000e 0022     		movs	r2, #0	@ tmp150,
 443 0010 1A70     		strb	r2, [r3]	@ tmp151, resp
 219:src/main.c    **** 	unsigned short local_meas, local_meas_last;
 220:src/main.c    **** #ifdef USE_REDONDA_BASIC
 221:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 444              		.loc 2 221 0
 445 0012 2E23     		movs	r3, #46	@ tmp152,
 446 0014 6B44     		add	r3, r3, sp	@ tmp152,
 447 0016 0022     		movs	r2, #0	@ tmp153,
 448 0018 1A70     		strb	r2, [r3]	@ tmp154, main_state
ARM GAS  /tmp/ccxUmJh6.s 			page 30


 222:src/main.c    **** #ifdef WITH_HYST
 223:src/main.c    **** 	unsigned short hyst;
 224:src/main.c    **** #endif
 225:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 226:src/main.c    **** 	unsigned char one_to_ten;
 227:src/main.c    **** #endif
 228:src/main.c    **** 
 229:src/main.c    **** #else		//USE_REDONDA_BASIC
 230:src/main.c    **** 	unsigned char main_state = 0;
 231:src/main.c    **** #endif
 232:src/main.c    **** 	char s_lcd [20];
 233:src/main.c    **** 	enum TcpMessages tcp_msg = NONE_MSG;
 449              		.loc 2 233 0
 450 001a 2B23     		movs	r3, #43	@ tmp155,
 451 001c 6B44     		add	r3, r3, sp	@ tmp155,
 452 001e 0022     		movs	r2, #0	@ tmp156,
 453 0020 1A70     		strb	r2, [r3]	@ tmp157, tcp_msg
 234:src/main.c    **** 	unsigned char new_room = 0;
 454              		.loc 2 234 0
 455 0022 2A23     		movs	r3, #42	@ tmp158,
 456 0024 6B44     		add	r3, r3, sp	@ tmp158,
 457 0026 0022     		movs	r2, #0	@ tmp159,
 458 0028 1A70     		strb	r2, [r3]	@ tmp160, new_room
 235:src/main.c    **** 	unsigned char new_lamp = 0;
 459              		.loc 2 235 0
 460 002a 2923     		movs	r3, #41	@ tmp161,
 461 002c 6B44     		add	r3, r3, sp	@ tmp161,
 462 002e 0022     		movs	r2, #0	@ tmp162,
 463 0030 1A70     		strb	r2, [r3]	@ tmp163, new_lamp
 236:src/main.c    **** 	unsigned char last_bright = 0;
 464              		.loc 2 236 0
 465 0032 0AAB     		add	r3, sp, #40	@ tmp164,,
 466 0034 0022     		movs	r2, #0	@ tmp165,
 467 0036 1A70     		strb	r2, [r3]	@ tmp166, last_bright
 237:src/main.c    **** 	unsigned char show_ldr = 0;
 468              		.loc 2 237 0
 469 0038 2723     		movs	r3, #39	@ tmp167,
 470 003a 6B44     		add	r3, r3, sp	@ tmp167,
 471 003c 0022     		movs	r2, #0	@ tmp168,
 472 003e 1A70     		strb	r2, [r3]	@ tmp169, show_ldr
 238:src/main.c    **** 	int dummy_resp = 0;
 473              		.loc 2 238 0
 474 0040 0023     		movs	r3, #0	@ tmp170,
 475 0042 0893     		str	r3, [sp, #32]	@ tmp170, dummy_resp
 239:src/main.c    **** 	unsigned char pps_one = 0;
 476              		.loc 2 239 0
 477 0044 1F23     		movs	r3, #31	@ tmp171,
 478 0046 6B44     		add	r3, r3, sp	@ tmp171,
 479 0048 0022     		movs	r2, #0	@ tmp172,
 480 004a 1A70     		strb	r2, [r3]	@ tmp173, pps_one
 240:src/main.c    **** 
 241:src/main.c    **** #ifdef USE_PROD_PROGRAM
 242:src/main.c    **** 	unsigned char jump_the_menu = 0;
 243:src/main.c    **** #endif
 244:src/main.c    **** 	parameters_typedef * p_mem_init;
 245:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 246:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
ARM GAS  /tmp/ccxUmJh6.s 			page 31


 247:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 248:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 249:src/main.c    ****     //   system_stm32f0xx.c file
 250:src/main.c    **** 
 251:src/main.c    **** 	//GPIO Configuration.
 252:src/main.c    **** 	GPIO_Config();
 481              		.loc 2 252 0
 482 004c FFF7FEFF 		bl	GPIO_Config	@
 253:src/main.c    **** 
 254:src/main.c    **** 
 255:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 256:src/main.c    **** 	if (SysTick_Config(48000))
 483              		.loc 2 256 0
 484 0050 934B     		ldr	r3, .L36	@ tmp174,
 485 0052 1800     		movs	r0, r3	@, tmp174
 486 0054 FFF7FEFF 		bl	SysTick_Config	@
 487 0058 031E     		subs	r3, r0, #0	@ D.6883,,
 488 005a 28D0     		beq	.L13	@,
 489              	.L18:
 257:src/main.c    **** 	{
 258:src/main.c    **** 		while (1)	/* Capture error */
 259:src/main.c    **** 		{
 260:src/main.c    **** 			if (LED)
 490              		.loc 2 260 0
 491 005c 9023     		movs	r3, #144	@ tmp300,
 492 005e DB05     		lsls	r3, r3, #23	@ D.6884, tmp300,
 493 0060 9B8A     		ldrh	r3, [r3, #20]	@ tmp176,
 494 0062 9BB2     		uxth	r3, r3	@ D.6885, tmp176
 495 0064 1A00     		movs	r2, r3	@ D.6886, D.6885
 496 0066 8023     		movs	r3, #128	@ tmp301,
 497 0068 5B01     		lsls	r3, r3, #5	@ tmp177, tmp301,
 498 006a 1340     		ands	r3, r2	@ D.6886, D.6886
 499 006c 05D0     		beq	.L14	@,
 261:src/main.c    **** 				LED_OFF;
 500              		.loc 2 261 0
 501 006e 9023     		movs	r3, #144	@ tmp298,
 502 0070 DB05     		lsls	r3, r3, #23	@ D.6884, tmp298,
 503 0072 8022     		movs	r2, #128	@ tmp299,
 504 0074 5205     		lsls	r2, r2, #21	@ tmp178, tmp299,
 505 0076 9A61     		str	r2, [r3, #24]	@ tmp178, _35->BSRR
 506 0078 04E0     		b	.L15	@
 507              	.L14:
 262:src/main.c    **** 			else
 263:src/main.c    **** 				LED_ON;
 508              		.loc 2 263 0
 509 007a 9023     		movs	r3, #144	@ tmp296,
 510 007c DB05     		lsls	r3, r3, #23	@ D.6884, tmp296,
 511 007e 8022     		movs	r2, #128	@ tmp297,
 512 0080 5201     		lsls	r2, r2, #5	@ tmp179, tmp297,
 513 0082 9A61     		str	r2, [r3, #24]	@ tmp179, _37->BSRR
 514              	.L15:
 264:src/main.c    **** 
 265:src/main.c    **** 			for (i = 0; i < 255; i++)
 515              		.loc 2 265 0
 516 0084 2F23     		movs	r3, #47	@ tmp180,
 517 0086 6B44     		add	r3, r3, sp	@ tmp180,
 518 0088 0022     		movs	r2, #0	@ tmp181,
ARM GAS  /tmp/ccxUmJh6.s 			page 32


 519 008a 1A70     		strb	r2, [r3]	@ tmp182, i
 520 008c 09E0     		b	.L16	@
 521              	.L17:
 266:src/main.c    **** 			{
 267:src/main.c    **** 				asm (	"nop \n\t"
 522              		.loc 2 267 0 discriminator 3
 523              		.syntax divided
 524              	@ 267 "src/main.c" 1
 525 008e C046     		nop 
 526 0090 C046     		nop 
 527 0092 C046     		nop 
 528              		
 529              	@ 0 "" 2
 265:src/main.c    **** 			{
 530              		.loc 2 265 0 discriminator 3
 531              		.thumb
 532              		.syntax unified
 533 0094 2F23     		movs	r3, #47	@ tmp183,
 534 0096 6B44     		add	r3, r3, sp	@ tmp183,
 535 0098 1A78     		ldrb	r2, [r3]	@ D.6887, i
 536 009a 2F23     		movs	r3, #47	@ tmp184,
 537 009c 6B44     		add	r3, r3, sp	@ tmp184,
 538 009e 0132     		adds	r2, r2, #1	@ tmp185,
 539 00a0 1A70     		strb	r2, [r3]	@ tmp186, i
 540              	.L16:
 265:src/main.c    **** 			{
 541              		.loc 2 265 0 is_stmt 0 discriminator 1
 542 00a2 2F23     		movs	r3, #47	@ tmp187,
 543 00a4 6B44     		add	r3, r3, sp	@ tmp187,
 544 00a6 1B78     		ldrb	r3, [r3]	@ tmp188, i
 545 00a8 FF2B     		cmp	r3, #255	@ tmp188,
 546 00aa F0D1     		bne	.L17	@,
 268:src/main.c    **** 						"nop \n\t"
 269:src/main.c    **** 						"nop \n\t" );
 270:src/main.c    **** 			}
 271:src/main.c    **** 		}
 547              		.loc 2 271 0 is_stmt 1
 548 00ac D6E7     		b	.L18	@
 549              	.L13:
 272:src/main.c    **** 	}
 273:src/main.c    **** 
 274:src/main.c    **** 
 275:src/main.c    **** 	//ADC Configuration
 276:src/main.c    **** //	AdcConfig();
 277:src/main.c    **** 
 278:src/main.c    **** 	//TIM Configuration.
 279:src/main.c    **** 	// TIM_3_Init();
 280:src/main.c    **** //	TIM_14_Init();
 281:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 282:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 283:src/main.c    **** 
 284:src/main.c    **** //	EXTIOff ();
 285:src/main.c    **** 
 286:src/main.c    **** //	while (1)
 287:src/main.c    **** //	{
 288:src/main.c    **** //		if (RELAY)
 289:src/main.c    **** //		{
ARM GAS  /tmp/ccxUmJh6.s 			page 33


 290:src/main.c    **** //			RELAY_OFF;
 291:src/main.c    **** //			LED_OFF;
 292:src/main.c    **** //		}
 293:src/main.c    **** //		else
 294:src/main.c    **** //		{
 295:src/main.c    **** //			RELAY_ON;
 296:src/main.c    **** //			LED_ON;
 297:src/main.c    **** //		}
 298:src/main.c    **** //
 299:src/main.c    **** //		for (i = 0; i < 255; i++)
 300:src/main.c    **** //		{
 301:src/main.c    **** //			Update_TIM3_CH1 (i);
 302:src/main.c    **** //			Wait_ms (10);
 303:src/main.c    **** //		}
 304:src/main.c    **** //	}
 305:src/main.c    **** 
 306:src/main.c    **** //		while (1)
 307:src/main.c    **** //		{
 308:src/main.c    **** //			PIN3_OFF;
 309:src/main.c    **** //			Wait_ms (10);
 310:src/main.c    **** //			PIN3_ON;
 311:src/main.c    **** //			Wait_ms (10);
 312:src/main.c    **** //		}
 313:src/main.c    **** 
 314:src/main.c    **** 	//--- Welcome code ---//
 315:src/main.c    **** 	LED_OFF;
 550              		.loc 2 315 0
 551 00ae 9023     		movs	r3, #144	@ tmp290,
 552 00b0 DB05     		lsls	r3, r3, #23	@ D.6884, tmp290,
 553 00b2 8022     		movs	r2, #128	@ tmp291,
 554 00b4 5205     		lsls	r2, r2, #21	@ tmp189, tmp291,
 555 00b6 9A61     		str	r2, [r3, #24]	@ tmp189, _42->BSRR
 316:src/main.c    **** //	EN_GPS_OFF;
 317:src/main.c    **** 	EN_GPS_ON;
 556              		.loc 2 317 0
 557 00b8 9023     		movs	r3, #144	@ tmp292,
 558 00ba DB05     		lsls	r3, r3, #23	@ D.6884, tmp292,
 559 00bc 8022     		movs	r2, #128	@ tmp293,
 560 00be 1202     		lsls	r2, r2, #8	@ tmp190, tmp293,
 561 00c0 9A61     		str	r2, [r3, #24]	@ tmp190, _44->BSRR
 318:src/main.c    **** 	//RELAY_ON;
 319:src/main.c    **** 	RELAY_OFF;
 562              		.loc 2 319 0
 563 00c2 9023     		movs	r3, #144	@ tmp294,
 564 00c4 DB05     		lsls	r3, r3, #23	@ D.6884, tmp294,
 565 00c6 8022     		movs	r2, #128	@ tmp295,
 566 00c8 1205     		lsls	r2, r2, #20	@ tmp191, tmp295,
 567 00ca 9A61     		str	r2, [r3, #24]	@ tmp191, _46->BSRR
 320:src/main.c    **** 
 321:src/main.c    **** 	USART1Config();
 568              		.loc 2 321 0
 569 00cc FFF7FEFF 		bl	USART1Config	@
 322:src/main.c    **** 	USART2Config();
 570              		.loc 2 322 0
 571 00d0 FFF7FEFF 		bl	USART2Config	@
 323:src/main.c    **** 
 324:src/main.c    **** 	EXTIOff();
ARM GAS  /tmp/ccxUmJh6.s 			page 34


 572              		.loc 2 324 0
 573 00d4 FFF7FEFF 		bl	EXTIOff	@
 325:src/main.c    **** 
 326:src/main.c    **** #ifdef USE_REDONDA_BASIC
 327:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 328:src/main.c    **** 	// USART1Config();
 329:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 574              		.loc 2 329 0
 575 00d8 FFF7FEFF 		bl	AdcConfig	@
 330:src/main.c    **** 
 331:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 332:src/main.c    **** 	TIM_3_Init ();
 576              		.loc 2 332 0
 577 00dc FFF7FEFF 		bl	TIM_3_Init	@
 333:src/main.c    **** #endif
 334:src/main.c    **** 
 335:src/main.c    **** 	TIM_16_Init();
 578              		.loc 2 335 0
 579 00e0 FFF7FEFF 		bl	TIM_16_Init	@
 336:src/main.c    **** 	TIM16Enable();
 580              		.loc 2 336 0
 581 00e4 FFF7FEFF 		bl	TIM16Enable	@
 337:src/main.c    **** 
 338:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 582              		.loc 2 338 0
 583 00e8 6E4B     		ldr	r3, .L36+4	@ tmp192,
 584 00ea 1800     		movs	r0, r3	@, tmp192
 585 00ec FFF7FEFF 		bl	Usart2Send	@
 339:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 586              		.loc 2 339 0
 587 00f0 6D4B     		ldr	r3, .L36+8	@ tmp193,
 588 00f2 1800     		movs	r0, r3	@, tmp193
 589 00f4 FFF7FEFF 		bl	Usart2Send	@
 340:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 341:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 590              		.loc 2 341 0
 591 00f8 6C4B     		ldr	r3, .L36+12	@ tmp194,
 592 00fa 1800     		movs	r0, r3	@, tmp194
 593 00fc FFF7FEFF 		bl	Usart2Send	@
 342:src/main.c    **** 	#endif
 343:src/main.c    **** 	#ifdef WITH_HYST
 344:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 594              		.loc 2 344 0
 595 0100 6B4B     		ldr	r3, .L36+16	@ tmp195,
 596 0102 1800     		movs	r0, r3	@, tmp195
 597 0104 FFF7FEFF 		bl	Usart2Send	@
 345:src/main.c    **** 	#endif
 346:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 347:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 348:src/main.c    **** 	#endif
 349:src/main.c    **** 
 350:src/main.c    **** 	for (i = 0; i < 8; i++)
 598              		.loc 2 350 0
 599 0108 2F23     		movs	r3, #47	@ tmp196,
 600 010a 6B44     		add	r3, r3, sp	@ tmp196,
 601 010c 0022     		movs	r2, #0	@ tmp197,
 602 010e 1A70     		strb	r2, [r3]	@ tmp198, i
ARM GAS  /tmp/ccxUmJh6.s 			page 35


 603 0110 1DE0     		b	.L19	@
 604              	.L22:
 351:src/main.c    **** 	{
 352:src/main.c    **** 		if (LED)
 605              		.loc 2 352 0
 606 0112 9023     		movs	r3, #144	@ tmp288,
 607 0114 DB05     		lsls	r3, r3, #23	@ D.6884, tmp288,
 608 0116 9B8A     		ldrh	r3, [r3, #20]	@ tmp200,
 609 0118 9BB2     		uxth	r3, r3	@ D.6885, tmp200
 610 011a 1A00     		movs	r2, r3	@ D.6886, D.6885
 611 011c 8023     		movs	r3, #128	@ tmp289,
 612 011e 5B01     		lsls	r3, r3, #5	@ tmp201, tmp289,
 613 0120 1340     		ands	r3, r2	@ D.6886, D.6886
 614 0122 05D0     		beq	.L20	@,
 353:src/main.c    **** 			LED_OFF;
 615              		.loc 2 353 0
 616 0124 9023     		movs	r3, #144	@ tmp286,
 617 0126 DB05     		lsls	r3, r3, #23	@ D.6884, tmp286,
 618 0128 8022     		movs	r2, #128	@ tmp287,
 619 012a 5205     		lsls	r2, r2, #21	@ tmp202, tmp287,
 620 012c 9A61     		str	r2, [r3, #24]	@ tmp202, _64->BSRR
 621 012e 04E0     		b	.L21	@
 622              	.L20:
 354:src/main.c    **** 		else
 355:src/main.c    **** 			LED_ON;
 623              		.loc 2 355 0
 624 0130 9023     		movs	r3, #144	@ tmp284,
 625 0132 DB05     		lsls	r3, r3, #23	@ D.6884, tmp284,
 626 0134 8022     		movs	r2, #128	@ tmp285,
 627 0136 5201     		lsls	r2, r2, #5	@ tmp203, tmp285,
 628 0138 9A61     		str	r2, [r3, #24]	@ tmp203, _66->BSRR
 629              	.L21:
 356:src/main.c    **** 
 357:src/main.c    **** 		Wait_ms (250);
 630              		.loc 2 357 0 discriminator 2
 631 013a FA20     		movs	r0, #250	@,
 632 013c FFF7FEFF 		bl	Wait_ms	@
 350:src/main.c    **** 	{
 633              		.loc 2 350 0 discriminator 2
 634 0140 2F23     		movs	r3, #47	@ tmp204,
 635 0142 6B44     		add	r3, r3, sp	@ tmp204,
 636 0144 1A78     		ldrb	r2, [r3]	@ D.6887, i
 637 0146 2F23     		movs	r3, #47	@ tmp205,
 638 0148 6B44     		add	r3, r3, sp	@ tmp205,
 639 014a 0132     		adds	r2, r2, #1	@ tmp206,
 640 014c 1A70     		strb	r2, [r3]	@ tmp207, i
 641              	.L19:
 350:src/main.c    **** 	{
 642              		.loc 2 350 0 is_stmt 0 discriminator 1
 643 014e 2F23     		movs	r3, #47	@ tmp208,
 644 0150 6B44     		add	r3, r3, sp	@ tmp208,
 645 0152 1B78     		ldrb	r3, [r3]	@ tmp209, i
 646 0154 072B     		cmp	r3, #7	@ tmp209,
 647 0156 DCD9     		bls	.L22	@,
 358:src/main.c    **** 	}
 359:src/main.c    **** 
 360:src/main.c    **** 	timer_standby = 2000;
ARM GAS  /tmp/ccxUmJh6.s 			page 36


 648              		.loc 2 360 0 is_stmt 1
 649 0158 564B     		ldr	r3, .L36+20	@ tmp210,
 650 015a FA22     		movs	r2, #250	@ tmp283,
 651 015c D200     		lsls	r2, r2, #3	@ tmp211, tmp283,
 652 015e 1A80     		strh	r2, [r3]	@ tmp212, timer_standby
 653              	.L32:
 361:src/main.c    **** 
 362:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 363:src/main.c    **** 	// while (1)
 364:src/main.c    **** 	// {
 365:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 366:src/main.c    **** 	// 	{
 367:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 368:src/main.c    **** 	// 		Wait_ms(10);
 369:src/main.c    **** 	// 	}
 370:src/main.c    **** 	//
 371:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 372:src/main.c    **** 	// 	{
 373:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 374:src/main.c    **** 	// 		Wait_ms(10);
 375:src/main.c    **** 	// 	}
 376:src/main.c    **** 	// }
 377:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 378:src/main.c    **** 
 379:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 380:src/main.c    **** 	// i = 0;
 381:src/main.c    **** 	// while (1)
 382:src/main.c    **** 	// {
 383:src/main.c    **** 	// 	switch (i)
 384:src/main.c    **** 	// 	{
 385:src/main.c    **** 	// 		case 0:
 386:src/main.c    **** 	// 			RelayOn();
 387:src/main.c    **** 	// 			timer_standby = 50;
 388:src/main.c    **** 	// 			LED_ON;
 389:src/main.c    **** 	// 			i++;
 390:src/main.c    **** 	// 			break;
 391:src/main.c    **** 	//
 392:src/main.c    **** 	// 		case 1:
 393:src/main.c    **** 	// 			if (!timer_standby)
 394:src/main.c    **** 	// 			{
 395:src/main.c    **** 	// 				RelayOff();
 396:src/main.c    **** 	// 				LED_OFF;
 397:src/main.c    **** 	// 				i++;
 398:src/main.c    **** 	// 				timer_standby = 10000;
 399:src/main.c    **** 	// 			}
 400:src/main.c    **** 	// 			break;
 401:src/main.c    **** 	//
 402:src/main.c    **** 	// 		case 2:
 403:src/main.c    **** 	// 			if (!timer_standby)
 404:src/main.c    **** 	// 			{
 405:src/main.c    **** 	// 				i = 0;
 406:src/main.c    **** 	// 			}
 407:src/main.c    **** 	// 			break;
 408:src/main.c    **** 	// 	}
 409:src/main.c    **** 	//
 410:src/main.c    **** 	// 	UpdateRelay ();
 411:src/main.c    **** 	// }
ARM GAS  /tmp/ccxUmJh6.s 			page 37


 412:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 413:src/main.c    **** 
 414:src/main.c    **** 	while (1)
 415:src/main.c    **** 	{
 416:src/main.c    **** 		switch (main_state)
 654              		.loc 2 416 0
 655 0160 2E23     		movs	r3, #46	@ tmp213,
 656 0162 6B44     		add	r3, r3, sp	@ tmp213,
 657 0164 1B78     		ldrb	r3, [r3]	@ D.6886, main_state
 658 0166 012B     		cmp	r3, #1	@ D.6886,
 659 0168 15D0     		beq	.L24	@,
 660 016a 022B     		cmp	r3, #2	@ D.6886,
 661 016c 34D0     		beq	.L25	@,
 662 016e 002B     		cmp	r3, #0	@ D.6886,
 663 0170 00D0     		beq	.LCB409	@
 664 0172 71E0     		b	.L33	@long jump	@
 665              	.LCB409:
 417:src/main.c    **** 		{
 418:src/main.c    **** 			case MAIN_INIT:
 419:src/main.c    **** 				RelayOff();
 666              		.loc 2 419 0
 667 0174 FFF7FEFF 		bl	RelayOff	@
 420:src/main.c    **** 				LED_OFF;
 668              		.loc 2 420 0
 669 0178 9023     		movs	r3, #144	@ tmp281,
 670 017a DB05     		lsls	r3, r3, #23	@ D.6884, tmp281,
 671 017c 8022     		movs	r2, #128	@ tmp282,
 672 017e 5205     		lsls	r2, r2, #21	@ tmp214, tmp282,
 673 0180 9A61     		str	r2, [r3, #24]	@ tmp214, _74->BSRR
 421:src/main.c    **** 				FillPhotoBuffer();
 674              		.loc 2 421 0
 675 0182 FFF7FEFF 		bl	FillPhotoBuffer	@
 422:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 423:src/main.c    **** 				FillTempBuffer();
 424:src/main.c    **** #endif
 425:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 426:src/main.c    **** 				Update_TIM3_CH1 (0);
 676              		.loc 2 426 0
 677 0186 0020     		movs	r0, #0	@,
 678 0188 FFF7FEFF 		bl	Update_TIM3_CH1	@
 427:src/main.c    **** #endif
 428:src/main.c    **** 				main_state = LAMP_OFF;
 679              		.loc 2 428 0
 680 018c 2E23     		movs	r3, #46	@ tmp215,
 681 018e 6B44     		add	r3, r3, sp	@ tmp215,
 682 0190 0122     		movs	r2, #1	@ tmp216,
 683 0192 1A70     		strb	r2, [r3]	@ tmp217, main_state
 429:src/main.c    **** 				break;
 684              		.loc 2 429 0
 685 0194 68E0     		b	.L27	@
 686              	.L24:
 430:src/main.c    **** 
 431:src/main.c    **** 			case LAMP_OFF:
 432:src/main.c    **** 				if (!tt_relay_on_off)
 687              		.loc 2 432 0
 688 0196 484B     		ldr	r3, .L36+24	@ tmp218,
 689 0198 1B88     		ldrh	r3, [r3]	@ tmp219, tt_relay_on_off
ARM GAS  /tmp/ccxUmJh6.s 			page 38


 690 019a 9BB2     		uxth	r3, r3	@ D.6885, tmp219
 691 019c 002B     		cmp	r3, #0	@ D.6885,
 692 019e 60D1     		bne	.L34	@,
 433:src/main.c    **** 				{
 434:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 693              		.loc 2 434 0
 694 01a0 FFF7FEFF 		bl	GetPhoto	@
 695 01a4 0300     		movs	r3, r0	@ tmp220,
 696 01a6 1A1E     		subs	r2, r3, #0	@ D.6885, tmp221,
 697 01a8 444B     		ldr	r3, .L36+28	@ tmp222,
 698 01aa 9A42     		cmp	r2, r3	@ D.6885, tmp222
 699 01ac 59D9     		bls	.L34	@,
 435:src/main.c    **** 					{
 436:src/main.c    **** 						main_state = LAMP_ON;
 700              		.loc 2 436 0
 701 01ae 2E23     		movs	r3, #46	@ tmp223,
 702 01b0 6B44     		add	r3, r3, sp	@ tmp223,
 703 01b2 0222     		movs	r2, #2	@ tmp224,
 704 01b4 1A70     		strb	r2, [r3]	@ tmp225, main_state
 437:src/main.c    **** 						tt_relay_on_off = 10000;
 705              		.loc 2 437 0
 706 01b6 404B     		ldr	r3, .L36+24	@ tmp226,
 707 01b8 414A     		ldr	r2, .L36+32	@ tmp227,
 708 01ba 1A80     		strh	r2, [r3]	@ tmp228, tt_relay_on_off
 438:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 439:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 709              		.loc 2 439 0
 710 01bc 1A20     		movs	r0, #26	@,
 711 01be FFF7FEFF 		bl	Update_TIM3_CH1	@
 440:src/main.c    **** 	#endif
 441:src/main.c    **** 
 442:src/main.c    **** 						RelayOn();
 712              		.loc 2 442 0
 713 01c2 FFF7FEFF 		bl	RelayOn	@
 443:src/main.c    **** 						LED_ON;
 714              		.loc 2 443 0
 715 01c6 9023     		movs	r3, #144	@ tmp279,
 716 01c8 DB05     		lsls	r3, r3, #23	@ D.6884, tmp279,
 717 01ca 8022     		movs	r2, #128	@ tmp280,
 718 01cc 5201     		lsls	r2, r2, #5	@ tmp229, tmp280,
 719 01ce 9A61     		str	r2, [r3, #24]	@ tmp229, _86->BSRR
 444:src/main.c    **** 	#ifdef WITH_HYST
 445:src/main.c    **** 						hours = 0;
 720              		.loc 2 445 0
 721 01d0 3C4B     		ldr	r3, .L36+36	@ tmp230,
 722 01d2 0022     		movs	r2, #0	@ tmp231,
 723 01d4 1A70     		strb	r2, [r3]	@ tmp232, hours
 446:src/main.c    **** 	#endif
 447:src/main.c    **** 					}
 448:src/main.c    **** 				}
 449:src/main.c    **** 				break;
 724              		.loc 2 449 0
 725 01d6 44E0     		b	.L34	@
 726              	.L25:
 450:src/main.c    **** 
 451:src/main.c    **** 			case LAMP_ON:
 452:src/main.c    **** 				if (!tt_relay_on_off)
ARM GAS  /tmp/ccxUmJh6.s 			page 39


 727              		.loc 2 452 0
 728 01d8 374B     		ldr	r3, .L36+24	@ tmp233,
 729 01da 1B88     		ldrh	r3, [r3]	@ tmp234, tt_relay_on_off
 730 01dc 9BB2     		uxth	r3, r3	@ D.6885, tmp234
 731 01de 002B     		cmp	r3, #0	@ D.6885,
 732 01e0 23D1     		bne	.L29	@,
 453:src/main.c    **** 				{
 454:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 455:src/main.c    **** 					hyst = GetHysteresis (hours);
 733              		.loc 2 455 0
 734 01e2 384B     		ldr	r3, .L36+36	@ tmp235,
 735 01e4 1B78     		ldrb	r3, [r3]	@ tmp236, hours
 736 01e6 DBB2     		uxtb	r3, r3	@ D.6887, tmp236
 737 01e8 07AC     		add	r4, sp, #28	@ tmp237,,
 738 01ea 1800     		movs	r0, r3	@, D.6887
 739 01ec FFF7FEFF 		bl	GetHysteresis	@
 740 01f0 0300     		movs	r3, r0	@ tmp238,
 741 01f2 2380     		strh	r3, [r4]	@ tmp240, hyst
 456:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 742              		.loc 2 456 0
 743 01f4 FFF7FEFF 		bl	GetPhoto	@
 744 01f8 0300     		movs	r3, r0	@ tmp241,
 745 01fa 1900     		movs	r1, r3	@ D.6886, D.6885
 746 01fc 07AB     		add	r3, sp, #28	@ tmp243,,
 747 01fe 1B88     		ldrh	r3, [r3]	@ D.6886, hyst
 748 0200 2E4A     		ldr	r2, .L36+28	@ tmp244,
 749 0202 D31A     		subs	r3, r2, r3	@ D.6886, tmp244, D.6886
 750 0204 9942     		cmp	r1, r3	@ D.6886, D.6886
 751 0206 10DA     		bge	.L29	@,
 457:src/main.c    **** 	#else
 458:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 459:src/main.c    **** 	#endif
 460:src/main.c    **** 					{
 461:src/main.c    **** 						main_state = LAMP_OFF;
 752              		.loc 2 461 0
 753 0208 2E23     		movs	r3, #46	@ tmp245,
 754 020a 6B44     		add	r3, r3, sp	@ tmp245,
 755 020c 0122     		movs	r2, #1	@ tmp246,
 756 020e 1A70     		strb	r2, [r3]	@ tmp247, main_state
 462:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 463:src/main.c    **** 						Update_TIM3_CH1 (0);
 757              		.loc 2 463 0
 758 0210 0020     		movs	r0, #0	@,
 759 0212 FFF7FEFF 		bl	Update_TIM3_CH1	@
 464:src/main.c    **** 	#endif
 465:src/main.c    **** 						tt_relay_on_off = 10000;
 760              		.loc 2 465 0
 761 0216 284B     		ldr	r3, .L36+24	@ tmp248,
 762 0218 294A     		ldr	r2, .L36+32	@ tmp249,
 763 021a 1A80     		strh	r2, [r3]	@ tmp250, tt_relay_on_off
 466:src/main.c    **** 						RelayOff();
 764              		.loc 2 466 0
 765 021c FFF7FEFF 		bl	RelayOff	@
 467:src/main.c    **** 						LED_OFF;
 766              		.loc 2 467 0
 767 0220 9023     		movs	r3, #144	@ tmp277,
 768 0222 DB05     		lsls	r3, r3, #23	@ D.6884, tmp277,
ARM GAS  /tmp/ccxUmJh6.s 			page 40


 769 0224 8022     		movs	r2, #128	@ tmp278,
 770 0226 5205     		lsls	r2, r2, #21	@ tmp251, tmp278,
 771 0228 9A61     		str	r2, [r3, #24]	@ tmp251, _102->BSRR
 772              	.L29:
 468:src/main.c    **** 					}
 469:src/main.c    **** 				}
 470:src/main.c    **** 
 471:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 472:src/main.c    **** 				if (main_state == LAMP_ON)
 773              		.loc 2 472 0
 774 022a 2E23     		movs	r3, #46	@ tmp252,
 775 022c 6B44     		add	r3, r3, sp	@ tmp252,
 776 022e 1B78     		ldrb	r3, [r3]	@ tmp253, main_state
 777 0230 022B     		cmp	r3, #2	@ tmp253,
 778 0232 18D1     		bne	.L35	@,
 473:src/main.c    **** 				{
 474:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
 779              		.loc 2 474 0
 780 0234 FFF7FEFF 		bl	GetPhoto	@
 781 0238 0300     		movs	r3, r0	@ tmp254,
 782 023a 1B24     		movs	r4, #27	@ tmp256,
 783 023c 6C44     		add	r4, r4, sp	@ tmp256,
 784 023e 1800     		movs	r0, r3	@, D.6885
 785 0240 FFF7FEFF 		bl	GetNew1to10	@
 786 0244 0300     		movs	r3, r0	@ tmp257,
 787 0246 2370     		strb	r3, [r4]	@ tmp259, one_to_ten
 475:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
 788              		.loc 2 475 0
 789 0248 1B23     		movs	r3, #27	@ tmp260,
 790 024a 6B44     		add	r3, r3, sp	@ tmp260,
 791 024c 1B78     		ldrb	r3, [r3]	@ tmp262, one_to_ten
 792 024e 9BB2     		uxth	r3, r3	@ D.6885, tmp261
 793 0250 1800     		movs	r0, r3	@, D.6885
 794 0252 FFF7FEFF 		bl	Update_TIM3_CH1	@
 476:src/main.c    **** 				}
 477:src/main.c    **** 	#endif
 478:src/main.c    **** 				break;
 795              		.loc 2 478 0
 796 0256 06E0     		b	.L35	@
 797              	.L33:
 479:src/main.c    **** 
 480:src/main.c    **** 			default:
 481:src/main.c    **** 				main_state = MAIN_INIT;
 798              		.loc 2 481 0
 799 0258 2E23     		movs	r3, #46	@ tmp263,
 800 025a 6B44     		add	r3, r3, sp	@ tmp263,
 801 025c 0022     		movs	r2, #0	@ tmp264,
 802 025e 1A70     		strb	r2, [r3]	@ tmp265, main_state
 482:src/main.c    **** 				break;
 803              		.loc 2 482 0
 804 0260 02E0     		b	.L27	@
 805              	.L34:
 449:src/main.c    **** 
 806              		.loc 2 449 0
 807 0262 C046     		nop
 808 0264 00E0     		b	.L27	@
 809              	.L35:
ARM GAS  /tmp/ccxUmJh6.s 			page 41


 478:src/main.c    **** 
 810              		.loc 2 478 0
 811 0266 C046     		nop
 812              	.L27:
 483:src/main.c    **** 		}
 484:src/main.c    **** 
 485:src/main.c    **** 		if (!timer_standby)
 813              		.loc 2 485 0
 814 0268 124B     		ldr	r3, .L36+20	@ tmp266,
 815 026a 1B88     		ldrh	r3, [r3]	@ tmp267, timer_standby
 816 026c 9BB2     		uxth	r3, r3	@ D.6885, tmp267
 817 026e 002B     		cmp	r3, #0	@ D.6885,
 818 0270 10D1     		bne	.L31	@,
 486:src/main.c    **** 		{
 487:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 488:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
 489:src/main.c    **** #else
 490:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
 819              		.loc 2 490 0
 820 0272 FFF7FEFF 		bl	GetPhoto	@
 821 0276 0300     		movs	r3, r0	@ tmp268,
 822 0278 1A00     		movs	r2, r3	@ D.6886, D.6885
 823 027a 1349     		ldr	r1, .L36+40	@ tmp270,
 824 027c 01AB     		add	r3, sp, #4	@ tmp271,,
 825 027e 1800     		movs	r0, r3	@, tmp271
 826 0280 FFF7FEFF 		bl	sprintf	@
 491:src/main.c    **** #endif
 492:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 493:src/main.c    **** 			Usart2Send(s_lcd);
 827              		.loc 2 493 0
 828 0284 01AB     		add	r3, sp, #4	@ tmp272,,
 829 0286 1800     		movs	r0, r3	@, tmp272
 830 0288 FFF7FEFF 		bl	Usart2Send	@
 494:src/main.c    **** 			timer_standby = 2000;
 831              		.loc 2 494 0
 832 028c 094B     		ldr	r3, .L36+20	@ tmp273,
 833 028e FA22     		movs	r2, #250	@ tmp276,
 834 0290 D200     		lsls	r2, r2, #3	@ tmp274, tmp276,
 835 0292 1A80     		strh	r2, [r3]	@ tmp275, timer_standby
 836              	.L31:
 495:src/main.c    **** 		}
 496:src/main.c    **** 
 497:src/main.c    **** 		//Cosas que no dependen del estado del programa
 498:src/main.c    **** 		UpdateRelay ();
 837              		.loc 2 498 0
 838 0294 FFF7FEFF 		bl	UpdateRelay	@
 499:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 500:src/main.c    **** 		UpdateTemp();
 501:src/main.c    **** #endif
 502:src/main.c    **** 		UpdatePhotoTransistor();
 839              		.loc 2 502 0
 840 0298 FFF7FEFF 		bl	UpdatePhotoTransistor	@
 503:src/main.c    **** 	}	//end while 1
 841              		.loc 2 503 0
 842 029c 60E7     		b	.L32	@
 843              	.L37:
 844 029e C046     		.align	2
ARM GAS  /tmp/ccxUmJh6.s 			page 42


 845              	.L36:
 846 02a0 80BB0000 		.word	48000
 847 02a4 00000000 		.word	.LC0
 848 02a8 28000000 		.word	.LC2
 849 02ac 38000000 		.word	.LC4
 850 02b0 4C000000 		.word	.LC6
 851 02b4 00000000 		.word	timer_standby
 852 02b8 00000000 		.word	tt_relay_on_off
 853 02bc 8A0E0000 		.word	3722
 854 02c0 10270000 		.word	10000
 855 02c4 00000000 		.word	hours
 856 02c8 64000000 		.word	.LC11
 857              		.cfi_endproc
 858              	.LFE20:
 859              		.size	main, .-main
 860              		.section	.rodata
 861              		.align	2
 862              	.LC13:
 863 0070 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 863      3A7B226D 
 863      794E616D 
 863      65223A22 
 863      4E75636C 
 864              		.align	2
 865              	.LC15:
 866 0088 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 866      54656D70 
 866      65726174 
 866      75726522 
 866      3A256C75 
 867 00a1 000000   		.align	2
 868              	.LC17:
 869 00a4 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 869      48756D69 
 869      64697479 
 869      223A256C 
 869      752E256C 
 870 00ba 0000     		.align	2
 871              	.LC19:
 872 00bc 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 872      50726573 
 872      73757265 
 872      223A256C 
 872      752E256C 
 873 00d2 0000     		.align	2
 874              	.LC21:
 875 00d4 7D7D00   		.ascii	"}}\000"
 876              		.section	.text.prepare_json_pkt,"ax",%progbits
 877              		.align	2
 878              		.global	prepare_json_pkt
 879              		.code	16
 880              		.thumb_func
 881              		.type	prepare_json_pkt, %function
 882              	prepare_json_pkt:
 883              	.LFB21:
 504:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
 505:src/main.c    **** #endif	//USE_REDONDA_BASIC
ARM GAS  /tmp/ccxUmJh6.s 			page 43


 506:src/main.c    **** 
 507:src/main.c    **** 
 508:src/main.c    **** #ifdef USE_MQTT_LIB
 509:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 510:src/main.c    **** 	int rc = 0;
 511:src/main.c    **** 	char buf[200];
 512:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
 513:src/main.c    **** 	char* payload = "mypayload";
 514:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
 515:src/main.c    **** 	int len = 0;
 516:src/main.c    **** 
 517:src/main.c    **** 	data.clientID.cstring = "me";
 518:src/main.c    **** 	data.keepAliveInterval = 20;
 519:src/main.c    **** 	data.cleansession = 1;
 520:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
 521:src/main.c    **** 
 522:src/main.c    **** 	topicString.cstring = "mytopic";
 523:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
 524:src/main.c    **** 
 525:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
 526:src/main.c    **** 	//falta abrir puerto
 527:src/main.c    **** 	//falta enviar al socket
 528:src/main.c    **** 	//falta cerrar socket
 529:src/main.c    **** #endif
 530:src/main.c    **** 
 531:src/main.c    **** //	//---------- Prueba USART2 --------//
 532:src/main.c    **** //
 533:src/main.c    **** //    while( 1 )
 534:src/main.c    **** //    {
 535:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 536:src/main.c    **** //        Wait_ms(3000);
 537:src/main.c    **** //    }
 538:src/main.c    **** //
 539:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
 540:src/main.c    **** 
 541:src/main.c    **** 	//---------- Prueba con GPS --------//
 542:src/main.c    **** #ifdef USE_GPS
 543:src/main.c    **** 	Usart2SendSingle('M');
 544:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 545:src/main.c    **** 	Wait_ms(1000);
 546:src/main.c    **** 
 547:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
 548:src/main.c    **** 
 549:src/main.c    **** 	//mando reset al gps
 550:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
 551:src/main.c    **** 	GPSStartResetSM ();
 552:src/main.c    **** 	while (GPSStart() != RESP_OK);
 553:src/main.c    **** 
 554:src/main.c    **** 	//mando conf al gps
 555:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
 556:src/main.c    **** 	GPSConfigResetSM ();
 557:src/main.c    **** 	while (GPSConfig() != RESP_OK);
 558:src/main.c    **** 
 559:src/main.c    **** //	//mando reset factory al gps
 560:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
 561:src/main.c    **** //	GPSResetFactoryResetSM ();
 562:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
ARM GAS  /tmp/ccxUmJh6.s 			page 44


 563:src/main.c    **** 
 564:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
 565:src/main.c    **** //	timer_standby = 60000;
 566:src/main.c    **** //	while( timer_standby )
 567:src/main.c    **** 	while( 1 )
 568:src/main.c    **** 	{
 569:src/main.c    **** 		if (gps_pckt_ready)
 570:src/main.c    **** 		{
 571:src/main.c    **** 			gps_pckt_ready = 0;
 572:src/main.c    **** 			//Usart2SendSingle('P');
 573:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
 574:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
 575:src/main.c    **** 		}
 576:src/main.c    **** 
 577:src/main.c    **** 		GPSProcess();
 578:src/main.c    **** 	}
 579:src/main.c    **** #endif
 580:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
 581:src/main.c    **** 
 582:src/main.c    **** 	//---------- Prueba con GSM --------//
 583:src/main.c    **** #ifdef USE_GSM
 584:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
 585:src/main.c    **** 
 586:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 587:src/main.c    **** 
 588:src/main.c    **** 
 589:src/main.c    **** 	//Pruebo USART1
 590:src/main.c    **** //	while (1)
 591:src/main.c    **** //	{
 592:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
 593:src/main.c    **** //			Wait_ms(50);
 594:src/main.c    **** //	}
 595:src/main.c    **** 
 596:src/main.c    **** 
 597:src/main.c    **** 	//mando start al gsm
 598:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 599:src/main.c    **** 	//GPSStartResetSM ();
 600:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 601:src/main.c    **** 	while (timer_standby)
 602:src/main.c    **** 	{
 603:src/main.c    **** 		i = GSM_Start();
 604:src/main.c    **** 		if (i == 2)
 605:src/main.c    **** 		{
 606:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 607:src/main.c    **** 			timer_standby = 0;
 608:src/main.c    **** 		}
 609:src/main.c    **** 
 610:src/main.c    **** 		if (i == 4)
 611:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 612:src/main.c    **** 	}
 613:src/main.c    **** 
 614:src/main.c    **** 	//mando conf al gsm
 615:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
 616:src/main.c    **** 	//GPSConfigResetSM ();
 617:src/main.c    **** 
 618:src/main.c    **** 	i = 0;
 619:src/main.c    **** 	while (i == 0)
ARM GAS  /tmp/ccxUmJh6.s 			page 45


 620:src/main.c    **** 	{
 621:src/main.c    **** 		ii = GSM_Config(1000);
 622:src/main.c    **** 
 623:src/main.c    **** 		if (ii == 2)
 624:src/main.c    **** 			i = 0;
 625:src/main.c    **** 		else if (ii > 2)
 626:src/main.c    **** 		{
 627:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
 628:src/main.c    **** 			while (1);
 629:src/main.c    **** 		}
 630:src/main.c    **** 
 631:src/main.c    **** 		GSMProcess();
 632:src/main.c    **** 		GSMReceive ();
 633:src/main.c    **** 
 634:src/main.c    **** 		if (gsm_pckt_ready)
 635:src/main.c    **** 		{
 636:src/main.c    **** 			gsm_pckt_ready = 0;
 637:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 638:src/main.c    **** 		}
 639:src/main.c    **** 
 640:src/main.c    **** 		if (LIGHT)
 641:src/main.c    **** 			LED_ON;
 642:src/main.c    **** 		else
 643:src/main.c    **** 			LED_OFF;
 644:src/main.c    **** 	}
 645:src/main.c    **** 
 646:src/main.c    **** 
 647:src/main.c    **** 	while( 1 )
 648:src/main.c    **** 	{
 649:src/main.c    **** 		if (gsm_pckt_ready)
 650:src/main.c    **** 		{
 651:src/main.c    **** 			gsm_pckt_ready = 0;
 652:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 653:src/main.c    **** 		}
 654:src/main.c    **** 
 655:src/main.c    **** 		GSMProcess();
 656:src/main.c    **** 
 657:src/main.c    **** 		if (LIGHT)
 658:src/main.c    **** 			LED_ON;
 659:src/main.c    **** 
 660:src/main.c    **** 	}
 661:src/main.c    **** #endif
 662:src/main.c    **** 
 663:src/main.c    **** 	//---------- Pruebas con GSM GATEWAY --------//
 664:src/main.c    **** #ifdef USE_GSM_GATEWAY
 665:src/main.c    **** 	LED_OFF;
 666:src/main.c    **** 	for (i = 0; i < 6; i++)
 667:src/main.c    **** 	{
 668:src/main.c    **** 		if (LED)
 669:src/main.c    **** 			LED_OFF;
 670:src/main.c    **** 		else
 671:src/main.c    **** 			LED_ON;
 672:src/main.c    **** 
 673:src/main.c    **** 		Wait_ms (300);
 674:src/main.c    **** 	}
 675:src/main.c    **** 	Wait_ms (3000);
 676:src/main.c    **** 
ARM GAS  /tmp/ccxUmJh6.s 			page 46


 677:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 678:src/main.c    **** 
 679:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 680:src/main.c    **** 
 681:src/main.c    **** 
 682:src/main.c    **** 	//mando start al gsm
 683:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 684:src/main.c    **** 	//GPSStartResetSM ();
 685:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 686:src/main.c    **** 	while (timer_standby)
 687:src/main.c    **** 	{
 688:src/main.c    **** 		i = GSM_Start();
 689:src/main.c    **** 		if (i == 2)
 690:src/main.c    **** 		{
 691:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 692:src/main.c    **** 			timer_standby = 0;
 693:src/main.c    **** 		}
 694:src/main.c    **** 		else
 695:src/main.c    **** 
 696:src/main.c    **** 		if (i == 4)
 697:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 698:src/main.c    **** 	}
 699:src/main.c    **** 
 700:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 701:src/main.c    **** 
 702:src/main.c    **** 	while (1)
 703:src/main.c    **** 	{
 704:src/main.c    **** 		GSMProcess();
 705:src/main.c    **** 
 706:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 707:src/main.c    **** 		{
 708:src/main.c    **** 			usart2_pckt_ready = 0;
 709:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 710:src/main.c    **** 		}
 711:src/main.c    **** 
 712:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 713:src/main.c    **** 		{
 714:src/main.c    **** 			gsm_pckt_ready = 0;
 715:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 716:src/main.c    **** 		}
 717:src/main.c    **** 
 718:src/main.c    **** 		if (LIGHT)
 719:src/main.c    **** 			LED_ON;
 720:src/main.c    **** 		else
 721:src/main.c    **** 			LED_OFF;
 722:src/main.c    **** 	}
 723:src/main.c    **** #endif
 724:src/main.c    **** 
 725:src/main.c    **** 	//---------- Fin Prueba con GSM GATEWAY --------//
 726:src/main.c    **** 
 727:src/main.c    **** 
 728:src/main.c    **** 
 729:src/main.c    **** 	//---------- Prueba temp --------//
 730:src/main.c    **** 	/*
 731:src/main.c    **** 	while (1)
 732:src/main.c    **** 	{
 733:src/main.c    **** 		local_meas = GetTemp();
ARM GAS  /tmp/ccxUmJh6.s 			page 47


 734:src/main.c    **** 		if (local_meas != local_meas_last)
 735:src/main.c    **** 		{
 736:src/main.c    **** 			LED_ON;
 737:src/main.c    **** 			local_meas_last = local_meas;
 738:src/main.c    **** 			LCD_2DO_RENGLON;
 739:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
 740:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
 741:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
 742:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
 743:src/main.c    **** 			LCDTransmitStr(s_lcd);
 744:src/main.c    **** 			LED_OFF;
 745:src/main.c    **** 		}
 746:src/main.c    **** 
 747:src/main.c    **** 		UpdateTemp();
 748:src/main.c    **** 	}
 749:src/main.c    **** 	*/
 750:src/main.c    **** 	//---------- Fin prueba temp --------//
 751:src/main.c    **** 
 752:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
 753:src/main.c    **** 	/*
 754:src/main.c    **** 	local_meas = 0;
 755:src/main.c    **** 	while (1)
 756:src/main.c    **** 	{
 757:src/main.c    **** 		LCD_2DO_RENGLON;
 758:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
 759:src/main.c    **** 		fcalc = local_meas;
 760:src/main.c    **** 		fcalc = fcalc * K_1TO10;
 761:src/main.c    **** 		one_int = (short) fcalc;
 762:src/main.c    **** 		fcalc = fcalc - one_int;
 763:src/main.c    **** 		fcalc = fcalc * 10;
 764:src/main.c    **** 		one_dec = (short) fcalc;
 765:src/main.c    **** 
 766:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
 767:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
 768:src/main.c    **** 		LCDTransmitStr(s_lcd);
 769:src/main.c    **** 
 770:src/main.c    **** 		Wait_ms (1000);
 771:src/main.c    **** 		if (local_meas <= 255)
 772:src/main.c    **** 			local_meas = 0;
 773:src/main.c    **** 		else
 774:src/main.c    **** 			local_meas++;
 775:src/main.c    **** 	}
 776:src/main.c    **** 	*/
 777:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
 778:src/main.c    **** 
 779:src/main.c    ****     //---------- Programa de Certificacion S.E. --------//
 780:src/main.c    **** #ifdef USE_CE_PROGRAM
 781:src/main.c    **** 	while (1)
 782:src/main.c    **** 	{
 783:src/main.c    **** 		resp = FuncStandAloneCert();
 784:src/main.c    **** 
 785:src/main.c    **** 
 786:src/main.c    **** 		UpdateSwitches();
 787:src/main.c    **** 		UpdateACSwitch();
 788:src/main.c    **** 		UpdatePackets();
 789:src/main.c    **** 		UpdateTemp();
 790:src/main.c    **** 		UpdateIGrid();
ARM GAS  /tmp/ccxUmJh6.s 			page 48


 791:src/main.c    **** 		UpdateVGrid();
 792:src/main.c    **** 
 793:src/main.c    **** 	}	//termina while(1)
 794:src/main.c    **** #endif
 795:src/main.c    **** 	//---------- Fin Programa de Certificacion S.E. --------//
 796:src/main.c    **** 
 797:src/main.c    ****     //---------- Programa de Produccion --------//
 798:src/main.c    **** #ifdef USE_PROD_PROGRAM
 799:src/main.c    **** 	//--- PRUEBA FUNCION MAIN_MENU
 800:src/main.c    **** 	//leo la memoria, si tengo configuracion de modo
 801:src/main.c    **** 	//entro directo, sino a Main Menu
 802:src/main.c    **** 	if (saved_mode == 0xFF)	//memoria borrada
 803:src/main.c    **** 		main_state = MAIN_INIT;
 804:src/main.c    **** 	else
 805:src/main.c    **** 		jump_the_menu = RESP_YES;
 806:src/main.c    **** 
 807:src/main.c    **** #ifdef VER_1_2
 808:src/main.c    **** 	Update_TIM3_CH2 (255);
 809:src/main.c    **** #endif
 810:src/main.c    **** 	//Wait_ms(2000);
 811:src/main.c    **** 	while (1)
 812:src/main.c    **** 	{
 813:src/main.c    **** 		switch (main_state)
 814:src/main.c    **** 		{
 815:src/main.c    **** 			case MAIN_INIT:
 816:src/main.c    **** 				resp = FuncMainMenu();
 817:src/main.c    **** 
 818:src/main.c    **** 				if (resp == MAINMENU_SHOW_STANDALONE_SELECTED)	//TODO deberia forzar init
 819:src/main.c    **** 					main_state = MAIN_STAND_ALONE;
 820:src/main.c    **** 
 821:src/main.c    **** 				if (resp == MAINMENU_SHOW_GROUPED_SELECTED)
 822:src/main.c    **** 					main_state = MAIN_GROUPED;
 823:src/main.c    **** 
 824:src/main.c    **** 				if (resp == MAINMENU_SHOW_NETWORK_SELECTED)
 825:src/main.c    **** 					main_state = MAIN_NETWORKED;
 826:src/main.c    **** 
 827:src/main.c    **** 				jump_the_menu = RESP_NO;
 828:src/main.c    **** 				break;
 829:src/main.c    **** 
 830:src/main.c    **** 			case MAIN_STAND_ALONE:
 831:src/main.c    **** 				resp = FuncStandAlone();
 832:src/main.c    **** 
 833:src/main.c    **** 				if (resp == RESP_CHANGE_ALL_UP)
 834:src/main.c    **** 				{
 835:src/main.c    **** 					FuncStandAloneReset();
 836:src/main.c    **** 					main_state = MAIN_INIT;
 837:src/main.c    **** 				}
 838:src/main.c    **** 
 839:src/main.c    **** 				break;
 840:src/main.c    **** 
 841:src/main.c    **** 			case MAIN_GROUPED:
 842:src/main.c    **** 				resp = FuncGrouped();
 843:src/main.c    **** 
 844:src/main.c    **** 				if (resp == RESP_CHANGE_ALL_UP)
 845:src/main.c    **** 				{
 846:src/main.c    **** 					FuncGroupedReset();
 847:src/main.c    **** 					main_state = MAIN_INIT;
ARM GAS  /tmp/ccxUmJh6.s 			page 49


 848:src/main.c    **** 				}
 849:src/main.c    **** 
 850:src/main.c    **** 				break;
 851:src/main.c    **** 
 852:src/main.c    **** 			case MAIN_NETWORKED:
 853:src/main.c    **** 				resp = FuncNetworked(jump_the_menu);
 854:src/main.c    **** 				jump_the_menu = RESP_NO_CHANGE;
 855:src/main.c    **** 				main_state++;
 856:src/main.c    **** 				break;
 857:src/main.c    **** 
 858:src/main.c    **** 			case MAIN_NETWORKED_1:
 859:src/main.c    **** 				resp = FuncNetworked(jump_the_menu);
 860:src/main.c    **** 
 861:src/main.c    **** 				if (resp == RESP_CHANGE_ALL_UP)
 862:src/main.c    **** 					main_state = MAIN_INIT;
 863:src/main.c    **** 
 864:src/main.c    **** 				break;
 865:src/main.c    **** 
 866:src/main.c    **** 			default:
 867:src/main.c    **** 				main_state = MAIN_INIT;
 868:src/main.c    **** 				break;
 869:src/main.c    **** 
 870:src/main.c    **** 		}
 871:src/main.c    **** 
 872:src/main.c    **** 		UpdateSwitches();
 873:src/main.c    **** 		UpdateACSwitch();
 874:src/main.c    **** 		UpdatePackets();
 875:src/main.c    **** 	}
 876:src/main.c    **** 
 877:src/main.c    **** 	//--- FIN PRUEBA FUNCION MAIN_MENU
 878:src/main.c    **** #endif
 879:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
 880:src/main.c    **** 
 881:src/main.c    **** 	return 0;
 882:src/main.c    **** }
 883:src/main.c    **** 
 884:src/main.c    **** //--- End of Main ---//
 885:src/main.c    **** 
 886:src/main.c    **** 
 887:src/main.c    **** 
 888:src/main.c    **** 
 889:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
 890:src/main.c    **** {
 884              		.loc 2 890 0
 885              		.cfi_startproc
 886 0000 00B5     		push	{lr}	@
 887              	.LCFI6:
 888              		.cfi_def_cfa_offset 4
 889              		.cfi_offset 14, -4
 890 0002 97B0     		sub	sp, sp, #92	@,,
 891              	.LCFI7:
 892              		.cfi_def_cfa_offset 96
 893 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
 891:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 894              		.loc 2 891 0
 895 0006 0123     		movs	r3, #1	@ tmp112,
 896 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
ARM GAS  /tmp/ccxUmJh6.s 			page 50


 897 000a 0223     		movs	r3, #2	@ tmp113,
 898 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 899 000e 0323     		movs	r3, #3	@ tmp114,
 900 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 901 0012 0423     		movs	r3, #4	@ tmp115,
 902 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 903 0016 0523     		movs	r3, #5	@ tmp116,
 904 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 905 001a 0623     		movs	r3, #6	@ tmp117,
 906 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
 892:src/main.c    ****       char tempbuff[40];
 893:src/main.c    ****       volatile float HUMIDITY_Value;
 894:src/main.c    ****       volatile float TEMPERATURE_Value;
 895:src/main.c    ****       volatile float PRESSURE_Value;
 896:src/main.c    **** 
 897:src/main.c    **** 
 898:src/main.c    **** 
 899:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 907              		.loc 2 899 0
 908 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 909 0020 1E4B     		ldr	r3, .L40	@ tmp119,
 910 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 911 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 912 0026 1823     		movs	r3, #24	@ tmp122,
 913 0028 1A00     		movs	r2, r3	@, tmp122
 914 002a FFF7FEFF 		bl	memcpy	@
 900:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
 901:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
 902:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 915              		.loc 2 902 0
 916 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 917 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 918 0032 1B49     		ldr	r1, .L40+4	@ tmp127,
 919 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 920 0036 FFF7FEFF 		bl	sprintf	@
 903:src/main.c    ****       strcat((char *)buffer,tempbuff);
 921              		.loc 2 903 0
 922 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 923 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 924 003e 1100     		movs	r1, r2	@, tmp129
 925 0040 1800     		movs	r0, r3	@, tmp130
 926 0042 FFF7FEFF 		bl	strcat	@
 904:src/main.c    **** 
 905:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
 906:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
 907:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 927              		.loc 2 907 0
 928 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 929 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 930 004a 1649     		ldr	r1, .L40+8	@ tmp133,
 931 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 932 004e FFF7FEFF 		bl	sprintf	@
 908:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 933              		.loc 2 908 0
 934 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 935 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 936 0056 1100     		movs	r1, r2	@, tmp135
ARM GAS  /tmp/ccxUmJh6.s 			page 51


 937 0058 1800     		movs	r0, r3	@, tmp136
 938 005a FFF7FEFF 		bl	strcat	@
 909:src/main.c    **** 
 910:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
 911:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
 912:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 939              		.loc 2 912 0
 940 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 941 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 942 0062 1149     		ldr	r1, .L40+12	@ tmp139,
 943 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 944 0066 FFF7FEFF 		bl	sprintf	@
 913:src/main.c    ****       strcat((char *)buffer,tempbuff);
 945              		.loc 2 913 0
 946 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 947 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 948 006e 1100     		movs	r1, r2	@, tmp141
 949 0070 1800     		movs	r0, r3	@, tmp142
 950 0072 FFF7FEFF 		bl	strcat	@
 914:src/main.c    **** 
 915:src/main.c    **** 
 916:src/main.c    ****       strcat((char *)buffer,"}}");
 951              		.loc 2 916 0
 952 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 953 0078 1800     		movs	r0, r3	@, tmp143
 954 007a FFF7FEFF 		bl	strlen	@
 955 007e 0300     		movs	r3, r0	@ tmp144,
 956 0080 1A00     		movs	r2, r3	@ D.6893, tmp145
 957 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 958 0084 9A18     		adds	r2, r3, r2	@ D.6894, tmp146, D.6893
 959 0086 094B     		ldr	r3, .L40+16	@ tmp147,
 960 0088 1000     		movs	r0, r2	@ tmp148, D.6894
 961 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 962 008c 0323     		movs	r3, #3	@ tmp150,
 963 008e 1A00     		movs	r2, r3	@, tmp150
 964 0090 FFF7FEFF 		bl	memcpy	@
 917:src/main.c    **** 
 918:src/main.c    ****       return;
 965              		.loc 2 918 0
 966 0094 C046     		nop
 919:src/main.c    **** }
 967              		.loc 2 919 0
 968 0096 17B0     		add	sp, sp, #92	@,,
 969              		@ sp needed	@
 970 0098 00BD     		pop	{pc}
 971              	.L41:
 972 009a C046     		.align	2
 973              	.L40:
 974 009c 70000000 		.word	.LC13
 975 00a0 88000000 		.word	.LC15
 976 00a4 A4000000 		.word	.LC17
 977 00a8 BC000000 		.word	.LC19
 978 00ac D4000000 		.word	.LC21
 979              		.cfi_endproc
 980              	.LFE21:
 981              		.size	prepare_json_pkt, .-prepare_json_pkt
 982              		.section	.text.TimingDelay_Decrement,"ax",%progbits
ARM GAS  /tmp/ccxUmJh6.s 			page 52


 983              		.align	2
 984              		.global	TimingDelay_Decrement
 985              		.code	16
 986              		.thumb_func
 987              		.type	TimingDelay_Decrement, %function
 988              	TimingDelay_Decrement:
 989              	.LFB22:
 920:src/main.c    **** 
 921:src/main.c    **** //void EXTI4_15_IRQHandler(void)
 922:src/main.c    **** //{
 923:src/main.c    **** //	unsigned short aux;
 924:src/main.c    **** //
 925:src/main.c    **** ////--- SOLO PRUEBA DE INTERRUPCIONES ---//
 926:src/main.c    **** ////	if (DMX_INPUT)
 927:src/main.c    **** ////		LED_ON;
 928:src/main.c    **** ////	else
 929:src/main.c    **** ////		LED_OFF;
 930:src/main.c    **** ////
 931:src/main.c    **** ////	EXTI->PR |= 0x0100;
 932:src/main.c    **** //
 933:src/main.c    **** //	if(EXTI->PR & 0x0100)	//Line8
 934:src/main.c    **** //	{
 935:src/main.c    **** //
 936:src/main.c    **** //		//si no esta con el USART detecta el flanco	PONER TIMEOUT ACA?????
 937:src/main.c    **** //		if ((dmx_receive_flag == 0) || (dmx_timeout_timer == 0))
 938:src/main.c    **** //		//if (dmx_receive_flag == 0)
 939:src/main.c    **** //		{
 940:src/main.c    **** //			switch (signal_state)
 941:src/main.c    **** //			{
 942:src/main.c    **** //				case IDLE:
 943:src/main.c    **** //					if (!(DMX_INPUT))
 944:src/main.c    **** //					{
 945:src/main.c    **** //						//Activo timer en Falling.
 946:src/main.c    **** //						TIM14->CNT = 0;
 947:src/main.c    **** //						TIM14->CR1 |= 0x0001;
 948:src/main.c    **** //						signal_state++;
 949:src/main.c    **** //					}
 950:src/main.c    **** //					break;
 951:src/main.c    **** //
 952:src/main.c    **** //				case LOOK_FOR_BREAK:
 953:src/main.c    **** //					if (DMX_INPUT)
 954:src/main.c    **** //					{
 955:src/main.c    **** //						//Desactivo timer en Rising.
 956:src/main.c    **** //						aux = TIM14->CNT;
 957:src/main.c    **** //
 958:src/main.c    **** //						//reviso BREAK
 959:src/main.c    **** //						//if (((tim_counter_65ms) || (aux > 88)) && (tim_counter_65ms <= 20))
 960:src/main.c    **** //						if ((aux > 87) && (aux < 210))	//Consola STARLET 6
 961:src/main.c    **** //						//if ((aux > 87) && (aux < 2000))		//Consola marca CODE tiene break 1.88ms
 962:src/main.c    **** //						{
 963:src/main.c    **** //							LED_ON;
 964:src/main.c    **** //							//Activo timer para ver MARK.
 965:src/main.c    **** //							//TIM2->CNT = 0;
 966:src/main.c    **** //							//TIM2->CR1 |= 0x0001;
 967:src/main.c    **** //
 968:src/main.c    **** //							signal_state++;
 969:src/main.c    **** //							//tengo el break, activo el puerto serie
ARM GAS  /tmp/ccxUmJh6.s 			page 53


 970:src/main.c    **** //							DMX_channel_received = 0;
 971:src/main.c    **** //							//dmx_receive_flag = 1;
 972:src/main.c    **** //
 973:src/main.c    **** //							dmx_timeout_timer = DMX_TIMEOUT;		//activo el timer cuando prendo el puerto serie
 974:src/main.c    **** //							//USARTx_RX_ENA;
 975:src/main.c    **** //						}
 976:src/main.c    **** //						else	//falso disparo
 977:src/main.c    **** //							signal_state = IDLE;
 978:src/main.c    **** //					}
 979:src/main.c    **** //					else	//falso disparo
 980:src/main.c    **** //						signal_state = IDLE;
 981:src/main.c    **** //
 982:src/main.c    **** //					TIM14->CR1 &= 0xFFFE;
 983:src/main.c    **** //					break;
 984:src/main.c    **** //
 985:src/main.c    **** //				case LOOK_FOR_MARK:
 986:src/main.c    **** //					if ((!(DMX_INPUT)) && (dmx_timeout_timer))	//termino Mark after break
 987:src/main.c    **** //					{
 988:src/main.c    **** //						//ya tenia el serie habilitado
 989:src/main.c    **** //						//if ((aux > 7) && (aux < 12))
 990:src/main.c    **** //						dmx_receive_flag = 1;
 991:src/main.c    **** //					}
 992:src/main.c    **** //					else	//falso disparo
 993:src/main.c    **** //					{
 994:src/main.c    **** //						//termine por timeout
 995:src/main.c    **** //						dmx_receive_flag = 0;
 996:src/main.c    **** //						//USARTx_RX_DISA;
 997:src/main.c    **** //					}
 998:src/main.c    **** //					signal_state = IDLE;
 999:src/main.c    **** //					LED_OFF;
1000:src/main.c    **** //					break;
1001:src/main.c    **** //
1002:src/main.c    **** //				default:
1003:src/main.c    **** //					signal_state = IDLE;
1004:src/main.c    **** //					break;
1005:src/main.c    **** //			}
1006:src/main.c    **** //		}
1007:src/main.c    **** //
1008:src/main.c    **** //		EXTI->PR |= 0x0100;
1009:src/main.c    **** //	}
1010:src/main.c    **** //}
1011:src/main.c    **** 
1012:src/main.c    **** void TimingDelay_Decrement(void)
1013:src/main.c    **** {
 990              		.loc 2 1013 0
 991              		.cfi_startproc
1014:src/main.c    **** 	if (wait_ms_var)
 992              		.loc 2 1014 0
 993 0000 3E4B     		ldr	r3, .L54	@ tmp139,
 994 0002 1B88     		ldrh	r3, [r3]	@ tmp140, wait_ms_var
 995 0004 9BB2     		uxth	r3, r3	@ D.6907, tmp140
 996 0006 002B     		cmp	r3, #0	@ D.6907,
 997 0008 06D0     		beq	.L43	@,
1015:src/main.c    **** 		wait_ms_var--;
 998              		.loc 2 1015 0
 999 000a 3C4B     		ldr	r3, .L54	@ tmp141,
 1000 000c 1B88     		ldrh	r3, [r3]	@ tmp142, wait_ms_var
ARM GAS  /tmp/ccxUmJh6.s 			page 54


 1001 000e 9BB2     		uxth	r3, r3	@ D.6907, tmp142
 1002 0010 013B     		subs	r3, r3, #1	@ tmp143,
 1003 0012 9AB2     		uxth	r2, r3	@ D.6907, tmp143
 1004 0014 394B     		ldr	r3, .L54	@ tmp144,
 1005 0016 1A80     		strh	r2, [r3]	@ tmp145, wait_ms_var
 1006              	.L43:
1016:src/main.c    **** 
1017:src/main.c    **** //	if (display_timer)
1018:src/main.c    **** //		display_timer--;
1019:src/main.c    **** 
1020:src/main.c    **** 	if (timer_standby)
 1007              		.loc 2 1020 0
 1008 0018 394B     		ldr	r3, .L54+4	@ tmp146,
 1009 001a 1B88     		ldrh	r3, [r3]	@ tmp147, timer_standby
 1010 001c 9BB2     		uxth	r3, r3	@ D.6907, tmp147
 1011 001e 002B     		cmp	r3, #0	@ D.6907,
 1012 0020 06D0     		beq	.L44	@,
1021:src/main.c    **** 		timer_standby--;
 1013              		.loc 2 1021 0
 1014 0022 374B     		ldr	r3, .L54+4	@ tmp148,
 1015 0024 1B88     		ldrh	r3, [r3]	@ tmp149, timer_standby
 1016 0026 9BB2     		uxth	r3, r3	@ D.6907, tmp149
 1017 0028 013B     		subs	r3, r3, #1	@ tmp150,
 1018 002a 9AB2     		uxth	r2, r3	@ D.6907, tmp150
 1019 002c 344B     		ldr	r3, .L54+4	@ tmp151,
 1020 002e 1A80     		strh	r2, [r3]	@ tmp152, timer_standby
 1021              	.L44:
1022:src/main.c    **** 
1023:src/main.c    **** 	if (acswitch_timer)
 1022              		.loc 2 1023 0
 1023 0030 344B     		ldr	r3, .L54+8	@ tmp153,
 1024 0032 1B78     		ldrb	r3, [r3]	@ tmp154, acswitch_timer
 1025 0034 DBB2     		uxtb	r3, r3	@ D.6908, tmp154
 1026 0036 002B     		cmp	r3, #0	@ D.6908,
 1027 0038 06D0     		beq	.L45	@,
1024:src/main.c    **** 		acswitch_timer--;
 1028              		.loc 2 1024 0
 1029 003a 324B     		ldr	r3, .L54+8	@ tmp155,
 1030 003c 1B78     		ldrb	r3, [r3]	@ tmp156, acswitch_timer
 1031 003e DBB2     		uxtb	r3, r3	@ D.6908, tmp156
 1032 0040 013B     		subs	r3, r3, #1	@ tmp157,
 1033 0042 DAB2     		uxtb	r2, r3	@ D.6908, tmp157
 1034 0044 2F4B     		ldr	r3, .L54+8	@ tmp158,
 1035 0046 1A70     		strb	r2, [r3]	@ tmp159, acswitch_timer
 1036              	.L45:
1025:src/main.c    **** 
1026:src/main.c    **** 	if (tt_take_photo_sample)
 1037              		.loc 2 1026 0
 1038 0048 2F4B     		ldr	r3, .L54+12	@ tmp160,
 1039 004a 1B88     		ldrh	r3, [r3]	@ tmp161, tt_take_photo_sample
 1040 004c 9BB2     		uxth	r3, r3	@ D.6907, tmp161
 1041 004e 002B     		cmp	r3, #0	@ D.6907,
 1042 0050 06D0     		beq	.L46	@,
1027:src/main.c    **** 		tt_take_photo_sample--;
 1043              		.loc 2 1027 0
 1044 0052 2D4B     		ldr	r3, .L54+12	@ tmp162,
 1045 0054 1B88     		ldrh	r3, [r3]	@ tmp163, tt_take_photo_sample
ARM GAS  /tmp/ccxUmJh6.s 			page 55


 1046 0056 9BB2     		uxth	r3, r3	@ D.6907, tmp163
 1047 0058 013B     		subs	r3, r3, #1	@ tmp164,
 1048 005a 9AB2     		uxth	r2, r3	@ D.6907, tmp164
 1049 005c 2A4B     		ldr	r3, .L54+12	@ tmp165,
 1050 005e 1A80     		strh	r2, [r3]	@ tmp166, tt_take_photo_sample
 1051              	.L46:
1028:src/main.c    **** 
1029:src/main.c    **** 	if (tt_relay_on_off)
 1052              		.loc 2 1029 0
 1053 0060 2A4B     		ldr	r3, .L54+16	@ tmp167,
 1054 0062 1B88     		ldrh	r3, [r3]	@ tmp168, tt_relay_on_off
 1055 0064 9BB2     		uxth	r3, r3	@ D.6907, tmp168
 1056 0066 002B     		cmp	r3, #0	@ D.6907,
 1057 0068 06D0     		beq	.L47	@,
1030:src/main.c    **** 		tt_relay_on_off--;
 1058              		.loc 2 1030 0
 1059 006a 284B     		ldr	r3, .L54+16	@ tmp169,
 1060 006c 1B88     		ldrh	r3, [r3]	@ tmp170, tt_relay_on_off
 1061 006e 9BB2     		uxth	r3, r3	@ D.6907, tmp170
 1062 0070 013B     		subs	r3, r3, #1	@ tmp171,
 1063 0072 9AB2     		uxth	r2, r3	@ D.6907, tmp171
 1064 0074 254B     		ldr	r3, .L54+16	@ tmp172,
 1065 0076 1A80     		strh	r2, [r3]	@ tmp173, tt_relay_on_off
 1066              	.L47:
1031:src/main.c    **** 
1032:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1033:src/main.c    **** 	if (tt_take_temp_sample)
1034:src/main.c    **** 		tt_take_temp_sample--;
1035:src/main.c    **** #endif
1036:src/main.c    **** 
1037:src/main.c    **** 	if (take_temp_sample)
 1067              		.loc 2 1037 0
 1068 0078 254B     		ldr	r3, .L54+20	@ tmp174,
 1069 007a 1B88     		ldrh	r3, [r3]	@ tmp175, take_temp_sample
 1070 007c 9BB2     		uxth	r3, r3	@ D.6907, tmp175
 1071 007e 002B     		cmp	r3, #0	@ D.6907,
 1072 0080 06D0     		beq	.L48	@,
1038:src/main.c    **** 		take_temp_sample--;
 1073              		.loc 2 1038 0
 1074 0082 234B     		ldr	r3, .L54+20	@ tmp176,
 1075 0084 1B88     		ldrh	r3, [r3]	@ tmp177, take_temp_sample
 1076 0086 9BB2     		uxth	r3, r3	@ D.6907, tmp177
 1077 0088 013B     		subs	r3, r3, #1	@ tmp178,
 1078 008a 9AB2     		uxth	r2, r3	@ D.6907, tmp178
 1079 008c 204B     		ldr	r3, .L54+20	@ tmp179,
 1080 008e 1A80     		strh	r2, [r3]	@ tmp180, take_temp_sample
 1081              	.L48:
1039:src/main.c    **** 
1040:src/main.c    **** 	if (filter_timer)
 1082              		.loc 2 1040 0
 1083 0090 204B     		ldr	r3, .L54+24	@ tmp181,
 1084 0092 1B78     		ldrb	r3, [r3]	@ tmp182, filter_timer
 1085 0094 DBB2     		uxtb	r3, r3	@ D.6908, tmp182
 1086 0096 002B     		cmp	r3, #0	@ D.6908,
 1087 0098 06D0     		beq	.L49	@,
1041:src/main.c    **** 		filter_timer--;
 1088              		.loc 2 1041 0
ARM GAS  /tmp/ccxUmJh6.s 			page 56


 1089 009a 1E4B     		ldr	r3, .L54+24	@ tmp183,
 1090 009c 1B78     		ldrb	r3, [r3]	@ tmp184, filter_timer
 1091 009e DBB2     		uxtb	r3, r3	@ D.6908, tmp184
 1092 00a0 013B     		subs	r3, r3, #1	@ tmp185,
 1093 00a2 DAB2     		uxtb	r2, r3	@ D.6908, tmp185
 1094 00a4 1B4B     		ldr	r3, .L54+24	@ tmp186,
 1095 00a6 1A70     		strb	r2, [r3]	@ tmp187, filter_timer
 1096              	.L49:
1042:src/main.c    **** 
1043:src/main.c    **** 	//cuenta de a 1 minuto
1044:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 1097              		.loc 2 1044 0
 1098 00a8 1B4B     		ldr	r3, .L54+28	@ tmp188,
 1099 00aa 1B88     		ldrh	r3, [r3]	@ tmp189, secs
 1100 00ac 9BB2     		uxth	r3, r3	@ D.6907, tmp189
 1101 00ae 1B4A     		ldr	r2, .L54+32	@ tmp190,
 1102 00b0 9342     		cmp	r3, r2	@ D.6907, tmp190
 1103 00b2 0AD9     		bls	.L50	@,
1045:src/main.c    **** 	{
1046:src/main.c    **** 		minutes++;
 1104              		.loc 2 1046 0
 1105 00b4 1A4B     		ldr	r3, .L54+36	@ tmp191,
 1106 00b6 1B78     		ldrb	r3, [r3]	@ tmp192, minutes
 1107 00b8 DBB2     		uxtb	r3, r3	@ D.6908, tmp192
 1108 00ba 0133     		adds	r3, r3, #1	@ tmp193,
 1109 00bc DAB2     		uxtb	r2, r3	@ D.6908, tmp193
 1110 00be 184B     		ldr	r3, .L54+36	@ tmp194,
 1111 00c0 1A70     		strb	r2, [r3]	@ tmp195, minutes
1047:src/main.c    **** 		secs = 0;
 1112              		.loc 2 1047 0
 1113 00c2 154B     		ldr	r3, .L54+28	@ tmp196,
 1114 00c4 0022     		movs	r2, #0	@ tmp197,
 1115 00c6 1A80     		strh	r2, [r3]	@ tmp198, secs
 1116 00c8 06E0     		b	.L51	@
 1117              	.L50:
1048:src/main.c    **** 	}
1049:src/main.c    **** 	else
1050:src/main.c    **** 		secs++;
 1118              		.loc 2 1050 0
 1119 00ca 134B     		ldr	r3, .L54+28	@ tmp199,
 1120 00cc 1B88     		ldrh	r3, [r3]	@ tmp200, secs
 1121 00ce 9BB2     		uxth	r3, r3	@ D.6907, tmp200
 1122 00d0 0133     		adds	r3, r3, #1	@ tmp201,
 1123 00d2 9AB2     		uxth	r2, r3	@ D.6907, tmp201
 1124 00d4 104B     		ldr	r3, .L54+28	@ tmp202,
 1125 00d6 1A80     		strh	r2, [r3]	@ tmp203, secs
 1126              	.L51:
1051:src/main.c    **** 
1052:src/main.c    **** 	if (minutes > 60)
 1127              		.loc 2 1052 0
 1128 00d8 114B     		ldr	r3, .L54+36	@ tmp204,
 1129 00da 1B78     		ldrb	r3, [r3]	@ tmp205, minutes
 1130 00dc DBB2     		uxtb	r3, r3	@ D.6908, tmp205
 1131 00de 3C2B     		cmp	r3, #60	@ D.6908,
 1132 00e0 09D9     		bls	.L53	@,
1053:src/main.c    **** 	{
1054:src/main.c    **** 		hours++;
ARM GAS  /tmp/ccxUmJh6.s 			page 57


 1133              		.loc 2 1054 0
 1134 00e2 104B     		ldr	r3, .L54+40	@ tmp206,
 1135 00e4 1B78     		ldrb	r3, [r3]	@ tmp207, hours
 1136 00e6 DBB2     		uxtb	r3, r3	@ D.6908, tmp207
 1137 00e8 0133     		adds	r3, r3, #1	@ tmp208,
 1138 00ea DAB2     		uxtb	r2, r3	@ D.6908, tmp208
 1139 00ec 0D4B     		ldr	r3, .L54+40	@ tmp209,
 1140 00ee 1A70     		strb	r2, [r3]	@ tmp210, hours
1055:src/main.c    **** 		minutes = 0;
 1141              		.loc 2 1055 0
 1142 00f0 0B4B     		ldr	r3, .L54+36	@ tmp211,
 1143 00f2 0022     		movs	r2, #0	@ tmp212,
 1144 00f4 1A70     		strb	r2, [r3]	@ tmp213, minutes
 1145              	.L53:
1056:src/main.c    **** 	}
1057:src/main.c    **** 
1058:src/main.c    **** 
1059:src/main.c    **** #ifdef USE_MQTT_LIB
1060:src/main.c    **** 	//timer del MQTT
1061:src/main.c    **** 	SysTickIntHandler();
1062:src/main.c    **** #endif
1063:src/main.c    **** 
1064:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1065:src/main.c    **** 	if (usart1_mini_timeout)
1066:src/main.c    **** 		usart1_mini_timeout--;
1067:src/main.c    **** 	if (usart2_mini_timeout)
1068:src/main.c    **** 		usart2_mini_timeout--;
1069:src/main.c    **** #endif
1070:src/main.c    **** #ifdef USE_GPS
1071:src/main.c    **** 	GPSTimeoutCounters ();
1072:src/main.c    **** #endif
1073:src/main.c    **** 
1074:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1075:src/main.c    **** 	GSMTimeoutCounters ();
1076:src/main.c    **** #endif
1077:src/main.c    **** }
 1146              		.loc 2 1077 0
 1147 00f6 C046     		nop
 1148              		@ sp needed	@
 1149 00f8 7047     		bx	lr
 1150              	.L55:
 1151 00fa C046     		.align	2
 1152              	.L54:
 1153 00fc 00000000 		.word	wait_ms_var
 1154 0100 00000000 		.word	timer_standby
 1155 0104 00000000 		.word	acswitch_timer
 1156 0108 00000000 		.word	tt_take_photo_sample
 1157 010c 00000000 		.word	tt_relay_on_off
 1158 0110 00000000 		.word	take_temp_sample
 1159 0114 00000000 		.word	filter_timer
 1160 0118 00000000 		.word	secs
 1161 011c 5FEA0000 		.word	59999
 1162 0120 00000000 		.word	minutes
 1163 0124 00000000 		.word	hours
 1164              		.cfi_endproc
 1165              	.LFE22:
 1166              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
ARM GAS  /tmp/ccxUmJh6.s 			page 58


 1167              		.text
 1168              	.Letext0:
 1169              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1170              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1171              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1172              		.file 6 "src/hard.h"
 1173              		.file 7 "src/flash_program.h"
 1174              		.file 8 "src/tcp_transceiver.h"
 1175              		.section	.debug_info,"",%progbits
 1176              	.Ldebug_info0:
 1177 0000 F50B0000 		.4byte	0xbf5
 1178 0004 0200     		.2byte	0x2
 1179 0006 00000000 		.4byte	.Ldebug_abbrev0
 1180 000a 04       		.byte	0x4
 1181 000b 01       		.uleb128 0x1
 1182 000c DB070000 		.4byte	.LASF171
 1183 0010 0C       		.byte	0xc
 1184 0011 B2070000 		.4byte	.LASF172
 1185 0015 26060000 		.4byte	.LASF173
 1186 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1187 001d 00000000 		.4byte	0
 1188 0021 00000000 		.4byte	0
 1189 0025 00000000 		.4byte	.Ldebug_line0
 1190 0029 02       		.uleb128 0x2
 1191 002a A8040000 		.4byte	.LASF99
 1192 002e 01       		.byte	0x1
 1193 002f 06010000 		.4byte	0x106
 1194 0033 03       		.byte	0x3
 1195 0034 C7       		.byte	0xc7
 1196 0035 06010000 		.4byte	0x106
 1197 0039 03       		.uleb128 0x3
 1198 003a 2B050000 		.4byte	.LASF0
 1199 003e 72       		.sleb128 -14
 1200 003f 03       		.uleb128 0x3
 1201 0040 9C080000 		.4byte	.LASF1
 1202 0044 73       		.sleb128 -13
 1203 0045 03       		.uleb128 0x3
 1204 0046 C2000000 		.4byte	.LASF2
 1205 004a 7B       		.sleb128 -5
 1206 004b 03       		.uleb128 0x3
 1207 004c 90010000 		.4byte	.LASF3
 1208 0050 7E       		.sleb128 -2
 1209 0051 03       		.uleb128 0x3
 1210 0052 CD050000 		.4byte	.LASF4
 1211 0056 7F       		.sleb128 -1
 1212 0057 04       		.uleb128 0x4
 1213 0058 A2030000 		.4byte	.LASF5
 1214 005c 00       		.byte	0
 1215 005d 04       		.uleb128 0x4
 1216 005e 40040000 		.4byte	.LASF6
 1217 0062 01       		.byte	0x1
 1218 0063 04       		.uleb128 0x4
 1219 0064 D1040000 		.4byte	.LASF7
 1220 0068 02       		.byte	0x2
 1221 0069 04       		.uleb128 0x4
 1222 006a 29010000 		.4byte	.LASF8
 1223 006e 03       		.byte	0x3
ARM GAS  /tmp/ccxUmJh6.s 			page 59


 1224 006f 04       		.uleb128 0x4
 1225 0070 9C010000 		.4byte	.LASF9
 1226 0074 04       		.byte	0x4
 1227 0075 04       		.uleb128 0x4
 1228 0076 50010000 		.4byte	.LASF10
 1229 007a 05       		.byte	0x5
 1230 007b 04       		.uleb128 0x4
 1231 007c 9F000000 		.4byte	.LASF11
 1232 0080 06       		.byte	0x6
 1233 0081 04       		.uleb128 0x4
 1234 0082 75000000 		.4byte	.LASF12
 1235 0086 07       		.byte	0x7
 1236 0087 04       		.uleb128 0x4
 1237 0088 0B040000 		.4byte	.LASF13
 1238 008c 08       		.byte	0x8
 1239 008d 04       		.uleb128 0x4
 1240 008e 21030000 		.4byte	.LASF14
 1241 0092 09       		.byte	0x9
 1242 0093 04       		.uleb128 0x4
 1243 0094 9A060000 		.4byte	.LASF15
 1244 0098 0A       		.byte	0xa
 1245 0099 04       		.uleb128 0x4
 1246 009a 7C050000 		.4byte	.LASF16
 1247 009e 0B       		.byte	0xb
 1248 009f 04       		.uleb128 0x4
 1249 00a0 58040000 		.4byte	.LASF17
 1250 00a4 0C       		.byte	0xc
 1251 00a5 04       		.uleb128 0x4
 1252 00a6 1E040000 		.4byte	.LASF18
 1253 00aa 0D       		.byte	0xd
 1254 00ab 04       		.uleb128 0x4
 1255 00ac 48050000 		.4byte	.LASF19
 1256 00b0 0E       		.byte	0xe
 1257 00b1 04       		.uleb128 0x4
 1258 00b2 0D060000 		.4byte	.LASF20
 1259 00b6 0F       		.byte	0xf
 1260 00b7 04       		.uleb128 0x4
 1261 00b8 17030000 		.4byte	.LASF21
 1262 00bc 10       		.byte	0x10
 1263 00bd 04       		.uleb128 0x4
 1264 00be C9060000 		.4byte	.LASF22
 1265 00c2 11       		.byte	0x11
 1266 00c3 04       		.uleb128 0x4
 1267 00c4 8F060000 		.4byte	.LASF23
 1268 00c8 13       		.byte	0x13
 1269 00c9 04       		.uleb128 0x4
 1270 00ca 4C030000 		.4byte	.LASF24
 1271 00ce 14       		.byte	0x14
 1272 00cf 04       		.uleb128 0x4
 1273 00d0 FB000000 		.4byte	.LASF25
 1274 00d4 15       		.byte	0x15
 1275 00d5 04       		.uleb128 0x4
 1276 00d6 71050000 		.4byte	.LASF26
 1277 00da 16       		.byte	0x16
 1278 00db 04       		.uleb128 0x4
 1279 00dc 86010000 		.4byte	.LASF27
 1280 00e0 17       		.byte	0x17
ARM GAS  /tmp/ccxUmJh6.s 			page 60


 1281 00e1 04       		.uleb128 0x4
 1282 00e2 F1050000 		.4byte	.LASF28
 1283 00e6 18       		.byte	0x18
 1284 00e7 04       		.uleb128 0x4
 1285 00e8 D0010000 		.4byte	.LASF29
 1286 00ec 19       		.byte	0x19
 1287 00ed 04       		.uleb128 0x4
 1288 00ee 6D070000 		.4byte	.LASF30
 1289 00f2 1A       		.byte	0x1a
 1290 00f3 04       		.uleb128 0x4
 1291 00f4 1F050000 		.4byte	.LASF31
 1292 00f8 1B       		.byte	0x1b
 1293 00f9 04       		.uleb128 0x4
 1294 00fa 56020000 		.4byte	.LASF32
 1295 00fe 1C       		.byte	0x1c
 1296 00ff 04       		.uleb128 0x4
 1297 0100 DA050000 		.4byte	.LASF33
 1298 0104 1E       		.byte	0x1e
 1299 0105 00       		.byte	0
 1300 0106 05       		.uleb128 0x5
 1301 0107 01       		.byte	0x1
 1302 0108 06       		.byte	0x6
 1303 0109 A6070000 		.4byte	.LASF36
 1304 010d 06       		.uleb128 0x6
 1305 010e 40020000 		.4byte	.LASF34
 1306 0112 03       		.byte	0x3
 1307 0113 5F01     		.2byte	0x15f
 1308 0115 29000000 		.4byte	0x29
 1309 0119 07       		.uleb128 0x7
 1310 011a 97050000 		.4byte	.LASF35
 1311 011e 04       		.byte	0x4
 1312 011f 1D       		.byte	0x1d
 1313 0120 24010000 		.4byte	0x124
 1314 0124 05       		.uleb128 0x5
 1315 0125 01       		.byte	0x1
 1316 0126 08       		.byte	0x8
 1317 0127 D7060000 		.4byte	.LASF37
 1318 012b 05       		.uleb128 0x5
 1319 012c 02       		.byte	0x2
 1320 012d 05       		.byte	0x5
 1321 012e 0C050000 		.4byte	.LASF38
 1322 0132 07       		.uleb128 0x7
 1323 0133 15020000 		.4byte	.LASF39
 1324 0137 04       		.byte	0x4
 1325 0138 2B       		.byte	0x2b
 1326 0139 3D010000 		.4byte	0x13d
 1327 013d 05       		.uleb128 0x5
 1328 013e 02       		.byte	0x2
 1329 013f 07       		.byte	0x7
 1330 0140 C8070000 		.4byte	.LASF40
 1331 0144 07       		.uleb128 0x7
 1332 0145 17010000 		.4byte	.LASF41
 1333 0149 04       		.byte	0x4
 1334 014a 3F       		.byte	0x3f
 1335 014b 4F010000 		.4byte	0x14f
 1336 014f 05       		.uleb128 0x5
 1337 0150 04       		.byte	0x4
ARM GAS  /tmp/ccxUmJh6.s 			page 61


 1338 0151 05       		.byte	0x5
 1339 0152 16050000 		.4byte	.LASF42
 1340 0156 07       		.uleb128 0x7
 1341 0157 EE060000 		.4byte	.LASF43
 1342 015b 04       		.byte	0x4
 1343 015c 41       		.byte	0x41
 1344 015d 61010000 		.4byte	0x161
 1345 0161 05       		.uleb128 0x5
 1346 0162 04       		.byte	0x4
 1347 0163 07       		.byte	0x7
 1348 0164 FB050000 		.4byte	.LASF44
 1349 0168 05       		.uleb128 0x5
 1350 0169 08       		.byte	0x8
 1351 016a 05       		.byte	0x5
 1352 016b 94030000 		.4byte	.LASF45
 1353 016f 05       		.uleb128 0x5
 1354 0170 08       		.byte	0x8
 1355 0171 07       		.byte	0x7
 1356 0172 DA010000 		.4byte	.LASF46
 1357 0176 08       		.uleb128 0x8
 1358 0177 04       		.byte	0x4
 1359 0178 05       		.byte	0x5
 1360 0179 696E7400 		.ascii	"int\000"
 1361 017d 05       		.uleb128 0x5
 1362 017e 04       		.byte	0x4
 1363 017f 07       		.byte	0x7
 1364 0180 E9000000 		.4byte	.LASF47
 1365 0184 07       		.uleb128 0x7
 1366 0185 57030000 		.4byte	.LASF48
 1367 0189 05       		.byte	0x5
 1368 018a 14       		.byte	0x14
 1369 018b 19010000 		.4byte	0x119
 1370 018f 07       		.uleb128 0x7
 1371 0190 9F040000 		.4byte	.LASF49
 1372 0194 05       		.byte	0x5
 1373 0195 1A       		.byte	0x1a
 1374 0196 32010000 		.4byte	0x132
 1375 019a 07       		.uleb128 0x7
 1376 019b 6A060000 		.4byte	.LASF50
 1377 019f 05       		.byte	0x5
 1378 01a0 1F       		.byte	0x1f
 1379 01a1 44010000 		.4byte	0x144
 1380 01a5 07       		.uleb128 0x7
 1381 01a6 AE010000 		.4byte	.LASF51
 1382 01aa 05       		.byte	0x5
 1383 01ab 20       		.byte	0x20
 1384 01ac 56010000 		.4byte	0x156
 1385 01b0 09       		.uleb128 0x9
 1386 01b1 2003     		.2byte	0x320
 1387 01b3 01       		.byte	0x1
 1388 01b4 71       		.byte	0x71
 1389 01b5 4D020000 		.4byte	0x24d
 1390 01b9 0A       		.uleb128 0xa
 1391 01ba B7010000 		.4byte	.LASF52
 1392 01be 01       		.byte	0x1
 1393 01bf 73       		.byte	0x73
 1394 01c0 64020000 		.4byte	0x264
ARM GAS  /tmp/ccxUmJh6.s 			page 62


 1395 01c4 02       		.byte	0x2
 1396 01c5 23       		.byte	0x23
 1397 01c6 00       		.uleb128 0
 1398 01c7 0A       		.uleb128 0xa
 1399 01c8 DA040000 		.4byte	.LASF53
 1400 01cc 01       		.byte	0x1
 1401 01cd 74       		.byte	0x74
 1402 01ce 69020000 		.4byte	0x269
 1403 01d2 02       		.byte	0x2
 1404 01d3 23       		.byte	0x23
 1405 01d4 04       		.uleb128 0x4
 1406 01d5 0A       		.uleb128 0xa
 1407 01d6 5D070000 		.4byte	.LASF54
 1408 01da 01       		.byte	0x1
 1409 01db 75       		.byte	0x75
 1410 01dc 79020000 		.4byte	0x279
 1411 01e0 03       		.byte	0x3
 1412 01e1 23       		.byte	0x23
 1413 01e2 8001     		.uleb128 0x80
 1414 01e4 0A       		.uleb128 0xa
 1415 01e5 C7010000 		.4byte	.LASF55
 1416 01e9 01       		.byte	0x1
 1417 01ea 76       		.byte	0x76
 1418 01eb 69020000 		.4byte	0x269
 1419 01ef 03       		.byte	0x3
 1420 01f0 23       		.byte	0x23
 1421 01f1 8401     		.uleb128 0x84
 1422 01f3 0A       		.uleb128 0xa
 1423 01f4 AB080000 		.4byte	.LASF56
 1424 01f8 01       		.byte	0x1
 1425 01f9 77       		.byte	0x77
 1426 01fa 7E020000 		.4byte	0x27e
 1427 01fe 03       		.byte	0x3
 1428 01ff 23       		.byte	0x23
 1429 0200 8002     		.uleb128 0x100
 1430 0202 0A       		.uleb128 0xa
 1431 0203 EE040000 		.4byte	.LASF57
 1432 0207 01       		.byte	0x1
 1433 0208 78       		.byte	0x78
 1434 0209 69020000 		.4byte	0x269
 1435 020d 03       		.byte	0x3
 1436 020e 23       		.byte	0x23
 1437 020f 8402     		.uleb128 0x104
 1438 0211 0A       		.uleb128 0xa
 1439 0212 53040000 		.4byte	.LASF58
 1440 0216 01       		.byte	0x1
 1441 0217 79       		.byte	0x79
 1442 0218 83020000 		.4byte	0x283
 1443 021c 03       		.byte	0x3
 1444 021d 23       		.byte	0x23
 1445 021e 8003     		.uleb128 0x180
 1446 0220 0A       		.uleb128 0xa
 1447 0221 F8040000 		.4byte	.LASF59
 1448 0225 01       		.byte	0x1
 1449 0226 7A       		.byte	0x7a
 1450 0227 69020000 		.4byte	0x269
 1451 022b 03       		.byte	0x3
ARM GAS  /tmp/ccxUmJh6.s 			page 63


 1452 022c 23       		.byte	0x23
 1453 022d 8403     		.uleb128 0x184
 1454 022f 0A       		.uleb128 0xa
 1455 0230 02050000 		.4byte	.LASF60
 1456 0234 01       		.byte	0x1
 1457 0235 7B       		.byte	0x7b
 1458 0236 88020000 		.4byte	0x288
 1459 023a 03       		.byte	0x3
 1460 023b 23       		.byte	0x23
 1461 023c 8004     		.uleb128 0x200
 1462 023e 0B       		.uleb128 0xb
 1463 023f 495000   		.ascii	"IP\000"
 1464 0242 01       		.byte	0x1
 1465 0243 7C       		.byte	0x7c
 1466 0244 A8020000 		.4byte	0x2a8
 1467 0248 03       		.byte	0x3
 1468 0249 23       		.byte	0x23
 1469 024a 8006     		.uleb128 0x300
 1470 024c 00       		.byte	0
 1471 024d 0C       		.uleb128 0xc
 1472 024e A5010000 		.4byte	0x1a5
 1473 0252 5D020000 		.4byte	0x25d
 1474 0256 0D       		.uleb128 0xd
 1475 0257 5D020000 		.4byte	0x25d
 1476 025b 00       		.byte	0
 1477 025c 00       		.byte	0
 1478 025d 05       		.uleb128 0x5
 1479 025e 04       		.byte	0x4
 1480 025f 07       		.byte	0x7
 1481 0260 E3050000 		.4byte	.LASF61
 1482 0264 0E       		.uleb128 0xe
 1483 0265 4D020000 		.4byte	0x24d
 1484 0269 0C       		.uleb128 0xc
 1485 026a A5010000 		.4byte	0x1a5
 1486 026e 79020000 		.4byte	0x279
 1487 0272 0D       		.uleb128 0xd
 1488 0273 5D020000 		.4byte	0x25d
 1489 0277 1E       		.byte	0x1e
 1490 0278 00       		.byte	0
 1491 0279 0E       		.uleb128 0xe
 1492 027a 4D020000 		.4byte	0x24d
 1493 027e 0E       		.uleb128 0xe
 1494 027f 4D020000 		.4byte	0x24d
 1495 0283 0E       		.uleb128 0xe
 1496 0284 4D020000 		.4byte	0x24d
 1497 0288 0C       		.uleb128 0xc
 1498 0289 A5010000 		.4byte	0x1a5
 1499 028d 98020000 		.4byte	0x298
 1500 0291 0D       		.uleb128 0xd
 1501 0292 5D020000 		.4byte	0x25d
 1502 0296 3F       		.byte	0x3f
 1503 0297 00       		.byte	0
 1504 0298 0C       		.uleb128 0xc
 1505 0299 A5010000 		.4byte	0x1a5
 1506 029d A8020000 		.4byte	0x2a8
 1507 02a1 0D       		.uleb128 0xd
 1508 02a2 5D020000 		.4byte	0x25d
ARM GAS  /tmp/ccxUmJh6.s 			page 64


 1509 02a6 07       		.byte	0x7
 1510 02a7 00       		.byte	0
 1511 02a8 0E       		.uleb128 0xe
 1512 02a9 98020000 		.4byte	0x298
 1513 02ad 07       		.uleb128 0x7
 1514 02ae AD050000 		.4byte	.LASF62
 1515 02b2 01       		.byte	0x1
 1516 02b3 7D       		.byte	0x7d
 1517 02b4 B0010000 		.4byte	0x1b0
 1518 02b8 0F       		.uleb128 0xf
 1519 02b9 34       		.byte	0x34
 1520 02ba 01       		.byte	0x1
 1521 02bb 86       		.byte	0x86
 1522 02bc 5B030000 		.4byte	0x35b
 1523 02c0 0A       		.uleb128 0xa
 1524 02c1 62020000 		.4byte	.LASF63
 1525 02c5 01       		.byte	0x1
 1526 02c6 88       		.byte	0x88
 1527 02c7 60030000 		.4byte	0x360
 1528 02cb 02       		.byte	0x2
 1529 02cc 23       		.byte	0x23
 1530 02cd 00       		.uleb128 0
 1531 02ce 0A       		.uleb128 0xa
 1532 02cf EC050000 		.4byte	.LASF64
 1533 02d3 01       		.byte	0x1
 1534 02d4 89       		.byte	0x89
 1535 02d5 5B030000 		.4byte	0x35b
 1536 02d9 02       		.byte	0x2
 1537 02da 23       		.byte	0x23
 1538 02db 04       		.uleb128 0x4
 1539 02dc 0A       		.uleb128 0xa
 1540 02dd DA040000 		.4byte	.LASF53
 1541 02e1 01       		.byte	0x1
 1542 02e2 8A       		.byte	0x8a
 1543 02e3 A5010000 		.4byte	0x1a5
 1544 02e7 02       		.byte	0x2
 1545 02e8 23       		.byte	0x23
 1546 02e9 08       		.uleb128 0x8
 1547 02ea 0A       		.uleb128 0xa
 1548 02eb 00030000 		.4byte	.LASF65
 1549 02ef 01       		.byte	0x1
 1550 02f0 8B       		.byte	0x8b
 1551 02f1 5B030000 		.4byte	0x35b
 1552 02f5 02       		.byte	0x2
 1553 02f6 23       		.byte	0x23
 1554 02f7 0C       		.uleb128 0xc
 1555 02f8 0B       		.uleb128 0xb
 1556 02f9 53435200 		.ascii	"SCR\000"
 1557 02fd 01       		.byte	0x1
 1558 02fe 8C       		.byte	0x8c
 1559 02ff 5B030000 		.4byte	0x35b
 1560 0303 02       		.byte	0x2
 1561 0304 23       		.byte	0x23
 1562 0305 10       		.uleb128 0x10
 1563 0306 0B       		.uleb128 0xb
 1564 0307 43435200 		.ascii	"CCR\000"
 1565 030b 01       		.byte	0x1
ARM GAS  /tmp/ccxUmJh6.s 			page 65


 1566 030c 8D       		.byte	0x8d
 1567 030d 5B030000 		.4byte	0x35b
 1568 0311 02       		.byte	0x2
 1569 0312 23       		.byte	0x23
 1570 0313 14       		.uleb128 0x14
 1571 0314 0A       		.uleb128 0xa
 1572 0315 E4040000 		.4byte	.LASF66
 1573 0319 01       		.byte	0x1
 1574 031a 8E       		.byte	0x8e
 1575 031b A5010000 		.4byte	0x1a5
 1576 031f 02       		.byte	0x2
 1577 0320 23       		.byte	0x23
 1578 0321 18       		.uleb128 0x18
 1579 0322 0B       		.uleb128 0xb
 1580 0323 53485000 		.ascii	"SHP\000"
 1581 0327 01       		.byte	0x1
 1582 0328 8F       		.byte	0x8f
 1583 0329 75030000 		.4byte	0x375
 1584 032d 02       		.byte	0x2
 1585 032e 23       		.byte	0x23
 1586 032f 1C       		.uleb128 0x1c
 1587 0330 0A       		.uleb128 0xa
 1588 0331 AC030000 		.4byte	.LASF67
 1589 0335 01       		.byte	0x1
 1590 0336 90       		.byte	0x90
 1591 0337 5B030000 		.4byte	0x35b
 1592 033b 02       		.byte	0x2
 1593 033c 23       		.byte	0x23
 1594 033d 24       		.uleb128 0x24
 1595 033e 0A       		.uleb128 0xa
 1596 033f EE040000 		.4byte	.LASF57
 1597 0343 01       		.byte	0x1
 1598 0344 91       		.byte	0x91
 1599 0345 65030000 		.4byte	0x365
 1600 0349 02       		.byte	0x2
 1601 034a 23       		.byte	0x23
 1602 034b 28       		.uleb128 0x28
 1603 034c 0A       		.uleb128 0xa
 1604 034d F1010000 		.4byte	.LASF68
 1605 0351 01       		.byte	0x1
 1606 0352 92       		.byte	0x92
 1607 0353 5B030000 		.4byte	0x35b
 1608 0357 02       		.byte	0x2
 1609 0358 23       		.byte	0x23
 1610 0359 30       		.uleb128 0x30
 1611 035a 00       		.byte	0
 1612 035b 0E       		.uleb128 0xe
 1613 035c A5010000 		.4byte	0x1a5
 1614 0360 10       		.uleb128 0x10
 1615 0361 5B030000 		.4byte	0x35b
 1616 0365 0C       		.uleb128 0xc
 1617 0366 A5010000 		.4byte	0x1a5
 1618 036a 75030000 		.4byte	0x375
 1619 036e 0D       		.uleb128 0xd
 1620 036f 5D020000 		.4byte	0x25d
 1621 0373 01       		.byte	0x1
 1622 0374 00       		.byte	0
ARM GAS  /tmp/ccxUmJh6.s 			page 66


 1623 0375 0E       		.uleb128 0xe
 1624 0376 65030000 		.4byte	0x365
 1625 037a 07       		.uleb128 0x7
 1626 037b B7050000 		.4byte	.LASF69
 1627 037f 01       		.byte	0x1
 1628 0380 93       		.byte	0x93
 1629 0381 B8020000 		.4byte	0x2b8
 1630 0385 0F       		.uleb128 0xf
 1631 0386 10       		.byte	0x10
 1632 0387 01       		.byte	0x1
 1633 0388 FC       		.byte	0xfc
 1634 0389 C8030000 		.4byte	0x3c8
 1635 038d 0A       		.uleb128 0xa
 1636 038e E9080000 		.4byte	.LASF70
 1637 0392 01       		.byte	0x1
 1638 0393 FE       		.byte	0xfe
 1639 0394 5B030000 		.4byte	0x35b
 1640 0398 02       		.byte	0x2
 1641 0399 23       		.byte	0x23
 1642 039a 00       		.uleb128 0
 1643 039b 0A       		.uleb128 0xa
 1644 039c F6000000 		.4byte	.LASF71
 1645 03a0 01       		.byte	0x1
 1646 03a1 FF       		.byte	0xff
 1647 03a2 5B030000 		.4byte	0x35b
 1648 03a6 02       		.byte	0x2
 1649 03a7 23       		.byte	0x23
 1650 03a8 04       		.uleb128 0x4
 1651 03a9 11       		.uleb128 0x11
 1652 03aa 56414C00 		.ascii	"VAL\000"
 1653 03ae 01       		.byte	0x1
 1654 03af 0001     		.2byte	0x100
 1655 03b1 5B030000 		.4byte	0x35b
 1656 03b5 02       		.byte	0x2
 1657 03b6 23       		.byte	0x23
 1658 03b7 08       		.uleb128 0x8
 1659 03b8 12       		.uleb128 0x12
 1660 03b9 42010000 		.4byte	.LASF72
 1661 03bd 01       		.byte	0x1
 1662 03be 0101     		.2byte	0x101
 1663 03c0 60030000 		.4byte	0x360
 1664 03c4 02       		.byte	0x2
 1665 03c5 23       		.byte	0x23
 1666 03c6 0C       		.uleb128 0xc
 1667 03c7 00       		.byte	0
 1668 03c8 06       		.uleb128 0x6
 1669 03c9 86040000 		.4byte	.LASF73
 1670 03cd 01       		.byte	0x1
 1671 03ce 0201     		.2byte	0x102
 1672 03d0 85030000 		.4byte	0x385
 1673 03d4 0E       		.uleb128 0xe
 1674 03d5 8F010000 		.4byte	0x18f
 1675 03d9 13       		.uleb128 0x13
 1676 03da 2C       		.byte	0x2c
 1677 03db 03       		.byte	0x3
 1678 03dc 6902     		.2byte	0x269
 1679 03de B5040000 		.4byte	0x4b5
ARM GAS  /tmp/ccxUmJh6.s 			page 67


 1680 03e2 12       		.uleb128 0x12
 1681 03e3 28020000 		.4byte	.LASF74
 1682 03e7 03       		.byte	0x3
 1683 03e8 6B02     		.2byte	0x26b
 1684 03ea 5B030000 		.4byte	0x35b
 1685 03ee 02       		.byte	0x2
 1686 03ef 23       		.byte	0x23
 1687 03f0 00       		.uleb128 0
 1688 03f1 12       		.uleb128 0x12
 1689 03f2 55050000 		.4byte	.LASF75
 1690 03f6 03       		.byte	0x3
 1691 03f7 6C02     		.2byte	0x26c
 1692 03f9 D4030000 		.4byte	0x3d4
 1693 03fd 02       		.byte	0x2
 1694 03fe 23       		.byte	0x23
 1695 03ff 04       		.uleb128 0x4
 1696 0400 12       		.uleb128 0x12
 1697 0401 DA040000 		.4byte	.LASF53
 1698 0405 03       		.byte	0x3
 1699 0406 6D02     		.2byte	0x26d
 1700 0408 8F010000 		.4byte	0x18f
 1701 040c 02       		.byte	0x2
 1702 040d 23       		.byte	0x23
 1703 040e 06       		.uleb128 0x6
 1704 040f 12       		.uleb128 0x12
 1705 0410 7E040000 		.4byte	.LASF76
 1706 0414 03       		.byte	0x3
 1707 0415 6E02     		.2byte	0x26e
 1708 0417 5B030000 		.4byte	0x35b
 1709 041b 02       		.byte	0x2
 1710 041c 23       		.byte	0x23
 1711 041d 08       		.uleb128 0x8
 1712 041e 12       		.uleb128 0x12
 1713 041f B2020000 		.4byte	.LASF77
 1714 0423 03       		.byte	0x3
 1715 0424 6F02     		.2byte	0x26f
 1716 0426 5B030000 		.4byte	0x35b
 1717 042a 02       		.byte	0x2
 1718 042b 23       		.byte	0x23
 1719 042c 0C       		.uleb128 0xc
 1720 042d 11       		.uleb128 0x11
 1721 042e 49445200 		.ascii	"IDR\000"
 1722 0432 03       		.byte	0x3
 1723 0433 7002     		.2byte	0x270
 1724 0435 D4030000 		.4byte	0x3d4
 1725 0439 02       		.byte	0x2
 1726 043a 23       		.byte	0x23
 1727 043b 10       		.uleb128 0x10
 1728 043c 12       		.uleb128 0x12
 1729 043d E4040000 		.4byte	.LASF66
 1730 0441 03       		.byte	0x3
 1731 0442 7102     		.2byte	0x271
 1732 0444 8F010000 		.4byte	0x18f
 1733 0448 02       		.byte	0x2
 1734 0449 23       		.byte	0x23
 1735 044a 12       		.uleb128 0x12
 1736 044b 11       		.uleb128 0x11
ARM GAS  /tmp/ccxUmJh6.s 			page 68


 1737 044c 4F445200 		.ascii	"ODR\000"
 1738 0450 03       		.byte	0x3
 1739 0451 7202     		.2byte	0x272
 1740 0453 D4030000 		.4byte	0x3d4
 1741 0457 02       		.byte	0x2
 1742 0458 23       		.byte	0x23
 1743 0459 14       		.uleb128 0x14
 1744 045a 12       		.uleb128 0x12
 1745 045b EE040000 		.4byte	.LASF57
 1746 045f 03       		.byte	0x3
 1747 0460 7302     		.2byte	0x273
 1748 0462 8F010000 		.4byte	0x18f
 1749 0466 02       		.byte	0x2
 1750 0467 23       		.byte	0x23
 1751 0468 16       		.uleb128 0x16
 1752 0469 12       		.uleb128 0x12
 1753 046a 83000000 		.4byte	.LASF78
 1754 046e 03       		.byte	0x3
 1755 046f 7402     		.2byte	0x274
 1756 0471 5B030000 		.4byte	0x35b
 1757 0475 02       		.byte	0x2
 1758 0476 23       		.byte	0x23
 1759 0477 18       		.uleb128 0x18
 1760 0478 12       		.uleb128 0x12
 1761 0479 E4080000 		.4byte	.LASF79
 1762 047d 03       		.byte	0x3
 1763 047e 7502     		.2byte	0x275
 1764 0480 5B030000 		.4byte	0x35b
 1765 0484 02       		.byte	0x2
 1766 0485 23       		.byte	0x23
 1767 0486 1C       		.uleb128 0x1c
 1768 0487 11       		.uleb128 0x11
 1769 0488 41465200 		.ascii	"AFR\000"
 1770 048c 03       		.byte	0x3
 1771 048d 7602     		.2byte	0x276
 1772 048f B5040000 		.4byte	0x4b5
 1773 0493 02       		.byte	0x2
 1774 0494 23       		.byte	0x23
 1775 0495 20       		.uleb128 0x20
 1776 0496 11       		.uleb128 0x11
 1777 0497 42525200 		.ascii	"BRR\000"
 1778 049b 03       		.byte	0x3
 1779 049c 7702     		.2byte	0x277
 1780 049e D4030000 		.4byte	0x3d4
 1781 04a2 02       		.byte	0x2
 1782 04a3 23       		.byte	0x23
 1783 04a4 28       		.uleb128 0x28
 1784 04a5 12       		.uleb128 0x12
 1785 04a6 F8040000 		.4byte	.LASF59
 1786 04aa 03       		.byte	0x3
 1787 04ab 7802     		.2byte	0x278
 1788 04ad 8F010000 		.4byte	0x18f
 1789 04b1 02       		.byte	0x2
 1790 04b2 23       		.byte	0x23
 1791 04b3 2A       		.uleb128 0x2a
 1792 04b4 00       		.byte	0
 1793 04b5 0E       		.uleb128 0xe
ARM GAS  /tmp/ccxUmJh6.s 			page 69


 1794 04b6 65030000 		.4byte	0x365
 1795 04ba 06       		.uleb128 0x6
 1796 04bb C0050000 		.4byte	.LASF80
 1797 04bf 03       		.byte	0x3
 1798 04c0 7902     		.2byte	0x279
 1799 04c2 D9030000 		.4byte	0x3d9
 1800 04c6 05       		.uleb128 0x5
 1801 04c7 08       		.byte	0x8
 1802 04c8 04       		.byte	0x4
 1803 04c9 93040000 		.4byte	.LASF81
 1804 04cd 05       		.uleb128 0x5
 1805 04ce 01       		.byte	0x1
 1806 04cf 08       		.byte	0x8
 1807 04d0 E9020000 		.4byte	.LASF82
 1808 04d4 14       		.uleb128 0x14
 1809 04d5 01       		.byte	0x1
 1810 04d6 24010000 		.4byte	0x124
 1811 04da 06       		.byte	0x6
 1812 04db BC       		.byte	0xbc
 1813 04dc F3040000 		.4byte	0x4f3
 1814 04e0 04       		.uleb128 0x4
 1815 04e1 F5030000 		.4byte	.LASF83
 1816 04e5 00       		.byte	0
 1817 04e6 04       		.uleb128 0x4
 1818 04e7 E5060000 		.4byte	.LASF84
 1819 04eb 01       		.byte	0x1
 1820 04ec 04       		.uleb128 0x4
 1821 04ed 8C030000 		.4byte	.LASF85
 1822 04f1 02       		.byte	0x2
 1823 04f2 00       		.byte	0
 1824 04f3 07       		.uleb128 0x7
 1825 04f4 3F030000 		.4byte	.LASF86
 1826 04f8 06       		.byte	0x6
 1827 04f9 C3       		.byte	0xc3
 1828 04fa D4040000 		.4byte	0x4d4
 1829 04fe 15       		.uleb128 0x15
 1830 04ff DE030000 		.4byte	.LASF174
 1831 0503 0C       		.byte	0xc
 1832 0504 07       		.byte	0x7
 1833 0505 34       		.byte	0x34
 1834 0506 A5050000 		.4byte	0x5a5
 1835 050a 0A       		.uleb128 0xa
 1836 050b 88000000 		.4byte	.LASF87
 1837 050f 07       		.byte	0x7
 1838 0510 36       		.byte	0x36
 1839 0511 24010000 		.4byte	0x124
 1840 0515 02       		.byte	0x2
 1841 0516 23       		.byte	0x23
 1842 0517 00       		.uleb128 0
 1843 0518 0A       		.uleb128 0xa
 1844 0519 0E070000 		.4byte	.LASF88
 1845 051d 07       		.byte	0x7
 1846 051e 38       		.byte	0x38
 1847 051f 24010000 		.4byte	0x124
 1848 0523 02       		.byte	0x2
 1849 0524 23       		.byte	0x23
 1850 0525 01       		.uleb128 0x1
ARM GAS  /tmp/ccxUmJh6.s 			page 70


 1851 0526 0A       		.uleb128 0xa
 1852 0527 5A000000 		.4byte	.LASF89
 1853 052b 07       		.byte	0x7
 1854 052c 39       		.byte	0x39
 1855 052d 24010000 		.4byte	0x124
 1856 0531 02       		.byte	0x2
 1857 0532 23       		.byte	0x23
 1858 0533 02       		.uleb128 0x2
 1859 0534 0A       		.uleb128 0xa
 1860 0535 3C010000 		.4byte	.LASF90
 1861 0539 07       		.byte	0x7
 1862 053a 3A       		.byte	0x3a
 1863 053b 24010000 		.4byte	0x124
 1864 053f 02       		.byte	0x2
 1865 0540 23       		.byte	0x23
 1866 0541 03       		.uleb128 0x3
 1867 0542 0A       		.uleb128 0xa
 1868 0543 AD040000 		.4byte	.LASF91
 1869 0547 07       		.byte	0x7
 1870 0548 3C       		.byte	0x3c
 1871 0549 3D010000 		.4byte	0x13d
 1872 054d 02       		.byte	0x2
 1873 054e 23       		.byte	0x23
 1874 054f 04       		.uleb128 0x4
 1875 0550 0A       		.uleb128 0xa
 1876 0551 D0020000 		.4byte	.LASF92
 1877 0555 07       		.byte	0x7
 1878 0556 3D       		.byte	0x3d
 1879 0557 24010000 		.4byte	0x124
 1880 055b 02       		.byte	0x2
 1881 055c 23       		.byte	0x23
 1882 055d 06       		.uleb128 0x6
 1883 055e 0A       		.uleb128 0xa
 1884 055f D7020000 		.4byte	.LASF93
 1885 0563 07       		.byte	0x7
 1886 0564 3E       		.byte	0x3e
 1887 0565 24010000 		.4byte	0x124
 1888 0569 02       		.byte	0x2
 1889 056a 23       		.byte	0x23
 1890 056b 07       		.uleb128 0x7
 1891 056c 0A       		.uleb128 0xa
 1892 056d 06000000 		.4byte	.LASF94
 1893 0571 07       		.byte	0x7
 1894 0572 41       		.byte	0x41
 1895 0573 24010000 		.4byte	0x124
 1896 0577 02       		.byte	0x2
 1897 0578 23       		.byte	0x23
 1898 0579 08       		.uleb128 0x8
 1899 057a 0A       		.uleb128 0xa
 1900 057b 14000000 		.4byte	.LASF95
 1901 057f 07       		.byte	0x7
 1902 0580 42       		.byte	0x42
 1903 0581 24010000 		.4byte	0x124
 1904 0585 02       		.byte	0x2
 1905 0586 23       		.byte	0x23
 1906 0587 09       		.uleb128 0x9
 1907 0588 0A       		.uleb128 0xa
ARM GAS  /tmp/ccxUmJh6.s 			page 71


 1908 0589 22000000 		.4byte	.LASF96
 1909 058d 07       		.byte	0x7
 1910 058e 43       		.byte	0x43
 1911 058f 24010000 		.4byte	0x124
 1912 0593 02       		.byte	0x2
 1913 0594 23       		.byte	0x23
 1914 0595 0A       		.uleb128 0xa
 1915 0596 0A       		.uleb128 0xa
 1916 0597 30000000 		.4byte	.LASF97
 1917 059b 07       		.byte	0x7
 1918 059c 44       		.byte	0x44
 1919 059d 24010000 		.4byte	0x124
 1920 05a1 02       		.byte	0x2
 1921 05a2 23       		.byte	0x23
 1922 05a3 0B       		.uleb128 0xb
 1923 05a4 00       		.byte	0
 1924 05a5 07       		.uleb128 0x7
 1925 05a6 93070000 		.4byte	.LASF98
 1926 05aa 07       		.byte	0x7
 1927 05ab 46       		.byte	0x46
 1928 05ac FE040000 		.4byte	0x4fe
 1929 05b0 02       		.uleb128 0x2
 1930 05b1 4A020000 		.4byte	.LASF100
 1931 05b5 01       		.byte	0x1
 1932 05b6 24010000 		.4byte	0x124
 1933 05ba 08       		.byte	0x8
 1934 05bb 0D       		.byte	0xd
 1935 05bc EB050000 		.4byte	0x5eb
 1936 05c0 04       		.uleb128 0x4
 1937 05c1 98020000 		.4byte	.LASF101
 1938 05c5 00       		.byte	0
 1939 05c6 04       		.uleb128 0x4
 1940 05c7 88070000 		.4byte	.LASF102
 1941 05cb 01       		.byte	0x1
 1942 05cc 04       		.uleb128 0x4
 1943 05cd FF030000 		.4byte	.LASF103
 1944 05d1 02       		.byte	0x2
 1945 05d2 04       		.uleb128 0x4
 1946 05d3 A1050000 		.4byte	.LASF104
 1947 05d7 03       		.byte	0x3
 1948 05d8 04       		.uleb128 0x4
 1949 05d9 EE080000 		.4byte	.LASF105
 1950 05dd 04       		.byte	0x4
 1951 05de 04       		.uleb128 0x4
 1952 05df BD070000 		.4byte	.LASF106
 1953 05e3 05       		.byte	0x5
 1954 05e4 04       		.uleb128 0x4
 1955 05e5 49040000 		.4byte	.LASF107
 1956 05e9 06       		.byte	0x6
 1957 05ea 00       		.byte	0
 1958 05eb 16       		.uleb128 0x16
 1959 05ec D8000000 		.4byte	.LASF175
 1960 05f0 01       		.byte	0x1
 1961 05f1 7C03     		.2byte	0x37c
 1962 05f3 01       		.byte	0x1
 1963 05f4 00000000 		.4byte	.LFB16
 1964 05f8 EC000000 		.4byte	.LFE16
ARM GAS  /tmp/ccxUmJh6.s 			page 72


 1965 05fc 00000000 		.4byte	.LLST0
 1966 0600 01       		.byte	0x1
 1967 0601 24060000 		.4byte	0x624
 1968 0605 17       		.uleb128 0x17
 1969 0606 A8040000 		.4byte	.LASF99
 1970 060a 01       		.byte	0x1
 1971 060b 7C03     		.2byte	0x37c
 1972 060d 0D010000 		.4byte	0x10d
 1973 0611 02       		.byte	0x2
 1974 0612 91       		.byte	0x91
 1975 0613 6F       		.sleb128 -17
 1976 0614 17       		.uleb128 0x17
 1977 0615 3F050000 		.4byte	.LASF108
 1978 0619 01       		.byte	0x1
 1979 061a 7C03     		.2byte	0x37c
 1980 061c A5010000 		.4byte	0x1a5
 1981 0620 02       		.byte	0x2
 1982 0621 91       		.byte	0x91
 1983 0622 68       		.sleb128 -24
 1984 0623 00       		.byte	0
 1985 0624 18       		.uleb128 0x18
 1986 0625 89020000 		.4byte	.LASF176
 1987 0629 01       		.byte	0x1
 1988 062a B803     		.2byte	0x3b8
 1989 062c 01       		.byte	0x1
 1990 062d A5010000 		.4byte	0x1a5
 1991 0631 00000000 		.4byte	.LFB18
 1992 0635 48000000 		.4byte	.LFE18
 1993 0639 2C000000 		.4byte	.LLST1
 1994 063d 01       		.byte	0x1
 1995 063e 52060000 		.4byte	0x652
 1996 0642 17       		.uleb128 0x17
 1997 0643 B8020000 		.4byte	.LASF109
 1998 0647 01       		.byte	0x1
 1999 0648 B803     		.2byte	0x3b8
 2000 064a A5010000 		.4byte	0x1a5
 2001 064e 02       		.byte	0x2
 2002 064f 91       		.byte	0x91
 2003 0650 74       		.sleb128 -12
 2004 0651 00       		.byte	0
 2005 0652 19       		.uleb128 0x19
 2006 0653 01       		.byte	0x1
 2007 0654 97080000 		.4byte	.LASF177
 2008 0658 02       		.byte	0x2
 2009 0659 D6       		.byte	0xd6
 2010 065a 01       		.byte	0x1
 2011 065b 76010000 		.4byte	0x176
 2012 065f 00000000 		.4byte	.LFB20
 2013 0663 CC020000 		.4byte	.LFE20
 2014 0667 58000000 		.4byte	.LLST2
 2015 066b 01       		.byte	0x1
 2016 066c 74070000 		.4byte	0x774
 2017 0670 1A       		.uleb128 0x1a
 2018 0671 6900     		.ascii	"i\000"
 2019 0673 02       		.byte	0x2
 2020 0674 D8       		.byte	0xd8
 2021 0675 24010000 		.4byte	0x124
ARM GAS  /tmp/ccxUmJh6.s 			page 73


 2022 0679 02       		.byte	0x2
 2023 067a 91       		.byte	0x91
 2024 067b 77       		.sleb128 -9
 2025 067c 1B       		.uleb128 0x1b
 2026 067d 696900   		.ascii	"ii\000"
 2027 0680 02       		.byte	0x2
 2028 0681 D8       		.byte	0xd8
 2029 0682 24010000 		.4byte	0x124
 2030 0686 1C       		.uleb128 0x1c
 2031 0687 D7080000 		.4byte	.LASF110
 2032 068b 02       		.byte	0x2
 2033 068c D9       		.byte	0xd9
 2034 068d 24010000 		.4byte	0x124
 2035 0691 1C       		.uleb128 0x1c
 2036 0692 34030000 		.4byte	.LASF111
 2037 0696 02       		.byte	0x2
 2038 0697 D9       		.byte	0xd9
 2039 0698 24010000 		.4byte	0x124
 2040 069c 1D       		.uleb128 0x1d
 2041 069d 05070000 		.4byte	.LASF112
 2042 06a1 02       		.byte	0x2
 2043 06a2 D9       		.byte	0xd9
 2044 06a3 24010000 		.4byte	0x124
 2045 06a7 02       		.byte	0x2
 2046 06a8 91       		.byte	0x91
 2047 06a9 75       		.sleb128 -11
 2048 06aa 1D       		.uleb128 0x1d
 2049 06ab B0080000 		.4byte	.LASF113
 2050 06af 02       		.byte	0x2
 2051 06b0 DA       		.byte	0xda
 2052 06b1 24010000 		.4byte	0x124
 2053 06b5 02       		.byte	0x2
 2054 06b6 91       		.byte	0x91
 2055 06b7 74       		.sleb128 -12
 2056 06b8 1C       		.uleb128 0x1c
 2057 06b9 DE020000 		.4byte	.LASF114
 2058 06bd 02       		.byte	0x2
 2059 06be DB       		.byte	0xdb
 2060 06bf 3D010000 		.4byte	0x13d
 2061 06c3 1C       		.uleb128 0x1c
 2062 06c4 7C030000 		.4byte	.LASF115
 2063 06c8 02       		.byte	0x2
 2064 06c9 DB       		.byte	0xdb
 2065 06ca 3D010000 		.4byte	0x13d
 2066 06ce 1D       		.uleb128 0x1d
 2067 06cf AC000000 		.4byte	.LASF116
 2068 06d3 02       		.byte	0x2
 2069 06d4 DD       		.byte	0xdd
 2070 06d5 F3040000 		.4byte	0x4f3
 2071 06d9 02       		.byte	0x2
 2072 06da 91       		.byte	0x91
 2073 06db 76       		.sleb128 -10
 2074 06dc 1D       		.uleb128 0x1d
 2075 06dd C2010000 		.4byte	.LASF117
 2076 06e1 02       		.byte	0x2
 2077 06e2 DF       		.byte	0xdf
 2078 06e3 3D010000 		.4byte	0x13d
ARM GAS  /tmp/ccxUmJh6.s 			page 74


 2079 06e7 02       		.byte	0x2
 2080 06e8 91       		.byte	0x91
 2081 06e9 64       		.sleb128 -28
 2082 06ea 1D       		.uleb128 0x1d
 2083 06eb 62070000 		.4byte	.LASF118
 2084 06ef 02       		.byte	0x2
 2085 06f0 E2       		.byte	0xe2
 2086 06f1 24010000 		.4byte	0x124
 2087 06f5 02       		.byte	0x2
 2088 06f6 91       		.byte	0x91
 2089 06f7 63       		.sleb128 -29
 2090 06f8 1D       		.uleb128 0x1d
 2091 06f9 00000000 		.4byte	.LASF119
 2092 06fd 02       		.byte	0x2
 2093 06fe E8       		.byte	0xe8
 2094 06ff 74070000 		.4byte	0x774
 2095 0703 02       		.byte	0x2
 2096 0704 91       		.byte	0x91
 2097 0705 4C       		.sleb128 -52
 2098 0706 1D       		.uleb128 0x1d
 2099 0707 76040000 		.4byte	.LASF120
 2100 070b 02       		.byte	0x2
 2101 070c E9       		.byte	0xe9
 2102 070d B0050000 		.4byte	0x5b0
 2103 0711 02       		.byte	0x2
 2104 0712 91       		.byte	0x91
 2105 0713 73       		.sleb128 -13
 2106 0714 1D       		.uleb128 0x1d
 2107 0715 2C070000 		.4byte	.LASF121
 2108 0719 02       		.byte	0x2
 2109 071a EA       		.byte	0xea
 2110 071b 24010000 		.4byte	0x124
 2111 071f 02       		.byte	0x2
 2112 0720 91       		.byte	0x91
 2113 0721 72       		.sleb128 -14
 2114 0722 1D       		.uleb128 0x1d
 2115 0723 5C050000 		.4byte	.LASF122
 2116 0727 02       		.byte	0x2
 2117 0728 EB       		.byte	0xeb
 2118 0729 24010000 		.4byte	0x124
 2119 072d 02       		.byte	0x2
 2120 072e 91       		.byte	0x91
 2121 072f 71       		.sleb128 -15
 2122 0730 1D       		.uleb128 0x1d
 2123 0731 F9060000 		.4byte	.LASF123
 2124 0735 02       		.byte	0x2
 2125 0736 EC       		.byte	0xec
 2126 0737 24010000 		.4byte	0x124
 2127 073b 02       		.byte	0x2
 2128 073c 91       		.byte	0x91
 2129 073d 70       		.sleb128 -16
 2130 073e 1D       		.uleb128 0x1d
 2131 073f A5010000 		.4byte	.LASF124
 2132 0743 02       		.byte	0x2
 2133 0744 ED       		.byte	0xed
 2134 0745 24010000 		.4byte	0x124
 2135 0749 02       		.byte	0x2
ARM GAS  /tmp/ccxUmJh6.s 			page 75


 2136 074a 91       		.byte	0x91
 2137 074b 6F       		.sleb128 -17
 2138 074c 1D       		.uleb128 0x1d
 2139 074d 13040000 		.4byte	.LASF125
 2140 0751 02       		.byte	0x2
 2141 0752 EE       		.byte	0xee
 2142 0753 76010000 		.4byte	0x176
 2143 0757 02       		.byte	0x2
 2144 0758 91       		.byte	0x91
 2145 0759 68       		.sleb128 -24
 2146 075a 1D       		.uleb128 0x1d
 2147 075b AF060000 		.4byte	.LASF126
 2148 075f 02       		.byte	0x2
 2149 0760 EF       		.byte	0xef
 2150 0761 24010000 		.4byte	0x124
 2151 0765 02       		.byte	0x2
 2152 0766 91       		.byte	0x91
 2153 0767 67       		.sleb128 -25
 2154 0768 1C       		.uleb128 0x1c
 2155 0769 B7000000 		.4byte	.LASF127
 2156 076d 02       		.byte	0x2
 2157 076e F4       		.byte	0xf4
 2158 076f 84070000 		.4byte	0x784
 2159 0773 00       		.byte	0
 2160 0774 0C       		.uleb128 0xc
 2161 0775 CD040000 		.4byte	0x4cd
 2162 0779 84070000 		.4byte	0x784
 2163 077d 0D       		.uleb128 0xd
 2164 077e 5D020000 		.4byte	0x25d
 2165 0782 13       		.byte	0x13
 2166 0783 00       		.byte	0
 2167 0784 1E       		.uleb128 0x1e
 2168 0785 04       		.byte	0x4
 2169 0786 A5050000 		.4byte	0x5a5
 2170 078a 1F       		.uleb128 0x1f
 2171 078b 01       		.byte	0x1
 2172 078c 77070000 		.4byte	.LASF178
 2173 0790 02       		.byte	0x2
 2174 0791 7903     		.2byte	0x379
 2175 0793 01       		.byte	0x1
 2176 0794 00000000 		.4byte	.LFB21
 2177 0798 B0000000 		.4byte	.LFE21
 2178 079c 84000000 		.4byte	.LLST3
 2179 07a0 01       		.byte	0x1
 2180 07a1 4A080000 		.4byte	0x84a
 2181 07a5 17       		.uleb128 0x17
 2182 07a6 CB000000 		.4byte	.LASF128
 2183 07aa 02       		.byte	0x2
 2184 07ab 7903     		.2byte	0x379
 2185 07ad 4A080000 		.4byte	0x84a
 2186 07b1 03       		.byte	0x3
 2187 07b2 91       		.byte	0x91
 2188 07b3 A47F     		.sleb128 -92
 2189 07b5 20       		.uleb128 0x20
 2190 07b6 643100   		.ascii	"d1\000"
 2191 07b9 02       		.byte	0x2
 2192 07ba 7B03     		.2byte	0x37b
ARM GAS  /tmp/ccxUmJh6.s 			page 76


 2193 07bc 9A010000 		.4byte	0x19a
 2194 07c0 02       		.byte	0x2
 2195 07c1 91       		.byte	0x91
 2196 07c2 74       		.sleb128 -12
 2197 07c3 20       		.uleb128 0x20
 2198 07c4 643200   		.ascii	"d2\000"
 2199 07c7 02       		.byte	0x2
 2200 07c8 7B03     		.2byte	0x37b
 2201 07ca 9A010000 		.4byte	0x19a
 2202 07ce 02       		.byte	0x2
 2203 07cf 91       		.byte	0x91
 2204 07d0 70       		.sleb128 -16
 2205 07d1 20       		.uleb128 0x20
 2206 07d2 643300   		.ascii	"d3\000"
 2207 07d5 02       		.byte	0x2
 2208 07d6 7B03     		.2byte	0x37b
 2209 07d8 9A010000 		.4byte	0x19a
 2210 07dc 02       		.byte	0x2
 2211 07dd 91       		.byte	0x91
 2212 07de 6C       		.sleb128 -20
 2213 07df 20       		.uleb128 0x20
 2214 07e0 643400   		.ascii	"d4\000"
 2215 07e3 02       		.byte	0x2
 2216 07e4 7B03     		.2byte	0x37b
 2217 07e6 9A010000 		.4byte	0x19a
 2218 07ea 02       		.byte	0x2
 2219 07eb 91       		.byte	0x91
 2220 07ec 68       		.sleb128 -24
 2221 07ed 20       		.uleb128 0x20
 2222 07ee 643500   		.ascii	"d5\000"
 2223 07f1 02       		.byte	0x2
 2224 07f2 7B03     		.2byte	0x37b
 2225 07f4 9A010000 		.4byte	0x19a
 2226 07f8 02       		.byte	0x2
 2227 07f9 91       		.byte	0x91
 2228 07fa 64       		.sleb128 -28
 2229 07fb 20       		.uleb128 0x20
 2230 07fc 643600   		.ascii	"d6\000"
 2231 07ff 02       		.byte	0x2
 2232 0800 7B03     		.2byte	0x37b
 2233 0802 9A010000 		.4byte	0x19a
 2234 0806 02       		.byte	0x2
 2235 0807 91       		.byte	0x91
 2236 0808 60       		.sleb128 -32
 2237 0809 21       		.uleb128 0x21
 2238 080a 37040000 		.4byte	.LASF129
 2239 080e 02       		.byte	0x2
 2240 080f 7C03     		.2byte	0x37c
 2241 0811 50080000 		.4byte	0x850
 2242 0815 03       		.byte	0x3
 2243 0816 91       		.byte	0x91
 2244 0817 B87F     		.sleb128 -72
 2245 0819 21       		.uleb128 0x21
 2246 081a 5B060000 		.4byte	.LASF130
 2247 081e 02       		.byte	0x2
 2248 081f 7D03     		.2byte	0x37d
 2249 0821 67080000 		.4byte	0x867
ARM GAS  /tmp/ccxUmJh6.s 			page 77


 2250 0825 03       		.byte	0x3
 2251 0826 91       		.byte	0x91
 2252 0827 B47F     		.sleb128 -76
 2253 0829 21       		.uleb128 0x21
 2254 082a EE020000 		.4byte	.LASF131
 2255 082e 02       		.byte	0x2
 2256 082f 7E03     		.2byte	0x37e
 2257 0831 67080000 		.4byte	0x867
 2258 0835 03       		.byte	0x3
 2259 0836 91       		.byte	0x91
 2260 0837 B07F     		.sleb128 -80
 2261 0839 21       		.uleb128 0x21
 2262 083a 17060000 		.4byte	.LASF132
 2263 083e 02       		.byte	0x2
 2264 083f 7F03     		.2byte	0x37f
 2265 0841 67080000 		.4byte	0x867
 2266 0845 03       		.byte	0x3
 2267 0846 91       		.byte	0x91
 2268 0847 AC7F     		.sleb128 -84
 2269 0849 00       		.byte	0
 2270 084a 1E       		.uleb128 0x1e
 2271 084b 04       		.byte	0x4
 2272 084c 84010000 		.4byte	0x184
 2273 0850 0C       		.uleb128 0xc
 2274 0851 CD040000 		.4byte	0x4cd
 2275 0855 60080000 		.4byte	0x860
 2276 0859 0D       		.uleb128 0xd
 2277 085a 5D020000 		.4byte	0x25d
 2278 085e 27       		.byte	0x27
 2279 085f 00       		.byte	0
 2280 0860 05       		.uleb128 0x5
 2281 0861 04       		.byte	0x4
 2282 0862 04       		.byte	0x4
 2283 0863 BC010000 		.4byte	.LASF133
 2284 0867 0E       		.uleb128 0xe
 2285 0868 60080000 		.4byte	0x860
 2286 086c 22       		.uleb128 0x22
 2287 086d 01       		.byte	0x1
 2288 086e 35070000 		.4byte	.LASF179
 2289 0872 02       		.byte	0x2
 2290 0873 F403     		.2byte	0x3f4
 2291 0875 01       		.byte	0x1
 2292 0876 00000000 		.4byte	.LFB22
 2293 087a 28010000 		.4byte	.LFE22
 2294 087e 02       		.byte	0x2
 2295 087f 7D       		.byte	0x7d
 2296 0880 00       		.sleb128 0
 2297 0881 01       		.byte	0x1
 2298 0882 0C       		.uleb128 0xc
 2299 0883 24010000 		.4byte	0x124
 2300 0887 92080000 		.4byte	0x892
 2301 088b 0D       		.uleb128 0xd
 2302 088c 5D020000 		.4byte	0x25d
 2303 0890 FF       		.byte	0xff
 2304 0891 00       		.byte	0
 2305 0892 23       		.uleb128 0x23
 2306 0893 48010000 		.4byte	.LASF134
ARM GAS  /tmp/ccxUmJh6.s 			page 78


 2307 0897 02       		.byte	0x2
 2308 0898 3B       		.byte	0x3b
 2309 0899 A4080000 		.4byte	0x8a4
 2310 089d 01       		.byte	0x1
 2311 089e 05       		.byte	0x5
 2312 089f 03       		.byte	0x3
 2313 08a0 00000000 		.4byte	tx2buff
 2314 08a4 0E       		.uleb128 0xe
 2315 08a5 82080000 		.4byte	0x882
 2316 08a9 23       		.uleb128 0x23
 2317 08aa 21010000 		.4byte	.LASF135
 2318 08ae 02       		.byte	0x2
 2319 08af 3C       		.byte	0x3c
 2320 08b0 BB080000 		.4byte	0x8bb
 2321 08b4 01       		.byte	0x1
 2322 08b5 05       		.byte	0x5
 2323 08b6 03       		.byte	0x3
 2324 08b7 00000000 		.4byte	rx2buff
 2325 08bb 0E       		.uleb128 0xe
 2326 08bc 82080000 		.4byte	0x882
 2327 08c0 23       		.uleb128 0x23
 2328 08c1 5F030000 		.4byte	.LASF136
 2329 08c5 02       		.byte	0x2
 2330 08c6 3E       		.byte	0x3e
 2331 08c7 D2080000 		.4byte	0x8d2
 2332 08cb 01       		.byte	0x1
 2333 08cc 05       		.byte	0x5
 2334 08cd 03       		.byte	0x3
 2335 08ce 00000000 		.4byte	tx1buff
 2336 08d2 0E       		.uleb128 0xe
 2337 08d3 82080000 		.4byte	0x882
 2338 08d7 23       		.uleb128 0x23
 2339 08d8 34010000 		.4byte	.LASF137
 2340 08dc 02       		.byte	0x2
 2341 08dd 3F       		.byte	0x3f
 2342 08de E9080000 		.4byte	0x8e9
 2343 08e2 01       		.byte	0x1
 2344 08e3 05       		.byte	0x5
 2345 08e4 03       		.byte	0x3
 2346 08e5 00000000 		.4byte	rx1buff
 2347 08e9 0E       		.uleb128 0xe
 2348 08ea 82080000 		.4byte	0x882
 2349 08ee 23       		.uleb128 0x23
 2350 08ef BE020000 		.4byte	.LASF138
 2351 08f3 02       		.byte	0x2
 2352 08f4 49       		.byte	0x49
 2353 08f5 00090000 		.4byte	0x900
 2354 08f9 01       		.byte	0x1
 2355 08fa 05       		.byte	0x5
 2356 08fb 03       		.byte	0x3
 2357 08fc 00000000 		.4byte	show_select_timer
 2358 0900 0E       		.uleb128 0xe
 2359 0901 3D010000 		.4byte	0x13d
 2360 0905 23       		.uleb128 0x23
 2361 0906 67040000 		.4byte	.LASF139
 2362 090a 02       		.byte	0x2
 2363 090b 4A       		.byte	0x4a
ARM GAS  /tmp/ccxUmJh6.s 			page 79


 2364 090c 17090000 		.4byte	0x917
 2365 0910 01       		.byte	0x1
 2366 0911 05       		.byte	0x5
 2367 0912 03       		.byte	0x3
 2368 0913 00000000 		.4byte	switches_timer
 2369 0917 0E       		.uleb128 0xe
 2370 0918 24010000 		.4byte	0x124
 2371 091c 23       		.uleb128 0x23
 2372 091d 3E000000 		.4byte	.LASF140
 2373 0921 02       		.byte	0x2
 2374 0922 4B       		.byte	0x4b
 2375 0923 17090000 		.4byte	0x917
 2376 0927 01       		.byte	0x1
 2377 0928 05       		.byte	0x5
 2378 0929 03       		.byte	0x3
 2379 092a 00000000 		.4byte	acswitch_timer
 2380 092e 23       		.uleb128 0x23
 2381 092f C3040000 		.4byte	.LASF141
 2382 0933 02       		.byte	0x2
 2383 0934 4D       		.byte	0x4d
 2384 0935 00090000 		.4byte	0x900
 2385 0939 01       		.byte	0x1
 2386 093a 05       		.byte	0x5
 2387 093b 03       		.byte	0x3
 2388 093c 00000000 		.4byte	scroll1_timer
 2389 0940 23       		.uleb128 0x23
 2390 0941 BB080000 		.4byte	.LASF142
 2391 0945 02       		.byte	0x2
 2392 0946 4E       		.byte	0x4e
 2393 0947 00090000 		.4byte	0x900
 2394 094b 01       		.byte	0x1
 2395 094c 05       		.byte	0x5
 2396 094d 03       		.byte	0x3
 2397 094e 00000000 		.4byte	scroll2_timer
 2398 0952 23       		.uleb128 0x23
 2399 0953 86080000 		.4byte	.LASF143
 2400 0957 02       		.byte	0x2
 2401 0958 50       		.byte	0x50
 2402 0959 00090000 		.4byte	0x900
 2403 095d 01       		.byte	0x1
 2404 095e 05       		.byte	0x5
 2405 095f 03       		.byte	0x3
 2406 0960 00000000 		.4byte	standalone_timer
 2407 0964 23       		.uleb128 0x23
 2408 0965 72060000 		.4byte	.LASF144
 2409 0969 02       		.byte	0x2
 2410 096a 51       		.byte	0x51
 2411 096b 00090000 		.4byte	0x900
 2412 096f 01       		.byte	0x1
 2413 0970 05       		.byte	0x5
 2414 0971 03       		.byte	0x3
 2415 0972 00000000 		.4byte	standalone_enable_menu_timer
 2416 0976 23       		.uleb128 0x23
 2417 0977 5D010000 		.4byte	.LASF145
 2418 097b 02       		.byte	0x2
 2419 097c 53       		.byte	0x53
 2420 097d 17090000 		.4byte	0x917
ARM GAS  /tmp/ccxUmJh6.s 			page 80


 2421 0981 01       		.byte	0x1
 2422 0982 05       		.byte	0x5
 2423 0983 03       		.byte	0x3
 2424 0984 00000000 		.4byte	grouped_master_timeout_timer
 2425 0988 23       		.uleb128 0x23
 2426 0989 06030000 		.4byte	.LASF146
 2427 098d 02       		.byte	0x2
 2428 098e 54       		.byte	0x54
 2429 098f 00090000 		.4byte	0x900
 2430 0993 01       		.byte	0x1
 2431 0994 05       		.byte	0x5
 2432 0995 03       		.byte	0x3
 2433 0996 00000000 		.4byte	take_temp_sample
 2434 099a 23       		.uleb128 0x23
 2435 099b 4B070000 		.4byte	.LASF147
 2436 099f 02       		.byte	0x2
 2437 09a0 55       		.byte	0x55
 2438 09a1 17090000 		.4byte	0x917
 2439 09a5 01       		.byte	0x1
 2440 09a6 05       		.byte	0x5
 2441 09a7 03       		.byte	0x3
 2442 09a8 00000000 		.4byte	timer_wifi_bright
 2443 09ac 23       		.uleb128 0x23
 2444 09ad E9030000 		.4byte	.LASF148
 2445 09b1 02       		.byte	0x2
 2446 09b2 58       		.byte	0x58
 2447 09b3 00090000 		.4byte	0x900
 2448 09b7 01       		.byte	0x1
 2449 09b8 05       		.byte	0x5
 2450 09b9 03       		.byte	0x3
 2451 09ba 00000000 		.4byte	timer_relay
 2452 09be 23       		.uleb128 0x23
 2453 09bf 68020000 		.4byte	.LASF149
 2454 09c3 02       		.byte	0x2
 2455 09c4 5A       		.byte	0x5a
 2456 09c5 00090000 		.4byte	0x900
 2457 09c9 01       		.byte	0x1
 2458 09ca 05       		.byte	0x5
 2459 09cb 03       		.byte	0x3
 2460 09cc 00000000 		.4byte	tt_take_photo_sample
 2461 09d0 23       		.uleb128 0x23
 2462 09d1 67030000 		.4byte	.LASF150
 2463 09d5 02       		.byte	0x2
 2464 09d6 5B       		.byte	0x5b
 2465 09d7 00090000 		.4byte	0x900
 2466 09db 01       		.byte	0x1
 2467 09dc 05       		.byte	0x5
 2468 09dd 03       		.byte	0x3
 2469 09de 00000000 		.4byte	tt_relay_on_off
 2470 09e2 23       		.uleb128 0x23
 2471 09e3 C6030000 		.4byte	.LASF151
 2472 09e7 02       		.byte	0x2
 2473 09e8 5F       		.byte	0x5f
 2474 09e9 24010000 		.4byte	0x124
 2475 09ed 01       		.byte	0x1
 2476 09ee 05       		.byte	0x5
 2477 09ef 03       		.byte	0x3
ARM GAS  /tmp/ccxUmJh6.s 			page 81


 2478 09f0 00000000 		.4byte	saved_mode
 2479 09f4 23       		.uleb128 0x23
 2480 09f5 7D020000 		.4byte	.LASF152
 2481 09f9 02       		.byte	0x2
 2482 09fa 62       		.byte	0x62
 2483 09fb 17090000 		.4byte	0x917
 2484 09ff 01       		.byte	0x1
 2485 0a00 05       		.byte	0x5
 2486 0a01 03       		.byte	0x3
 2487 0a02 00000000 		.4byte	igrid_timer
 2488 0a06 23       		.uleb128 0x23
 2489 0a07 7A010000 		.4byte	.LASF153
 2490 0a0b 02       		.byte	0x2
 2491 0a0c 63       		.byte	0x63
 2492 0a0d 17090000 		.4byte	0x917
 2493 0a11 01       		.byte	0x1
 2494 0a12 05       		.byte	0x5
 2495 0a13 03       		.byte	0x3
 2496 0a14 00000000 		.4byte	vgrid_timer
 2497 0a18 24       		.uleb128 0x24
 2498 0a19 733100   		.ascii	"s1\000"
 2499 0a1c 02       		.byte	0x2
 2500 0a1d 66       		.byte	0x66
 2501 0a1e 3D010000 		.4byte	0x13d
 2502 0a22 01       		.byte	0x1
 2503 0a23 05       		.byte	0x5
 2504 0a24 03       		.byte	0x3
 2505 0a25 00000000 		.4byte	s1
 2506 0a29 24       		.uleb128 0x24
 2507 0a2a 733200   		.ascii	"s2\000"
 2508 0a2d 02       		.byte	0x2
 2509 0a2e 67       		.byte	0x67
 2510 0a2f 3D010000 		.4byte	0x13d
 2511 0a33 01       		.byte	0x1
 2512 0a34 05       		.byte	0x5
 2513 0a35 03       		.byte	0x3
 2514 0a36 00000000 		.4byte	s2
 2515 0a3a 24       		.uleb128 0x24
 2516 0a3b 73616300 		.ascii	"sac\000"
 2517 0a3f 02       		.byte	0x2
 2518 0a40 68       		.byte	0x68
 2519 0a41 3D010000 		.4byte	0x13d
 2520 0a45 01       		.byte	0x1
 2521 0a46 05       		.byte	0x5
 2522 0a47 03       		.byte	0x3
 2523 0a48 00000000 		.4byte	sac
 2524 0a4c 23       		.uleb128 0x23
 2525 0a4d 24070000 		.4byte	.LASF154
 2526 0a51 02       		.byte	0x2
 2527 0a52 69       		.byte	0x69
 2528 0a53 24010000 		.4byte	0x124
 2529 0a57 01       		.byte	0x1
 2530 0a58 05       		.byte	0x5
 2531 0a59 03       		.byte	0x3
 2532 0a5a 00000000 		.4byte	sac_aux
 2533 0a5e 23       		.uleb128 0x23
 2534 0a5f B2030000 		.4byte	.LASF155
ARM GAS  /tmp/ccxUmJh6.s 			page 82


 2535 0a63 02       		.byte	0x2
 2536 0a64 6C       		.byte	0x6c
 2537 0a65 17090000 		.4byte	0x917
 2538 0a69 01       		.byte	0x1
 2539 0a6a 05       		.byte	0x5
 2540 0a6b 03       		.byte	0x3
 2541 0a6c 00000000 		.4byte	usart1_mini_timeout
 2542 0a70 23       		.uleb128 0x23
 2543 0a71 2E020000 		.4byte	.LASF156
 2544 0a75 02       		.byte	0x2
 2545 0a76 6D       		.byte	0x6d
 2546 0a77 17090000 		.4byte	0x917
 2547 0a7b 01       		.byte	0x1
 2548 0a7c 05       		.byte	0x5
 2549 0a7d 03       		.byte	0x3
 2550 0a7e 00000000 		.4byte	usart1_pckt_ready
 2551 0a82 23       		.uleb128 0x23
 2552 0a83 A1020000 		.4byte	.LASF157
 2553 0a87 02       		.byte	0x2
 2554 0a88 6E       		.byte	0x6e
 2555 0a89 17090000 		.4byte	0x917
 2556 0a8d 01       		.byte	0x1
 2557 0a8e 05       		.byte	0x5
 2558 0a8f 03       		.byte	0x3
 2559 0a90 00000000 		.4byte	usart1_have_data
 2560 0a94 23       		.uleb128 0x23
 2561 0a95 F6010000 		.4byte	.LASF158
 2562 0a99 02       		.byte	0x2
 2563 0a9a 6F       		.byte	0x6f
 2564 0a9b 24010000 		.4byte	0x124
 2565 0a9f 01       		.byte	0x1
 2566 0aa0 05       		.byte	0x5
 2567 0aa1 03       		.byte	0x3
 2568 0aa2 00000000 		.4byte	usart1_pckt_bytes
 2569 0aa6 23       		.uleb128 0x23
 2570 0aa7 4D000000 		.4byte	.LASF159
 2571 0aab 02       		.byte	0x2
 2572 0aac 93       		.byte	0x93
 2573 0aad A5050000 		.4byte	0x5a5
 2574 0ab1 01       		.byte	0x1
 2575 0ab2 05       		.byte	0x5
 2576 0ab3 03       		.byte	0x3
 2577 0ab4 00000000 		.4byte	param_struct
 2578 0ab8 23       		.uleb128 0x23
 2579 0ab9 65050000 		.4byte	.LASF160
 2580 0abd 02       		.byte	0x2
 2581 0abe 96       		.byte	0x96
 2582 0abf 00090000 		.4byte	0x900
 2583 0ac3 01       		.byte	0x1
 2584 0ac4 05       		.byte	0x5
 2585 0ac5 03       		.byte	0x3
 2586 0ac6 00000000 		.4byte	wait_ms_var
 2587 0aca 23       		.uleb128 0x23
 2588 0acb C9080000 		.4byte	.LASF161
 2589 0acf 02       		.byte	0x2
 2590 0ad0 97       		.byte	0x97
 2591 0ad1 00090000 		.4byte	0x900
ARM GAS  /tmp/ccxUmJh6.s 			page 83


 2592 0ad5 01       		.byte	0x1
 2593 0ad6 05       		.byte	0x5
 2594 0ad7 03       		.byte	0x3
 2595 0ad8 00000000 		.4byte	timer_standby
 2596 0adc 23       		.uleb128 0x23
 2597 0add 06010000 		.4byte	.LASF162
 2598 0ae1 02       		.byte	0x2
 2599 0ae2 98       		.byte	0x98
 2600 0ae3 00090000 		.4byte	0x900
 2601 0ae7 01       		.byte	0x1
 2602 0ae8 05       		.byte	0x5
 2603 0ae9 03       		.byte	0x3
 2604 0aea 00000000 		.4byte	tcp_kalive_timer
 2605 0aee 23       		.uleb128 0x23
 2606 0aef D1030000 		.4byte	.LASF163
 2607 0af3 02       		.byte	0x2
 2608 0af4 9A       		.byte	0x9a
 2609 0af5 17090000 		.4byte	0x917
 2610 0af9 01       		.byte	0x1
 2611 0afa 05       		.byte	0x5
 2612 0afb 03       		.byte	0x3
 2613 0afc 00000000 		.4byte	filter_timer
 2614 0b00 23       		.uleb128 0x23
 2615 0b01 77030000 		.4byte	.LASF164
 2616 0b05 02       		.byte	0x2
 2617 0b06 9F       		.byte	0x9f
 2618 0b07 00090000 		.4byte	0x900
 2619 0b0b 01       		.byte	0x1
 2620 0b0c 05       		.byte	0x5
 2621 0b0d 03       		.byte	0x3
 2622 0b0e 00000000 		.4byte	secs
 2623 0b12 23       		.uleb128 0x23
 2624 0b13 91050000 		.4byte	.LASF165
 2625 0b17 02       		.byte	0x2
 2626 0b18 A0       		.byte	0xa0
 2627 0b19 17090000 		.4byte	0x917
 2628 0b1d 01       		.byte	0x1
 2629 0b1e 05       		.byte	0x5
 2630 0b1f 03       		.byte	0x3
 2631 0b20 00000000 		.4byte	hours
 2632 0b24 23       		.uleb128 0x23
 2633 0b25 20020000 		.4byte	.LASF166
 2634 0b29 02       		.byte	0x2
 2635 0b2a A1       		.byte	0xa1
 2636 0b2b 17090000 		.4byte	0x917
 2637 0b2f 01       		.byte	0x1
 2638 0b30 05       		.byte	0x5
 2639 0b31 03       		.byte	0x3
 2640 0b32 00000000 		.4byte	minutes
 2641 0b36 23       		.uleb128 0x23
 2642 0b37 08020000 		.4byte	.LASF167
 2643 0b3b 02       		.byte	0x2
 2644 0b3c A5       		.byte	0xa5
 2645 0b3d 17090000 		.4byte	0x917
 2646 0b41 01       		.byte	0x1
 2647 0b42 05       		.byte	0x5
 2648 0b43 03       		.byte	0x3
ARM GAS  /tmp/ccxUmJh6.s 			page 84


 2649 0b44 00000000 		.4byte	signal_state
 2650 0b48 23       		.uleb128 0x23
 2651 0b49 B7060000 		.4byte	.LASF168
 2652 0b4d 02       		.byte	0x2
 2653 0b4e A6       		.byte	0xa6
 2654 0b4f 17090000 		.4byte	0x917
 2655 0b53 01       		.byte	0x1
 2656 0b54 05       		.byte	0x5
 2657 0b55 03       		.byte	0x3
 2658 0b56 00000000 		.4byte	dmx_timeout_timer
 2659 0b5a 0C       		.uleb128 0xc
 2660 0b5b 24010000 		.4byte	0x124
 2661 0b5f 6A0B0000 		.4byte	0xb6a
 2662 0b63 0D       		.uleb128 0xd
 2663 0b64 5D020000 		.4byte	0x25d
 2664 0b68 20       		.byte	0x20
 2665 0b69 00       		.byte	0
 2666 0b6a 24       		.uleb128 0x24
 2667 0b6b 76643000 		.ascii	"vd0\000"
 2668 0b6f 02       		.byte	0x2
 2669 0b70 AC       		.byte	0xac
 2670 0b71 5A0B0000 		.4byte	0xb5a
 2671 0b75 01       		.byte	0x1
 2672 0b76 05       		.byte	0x5
 2673 0b77 03       		.byte	0x3
 2674 0b78 00000000 		.4byte	vd0
 2675 0b7c 24       		.uleb128 0x24
 2676 0b7d 76643100 		.ascii	"vd1\000"
 2677 0b81 02       		.byte	0x2
 2678 0b82 AD       		.byte	0xad
 2679 0b83 5A0B0000 		.4byte	0xb5a
 2680 0b87 01       		.byte	0x1
 2681 0b88 05       		.byte	0x5
 2682 0b89 03       		.byte	0x3
 2683 0b8a 00000000 		.4byte	vd1
 2684 0b8e 24       		.uleb128 0x24
 2685 0b8f 76643200 		.ascii	"vd2\000"
 2686 0b93 02       		.byte	0x2
 2687 0b94 AE       		.byte	0xae
 2688 0b95 5A0B0000 		.4byte	0xb5a
 2689 0b99 01       		.byte	0x1
 2690 0b9a 05       		.byte	0x5
 2691 0b9b 03       		.byte	0x3
 2692 0b9c 00000000 		.4byte	vd2
 2693 0ba0 24       		.uleb128 0x24
 2694 0ba1 76643300 		.ascii	"vd3\000"
 2695 0ba5 02       		.byte	0x2
 2696 0ba6 AF       		.byte	0xaf
 2697 0ba7 5A0B0000 		.4byte	0xb5a
 2698 0bab 01       		.byte	0x1
 2699 0bac 05       		.byte	0x5
 2700 0bad 03       		.byte	0x3
 2701 0bae 00000000 		.4byte	vd3
 2702 0bb2 24       		.uleb128 0x24
 2703 0bb3 76643400 		.ascii	"vd4\000"
 2704 0bb7 02       		.byte	0x2
 2705 0bb8 B0       		.byte	0xb0
ARM GAS  /tmp/ccxUmJh6.s 			page 85


 2706 0bb9 5A0B0000 		.4byte	0xb5a
 2707 0bbd 01       		.byte	0x1
 2708 0bbe 05       		.byte	0x5
 2709 0bbf 03       		.byte	0x3
 2710 0bc0 00000000 		.4byte	vd4
 2711 0bc4 0C       		.uleb128 0xc
 2712 0bc5 3D010000 		.4byte	0x13d
 2713 0bc9 D40B0000 		.4byte	0xbd4
 2714 0bcd 0D       		.uleb128 0xd
 2715 0bce 5D020000 		.4byte	0x25d
 2716 0bd2 10       		.byte	0x10
 2717 0bd3 00       		.byte	0
 2718 0bd4 23       		.uleb128 0x23
 2719 0bd5 B5080000 		.4byte	.LASF169
 2720 0bd9 02       		.byte	0x2
 2721 0bda CB       		.byte	0xcb
 2722 0bdb C40B0000 		.4byte	0xbc4
 2723 0bdf 01       		.byte	0x1
 2724 0be0 05       		.byte	0x5
 2725 0be1 03       		.byte	0x3
 2726 0be2 00000000 		.4byte	vtemp
 2727 0be6 23       		.uleb128 0x23
 2728 0be7 D2000000 		.4byte	.LASF170
 2729 0beb 02       		.byte	0x2
 2730 0bec CC       		.byte	0xcc
 2731 0bed C40B0000 		.4byte	0xbc4
 2732 0bf1 01       		.byte	0x1
 2733 0bf2 05       		.byte	0x5
 2734 0bf3 03       		.byte	0x3
 2735 0bf4 00000000 		.4byte	vpote
 2736 0bf8 00       		.byte	0
 2737              		.section	.debug_abbrev,"",%progbits
 2738              	.Ldebug_abbrev0:
 2739 0000 01       		.uleb128 0x1
 2740 0001 11       		.uleb128 0x11
 2741 0002 01       		.byte	0x1
 2742 0003 25       		.uleb128 0x25
 2743 0004 0E       		.uleb128 0xe
 2744 0005 13       		.uleb128 0x13
 2745 0006 0B       		.uleb128 0xb
 2746 0007 03       		.uleb128 0x3
 2747 0008 0E       		.uleb128 0xe
 2748 0009 1B       		.uleb128 0x1b
 2749 000a 0E       		.uleb128 0xe
 2750 000b 55       		.uleb128 0x55
 2751 000c 06       		.uleb128 0x6
 2752 000d 11       		.uleb128 0x11
 2753 000e 01       		.uleb128 0x1
 2754 000f 52       		.uleb128 0x52
 2755 0010 01       		.uleb128 0x1
 2756 0011 10       		.uleb128 0x10
 2757 0012 06       		.uleb128 0x6
 2758 0013 00       		.byte	0
 2759 0014 00       		.byte	0
 2760 0015 02       		.uleb128 0x2
 2761 0016 04       		.uleb128 0x4
 2762 0017 01       		.byte	0x1
ARM GAS  /tmp/ccxUmJh6.s 			page 86


 2763 0018 03       		.uleb128 0x3
 2764 0019 0E       		.uleb128 0xe
 2765 001a 0B       		.uleb128 0xb
 2766 001b 0B       		.uleb128 0xb
 2767 001c 49       		.uleb128 0x49
 2768 001d 13       		.uleb128 0x13
 2769 001e 3A       		.uleb128 0x3a
 2770 001f 0B       		.uleb128 0xb
 2771 0020 3B       		.uleb128 0x3b
 2772 0021 0B       		.uleb128 0xb
 2773 0022 01       		.uleb128 0x1
 2774 0023 13       		.uleb128 0x13
 2775 0024 00       		.byte	0
 2776 0025 00       		.byte	0
 2777 0026 03       		.uleb128 0x3
 2778 0027 28       		.uleb128 0x28
 2779 0028 00       		.byte	0
 2780 0029 03       		.uleb128 0x3
 2781 002a 0E       		.uleb128 0xe
 2782 002b 1C       		.uleb128 0x1c
 2783 002c 0D       		.uleb128 0xd
 2784 002d 00       		.byte	0
 2785 002e 00       		.byte	0
 2786 002f 04       		.uleb128 0x4
 2787 0030 28       		.uleb128 0x28
 2788 0031 00       		.byte	0
 2789 0032 03       		.uleb128 0x3
 2790 0033 0E       		.uleb128 0xe
 2791 0034 1C       		.uleb128 0x1c
 2792 0035 0B       		.uleb128 0xb
 2793 0036 00       		.byte	0
 2794 0037 00       		.byte	0
 2795 0038 05       		.uleb128 0x5
 2796 0039 24       		.uleb128 0x24
 2797 003a 00       		.byte	0
 2798 003b 0B       		.uleb128 0xb
 2799 003c 0B       		.uleb128 0xb
 2800 003d 3E       		.uleb128 0x3e
 2801 003e 0B       		.uleb128 0xb
 2802 003f 03       		.uleb128 0x3
 2803 0040 0E       		.uleb128 0xe
 2804 0041 00       		.byte	0
 2805 0042 00       		.byte	0
 2806 0043 06       		.uleb128 0x6
 2807 0044 16       		.uleb128 0x16
 2808 0045 00       		.byte	0
 2809 0046 03       		.uleb128 0x3
 2810 0047 0E       		.uleb128 0xe
 2811 0048 3A       		.uleb128 0x3a
 2812 0049 0B       		.uleb128 0xb
 2813 004a 3B       		.uleb128 0x3b
 2814 004b 05       		.uleb128 0x5
 2815 004c 49       		.uleb128 0x49
 2816 004d 13       		.uleb128 0x13
 2817 004e 00       		.byte	0
 2818 004f 00       		.byte	0
 2819 0050 07       		.uleb128 0x7
ARM GAS  /tmp/ccxUmJh6.s 			page 87


 2820 0051 16       		.uleb128 0x16
 2821 0052 00       		.byte	0
 2822 0053 03       		.uleb128 0x3
 2823 0054 0E       		.uleb128 0xe
 2824 0055 3A       		.uleb128 0x3a
 2825 0056 0B       		.uleb128 0xb
 2826 0057 3B       		.uleb128 0x3b
 2827 0058 0B       		.uleb128 0xb
 2828 0059 49       		.uleb128 0x49
 2829 005a 13       		.uleb128 0x13
 2830 005b 00       		.byte	0
 2831 005c 00       		.byte	0
 2832 005d 08       		.uleb128 0x8
 2833 005e 24       		.uleb128 0x24
 2834 005f 00       		.byte	0
 2835 0060 0B       		.uleb128 0xb
 2836 0061 0B       		.uleb128 0xb
 2837 0062 3E       		.uleb128 0x3e
 2838 0063 0B       		.uleb128 0xb
 2839 0064 03       		.uleb128 0x3
 2840 0065 08       		.uleb128 0x8
 2841 0066 00       		.byte	0
 2842 0067 00       		.byte	0
 2843 0068 09       		.uleb128 0x9
 2844 0069 13       		.uleb128 0x13
 2845 006a 01       		.byte	0x1
 2846 006b 0B       		.uleb128 0xb
 2847 006c 05       		.uleb128 0x5
 2848 006d 3A       		.uleb128 0x3a
 2849 006e 0B       		.uleb128 0xb
 2850 006f 3B       		.uleb128 0x3b
 2851 0070 0B       		.uleb128 0xb
 2852 0071 01       		.uleb128 0x1
 2853 0072 13       		.uleb128 0x13
 2854 0073 00       		.byte	0
 2855 0074 00       		.byte	0
 2856 0075 0A       		.uleb128 0xa
 2857 0076 0D       		.uleb128 0xd
 2858 0077 00       		.byte	0
 2859 0078 03       		.uleb128 0x3
 2860 0079 0E       		.uleb128 0xe
 2861 007a 3A       		.uleb128 0x3a
 2862 007b 0B       		.uleb128 0xb
 2863 007c 3B       		.uleb128 0x3b
 2864 007d 0B       		.uleb128 0xb
 2865 007e 49       		.uleb128 0x49
 2866 007f 13       		.uleb128 0x13
 2867 0080 38       		.uleb128 0x38
 2868 0081 0A       		.uleb128 0xa
 2869 0082 00       		.byte	0
 2870 0083 00       		.byte	0
 2871 0084 0B       		.uleb128 0xb
 2872 0085 0D       		.uleb128 0xd
 2873 0086 00       		.byte	0
 2874 0087 03       		.uleb128 0x3
 2875 0088 08       		.uleb128 0x8
 2876 0089 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccxUmJh6.s 			page 88


 2877 008a 0B       		.uleb128 0xb
 2878 008b 3B       		.uleb128 0x3b
 2879 008c 0B       		.uleb128 0xb
 2880 008d 49       		.uleb128 0x49
 2881 008e 13       		.uleb128 0x13
 2882 008f 38       		.uleb128 0x38
 2883 0090 0A       		.uleb128 0xa
 2884 0091 00       		.byte	0
 2885 0092 00       		.byte	0
 2886 0093 0C       		.uleb128 0xc
 2887 0094 01       		.uleb128 0x1
 2888 0095 01       		.byte	0x1
 2889 0096 49       		.uleb128 0x49
 2890 0097 13       		.uleb128 0x13
 2891 0098 01       		.uleb128 0x1
 2892 0099 13       		.uleb128 0x13
 2893 009a 00       		.byte	0
 2894 009b 00       		.byte	0
 2895 009c 0D       		.uleb128 0xd
 2896 009d 21       		.uleb128 0x21
 2897 009e 00       		.byte	0
 2898 009f 49       		.uleb128 0x49
 2899 00a0 13       		.uleb128 0x13
 2900 00a1 2F       		.uleb128 0x2f
 2901 00a2 0B       		.uleb128 0xb
 2902 00a3 00       		.byte	0
 2903 00a4 00       		.byte	0
 2904 00a5 0E       		.uleb128 0xe
 2905 00a6 35       		.uleb128 0x35
 2906 00a7 00       		.byte	0
 2907 00a8 49       		.uleb128 0x49
 2908 00a9 13       		.uleb128 0x13
 2909 00aa 00       		.byte	0
 2910 00ab 00       		.byte	0
 2911 00ac 0F       		.uleb128 0xf
 2912 00ad 13       		.uleb128 0x13
 2913 00ae 01       		.byte	0x1
 2914 00af 0B       		.uleb128 0xb
 2915 00b0 0B       		.uleb128 0xb
 2916 00b1 3A       		.uleb128 0x3a
 2917 00b2 0B       		.uleb128 0xb
 2918 00b3 3B       		.uleb128 0x3b
 2919 00b4 0B       		.uleb128 0xb
 2920 00b5 01       		.uleb128 0x1
 2921 00b6 13       		.uleb128 0x13
 2922 00b7 00       		.byte	0
 2923 00b8 00       		.byte	0
 2924 00b9 10       		.uleb128 0x10
 2925 00ba 26       		.uleb128 0x26
 2926 00bb 00       		.byte	0
 2927 00bc 49       		.uleb128 0x49
 2928 00bd 13       		.uleb128 0x13
 2929 00be 00       		.byte	0
 2930 00bf 00       		.byte	0
 2931 00c0 11       		.uleb128 0x11
 2932 00c1 0D       		.uleb128 0xd
 2933 00c2 00       		.byte	0
ARM GAS  /tmp/ccxUmJh6.s 			page 89


 2934 00c3 03       		.uleb128 0x3
 2935 00c4 08       		.uleb128 0x8
 2936 00c5 3A       		.uleb128 0x3a
 2937 00c6 0B       		.uleb128 0xb
 2938 00c7 3B       		.uleb128 0x3b
 2939 00c8 05       		.uleb128 0x5
 2940 00c9 49       		.uleb128 0x49
 2941 00ca 13       		.uleb128 0x13
 2942 00cb 38       		.uleb128 0x38
 2943 00cc 0A       		.uleb128 0xa
 2944 00cd 00       		.byte	0
 2945 00ce 00       		.byte	0
 2946 00cf 12       		.uleb128 0x12
 2947 00d0 0D       		.uleb128 0xd
 2948 00d1 00       		.byte	0
 2949 00d2 03       		.uleb128 0x3
 2950 00d3 0E       		.uleb128 0xe
 2951 00d4 3A       		.uleb128 0x3a
 2952 00d5 0B       		.uleb128 0xb
 2953 00d6 3B       		.uleb128 0x3b
 2954 00d7 05       		.uleb128 0x5
 2955 00d8 49       		.uleb128 0x49
 2956 00d9 13       		.uleb128 0x13
 2957 00da 38       		.uleb128 0x38
 2958 00db 0A       		.uleb128 0xa
 2959 00dc 00       		.byte	0
 2960 00dd 00       		.byte	0
 2961 00de 13       		.uleb128 0x13
 2962 00df 13       		.uleb128 0x13
 2963 00e0 01       		.byte	0x1
 2964 00e1 0B       		.uleb128 0xb
 2965 00e2 0B       		.uleb128 0xb
 2966 00e3 3A       		.uleb128 0x3a
 2967 00e4 0B       		.uleb128 0xb
 2968 00e5 3B       		.uleb128 0x3b
 2969 00e6 05       		.uleb128 0x5
 2970 00e7 01       		.uleb128 0x1
 2971 00e8 13       		.uleb128 0x13
 2972 00e9 00       		.byte	0
 2973 00ea 00       		.byte	0
 2974 00eb 14       		.uleb128 0x14
 2975 00ec 04       		.uleb128 0x4
 2976 00ed 01       		.byte	0x1
 2977 00ee 0B       		.uleb128 0xb
 2978 00ef 0B       		.uleb128 0xb
 2979 00f0 49       		.uleb128 0x49
 2980 00f1 13       		.uleb128 0x13
 2981 00f2 3A       		.uleb128 0x3a
 2982 00f3 0B       		.uleb128 0xb
 2983 00f4 3B       		.uleb128 0x3b
 2984 00f5 0B       		.uleb128 0xb
 2985 00f6 01       		.uleb128 0x1
 2986 00f7 13       		.uleb128 0x13
 2987 00f8 00       		.byte	0
 2988 00f9 00       		.byte	0
 2989 00fa 15       		.uleb128 0x15
 2990 00fb 13       		.uleb128 0x13
ARM GAS  /tmp/ccxUmJh6.s 			page 90


 2991 00fc 01       		.byte	0x1
 2992 00fd 03       		.uleb128 0x3
 2993 00fe 0E       		.uleb128 0xe
 2994 00ff 0B       		.uleb128 0xb
 2995 0100 0B       		.uleb128 0xb
 2996 0101 3A       		.uleb128 0x3a
 2997 0102 0B       		.uleb128 0xb
 2998 0103 3B       		.uleb128 0x3b
 2999 0104 0B       		.uleb128 0xb
 3000 0105 01       		.uleb128 0x1
 3001 0106 13       		.uleb128 0x13
 3002 0107 00       		.byte	0
 3003 0108 00       		.byte	0
 3004 0109 16       		.uleb128 0x16
 3005 010a 2E       		.uleb128 0x2e
 3006 010b 01       		.byte	0x1
 3007 010c 03       		.uleb128 0x3
 3008 010d 0E       		.uleb128 0xe
 3009 010e 3A       		.uleb128 0x3a
 3010 010f 0B       		.uleb128 0xb
 3011 0110 3B       		.uleb128 0x3b
 3012 0111 05       		.uleb128 0x5
 3013 0112 27       		.uleb128 0x27
 3014 0113 0C       		.uleb128 0xc
 3015 0114 11       		.uleb128 0x11
 3016 0115 01       		.uleb128 0x1
 3017 0116 12       		.uleb128 0x12
 3018 0117 01       		.uleb128 0x1
 3019 0118 40       		.uleb128 0x40
 3020 0119 06       		.uleb128 0x6
 3021 011a 9742     		.uleb128 0x2117
 3022 011c 0C       		.uleb128 0xc
 3023 011d 01       		.uleb128 0x1
 3024 011e 13       		.uleb128 0x13
 3025 011f 00       		.byte	0
 3026 0120 00       		.byte	0
 3027 0121 17       		.uleb128 0x17
 3028 0122 05       		.uleb128 0x5
 3029 0123 00       		.byte	0
 3030 0124 03       		.uleb128 0x3
 3031 0125 0E       		.uleb128 0xe
 3032 0126 3A       		.uleb128 0x3a
 3033 0127 0B       		.uleb128 0xb
 3034 0128 3B       		.uleb128 0x3b
 3035 0129 05       		.uleb128 0x5
 3036 012a 49       		.uleb128 0x49
 3037 012b 13       		.uleb128 0x13
 3038 012c 02       		.uleb128 0x2
 3039 012d 0A       		.uleb128 0xa
 3040 012e 00       		.byte	0
 3041 012f 00       		.byte	0
 3042 0130 18       		.uleb128 0x18
 3043 0131 2E       		.uleb128 0x2e
 3044 0132 01       		.byte	0x1
 3045 0133 03       		.uleb128 0x3
 3046 0134 0E       		.uleb128 0xe
 3047 0135 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccxUmJh6.s 			page 91


 3048 0136 0B       		.uleb128 0xb
 3049 0137 3B       		.uleb128 0x3b
 3050 0138 05       		.uleb128 0x5
 3051 0139 27       		.uleb128 0x27
 3052 013a 0C       		.uleb128 0xc
 3053 013b 49       		.uleb128 0x49
 3054 013c 13       		.uleb128 0x13
 3055 013d 11       		.uleb128 0x11
 3056 013e 01       		.uleb128 0x1
 3057 013f 12       		.uleb128 0x12
 3058 0140 01       		.uleb128 0x1
 3059 0141 40       		.uleb128 0x40
 3060 0142 06       		.uleb128 0x6
 3061 0143 9642     		.uleb128 0x2116
 3062 0145 0C       		.uleb128 0xc
 3063 0146 01       		.uleb128 0x1
 3064 0147 13       		.uleb128 0x13
 3065 0148 00       		.byte	0
 3066 0149 00       		.byte	0
 3067 014a 19       		.uleb128 0x19
 3068 014b 2E       		.uleb128 0x2e
 3069 014c 01       		.byte	0x1
 3070 014d 3F       		.uleb128 0x3f
 3071 014e 0C       		.uleb128 0xc
 3072 014f 03       		.uleb128 0x3
 3073 0150 0E       		.uleb128 0xe
 3074 0151 3A       		.uleb128 0x3a
 3075 0152 0B       		.uleb128 0xb
 3076 0153 3B       		.uleb128 0x3b
 3077 0154 0B       		.uleb128 0xb
 3078 0155 27       		.uleb128 0x27
 3079 0156 0C       		.uleb128 0xc
 3080 0157 49       		.uleb128 0x49
 3081 0158 13       		.uleb128 0x13
 3082 0159 11       		.uleb128 0x11
 3083 015a 01       		.uleb128 0x1
 3084 015b 12       		.uleb128 0x12
 3085 015c 01       		.uleb128 0x1
 3086 015d 40       		.uleb128 0x40
 3087 015e 06       		.uleb128 0x6
 3088 015f 9642     		.uleb128 0x2116
 3089 0161 0C       		.uleb128 0xc
 3090 0162 01       		.uleb128 0x1
 3091 0163 13       		.uleb128 0x13
 3092 0164 00       		.byte	0
 3093 0165 00       		.byte	0
 3094 0166 1A       		.uleb128 0x1a
 3095 0167 34       		.uleb128 0x34
 3096 0168 00       		.byte	0
 3097 0169 03       		.uleb128 0x3
 3098 016a 08       		.uleb128 0x8
 3099 016b 3A       		.uleb128 0x3a
 3100 016c 0B       		.uleb128 0xb
 3101 016d 3B       		.uleb128 0x3b
 3102 016e 0B       		.uleb128 0xb
 3103 016f 49       		.uleb128 0x49
 3104 0170 13       		.uleb128 0x13
ARM GAS  /tmp/ccxUmJh6.s 			page 92


 3105 0171 02       		.uleb128 0x2
 3106 0172 0A       		.uleb128 0xa
 3107 0173 00       		.byte	0
 3108 0174 00       		.byte	0
 3109 0175 1B       		.uleb128 0x1b
 3110 0176 34       		.uleb128 0x34
 3111 0177 00       		.byte	0
 3112 0178 03       		.uleb128 0x3
 3113 0179 08       		.uleb128 0x8
 3114 017a 3A       		.uleb128 0x3a
 3115 017b 0B       		.uleb128 0xb
 3116 017c 3B       		.uleb128 0x3b
 3117 017d 0B       		.uleb128 0xb
 3118 017e 49       		.uleb128 0x49
 3119 017f 13       		.uleb128 0x13
 3120 0180 00       		.byte	0
 3121 0181 00       		.byte	0
 3122 0182 1C       		.uleb128 0x1c
 3123 0183 34       		.uleb128 0x34
 3124 0184 00       		.byte	0
 3125 0185 03       		.uleb128 0x3
 3126 0186 0E       		.uleb128 0xe
 3127 0187 3A       		.uleb128 0x3a
 3128 0188 0B       		.uleb128 0xb
 3129 0189 3B       		.uleb128 0x3b
 3130 018a 0B       		.uleb128 0xb
 3131 018b 49       		.uleb128 0x49
 3132 018c 13       		.uleb128 0x13
 3133 018d 00       		.byte	0
 3134 018e 00       		.byte	0
 3135 018f 1D       		.uleb128 0x1d
 3136 0190 34       		.uleb128 0x34
 3137 0191 00       		.byte	0
 3138 0192 03       		.uleb128 0x3
 3139 0193 0E       		.uleb128 0xe
 3140 0194 3A       		.uleb128 0x3a
 3141 0195 0B       		.uleb128 0xb
 3142 0196 3B       		.uleb128 0x3b
 3143 0197 0B       		.uleb128 0xb
 3144 0198 49       		.uleb128 0x49
 3145 0199 13       		.uleb128 0x13
 3146 019a 02       		.uleb128 0x2
 3147 019b 0A       		.uleb128 0xa
 3148 019c 00       		.byte	0
 3149 019d 00       		.byte	0
 3150 019e 1E       		.uleb128 0x1e
 3151 019f 0F       		.uleb128 0xf
 3152 01a0 00       		.byte	0
 3153 01a1 0B       		.uleb128 0xb
 3154 01a2 0B       		.uleb128 0xb
 3155 01a3 49       		.uleb128 0x49
 3156 01a4 13       		.uleb128 0x13
 3157 01a5 00       		.byte	0
 3158 01a6 00       		.byte	0
 3159 01a7 1F       		.uleb128 0x1f
 3160 01a8 2E       		.uleb128 0x2e
 3161 01a9 01       		.byte	0x1
ARM GAS  /tmp/ccxUmJh6.s 			page 93


 3162 01aa 3F       		.uleb128 0x3f
 3163 01ab 0C       		.uleb128 0xc
 3164 01ac 03       		.uleb128 0x3
 3165 01ad 0E       		.uleb128 0xe
 3166 01ae 3A       		.uleb128 0x3a
 3167 01af 0B       		.uleb128 0xb
 3168 01b0 3B       		.uleb128 0x3b
 3169 01b1 05       		.uleb128 0x5
 3170 01b2 27       		.uleb128 0x27
 3171 01b3 0C       		.uleb128 0xc
 3172 01b4 11       		.uleb128 0x11
 3173 01b5 01       		.uleb128 0x1
 3174 01b6 12       		.uleb128 0x12
 3175 01b7 01       		.uleb128 0x1
 3176 01b8 40       		.uleb128 0x40
 3177 01b9 06       		.uleb128 0x6
 3178 01ba 9642     		.uleb128 0x2116
 3179 01bc 0C       		.uleb128 0xc
 3180 01bd 01       		.uleb128 0x1
 3181 01be 13       		.uleb128 0x13
 3182 01bf 00       		.byte	0
 3183 01c0 00       		.byte	0
 3184 01c1 20       		.uleb128 0x20
 3185 01c2 34       		.uleb128 0x34
 3186 01c3 00       		.byte	0
 3187 01c4 03       		.uleb128 0x3
 3188 01c5 08       		.uleb128 0x8
 3189 01c6 3A       		.uleb128 0x3a
 3190 01c7 0B       		.uleb128 0xb
 3191 01c8 3B       		.uleb128 0x3b
 3192 01c9 05       		.uleb128 0x5
 3193 01ca 49       		.uleb128 0x49
 3194 01cb 13       		.uleb128 0x13
 3195 01cc 02       		.uleb128 0x2
 3196 01cd 0A       		.uleb128 0xa
 3197 01ce 00       		.byte	0
 3198 01cf 00       		.byte	0
 3199 01d0 21       		.uleb128 0x21
 3200 01d1 34       		.uleb128 0x34
 3201 01d2 00       		.byte	0
 3202 01d3 03       		.uleb128 0x3
 3203 01d4 0E       		.uleb128 0xe
 3204 01d5 3A       		.uleb128 0x3a
 3205 01d6 0B       		.uleb128 0xb
 3206 01d7 3B       		.uleb128 0x3b
 3207 01d8 05       		.uleb128 0x5
 3208 01d9 49       		.uleb128 0x49
 3209 01da 13       		.uleb128 0x13
 3210 01db 02       		.uleb128 0x2
 3211 01dc 0A       		.uleb128 0xa
 3212 01dd 00       		.byte	0
 3213 01de 00       		.byte	0
 3214 01df 22       		.uleb128 0x22
 3215 01e0 2E       		.uleb128 0x2e
 3216 01e1 00       		.byte	0
 3217 01e2 3F       		.uleb128 0x3f
 3218 01e3 0C       		.uleb128 0xc
ARM GAS  /tmp/ccxUmJh6.s 			page 94


 3219 01e4 03       		.uleb128 0x3
 3220 01e5 0E       		.uleb128 0xe
 3221 01e6 3A       		.uleb128 0x3a
 3222 01e7 0B       		.uleb128 0xb
 3223 01e8 3B       		.uleb128 0x3b
 3224 01e9 05       		.uleb128 0x5
 3225 01ea 27       		.uleb128 0x27
 3226 01eb 0C       		.uleb128 0xc
 3227 01ec 11       		.uleb128 0x11
 3228 01ed 01       		.uleb128 0x1
 3229 01ee 12       		.uleb128 0x12
 3230 01ef 01       		.uleb128 0x1
 3231 01f0 40       		.uleb128 0x40
 3232 01f1 0A       		.uleb128 0xa
 3233 01f2 9742     		.uleb128 0x2117
 3234 01f4 0C       		.uleb128 0xc
 3235 01f5 00       		.byte	0
 3236 01f6 00       		.byte	0
 3237 01f7 23       		.uleb128 0x23
 3238 01f8 34       		.uleb128 0x34
 3239 01f9 00       		.byte	0
 3240 01fa 03       		.uleb128 0x3
 3241 01fb 0E       		.uleb128 0xe
 3242 01fc 3A       		.uleb128 0x3a
 3243 01fd 0B       		.uleb128 0xb
 3244 01fe 3B       		.uleb128 0x3b
 3245 01ff 0B       		.uleb128 0xb
 3246 0200 49       		.uleb128 0x49
 3247 0201 13       		.uleb128 0x13
 3248 0202 3F       		.uleb128 0x3f
 3249 0203 0C       		.uleb128 0xc
 3250 0204 02       		.uleb128 0x2
 3251 0205 0A       		.uleb128 0xa
 3252 0206 00       		.byte	0
 3253 0207 00       		.byte	0
 3254 0208 24       		.uleb128 0x24
 3255 0209 34       		.uleb128 0x34
 3256 020a 00       		.byte	0
 3257 020b 03       		.uleb128 0x3
 3258 020c 08       		.uleb128 0x8
 3259 020d 3A       		.uleb128 0x3a
 3260 020e 0B       		.uleb128 0xb
 3261 020f 3B       		.uleb128 0x3b
 3262 0210 0B       		.uleb128 0xb
 3263 0211 49       		.uleb128 0x49
 3264 0212 13       		.uleb128 0x13
 3265 0213 3F       		.uleb128 0x3f
 3266 0214 0C       		.uleb128 0xc
 3267 0215 02       		.uleb128 0x2
 3268 0216 0A       		.uleb128 0xa
 3269 0217 00       		.byte	0
 3270 0218 00       		.byte	0
 3271 0219 00       		.byte	0
 3272              		.section	.debug_loc,"",%progbits
 3273              	.Ldebug_loc0:
 3274              	.LLST0:
 3275 0000 00000000 		.4byte	.LFB16
ARM GAS  /tmp/ccxUmJh6.s 			page 95


 3276 0004 02000000 		.4byte	.LCFI0
 3277 0008 0200     		.2byte	0x2
 3278 000a 7D       		.byte	0x7d
 3279 000b 00       		.sleb128 0
 3280 000c 02000000 		.4byte	.LCFI0
 3281 0010 04000000 		.4byte	.LCFI1
 3282 0014 0200     		.2byte	0x2
 3283 0016 7D       		.byte	0x7d
 3284 0017 0C       		.sleb128 12
 3285 0018 04000000 		.4byte	.LCFI1
 3286 001c EC000000 		.4byte	.LFE16
 3287 0020 0200     		.2byte	0x2
 3288 0022 7D       		.byte	0x7d
 3289 0023 18       		.sleb128 24
 3290 0024 00000000 		.4byte	0
 3291 0028 00000000 		.4byte	0
 3292              	.LLST1:
 3293 002c 00000000 		.4byte	.LFB18
 3294 0030 02000000 		.4byte	.LCFI2
 3295 0034 0200     		.2byte	0x2
 3296 0036 7D       		.byte	0x7d
 3297 0037 00       		.sleb128 0
 3298 0038 02000000 		.4byte	.LCFI2
 3299 003c 04000000 		.4byte	.LCFI3
 3300 0040 0200     		.2byte	0x2
 3301 0042 7D       		.byte	0x7d
 3302 0043 04       		.sleb128 4
 3303 0044 04000000 		.4byte	.LCFI3
 3304 0048 48000000 		.4byte	.LFE18
 3305 004c 0200     		.2byte	0x2
 3306 004e 7D       		.byte	0x7d
 3307 004f 10       		.sleb128 16
 3308 0050 00000000 		.4byte	0
 3309 0054 00000000 		.4byte	0
 3310              	.LLST2:
 3311 0058 00000000 		.4byte	.LFB20
 3312 005c 02000000 		.4byte	.LCFI4
 3313 0060 0200     		.2byte	0x2
 3314 0062 7D       		.byte	0x7d
 3315 0063 00       		.sleb128 0
 3316 0064 02000000 		.4byte	.LCFI4
 3317 0068 04000000 		.4byte	.LCFI5
 3318 006c 0200     		.2byte	0x2
 3319 006e 7D       		.byte	0x7d
 3320 006f 08       		.sleb128 8
 3321 0070 04000000 		.4byte	.LCFI5
 3322 0074 CC020000 		.4byte	.LFE20
 3323 0078 0200     		.2byte	0x2
 3324 007a 7D       		.byte	0x7d
 3325 007b 38       		.sleb128 56
 3326 007c 00000000 		.4byte	0
 3327 0080 00000000 		.4byte	0
 3328              	.LLST3:
 3329 0084 00000000 		.4byte	.LFB21
 3330 0088 02000000 		.4byte	.LCFI6
 3331 008c 0200     		.2byte	0x2
 3332 008e 7D       		.byte	0x7d
ARM GAS  /tmp/ccxUmJh6.s 			page 96


 3333 008f 00       		.sleb128 0
 3334 0090 02000000 		.4byte	.LCFI6
 3335 0094 04000000 		.4byte	.LCFI7
 3336 0098 0200     		.2byte	0x2
 3337 009a 7D       		.byte	0x7d
 3338 009b 04       		.sleb128 4
 3339 009c 04000000 		.4byte	.LCFI7
 3340 00a0 B0000000 		.4byte	.LFE21
 3341 00a4 0300     		.2byte	0x3
 3342 00a6 7D       		.byte	0x7d
 3343 00a7 E000     		.sleb128 96
 3344 00a9 00000000 		.4byte	0
 3345 00ad 00000000 		.4byte	0
 3346              		.section	.debug_aranges,"",%progbits
 3347 0000 3C000000 		.4byte	0x3c
 3348 0004 0200     		.2byte	0x2
 3349 0006 00000000 		.4byte	.Ldebug_info0
 3350 000a 04       		.byte	0x4
 3351 000b 00       		.byte	0
 3352 000c 0000     		.2byte	0
 3353 000e 0000     		.2byte	0
 3354 0010 00000000 		.4byte	.LFB16
 3355 0014 EC000000 		.4byte	.LFE16-.LFB16
 3356 0018 00000000 		.4byte	.LFB18
 3357 001c 48000000 		.4byte	.LFE18-.LFB18
 3358 0020 00000000 		.4byte	.LFB20
 3359 0024 CC020000 		.4byte	.LFE20-.LFB20
 3360 0028 00000000 		.4byte	.LFB21
 3361 002c B0000000 		.4byte	.LFE21-.LFB21
 3362 0030 00000000 		.4byte	.LFB22
 3363 0034 28010000 		.4byte	.LFE22-.LFB22
 3364 0038 00000000 		.4byte	0
 3365 003c 00000000 		.4byte	0
 3366              		.section	.debug_ranges,"",%progbits
 3367              	.Ldebug_ranges0:
 3368 0000 00000000 		.4byte	.LFB16
 3369 0004 EC000000 		.4byte	.LFE16
 3370 0008 00000000 		.4byte	.LFB18
 3371 000c 48000000 		.4byte	.LFE18
 3372 0010 00000000 		.4byte	.LFB20
 3373 0014 CC020000 		.4byte	.LFE20
 3374 0018 00000000 		.4byte	.LFB21
 3375 001c B0000000 		.4byte	.LFE21
 3376 0020 00000000 		.4byte	.LFB22
 3377 0024 28010000 		.4byte	.LFE22
 3378 0028 00000000 		.4byte	0
 3379 002c 00000000 		.4byte	0
 3380              		.section	.debug_line,"",%progbits
 3381              	.Ldebug_line0:
 3382 0000 53020000 		.section	.debug_str,"MS",%progbits,1
 3382      02003D01 
 3382      00000201 
 3382      FB0E0D00 
 3382      01010101 
 3383              	.LASF119:
 3384 0000 735F6C63 		.ascii	"s_lcd\000"
 3384      6400
ARM GAS  /tmp/ccxUmJh6.s 			page 97


 3385              	.LASF94:
 3386 0006 70776D5F 		.ascii	"pwm_channel_1\000"
 3386      6368616E 
 3386      6E656C5F 
 3386      3100
 3387              	.LASF95:
 3388 0014 70776D5F 		.ascii	"pwm_channel_2\000"
 3388      6368616E 
 3388      6E656C5F 
 3388      3200
 3389              	.LASF96:
 3390 0022 70776D5F 		.ascii	"pwm_channel_3\000"
 3390      6368616E 
 3390      6E656C5F 
 3390      3300
 3391              	.LASF97:
 3392 0030 70776D5F 		.ascii	"pwm_channel_4\000"
 3392      6368616E 
 3392      6E656C5F 
 3392      3400
 3393              	.LASF140:
 3394 003e 61637377 		.ascii	"acswitch_timer\000"
 3394      69746368 
 3394      5F74696D 
 3394      657200
 3395              	.LASF159:
 3396 004d 70617261 		.ascii	"param_struct\000"
 3396      6D5F7374 
 3396      72756374 
 3396      00
 3397              	.LASF89:
 3398 005a 6C617374 		.ascii	"last_program_deep_in_flash\000"
 3398      5F70726F 
 3398      6772616D 
 3398      5F646565 
 3398      705F696E 
 3399              	.LASF12:
 3400 0075 45585449 		.ascii	"EXTI4_15_IRQn\000"
 3400      345F3135 
 3400      5F495251 
 3400      6E00
 3401              	.LASF78:
 3402 0083 42535252 		.ascii	"BSRR\000"
 3402      00
 3403              	.LASF87:
 3404 0088 6C617374 		.ascii	"last_function_in_flash\000"
 3404      5F66756E 
 3404      6374696F 
 3404      6E5F696E 
 3404      5F666C61 
 3405              	.LASF11:
 3406 009f 45585449 		.ascii	"EXTI2_3_IRQn\000"
 3406      325F335F 
 3406      4952516E 
 3406      00
 3407              	.LASF116:
 3408 00ac 6D61696E 		.ascii	"main_state\000"
ARM GAS  /tmp/ccxUmJh6.s 			page 98


 3408      5F737461 
 3408      746500
 3409              	.LASF127:
 3410 00b7 705F6D65 		.ascii	"p_mem_init\000"
 3410      6D5F696E 
 3410      697400
 3411              	.LASF2:
 3412 00c2 5356435F 		.ascii	"SVC_IRQn\000"
 3412      4952516E 
 3412      00
 3413              	.LASF128:
 3414 00cb 62756666 		.ascii	"buffer\000"
 3414      657200
 3415              	.LASF170:
 3416 00d2 76706F74 		.ascii	"vpote\000"
 3416      6500
 3417              	.LASF175:
 3418 00d8 4E564943 		.ascii	"NVIC_SetPriority\000"
 3418      5F536574 
 3418      5072696F 
 3418      72697479 
 3418      00
 3419              	.LASF47:
 3420 00e9 756E7369 		.ascii	"unsigned int\000"
 3420      676E6564 
 3420      20696E74 
 3420      00
 3421              	.LASF71:
 3422 00f6 4C4F4144 		.ascii	"LOAD\000"
 3422      00
 3423              	.LASF25:
 3424 00fb 54494D31 		.ascii	"TIM16_IRQn\000"
 3424      365F4952 
 3424      516E00
 3425              	.LASF162:
 3426 0106 7463705F 		.ascii	"tcp_kalive_timer\000"
 3426      6B616C69 
 3426      76655F74 
 3426      696D6572 
 3426      00
 3427              	.LASF41:
 3428 0117 5F5F696E 		.ascii	"__int32_t\000"
 3428      7433325F 
 3428      7400
 3429              	.LASF135:
 3430 0121 72783262 		.ascii	"rx2buff\000"
 3430      75666600 
 3431              	.LASF8:
 3432 0129 464C4153 		.ascii	"FLASH_IRQn\000"
 3432      485F4952 
 3432      516E00
 3433              	.LASF137:
 3434 0134 72783162 		.ascii	"rx1buff\000"
 3434      75666600 
 3435              	.LASF90:
 3436 013c 64756D6D 		.ascii	"dummy\000"
 3436      7900
ARM GAS  /tmp/ccxUmJh6.s 			page 99


 3437              	.LASF72:
 3438 0142 43414C49 		.ascii	"CALIB\000"
 3438      4200
 3439              	.LASF134:
 3440 0148 74783262 		.ascii	"tx2buff\000"
 3440      75666600 
 3441              	.LASF10:
 3442 0150 45585449 		.ascii	"EXTI0_1_IRQn\000"
 3442      305F315F 
 3442      4952516E 
 3442      00
 3443              	.LASF145:
 3444 015d 67726F75 		.ascii	"grouped_master_timeout_timer\000"
 3444      7065645F 
 3444      6D617374 
 3444      65725F74 
 3444      696D656F 
 3445              	.LASF153:
 3446 017a 76677269 		.ascii	"vgrid_timer\000"
 3446      645F7469 
 3446      6D657200 
 3447              	.LASF27:
 3448 0186 49324331 		.ascii	"I2C1_IRQn\000"
 3448      5F495251 
 3448      6E00
 3449              	.LASF3:
 3450 0190 50656E64 		.ascii	"PendSV_IRQn\000"
 3450      53565F49 
 3450      52516E00 
 3451              	.LASF9:
 3452 019c 5243435F 		.ascii	"RCC_IRQn\000"
 3452      4952516E 
 3452      00
 3453              	.LASF124:
 3454 01a5 73686F77 		.ascii	"show_ldr\000"
 3454      5F6C6472 
 3454      00
 3455              	.LASF51:
 3456 01ae 75696E74 		.ascii	"uint32_t\000"
 3456      33325F74 
 3456      00
 3457              	.LASF52:
 3458 01b7 49534552 		.ascii	"ISER\000"
 3458      00
 3459              	.LASF133:
 3460 01bc 666C6F61 		.ascii	"float\000"
 3460      7400
 3461              	.LASF117:
 3462 01c2 68797374 		.ascii	"hyst\000"
 3462      00
 3463              	.LASF55:
 3464 01c7 52534552 		.ascii	"RSERVED1\000"
 3464      56454431 
 3464      00
 3465              	.LASF29:
 3466 01d0 53504931 		.ascii	"SPI1_IRQn\000"
 3466      5F495251 
ARM GAS  /tmp/ccxUmJh6.s 			page 100


 3466      6E00
 3467              	.LASF46:
 3468 01da 6C6F6E67 		.ascii	"long long unsigned int\000"
 3468      206C6F6E 
 3468      6720756E 
 3468      7369676E 
 3468      65642069 
 3469              	.LASF68:
 3470 01f1 44465352 		.ascii	"DFSR\000"
 3470      00
 3471              	.LASF158:
 3472 01f6 75736172 		.ascii	"usart1_pckt_bytes\000"
 3472      74315F70 
 3472      636B745F 
 3472      62797465 
 3472      7300
 3473              	.LASF167:
 3474 0208 7369676E 		.ascii	"signal_state\000"
 3474      616C5F73 
 3474      74617465 
 3474      00
 3475              	.LASF39:
 3476 0215 5F5F7569 		.ascii	"__uint16_t\000"
 3476      6E743136 
 3476      5F7400
 3477              	.LASF166:
 3478 0220 6D696E75 		.ascii	"minutes\000"
 3478      74657300 
 3479              	.LASF74:
 3480 0228 4D4F4445 		.ascii	"MODER\000"
 3480      5200
 3481              	.LASF156:
 3482 022e 75736172 		.ascii	"usart1_pckt_ready\000"
 3482      74315F70 
 3482      636B745F 
 3482      72656164 
 3482      7900
 3483              	.LASF34:
 3484 0240 4952516E 		.ascii	"IRQn_Type\000"
 3484      5F547970 
 3484      6500
 3485              	.LASF100:
 3486 024a 5463704D 		.ascii	"TcpMessages\000"
 3486      65737361 
 3486      67657300 
 3487              	.LASF32:
 3488 0256 55534152 		.ascii	"USART2_IRQn\000"
 3488      54325F49 
 3488      52516E00 
 3489              	.LASF63:
 3490 0262 43505549 		.ascii	"CPUID\000"
 3490      4400
 3491              	.LASF149:
 3492 0268 74745F74 		.ascii	"tt_take_photo_sample\000"
 3492      616B655F 
 3492      70686F74 
 3492      6F5F7361 
ARM GAS  /tmp/ccxUmJh6.s 			page 101


 3492      6D706C65 
 3493              	.LASF152:
 3494 027d 69677269 		.ascii	"igrid_timer\000"
 3494      645F7469 
 3494      6D657200 
 3495              	.LASF176:
 3496 0289 53797354 		.ascii	"SysTick_Config\000"
 3496      69636B5F 
 3496      436F6E66 
 3496      696700
 3497              	.LASF101:
 3498 0298 4E4F4E45 		.ascii	"NONE_MSG\000"
 3498      5F4D5347 
 3498      00
 3499              	.LASF157:
 3500 02a1 75736172 		.ascii	"usart1_have_data\000"
 3500      74315F68 
 3500      6176655F 
 3500      64617461 
 3500      00
 3501              	.LASF77:
 3502 02b2 50555044 		.ascii	"PUPDR\000"
 3502      5200
 3503              	.LASF109:
 3504 02b8 7469636B 		.ascii	"ticks\000"
 3504      7300
 3505              	.LASF138:
 3506 02be 73686F77 		.ascii	"show_select_timer\000"
 3506      5F73656C 
 3506      6563745F 
 3506      74696D65 
 3506      7200
 3507              	.LASF92:
 3508 02d0 64756D6D 		.ascii	"dummy1\000"
 3508      793100
 3509              	.LASF93:
 3510 02d7 64756D6D 		.ascii	"dummy2\000"
 3510      793200
 3511              	.LASF114:
 3512 02de 6C6F6361 		.ascii	"local_meas\000"
 3512      6C5F6D65 
 3512      617300
 3513              	.LASF82:
 3514 02e9 63686172 		.ascii	"char\000"
 3514      00
 3515              	.LASF131:
 3516 02ee 54454D50 		.ascii	"TEMPERATURE_Value\000"
 3516      45524154 
 3516      5552455F 
 3516      56616C75 
 3516      6500
 3517              	.LASF65:
 3518 0300 41495243 		.ascii	"AIRCR\000"
 3518      5200
 3519              	.LASF146:
 3520 0306 74616B65 		.ascii	"take_temp_sample\000"
 3520      5F74656D 
ARM GAS  /tmp/ccxUmJh6.s 			page 102


 3520      705F7361 
 3520      6D706C65 
 3520      00
 3521              	.LASF21:
 3522 0317 54494D33 		.ascii	"TIM3_IRQn\000"
 3522      5F495251 
 3522      6E00
 3523              	.LASF14:
 3524 0321 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 3524      5F436861 
 3524      6E6E656C 
 3524      315F4952 
 3524      516E00
 3525              	.LASF111:
 3526 0334 62797465 		.ascii	"bytes_read\000"
 3526      735F7265 
 3526      616400
 3527              	.LASF86:
 3528 033f 6D61696E 		.ascii	"main_state_t\000"
 3528      5F737461 
 3528      74655F74 
 3528      00
 3529              	.LASF24:
 3530 034c 54494D31 		.ascii	"TIM15_IRQn\000"
 3530      355F4952 
 3530      516E00
 3531              	.LASF48:
 3532 0357 75696E74 		.ascii	"uint8_t\000"
 3532      385F7400 
 3533              	.LASF136:
 3534 035f 74783162 		.ascii	"tx1buff\000"
 3534      75666600 
 3535              	.LASF150:
 3536 0367 74745F72 		.ascii	"tt_relay_on_off\000"
 3536      656C6179 
 3536      5F6F6E5F 
 3536      6F666600 
 3537              	.LASF164:
 3538 0377 73656373 		.ascii	"secs\000"
 3538      00
 3539              	.LASF115:
 3540 037c 6C6F6361 		.ascii	"local_meas_last\000"
 3540      6C5F6D65 
 3540      61735F6C 
 3540      61737400 
 3541              	.LASF85:
 3542 038c 4C414D50 		.ascii	"LAMP_ON\000"
 3542      5F4F4E00 
 3543              	.LASF45:
 3544 0394 6C6F6E67 		.ascii	"long long int\000"
 3544      206C6F6E 
 3544      6720696E 
 3544      7400
 3545              	.LASF5:
 3546 03a2 57574447 		.ascii	"WWDG_IRQn\000"
 3546      5F495251 
 3546      6E00
ARM GAS  /tmp/ccxUmJh6.s 			page 103


 3547              	.LASF67:
 3548 03ac 53484353 		.ascii	"SHCSR\000"
 3548      5200
 3549              	.LASF155:
 3550 03b2 75736172 		.ascii	"usart1_mini_timeout\000"
 3550      74315F6D 
 3550      696E695F 
 3550      74696D65 
 3550      6F757400 
 3551              	.LASF151:
 3552 03c6 73617665 		.ascii	"saved_mode\000"
 3552      645F6D6F 
 3552      646500
 3553              	.LASF163:
 3554 03d1 66696C74 		.ascii	"filter_timer\000"
 3554      65725F74 
 3554      696D6572 
 3554      00
 3555              	.LASF174:
 3556 03de 70617261 		.ascii	"parameters\000"
 3556      6D657465 
 3556      727300
 3557              	.LASF148:
 3558 03e9 74696D65 		.ascii	"timer_relay\000"
 3558      725F7265 
 3558      6C617900 
 3559              	.LASF83:
 3560 03f5 4D41494E 		.ascii	"MAIN_INIT\000"
 3560      5F494E49 
 3560      5400
 3561              	.LASF103:
 3562 03ff 524F4F4D 		.ascii	"ROOM_BRIGHT\000"
 3562      5F425249 
 3562      47485400 
 3563              	.LASF13:
 3564 040b 54535F49 		.ascii	"TS_IRQn\000"
 3564      52516E00 
 3565              	.LASF125:
 3566 0413 64756D6D 		.ascii	"dummy_resp\000"
 3566      795F7265 
 3566      737000
 3567              	.LASF18:
 3568 041e 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 3568      5F42524B 
 3568      5F55505F 
 3568      5452475F 
 3568      434F4D5F 
 3569              	.LASF129:
 3570 0437 74656D70 		.ascii	"tempbuff\000"
 3570      62756666 
 3570      00
 3571              	.LASF6:
 3572 0440 5056445F 		.ascii	"PVD_IRQn\000"
 3572      4952516E 
 3572      00
 3573              	.LASF107:
 3574 0449 4C494748 		.ascii	"LIGHTS_ON\000"
ARM GAS  /tmp/ccxUmJh6.s 			page 104


 3574      54535F4F 
 3574      4E00
 3575              	.LASF58:
 3576 0453 49435052 		.ascii	"ICPR\000"
 3576      00
 3577              	.LASF17:
 3578 0458 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 3578      5F434F4D 
 3578      505F4952 
 3578      516E00
 3579              	.LASF139:
 3580 0467 73776974 		.ascii	"switches_timer\000"
 3580      63686573 
 3580      5F74696D 
 3580      657200
 3581              	.LASF120:
 3582 0476 7463705F 		.ascii	"tcp_msg\000"
 3582      6D736700 
 3583              	.LASF76:
 3584 047e 4F535045 		.ascii	"OSPEEDR\000"
 3584      45445200 
 3585              	.LASF73:
 3586 0486 53797354 		.ascii	"SysTick_Type\000"
 3586      69636B5F 
 3586      54797065 
 3586      00
 3587              	.LASF81:
 3588 0493 6C6F6E67 		.ascii	"long double\000"
 3588      20646F75 
 3588      626C6500 
 3589              	.LASF49:
 3590 049f 75696E74 		.ascii	"uint16_t\000"
 3590      31365F74 
 3590      00
 3591              	.LASF99:
 3592 04a8 4952516E 		.ascii	"IRQn\000"
 3592      00
 3593              	.LASF91:
 3594 04ad 6C617374 		.ascii	"last_channel_in_flash\000"
 3594      5F636861 
 3594      6E6E656C 
 3594      5F696E5F 
 3594      666C6173 
 3595              	.LASF141:
 3596 04c3 7363726F 		.ascii	"scroll1_timer\000"
 3596      6C6C315F 
 3596      74696D65 
 3596      7200
 3597              	.LASF7:
 3598 04d1 5254435F 		.ascii	"RTC_IRQn\000"
 3598      4952516E 
 3598      00
 3599              	.LASF53:
 3600 04da 52455345 		.ascii	"RESERVED0\000"
 3600      52564544 
 3600      3000
 3601              	.LASF66:
ARM GAS  /tmp/ccxUmJh6.s 			page 105


 3602 04e4 52455345 		.ascii	"RESERVED1\000"
 3602      52564544 
 3602      3100
 3603              	.LASF57:
 3604 04ee 52455345 		.ascii	"RESERVED2\000"
 3604      52564544 
 3604      3200
 3605              	.LASF59:
 3606 04f8 52455345 		.ascii	"RESERVED3\000"
 3606      52564544 
 3606      3300
 3607              	.LASF60:
 3608 0502 52455345 		.ascii	"RESERVED4\000"
 3608      52564544 
 3608      3400
 3609              	.LASF38:
 3610 050c 73686F72 		.ascii	"short int\000"
 3610      7420696E 
 3610      7400
 3611              	.LASF42:
 3612 0516 6C6F6E67 		.ascii	"long int\000"
 3612      20696E74 
 3612      00
 3613              	.LASF31:
 3614 051f 55534152 		.ascii	"USART1_IRQn\000"
 3614      54315F49 
 3614      52516E00 
 3615              	.LASF0:
 3616 052b 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 3616      61736B61 
 3616      626C6549 
 3616      6E745F49 
 3616      52516E00 
 3617              	.LASF108:
 3618 053f 7072696F 		.ascii	"priority\000"
 3618      72697479 
 3618      00
 3619              	.LASF19:
 3620 0548 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 3620      5F43435F 
 3620      4952516E 
 3620      00
 3621              	.LASF75:
 3622 0555 4F545950 		.ascii	"OTYPER\000"
 3622      455200
 3623              	.LASF122:
 3624 055c 6E65775F 		.ascii	"new_lamp\000"
 3624      6C616D70 
 3624      00
 3625              	.LASF160:
 3626 0565 77616974 		.ascii	"wait_ms_var\000"
 3626      5F6D735F 
 3626      76617200 
 3627              	.LASF26:
 3628 0571 54494D31 		.ascii	"TIM17_IRQn\000"
 3628      375F4952 
 3628      516E00
ARM GAS  /tmp/ccxUmJh6.s 			page 106


 3629              	.LASF16:
 3630 057c 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 3630      5F436861 
 3630      6E6E656C 
 3630      345F355F 
 3630      4952516E 
 3631              	.LASF165:
 3632 0591 686F7572 		.ascii	"hours\000"
 3632      7300
 3633              	.LASF35:
 3634 0597 5F5F7569 		.ascii	"__uint8_t\000"
 3634      6E74385F 
 3634      7400
 3635              	.LASF104:
 3636 05a1 4C414D50 		.ascii	"LAMP_BRIGHT\000"
 3636      5F425249 
 3636      47485400 
 3637              	.LASF62:
 3638 05ad 4E564943 		.ascii	"NVIC_Type\000"
 3638      5F547970 
 3638      6500
 3639              	.LASF69:
 3640 05b7 5343425F 		.ascii	"SCB_Type\000"
 3640      54797065 
 3640      00
 3641              	.LASF80:
 3642 05c0 4750494F 		.ascii	"GPIO_TypeDef\000"
 3642      5F547970 
 3642      65446566 
 3642      00
 3643              	.LASF4:
 3644 05cd 53797354 		.ascii	"SysTick_IRQn\000"
 3644      69636B5F 
 3644      4952516E 
 3644      00
 3645              	.LASF33:
 3646 05da 4345435F 		.ascii	"CEC_IRQn\000"
 3646      4952516E 
 3646      00
 3647              	.LASF61:
 3648 05e3 73697A65 		.ascii	"sizetype\000"
 3648      74797065 
 3648      00
 3649              	.LASF64:
 3650 05ec 49435352 		.ascii	"ICSR\000"
 3650      00
 3651              	.LASF28:
 3652 05f1 49324332 		.ascii	"I2C2_IRQn\000"
 3652      5F495251 
 3652      6E00
 3653              	.LASF44:
 3654 05fb 6C6F6E67 		.ascii	"long unsigned int\000"
 3654      20756E73 
 3654      69676E65 
 3654      6420696E 
 3654      7400
 3655              	.LASF20:
ARM GAS  /tmp/ccxUmJh6.s 			page 107


 3656 060d 54494D32 		.ascii	"TIM2_IRQn\000"
 3656      5F495251 
 3656      6E00
 3657              	.LASF132:
 3658 0617 50524553 		.ascii	"PRESSURE_Value\000"
 3658      53555245 
 3658      5F56616C 
 3658      756500
 3659              	.LASF173:
 3660 0626 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 3660      652F6D65 
 3660      642F446F 
 3660      63756D65 
 3660      6E74732F 
 3661 0659 6100     		.ascii	"a\000"
 3662              	.LASF130:
 3663 065b 48554D49 		.ascii	"HUMIDITY_Value\000"
 3663      44495459 
 3663      5F56616C 
 3663      756500
 3664              	.LASF50:
 3665 066a 696E7433 		.ascii	"int32_t\000"
 3665      325F7400 
 3666              	.LASF144:
 3667 0672 7374616E 		.ascii	"standalone_enable_menu_timer\000"
 3667      64616C6F 
 3667      6E655F65 
 3667      6E61626C 
 3667      655F6D65 
 3668              	.LASF23:
 3669 068f 54494D31 		.ascii	"TIM14_IRQn\000"
 3669      345F4952 
 3669      516E00
 3670              	.LASF15:
 3671 069a 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 3671      5F436861 
 3671      6E6E656C 
 3671      325F335F 
 3671      4952516E 
 3672              	.LASF126:
 3673 06af 7070735F 		.ascii	"pps_one\000"
 3673      6F6E6500 
 3674              	.LASF168:
 3675 06b7 646D785F 		.ascii	"dmx_timeout_timer\000"
 3675      74696D65 
 3675      6F75745F 
 3675      74696D65 
 3675      7200
 3676              	.LASF22:
 3677 06c9 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 3677      5F444143 
 3677      5F495251 
 3677      6E00
 3678              	.LASF37:
 3679 06d7 756E7369 		.ascii	"unsigned char\000"
 3679      676E6564 
 3679      20636861 
ARM GAS  /tmp/ccxUmJh6.s 			page 108


 3679      7200
 3680              	.LASF84:
 3681 06e5 4C414D50 		.ascii	"LAMP_OFF\000"
 3681      5F4F4646 
 3681      00
 3682              	.LASF43:
 3683 06ee 5F5F7569 		.ascii	"__uint32_t\000"
 3683      6E743332 
 3683      5F7400
 3684              	.LASF123:
 3685 06f9 6C617374 		.ascii	"last_bright\000"
 3685      5F627269 
 3685      67687400 
 3686              	.LASF112:
 3687 0705 6E656564 		.ascii	"need_ack\000"
 3687      5F61636B 
 3687      00
 3688              	.LASF88:
 3689 070e 6C617374 		.ascii	"last_program_in_flash\000"
 3689      5F70726F 
 3689      6772616D 
 3689      5F696E5F 
 3689      666C6173 
 3690              	.LASF154:
 3691 0724 7361635F 		.ascii	"sac_aux\000"
 3691      61757800 
 3692              	.LASF121:
 3693 072c 6E65775F 		.ascii	"new_room\000"
 3693      726F6F6D 
 3693      00
 3694              	.LASF179:
 3695 0735 54696D69 		.ascii	"TimingDelay_Decrement\000"
 3695      6E674465 
 3695      6C61795F 
 3695      44656372 
 3695      656D656E 
 3696              	.LASF147:
 3697 074b 74696D65 		.ascii	"timer_wifi_bright\000"
 3697      725F7769 
 3697      66695F62 
 3697      72696768 
 3697      7400
 3698              	.LASF54:
 3699 075d 49434552 		.ascii	"ICER\000"
 3699      00
 3700              	.LASF118:
 3701 0762 6F6E655F 		.ascii	"one_to_ten\000"
 3701      746F5F74 
 3701      656E00
 3702              	.LASF30:
 3703 076d 53504932 		.ascii	"SPI2_IRQn\000"
 3703      5F495251 
 3703      6E00
 3704              	.LASF178:
 3705 0777 70726570 		.ascii	"prepare_json_pkt\000"
 3705      6172655F 
 3705      6A736F6E 
ARM GAS  /tmp/ccxUmJh6.s 			page 109


 3705      5F706B74 
 3705      00
 3706              	.LASF102:
 3707 0788 4B454550 		.ascii	"KEEP_ALIVE\000"
 3707      5F414C49 
 3707      564500
 3708              	.LASF98:
 3709 0793 70617261 		.ascii	"parameters_typedef\000"
 3709      6D657465 
 3709      72735F74 
 3709      79706564 
 3709      656600
 3710              	.LASF36:
 3711 07a6 7369676E 		.ascii	"signed char\000"
 3711      65642063 
 3711      68617200 
 3712              	.LASF172:
 3713 07b2 7372632F 		.ascii	"src/main.c\000"
 3713      6D61696E 
 3713      2E6300
 3714              	.LASF106:
 3715 07bd 4C494748 		.ascii	"LIGHTS_OFF\000"
 3715      54535F4F 
 3715      464600
 3716              	.LASF40:
 3717 07c8 73686F72 		.ascii	"short unsigned int\000"
 3717      7420756E 
 3717      7369676E 
 3717      65642069 
 3717      6E7400
 3718              	.LASF171:
 3719 07db 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 3719      43313120 
 3719      352E322E 
 3719      31203230 
 3719      31353132 
 3720 080e 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 3720      20726576 
 3720      6973696F 
 3720      6E203233 
 3720      31383438 
 3721 0841 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 3721      662D3220 
 3721      2D4F3020 
 3721      2D666F6D 
 3721      69742D66 
 3722 0874 66756E63 		.ascii	"function-sections\000"
 3722      74696F6E 
 3722      2D736563 
 3722      74696F6E 
 3722      7300
 3723              	.LASF143:
 3724 0886 7374616E 		.ascii	"standalone_timer\000"
 3724      64616C6F 
 3724      6E655F74 
 3724      696D6572 
 3724      00
ARM GAS  /tmp/ccxUmJh6.s 			page 110


 3725              	.LASF177:
 3726 0897 6D61696E 		.ascii	"main\000"
 3726      00
 3727              	.LASF1:
 3728 089c 48617264 		.ascii	"HardFault_IRQn\000"
 3728      4661756C 
 3728      745F4952 
 3728      516E00
 3729              	.LASF56:
 3730 08ab 49535052 		.ascii	"ISPR\000"
 3730      00
 3731              	.LASF113:
 3732 08b0 72657370 		.ascii	"resp\000"
 3732      00
 3733              	.LASF169:
 3734 08b5 7674656D 		.ascii	"vtemp\000"
 3734      7000
 3735              	.LASF142:
 3736 08bb 7363726F 		.ascii	"scroll2_timer\000"
 3736      6C6C325F 
 3736      74696D65 
 3736      7200
 3737              	.LASF161:
 3738 08c9 74696D65 		.ascii	"timer_standby\000"
 3738      725F7374 
 3738      616E6462 
 3738      7900
 3739              	.LASF110:
 3740 08d7 62797465 		.ascii	"bytes_remain\000"
 3740      735F7265 
 3740      6D61696E 
 3740      00
 3741              	.LASF79:
 3742 08e4 4C434B52 		.ascii	"LCKR\000"
 3742      00
 3743              	.LASF70:
 3744 08e9 4354524C 		.ascii	"CTRL\000"
 3744      00
 3745              	.LASF105:
 3746 08ee 4745545F 		.ascii	"GET_A\000"
 3746      4100
 3747              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccxUmJh6.s 			page 111


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccxUmJh6.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccxUmJh6.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccxUmJh6.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccxUmJh6.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccxUmJh6.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccxUmJh6.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/ccxUmJh6.s:277    .bss.show_select_timer:00000000 show_select_timer
     /tmp/ccxUmJh6.s:274    .bss.show_select_timer:00000000 $d
     /tmp/ccxUmJh6.s:283    .bss.switches_timer:00000000 switches_timer
     /tmp/ccxUmJh6.s:284    .bss.switches_timer:00000000 $d
     /tmp/ccxUmJh6.s:289    .bss.acswitch_timer:00000000 acswitch_timer
     /tmp/ccxUmJh6.s:290    .bss.acswitch_timer:00000000 $d
     /tmp/ccxUmJh6.s:296    .bss.scroll1_timer:00000000 scroll1_timer
     /tmp/ccxUmJh6.s:293    .bss.scroll1_timer:00000000 $d
     /tmp/ccxUmJh6.s:303    .bss.scroll2_timer:00000000 scroll2_timer
     /tmp/ccxUmJh6.s:300    .bss.scroll2_timer:00000000 $d
                            *COM*:00000002 standalone_timer
                            *COM*:00000002 standalone_enable_menu_timer
                            *COM*:00000001 grouped_master_timeout_timer
     /tmp/ccxUmJh6.s:313    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccxUmJh6.s:310    .bss.take_temp_sample:00000000 $d
     /tmp/ccxUmJh6.s:319    .bss.timer_wifi_bright:00000000 timer_wifi_bright
     /tmp/ccxUmJh6.s:320    .bss.timer_wifi_bright:00000000 $d
     /tmp/ccxUmJh6.s:326    .bss.timer_relay:00000000 timer_relay
     /tmp/ccxUmJh6.s:323    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
     /tmp/ccxUmJh6.s:335    .bss.igrid_timer:00000000 igrid_timer
     /tmp/ccxUmJh6.s:336    .bss.igrid_timer:00000000 $d
     /tmp/ccxUmJh6.s:341    .bss.vgrid_timer:00000000 vgrid_timer
     /tmp/ccxUmJh6.s:342    .bss.vgrid_timer:00000000 $d
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:0000000c param_struct
     /tmp/ccxUmJh6.s:357    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccxUmJh6.s:354    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/ccxUmJh6.s:367    .bss.secs:00000000 secs
     /tmp/ccxUmJh6.s:364    .bss.secs:00000000 $d
     /tmp/ccxUmJh6.s:373    .bss.hours:00000000 hours
     /tmp/ccxUmJh6.s:374    .bss.hours:00000000 $d
     /tmp/ccxUmJh6.s:379    .bss.minutes:00000000 minutes
ARM GAS  /tmp/ccxUmJh6.s 			page 112


     /tmp/ccxUmJh6.s:380    .bss.minutes:00000000 $d
     /tmp/ccxUmJh6.s:385    .bss.signal_state:00000000 signal_state
     /tmp/ccxUmJh6.s:386    .bss.signal_state:00000000 $d
     /tmp/ccxUmJh6.s:391    .bss.dmx_timeout_timer:00000000 dmx_timeout_timer
     /tmp/ccxUmJh6.s:392    .bss.dmx_timeout_timer:00000000 $d
                            *COM*:00000021 vd0
                            *COM*:00000021 vd1
                            *COM*:00000021 vd2
                            *COM*:00000021 vd3
                            *COM*:00000021 vd4
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccxUmJh6.s:401    .rodata:00000000 $d
     /tmp/ccxUmJh6.s:417    .text.main:00000000 $t
     /tmp/ccxUmJh6.s:422    .text.main:00000000 main
     /tmp/ccxUmJh6.s:846    .text.main:000002a0 $d
     /tmp/ccxUmJh6.s:877    .text.prepare_json_pkt:00000000 $t
     /tmp/ccxUmJh6.s:882    .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccxUmJh6.s:974    .text.prepare_json_pkt:0000009c $d
     /tmp/ccxUmJh6.s:983    .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccxUmJh6.s:988    .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccxUmJh6.s:1153   .text.TimingDelay_Decrement:000000fc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GPIO_Config
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
RelayOff
FillPhotoBuffer
Update_TIM3_CH1
GetPhoto
RelayOn
GetHysteresis
GetNew1to10
sprintf
UpdateRelay
UpdatePhotoTransistor
memcpy
strcat
strlen
