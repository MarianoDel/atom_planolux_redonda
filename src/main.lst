ARM GAS  /tmp/cc2DuVcX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/cc2DuVcX.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/cc2DuVcX.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/cc2DuVcX.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/cc2DuVcX.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/cc2DuVcX.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/cc2DuVcX.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc2DuVcX.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc2DuVcX.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/cc2DuVcX.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc2DuVcX.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/cc2DuVcX.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc2DuVcX.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/cc2DuVcX.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/cc2DuVcX.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/cc2DuVcX.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/cc2DuVcX.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/cc2DuVcX.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.6877,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.6878, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.6879, D.6878
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.6879, D.6879
  92 0026 083B     		subs	r3, r3, #8	@ D.6879,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.6879, D.6879,
  94 002a 2E4A     		ldr	r2, .L5	@ D.6877,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.6878, IRQn
  98 0032 1800     		movs	r0, r3	@ D.6879, D.6878
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.6879, D.6879
 101 0038 083B     		subs	r3, r3, #8	@ D.6879,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.6879, D.6879,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.6877, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.6879, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.6878, IRQn
 111 004c 1000     		movs	r0, r2	@ D.6879, D.6878
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.6879, D.6879
 114 0052 D200     		lsls	r2, r2, #3	@ D.6879, D.6879,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.6880, D.6880, D.6879
 117 0058 0200     		movs	r2, r0	@ D.6880, D.6880
 118 005a D243     		mvns	r2, r2	@ D.6880, D.6880
 119 005c 1A40     		ands	r2, r3	@ D.6879, D.6879
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.6879, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.6879, D.6879
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.6878, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.6879, D.6878
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.6879, D.6879
ARM GAS  /tmp/cc2DuVcX.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.6879, D.6879,
 132 0074 9840     		lsls	r0, r0, r3	@ D.6879, D.6879, D.6879
 133 0076 0300     		movs	r3, r0	@ D.6879, D.6879
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.6879, D.6879
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.6879,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.6877, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.6879, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.6881,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.6879, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.6879, D.6879
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.6879, D.6879,
 151 0092 1549     		ldr	r1, .L5+4	@ D.6881,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.6879, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.6879, D.6879
 156 009c 9208     		lsrs	r2, r2, #2	@ D.6879, D.6879,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.6879, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.6878, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.6879, D.6878
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.6879, D.6879
 166 00b0 C900     		lsls	r1, r1, #3	@ D.6879, D.6879,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.6880, D.6880, D.6879
 169 00b6 0100     		movs	r1, r0	@ D.6880, D.6880
 170 00b8 C943     		mvns	r1, r1	@ D.6880, D.6880
 171 00ba 1140     		ands	r1, r2	@ D.6879, D.6879
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.6879, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.6879, D.6879
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.6878, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.6879, D.6878
ARM GAS  /tmp/cc2DuVcX.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.6879, D.6879
 183 00d0 D200     		lsls	r2, r2, #3	@ D.6879, D.6879,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.6879, D.6879, D.6879
 185 00d4 0200     		movs	r2, r0	@ D.6879, D.6879
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.6879, D.6879
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.6879, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/cc2DuVcX.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.6882,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.6883,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.6884, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.6884,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.6884, _6->LOAD
ARM GAS  /tmp/cc2DuVcX.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.6883,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.6883,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.6882,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	show_select_timer
 273              		.section	.bss.show_select_timer,"aw",%nobits
 274              		.align	1
 275              		.type	show_select_timer, %object
 276              		.size	show_select_timer, 2
 277              	show_select_timer:
 278 0000 0000     		.space	2
 279              		.global	switches_timer
 280              		.section	.bss.switches_timer,"aw",%nobits
 281              		.type	switches_timer, %object
 282              		.size	switches_timer, 1
 283              	switches_timer:
 284 0000 00       		.space	1
 285              		.global	acswitch_timer
 286              		.section	.bss.acswitch_timer,"aw",%nobits
 287              		.type	acswitch_timer, %object
ARM GAS  /tmp/cc2DuVcX.s 			page 23


 288              		.size	acswitch_timer, 1
 289              	acswitch_timer:
 290 0000 00       		.space	1
 291              		.global	scroll1_timer
 292              		.section	.bss.scroll1_timer,"aw",%nobits
 293              		.align	1
 294              		.type	scroll1_timer, %object
 295              		.size	scroll1_timer, 2
 296              	scroll1_timer:
 297 0000 0000     		.space	2
 298              		.global	scroll2_timer
 299              		.section	.bss.scroll2_timer,"aw",%nobits
 300              		.align	1
 301              		.type	scroll2_timer, %object
 302              		.size	scroll2_timer, 2
 303              	scroll2_timer:
 304 0000 0000     		.space	2
 305              		.comm	standalone_timer,2,2
 306              		.comm	standalone_enable_menu_timer,2,2
 307              		.comm	grouped_master_timeout_timer,1,1
 308              		.global	take_temp_sample
 309              		.section	.bss.take_temp_sample,"aw",%nobits
 310              		.align	1
 311              		.type	take_temp_sample, %object
 312              		.size	take_temp_sample, 2
 313              	take_temp_sample:
 314 0000 0000     		.space	2
 315              		.global	timer_wifi_bright
 316              		.section	.bss.timer_wifi_bright,"aw",%nobits
 317              		.type	timer_wifi_bright, %object
 318              		.size	timer_wifi_bright, 1
 319              	timer_wifi_bright:
 320 0000 00       		.space	1
 321              		.global	timer_relay
 322              		.section	.bss.timer_relay,"aw",%nobits
 323              		.align	1
 324              		.type	timer_relay, %object
 325              		.size	timer_relay, 2
 326              	timer_relay:
 327 0000 0000     		.space	2
 328              		.comm	tt_take_photo_sample,2,2
 329              		.comm	tt_relay_on_off,2,2
 330              		.comm	saved_mode,1,1
 331              		.global	igrid_timer
 332              		.section	.bss.igrid_timer,"aw",%nobits
 333              		.type	igrid_timer, %object
 334              		.size	igrid_timer, 1
 335              	igrid_timer:
 336 0000 00       		.space	1
 337              		.global	vgrid_timer
 338              		.section	.bss.vgrid_timer,"aw",%nobits
 339              		.type	vgrid_timer, %object
 340              		.size	vgrid_timer, 1
 341              	vgrid_timer:
 342 0000 00       		.space	1
 343              		.comm	s1,2,2
 344              		.comm	s2,2,2
ARM GAS  /tmp/cc2DuVcX.s 			page 24


 345              		.comm	sac,2,2
 346              		.comm	sac_aux,1,1
 347              		.comm	usart1_mini_timeout,1,1
 348              		.comm	usart1_pckt_ready,1,1
 349              		.comm	usart1_have_data,1,1
 350              		.comm	usart1_pckt_bytes,1,1
 351              		.comm	param_struct,12,4
 352              		.global	wait_ms_var
 353              		.section	.bss.wait_ms_var,"aw",%nobits
 354              		.align	1
 355              		.type	wait_ms_var, %object
 356              		.size	wait_ms_var, 2
 357              	wait_ms_var:
 358 0000 0000     		.space	2
 359              		.comm	timer_standby,2,2
 360              		.comm	tcp_kalive_timer,2,2
 361              		.comm	filter_timer,1,1
 362              		.global	secs
 363              		.section	.bss.secs,"aw",%nobits
 364              		.align	1
 365              		.type	secs, %object
 366              		.size	secs, 2
 367              	secs:
 368 0000 0000     		.space	2
 369              		.global	hours
 370              		.section	.bss.hours,"aw",%nobits
 371              		.type	hours, %object
 372              		.size	hours, 1
 373              	hours:
 374 0000 00       		.space	1
 375              		.global	minutes
 376              		.section	.bss.minutes,"aw",%nobits
 377              		.type	minutes, %object
 378              		.size	minutes, 1
 379              	minutes:
 380 0000 00       		.space	1
 381              		.global	signal_state
 382              		.section	.bss.signal_state,"aw",%nobits
 383              		.type	signal_state, %object
 384              		.size	signal_state, 1
 385              	signal_state:
 386 0000 00       		.space	1
 387              		.global	dmx_timeout_timer
 388              		.section	.bss.dmx_timeout_timer,"aw",%nobits
 389              		.type	dmx_timeout_timer, %object
 390              		.size	dmx_timeout_timer, 1
 391              	dmx_timeout_timer:
 392 0000 00       		.space	1
 393              		.comm	vd0,33,4
 394              		.comm	vd1,33,4
 395              		.comm	vd2,33,4
 396              		.comm	vd3,33,4
 397              		.comm	vd4,33,4
 398              		.comm	vtemp,34,4
 399              		.comm	vpote,34,4
 400              		.section	.rodata
 401              		.align	2
ARM GAS  /tmp/cc2DuVcX.s 			page 25


 402              	.LC0:
 403 0000 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 403      726E6F20 
 403      506C6163 
 403      61205265 
 403      646F6E64 
 404 0025 000000   		.align	2
 405              	.LC2:
 406 0028 20204665 		.ascii	"  Features:\015\012\000"
 406      61747572 
 406      65733A0D 
 406      0A00
 407 0036 0000     		.align	2
 408              	.LC4:
 409 0038 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 409      6D6D6572 
 409      20312074 
 409      6F203130 
 409      560D0A00 
 410              		.align	2
 411              	.LC6:
 412 004c 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 412      67687420 
 412      48797374 
 412      65726573 
 412      69730D0A 
 413 0061 000000   		.align	2
 414              	.LC8:
 415 0064 20205379 		.ascii	"  Sync by ADC\015\012\000"
 415      6E632062 
 415      79204144 
 415      430D0A00 
 416              		.section	.text.main,"ax",%progbits
 417              		.align	2
 418              		.global	main
 419              		.code	16
 420              		.thumb_func
 421              		.type	main, %function
 422              	main:
 423              	.LFB20:
 424              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
ARM GAS  /tmp/cc2DuVcX.s 			page 26


  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #endif
  53:src/main.c    **** 
  54:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  55:src/main.c    **** 
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** //volatile unsigned short prog_timer = 0;
  72:src/main.c    **** //volatile unsigned short mainmenu_timer = 0;
  73:src/main.c    **** volatile unsigned short show_select_timer = 0;
ARM GAS  /tmp/cc2DuVcX.s 			page 27


  74:src/main.c    **** volatile unsigned char switches_timer = 0;
  75:src/main.c    **** volatile unsigned char acswitch_timer = 0;
  76:src/main.c    **** 
  77:src/main.c    **** volatile unsigned short scroll1_timer = 0;
  78:src/main.c    **** volatile unsigned short scroll2_timer = 0;
  79:src/main.c    **** 
  80:src/main.c    **** volatile unsigned short standalone_timer;
  81:src/main.c    **** volatile unsigned short standalone_enable_menu_timer;
  82:src/main.c    **** //volatile unsigned short standalone_menu_timer;
  83:src/main.c    **** volatile unsigned char grouped_master_timeout_timer;
  84:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  85:src/main.c    **** volatile unsigned char timer_wifi_bright = 0;
  86:src/main.c    **** 
  87:src/main.c    **** #ifdef USE_REDONDA_BASIC
  88:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  89:src/main.c    **** 
  90:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  91:src/main.c    **** volatile unsigned short tt_relay_on_off;
  92:src/main.c    **** #endif
  93:src/main.c    **** 
  94:src/main.c    **** 
  95:src/main.c    **** unsigned char saved_mode;
  96:src/main.c    **** 
  97:src/main.c    **** // ------- para determinar igrid -------
  98:src/main.c    **** volatile unsigned char igrid_timer = 0;
  99:src/main.c    **** volatile unsigned char vgrid_timer = 0;
 100:src/main.c    **** 
 101:src/main.c    **** // ------- Externals de los switches -------
 102:src/main.c    **** unsigned short s1;
 103:src/main.c    **** unsigned short s2;
 104:src/main.c    **** unsigned short sac;
 105:src/main.c    **** unsigned char sac_aux;
 106:src/main.c    **** 
 107:src/main.c    **** // ------- Externals del GPS & GSM -------
 108:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 109:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 110:src/main.c    **** volatile unsigned char usart1_have_data;
 111:src/main.c    **** unsigned char usart1_pckt_bytes;
 112:src/main.c    **** 
 113:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 114:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 115:src/main.c    **** #define gps_have_data		usart1_have_data
 116:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 117:src/main.c    **** 
 118:src/main.c    **** #ifdef USE_GPS
 119:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 120:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 121:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 122:src/main.c    **** volatile unsigned char usart2_have_data;
 123:src/main.c    **** unsigned char usart2_pckt_bytes;
 124:src/main.c    **** 
 125:src/main.c    **** #endif
 126:src/main.c    **** 
 127:src/main.c    **** // ------- Externals del GSM -------
 128:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 129:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 130:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
ARM GAS  /tmp/cc2DuVcX.s 			page 28


 131:src/main.c    **** #define gsm_have_data		usart1_have_data
 132:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 133:src/main.c    **** 
 134:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 135:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 136:src/main.c    **** volatile unsigned char usart2_have_data;
 137:src/main.c    **** unsigned char usart2_pckt_bytes;
 138:src/main.c    **** 
 139:src/main.c    **** //unsigned char AlertasReportar[5] = {0,0,0,0,0};
 140:src/main.c    **** //unsigned char ActDact = 0;
 141:src/main.c    **** //unsigned char claveAct[5] = {0,0,0,0,0};
 142:src/main.c    **** //volatile char USERCODE[8] = "123456";
 143:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 144:src/main.c    **** #endif
 145:src/main.c    **** 
 146:src/main.c    **** //--- VARIABLES GLOBALES ---//
 147:src/main.c    **** parameters_typedef param_struct;
 148:src/main.c    **** 
 149:src/main.c    **** // ------- de los timers -------
 150:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 151:src/main.c    **** volatile unsigned short timer_standby;
 152:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 153:src/main.c    **** //volatile unsigned char display_timer;
 154:src/main.c    **** volatile unsigned char filter_timer;
 155:src/main.c    **** 
 156:src/main.c    **** //volatile unsigned char door_filter;
 157:src/main.c    **** //volatile unsigned char take_sample;
 158:src/main.c    **** //volatile unsigned char move_relay;
 159:src/main.c    **** volatile unsigned short secs = 0;
 160:src/main.c    **** volatile unsigned char hours = 0;
 161:src/main.c    **** volatile unsigned char minutes = 0;
 162:src/main.c    **** 
 163:src/main.c    **** 
 164:src/main.c    **** // ------- del DMX -------
 165:src/main.c    **** volatile unsigned char signal_state = 0;
 166:src/main.c    **** volatile unsigned char dmx_timeout_timer = 0;
 167:src/main.c    **** //unsigned short tim_counter_65ms = 0;
 168:src/main.c    **** 
 169:src/main.c    **** // ------- de los filtros DMX -------
 170:src/main.c    **** #define LARGO_F		32
 171:src/main.c    **** #define DIVISOR_F	5
 172:src/main.c    **** unsigned char vd0 [LARGO_F + 1];
 173:src/main.c    **** unsigned char vd1 [LARGO_F + 1];
 174:src/main.c    **** unsigned char vd2 [LARGO_F + 1];
 175:src/main.c    **** unsigned char vd3 [LARGO_F + 1];
 176:src/main.c    **** unsigned char vd4 [LARGO_F + 1];
 177:src/main.c    **** 
 178:src/main.c    **** 
 179:src/main.c    **** #define IDLE	0
 180:src/main.c    **** #define LOOK_FOR_BREAK	1
 181:src/main.c    **** #define LOOK_FOR_MARK	2
 182:src/main.c    **** #define LOOK_FOR_START	3
 183:src/main.c    **** 
 184:src/main.c    **** 
 185:src/main.c    **** 
 186:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 187:src/main.c    **** void TimingDelay_Decrement(void);
ARM GAS  /tmp/cc2DuVcX.s 			page 29


 188:src/main.c    **** void Update_PWM (unsigned short);
 189:src/main.c    **** void UpdatePackets (void);
 190:src/main.c    **** 
 191:src/main.c    **** // ------- del display -------
 192:src/main.c    **** 
 193:src/main.c    **** 
 194:src/main.c    **** // ------- del DMX -------
 195:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 196:src/main.c    **** #define DMX_TIMEOUT	20
 197:src/main.c    **** 
 198:src/main.c    **** //--- FILTROS DE SENSORES ---//
 199:src/main.c    **** #define LARGO_FILTRO 16
 200:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 201:src/main.c    **** //#define LARGO_FILTRO 32
 202:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 203:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 204:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 205:src/main.c    **** 
 206:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 207:src/main.c    **** 
 208:src/main.c    **** 
 209:src/main.c    **** //-------------------------------------------//
 210:src/main.c    **** // @brief  Main program.
 211:src/main.c    **** // @param  None
 212:src/main.c    **** // @retval None
 213:src/main.c    **** //------------------------------------------//
 214:src/main.c    **** int main(void)
 215:src/main.c    **** {
 425              		.loc 2 215 0
 426              		.cfi_startproc
 427 0000 00B5     		push	{lr}	@
 428              	.LCFI4:
 429              		.cfi_def_cfa_offset 4
 430              		.cfi_offset 14, -4
 431 0002 8BB0     		sub	sp, sp, #44	@,,
 432              	.LCFI5:
 433              		.cfi_def_cfa_offset 48
 216:src/main.c    **** 	unsigned char i, ii;
 217:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 434              		.loc 2 217 0
 435 0004 2623     		movs	r3, #38	@ tmp130,
 436 0006 6B44     		add	r3, r3, sp	@ tmp130,
 437 0008 0022     		movs	r2, #0	@ tmp131,
 438 000a 1A70     		strb	r2, [r3]	@ tmp132, need_ack
 218:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 439              		.loc 2 218 0
 440 000c 2523     		movs	r3, #37	@ tmp133,
 441 000e 6B44     		add	r3, r3, sp	@ tmp133,
 442 0010 0022     		movs	r2, #0	@ tmp134,
 443 0012 1A70     		strb	r2, [r3]	@ tmp135, resp
 219:src/main.c    **** 	unsigned short local_meas, local_meas_last;
 220:src/main.c    **** #ifdef USE_REDONDA_BASIC
 221:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 444              		.loc 2 221 0
 445 0014 09AB     		add	r3, sp, #36	@ tmp136,,
 446 0016 0022     		movs	r2, #0	@ tmp137,
 447 0018 1A70     		strb	r2, [r3]	@ tmp138, main_state
ARM GAS  /tmp/cc2DuVcX.s 			page 30


 222:src/main.c    **** #ifdef WITH_HYST
 223:src/main.c    **** 	unsigned short hyst;
 224:src/main.c    **** #endif
 225:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 226:src/main.c    **** 	unsigned char one_to_ten;
 227:src/main.c    **** #endif
 228:src/main.c    **** 
 229:src/main.c    **** #else		//USE_REDONDA_BASIC
 230:src/main.c    **** 	unsigned char main_state = 0;
 231:src/main.c    **** #endif
 232:src/main.c    **** 	char s_lcd [20];
 233:src/main.c    **** 	enum TcpMessages tcp_msg = NONE_MSG;
 448              		.loc 2 233 0
 449 001a 2323     		movs	r3, #35	@ tmp139,
 450 001c 6B44     		add	r3, r3, sp	@ tmp139,
 451 001e 0022     		movs	r2, #0	@ tmp140,
 452 0020 1A70     		strb	r2, [r3]	@ tmp141, tcp_msg
 234:src/main.c    **** 	unsigned char new_room = 0;
 453              		.loc 2 234 0
 454 0022 2223     		movs	r3, #34	@ tmp142,
 455 0024 6B44     		add	r3, r3, sp	@ tmp142,
 456 0026 0022     		movs	r2, #0	@ tmp143,
 457 0028 1A70     		strb	r2, [r3]	@ tmp144, new_room
 235:src/main.c    **** 	unsigned char new_lamp = 0;
 458              		.loc 2 235 0
 459 002a 2123     		movs	r3, #33	@ tmp145,
 460 002c 6B44     		add	r3, r3, sp	@ tmp145,
 461 002e 0022     		movs	r2, #0	@ tmp146,
 462 0030 1A70     		strb	r2, [r3]	@ tmp147, new_lamp
 236:src/main.c    **** 	unsigned char last_bright = 0;
 463              		.loc 2 236 0
 464 0032 08AB     		add	r3, sp, #32	@ tmp148,,
 465 0034 0022     		movs	r2, #0	@ tmp149,
 466 0036 1A70     		strb	r2, [r3]	@ tmp150, last_bright
 237:src/main.c    **** 	unsigned char show_ldr = 0;
 467              		.loc 2 237 0
 468 0038 1F23     		movs	r3, #31	@ tmp151,
 469 003a 6B44     		add	r3, r3, sp	@ tmp151,
 470 003c 0022     		movs	r2, #0	@ tmp152,
 471 003e 1A70     		strb	r2, [r3]	@ tmp153, show_ldr
 238:src/main.c    **** 	int dummy_resp = 0;
 472              		.loc 2 238 0
 473 0040 0023     		movs	r3, #0	@ tmp154,
 474 0042 0693     		str	r3, [sp, #24]	@ tmp154, dummy_resp
 239:src/main.c    **** 	unsigned char pps_one = 0;
 475              		.loc 2 239 0
 476 0044 1723     		movs	r3, #23	@ tmp155,
 477 0046 6B44     		add	r3, r3, sp	@ tmp155,
 478 0048 0022     		movs	r2, #0	@ tmp156,
 479 004a 1A70     		strb	r2, [r3]	@ tmp157, pps_one
 240:src/main.c    **** 
 241:src/main.c    **** #ifdef USE_PROD_PROGRAM
 242:src/main.c    **** 	unsigned char jump_the_menu = 0;
 243:src/main.c    **** #endif
 244:src/main.c    **** 	parameters_typedef * p_mem_init;
 245:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 246:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
ARM GAS  /tmp/cc2DuVcX.s 			page 31


 247:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 248:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 249:src/main.c    ****     //   system_stm32f0xx.c file
 250:src/main.c    **** 
 251:src/main.c    **** 	//GPIO Configuration.
 252:src/main.c    **** 	GPIO_Config();
 480              		.loc 2 252 0
 481 004c FFF7FEFF 		bl	GPIO_Config	@
 253:src/main.c    **** 
 254:src/main.c    **** 
 255:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 256:src/main.c    **** 	if (SysTick_Config(48000))
 482              		.loc 2 256 0
 483 0050 484B     		ldr	r3, .L24	@ tmp158,
 484 0052 1800     		movs	r0, r3	@, tmp158
 485 0054 FFF7FEFF 		bl	SysTick_Config	@
 486 0058 031E     		subs	r3, r0, #0	@ D.6885,,
 487 005a 28D0     		beq	.L13	@,
 488              	.L18:
 257:src/main.c    **** 	{
 258:src/main.c    **** 		while (1)	/* Capture error */
 259:src/main.c    **** 		{
 260:src/main.c    **** 			if (LED)
 489              		.loc 2 260 0
 490 005c 9023     		movs	r3, #144	@ tmp218,
 491 005e DB05     		lsls	r3, r3, #23	@ D.6886, tmp218,
 492 0060 9B8A     		ldrh	r3, [r3, #20]	@ tmp160,
 493 0062 9BB2     		uxth	r3, r3	@ D.6887, tmp160
 494 0064 1A00     		movs	r2, r3	@ D.6888, D.6887
 495 0066 8023     		movs	r3, #128	@ tmp219,
 496 0068 5B01     		lsls	r3, r3, #5	@ tmp161, tmp219,
 497 006a 1340     		ands	r3, r2	@ D.6888, D.6888
 498 006c 05D0     		beq	.L14	@,
 261:src/main.c    **** 				LED_OFF;
 499              		.loc 2 261 0
 500 006e 9023     		movs	r3, #144	@ tmp216,
 501 0070 DB05     		lsls	r3, r3, #23	@ D.6886, tmp216,
 502 0072 8022     		movs	r2, #128	@ tmp217,
 503 0074 5205     		lsls	r2, r2, #21	@ tmp162, tmp217,
 504 0076 9A61     		str	r2, [r3, #24]	@ tmp162, _25->BSRR
 505 0078 04E0     		b	.L15	@
 506              	.L14:
 262:src/main.c    **** 			else
 263:src/main.c    **** 				LED_ON;
 507              		.loc 2 263 0
 508 007a 9023     		movs	r3, #144	@ tmp214,
 509 007c DB05     		lsls	r3, r3, #23	@ D.6886, tmp214,
 510 007e 8022     		movs	r2, #128	@ tmp215,
 511 0080 5201     		lsls	r2, r2, #5	@ tmp163, tmp215,
 512 0082 9A61     		str	r2, [r3, #24]	@ tmp163, _27->BSRR
 513              	.L15:
 264:src/main.c    **** 
 265:src/main.c    **** 			for (i = 0; i < 255; i++)
 514              		.loc 2 265 0
 515 0084 2723     		movs	r3, #39	@ tmp164,
 516 0086 6B44     		add	r3, r3, sp	@ tmp164,
 517 0088 0022     		movs	r2, #0	@ tmp165,
ARM GAS  /tmp/cc2DuVcX.s 			page 32


 518 008a 1A70     		strb	r2, [r3]	@ tmp166, i
 519 008c 09E0     		b	.L16	@
 520              	.L17:
 266:src/main.c    **** 			{
 267:src/main.c    **** 				asm (	"nop \n\t"
 521              		.loc 2 267 0 discriminator 3
 522              		.syntax divided
 523              	@ 267 "src/main.c" 1
 524 008e C046     		nop 
 525 0090 C046     		nop 
 526 0092 C046     		nop 
 527              		
 528              	@ 0 "" 2
 265:src/main.c    **** 			{
 529              		.loc 2 265 0 discriminator 3
 530              		.thumb
 531              		.syntax unified
 532 0094 2723     		movs	r3, #39	@ tmp167,
 533 0096 6B44     		add	r3, r3, sp	@ tmp167,
 534 0098 1A78     		ldrb	r2, [r3]	@ D.6889, i
 535 009a 2723     		movs	r3, #39	@ tmp168,
 536 009c 6B44     		add	r3, r3, sp	@ tmp168,
 537 009e 0132     		adds	r2, r2, #1	@ tmp169,
 538 00a0 1A70     		strb	r2, [r3]	@ tmp170, i
 539              	.L16:
 265:src/main.c    **** 			{
 540              		.loc 2 265 0 is_stmt 0 discriminator 1
 541 00a2 2723     		movs	r3, #39	@ tmp171,
 542 00a4 6B44     		add	r3, r3, sp	@ tmp171,
 543 00a6 1B78     		ldrb	r3, [r3]	@ tmp172, i
 544 00a8 FF2B     		cmp	r3, #255	@ tmp172,
 545 00aa F0D1     		bne	.L17	@,
 268:src/main.c    **** 						"nop \n\t"
 269:src/main.c    **** 						"nop \n\t" );
 270:src/main.c    **** 			}
 271:src/main.c    **** 		}
 546              		.loc 2 271 0 is_stmt 1
 547 00ac D6E7     		b	.L18	@
 548              	.L13:
 272:src/main.c    **** 	}
 273:src/main.c    **** 
 274:src/main.c    **** 
 275:src/main.c    **** 	//ADC Configuration
 276:src/main.c    **** //	AdcConfig();
 277:src/main.c    **** 
 278:src/main.c    **** 	//TIM Configuration.
 279:src/main.c    **** 	// TIM_3_Init();
 280:src/main.c    **** //	TIM_14_Init();
 281:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 282:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 283:src/main.c    **** 
 284:src/main.c    **** //	EXTIOff ();
 285:src/main.c    **** 
 286:src/main.c    **** 	// while (1)
 287:src/main.c    **** 	// {
 288:src/main.c    **** 	// 	// if (SYNCP)
 289:src/main.c    **** 	// 	// {
ARM GAS  /tmp/cc2DuVcX.s 			page 33


 290:src/main.c    **** 	// 	// 	SYNCP_OFF;
 291:src/main.c    **** 	// 	// 	LED_OFF;
 292:src/main.c    **** 	// 	// }
 293:src/main.c    **** 	// 	// else
 294:src/main.c    **** 	// 	// {
 295:src/main.c    **** 	// 	// 	SYNCP_ON;
 296:src/main.c    **** 	// 	// 	LED_ON;
 297:src/main.c    **** 	// 	// }
 298:src/main.c    **** 	// 	// Wait_ms(10);
 299:src/main.c    **** 	//
 300:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 301:src/main.c    **** 	// 	// {
 302:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 303:src/main.c    **** 	// 	// 	Wait_ms (10);
 304:src/main.c    **** 	// 	// }
 305:src/main.c    **** 	// }
 306:src/main.c    **** 
 307:src/main.c    **** //		while (1)
 308:src/main.c    **** //		{
 309:src/main.c    **** //			PIN3_OFF;
 310:src/main.c    **** //			Wait_ms (10);
 311:src/main.c    **** //			PIN3_ON;
 312:src/main.c    **** //			Wait_ms (10);
 313:src/main.c    **** //		}
 314:src/main.c    **** 
 315:src/main.c    **** 	//--- Welcome code ---//
 316:src/main.c    **** 	LED_OFF;
 549              		.loc 2 316 0
 550 00ae 9023     		movs	r3, #144	@ tmp208,
 551 00b0 DB05     		lsls	r3, r3, #23	@ D.6886, tmp208,
 552 00b2 8022     		movs	r2, #128	@ tmp209,
 553 00b4 5205     		lsls	r2, r2, #21	@ tmp173, tmp209,
 554 00b6 9A61     		str	r2, [r3, #24]	@ tmp173, _32->BSRR
 317:src/main.c    **** //	EN_GPS_OFF;
 318:src/main.c    **** 	EN_GPS_ON;
 555              		.loc 2 318 0
 556 00b8 9023     		movs	r3, #144	@ tmp210,
 557 00ba DB05     		lsls	r3, r3, #23	@ D.6886, tmp210,
 558 00bc 8022     		movs	r2, #128	@ tmp211,
 559 00be 1202     		lsls	r2, r2, #8	@ tmp174, tmp211,
 560 00c0 9A61     		str	r2, [r3, #24]	@ tmp174, _34->BSRR
 319:src/main.c    **** 	//RELAY_ON;
 320:src/main.c    **** 	RELAY_OFF;
 561              		.loc 2 320 0
 562 00c2 9023     		movs	r3, #144	@ tmp212,
 563 00c4 DB05     		lsls	r3, r3, #23	@ D.6886, tmp212,
 564 00c6 8022     		movs	r2, #128	@ tmp213,
 565 00c8 1205     		lsls	r2, r2, #20	@ tmp175, tmp213,
 566 00ca 9A61     		str	r2, [r3, #24]	@ tmp175, _36->BSRR
 321:src/main.c    **** 
 322:src/main.c    **** 	USART1Config();
 567              		.loc 2 322 0
 568 00cc FFF7FEFF 		bl	USART1Config	@
 323:src/main.c    **** 	USART2Config();
 569              		.loc 2 323 0
 570 00d0 FFF7FEFF 		bl	USART2Config	@
 324:src/main.c    **** 
ARM GAS  /tmp/cc2DuVcX.s 			page 34


 325:src/main.c    **** 	EXTIOff();
 571              		.loc 2 325 0
 572 00d4 FFF7FEFF 		bl	EXTIOff	@
 326:src/main.c    **** 
 327:src/main.c    **** #ifdef USE_REDONDA_BASIC
 328:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 329:src/main.c    **** 	// USART1Config();
 330:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 573              		.loc 2 330 0
 574 00d8 FFF7FEFF 		bl	AdcConfig	@
 331:src/main.c    **** 
 332:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 333:src/main.c    **** 	TIM_3_Init ();
 575              		.loc 2 333 0
 576 00dc FFF7FEFF 		bl	TIM_3_Init	@
 334:src/main.c    **** #endif
 335:src/main.c    **** 
 336:src/main.c    **** 	TIM_16_Init();
 577              		.loc 2 336 0
 578 00e0 FFF7FEFF 		bl	TIM_16_Init	@
 337:src/main.c    **** 	TIM16Enable();
 579              		.loc 2 337 0
 580 00e4 FFF7FEFF 		bl	TIM16Enable	@
 338:src/main.c    **** 
 339:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 581              		.loc 2 339 0
 582 00e8 234B     		ldr	r3, .L24+4	@ tmp176,
 583 00ea 1800     		movs	r0, r3	@, tmp176
 584 00ec FFF7FEFF 		bl	Usart2Send	@
 340:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 585              		.loc 2 340 0
 586 00f0 224B     		ldr	r3, .L24+8	@ tmp177,
 587 00f2 1800     		movs	r0, r3	@, tmp177
 588 00f4 FFF7FEFF 		bl	Usart2Send	@
 341:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 342:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 589              		.loc 2 342 0
 590 00f8 214B     		ldr	r3, .L24+12	@ tmp178,
 591 00fa 1800     		movs	r0, r3	@, tmp178
 592 00fc FFF7FEFF 		bl	Usart2Send	@
 343:src/main.c    **** 	#endif
 344:src/main.c    **** 	#ifdef WITH_HYST
 345:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 593              		.loc 2 345 0
 594 0100 204B     		ldr	r3, .L24+16	@ tmp179,
 595 0102 1800     		movs	r0, r3	@, tmp179
 596 0104 FFF7FEFF 		bl	Usart2Send	@
 346:src/main.c    **** 	#endif
 347:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 348:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 349:src/main.c    **** 	#endif
 350:src/main.c    **** 	#ifdef USE_WITH_SYNC
 351:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 352:src/main.c    **** 	#else
 353:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 597              		.loc 2 353 0
 598 0108 1F4B     		ldr	r3, .L24+20	@ tmp180,
ARM GAS  /tmp/cc2DuVcX.s 			page 35


 599 010a 1800     		movs	r0, r3	@, tmp180
 600 010c FFF7FEFF 		bl	Usart2Send	@
 354:src/main.c    **** 	#endif
 355:src/main.c    **** 
 356:src/main.c    **** 
 357:src/main.c    **** 	for (i = 0; i < 8; i++)
 601              		.loc 2 357 0
 602 0110 2723     		movs	r3, #39	@ tmp181,
 603 0112 6B44     		add	r3, r3, sp	@ tmp181,
 604 0114 0022     		movs	r2, #0	@ tmp182,
 605 0116 1A70     		strb	r2, [r3]	@ tmp183, i
 606 0118 1DE0     		b	.L19	@
 607              	.L22:
 358:src/main.c    **** 	{
 359:src/main.c    **** 		if (LED)
 608              		.loc 2 359 0
 609 011a 9023     		movs	r3, #144	@ tmp206,
 610 011c DB05     		lsls	r3, r3, #23	@ D.6886, tmp206,
 611 011e 9B8A     		ldrh	r3, [r3, #20]	@ tmp185,
 612 0120 9BB2     		uxth	r3, r3	@ D.6887, tmp185
 613 0122 1A00     		movs	r2, r3	@ D.6888, D.6887
 614 0124 8023     		movs	r3, #128	@ tmp207,
 615 0126 5B01     		lsls	r3, r3, #5	@ tmp186, tmp207,
 616 0128 1340     		ands	r3, r2	@ D.6888, D.6888
 617 012a 05D0     		beq	.L20	@,
 360:src/main.c    **** 			LED_OFF;
 618              		.loc 2 360 0
 619 012c 9023     		movs	r3, #144	@ tmp204,
 620 012e DB05     		lsls	r3, r3, #23	@ D.6886, tmp204,
 621 0130 8022     		movs	r2, #128	@ tmp205,
 622 0132 5205     		lsls	r2, r2, #21	@ tmp187, tmp205,
 623 0134 9A61     		str	r2, [r3, #24]	@ tmp187, _55->BSRR
 624 0136 04E0     		b	.L21	@
 625              	.L20:
 361:src/main.c    **** 		else
 362:src/main.c    **** 			LED_ON;
 626              		.loc 2 362 0
 627 0138 9023     		movs	r3, #144	@ tmp202,
 628 013a DB05     		lsls	r3, r3, #23	@ D.6886, tmp202,
 629 013c 8022     		movs	r2, #128	@ tmp203,
 630 013e 5201     		lsls	r2, r2, #5	@ tmp188, tmp203,
 631 0140 9A61     		str	r2, [r3, #24]	@ tmp188, _57->BSRR
 632              	.L21:
 363:src/main.c    **** 
 364:src/main.c    **** 		Wait_ms (250);
 633              		.loc 2 364 0 discriminator 2
 634 0142 FA20     		movs	r0, #250	@,
 635 0144 FFF7FEFF 		bl	Wait_ms	@
 357:src/main.c    **** 	{
 636              		.loc 2 357 0 discriminator 2
 637 0148 2723     		movs	r3, #39	@ tmp189,
 638 014a 6B44     		add	r3, r3, sp	@ tmp189,
 639 014c 1A78     		ldrb	r2, [r3]	@ D.6889, i
 640 014e 2723     		movs	r3, #39	@ tmp190,
 641 0150 6B44     		add	r3, r3, sp	@ tmp190,
 642 0152 0132     		adds	r2, r2, #1	@ tmp191,
 643 0154 1A70     		strb	r2, [r3]	@ tmp192, i
ARM GAS  /tmp/cc2DuVcX.s 			page 36


 644              	.L19:
 357:src/main.c    **** 	{
 645              		.loc 2 357 0 is_stmt 0 discriminator 1
 646 0156 2723     		movs	r3, #39	@ tmp193,
 647 0158 6B44     		add	r3, r3, sp	@ tmp193,
 648 015a 1B78     		ldrb	r3, [r3]	@ tmp194, i
 649 015c 072B     		cmp	r3, #7	@ tmp194,
 650 015e DCD9     		bls	.L22	@,
 365:src/main.c    **** 	}
 366:src/main.c    **** 
 367:src/main.c    **** 	timer_standby = 2000;
 651              		.loc 2 367 0 is_stmt 1
 652 0160 0A4B     		ldr	r3, .L24+24	@ tmp195,
 653 0162 FA22     		movs	r2, #250	@ tmp199,
 654 0164 D200     		lsls	r2, r2, #3	@ tmp196, tmp199,
 655 0166 1A80     		strh	r2, [r3]	@ tmp197, timer_standby
 368:src/main.c    **** 
 369:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 370:src/main.c    **** 	// while (1)
 371:src/main.c    **** 	// {
 372:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 373:src/main.c    **** 	// 	{
 374:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 375:src/main.c    **** 	// 		Wait_ms(10);
 376:src/main.c    **** 	// 	}
 377:src/main.c    **** 	//
 378:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 379:src/main.c    **** 	// 	{
 380:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 381:src/main.c    **** 	// 		Wait_ms(10);
 382:src/main.c    **** 	// 	}
 383:src/main.c    **** 	// }
 384:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 385:src/main.c    **** 
 386:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 387:src/main.c    **** 	// i = 0;
 388:src/main.c    **** 	// while (1)
 389:src/main.c    **** 	// {
 390:src/main.c    **** 	// 	switch (i)
 391:src/main.c    **** 	// 	{
 392:src/main.c    **** 	// 		case 0:
 393:src/main.c    **** 	// 			RelayOn();
 394:src/main.c    **** 	// 			timer_standby = 50;
 395:src/main.c    **** 	// 			LED_ON;
 396:src/main.c    **** 	// 			i++;
 397:src/main.c    **** 	// 			break;
 398:src/main.c    **** 	//
 399:src/main.c    **** 	// 		case 1:
 400:src/main.c    **** 	// 			if (!timer_standby)
 401:src/main.c    **** 	// 			{
 402:src/main.c    **** 	// 				RelayOff();
 403:src/main.c    **** 	// 				LED_OFF;
 404:src/main.c    **** 	// 				i++;
 405:src/main.c    **** 	// 				timer_standby = 10000;
 406:src/main.c    **** 	// 			}
 407:src/main.c    **** 	// 			break;
 408:src/main.c    **** 	//
ARM GAS  /tmp/cc2DuVcX.s 			page 37


 409:src/main.c    **** 	// 		case 2:
 410:src/main.c    **** 	// 			if (!timer_standby)
 411:src/main.c    **** 	// 			{
 412:src/main.c    **** 	// 				i = 0;
 413:src/main.c    **** 	// 			}
 414:src/main.c    **** 	// 			break;
 415:src/main.c    **** 	// 	}
 416:src/main.c    **** 	//
 417:src/main.c    **** 	// 	UpdateRelay ();
 418:src/main.c    **** 	// }
 419:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 420:src/main.c    **** 
 421:src/main.c    **** //--- Programa de pruebas I meas -----
 422:src/main.c    **** 	RELAY_ON;
 656              		.loc 2 422 0
 657 0168 9023     		movs	r3, #144	@ tmp200,
 658 016a DB05     		lsls	r3, r3, #23	@ D.6886, tmp200,
 659 016c 8022     		movs	r2, #128	@ tmp201,
 660 016e 1201     		lsls	r2, r2, #4	@ tmp198, tmp201,
 661 0170 9A61     		str	r2, [r3, #24]	@ tmp198, _63->BSRR
 662              	.L23:
 423:src/main.c    **** 	while (1);
 663              		.loc 2 423 0 discriminator 1
 664 0172 FEE7     		b	.L23	@
 665              	.L25:
 666              		.align	2
 667              	.L24:
 668 0174 80BB0000 		.word	48000
 669 0178 00000000 		.word	.LC0
 670 017c 28000000 		.word	.LC2
 671 0180 38000000 		.word	.LC4
 672 0184 4C000000 		.word	.LC6
 673 0188 64000000 		.word	.LC8
 674 018c 00000000 		.word	timer_standby
 675              		.cfi_endproc
 676              	.LFE20:
 677              		.size	main, .-main
 678              		.section	.rodata
 679              		.align	2
 680              	.LC11:
 681 0074 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 681      3A7B226D 
 681      794E616D 
 681      65223A22 
 681      4E75636C 
 682              		.align	2
 683              	.LC13:
 684 008c 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 684      54656D70 
 684      65726174 
 684      75726522 
 684      3A256C75 
 685 00a5 000000   		.align	2
 686              	.LC15:
 687 00a8 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 687      48756D69 
 687      64697479 
ARM GAS  /tmp/cc2DuVcX.s 			page 38


 687      223A256C 
 687      752E256C 
 688 00be 0000     		.align	2
 689              	.LC17:
 690 00c0 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 690      50726573 
 690      73757265 
 690      223A256C 
 690      752E256C 
 691 00d6 0000     		.align	2
 692              	.LC19:
 693 00d8 7D7D00   		.ascii	"}}\000"
 694              		.section	.text.prepare_json_pkt,"ax",%progbits
 695              		.align	2
 696              		.global	prepare_json_pkt
 697              		.code	16
 698              		.thumb_func
 699              		.type	prepare_json_pkt, %function
 700              	prepare_json_pkt:
 701              	.LFB21:
 424:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 425:src/main.c    **** 
 426:src/main.c    **** 	while (1)
 427:src/main.c    **** 	{
 428:src/main.c    **** 		switch (main_state)
 429:src/main.c    **** 		{
 430:src/main.c    **** 			case MAIN_INIT:
 431:src/main.c    **** 				RelayOff();
 432:src/main.c    **** 				LED_OFF;
 433:src/main.c    **** 				FillPhotoBuffer();
 434:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 435:src/main.c    **** 				FillTempBuffer();
 436:src/main.c    **** #endif
 437:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 438:src/main.c    **** 				Update_TIM3_CH1 (0);
 439:src/main.c    **** #endif
 440:src/main.c    **** 				main_state = LAMP_OFF;
 441:src/main.c    **** 				break;
 442:src/main.c    **** 
 443:src/main.c    **** 			case LAMP_OFF:
 444:src/main.c    **** 				if (!tt_relay_on_off)
 445:src/main.c    **** 				{
 446:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 447:src/main.c    **** 					{
 448:src/main.c    **** 						main_state = LAMP_ON;
 449:src/main.c    **** 						tt_relay_on_off = 10000;
 450:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 451:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 452:src/main.c    **** 	#endif
 453:src/main.c    **** 
 454:src/main.c    **** 						RelayOn();
 455:src/main.c    **** 						LED_ON;
 456:src/main.c    **** 	#ifdef WITH_HYST
 457:src/main.c    **** 						hours = 0;
 458:src/main.c    **** 	#endif
 459:src/main.c    **** 					}
 460:src/main.c    **** 				}
ARM GAS  /tmp/cc2DuVcX.s 			page 39


 461:src/main.c    **** 				break;
 462:src/main.c    **** 
 463:src/main.c    **** 			case LAMP_ON:
 464:src/main.c    **** 				if (!tt_relay_on_off)
 465:src/main.c    **** 				{
 466:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 467:src/main.c    **** 					hyst = GetHysteresis (hours);
 468:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 469:src/main.c    **** 	#else
 470:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 471:src/main.c    **** 	#endif
 472:src/main.c    **** 					{
 473:src/main.c    **** 						main_state = LAMP_OFF;
 474:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 475:src/main.c    **** 						Update_TIM3_CH1 (0);
 476:src/main.c    **** 	#endif
 477:src/main.c    **** 						tt_relay_on_off = 10000;
 478:src/main.c    **** 						RelayOff();
 479:src/main.c    **** 						LED_OFF;
 480:src/main.c    **** 					}
 481:src/main.c    **** 				}
 482:src/main.c    **** 
 483:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 484:src/main.c    **** 				if (main_state == LAMP_ON)
 485:src/main.c    **** 				{
 486:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
 487:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
 488:src/main.c    **** 				}
 489:src/main.c    **** 	#endif
 490:src/main.c    **** 				break;
 491:src/main.c    **** 
 492:src/main.c    **** 			default:
 493:src/main.c    **** 				main_state = MAIN_INIT;
 494:src/main.c    **** 				break;
 495:src/main.c    **** 		}
 496:src/main.c    **** 
 497:src/main.c    **** 		if (!timer_standby)
 498:src/main.c    **** 		{
 499:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 500:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
 501:src/main.c    **** #else
 502:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
 503:src/main.c    **** #endif
 504:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 505:src/main.c    **** 			Usart2Send(s_lcd);
 506:src/main.c    **** 			timer_standby = 2000;
 507:src/main.c    **** 		}
 508:src/main.c    **** 
 509:src/main.c    **** 		//Cosas que no dependen del estado del programa
 510:src/main.c    **** 		UpdateRelay ();
 511:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 512:src/main.c    **** 		UpdateTemp();
 513:src/main.c    **** #endif
 514:src/main.c    **** 		UpdatePhotoTransistor();
 515:src/main.c    **** 	}	//end while 1
 516:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
 517:src/main.c    **** #endif	//USE_REDONDA_BASIC
ARM GAS  /tmp/cc2DuVcX.s 			page 40


 518:src/main.c    **** 
 519:src/main.c    **** 
 520:src/main.c    **** #ifdef USE_MQTT_LIB
 521:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 522:src/main.c    **** 	int rc = 0;
 523:src/main.c    **** 	char buf[200];
 524:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
 525:src/main.c    **** 	char* payload = "mypayload";
 526:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
 527:src/main.c    **** 	int len = 0;
 528:src/main.c    **** 
 529:src/main.c    **** 	data.clientID.cstring = "me";
 530:src/main.c    **** 	data.keepAliveInterval = 20;
 531:src/main.c    **** 	data.cleansession = 1;
 532:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
 533:src/main.c    **** 
 534:src/main.c    **** 	topicString.cstring = "mytopic";
 535:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
 536:src/main.c    **** 
 537:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
 538:src/main.c    **** 	//falta abrir puerto
 539:src/main.c    **** 	//falta enviar al socket
 540:src/main.c    **** 	//falta cerrar socket
 541:src/main.c    **** #endif
 542:src/main.c    **** 
 543:src/main.c    **** //	//---------- Prueba USART2 --------//
 544:src/main.c    **** //
 545:src/main.c    **** //    while( 1 )
 546:src/main.c    **** //    {
 547:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 548:src/main.c    **** //        Wait_ms(3000);
 549:src/main.c    **** //    }
 550:src/main.c    **** //
 551:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
 552:src/main.c    **** 
 553:src/main.c    **** 	//---------- Prueba con GPS --------//
 554:src/main.c    **** #ifdef USE_GPS
 555:src/main.c    **** 	Usart2SendSingle('M');
 556:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 557:src/main.c    **** 	Wait_ms(1000);
 558:src/main.c    **** 
 559:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
 560:src/main.c    **** 
 561:src/main.c    **** 	//mando reset al gps
 562:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
 563:src/main.c    **** 	GPSStartResetSM ();
 564:src/main.c    **** 	while (GPSStart() != RESP_OK);
 565:src/main.c    **** 
 566:src/main.c    **** 	//mando conf al gps
 567:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
 568:src/main.c    **** 	GPSConfigResetSM ();
 569:src/main.c    **** 	while (GPSConfig() != RESP_OK);
 570:src/main.c    **** 
 571:src/main.c    **** //	//mando reset factory al gps
 572:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
 573:src/main.c    **** //	GPSResetFactoryResetSM ();
 574:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
ARM GAS  /tmp/cc2DuVcX.s 			page 41


 575:src/main.c    **** 
 576:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
 577:src/main.c    **** //	timer_standby = 60000;
 578:src/main.c    **** //	while( timer_standby )
 579:src/main.c    **** 	while( 1 )
 580:src/main.c    **** 	{
 581:src/main.c    **** 		if (gps_pckt_ready)
 582:src/main.c    **** 		{
 583:src/main.c    **** 			gps_pckt_ready = 0;
 584:src/main.c    **** 			//Usart2SendSingle('P');
 585:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
 586:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
 587:src/main.c    **** 		}
 588:src/main.c    **** 
 589:src/main.c    **** 		GPSProcess();
 590:src/main.c    **** 	}
 591:src/main.c    **** #endif
 592:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
 593:src/main.c    **** 
 594:src/main.c    **** 	//---------- Prueba con GSM --------//
 595:src/main.c    **** #ifdef USE_GSM
 596:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
 597:src/main.c    **** 
 598:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 599:src/main.c    **** 
 600:src/main.c    **** 
 601:src/main.c    **** 	//Pruebo USART1
 602:src/main.c    **** //	while (1)
 603:src/main.c    **** //	{
 604:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
 605:src/main.c    **** //			Wait_ms(50);
 606:src/main.c    **** //	}
 607:src/main.c    **** 
 608:src/main.c    **** 
 609:src/main.c    **** 	//mando start al gsm
 610:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 611:src/main.c    **** 	//GPSStartResetSM ();
 612:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 613:src/main.c    **** 	while (timer_standby)
 614:src/main.c    **** 	{
 615:src/main.c    **** 		i = GSM_Start();
 616:src/main.c    **** 		if (i == 2)
 617:src/main.c    **** 		{
 618:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 619:src/main.c    **** 			timer_standby = 0;
 620:src/main.c    **** 		}
 621:src/main.c    **** 
 622:src/main.c    **** 		if (i == 4)
 623:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 624:src/main.c    **** 	}
 625:src/main.c    **** 
 626:src/main.c    **** 	//mando conf al gsm
 627:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
 628:src/main.c    **** 	//GPSConfigResetSM ();
 629:src/main.c    **** 
 630:src/main.c    **** 	i = 0;
 631:src/main.c    **** 	while (i == 0)
ARM GAS  /tmp/cc2DuVcX.s 			page 42


 632:src/main.c    **** 	{
 633:src/main.c    **** 		ii = GSM_Config(1000);
 634:src/main.c    **** 
 635:src/main.c    **** 		if (ii == 2)
 636:src/main.c    **** 			i = 0;
 637:src/main.c    **** 		else if (ii > 2)
 638:src/main.c    **** 		{
 639:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
 640:src/main.c    **** 			while (1);
 641:src/main.c    **** 		}
 642:src/main.c    **** 
 643:src/main.c    **** 		GSMProcess();
 644:src/main.c    **** 		GSMReceive ();
 645:src/main.c    **** 
 646:src/main.c    **** 		if (gsm_pckt_ready)
 647:src/main.c    **** 		{
 648:src/main.c    **** 			gsm_pckt_ready = 0;
 649:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 650:src/main.c    **** 		}
 651:src/main.c    **** 
 652:src/main.c    **** 		if (LIGHT)
 653:src/main.c    **** 			LED_ON;
 654:src/main.c    **** 		else
 655:src/main.c    **** 			LED_OFF;
 656:src/main.c    **** 	}
 657:src/main.c    **** 
 658:src/main.c    **** 
 659:src/main.c    **** 	while( 1 )
 660:src/main.c    **** 	{
 661:src/main.c    **** 		if (gsm_pckt_ready)
 662:src/main.c    **** 		{
 663:src/main.c    **** 			gsm_pckt_ready = 0;
 664:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 665:src/main.c    **** 		}
 666:src/main.c    **** 
 667:src/main.c    **** 		GSMProcess();
 668:src/main.c    **** 
 669:src/main.c    **** 		if (LIGHT)
 670:src/main.c    **** 			LED_ON;
 671:src/main.c    **** 
 672:src/main.c    **** 	}
 673:src/main.c    **** #endif
 674:src/main.c    **** 
 675:src/main.c    **** 	//---------- Pruebas con GSM GATEWAY --------//
 676:src/main.c    **** #ifdef USE_GSM_GATEWAY
 677:src/main.c    **** 	LED_OFF;
 678:src/main.c    **** 	for (i = 0; i < 6; i++)
 679:src/main.c    **** 	{
 680:src/main.c    **** 		if (LED)
 681:src/main.c    **** 			LED_OFF;
 682:src/main.c    **** 		else
 683:src/main.c    **** 			LED_ON;
 684:src/main.c    **** 
 685:src/main.c    **** 		Wait_ms (300);
 686:src/main.c    **** 	}
 687:src/main.c    **** 	Wait_ms (3000);
 688:src/main.c    **** 
ARM GAS  /tmp/cc2DuVcX.s 			page 43


 689:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 690:src/main.c    **** 
 691:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 692:src/main.c    **** 
 693:src/main.c    **** 
 694:src/main.c    **** 	//mando start al gsm
 695:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 696:src/main.c    **** 	//GPSStartResetSM ();
 697:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 698:src/main.c    **** 	while (timer_standby)
 699:src/main.c    **** 	{
 700:src/main.c    **** 		i = GSM_Start();
 701:src/main.c    **** 		if (i == 2)
 702:src/main.c    **** 		{
 703:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 704:src/main.c    **** 			timer_standby = 0;
 705:src/main.c    **** 		}
 706:src/main.c    **** 		else
 707:src/main.c    **** 
 708:src/main.c    **** 		if (i == 4)
 709:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 710:src/main.c    **** 	}
 711:src/main.c    **** 
 712:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 713:src/main.c    **** 
 714:src/main.c    **** 	while (1)
 715:src/main.c    **** 	{
 716:src/main.c    **** 		GSMProcess();
 717:src/main.c    **** 
 718:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 719:src/main.c    **** 		{
 720:src/main.c    **** 			usart2_pckt_ready = 0;
 721:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 722:src/main.c    **** 		}
 723:src/main.c    **** 
 724:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 725:src/main.c    **** 		{
 726:src/main.c    **** 			gsm_pckt_ready = 0;
 727:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 728:src/main.c    **** 		}
 729:src/main.c    **** 
 730:src/main.c    **** 		if (LIGHT)
 731:src/main.c    **** 			LED_ON;
 732:src/main.c    **** 		else
 733:src/main.c    **** 			LED_OFF;
 734:src/main.c    **** 	}
 735:src/main.c    **** #endif
 736:src/main.c    **** 
 737:src/main.c    **** 	//---------- Fin Prueba con GSM GATEWAY --------//
 738:src/main.c    **** 
 739:src/main.c    **** 
 740:src/main.c    **** 
 741:src/main.c    **** 	//---------- Prueba temp --------//
 742:src/main.c    **** 	/*
 743:src/main.c    **** 	while (1)
 744:src/main.c    **** 	{
 745:src/main.c    **** 		local_meas = GetTemp();
ARM GAS  /tmp/cc2DuVcX.s 			page 44


 746:src/main.c    **** 		if (local_meas != local_meas_last)
 747:src/main.c    **** 		{
 748:src/main.c    **** 			LED_ON;
 749:src/main.c    **** 			local_meas_last = local_meas;
 750:src/main.c    **** 			LCD_2DO_RENGLON;
 751:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
 752:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
 753:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
 754:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
 755:src/main.c    **** 			LCDTransmitStr(s_lcd);
 756:src/main.c    **** 			LED_OFF;
 757:src/main.c    **** 		}
 758:src/main.c    **** 
 759:src/main.c    **** 		UpdateTemp();
 760:src/main.c    **** 	}
 761:src/main.c    **** 	*/
 762:src/main.c    **** 	//---------- Fin prueba temp --------//
 763:src/main.c    **** 
 764:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
 765:src/main.c    **** 	/*
 766:src/main.c    **** 	local_meas = 0;
 767:src/main.c    **** 	while (1)
 768:src/main.c    **** 	{
 769:src/main.c    **** 		LCD_2DO_RENGLON;
 770:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
 771:src/main.c    **** 		fcalc = local_meas;
 772:src/main.c    **** 		fcalc = fcalc * K_1TO10;
 773:src/main.c    **** 		one_int = (short) fcalc;
 774:src/main.c    **** 		fcalc = fcalc - one_int;
 775:src/main.c    **** 		fcalc = fcalc * 10;
 776:src/main.c    **** 		one_dec = (short) fcalc;
 777:src/main.c    **** 
 778:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
 779:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
 780:src/main.c    **** 		LCDTransmitStr(s_lcd);
 781:src/main.c    **** 
 782:src/main.c    **** 		Wait_ms (1000);
 783:src/main.c    **** 		if (local_meas <= 255)
 784:src/main.c    **** 			local_meas = 0;
 785:src/main.c    **** 		else
 786:src/main.c    **** 			local_meas++;
 787:src/main.c    **** 	}
 788:src/main.c    **** 	*/
 789:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
 790:src/main.c    **** 
 791:src/main.c    ****     //---------- Programa de Certificacion S.E. --------//
 792:src/main.c    **** #ifdef USE_CE_PROGRAM
 793:src/main.c    **** 	while (1)
 794:src/main.c    **** 	{
 795:src/main.c    **** 		resp = FuncStandAloneCert();
 796:src/main.c    **** 
 797:src/main.c    **** 
 798:src/main.c    **** 		UpdateSwitches();
 799:src/main.c    **** 		UpdateACSwitch();
 800:src/main.c    **** 		UpdatePackets();
 801:src/main.c    **** 		UpdateTemp();
 802:src/main.c    **** 		UpdateIGrid();
ARM GAS  /tmp/cc2DuVcX.s 			page 45


 803:src/main.c    **** 		UpdateVGrid();
 804:src/main.c    **** 
 805:src/main.c    **** 	}	//termina while(1)
 806:src/main.c    **** #endif
 807:src/main.c    **** 	//---------- Fin Programa de Certificacion S.E. --------//
 808:src/main.c    **** 
 809:src/main.c    ****     //---------- Programa de Produccion --------//
 810:src/main.c    **** #ifdef USE_PROD_PROGRAM
 811:src/main.c    **** 	//--- PRUEBA FUNCION MAIN_MENU
 812:src/main.c    **** 	//leo la memoria, si tengo configuracion de modo
 813:src/main.c    **** 	//entro directo, sino a Main Menu
 814:src/main.c    **** 	if (saved_mode == 0xFF)	//memoria borrada
 815:src/main.c    **** 		main_state = MAIN_INIT;
 816:src/main.c    **** 	else
 817:src/main.c    **** 		jump_the_menu = RESP_YES;
 818:src/main.c    **** 
 819:src/main.c    **** #ifdef VER_1_2
 820:src/main.c    **** 	Update_TIM3_CH2 (255);
 821:src/main.c    **** #endif
 822:src/main.c    **** 	//Wait_ms(2000);
 823:src/main.c    **** 	while (1)
 824:src/main.c    **** 	{
 825:src/main.c    **** 		switch (main_state)
 826:src/main.c    **** 		{
 827:src/main.c    **** 			case MAIN_INIT:
 828:src/main.c    **** 				resp = FuncMainMenu();
 829:src/main.c    **** 
 830:src/main.c    **** 				if (resp == MAINMENU_SHOW_STANDALONE_SELECTED)	//TODO deberia forzar init
 831:src/main.c    **** 					main_state = MAIN_STAND_ALONE;
 832:src/main.c    **** 
 833:src/main.c    **** 				if (resp == MAINMENU_SHOW_GROUPED_SELECTED)
 834:src/main.c    **** 					main_state = MAIN_GROUPED;
 835:src/main.c    **** 
 836:src/main.c    **** 				if (resp == MAINMENU_SHOW_NETWORK_SELECTED)
 837:src/main.c    **** 					main_state = MAIN_NETWORKED;
 838:src/main.c    **** 
 839:src/main.c    **** 				jump_the_menu = RESP_NO;
 840:src/main.c    **** 				break;
 841:src/main.c    **** 
 842:src/main.c    **** 			case MAIN_STAND_ALONE:
 843:src/main.c    **** 				resp = FuncStandAlone();
 844:src/main.c    **** 
 845:src/main.c    **** 				if (resp == RESP_CHANGE_ALL_UP)
 846:src/main.c    **** 				{
 847:src/main.c    **** 					FuncStandAloneReset();
 848:src/main.c    **** 					main_state = MAIN_INIT;
 849:src/main.c    **** 				}
 850:src/main.c    **** 
 851:src/main.c    **** 				break;
 852:src/main.c    **** 
 853:src/main.c    **** 			case MAIN_GROUPED:
 854:src/main.c    **** 				resp = FuncGrouped();
 855:src/main.c    **** 
 856:src/main.c    **** 				if (resp == RESP_CHANGE_ALL_UP)
 857:src/main.c    **** 				{
 858:src/main.c    **** 					FuncGroupedReset();
 859:src/main.c    **** 					main_state = MAIN_INIT;
ARM GAS  /tmp/cc2DuVcX.s 			page 46


 860:src/main.c    **** 				}
 861:src/main.c    **** 
 862:src/main.c    **** 				break;
 863:src/main.c    **** 
 864:src/main.c    **** 			case MAIN_NETWORKED:
 865:src/main.c    **** 				resp = FuncNetworked(jump_the_menu);
 866:src/main.c    **** 				jump_the_menu = RESP_NO_CHANGE;
 867:src/main.c    **** 				main_state++;
 868:src/main.c    **** 				break;
 869:src/main.c    **** 
 870:src/main.c    **** 			case MAIN_NETWORKED_1:
 871:src/main.c    **** 				resp = FuncNetworked(jump_the_menu);
 872:src/main.c    **** 
 873:src/main.c    **** 				if (resp == RESP_CHANGE_ALL_UP)
 874:src/main.c    **** 					main_state = MAIN_INIT;
 875:src/main.c    **** 
 876:src/main.c    **** 				break;
 877:src/main.c    **** 
 878:src/main.c    **** 			default:
 879:src/main.c    **** 				main_state = MAIN_INIT;
 880:src/main.c    **** 				break;
 881:src/main.c    **** 
 882:src/main.c    **** 		}
 883:src/main.c    **** 
 884:src/main.c    **** 		UpdateSwitches();
 885:src/main.c    **** 		UpdateACSwitch();
 886:src/main.c    **** 		UpdatePackets();
 887:src/main.c    **** 	}
 888:src/main.c    **** 
 889:src/main.c    **** 	//--- FIN PRUEBA FUNCION MAIN_MENU
 890:src/main.c    **** #endif
 891:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
 892:src/main.c    **** 
 893:src/main.c    **** 	return 0;
 894:src/main.c    **** }
 895:src/main.c    **** 
 896:src/main.c    **** //--- End of Main ---//
 897:src/main.c    **** 
 898:src/main.c    **** 
 899:src/main.c    **** 
 900:src/main.c    **** 
 901:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
 902:src/main.c    **** {
 702              		.loc 2 902 0
 703              		.cfi_startproc
 704 0000 00B5     		push	{lr}	@
 705              	.LCFI6:
 706              		.cfi_def_cfa_offset 4
 707              		.cfi_offset 14, -4
 708 0002 97B0     		sub	sp, sp, #92	@,,
 709              	.LCFI7:
 710              		.cfi_def_cfa_offset 96
 711 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
 903:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 712              		.loc 2 903 0
 713 0006 0123     		movs	r3, #1	@ tmp112,
 714 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
ARM GAS  /tmp/cc2DuVcX.s 			page 47


 715 000a 0223     		movs	r3, #2	@ tmp113,
 716 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 717 000e 0323     		movs	r3, #3	@ tmp114,
 718 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 719 0012 0423     		movs	r3, #4	@ tmp115,
 720 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 721 0016 0523     		movs	r3, #5	@ tmp116,
 722 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 723 001a 0623     		movs	r3, #6	@ tmp117,
 724 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
 904:src/main.c    ****       char tempbuff[40];
 905:src/main.c    ****       volatile float HUMIDITY_Value;
 906:src/main.c    ****       volatile float TEMPERATURE_Value;
 907:src/main.c    ****       volatile float PRESSURE_Value;
 908:src/main.c    **** 
 909:src/main.c    **** 
 910:src/main.c    **** 
 911:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 725              		.loc 2 911 0
 726 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 727 0020 1E4B     		ldr	r3, .L28	@ tmp119,
 728 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 729 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 730 0026 1823     		movs	r3, #24	@ tmp122,
 731 0028 1A00     		movs	r2, r3	@, tmp122
 732 002a FFF7FEFF 		bl	memcpy	@
 912:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
 913:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
 914:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 733              		.loc 2 914 0
 734 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 735 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 736 0032 1B49     		ldr	r1, .L28+4	@ tmp127,
 737 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 738 0036 FFF7FEFF 		bl	sprintf	@
 915:src/main.c    ****       strcat((char *)buffer,tempbuff);
 739              		.loc 2 915 0
 740 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 741 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 742 003e 1100     		movs	r1, r2	@, tmp129
 743 0040 1800     		movs	r0, r3	@, tmp130
 744 0042 FFF7FEFF 		bl	strcat	@
 916:src/main.c    **** 
 917:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
 918:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
 919:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 745              		.loc 2 919 0
 746 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 747 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 748 004a 1649     		ldr	r1, .L28+8	@ tmp133,
 749 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 750 004e FFF7FEFF 		bl	sprintf	@
 920:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 751              		.loc 2 920 0
 752 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 753 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 754 0056 1100     		movs	r1, r2	@, tmp135
ARM GAS  /tmp/cc2DuVcX.s 			page 48


 755 0058 1800     		movs	r0, r3	@, tmp136
 756 005a FFF7FEFF 		bl	strcat	@
 921:src/main.c    **** 
 922:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
 923:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
 924:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 757              		.loc 2 924 0
 758 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 759 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 760 0062 1149     		ldr	r1, .L28+12	@ tmp139,
 761 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 762 0066 FFF7FEFF 		bl	sprintf	@
 925:src/main.c    ****       strcat((char *)buffer,tempbuff);
 763              		.loc 2 925 0
 764 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 765 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 766 006e 1100     		movs	r1, r2	@, tmp141
 767 0070 1800     		movs	r0, r3	@, tmp142
 768 0072 FFF7FEFF 		bl	strcat	@
 926:src/main.c    **** 
 927:src/main.c    **** 
 928:src/main.c    ****       strcat((char *)buffer,"}}");
 769              		.loc 2 928 0
 770 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 771 0078 1800     		movs	r0, r3	@, tmp143
 772 007a FFF7FEFF 		bl	strlen	@
 773 007e 0300     		movs	r3, r0	@ tmp144,
 774 0080 1A00     		movs	r2, r3	@ D.6895, tmp145
 775 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 776 0084 9A18     		adds	r2, r3, r2	@ D.6896, tmp146, D.6895
 777 0086 094B     		ldr	r3, .L28+16	@ tmp147,
 778 0088 1000     		movs	r0, r2	@ tmp148, D.6896
 779 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 780 008c 0323     		movs	r3, #3	@ tmp150,
 781 008e 1A00     		movs	r2, r3	@, tmp150
 782 0090 FFF7FEFF 		bl	memcpy	@
 929:src/main.c    **** 
 930:src/main.c    ****       return;
 783              		.loc 2 930 0
 784 0094 C046     		nop
 931:src/main.c    **** }
 785              		.loc 2 931 0
 786 0096 17B0     		add	sp, sp, #92	@,,
 787              		@ sp needed	@
 788 0098 00BD     		pop	{pc}
 789              	.L29:
 790 009a C046     		.align	2
 791              	.L28:
 792 009c 74000000 		.word	.LC11
 793 00a0 8C000000 		.word	.LC13
 794 00a4 A8000000 		.word	.LC15
 795 00a8 C0000000 		.word	.LC17
 796 00ac D8000000 		.word	.LC19
 797              		.cfi_endproc
 798              	.LFE21:
 799              		.size	prepare_json_pkt, .-prepare_json_pkt
 800              		.section	.text.TimingDelay_Decrement,"ax",%progbits
ARM GAS  /tmp/cc2DuVcX.s 			page 49


 801              		.align	2
 802              		.global	TimingDelay_Decrement
 803              		.code	16
 804              		.thumb_func
 805              		.type	TimingDelay_Decrement, %function
 806              	TimingDelay_Decrement:
 807              	.LFB22:
 932:src/main.c    **** 
 933:src/main.c    **** //void EXTI4_15_IRQHandler(void)
 934:src/main.c    **** //{
 935:src/main.c    **** //	unsigned short aux;
 936:src/main.c    **** //
 937:src/main.c    **** ////--- SOLO PRUEBA DE INTERRUPCIONES ---//
 938:src/main.c    **** ////	if (DMX_INPUT)
 939:src/main.c    **** ////		LED_ON;
 940:src/main.c    **** ////	else
 941:src/main.c    **** ////		LED_OFF;
 942:src/main.c    **** ////
 943:src/main.c    **** ////	EXTI->PR |= 0x0100;
 944:src/main.c    **** //
 945:src/main.c    **** //	if(EXTI->PR & 0x0100)	//Line8
 946:src/main.c    **** //	{
 947:src/main.c    **** //
 948:src/main.c    **** //		//si no esta con el USART detecta el flanco	PONER TIMEOUT ACA?????
 949:src/main.c    **** //		if ((dmx_receive_flag == 0) || (dmx_timeout_timer == 0))
 950:src/main.c    **** //		//if (dmx_receive_flag == 0)
 951:src/main.c    **** //		{
 952:src/main.c    **** //			switch (signal_state)
 953:src/main.c    **** //			{
 954:src/main.c    **** //				case IDLE:
 955:src/main.c    **** //					if (!(DMX_INPUT))
 956:src/main.c    **** //					{
 957:src/main.c    **** //						//Activo timer en Falling.
 958:src/main.c    **** //						TIM14->CNT = 0;
 959:src/main.c    **** //						TIM14->CR1 |= 0x0001;
 960:src/main.c    **** //						signal_state++;
 961:src/main.c    **** //					}
 962:src/main.c    **** //					break;
 963:src/main.c    **** //
 964:src/main.c    **** //				case LOOK_FOR_BREAK:
 965:src/main.c    **** //					if (DMX_INPUT)
 966:src/main.c    **** //					{
 967:src/main.c    **** //						//Desactivo timer en Rising.
 968:src/main.c    **** //						aux = TIM14->CNT;
 969:src/main.c    **** //
 970:src/main.c    **** //						//reviso BREAK
 971:src/main.c    **** //						//if (((tim_counter_65ms) || (aux > 88)) && (tim_counter_65ms <= 20))
 972:src/main.c    **** //						if ((aux > 87) && (aux < 210))	//Consola STARLET 6
 973:src/main.c    **** //						//if ((aux > 87) && (aux < 2000))		//Consola marca CODE tiene break 1.88ms
 974:src/main.c    **** //						{
 975:src/main.c    **** //							LED_ON;
 976:src/main.c    **** //							//Activo timer para ver MARK.
 977:src/main.c    **** //							//TIM2->CNT = 0;
 978:src/main.c    **** //							//TIM2->CR1 |= 0x0001;
 979:src/main.c    **** //
 980:src/main.c    **** //							signal_state++;
 981:src/main.c    **** //							//tengo el break, activo el puerto serie
ARM GAS  /tmp/cc2DuVcX.s 			page 50


 982:src/main.c    **** //							DMX_channel_received = 0;
 983:src/main.c    **** //							//dmx_receive_flag = 1;
 984:src/main.c    **** //
 985:src/main.c    **** //							dmx_timeout_timer = DMX_TIMEOUT;		//activo el timer cuando prendo el puerto serie
 986:src/main.c    **** //							//USARTx_RX_ENA;
 987:src/main.c    **** //						}
 988:src/main.c    **** //						else	//falso disparo
 989:src/main.c    **** //							signal_state = IDLE;
 990:src/main.c    **** //					}
 991:src/main.c    **** //					else	//falso disparo
 992:src/main.c    **** //						signal_state = IDLE;
 993:src/main.c    **** //
 994:src/main.c    **** //					TIM14->CR1 &= 0xFFFE;
 995:src/main.c    **** //					break;
 996:src/main.c    **** //
 997:src/main.c    **** //				case LOOK_FOR_MARK:
 998:src/main.c    **** //					if ((!(DMX_INPUT)) && (dmx_timeout_timer))	//termino Mark after break
 999:src/main.c    **** //					{
1000:src/main.c    **** //						//ya tenia el serie habilitado
1001:src/main.c    **** //						//if ((aux > 7) && (aux < 12))
1002:src/main.c    **** //						dmx_receive_flag = 1;
1003:src/main.c    **** //					}
1004:src/main.c    **** //					else	//falso disparo
1005:src/main.c    **** //					{
1006:src/main.c    **** //						//termine por timeout
1007:src/main.c    **** //						dmx_receive_flag = 0;
1008:src/main.c    **** //						//USARTx_RX_DISA;
1009:src/main.c    **** //					}
1010:src/main.c    **** //					signal_state = IDLE;
1011:src/main.c    **** //					LED_OFF;
1012:src/main.c    **** //					break;
1013:src/main.c    **** //
1014:src/main.c    **** //				default:
1015:src/main.c    **** //					signal_state = IDLE;
1016:src/main.c    **** //					break;
1017:src/main.c    **** //			}
1018:src/main.c    **** //		}
1019:src/main.c    **** //
1020:src/main.c    **** //		EXTI->PR |= 0x0100;
1021:src/main.c    **** //	}
1022:src/main.c    **** //}
1023:src/main.c    **** 
1024:src/main.c    **** void TimingDelay_Decrement(void)
1025:src/main.c    **** {
 808              		.loc 2 1025 0
 809              		.cfi_startproc
1026:src/main.c    **** 	if (wait_ms_var)
 810              		.loc 2 1026 0
 811 0000 3E4B     		ldr	r3, .L42	@ tmp139,
 812 0002 1B88     		ldrh	r3, [r3]	@ tmp140, wait_ms_var
 813 0004 9BB2     		uxth	r3, r3	@ D.6909, tmp140
 814 0006 002B     		cmp	r3, #0	@ D.6909,
 815 0008 06D0     		beq	.L31	@,
1027:src/main.c    **** 		wait_ms_var--;
 816              		.loc 2 1027 0
 817 000a 3C4B     		ldr	r3, .L42	@ tmp141,
 818 000c 1B88     		ldrh	r3, [r3]	@ tmp142, wait_ms_var
ARM GAS  /tmp/cc2DuVcX.s 			page 51


 819 000e 9BB2     		uxth	r3, r3	@ D.6909, tmp142
 820 0010 013B     		subs	r3, r3, #1	@ tmp143,
 821 0012 9AB2     		uxth	r2, r3	@ D.6909, tmp143
 822 0014 394B     		ldr	r3, .L42	@ tmp144,
 823 0016 1A80     		strh	r2, [r3]	@ tmp145, wait_ms_var
 824              	.L31:
1028:src/main.c    **** 
1029:src/main.c    **** //	if (display_timer)
1030:src/main.c    **** //		display_timer--;
1031:src/main.c    **** 
1032:src/main.c    **** 	if (timer_standby)
 825              		.loc 2 1032 0
 826 0018 394B     		ldr	r3, .L42+4	@ tmp146,
 827 001a 1B88     		ldrh	r3, [r3]	@ tmp147, timer_standby
 828 001c 9BB2     		uxth	r3, r3	@ D.6909, tmp147
 829 001e 002B     		cmp	r3, #0	@ D.6909,
 830 0020 06D0     		beq	.L32	@,
1033:src/main.c    **** 		timer_standby--;
 831              		.loc 2 1033 0
 832 0022 374B     		ldr	r3, .L42+4	@ tmp148,
 833 0024 1B88     		ldrh	r3, [r3]	@ tmp149, timer_standby
 834 0026 9BB2     		uxth	r3, r3	@ D.6909, tmp149
 835 0028 013B     		subs	r3, r3, #1	@ tmp150,
 836 002a 9AB2     		uxth	r2, r3	@ D.6909, tmp150
 837 002c 344B     		ldr	r3, .L42+4	@ tmp151,
 838 002e 1A80     		strh	r2, [r3]	@ tmp152, timer_standby
 839              	.L32:
1034:src/main.c    **** 
1035:src/main.c    **** 	if (acswitch_timer)
 840              		.loc 2 1035 0
 841 0030 344B     		ldr	r3, .L42+8	@ tmp153,
 842 0032 1B78     		ldrb	r3, [r3]	@ tmp154, acswitch_timer
 843 0034 DBB2     		uxtb	r3, r3	@ D.6910, tmp154
 844 0036 002B     		cmp	r3, #0	@ D.6910,
 845 0038 06D0     		beq	.L33	@,
1036:src/main.c    **** 		acswitch_timer--;
 846              		.loc 2 1036 0
 847 003a 324B     		ldr	r3, .L42+8	@ tmp155,
 848 003c 1B78     		ldrb	r3, [r3]	@ tmp156, acswitch_timer
 849 003e DBB2     		uxtb	r3, r3	@ D.6910, tmp156
 850 0040 013B     		subs	r3, r3, #1	@ tmp157,
 851 0042 DAB2     		uxtb	r2, r3	@ D.6910, tmp157
 852 0044 2F4B     		ldr	r3, .L42+8	@ tmp158,
 853 0046 1A70     		strb	r2, [r3]	@ tmp159, acswitch_timer
 854              	.L33:
1037:src/main.c    **** 
1038:src/main.c    **** 	if (tt_take_photo_sample)
 855              		.loc 2 1038 0
 856 0048 2F4B     		ldr	r3, .L42+12	@ tmp160,
 857 004a 1B88     		ldrh	r3, [r3]	@ tmp161, tt_take_photo_sample
 858 004c 9BB2     		uxth	r3, r3	@ D.6909, tmp161
 859 004e 002B     		cmp	r3, #0	@ D.6909,
 860 0050 06D0     		beq	.L34	@,
1039:src/main.c    **** 		tt_take_photo_sample--;
 861              		.loc 2 1039 0
 862 0052 2D4B     		ldr	r3, .L42+12	@ tmp162,
 863 0054 1B88     		ldrh	r3, [r3]	@ tmp163, tt_take_photo_sample
ARM GAS  /tmp/cc2DuVcX.s 			page 52


 864 0056 9BB2     		uxth	r3, r3	@ D.6909, tmp163
 865 0058 013B     		subs	r3, r3, #1	@ tmp164,
 866 005a 9AB2     		uxth	r2, r3	@ D.6909, tmp164
 867 005c 2A4B     		ldr	r3, .L42+12	@ tmp165,
 868 005e 1A80     		strh	r2, [r3]	@ tmp166, tt_take_photo_sample
 869              	.L34:
1040:src/main.c    **** 
1041:src/main.c    **** 	if (tt_relay_on_off)
 870              		.loc 2 1041 0
 871 0060 2A4B     		ldr	r3, .L42+16	@ tmp167,
 872 0062 1B88     		ldrh	r3, [r3]	@ tmp168, tt_relay_on_off
 873 0064 9BB2     		uxth	r3, r3	@ D.6909, tmp168
 874 0066 002B     		cmp	r3, #0	@ D.6909,
 875 0068 06D0     		beq	.L35	@,
1042:src/main.c    **** 		tt_relay_on_off--;
 876              		.loc 2 1042 0
 877 006a 284B     		ldr	r3, .L42+16	@ tmp169,
 878 006c 1B88     		ldrh	r3, [r3]	@ tmp170, tt_relay_on_off
 879 006e 9BB2     		uxth	r3, r3	@ D.6909, tmp170
 880 0070 013B     		subs	r3, r3, #1	@ tmp171,
 881 0072 9AB2     		uxth	r2, r3	@ D.6909, tmp171
 882 0074 254B     		ldr	r3, .L42+16	@ tmp172,
 883 0076 1A80     		strh	r2, [r3]	@ tmp173, tt_relay_on_off
 884              	.L35:
1043:src/main.c    **** 
1044:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1045:src/main.c    **** 	if (tt_take_temp_sample)
1046:src/main.c    **** 		tt_take_temp_sample--;
1047:src/main.c    **** #endif
1048:src/main.c    **** 
1049:src/main.c    **** 	if (take_temp_sample)
 885              		.loc 2 1049 0
 886 0078 254B     		ldr	r3, .L42+20	@ tmp174,
 887 007a 1B88     		ldrh	r3, [r3]	@ tmp175, take_temp_sample
 888 007c 9BB2     		uxth	r3, r3	@ D.6909, tmp175
 889 007e 002B     		cmp	r3, #0	@ D.6909,
 890 0080 06D0     		beq	.L36	@,
1050:src/main.c    **** 		take_temp_sample--;
 891              		.loc 2 1050 0
 892 0082 234B     		ldr	r3, .L42+20	@ tmp176,
 893 0084 1B88     		ldrh	r3, [r3]	@ tmp177, take_temp_sample
 894 0086 9BB2     		uxth	r3, r3	@ D.6909, tmp177
 895 0088 013B     		subs	r3, r3, #1	@ tmp178,
 896 008a 9AB2     		uxth	r2, r3	@ D.6909, tmp178
 897 008c 204B     		ldr	r3, .L42+20	@ tmp179,
 898 008e 1A80     		strh	r2, [r3]	@ tmp180, take_temp_sample
 899              	.L36:
1051:src/main.c    **** 
1052:src/main.c    **** 	if (filter_timer)
 900              		.loc 2 1052 0
 901 0090 204B     		ldr	r3, .L42+24	@ tmp181,
 902 0092 1B78     		ldrb	r3, [r3]	@ tmp182, filter_timer
 903 0094 DBB2     		uxtb	r3, r3	@ D.6910, tmp182
 904 0096 002B     		cmp	r3, #0	@ D.6910,
 905 0098 06D0     		beq	.L37	@,
1053:src/main.c    **** 		filter_timer--;
 906              		.loc 2 1053 0
ARM GAS  /tmp/cc2DuVcX.s 			page 53


 907 009a 1E4B     		ldr	r3, .L42+24	@ tmp183,
 908 009c 1B78     		ldrb	r3, [r3]	@ tmp184, filter_timer
 909 009e DBB2     		uxtb	r3, r3	@ D.6910, tmp184
 910 00a0 013B     		subs	r3, r3, #1	@ tmp185,
 911 00a2 DAB2     		uxtb	r2, r3	@ D.6910, tmp185
 912 00a4 1B4B     		ldr	r3, .L42+24	@ tmp186,
 913 00a6 1A70     		strb	r2, [r3]	@ tmp187, filter_timer
 914              	.L37:
1054:src/main.c    **** 
1055:src/main.c    **** 	//cuenta de a 1 minuto
1056:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 915              		.loc 2 1056 0
 916 00a8 1B4B     		ldr	r3, .L42+28	@ tmp188,
 917 00aa 1B88     		ldrh	r3, [r3]	@ tmp189, secs
 918 00ac 9BB2     		uxth	r3, r3	@ D.6909, tmp189
 919 00ae 1B4A     		ldr	r2, .L42+32	@ tmp190,
 920 00b0 9342     		cmp	r3, r2	@ D.6909, tmp190
 921 00b2 0AD9     		bls	.L38	@,
1057:src/main.c    **** 	{
1058:src/main.c    **** 		minutes++;
 922              		.loc 2 1058 0
 923 00b4 1A4B     		ldr	r3, .L42+36	@ tmp191,
 924 00b6 1B78     		ldrb	r3, [r3]	@ tmp192, minutes
 925 00b8 DBB2     		uxtb	r3, r3	@ D.6910, tmp192
 926 00ba 0133     		adds	r3, r3, #1	@ tmp193,
 927 00bc DAB2     		uxtb	r2, r3	@ D.6910, tmp193
 928 00be 184B     		ldr	r3, .L42+36	@ tmp194,
 929 00c0 1A70     		strb	r2, [r3]	@ tmp195, minutes
1059:src/main.c    **** 		secs = 0;
 930              		.loc 2 1059 0
 931 00c2 154B     		ldr	r3, .L42+28	@ tmp196,
 932 00c4 0022     		movs	r2, #0	@ tmp197,
 933 00c6 1A80     		strh	r2, [r3]	@ tmp198, secs
 934 00c8 06E0     		b	.L39	@
 935              	.L38:
1060:src/main.c    **** 	}
1061:src/main.c    **** 	else
1062:src/main.c    **** 		secs++;
 936              		.loc 2 1062 0
 937 00ca 134B     		ldr	r3, .L42+28	@ tmp199,
 938 00cc 1B88     		ldrh	r3, [r3]	@ tmp200, secs
 939 00ce 9BB2     		uxth	r3, r3	@ D.6909, tmp200
 940 00d0 0133     		adds	r3, r3, #1	@ tmp201,
 941 00d2 9AB2     		uxth	r2, r3	@ D.6909, tmp201
 942 00d4 104B     		ldr	r3, .L42+28	@ tmp202,
 943 00d6 1A80     		strh	r2, [r3]	@ tmp203, secs
 944              	.L39:
1063:src/main.c    **** 
1064:src/main.c    **** 	if (minutes > 60)
 945              		.loc 2 1064 0
 946 00d8 114B     		ldr	r3, .L42+36	@ tmp204,
 947 00da 1B78     		ldrb	r3, [r3]	@ tmp205, minutes
 948 00dc DBB2     		uxtb	r3, r3	@ D.6910, tmp205
 949 00de 3C2B     		cmp	r3, #60	@ D.6910,
 950 00e0 09D9     		bls	.L41	@,
1065:src/main.c    **** 	{
1066:src/main.c    **** 		hours++;
ARM GAS  /tmp/cc2DuVcX.s 			page 54


 951              		.loc 2 1066 0
 952 00e2 104B     		ldr	r3, .L42+40	@ tmp206,
 953 00e4 1B78     		ldrb	r3, [r3]	@ tmp207, hours
 954 00e6 DBB2     		uxtb	r3, r3	@ D.6910, tmp207
 955 00e8 0133     		adds	r3, r3, #1	@ tmp208,
 956 00ea DAB2     		uxtb	r2, r3	@ D.6910, tmp208
 957 00ec 0D4B     		ldr	r3, .L42+40	@ tmp209,
 958 00ee 1A70     		strb	r2, [r3]	@ tmp210, hours
1067:src/main.c    **** 		minutes = 0;
 959              		.loc 2 1067 0
 960 00f0 0B4B     		ldr	r3, .L42+36	@ tmp211,
 961 00f2 0022     		movs	r2, #0	@ tmp212,
 962 00f4 1A70     		strb	r2, [r3]	@ tmp213, minutes
 963              	.L41:
1068:src/main.c    **** 	}
1069:src/main.c    **** 
1070:src/main.c    **** 
1071:src/main.c    **** #ifdef USE_MQTT_LIB
1072:src/main.c    **** 	//timer del MQTT
1073:src/main.c    **** 	SysTickIntHandler();
1074:src/main.c    **** #endif
1075:src/main.c    **** 
1076:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1077:src/main.c    **** 	if (usart1_mini_timeout)
1078:src/main.c    **** 		usart1_mini_timeout--;
1079:src/main.c    **** 	if (usart2_mini_timeout)
1080:src/main.c    **** 		usart2_mini_timeout--;
1081:src/main.c    **** #endif
1082:src/main.c    **** #ifdef USE_GPS
1083:src/main.c    **** 	GPSTimeoutCounters ();
1084:src/main.c    **** #endif
1085:src/main.c    **** 
1086:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1087:src/main.c    **** 	GSMTimeoutCounters ();
1088:src/main.c    **** #endif
1089:src/main.c    **** }
 964              		.loc 2 1089 0
 965 00f6 C046     		nop
 966              		@ sp needed	@
 967 00f8 7047     		bx	lr
 968              	.L43:
 969 00fa C046     		.align	2
 970              	.L42:
 971 00fc 00000000 		.word	wait_ms_var
 972 0100 00000000 		.word	timer_standby
 973 0104 00000000 		.word	acswitch_timer
 974 0108 00000000 		.word	tt_take_photo_sample
 975 010c 00000000 		.word	tt_relay_on_off
 976 0110 00000000 		.word	take_temp_sample
 977 0114 00000000 		.word	filter_timer
 978 0118 00000000 		.word	secs
 979 011c 5FEA0000 		.word	59999
 980 0120 00000000 		.word	minutes
 981 0124 00000000 		.word	hours
 982              		.cfi_endproc
 983              	.LFE22:
 984              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
ARM GAS  /tmp/cc2DuVcX.s 			page 55


 985              		.text
 986              	.Letext0:
 987              		.file 3 "./cmsis_boot/stm32f0xx.h"
 988              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 989              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 990              		.file 6 "src/hard.h"
 991              		.file 7 "src/flash_program.h"
 992              		.file 8 "src/tcp_transceiver.h"
 993              		.section	.debug_info,"",%progbits
 994              	.Ldebug_info0:
 995 0000 EF0B0000 		.4byte	0xbef
 996 0004 0200     		.2byte	0x2
 997 0006 00000000 		.4byte	.Ldebug_abbrev0
 998 000a 04       		.byte	0x4
 999 000b 01       		.uleb128 0x1
 1000 000c DB070000 		.4byte	.LASF171
 1001 0010 0C       		.byte	0xc
 1002 0011 B2070000 		.4byte	.LASF172
 1003 0015 26060000 		.4byte	.LASF173
 1004 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1005 001d 00000000 		.4byte	0
 1006 0021 00000000 		.4byte	0
 1007 0025 00000000 		.4byte	.Ldebug_line0
 1008 0029 02       		.uleb128 0x2
 1009 002a A8040000 		.4byte	.LASF99
 1010 002e 01       		.byte	0x1
 1011 002f 06010000 		.4byte	0x106
 1012 0033 03       		.byte	0x3
 1013 0034 C7       		.byte	0xc7
 1014 0035 06010000 		.4byte	0x106
 1015 0039 03       		.uleb128 0x3
 1016 003a 2B050000 		.4byte	.LASF0
 1017 003e 72       		.sleb128 -14
 1018 003f 03       		.uleb128 0x3
 1019 0040 9C080000 		.4byte	.LASF1
 1020 0044 73       		.sleb128 -13
 1021 0045 03       		.uleb128 0x3
 1022 0046 C2000000 		.4byte	.LASF2
 1023 004a 7B       		.sleb128 -5
 1024 004b 03       		.uleb128 0x3
 1025 004c 90010000 		.4byte	.LASF3
 1026 0050 7E       		.sleb128 -2
 1027 0051 03       		.uleb128 0x3
 1028 0052 CD050000 		.4byte	.LASF4
 1029 0056 7F       		.sleb128 -1
 1030 0057 04       		.uleb128 0x4
 1031 0058 A2030000 		.4byte	.LASF5
 1032 005c 00       		.byte	0
 1033 005d 04       		.uleb128 0x4
 1034 005e 40040000 		.4byte	.LASF6
 1035 0062 01       		.byte	0x1
 1036 0063 04       		.uleb128 0x4
 1037 0064 D1040000 		.4byte	.LASF7
 1038 0068 02       		.byte	0x2
 1039 0069 04       		.uleb128 0x4
 1040 006a 29010000 		.4byte	.LASF8
 1041 006e 03       		.byte	0x3
ARM GAS  /tmp/cc2DuVcX.s 			page 56


 1042 006f 04       		.uleb128 0x4
 1043 0070 9C010000 		.4byte	.LASF9
 1044 0074 04       		.byte	0x4
 1045 0075 04       		.uleb128 0x4
 1046 0076 50010000 		.4byte	.LASF10
 1047 007a 05       		.byte	0x5
 1048 007b 04       		.uleb128 0x4
 1049 007c 9F000000 		.4byte	.LASF11
 1050 0080 06       		.byte	0x6
 1051 0081 04       		.uleb128 0x4
 1052 0082 75000000 		.4byte	.LASF12
 1053 0086 07       		.byte	0x7
 1054 0087 04       		.uleb128 0x4
 1055 0088 0B040000 		.4byte	.LASF13
 1056 008c 08       		.byte	0x8
 1057 008d 04       		.uleb128 0x4
 1058 008e 21030000 		.4byte	.LASF14
 1059 0092 09       		.byte	0x9
 1060 0093 04       		.uleb128 0x4
 1061 0094 9A060000 		.4byte	.LASF15
 1062 0098 0A       		.byte	0xa
 1063 0099 04       		.uleb128 0x4
 1064 009a 7C050000 		.4byte	.LASF16
 1065 009e 0B       		.byte	0xb
 1066 009f 04       		.uleb128 0x4
 1067 00a0 58040000 		.4byte	.LASF17
 1068 00a4 0C       		.byte	0xc
 1069 00a5 04       		.uleb128 0x4
 1070 00a6 1E040000 		.4byte	.LASF18
 1071 00aa 0D       		.byte	0xd
 1072 00ab 04       		.uleb128 0x4
 1073 00ac 48050000 		.4byte	.LASF19
 1074 00b0 0E       		.byte	0xe
 1075 00b1 04       		.uleb128 0x4
 1076 00b2 0D060000 		.4byte	.LASF20
 1077 00b6 0F       		.byte	0xf
 1078 00b7 04       		.uleb128 0x4
 1079 00b8 17030000 		.4byte	.LASF21
 1080 00bc 10       		.byte	0x10
 1081 00bd 04       		.uleb128 0x4
 1082 00be C9060000 		.4byte	.LASF22
 1083 00c2 11       		.byte	0x11
 1084 00c3 04       		.uleb128 0x4
 1085 00c4 8F060000 		.4byte	.LASF23
 1086 00c8 13       		.byte	0x13
 1087 00c9 04       		.uleb128 0x4
 1088 00ca 4C030000 		.4byte	.LASF24
 1089 00ce 14       		.byte	0x14
 1090 00cf 04       		.uleb128 0x4
 1091 00d0 FB000000 		.4byte	.LASF25
 1092 00d4 15       		.byte	0x15
 1093 00d5 04       		.uleb128 0x4
 1094 00d6 71050000 		.4byte	.LASF26
 1095 00da 16       		.byte	0x16
 1096 00db 04       		.uleb128 0x4
 1097 00dc 86010000 		.4byte	.LASF27
 1098 00e0 17       		.byte	0x17
ARM GAS  /tmp/cc2DuVcX.s 			page 57


 1099 00e1 04       		.uleb128 0x4
 1100 00e2 F1050000 		.4byte	.LASF28
 1101 00e6 18       		.byte	0x18
 1102 00e7 04       		.uleb128 0x4
 1103 00e8 D0010000 		.4byte	.LASF29
 1104 00ec 19       		.byte	0x19
 1105 00ed 04       		.uleb128 0x4
 1106 00ee 6D070000 		.4byte	.LASF30
 1107 00f2 1A       		.byte	0x1a
 1108 00f3 04       		.uleb128 0x4
 1109 00f4 1F050000 		.4byte	.LASF31
 1110 00f8 1B       		.byte	0x1b
 1111 00f9 04       		.uleb128 0x4
 1112 00fa 56020000 		.4byte	.LASF32
 1113 00fe 1C       		.byte	0x1c
 1114 00ff 04       		.uleb128 0x4
 1115 0100 DA050000 		.4byte	.LASF33
 1116 0104 1E       		.byte	0x1e
 1117 0105 00       		.byte	0
 1118 0106 05       		.uleb128 0x5
 1119 0107 01       		.byte	0x1
 1120 0108 06       		.byte	0x6
 1121 0109 A6070000 		.4byte	.LASF36
 1122 010d 06       		.uleb128 0x6
 1123 010e 40020000 		.4byte	.LASF34
 1124 0112 03       		.byte	0x3
 1125 0113 5F01     		.2byte	0x15f
 1126 0115 29000000 		.4byte	0x29
 1127 0119 07       		.uleb128 0x7
 1128 011a 97050000 		.4byte	.LASF35
 1129 011e 04       		.byte	0x4
 1130 011f 1D       		.byte	0x1d
 1131 0120 24010000 		.4byte	0x124
 1132 0124 05       		.uleb128 0x5
 1133 0125 01       		.byte	0x1
 1134 0126 08       		.byte	0x8
 1135 0127 D7060000 		.4byte	.LASF37
 1136 012b 05       		.uleb128 0x5
 1137 012c 02       		.byte	0x2
 1138 012d 05       		.byte	0x5
 1139 012e 0C050000 		.4byte	.LASF38
 1140 0132 07       		.uleb128 0x7
 1141 0133 15020000 		.4byte	.LASF39
 1142 0137 04       		.byte	0x4
 1143 0138 2B       		.byte	0x2b
 1144 0139 3D010000 		.4byte	0x13d
 1145 013d 05       		.uleb128 0x5
 1146 013e 02       		.byte	0x2
 1147 013f 07       		.byte	0x7
 1148 0140 C8070000 		.4byte	.LASF40
 1149 0144 07       		.uleb128 0x7
 1150 0145 17010000 		.4byte	.LASF41
 1151 0149 04       		.byte	0x4
 1152 014a 3F       		.byte	0x3f
 1153 014b 4F010000 		.4byte	0x14f
 1154 014f 05       		.uleb128 0x5
 1155 0150 04       		.byte	0x4
ARM GAS  /tmp/cc2DuVcX.s 			page 58


 1156 0151 05       		.byte	0x5
 1157 0152 16050000 		.4byte	.LASF42
 1158 0156 07       		.uleb128 0x7
 1159 0157 EE060000 		.4byte	.LASF43
 1160 015b 04       		.byte	0x4
 1161 015c 41       		.byte	0x41
 1162 015d 61010000 		.4byte	0x161
 1163 0161 05       		.uleb128 0x5
 1164 0162 04       		.byte	0x4
 1165 0163 07       		.byte	0x7
 1166 0164 FB050000 		.4byte	.LASF44
 1167 0168 05       		.uleb128 0x5
 1168 0169 08       		.byte	0x8
 1169 016a 05       		.byte	0x5
 1170 016b 94030000 		.4byte	.LASF45
 1171 016f 05       		.uleb128 0x5
 1172 0170 08       		.byte	0x8
 1173 0171 07       		.byte	0x7
 1174 0172 DA010000 		.4byte	.LASF46
 1175 0176 08       		.uleb128 0x8
 1176 0177 04       		.byte	0x4
 1177 0178 05       		.byte	0x5
 1178 0179 696E7400 		.ascii	"int\000"
 1179 017d 05       		.uleb128 0x5
 1180 017e 04       		.byte	0x4
 1181 017f 07       		.byte	0x7
 1182 0180 E9000000 		.4byte	.LASF47
 1183 0184 07       		.uleb128 0x7
 1184 0185 57030000 		.4byte	.LASF48
 1185 0189 05       		.byte	0x5
 1186 018a 14       		.byte	0x14
 1187 018b 19010000 		.4byte	0x119
 1188 018f 07       		.uleb128 0x7
 1189 0190 9F040000 		.4byte	.LASF49
 1190 0194 05       		.byte	0x5
 1191 0195 1A       		.byte	0x1a
 1192 0196 32010000 		.4byte	0x132
 1193 019a 07       		.uleb128 0x7
 1194 019b 6A060000 		.4byte	.LASF50
 1195 019f 05       		.byte	0x5
 1196 01a0 1F       		.byte	0x1f
 1197 01a1 44010000 		.4byte	0x144
 1198 01a5 07       		.uleb128 0x7
 1199 01a6 AE010000 		.4byte	.LASF51
 1200 01aa 05       		.byte	0x5
 1201 01ab 20       		.byte	0x20
 1202 01ac 56010000 		.4byte	0x156
 1203 01b0 09       		.uleb128 0x9
 1204 01b1 2003     		.2byte	0x320
 1205 01b3 01       		.byte	0x1
 1206 01b4 71       		.byte	0x71
 1207 01b5 4D020000 		.4byte	0x24d
 1208 01b9 0A       		.uleb128 0xa
 1209 01ba B7010000 		.4byte	.LASF52
 1210 01be 01       		.byte	0x1
 1211 01bf 73       		.byte	0x73
 1212 01c0 64020000 		.4byte	0x264
ARM GAS  /tmp/cc2DuVcX.s 			page 59


 1213 01c4 02       		.byte	0x2
 1214 01c5 23       		.byte	0x23
 1215 01c6 00       		.uleb128 0
 1216 01c7 0A       		.uleb128 0xa
 1217 01c8 DA040000 		.4byte	.LASF53
 1218 01cc 01       		.byte	0x1
 1219 01cd 74       		.byte	0x74
 1220 01ce 69020000 		.4byte	0x269
 1221 01d2 02       		.byte	0x2
 1222 01d3 23       		.byte	0x23
 1223 01d4 04       		.uleb128 0x4
 1224 01d5 0A       		.uleb128 0xa
 1225 01d6 5D070000 		.4byte	.LASF54
 1226 01da 01       		.byte	0x1
 1227 01db 75       		.byte	0x75
 1228 01dc 79020000 		.4byte	0x279
 1229 01e0 03       		.byte	0x3
 1230 01e1 23       		.byte	0x23
 1231 01e2 8001     		.uleb128 0x80
 1232 01e4 0A       		.uleb128 0xa
 1233 01e5 C7010000 		.4byte	.LASF55
 1234 01e9 01       		.byte	0x1
 1235 01ea 76       		.byte	0x76
 1236 01eb 69020000 		.4byte	0x269
 1237 01ef 03       		.byte	0x3
 1238 01f0 23       		.byte	0x23
 1239 01f1 8401     		.uleb128 0x84
 1240 01f3 0A       		.uleb128 0xa
 1241 01f4 AB080000 		.4byte	.LASF56
 1242 01f8 01       		.byte	0x1
 1243 01f9 77       		.byte	0x77
 1244 01fa 7E020000 		.4byte	0x27e
 1245 01fe 03       		.byte	0x3
 1246 01ff 23       		.byte	0x23
 1247 0200 8002     		.uleb128 0x100
 1248 0202 0A       		.uleb128 0xa
 1249 0203 EE040000 		.4byte	.LASF57
 1250 0207 01       		.byte	0x1
 1251 0208 78       		.byte	0x78
 1252 0209 69020000 		.4byte	0x269
 1253 020d 03       		.byte	0x3
 1254 020e 23       		.byte	0x23
 1255 020f 8402     		.uleb128 0x104
 1256 0211 0A       		.uleb128 0xa
 1257 0212 53040000 		.4byte	.LASF58
 1258 0216 01       		.byte	0x1
 1259 0217 79       		.byte	0x79
 1260 0218 83020000 		.4byte	0x283
 1261 021c 03       		.byte	0x3
 1262 021d 23       		.byte	0x23
 1263 021e 8003     		.uleb128 0x180
 1264 0220 0A       		.uleb128 0xa
 1265 0221 F8040000 		.4byte	.LASF59
 1266 0225 01       		.byte	0x1
 1267 0226 7A       		.byte	0x7a
 1268 0227 69020000 		.4byte	0x269
 1269 022b 03       		.byte	0x3
ARM GAS  /tmp/cc2DuVcX.s 			page 60


 1270 022c 23       		.byte	0x23
 1271 022d 8403     		.uleb128 0x184
 1272 022f 0A       		.uleb128 0xa
 1273 0230 02050000 		.4byte	.LASF60
 1274 0234 01       		.byte	0x1
 1275 0235 7B       		.byte	0x7b
 1276 0236 88020000 		.4byte	0x288
 1277 023a 03       		.byte	0x3
 1278 023b 23       		.byte	0x23
 1279 023c 8004     		.uleb128 0x200
 1280 023e 0B       		.uleb128 0xb
 1281 023f 495000   		.ascii	"IP\000"
 1282 0242 01       		.byte	0x1
 1283 0243 7C       		.byte	0x7c
 1284 0244 A8020000 		.4byte	0x2a8
 1285 0248 03       		.byte	0x3
 1286 0249 23       		.byte	0x23
 1287 024a 8006     		.uleb128 0x300
 1288 024c 00       		.byte	0
 1289 024d 0C       		.uleb128 0xc
 1290 024e A5010000 		.4byte	0x1a5
 1291 0252 5D020000 		.4byte	0x25d
 1292 0256 0D       		.uleb128 0xd
 1293 0257 5D020000 		.4byte	0x25d
 1294 025b 00       		.byte	0
 1295 025c 00       		.byte	0
 1296 025d 05       		.uleb128 0x5
 1297 025e 04       		.byte	0x4
 1298 025f 07       		.byte	0x7
 1299 0260 E3050000 		.4byte	.LASF61
 1300 0264 0E       		.uleb128 0xe
 1301 0265 4D020000 		.4byte	0x24d
 1302 0269 0C       		.uleb128 0xc
 1303 026a A5010000 		.4byte	0x1a5
 1304 026e 79020000 		.4byte	0x279
 1305 0272 0D       		.uleb128 0xd
 1306 0273 5D020000 		.4byte	0x25d
 1307 0277 1E       		.byte	0x1e
 1308 0278 00       		.byte	0
 1309 0279 0E       		.uleb128 0xe
 1310 027a 4D020000 		.4byte	0x24d
 1311 027e 0E       		.uleb128 0xe
 1312 027f 4D020000 		.4byte	0x24d
 1313 0283 0E       		.uleb128 0xe
 1314 0284 4D020000 		.4byte	0x24d
 1315 0288 0C       		.uleb128 0xc
 1316 0289 A5010000 		.4byte	0x1a5
 1317 028d 98020000 		.4byte	0x298
 1318 0291 0D       		.uleb128 0xd
 1319 0292 5D020000 		.4byte	0x25d
 1320 0296 3F       		.byte	0x3f
 1321 0297 00       		.byte	0
 1322 0298 0C       		.uleb128 0xc
 1323 0299 A5010000 		.4byte	0x1a5
 1324 029d A8020000 		.4byte	0x2a8
 1325 02a1 0D       		.uleb128 0xd
 1326 02a2 5D020000 		.4byte	0x25d
ARM GAS  /tmp/cc2DuVcX.s 			page 61


 1327 02a6 07       		.byte	0x7
 1328 02a7 00       		.byte	0
 1329 02a8 0E       		.uleb128 0xe
 1330 02a9 98020000 		.4byte	0x298
 1331 02ad 07       		.uleb128 0x7
 1332 02ae AD050000 		.4byte	.LASF62
 1333 02b2 01       		.byte	0x1
 1334 02b3 7D       		.byte	0x7d
 1335 02b4 B0010000 		.4byte	0x1b0
 1336 02b8 0F       		.uleb128 0xf
 1337 02b9 34       		.byte	0x34
 1338 02ba 01       		.byte	0x1
 1339 02bb 86       		.byte	0x86
 1340 02bc 5B030000 		.4byte	0x35b
 1341 02c0 0A       		.uleb128 0xa
 1342 02c1 62020000 		.4byte	.LASF63
 1343 02c5 01       		.byte	0x1
 1344 02c6 88       		.byte	0x88
 1345 02c7 60030000 		.4byte	0x360
 1346 02cb 02       		.byte	0x2
 1347 02cc 23       		.byte	0x23
 1348 02cd 00       		.uleb128 0
 1349 02ce 0A       		.uleb128 0xa
 1350 02cf EC050000 		.4byte	.LASF64
 1351 02d3 01       		.byte	0x1
 1352 02d4 89       		.byte	0x89
 1353 02d5 5B030000 		.4byte	0x35b
 1354 02d9 02       		.byte	0x2
 1355 02da 23       		.byte	0x23
 1356 02db 04       		.uleb128 0x4
 1357 02dc 0A       		.uleb128 0xa
 1358 02dd DA040000 		.4byte	.LASF53
 1359 02e1 01       		.byte	0x1
 1360 02e2 8A       		.byte	0x8a
 1361 02e3 A5010000 		.4byte	0x1a5
 1362 02e7 02       		.byte	0x2
 1363 02e8 23       		.byte	0x23
 1364 02e9 08       		.uleb128 0x8
 1365 02ea 0A       		.uleb128 0xa
 1366 02eb 00030000 		.4byte	.LASF65
 1367 02ef 01       		.byte	0x1
 1368 02f0 8B       		.byte	0x8b
 1369 02f1 5B030000 		.4byte	0x35b
 1370 02f5 02       		.byte	0x2
 1371 02f6 23       		.byte	0x23
 1372 02f7 0C       		.uleb128 0xc
 1373 02f8 0B       		.uleb128 0xb
 1374 02f9 53435200 		.ascii	"SCR\000"
 1375 02fd 01       		.byte	0x1
 1376 02fe 8C       		.byte	0x8c
 1377 02ff 5B030000 		.4byte	0x35b
 1378 0303 02       		.byte	0x2
 1379 0304 23       		.byte	0x23
 1380 0305 10       		.uleb128 0x10
 1381 0306 0B       		.uleb128 0xb
 1382 0307 43435200 		.ascii	"CCR\000"
 1383 030b 01       		.byte	0x1
ARM GAS  /tmp/cc2DuVcX.s 			page 62


 1384 030c 8D       		.byte	0x8d
 1385 030d 5B030000 		.4byte	0x35b
 1386 0311 02       		.byte	0x2
 1387 0312 23       		.byte	0x23
 1388 0313 14       		.uleb128 0x14
 1389 0314 0A       		.uleb128 0xa
 1390 0315 E4040000 		.4byte	.LASF66
 1391 0319 01       		.byte	0x1
 1392 031a 8E       		.byte	0x8e
 1393 031b A5010000 		.4byte	0x1a5
 1394 031f 02       		.byte	0x2
 1395 0320 23       		.byte	0x23
 1396 0321 18       		.uleb128 0x18
 1397 0322 0B       		.uleb128 0xb
 1398 0323 53485000 		.ascii	"SHP\000"
 1399 0327 01       		.byte	0x1
 1400 0328 8F       		.byte	0x8f
 1401 0329 75030000 		.4byte	0x375
 1402 032d 02       		.byte	0x2
 1403 032e 23       		.byte	0x23
 1404 032f 1C       		.uleb128 0x1c
 1405 0330 0A       		.uleb128 0xa
 1406 0331 AC030000 		.4byte	.LASF67
 1407 0335 01       		.byte	0x1
 1408 0336 90       		.byte	0x90
 1409 0337 5B030000 		.4byte	0x35b
 1410 033b 02       		.byte	0x2
 1411 033c 23       		.byte	0x23
 1412 033d 24       		.uleb128 0x24
 1413 033e 0A       		.uleb128 0xa
 1414 033f EE040000 		.4byte	.LASF57
 1415 0343 01       		.byte	0x1
 1416 0344 91       		.byte	0x91
 1417 0345 65030000 		.4byte	0x365
 1418 0349 02       		.byte	0x2
 1419 034a 23       		.byte	0x23
 1420 034b 28       		.uleb128 0x28
 1421 034c 0A       		.uleb128 0xa
 1422 034d F1010000 		.4byte	.LASF68
 1423 0351 01       		.byte	0x1
 1424 0352 92       		.byte	0x92
 1425 0353 5B030000 		.4byte	0x35b
 1426 0357 02       		.byte	0x2
 1427 0358 23       		.byte	0x23
 1428 0359 30       		.uleb128 0x30
 1429 035a 00       		.byte	0
 1430 035b 0E       		.uleb128 0xe
 1431 035c A5010000 		.4byte	0x1a5
 1432 0360 10       		.uleb128 0x10
 1433 0361 5B030000 		.4byte	0x35b
 1434 0365 0C       		.uleb128 0xc
 1435 0366 A5010000 		.4byte	0x1a5
 1436 036a 75030000 		.4byte	0x375
 1437 036e 0D       		.uleb128 0xd
 1438 036f 5D020000 		.4byte	0x25d
 1439 0373 01       		.byte	0x1
 1440 0374 00       		.byte	0
ARM GAS  /tmp/cc2DuVcX.s 			page 63


 1441 0375 0E       		.uleb128 0xe
 1442 0376 65030000 		.4byte	0x365
 1443 037a 07       		.uleb128 0x7
 1444 037b B7050000 		.4byte	.LASF69
 1445 037f 01       		.byte	0x1
 1446 0380 93       		.byte	0x93
 1447 0381 B8020000 		.4byte	0x2b8
 1448 0385 0F       		.uleb128 0xf
 1449 0386 10       		.byte	0x10
 1450 0387 01       		.byte	0x1
 1451 0388 FC       		.byte	0xfc
 1452 0389 C8030000 		.4byte	0x3c8
 1453 038d 0A       		.uleb128 0xa
 1454 038e E9080000 		.4byte	.LASF70
 1455 0392 01       		.byte	0x1
 1456 0393 FE       		.byte	0xfe
 1457 0394 5B030000 		.4byte	0x35b
 1458 0398 02       		.byte	0x2
 1459 0399 23       		.byte	0x23
 1460 039a 00       		.uleb128 0
 1461 039b 0A       		.uleb128 0xa
 1462 039c F6000000 		.4byte	.LASF71
 1463 03a0 01       		.byte	0x1
 1464 03a1 FF       		.byte	0xff
 1465 03a2 5B030000 		.4byte	0x35b
 1466 03a6 02       		.byte	0x2
 1467 03a7 23       		.byte	0x23
 1468 03a8 04       		.uleb128 0x4
 1469 03a9 11       		.uleb128 0x11
 1470 03aa 56414C00 		.ascii	"VAL\000"
 1471 03ae 01       		.byte	0x1
 1472 03af 0001     		.2byte	0x100
 1473 03b1 5B030000 		.4byte	0x35b
 1474 03b5 02       		.byte	0x2
 1475 03b6 23       		.byte	0x23
 1476 03b7 08       		.uleb128 0x8
 1477 03b8 12       		.uleb128 0x12
 1478 03b9 42010000 		.4byte	.LASF72
 1479 03bd 01       		.byte	0x1
 1480 03be 0101     		.2byte	0x101
 1481 03c0 60030000 		.4byte	0x360
 1482 03c4 02       		.byte	0x2
 1483 03c5 23       		.byte	0x23
 1484 03c6 0C       		.uleb128 0xc
 1485 03c7 00       		.byte	0
 1486 03c8 06       		.uleb128 0x6
 1487 03c9 86040000 		.4byte	.LASF73
 1488 03cd 01       		.byte	0x1
 1489 03ce 0201     		.2byte	0x102
 1490 03d0 85030000 		.4byte	0x385
 1491 03d4 0E       		.uleb128 0xe
 1492 03d5 8F010000 		.4byte	0x18f
 1493 03d9 13       		.uleb128 0x13
 1494 03da 2C       		.byte	0x2c
 1495 03db 03       		.byte	0x3
 1496 03dc 6902     		.2byte	0x269
 1497 03de B5040000 		.4byte	0x4b5
ARM GAS  /tmp/cc2DuVcX.s 			page 64


 1498 03e2 12       		.uleb128 0x12
 1499 03e3 28020000 		.4byte	.LASF74
 1500 03e7 03       		.byte	0x3
 1501 03e8 6B02     		.2byte	0x26b
 1502 03ea 5B030000 		.4byte	0x35b
 1503 03ee 02       		.byte	0x2
 1504 03ef 23       		.byte	0x23
 1505 03f0 00       		.uleb128 0
 1506 03f1 12       		.uleb128 0x12
 1507 03f2 55050000 		.4byte	.LASF75
 1508 03f6 03       		.byte	0x3
 1509 03f7 6C02     		.2byte	0x26c
 1510 03f9 D4030000 		.4byte	0x3d4
 1511 03fd 02       		.byte	0x2
 1512 03fe 23       		.byte	0x23
 1513 03ff 04       		.uleb128 0x4
 1514 0400 12       		.uleb128 0x12
 1515 0401 DA040000 		.4byte	.LASF53
 1516 0405 03       		.byte	0x3
 1517 0406 6D02     		.2byte	0x26d
 1518 0408 8F010000 		.4byte	0x18f
 1519 040c 02       		.byte	0x2
 1520 040d 23       		.byte	0x23
 1521 040e 06       		.uleb128 0x6
 1522 040f 12       		.uleb128 0x12
 1523 0410 7E040000 		.4byte	.LASF76
 1524 0414 03       		.byte	0x3
 1525 0415 6E02     		.2byte	0x26e
 1526 0417 5B030000 		.4byte	0x35b
 1527 041b 02       		.byte	0x2
 1528 041c 23       		.byte	0x23
 1529 041d 08       		.uleb128 0x8
 1530 041e 12       		.uleb128 0x12
 1531 041f B2020000 		.4byte	.LASF77
 1532 0423 03       		.byte	0x3
 1533 0424 6F02     		.2byte	0x26f
 1534 0426 5B030000 		.4byte	0x35b
 1535 042a 02       		.byte	0x2
 1536 042b 23       		.byte	0x23
 1537 042c 0C       		.uleb128 0xc
 1538 042d 11       		.uleb128 0x11
 1539 042e 49445200 		.ascii	"IDR\000"
 1540 0432 03       		.byte	0x3
 1541 0433 7002     		.2byte	0x270
 1542 0435 D4030000 		.4byte	0x3d4
 1543 0439 02       		.byte	0x2
 1544 043a 23       		.byte	0x23
 1545 043b 10       		.uleb128 0x10
 1546 043c 12       		.uleb128 0x12
 1547 043d E4040000 		.4byte	.LASF66
 1548 0441 03       		.byte	0x3
 1549 0442 7102     		.2byte	0x271
 1550 0444 8F010000 		.4byte	0x18f
 1551 0448 02       		.byte	0x2
 1552 0449 23       		.byte	0x23
 1553 044a 12       		.uleb128 0x12
 1554 044b 11       		.uleb128 0x11
ARM GAS  /tmp/cc2DuVcX.s 			page 65


 1555 044c 4F445200 		.ascii	"ODR\000"
 1556 0450 03       		.byte	0x3
 1557 0451 7202     		.2byte	0x272
 1558 0453 D4030000 		.4byte	0x3d4
 1559 0457 02       		.byte	0x2
 1560 0458 23       		.byte	0x23
 1561 0459 14       		.uleb128 0x14
 1562 045a 12       		.uleb128 0x12
 1563 045b EE040000 		.4byte	.LASF57
 1564 045f 03       		.byte	0x3
 1565 0460 7302     		.2byte	0x273
 1566 0462 8F010000 		.4byte	0x18f
 1567 0466 02       		.byte	0x2
 1568 0467 23       		.byte	0x23
 1569 0468 16       		.uleb128 0x16
 1570 0469 12       		.uleb128 0x12
 1571 046a 83000000 		.4byte	.LASF78
 1572 046e 03       		.byte	0x3
 1573 046f 7402     		.2byte	0x274
 1574 0471 5B030000 		.4byte	0x35b
 1575 0475 02       		.byte	0x2
 1576 0476 23       		.byte	0x23
 1577 0477 18       		.uleb128 0x18
 1578 0478 12       		.uleb128 0x12
 1579 0479 E4080000 		.4byte	.LASF79
 1580 047d 03       		.byte	0x3
 1581 047e 7502     		.2byte	0x275
 1582 0480 5B030000 		.4byte	0x35b
 1583 0484 02       		.byte	0x2
 1584 0485 23       		.byte	0x23
 1585 0486 1C       		.uleb128 0x1c
 1586 0487 11       		.uleb128 0x11
 1587 0488 41465200 		.ascii	"AFR\000"
 1588 048c 03       		.byte	0x3
 1589 048d 7602     		.2byte	0x276
 1590 048f B5040000 		.4byte	0x4b5
 1591 0493 02       		.byte	0x2
 1592 0494 23       		.byte	0x23
 1593 0495 20       		.uleb128 0x20
 1594 0496 11       		.uleb128 0x11
 1595 0497 42525200 		.ascii	"BRR\000"
 1596 049b 03       		.byte	0x3
 1597 049c 7702     		.2byte	0x277
 1598 049e D4030000 		.4byte	0x3d4
 1599 04a2 02       		.byte	0x2
 1600 04a3 23       		.byte	0x23
 1601 04a4 28       		.uleb128 0x28
 1602 04a5 12       		.uleb128 0x12
 1603 04a6 F8040000 		.4byte	.LASF59
 1604 04aa 03       		.byte	0x3
 1605 04ab 7802     		.2byte	0x278
 1606 04ad 8F010000 		.4byte	0x18f
 1607 04b1 02       		.byte	0x2
 1608 04b2 23       		.byte	0x23
 1609 04b3 2A       		.uleb128 0x2a
 1610 04b4 00       		.byte	0
 1611 04b5 0E       		.uleb128 0xe
ARM GAS  /tmp/cc2DuVcX.s 			page 66


 1612 04b6 65030000 		.4byte	0x365
 1613 04ba 06       		.uleb128 0x6
 1614 04bb C0050000 		.4byte	.LASF80
 1615 04bf 03       		.byte	0x3
 1616 04c0 7902     		.2byte	0x279
 1617 04c2 D9030000 		.4byte	0x3d9
 1618 04c6 05       		.uleb128 0x5
 1619 04c7 08       		.byte	0x8
 1620 04c8 04       		.byte	0x4
 1621 04c9 93040000 		.4byte	.LASF81
 1622 04cd 05       		.uleb128 0x5
 1623 04ce 01       		.byte	0x1
 1624 04cf 08       		.byte	0x8
 1625 04d0 E9020000 		.4byte	.LASF82
 1626 04d4 14       		.uleb128 0x14
 1627 04d5 01       		.byte	0x1
 1628 04d6 24010000 		.4byte	0x124
 1629 04da 06       		.byte	0x6
 1630 04db BC       		.byte	0xbc
 1631 04dc F3040000 		.4byte	0x4f3
 1632 04e0 04       		.uleb128 0x4
 1633 04e1 F5030000 		.4byte	.LASF83
 1634 04e5 00       		.byte	0
 1635 04e6 04       		.uleb128 0x4
 1636 04e7 E5060000 		.4byte	.LASF84
 1637 04eb 01       		.byte	0x1
 1638 04ec 04       		.uleb128 0x4
 1639 04ed 8C030000 		.4byte	.LASF85
 1640 04f1 02       		.byte	0x2
 1641 04f2 00       		.byte	0
 1642 04f3 07       		.uleb128 0x7
 1643 04f4 3F030000 		.4byte	.LASF86
 1644 04f8 06       		.byte	0x6
 1645 04f9 C3       		.byte	0xc3
 1646 04fa D4040000 		.4byte	0x4d4
 1647 04fe 15       		.uleb128 0x15
 1648 04ff DE030000 		.4byte	.LASF174
 1649 0503 0C       		.byte	0xc
 1650 0504 07       		.byte	0x7
 1651 0505 34       		.byte	0x34
 1652 0506 A5050000 		.4byte	0x5a5
 1653 050a 0A       		.uleb128 0xa
 1654 050b 88000000 		.4byte	.LASF87
 1655 050f 07       		.byte	0x7
 1656 0510 36       		.byte	0x36
 1657 0511 24010000 		.4byte	0x124
 1658 0515 02       		.byte	0x2
 1659 0516 23       		.byte	0x23
 1660 0517 00       		.uleb128 0
 1661 0518 0A       		.uleb128 0xa
 1662 0519 0E070000 		.4byte	.LASF88
 1663 051d 07       		.byte	0x7
 1664 051e 38       		.byte	0x38
 1665 051f 24010000 		.4byte	0x124
 1666 0523 02       		.byte	0x2
 1667 0524 23       		.byte	0x23
 1668 0525 01       		.uleb128 0x1
ARM GAS  /tmp/cc2DuVcX.s 			page 67


 1669 0526 0A       		.uleb128 0xa
 1670 0527 5A000000 		.4byte	.LASF89
 1671 052b 07       		.byte	0x7
 1672 052c 39       		.byte	0x39
 1673 052d 24010000 		.4byte	0x124
 1674 0531 02       		.byte	0x2
 1675 0532 23       		.byte	0x23
 1676 0533 02       		.uleb128 0x2
 1677 0534 0A       		.uleb128 0xa
 1678 0535 3C010000 		.4byte	.LASF90
 1679 0539 07       		.byte	0x7
 1680 053a 3A       		.byte	0x3a
 1681 053b 24010000 		.4byte	0x124
 1682 053f 02       		.byte	0x2
 1683 0540 23       		.byte	0x23
 1684 0541 03       		.uleb128 0x3
 1685 0542 0A       		.uleb128 0xa
 1686 0543 AD040000 		.4byte	.LASF91
 1687 0547 07       		.byte	0x7
 1688 0548 3C       		.byte	0x3c
 1689 0549 3D010000 		.4byte	0x13d
 1690 054d 02       		.byte	0x2
 1691 054e 23       		.byte	0x23
 1692 054f 04       		.uleb128 0x4
 1693 0550 0A       		.uleb128 0xa
 1694 0551 D0020000 		.4byte	.LASF92
 1695 0555 07       		.byte	0x7
 1696 0556 3D       		.byte	0x3d
 1697 0557 24010000 		.4byte	0x124
 1698 055b 02       		.byte	0x2
 1699 055c 23       		.byte	0x23
 1700 055d 06       		.uleb128 0x6
 1701 055e 0A       		.uleb128 0xa
 1702 055f D7020000 		.4byte	.LASF93
 1703 0563 07       		.byte	0x7
 1704 0564 3E       		.byte	0x3e
 1705 0565 24010000 		.4byte	0x124
 1706 0569 02       		.byte	0x2
 1707 056a 23       		.byte	0x23
 1708 056b 07       		.uleb128 0x7
 1709 056c 0A       		.uleb128 0xa
 1710 056d 06000000 		.4byte	.LASF94
 1711 0571 07       		.byte	0x7
 1712 0572 41       		.byte	0x41
 1713 0573 24010000 		.4byte	0x124
 1714 0577 02       		.byte	0x2
 1715 0578 23       		.byte	0x23
 1716 0579 08       		.uleb128 0x8
 1717 057a 0A       		.uleb128 0xa
 1718 057b 14000000 		.4byte	.LASF95
 1719 057f 07       		.byte	0x7
 1720 0580 42       		.byte	0x42
 1721 0581 24010000 		.4byte	0x124
 1722 0585 02       		.byte	0x2
 1723 0586 23       		.byte	0x23
 1724 0587 09       		.uleb128 0x9
 1725 0588 0A       		.uleb128 0xa
ARM GAS  /tmp/cc2DuVcX.s 			page 68


 1726 0589 22000000 		.4byte	.LASF96
 1727 058d 07       		.byte	0x7
 1728 058e 43       		.byte	0x43
 1729 058f 24010000 		.4byte	0x124
 1730 0593 02       		.byte	0x2
 1731 0594 23       		.byte	0x23
 1732 0595 0A       		.uleb128 0xa
 1733 0596 0A       		.uleb128 0xa
 1734 0597 30000000 		.4byte	.LASF97
 1735 059b 07       		.byte	0x7
 1736 059c 44       		.byte	0x44
 1737 059d 24010000 		.4byte	0x124
 1738 05a1 02       		.byte	0x2
 1739 05a2 23       		.byte	0x23
 1740 05a3 0B       		.uleb128 0xb
 1741 05a4 00       		.byte	0
 1742 05a5 07       		.uleb128 0x7
 1743 05a6 93070000 		.4byte	.LASF98
 1744 05aa 07       		.byte	0x7
 1745 05ab 46       		.byte	0x46
 1746 05ac FE040000 		.4byte	0x4fe
 1747 05b0 02       		.uleb128 0x2
 1748 05b1 4A020000 		.4byte	.LASF100
 1749 05b5 01       		.byte	0x1
 1750 05b6 24010000 		.4byte	0x124
 1751 05ba 08       		.byte	0x8
 1752 05bb 0D       		.byte	0xd
 1753 05bc EB050000 		.4byte	0x5eb
 1754 05c0 04       		.uleb128 0x4
 1755 05c1 98020000 		.4byte	.LASF101
 1756 05c5 00       		.byte	0
 1757 05c6 04       		.uleb128 0x4
 1758 05c7 88070000 		.4byte	.LASF102
 1759 05cb 01       		.byte	0x1
 1760 05cc 04       		.uleb128 0x4
 1761 05cd FF030000 		.4byte	.LASF103
 1762 05d1 02       		.byte	0x2
 1763 05d2 04       		.uleb128 0x4
 1764 05d3 A1050000 		.4byte	.LASF104
 1765 05d7 03       		.byte	0x3
 1766 05d8 04       		.uleb128 0x4
 1767 05d9 EE080000 		.4byte	.LASF105
 1768 05dd 04       		.byte	0x4
 1769 05de 04       		.uleb128 0x4
 1770 05df BD070000 		.4byte	.LASF106
 1771 05e3 05       		.byte	0x5
 1772 05e4 04       		.uleb128 0x4
 1773 05e5 49040000 		.4byte	.LASF107
 1774 05e9 06       		.byte	0x6
 1775 05ea 00       		.byte	0
 1776 05eb 16       		.uleb128 0x16
 1777 05ec D8000000 		.4byte	.LASF175
 1778 05f0 01       		.byte	0x1
 1779 05f1 7C03     		.2byte	0x37c
 1780 05f3 01       		.byte	0x1
 1781 05f4 00000000 		.4byte	.LFB16
 1782 05f8 EC000000 		.4byte	.LFE16
ARM GAS  /tmp/cc2DuVcX.s 			page 69


 1783 05fc 00000000 		.4byte	.LLST0
 1784 0600 01       		.byte	0x1
 1785 0601 24060000 		.4byte	0x624
 1786 0605 17       		.uleb128 0x17
 1787 0606 A8040000 		.4byte	.LASF99
 1788 060a 01       		.byte	0x1
 1789 060b 7C03     		.2byte	0x37c
 1790 060d 0D010000 		.4byte	0x10d
 1791 0611 02       		.byte	0x2
 1792 0612 91       		.byte	0x91
 1793 0613 6F       		.sleb128 -17
 1794 0614 17       		.uleb128 0x17
 1795 0615 3F050000 		.4byte	.LASF108
 1796 0619 01       		.byte	0x1
 1797 061a 7C03     		.2byte	0x37c
 1798 061c A5010000 		.4byte	0x1a5
 1799 0620 02       		.byte	0x2
 1800 0621 91       		.byte	0x91
 1801 0622 68       		.sleb128 -24
 1802 0623 00       		.byte	0
 1803 0624 18       		.uleb128 0x18
 1804 0625 89020000 		.4byte	.LASF176
 1805 0629 01       		.byte	0x1
 1806 062a B803     		.2byte	0x3b8
 1807 062c 01       		.byte	0x1
 1808 062d A5010000 		.4byte	0x1a5
 1809 0631 00000000 		.4byte	.LFB18
 1810 0635 48000000 		.4byte	.LFE18
 1811 0639 2C000000 		.4byte	.LLST1
 1812 063d 01       		.byte	0x1
 1813 063e 52060000 		.4byte	0x652
 1814 0642 17       		.uleb128 0x17
 1815 0643 B8020000 		.4byte	.LASF109
 1816 0647 01       		.byte	0x1
 1817 0648 B803     		.2byte	0x3b8
 1818 064a A5010000 		.4byte	0x1a5
 1819 064e 02       		.byte	0x2
 1820 064f 91       		.byte	0x91
 1821 0650 74       		.sleb128 -12
 1822 0651 00       		.byte	0
 1823 0652 19       		.uleb128 0x19
 1824 0653 01       		.byte	0x1
 1825 0654 97080000 		.4byte	.LASF177
 1826 0658 02       		.byte	0x2
 1827 0659 D6       		.byte	0xd6
 1828 065a 01       		.byte	0x1
 1829 065b 76010000 		.4byte	0x176
 1830 065f 00000000 		.4byte	.LFB20
 1831 0663 90010000 		.4byte	.LFE20
 1832 0667 58000000 		.4byte	.LLST2
 1833 066b 01       		.byte	0x1
 1834 066c 6E070000 		.4byte	0x76e
 1835 0670 1A       		.uleb128 0x1a
 1836 0671 6900     		.ascii	"i\000"
 1837 0673 02       		.byte	0x2
 1838 0674 D8       		.byte	0xd8
 1839 0675 24010000 		.4byte	0x124
ARM GAS  /tmp/cc2DuVcX.s 			page 70


 1840 0679 02       		.byte	0x2
 1841 067a 91       		.byte	0x91
 1842 067b 77       		.sleb128 -9
 1843 067c 1B       		.uleb128 0x1b
 1844 067d 696900   		.ascii	"ii\000"
 1845 0680 02       		.byte	0x2
 1846 0681 D8       		.byte	0xd8
 1847 0682 24010000 		.4byte	0x124
 1848 0686 1C       		.uleb128 0x1c
 1849 0687 D7080000 		.4byte	.LASF110
 1850 068b 02       		.byte	0x2
 1851 068c D9       		.byte	0xd9
 1852 068d 24010000 		.4byte	0x124
 1853 0691 1C       		.uleb128 0x1c
 1854 0692 34030000 		.4byte	.LASF111
 1855 0696 02       		.byte	0x2
 1856 0697 D9       		.byte	0xd9
 1857 0698 24010000 		.4byte	0x124
 1858 069c 1D       		.uleb128 0x1d
 1859 069d 05070000 		.4byte	.LASF112
 1860 06a1 02       		.byte	0x2
 1861 06a2 D9       		.byte	0xd9
 1862 06a3 24010000 		.4byte	0x124
 1863 06a7 02       		.byte	0x2
 1864 06a8 91       		.byte	0x91
 1865 06a9 76       		.sleb128 -10
 1866 06aa 1D       		.uleb128 0x1d
 1867 06ab B0080000 		.4byte	.LASF113
 1868 06af 02       		.byte	0x2
 1869 06b0 DA       		.byte	0xda
 1870 06b1 24010000 		.4byte	0x124
 1871 06b5 02       		.byte	0x2
 1872 06b6 91       		.byte	0x91
 1873 06b7 75       		.sleb128 -11
 1874 06b8 1C       		.uleb128 0x1c
 1875 06b9 DE020000 		.4byte	.LASF114
 1876 06bd 02       		.byte	0x2
 1877 06be DB       		.byte	0xdb
 1878 06bf 3D010000 		.4byte	0x13d
 1879 06c3 1C       		.uleb128 0x1c
 1880 06c4 7C030000 		.4byte	.LASF115
 1881 06c8 02       		.byte	0x2
 1882 06c9 DB       		.byte	0xdb
 1883 06ca 3D010000 		.4byte	0x13d
 1884 06ce 1D       		.uleb128 0x1d
 1885 06cf AC000000 		.4byte	.LASF116
 1886 06d3 02       		.byte	0x2
 1887 06d4 DD       		.byte	0xdd
 1888 06d5 F3040000 		.4byte	0x4f3
 1889 06d9 02       		.byte	0x2
 1890 06da 91       		.byte	0x91
 1891 06db 74       		.sleb128 -12
 1892 06dc 1C       		.uleb128 0x1c
 1893 06dd C2010000 		.4byte	.LASF117
 1894 06e1 02       		.byte	0x2
 1895 06e2 DF       		.byte	0xdf
 1896 06e3 3D010000 		.4byte	0x13d
ARM GAS  /tmp/cc2DuVcX.s 			page 71


 1897 06e7 1C       		.uleb128 0x1c
 1898 06e8 62070000 		.4byte	.LASF118
 1899 06ec 02       		.byte	0x2
 1900 06ed E2       		.byte	0xe2
 1901 06ee 24010000 		.4byte	0x124
 1902 06f2 1D       		.uleb128 0x1d
 1903 06f3 00000000 		.4byte	.LASF119
 1904 06f7 02       		.byte	0x2
 1905 06f8 E8       		.byte	0xe8
 1906 06f9 6E070000 		.4byte	0x76e
 1907 06fd 02       		.byte	0x2
 1908 06fe 91       		.byte	0x91
 1909 06ff 50       		.sleb128 -48
 1910 0700 1D       		.uleb128 0x1d
 1911 0701 76040000 		.4byte	.LASF120
 1912 0705 02       		.byte	0x2
 1913 0706 E9       		.byte	0xe9
 1914 0707 B0050000 		.4byte	0x5b0
 1915 070b 02       		.byte	0x2
 1916 070c 91       		.byte	0x91
 1917 070d 73       		.sleb128 -13
 1918 070e 1D       		.uleb128 0x1d
 1919 070f 2C070000 		.4byte	.LASF121
 1920 0713 02       		.byte	0x2
 1921 0714 EA       		.byte	0xea
 1922 0715 24010000 		.4byte	0x124
 1923 0719 02       		.byte	0x2
 1924 071a 91       		.byte	0x91
 1925 071b 72       		.sleb128 -14
 1926 071c 1D       		.uleb128 0x1d
 1927 071d 5C050000 		.4byte	.LASF122
 1928 0721 02       		.byte	0x2
 1929 0722 EB       		.byte	0xeb
 1930 0723 24010000 		.4byte	0x124
 1931 0727 02       		.byte	0x2
 1932 0728 91       		.byte	0x91
 1933 0729 71       		.sleb128 -15
 1934 072a 1D       		.uleb128 0x1d
 1935 072b F9060000 		.4byte	.LASF123
 1936 072f 02       		.byte	0x2
 1937 0730 EC       		.byte	0xec
 1938 0731 24010000 		.4byte	0x124
 1939 0735 02       		.byte	0x2
 1940 0736 91       		.byte	0x91
 1941 0737 70       		.sleb128 -16
 1942 0738 1D       		.uleb128 0x1d
 1943 0739 A5010000 		.4byte	.LASF124
 1944 073d 02       		.byte	0x2
 1945 073e ED       		.byte	0xed
 1946 073f 24010000 		.4byte	0x124
 1947 0743 02       		.byte	0x2
 1948 0744 91       		.byte	0x91
 1949 0745 6F       		.sleb128 -17
 1950 0746 1D       		.uleb128 0x1d
 1951 0747 13040000 		.4byte	.LASF125
 1952 074b 02       		.byte	0x2
 1953 074c EE       		.byte	0xee
ARM GAS  /tmp/cc2DuVcX.s 			page 72


 1954 074d 76010000 		.4byte	0x176
 1955 0751 02       		.byte	0x2
 1956 0752 91       		.byte	0x91
 1957 0753 68       		.sleb128 -24
 1958 0754 1D       		.uleb128 0x1d
 1959 0755 AF060000 		.4byte	.LASF126
 1960 0759 02       		.byte	0x2
 1961 075a EF       		.byte	0xef
 1962 075b 24010000 		.4byte	0x124
 1963 075f 02       		.byte	0x2
 1964 0760 91       		.byte	0x91
 1965 0761 67       		.sleb128 -25
 1966 0762 1C       		.uleb128 0x1c
 1967 0763 B7000000 		.4byte	.LASF127
 1968 0767 02       		.byte	0x2
 1969 0768 F4       		.byte	0xf4
 1970 0769 7E070000 		.4byte	0x77e
 1971 076d 00       		.byte	0
 1972 076e 0C       		.uleb128 0xc
 1973 076f CD040000 		.4byte	0x4cd
 1974 0773 7E070000 		.4byte	0x77e
 1975 0777 0D       		.uleb128 0xd
 1976 0778 5D020000 		.4byte	0x25d
 1977 077c 13       		.byte	0x13
 1978 077d 00       		.byte	0
 1979 077e 1E       		.uleb128 0x1e
 1980 077f 04       		.byte	0x4
 1981 0780 A5050000 		.4byte	0x5a5
 1982 0784 1F       		.uleb128 0x1f
 1983 0785 01       		.byte	0x1
 1984 0786 77070000 		.4byte	.LASF178
 1985 078a 02       		.byte	0x2
 1986 078b 8503     		.2byte	0x385
 1987 078d 01       		.byte	0x1
 1988 078e 00000000 		.4byte	.LFB21
 1989 0792 B0000000 		.4byte	.LFE21
 1990 0796 84000000 		.4byte	.LLST3
 1991 079a 01       		.byte	0x1
 1992 079b 44080000 		.4byte	0x844
 1993 079f 17       		.uleb128 0x17
 1994 07a0 CB000000 		.4byte	.LASF128
 1995 07a4 02       		.byte	0x2
 1996 07a5 8503     		.2byte	0x385
 1997 07a7 44080000 		.4byte	0x844
 1998 07ab 03       		.byte	0x3
 1999 07ac 91       		.byte	0x91
 2000 07ad A47F     		.sleb128 -92
 2001 07af 20       		.uleb128 0x20
 2002 07b0 643100   		.ascii	"d1\000"
 2003 07b3 02       		.byte	0x2
 2004 07b4 8703     		.2byte	0x387
 2005 07b6 9A010000 		.4byte	0x19a
 2006 07ba 02       		.byte	0x2
 2007 07bb 91       		.byte	0x91
 2008 07bc 74       		.sleb128 -12
 2009 07bd 20       		.uleb128 0x20
 2010 07be 643200   		.ascii	"d2\000"
ARM GAS  /tmp/cc2DuVcX.s 			page 73


 2011 07c1 02       		.byte	0x2
 2012 07c2 8703     		.2byte	0x387
 2013 07c4 9A010000 		.4byte	0x19a
 2014 07c8 02       		.byte	0x2
 2015 07c9 91       		.byte	0x91
 2016 07ca 70       		.sleb128 -16
 2017 07cb 20       		.uleb128 0x20
 2018 07cc 643300   		.ascii	"d3\000"
 2019 07cf 02       		.byte	0x2
 2020 07d0 8703     		.2byte	0x387
 2021 07d2 9A010000 		.4byte	0x19a
 2022 07d6 02       		.byte	0x2
 2023 07d7 91       		.byte	0x91
 2024 07d8 6C       		.sleb128 -20
 2025 07d9 20       		.uleb128 0x20
 2026 07da 643400   		.ascii	"d4\000"
 2027 07dd 02       		.byte	0x2
 2028 07de 8703     		.2byte	0x387
 2029 07e0 9A010000 		.4byte	0x19a
 2030 07e4 02       		.byte	0x2
 2031 07e5 91       		.byte	0x91
 2032 07e6 68       		.sleb128 -24
 2033 07e7 20       		.uleb128 0x20
 2034 07e8 643500   		.ascii	"d5\000"
 2035 07eb 02       		.byte	0x2
 2036 07ec 8703     		.2byte	0x387
 2037 07ee 9A010000 		.4byte	0x19a
 2038 07f2 02       		.byte	0x2
 2039 07f3 91       		.byte	0x91
 2040 07f4 64       		.sleb128 -28
 2041 07f5 20       		.uleb128 0x20
 2042 07f6 643600   		.ascii	"d6\000"
 2043 07f9 02       		.byte	0x2
 2044 07fa 8703     		.2byte	0x387
 2045 07fc 9A010000 		.4byte	0x19a
 2046 0800 02       		.byte	0x2
 2047 0801 91       		.byte	0x91
 2048 0802 60       		.sleb128 -32
 2049 0803 21       		.uleb128 0x21
 2050 0804 37040000 		.4byte	.LASF129
 2051 0808 02       		.byte	0x2
 2052 0809 8803     		.2byte	0x388
 2053 080b 4A080000 		.4byte	0x84a
 2054 080f 03       		.byte	0x3
 2055 0810 91       		.byte	0x91
 2056 0811 B87F     		.sleb128 -72
 2057 0813 21       		.uleb128 0x21
 2058 0814 5B060000 		.4byte	.LASF130
 2059 0818 02       		.byte	0x2
 2060 0819 8903     		.2byte	0x389
 2061 081b 61080000 		.4byte	0x861
 2062 081f 03       		.byte	0x3
 2063 0820 91       		.byte	0x91
 2064 0821 B47F     		.sleb128 -76
 2065 0823 21       		.uleb128 0x21
 2066 0824 EE020000 		.4byte	.LASF131
 2067 0828 02       		.byte	0x2
ARM GAS  /tmp/cc2DuVcX.s 			page 74


 2068 0829 8A03     		.2byte	0x38a
 2069 082b 61080000 		.4byte	0x861
 2070 082f 03       		.byte	0x3
 2071 0830 91       		.byte	0x91
 2072 0831 B07F     		.sleb128 -80
 2073 0833 21       		.uleb128 0x21
 2074 0834 17060000 		.4byte	.LASF132
 2075 0838 02       		.byte	0x2
 2076 0839 8B03     		.2byte	0x38b
 2077 083b 61080000 		.4byte	0x861
 2078 083f 03       		.byte	0x3
 2079 0840 91       		.byte	0x91
 2080 0841 AC7F     		.sleb128 -84
 2081 0843 00       		.byte	0
 2082 0844 1E       		.uleb128 0x1e
 2083 0845 04       		.byte	0x4
 2084 0846 84010000 		.4byte	0x184
 2085 084a 0C       		.uleb128 0xc
 2086 084b CD040000 		.4byte	0x4cd
 2087 084f 5A080000 		.4byte	0x85a
 2088 0853 0D       		.uleb128 0xd
 2089 0854 5D020000 		.4byte	0x25d
 2090 0858 27       		.byte	0x27
 2091 0859 00       		.byte	0
 2092 085a 05       		.uleb128 0x5
 2093 085b 04       		.byte	0x4
 2094 085c 04       		.byte	0x4
 2095 085d BC010000 		.4byte	.LASF133
 2096 0861 0E       		.uleb128 0xe
 2097 0862 5A080000 		.4byte	0x85a
 2098 0866 22       		.uleb128 0x22
 2099 0867 01       		.byte	0x1
 2100 0868 35070000 		.4byte	.LASF179
 2101 086c 02       		.byte	0x2
 2102 086d 0004     		.2byte	0x400
 2103 086f 01       		.byte	0x1
 2104 0870 00000000 		.4byte	.LFB22
 2105 0874 28010000 		.4byte	.LFE22
 2106 0878 02       		.byte	0x2
 2107 0879 7D       		.byte	0x7d
 2108 087a 00       		.sleb128 0
 2109 087b 01       		.byte	0x1
 2110 087c 0C       		.uleb128 0xc
 2111 087d 24010000 		.4byte	0x124
 2112 0881 8C080000 		.4byte	0x88c
 2113 0885 0D       		.uleb128 0xd
 2114 0886 5D020000 		.4byte	0x25d
 2115 088a FF       		.byte	0xff
 2116 088b 00       		.byte	0
 2117 088c 23       		.uleb128 0x23
 2118 088d 48010000 		.4byte	.LASF134
 2119 0891 02       		.byte	0x2
 2120 0892 3B       		.byte	0x3b
 2121 0893 9E080000 		.4byte	0x89e
 2122 0897 01       		.byte	0x1
 2123 0898 05       		.byte	0x5
 2124 0899 03       		.byte	0x3
ARM GAS  /tmp/cc2DuVcX.s 			page 75


 2125 089a 00000000 		.4byte	tx2buff
 2126 089e 0E       		.uleb128 0xe
 2127 089f 7C080000 		.4byte	0x87c
 2128 08a3 23       		.uleb128 0x23
 2129 08a4 21010000 		.4byte	.LASF135
 2130 08a8 02       		.byte	0x2
 2131 08a9 3C       		.byte	0x3c
 2132 08aa B5080000 		.4byte	0x8b5
 2133 08ae 01       		.byte	0x1
 2134 08af 05       		.byte	0x5
 2135 08b0 03       		.byte	0x3
 2136 08b1 00000000 		.4byte	rx2buff
 2137 08b5 0E       		.uleb128 0xe
 2138 08b6 7C080000 		.4byte	0x87c
 2139 08ba 23       		.uleb128 0x23
 2140 08bb 5F030000 		.4byte	.LASF136
 2141 08bf 02       		.byte	0x2
 2142 08c0 3E       		.byte	0x3e
 2143 08c1 CC080000 		.4byte	0x8cc
 2144 08c5 01       		.byte	0x1
 2145 08c6 05       		.byte	0x5
 2146 08c7 03       		.byte	0x3
 2147 08c8 00000000 		.4byte	tx1buff
 2148 08cc 0E       		.uleb128 0xe
 2149 08cd 7C080000 		.4byte	0x87c
 2150 08d1 23       		.uleb128 0x23
 2151 08d2 34010000 		.4byte	.LASF137
 2152 08d6 02       		.byte	0x2
 2153 08d7 3F       		.byte	0x3f
 2154 08d8 E3080000 		.4byte	0x8e3
 2155 08dc 01       		.byte	0x1
 2156 08dd 05       		.byte	0x5
 2157 08de 03       		.byte	0x3
 2158 08df 00000000 		.4byte	rx1buff
 2159 08e3 0E       		.uleb128 0xe
 2160 08e4 7C080000 		.4byte	0x87c
 2161 08e8 23       		.uleb128 0x23
 2162 08e9 BE020000 		.4byte	.LASF138
 2163 08ed 02       		.byte	0x2
 2164 08ee 49       		.byte	0x49
 2165 08ef FA080000 		.4byte	0x8fa
 2166 08f3 01       		.byte	0x1
 2167 08f4 05       		.byte	0x5
 2168 08f5 03       		.byte	0x3
 2169 08f6 00000000 		.4byte	show_select_timer
 2170 08fa 0E       		.uleb128 0xe
 2171 08fb 3D010000 		.4byte	0x13d
 2172 08ff 23       		.uleb128 0x23
 2173 0900 67040000 		.4byte	.LASF139
 2174 0904 02       		.byte	0x2
 2175 0905 4A       		.byte	0x4a
 2176 0906 11090000 		.4byte	0x911
 2177 090a 01       		.byte	0x1
 2178 090b 05       		.byte	0x5
 2179 090c 03       		.byte	0x3
 2180 090d 00000000 		.4byte	switches_timer
 2181 0911 0E       		.uleb128 0xe
ARM GAS  /tmp/cc2DuVcX.s 			page 76


 2182 0912 24010000 		.4byte	0x124
 2183 0916 23       		.uleb128 0x23
 2184 0917 3E000000 		.4byte	.LASF140
 2185 091b 02       		.byte	0x2
 2186 091c 4B       		.byte	0x4b
 2187 091d 11090000 		.4byte	0x911
 2188 0921 01       		.byte	0x1
 2189 0922 05       		.byte	0x5
 2190 0923 03       		.byte	0x3
 2191 0924 00000000 		.4byte	acswitch_timer
 2192 0928 23       		.uleb128 0x23
 2193 0929 C3040000 		.4byte	.LASF141
 2194 092d 02       		.byte	0x2
 2195 092e 4D       		.byte	0x4d
 2196 092f FA080000 		.4byte	0x8fa
 2197 0933 01       		.byte	0x1
 2198 0934 05       		.byte	0x5
 2199 0935 03       		.byte	0x3
 2200 0936 00000000 		.4byte	scroll1_timer
 2201 093a 23       		.uleb128 0x23
 2202 093b BB080000 		.4byte	.LASF142
 2203 093f 02       		.byte	0x2
 2204 0940 4E       		.byte	0x4e
 2205 0941 FA080000 		.4byte	0x8fa
 2206 0945 01       		.byte	0x1
 2207 0946 05       		.byte	0x5
 2208 0947 03       		.byte	0x3
 2209 0948 00000000 		.4byte	scroll2_timer
 2210 094c 23       		.uleb128 0x23
 2211 094d 86080000 		.4byte	.LASF143
 2212 0951 02       		.byte	0x2
 2213 0952 50       		.byte	0x50
 2214 0953 FA080000 		.4byte	0x8fa
 2215 0957 01       		.byte	0x1
 2216 0958 05       		.byte	0x5
 2217 0959 03       		.byte	0x3
 2218 095a 00000000 		.4byte	standalone_timer
 2219 095e 23       		.uleb128 0x23
 2220 095f 72060000 		.4byte	.LASF144
 2221 0963 02       		.byte	0x2
 2222 0964 51       		.byte	0x51
 2223 0965 FA080000 		.4byte	0x8fa
 2224 0969 01       		.byte	0x1
 2225 096a 05       		.byte	0x5
 2226 096b 03       		.byte	0x3
 2227 096c 00000000 		.4byte	standalone_enable_menu_timer
 2228 0970 23       		.uleb128 0x23
 2229 0971 5D010000 		.4byte	.LASF145
 2230 0975 02       		.byte	0x2
 2231 0976 53       		.byte	0x53
 2232 0977 11090000 		.4byte	0x911
 2233 097b 01       		.byte	0x1
 2234 097c 05       		.byte	0x5
 2235 097d 03       		.byte	0x3
 2236 097e 00000000 		.4byte	grouped_master_timeout_timer
 2237 0982 23       		.uleb128 0x23
 2238 0983 06030000 		.4byte	.LASF146
ARM GAS  /tmp/cc2DuVcX.s 			page 77


 2239 0987 02       		.byte	0x2
 2240 0988 54       		.byte	0x54
 2241 0989 FA080000 		.4byte	0x8fa
 2242 098d 01       		.byte	0x1
 2243 098e 05       		.byte	0x5
 2244 098f 03       		.byte	0x3
 2245 0990 00000000 		.4byte	take_temp_sample
 2246 0994 23       		.uleb128 0x23
 2247 0995 4B070000 		.4byte	.LASF147
 2248 0999 02       		.byte	0x2
 2249 099a 55       		.byte	0x55
 2250 099b 11090000 		.4byte	0x911
 2251 099f 01       		.byte	0x1
 2252 09a0 05       		.byte	0x5
 2253 09a1 03       		.byte	0x3
 2254 09a2 00000000 		.4byte	timer_wifi_bright
 2255 09a6 23       		.uleb128 0x23
 2256 09a7 E9030000 		.4byte	.LASF148
 2257 09ab 02       		.byte	0x2
 2258 09ac 58       		.byte	0x58
 2259 09ad FA080000 		.4byte	0x8fa
 2260 09b1 01       		.byte	0x1
 2261 09b2 05       		.byte	0x5
 2262 09b3 03       		.byte	0x3
 2263 09b4 00000000 		.4byte	timer_relay
 2264 09b8 23       		.uleb128 0x23
 2265 09b9 68020000 		.4byte	.LASF149
 2266 09bd 02       		.byte	0x2
 2267 09be 5A       		.byte	0x5a
 2268 09bf FA080000 		.4byte	0x8fa
 2269 09c3 01       		.byte	0x1
 2270 09c4 05       		.byte	0x5
 2271 09c5 03       		.byte	0x3
 2272 09c6 00000000 		.4byte	tt_take_photo_sample
 2273 09ca 23       		.uleb128 0x23
 2274 09cb 67030000 		.4byte	.LASF150
 2275 09cf 02       		.byte	0x2
 2276 09d0 5B       		.byte	0x5b
 2277 09d1 FA080000 		.4byte	0x8fa
 2278 09d5 01       		.byte	0x1
 2279 09d6 05       		.byte	0x5
 2280 09d7 03       		.byte	0x3
 2281 09d8 00000000 		.4byte	tt_relay_on_off
 2282 09dc 23       		.uleb128 0x23
 2283 09dd C6030000 		.4byte	.LASF151
 2284 09e1 02       		.byte	0x2
 2285 09e2 5F       		.byte	0x5f
 2286 09e3 24010000 		.4byte	0x124
 2287 09e7 01       		.byte	0x1
 2288 09e8 05       		.byte	0x5
 2289 09e9 03       		.byte	0x3
 2290 09ea 00000000 		.4byte	saved_mode
 2291 09ee 23       		.uleb128 0x23
 2292 09ef 7D020000 		.4byte	.LASF152
 2293 09f3 02       		.byte	0x2
 2294 09f4 62       		.byte	0x62
 2295 09f5 11090000 		.4byte	0x911
ARM GAS  /tmp/cc2DuVcX.s 			page 78


 2296 09f9 01       		.byte	0x1
 2297 09fa 05       		.byte	0x5
 2298 09fb 03       		.byte	0x3
 2299 09fc 00000000 		.4byte	igrid_timer
 2300 0a00 23       		.uleb128 0x23
 2301 0a01 7A010000 		.4byte	.LASF153
 2302 0a05 02       		.byte	0x2
 2303 0a06 63       		.byte	0x63
 2304 0a07 11090000 		.4byte	0x911
 2305 0a0b 01       		.byte	0x1
 2306 0a0c 05       		.byte	0x5
 2307 0a0d 03       		.byte	0x3
 2308 0a0e 00000000 		.4byte	vgrid_timer
 2309 0a12 24       		.uleb128 0x24
 2310 0a13 733100   		.ascii	"s1\000"
 2311 0a16 02       		.byte	0x2
 2312 0a17 66       		.byte	0x66
 2313 0a18 3D010000 		.4byte	0x13d
 2314 0a1c 01       		.byte	0x1
 2315 0a1d 05       		.byte	0x5
 2316 0a1e 03       		.byte	0x3
 2317 0a1f 00000000 		.4byte	s1
 2318 0a23 24       		.uleb128 0x24
 2319 0a24 733200   		.ascii	"s2\000"
 2320 0a27 02       		.byte	0x2
 2321 0a28 67       		.byte	0x67
 2322 0a29 3D010000 		.4byte	0x13d
 2323 0a2d 01       		.byte	0x1
 2324 0a2e 05       		.byte	0x5
 2325 0a2f 03       		.byte	0x3
 2326 0a30 00000000 		.4byte	s2
 2327 0a34 24       		.uleb128 0x24
 2328 0a35 73616300 		.ascii	"sac\000"
 2329 0a39 02       		.byte	0x2
 2330 0a3a 68       		.byte	0x68
 2331 0a3b 3D010000 		.4byte	0x13d
 2332 0a3f 01       		.byte	0x1
 2333 0a40 05       		.byte	0x5
 2334 0a41 03       		.byte	0x3
 2335 0a42 00000000 		.4byte	sac
 2336 0a46 23       		.uleb128 0x23
 2337 0a47 24070000 		.4byte	.LASF154
 2338 0a4b 02       		.byte	0x2
 2339 0a4c 69       		.byte	0x69
 2340 0a4d 24010000 		.4byte	0x124
 2341 0a51 01       		.byte	0x1
 2342 0a52 05       		.byte	0x5
 2343 0a53 03       		.byte	0x3
 2344 0a54 00000000 		.4byte	sac_aux
 2345 0a58 23       		.uleb128 0x23
 2346 0a59 B2030000 		.4byte	.LASF155
 2347 0a5d 02       		.byte	0x2
 2348 0a5e 6C       		.byte	0x6c
 2349 0a5f 11090000 		.4byte	0x911
 2350 0a63 01       		.byte	0x1
 2351 0a64 05       		.byte	0x5
 2352 0a65 03       		.byte	0x3
ARM GAS  /tmp/cc2DuVcX.s 			page 79


 2353 0a66 00000000 		.4byte	usart1_mini_timeout
 2354 0a6a 23       		.uleb128 0x23
 2355 0a6b 2E020000 		.4byte	.LASF156
 2356 0a6f 02       		.byte	0x2
 2357 0a70 6D       		.byte	0x6d
 2358 0a71 11090000 		.4byte	0x911
 2359 0a75 01       		.byte	0x1
 2360 0a76 05       		.byte	0x5
 2361 0a77 03       		.byte	0x3
 2362 0a78 00000000 		.4byte	usart1_pckt_ready
 2363 0a7c 23       		.uleb128 0x23
 2364 0a7d A1020000 		.4byte	.LASF157
 2365 0a81 02       		.byte	0x2
 2366 0a82 6E       		.byte	0x6e
 2367 0a83 11090000 		.4byte	0x911
 2368 0a87 01       		.byte	0x1
 2369 0a88 05       		.byte	0x5
 2370 0a89 03       		.byte	0x3
 2371 0a8a 00000000 		.4byte	usart1_have_data
 2372 0a8e 23       		.uleb128 0x23
 2373 0a8f F6010000 		.4byte	.LASF158
 2374 0a93 02       		.byte	0x2
 2375 0a94 6F       		.byte	0x6f
 2376 0a95 24010000 		.4byte	0x124
 2377 0a99 01       		.byte	0x1
 2378 0a9a 05       		.byte	0x5
 2379 0a9b 03       		.byte	0x3
 2380 0a9c 00000000 		.4byte	usart1_pckt_bytes
 2381 0aa0 23       		.uleb128 0x23
 2382 0aa1 4D000000 		.4byte	.LASF159
 2383 0aa5 02       		.byte	0x2
 2384 0aa6 93       		.byte	0x93
 2385 0aa7 A5050000 		.4byte	0x5a5
 2386 0aab 01       		.byte	0x1
 2387 0aac 05       		.byte	0x5
 2388 0aad 03       		.byte	0x3
 2389 0aae 00000000 		.4byte	param_struct
 2390 0ab2 23       		.uleb128 0x23
 2391 0ab3 65050000 		.4byte	.LASF160
 2392 0ab7 02       		.byte	0x2
 2393 0ab8 96       		.byte	0x96
 2394 0ab9 FA080000 		.4byte	0x8fa
 2395 0abd 01       		.byte	0x1
 2396 0abe 05       		.byte	0x5
 2397 0abf 03       		.byte	0x3
 2398 0ac0 00000000 		.4byte	wait_ms_var
 2399 0ac4 23       		.uleb128 0x23
 2400 0ac5 C9080000 		.4byte	.LASF161
 2401 0ac9 02       		.byte	0x2
 2402 0aca 97       		.byte	0x97
 2403 0acb FA080000 		.4byte	0x8fa
 2404 0acf 01       		.byte	0x1
 2405 0ad0 05       		.byte	0x5
 2406 0ad1 03       		.byte	0x3
 2407 0ad2 00000000 		.4byte	timer_standby
 2408 0ad6 23       		.uleb128 0x23
 2409 0ad7 06010000 		.4byte	.LASF162
ARM GAS  /tmp/cc2DuVcX.s 			page 80


 2410 0adb 02       		.byte	0x2
 2411 0adc 98       		.byte	0x98
 2412 0add FA080000 		.4byte	0x8fa
 2413 0ae1 01       		.byte	0x1
 2414 0ae2 05       		.byte	0x5
 2415 0ae3 03       		.byte	0x3
 2416 0ae4 00000000 		.4byte	tcp_kalive_timer
 2417 0ae8 23       		.uleb128 0x23
 2418 0ae9 D1030000 		.4byte	.LASF163
 2419 0aed 02       		.byte	0x2
 2420 0aee 9A       		.byte	0x9a
 2421 0aef 11090000 		.4byte	0x911
 2422 0af3 01       		.byte	0x1
 2423 0af4 05       		.byte	0x5
 2424 0af5 03       		.byte	0x3
 2425 0af6 00000000 		.4byte	filter_timer
 2426 0afa 23       		.uleb128 0x23
 2427 0afb 77030000 		.4byte	.LASF164
 2428 0aff 02       		.byte	0x2
 2429 0b00 9F       		.byte	0x9f
 2430 0b01 FA080000 		.4byte	0x8fa
 2431 0b05 01       		.byte	0x1
 2432 0b06 05       		.byte	0x5
 2433 0b07 03       		.byte	0x3
 2434 0b08 00000000 		.4byte	secs
 2435 0b0c 23       		.uleb128 0x23
 2436 0b0d 91050000 		.4byte	.LASF165
 2437 0b11 02       		.byte	0x2
 2438 0b12 A0       		.byte	0xa0
 2439 0b13 11090000 		.4byte	0x911
 2440 0b17 01       		.byte	0x1
 2441 0b18 05       		.byte	0x5
 2442 0b19 03       		.byte	0x3
 2443 0b1a 00000000 		.4byte	hours
 2444 0b1e 23       		.uleb128 0x23
 2445 0b1f 20020000 		.4byte	.LASF166
 2446 0b23 02       		.byte	0x2
 2447 0b24 A1       		.byte	0xa1
 2448 0b25 11090000 		.4byte	0x911
 2449 0b29 01       		.byte	0x1
 2450 0b2a 05       		.byte	0x5
 2451 0b2b 03       		.byte	0x3
 2452 0b2c 00000000 		.4byte	minutes
 2453 0b30 23       		.uleb128 0x23
 2454 0b31 08020000 		.4byte	.LASF167
 2455 0b35 02       		.byte	0x2
 2456 0b36 A5       		.byte	0xa5
 2457 0b37 11090000 		.4byte	0x911
 2458 0b3b 01       		.byte	0x1
 2459 0b3c 05       		.byte	0x5
 2460 0b3d 03       		.byte	0x3
 2461 0b3e 00000000 		.4byte	signal_state
 2462 0b42 23       		.uleb128 0x23
 2463 0b43 B7060000 		.4byte	.LASF168
 2464 0b47 02       		.byte	0x2
 2465 0b48 A6       		.byte	0xa6
 2466 0b49 11090000 		.4byte	0x911
ARM GAS  /tmp/cc2DuVcX.s 			page 81


 2467 0b4d 01       		.byte	0x1
 2468 0b4e 05       		.byte	0x5
 2469 0b4f 03       		.byte	0x3
 2470 0b50 00000000 		.4byte	dmx_timeout_timer
 2471 0b54 0C       		.uleb128 0xc
 2472 0b55 24010000 		.4byte	0x124
 2473 0b59 640B0000 		.4byte	0xb64
 2474 0b5d 0D       		.uleb128 0xd
 2475 0b5e 5D020000 		.4byte	0x25d
 2476 0b62 20       		.byte	0x20
 2477 0b63 00       		.byte	0
 2478 0b64 24       		.uleb128 0x24
 2479 0b65 76643000 		.ascii	"vd0\000"
 2480 0b69 02       		.byte	0x2
 2481 0b6a AC       		.byte	0xac
 2482 0b6b 540B0000 		.4byte	0xb54
 2483 0b6f 01       		.byte	0x1
 2484 0b70 05       		.byte	0x5
 2485 0b71 03       		.byte	0x3
 2486 0b72 00000000 		.4byte	vd0
 2487 0b76 24       		.uleb128 0x24
 2488 0b77 76643100 		.ascii	"vd1\000"
 2489 0b7b 02       		.byte	0x2
 2490 0b7c AD       		.byte	0xad
 2491 0b7d 540B0000 		.4byte	0xb54
 2492 0b81 01       		.byte	0x1
 2493 0b82 05       		.byte	0x5
 2494 0b83 03       		.byte	0x3
 2495 0b84 00000000 		.4byte	vd1
 2496 0b88 24       		.uleb128 0x24
 2497 0b89 76643200 		.ascii	"vd2\000"
 2498 0b8d 02       		.byte	0x2
 2499 0b8e AE       		.byte	0xae
 2500 0b8f 540B0000 		.4byte	0xb54
 2501 0b93 01       		.byte	0x1
 2502 0b94 05       		.byte	0x5
 2503 0b95 03       		.byte	0x3
 2504 0b96 00000000 		.4byte	vd2
 2505 0b9a 24       		.uleb128 0x24
 2506 0b9b 76643300 		.ascii	"vd3\000"
 2507 0b9f 02       		.byte	0x2
 2508 0ba0 AF       		.byte	0xaf
 2509 0ba1 540B0000 		.4byte	0xb54
 2510 0ba5 01       		.byte	0x1
 2511 0ba6 05       		.byte	0x5
 2512 0ba7 03       		.byte	0x3
 2513 0ba8 00000000 		.4byte	vd3
 2514 0bac 24       		.uleb128 0x24
 2515 0bad 76643400 		.ascii	"vd4\000"
 2516 0bb1 02       		.byte	0x2
 2517 0bb2 B0       		.byte	0xb0
 2518 0bb3 540B0000 		.4byte	0xb54
 2519 0bb7 01       		.byte	0x1
 2520 0bb8 05       		.byte	0x5
 2521 0bb9 03       		.byte	0x3
 2522 0bba 00000000 		.4byte	vd4
 2523 0bbe 0C       		.uleb128 0xc
ARM GAS  /tmp/cc2DuVcX.s 			page 82


 2524 0bbf 3D010000 		.4byte	0x13d
 2525 0bc3 CE0B0000 		.4byte	0xbce
 2526 0bc7 0D       		.uleb128 0xd
 2527 0bc8 5D020000 		.4byte	0x25d
 2528 0bcc 10       		.byte	0x10
 2529 0bcd 00       		.byte	0
 2530 0bce 23       		.uleb128 0x23
 2531 0bcf B5080000 		.4byte	.LASF169
 2532 0bd3 02       		.byte	0x2
 2533 0bd4 CB       		.byte	0xcb
 2534 0bd5 BE0B0000 		.4byte	0xbbe
 2535 0bd9 01       		.byte	0x1
 2536 0bda 05       		.byte	0x5
 2537 0bdb 03       		.byte	0x3
 2538 0bdc 00000000 		.4byte	vtemp
 2539 0be0 23       		.uleb128 0x23
 2540 0be1 D2000000 		.4byte	.LASF170
 2541 0be5 02       		.byte	0x2
 2542 0be6 CC       		.byte	0xcc
 2543 0be7 BE0B0000 		.4byte	0xbbe
 2544 0beb 01       		.byte	0x1
 2545 0bec 05       		.byte	0x5
 2546 0bed 03       		.byte	0x3
 2547 0bee 00000000 		.4byte	vpote
 2548 0bf2 00       		.byte	0
 2549              		.section	.debug_abbrev,"",%progbits
 2550              	.Ldebug_abbrev0:
 2551 0000 01       		.uleb128 0x1
 2552 0001 11       		.uleb128 0x11
 2553 0002 01       		.byte	0x1
 2554 0003 25       		.uleb128 0x25
 2555 0004 0E       		.uleb128 0xe
 2556 0005 13       		.uleb128 0x13
 2557 0006 0B       		.uleb128 0xb
 2558 0007 03       		.uleb128 0x3
 2559 0008 0E       		.uleb128 0xe
 2560 0009 1B       		.uleb128 0x1b
 2561 000a 0E       		.uleb128 0xe
 2562 000b 55       		.uleb128 0x55
 2563 000c 06       		.uleb128 0x6
 2564 000d 11       		.uleb128 0x11
 2565 000e 01       		.uleb128 0x1
 2566 000f 52       		.uleb128 0x52
 2567 0010 01       		.uleb128 0x1
 2568 0011 10       		.uleb128 0x10
 2569 0012 06       		.uleb128 0x6
 2570 0013 00       		.byte	0
 2571 0014 00       		.byte	0
 2572 0015 02       		.uleb128 0x2
 2573 0016 04       		.uleb128 0x4
 2574 0017 01       		.byte	0x1
 2575 0018 03       		.uleb128 0x3
 2576 0019 0E       		.uleb128 0xe
 2577 001a 0B       		.uleb128 0xb
 2578 001b 0B       		.uleb128 0xb
 2579 001c 49       		.uleb128 0x49
 2580 001d 13       		.uleb128 0x13
ARM GAS  /tmp/cc2DuVcX.s 			page 83


 2581 001e 3A       		.uleb128 0x3a
 2582 001f 0B       		.uleb128 0xb
 2583 0020 3B       		.uleb128 0x3b
 2584 0021 0B       		.uleb128 0xb
 2585 0022 01       		.uleb128 0x1
 2586 0023 13       		.uleb128 0x13
 2587 0024 00       		.byte	0
 2588 0025 00       		.byte	0
 2589 0026 03       		.uleb128 0x3
 2590 0027 28       		.uleb128 0x28
 2591 0028 00       		.byte	0
 2592 0029 03       		.uleb128 0x3
 2593 002a 0E       		.uleb128 0xe
 2594 002b 1C       		.uleb128 0x1c
 2595 002c 0D       		.uleb128 0xd
 2596 002d 00       		.byte	0
 2597 002e 00       		.byte	0
 2598 002f 04       		.uleb128 0x4
 2599 0030 28       		.uleb128 0x28
 2600 0031 00       		.byte	0
 2601 0032 03       		.uleb128 0x3
 2602 0033 0E       		.uleb128 0xe
 2603 0034 1C       		.uleb128 0x1c
 2604 0035 0B       		.uleb128 0xb
 2605 0036 00       		.byte	0
 2606 0037 00       		.byte	0
 2607 0038 05       		.uleb128 0x5
 2608 0039 24       		.uleb128 0x24
 2609 003a 00       		.byte	0
 2610 003b 0B       		.uleb128 0xb
 2611 003c 0B       		.uleb128 0xb
 2612 003d 3E       		.uleb128 0x3e
 2613 003e 0B       		.uleb128 0xb
 2614 003f 03       		.uleb128 0x3
 2615 0040 0E       		.uleb128 0xe
 2616 0041 00       		.byte	0
 2617 0042 00       		.byte	0
 2618 0043 06       		.uleb128 0x6
 2619 0044 16       		.uleb128 0x16
 2620 0045 00       		.byte	0
 2621 0046 03       		.uleb128 0x3
 2622 0047 0E       		.uleb128 0xe
 2623 0048 3A       		.uleb128 0x3a
 2624 0049 0B       		.uleb128 0xb
 2625 004a 3B       		.uleb128 0x3b
 2626 004b 05       		.uleb128 0x5
 2627 004c 49       		.uleb128 0x49
 2628 004d 13       		.uleb128 0x13
 2629 004e 00       		.byte	0
 2630 004f 00       		.byte	0
 2631 0050 07       		.uleb128 0x7
 2632 0051 16       		.uleb128 0x16
 2633 0052 00       		.byte	0
 2634 0053 03       		.uleb128 0x3
 2635 0054 0E       		.uleb128 0xe
 2636 0055 3A       		.uleb128 0x3a
 2637 0056 0B       		.uleb128 0xb
ARM GAS  /tmp/cc2DuVcX.s 			page 84


 2638 0057 3B       		.uleb128 0x3b
 2639 0058 0B       		.uleb128 0xb
 2640 0059 49       		.uleb128 0x49
 2641 005a 13       		.uleb128 0x13
 2642 005b 00       		.byte	0
 2643 005c 00       		.byte	0
 2644 005d 08       		.uleb128 0x8
 2645 005e 24       		.uleb128 0x24
 2646 005f 00       		.byte	0
 2647 0060 0B       		.uleb128 0xb
 2648 0061 0B       		.uleb128 0xb
 2649 0062 3E       		.uleb128 0x3e
 2650 0063 0B       		.uleb128 0xb
 2651 0064 03       		.uleb128 0x3
 2652 0065 08       		.uleb128 0x8
 2653 0066 00       		.byte	0
 2654 0067 00       		.byte	0
 2655 0068 09       		.uleb128 0x9
 2656 0069 13       		.uleb128 0x13
 2657 006a 01       		.byte	0x1
 2658 006b 0B       		.uleb128 0xb
 2659 006c 05       		.uleb128 0x5
 2660 006d 3A       		.uleb128 0x3a
 2661 006e 0B       		.uleb128 0xb
 2662 006f 3B       		.uleb128 0x3b
 2663 0070 0B       		.uleb128 0xb
 2664 0071 01       		.uleb128 0x1
 2665 0072 13       		.uleb128 0x13
 2666 0073 00       		.byte	0
 2667 0074 00       		.byte	0
 2668 0075 0A       		.uleb128 0xa
 2669 0076 0D       		.uleb128 0xd
 2670 0077 00       		.byte	0
 2671 0078 03       		.uleb128 0x3
 2672 0079 0E       		.uleb128 0xe
 2673 007a 3A       		.uleb128 0x3a
 2674 007b 0B       		.uleb128 0xb
 2675 007c 3B       		.uleb128 0x3b
 2676 007d 0B       		.uleb128 0xb
 2677 007e 49       		.uleb128 0x49
 2678 007f 13       		.uleb128 0x13
 2679 0080 38       		.uleb128 0x38
 2680 0081 0A       		.uleb128 0xa
 2681 0082 00       		.byte	0
 2682 0083 00       		.byte	0
 2683 0084 0B       		.uleb128 0xb
 2684 0085 0D       		.uleb128 0xd
 2685 0086 00       		.byte	0
 2686 0087 03       		.uleb128 0x3
 2687 0088 08       		.uleb128 0x8
 2688 0089 3A       		.uleb128 0x3a
 2689 008a 0B       		.uleb128 0xb
 2690 008b 3B       		.uleb128 0x3b
 2691 008c 0B       		.uleb128 0xb
 2692 008d 49       		.uleb128 0x49
 2693 008e 13       		.uleb128 0x13
 2694 008f 38       		.uleb128 0x38
ARM GAS  /tmp/cc2DuVcX.s 			page 85


 2695 0090 0A       		.uleb128 0xa
 2696 0091 00       		.byte	0
 2697 0092 00       		.byte	0
 2698 0093 0C       		.uleb128 0xc
 2699 0094 01       		.uleb128 0x1
 2700 0095 01       		.byte	0x1
 2701 0096 49       		.uleb128 0x49
 2702 0097 13       		.uleb128 0x13
 2703 0098 01       		.uleb128 0x1
 2704 0099 13       		.uleb128 0x13
 2705 009a 00       		.byte	0
 2706 009b 00       		.byte	0
 2707 009c 0D       		.uleb128 0xd
 2708 009d 21       		.uleb128 0x21
 2709 009e 00       		.byte	0
 2710 009f 49       		.uleb128 0x49
 2711 00a0 13       		.uleb128 0x13
 2712 00a1 2F       		.uleb128 0x2f
 2713 00a2 0B       		.uleb128 0xb
 2714 00a3 00       		.byte	0
 2715 00a4 00       		.byte	0
 2716 00a5 0E       		.uleb128 0xe
 2717 00a6 35       		.uleb128 0x35
 2718 00a7 00       		.byte	0
 2719 00a8 49       		.uleb128 0x49
 2720 00a9 13       		.uleb128 0x13
 2721 00aa 00       		.byte	0
 2722 00ab 00       		.byte	0
 2723 00ac 0F       		.uleb128 0xf
 2724 00ad 13       		.uleb128 0x13
 2725 00ae 01       		.byte	0x1
 2726 00af 0B       		.uleb128 0xb
 2727 00b0 0B       		.uleb128 0xb
 2728 00b1 3A       		.uleb128 0x3a
 2729 00b2 0B       		.uleb128 0xb
 2730 00b3 3B       		.uleb128 0x3b
 2731 00b4 0B       		.uleb128 0xb
 2732 00b5 01       		.uleb128 0x1
 2733 00b6 13       		.uleb128 0x13
 2734 00b7 00       		.byte	0
 2735 00b8 00       		.byte	0
 2736 00b9 10       		.uleb128 0x10
 2737 00ba 26       		.uleb128 0x26
 2738 00bb 00       		.byte	0
 2739 00bc 49       		.uleb128 0x49
 2740 00bd 13       		.uleb128 0x13
 2741 00be 00       		.byte	0
 2742 00bf 00       		.byte	0
 2743 00c0 11       		.uleb128 0x11
 2744 00c1 0D       		.uleb128 0xd
 2745 00c2 00       		.byte	0
 2746 00c3 03       		.uleb128 0x3
 2747 00c4 08       		.uleb128 0x8
 2748 00c5 3A       		.uleb128 0x3a
 2749 00c6 0B       		.uleb128 0xb
 2750 00c7 3B       		.uleb128 0x3b
 2751 00c8 05       		.uleb128 0x5
ARM GAS  /tmp/cc2DuVcX.s 			page 86


 2752 00c9 49       		.uleb128 0x49
 2753 00ca 13       		.uleb128 0x13
 2754 00cb 38       		.uleb128 0x38
 2755 00cc 0A       		.uleb128 0xa
 2756 00cd 00       		.byte	0
 2757 00ce 00       		.byte	0
 2758 00cf 12       		.uleb128 0x12
 2759 00d0 0D       		.uleb128 0xd
 2760 00d1 00       		.byte	0
 2761 00d2 03       		.uleb128 0x3
 2762 00d3 0E       		.uleb128 0xe
 2763 00d4 3A       		.uleb128 0x3a
 2764 00d5 0B       		.uleb128 0xb
 2765 00d6 3B       		.uleb128 0x3b
 2766 00d7 05       		.uleb128 0x5
 2767 00d8 49       		.uleb128 0x49
 2768 00d9 13       		.uleb128 0x13
 2769 00da 38       		.uleb128 0x38
 2770 00db 0A       		.uleb128 0xa
 2771 00dc 00       		.byte	0
 2772 00dd 00       		.byte	0
 2773 00de 13       		.uleb128 0x13
 2774 00df 13       		.uleb128 0x13
 2775 00e0 01       		.byte	0x1
 2776 00e1 0B       		.uleb128 0xb
 2777 00e2 0B       		.uleb128 0xb
 2778 00e3 3A       		.uleb128 0x3a
 2779 00e4 0B       		.uleb128 0xb
 2780 00e5 3B       		.uleb128 0x3b
 2781 00e6 05       		.uleb128 0x5
 2782 00e7 01       		.uleb128 0x1
 2783 00e8 13       		.uleb128 0x13
 2784 00e9 00       		.byte	0
 2785 00ea 00       		.byte	0
 2786 00eb 14       		.uleb128 0x14
 2787 00ec 04       		.uleb128 0x4
 2788 00ed 01       		.byte	0x1
 2789 00ee 0B       		.uleb128 0xb
 2790 00ef 0B       		.uleb128 0xb
 2791 00f0 49       		.uleb128 0x49
 2792 00f1 13       		.uleb128 0x13
 2793 00f2 3A       		.uleb128 0x3a
 2794 00f3 0B       		.uleb128 0xb
 2795 00f4 3B       		.uleb128 0x3b
 2796 00f5 0B       		.uleb128 0xb
 2797 00f6 01       		.uleb128 0x1
 2798 00f7 13       		.uleb128 0x13
 2799 00f8 00       		.byte	0
 2800 00f9 00       		.byte	0
 2801 00fa 15       		.uleb128 0x15
 2802 00fb 13       		.uleb128 0x13
 2803 00fc 01       		.byte	0x1
 2804 00fd 03       		.uleb128 0x3
 2805 00fe 0E       		.uleb128 0xe
 2806 00ff 0B       		.uleb128 0xb
 2807 0100 0B       		.uleb128 0xb
 2808 0101 3A       		.uleb128 0x3a
ARM GAS  /tmp/cc2DuVcX.s 			page 87


 2809 0102 0B       		.uleb128 0xb
 2810 0103 3B       		.uleb128 0x3b
 2811 0104 0B       		.uleb128 0xb
 2812 0105 01       		.uleb128 0x1
 2813 0106 13       		.uleb128 0x13
 2814 0107 00       		.byte	0
 2815 0108 00       		.byte	0
 2816 0109 16       		.uleb128 0x16
 2817 010a 2E       		.uleb128 0x2e
 2818 010b 01       		.byte	0x1
 2819 010c 03       		.uleb128 0x3
 2820 010d 0E       		.uleb128 0xe
 2821 010e 3A       		.uleb128 0x3a
 2822 010f 0B       		.uleb128 0xb
 2823 0110 3B       		.uleb128 0x3b
 2824 0111 05       		.uleb128 0x5
 2825 0112 27       		.uleb128 0x27
 2826 0113 0C       		.uleb128 0xc
 2827 0114 11       		.uleb128 0x11
 2828 0115 01       		.uleb128 0x1
 2829 0116 12       		.uleb128 0x12
 2830 0117 01       		.uleb128 0x1
 2831 0118 40       		.uleb128 0x40
 2832 0119 06       		.uleb128 0x6
 2833 011a 9742     		.uleb128 0x2117
 2834 011c 0C       		.uleb128 0xc
 2835 011d 01       		.uleb128 0x1
 2836 011e 13       		.uleb128 0x13
 2837 011f 00       		.byte	0
 2838 0120 00       		.byte	0
 2839 0121 17       		.uleb128 0x17
 2840 0122 05       		.uleb128 0x5
 2841 0123 00       		.byte	0
 2842 0124 03       		.uleb128 0x3
 2843 0125 0E       		.uleb128 0xe
 2844 0126 3A       		.uleb128 0x3a
 2845 0127 0B       		.uleb128 0xb
 2846 0128 3B       		.uleb128 0x3b
 2847 0129 05       		.uleb128 0x5
 2848 012a 49       		.uleb128 0x49
 2849 012b 13       		.uleb128 0x13
 2850 012c 02       		.uleb128 0x2
 2851 012d 0A       		.uleb128 0xa
 2852 012e 00       		.byte	0
 2853 012f 00       		.byte	0
 2854 0130 18       		.uleb128 0x18
 2855 0131 2E       		.uleb128 0x2e
 2856 0132 01       		.byte	0x1
 2857 0133 03       		.uleb128 0x3
 2858 0134 0E       		.uleb128 0xe
 2859 0135 3A       		.uleb128 0x3a
 2860 0136 0B       		.uleb128 0xb
 2861 0137 3B       		.uleb128 0x3b
 2862 0138 05       		.uleb128 0x5
 2863 0139 27       		.uleb128 0x27
 2864 013a 0C       		.uleb128 0xc
 2865 013b 49       		.uleb128 0x49
ARM GAS  /tmp/cc2DuVcX.s 			page 88


 2866 013c 13       		.uleb128 0x13
 2867 013d 11       		.uleb128 0x11
 2868 013e 01       		.uleb128 0x1
 2869 013f 12       		.uleb128 0x12
 2870 0140 01       		.uleb128 0x1
 2871 0141 40       		.uleb128 0x40
 2872 0142 06       		.uleb128 0x6
 2873 0143 9642     		.uleb128 0x2116
 2874 0145 0C       		.uleb128 0xc
 2875 0146 01       		.uleb128 0x1
 2876 0147 13       		.uleb128 0x13
 2877 0148 00       		.byte	0
 2878 0149 00       		.byte	0
 2879 014a 19       		.uleb128 0x19
 2880 014b 2E       		.uleb128 0x2e
 2881 014c 01       		.byte	0x1
 2882 014d 3F       		.uleb128 0x3f
 2883 014e 0C       		.uleb128 0xc
 2884 014f 03       		.uleb128 0x3
 2885 0150 0E       		.uleb128 0xe
 2886 0151 3A       		.uleb128 0x3a
 2887 0152 0B       		.uleb128 0xb
 2888 0153 3B       		.uleb128 0x3b
 2889 0154 0B       		.uleb128 0xb
 2890 0155 27       		.uleb128 0x27
 2891 0156 0C       		.uleb128 0xc
 2892 0157 49       		.uleb128 0x49
 2893 0158 13       		.uleb128 0x13
 2894 0159 11       		.uleb128 0x11
 2895 015a 01       		.uleb128 0x1
 2896 015b 12       		.uleb128 0x12
 2897 015c 01       		.uleb128 0x1
 2898 015d 40       		.uleb128 0x40
 2899 015e 06       		.uleb128 0x6
 2900 015f 9642     		.uleb128 0x2116
 2901 0161 0C       		.uleb128 0xc
 2902 0162 01       		.uleb128 0x1
 2903 0163 13       		.uleb128 0x13
 2904 0164 00       		.byte	0
 2905 0165 00       		.byte	0
 2906 0166 1A       		.uleb128 0x1a
 2907 0167 34       		.uleb128 0x34
 2908 0168 00       		.byte	0
 2909 0169 03       		.uleb128 0x3
 2910 016a 08       		.uleb128 0x8
 2911 016b 3A       		.uleb128 0x3a
 2912 016c 0B       		.uleb128 0xb
 2913 016d 3B       		.uleb128 0x3b
 2914 016e 0B       		.uleb128 0xb
 2915 016f 49       		.uleb128 0x49
 2916 0170 13       		.uleb128 0x13
 2917 0171 02       		.uleb128 0x2
 2918 0172 0A       		.uleb128 0xa
 2919 0173 00       		.byte	0
 2920 0174 00       		.byte	0
 2921 0175 1B       		.uleb128 0x1b
 2922 0176 34       		.uleb128 0x34
ARM GAS  /tmp/cc2DuVcX.s 			page 89


 2923 0177 00       		.byte	0
 2924 0178 03       		.uleb128 0x3
 2925 0179 08       		.uleb128 0x8
 2926 017a 3A       		.uleb128 0x3a
 2927 017b 0B       		.uleb128 0xb
 2928 017c 3B       		.uleb128 0x3b
 2929 017d 0B       		.uleb128 0xb
 2930 017e 49       		.uleb128 0x49
 2931 017f 13       		.uleb128 0x13
 2932 0180 00       		.byte	0
 2933 0181 00       		.byte	0
 2934 0182 1C       		.uleb128 0x1c
 2935 0183 34       		.uleb128 0x34
 2936 0184 00       		.byte	0
 2937 0185 03       		.uleb128 0x3
 2938 0186 0E       		.uleb128 0xe
 2939 0187 3A       		.uleb128 0x3a
 2940 0188 0B       		.uleb128 0xb
 2941 0189 3B       		.uleb128 0x3b
 2942 018a 0B       		.uleb128 0xb
 2943 018b 49       		.uleb128 0x49
 2944 018c 13       		.uleb128 0x13
 2945 018d 00       		.byte	0
 2946 018e 00       		.byte	0
 2947 018f 1D       		.uleb128 0x1d
 2948 0190 34       		.uleb128 0x34
 2949 0191 00       		.byte	0
 2950 0192 03       		.uleb128 0x3
 2951 0193 0E       		.uleb128 0xe
 2952 0194 3A       		.uleb128 0x3a
 2953 0195 0B       		.uleb128 0xb
 2954 0196 3B       		.uleb128 0x3b
 2955 0197 0B       		.uleb128 0xb
 2956 0198 49       		.uleb128 0x49
 2957 0199 13       		.uleb128 0x13
 2958 019a 02       		.uleb128 0x2
 2959 019b 0A       		.uleb128 0xa
 2960 019c 00       		.byte	0
 2961 019d 00       		.byte	0
 2962 019e 1E       		.uleb128 0x1e
 2963 019f 0F       		.uleb128 0xf
 2964 01a0 00       		.byte	0
 2965 01a1 0B       		.uleb128 0xb
 2966 01a2 0B       		.uleb128 0xb
 2967 01a3 49       		.uleb128 0x49
 2968 01a4 13       		.uleb128 0x13
 2969 01a5 00       		.byte	0
 2970 01a6 00       		.byte	0
 2971 01a7 1F       		.uleb128 0x1f
 2972 01a8 2E       		.uleb128 0x2e
 2973 01a9 01       		.byte	0x1
 2974 01aa 3F       		.uleb128 0x3f
 2975 01ab 0C       		.uleb128 0xc
 2976 01ac 03       		.uleb128 0x3
 2977 01ad 0E       		.uleb128 0xe
 2978 01ae 3A       		.uleb128 0x3a
 2979 01af 0B       		.uleb128 0xb
ARM GAS  /tmp/cc2DuVcX.s 			page 90


 2980 01b0 3B       		.uleb128 0x3b
 2981 01b1 05       		.uleb128 0x5
 2982 01b2 27       		.uleb128 0x27
 2983 01b3 0C       		.uleb128 0xc
 2984 01b4 11       		.uleb128 0x11
 2985 01b5 01       		.uleb128 0x1
 2986 01b6 12       		.uleb128 0x12
 2987 01b7 01       		.uleb128 0x1
 2988 01b8 40       		.uleb128 0x40
 2989 01b9 06       		.uleb128 0x6
 2990 01ba 9642     		.uleb128 0x2116
 2991 01bc 0C       		.uleb128 0xc
 2992 01bd 01       		.uleb128 0x1
 2993 01be 13       		.uleb128 0x13
 2994 01bf 00       		.byte	0
 2995 01c0 00       		.byte	0
 2996 01c1 20       		.uleb128 0x20
 2997 01c2 34       		.uleb128 0x34
 2998 01c3 00       		.byte	0
 2999 01c4 03       		.uleb128 0x3
 3000 01c5 08       		.uleb128 0x8
 3001 01c6 3A       		.uleb128 0x3a
 3002 01c7 0B       		.uleb128 0xb
 3003 01c8 3B       		.uleb128 0x3b
 3004 01c9 05       		.uleb128 0x5
 3005 01ca 49       		.uleb128 0x49
 3006 01cb 13       		.uleb128 0x13
 3007 01cc 02       		.uleb128 0x2
 3008 01cd 0A       		.uleb128 0xa
 3009 01ce 00       		.byte	0
 3010 01cf 00       		.byte	0
 3011 01d0 21       		.uleb128 0x21
 3012 01d1 34       		.uleb128 0x34
 3013 01d2 00       		.byte	0
 3014 01d3 03       		.uleb128 0x3
 3015 01d4 0E       		.uleb128 0xe
 3016 01d5 3A       		.uleb128 0x3a
 3017 01d6 0B       		.uleb128 0xb
 3018 01d7 3B       		.uleb128 0x3b
 3019 01d8 05       		.uleb128 0x5
 3020 01d9 49       		.uleb128 0x49
 3021 01da 13       		.uleb128 0x13
 3022 01db 02       		.uleb128 0x2
 3023 01dc 0A       		.uleb128 0xa
 3024 01dd 00       		.byte	0
 3025 01de 00       		.byte	0
 3026 01df 22       		.uleb128 0x22
 3027 01e0 2E       		.uleb128 0x2e
 3028 01e1 00       		.byte	0
 3029 01e2 3F       		.uleb128 0x3f
 3030 01e3 0C       		.uleb128 0xc
 3031 01e4 03       		.uleb128 0x3
 3032 01e5 0E       		.uleb128 0xe
 3033 01e6 3A       		.uleb128 0x3a
 3034 01e7 0B       		.uleb128 0xb
 3035 01e8 3B       		.uleb128 0x3b
 3036 01e9 05       		.uleb128 0x5
ARM GAS  /tmp/cc2DuVcX.s 			page 91


 3037 01ea 27       		.uleb128 0x27
 3038 01eb 0C       		.uleb128 0xc
 3039 01ec 11       		.uleb128 0x11
 3040 01ed 01       		.uleb128 0x1
 3041 01ee 12       		.uleb128 0x12
 3042 01ef 01       		.uleb128 0x1
 3043 01f0 40       		.uleb128 0x40
 3044 01f1 0A       		.uleb128 0xa
 3045 01f2 9742     		.uleb128 0x2117
 3046 01f4 0C       		.uleb128 0xc
 3047 01f5 00       		.byte	0
 3048 01f6 00       		.byte	0
 3049 01f7 23       		.uleb128 0x23
 3050 01f8 34       		.uleb128 0x34
 3051 01f9 00       		.byte	0
 3052 01fa 03       		.uleb128 0x3
 3053 01fb 0E       		.uleb128 0xe
 3054 01fc 3A       		.uleb128 0x3a
 3055 01fd 0B       		.uleb128 0xb
 3056 01fe 3B       		.uleb128 0x3b
 3057 01ff 0B       		.uleb128 0xb
 3058 0200 49       		.uleb128 0x49
 3059 0201 13       		.uleb128 0x13
 3060 0202 3F       		.uleb128 0x3f
 3061 0203 0C       		.uleb128 0xc
 3062 0204 02       		.uleb128 0x2
 3063 0205 0A       		.uleb128 0xa
 3064 0206 00       		.byte	0
 3065 0207 00       		.byte	0
 3066 0208 24       		.uleb128 0x24
 3067 0209 34       		.uleb128 0x34
 3068 020a 00       		.byte	0
 3069 020b 03       		.uleb128 0x3
 3070 020c 08       		.uleb128 0x8
 3071 020d 3A       		.uleb128 0x3a
 3072 020e 0B       		.uleb128 0xb
 3073 020f 3B       		.uleb128 0x3b
 3074 0210 0B       		.uleb128 0xb
 3075 0211 49       		.uleb128 0x49
 3076 0212 13       		.uleb128 0x13
 3077 0213 3F       		.uleb128 0x3f
 3078 0214 0C       		.uleb128 0xc
 3079 0215 02       		.uleb128 0x2
 3080 0216 0A       		.uleb128 0xa
 3081 0217 00       		.byte	0
 3082 0218 00       		.byte	0
 3083 0219 00       		.byte	0
 3084              		.section	.debug_loc,"",%progbits
 3085              	.Ldebug_loc0:
 3086              	.LLST0:
 3087 0000 00000000 		.4byte	.LFB16
 3088 0004 02000000 		.4byte	.LCFI0
 3089 0008 0200     		.2byte	0x2
 3090 000a 7D       		.byte	0x7d
 3091 000b 00       		.sleb128 0
 3092 000c 02000000 		.4byte	.LCFI0
 3093 0010 04000000 		.4byte	.LCFI1
ARM GAS  /tmp/cc2DuVcX.s 			page 92


 3094 0014 0200     		.2byte	0x2
 3095 0016 7D       		.byte	0x7d
 3096 0017 0C       		.sleb128 12
 3097 0018 04000000 		.4byte	.LCFI1
 3098 001c EC000000 		.4byte	.LFE16
 3099 0020 0200     		.2byte	0x2
 3100 0022 7D       		.byte	0x7d
 3101 0023 18       		.sleb128 24
 3102 0024 00000000 		.4byte	0
 3103 0028 00000000 		.4byte	0
 3104              	.LLST1:
 3105 002c 00000000 		.4byte	.LFB18
 3106 0030 02000000 		.4byte	.LCFI2
 3107 0034 0200     		.2byte	0x2
 3108 0036 7D       		.byte	0x7d
 3109 0037 00       		.sleb128 0
 3110 0038 02000000 		.4byte	.LCFI2
 3111 003c 04000000 		.4byte	.LCFI3
 3112 0040 0200     		.2byte	0x2
 3113 0042 7D       		.byte	0x7d
 3114 0043 04       		.sleb128 4
 3115 0044 04000000 		.4byte	.LCFI3
 3116 0048 48000000 		.4byte	.LFE18
 3117 004c 0200     		.2byte	0x2
 3118 004e 7D       		.byte	0x7d
 3119 004f 10       		.sleb128 16
 3120 0050 00000000 		.4byte	0
 3121 0054 00000000 		.4byte	0
 3122              	.LLST2:
 3123 0058 00000000 		.4byte	.LFB20
 3124 005c 02000000 		.4byte	.LCFI4
 3125 0060 0200     		.2byte	0x2
 3126 0062 7D       		.byte	0x7d
 3127 0063 00       		.sleb128 0
 3128 0064 02000000 		.4byte	.LCFI4
 3129 0068 04000000 		.4byte	.LCFI5
 3130 006c 0200     		.2byte	0x2
 3131 006e 7D       		.byte	0x7d
 3132 006f 04       		.sleb128 4
 3133 0070 04000000 		.4byte	.LCFI5
 3134 0074 90010000 		.4byte	.LFE20
 3135 0078 0200     		.2byte	0x2
 3136 007a 7D       		.byte	0x7d
 3137 007b 30       		.sleb128 48
 3138 007c 00000000 		.4byte	0
 3139 0080 00000000 		.4byte	0
 3140              	.LLST3:
 3141 0084 00000000 		.4byte	.LFB21
 3142 0088 02000000 		.4byte	.LCFI6
 3143 008c 0200     		.2byte	0x2
 3144 008e 7D       		.byte	0x7d
 3145 008f 00       		.sleb128 0
 3146 0090 02000000 		.4byte	.LCFI6
 3147 0094 04000000 		.4byte	.LCFI7
 3148 0098 0200     		.2byte	0x2
 3149 009a 7D       		.byte	0x7d
 3150 009b 04       		.sleb128 4
ARM GAS  /tmp/cc2DuVcX.s 			page 93


 3151 009c 04000000 		.4byte	.LCFI7
 3152 00a0 B0000000 		.4byte	.LFE21
 3153 00a4 0300     		.2byte	0x3
 3154 00a6 7D       		.byte	0x7d
 3155 00a7 E000     		.sleb128 96
 3156 00a9 00000000 		.4byte	0
 3157 00ad 00000000 		.4byte	0
 3158              		.section	.debug_aranges,"",%progbits
 3159 0000 3C000000 		.4byte	0x3c
 3160 0004 0200     		.2byte	0x2
 3161 0006 00000000 		.4byte	.Ldebug_info0
 3162 000a 04       		.byte	0x4
 3163 000b 00       		.byte	0
 3164 000c 0000     		.2byte	0
 3165 000e 0000     		.2byte	0
 3166 0010 00000000 		.4byte	.LFB16
 3167 0014 EC000000 		.4byte	.LFE16-.LFB16
 3168 0018 00000000 		.4byte	.LFB18
 3169 001c 48000000 		.4byte	.LFE18-.LFB18
 3170 0020 00000000 		.4byte	.LFB20
 3171 0024 90010000 		.4byte	.LFE20-.LFB20
 3172 0028 00000000 		.4byte	.LFB21
 3173 002c B0000000 		.4byte	.LFE21-.LFB21
 3174 0030 00000000 		.4byte	.LFB22
 3175 0034 28010000 		.4byte	.LFE22-.LFB22
 3176 0038 00000000 		.4byte	0
 3177 003c 00000000 		.4byte	0
 3178              		.section	.debug_ranges,"",%progbits
 3179              	.Ldebug_ranges0:
 3180 0000 00000000 		.4byte	.LFB16
 3181 0004 EC000000 		.4byte	.LFE16
 3182 0008 00000000 		.4byte	.LFB18
 3183 000c 48000000 		.4byte	.LFE18
 3184 0010 00000000 		.4byte	.LFB20
 3185 0014 90010000 		.4byte	.LFE20
 3186 0018 00000000 		.4byte	.LFB21
 3187 001c B0000000 		.4byte	.LFE21
 3188 0020 00000000 		.4byte	.LFB22
 3189 0024 28010000 		.4byte	.LFE22
 3190 0028 00000000 		.4byte	0
 3191 002c 00000000 		.4byte	0
 3192              		.section	.debug_line,"",%progbits
 3193              	.Ldebug_line0:
 3194 0000 2F020000 		.section	.debug_str,"MS",%progbits,1
 3194      02003D01 
 3194      00000201 
 3194      FB0E0D00 
 3194      01010101 
 3195              	.LASF119:
 3196 0000 735F6C63 		.ascii	"s_lcd\000"
 3196      6400
 3197              	.LASF94:
 3198 0006 70776D5F 		.ascii	"pwm_channel_1\000"
 3198      6368616E 
 3198      6E656C5F 
 3198      3100
 3199              	.LASF95:
ARM GAS  /tmp/cc2DuVcX.s 			page 94


 3200 0014 70776D5F 		.ascii	"pwm_channel_2\000"
 3200      6368616E 
 3200      6E656C5F 
 3200      3200
 3201              	.LASF96:
 3202 0022 70776D5F 		.ascii	"pwm_channel_3\000"
 3202      6368616E 
 3202      6E656C5F 
 3202      3300
 3203              	.LASF97:
 3204 0030 70776D5F 		.ascii	"pwm_channel_4\000"
 3204      6368616E 
 3204      6E656C5F 
 3204      3400
 3205              	.LASF140:
 3206 003e 61637377 		.ascii	"acswitch_timer\000"
 3206      69746368 
 3206      5F74696D 
 3206      657200
 3207              	.LASF159:
 3208 004d 70617261 		.ascii	"param_struct\000"
 3208      6D5F7374 
 3208      72756374 
 3208      00
 3209              	.LASF89:
 3210 005a 6C617374 		.ascii	"last_program_deep_in_flash\000"
 3210      5F70726F 
 3210      6772616D 
 3210      5F646565 
 3210      705F696E 
 3211              	.LASF12:
 3212 0075 45585449 		.ascii	"EXTI4_15_IRQn\000"
 3212      345F3135 
 3212      5F495251 
 3212      6E00
 3213              	.LASF78:
 3214 0083 42535252 		.ascii	"BSRR\000"
 3214      00
 3215              	.LASF87:
 3216 0088 6C617374 		.ascii	"last_function_in_flash\000"
 3216      5F66756E 
 3216      6374696F 
 3216      6E5F696E 
 3216      5F666C61 
 3217              	.LASF11:
 3218 009f 45585449 		.ascii	"EXTI2_3_IRQn\000"
 3218      325F335F 
 3218      4952516E 
 3218      00
 3219              	.LASF116:
 3220 00ac 6D61696E 		.ascii	"main_state\000"
 3220      5F737461 
 3220      746500
 3221              	.LASF127:
 3222 00b7 705F6D65 		.ascii	"p_mem_init\000"
 3222      6D5F696E 
 3222      697400
ARM GAS  /tmp/cc2DuVcX.s 			page 95


 3223              	.LASF2:
 3224 00c2 5356435F 		.ascii	"SVC_IRQn\000"
 3224      4952516E 
 3224      00
 3225              	.LASF128:
 3226 00cb 62756666 		.ascii	"buffer\000"
 3226      657200
 3227              	.LASF170:
 3228 00d2 76706F74 		.ascii	"vpote\000"
 3228      6500
 3229              	.LASF175:
 3230 00d8 4E564943 		.ascii	"NVIC_SetPriority\000"
 3230      5F536574 
 3230      5072696F 
 3230      72697479 
 3230      00
 3231              	.LASF47:
 3232 00e9 756E7369 		.ascii	"unsigned int\000"
 3232      676E6564 
 3232      20696E74 
 3232      00
 3233              	.LASF71:
 3234 00f6 4C4F4144 		.ascii	"LOAD\000"
 3234      00
 3235              	.LASF25:
 3236 00fb 54494D31 		.ascii	"TIM16_IRQn\000"
 3236      365F4952 
 3236      516E00
 3237              	.LASF162:
 3238 0106 7463705F 		.ascii	"tcp_kalive_timer\000"
 3238      6B616C69 
 3238      76655F74 
 3238      696D6572 
 3238      00
 3239              	.LASF41:
 3240 0117 5F5F696E 		.ascii	"__int32_t\000"
 3240      7433325F 
 3240      7400
 3241              	.LASF135:
 3242 0121 72783262 		.ascii	"rx2buff\000"
 3242      75666600 
 3243              	.LASF8:
 3244 0129 464C4153 		.ascii	"FLASH_IRQn\000"
 3244      485F4952 
 3244      516E00
 3245              	.LASF137:
 3246 0134 72783162 		.ascii	"rx1buff\000"
 3246      75666600 
 3247              	.LASF90:
 3248 013c 64756D6D 		.ascii	"dummy\000"
 3248      7900
 3249              	.LASF72:
 3250 0142 43414C49 		.ascii	"CALIB\000"
 3250      4200
 3251              	.LASF134:
 3252 0148 74783262 		.ascii	"tx2buff\000"
 3252      75666600 
ARM GAS  /tmp/cc2DuVcX.s 			page 96


 3253              	.LASF10:
 3254 0150 45585449 		.ascii	"EXTI0_1_IRQn\000"
 3254      305F315F 
 3254      4952516E 
 3254      00
 3255              	.LASF145:
 3256 015d 67726F75 		.ascii	"grouped_master_timeout_timer\000"
 3256      7065645F 
 3256      6D617374 
 3256      65725F74 
 3256      696D656F 
 3257              	.LASF153:
 3258 017a 76677269 		.ascii	"vgrid_timer\000"
 3258      645F7469 
 3258      6D657200 
 3259              	.LASF27:
 3260 0186 49324331 		.ascii	"I2C1_IRQn\000"
 3260      5F495251 
 3260      6E00
 3261              	.LASF3:
 3262 0190 50656E64 		.ascii	"PendSV_IRQn\000"
 3262      53565F49 
 3262      52516E00 
 3263              	.LASF9:
 3264 019c 5243435F 		.ascii	"RCC_IRQn\000"
 3264      4952516E 
 3264      00
 3265              	.LASF124:
 3266 01a5 73686F77 		.ascii	"show_ldr\000"
 3266      5F6C6472 
 3266      00
 3267              	.LASF51:
 3268 01ae 75696E74 		.ascii	"uint32_t\000"
 3268      33325F74 
 3268      00
 3269              	.LASF52:
 3270 01b7 49534552 		.ascii	"ISER\000"
 3270      00
 3271              	.LASF133:
 3272 01bc 666C6F61 		.ascii	"float\000"
 3272      7400
 3273              	.LASF117:
 3274 01c2 68797374 		.ascii	"hyst\000"
 3274      00
 3275              	.LASF55:
 3276 01c7 52534552 		.ascii	"RSERVED1\000"
 3276      56454431 
 3276      00
 3277              	.LASF29:
 3278 01d0 53504931 		.ascii	"SPI1_IRQn\000"
 3278      5F495251 
 3278      6E00
 3279              	.LASF46:
 3280 01da 6C6F6E67 		.ascii	"long long unsigned int\000"
 3280      206C6F6E 
 3280      6720756E 
 3280      7369676E 
ARM GAS  /tmp/cc2DuVcX.s 			page 97


 3280      65642069 
 3281              	.LASF68:
 3282 01f1 44465352 		.ascii	"DFSR\000"
 3282      00
 3283              	.LASF158:
 3284 01f6 75736172 		.ascii	"usart1_pckt_bytes\000"
 3284      74315F70 
 3284      636B745F 
 3284      62797465 
 3284      7300
 3285              	.LASF167:
 3286 0208 7369676E 		.ascii	"signal_state\000"
 3286      616C5F73 
 3286      74617465 
 3286      00
 3287              	.LASF39:
 3288 0215 5F5F7569 		.ascii	"__uint16_t\000"
 3288      6E743136 
 3288      5F7400
 3289              	.LASF166:
 3290 0220 6D696E75 		.ascii	"minutes\000"
 3290      74657300 
 3291              	.LASF74:
 3292 0228 4D4F4445 		.ascii	"MODER\000"
 3292      5200
 3293              	.LASF156:
 3294 022e 75736172 		.ascii	"usart1_pckt_ready\000"
 3294      74315F70 
 3294      636B745F 
 3294      72656164 
 3294      7900
 3295              	.LASF34:
 3296 0240 4952516E 		.ascii	"IRQn_Type\000"
 3296      5F547970 
 3296      6500
 3297              	.LASF100:
 3298 024a 5463704D 		.ascii	"TcpMessages\000"
 3298      65737361 
 3298      67657300 
 3299              	.LASF32:
 3300 0256 55534152 		.ascii	"USART2_IRQn\000"
 3300      54325F49 
 3300      52516E00 
 3301              	.LASF63:
 3302 0262 43505549 		.ascii	"CPUID\000"
 3302      4400
 3303              	.LASF149:
 3304 0268 74745F74 		.ascii	"tt_take_photo_sample\000"
 3304      616B655F 
 3304      70686F74 
 3304      6F5F7361 
 3304      6D706C65 
 3305              	.LASF152:
 3306 027d 69677269 		.ascii	"igrid_timer\000"
 3306      645F7469 
 3306      6D657200 
 3307              	.LASF176:
ARM GAS  /tmp/cc2DuVcX.s 			page 98


 3308 0289 53797354 		.ascii	"SysTick_Config\000"
 3308      69636B5F 
 3308      436F6E66 
 3308      696700
 3309              	.LASF101:
 3310 0298 4E4F4E45 		.ascii	"NONE_MSG\000"
 3310      5F4D5347 
 3310      00
 3311              	.LASF157:
 3312 02a1 75736172 		.ascii	"usart1_have_data\000"
 3312      74315F68 
 3312      6176655F 
 3312      64617461 
 3312      00
 3313              	.LASF77:
 3314 02b2 50555044 		.ascii	"PUPDR\000"
 3314      5200
 3315              	.LASF109:
 3316 02b8 7469636B 		.ascii	"ticks\000"
 3316      7300
 3317              	.LASF138:
 3318 02be 73686F77 		.ascii	"show_select_timer\000"
 3318      5F73656C 
 3318      6563745F 
 3318      74696D65 
 3318      7200
 3319              	.LASF92:
 3320 02d0 64756D6D 		.ascii	"dummy1\000"
 3320      793100
 3321              	.LASF93:
 3322 02d7 64756D6D 		.ascii	"dummy2\000"
 3322      793200
 3323              	.LASF114:
 3324 02de 6C6F6361 		.ascii	"local_meas\000"
 3324      6C5F6D65 
 3324      617300
 3325              	.LASF82:
 3326 02e9 63686172 		.ascii	"char\000"
 3326      00
 3327              	.LASF131:
 3328 02ee 54454D50 		.ascii	"TEMPERATURE_Value\000"
 3328      45524154 
 3328      5552455F 
 3328      56616C75 
 3328      6500
 3329              	.LASF65:
 3330 0300 41495243 		.ascii	"AIRCR\000"
 3330      5200
 3331              	.LASF146:
 3332 0306 74616B65 		.ascii	"take_temp_sample\000"
 3332      5F74656D 
 3332      705F7361 
 3332      6D706C65 
 3332      00
 3333              	.LASF21:
 3334 0317 54494D33 		.ascii	"TIM3_IRQn\000"
 3334      5F495251 
ARM GAS  /tmp/cc2DuVcX.s 			page 99


 3334      6E00
 3335              	.LASF14:
 3336 0321 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 3336      5F436861 
 3336      6E6E656C 
 3336      315F4952 
 3336      516E00
 3337              	.LASF111:
 3338 0334 62797465 		.ascii	"bytes_read\000"
 3338      735F7265 
 3338      616400
 3339              	.LASF86:
 3340 033f 6D61696E 		.ascii	"main_state_t\000"
 3340      5F737461 
 3340      74655F74 
 3340      00
 3341              	.LASF24:
 3342 034c 54494D31 		.ascii	"TIM15_IRQn\000"
 3342      355F4952 
 3342      516E00
 3343              	.LASF48:
 3344 0357 75696E74 		.ascii	"uint8_t\000"
 3344      385F7400 
 3345              	.LASF136:
 3346 035f 74783162 		.ascii	"tx1buff\000"
 3346      75666600 
 3347              	.LASF150:
 3348 0367 74745F72 		.ascii	"tt_relay_on_off\000"
 3348      656C6179 
 3348      5F6F6E5F 
 3348      6F666600 
 3349              	.LASF164:
 3350 0377 73656373 		.ascii	"secs\000"
 3350      00
 3351              	.LASF115:
 3352 037c 6C6F6361 		.ascii	"local_meas_last\000"
 3352      6C5F6D65 
 3352      61735F6C 
 3352      61737400 
 3353              	.LASF85:
 3354 038c 4C414D50 		.ascii	"LAMP_ON\000"
 3354      5F4F4E00 
 3355              	.LASF45:
 3356 0394 6C6F6E67 		.ascii	"long long int\000"
 3356      206C6F6E 
 3356      6720696E 
 3356      7400
 3357              	.LASF5:
 3358 03a2 57574447 		.ascii	"WWDG_IRQn\000"
 3358      5F495251 
 3358      6E00
 3359              	.LASF67:
 3360 03ac 53484353 		.ascii	"SHCSR\000"
 3360      5200
 3361              	.LASF155:
 3362 03b2 75736172 		.ascii	"usart1_mini_timeout\000"
 3362      74315F6D 
ARM GAS  /tmp/cc2DuVcX.s 			page 100


 3362      696E695F 
 3362      74696D65 
 3362      6F757400 
 3363              	.LASF151:
 3364 03c6 73617665 		.ascii	"saved_mode\000"
 3364      645F6D6F 
 3364      646500
 3365              	.LASF163:
 3366 03d1 66696C74 		.ascii	"filter_timer\000"
 3366      65725F74 
 3366      696D6572 
 3366      00
 3367              	.LASF174:
 3368 03de 70617261 		.ascii	"parameters\000"
 3368      6D657465 
 3368      727300
 3369              	.LASF148:
 3370 03e9 74696D65 		.ascii	"timer_relay\000"
 3370      725F7265 
 3370      6C617900 
 3371              	.LASF83:
 3372 03f5 4D41494E 		.ascii	"MAIN_INIT\000"
 3372      5F494E49 
 3372      5400
 3373              	.LASF103:
 3374 03ff 524F4F4D 		.ascii	"ROOM_BRIGHT\000"
 3374      5F425249 
 3374      47485400 
 3375              	.LASF13:
 3376 040b 54535F49 		.ascii	"TS_IRQn\000"
 3376      52516E00 
 3377              	.LASF125:
 3378 0413 64756D6D 		.ascii	"dummy_resp\000"
 3378      795F7265 
 3378      737000
 3379              	.LASF18:
 3380 041e 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 3380      5F42524B 
 3380      5F55505F 
 3380      5452475F 
 3380      434F4D5F 
 3381              	.LASF129:
 3382 0437 74656D70 		.ascii	"tempbuff\000"
 3382      62756666 
 3382      00
 3383              	.LASF6:
 3384 0440 5056445F 		.ascii	"PVD_IRQn\000"
 3384      4952516E 
 3384      00
 3385              	.LASF107:
 3386 0449 4C494748 		.ascii	"LIGHTS_ON\000"
 3386      54535F4F 
 3386      4E00
 3387              	.LASF58:
 3388 0453 49435052 		.ascii	"ICPR\000"
 3388      00
 3389              	.LASF17:
ARM GAS  /tmp/cc2DuVcX.s 			page 101


 3390 0458 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 3390      5F434F4D 
 3390      505F4952 
 3390      516E00
 3391              	.LASF139:
 3392 0467 73776974 		.ascii	"switches_timer\000"
 3392      63686573 
 3392      5F74696D 
 3392      657200
 3393              	.LASF120:
 3394 0476 7463705F 		.ascii	"tcp_msg\000"
 3394      6D736700 
 3395              	.LASF76:
 3396 047e 4F535045 		.ascii	"OSPEEDR\000"
 3396      45445200 
 3397              	.LASF73:
 3398 0486 53797354 		.ascii	"SysTick_Type\000"
 3398      69636B5F 
 3398      54797065 
 3398      00
 3399              	.LASF81:
 3400 0493 6C6F6E67 		.ascii	"long double\000"
 3400      20646F75 
 3400      626C6500 
 3401              	.LASF49:
 3402 049f 75696E74 		.ascii	"uint16_t\000"
 3402      31365F74 
 3402      00
 3403              	.LASF99:
 3404 04a8 4952516E 		.ascii	"IRQn\000"
 3404      00
 3405              	.LASF91:
 3406 04ad 6C617374 		.ascii	"last_channel_in_flash\000"
 3406      5F636861 
 3406      6E6E656C 
 3406      5F696E5F 
 3406      666C6173 
 3407              	.LASF141:
 3408 04c3 7363726F 		.ascii	"scroll1_timer\000"
 3408      6C6C315F 
 3408      74696D65 
 3408      7200
 3409              	.LASF7:
 3410 04d1 5254435F 		.ascii	"RTC_IRQn\000"
 3410      4952516E 
 3410      00
 3411              	.LASF53:
 3412 04da 52455345 		.ascii	"RESERVED0\000"
 3412      52564544 
 3412      3000
 3413              	.LASF66:
 3414 04e4 52455345 		.ascii	"RESERVED1\000"
 3414      52564544 
 3414      3100
 3415              	.LASF57:
 3416 04ee 52455345 		.ascii	"RESERVED2\000"
 3416      52564544 
ARM GAS  /tmp/cc2DuVcX.s 			page 102


 3416      3200
 3417              	.LASF59:
 3418 04f8 52455345 		.ascii	"RESERVED3\000"
 3418      52564544 
 3418      3300
 3419              	.LASF60:
 3420 0502 52455345 		.ascii	"RESERVED4\000"
 3420      52564544 
 3420      3400
 3421              	.LASF38:
 3422 050c 73686F72 		.ascii	"short int\000"
 3422      7420696E 
 3422      7400
 3423              	.LASF42:
 3424 0516 6C6F6E67 		.ascii	"long int\000"
 3424      20696E74 
 3424      00
 3425              	.LASF31:
 3426 051f 55534152 		.ascii	"USART1_IRQn\000"
 3426      54315F49 
 3426      52516E00 
 3427              	.LASF0:
 3428 052b 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 3428      61736B61 
 3428      626C6549 
 3428      6E745F49 
 3428      52516E00 
 3429              	.LASF108:
 3430 053f 7072696F 		.ascii	"priority\000"
 3430      72697479 
 3430      00
 3431              	.LASF19:
 3432 0548 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 3432      5F43435F 
 3432      4952516E 
 3432      00
 3433              	.LASF75:
 3434 0555 4F545950 		.ascii	"OTYPER\000"
 3434      455200
 3435              	.LASF122:
 3436 055c 6E65775F 		.ascii	"new_lamp\000"
 3436      6C616D70 
 3436      00
 3437              	.LASF160:
 3438 0565 77616974 		.ascii	"wait_ms_var\000"
 3438      5F6D735F 
 3438      76617200 
 3439              	.LASF26:
 3440 0571 54494D31 		.ascii	"TIM17_IRQn\000"
 3440      375F4952 
 3440      516E00
 3441              	.LASF16:
 3442 057c 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 3442      5F436861 
 3442      6E6E656C 
 3442      345F355F 
 3442      4952516E 
ARM GAS  /tmp/cc2DuVcX.s 			page 103


 3443              	.LASF165:
 3444 0591 686F7572 		.ascii	"hours\000"
 3444      7300
 3445              	.LASF35:
 3446 0597 5F5F7569 		.ascii	"__uint8_t\000"
 3446      6E74385F 
 3446      7400
 3447              	.LASF104:
 3448 05a1 4C414D50 		.ascii	"LAMP_BRIGHT\000"
 3448      5F425249 
 3448      47485400 
 3449              	.LASF62:
 3450 05ad 4E564943 		.ascii	"NVIC_Type\000"
 3450      5F547970 
 3450      6500
 3451              	.LASF69:
 3452 05b7 5343425F 		.ascii	"SCB_Type\000"
 3452      54797065 
 3452      00
 3453              	.LASF80:
 3454 05c0 4750494F 		.ascii	"GPIO_TypeDef\000"
 3454      5F547970 
 3454      65446566 
 3454      00
 3455              	.LASF4:
 3456 05cd 53797354 		.ascii	"SysTick_IRQn\000"
 3456      69636B5F 
 3456      4952516E 
 3456      00
 3457              	.LASF33:
 3458 05da 4345435F 		.ascii	"CEC_IRQn\000"
 3458      4952516E 
 3458      00
 3459              	.LASF61:
 3460 05e3 73697A65 		.ascii	"sizetype\000"
 3460      74797065 
 3460      00
 3461              	.LASF64:
 3462 05ec 49435352 		.ascii	"ICSR\000"
 3462      00
 3463              	.LASF28:
 3464 05f1 49324332 		.ascii	"I2C2_IRQn\000"
 3464      5F495251 
 3464      6E00
 3465              	.LASF44:
 3466 05fb 6C6F6E67 		.ascii	"long unsigned int\000"
 3466      20756E73 
 3466      69676E65 
 3466      6420696E 
 3466      7400
 3467              	.LASF20:
 3468 060d 54494D32 		.ascii	"TIM2_IRQn\000"
 3468      5F495251 
 3468      6E00
 3469              	.LASF132:
 3470 0617 50524553 		.ascii	"PRESSURE_Value\000"
 3470      53555245 
ARM GAS  /tmp/cc2DuVcX.s 			page 104


 3470      5F56616C 
 3470      756500
 3471              	.LASF173:
 3472 0626 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 3472      652F6D65 
 3472      642F446F 
 3472      63756D65 
 3472      6E74732F 
 3473 0659 6100     		.ascii	"a\000"
 3474              	.LASF130:
 3475 065b 48554D49 		.ascii	"HUMIDITY_Value\000"
 3475      44495459 
 3475      5F56616C 
 3475      756500
 3476              	.LASF50:
 3477 066a 696E7433 		.ascii	"int32_t\000"
 3477      325F7400 
 3478              	.LASF144:
 3479 0672 7374616E 		.ascii	"standalone_enable_menu_timer\000"
 3479      64616C6F 
 3479      6E655F65 
 3479      6E61626C 
 3479      655F6D65 
 3480              	.LASF23:
 3481 068f 54494D31 		.ascii	"TIM14_IRQn\000"
 3481      345F4952 
 3481      516E00
 3482              	.LASF15:
 3483 069a 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 3483      5F436861 
 3483      6E6E656C 
 3483      325F335F 
 3483      4952516E 
 3484              	.LASF126:
 3485 06af 7070735F 		.ascii	"pps_one\000"
 3485      6F6E6500 
 3486              	.LASF168:
 3487 06b7 646D785F 		.ascii	"dmx_timeout_timer\000"
 3487      74696D65 
 3487      6F75745F 
 3487      74696D65 
 3487      7200
 3488              	.LASF22:
 3489 06c9 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 3489      5F444143 
 3489      5F495251 
 3489      6E00
 3490              	.LASF37:
 3491 06d7 756E7369 		.ascii	"unsigned char\000"
 3491      676E6564 
 3491      20636861 
 3491      7200
 3492              	.LASF84:
 3493 06e5 4C414D50 		.ascii	"LAMP_OFF\000"
 3493      5F4F4646 
 3493      00
 3494              	.LASF43:
ARM GAS  /tmp/cc2DuVcX.s 			page 105


 3495 06ee 5F5F7569 		.ascii	"__uint32_t\000"
 3495      6E743332 
 3495      5F7400
 3496              	.LASF123:
 3497 06f9 6C617374 		.ascii	"last_bright\000"
 3497      5F627269 
 3497      67687400 
 3498              	.LASF112:
 3499 0705 6E656564 		.ascii	"need_ack\000"
 3499      5F61636B 
 3499      00
 3500              	.LASF88:
 3501 070e 6C617374 		.ascii	"last_program_in_flash\000"
 3501      5F70726F 
 3501      6772616D 
 3501      5F696E5F 
 3501      666C6173 
 3502              	.LASF154:
 3503 0724 7361635F 		.ascii	"sac_aux\000"
 3503      61757800 
 3504              	.LASF121:
 3505 072c 6E65775F 		.ascii	"new_room\000"
 3505      726F6F6D 
 3505      00
 3506              	.LASF179:
 3507 0735 54696D69 		.ascii	"TimingDelay_Decrement\000"
 3507      6E674465 
 3507      6C61795F 
 3507      44656372 
 3507      656D656E 
 3508              	.LASF147:
 3509 074b 74696D65 		.ascii	"timer_wifi_bright\000"
 3509      725F7769 
 3509      66695F62 
 3509      72696768 
 3509      7400
 3510              	.LASF54:
 3511 075d 49434552 		.ascii	"ICER\000"
 3511      00
 3512              	.LASF118:
 3513 0762 6F6E655F 		.ascii	"one_to_ten\000"
 3513      746F5F74 
 3513      656E00
 3514              	.LASF30:
 3515 076d 53504932 		.ascii	"SPI2_IRQn\000"
 3515      5F495251 
 3515      6E00
 3516              	.LASF178:
 3517 0777 70726570 		.ascii	"prepare_json_pkt\000"
 3517      6172655F 
 3517      6A736F6E 
 3517      5F706B74 
 3517      00
 3518              	.LASF102:
 3519 0788 4B454550 		.ascii	"KEEP_ALIVE\000"
 3519      5F414C49 
 3519      564500
ARM GAS  /tmp/cc2DuVcX.s 			page 106


 3520              	.LASF98:
 3521 0793 70617261 		.ascii	"parameters_typedef\000"
 3521      6D657465 
 3521      72735F74 
 3521      79706564 
 3521      656600
 3522              	.LASF36:
 3523 07a6 7369676E 		.ascii	"signed char\000"
 3523      65642063 
 3523      68617200 
 3524              	.LASF172:
 3525 07b2 7372632F 		.ascii	"src/main.c\000"
 3525      6D61696E 
 3525      2E6300
 3526              	.LASF106:
 3527 07bd 4C494748 		.ascii	"LIGHTS_OFF\000"
 3527      54535F4F 
 3527      464600
 3528              	.LASF40:
 3529 07c8 73686F72 		.ascii	"short unsigned int\000"
 3529      7420756E 
 3529      7369676E 
 3529      65642069 
 3529      6E7400
 3530              	.LASF171:
 3531 07db 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 3531      43313120 
 3531      352E322E 
 3531      31203230 
 3531      31353132 
 3532 080e 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 3532      20726576 
 3532      6973696F 
 3532      6E203233 
 3532      31383438 
 3533 0841 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 3533      662D3220 
 3533      2D4F3020 
 3533      2D666F6D 
 3533      69742D66 
 3534 0874 66756E63 		.ascii	"function-sections\000"
 3534      74696F6E 
 3534      2D736563 
 3534      74696F6E 
 3534      7300
 3535              	.LASF143:
 3536 0886 7374616E 		.ascii	"standalone_timer\000"
 3536      64616C6F 
 3536      6E655F74 
 3536      696D6572 
 3536      00
 3537              	.LASF177:
 3538 0897 6D61696E 		.ascii	"main\000"
 3538      00
 3539              	.LASF1:
 3540 089c 48617264 		.ascii	"HardFault_IRQn\000"
 3540      4661756C 
ARM GAS  /tmp/cc2DuVcX.s 			page 107


 3540      745F4952 
 3540      516E00
 3541              	.LASF56:
 3542 08ab 49535052 		.ascii	"ISPR\000"
 3542      00
 3543              	.LASF113:
 3544 08b0 72657370 		.ascii	"resp\000"
 3544      00
 3545              	.LASF169:
 3546 08b5 7674656D 		.ascii	"vtemp\000"
 3546      7000
 3547              	.LASF142:
 3548 08bb 7363726F 		.ascii	"scroll2_timer\000"
 3548      6C6C325F 
 3548      74696D65 
 3548      7200
 3549              	.LASF161:
 3550 08c9 74696D65 		.ascii	"timer_standby\000"
 3550      725F7374 
 3550      616E6462 
 3550      7900
 3551              	.LASF110:
 3552 08d7 62797465 		.ascii	"bytes_remain\000"
 3552      735F7265 
 3552      6D61696E 
 3552      00
 3553              	.LASF79:
 3554 08e4 4C434B52 		.ascii	"LCKR\000"
 3554      00
 3555              	.LASF70:
 3556 08e9 4354524C 		.ascii	"CTRL\000"
 3556      00
 3557              	.LASF105:
 3558 08ee 4745545F 		.ascii	"GET_A\000"
 3558      4100
 3559              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/cc2DuVcX.s 			page 108


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc2DuVcX.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/cc2DuVcX.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/cc2DuVcX.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/cc2DuVcX.s:206    .text.SysTick_Config:00000000 $t
     /tmp/cc2DuVcX.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/cc2DuVcX.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/cc2DuVcX.s:277    .bss.show_select_timer:00000000 show_select_timer
     /tmp/cc2DuVcX.s:274    .bss.show_select_timer:00000000 $d
     /tmp/cc2DuVcX.s:283    .bss.switches_timer:00000000 switches_timer
     /tmp/cc2DuVcX.s:284    .bss.switches_timer:00000000 $d
     /tmp/cc2DuVcX.s:289    .bss.acswitch_timer:00000000 acswitch_timer
     /tmp/cc2DuVcX.s:290    .bss.acswitch_timer:00000000 $d
     /tmp/cc2DuVcX.s:296    .bss.scroll1_timer:00000000 scroll1_timer
     /tmp/cc2DuVcX.s:293    .bss.scroll1_timer:00000000 $d
     /tmp/cc2DuVcX.s:303    .bss.scroll2_timer:00000000 scroll2_timer
     /tmp/cc2DuVcX.s:300    .bss.scroll2_timer:00000000 $d
                            *COM*:00000002 standalone_timer
                            *COM*:00000002 standalone_enable_menu_timer
                            *COM*:00000001 grouped_master_timeout_timer
     /tmp/cc2DuVcX.s:313    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/cc2DuVcX.s:310    .bss.take_temp_sample:00000000 $d
     /tmp/cc2DuVcX.s:319    .bss.timer_wifi_bright:00000000 timer_wifi_bright
     /tmp/cc2DuVcX.s:320    .bss.timer_wifi_bright:00000000 $d
     /tmp/cc2DuVcX.s:326    .bss.timer_relay:00000000 timer_relay
     /tmp/cc2DuVcX.s:323    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
     /tmp/cc2DuVcX.s:335    .bss.igrid_timer:00000000 igrid_timer
     /tmp/cc2DuVcX.s:336    .bss.igrid_timer:00000000 $d
     /tmp/cc2DuVcX.s:341    .bss.vgrid_timer:00000000 vgrid_timer
     /tmp/cc2DuVcX.s:342    .bss.vgrid_timer:00000000 $d
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:0000000c param_struct
     /tmp/cc2DuVcX.s:357    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/cc2DuVcX.s:354    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/cc2DuVcX.s:367    .bss.secs:00000000 secs
     /tmp/cc2DuVcX.s:364    .bss.secs:00000000 $d
     /tmp/cc2DuVcX.s:373    .bss.hours:00000000 hours
     /tmp/cc2DuVcX.s:374    .bss.hours:00000000 $d
     /tmp/cc2DuVcX.s:379    .bss.minutes:00000000 minutes
ARM GAS  /tmp/cc2DuVcX.s 			page 109


     /tmp/cc2DuVcX.s:380    .bss.minutes:00000000 $d
     /tmp/cc2DuVcX.s:385    .bss.signal_state:00000000 signal_state
     /tmp/cc2DuVcX.s:386    .bss.signal_state:00000000 $d
     /tmp/cc2DuVcX.s:391    .bss.dmx_timeout_timer:00000000 dmx_timeout_timer
     /tmp/cc2DuVcX.s:392    .bss.dmx_timeout_timer:00000000 $d
                            *COM*:00000021 vd0
                            *COM*:00000021 vd1
                            *COM*:00000021 vd2
                            *COM*:00000021 vd3
                            *COM*:00000021 vd4
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/cc2DuVcX.s:401    .rodata:00000000 $d
     /tmp/cc2DuVcX.s:417    .text.main:00000000 $t
     /tmp/cc2DuVcX.s:422    .text.main:00000000 main
     /tmp/cc2DuVcX.s:668    .text.main:00000174 $d
     /tmp/cc2DuVcX.s:695    .text.prepare_json_pkt:00000000 $t
     /tmp/cc2DuVcX.s:700    .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/cc2DuVcX.s:792    .text.prepare_json_pkt:0000009c $d
     /tmp/cc2DuVcX.s:801    .text.TimingDelay_Decrement:00000000 $t
     /tmp/cc2DuVcX.s:806    .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/cc2DuVcX.s:971    .text.TimingDelay_Decrement:000000fc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GPIO_Config
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
memcpy
sprintf
strcat
strlen
