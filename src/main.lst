ARM GAS  /tmp/cc7m2O8A.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/cc7m2O8A.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/cc7m2O8A.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/cc7m2O8A.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/cc7m2O8A.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/cc7m2O8A.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/cc7m2O8A.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc7m2O8A.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/cc7m2O8A.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/cc7m2O8A.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc7m2O8A.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/cc7m2O8A.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/cc7m2O8A.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/cc7m2O8A.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/cc7m2O8A.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/cc7m2O8A.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/cc7m2O8A.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/cc7m2O8A.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7205,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7206, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7207, D.7206
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7207, D.7207
  92 0026 083B     		subs	r3, r3, #8	@ D.7207,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7207, D.7207,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7205,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7206, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7207, D.7206
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7207, D.7207
 101 0038 083B     		subs	r3, r3, #8	@ D.7207,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7207, D.7207,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7205, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7207, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7206, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7207, D.7206
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7207, D.7207
 114 0052 D200     		lsls	r2, r2, #3	@ D.7207, D.7207,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7208, D.7208, D.7207
 117 0058 0200     		movs	r2, r0	@ D.7208, D.7208
 118 005a D243     		mvns	r2, r2	@ D.7208, D.7208
 119 005c 1A40     		ands	r2, r3	@ D.7207, D.7207
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7207, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7207, D.7207
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7206, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7207, D.7206
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7207, D.7207
ARM GAS  /tmp/cc7m2O8A.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7207, D.7207,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7207, D.7207, D.7207
 133 0076 0300     		movs	r3, r0	@ D.7207, D.7207
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7207, D.7207
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7207,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7205, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7207, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7209,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7207, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7207, D.7207
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7207, D.7207,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7209,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7207, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7207, D.7207
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7207, D.7207,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7207, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7206, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7207, D.7206
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7207, D.7207
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7207, D.7207,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7208, D.7208, D.7207
 169 00b6 0100     		movs	r1, r0	@ D.7208, D.7208
 170 00b8 C943     		mvns	r1, r1	@ D.7208, D.7208
 171 00ba 1140     		ands	r1, r2	@ D.7207, D.7207
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7207, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7207, D.7207
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7206, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7207, D.7206
ARM GAS  /tmp/cc7m2O8A.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7207, D.7207
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7207, D.7207,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7207, D.7207, D.7207
 185 00d4 0200     		movs	r2, r0	@ D.7207, D.7207
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7207, D.7207
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7207, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/cc7m2O8A.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7210,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7211,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7212, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7212,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7212, _6->LOAD
ARM GAS  /tmp/cc7m2O8A.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7211,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7211,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7210,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	take_temp_sample
 273              		.section	.bss.take_temp_sample,"aw",%nobits
 274              		.align	1
 275              		.type	take_temp_sample, %object
 276              		.size	take_temp_sample, 2
 277              	take_temp_sample:
 278 0000 0000     		.space	2
 279              		.global	timer_rep
 280              		.section	.bss.timer_rep,"aw",%nobits
 281              		.align	1
 282              		.type	timer_rep, %object
 283              		.size	timer_rep, 2
 284              	timer_rep:
 285 0000 0000     		.space	2
 286              		.global	timer_relay
 287              		.section	.bss.timer_relay,"aw",%nobits
ARM GAS  /tmp/cc7m2O8A.s 			page 23


 288              		.align	1
 289              		.type	timer_relay, %object
 290              		.size	timer_relay, 2
 291              	timer_relay:
 292 0000 0000     		.space	2
 293              		.comm	tt_take_photo_sample,2,2
 294              		.comm	tt_relay_on_off,2,2
 295              		.comm	saved_mode,1,1
 296              		.comm	s1,2,2
 297              		.comm	s2,2,2
 298              		.comm	sac,2,2
 299              		.comm	sac_aux,1,1
 300              		.comm	adc_ch,6,4
 301              		.global	seq_ready
 302              		.section	.bss.seq_ready,"aw",%nobits
 303              		.type	seq_ready, %object
 304              		.size	seq_ready, 1
 305              	seq_ready:
 306 0000 00       		.space	1
 307              		.comm	zero_current,2,2
 308              		.comm	usart1_mini_timeout,1,1
 309              		.comm	usart1_pckt_ready,1,1
 310              		.comm	usart1_have_data,1,1
 311              		.comm	usart1_pckt_bytes,1,1
 312              		.comm	usart2_mini_timeout,1,1
 313              		.comm	usart2_pckt_ready,1,1
 314              		.comm	usart2_have_data,1,1
 315              		.comm	usart2_pckt_bytes,1,1
 316              		.comm	param_struct,84,4
 317              		.comm	gsmNUM,20,4
 318              		.comm	gsmMSG,180,4
 319              		.global	wait_ms_var
 320              		.section	.bss.wait_ms_var,"aw",%nobits
 321              		.align	1
 322              		.type	wait_ms_var, %object
 323              		.size	wait_ms_var, 2
 324              	wait_ms_var:
 325 0000 0000     		.space	2
 326              		.comm	timer_standby,2,2
 327              		.comm	tcp_kalive_timer,2,2
 328              		.comm	filter_timer,1,1
 329              		.global	secs
 330              		.section	.bss.secs,"aw",%nobits
 331              		.align	1
 332              		.type	secs, %object
 333              		.size	secs, 2
 334              	secs:
 335 0000 0000     		.space	2
 336              		.global	hours
 337              		.section	.bss.hours,"aw",%nobits
 338              		.type	hours, %object
 339              		.size	hours, 1
 340              	hours:
 341 0000 00       		.space	1
 342              		.global	minutes
 343              		.section	.bss.minutes,"aw",%nobits
 344              		.type	minutes, %object
ARM GAS  /tmp/cc7m2O8A.s 			page 24


 345              		.size	minutes, 1
 346              	minutes:
 347 0000 00       		.space	1
 348              		.comm	power_vect,20,4
 349              		.comm	vtemp,34,4
 350              		.comm	vpote,34,4
 351              		.section	.rodata
 352              		.align	2
 353              	.LC1:
 354 0000 31313439 		.ascii	"1149867843\000"
 354      38363738 
 354      343300
 355 000b 00       		.align	2
 356              	.LC3:
 357 000c 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 357      726E6F20 
 357      506C6163 
 357      61205265 
 357      646F6E64 
 358 0031 000000   		.align	2
 359              	.LC5:
 360 0034 20204665 		.ascii	"  Features:\015\012\000"
 360      61747572 
 360      65733A0D 
 360      0A00
 361 0042 0000     		.align	2
 362              	.LC7:
 363 0044 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 363      6D6D6572 
 363      20312074 
 363      6F203130 
 363      560D0A00 
 364              		.align	2
 365              	.LC9:
 366 0058 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 366      67687420 
 366      48797374 
 366      65726573 
 366      69730D0A 
 367 006d 000000   		.align	2
 368              	.LC11:
 369 0070 20205379 		.ascii	"  Sync by ADC\015\012\000"
 369      6E632062 
 369      79204144 
 369      430D0A00 
 370              		.align	2
 371              	.LC13:
 372 0080 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 372      65732047 
 372      534D2066 
 372      6F722053 
 372      4D532064 
 373 009a 0000     		.align	2
 374              	.LC18:
 375 009c 47657474 		.ascii	"Getted\015\012\000"
 375      65640D0A 
 375      00
ARM GAS  /tmp/cc7m2O8A.s 			page 25


 376 00a5 000000   		.align	2
 377              	.LC20:
 378 00a8 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 378      696E6720 
 378      47534D20 
 378      53746172 
 378      74757020 
 379 00cf 00       		.align	2
 380              	.LC24:
 381 00d0 5265706F 		.ascii	"Reports by SMS\015\012\000"
 381      72747320 
 381      62792053 
 381      4D530D0A 
 381      00
 382 00e1 000000   		.align	2
 383              	.LC26:
 384 00e4 41542B47 		.ascii	"AT+GSN\015\012\000"
 384      534E0D0A 
 384      00
 385 00ed 000000   		.align	2
 386              	.LC29:
 387 00f0 494D4549 		.ascii	"IMEI: \000"
 387      3A2000
 388 00f7 00       		.align	2
 389              	.LC31:
 390 00f8 0D0A00   		.ascii	"\015\012\000"
 391 00fb 00       		.align	2
 392              	.LC33:
 393 00fc 2C204143 		.ascii	", ACTIVO\000"
 393      5449564F 
 393      00
 394 0105 000000   		.align	2
 395              	.LC36:
 396 0108 5052454E 		.ascii	"PRENDIDO\015\012\000"
 396      4449444F 
 396      0D0A00
 397 0113 00       		.align	2
 398              	.LC38:
 399 0114 5052454E 		.ascii	"PRENDIDO\000"
 399      4449444F 
 399      00
 400 011d 000000   		.align	2
 401              	.LC42:
 402 0120 41504147 		.ascii	"APAGADO\000"
 402      41444F00 
 403              		.global	__aeabi_i2d
 404              		.global	__aeabi_dmul
 405              		.global	__aeabi_d2f
 406              		.global	__aeabi_f2uiz
 407              		.global	__aeabi_i2f
 408              		.global	__aeabi_fsub
 409              		.global	__aeabi_fmul
 410              		.global	__aeabi_uidiv
 411              		.global	__aeabi_ui2d
 412              		.align	2
 413              	.LC45:
 414 0128 70693A20 		.ascii	"pi: %3d.%02d wh: %3d.%01d\015\012\000"
ARM GAS  /tmp/cc7m2O8A.s 			page 26


 414      2533642E 
 414      25303264 
 414      2077683A 
 414      20253364 
 415              		.section	.text.main,"ax",%progbits
 416              		.align	2
 417              		.global	main
 418              		.code	16
 419              		.thumb_func
 420              		.type	main, %function
 421              	main:
 422              	.LFB20:
 423              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
ARM GAS  /tmp/cc7m2O8A.s 			page 27


  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** // volatile unsigned char switches_timer = 0;
  72:src/main.c    **** //
  73:src/main.c    **** //
  74:src/main.c    **** // volatile unsigned short scroll1_timer = 0;
  75:src/main.c    **** // volatile unsigned short scroll2_timer = 0;
  76:src/main.c    **** //
  77:src/main.c    **** // volatile unsigned short standalone_timer;
  78:src/main.c    **** // volatile unsigned short standalone_enable_menu_timer;
  79:src/main.c    **** // //volatile unsigned short standalone_menu_timer;
  80:src/main.c    **** // volatile unsigned char grouped_master_timeout_timer;
  81:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  82:src/main.c    **** volatile unsigned short timer_rep = 0;
  83:src/main.c    **** // volatile unsigned char timer_wifi_bright = 0;
  84:src/main.c    **** 
  85:src/main.c    **** #ifdef USE_REDONDA_BASIC
  86:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  87:src/main.c    **** 
  88:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  89:src/main.c    **** volatile unsigned short tt_relay_on_off;
  90:src/main.c    **** #endif
  91:src/main.c    **** 
  92:src/main.c    **** 
  93:src/main.c    **** unsigned char saved_mode;
  94:src/main.c    **** 
  95:src/main.c    **** 
  96:src/main.c    **** // ------- Externals de los switches -------
  97:src/main.c    **** unsigned short s1;
  98:src/main.c    **** unsigned short s2;
  99:src/main.c    **** unsigned short sac;
 100:src/main.c    **** unsigned char sac_aux;
 101:src/main.c    **** 
ARM GAS  /tmp/cc7m2O8A.s 			page 28


 102:src/main.c    **** // ------- Externals de los switches -------
 103:src/main.c    **** #ifdef ADC_WITH_INT
 104:src/main.c    **** volatile unsigned short adc_ch[3];
 105:src/main.c    **** volatile unsigned char seq_ready = 0;
 106:src/main.c    **** unsigned short zero_current;
 107:src/main.c    **** #endif
 108:src/main.c    **** 
 109:src/main.c    **** // ------- Externals del GPS & GSM -------
 110:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 111:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 112:src/main.c    **** volatile unsigned char usart1_have_data;
 113:src/main.c    **** unsigned char usart1_pckt_bytes;
 114:src/main.c    **** 
 115:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 116:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 117:src/main.c    **** #define gps_have_data		usart1_have_data
 118:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 119:src/main.c    **** 
 120:src/main.c    **** #ifdef USE_GPS
 121:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 122:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 123:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 124:src/main.c    **** volatile unsigned char usart2_have_data;
 125:src/main.c    **** unsigned char usart2_pckt_bytes;
 126:src/main.c    **** 
 127:src/main.c    **** #endif
 128:src/main.c    **** 
 129:src/main.c    **** // ------- Externals del GSM -------
 130:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 131:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 132:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 133:src/main.c    **** #define gsm_have_data		usart1_have_data
 134:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 135:src/main.c    **** 
 136:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 137:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 138:src/main.c    **** volatile unsigned char usart2_have_data;
 139:src/main.c    **** unsigned char usart2_pckt_bytes;
 140:src/main.c    **** 
 141:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 142:src/main.c    **** #endif
 143:src/main.c    **** 
 144:src/main.c    **** parameters_typedef param_struct;
 145:src/main.c    **** 
 146:src/main.c    **** //--- VARIABLES GLOBALES ---//
 147:src/main.c    **** 
 148:src/main.c    **** 
 149:src/main.c    **** //para las mediciones
 150:src/main.c    **** // unsigned int power_2secs_acum = 0;
 151:src/main.c    **** // unsigned char power_2secs_index = 0;
 152:src/main.c    **** // unsigned short power_minutes = 0;
 153:src/main.c    **** // unsigned char power_minutes_index = 0;
 154:src/main.c    **** // unsigned short power_hours = 0;
 155:src/main.c    **** 
 156:src/main.c    **** //para los msjs GSM
 157:src/main.c    **** char gsmNUM [20];
 158:src/main.c    **** char gsmMSG [180];
ARM GAS  /tmp/cc7m2O8A.s 			page 29


 159:src/main.c    **** 
 160:src/main.c    **** 
 161:src/main.c    **** 
 162:src/main.c    **** 
 163:src/main.c    **** 
 164:src/main.c    **** 
 165:src/main.c    **** // ------- de los timers -------
 166:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 167:src/main.c    **** volatile unsigned short timer_standby;
 168:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 169:src/main.c    **** //volatile unsigned char display_timer;
 170:src/main.c    **** volatile unsigned char filter_timer;
 171:src/main.c    **** 
 172:src/main.c    **** //volatile unsigned char door_filter;
 173:src/main.c    **** //volatile unsigned char take_sample;
 174:src/main.c    **** //volatile unsigned char move_relay;
 175:src/main.c    **** #ifdef WITH_HYST
 176:src/main.c    **** volatile unsigned short secs = 0;
 177:src/main.c    **** volatile unsigned char hours = 0;
 178:src/main.c    **** volatile unsigned char minutes = 0;
 179:src/main.c    **** #endif
 180:src/main.c    **** 
 181:src/main.c    **** #define SIZEOF_POWER_VECT		10
 182:src/main.c    **** 
 183:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 184:src/main.c    **** 
 185:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 186:src/main.c    **** void TimingDelay_Decrement(void);
 187:src/main.c    **** 
 188:src/main.c    **** // ------- del DMX -------
 189:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 190:src/main.c    **** #define DMX_TIMEOUT	20
 191:src/main.c    **** 
 192:src/main.c    **** //--- FILTROS DE SENSORES ---//
 193:src/main.c    **** #define LARGO_FILTRO 16
 194:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 195:src/main.c    **** //#define LARGO_FILTRO 32
 196:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 197:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 198:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 199:src/main.c    **** 
 200:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 201:src/main.c    **** 
 202:src/main.c    **** // #define KW			0.009721
 203:src/main.c    **** // #define KW			0.00945
 204:src/main.c    **** // #define KW			0.00959
 205:src/main.c    **** #define KW			0.01013
 206:src/main.c    **** 
 207:src/main.c    **** //--- Private Definitions ---//
 208:src/main.c    **** #define num_tel_rep		param_struct.num_reportar
 209:src/main.c    **** 
 210:src/main.c    **** 
 211:src/main.c    **** //-------------------------------------------//
 212:src/main.c    **** // @brief  Main program.
 213:src/main.c    **** // @param  None
 214:src/main.c    **** // @retval None
 215:src/main.c    **** //------------------------------------------//
ARM GAS  /tmp/cc7m2O8A.s 			page 30


 216:src/main.c    **** int main(void)
 217:src/main.c    **** {
 424              		.loc 2 217 0
 425              		.cfi_startproc
 426 0000 30B5     		push	{r4, r5, lr}	@
 427              	.LCFI4:
 428              		.cfi_def_cfa_offset 12
 429              		.cfi_offset 4, -12
 430              		.cfi_offset 5, -8
 431              		.cfi_offset 14, -4
 432 0002 A9B0     		sub	sp, sp, #164	@,,
 433              	.LCFI5:
 434              		.cfi_def_cfa_offset 176
 218:src/main.c    **** 	unsigned char i, ii;
 219:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 435              		.loc 2 219 0
 436 0004 8223     		movs	r3, #130	@ tmp199,
 437 0006 6B44     		add	r3, r3, sp	@ tmp199,
 438 0008 0022     		movs	r2, #0	@ tmp200,
 439 000a 1A70     		strb	r2, [r3]	@ tmp201, need_ack
 220:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 440              		.loc 2 220 0
 441 000c 8123     		movs	r3, #129	@ tmp202,
 442 000e 6B44     		add	r3, r3, sp	@ tmp202,
 443 0010 0022     		movs	r2, #0	@ tmp203,
 444 0012 1A70     		strb	r2, [r3]	@ tmp204, resp
 221:src/main.c    **** 	unsigned short power_int, power_dec;
 222:src/main.c    **** 	unsigned short wh_int, wh_dec;
 223:src/main.c    **** 	unsigned short power, last_power;
 224:src/main.c    **** 	float fcalc = 1.0;
 445              		.loc 2 224 0
 446 0014 FE23     		movs	r3, #254	@ tmp205,
 447 0016 9B05     		lsls	r3, r3, #22	@ tmp205, tmp205,
 448 0018 1F93     		str	r3, [sp, #124]	@ tmp205, fcalc
 225:src/main.c    **** 	unsigned int zero_current_loc = 0;
 449              		.loc 2 225 0
 450 001a 0023     		movs	r3, #0	@ tmp206,
 451 001c 2593     		str	r3, [sp, #148]	@ tmp206, zero_current_loc
 226:src/main.c    **** 
 227:src/main.c    **** 	unsigned short acum_secs_index;
 228:src/main.c    **** 	unsigned int acum_secs, acum_hours;
 229:src/main.c    **** 	unsigned char show_power_index = 0;
 452              		.loc 2 229 0
 453 001e 8723     		movs	r3, #135	@ tmp207,
 454 0020 6B44     		add	r3, r3, sp	@ tmp207,
 455 0022 0022     		movs	r2, #0	@ tmp208,
 456 0024 1A70     		strb	r2, [r3]	@ tmp209, show_power_index
 230:src/main.c    **** 	unsigned char show_power = 0;
 457              		.loc 2 230 0
 458 0026 7B23     		movs	r3, #123	@ tmp210,
 459 0028 6B44     		add	r3, r3, sp	@ tmp210,
 460 002a 0022     		movs	r2, #0	@ tmp211,
 461 002c 1A70     		strb	r2, [r3]	@ tmp212, show_power
 231:src/main.c    **** 
 232:src/main.c    **** #ifdef USE_REDONDA_BASIC
 233:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 462              		.loc 2 233 0
ARM GAS  /tmp/cc7m2O8A.s 			page 31


 463 002e 8623     		movs	r3, #134	@ tmp213,
 464 0030 6B44     		add	r3, r3, sp	@ tmp213,
 465 0032 0022     		movs	r2, #0	@ tmp214,
 466 0034 1A70     		strb	r2, [r3]	@ tmp215, main_state
 234:src/main.c    **** 	unsigned char reportar_SMS = 0;
 467              		.loc 2 234 0
 468 0036 7A23     		movs	r3, #122	@ tmp216,
 469 0038 6B44     		add	r3, r3, sp	@ tmp216,
 470 003a 0022     		movs	r2, #0	@ tmp217,
 471 003c 1A70     		strb	r2, [r3]	@ tmp218, reportar_SMS
 235:src/main.c    **** 	unsigned char sended = 0;
 472              		.loc 2 235 0
 473 003e 7923     		movs	r3, #121	@ tmp219,
 474 0040 6B44     		add	r3, r3, sp	@ tmp219,
 475 0042 0022     		movs	r2, #0	@ tmp220,
 476 0044 1A70     		strb	r2, [r3]	@ tmp221, sended
 236:src/main.c    **** 	lamp_on_state_t lamp_on_state = init_airplane0;
 477              		.loc 2 236 0
 478 0046 8523     		movs	r3, #133	@ tmp222,
 479 0048 6B44     		add	r3, r3, sp	@ tmp222,
 480 004a 0022     		movs	r2, #0	@ tmp223,
 481 004c 1A70     		strb	r2, [r3]	@ tmp224, lamp_on_state
 237:src/main.c    **** 	unsigned char counters_mode = 0;
 482              		.loc 2 237 0
 483 004e 21AB     		add	r3, sp, #132	@ tmp225,,
 484 0050 0022     		movs	r2, #0	@ tmp226,
 485 0052 1A70     		strb	r2, [r3]	@ tmp227, counters_mode
 238:src/main.c    **** 	unsigned char meas_end = 0;
 486              		.loc 2 238 0
 487 0054 8323     		movs	r3, #131	@ tmp228,
 488 0056 6B44     		add	r3, r3, sp	@ tmp228,
 489 0058 0022     		movs	r2, #0	@ tmp229,
 490 005a 1A70     		strb	r2, [r3]	@ tmp230, meas_end
 239:src/main.c    **** 
 240:src/main.c    **** #ifdef WITH_HYST
 241:src/main.c    **** 	unsigned short hyst;
 242:src/main.c    **** #endif
 243:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 244:src/main.c    **** 	unsigned char one_to_ten;
 245:src/main.c    **** #endif
 246:src/main.c    **** 
 247:src/main.c    **** #else		//USE_REDONDA_BASIC
 248:src/main.c    **** 	unsigned char main_state = 0;
 249:src/main.c    **** #endif
 250:src/main.c    **** 	char s_lcd [100];		//lo agrando porque lo uso tambien para enviar SMS
 251:src/main.c    **** 	// enum TcpMessages tcp_msg = NONE_MSG;
 252:src/main.c    **** 	// unsigned char new_room = 0;
 253:src/main.c    **** 	// unsigned char new_lamp = 0;
 254:src/main.c    **** 	// unsigned char last_bright = 0;
 255:src/main.c    **** 	// unsigned char show_ldr = 0;
 256:src/main.c    **** 	// int dummy_resp = 0;
 257:src/main.c    **** 	// unsigned char pps_one = 0;
 258:src/main.c    **** 
 259:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 260:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 261:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 262:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
ARM GAS  /tmp/cc7m2O8A.s 			page 32


 263:src/main.c    ****     //   system_stm32f0xx.c file
 264:src/main.c    **** 
 265:src/main.c    **** 	//GPIO Configuration.
 266:src/main.c    **** 	GPIO_Config();
 491              		.loc 2 266 0
 492 005c FFF7FEFF 		bl	GPIO_Config	@
 267:src/main.c    **** 
 268:src/main.c    **** 
 269:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 270:src/main.c    **** 	if (SysTick_Config(48000))
 493              		.loc 2 270 0
 494 0060 D14B     		ldr	r3, .L70	@ tmp231,
 495 0062 1800     		movs	r0, r3	@, tmp231
 496 0064 FFF7FEFF 		bl	SysTick_Config	@
 497 0068 031E     		subs	r3, r0, #0	@ D.7213,,
 498 006a 28D0     		beq	.L13	@,
 499              	.L18:
 271:src/main.c    **** 	{
 272:src/main.c    **** 		while (1)	/* Capture error */
 273:src/main.c    **** 		{
 274:src/main.c    **** 			if (LED)
 500              		.loc 2 274 0
 501 006c 9023     		movs	r3, #144	@ tmp644,
 502 006e DB05     		lsls	r3, r3, #23	@ D.7214, tmp644,
 503 0070 9B8A     		ldrh	r3, [r3, #20]	@ tmp233,
 504 0072 9BB2     		uxth	r3, r3	@ D.7215, tmp233
 505 0074 1A00     		movs	r2, r3	@ D.7216, D.7215
 506 0076 8023     		movs	r3, #128	@ tmp645,
 507 0078 5B01     		lsls	r3, r3, #5	@ tmp234, tmp645,
 508 007a 1340     		ands	r3, r2	@ D.7216, D.7216
 509 007c 05D0     		beq	.L14	@,
 275:src/main.c    **** 				LED_OFF;
 510              		.loc 2 275 0
 511 007e 9023     		movs	r3, #144	@ tmp642,
 512 0080 DB05     		lsls	r3, r3, #23	@ D.7214, tmp642,
 513 0082 8022     		movs	r2, #128	@ tmp643,
 514 0084 5205     		lsls	r2, r2, #21	@ tmp235, tmp643,
 515 0086 9A61     		str	r2, [r3, #24]	@ tmp235, _112->BSRR
 516 0088 04E0     		b	.L15	@
 517              	.L14:
 276:src/main.c    **** 			else
 277:src/main.c    **** 				LED_ON;
 518              		.loc 2 277 0
 519 008a 9023     		movs	r3, #144	@ tmp640,
 520 008c DB05     		lsls	r3, r3, #23	@ D.7214, tmp640,
 521 008e 8022     		movs	r2, #128	@ tmp641,
 522 0090 5201     		lsls	r2, r2, #5	@ tmp236, tmp641,
 523 0092 9A61     		str	r2, [r3, #24]	@ tmp236, _114->BSRR
 524              	.L15:
 278:src/main.c    **** 
 279:src/main.c    **** 			for (i = 0; i < 255; i++)
 525              		.loc 2 279 0
 526 0094 9F23     		movs	r3, #159	@ tmp237,
 527 0096 6B44     		add	r3, r3, sp	@ tmp237,
 528 0098 0022     		movs	r2, #0	@ tmp238,
 529 009a 1A70     		strb	r2, [r3]	@ tmp239, i
 530 009c 09E0     		b	.L16	@
ARM GAS  /tmp/cc7m2O8A.s 			page 33


 531              	.L17:
 280:src/main.c    **** 			{
 281:src/main.c    **** 				asm (	"nop \n\t"
 532              		.loc 2 281 0 discriminator 3
 533              		.syntax divided
 534              	@ 281 "src/main.c" 1
 535 009e C046     		nop 
 536 00a0 C046     		nop 
 537 00a2 C046     		nop 
 538              		
 539              	@ 0 "" 2
 279:src/main.c    **** 			{
 540              		.loc 2 279 0 discriminator 3
 541              		.thumb
 542              		.syntax unified
 543 00a4 9F23     		movs	r3, #159	@ tmp240,
 544 00a6 6B44     		add	r3, r3, sp	@ tmp240,
 545 00a8 1A78     		ldrb	r2, [r3]	@ D.7217, i
 546 00aa 9F23     		movs	r3, #159	@ tmp241,
 547 00ac 6B44     		add	r3, r3, sp	@ tmp241,
 548 00ae 0132     		adds	r2, r2, #1	@ tmp242,
 549 00b0 1A70     		strb	r2, [r3]	@ tmp243, i
 550              	.L16:
 279:src/main.c    **** 			{
 551              		.loc 2 279 0 is_stmt 0 discriminator 1
 552 00b2 9F23     		movs	r3, #159	@ tmp244,
 553 00b4 6B44     		add	r3, r3, sp	@ tmp244,
 554 00b6 1B78     		ldrb	r3, [r3]	@ tmp245, i
 555 00b8 FF2B     		cmp	r3, #255	@ tmp245,
 556 00ba F0D1     		bne	.L17	@,
 282:src/main.c    **** 						"nop \n\t"
 283:src/main.c    **** 						"nop \n\t" );
 284:src/main.c    **** 			}
 285:src/main.c    **** 		}
 557              		.loc 2 285 0 is_stmt 1
 558 00bc D6E7     		b	.L18	@
 559              	.L13:
 286:src/main.c    **** 	}
 287:src/main.c    **** 
 288:src/main.c    **** 
 289:src/main.c    **** 	//ADC Configuration
 290:src/main.c    **** //	AdcConfig();
 291:src/main.c    **** 
 292:src/main.c    **** 	//TIM Configuration.
 293:src/main.c    **** 	// TIM_3_Init();
 294:src/main.c    **** //	TIM_14_Init();
 295:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 296:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 297:src/main.c    **** 
 298:src/main.c    **** //	EXTIOff ();
 299:src/main.c    **** 
 300:src/main.c    **** 
 301:src/main.c    **** //		while (1)
 302:src/main.c    **** //		{
 303:src/main.c    **** //			PIN3_OFF;
 304:src/main.c    **** //			Wait_ms (10);
 305:src/main.c    **** //			PIN3_ON;
ARM GAS  /tmp/cc7m2O8A.s 			page 34


 306:src/main.c    **** //			Wait_ms (10);
 307:src/main.c    **** //		}
 308:src/main.c    **** 
 309:src/main.c    **** 	//--- Leo los parametros de memoria ---//
 310:src/main.c    **** #ifdef USE_REDONDA_BASIC
 311:src/main.c    **** 	param_struct.acumm_historico = ((parameters_typedef *) (unsigned int *) PAGE63)->acumm_historico;
 560              		.loc 2 311 0
 561 00be BB4B     		ldr	r3, .L70+4	@ D.7218,
 562 00c0 9A6C     		ldr	r2, [r3, #72]	@ D.7219, _119->acumm_historico
 563 00c2 BB4B     		ldr	r3, .L70+8	@ tmp246,
 564 00c4 9A64     		str	r2, [r3, #72]	@ D.7219, param_struct.acumm_historico
 312:src/main.c    **** 	if (param_struct.acumm_historico != 0xFFFFFFFF)
 565              		.loc 2 312 0
 566 00c6 BA4B     		ldr	r3, .L70+8	@ tmp247,
 567 00c8 9B6C     		ldr	r3, [r3, #72]	@ D.7219, param_struct.acumm_historico
 568 00ca 0133     		adds	r3, r3, #1	@ tmp646, D.7219,
 569 00cc 10D0     		beq	.L19	@,
 313:src/main.c    **** 	{
 314:src/main.c    **** 		//memoria no vacia
 315:src/main.c    **** 		strncpy( param_struct.num_reportar,
 570              		.loc 2 315 0
 571 00ce B749     		ldr	r1, .L70+4	@ tmp248,
 572 00d0 B74B     		ldr	r3, .L70+8	@ tmp249,
 573 00d2 1822     		movs	r2, #24	@,
 574 00d4 1800     		movs	r0, r3	@, tmp249
 575 00d6 FFF7FEFF 		bl	strncpy	@
 316:src/main.c    **** 					((parameters_typedef *) (char *) PAGE63)->num_reportar,
 317:src/main.c    **** 					sizeof(param_struct.num_reportar));
 318:src/main.c    **** 
 319:src/main.c    **** 
 320:src/main.c    **** 		param_struct.timer_reportar = ((parameters_typedef *) (unsigned int *) PAGE63)->timer_reportar;
 576              		.loc 2 320 0
 577 00da B44A     		ldr	r2, .L70+4	@ D.7218,
 578 00dc 5223     		movs	r3, #82	@ tmp250,
 579 00de D15C     		ldrb	r1, [r2, r3]	@ D.7217,
 580 00e0 B34B     		ldr	r3, .L70+8	@ tmp251,
 581 00e2 5222     		movs	r2, #82	@ tmp252,
 582 00e4 9954     		strb	r1, [r3, r2]	@ tmp253, param_struct.timer_reportar
 321:src/main.c    **** 		reportar_SMS = 1;
 583              		.loc 2 321 0
 584 00e6 7A23     		movs	r3, #122	@ tmp254,
 585 00e8 6B44     		add	r3, r3, sp	@ tmp254,
 586 00ea 0122     		movs	r2, #1	@ tmp255,
 587 00ec 1A70     		strb	r2, [r3]	@ tmp256, reportar_SMS
 588 00ee 12E0     		b	.L20	@
 589              	.L19:
 322:src/main.c    **** 	}
 323:src/main.c    **** 	else
 324:src/main.c    **** 	{
 325:src/main.c    **** 		//memoria vacia
 326:src/main.c    **** 		param_struct.acumm_historico = 0;
 590              		.loc 2 326 0
 591 00f0 AF4B     		ldr	r3, .L70+8	@ tmp257,
 592 00f2 0022     		movs	r2, #0	@ tmp258,
 593 00f4 9A64     		str	r2, [r3, #72]	@ tmp258, param_struct.acumm_historico
 327:src/main.c    **** 		param_struct.timer_reportar = 2;
 594              		.loc 2 327 0
ARM GAS  /tmp/cc7m2O8A.s 			page 35


 595 00f6 AE4B     		ldr	r3, .L70+8	@ tmp259,
 596 00f8 5222     		movs	r2, #82	@ tmp260,
 597 00fa 0221     		movs	r1, #2	@ tmp261,
 598 00fc 9954     		strb	r1, [r3, r2]	@ tmp262, param_struct.timer_reportar
 328:src/main.c    **** 		reportar_SMS = 0;
 599              		.loc 2 328 0
 600 00fe 7A23     		movs	r3, #122	@ tmp263,
 601 0100 6B44     		add	r3, r3, sp	@ tmp263,
 602 0102 0022     		movs	r2, #0	@ tmp264,
 603 0104 1A70     		strb	r2, [r3]	@ tmp265, reportar_SMS
 329:src/main.c    **** 		strcpy( param_struct.num_reportar, "1149867843");	//segund asim de claro
 604              		.loc 2 329 0
 605 0106 AA4B     		ldr	r3, .L70+8	@ tmp266,
 606 0108 AA4A     		ldr	r2, .L70+12	@ tmp267,
 607 010a 03CA     		ldmia	r2!, {r0, r1}	@ tmp269, tmp648, tmp647
 608 010c 03C3     		stmia	r3!, {r0, r1}	@ tmp268, tmp648, tmp647
 609 010e 1188     		ldrh	r1, [r2]	@ tmp270,
 610 0110 1980     		strh	r1, [r3]	@ tmp270,
 611 0112 9278     		ldrb	r2, [r2, #2]	@ tmp271,
 612 0114 9A70     		strb	r2, [r3, #2]	@ tmp271,
 613              	.L20:
 330:src/main.c    **** 	}
 331:src/main.c    **** #endif
 332:src/main.c    **** 
 333:src/main.c    **** 
 334:src/main.c    **** 	//--- Welcome code ---//
 335:src/main.c    **** 	LED_OFF;
 614              		.loc 2 335 0
 615 0116 9023     		movs	r3, #144	@ tmp634,
 616 0118 DB05     		lsls	r3, r3, #23	@ D.7214, tmp634,
 617 011a 8022     		movs	r2, #128	@ tmp635,
 618 011c 5205     		lsls	r2, r2, #21	@ tmp272, tmp635,
 619 011e 9A61     		str	r2, [r3, #24]	@ tmp272, _132->BSRR
 336:src/main.c    **** //	EN_GPS_OFF;
 337:src/main.c    **** 	EN_GPS_ON;
 620              		.loc 2 337 0
 621 0120 9023     		movs	r3, #144	@ tmp636,
 622 0122 DB05     		lsls	r3, r3, #23	@ D.7214, tmp636,
 623 0124 8022     		movs	r2, #128	@ tmp637,
 624 0126 1202     		lsls	r2, r2, #8	@ tmp273, tmp637,
 625 0128 9A61     		str	r2, [r3, #24]	@ tmp273, _134->BSRR
 338:src/main.c    **** 	//RELAY_ON;
 339:src/main.c    **** 	RELAY_OFF;
 626              		.loc 2 339 0
 627 012a 9023     		movs	r3, #144	@ tmp638,
 628 012c DB05     		lsls	r3, r3, #23	@ D.7214, tmp638,
 629 012e 8022     		movs	r2, #128	@ tmp639,
 630 0130 1205     		lsls	r2, r2, #20	@ tmp274, tmp639,
 631 0132 9A61     		str	r2, [r3, #24]	@ tmp274, _136->BSRR
 340:src/main.c    **** 
 341:src/main.c    **** 	USART1Config();
 632              		.loc 2 341 0
 633 0134 FFF7FEFF 		bl	USART1Config	@
 342:src/main.c    **** 	USART2Config();
 634              		.loc 2 342 0
 635 0138 FFF7FEFF 		bl	USART2Config	@
 343:src/main.c    **** 
ARM GAS  /tmp/cc7m2O8A.s 			page 36


 344:src/main.c    **** 	EXTIOff();
 636              		.loc 2 344 0
 637 013c FFF7FEFF 		bl	EXTIOff	@
 345:src/main.c    **** 
 346:src/main.c    **** 
 347:src/main.c    **** 
 348:src/main.c    **** //---------- Pruebas con GSM GATEWAY --------//
 349:src/main.c    **** #ifdef USE_GSM_GATEWAY
 350:src/main.c    **** 	LED_OFF;
 351:src/main.c    **** 	for (i = 0; i < 6; i++)
 352:src/main.c    **** 	{
 353:src/main.c    **** 		if (LED)
 354:src/main.c    **** 			LED_OFF;
 355:src/main.c    **** 		else
 356:src/main.c    **** 			LED_ON;
 357:src/main.c    **** 
 358:src/main.c    **** 		Wait_ms (300);
 359:src/main.c    **** 	}
 360:src/main.c    **** 
 361:src/main.c    **** 	Wait_ms (3000);
 362:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 363:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 364:src/main.c    **** 
 365:src/main.c    **** 	//mando start al gsm
 366:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 367:src/main.c    **** 	//GPSStartResetSM ();
 368:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 369:src/main.c    **** 	while (timer_standby)
 370:src/main.c    **** 	{
 371:src/main.c    **** 		i = GSM_Start();
 372:src/main.c    **** 		if (i == 1)
 373:src/main.c    **** 		{
 374:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 375:src/main.c    **** 			timer_standby = 0;
 376:src/main.c    **** 		}
 377:src/main.c    **** 		else
 378:src/main.c    **** 
 379:src/main.c    **** 		if (i > 1)
 380:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 381:src/main.c    **** 	}
 382:src/main.c    **** 
 383:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 384:src/main.c    **** 
 385:src/main.c    **** 	while (1)
 386:src/main.c    **** 	{
 387:src/main.c    **** 		GSMProcess();
 388:src/main.c    **** 
 389:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 390:src/main.c    **** 		{
 391:src/main.c    **** 			usart2_pckt_ready = 0;
 392:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 393:src/main.c    **** 		}
 394:src/main.c    **** 
 395:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 396:src/main.c    **** 		{
 397:src/main.c    **** 			gsm_pckt_ready = 0;
 398:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
ARM GAS  /tmp/cc7m2O8A.s 			page 37


 399:src/main.c    **** 		}
 400:src/main.c    **** 
 401:src/main.c    **** 		if (LIGHT)
 402:src/main.c    **** 			LED_ON;
 403:src/main.c    **** 		else
 404:src/main.c    **** 			LED_OFF;
 405:src/main.c    **** 	}
 406:src/main.c    **** #endif
 407:src/main.c    **** //---------- Fin Prueba con GSM GATEWAY --------//
 408:src/main.c    **** 
 409:src/main.c    **** 
 410:src/main.c    **** 
 411:src/main.c    **** 
 412:src/main.c    **** 
 413:src/main.c    **** #ifdef USE_REDONDA_BASIC
 414:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 415:src/main.c    **** 	// USART1Config();
 416:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 638              		.loc 2 416 0
 639 0140 FFF7FEFF 		bl	AdcConfig	@
 417:src/main.c    **** 
 418:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 419:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 640              		.loc 2 419 0
 641 0144 FFF7FEFF 		bl	TIM_3_Init	@
 420:src/main.c    **** #endif
 421:src/main.c    **** 
 422:src/main.c    **** 	TIM_16_Init();					//o utilizo para synchro de relay
 642              		.loc 2 422 0
 643 0148 FFF7FEFF 		bl	TIM_16_Init	@
 423:src/main.c    **** 	TIM16Enable();
 644              		.loc 2 423 0
 645 014c FFF7FEFF 		bl	TIM16Enable	@
 424:src/main.c    **** 
 425:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
 646              		.loc 2 425 0
 647 0150 994B     		ldr	r3, .L70+16	@ tmp275,
 648 0152 1800     		movs	r0, r3	@, tmp275
 649 0154 FFF7FEFF 		bl	Usart2Send	@
 426:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 650              		.loc 2 426 0
 651 0158 984B     		ldr	r3, .L70+20	@ tmp276,
 652 015a 1800     		movs	r0, r3	@, tmp276
 653 015c FFF7FEFF 		bl	Usart2Send	@
 427:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 428:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 654              		.loc 2 428 0
 655 0160 974B     		ldr	r3, .L70+24	@ tmp277,
 656 0162 1800     		movs	r0, r3	@, tmp277
 657 0164 FFF7FEFF 		bl	Usart2Send	@
 429:src/main.c    **** 	#endif
 430:src/main.c    **** 	#ifdef WITH_HYST
 431:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 658              		.loc 2 431 0
 659 0168 964B     		ldr	r3, .L70+28	@ tmp278,
 660 016a 1800     		movs	r0, r3	@, tmp278
 661 016c FFF7FEFF 		bl	Usart2Send	@
ARM GAS  /tmp/cc7m2O8A.s 			page 38


 432:src/main.c    **** 	#endif
 433:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 434:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 435:src/main.c    **** 	#endif
 436:src/main.c    **** 	#ifdef USE_WITH_SYNC
 437:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 438:src/main.c    **** 	#else
 439:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 662              		.loc 2 439 0
 663 0170 954B     		ldr	r3, .L70+32	@ tmp279,
 664 0172 1800     		movs	r0, r3	@, tmp279
 665 0174 FFF7FEFF 		bl	Usart2Send	@
 440:src/main.c    **** 	#endif
 441:src/main.c    **** 	#ifdef USE_GSM
 442:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 666              		.loc 2 442 0
 667 0178 944B     		ldr	r3, .L70+36	@ tmp280,
 668 017a 1800     		movs	r0, r3	@, tmp280
 669 017c FFF7FEFF 		bl	Usart2Send	@
 443:src/main.c    **** 	#endif
 444:src/main.c    **** 
 445:src/main.c    **** 
 446:src/main.c    **** 
 447:src/main.c    **** 	for (i = 0; i < 8; i++)
 670              		.loc 2 447 0
 671 0180 9F23     		movs	r3, #159	@ tmp281,
 672 0182 6B44     		add	r3, r3, sp	@ tmp281,
 673 0184 0022     		movs	r2, #0	@ tmp282,
 674 0186 1A70     		strb	r2, [r3]	@ tmp283, i
 675 0188 1DE0     		b	.L21	@
 676              	.L24:
 448:src/main.c    **** 	{
 449:src/main.c    **** 		if (LED)
 677              		.loc 2 449 0
 678 018a 9023     		movs	r3, #144	@ tmp632,
 679 018c DB05     		lsls	r3, r3, #23	@ D.7214, tmp632,
 680 018e 9B8A     		ldrh	r3, [r3, #20]	@ tmp285,
 681 0190 9BB2     		uxth	r3, r3	@ D.7215, tmp285
 682 0192 1A00     		movs	r2, r3	@ D.7216, D.7215
 683 0194 8023     		movs	r3, #128	@ tmp633,
 684 0196 5B01     		lsls	r3, r3, #5	@ tmp286, tmp633,
 685 0198 1340     		ands	r3, r2	@ D.7216, D.7216
 686 019a 05D0     		beq	.L22	@,
 450:src/main.c    **** 			LED_OFF;
 687              		.loc 2 450 0
 688 019c 9023     		movs	r3, #144	@ tmp630,
 689 019e DB05     		lsls	r3, r3, #23	@ D.7214, tmp630,
 690 01a0 8022     		movs	r2, #128	@ tmp631,
 691 01a2 5205     		lsls	r2, r2, #21	@ tmp287, tmp631,
 692 01a4 9A61     		str	r2, [r3, #24]	@ tmp287, _156->BSRR
 693 01a6 04E0     		b	.L23	@
 694              	.L22:
 451:src/main.c    **** 		else
 452:src/main.c    **** 			LED_ON;
 695              		.loc 2 452 0
 696 01a8 9023     		movs	r3, #144	@ tmp628,
 697 01aa DB05     		lsls	r3, r3, #23	@ D.7214, tmp628,
ARM GAS  /tmp/cc7m2O8A.s 			page 39


 698 01ac 8022     		movs	r2, #128	@ tmp629,
 699 01ae 5201     		lsls	r2, r2, #5	@ tmp288, tmp629,
 700 01b0 9A61     		str	r2, [r3, #24]	@ tmp288, _158->BSRR
 701              	.L23:
 453:src/main.c    **** 
 454:src/main.c    **** 		Wait_ms (250);
 702              		.loc 2 454 0 discriminator 2
 703 01b2 FA20     		movs	r0, #250	@,
 704 01b4 FFF7FEFF 		bl	Wait_ms	@
 447:src/main.c    **** 	{
 705              		.loc 2 447 0 discriminator 2
 706 01b8 9F23     		movs	r3, #159	@ tmp289,
 707 01ba 6B44     		add	r3, r3, sp	@ tmp289,
 708 01bc 1A78     		ldrb	r2, [r3]	@ D.7217, i
 709 01be 9F23     		movs	r3, #159	@ tmp290,
 710 01c0 6B44     		add	r3, r3, sp	@ tmp290,
 711 01c2 0132     		adds	r2, r2, #1	@ tmp291,
 712 01c4 1A70     		strb	r2, [r3]	@ tmp292, i
 713              	.L21:
 447:src/main.c    **** 	{
 714              		.loc 2 447 0 is_stmt 0 discriminator 1
 715 01c6 9F23     		movs	r3, #159	@ tmp293,
 716 01c8 6B44     		add	r3, r3, sp	@ tmp293,
 717 01ca 1B78     		ldrb	r3, [r3]	@ tmp294, i
 718 01cc 072B     		cmp	r3, #7	@ tmp294,
 719 01ce DCD9     		bls	.L24	@,
 455:src/main.c    **** 	}
 456:src/main.c    **** 
 457:src/main.c    **** 
 458:src/main.c    **** 	timer_standby = 2000;
 720              		.loc 2 458 0 is_stmt 1
 721 01d0 7F4B     		ldr	r3, .L70+40	@ tmp295,
 722 01d2 FA22     		movs	r2, #250	@ tmp627,
 723 01d4 D200     		lsls	r2, r2, #3	@ tmp296, tmp627,
 724 01d6 1A80     		strh	r2, [r3]	@ tmp297, timer_standby
 459:src/main.c    **** 	FuncsGSMReset();
 725              		.loc 2 459 0
 726 01d8 FFF7FEFF 		bl	FuncsGSMReset	@
 460:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 727              		.loc 2 460 0
 728 01dc 0220     		movs	r0, #2	@,
 729 01de FFF7FEFF 		bl	Usart1Mode	@
 730              	.L61:
 461:src/main.c    **** 
 462:src/main.c    **** 	// while (1)
 463:src/main.c    **** 	// {
 464:src/main.c    **** 	// 	if (SYNCP)
 465:src/main.c    **** 	// 	{
 466:src/main.c    **** 	// 		SYNCP_OFF;
 467:src/main.c    **** 	// 		LED_OFF;
 468:src/main.c    **** 	// 	}
 469:src/main.c    **** 	// 	else
 470:src/main.c    **** 	// 	{
 471:src/main.c    **** 	// 		SYNCP_ON;
 472:src/main.c    **** 	// 		LED_ON;
 473:src/main.c    **** 	// 	}
 474:src/main.c    **** 	// 	Wait_ms(10);
ARM GAS  /tmp/cc7m2O8A.s 			page 40


 475:src/main.c    **** 	//
 476:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 477:src/main.c    **** 	// 	// {
 478:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 479:src/main.c    **** 	// 	// 	Wait_ms (10);
 480:src/main.c    **** 	// 	// }
 481:src/main.c    **** 	// }
 482:src/main.c    **** 
 483:src/main.c    **** 
 484:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 485:src/main.c    **** 	// while (1)
 486:src/main.c    **** 	// {
 487:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 488:src/main.c    **** 	// 	{
 489:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 490:src/main.c    **** 	// 		Wait_ms(10);
 491:src/main.c    **** 	// 	}
 492:src/main.c    **** 	//
 493:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 494:src/main.c    **** 	// 	{
 495:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 496:src/main.c    **** 	// 		Wait_ms(10);
 497:src/main.c    **** 	// 	}
 498:src/main.c    **** 	// }
 499:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 500:src/main.c    **** 
 501:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 502:src/main.c    **** 	// i = 0;
 503:src/main.c    **** 	// while (1)
 504:src/main.c    **** 	// {
 505:src/main.c    **** 	// 	switch (i)
 506:src/main.c    **** 	// 	{
 507:src/main.c    **** 	// 		case 0:
 508:src/main.c    **** 	// 			//habilitar y esperar el final de la secuencia
 509:src/main.c    **** 	// 			ADC1->CR |= ADC_CR_ADSTART;
 510:src/main.c    **** 	// 			seq_ready = 0;
 511:src/main.c    **** 	// 			i++;
 512:src/main.c    **** 	// 			break;
 513:src/main.c    **** 	//
 514:src/main.c    **** 	// 		case 1:
 515:src/main.c    **** 	// 			if (seq_ready)		//esoty sincronizado
 516:src/main.c    **** 	// 				i++;
 517:src/main.c    **** 	// 			break;
 518:src/main.c    **** 	//
 519:src/main.c    **** 	// 		case 2:
 520:src/main.c    **** 	// 			RelayOn();
 521:src/main.c    **** 	// 			timer_standby = 50;
 522:src/main.c    **** 	// 			LED_ON;
 523:src/main.c    **** 	// 			i++;
 524:src/main.c    **** 	// 			break;
 525:src/main.c    **** 	//
 526:src/main.c    **** 	// 		case 3:
 527:src/main.c    **** 	// 			if (!timer_standby)
 528:src/main.c    **** 	// 			{
 529:src/main.c    **** 	// 				RelayOff();
 530:src/main.c    **** 	// 				LED_OFF;
 531:src/main.c    **** 	// 				i++;
ARM GAS  /tmp/cc7m2O8A.s 			page 41


 532:src/main.c    **** 	// 				timer_standby = 10000;
 533:src/main.c    **** 	// 			}
 534:src/main.c    **** 	// 			break;
 535:src/main.c    **** 	//
 536:src/main.c    **** 	// 		case 4:
 537:src/main.c    **** 	// 			if (!timer_standby)
 538:src/main.c    **** 	// 			{
 539:src/main.c    **** 	// 				i = 2;
 540:src/main.c    **** 	// 			}
 541:src/main.c    **** 	// 			break;
 542:src/main.c    **** 	// 	}
 543:src/main.c    **** 	//
 544:src/main.c    **** 	// 	UpdateRelay ();
 545:src/main.c    **** 	// }
 546:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 547:src/main.c    **** 
 548:src/main.c    **** 
 549:src/main.c    **** //--- Programa de pruebas I meas -----
 550:src/main.c    **** 	while (1)
 551:src/main.c    **** 	{
 552:src/main.c    **** 		switch (main_state)
 731              		.loc 2 552 0
 732 01e2 8623     		movs	r3, #134	@ tmp298,
 733 01e4 6B44     		add	r3, r3, sp	@ tmp298,
 734 01e6 1B78     		ldrb	r3, [r3]	@ D.7216, main_state
 735 01e8 092B     		cmp	r3, #9	@ D.7216,
 736 01ea 00D9     		bls	.LCB470	@
 737 01ec D2E2     		b	.L25	@long jump	@
 738              	.LCB470:
 739 01ee 9A00     		lsls	r2, r3, #2	@ tmp299, D.7216,
 740 01f0 784B     		ldr	r3, .L70+44	@ tmp301,
 741 01f2 D318     		adds	r3, r2, r3	@ tmp300, tmp299, tmp301
 742 01f4 1B68     		ldr	r3, [r3]	@ tmp302,
 743 01f6 9F46     		mov	pc, r3	@ tmp302
 744              		.section	.rodata.main,"a",%progbits
 745              		.align	2
 746              	.L27:
 747 0000 F8010000 		.word	.L26
 748 0004 1A020000 		.word	.L28
 749 0008 52020000 		.word	.L29
 750 000c BE020000 		.word	.L30
 751 0010 0E030000 		.word	.L31
 752 0014 08040000 		.word	.L32
 753 0018 94070000 		.word	.L25
 754 001c 94070000 		.word	.L25
 755 0020 94070000 		.word	.L25
 756 0024 5E040000 		.word	.L33
 757              		.section	.text.main
 758              	.L26:
 553:src/main.c    **** 		{
 554:src/main.c    **** 			case MAIN_INIT:
 555:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 759              		.loc 2 555 0
 760 01f8 0A20     		movs	r0, #10	@,
 761 01fa FFF7FEFF 		bl	Update_TIM3_CH1	@
 556:src/main.c    **** 				main_state = SYNCHRO_ADC;
 762              		.loc 2 556 0
ARM GAS  /tmp/cc7m2O8A.s 			page 42


 763 01fe 8623     		movs	r3, #134	@ tmp303,
 764 0200 6B44     		add	r3, r3, sp	@ tmp303,
 765 0202 0122     		movs	r2, #1	@ tmp304,
 766 0204 1A70     		strb	r2, [r3]	@ tmp305, main_state
 557:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 767              		.loc 2 557 0
 768 0206 744B     		ldr	r3, .L70+48	@ D.7220,
 769 0208 734A     		ldr	r2, .L70+48	@ D.7220,
 770 020a 9268     		ldr	r2, [r2, #8]	@ D.7213, _175->CR
 771 020c 0421     		movs	r1, #4	@ tmp306,
 772 020e 0A43     		orrs	r2, r1	@ D.7213, tmp306
 773 0210 9A60     		str	r2, [r3, #8]	@ D.7213, _174->CR
 558:src/main.c    **** 				seq_ready = 0;
 774              		.loc 2 558 0
 775 0212 724B     		ldr	r3, .L70+52	@ tmp307,
 776 0214 0022     		movs	r2, #0	@ tmp308,
 777 0216 1A70     		strb	r2, [r3]	@ tmp309, seq_ready
 559:src/main.c    **** 				break;
 778              		.loc 2 559 0
 779 0218 F1E2     		b	.L34	@
 780              	.L28:
 560:src/main.c    **** 
 561:src/main.c    **** 			case SYNCHRO_ADC:
 562:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 781              		.loc 2 562 0
 782 021a 704B     		ldr	r3, .L70+52	@ tmp310,
 783 021c 1B78     		ldrb	r3, [r3]	@ tmp311, seq_ready
 784 021e DBB2     		uxtb	r3, r3	@ D.7217, tmp311
 785 0220 002B     		cmp	r3, #0	@ D.7217,
 786 0222 00D1     		bne	.LCB505	@
 787 0224 E0E2     		b	.L62	@long jump	@
 788              	.LCB505:
 563:src/main.c    **** 				{
 564:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 789              		.loc 2 564 0
 790 0226 6E4B     		ldr	r3, .L70+56	@ tmp312,
 791 0228 1800     		movs	r0, r3	@, tmp312
 792 022a FFF7FEFF 		bl	Usart2Send	@
 565:src/main.c    **** 
 566:src/main.c    **** #ifdef USE_GSM
 567:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 793              		.loc 2 567 0
 794 022e 6D4B     		ldr	r3, .L70+60	@ tmp313,
 795 0230 1800     		movs	r0, r3	@, tmp313
 796 0232 FFF7FEFF 		bl	Usart2Send	@
 568:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 797              		.loc 2 568 0
 798 0236 8623     		movs	r3, #134	@ tmp314,
 799 0238 6B44     		add	r3, r3, sp	@ tmp314,
 800 023a 0222     		movs	r2, #2	@ tmp315,
 801 023c 1A70     		strb	r2, [r3]	@ tmp316, main_state
 569:src/main.c    **** 					timer_standby = 0;
 802              		.loc 2 569 0
 803 023e 644B     		ldr	r3, .L70+40	@ tmp317,
 804 0240 0022     		movs	r2, #0	@ tmp318,
 805 0242 1A80     		strh	r2, [r3]	@ tmp319, timer_standby
 570:src/main.c    **** 					zero_current_loc = 0;
ARM GAS  /tmp/cc7m2O8A.s 			page 43


 806              		.loc 2 570 0
 807 0244 0023     		movs	r3, #0	@ tmp320,
 808 0246 2593     		str	r3, [sp, #148]	@ tmp320, zero_current_loc
 571:src/main.c    **** 					i = 0;
 809              		.loc 2 571 0
 810 0248 9F23     		movs	r3, #159	@ tmp321,
 811 024a 6B44     		add	r3, r3, sp	@ tmp321,
 812 024c 0022     		movs	r2, #0	@ tmp322,
 813 024e 1A70     		strb	r2, [r3]	@ tmp323, i
 572:src/main.c    **** #else
 573:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 574:src/main.c    **** 					timer_standby = 60000;
 575:src/main.c    **** 					zero_current_loc = 0;
 576:src/main.c    **** 					i = 0;
 577:src/main.c    **** #endif
 578:src/main.c    **** 				}
 579:src/main.c    **** 				break;
 814              		.loc 2 579 0
 815 0250 CAE2     		b	.L62	@
 816              	.L29:
 580:src/main.c    **** 
 581:src/main.c    **** 			case SET_ZERO_CURRENT:
 582:src/main.c    **** 				if (!timer_standby)
 817              		.loc 2 582 0
 818 0252 5F4B     		ldr	r3, .L70+40	@ tmp324,
 819 0254 1B88     		ldrh	r3, [r3]	@ tmp325, timer_standby
 820 0256 9BB2     		uxth	r3, r3	@ D.7215, tmp325
 821 0258 002B     		cmp	r3, #0	@ D.7215,
 822 025a 00D0     		beq	.LCB533	@
 823 025c C6E2     		b	.L63	@long jump	@
 824              	.LCB533:
 583:src/main.c    **** 				{
 584:src/main.c    **** 					if (i < 32)
 825              		.loc 2 584 0
 826 025e 9F23     		movs	r3, #159	@ tmp326,
 827 0260 6B44     		add	r3, r3, sp	@ tmp326,
 828 0262 1B78     		ldrb	r3, [r3]	@ tmp327, i
 829 0264 1F2B     		cmp	r3, #31	@ tmp327,
 830 0266 1AD8     		bhi	.L37	@,
 585:src/main.c    **** 					{
 586:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 831              		.loc 2 586 0
 832 0268 5C4B     		ldr	r3, .L70+52	@ tmp328,
 833 026a 1B78     		ldrb	r3, [r3]	@ tmp329, seq_ready
 834 026c DBB2     		uxtb	r3, r3	@ D.7217, tmp329
 835 026e 002B     		cmp	r3, #0	@ D.7217,
 836 0270 00D1     		bne	.LCB543	@
 837 0272 BBE2     		b	.L63	@long jump	@
 838              	.LCB543:
 587:src/main.c    **** 						{
 588:src/main.c    **** 							seq_ready = 0;
 839              		.loc 2 588 0
 840 0274 594B     		ldr	r3, .L70+52	@ tmp330,
 841 0276 0022     		movs	r2, #0	@ tmp331,
 842 0278 1A70     		strb	r2, [r3]	@ tmp332, seq_ready
 589:src/main.c    **** 							zero_current_loc += I_Sense;
 843              		.loc 2 589 0
ARM GAS  /tmp/cc7m2O8A.s 			page 44


 844 027a 5B4B     		ldr	r3, .L70+64	@ tmp333,
 845 027c 9B88     		ldrh	r3, [r3, #4]	@ tmp335,
 846 027e 9BB2     		uxth	r3, r3	@ D.7215, tmp335
 847 0280 1A00     		movs	r2, r3	@ D.7219, D.7215
 848 0282 259B     		ldr	r3, [sp, #148]	@ tmp337, zero_current_loc
 849 0284 9B18     		adds	r3, r3, r2	@ tmp336, tmp337, D.7219
 850 0286 2593     		str	r3, [sp, #148]	@ tmp336, zero_current_loc
 590:src/main.c    **** 							i++;
 851              		.loc 2 590 0
 852 0288 9F23     		movs	r3, #159	@ tmp338,
 853 028a 6B44     		add	r3, r3, sp	@ tmp338,
 854 028c 1A78     		ldrb	r2, [r3]	@ D.7217, i
 855 028e 9F23     		movs	r3, #159	@ tmp339,
 856 0290 6B44     		add	r3, r3, sp	@ tmp339,
 857 0292 0132     		adds	r2, r2, #1	@ tmp340,
 858 0294 1A70     		strb	r2, [r3]	@ tmp341, i
 591:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 859              		.loc 2 591 0
 860 0296 4E4B     		ldr	r3, .L70+40	@ tmp342,
 861 0298 0222     		movs	r2, #2	@ tmp343,
 862 029a 1A80     		strh	r2, [r3]	@ tmp344, timer_standby
 592:src/main.c    **** 						}
 593:src/main.c    **** 					}
 594:src/main.c    **** 					else
 595:src/main.c    **** 					{
 596:src/main.c    **** 						zero_current_loc >>= 5;
 597:src/main.c    **** 						zero_current = zero_current_loc;
 598:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
 599:src/main.c    **** 						i = 0;
 600:src/main.c    **** 					}
 601:src/main.c    **** 				}
 602:src/main.c    **** 				break;
 863              		.loc 2 602 0
 864 029c A6E2     		b	.L63	@
 865              	.L37:
 596:src/main.c    **** 						zero_current = zero_current_loc;
 866              		.loc 2 596 0
 867 029e 259B     		ldr	r3, [sp, #148]	@ tmp346, zero_current_loc
 868 02a0 5B09     		lsrs	r3, r3, #5	@ tmp345, tmp346,
 869 02a2 2593     		str	r3, [sp, #148]	@ tmp345, zero_current_loc
 597:src/main.c    **** 						main_state = SET_COUNTERS_AND_PHONE0;
 870              		.loc 2 597 0
 871 02a4 259B     		ldr	r3, [sp, #148]	@ tmp348, zero_current_loc
 872 02a6 9AB2     		uxth	r2, r3	@ D.7215, tmp347
 873 02a8 504B     		ldr	r3, .L70+68	@ tmp349,
 874 02aa 1A80     		strh	r2, [r3]	@ tmp350, zero_current
 598:src/main.c    **** 						i = 0;
 875              		.loc 2 598 0
 876 02ac 8623     		movs	r3, #134	@ tmp351,
 877 02ae 6B44     		add	r3, r3, sp	@ tmp351,
 878 02b0 0322     		movs	r2, #3	@ tmp352,
 879 02b2 1A70     		strb	r2, [r3]	@ tmp353, main_state
 599:src/main.c    **** 					}
 880              		.loc 2 599 0
 881 02b4 9F23     		movs	r3, #159	@ tmp354,
 882 02b6 6B44     		add	r3, r3, sp	@ tmp354,
 883 02b8 0022     		movs	r2, #0	@ tmp355,
ARM GAS  /tmp/cc7m2O8A.s 			page 45


 884 02ba 1A70     		strb	r2, [r3]	@ tmp356, i
 885              		.loc 2 602 0
 886 02bc 96E2     		b	.L63	@
 887              	.L30:
 603:src/main.c    **** 
 604:src/main.c    **** 			case SET_COUNTERS_AND_PHONE0:
 605:src/main.c    **** 				acum_secs = 0;
 888              		.loc 2 605 0
 889 02be 0023     		movs	r3, #0	@ tmp357,
 890 02c0 2393     		str	r3, [sp, #140]	@ tmp357, acum_secs
 606:src/main.c    **** 				acum_secs_index = 0;
 891              		.loc 2 606 0
 892 02c2 9223     		movs	r3, #146	@ tmp358,
 893 02c4 6B44     		add	r3, r3, sp	@ tmp358,
 894 02c6 0022     		movs	r2, #0	@ tmp359,
 895 02c8 1A80     		strh	r2, [r3]	@ tmp360, acum_secs_index
 607:src/main.c    **** 				acum_hours = 0;
 896              		.loc 2 607 0
 897 02ca 0023     		movs	r3, #0	@ tmp361,
 898 02cc 2293     		str	r3, [sp, #136]	@ tmp361, acum_hours
 608:src/main.c    **** 
 609:src/main.c    **** 				counters_mode = 0;
 899              		.loc 2 609 0
 900 02ce 21AB     		add	r3, sp, #132	@ tmp362,,
 901 02d0 0022     		movs	r2, #0	@ tmp363,
 902 02d2 1A70     		strb	r2, [r3]	@ tmp364, counters_mode
 610:src/main.c    **** 				LED_OFF;
 903              		.loc 2 610 0
 904 02d4 9023     		movs	r3, #144	@ tmp625,
 905 02d6 DB05     		lsls	r3, r3, #23	@ D.7214, tmp625,
 906 02d8 8022     		movs	r2, #128	@ tmp626,
 907 02da 5205     		lsls	r2, r2, #21	@ tmp365, tmp626,
 908 02dc 9A61     		str	r2, [r3, #24]	@ tmp365, _205->BSRR
 611:src/main.c    **** 
 612:src/main.c    **** 				//espero que el telefono este libre
 613:src/main.c    **** 				//TODO: timeout aca
 614:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_ready)
 909              		.loc 2 614 0
 910 02de FFF7FEFF 		bl	FuncsGSMStateAsk	@
 911 02e2 031E     		subs	r3, r0, #0	@ tmp366,,
 912 02e4 052B     		cmp	r3, #5	@ tmp366,
 913 02e6 00D0     		beq	.LCB606	@
 914 02e8 82E2     		b	.L64	@long jump	@
 915              	.LCB606:
 615:src/main.c    **** 				{
 616:src/main.c    **** 					Usart2Send((char *) (const char *) "Reports by SMS\r\n");
 916              		.loc 2 616 0
 917 02ea 414B     		ldr	r3, .L70+72	@ tmp368,
 918 02ec 1800     		movs	r0, r3	@, tmp368
 919 02ee FFF7FEFF 		bl	Usart2Send	@
 617:src/main.c    **** 					main_state = SET_COUNTERS_AND_PHONE1;
 920              		.loc 2 617 0
 921 02f2 8623     		movs	r3, #134	@ tmp369,
 922 02f4 6B44     		add	r3, r3, sp	@ tmp369,
 923 02f6 0422     		movs	r2, #4	@ tmp370,
 924 02f8 1A70     		strb	r2, [r3]	@ tmp371, main_state
 618:src/main.c    **** 
ARM GAS  /tmp/cc7m2O8A.s 			page 46


 619:src/main.c    **** 					//pido imei
 620:src/main.c    **** 					s_lcd[0] = '\0';
 925              		.loc 2 620 0
 926 02fa 02AB     		add	r3, sp, #8	@ tmp372,,
 927 02fc 0022     		movs	r2, #0	@ tmp373,
 928 02fe 1A70     		strb	r2, [r3]	@ tmp374, s_lcd
 621:src/main.c    **** 					FuncsGSMCommandAnswer ("AT+GSN\r\n" , s_lcd);
 929              		.loc 2 621 0
 930 0300 02AA     		add	r2, sp, #8	@ tmp375,,
 931 0302 3C4B     		ldr	r3, .L70+76	@ tmp376,
 932 0304 1100     		movs	r1, r2	@, tmp375
 933 0306 1800     		movs	r0, r3	@, tmp376
 934 0308 FFF7FEFF 		bl	FuncsGSMCommandAnswer	@
 622:src/main.c    **** 				}
 623:src/main.c    **** 				break;
 935              		.loc 2 623 0
 936 030c 70E2     		b	.L64	@
 937              	.L31:
 624:src/main.c    **** 
 625:src/main.c    **** 			case SET_COUNTERS_AND_PHONE1:
 626:src/main.c    **** 				//espero que el telefono este libre
 627:src/main.c    **** 				if (FuncsGSMStateAsk() == gsm_state_ready)
 938              		.loc 2 627 0
 939 030e FFF7FEFF 		bl	FuncsGSMStateAsk	@
 940 0312 031E     		subs	r3, r0, #0	@ tmp377,,
 941 0314 052B     		cmp	r3, #5	@ tmp377,
 942 0316 00D0     		beq	.LCB629	@
 943 0318 6CE2     		b	.L65	@long jump	@
 944              	.LCB629:
 628:src/main.c    **** 				{
 629:src/main.c    **** 					i = strlen(s_lcd);
 945              		.loc 2 629 0
 946 031a 02AB     		add	r3, sp, #8	@ tmp379,,
 947 031c 1800     		movs	r0, r3	@, tmp379
 948 031e FFF7FEFF 		bl	strlen	@
 949 0322 0200     		movs	r2, r0	@ D.7219,
 950 0324 9F23     		movs	r3, #159	@ tmp380,
 951 0326 6B44     		add	r3, r3, sp	@ tmp380,
 952 0328 1A70     		strb	r2, [r3]	@ tmp381, i
 630:src/main.c    **** 					strncpy(param_struct.imei, s_lcd, (i - 2));
 953              		.loc 2 630 0
 954 032a 9F23     		movs	r3, #159	@ tmp382,
 955 032c 6B44     		add	r3, r3, sp	@ tmp382,
 956 032e 1B78     		ldrb	r3, [r3]	@ D.7216, i
 957 0330 023B     		subs	r3, r3, #2	@ D.7216,
 958 0332 1A00     		movs	r2, r3	@ D.7219, D.7216
 959 0334 02A9     		add	r1, sp, #8	@ tmp383,,
 960 0336 304B     		ldr	r3, .L70+80	@ tmp384,
 961 0338 1800     		movs	r0, r3	@, tmp384
 962 033a FFF7FEFF 		bl	strncpy	@
 631:src/main.c    **** 					Usart2Send("IMEI: ");
 963              		.loc 2 631 0
 964 033e 2F4B     		ldr	r3, .L70+84	@ tmp385,
 965 0340 1800     		movs	r0, r3	@, tmp385
 966 0342 FFF7FEFF 		bl	Usart2Send	@
 632:src/main.c    **** 					Usart2Send(param_struct.imei);
 967              		.loc 2 632 0
ARM GAS  /tmp/cc7m2O8A.s 			page 47


 968 0346 2C4B     		ldr	r3, .L70+80	@ tmp386,
 969 0348 1800     		movs	r0, r3	@, tmp386
 970 034a FFF7FEFF 		bl	Usart2Send	@
 633:src/main.c    **** 					Usart2Send("\r\n");
 971              		.loc 2 633 0
 972 034e 2C4B     		ldr	r3, .L70+88	@ tmp387,
 973 0350 1800     		movs	r0, r3	@, tmp387
 974 0352 FFF7FEFF 		bl	Usart2Send	@
 634:src/main.c    **** 
 635:src/main.c    **** 					//mando SMS con mi info
 636:src/main.c    **** 					strcpy(s_lcd, "IMEI: ");
 975              		.loc 2 636 0
 976 0356 02AB     		add	r3, sp, #8	@ tmp388,,
 977 0358 284A     		ldr	r2, .L70+84	@ tmp389,
 978 035a 1168     		ldr	r1, [r2]	@ tmp392,
 979 035c 1960     		str	r1, [r3]	@ tmp392,
 980 035e 9188     		ldrh	r1, [r2, #4]	@ tmp393,
 981 0360 9980     		strh	r1, [r3, #4]	@ tmp393,
 982 0362 9279     		ldrb	r2, [r2, #6]	@ tmp394,
 983 0364 9A71     		strb	r2, [r3, #6]	@ tmp394,
 637:src/main.c    **** 					strcat(s_lcd, param_struct.imei);
 984              		.loc 2 637 0
 985 0366 244A     		ldr	r2, .L70+80	@ tmp395,
 986 0368 02AB     		add	r3, sp, #8	@ tmp396,,
 987 036a 1100     		movs	r1, r2	@, tmp395
 988 036c 1800     		movs	r0, r3	@, tmp396
 989 036e FFF7FEFF 		bl	strcat	@
 638:src/main.c    **** 					strcat(s_lcd, ", ACTIVO");
 990              		.loc 2 638 0
 991 0372 02AB     		add	r3, sp, #8	@ tmp397,,
 992 0374 1800     		movs	r0, r3	@, tmp397
 993 0376 FFF7FEFF 		bl	strlen	@
 994 037a 0300     		movs	r3, r0	@ tmp398,
 995 037c 1A00     		movs	r2, r3	@ D.7219, tmp399
 996 037e 02AB     		add	r3, sp, #8	@ tmp400,,
 997 0380 9A18     		adds	r2, r3, r2	@ D.7221, tmp400, D.7219
 998 0382 204B     		ldr	r3, .L70+92	@ tmp401,
 999 0384 1000     		movs	r0, r2	@ tmp402, D.7221
 1000 0386 1900     		movs	r1, r3	@ tmp403, tmp401
 1001 0388 0923     		movs	r3, #9	@ tmp404,
 1002 038a 1A00     		movs	r2, r3	@, tmp404
 1003 038c FFF7FEFF 		bl	memcpy	@
 639:src/main.c    **** 
 640:src/main.c    **** 					FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 1004              		.loc 2 640 0
 1005 0390 074A     		ldr	r2, .L70+8	@ tmp407,
 1006 0392 02AB     		add	r3, sp, #8	@ tmp408,,
 1007 0394 1100     		movs	r1, r2	@, tmp407
 1008 0396 1800     		movs	r0, r3	@, tmp408
 1009 0398 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 641:src/main.c    **** 					// FuncsGSMSendSMS("forro", param_struct.num_reportar);
 642:src/main.c    **** 					main_state = LAMP_OFF;
 1010              		.loc 2 642 0
 1011 039c 8623     		movs	r3, #134	@ tmp409,
 1012 039e 6B44     		add	r3, r3, sp	@ tmp409,
 1013 03a0 0522     		movs	r2, #5	@ tmp410,
 1014 03a2 1A70     		strb	r2, [r3]	@ tmp411, main_state
ARM GAS  /tmp/cc7m2O8A.s 			page 48


 643:src/main.c    **** 				}
 644:src/main.c    **** 				break;
 1015              		.loc 2 644 0
 1016 03a4 26E2     		b	.L65	@
 1017              	.L71:
 1018 03a6 C046     		.align	2
 1019              	.L70:
 1020 03a8 80BB0000 		.word	48000
 1021 03ac 00FC0008 		.word	134282240
 1022 03b0 00000000 		.word	param_struct
 1023 03b4 00000000 		.word	.LC1
 1024 03b8 0C000000 		.word	.LC3
 1025 03bc 34000000 		.word	.LC5
 1026 03c0 44000000 		.word	.LC7
 1027 03c4 58000000 		.word	.LC9
 1028 03c8 70000000 		.word	.LC11
 1029 03cc 80000000 		.word	.LC13
 1030 03d0 00000000 		.word	timer_standby
 1031 03d4 00000000 		.word	.L27
 1032 03d8 00240140 		.word	1073816576
 1033 03dc 00000000 		.word	seq_ready
 1034 03e0 9C000000 		.word	.LC18
 1035 03e4 A8000000 		.word	.LC20
 1036 03e8 00000000 		.word	adc_ch
 1037 03ec 00000000 		.word	zero_current
 1038 03f0 D0000000 		.word	.LC24
 1039 03f4 E4000000 		.word	.LC26
 1040 03f8 18000000 		.word	param_struct+24
 1041 03fc F0000000 		.word	.LC29
 1042 0400 F8000000 		.word	.LC31
 1043 0404 FC000000 		.word	.LC33
 1044              	.L32:
 645:src/main.c    **** 
 646:src/main.c    **** 			case LAMP_OFF:
 647:src/main.c    **** 				if (!tt_relay_on_off)
 1045              		.loc 2 647 0
 1046 0408 E54B     		ldr	r3, .L72	@ tmp412,
 1047 040a 1B88     		ldrh	r3, [r3]	@ tmp413, tt_relay_on_off
 1048 040c 9BB2     		uxth	r3, r3	@ D.7215, tmp413
 1049 040e 002B     		cmp	r3, #0	@ D.7215,
 1050 0410 00D0     		beq	.LCB727	@
 1051 0412 F1E1     		b	.L66	@long jump	@
 1052              	.LCB727:
 648:src/main.c    **** 				{
 649:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 1053              		.loc 2 649 0
 1054 0414 FFF7FEFF 		bl	GetPhoto	@
 1055 0418 0300     		movs	r3, r0	@ tmp414,
 1056 041a 1A1E     		subs	r2, r3, #0	@ D.7215, tmp415,
 1057 041c E14B     		ldr	r3, .L72+4	@ tmp416,
 1058 041e 9A42     		cmp	r2, r3	@ D.7215, tmp416
 1059 0420 00D8     		bhi	.LCB733	@
 1060 0422 E9E1     		b	.L66	@long jump	@
 1061              	.LCB733:
 650:src/main.c    **** 					{
 651:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 652:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
ARM GAS  /tmp/cc7m2O8A.s 			page 49


 1062              		.loc 2 652 0
 1063 0424 1A20     		movs	r0, #26	@,
 1064 0426 FFF7FEFF 		bl	Update_TIM3_CH1	@
 653:src/main.c    **** #else
 654:src/main.c    **** 						Update_TIM3_CH1 (PWM_MAX);
 655:src/main.c    **** #endif
 656:src/main.c    **** 						// RelayOn();
 657:src/main.c    **** 						main_state = LAMP_ON;
 1065              		.loc 2 657 0
 1066 042a 8623     		movs	r3, #134	@ tmp417,
 1067 042c 6B44     		add	r3, r3, sp	@ tmp417,
 1068 042e 0922     		movs	r2, #9	@ tmp418,
 1069 0430 1A70     		strb	r2, [r3]	@ tmp419, main_state
 658:src/main.c    **** 						tt_relay_on_off = 10000;
 1070              		.loc 2 658 0
 1071 0432 DB4B     		ldr	r3, .L72	@ tmp420,
 1072 0434 DC4A     		ldr	r2, .L72+8	@ tmp421,
 1073 0436 1A80     		strh	r2, [r3]	@ tmp422, tt_relay_on_off
 659:src/main.c    **** 						Usart2Send("PRENDIDO\r\n");
 1074              		.loc 2 659 0
 1075 0438 DC4B     		ldr	r3, .L72+12	@ tmp423,
 1076 043a 1800     		movs	r0, r3	@, tmp423
 1077 043c FFF7FEFF 		bl	Usart2Send	@
 660:src/main.c    **** 						FuncsGSMSendSMS("PRENDIDO", param_struct.num_reportar);
 1078              		.loc 2 660 0
 1079 0440 DB4A     		ldr	r2, .L72+16	@ tmp424,
 1080 0442 DC4B     		ldr	r3, .L72+20	@ tmp425,
 1081 0444 1100     		movs	r1, r2	@, tmp424
 1082 0446 1800     		movs	r0, r3	@, tmp425
 1083 0448 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 661:src/main.c    **** 						LED_ON;
 1084              		.loc 2 661 0
 1085 044c 9023     		movs	r3, #144	@ tmp623,
 1086 044e DB05     		lsls	r3, r3, #23	@ D.7214, tmp623,
 1087 0450 8022     		movs	r2, #128	@ tmp624,
 1088 0452 5201     		lsls	r2, r2, #5	@ tmp426, tmp624,
 1089 0454 9A61     		str	r2, [r3, #24]	@ tmp426, _239->BSRR
 662:src/main.c    **** #ifdef WITH_HYST
 663:src/main.c    **** 						hours = 0;
 1090              		.loc 2 663 0
 1091 0456 D84B     		ldr	r3, .L72+24	@ tmp427,
 1092 0458 0022     		movs	r2, #0	@ tmp428,
 1093 045a 1A70     		strb	r2, [r3]	@ tmp429, hours
 664:src/main.c    **** #endif
 665:src/main.c    **** 					}
 666:src/main.c    **** 				}
 667:src/main.c    **** 				break;
 1094              		.loc 2 667 0
 1095 045c CCE1     		b	.L66	@
 1096              	.L33:
 668:src/main.c    **** 
 669:src/main.c    **** 			case LAMP_ON:
 670:src/main.c    **** #if defined REPORTS_AIRPLANE_MODE
 671:src/main.c    **** 				switch (lamp_on_state)
 672:src/main.c    **** 				{
 673:src/main.c    **** 					case init_airplane0:
 674:src/main.c    **** 						if (FuncsGSMStateAsk() == gsm_state_ready)
ARM GAS  /tmp/cc7m2O8A.s 			page 50


 675:src/main.c    **** 						{
 676:src/main.c    **** 							//lo paso a modo avion
 677:src/main.c    **** 							s_lcd[0] = '\0';
 678:src/main.c    **** 							FuncsGSMCommandAnswer ("AT+CFUN=4\r\n" , s_lcd);
 679:src/main.c    **** 							lamp_on_state = init_airplane1;
 680:src/main.c    **** 						}
 681:src/main.c    **** 						break;
 682:src/main.c    **** 
 683:src/main.c    **** 					case init_airplane1:
 684:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 685:src/main.c    **** 						{
 686:src/main.c    **** 							//en modo avion, prendo y mido
 687:src/main.c    **** 							RelayOn();
 688:src/main.c    **** 							lamp_on_state = meas_init;
 689:src/main.c    **** 						}
 690:src/main.c    **** 						break;
 691:src/main.c    **** 
 692:src/main.c    **** 					case meas_init:
 693:src/main.c    **** 						if (RelayIsOn())
 694:src/main.c    **** 						{
 695:src/main.c    **** 							lamp_on_state = meas_meas;
 696:src/main.c    **** 							counters_mode = 1;
 697:src/main.c    **** 						}
 698:src/main.c    **** 						break;
 699:src/main.c    **** 
 700:src/main.c    **** 					case meas_meas:
 701:src/main.c    **** 						if (meas_end)
 702:src/main.c    **** 						{
 703:src/main.c    **** 							meas_end = 0;
 704:src/main.c    **** 
 705:src/main.c    **** 							if (!tt_relay_on_off)
 706:src/main.c    **** 							{
 707:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 708:src/main.c    **** 								hyst = GetHysteresis (hours);
 709:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 710:src/main.c    **** #else
 711:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 712:src/main.c    **** #endif
 713:src/main.c    **** 								{
 714:src/main.c    **** 									main_state = LAMP_OFF;
 715:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 716:src/main.c    **** 									Update_TIM3_CH1 (0);
 717:src/main.c    **** #endif
 718:src/main.c    **** 									lamp_on_state = init_airplane0;
 719:src/main.c    **** 									counters_mode = 0;
 720:src/main.c    **** 									Usart2Send("APAGADO\r\n");
 721:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 722:src/main.c    **** 									tt_relay_on_off = 10000;
 723:src/main.c    **** 									RelayOff();
 724:src/main.c    **** 									LED_OFF;
 725:src/main.c    **** 								}
 726:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 727:src/main.c    **** 								else
 728:src/main.c    **** 								{
 729:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 730:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 731:src/main.c    **** 								}
ARM GAS  /tmp/cc7m2O8A.s 			page 51


 732:src/main.c    **** #endif
 733:src/main.c    **** 							}
 734:src/main.c    **** 
 735:src/main.c    **** 							if (!timer_rep)
 736:src/main.c    **** 							{
 737:src/main.c    **** 								timer_rep = param_struct.timer_reportar;
 738:src/main.c    **** 								counters_mode = 2;
 739:src/main.c    **** 								lamp_on_state = meas_reporting0;
 740:src/main.c    **** 							}
 741:src/main.c    **** 						}
 742:src/main.c    **** 						break;
 743:src/main.c    **** 
 744:src/main.c    **** 					case meas_reporting0:
 745:src/main.c    **** 						//lo saco de modo avion
 746:src/main.c    **** 						s_lcd[0] = '\0';
 747:src/main.c    **** 						FuncsGSMCommandAnswer ("AT+CFUN=1\r\n" , s_lcd);
 748:src/main.c    **** 						lamp_on_state = meas_reporting1;
 749:src/main.c    **** 						break;
 750:src/main.c    **** 
 751:src/main.c    **** 					case meas_reporting1:
 752:src/main.c    **** 						if (!strncmp(s_lcd, "OK", sizeof("OK") - 1))
 753:src/main.c    **** 						{
 754:src/main.c    **** 							if (FuncsGSMStateAsk() == gsm_state_ready)
 755:src/main.c    **** 							{
 756:src/main.c    **** 								// fcalc = power;
 757:src/main.c    **** 								fcalc = power * KW;
 758:src/main.c    **** 								power_int = (unsigned short) fcalc;
 759:src/main.c    **** 								fcalc = fcalc - power_int;
 760:src/main.c    **** 								fcalc = fcalc * 100;
 761:src/main.c    **** 								power_dec = (unsigned short) fcalc;
 762:src/main.c    **** 
 763:src/main.c    **** 								fcalc = (acum_hours + acum_secs / 1800) * KW;
 764:src/main.c    **** 								wh_int = (unsigned short) fcalc;
 765:src/main.c    **** 								fcalc = fcalc - wh_int;
 766:src/main.c    **** 								fcalc = fcalc * 10;
 767:src/main.c    **** 								wh_dec = (unsigned short) fcalc;
 768:src/main.c    **** 
 769:src/main.c    **** 								sprintf(s_lcd, "pi: %3d.%02d wh: %3d.%01d\r\n", power_int, power_dec, wh_int, wh_dec);
 770:src/main.c    **** 
 771:src/main.c    **** 								//TODO: para debug no envio datos
 772:src/main.c    **** 								Usart2Send(s_lcd);
 773:src/main.c    **** 								FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 774:src/main.c    **** 							}
 775:src/main.c    **** 							lamp_on_state = init_airplane0;
 776:src/main.c    **** 						}
 777:src/main.c    **** 						break;
 778:src/main.c    **** 
 779:src/main.c    **** 					default:
 780:src/main.c    **** 						lamp_on_state = init_airplane0;
 781:src/main.c    **** 						break;
 782:src/main.c    **** 				}
 783:src/main.c    **** 
 784:src/main.c    **** #elif defined REPORTS_NORMAL_MODE
 785:src/main.c    **** 				switch (lamp_on_state)
 1097              		.loc 2 785 0
 1098 045e 8523     		movs	r3, #133	@ tmp430,
 1099 0460 6B44     		add	r3, r3, sp	@ tmp430,
ARM GAS  /tmp/cc7m2O8A.s 			page 52


 1100 0462 1B78     		ldrb	r3, [r3]	@ D.7216, lamp_on_state
 1101 0464 052B     		cmp	r3, #5	@ D.7216,
 1102 0466 00D9     		bls	.LCB767	@
 1103 0468 12E1     		b	.L42	@long jump	@
 1104              	.LCB767:
 1105 046a 9A00     		lsls	r2, r3, #2	@ tmp431, D.7216,
 1106 046c D34B     		ldr	r3, .L72+28	@ tmp433,
 1107 046e D318     		adds	r3, r2, r3	@ tmp432, tmp431, tmp433
 1108 0470 1B68     		ldr	r3, [r3]	@ tmp434,
 1109 0472 9F46     		mov	pc, r3	@ tmp434
 1110              		.section	.rodata.main
 1111              		.align	2
 1112              	.L44:
 1113 0028 74040000 		.word	.L43
 1114 002c 84040000 		.word	.L45
 1115 0030 94040000 		.word	.L46
 1116 0034 A8040000 		.word	.L47
 1117 0038 7A050000 		.word	.L48
 1118 003c 9A060000 		.word	.L67
 1119              		.section	.text.main
 1120              	.L43:
 786:src/main.c    **** 				{
 787:src/main.c    **** 					case init_airplane0:
 788:src/main.c    **** 						lamp_on_state++;
 1121              		.loc 2 788 0
 1122 0474 8523     		movs	r3, #133	@ tmp435,
 1123 0476 6B44     		add	r3, r3, sp	@ tmp435,
 1124 0478 1A78     		ldrb	r2, [r3]	@ D.7222, lamp_on_state
 1125 047a 8523     		movs	r3, #133	@ tmp436,
 1126 047c 6B44     		add	r3, r3, sp	@ tmp436,
 1127 047e 0132     		adds	r2, r2, #1	@ tmp437,
 1128 0480 1A70     		strb	r2, [r3]	@ tmp438, lamp_on_state
 789:src/main.c    **** 						break;
 1129              		.loc 2 789 0
 1130 0482 0DE1     		b	.L50	@
 1131              	.L45:
 790:src/main.c    **** 
 791:src/main.c    **** 					case init_airplane1:
 792:src/main.c    **** 						lamp_on_state++;
 1132              		.loc 2 792 0
 1133 0484 8523     		movs	r3, #133	@ tmp439,
 1134 0486 6B44     		add	r3, r3, sp	@ tmp439,
 1135 0488 1A78     		ldrb	r2, [r3]	@ D.7222, lamp_on_state
 1136 048a 8523     		movs	r3, #133	@ tmp440,
 1137 048c 6B44     		add	r3, r3, sp	@ tmp440,
 1138 048e 0132     		adds	r2, r2, #1	@ tmp441,
 1139 0490 1A70     		strb	r2, [r3]	@ tmp442, lamp_on_state
 793:src/main.c    **** 						break;
 1140              		.loc 2 793 0
 1141 0492 05E1     		b	.L50	@
 1142              	.L46:
 794:src/main.c    **** 
 795:src/main.c    **** 					case meas_init:
 796:src/main.c    **** 						RelayOn();
 1143              		.loc 2 796 0
 1144 0494 FFF7FEFF 		bl	RelayOn	@
 797:src/main.c    **** 						lamp_on_state = meas_meas;
ARM GAS  /tmp/cc7m2O8A.s 			page 53


 1145              		.loc 2 797 0
 1146 0498 8523     		movs	r3, #133	@ tmp443,
 1147 049a 6B44     		add	r3, r3, sp	@ tmp443,
 1148 049c 0322     		movs	r2, #3	@ tmp444,
 1149 049e 1A70     		strb	r2, [r3]	@ tmp445, lamp_on_state
 798:src/main.c    **** 						counters_mode = 1;
 1150              		.loc 2 798 0
 1151 04a0 21AB     		add	r3, sp, #132	@ tmp446,,
 1152 04a2 0122     		movs	r2, #1	@ tmp447,
 1153 04a4 1A70     		strb	r2, [r3]	@ tmp448, counters_mode
 799:src/main.c    **** 						break;
 1154              		.loc 2 799 0
 1155 04a6 FBE0     		b	.L50	@
 1156              	.L47:
 800:src/main.c    **** 
 801:src/main.c    **** 					case meas_meas:
 802:src/main.c    **** 						if (meas_end)		//termino una vuelta de mediciones, generalmente 2 segundos
 1157              		.loc 2 802 0
 1158 04a8 8323     		movs	r3, #131	@ tmp449,
 1159 04aa 6B44     		add	r3, r3, sp	@ tmp449,
 1160 04ac 1B78     		ldrb	r3, [r3]	@ tmp450, meas_end
 1161 04ae 002B     		cmp	r3, #0	@ tmp450,
 1162 04b0 00D1     		bne	.LCB817	@
 1163 04b2 F4E0     		b	.L68	@long jump	@
 1164              	.LCB817:
 803:src/main.c    **** 						{
 804:src/main.c    **** 							meas_end = 0;
 1165              		.loc 2 804 0
 1166 04b4 8323     		movs	r3, #131	@ tmp451,
 1167 04b6 6B44     		add	r3, r3, sp	@ tmp451,
 1168 04b8 0022     		movs	r2, #0	@ tmp452,
 1169 04ba 1A70     		strb	r2, [r3]	@ tmp453, meas_end
 805:src/main.c    **** 
 806:src/main.c    **** 							if (!tt_relay_on_off)
 1170              		.loc 2 806 0
 1171 04bc B84B     		ldr	r3, .L72	@ tmp454,
 1172 04be 1B88     		ldrh	r3, [r3]	@ tmp455, tt_relay_on_off
 1173 04c0 9BB2     		uxth	r3, r3	@ D.7215, tmp455
 1174 04c2 002B     		cmp	r3, #0	@ D.7215,
 1175 04c4 48D1     		bne	.L52	@,
 807:src/main.c    **** 							{
 808:src/main.c    **** #ifdef WITH_HYST			//con Hysteresis apaga casi en el mismo punto en el que prende
 809:src/main.c    **** 								hyst = GetHysteresis (hours);
 1176              		.loc 2 809 0
 1177 04c6 BC4B     		ldr	r3, .L72+24	@ tmp456,
 1178 04c8 1B78     		ldrb	r3, [r3]	@ tmp457, hours
 1179 04ca DBB2     		uxtb	r3, r3	@ D.7217, tmp457
 1180 04cc 7624     		movs	r4, #118	@ tmp458,
 1181 04ce 6C44     		add	r4, r4, sp	@ tmp458,
 1182 04d0 1800     		movs	r0, r3	@, D.7217
 1183 04d2 FFF7FEFF 		bl	GetHysteresis	@
 1184 04d6 0300     		movs	r3, r0	@ tmp459,
 1185 04d8 2380     		strh	r3, [r4]	@ tmp461, hyst
 810:src/main.c    **** 								if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 1186              		.loc 2 810 0
 1187 04da FFF7FEFF 		bl	GetPhoto	@
 1188 04de 0300     		movs	r3, r0	@ tmp462,
ARM GAS  /tmp/cc7m2O8A.s 			page 54


 1189 04e0 1900     		movs	r1, r3	@ D.7216, D.7215
 1190 04e2 7623     		movs	r3, #118	@ tmp464,
 1191 04e4 6B44     		add	r3, r3, sp	@ tmp464,
 1192 04e6 1B88     		ldrh	r3, [r3]	@ D.7216, hyst
 1193 04e8 AE4A     		ldr	r2, .L72+4	@ tmp465,
 1194 04ea D31A     		subs	r3, r2, r3	@ D.7216, tmp465, D.7216
 1195 04ec 9942     		cmp	r1, r3	@ D.7216, D.7216
 1196 04ee 22DA     		bge	.L53	@,
 811:src/main.c    **** #else
 812:src/main.c    **** 								if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 813:src/main.c    **** #endif
 814:src/main.c    **** 								{
 815:src/main.c    **** 									main_state = LAMP_OFF;
 1197              		.loc 2 815 0
 1198 04f0 8623     		movs	r3, #134	@ tmp466,
 1199 04f2 6B44     		add	r3, r3, sp	@ tmp466,
 1200 04f4 0522     		movs	r2, #5	@ tmp467,
 1201 04f6 1A70     		strb	r2, [r3]	@ tmp468, main_state
 816:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 817:src/main.c    **** 									Update_TIM3_CH1 (0);
 1202              		.loc 2 817 0
 1203 04f8 0020     		movs	r0, #0	@,
 1204 04fa FFF7FEFF 		bl	Update_TIM3_CH1	@
 818:src/main.c    **** #endif
 819:src/main.c    **** 									lamp_on_state = init_airplane0;
 1205              		.loc 2 819 0
 1206 04fe 8523     		movs	r3, #133	@ tmp469,
 1207 0500 6B44     		add	r3, r3, sp	@ tmp469,
 1208 0502 0022     		movs	r2, #0	@ tmp470,
 1209 0504 1A70     		strb	r2, [r3]	@ tmp471, lamp_on_state
 820:src/main.c    **** 									counters_mode = 0;
 1210              		.loc 2 820 0
 1211 0506 21AB     		add	r3, sp, #132	@ tmp472,,
 1212 0508 0022     		movs	r2, #0	@ tmp473,
 1213 050a 1A70     		strb	r2, [r3]	@ tmp474, counters_mode
 821:src/main.c    **** 									Usart2Send("APAGADO");
 1214              		.loc 2 821 0
 1215 050c AC4B     		ldr	r3, .L72+32	@ tmp475,
 1216 050e 1800     		movs	r0, r3	@, tmp475
 1217 0510 FFF7FEFF 		bl	Usart2Send	@
 822:src/main.c    **** 									FuncsGSMSendSMS("APAGADO", param_struct.num_reportar);
 1218              		.loc 2 822 0
 1219 0514 A64A     		ldr	r2, .L72+16	@ tmp476,
 1220 0516 AA4B     		ldr	r3, .L72+32	@ tmp477,
 1221 0518 1100     		movs	r1, r2	@, tmp476
 1222 051a 1800     		movs	r0, r3	@, tmp477
 1223 051c FFF7FEFF 		bl	FuncsGSMSendSMS	@
 823:src/main.c    **** 									tt_relay_on_off = 10000;
 1224              		.loc 2 823 0
 1225 0520 9F4B     		ldr	r3, .L72	@ tmp478,
 1226 0522 A14A     		ldr	r2, .L72+8	@ tmp479,
 1227 0524 1A80     		strh	r2, [r3]	@ tmp480, tt_relay_on_off
 824:src/main.c    **** 									RelayOff();
 1228              		.loc 2 824 0
 1229 0526 FFF7FEFF 		bl	RelayOff	@
 825:src/main.c    **** 									LED_OFF;
 1230              		.loc 2 825 0
ARM GAS  /tmp/cc7m2O8A.s 			page 55


 1231 052a 9023     		movs	r3, #144	@ tmp621,
 1232 052c DB05     		lsls	r3, r3, #23	@ D.7214, tmp621,
 1233 052e 8022     		movs	r2, #128	@ tmp622,
 1234 0530 5205     		lsls	r2, r2, #21	@ tmp481, tmp622,
 1235 0532 9A61     		str	r2, [r3, #24]	@ tmp481, _268->BSRR
 1236 0534 10E0     		b	.L52	@
 1237              	.L53:
 826:src/main.c    **** 								}
 827:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 828:src/main.c    **** 								else
 829:src/main.c    **** 								{
 830:src/main.c    **** 									one_to_ten = GetNew1to10 (GetPhoto());
 1238              		.loc 2 830 0
 1239 0536 FFF7FEFF 		bl	GetPhoto	@
 1240 053a 0300     		movs	r3, r0	@ tmp482,
 1241 053c 7524     		movs	r4, #117	@ tmp484,
 1242 053e 6C44     		add	r4, r4, sp	@ tmp484,
 1243 0540 1800     		movs	r0, r3	@, D.7215
 1244 0542 FFF7FEFF 		bl	GetNew1to10	@
 1245 0546 0300     		movs	r3, r0	@ tmp485,
 1246 0548 2370     		strb	r3, [r4]	@ tmp487, one_to_ten
 831:src/main.c    **** 									Update_TIM3_CH1 (one_to_ten);
 1247              		.loc 2 831 0
 1248 054a 7523     		movs	r3, #117	@ tmp488,
 1249 054c 6B44     		add	r3, r3, sp	@ tmp488,
 1250 054e 1B78     		ldrb	r3, [r3]	@ tmp490, one_to_ten
 1251 0550 9BB2     		uxth	r3, r3	@ D.7215, tmp489
 1252 0552 1800     		movs	r0, r3	@, D.7215
 1253 0554 FFF7FEFF 		bl	Update_TIM3_CH1	@
 1254              	.L52:
 832:src/main.c    **** 								}
 833:src/main.c    **** #endif
 834:src/main.c    **** 							}
 835:src/main.c    **** 
 836:src/main.c    **** 							if (!timer_rep)
 1255              		.loc 2 836 0
 1256 0558 9A4B     		ldr	r3, .L72+36	@ tmp491,
 1257 055a 1B88     		ldrh	r3, [r3]	@ tmp492, timer_rep
 1258 055c 9BB2     		uxth	r3, r3	@ D.7215, tmp492
 1259 055e 002B     		cmp	r3, #0	@ D.7215,
 1260 0560 00D0     		beq	.LCB900	@
 1261 0562 9CE0     		b	.L68	@long jump	@
 1262              	.LCB900:
 837:src/main.c    **** 							{
 838:src/main.c    **** 								timer_rep = param_struct.timer_reportar;
 1263              		.loc 2 838 0
 1264 0564 924B     		ldr	r3, .L72+16	@ tmp493,
 1265 0566 5222     		movs	r2, #82	@ tmp494,
 1266 0568 9B5C     		ldrb	r3, [r3, r2]	@ D.7217,
 1267 056a 9AB2     		uxth	r2, r3	@ D.7215, D.7217
 1268 056c 954B     		ldr	r3, .L72+36	@ tmp495,
 1269 056e 1A80     		strh	r2, [r3]	@ tmp496, timer_rep
 839:src/main.c    **** 								// counters_mode = 2;		//sigo midiendo normalmente
 840:src/main.c    **** 								lamp_on_state = meas_reporting0;
 1270              		.loc 2 840 0
 1271 0570 8523     		movs	r3, #133	@ tmp497,
 1272 0572 6B44     		add	r3, r3, sp	@ tmp497,
ARM GAS  /tmp/cc7m2O8A.s 			page 56


 1273 0574 0422     		movs	r2, #4	@ tmp498,
 1274 0576 1A70     		strb	r2, [r3]	@ tmp499, lamp_on_state
 841:src/main.c    **** 							}
 842:src/main.c    **** 						}
 843:src/main.c    **** 						break;
 1275              		.loc 2 843 0
 1276 0578 91E0     		b	.L68	@
 1277              	.L48:
 844:src/main.c    **** 
 845:src/main.c    **** 					case meas_reporting0:
 846:src/main.c    **** 
 847:src/main.c    **** 						// fcalc = power;
 848:src/main.c    **** 						fcalc = power * KW;
 1278              		.loc 2 848 0
 1279 057a 27AB     		add	r3, sp, #156	@ tmp500,,
 1280 057c 1B88     		ldrh	r3, [r3]	@ D.7216, power
 1281 057e 1800     		movs	r0, r3	@, D.7216
 1282 0580 FFF7FEFF 		bl	__aeabi_i2d	@
 1283 0584 904A     		ldr	r2, .L72+40	@,
 1284 0586 914B     		ldr	r3, .L72+44	@,
 1285 0588 FFF7FEFF 		bl	__aeabi_dmul	@
 1286 058c 0300     		movs	r3, r0	@ tmp501,
 1287 058e 0C00     		movs	r4, r1	@,
 1288 0590 1800     		movs	r0, r3	@, D.7223
 1289 0592 2100     		movs	r1, r4	@, D.7223
 1290 0594 FFF7FEFF 		bl	__aeabi_d2f	@
 1291 0598 031C     		adds	r3, r0, #0	@ tmp502,
 1292 059a 1F93     		str	r3, [sp, #124]	@ tmp502, fcalc
 849:src/main.c    **** 						power_int = (unsigned short) fcalc;
 1293              		.loc 2 849 0
 1294 059c 7224     		movs	r4, #114	@ tmp503,
 1295 059e 6C44     		add	r4, r4, sp	@ tmp503,
 1296 05a0 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1297 05a2 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1298 05a6 0300     		movs	r3, r0	@ tmp504,
 1299 05a8 2380     		strh	r3, [r4]	@ tmp505, power_int
 850:src/main.c    **** 						fcalc = fcalc - power_int;
 1300              		.loc 2 850 0
 1301 05aa 7223     		movs	r3, #114	@ tmp506,
 1302 05ac 6B44     		add	r3, r3, sp	@ tmp506,
 1303 05ae 1B88     		ldrh	r3, [r3]	@ D.7216, power_int
 1304 05b0 1800     		movs	r0, r3	@, D.7216
 1305 05b2 FFF7FEFF 		bl	__aeabi_i2f	@
 1306 05b6 031C     		adds	r3, r0, #0	@ D.7224,
 1307 05b8 191C     		adds	r1, r3, #0	@, D.7224
 1308 05ba 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1309 05bc FFF7FEFF 		bl	__aeabi_fsub	@
 1310 05c0 031C     		adds	r3, r0, #0	@ tmp507,
 1311 05c2 1F93     		str	r3, [sp, #124]	@ tmp507, fcalc
 851:src/main.c    **** 						fcalc = fcalc * 100;
 1312              		.loc 2 851 0
 1313 05c4 8249     		ldr	r1, .L72+48	@,
 1314 05c6 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1315 05c8 FFF7FEFF 		bl	__aeabi_fmul	@
 1316 05cc 031C     		adds	r3, r0, #0	@ tmp508,
 1317 05ce 1F93     		str	r3, [sp, #124]	@ tmp508, fcalc
 852:src/main.c    **** 						power_dec = (unsigned short) fcalc;
ARM GAS  /tmp/cc7m2O8A.s 			page 57


 1318              		.loc 2 852 0
 1319 05d0 1CAC     		add	r4, sp, #112	@ tmp509,,
 1320 05d2 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1321 05d4 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1322 05d8 0300     		movs	r3, r0	@ tmp510,
 1323 05da 2380     		strh	r3, [r4]	@ tmp511, power_dec
 853:src/main.c    **** 
 854:src/main.c    **** 						fcalc = (acum_hours + acum_secs / 1800) * KW;
 1324              		.loc 2 854 0
 1325 05dc 239A     		ldr	r2, [sp, #140]	@ tmp512, acum_secs
 1326 05de E123     		movs	r3, #225	@ tmp620,
 1327 05e0 D900     		lsls	r1, r3, #3	@, tmp620,
 1328 05e2 1000     		movs	r0, r2	@, tmp512
 1329 05e4 FFF7FEFF 		bl	__aeabi_uidiv	@
 1330 05e8 0300     		movs	r3, r0	@ tmp515,
 1331 05ea 1A00     		movs	r2, r3	@ D.7219, tmp515
 1332 05ec 229B     		ldr	r3, [sp, #136]	@ tmp516, acum_hours
 1333 05ee D318     		adds	r3, r2, r3	@ D.7219, D.7219, tmp516
 1334 05f0 1800     		movs	r0, r3	@, D.7219
 1335 05f2 FFF7FEFF 		bl	__aeabi_ui2d	@
 1336 05f6 744A     		ldr	r2, .L72+40	@,
 1337 05f8 744B     		ldr	r3, .L72+44	@,
 1338 05fa FFF7FEFF 		bl	__aeabi_dmul	@
 1339 05fe 0300     		movs	r3, r0	@ tmp517,
 1340 0600 0C00     		movs	r4, r1	@,
 1341 0602 1800     		movs	r0, r3	@, D.7223
 1342 0604 2100     		movs	r1, r4	@, D.7223
 1343 0606 FFF7FEFF 		bl	__aeabi_d2f	@
 1344 060a 031C     		adds	r3, r0, #0	@ tmp518,
 1345 060c 1F93     		str	r3, [sp, #124]	@ tmp518, fcalc
 855:src/main.c    **** 						wh_int = (unsigned short) fcalc;
 1346              		.loc 2 855 0
 1347 060e 6E24     		movs	r4, #110	@ tmp519,
 1348 0610 6C44     		add	r4, r4, sp	@ tmp519,
 1349 0612 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1350 0614 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1351 0618 0300     		movs	r3, r0	@ tmp520,
 1352 061a 2380     		strh	r3, [r4]	@ tmp521, wh_int
 856:src/main.c    **** 						fcalc = fcalc - wh_int;
 1353              		.loc 2 856 0
 1354 061c 6E23     		movs	r3, #110	@ tmp522,
 1355 061e 6B44     		add	r3, r3, sp	@ tmp522,
 1356 0620 1B88     		ldrh	r3, [r3]	@ D.7216, wh_int
 1357 0622 1800     		movs	r0, r3	@, D.7216
 1358 0624 FFF7FEFF 		bl	__aeabi_i2f	@
 1359 0628 031C     		adds	r3, r0, #0	@ D.7224,
 1360 062a 191C     		adds	r1, r3, #0	@, D.7224
 1361 062c 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1362 062e FFF7FEFF 		bl	__aeabi_fsub	@
 1363 0632 031C     		adds	r3, r0, #0	@ tmp523,
 1364 0634 1F93     		str	r3, [sp, #124]	@ tmp523, fcalc
 857:src/main.c    **** 						fcalc = fcalc * 10;
 1365              		.loc 2 857 0
 1366 0636 6749     		ldr	r1, .L72+52	@,
 1367 0638 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1368 063a FFF7FEFF 		bl	__aeabi_fmul	@
 1369 063e 031C     		adds	r3, r0, #0	@ tmp524,
ARM GAS  /tmp/cc7m2O8A.s 			page 58


 1370 0640 1F93     		str	r3, [sp, #124]	@ tmp524, fcalc
 858:src/main.c    **** 						wh_dec = (unsigned short) fcalc;
 1371              		.loc 2 858 0
 1372 0642 1BAC     		add	r4, sp, #108	@ tmp525,,
 1373 0644 1F98     		ldr	r0, [sp, #124]	@, fcalc
 1374 0646 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1375 064a 0300     		movs	r3, r0	@ tmp526,
 1376 064c 2380     		strh	r3, [r4]	@ tmp527, wh_dec
 859:src/main.c    **** 
 860:src/main.c    **** 						sprintf(s_lcd, "pi: %3d.%02d wh: %3d.%01d\r\n", power_int, power_dec, wh_int, wh_dec);
 1377              		.loc 2 860 0
 1378 064e 7223     		movs	r3, #114	@ tmp528,
 1379 0650 6B44     		add	r3, r3, sp	@ tmp528,
 1380 0652 1C88     		ldrh	r4, [r3]	@ D.7216, power_int
 1381 0654 1CAB     		add	r3, sp, #112	@ tmp529,,
 1382 0656 1D88     		ldrh	r5, [r3]	@ D.7216, power_dec
 1383 0658 6E23     		movs	r3, #110	@ tmp530,
 1384 065a 6B44     		add	r3, r3, sp	@ tmp530,
 1385 065c 1B88     		ldrh	r3, [r3]	@ D.7216, wh_int
 1386 065e 1BAA     		add	r2, sp, #108	@ tmp531,,
 1387 0660 1288     		ldrh	r2, [r2]	@ D.7216, wh_dec
 1388 0662 5D49     		ldr	r1, .L72+56	@ tmp532,
 1389 0664 02A8     		add	r0, sp, #8	@ tmp533,,
 1390 0666 0192     		str	r2, [sp, #4]	@ D.7216,
 1391 0668 0093     		str	r3, [sp]	@ D.7216,
 1392 066a 2B00     		movs	r3, r5	@, D.7216
 1393 066c 2200     		movs	r2, r4	@, D.7216
 1394 066e FFF7FEFF 		bl	sprintf	@
 861:src/main.c    **** 
 862:src/main.c    **** 						//TODO: para debug no envio datos
 863:src/main.c    **** 						Usart2Send(s_lcd);
 1395              		.loc 2 863 0
 1396 0672 02AB     		add	r3, sp, #8	@ tmp534,,
 1397 0674 1800     		movs	r0, r3	@, tmp534
 1398 0676 FFF7FEFF 		bl	Usart2Send	@
 864:src/main.c    **** 						FuncsGSMSendSMS(s_lcd, param_struct.num_reportar);
 1399              		.loc 2 864 0
 1400 067a 4D4A     		ldr	r2, .L72+16	@ tmp535,
 1401 067c 02AB     		add	r3, sp, #8	@ tmp536,,
 1402 067e 1100     		movs	r1, r2	@, tmp535
 1403 0680 1800     		movs	r0, r3	@, tmp536
 1404 0682 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 865:src/main.c    **** 						lamp_on_state = meas_meas;
 1405              		.loc 2 865 0
 1406 0686 8523     		movs	r3, #133	@ tmp537,
 1407 0688 6B44     		add	r3, r3, sp	@ tmp537,
 1408 068a 0322     		movs	r2, #3	@ tmp538,
 1409 068c 1A70     		strb	r2, [r3]	@ tmp539, lamp_on_state
 866:src/main.c    **** 						break;
 1410              		.loc 2 866 0
 1411 068e 07E0     		b	.L50	@
 1412              	.L42:
 867:src/main.c    **** 
 868:src/main.c    **** 					case meas_reporting1:
 869:src/main.c    **** 						break;
 870:src/main.c    **** 
 871:src/main.c    **** 					default:
ARM GAS  /tmp/cc7m2O8A.s 			page 59


 872:src/main.c    **** 						lamp_on_state = init_airplane0;
 1413              		.loc 2 872 0
 1414 0690 8523     		movs	r3, #133	@ tmp540,
 1415 0692 6B44     		add	r3, r3, sp	@ tmp540,
 1416 0694 0022     		movs	r2, #0	@ tmp541,
 1417 0696 1A70     		strb	r2, [r3]	@ tmp542, lamp_on_state
 873:src/main.c    **** 						break;
 1418              		.loc 2 873 0
 1419 0698 02E0     		b	.L50	@
 1420              	.L67:
 869:src/main.c    **** 
 1421              		.loc 2 869 0
 1422 069a C046     		nop
 1423 069c 00E0     		b	.L50	@
 1424              	.L68:
 843:src/main.c    **** 
 1425              		.loc 2 843 0
 1426 069e C046     		nop
 1427              	.L50:
 874:src/main.c    **** 				}
 875:src/main.c    **** 
 876:src/main.c    **** #else
 877:src/main.c    **** #error "Debe elegir la forma de reportar Normal / Airplane"
 878:src/main.c    **** #endif
 879:src/main.c    **** 
 880:src/main.c    **** 				if (counters_mode)	//si esta activo el modo de contadores mido
 1428              		.loc 2 880 0
 1429 06a0 21AB     		add	r3, sp, #132	@ tmp543,,
 1430 06a2 1B78     		ldrb	r3, [r3]	@ tmp544, counters_mode
 1431 06a4 002B     		cmp	r3, #0	@ tmp544,
 1432 06a6 00D1     		bne	.LCB1056	@
 1433 06a8 A8E0     		b	.L69	@long jump	@
 1434              	.LCB1056:
 881:src/main.c    **** 				{
 882:src/main.c    **** 					if (!timer_standby)	//update cada 200ms
 1435              		.loc 2 882 0
 1436 06aa 4C4B     		ldr	r3, .L72+60	@ tmp545,
 1437 06ac 1B88     		ldrh	r3, [r3]	@ tmp546, timer_standby
 1438 06ae 9BB2     		uxth	r3, r3	@ D.7215, tmp546
 1439 06b0 002B     		cmp	r3, #0	@ D.7215,
 1440 06b2 00D0     		beq	.LCB1061	@
 1441 06b4 A2E0     		b	.L69	@long jump	@
 1442              	.LCB1061:
 883:src/main.c    **** 					{
 884:src/main.c    **** 						if (i < SIZEOF_POWER_VECT)
 1443              		.loc 2 884 0
 1444 06b6 9F23     		movs	r3, #159	@ tmp547,
 1445 06b8 6B44     		add	r3, r3, sp	@ tmp547,
 1446 06ba 1B78     		ldrb	r3, [r3]	@ tmp548, i
 1447 06bc 092B     		cmp	r3, #9	@ tmp548,
 1448 06be 1AD8     		bhi	.L55	@,
 885:src/main.c    **** 						{
 886:src/main.c    **** 							power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 1449              		.loc 2 886 0
 1450 06c0 9F23     		movs	r3, #159	@ tmp549,
 1451 06c2 6B44     		add	r3, r3, sp	@ tmp549,
 1452 06c4 1C78     		ldrb	r4, [r3]	@ D.7216, i
ARM GAS  /tmp/cc7m2O8A.s 			page 60


 1453 06c6 FFF7FEFF 		bl	GetVGrid	@
 1454 06ca 0300     		movs	r3, r0	@ tmp550,
 1455 06cc 1D00     		movs	r5, r3	@ D.7215, tmp551
 1456 06ce FFF7FEFF 		bl	GetIGrid	@
 1457 06d2 0300     		movs	r3, r0	@ tmp552,
 1458 06d4 1900     		movs	r1, r3	@, D.7215
 1459 06d6 2800     		movs	r0, r5	@, D.7215
 1460 06d8 FFF7FEFF 		bl	PowerCalc	@
 1461 06dc 0300     		movs	r3, r0	@ tmp554,
 1462 06de 1900     		movs	r1, r3	@ D.7215, tmp555
 1463 06e0 3F4B     		ldr	r3, .L72+64	@ tmp556,
 1464 06e2 6200     		lsls	r2, r4, #1	@ tmp557, D.7216,
 1465 06e4 D152     		strh	r1, [r2, r3]	@ tmp558, power_vect
 887:src/main.c    **** 							i++;
 1466              		.loc 2 887 0
 1467 06e6 9F23     		movs	r3, #159	@ tmp559,
 1468 06e8 6B44     		add	r3, r3, sp	@ tmp559,
 1469 06ea 1A78     		ldrb	r2, [r3]	@ D.7217, i
 1470 06ec 9F23     		movs	r3, #159	@ tmp560,
 1471 06ee 6B44     		add	r3, r3, sp	@ tmp560,
 1472 06f0 0132     		adds	r2, r2, #1	@ tmp561,
 1473 06f2 1A70     		strb	r2, [r3]	@ tmp562, i
 1474 06f4 4AE0     		b	.L56	@
 1475              	.L55:
 888:src/main.c    **** 						}
 889:src/main.c    **** 						else
 890:src/main.c    **** 						{		//termine de cargar el vector, guardo muestro info
 891:src/main.c    **** 							i = 0;
 1476              		.loc 2 891 0
 1477 06f6 9F23     		movs	r3, #159	@ tmp563,
 1478 06f8 6B44     		add	r3, r3, sp	@ tmp563,
 1479 06fa 0022     		movs	r2, #0	@ tmp564,
 1480 06fc 1A70     		strb	r2, [r3]	@ tmp565, i
 892:src/main.c    **** 
 893:src/main.c    **** 							if (counters_mode == 1)	//mido normalmente
 1481              		.loc 2 893 0
 1482 06fe 21AB     		add	r3, sp, #132	@ tmp566,,
 1483 0700 1B78     		ldrb	r3, [r3]	@ tmp567, counters_mode
 1484 0702 012B     		cmp	r3, #1	@ tmp567,
 1485 0704 0BD1     		bne	.L57	@,
 894:src/main.c    **** 							{
 895:src/main.c    **** 								power = PowerCalcMean8(power_vect);
 1486              		.loc 2 895 0
 1487 0706 27AC     		add	r4, sp, #156	@ tmp568,,
 1488 0708 354B     		ldr	r3, .L72+64	@ tmp569,
 1489 070a 1800     		movs	r0, r3	@, tmp569
 1490 070c FFF7FEFF 		bl	PowerCalcMean8	@
 1491 0710 0300     		movs	r3, r0	@ tmp570,
 1492 0712 2380     		strh	r3, [r4]	@ tmp572, power
 896:src/main.c    **** 								last_power = power;
 1493              		.loc 2 896 0
 1494 0714 9A23     		movs	r3, #154	@ tmp573,
 1495 0716 6B44     		add	r3, r3, sp	@ tmp573,
 1496 0718 27AA     		add	r2, sp, #156	@ tmp574,,
 1497 071a 1288     		ldrh	r2, [r2]	@ tmp575, power
 1498 071c 1A80     		strh	r2, [r3]	@ tmp575, last_power
 1499              	.L57:
ARM GAS  /tmp/cc7m2O8A.s 			page 61


 897:src/main.c    **** 							}
 898:src/main.c    **** 
 899:src/main.c    **** 							if (counters_mode == 2)	//no mido solo update de lo viejo
 1500              		.loc 2 899 0
 1501 071e 21AB     		add	r3, sp, #132	@ tmp576,,
 1502 0720 1B78     		ldrb	r3, [r3]	@ tmp577, counters_mode
 1503 0722 022B     		cmp	r3, #2	@ tmp577,
 1504 0724 04D1     		bne	.L58	@,
 900:src/main.c    **** 								power = last_power;
 1505              		.loc 2 900 0
 1506 0726 27AB     		add	r3, sp, #156	@ tmp578,,
 1507 0728 9A22     		movs	r2, #154	@ tmp579,
 1508 072a 6A44     		add	r2, r2, sp	@ tmp579,
 1509 072c 1288     		ldrh	r2, [r2]	@ tmp580, last_power
 1510 072e 1A80     		strh	r2, [r3]	@ tmp580, power
 1511              	.L58:
 901:src/main.c    **** 
 902:src/main.c    **** 							acum_secs += power;
 1512              		.loc 2 902 0
 1513 0730 27AB     		add	r3, sp, #156	@ tmp581,,
 1514 0732 1B88     		ldrh	r3, [r3]	@ D.7219, power
 1515 0734 239A     		ldr	r2, [sp, #140]	@ tmp583, acum_secs
 1516 0736 D318     		adds	r3, r2, r3	@ tmp582, tmp583, D.7219
 1517 0738 2393     		str	r3, [sp, #140]	@ tmp582, acum_secs
 903:src/main.c    **** 							acum_secs_index++;
 1518              		.loc 2 903 0
 1519 073a 9223     		movs	r3, #146	@ tmp584,
 1520 073c 6B44     		add	r3, r3, sp	@ tmp584,
 1521 073e 1A88     		ldrh	r2, [r3]	@ D.7215, acum_secs_index
 1522 0740 9223     		movs	r3, #146	@ tmp585,
 1523 0742 6B44     		add	r3, r3, sp	@ tmp585,
 1524 0744 0132     		adds	r2, r2, #1	@ tmp586,
 1525 0746 1A80     		strh	r2, [r3]	@ tmp587, acum_secs_index
 904:src/main.c    **** 							show_power_index++;
 1526              		.loc 2 904 0
 1527 0748 8723     		movs	r3, #135	@ tmp588,
 1528 074a 6B44     		add	r3, r3, sp	@ tmp588,
 1529 074c 1A78     		ldrb	r2, [r3]	@ D.7217, show_power_index
 1530 074e 8723     		movs	r3, #135	@ tmp589,
 1531 0750 6B44     		add	r3, r3, sp	@ tmp589,
 1532 0752 0132     		adds	r2, r2, #1	@ tmp590,
 1533 0754 1A70     		strb	r2, [r3]	@ tmp591, show_power_index
 905:src/main.c    **** 
 906:src/main.c    **** 							if (acum_secs_index >= 1800)
 1534              		.loc 2 906 0
 1535 0756 9223     		movs	r3, #146	@ tmp592,
 1536 0758 6B44     		add	r3, r3, sp	@ tmp592,
 1537 075a 1B88     		ldrh	r3, [r3]	@ tmp593, acum_secs_index
 1538 075c 214A     		ldr	r2, .L72+68	@ tmp594,
 1539 075e 9342     		cmp	r3, r2	@ tmp593, tmp594
 1540 0760 10D9     		bls	.L59	@,
 907:src/main.c    **** 							{
 908:src/main.c    **** 								acum_hours += (acum_secs / 1800);	//lo convierto a Wh, para no perder bits en cada cuenta
 1541              		.loc 2 908 0
 1542 0762 239A     		ldr	r2, [sp, #140]	@ tmp595, acum_secs
 1543 0764 E123     		movs	r3, #225	@ tmp619,
 1544 0766 D900     		lsls	r1, r3, #3	@, tmp619,
ARM GAS  /tmp/cc7m2O8A.s 			page 62


 1545 0768 1000     		movs	r0, r2	@, tmp595
 1546 076a FFF7FEFF 		bl	__aeabi_uidiv	@
 1547 076e 0300     		movs	r3, r0	@ tmp598,
 1548 0770 1A00     		movs	r2, r3	@ D.7219, tmp598
 1549 0772 229B     		ldr	r3, [sp, #136]	@ tmp600, acum_hours
 1550 0774 9B18     		adds	r3, r3, r2	@ tmp599, tmp600, D.7219
 1551 0776 2293     		str	r3, [sp, #136]	@ tmp599, acum_hours
 909:src/main.c    **** 								acum_secs = 0;
 1552              		.loc 2 909 0
 1553 0778 0023     		movs	r3, #0	@ tmp601,
 1554 077a 2393     		str	r3, [sp, #140]	@ tmp601, acum_secs
 910:src/main.c    **** 								acum_secs_index = 0;
 1555              		.loc 2 910 0
 1556 077c 9223     		movs	r3, #146	@ tmp602,
 1557 077e 6B44     		add	r3, r3, sp	@ tmp602,
 1558 0780 0022     		movs	r2, #0	@ tmp603,
 1559 0782 1A80     		strh	r2, [r3]	@ tmp604, acum_secs_index
 1560              	.L59:
 911:src/main.c    **** 							}
 912:src/main.c    **** 
 913:src/main.c    **** 							//cuando termino una medicion completa aviso con meas_end
 914:src/main.c    **** 							meas_end = 1;
 1561              		.loc 2 914 0
 1562 0784 8323     		movs	r3, #131	@ tmp605,
 1563 0786 6B44     		add	r3, r3, sp	@ tmp605,
 1564 0788 0122     		movs	r2, #1	@ tmp606,
 1565 078a 1A70     		strb	r2, [r3]	@ tmp607, meas_end
 1566              	.L56:
 915:src/main.c    **** 
 916:src/main.c    **** 
 917:src/main.c    **** 							// if (show_power_index >= 30)
 918:src/main.c    **** 							// {
 919:src/main.c    **** 							// 	show_power = 1;
 920:src/main.c    **** 							// 	show_power_index = 0;
 921:src/main.c    **** 							// }
 922:src/main.c    **** 							//
 923:src/main.c    **** 							// if (show_power)
 924:src/main.c    **** 							// {
 925:src/main.c    **** 							// 	// fcalc = power;
 926:src/main.c    **** 							// 	fcalc = power * KW;
 927:src/main.c    **** 							// 	power_int = (unsigned short) fcalc;
 928:src/main.c    **** 							// 	fcalc = fcalc - power_int;
 929:src/main.c    **** 							// 	fcalc = fcalc * 100;
 930:src/main.c    **** 							// 	power_dec = (unsigned short) fcalc;
 931:src/main.c    **** 							//
 932:src/main.c    **** 							// 	fcalc = (acum_hours + acum_secs / 1800) * KW;
 933:src/main.c    **** 							// 	wh_int = (unsigned short) fcalc;
 934:src/main.c    **** 							// 	fcalc = fcalc - wh_int;
 935:src/main.c    **** 							// 	fcalc = fcalc * 10;
 936:src/main.c    **** 							// 	wh_dec = (unsigned short) fcalc;
 937:src/main.c    **** 							//
 938:src/main.c    **** 							// 	sprintf(s_lcd, "pi: %3d.%02d wh: %3d.%01d\r\n", power_int, power_dec, wh_int, wh_dec);
 939:src/main.c    **** 							//
 940:src/main.c    **** 							// 	//TODO: para debug no envio datos
 941:src/main.c    **** 							// 	Usart2Send(s_lcd);
 942:src/main.c    **** 							//
 943:src/main.c    **** 							// 	show_power = 0;
ARM GAS  /tmp/cc7m2O8A.s 			page 63


 944:src/main.c    **** 							// }
 945:src/main.c    **** 						}
 946:src/main.c    **** 						timer_standby = 200;		//10 veces 200ms
 1567              		.loc 2 946 0
 1568 078c 134B     		ldr	r3, .L72+60	@ tmp608,
 1569 078e C822     		movs	r2, #200	@ tmp609,
 1570 0790 1A80     		strh	r2, [r3]	@ tmp610, timer_standby
 947:src/main.c    **** 					}
 948:src/main.c    **** 				}
 949:src/main.c    **** 				break;
 1571              		.loc 2 949 0
 1572 0792 33E0     		b	.L69	@
 1573              	.L25:
 950:src/main.c    **** 
 951:src/main.c    **** 			default:
 952:src/main.c    **** 				main_state = MAIN_INIT;
 1574              		.loc 2 952 0
 1575 0794 8623     		movs	r3, #134	@ tmp611,
 1576 0796 6B44     		add	r3, r3, sp	@ tmp611,
 1577 0798 0022     		movs	r2, #0	@ tmp612,
 1578 079a 1A70     		strb	r2, [r3]	@ tmp613, main_state
 953:src/main.c    **** 				break;
 1579              		.loc 2 953 0
 1580 079c 2FE0     		b	.L34	@
 1581              	.L73:
 1582 079e C046     		.align	2
 1583              	.L72:
 1584 07a0 00000000 		.word	tt_relay_on_off
 1585 07a4 8A0E0000 		.word	3722
 1586 07a8 10270000 		.word	10000
 1587 07ac 08010000 		.word	.LC36
 1588 07b0 00000000 		.word	param_struct
 1589 07b4 14010000 		.word	.LC38
 1590 07b8 00000000 		.word	hours
 1591 07bc 28000000 		.word	.L44
 1592 07c0 20010000 		.word	.LC42
 1593 07c4 00000000 		.word	timer_rep
 1594 07c8 90F7AA95 		.word	-1783957616
 1595 07cc 09BF843F 		.word	1065664265
 1596 07d0 0000C842 		.word	1120403456
 1597 07d4 00002041 		.word	1092616192
 1598 07d8 28010000 		.word	.LC45
 1599 07dc 00000000 		.word	timer_standby
 1600 07e0 00000000 		.word	power_vect
 1601 07e4 07070000 		.word	1799
 1602              	.L62:
 579:src/main.c    **** 
 1603              		.loc 2 579 0
 1604 07e8 C046     		nop
 1605 07ea 08E0     		b	.L34	@
 1606              	.L63:
 602:src/main.c    **** 
 1607              		.loc 2 602 0
 1608 07ec C046     		nop
 1609 07ee 06E0     		b	.L34	@
 1610              	.L64:
 623:src/main.c    **** 
ARM GAS  /tmp/cc7m2O8A.s 			page 64


 1611              		.loc 2 623 0
 1612 07f0 C046     		nop
 1613 07f2 04E0     		b	.L34	@
 1614              	.L65:
 644:src/main.c    **** 
 1615              		.loc 2 644 0
 1616 07f4 C046     		nop
 1617 07f6 02E0     		b	.L34	@
 1618              	.L66:
 667:src/main.c    **** 
 1619              		.loc 2 667 0
 1620 07f8 C046     		nop
 1621 07fa 00E0     		b	.L34	@
 1622              	.L69:
 949:src/main.c    **** 
 1623              		.loc 2 949 0
 1624 07fc C046     		nop
 1625              	.L34:
 954:src/main.c    **** 		}
 955:src/main.c    **** 
 956:src/main.c    **** 		//Cosas que dependen de las muestras
 957:src/main.c    **** 		if (seq_ready)
 1626              		.loc 2 957 0
 1627 07fe 094B     		ldr	r3, .L74	@ tmp614,
 1628 0800 1B78     		ldrb	r3, [r3]	@ tmp615, seq_ready
 1629 0802 DBB2     		uxtb	r3, r3	@ D.7217, tmp615
 1630 0804 002B     		cmp	r3, #0	@ D.7217,
 1631 0806 06D0     		beq	.L60	@,
 958:src/main.c    **** 		{
 959:src/main.c    **** 			seq_ready = 0;
 1632              		.loc 2 959 0
 1633 0808 064B     		ldr	r3, .L74	@ tmp616,
 1634 080a 0022     		movs	r2, #0	@ tmp617,
 1635 080c 1A70     		strb	r2, [r3]	@ tmp618, seq_ready
 960:src/main.c    **** 			UpdateVGrid ();
 1636              		.loc 2 960 0
 1637 080e FFF7FEFF 		bl	UpdateVGrid	@
 961:src/main.c    **** 			UpdateIGrid ();
 1638              		.loc 2 961 0
 1639 0812 FFF7FEFF 		bl	UpdateIGrid	@
 1640              	.L60:
 962:src/main.c    **** 		}
 963:src/main.c    **** 
 964:src/main.c    **** 		//Cosas que no dependen del estado del programa
 965:src/main.c    **** 		UpdateRelay ();
 1641              		.loc 2 965 0
 1642 0816 FFF7FEFF 		bl	UpdateRelay	@
 966:src/main.c    **** 		UpdatePhotoTransistor();
 1643              		.loc 2 966 0
 1644 081a FFF7FEFF 		bl	UpdatePhotoTransistor	@
 967:src/main.c    **** #ifdef USE_GSM
 968:src/main.c    **** 		FuncsGSM();
 1645              		.loc 2 968 0
 1646 081e FFF7FEFF 		bl	FuncsGSM	@
 969:src/main.c    **** #endif
 970:src/main.c    **** 	}	//end while 1
 1647              		.loc 2 970 0
ARM GAS  /tmp/cc7m2O8A.s 			page 65


 1648 0822 DEE4     		b	.L61	@
 1649              	.L75:
 1650              		.align	2
 1651              	.L74:
 1652 0824 00000000 		.word	seq_ready
 1653              		.cfi_endproc
 1654              	.LFE20:
 1655              		.size	main, .-main
 1656              		.section	.rodata
 1657              		.align	2
 1658              	.LC48:
 1659 0144 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1659      3A7B226D 
 1659      794E616D 
 1659      65223A22 
 1659      4E75636C 
 1660              		.align	2
 1661              	.LC50:
 1662 015c 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1662      54656D70 
 1662      65726174 
 1662      75726522 
 1662      3A256C75 
 1663 0175 000000   		.align	2
 1664              	.LC52:
 1665 0178 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1665      48756D69 
 1665      64697479 
 1665      223A256C 
 1665      752E256C 
 1666 018e 0000     		.align	2
 1667              	.LC54:
 1668 0190 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1668      50726573 
 1668      73757265 
 1668      223A256C 
 1668      752E256C 
 1669 01a6 0000     		.align	2
 1670              	.LC56:
 1671 01a8 7D7D00   		.ascii	"}}\000"
 1672              		.section	.text.prepare_json_pkt,"ax",%progbits
 1673              		.align	2
 1674              		.global	prepare_json_pkt
 1675              		.code	16
 1676              		.thumb_func
 1677              		.type	prepare_json_pkt, %function
 1678              	prepare_json_pkt:
 1679              	.LFB21:
 971:src/main.c    **** 
 972:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 973:src/main.c    **** 
 974:src/main.c    **** 	while (1)
 975:src/main.c    **** 	{
 976:src/main.c    **** 		switch (main_state)
 977:src/main.c    **** 		{
 978:src/main.c    **** 			case MAIN_INIT:
 979:src/main.c    **** 				RelayOff();
ARM GAS  /tmp/cc7m2O8A.s 			page 66


 980:src/main.c    **** 				LED_OFF;
 981:src/main.c    **** 				FillPhotoBuffer();
 982:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 983:src/main.c    **** 				FillTempBuffer();
 984:src/main.c    **** #endif
 985:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 986:src/main.c    **** 				Update_TIM3_CH1 (0);
 987:src/main.c    **** #endif
 988:src/main.c    **** 				main_state = SYNCHRO_ADC;
 989:src/main.c    **** #ifdef ADC_WITH_INT
 990:src/main.c    **** 				seq_ready = 0;
 991:src/main.c    **** #endif
 992:src/main.c    **** 				break;
 993:src/main.c    **** 
 994:src/main.c    **** 			case SYNCHRO_ADC:
 995:src/main.c    **** #ifdef ADC_WITH_INT
 996:src/main.c    **** 				if (seq_ready)
 997:src/main.c    **** #endif
 998:src/main.c    **** 				{
 999:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
1000:src/main.c    **** 				}
1001:src/main.c    **** 				break;
1002:src/main.c    **** 
1003:src/main.c    **** 			case SET_ZERO_CURRENT:
1004:src/main.c    **** 				main_state = LAMP_OFF;
1005:src/main.c    **** 				break;
1006:src/main.c    **** 
1007:src/main.c    **** 			case LAMP_OFF:
1008:src/main.c    **** 				if (!tt_relay_on_off)
1009:src/main.c    **** 				{
1010:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
1011:src/main.c    **** 					{
1012:src/main.c    **** 						main_state = LAMP_ON;
1013:src/main.c    **** 						tt_relay_on_off = 10000;
1014:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
1015:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
1016:src/main.c    **** 	#endif
1017:src/main.c    **** 
1018:src/main.c    **** 						RelayOn();
1019:src/main.c    **** 						LED_ON;
1020:src/main.c    **** 	#ifdef WITH_HYST
1021:src/main.c    **** 						hours = 0;
1022:src/main.c    **** 	#endif
1023:src/main.c    **** 					}
1024:src/main.c    **** 				}
1025:src/main.c    **** 				break;
1026:src/main.c    **** 
1027:src/main.c    **** 			case LAMP_ON:
1028:src/main.c    **** 				if (!tt_relay_on_off)
1029:src/main.c    **** 				{
1030:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
1031:src/main.c    **** 					hyst = GetHysteresis (hours);
1032:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
1033:src/main.c    **** 	#else
1034:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
1035:src/main.c    **** 	#endif
1036:src/main.c    **** 					{
ARM GAS  /tmp/cc7m2O8A.s 			page 67


1037:src/main.c    **** 						main_state = LAMP_OFF;
1038:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
1039:src/main.c    **** 						Update_TIM3_CH1 (0);
1040:src/main.c    **** 	#endif
1041:src/main.c    **** 						tt_relay_on_off = 10000;
1042:src/main.c    **** 						RelayOff();
1043:src/main.c    **** 						LED_OFF;
1044:src/main.c    **** 					}
1045:src/main.c    **** 				}
1046:src/main.c    **** 
1047:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
1048:src/main.c    **** 				if (main_state == LAMP_ON)
1049:src/main.c    **** 				{
1050:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
1051:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
1052:src/main.c    **** 				}
1053:src/main.c    **** 	#endif
1054:src/main.c    **** 				break;
1055:src/main.c    **** 
1056:src/main.c    **** 			default:
1057:src/main.c    **** 				main_state = MAIN_INIT;
1058:src/main.c    **** 				break;
1059:src/main.c    **** 		}
1060:src/main.c    **** 
1061:src/main.c    **** 		if (!timer_standby)
1062:src/main.c    **** 		{
1063:src/main.c    **** #ifdef WITH_TEMP_CONTROL
1064:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
1065:src/main.c    **** #else
1066:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
1067:src/main.c    **** #endif
1068:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
1069:src/main.c    **** 			Usart2Send(s_lcd);
1070:src/main.c    **** 			timer_standby = 2000;
1071:src/main.c    **** 		}
1072:src/main.c    **** 
1073:src/main.c    **** 		//Cosas que no dependen del estado del programa
1074:src/main.c    **** 		UpdateRelay ();
1075:src/main.c    **** #ifdef WITH_TEMP_CONTROL
1076:src/main.c    **** 		UpdateTemp();
1077:src/main.c    **** #endif
1078:src/main.c    **** 		UpdatePhotoTransistor();
1079:src/main.c    **** 	}	//end while 1
1080:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
1081:src/main.c    **** #endif	//USE_REDONDA_BASIC
1082:src/main.c    **** 
1083:src/main.c    **** 
1084:src/main.c    **** #ifdef USE_MQTT_LIB
1085:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
1086:src/main.c    **** 	int rc = 0;
1087:src/main.c    **** 	char buf[200];
1088:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
1089:src/main.c    **** 	char* payload = "mypayload";
1090:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
1091:src/main.c    **** 	int len = 0;
1092:src/main.c    **** 
1093:src/main.c    **** 	data.clientID.cstring = "me";
ARM GAS  /tmp/cc7m2O8A.s 			page 68


1094:src/main.c    **** 	data.keepAliveInterval = 20;
1095:src/main.c    **** 	data.cleansession = 1;
1096:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
1097:src/main.c    **** 
1098:src/main.c    **** 	topicString.cstring = "mytopic";
1099:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
1100:src/main.c    **** 
1101:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
1102:src/main.c    **** 	//falta abrir puerto
1103:src/main.c    **** 	//falta enviar al socket
1104:src/main.c    **** 	//falta cerrar socket
1105:src/main.c    **** #endif
1106:src/main.c    **** 
1107:src/main.c    **** //	//---------- Prueba USART2 --------//
1108:src/main.c    **** //
1109:src/main.c    **** //    while( 1 )
1110:src/main.c    **** //    {
1111:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1112:src/main.c    **** //        Wait_ms(3000);
1113:src/main.c    **** //    }
1114:src/main.c    **** //
1115:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
1116:src/main.c    **** 
1117:src/main.c    **** 	//---------- Prueba con GPS --------//
1118:src/main.c    **** #ifdef USE_GPS
1119:src/main.c    **** 	Usart2SendSingle('M');
1120:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
1121:src/main.c    **** 	Wait_ms(1000);
1122:src/main.c    **** 
1123:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
1124:src/main.c    **** 
1125:src/main.c    **** 	//mando reset al gps
1126:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
1127:src/main.c    **** 	GPSStartResetSM ();
1128:src/main.c    **** 	while (GPSStart() != RESP_OK);
1129:src/main.c    **** 
1130:src/main.c    **** 	//mando conf al gps
1131:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
1132:src/main.c    **** 	GPSConfigResetSM ();
1133:src/main.c    **** 	while (GPSConfig() != RESP_OK);
1134:src/main.c    **** 
1135:src/main.c    **** //	//mando reset factory al gps
1136:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
1137:src/main.c    **** //	GPSResetFactoryResetSM ();
1138:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
1139:src/main.c    **** 
1140:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
1141:src/main.c    **** //	timer_standby = 60000;
1142:src/main.c    **** //	while( timer_standby )
1143:src/main.c    **** 	while( 1 )
1144:src/main.c    **** 	{
1145:src/main.c    **** 		if (gps_pckt_ready)
1146:src/main.c    **** 		{
1147:src/main.c    **** 			gps_pckt_ready = 0;
1148:src/main.c    **** 			//Usart2SendSingle('P');
1149:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
1150:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
ARM GAS  /tmp/cc7m2O8A.s 			page 69


1151:src/main.c    **** 		}
1152:src/main.c    **** 
1153:src/main.c    **** 		GPSProcess();
1154:src/main.c    **** 	}
1155:src/main.c    **** #endif
1156:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
1157:src/main.c    **** 
1158:src/main.c    **** 	//---------- Prueba con GSM --------//
1159:src/main.c    **** #ifdef USE_GSM
1160:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
1161:src/main.c    **** 
1162:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
1163:src/main.c    **** 
1164:src/main.c    **** 
1165:src/main.c    **** 	//Pruebo USART1
1166:src/main.c    **** //	while (1)
1167:src/main.c    **** //	{
1168:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
1169:src/main.c    **** //			Wait_ms(50);
1170:src/main.c    **** //	}
1171:src/main.c    **** 
1172:src/main.c    **** 
1173:src/main.c    **** 	//mando start al gsm
1174:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
1175:src/main.c    **** 	//GPSStartResetSM ();
1176:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
1177:src/main.c    **** 	while (timer_standby)
1178:src/main.c    **** 	{
1179:src/main.c    **** 		i = GSM_Start();
1180:src/main.c    **** 		if (i == 2)
1181:src/main.c    **** 		{
1182:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
1183:src/main.c    **** 			timer_standby = 0;
1184:src/main.c    **** 		}
1185:src/main.c    **** 
1186:src/main.c    **** 		if (i == 4)
1187:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
1188:src/main.c    **** 	}
1189:src/main.c    **** 
1190:src/main.c    **** 	//mando conf al gsm
1191:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
1192:src/main.c    **** 	//GPSConfigResetSM ();
1193:src/main.c    **** 
1194:src/main.c    **** 	i = 0;
1195:src/main.c    **** 	while (i == 0)
1196:src/main.c    **** 	{
1197:src/main.c    **** 		ii = GSM_Config(1000);
1198:src/main.c    **** 
1199:src/main.c    **** 		if (ii == 2)
1200:src/main.c    **** 			i = 0;
1201:src/main.c    **** 		else if (ii > 2)
1202:src/main.c    **** 		{
1203:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
1204:src/main.c    **** 			while (1);
1205:src/main.c    **** 		}
1206:src/main.c    **** 
1207:src/main.c    **** 		GSMProcess();
ARM GAS  /tmp/cc7m2O8A.s 			page 70


1208:src/main.c    **** 		GSMReceive ();
1209:src/main.c    **** 
1210:src/main.c    **** 		if (gsm_pckt_ready)
1211:src/main.c    **** 		{
1212:src/main.c    **** 			gsm_pckt_ready = 0;
1213:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1214:src/main.c    **** 		}
1215:src/main.c    **** 
1216:src/main.c    **** 		if (LIGHT)
1217:src/main.c    **** 			LED_ON;
1218:src/main.c    **** 		else
1219:src/main.c    **** 			LED_OFF;
1220:src/main.c    **** 	}
1221:src/main.c    **** 
1222:src/main.c    **** 
1223:src/main.c    **** 	while( 1 )
1224:src/main.c    **** 	{
1225:src/main.c    **** 		if (gsm_pckt_ready)
1226:src/main.c    **** 		{
1227:src/main.c    **** 			gsm_pckt_ready = 0;
1228:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
1229:src/main.c    **** 		}
1230:src/main.c    **** 
1231:src/main.c    **** 		GSMProcess();
1232:src/main.c    **** 
1233:src/main.c    **** 		if (LIGHT)
1234:src/main.c    **** 			LED_ON;
1235:src/main.c    **** 
1236:src/main.c    **** 	}
1237:src/main.c    **** #endif
1238:src/main.c    **** 
1239:src/main.c    **** 
1240:src/main.c    **** 
1241:src/main.c    **** 
1242:src/main.c    **** 	//---------- Prueba temp --------//
1243:src/main.c    **** 	/*
1244:src/main.c    **** 	while (1)
1245:src/main.c    **** 	{
1246:src/main.c    **** 		local_meas = GetTemp();
1247:src/main.c    **** 		if (local_meas != local_meas_last)
1248:src/main.c    **** 		{
1249:src/main.c    **** 			LED_ON;
1250:src/main.c    **** 			local_meas_last = local_meas;
1251:src/main.c    **** 			LCD_2DO_RENGLON;
1252:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
1253:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
1254:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
1255:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
1256:src/main.c    **** 			LCDTransmitStr(s_lcd);
1257:src/main.c    **** 			LED_OFF;
1258:src/main.c    **** 		}
1259:src/main.c    **** 
1260:src/main.c    **** 		UpdateTemp();
1261:src/main.c    **** 	}
1262:src/main.c    **** 	*/
1263:src/main.c    **** 	//---------- Fin prueba temp --------//
1264:src/main.c    **** 
ARM GAS  /tmp/cc7m2O8A.s 			page 71


1265:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
1266:src/main.c    **** 	/*
1267:src/main.c    **** 	local_meas = 0;
1268:src/main.c    **** 	while (1)
1269:src/main.c    **** 	{
1270:src/main.c    **** 		LCD_2DO_RENGLON;
1271:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
1272:src/main.c    **** 		fcalc = local_meas;
1273:src/main.c    **** 		fcalc = fcalc * K_1TO10;
1274:src/main.c    **** 		one_int = (short) fcalc;
1275:src/main.c    **** 		fcalc = fcalc - one_int;
1276:src/main.c    **** 		fcalc = fcalc * 10;
1277:src/main.c    **** 		one_dec = (short) fcalc;
1278:src/main.c    **** 
1279:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
1280:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
1281:src/main.c    **** 		LCDTransmitStr(s_lcd);
1282:src/main.c    **** 
1283:src/main.c    **** 		Wait_ms (1000);
1284:src/main.c    **** 		if (local_meas <= 255)
1285:src/main.c    **** 			local_meas = 0;
1286:src/main.c    **** 		else
1287:src/main.c    **** 			local_meas++;
1288:src/main.c    **** 	}
1289:src/main.c    **** 	*/
1290:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
1291:src/main.c    **** 
1292:src/main.c    **** 
1293:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
1294:src/main.c    **** 
1295:src/main.c    **** 	return 0;
1296:src/main.c    **** }
1297:src/main.c    **** 
1298:src/main.c    **** //--- End of Main ---//
1299:src/main.c    **** 
1300:src/main.c    **** 
1301:src/main.c    **** 
1302:src/main.c    **** 
1303:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
1304:src/main.c    **** {
 1680              		.loc 2 1304 0
 1681              		.cfi_startproc
 1682 0000 00B5     		push	{lr}	@
 1683              	.LCFI6:
 1684              		.cfi_def_cfa_offset 4
 1685              		.cfi_offset 14, -4
 1686 0002 97B0     		sub	sp, sp, #92	@,,
 1687              	.LCFI7:
 1688              		.cfi_def_cfa_offset 96
 1689 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
1305:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1690              		.loc 2 1305 0
 1691 0006 0123     		movs	r3, #1	@ tmp112,
 1692 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1693 000a 0223     		movs	r3, #2	@ tmp113,
 1694 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1695 000e 0323     		movs	r3, #3	@ tmp114,
ARM GAS  /tmp/cc7m2O8A.s 			page 72


 1696 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1697 0012 0423     		movs	r3, #4	@ tmp115,
 1698 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1699 0016 0523     		movs	r3, #5	@ tmp116,
 1700 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
 1701 001a 0623     		movs	r3, #6	@ tmp117,
 1702 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
1306:src/main.c    ****       char tempbuff[40];
1307:src/main.c    ****       volatile float HUMIDITY_Value;
1308:src/main.c    ****       volatile float TEMPERATURE_Value;
1309:src/main.c    ****       volatile float PRESSURE_Value;
1310:src/main.c    **** 
1311:src/main.c    **** 
1312:src/main.c    **** 
1313:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1703              		.loc 2 1313 0
 1704 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1705 0020 1E4B     		ldr	r3, .L78	@ tmp119,
 1706 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1707 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1708 0026 1823     		movs	r3, #24	@ tmp122,
 1709 0028 1A00     		movs	r2, r3	@, tmp122
 1710 002a FFF7FEFF 		bl	memcpy	@
1314:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
1315:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
1316:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1711              		.loc 2 1316 0
 1712 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1713 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1714 0032 1B49     		ldr	r1, .L78+4	@ tmp127,
 1715 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1716 0036 FFF7FEFF 		bl	sprintf	@
1317:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1717              		.loc 2 1317 0
 1718 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1719 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1720 003e 1100     		movs	r1, r2	@, tmp129
 1721 0040 1800     		movs	r0, r3	@, tmp130
 1722 0042 FFF7FEFF 		bl	strcat	@
1318:src/main.c    **** 
1319:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
1320:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
1321:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1723              		.loc 2 1321 0
 1724 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1725 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1726 004a 1649     		ldr	r1, .L78+8	@ tmp133,
 1727 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1728 004e FFF7FEFF 		bl	sprintf	@
1322:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1729              		.loc 2 1322 0
 1730 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1731 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1732 0056 1100     		movs	r1, r2	@, tmp135
 1733 0058 1800     		movs	r0, r3	@, tmp136
 1734 005a FFF7FEFF 		bl	strcat	@
1323:src/main.c    **** 
ARM GAS  /tmp/cc7m2O8A.s 			page 73


1324:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1325:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1326:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1735              		.loc 2 1326 0
 1736 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
 1737 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1738 0062 1149     		ldr	r1, .L78+12	@ tmp139,
 1739 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1740 0066 FFF7FEFF 		bl	sprintf	@
1327:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1741              		.loc 2 1327 0
 1742 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1743 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1744 006e 1100     		movs	r1, r2	@, tmp141
 1745 0070 1800     		movs	r0, r3	@, tmp142
 1746 0072 FFF7FEFF 		bl	strcat	@
1328:src/main.c    **** 
1329:src/main.c    **** 
1330:src/main.c    ****       strcat((char *)buffer,"}}");
 1747              		.loc 2 1330 0
 1748 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1749 0078 1800     		movs	r0, r3	@, tmp143
 1750 007a FFF7FEFF 		bl	strlen	@
 1751 007e 0300     		movs	r3, r0	@ tmp144,
 1752 0080 1A00     		movs	r2, r3	@ D.7249, tmp145
 1753 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1754 0084 9A18     		adds	r2, r3, r2	@ D.7250, tmp146, D.7249
 1755 0086 094B     		ldr	r3, .L78+16	@ tmp147,
 1756 0088 1000     		movs	r0, r2	@ tmp148, D.7250
 1757 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1758 008c 0323     		movs	r3, #3	@ tmp150,
 1759 008e 1A00     		movs	r2, r3	@, tmp150
 1760 0090 FFF7FEFF 		bl	memcpy	@
1331:src/main.c    **** 
1332:src/main.c    ****       return;
 1761              		.loc 2 1332 0
 1762 0094 C046     		nop
1333:src/main.c    **** }
 1763              		.loc 2 1333 0
 1764 0096 17B0     		add	sp, sp, #92	@,,
 1765              		@ sp needed	@
 1766 0098 00BD     		pop	{pc}
 1767              	.L79:
 1768 009a C046     		.align	2
 1769              	.L78:
 1770 009c 44010000 		.word	.LC48
 1771 00a0 5C010000 		.word	.LC50
 1772 00a4 78010000 		.word	.LC52
 1773 00a8 90010000 		.word	.LC54
 1774 00ac A8010000 		.word	.LC56
 1775              		.cfi_endproc
 1776              	.LFE21:
 1777              		.size	prepare_json_pkt, .-prepare_json_pkt
 1778              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1779              		.align	2
 1780              		.global	TimingDelay_Decrement
 1781              		.code	16
ARM GAS  /tmp/cc7m2O8A.s 			page 74


 1782              		.thumb_func
 1783              		.type	TimingDelay_Decrement, %function
 1784              	TimingDelay_Decrement:
 1785              	.LFB22:
1334:src/main.c    **** 
1335:src/main.c    **** void TimingDelay_Decrement(void)
1336:src/main.c    **** {
 1786              		.loc 2 1336 0
 1787              		.cfi_startproc
 1788 0000 10B5     		push	{r4, lr}	@
 1789              	.LCFI8:
 1790              		.cfi_def_cfa_offset 8
 1791              		.cfi_offset 4, -8
 1792              		.cfi_offset 14, -4
1337:src/main.c    **** 	if (wait_ms_var)
 1793              		.loc 2 1337 0
 1794 0002 4B4B     		ldr	r3, .L93	@ tmp145,
 1795 0004 1B88     		ldrh	r3, [r3]	@ tmp146, wait_ms_var
 1796 0006 9BB2     		uxth	r3, r3	@ D.7262, tmp146
 1797 0008 002B     		cmp	r3, #0	@ D.7262,
 1798 000a 06D0     		beq	.L81	@,
1338:src/main.c    **** 		wait_ms_var--;
 1799              		.loc 2 1338 0
 1800 000c 484B     		ldr	r3, .L93	@ tmp147,
 1801 000e 1B88     		ldrh	r3, [r3]	@ tmp148, wait_ms_var
 1802 0010 9BB2     		uxth	r3, r3	@ D.7262, tmp148
 1803 0012 013B     		subs	r3, r3, #1	@ tmp149,
 1804 0014 9AB2     		uxth	r2, r3	@ D.7262, tmp149
 1805 0016 464B     		ldr	r3, .L93	@ tmp150,
 1806 0018 1A80     		strh	r2, [r3]	@ tmp151, wait_ms_var
 1807              	.L81:
1339:src/main.c    **** 
1340:src/main.c    **** 	if (timer_standby)
 1808              		.loc 2 1340 0
 1809 001a 464B     		ldr	r3, .L93+4	@ tmp152,
 1810 001c 1B88     		ldrh	r3, [r3]	@ tmp153, timer_standby
 1811 001e 9BB2     		uxth	r3, r3	@ D.7262, tmp153
 1812 0020 002B     		cmp	r3, #0	@ D.7262,
 1813 0022 06D0     		beq	.L82	@,
1341:src/main.c    **** 		timer_standby--;
 1814              		.loc 2 1341 0
 1815 0024 434B     		ldr	r3, .L93+4	@ tmp154,
 1816 0026 1B88     		ldrh	r3, [r3]	@ tmp155, timer_standby
 1817 0028 9BB2     		uxth	r3, r3	@ D.7262, tmp155
 1818 002a 013B     		subs	r3, r3, #1	@ tmp156,
 1819 002c 9AB2     		uxth	r2, r3	@ D.7262, tmp156
 1820 002e 414B     		ldr	r3, .L93+4	@ tmp157,
 1821 0030 1A80     		strh	r2, [r3]	@ tmp158, timer_standby
 1822              	.L82:
1342:src/main.c    **** 
1343:src/main.c    **** #ifdef USE_REDONDA_BASIC
1344:src/main.c    **** 	if (tt_take_photo_sample)
 1823              		.loc 2 1344 0
 1824 0032 414B     		ldr	r3, .L93+8	@ tmp159,
 1825 0034 1B88     		ldrh	r3, [r3]	@ tmp160, tt_take_photo_sample
 1826 0036 9BB2     		uxth	r3, r3	@ D.7262, tmp160
 1827 0038 002B     		cmp	r3, #0	@ D.7262,
ARM GAS  /tmp/cc7m2O8A.s 			page 75


 1828 003a 06D0     		beq	.L83	@,
1345:src/main.c    **** 		tt_take_photo_sample--;
 1829              		.loc 2 1345 0
 1830 003c 3E4B     		ldr	r3, .L93+8	@ tmp161,
 1831 003e 1B88     		ldrh	r3, [r3]	@ tmp162, tt_take_photo_sample
 1832 0040 9BB2     		uxth	r3, r3	@ D.7262, tmp162
 1833 0042 013B     		subs	r3, r3, #1	@ tmp163,
 1834 0044 9AB2     		uxth	r2, r3	@ D.7262, tmp163
 1835 0046 3C4B     		ldr	r3, .L93+8	@ tmp164,
 1836 0048 1A80     		strh	r2, [r3]	@ tmp165, tt_take_photo_sample
 1837              	.L83:
1346:src/main.c    **** 
1347:src/main.c    **** 	if (tt_relay_on_off)
 1838              		.loc 2 1347 0
 1839 004a 3C4B     		ldr	r3, .L93+12	@ tmp166,
 1840 004c 1B88     		ldrh	r3, [r3]	@ tmp167, tt_relay_on_off
 1841 004e 9BB2     		uxth	r3, r3	@ D.7262, tmp167
 1842 0050 002B     		cmp	r3, #0	@ D.7262,
 1843 0052 06D0     		beq	.L84	@,
1348:src/main.c    **** 		tt_relay_on_off--;
 1844              		.loc 2 1348 0
 1845 0054 394B     		ldr	r3, .L93+12	@ tmp168,
 1846 0056 1B88     		ldrh	r3, [r3]	@ tmp169, tt_relay_on_off
 1847 0058 9BB2     		uxth	r3, r3	@ D.7262, tmp169
 1848 005a 013B     		subs	r3, r3, #1	@ tmp170,
 1849 005c 9AB2     		uxth	r2, r3	@ D.7262, tmp170
 1850 005e 374B     		ldr	r3, .L93+12	@ tmp171,
 1851 0060 1A80     		strh	r2, [r3]	@ tmp172, tt_relay_on_off
 1852              	.L84:
1349:src/main.c    **** #endif
1350:src/main.c    **** 
1351:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1352:src/main.c    **** 	if (tt_take_temp_sample)
1353:src/main.c    **** 		tt_take_temp_sample--;
1354:src/main.c    **** #endif
1355:src/main.c    **** 
1356:src/main.c    **** 	if (take_temp_sample)
 1853              		.loc 2 1356 0
 1854 0062 374B     		ldr	r3, .L93+16	@ tmp173,
 1855 0064 1B88     		ldrh	r3, [r3]	@ tmp174, take_temp_sample
 1856 0066 9BB2     		uxth	r3, r3	@ D.7262, tmp174
 1857 0068 002B     		cmp	r3, #0	@ D.7262,
 1858 006a 06D0     		beq	.L85	@,
1357:src/main.c    **** 		take_temp_sample--;
 1859              		.loc 2 1357 0
 1860 006c 344B     		ldr	r3, .L93+16	@ tmp175,
 1861 006e 1B88     		ldrh	r3, [r3]	@ tmp176, take_temp_sample
 1862 0070 9BB2     		uxth	r3, r3	@ D.7262, tmp176
 1863 0072 013B     		subs	r3, r3, #1	@ tmp177,
 1864 0074 9AB2     		uxth	r2, r3	@ D.7262, tmp177
 1865 0076 324B     		ldr	r3, .L93+16	@ tmp178,
 1866 0078 1A80     		strh	r2, [r3]	@ tmp179, take_temp_sample
 1867              	.L85:
1358:src/main.c    **** 
1359:src/main.c    **** 	if (filter_timer)
 1868              		.loc 2 1359 0
 1869 007a 324B     		ldr	r3, .L93+20	@ tmp180,
ARM GAS  /tmp/cc7m2O8A.s 			page 76


 1870 007c 1B78     		ldrb	r3, [r3]	@ tmp181, filter_timer
 1871 007e DBB2     		uxtb	r3, r3	@ D.7263, tmp181
 1872 0080 002B     		cmp	r3, #0	@ D.7263,
 1873 0082 06D0     		beq	.L86	@,
1360:src/main.c    **** 		filter_timer--;
 1874              		.loc 2 1360 0
 1875 0084 2F4B     		ldr	r3, .L93+20	@ tmp182,
 1876 0086 1B78     		ldrb	r3, [r3]	@ tmp183, filter_timer
 1877 0088 DBB2     		uxtb	r3, r3	@ D.7263, tmp183
 1878 008a 013B     		subs	r3, r3, #1	@ tmp184,
 1879 008c DAB2     		uxtb	r2, r3	@ D.7263, tmp184
 1880 008e 2D4B     		ldr	r3, .L93+20	@ tmp185,
 1881 0090 1A70     		strb	r2, [r3]	@ tmp186, filter_timer
 1882              	.L86:
1361:src/main.c    **** 
1362:src/main.c    **** 	//cuenta de a 1 minuto
1363:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 1883              		.loc 2 1363 0
 1884 0092 2D4B     		ldr	r3, .L93+24	@ tmp187,
 1885 0094 1B88     		ldrh	r3, [r3]	@ tmp188, secs
 1886 0096 9BB2     		uxth	r3, r3	@ D.7262, tmp188
 1887 0098 2C4A     		ldr	r2, .L93+28	@ tmp189,
 1888 009a 9342     		cmp	r3, r2	@ D.7262, tmp189
 1889 009c 16D9     		bls	.L87	@,
1364:src/main.c    **** 	{
1365:src/main.c    **** 		minutes++;
 1890              		.loc 2 1365 0
 1891 009e 2C4B     		ldr	r3, .L93+32	@ tmp190,
 1892 00a0 1B78     		ldrb	r3, [r3]	@ tmp191, minutes
 1893 00a2 DBB2     		uxtb	r3, r3	@ D.7263, tmp191
 1894 00a4 0133     		adds	r3, r3, #1	@ tmp192,
 1895 00a6 DAB2     		uxtb	r2, r3	@ D.7263, tmp192
 1896 00a8 294B     		ldr	r3, .L93+32	@ tmp193,
 1897 00aa 1A70     		strb	r2, [r3]	@ tmp194, minutes
1366:src/main.c    **** 		secs = 0;
 1898              		.loc 2 1366 0
 1899 00ac 264B     		ldr	r3, .L93+24	@ tmp195,
 1900 00ae 0022     		movs	r2, #0	@ tmp196,
 1901 00b0 1A80     		strh	r2, [r3]	@ tmp197, secs
1367:src/main.c    **** 
1368:src/main.c    **** 		if (timer_rep)
 1902              		.loc 2 1368 0
 1903 00b2 284B     		ldr	r3, .L93+36	@ tmp198,
 1904 00b4 1B88     		ldrh	r3, [r3]	@ tmp199, timer_rep
 1905 00b6 9BB2     		uxth	r3, r3	@ D.7262, tmp199
 1906 00b8 002B     		cmp	r3, #0	@ D.7262,
 1907 00ba 0ED0     		beq	.L89	@,
1369:src/main.c    **** 			timer_rep--;	//timer de reportes de a 1 minuto
 1908              		.loc 2 1369 0
 1909 00bc 254B     		ldr	r3, .L93+36	@ tmp200,
 1910 00be 1B88     		ldrh	r3, [r3]	@ tmp201, timer_rep
 1911 00c0 9BB2     		uxth	r3, r3	@ D.7262, tmp201
 1912 00c2 013B     		subs	r3, r3, #1	@ tmp202,
 1913 00c4 9AB2     		uxth	r2, r3	@ D.7262, tmp202
 1914 00c6 234B     		ldr	r3, .L93+36	@ tmp203,
 1915 00c8 1A80     		strh	r2, [r3]	@ tmp204, timer_rep
 1916 00ca 06E0     		b	.L89	@
ARM GAS  /tmp/cc7m2O8A.s 			page 77


 1917              	.L87:
1370:src/main.c    **** 	}
1371:src/main.c    **** 	else
1372:src/main.c    **** 		secs++;
 1918              		.loc 2 1372 0
 1919 00cc 1E4B     		ldr	r3, .L93+24	@ tmp205,
 1920 00ce 1B88     		ldrh	r3, [r3]	@ tmp206, secs
 1921 00d0 9BB2     		uxth	r3, r3	@ D.7262, tmp206
 1922 00d2 0133     		adds	r3, r3, #1	@ tmp207,
 1923 00d4 9AB2     		uxth	r2, r3	@ D.7262, tmp207
 1924 00d6 1C4B     		ldr	r3, .L93+24	@ tmp208,
 1925 00d8 1A80     		strh	r2, [r3]	@ tmp209, secs
 1926              	.L89:
1373:src/main.c    **** 
1374:src/main.c    **** 	if (minutes > 60)
 1927              		.loc 2 1374 0
 1928 00da 1D4B     		ldr	r3, .L93+32	@ tmp210,
 1929 00dc 1B78     		ldrb	r3, [r3]	@ tmp211, minutes
 1930 00de DBB2     		uxtb	r3, r3	@ D.7263, tmp211
 1931 00e0 3C2B     		cmp	r3, #60	@ D.7263,
 1932 00e2 09D9     		bls	.L90	@,
1375:src/main.c    **** 	{
1376:src/main.c    **** 		hours++;
 1933              		.loc 2 1376 0
 1934 00e4 1C4B     		ldr	r3, .L93+40	@ tmp212,
 1935 00e6 1B78     		ldrb	r3, [r3]	@ tmp213, hours
 1936 00e8 DBB2     		uxtb	r3, r3	@ D.7263, tmp213
 1937 00ea 0133     		adds	r3, r3, #1	@ tmp214,
 1938 00ec DAB2     		uxtb	r2, r3	@ D.7263, tmp214
 1939 00ee 1A4B     		ldr	r3, .L93+40	@ tmp215,
 1940 00f0 1A70     		strb	r2, [r3]	@ tmp216, hours
1377:src/main.c    **** 		minutes = 0;
 1941              		.loc 2 1377 0
 1942 00f2 174B     		ldr	r3, .L93+32	@ tmp217,
 1943 00f4 0022     		movs	r2, #0	@ tmp218,
 1944 00f6 1A70     		strb	r2, [r3]	@ tmp219, minutes
 1945              	.L90:
1378:src/main.c    **** 	}
1379:src/main.c    **** 
1380:src/main.c    **** #ifdef USE_MQTT_LIB
1381:src/main.c    **** 	//timer del MQTT
1382:src/main.c    **** 	SysTickIntHandler();
1383:src/main.c    **** #endif
1384:src/main.c    **** 
1385:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1386:src/main.c    **** 	if (usart1_mini_timeout)
 1946              		.loc 2 1386 0
 1947 00f8 184B     		ldr	r3, .L93+44	@ tmp220,
 1948 00fa 1B78     		ldrb	r3, [r3]	@ tmp221, usart1_mini_timeout
 1949 00fc DBB2     		uxtb	r3, r3	@ D.7263, tmp221
 1950 00fe 002B     		cmp	r3, #0	@ D.7263,
 1951 0100 06D0     		beq	.L91	@,
1387:src/main.c    **** 		usart1_mini_timeout--;
 1952              		.loc 2 1387 0
 1953 0102 164B     		ldr	r3, .L93+44	@ tmp222,
 1954 0104 1B78     		ldrb	r3, [r3]	@ tmp223, usart1_mini_timeout
 1955 0106 DBB2     		uxtb	r3, r3	@ D.7263, tmp223
ARM GAS  /tmp/cc7m2O8A.s 			page 78


 1956 0108 013B     		subs	r3, r3, #1	@ tmp224,
 1957 010a DAB2     		uxtb	r2, r3	@ D.7263, tmp224
 1958 010c 134B     		ldr	r3, .L93+44	@ tmp225,
 1959 010e 1A70     		strb	r2, [r3]	@ tmp226, usart1_mini_timeout
 1960              	.L91:
1388:src/main.c    **** 	if (usart2_mini_timeout)
 1961              		.loc 2 1388 0
 1962 0110 134B     		ldr	r3, .L93+48	@ tmp227,
 1963 0112 1B78     		ldrb	r3, [r3]	@ tmp228, usart2_mini_timeout
 1964 0114 DBB2     		uxtb	r3, r3	@ D.7263, tmp228
 1965 0116 002B     		cmp	r3, #0	@ D.7263,
 1966 0118 06D0     		beq	.L92	@,
1389:src/main.c    **** 		usart2_mini_timeout--;
 1967              		.loc 2 1389 0
 1968 011a 114B     		ldr	r3, .L93+48	@ tmp229,
 1969 011c 1B78     		ldrb	r3, [r3]	@ tmp230, usart2_mini_timeout
 1970 011e DBB2     		uxtb	r3, r3	@ D.7263, tmp230
 1971 0120 013B     		subs	r3, r3, #1	@ tmp231,
 1972 0122 DAB2     		uxtb	r2, r3	@ D.7263, tmp231
 1973 0124 0E4B     		ldr	r3, .L93+48	@ tmp232,
 1974 0126 1A70     		strb	r2, [r3]	@ tmp233, usart2_mini_timeout
 1975              	.L92:
1390:src/main.c    **** #endif
1391:src/main.c    **** #ifdef USE_GPS
1392:src/main.c    **** 	GPSTimeoutCounters ();
1393:src/main.c    **** #endif
1394:src/main.c    **** 
1395:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1396:src/main.c    **** 	GSMTimeoutCounters ();
 1976              		.loc 2 1396 0
 1977 0128 FFF7FEFF 		bl	GSMTimeoutCounters	@
1397:src/main.c    **** #endif
1398:src/main.c    **** }
 1978              		.loc 2 1398 0
 1979 012c C046     		nop
 1980              		@ sp needed	@
 1981 012e 10BD     		pop	{r4, pc}
 1982              	.L94:
 1983              		.align	2
 1984              	.L93:
 1985 0130 00000000 		.word	wait_ms_var
 1986 0134 00000000 		.word	timer_standby
 1987 0138 00000000 		.word	tt_take_photo_sample
 1988 013c 00000000 		.word	tt_relay_on_off
 1989 0140 00000000 		.word	take_temp_sample
 1990 0144 00000000 		.word	filter_timer
 1991 0148 00000000 		.word	secs
 1992 014c 5FEA0000 		.word	59999
 1993 0150 00000000 		.word	minutes
 1994 0154 00000000 		.word	timer_rep
 1995 0158 00000000 		.word	hours
 1996 015c 00000000 		.word	usart1_mini_timeout
 1997 0160 00000000 		.word	usart2_mini_timeout
 1998              		.cfi_endproc
 1999              	.LFE22:
 2000              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 2001              		.text
ARM GAS  /tmp/cc7m2O8A.s 			page 79


 2002              	.Letext0:
 2003              		.file 3 "./cmsis_boot/stm32f0xx.h"
 2004              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 2005              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 2006              		.file 6 "src/hard.h"
 2007              		.file 7 "src/flash_program.h"
 2008              		.file 8 "src/funcs_gsm.h"
 2009              		.section	.debug_info,"",%progbits
 2010              	.Ldebug_info0:
 2011 0000 A40D0000 		.4byte	0xda4
 2012 0004 0200     		.2byte	0x2
 2013 0006 00000000 		.4byte	.Ldebug_abbrev0
 2014 000a 04       		.byte	0x4
 2015 000b 01       		.uleb128 0x1
 2016 000c 74090000 		.4byte	.LASF202
 2017 0010 0C       		.byte	0xc
 2018 0011 4C090000 		.4byte	.LASF203
 2019 0015 8C070000 		.4byte	.LASF204
 2020 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2021 001d 00000000 		.4byte	0
 2022 0021 00000000 		.4byte	0
 2023 0025 00000000 		.4byte	.Ldebug_line0
 2024 0029 02       		.uleb128 0x2
 2025 002a CE050000 		.4byte	.LASF131
 2026 002e 01       		.byte	0x1
 2027 002f 06010000 		.4byte	0x106
 2028 0033 03       		.byte	0x3
 2029 0034 C7       		.byte	0xc7
 2030 0035 06010000 		.4byte	0x106
 2031 0039 03       		.uleb128 0x3
 2032 003a 65060000 		.4byte	.LASF0
 2033 003e 72       		.sleb128 -14
 2034 003f 03       		.uleb128 0x3
 2035 0040 240A0000 		.4byte	.LASF1
 2036 0044 73       		.sleb128 -13
 2037 0045 03       		.uleb128 0x3
 2038 0046 7C000000 		.4byte	.LASF2
 2039 004a 7B       		.sleb128 -5
 2040 004b 03       		.uleb128 0x3
 2041 004c 8C010000 		.4byte	.LASF3
 2042 0050 7E       		.sleb128 -2
 2043 0051 03       		.uleb128 0x3
 2044 0052 26070000 		.4byte	.LASF4
 2045 0056 7F       		.sleb128 -1
 2046 0057 04       		.uleb128 0x4
 2047 0058 81040000 		.4byte	.LASF5
 2048 005c 00       		.byte	0
 2049 005d 04       		.uleb128 0x4
 2050 005e 5E050000 		.4byte	.LASF6
 2051 0062 01       		.byte	0x1
 2052 0063 04       		.uleb128 0x4
 2053 0064 E7050000 		.4byte	.LASF7
 2054 0068 02       		.byte	0x2
 2055 0069 04       		.uleb128 0x4
 2056 006a 06010000 		.4byte	.LASF8
 2057 006e 03       		.byte	0x3
 2058 006f 04       		.uleb128 0x4
ARM GAS  /tmp/cc7m2O8A.s 			page 80


 2059 0070 A8010000 		.4byte	.LASF9
 2060 0074 04       		.byte	0x4
 2061 0075 04       		.uleb128 0x4
 2062 0076 4D010000 		.4byte	.LASF10
 2063 007a 05       		.byte	0x5
 2064 007b 04       		.uleb128 0x4
 2065 007c 46000000 		.4byte	.LASF11
 2066 0080 06       		.byte	0x6
 2067 0081 04       		.uleb128 0x4
 2068 0082 33000000 		.4byte	.LASF12
 2069 0086 07       		.byte	0x7
 2070 0087 04       		.uleb128 0x4
 2071 0088 23050000 		.4byte	.LASF13
 2072 008c 08       		.byte	0x8
 2073 008d 04       		.uleb128 0x4
 2074 008e B4030000 		.4byte	.LASF14
 2075 0092 09       		.byte	0x9
 2076 0093 04       		.uleb128 0x4
 2077 0094 F5070000 		.4byte	.LASF15
 2078 0098 0A       		.byte	0xa
 2079 0099 04       		.uleb128 0x4
 2080 009a C9060000 		.4byte	.LASF16
 2081 009e 0B       		.byte	0xb
 2082 009f 04       		.uleb128 0x4
 2083 00a0 78050000 		.4byte	.LASF17
 2084 00a4 0C       		.byte	0xc
 2085 00a5 04       		.uleb128 0x4
 2086 00a6 2B050000 		.4byte	.LASF18
 2087 00aa 0D       		.byte	0xd
 2088 00ab 04       		.uleb128 0x4
 2089 00ac 82060000 		.4byte	.LASF19
 2090 00b0 0E       		.byte	0xe
 2091 00b1 04       		.uleb128 0x4
 2092 00b2 73070000 		.4byte	.LASF20
 2093 00b6 0F       		.byte	0xf
 2094 00b7 04       		.uleb128 0x4
 2095 00b8 AA030000 		.4byte	.LASF21
 2096 00bc 10       		.byte	0x10
 2097 00bd 04       		.uleb128 0x4
 2098 00be 18080000 		.4byte	.LASF22
 2099 00c2 11       		.byte	0x11
 2100 00c3 04       		.uleb128 0x4
 2101 00c4 EA070000 		.4byte	.LASF23
 2102 00c8 13       		.byte	0x13
 2103 00c9 04       		.uleb128 0x4
 2104 00ca EA030000 		.4byte	.LASF24
 2105 00ce 14       		.byte	0x14
 2106 00cf 04       		.uleb128 0x4
 2107 00d0 D8000000 		.4byte	.LASF25
 2108 00d4 15       		.byte	0x15
 2109 00d5 04       		.uleb128 0x4
 2110 00d6 B2060000 		.4byte	.LASF26
 2111 00da 16       		.byte	0x16
 2112 00db 04       		.uleb128 0x4
 2113 00dc 82010000 		.4byte	.LASF27
 2114 00e0 17       		.byte	0x17
 2115 00e1 04       		.uleb128 0x4
ARM GAS  /tmp/cc7m2O8A.s 			page 81


 2116 00e2 4A070000 		.4byte	.LASF28
 2117 00e6 18       		.byte	0x18
 2118 00e7 04       		.uleb128 0x4
 2119 00e8 F2010000 		.4byte	.LASF29
 2120 00ec 19       		.byte	0x19
 2121 00ed 04       		.uleb128 0x4
 2122 00ee DD080000 		.4byte	.LASF30
 2123 00f2 1A       		.byte	0x1a
 2124 00f3 04       		.uleb128 0x4
 2125 00f4 35060000 		.4byte	.LASF31
 2126 00f8 1B       		.byte	0x1b
 2127 00f9 04       		.uleb128 0x4
 2128 00fa B8020000 		.4byte	.LASF32
 2129 00fe 1C       		.byte	0x1c
 2130 00ff 04       		.uleb128 0x4
 2131 0100 33070000 		.4byte	.LASF33
 2132 0104 1E       		.byte	0x1e
 2133 0105 00       		.byte	0
 2134 0106 05       		.uleb128 0x5
 2135 0107 01       		.byte	0x1
 2136 0108 06       		.byte	0x6
 2137 0109 40090000 		.4byte	.LASF36
 2138 010d 06       		.uleb128 0x6
 2139 010e 9F020000 		.4byte	.LASF34
 2140 0112 03       		.byte	0x3
 2141 0113 5F01     		.2byte	0x15f
 2142 0115 29000000 		.4byte	0x29
 2143 0119 07       		.uleb128 0x7
 2144 011a EB060000 		.4byte	.LASF35
 2145 011e 04       		.byte	0x4
 2146 011f 1D       		.byte	0x1d
 2147 0120 24010000 		.4byte	0x124
 2148 0124 05       		.uleb128 0x5
 2149 0125 01       		.byte	0x1
 2150 0126 08       		.byte	0x8
 2151 0127 26080000 		.4byte	.LASF37
 2152 012b 05       		.uleb128 0x5
 2153 012c 02       		.byte	0x2
 2154 012d 05       		.byte	0x5
 2155 012e 22060000 		.4byte	.LASF38
 2156 0132 07       		.uleb128 0x7
 2157 0133 45020000 		.4byte	.LASF39
 2158 0137 04       		.byte	0x4
 2159 0138 2B       		.byte	0x2b
 2160 0139 3D010000 		.4byte	0x13d
 2161 013d 05       		.uleb128 0x5
 2162 013e 02       		.byte	0x2
 2163 013f 07       		.byte	0x7
 2164 0140 61090000 		.4byte	.LASF40
 2165 0144 07       		.uleb128 0x7
 2166 0145 F4000000 		.4byte	.LASF41
 2167 0149 04       		.byte	0x4
 2168 014a 3F       		.byte	0x3f
 2169 014b 4F010000 		.4byte	0x14f
 2170 014f 05       		.uleb128 0x5
 2171 0150 04       		.byte	0x4
 2172 0151 05       		.byte	0x5
ARM GAS  /tmp/cc7m2O8A.s 			page 82


 2173 0152 2C060000 		.4byte	.LASF42
 2174 0156 07       		.uleb128 0x7
 2175 0157 3D080000 		.4byte	.LASF43
 2176 015b 04       		.byte	0x4
 2177 015c 41       		.byte	0x41
 2178 015d 61010000 		.4byte	0x161
 2179 0161 05       		.uleb128 0x5
 2180 0162 04       		.byte	0x4
 2181 0163 07       		.byte	0x7
 2182 0164 54070000 		.4byte	.LASF44
 2183 0168 05       		.uleb128 0x5
 2184 0169 08       		.byte	0x8
 2185 016a 05       		.byte	0x5
 2186 016b 73040000 		.4byte	.LASF45
 2187 016f 05       		.uleb128 0x5
 2188 0170 08       		.byte	0x8
 2189 0171 07       		.byte	0x7
 2190 0172 FC010000 		.4byte	.LASF46
 2191 0176 08       		.uleb128 0x8
 2192 0177 04       		.byte	0x4
 2193 0178 05       		.byte	0x5
 2194 0179 696E7400 		.ascii	"int\000"
 2195 017d 05       		.uleb128 0x5
 2196 017e 04       		.byte	0x4
 2197 017f 07       		.byte	0x7
 2198 0180 C6000000 		.4byte	.LASF47
 2199 0184 07       		.uleb128 0x7
 2200 0185 F5030000 		.4byte	.LASF48
 2201 0189 05       		.byte	0x5
 2202 018a 14       		.byte	0x14
 2203 018b 19010000 		.4byte	0x119
 2204 018f 07       		.uleb128 0x7
 2205 0190 B6050000 		.4byte	.LASF49
 2206 0194 05       		.byte	0x5
 2207 0195 1A       		.byte	0x1a
 2208 0196 32010000 		.4byte	0x132
 2209 019a 07       		.uleb128 0x7
 2210 019b D0070000 		.4byte	.LASF50
 2211 019f 05       		.byte	0x5
 2212 01a0 1F       		.byte	0x1f
 2213 01a1 44010000 		.4byte	0x144
 2214 01a5 07       		.uleb128 0x7
 2215 01a6 C7010000 		.4byte	.LASF51
 2216 01aa 05       		.byte	0x5
 2217 01ab 20       		.byte	0x20
 2218 01ac 56010000 		.4byte	0x156
 2219 01b0 09       		.uleb128 0x9
 2220 01b1 2003     		.2byte	0x320
 2221 01b3 01       		.byte	0x1
 2222 01b4 71       		.byte	0x71
 2223 01b5 4D020000 		.4byte	0x24d
 2224 01b9 0A       		.uleb128 0xa
 2225 01ba D9010000 		.4byte	.LASF52
 2226 01be 01       		.byte	0x1
 2227 01bf 73       		.byte	0x73
 2228 01c0 64020000 		.4byte	0x264
 2229 01c4 02       		.byte	0x2
ARM GAS  /tmp/cc7m2O8A.s 			page 83


 2230 01c5 23       		.byte	0x23
 2231 01c6 00       		.uleb128 0
 2232 01c7 0A       		.uleb128 0xa
 2233 01c8 F0050000 		.4byte	.LASF53
 2234 01cc 01       		.byte	0x1
 2235 01cd 74       		.byte	0x74
 2236 01ce 69020000 		.4byte	0x269
 2237 01d2 02       		.byte	0x2
 2238 01d3 23       		.byte	0x23
 2239 01d4 04       		.uleb128 0x4
 2240 01d5 0A       		.uleb128 0xa
 2241 01d6 CD080000 		.4byte	.LASF54
 2242 01da 01       		.byte	0x1
 2243 01db 75       		.byte	0x75
 2244 01dc 79020000 		.4byte	0x279
 2245 01e0 03       		.byte	0x3
 2246 01e1 23       		.byte	0x23
 2247 01e2 8001     		.uleb128 0x80
 2248 01e4 0A       		.uleb128 0xa
 2249 01e5 E9010000 		.4byte	.LASF55
 2250 01e9 01       		.byte	0x1
 2251 01ea 76       		.byte	0x76
 2252 01eb 69020000 		.4byte	0x269
 2253 01ef 03       		.byte	0x3
 2254 01f0 23       		.byte	0x23
 2255 01f1 8401     		.uleb128 0x84
 2256 01f3 0A       		.uleb128 0xa
 2257 01f4 3D0A0000 		.4byte	.LASF56
 2258 01f8 01       		.byte	0x1
 2259 01f9 77       		.byte	0x77
 2260 01fa 7E020000 		.4byte	0x27e
 2261 01fe 03       		.byte	0x3
 2262 01ff 23       		.byte	0x23
 2263 0200 8002     		.uleb128 0x100
 2264 0202 0A       		.uleb128 0xa
 2265 0203 04060000 		.4byte	.LASF57
 2266 0207 01       		.byte	0x1
 2267 0208 78       		.byte	0x78
 2268 0209 69020000 		.4byte	0x269
 2269 020d 03       		.byte	0x3
 2270 020e 23       		.byte	0x23
 2271 020f 8402     		.uleb128 0x104
 2272 0211 0A       		.uleb128 0xa
 2273 0212 73050000 		.4byte	.LASF58
 2274 0216 01       		.byte	0x1
 2275 0217 79       		.byte	0x79
 2276 0218 83020000 		.4byte	0x283
 2277 021c 03       		.byte	0x3
 2278 021d 23       		.byte	0x23
 2279 021e 8003     		.uleb128 0x180
 2280 0220 0A       		.uleb128 0xa
 2281 0221 0E060000 		.4byte	.LASF59
 2282 0225 01       		.byte	0x1
 2283 0226 7A       		.byte	0x7a
 2284 0227 69020000 		.4byte	0x269
 2285 022b 03       		.byte	0x3
 2286 022c 23       		.byte	0x23
ARM GAS  /tmp/cc7m2O8A.s 			page 84


 2287 022d 8403     		.uleb128 0x184
 2288 022f 0A       		.uleb128 0xa
 2289 0230 18060000 		.4byte	.LASF60
 2290 0234 01       		.byte	0x1
 2291 0235 7B       		.byte	0x7b
 2292 0236 88020000 		.4byte	0x288
 2293 023a 03       		.byte	0x3
 2294 023b 23       		.byte	0x23
 2295 023c 8004     		.uleb128 0x200
 2296 023e 0B       		.uleb128 0xb
 2297 023f 495000   		.ascii	"IP\000"
 2298 0242 01       		.byte	0x1
 2299 0243 7C       		.byte	0x7c
 2300 0244 A8020000 		.4byte	0x2a8
 2301 0248 03       		.byte	0x3
 2302 0249 23       		.byte	0x23
 2303 024a 8006     		.uleb128 0x300
 2304 024c 00       		.byte	0
 2305 024d 0C       		.uleb128 0xc
 2306 024e A5010000 		.4byte	0x1a5
 2307 0252 5D020000 		.4byte	0x25d
 2308 0256 0D       		.uleb128 0xd
 2309 0257 5D020000 		.4byte	0x25d
 2310 025b 00       		.byte	0
 2311 025c 00       		.byte	0
 2312 025d 05       		.uleb128 0x5
 2313 025e 04       		.byte	0x4
 2314 025f 07       		.byte	0x7
 2315 0260 3C070000 		.4byte	.LASF61
 2316 0264 0E       		.uleb128 0xe
 2317 0265 4D020000 		.4byte	0x24d
 2318 0269 0C       		.uleb128 0xc
 2319 026a A5010000 		.4byte	0x1a5
 2320 026e 79020000 		.4byte	0x279
 2321 0272 0D       		.uleb128 0xd
 2322 0273 5D020000 		.4byte	0x25d
 2323 0277 1E       		.byte	0x1e
 2324 0278 00       		.byte	0
 2325 0279 0E       		.uleb128 0xe
 2326 027a 4D020000 		.4byte	0x24d
 2327 027e 0E       		.uleb128 0xe
 2328 027f 4D020000 		.4byte	0x24d
 2329 0283 0E       		.uleb128 0xe
 2330 0284 4D020000 		.4byte	0x24d
 2331 0288 0C       		.uleb128 0xc
 2332 0289 A5010000 		.4byte	0x1a5
 2333 028d 98020000 		.4byte	0x298
 2334 0291 0D       		.uleb128 0xd
 2335 0292 5D020000 		.4byte	0x25d
 2336 0296 3F       		.byte	0x3f
 2337 0297 00       		.byte	0
 2338 0298 0C       		.uleb128 0xc
 2339 0299 A5010000 		.4byte	0x1a5
 2340 029d A8020000 		.4byte	0x2a8
 2341 02a1 0D       		.uleb128 0xd
 2342 02a2 5D020000 		.4byte	0x25d
 2343 02a6 07       		.byte	0x7
ARM GAS  /tmp/cc7m2O8A.s 			page 85


 2344 02a7 00       		.byte	0
 2345 02a8 0E       		.uleb128 0xe
 2346 02a9 98020000 		.4byte	0x298
 2347 02ad 07       		.uleb128 0x7
 2348 02ae F5060000 		.4byte	.LASF62
 2349 02b2 01       		.byte	0x1
 2350 02b3 7D       		.byte	0x7d
 2351 02b4 B0010000 		.4byte	0x1b0
 2352 02b8 0F       		.uleb128 0xf
 2353 02b9 34       		.byte	0x34
 2354 02ba 01       		.byte	0x1
 2355 02bb 86       		.byte	0x86
 2356 02bc 5B030000 		.4byte	0x35b
 2357 02c0 0A       		.uleb128 0xa
 2358 02c1 C4020000 		.4byte	.LASF63
 2359 02c5 01       		.byte	0x1
 2360 02c6 88       		.byte	0x88
 2361 02c7 60030000 		.4byte	0x360
 2362 02cb 02       		.byte	0x2
 2363 02cc 23       		.byte	0x23
 2364 02cd 00       		.uleb128 0
 2365 02ce 0A       		.uleb128 0xa
 2366 02cf 45070000 		.4byte	.LASF64
 2367 02d3 01       		.byte	0x1
 2368 02d4 89       		.byte	0x89
 2369 02d5 5B030000 		.4byte	0x35b
 2370 02d9 02       		.byte	0x2
 2371 02da 23       		.byte	0x23
 2372 02db 04       		.uleb128 0x4
 2373 02dc 0A       		.uleb128 0xa
 2374 02dd F0050000 		.4byte	.LASF53
 2375 02e1 01       		.byte	0x1
 2376 02e2 8A       		.byte	0x8a
 2377 02e3 A5010000 		.4byte	0x1a5
 2378 02e7 02       		.byte	0x2
 2379 02e8 23       		.byte	0x23
 2380 02e9 08       		.uleb128 0x8
 2381 02ea 0A       		.uleb128 0xa
 2382 02eb 93030000 		.4byte	.LASF65
 2383 02ef 01       		.byte	0x1
 2384 02f0 8B       		.byte	0x8b
 2385 02f1 5B030000 		.4byte	0x35b
 2386 02f5 02       		.byte	0x2
 2387 02f6 23       		.byte	0x23
 2388 02f7 0C       		.uleb128 0xc
 2389 02f8 0B       		.uleb128 0xb
 2390 02f9 53435200 		.ascii	"SCR\000"
 2391 02fd 01       		.byte	0x1
 2392 02fe 8C       		.byte	0x8c
 2393 02ff 5B030000 		.4byte	0x35b
 2394 0303 02       		.byte	0x2
 2395 0304 23       		.byte	0x23
 2396 0305 10       		.uleb128 0x10
 2397 0306 0B       		.uleb128 0xb
 2398 0307 43435200 		.ascii	"CCR\000"
 2399 030b 01       		.byte	0x1
 2400 030c 8D       		.byte	0x8d
ARM GAS  /tmp/cc7m2O8A.s 			page 86


 2401 030d 5B030000 		.4byte	0x35b
 2402 0311 02       		.byte	0x2
 2403 0312 23       		.byte	0x23
 2404 0313 14       		.uleb128 0x14
 2405 0314 0A       		.uleb128 0xa
 2406 0315 FA050000 		.4byte	.LASF66
 2407 0319 01       		.byte	0x1
 2408 031a 8E       		.byte	0x8e
 2409 031b A5010000 		.4byte	0x1a5
 2410 031f 02       		.byte	0x2
 2411 0320 23       		.byte	0x23
 2412 0321 18       		.uleb128 0x18
 2413 0322 0B       		.uleb128 0xb
 2414 0323 53485000 		.ascii	"SHP\000"
 2415 0327 01       		.byte	0x1
 2416 0328 8F       		.byte	0x8f
 2417 0329 75030000 		.4byte	0x375
 2418 032d 02       		.byte	0x2
 2419 032e 23       		.byte	0x23
 2420 032f 1C       		.uleb128 0x1c
 2421 0330 0A       		.uleb128 0xa
 2422 0331 8B040000 		.4byte	.LASF67
 2423 0335 01       		.byte	0x1
 2424 0336 90       		.byte	0x90
 2425 0337 5B030000 		.4byte	0x35b
 2426 033b 02       		.byte	0x2
 2427 033c 23       		.byte	0x23
 2428 033d 24       		.uleb128 0x24
 2429 033e 0A       		.uleb128 0xa
 2430 033f 04060000 		.4byte	.LASF57
 2431 0343 01       		.byte	0x1
 2432 0344 91       		.byte	0x91
 2433 0345 65030000 		.4byte	0x365
 2434 0349 02       		.byte	0x2
 2435 034a 23       		.byte	0x23
 2436 034b 28       		.uleb128 0x28
 2437 034c 0A       		.uleb128 0xa
 2438 034d 13020000 		.4byte	.LASF68
 2439 0351 01       		.byte	0x1
 2440 0352 92       		.byte	0x92
 2441 0353 5B030000 		.4byte	0x35b
 2442 0357 02       		.byte	0x2
 2443 0358 23       		.byte	0x23
 2444 0359 30       		.uleb128 0x30
 2445 035a 00       		.byte	0
 2446 035b 0E       		.uleb128 0xe
 2447 035c A5010000 		.4byte	0x1a5
 2448 0360 10       		.uleb128 0x10
 2449 0361 5B030000 		.4byte	0x35b
 2450 0365 0C       		.uleb128 0xc
 2451 0366 A5010000 		.4byte	0x1a5
 2452 036a 75030000 		.4byte	0x375
 2453 036e 0D       		.uleb128 0xd
 2454 036f 5D020000 		.4byte	0x25d
 2455 0373 01       		.byte	0x1
 2456 0374 00       		.byte	0
 2457 0375 0E       		.uleb128 0xe
ARM GAS  /tmp/cc7m2O8A.s 			page 87


 2458 0376 65030000 		.4byte	0x365
 2459 037a 07       		.uleb128 0x7
 2460 037b FF060000 		.4byte	.LASF69
 2461 037f 01       		.byte	0x1
 2462 0380 93       		.byte	0x93
 2463 0381 B8020000 		.4byte	0x2b8
 2464 0385 0F       		.uleb128 0xf
 2465 0386 10       		.byte	0x10
 2466 0387 01       		.byte	0x1
 2467 0388 FC       		.byte	0xfc
 2468 0389 C8030000 		.4byte	0x3c8
 2469 038d 0A       		.uleb128 0xa
 2470 038e 9D0A0000 		.4byte	.LASF70
 2471 0392 01       		.byte	0x1
 2472 0393 FE       		.byte	0xfe
 2473 0394 5B030000 		.4byte	0x35b
 2474 0398 02       		.byte	0x2
 2475 0399 23       		.byte	0x23
 2476 039a 00       		.uleb128 0
 2477 039b 0A       		.uleb128 0xa
 2478 039c D3000000 		.4byte	.LASF71
 2479 03a0 01       		.byte	0x1
 2480 03a1 FF       		.byte	0xff
 2481 03a2 5B030000 		.4byte	0x35b
 2482 03a6 02       		.byte	0x2
 2483 03a7 23       		.byte	0x23
 2484 03a8 04       		.uleb128 0x4
 2485 03a9 11       		.uleb128 0x11
 2486 03aa 56414C00 		.ascii	"VAL\000"
 2487 03ae 01       		.byte	0x1
 2488 03af 0001     		.2byte	0x100
 2489 03b1 5B030000 		.4byte	0x35b
 2490 03b5 02       		.byte	0x2
 2491 03b6 23       		.byte	0x23
 2492 03b7 08       		.uleb128 0x8
 2493 03b8 12       		.uleb128 0x12
 2494 03b9 19010000 		.4byte	.LASF72
 2495 03bd 01       		.byte	0x1
 2496 03be 0101     		.2byte	0x101
 2497 03c0 60030000 		.4byte	0x360
 2498 03c4 02       		.byte	0x2
 2499 03c5 23       		.byte	0x23
 2500 03c6 0C       		.uleb128 0xc
 2501 03c7 00       		.byte	0
 2502 03c8 06       		.uleb128 0x6
 2503 03c9 9D050000 		.4byte	.LASF73
 2504 03cd 01       		.byte	0x1
 2505 03ce 0201     		.2byte	0x102
 2506 03d0 85030000 		.4byte	0x385
 2507 03d4 13       		.uleb128 0x13
 2508 03d5 44       		.byte	0x44
 2509 03d6 03       		.byte	0x3
 2510 03d7 7C01     		.2byte	0x17c
 2511 03d9 9E040000 		.4byte	0x49e
 2512 03dd 11       		.uleb128 0x11
 2513 03de 49535200 		.ascii	"ISR\000"
 2514 03e2 03       		.byte	0x3
ARM GAS  /tmp/cc7m2O8A.s 			page 88


 2515 03e3 7E01     		.2byte	0x17e
 2516 03e5 5B030000 		.4byte	0x35b
 2517 03e9 02       		.byte	0x2
 2518 03ea 23       		.byte	0x23
 2519 03eb 00       		.uleb128 0
 2520 03ec 11       		.uleb128 0x11
 2521 03ed 49455200 		.ascii	"IER\000"
 2522 03f1 03       		.byte	0x3
 2523 03f2 7F01     		.2byte	0x17f
 2524 03f4 5B030000 		.4byte	0x35b
 2525 03f8 02       		.byte	0x2
 2526 03f9 23       		.byte	0x23
 2527 03fa 04       		.uleb128 0x4
 2528 03fb 11       		.uleb128 0x11
 2529 03fc 435200   		.ascii	"CR\000"
 2530 03ff 03       		.byte	0x3
 2531 0400 8001     		.2byte	0x180
 2532 0402 5B030000 		.4byte	0x35b
 2533 0406 02       		.byte	0x2
 2534 0407 23       		.byte	0x23
 2535 0408 08       		.uleb128 0x8
 2536 0409 12       		.uleb128 0x12
 2537 040a 67050000 		.4byte	.LASF74
 2538 040e 03       		.byte	0x3
 2539 040f 8101     		.2byte	0x181
 2540 0411 5B030000 		.4byte	0x35b
 2541 0415 02       		.byte	0x2
 2542 0416 23       		.byte	0x23
 2543 0417 0C       		.uleb128 0xc
 2544 0418 12       		.uleb128 0x12
 2545 0419 6D050000 		.4byte	.LASF75
 2546 041d 03       		.byte	0x3
 2547 041e 8201     		.2byte	0x182
 2548 0420 5B030000 		.4byte	0x35b
 2549 0424 02       		.byte	0x2
 2550 0425 23       		.byte	0x23
 2551 0426 10       		.uleb128 0x10
 2552 0427 12       		.uleb128 0x12
 2553 0428 0F030000 		.4byte	.LASF76
 2554 042c 03       		.byte	0x3
 2555 042d 8301     		.2byte	0x183
 2556 042f 5B030000 		.4byte	0x35b
 2557 0433 02       		.byte	0x2
 2558 0434 23       		.byte	0x23
 2559 0435 14       		.uleb128 0x14
 2560 0436 12       		.uleb128 0x12
 2561 0437 FA050000 		.4byte	.LASF66
 2562 043b 03       		.byte	0x3
 2563 043c 8401     		.2byte	0x184
 2564 043e A5010000 		.4byte	0x1a5
 2565 0442 02       		.byte	0x2
 2566 0443 23       		.byte	0x23
 2567 0444 18       		.uleb128 0x18
 2568 0445 12       		.uleb128 0x12
 2569 0446 04060000 		.4byte	.LASF57
 2570 044a 03       		.byte	0x3
 2571 044b 8501     		.2byte	0x185
ARM GAS  /tmp/cc7m2O8A.s 			page 89


 2572 044d A5010000 		.4byte	0x1a5
 2573 0451 02       		.byte	0x2
 2574 0452 23       		.byte	0x23
 2575 0453 1C       		.uleb128 0x1c
 2576 0454 11       		.uleb128 0x11
 2577 0455 545200   		.ascii	"TR\000"
 2578 0458 03       		.byte	0x3
 2579 0459 8601     		.2byte	0x186
 2580 045b 5B030000 		.4byte	0x35b
 2581 045f 02       		.byte	0x2
 2582 0460 23       		.byte	0x23
 2583 0461 20       		.uleb128 0x20
 2584 0462 12       		.uleb128 0x12
 2585 0463 0E060000 		.4byte	.LASF59
 2586 0467 03       		.byte	0x3
 2587 0468 8701     		.2byte	0x187
 2588 046a A5010000 		.4byte	0x1a5
 2589 046e 02       		.byte	0x2
 2590 046f 23       		.byte	0x23
 2591 0470 24       		.uleb128 0x24
 2592 0471 12       		.uleb128 0x12
 2593 0472 86020000 		.4byte	.LASF77
 2594 0476 03       		.byte	0x3
 2595 0477 8801     		.2byte	0x188
 2596 0479 5B030000 		.4byte	0x35b
 2597 047d 02       		.byte	0x2
 2598 047e 23       		.byte	0x23
 2599 047f 28       		.uleb128 0x28
 2600 0480 12       		.uleb128 0x12
 2601 0481 18060000 		.4byte	.LASF60
 2602 0485 03       		.byte	0x3
 2603 0486 8901     		.2byte	0x189
 2604 0488 9E040000 		.4byte	0x49e
 2605 048c 02       		.byte	0x2
 2606 048d 23       		.byte	0x23
 2607 048e 2C       		.uleb128 0x2c
 2608 048f 11       		.uleb128 0x11
 2609 0490 445200   		.ascii	"DR\000"
 2610 0493 03       		.byte	0x3
 2611 0494 8A01     		.2byte	0x18a
 2612 0496 5B030000 		.4byte	0x35b
 2613 049a 02       		.byte	0x2
 2614 049b 23       		.byte	0x23
 2615 049c 40       		.uleb128 0x40
 2616 049d 00       		.byte	0
 2617 049e 0C       		.uleb128 0xc
 2618 049f A5010000 		.4byte	0x1a5
 2619 04a3 AE040000 		.4byte	0x4ae
 2620 04a7 0D       		.uleb128 0xd
 2621 04a8 5D020000 		.4byte	0x25d
 2622 04ac 04       		.byte	0x4
 2623 04ad 00       		.byte	0
 2624 04ae 06       		.uleb128 0x6
 2625 04af 67040000 		.4byte	.LASF78
 2626 04b3 03       		.byte	0x3
 2627 04b4 8B01     		.2byte	0x18b
 2628 04b6 D4030000 		.4byte	0x3d4
ARM GAS  /tmp/cc7m2O8A.s 			page 90


 2629 04ba 0E       		.uleb128 0xe
 2630 04bb 8F010000 		.4byte	0x18f
 2631 04bf 13       		.uleb128 0x13
 2632 04c0 2C       		.byte	0x2c
 2633 04c1 03       		.byte	0x3
 2634 04c2 6902     		.2byte	0x269
 2635 04c4 9B050000 		.4byte	0x59b
 2636 04c8 12       		.uleb128 0x12
 2637 04c9 80020000 		.4byte	.LASF79
 2638 04cd 03       		.byte	0x3
 2639 04ce 6B02     		.2byte	0x26b
 2640 04d0 5B030000 		.4byte	0x35b
 2641 04d4 02       		.byte	0x2
 2642 04d5 23       		.byte	0x23
 2643 04d6 00       		.uleb128 0
 2644 04d7 12       		.uleb128 0x12
 2645 04d8 8F060000 		.4byte	.LASF80
 2646 04dc 03       		.byte	0x3
 2647 04dd 6C02     		.2byte	0x26c
 2648 04df BA040000 		.4byte	0x4ba
 2649 04e3 02       		.byte	0x2
 2650 04e4 23       		.byte	0x23
 2651 04e5 04       		.uleb128 0x4
 2652 04e6 12       		.uleb128 0x12
 2653 04e7 F0050000 		.4byte	.LASF53
 2654 04eb 03       		.byte	0x3
 2655 04ec 6D02     		.2byte	0x26d
 2656 04ee 8F010000 		.4byte	0x18f
 2657 04f2 02       		.byte	0x2
 2658 04f3 23       		.byte	0x23
 2659 04f4 06       		.uleb128 0x6
 2660 04f5 12       		.uleb128 0x12
 2661 04f6 95050000 		.4byte	.LASF81
 2662 04fa 03       		.byte	0x3
 2663 04fb 6E02     		.2byte	0x26e
 2664 04fd 5B030000 		.4byte	0x35b
 2665 0501 02       		.byte	0x2
 2666 0502 23       		.byte	0x23
 2667 0503 08       		.uleb128 0x8
 2668 0504 12       		.uleb128 0x12
 2669 0505 36030000 		.4byte	.LASF82
 2670 0509 03       		.byte	0x3
 2671 050a 6F02     		.2byte	0x26f
 2672 050c 5B030000 		.4byte	0x35b
 2673 0510 02       		.byte	0x2
 2674 0511 23       		.byte	0x23
 2675 0512 0C       		.uleb128 0xc
 2676 0513 11       		.uleb128 0x11
 2677 0514 49445200 		.ascii	"IDR\000"
 2678 0518 03       		.byte	0x3
 2679 0519 7002     		.2byte	0x270
 2680 051b BA040000 		.4byte	0x4ba
 2681 051f 02       		.byte	0x2
 2682 0520 23       		.byte	0x23
 2683 0521 10       		.uleb128 0x10
 2684 0522 12       		.uleb128 0x12
 2685 0523 FA050000 		.4byte	.LASF66
ARM GAS  /tmp/cc7m2O8A.s 			page 91


 2686 0527 03       		.byte	0x3
 2687 0528 7102     		.2byte	0x271
 2688 052a 8F010000 		.4byte	0x18f
 2689 052e 02       		.byte	0x2
 2690 052f 23       		.byte	0x23
 2691 0530 12       		.uleb128 0x12
 2692 0531 11       		.uleb128 0x11
 2693 0532 4F445200 		.ascii	"ODR\000"
 2694 0536 03       		.byte	0x3
 2695 0537 7202     		.2byte	0x272
 2696 0539 BA040000 		.4byte	0x4ba
 2697 053d 02       		.byte	0x2
 2698 053e 23       		.byte	0x23
 2699 053f 14       		.uleb128 0x14
 2700 0540 12       		.uleb128 0x12
 2701 0541 04060000 		.4byte	.LASF57
 2702 0545 03       		.byte	0x3
 2703 0546 7302     		.2byte	0x273
 2704 0548 8F010000 		.4byte	0x18f
 2705 054c 02       		.byte	0x2
 2706 054d 23       		.byte	0x23
 2707 054e 16       		.uleb128 0x16
 2708 054f 12       		.uleb128 0x12
 2709 0550 41000000 		.4byte	.LASF83
 2710 0554 03       		.byte	0x3
 2711 0555 7402     		.2byte	0x274
 2712 0557 5B030000 		.4byte	0x35b
 2713 055b 02       		.byte	0x2
 2714 055c 23       		.byte	0x23
 2715 055d 18       		.uleb128 0x18
 2716 055e 12       		.uleb128 0x12
 2717 055f 980A0000 		.4byte	.LASF84
 2718 0563 03       		.byte	0x3
 2719 0564 7502     		.2byte	0x275
 2720 0566 5B030000 		.4byte	0x35b
 2721 056a 02       		.byte	0x2
 2722 056b 23       		.byte	0x23
 2723 056c 1C       		.uleb128 0x1c
 2724 056d 11       		.uleb128 0x11
 2725 056e 41465200 		.ascii	"AFR\000"
 2726 0572 03       		.byte	0x3
 2727 0573 7602     		.2byte	0x276
 2728 0575 9B050000 		.4byte	0x59b
 2729 0579 02       		.byte	0x2
 2730 057a 23       		.byte	0x23
 2731 057b 20       		.uleb128 0x20
 2732 057c 11       		.uleb128 0x11
 2733 057d 42525200 		.ascii	"BRR\000"
 2734 0581 03       		.byte	0x3
 2735 0582 7702     		.2byte	0x277
 2736 0584 BA040000 		.4byte	0x4ba
 2737 0588 02       		.byte	0x2
 2738 0589 23       		.byte	0x23
 2739 058a 28       		.uleb128 0x28
 2740 058b 12       		.uleb128 0x12
 2741 058c 0E060000 		.4byte	.LASF59
 2742 0590 03       		.byte	0x3
ARM GAS  /tmp/cc7m2O8A.s 			page 92


 2743 0591 7802     		.2byte	0x278
 2744 0593 8F010000 		.4byte	0x18f
 2745 0597 02       		.byte	0x2
 2746 0598 23       		.byte	0x23
 2747 0599 2A       		.uleb128 0x2a
 2748 059a 00       		.byte	0
 2749 059b 0E       		.uleb128 0xe
 2750 059c 65030000 		.4byte	0x365
 2751 05a0 06       		.uleb128 0x6
 2752 05a1 08070000 		.4byte	.LASF85
 2753 05a5 03       		.byte	0x3
 2754 05a6 7902     		.2byte	0x279
 2755 05a8 BF040000 		.4byte	0x4bf
 2756 05ac 05       		.uleb128 0x5
 2757 05ad 08       		.byte	0x8
 2758 05ae 04       		.byte	0x4
 2759 05af AA050000 		.4byte	.LASF86
 2760 05b3 05       		.uleb128 0x5
 2761 05b4 01       		.byte	0x1
 2762 05b5 08       		.byte	0x8
 2763 05b6 5E030000 		.4byte	.LASF87
 2764 05ba 0C       		.uleb128 0xc
 2765 05bb 3D010000 		.4byte	0x13d
 2766 05bf CA050000 		.4byte	0x5ca
 2767 05c3 0D       		.uleb128 0xd
 2768 05c4 5D020000 		.4byte	0x25d
 2769 05c8 02       		.byte	0x2
 2770 05c9 00       		.byte	0
 2771 05ca 0C       		.uleb128 0xc
 2772 05cb B3050000 		.4byte	0x5b3
 2773 05cf DA050000 		.4byte	0x5da
 2774 05d3 0D       		.uleb128 0xd
 2775 05d4 5D020000 		.4byte	0x25d
 2776 05d8 17       		.byte	0x17
 2777 05d9 00       		.byte	0
 2778 05da 14       		.uleb128 0x14
 2779 05db 01       		.byte	0x1
 2780 05dc 24010000 		.4byte	0x124
 2781 05e0 06       		.byte	0x6
 2782 05e1 BE       		.byte	0xbe
 2783 05e2 23060000 		.4byte	0x623
 2784 05e6 04       		.uleb128 0x4
 2785 05e7 E5040000 		.4byte	.LASF88
 2786 05eb 00       		.byte	0
 2787 05ec 04       		.uleb128 0x4
 2788 05ed BD060000 		.4byte	.LASF89
 2789 05f1 01       		.byte	0x1
 2790 05f2 04       		.uleb128 0x4
 2791 05f3 14030000 		.4byte	.LASF90
 2792 05f7 02       		.byte	0x2
 2793 05f8 04       		.uleb128 0x4
 2794 05f9 50020000 		.4byte	.LASF91
 2795 05fd 03       		.byte	0x3
 2796 05fe 04       		.uleb128 0x4
 2797 05ff 68020000 		.4byte	.LASF92
 2798 0603 04       		.byte	0x4
 2799 0604 04       		.uleb128 0x4
ARM GAS  /tmp/cc7m2O8A.s 			page 93


 2800 0605 34080000 		.4byte	.LASF93
 2801 0609 05       		.byte	0x5
 2802 060a 04       		.uleb128 0x4
 2803 060b A5040000 		.4byte	.LASF94
 2804 060f 06       		.byte	0x6
 2805 0610 04       		.uleb128 0x4
 2806 0611 EF040000 		.4byte	.LASF95
 2807 0615 07       		.byte	0x7
 2808 0616 04       		.uleb128 0x4
 2809 0617 FD030000 		.4byte	.LASF96
 2810 061b 08       		.byte	0x8
 2811 061c 04       		.uleb128 0x4
 2812 061d 4C040000 		.4byte	.LASF97
 2813 0621 09       		.byte	0x9
 2814 0622 00       		.byte	0
 2815 0623 07       		.uleb128 0x7
 2816 0624 DD030000 		.4byte	.LASF98
 2817 0628 06       		.byte	0x6
 2818 0629 CC       		.byte	0xcc
 2819 062a DA050000 		.4byte	0x5da
 2820 062e 14       		.uleb128 0x14
 2821 062f 01       		.byte	0x1
 2822 0630 24010000 		.4byte	0x124
 2823 0634 06       		.byte	0x6
 2824 0635 D0       		.byte	0xd0
 2825 0636 65060000 		.4byte	0x665
 2826 063a 04       		.uleb128 0x4
 2827 063b 5E000000 		.4byte	.LASF99
 2828 063f 00       		.byte	0
 2829 0640 04       		.uleb128 0x4
 2830 0641 6D000000 		.4byte	.LASF100
 2831 0645 01       		.byte	0x1
 2832 0646 04       		.uleb128 0x4
 2833 0647 15070000 		.4byte	.LASF101
 2834 064b 02       		.byte	0x2
 2835 064c 04       		.uleb128 0x4
 2836 064d 730A0000 		.4byte	.LASF102
 2837 0651 03       		.byte	0x3
 2838 0652 04       		.uleb128 0x4
 2839 0653 A2060000 		.4byte	.LASF103
 2840 0657 04       		.byte	0x4
 2841 0658 04       		.uleb128 0x4
 2842 0659 B7010000 		.4byte	.LASF104
 2843 065d 05       		.byte	0x5
 2844 065e 04       		.uleb128 0x4
 2845 065f B5000000 		.4byte	.LASF105
 2846 0663 06       		.byte	0x6
 2847 0664 00       		.byte	0
 2848 0665 07       		.uleb128 0x7
 2849 0666 48080000 		.4byte	.LASF106
 2850 066a 06       		.byte	0x6
 2851 066b D9       		.byte	0xd9
 2852 066c 2E060000 		.4byte	0x62e
 2853 0670 15       		.uleb128 0x15
 2854 0671 C7040000 		.4byte	.LASF205
 2855 0675 54       		.byte	0x54
 2856 0676 07       		.byte	0x7
ARM GAS  /tmp/cc7m2O8A.s 			page 94


 2857 0677 36       		.byte	0x36
 2858 0678 ED060000 		.4byte	0x6ed
 2859 067c 0A       		.uleb128 0xa
 2860 067d DA050000 		.4byte	.LASF107
 2861 0681 07       		.byte	0x7
 2862 0682 38       		.byte	0x38
 2863 0683 CA050000 		.4byte	0x5ca
 2864 0687 02       		.byte	0x2
 2865 0688 23       		.byte	0x23
 2866 0689 00       		.uleb128 0
 2867 068a 0A       		.uleb128 0xa
 2868 068b 1F010000 		.4byte	.LASF108
 2869 068f 07       		.byte	0x7
 2870 0690 39       		.byte	0x39
 2871 0691 CA050000 		.4byte	0x5ca
 2872 0695 02       		.byte	0x2
 2873 0696 23       		.byte	0x23
 2874 0697 18       		.uleb128 0x18
 2875 0698 0A       		.uleb128 0xa
 2876 0699 470A0000 		.4byte	.LASF109
 2877 069d 07       		.byte	0x7
 2878 069e 3A       		.byte	0x3a
 2879 069f CA050000 		.4byte	0x5ca
 2880 06a3 02       		.byte	0x2
 2881 06a4 23       		.byte	0x23
 2882 06a5 30       		.uleb128 0x30
 2883 06a6 0A       		.uleb128 0xa
 2884 06a7 9F080000 		.4byte	.LASF110
 2885 06ab 07       		.byte	0x7
 2886 06ac 3C       		.byte	0x3c
 2887 06ad 7D010000 		.4byte	0x17d
 2888 06b1 02       		.byte	0x2
 2889 06b2 23       		.byte	0x23
 2890 06b3 48       		.uleb128 0x48
 2891 06b4 0A       		.uleb128 0xa
 2892 06b5 66070000 		.4byte	.LASF111
 2893 06b9 07       		.byte	0x7
 2894 06ba 3D       		.byte	0x3d
 2895 06bb 7D010000 		.4byte	0x17d
 2896 06bf 02       		.byte	0x2
 2897 06c0 23       		.byte	0x23
 2898 06c1 4C       		.uleb128 0x4c
 2899 06c2 0A       		.uleb128 0xa
 2900 06c3 41060000 		.4byte	.LASF112
 2901 06c7 07       		.byte	0x7
 2902 06c8 3E       		.byte	0x3e
 2903 06c9 3D010000 		.4byte	0x13d
 2904 06cd 02       		.byte	0x2
 2905 06ce 23       		.byte	0x23
 2906 06cf 50       		.uleb128 0x50
 2907 06d0 0A       		.uleb128 0xa
 2908 06d1 A9020000 		.4byte	.LASF113
 2909 06d5 07       		.byte	0x7
 2910 06d6 40       		.byte	0x40
 2911 06d7 24010000 		.4byte	0x124
 2912 06db 02       		.byte	0x2
 2913 06dc 23       		.byte	0x23
ARM GAS  /tmp/cc7m2O8A.s 			page 95


 2914 06dd 52       		.uleb128 0x52
 2915 06de 0A       		.uleb128 0xa
 2916 06df 620A0000 		.4byte	.LASF114
 2917 06e3 07       		.byte	0x7
 2918 06e4 41       		.byte	0x41
 2919 06e5 24010000 		.4byte	0x124
 2920 06e9 02       		.byte	0x2
 2921 06ea 23       		.byte	0x23
 2922 06eb 53       		.uleb128 0x53
 2923 06ec 00       		.byte	0
 2924 06ed 07       		.uleb128 0x7
 2925 06ee 2D090000 		.4byte	.LASF115
 2926 06f2 07       		.byte	0x7
 2927 06f3 47       		.byte	0x47
 2928 06f4 70060000 		.4byte	0x670
 2929 06f8 14       		.uleb128 0x14
 2930 06f9 01       		.byte	0x1
 2931 06fa 24010000 		.4byte	0x124
 2932 06fe 08       		.byte	0x8
 2933 06ff 0A       		.byte	0xa
 2934 0700 5F070000 		.4byte	0x75f
 2935 0704 04       		.uleb128 0x4
 2936 0705 2A020000 		.4byte	.LASF116
 2937 0709 00       		.byte	0
 2938 070a 04       		.uleb128 0x4
 2939 070b 51060000 		.4byte	.LASF117
 2940 070f 01       		.byte	0x1
 2941 0710 04       		.uleb128 0x4
 2942 0711 42030000 		.4byte	.LASF118
 2943 0715 02       		.byte	0x2
 2944 0716 04       		.uleb128 0x4
 2945 0717 54040000 		.4byte	.LASF119
 2946 071b 03       		.byte	0x3
 2947 071c 04       		.uleb128 0x4
 2948 071d 75080000 		.4byte	.LASF120
 2949 0721 04       		.byte	0x4
 2950 0722 04       		.uleb128 0x4
 2951 0723 8C000000 		.4byte	.LASF121
 2952 0727 05       		.byte	0x5
 2953 0728 04       		.uleb128 0x4
 2954 0729 6B010000 		.4byte	.LASF122
 2955 072d 06       		.byte	0x6
 2956 072e 04       		.uleb128 0x4
 2957 072f E7080000 		.4byte	.LASF123
 2958 0733 07       		.byte	0x7
 2959 0734 04       		.uleb128 0x4
 2960 0735 14090000 		.4byte	.LASF124
 2961 0739 08       		.byte	0x8
 2962 073a 04       		.uleb128 0x4
 2963 073b 06000000 		.4byte	.LASF125
 2964 073f 09       		.byte	0x9
 2965 0740 04       		.uleb128 0x4
 2966 0741 8A080000 		.4byte	.LASF126
 2967 0745 0A       		.byte	0xa
 2968 0746 04       		.uleb128 0x4
 2969 0747 58080000 		.4byte	.LASF127
 2970 074b 0B       		.byte	0xb
ARM GAS  /tmp/cc7m2O8A.s 			page 96


 2971 074c 04       		.uleb128 0x4
 2972 074d DF020000 		.4byte	.LASF128
 2973 0751 0C       		.byte	0xc
 2974 0752 04       		.uleb128 0x4
 2975 0753 9C000000 		.4byte	.LASF129
 2976 0757 0D       		.byte	0xd
 2977 0758 04       		.uleb128 0x4
 2978 0759 63030000 		.4byte	.LASF130
 2979 075d 0E       		.byte	0xe
 2980 075e 00       		.byte	0
 2981 075f 16       		.uleb128 0x16
 2982 0760 4D050000 		.4byte	.LASF206
 2983 0764 01       		.byte	0x1
 2984 0765 7C03     		.2byte	0x37c
 2985 0767 01       		.byte	0x1
 2986 0768 00000000 		.4byte	.LFB16
 2987 076c EC000000 		.4byte	.LFE16
 2988 0770 00000000 		.4byte	.LLST0
 2989 0774 01       		.byte	0x1
 2990 0775 98070000 		.4byte	0x798
 2991 0779 17       		.uleb128 0x17
 2992 077a CE050000 		.4byte	.LASF131
 2993 077e 01       		.byte	0x1
 2994 077f 7C03     		.2byte	0x37c
 2995 0781 0D010000 		.4byte	0x10d
 2996 0785 02       		.byte	0x2
 2997 0786 91       		.byte	0x91
 2998 0787 6F       		.sleb128 -17
 2999 0788 17       		.uleb128 0x17
 3000 0789 79060000 		.4byte	.LASF132
 3001 078d 01       		.byte	0x1
 3002 078e 7C03     		.2byte	0x37c
 3003 0790 A5010000 		.4byte	0x1a5
 3004 0794 02       		.byte	0x2
 3005 0795 91       		.byte	0x91
 3006 0796 68       		.sleb128 -24
 3007 0797 00       		.byte	0
 3008 0798 18       		.uleb128 0x18
 3009 0799 00030000 		.4byte	.LASF207
 3010 079d 01       		.byte	0x1
 3011 079e B803     		.2byte	0x3b8
 3012 07a0 01       		.byte	0x1
 3013 07a1 A5010000 		.4byte	0x1a5
 3014 07a5 00000000 		.4byte	.LFB18
 3015 07a9 48000000 		.4byte	.LFE18
 3016 07ad 2C000000 		.4byte	.LLST1
 3017 07b1 01       		.byte	0x1
 3018 07b2 C6070000 		.4byte	0x7c6
 3019 07b6 17       		.uleb128 0x17
 3020 07b7 3C030000 		.4byte	.LASF133
 3021 07bb 01       		.byte	0x1
 3022 07bc B803     		.2byte	0x3b8
 3023 07be A5010000 		.4byte	0x1a5
 3024 07c2 02       		.byte	0x2
 3025 07c3 91       		.byte	0x91
 3026 07c4 74       		.sleb128 -12
 3027 07c5 00       		.byte	0
ARM GAS  /tmp/cc7m2O8A.s 			page 97


 3028 07c6 19       		.uleb128 0x19
 3029 07c7 01       		.byte	0x1
 3030 07c8 1F0A0000 		.4byte	.LASF208
 3031 07cc 02       		.byte	0x2
 3032 07cd D8       		.byte	0xd8
 3033 07ce 01       		.byte	0x1
 3034 07cf 76010000 		.4byte	0x176
 3035 07d3 00000000 		.4byte	.LFB20
 3036 07d7 28080000 		.4byte	.LFE20
 3037 07db 58000000 		.4byte	.LLST2
 3038 07df 01       		.byte	0x1
 3039 07e0 64090000 		.4byte	0x964
 3040 07e4 1A       		.uleb128 0x1a
 3041 07e5 6900     		.ascii	"i\000"
 3042 07e7 02       		.byte	0x2
 3043 07e8 DA       		.byte	0xda
 3044 07e9 24010000 		.4byte	0x124
 3045 07ed 02       		.byte	0x2
 3046 07ee 91       		.byte	0x91
 3047 07ef 6F       		.sleb128 -17
 3048 07f0 1B       		.uleb128 0x1b
 3049 07f1 696900   		.ascii	"ii\000"
 3050 07f4 02       		.byte	0x2
 3051 07f5 DA       		.byte	0xda
 3052 07f6 24010000 		.4byte	0x124
 3053 07fa 1C       		.uleb128 0x1c
 3054 07fb 8B0A0000 		.4byte	.LASF134
 3055 07ff 02       		.byte	0x2
 3056 0800 DB       		.byte	0xdb
 3057 0801 24010000 		.4byte	0x124
 3058 0805 1C       		.uleb128 0x1c
 3059 0806 D2030000 		.4byte	.LASF135
 3060 080a 02       		.byte	0x2
 3061 080b DB       		.byte	0xdb
 3062 080c 24010000 		.4byte	0x124
 3063 0810 1D       		.uleb128 0x1d
 3064 0811 6C080000 		.4byte	.LASF136
 3065 0815 02       		.byte	0x2
 3066 0816 DB       		.byte	0xdb
 3067 0817 24010000 		.4byte	0x124
 3068 081b 02       		.byte	0x2
 3069 081c 91       		.byte	0x91
 3070 081d 52       		.sleb128 -46
 3071 081e 1D       		.uleb128 0x1d
 3072 081f 420A0000 		.4byte	.LASF137
 3073 0823 02       		.byte	0x2
 3074 0824 DC       		.byte	0xdc
 3075 0825 24010000 		.4byte	0x124
 3076 0829 02       		.byte	0x2
 3077 082a 91       		.byte	0x91
 3078 082b 51       		.sleb128 -47
 3079 082c 1D       		.uleb128 0x1d
 3080 082d 57090000 		.4byte	.LASF138
 3081 0831 02       		.byte	0x2
 3082 0832 DD       		.byte	0xdd
 3083 0833 3D010000 		.4byte	0x13d
 3084 0837 02       		.byte	0x2
ARM GAS  /tmp/cc7m2O8A.s 			page 98


 3085 0838 91       		.byte	0x91
 3086 0839 42       		.sleb128 -62
 3087 083a 1D       		.uleb128 0x1d
 3088 083b 89030000 		.4byte	.LASF139
 3089 083f 02       		.byte	0x2
 3090 0840 DD       		.byte	0xdd
 3091 0841 3D010000 		.4byte	0x13d
 3092 0845 02       		.byte	0x2
 3093 0846 91       		.byte	0x91
 3094 0847 40       		.sleb128 -64
 3095 0848 1D       		.uleb128 0x1d
 3096 0849 2C010000 		.4byte	.LASF140
 3097 084d 02       		.byte	0x2
 3098 084e DE       		.byte	0xde
 3099 084f 3D010000 		.4byte	0x13d
 3100 0853 03       		.byte	0x3
 3101 0854 91       		.byte	0x91
 3102 0855 BE7F     		.sleb128 -66
 3103 0857 1D       		.uleb128 0x1d
 3104 0858 DE040000 		.4byte	.LASF141
 3105 085c 02       		.byte	0x2
 3106 085d DE       		.byte	0xde
 3107 085e 3D010000 		.4byte	0x13d
 3108 0862 03       		.byte	0x3
 3109 0863 91       		.byte	0x91
 3110 0864 BC7F     		.sleb128 -68
 3111 0866 1D       		.uleb128 0x1d
 3112 0867 0E090000 		.4byte	.LASF142
 3113 086b 02       		.byte	0x2
 3114 086c DF       		.byte	0xdf
 3115 086d 3D010000 		.4byte	0x13d
 3116 0871 02       		.byte	0x2
 3117 0872 91       		.byte	0x91
 3118 0873 6C       		.sleb128 -20
 3119 0874 1D       		.uleb128 0x1d
 3120 0875 FA040000 		.4byte	.LASF143
 3121 0879 02       		.byte	0x2
 3122 087a DF       		.byte	0xdf
 3123 087b 3D010000 		.4byte	0x13d
 3124 087f 02       		.byte	0x2
 3125 0880 91       		.byte	0x91
 3126 0881 6A       		.sleb128 -22
 3127 0882 1D       		.uleb128 0x1d
 3128 0883 B1010000 		.4byte	.LASF144
 3129 0887 02       		.byte	0x2
 3130 0888 E0       		.byte	0xe0
 3131 0889 64090000 		.4byte	0x964
 3132 088d 02       		.byte	0x2
 3133 088e 91       		.byte	0x91
 3134 088f 4C       		.sleb128 -52
 3135 0890 1D       		.uleb128 0x1d
 3136 0891 15000000 		.4byte	.LASF145
 3137 0895 02       		.byte	0x2
 3138 0896 E1       		.byte	0xe1
 3139 0897 7D010000 		.4byte	0x17d
 3140 089b 02       		.byte	0x2
 3141 089c 91       		.byte	0x91
ARM GAS  /tmp/cc7m2O8A.s 			page 99


 3142 089d 64       		.sleb128 -28
 3143 089e 1D       		.uleb128 0x1d
 3144 089f 98010000 		.4byte	.LASF146
 3145 08a3 02       		.byte	0x2
 3146 08a4 E3       		.byte	0xe3
 3147 08a5 3D010000 		.4byte	0x13d
 3148 08a9 02       		.byte	0x2
 3149 08aa 91       		.byte	0x91
 3150 08ab 62       		.sleb128 -30
 3151 08ac 1D       		.uleb128 0x1d
 3152 08ad 330A0000 		.4byte	.LASF147
 3153 08b1 02       		.byte	0x2
 3154 08b2 E4       		.byte	0xe4
 3155 08b3 7D010000 		.4byte	0x17d
 3156 08b7 02       		.byte	0x2
 3157 08b8 91       		.byte	0x91
 3158 08b9 5C       		.sleb128 -36
 3159 08ba 1D       		.uleb128 0x1d
 3160 08bb 3A020000 		.4byte	.LASF148
 3161 08bf 02       		.byte	0x2
 3162 08c0 E4       		.byte	0xe4
 3163 08c1 7D010000 		.4byte	0x17d
 3164 08c5 02       		.byte	0x2
 3165 08c6 91       		.byte	0x91
 3166 08c7 58       		.sleb128 -40
 3167 08c8 1D       		.uleb128 0x1d
 3168 08c9 05050000 		.4byte	.LASF149
 3169 08cd 02       		.byte	0x2
 3170 08ce E5       		.byte	0xe5
 3171 08cf 24010000 		.4byte	0x124
 3172 08d3 02       		.byte	0x2
 3173 08d4 91       		.byte	0x91
 3174 08d5 57       		.sleb128 -41
 3175 08d6 1D       		.uleb128 0x1d
 3176 08d7 C7030000 		.4byte	.LASF150
 3177 08db 02       		.byte	0x2
 3178 08dc E6       		.byte	0xe6
 3179 08dd 24010000 		.4byte	0x124
 3180 08e1 02       		.byte	0x2
 3181 08e2 91       		.byte	0x91
 3182 08e3 4B       		.sleb128 -53
 3183 08e4 1D       		.uleb128 0x1d
 3184 08e5 53000000 		.4byte	.LASF151
 3185 08e9 02       		.byte	0x2
 3186 08ea E9       		.byte	0xe9
 3187 08eb 23060000 		.4byte	0x623
 3188 08ef 02       		.byte	0x2
 3189 08f0 91       		.byte	0x91
 3190 08f1 56       		.sleb128 -42
 3191 08f2 1D       		.uleb128 0x1d
 3192 08f3 A20A0000 		.4byte	.LASF152
 3193 08f7 02       		.byte	0x2
 3194 08f8 EA       		.byte	0xea
 3195 08f9 24010000 		.4byte	0x124
 3196 08fd 02       		.byte	0x2
 3197 08fe 91       		.byte	0x91
 3198 08ff 4A       		.sleb128 -54
ARM GAS  /tmp/cc7m2O8A.s 			page 100


 3199 0900 1D       		.uleb128 0x1d
 3200 0901 1F070000 		.4byte	.LASF153
 3201 0905 02       		.byte	0x2
 3202 0906 EB       		.byte	0xeb
 3203 0907 24010000 		.4byte	0x124
 3204 090b 02       		.byte	0x2
 3205 090c 91       		.byte	0x91
 3206 090d 49       		.sleb128 -55
 3207 090e 1D       		.uleb128 0x1d
 3208 090f 0A080000 		.4byte	.LASF154
 3209 0913 02       		.byte	0x2
 3210 0914 EC       		.byte	0xec
 3211 0915 65060000 		.4byte	0x665
 3212 0919 02       		.byte	0x2
 3213 091a 91       		.byte	0x91
 3214 091b 55       		.sleb128 -43
 3215 091c 1D       		.uleb128 0x1d
 3216 091d 87050000 		.4byte	.LASF155
 3217 0921 02       		.byte	0x2
 3218 0922 ED       		.byte	0xed
 3219 0923 24010000 		.4byte	0x124
 3220 0927 02       		.byte	0x2
 3221 0928 91       		.byte	0x91
 3222 0929 54       		.sleb128 -44
 3223 092a 1D       		.uleb128 0x1d
 3224 092b D0010000 		.4byte	.LASF156
 3225 092f 02       		.byte	0x2
 3226 0930 EE       		.byte	0xee
 3227 0931 24010000 		.4byte	0x124
 3228 0935 02       		.byte	0x2
 3229 0936 91       		.byte	0x91
 3230 0937 53       		.sleb128 -45
 3231 0938 1D       		.uleb128 0x1d
 3232 0939 E4010000 		.4byte	.LASF157
 3233 093d 02       		.byte	0x2
 3234 093e F1       		.byte	0xf1
 3235 093f 3D010000 		.4byte	0x13d
 3236 0943 02       		.byte	0x2
 3237 0944 91       		.byte	0x91
 3238 0945 46       		.sleb128 -58
 3239 0946 1D       		.uleb128 0x1d
 3240 0947 D2080000 		.4byte	.LASF158
 3241 094b 02       		.byte	0x2
 3242 094c F4       		.byte	0xf4
 3243 094d 24010000 		.4byte	0x124
 3244 0951 02       		.byte	0x2
 3245 0952 91       		.byte	0x91
 3246 0953 45       		.sleb128 -59
 3247 0954 1D       		.uleb128 0x1d
 3248 0955 00000000 		.4byte	.LASF159
 3249 0959 02       		.byte	0x2
 3250 095a FA       		.byte	0xfa
 3251 095b 6B090000 		.4byte	0x96b
 3252 095f 03       		.byte	0x3
 3253 0960 91       		.byte	0x91
 3254 0961 D87E     		.sleb128 -168
 3255 0963 00       		.byte	0
ARM GAS  /tmp/cc7m2O8A.s 			page 101


 3256 0964 05       		.uleb128 0x5
 3257 0965 04       		.byte	0x4
 3258 0966 04       		.byte	0x4
 3259 0967 DE010000 		.4byte	.LASF160
 3260 096b 0C       		.uleb128 0xc
 3261 096c B3050000 		.4byte	0x5b3
 3262 0970 7B090000 		.4byte	0x97b
 3263 0974 0D       		.uleb128 0xd
 3264 0975 5D020000 		.4byte	0x25d
 3265 0979 63       		.byte	0x63
 3266 097a 00       		.byte	0
 3267 097b 1E       		.uleb128 0x1e
 3268 097c 01       		.byte	0x1
 3269 097d FD080000 		.4byte	.LASF209
 3270 0981 02       		.byte	0x2
 3271 0982 1705     		.2byte	0x517
 3272 0984 01       		.byte	0x1
 3273 0985 00000000 		.4byte	.LFB21
 3274 0989 B0000000 		.4byte	.LFE21
 3275 098d 85000000 		.4byte	.LLST3
 3276 0991 01       		.byte	0x1
 3277 0992 3B0A0000 		.4byte	0xa3b
 3278 0996 17       		.uleb128 0x17
 3279 0997 85000000 		.4byte	.LASF161
 3280 099b 02       		.byte	0x2
 3281 099c 1705     		.2byte	0x517
 3282 099e 3B0A0000 		.4byte	0xa3b
 3283 09a2 03       		.byte	0x3
 3284 09a3 91       		.byte	0x91
 3285 09a4 A47F     		.sleb128 -92
 3286 09a6 1F       		.uleb128 0x1f
 3287 09a7 643100   		.ascii	"d1\000"
 3288 09aa 02       		.byte	0x2
 3289 09ab 1905     		.2byte	0x519
 3290 09ad 9A010000 		.4byte	0x19a
 3291 09b1 02       		.byte	0x2
 3292 09b2 91       		.byte	0x91
 3293 09b3 74       		.sleb128 -12
 3294 09b4 1F       		.uleb128 0x1f
 3295 09b5 643200   		.ascii	"d2\000"
 3296 09b8 02       		.byte	0x2
 3297 09b9 1905     		.2byte	0x519
 3298 09bb 9A010000 		.4byte	0x19a
 3299 09bf 02       		.byte	0x2
 3300 09c0 91       		.byte	0x91
 3301 09c1 70       		.sleb128 -16
 3302 09c2 1F       		.uleb128 0x1f
 3303 09c3 643300   		.ascii	"d3\000"
 3304 09c6 02       		.byte	0x2
 3305 09c7 1905     		.2byte	0x519
 3306 09c9 9A010000 		.4byte	0x19a
 3307 09cd 02       		.byte	0x2
 3308 09ce 91       		.byte	0x91
 3309 09cf 6C       		.sleb128 -20
 3310 09d0 1F       		.uleb128 0x1f
 3311 09d1 643400   		.ascii	"d4\000"
 3312 09d4 02       		.byte	0x2
ARM GAS  /tmp/cc7m2O8A.s 			page 102


 3313 09d5 1905     		.2byte	0x519
 3314 09d7 9A010000 		.4byte	0x19a
 3315 09db 02       		.byte	0x2
 3316 09dc 91       		.byte	0x91
 3317 09dd 68       		.sleb128 -24
 3318 09de 1F       		.uleb128 0x1f
 3319 09df 643500   		.ascii	"d5\000"
 3320 09e2 02       		.byte	0x2
 3321 09e3 1905     		.2byte	0x519
 3322 09e5 9A010000 		.4byte	0x19a
 3323 09e9 02       		.byte	0x2
 3324 09ea 91       		.byte	0x91
 3325 09eb 64       		.sleb128 -28
 3326 09ec 1F       		.uleb128 0x1f
 3327 09ed 643600   		.ascii	"d6\000"
 3328 09f0 02       		.byte	0x2
 3329 09f1 1905     		.2byte	0x519
 3330 09f3 9A010000 		.4byte	0x19a
 3331 09f7 02       		.byte	0x2
 3332 09f8 91       		.byte	0x91
 3333 09f9 60       		.sleb128 -32
 3334 09fa 20       		.uleb128 0x20
 3335 09fb 44050000 		.4byte	.LASF162
 3336 09ff 02       		.byte	0x2
 3337 0a00 1A05     		.2byte	0x51a
 3338 0a02 410A0000 		.4byte	0xa41
 3339 0a06 03       		.byte	0x3
 3340 0a07 91       		.byte	0x91
 3341 0a08 B87F     		.sleb128 -72
 3342 0a0a 20       		.uleb128 0x20
 3343 0a0b C1070000 		.4byte	.LASF163
 3344 0a0f 02       		.byte	0x2
 3345 0a10 1B05     		.2byte	0x51b
 3346 0a12 510A0000 		.4byte	0xa51
 3347 0a16 03       		.byte	0x3
 3348 0a17 91       		.byte	0x91
 3349 0a18 B47F     		.sleb128 -76
 3350 0a1a 20       		.uleb128 0x20
 3351 0a1b 77030000 		.4byte	.LASF164
 3352 0a1f 02       		.byte	0x2
 3353 0a20 1C05     		.2byte	0x51c
 3354 0a22 510A0000 		.4byte	0xa51
 3355 0a26 03       		.byte	0x3
 3356 0a27 91       		.byte	0x91
 3357 0a28 B07F     		.sleb128 -80
 3358 0a2a 20       		.uleb128 0x20
 3359 0a2b 7D070000 		.4byte	.LASF165
 3360 0a2f 02       		.byte	0x2
 3361 0a30 1D05     		.2byte	0x51d
 3362 0a32 510A0000 		.4byte	0xa51
 3363 0a36 03       		.byte	0x3
 3364 0a37 91       		.byte	0x91
 3365 0a38 AC7F     		.sleb128 -84
 3366 0a3a 00       		.byte	0
 3367 0a3b 21       		.uleb128 0x21
 3368 0a3c 04       		.byte	0x4
 3369 0a3d 84010000 		.4byte	0x184
ARM GAS  /tmp/cc7m2O8A.s 			page 103


 3370 0a41 0C       		.uleb128 0xc
 3371 0a42 B3050000 		.4byte	0x5b3
 3372 0a46 510A0000 		.4byte	0xa51
 3373 0a4a 0D       		.uleb128 0xd
 3374 0a4b 5D020000 		.4byte	0x25d
 3375 0a4f 27       		.byte	0x27
 3376 0a50 00       		.byte	0
 3377 0a51 0E       		.uleb128 0xe
 3378 0a52 64090000 		.4byte	0x964
 3379 0a56 22       		.uleb128 0x22
 3380 0a57 01       		.byte	0x1
 3381 0a58 B7080000 		.4byte	.LASF210
 3382 0a5c 02       		.byte	0x2
 3383 0a5d 3705     		.2byte	0x537
 3384 0a5f 01       		.byte	0x1
 3385 0a60 00000000 		.4byte	.LFB22
 3386 0a64 64010000 		.4byte	.LFE22
 3387 0a68 B2000000 		.4byte	.LLST4
 3388 0a6c 01       		.byte	0x1
 3389 0a6d 0C       		.uleb128 0xc
 3390 0a6e 24010000 		.4byte	0x124
 3391 0a72 7D0A0000 		.4byte	0xa7d
 3392 0a76 0D       		.uleb128 0xd
 3393 0a77 5D020000 		.4byte	0x25d
 3394 0a7b FF       		.byte	0xff
 3395 0a7c 00       		.byte	0
 3396 0a7d 23       		.uleb128 0x23
 3397 0a7e 45010000 		.4byte	.LASF166
 3398 0a82 02       		.byte	0x2
 3399 0a83 3B       		.byte	0x3b
 3400 0a84 8F0A0000 		.4byte	0xa8f
 3401 0a88 01       		.byte	0x1
 3402 0a89 05       		.byte	0x5
 3403 0a8a 03       		.byte	0x3
 3404 0a8b 00000000 		.4byte	tx2buff
 3405 0a8f 0E       		.uleb128 0xe
 3406 0a90 6D0A0000 		.4byte	0xa6d
 3407 0a94 23       		.uleb128 0x23
 3408 0a95 FE000000 		.4byte	.LASF167
 3409 0a99 02       		.byte	0x2
 3410 0a9a 3C       		.byte	0x3c
 3411 0a9b A60A0000 		.4byte	0xaa6
 3412 0a9f 01       		.byte	0x1
 3413 0aa0 05       		.byte	0x5
 3414 0aa1 03       		.byte	0x3
 3415 0aa2 00000000 		.4byte	rx2buff
 3416 0aa6 0E       		.uleb128 0xe
 3417 0aa7 6D0A0000 		.4byte	0xa6d
 3418 0aab 23       		.uleb128 0x23
 3419 0aac 1D040000 		.4byte	.LASF168
 3420 0ab0 02       		.byte	0x2
 3421 0ab1 3E       		.byte	0x3e
 3422 0ab2 BD0A0000 		.4byte	0xabd
 3423 0ab6 01       		.byte	0x1
 3424 0ab7 05       		.byte	0x5
 3425 0ab8 03       		.byte	0x3
 3426 0ab9 00000000 		.4byte	tx1buff
ARM GAS  /tmp/cc7m2O8A.s 			page 104


 3427 0abd 0E       		.uleb128 0xe
 3428 0abe 6D0A0000 		.4byte	0xa6d
 3429 0ac2 23       		.uleb128 0x23
 3430 0ac3 11010000 		.4byte	.LASF169
 3431 0ac7 02       		.byte	0x2
 3432 0ac8 3F       		.byte	0x3f
 3433 0ac9 D40A0000 		.4byte	0xad4
 3434 0acd 01       		.byte	0x1
 3435 0ace 05       		.byte	0x5
 3436 0acf 03       		.byte	0x3
 3437 0ad0 00000000 		.4byte	rx1buff
 3438 0ad4 0E       		.uleb128 0xe
 3439 0ad5 6D0A0000 		.4byte	0xa6d
 3440 0ad9 23       		.uleb128 0x23
 3441 0ada 99030000 		.4byte	.LASF170
 3442 0ade 02       		.byte	0x2
 3443 0adf 51       		.byte	0x51
 3444 0ae0 EB0A0000 		.4byte	0xaeb
 3445 0ae4 01       		.byte	0x1
 3446 0ae5 05       		.byte	0x5
 3447 0ae6 03       		.byte	0x3
 3448 0ae7 00000000 		.4byte	take_temp_sample
 3449 0aeb 0E       		.uleb128 0xe
 3450 0aec 3D010000 		.4byte	0x13d
 3451 0af0 23       		.uleb128 0x23
 3452 0af1 F6020000 		.4byte	.LASF171
 3453 0af5 02       		.byte	0x2
 3454 0af6 52       		.byte	0x52
 3455 0af7 EB0A0000 		.4byte	0xaeb
 3456 0afb 01       		.byte	0x1
 3457 0afc 05       		.byte	0x5
 3458 0afd 03       		.byte	0x3
 3459 0afe 00000000 		.4byte	timer_rep
 3460 0b02 23       		.uleb128 0x23
 3461 0b03 D2040000 		.4byte	.LASF172
 3462 0b07 02       		.byte	0x2
 3463 0b08 56       		.byte	0x56
 3464 0b09 EB0A0000 		.4byte	0xaeb
 3465 0b0d 01       		.byte	0x1
 3466 0b0e 05       		.byte	0x5
 3467 0b0f 03       		.byte	0x3
 3468 0b10 00000000 		.4byte	timer_relay
 3469 0b14 23       		.uleb128 0x23
 3470 0b15 CA020000 		.4byte	.LASF173
 3471 0b19 02       		.byte	0x2
 3472 0b1a 58       		.byte	0x58
 3473 0b1b EB0A0000 		.4byte	0xaeb
 3474 0b1f 01       		.byte	0x1
 3475 0b20 05       		.byte	0x5
 3476 0b21 03       		.byte	0x3
 3477 0b22 00000000 		.4byte	tt_take_photo_sample
 3478 0b26 23       		.uleb128 0x23
 3479 0b27 37040000 		.4byte	.LASF174
 3480 0b2b 02       		.byte	0x2
 3481 0b2c 59       		.byte	0x59
 3482 0b2d EB0A0000 		.4byte	0xaeb
 3483 0b31 01       		.byte	0x1
ARM GAS  /tmp/cc7m2O8A.s 			page 105


 3484 0b32 05       		.byte	0x5
 3485 0b33 03       		.byte	0x3
 3486 0b34 00000000 		.4byte	tt_relay_on_off
 3487 0b38 23       		.uleb128 0x23
 3488 0b39 AF040000 		.4byte	.LASF175
 3489 0b3d 02       		.byte	0x2
 3490 0b3e 5D       		.byte	0x5d
 3491 0b3f 24010000 		.4byte	0x124
 3492 0b43 01       		.byte	0x1
 3493 0b44 05       		.byte	0x5
 3494 0b45 03       		.byte	0x3
 3495 0b46 00000000 		.4byte	saved_mode
 3496 0b4a 24       		.uleb128 0x24
 3497 0b4b 733100   		.ascii	"s1\000"
 3498 0b4e 02       		.byte	0x2
 3499 0b4f 61       		.byte	0x61
 3500 0b50 3D010000 		.4byte	0x13d
 3501 0b54 01       		.byte	0x1
 3502 0b55 05       		.byte	0x5
 3503 0b56 03       		.byte	0x3
 3504 0b57 00000000 		.4byte	s1
 3505 0b5b 24       		.uleb128 0x24
 3506 0b5c 733200   		.ascii	"s2\000"
 3507 0b5f 02       		.byte	0x2
 3508 0b60 62       		.byte	0x62
 3509 0b61 3D010000 		.4byte	0x13d
 3510 0b65 01       		.byte	0x1
 3511 0b66 05       		.byte	0x5
 3512 0b67 03       		.byte	0x3
 3513 0b68 00000000 		.4byte	s2
 3514 0b6c 24       		.uleb128 0x24
 3515 0b6d 73616300 		.ascii	"sac\000"
 3516 0b71 02       		.byte	0x2
 3517 0b72 63       		.byte	0x63
 3518 0b73 3D010000 		.4byte	0x13d
 3519 0b77 01       		.byte	0x1
 3520 0b78 05       		.byte	0x5
 3521 0b79 03       		.byte	0x3
 3522 0b7a 00000000 		.4byte	sac
 3523 0b7e 23       		.uleb128 0x23
 3524 0b7f AF080000 		.4byte	.LASF176
 3525 0b83 02       		.byte	0x2
 3526 0b84 64       		.byte	0x64
 3527 0b85 24010000 		.4byte	0x124
 3528 0b89 01       		.byte	0x1
 3529 0b8a 05       		.byte	0x5
 3530 0b8b 03       		.byte	0x3
 3531 0b8c 00000000 		.4byte	sac_aux
 3532 0b90 23       		.uleb128 0x23
 3533 0b91 E3070000 		.4byte	.LASF177
 3534 0b95 02       		.byte	0x2
 3535 0b96 68       		.byte	0x68
 3536 0b97 A20B0000 		.4byte	0xba2
 3537 0b9b 01       		.byte	0x1
 3538 0b9c 05       		.byte	0x5
 3539 0b9d 03       		.byte	0x3
 3540 0b9e 00000000 		.4byte	adc_ch
ARM GAS  /tmp/cc7m2O8A.s 			page 106


 3541 0ba2 0E       		.uleb128 0xe
 3542 0ba3 BA050000 		.4byte	0x5ba
 3543 0ba7 23       		.uleb128 0x23
 3544 0ba8 520A0000 		.4byte	.LASF178
 3545 0bac 02       		.byte	0x2
 3546 0bad 69       		.byte	0x69
 3547 0bae B90B0000 		.4byte	0xbb9
 3548 0bb2 01       		.byte	0x1
 3549 0bb3 05       		.byte	0x5
 3550 0bb4 03       		.byte	0x3
 3551 0bb5 00000000 		.4byte	seq_ready
 3552 0bb9 0E       		.uleb128 0xe
 3553 0bba 24010000 		.4byte	0x124
 3554 0bbe 23       		.uleb128 0x23
 3555 0bbf 16050000 		.4byte	.LASF179
 3556 0bc3 02       		.byte	0x2
 3557 0bc4 6A       		.byte	0x6a
 3558 0bc5 3D010000 		.4byte	0x13d
 3559 0bc9 01       		.byte	0x1
 3560 0bca 05       		.byte	0x5
 3561 0bcb 03       		.byte	0x3
 3562 0bcc 00000000 		.4byte	zero_current
 3563 0bd0 23       		.uleb128 0x23
 3564 0bd1 91040000 		.4byte	.LASF180
 3565 0bd5 02       		.byte	0x2
 3566 0bd6 6E       		.byte	0x6e
 3567 0bd7 B90B0000 		.4byte	0xbb9
 3568 0bdb 01       		.byte	0x1
 3569 0bdc 05       		.byte	0x5
 3570 0bdd 03       		.byte	0x3
 3571 0bde 00000000 		.4byte	usart1_mini_timeout
 3572 0be2 23       		.uleb128 0x23
 3573 0be3 8D020000 		.4byte	.LASF181
 3574 0be7 02       		.byte	0x2
 3575 0be8 6F       		.byte	0x6f
 3576 0be9 B90B0000 		.4byte	0xbb9
 3577 0bed 01       		.byte	0x1
 3578 0bee 05       		.byte	0x5
 3579 0bef 03       		.byte	0x3
 3580 0bf0 00000000 		.4byte	usart1_pckt_ready
 3581 0bf4 23       		.uleb128 0x23
 3582 0bf5 25030000 		.4byte	.LASF182
 3583 0bf9 02       		.byte	0x2
 3584 0bfa 70       		.byte	0x70
 3585 0bfb B90B0000 		.4byte	0xbb9
 3586 0bff 01       		.byte	0x1
 3587 0c00 05       		.byte	0x5
 3588 0c01 03       		.byte	0x3
 3589 0c02 00000000 		.4byte	usart1_have_data
 3590 0c06 23       		.uleb128 0x23
 3591 0c07 18020000 		.4byte	.LASF183
 3592 0c0b 02       		.byte	0x2
 3593 0c0c 71       		.byte	0x71
 3594 0c0d 24010000 		.4byte	0x124
 3595 0c11 01       		.byte	0x1
 3596 0c12 05       		.byte	0x5
 3597 0c13 03       		.byte	0x3
ARM GAS  /tmp/cc7m2O8A.s 			page 107


 3598 0c14 00000000 		.4byte	usart1_pckt_bytes
 3599 0c18 23       		.uleb128 0x23
 3600 0c19 09040000 		.4byte	.LASF184
 3601 0c1d 02       		.byte	0x2
 3602 0c1e 88       		.byte	0x88
 3603 0c1f B90B0000 		.4byte	0xbb9
 3604 0c23 01       		.byte	0x1
 3605 0c24 05       		.byte	0x5
 3606 0c25 03       		.byte	0x3
 3607 0c26 00000000 		.4byte	usart2_mini_timeout
 3608 0c2a 23       		.uleb128 0x23
 3609 0c2b 33010000 		.4byte	.LASF185
 3610 0c2f 02       		.byte	0x2
 3611 0c30 89       		.byte	0x89
 3612 0c31 B90B0000 		.4byte	0xbb9
 3613 0c35 01       		.byte	0x1
 3614 0c36 05       		.byte	0x5
 3615 0c37 03       		.byte	0x3
 3616 0c38 00000000 		.4byte	usart2_pckt_ready
 3617 0c3c 23       		.uleb128 0x23
 3618 0c3d 5A010000 		.4byte	.LASF186
 3619 0c41 02       		.byte	0x2
 3620 0c42 8A       		.byte	0x8a
 3621 0c43 B90B0000 		.4byte	0xbb9
 3622 0c47 01       		.byte	0x1
 3623 0c48 05       		.byte	0x5
 3624 0c49 03       		.byte	0x3
 3625 0c4a 00000000 		.4byte	usart2_have_data
 3626 0c4e 23       		.uleb128 0x23
 3627 0c4f 25040000 		.4byte	.LASF187
 3628 0c53 02       		.byte	0x2
 3629 0c54 8B       		.byte	0x8b
 3630 0c55 24010000 		.4byte	0x124
 3631 0c59 01       		.byte	0x1
 3632 0c5a 05       		.byte	0x5
 3633 0c5b 03       		.byte	0x3
 3634 0c5c 00000000 		.4byte	usart2_pckt_bytes
 3635 0c60 0C       		.uleb128 0xc
 3636 0c61 B3050000 		.4byte	0x5b3
 3637 0c65 6B0C0000 		.4byte	0xc6b
 3638 0c69 25       		.uleb128 0x25
 3639 0c6a 00       		.byte	0
 3640 0c6b 26       		.uleb128 0x26
 3641 0c6c BF050000 		.4byte	.LASF188
 3642 0c70 02       		.byte	0x2
 3643 0c71 8D       		.byte	0x8d
 3644 0c72 780C0000 		.4byte	0xc78
 3645 0c76 01       		.byte	0x1
 3646 0c77 01       		.byte	0x1
 3647 0c78 0E       		.uleb128 0xe
 3648 0c79 600C0000 		.4byte	0xc60
 3649 0c7d 23       		.uleb128 0x23
 3650 0c7e 26000000 		.4byte	.LASF189
 3651 0c82 02       		.byte	0x2
 3652 0c83 90       		.byte	0x90
 3653 0c84 ED060000 		.4byte	0x6ed
 3654 0c88 01       		.byte	0x1
ARM GAS  /tmp/cc7m2O8A.s 			page 108


 3655 0c89 05       		.byte	0x5
 3656 0c8a 03       		.byte	0x3
 3657 0c8b 00000000 		.4byte	param_struct
 3658 0c8f 0C       		.uleb128 0xc
 3659 0c90 B3050000 		.4byte	0x5b3
 3660 0c94 9F0C0000 		.4byte	0xc9f
 3661 0c98 0D       		.uleb128 0xd
 3662 0c99 5D020000 		.4byte	0x25d
 3663 0c9d 13       		.byte	0x13
 3664 0c9e 00       		.byte	0
 3665 0c9f 23       		.uleb128 0x23
 3666 0ca0 D3050000 		.4byte	.LASF190
 3667 0ca4 02       		.byte	0x2
 3668 0ca5 9D       		.byte	0x9d
 3669 0ca6 8F0C0000 		.4byte	0xc8f
 3670 0caa 01       		.byte	0x1
 3671 0cab 05       		.byte	0x5
 3672 0cac 03       		.byte	0x3
 3673 0cad 00000000 		.4byte	gsmNUM
 3674 0cb1 0C       		.uleb128 0xc
 3675 0cb2 B3050000 		.4byte	0x5b3
 3676 0cb6 C10C0000 		.4byte	0xcc1
 3677 0cba 0D       		.uleb128 0xd
 3678 0cbb 5D020000 		.4byte	0x25d
 3679 0cbf B3       		.byte	0xb3
 3680 0cc0 00       		.byte	0
 3681 0cc1 23       		.uleb128 0x23
 3682 0cc2 DE060000 		.4byte	.LASF191
 3683 0cc6 02       		.byte	0x2
 3684 0cc7 9E       		.byte	0x9e
 3685 0cc8 B10C0000 		.4byte	0xcb1
 3686 0ccc 01       		.byte	0x1
 3687 0ccd 05       		.byte	0x5
 3688 0cce 03       		.byte	0x3
 3689 0ccf 00000000 		.4byte	gsmMSG
 3690 0cd3 23       		.uleb128 0x23
 3691 0cd4 96060000 		.4byte	.LASF192
 3692 0cd8 02       		.byte	0x2
 3693 0cd9 A6       		.byte	0xa6
 3694 0cda EB0A0000 		.4byte	0xaeb
 3695 0cde 01       		.byte	0x1
 3696 0cdf 05       		.byte	0x5
 3697 0ce0 03       		.byte	0x3
 3698 0ce1 00000000 		.4byte	wait_ms_var
 3699 0ce5 23       		.uleb128 0x23
 3700 0ce6 7D0A0000 		.4byte	.LASF193
 3701 0cea 02       		.byte	0x2
 3702 0ceb A7       		.byte	0xa7
 3703 0cec EB0A0000 		.4byte	0xaeb
 3704 0cf0 01       		.byte	0x1
 3705 0cf1 05       		.byte	0x5
 3706 0cf2 03       		.byte	0x3
 3707 0cf3 00000000 		.4byte	timer_standby
 3708 0cf7 23       		.uleb128 0x23
 3709 0cf8 E3000000 		.4byte	.LASF194
 3710 0cfc 02       		.byte	0x2
 3711 0cfd A8       		.byte	0xa8
ARM GAS  /tmp/cc7m2O8A.s 			page 109


 3712 0cfe EB0A0000 		.4byte	0xaeb
 3713 0d02 01       		.byte	0x1
 3714 0d03 05       		.byte	0x5
 3715 0d04 03       		.byte	0x3
 3716 0d05 00000000 		.4byte	tcp_kalive_timer
 3717 0d09 23       		.uleb128 0x23
 3718 0d0a BA040000 		.4byte	.LASF195
 3719 0d0e 02       		.byte	0x2
 3720 0d0f AA       		.byte	0xaa
 3721 0d10 B90B0000 		.4byte	0xbb9
 3722 0d14 01       		.byte	0x1
 3723 0d15 05       		.byte	0x5
 3724 0d16 03       		.byte	0x3
 3725 0d17 00000000 		.4byte	filter_timer
 3726 0d1b 23       		.uleb128 0x23
 3727 0d1c 47040000 		.4byte	.LASF196
 3728 0d20 02       		.byte	0x2
 3729 0d21 B0       		.byte	0xb0
 3730 0d22 EB0A0000 		.4byte	0xaeb
 3731 0d26 01       		.byte	0x1
 3732 0d27 05       		.byte	0x5
 3733 0d28 03       		.byte	0x3
 3734 0d29 00000000 		.4byte	secs
 3735 0d2d 23       		.uleb128 0x23
 3736 0d2e E5060000 		.4byte	.LASF197
 3737 0d32 02       		.byte	0x2
 3738 0d33 B1       		.byte	0xb1
 3739 0d34 B90B0000 		.4byte	0xbb9
 3740 0d38 01       		.byte	0x1
 3741 0d39 05       		.byte	0x5
 3742 0d3a 03       		.byte	0x3
 3743 0d3b 00000000 		.4byte	hours
 3744 0d3f 23       		.uleb128 0x23
 3745 0d40 24010000 		.4byte	.LASF198
 3746 0d44 02       		.byte	0x2
 3747 0d45 B2       		.byte	0xb2
 3748 0d46 B90B0000 		.4byte	0xbb9
 3749 0d4a 01       		.byte	0x1
 3750 0d4b 05       		.byte	0x5
 3751 0d4c 03       		.byte	0x3
 3752 0d4d 00000000 		.4byte	minutes
 3753 0d51 0C       		.uleb128 0xc
 3754 0d52 3D010000 		.4byte	0x13d
 3755 0d56 610D0000 		.4byte	0xd61
 3756 0d5a 0D       		.uleb128 0xd
 3757 0d5b 5D020000 		.4byte	0x25d
 3758 0d5f 09       		.byte	0x9
 3759 0d60 00       		.byte	0
 3760 0d61 23       		.uleb128 0x23
 3761 0d62 D8070000 		.4byte	.LASF199
 3762 0d66 02       		.byte	0x2
 3763 0d67 B7       		.byte	0xb7
 3764 0d68 510D0000 		.4byte	0xd51
 3765 0d6c 01       		.byte	0x1
 3766 0d6d 05       		.byte	0x5
 3767 0d6e 03       		.byte	0x3
 3768 0d6f 00000000 		.4byte	power_vect
ARM GAS  /tmp/cc7m2O8A.s 			page 110


 3769 0d73 0C       		.uleb128 0xc
 3770 0d74 3D010000 		.4byte	0x13d
 3771 0d78 830D0000 		.4byte	0xd83
 3772 0d7c 0D       		.uleb128 0xd
 3773 0d7d 5D020000 		.4byte	0x25d
 3774 0d81 10       		.byte	0x10
 3775 0d82 00       		.byte	0
 3776 0d83 23       		.uleb128 0x23
 3777 0d84 5C0A0000 		.4byte	.LASF200
 3778 0d88 02       		.byte	0x2
 3779 0d89 C5       		.byte	0xc5
 3780 0d8a 730D0000 		.4byte	0xd73
 3781 0d8e 01       		.byte	0x1
 3782 0d8f 05       		.byte	0x5
 3783 0d90 03       		.byte	0x3
 3784 0d91 00000000 		.4byte	vtemp
 3785 0d95 23       		.uleb128 0x23
 3786 0d96 AF000000 		.4byte	.LASF201
 3787 0d9a 02       		.byte	0x2
 3788 0d9b C6       		.byte	0xc6
 3789 0d9c 730D0000 		.4byte	0xd73
 3790 0da0 01       		.byte	0x1
 3791 0da1 05       		.byte	0x5
 3792 0da2 03       		.byte	0x3
 3793 0da3 00000000 		.4byte	vpote
 3794 0da7 00       		.byte	0
 3795              		.section	.debug_abbrev,"",%progbits
 3796              	.Ldebug_abbrev0:
 3797 0000 01       		.uleb128 0x1
 3798 0001 11       		.uleb128 0x11
 3799 0002 01       		.byte	0x1
 3800 0003 25       		.uleb128 0x25
 3801 0004 0E       		.uleb128 0xe
 3802 0005 13       		.uleb128 0x13
 3803 0006 0B       		.uleb128 0xb
 3804 0007 03       		.uleb128 0x3
 3805 0008 0E       		.uleb128 0xe
 3806 0009 1B       		.uleb128 0x1b
 3807 000a 0E       		.uleb128 0xe
 3808 000b 55       		.uleb128 0x55
 3809 000c 06       		.uleb128 0x6
 3810 000d 11       		.uleb128 0x11
 3811 000e 01       		.uleb128 0x1
 3812 000f 52       		.uleb128 0x52
 3813 0010 01       		.uleb128 0x1
 3814 0011 10       		.uleb128 0x10
 3815 0012 06       		.uleb128 0x6
 3816 0013 00       		.byte	0
 3817 0014 00       		.byte	0
 3818 0015 02       		.uleb128 0x2
 3819 0016 04       		.uleb128 0x4
 3820 0017 01       		.byte	0x1
 3821 0018 03       		.uleb128 0x3
 3822 0019 0E       		.uleb128 0xe
 3823 001a 0B       		.uleb128 0xb
 3824 001b 0B       		.uleb128 0xb
 3825 001c 49       		.uleb128 0x49
ARM GAS  /tmp/cc7m2O8A.s 			page 111


 3826 001d 13       		.uleb128 0x13
 3827 001e 3A       		.uleb128 0x3a
 3828 001f 0B       		.uleb128 0xb
 3829 0020 3B       		.uleb128 0x3b
 3830 0021 0B       		.uleb128 0xb
 3831 0022 01       		.uleb128 0x1
 3832 0023 13       		.uleb128 0x13
 3833 0024 00       		.byte	0
 3834 0025 00       		.byte	0
 3835 0026 03       		.uleb128 0x3
 3836 0027 28       		.uleb128 0x28
 3837 0028 00       		.byte	0
 3838 0029 03       		.uleb128 0x3
 3839 002a 0E       		.uleb128 0xe
 3840 002b 1C       		.uleb128 0x1c
 3841 002c 0D       		.uleb128 0xd
 3842 002d 00       		.byte	0
 3843 002e 00       		.byte	0
 3844 002f 04       		.uleb128 0x4
 3845 0030 28       		.uleb128 0x28
 3846 0031 00       		.byte	0
 3847 0032 03       		.uleb128 0x3
 3848 0033 0E       		.uleb128 0xe
 3849 0034 1C       		.uleb128 0x1c
 3850 0035 0B       		.uleb128 0xb
 3851 0036 00       		.byte	0
 3852 0037 00       		.byte	0
 3853 0038 05       		.uleb128 0x5
 3854 0039 24       		.uleb128 0x24
 3855 003a 00       		.byte	0
 3856 003b 0B       		.uleb128 0xb
 3857 003c 0B       		.uleb128 0xb
 3858 003d 3E       		.uleb128 0x3e
 3859 003e 0B       		.uleb128 0xb
 3860 003f 03       		.uleb128 0x3
 3861 0040 0E       		.uleb128 0xe
 3862 0041 00       		.byte	0
 3863 0042 00       		.byte	0
 3864 0043 06       		.uleb128 0x6
 3865 0044 16       		.uleb128 0x16
 3866 0045 00       		.byte	0
 3867 0046 03       		.uleb128 0x3
 3868 0047 0E       		.uleb128 0xe
 3869 0048 3A       		.uleb128 0x3a
 3870 0049 0B       		.uleb128 0xb
 3871 004a 3B       		.uleb128 0x3b
 3872 004b 05       		.uleb128 0x5
 3873 004c 49       		.uleb128 0x49
 3874 004d 13       		.uleb128 0x13
 3875 004e 00       		.byte	0
 3876 004f 00       		.byte	0
 3877 0050 07       		.uleb128 0x7
 3878 0051 16       		.uleb128 0x16
 3879 0052 00       		.byte	0
 3880 0053 03       		.uleb128 0x3
 3881 0054 0E       		.uleb128 0xe
 3882 0055 3A       		.uleb128 0x3a
ARM GAS  /tmp/cc7m2O8A.s 			page 112


 3883 0056 0B       		.uleb128 0xb
 3884 0057 3B       		.uleb128 0x3b
 3885 0058 0B       		.uleb128 0xb
 3886 0059 49       		.uleb128 0x49
 3887 005a 13       		.uleb128 0x13
 3888 005b 00       		.byte	0
 3889 005c 00       		.byte	0
 3890 005d 08       		.uleb128 0x8
 3891 005e 24       		.uleb128 0x24
 3892 005f 00       		.byte	0
 3893 0060 0B       		.uleb128 0xb
 3894 0061 0B       		.uleb128 0xb
 3895 0062 3E       		.uleb128 0x3e
 3896 0063 0B       		.uleb128 0xb
 3897 0064 03       		.uleb128 0x3
 3898 0065 08       		.uleb128 0x8
 3899 0066 00       		.byte	0
 3900 0067 00       		.byte	0
 3901 0068 09       		.uleb128 0x9
 3902 0069 13       		.uleb128 0x13
 3903 006a 01       		.byte	0x1
 3904 006b 0B       		.uleb128 0xb
 3905 006c 05       		.uleb128 0x5
 3906 006d 3A       		.uleb128 0x3a
 3907 006e 0B       		.uleb128 0xb
 3908 006f 3B       		.uleb128 0x3b
 3909 0070 0B       		.uleb128 0xb
 3910 0071 01       		.uleb128 0x1
 3911 0072 13       		.uleb128 0x13
 3912 0073 00       		.byte	0
 3913 0074 00       		.byte	0
 3914 0075 0A       		.uleb128 0xa
 3915 0076 0D       		.uleb128 0xd
 3916 0077 00       		.byte	0
 3917 0078 03       		.uleb128 0x3
 3918 0079 0E       		.uleb128 0xe
 3919 007a 3A       		.uleb128 0x3a
 3920 007b 0B       		.uleb128 0xb
 3921 007c 3B       		.uleb128 0x3b
 3922 007d 0B       		.uleb128 0xb
 3923 007e 49       		.uleb128 0x49
 3924 007f 13       		.uleb128 0x13
 3925 0080 38       		.uleb128 0x38
 3926 0081 0A       		.uleb128 0xa
 3927 0082 00       		.byte	0
 3928 0083 00       		.byte	0
 3929 0084 0B       		.uleb128 0xb
 3930 0085 0D       		.uleb128 0xd
 3931 0086 00       		.byte	0
 3932 0087 03       		.uleb128 0x3
 3933 0088 08       		.uleb128 0x8
 3934 0089 3A       		.uleb128 0x3a
 3935 008a 0B       		.uleb128 0xb
 3936 008b 3B       		.uleb128 0x3b
 3937 008c 0B       		.uleb128 0xb
 3938 008d 49       		.uleb128 0x49
 3939 008e 13       		.uleb128 0x13
ARM GAS  /tmp/cc7m2O8A.s 			page 113


 3940 008f 38       		.uleb128 0x38
 3941 0090 0A       		.uleb128 0xa
 3942 0091 00       		.byte	0
 3943 0092 00       		.byte	0
 3944 0093 0C       		.uleb128 0xc
 3945 0094 01       		.uleb128 0x1
 3946 0095 01       		.byte	0x1
 3947 0096 49       		.uleb128 0x49
 3948 0097 13       		.uleb128 0x13
 3949 0098 01       		.uleb128 0x1
 3950 0099 13       		.uleb128 0x13
 3951 009a 00       		.byte	0
 3952 009b 00       		.byte	0
 3953 009c 0D       		.uleb128 0xd
 3954 009d 21       		.uleb128 0x21
 3955 009e 00       		.byte	0
 3956 009f 49       		.uleb128 0x49
 3957 00a0 13       		.uleb128 0x13
 3958 00a1 2F       		.uleb128 0x2f
 3959 00a2 0B       		.uleb128 0xb
 3960 00a3 00       		.byte	0
 3961 00a4 00       		.byte	0
 3962 00a5 0E       		.uleb128 0xe
 3963 00a6 35       		.uleb128 0x35
 3964 00a7 00       		.byte	0
 3965 00a8 49       		.uleb128 0x49
 3966 00a9 13       		.uleb128 0x13
 3967 00aa 00       		.byte	0
 3968 00ab 00       		.byte	0
 3969 00ac 0F       		.uleb128 0xf
 3970 00ad 13       		.uleb128 0x13
 3971 00ae 01       		.byte	0x1
 3972 00af 0B       		.uleb128 0xb
 3973 00b0 0B       		.uleb128 0xb
 3974 00b1 3A       		.uleb128 0x3a
 3975 00b2 0B       		.uleb128 0xb
 3976 00b3 3B       		.uleb128 0x3b
 3977 00b4 0B       		.uleb128 0xb
 3978 00b5 01       		.uleb128 0x1
 3979 00b6 13       		.uleb128 0x13
 3980 00b7 00       		.byte	0
 3981 00b8 00       		.byte	0
 3982 00b9 10       		.uleb128 0x10
 3983 00ba 26       		.uleb128 0x26
 3984 00bb 00       		.byte	0
 3985 00bc 49       		.uleb128 0x49
 3986 00bd 13       		.uleb128 0x13
 3987 00be 00       		.byte	0
 3988 00bf 00       		.byte	0
 3989 00c0 11       		.uleb128 0x11
 3990 00c1 0D       		.uleb128 0xd
 3991 00c2 00       		.byte	0
 3992 00c3 03       		.uleb128 0x3
 3993 00c4 08       		.uleb128 0x8
 3994 00c5 3A       		.uleb128 0x3a
 3995 00c6 0B       		.uleb128 0xb
 3996 00c7 3B       		.uleb128 0x3b
ARM GAS  /tmp/cc7m2O8A.s 			page 114


 3997 00c8 05       		.uleb128 0x5
 3998 00c9 49       		.uleb128 0x49
 3999 00ca 13       		.uleb128 0x13
 4000 00cb 38       		.uleb128 0x38
 4001 00cc 0A       		.uleb128 0xa
 4002 00cd 00       		.byte	0
 4003 00ce 00       		.byte	0
 4004 00cf 12       		.uleb128 0x12
 4005 00d0 0D       		.uleb128 0xd
 4006 00d1 00       		.byte	0
 4007 00d2 03       		.uleb128 0x3
 4008 00d3 0E       		.uleb128 0xe
 4009 00d4 3A       		.uleb128 0x3a
 4010 00d5 0B       		.uleb128 0xb
 4011 00d6 3B       		.uleb128 0x3b
 4012 00d7 05       		.uleb128 0x5
 4013 00d8 49       		.uleb128 0x49
 4014 00d9 13       		.uleb128 0x13
 4015 00da 38       		.uleb128 0x38
 4016 00db 0A       		.uleb128 0xa
 4017 00dc 00       		.byte	0
 4018 00dd 00       		.byte	0
 4019 00de 13       		.uleb128 0x13
 4020 00df 13       		.uleb128 0x13
 4021 00e0 01       		.byte	0x1
 4022 00e1 0B       		.uleb128 0xb
 4023 00e2 0B       		.uleb128 0xb
 4024 00e3 3A       		.uleb128 0x3a
 4025 00e4 0B       		.uleb128 0xb
 4026 00e5 3B       		.uleb128 0x3b
 4027 00e6 05       		.uleb128 0x5
 4028 00e7 01       		.uleb128 0x1
 4029 00e8 13       		.uleb128 0x13
 4030 00e9 00       		.byte	0
 4031 00ea 00       		.byte	0
 4032 00eb 14       		.uleb128 0x14
 4033 00ec 04       		.uleb128 0x4
 4034 00ed 01       		.byte	0x1
 4035 00ee 0B       		.uleb128 0xb
 4036 00ef 0B       		.uleb128 0xb
 4037 00f0 49       		.uleb128 0x49
 4038 00f1 13       		.uleb128 0x13
 4039 00f2 3A       		.uleb128 0x3a
 4040 00f3 0B       		.uleb128 0xb
 4041 00f4 3B       		.uleb128 0x3b
 4042 00f5 0B       		.uleb128 0xb
 4043 00f6 01       		.uleb128 0x1
 4044 00f7 13       		.uleb128 0x13
 4045 00f8 00       		.byte	0
 4046 00f9 00       		.byte	0
 4047 00fa 15       		.uleb128 0x15
 4048 00fb 13       		.uleb128 0x13
 4049 00fc 01       		.byte	0x1
 4050 00fd 03       		.uleb128 0x3
 4051 00fe 0E       		.uleb128 0xe
 4052 00ff 0B       		.uleb128 0xb
 4053 0100 0B       		.uleb128 0xb
ARM GAS  /tmp/cc7m2O8A.s 			page 115


 4054 0101 3A       		.uleb128 0x3a
 4055 0102 0B       		.uleb128 0xb
 4056 0103 3B       		.uleb128 0x3b
 4057 0104 0B       		.uleb128 0xb
 4058 0105 01       		.uleb128 0x1
 4059 0106 13       		.uleb128 0x13
 4060 0107 00       		.byte	0
 4061 0108 00       		.byte	0
 4062 0109 16       		.uleb128 0x16
 4063 010a 2E       		.uleb128 0x2e
 4064 010b 01       		.byte	0x1
 4065 010c 03       		.uleb128 0x3
 4066 010d 0E       		.uleb128 0xe
 4067 010e 3A       		.uleb128 0x3a
 4068 010f 0B       		.uleb128 0xb
 4069 0110 3B       		.uleb128 0x3b
 4070 0111 05       		.uleb128 0x5
 4071 0112 27       		.uleb128 0x27
 4072 0113 0C       		.uleb128 0xc
 4073 0114 11       		.uleb128 0x11
 4074 0115 01       		.uleb128 0x1
 4075 0116 12       		.uleb128 0x12
 4076 0117 01       		.uleb128 0x1
 4077 0118 40       		.uleb128 0x40
 4078 0119 06       		.uleb128 0x6
 4079 011a 9742     		.uleb128 0x2117
 4080 011c 0C       		.uleb128 0xc
 4081 011d 01       		.uleb128 0x1
 4082 011e 13       		.uleb128 0x13
 4083 011f 00       		.byte	0
 4084 0120 00       		.byte	0
 4085 0121 17       		.uleb128 0x17
 4086 0122 05       		.uleb128 0x5
 4087 0123 00       		.byte	0
 4088 0124 03       		.uleb128 0x3
 4089 0125 0E       		.uleb128 0xe
 4090 0126 3A       		.uleb128 0x3a
 4091 0127 0B       		.uleb128 0xb
 4092 0128 3B       		.uleb128 0x3b
 4093 0129 05       		.uleb128 0x5
 4094 012a 49       		.uleb128 0x49
 4095 012b 13       		.uleb128 0x13
 4096 012c 02       		.uleb128 0x2
 4097 012d 0A       		.uleb128 0xa
 4098 012e 00       		.byte	0
 4099 012f 00       		.byte	0
 4100 0130 18       		.uleb128 0x18
 4101 0131 2E       		.uleb128 0x2e
 4102 0132 01       		.byte	0x1
 4103 0133 03       		.uleb128 0x3
 4104 0134 0E       		.uleb128 0xe
 4105 0135 3A       		.uleb128 0x3a
 4106 0136 0B       		.uleb128 0xb
 4107 0137 3B       		.uleb128 0x3b
 4108 0138 05       		.uleb128 0x5
 4109 0139 27       		.uleb128 0x27
 4110 013a 0C       		.uleb128 0xc
ARM GAS  /tmp/cc7m2O8A.s 			page 116


 4111 013b 49       		.uleb128 0x49
 4112 013c 13       		.uleb128 0x13
 4113 013d 11       		.uleb128 0x11
 4114 013e 01       		.uleb128 0x1
 4115 013f 12       		.uleb128 0x12
 4116 0140 01       		.uleb128 0x1
 4117 0141 40       		.uleb128 0x40
 4118 0142 06       		.uleb128 0x6
 4119 0143 9642     		.uleb128 0x2116
 4120 0145 0C       		.uleb128 0xc
 4121 0146 01       		.uleb128 0x1
 4122 0147 13       		.uleb128 0x13
 4123 0148 00       		.byte	0
 4124 0149 00       		.byte	0
 4125 014a 19       		.uleb128 0x19
 4126 014b 2E       		.uleb128 0x2e
 4127 014c 01       		.byte	0x1
 4128 014d 3F       		.uleb128 0x3f
 4129 014e 0C       		.uleb128 0xc
 4130 014f 03       		.uleb128 0x3
 4131 0150 0E       		.uleb128 0xe
 4132 0151 3A       		.uleb128 0x3a
 4133 0152 0B       		.uleb128 0xb
 4134 0153 3B       		.uleb128 0x3b
 4135 0154 0B       		.uleb128 0xb
 4136 0155 27       		.uleb128 0x27
 4137 0156 0C       		.uleb128 0xc
 4138 0157 49       		.uleb128 0x49
 4139 0158 13       		.uleb128 0x13
 4140 0159 11       		.uleb128 0x11
 4141 015a 01       		.uleb128 0x1
 4142 015b 12       		.uleb128 0x12
 4143 015c 01       		.uleb128 0x1
 4144 015d 40       		.uleb128 0x40
 4145 015e 06       		.uleb128 0x6
 4146 015f 9642     		.uleb128 0x2116
 4147 0161 0C       		.uleb128 0xc
 4148 0162 01       		.uleb128 0x1
 4149 0163 13       		.uleb128 0x13
 4150 0164 00       		.byte	0
 4151 0165 00       		.byte	0
 4152 0166 1A       		.uleb128 0x1a
 4153 0167 34       		.uleb128 0x34
 4154 0168 00       		.byte	0
 4155 0169 03       		.uleb128 0x3
 4156 016a 08       		.uleb128 0x8
 4157 016b 3A       		.uleb128 0x3a
 4158 016c 0B       		.uleb128 0xb
 4159 016d 3B       		.uleb128 0x3b
 4160 016e 0B       		.uleb128 0xb
 4161 016f 49       		.uleb128 0x49
 4162 0170 13       		.uleb128 0x13
 4163 0171 02       		.uleb128 0x2
 4164 0172 0A       		.uleb128 0xa
 4165 0173 00       		.byte	0
 4166 0174 00       		.byte	0
 4167 0175 1B       		.uleb128 0x1b
ARM GAS  /tmp/cc7m2O8A.s 			page 117


 4168 0176 34       		.uleb128 0x34
 4169 0177 00       		.byte	0
 4170 0178 03       		.uleb128 0x3
 4171 0179 08       		.uleb128 0x8
 4172 017a 3A       		.uleb128 0x3a
 4173 017b 0B       		.uleb128 0xb
 4174 017c 3B       		.uleb128 0x3b
 4175 017d 0B       		.uleb128 0xb
 4176 017e 49       		.uleb128 0x49
 4177 017f 13       		.uleb128 0x13
 4178 0180 00       		.byte	0
 4179 0181 00       		.byte	0
 4180 0182 1C       		.uleb128 0x1c
 4181 0183 34       		.uleb128 0x34
 4182 0184 00       		.byte	0
 4183 0185 03       		.uleb128 0x3
 4184 0186 0E       		.uleb128 0xe
 4185 0187 3A       		.uleb128 0x3a
 4186 0188 0B       		.uleb128 0xb
 4187 0189 3B       		.uleb128 0x3b
 4188 018a 0B       		.uleb128 0xb
 4189 018b 49       		.uleb128 0x49
 4190 018c 13       		.uleb128 0x13
 4191 018d 00       		.byte	0
 4192 018e 00       		.byte	0
 4193 018f 1D       		.uleb128 0x1d
 4194 0190 34       		.uleb128 0x34
 4195 0191 00       		.byte	0
 4196 0192 03       		.uleb128 0x3
 4197 0193 0E       		.uleb128 0xe
 4198 0194 3A       		.uleb128 0x3a
 4199 0195 0B       		.uleb128 0xb
 4200 0196 3B       		.uleb128 0x3b
 4201 0197 0B       		.uleb128 0xb
 4202 0198 49       		.uleb128 0x49
 4203 0199 13       		.uleb128 0x13
 4204 019a 02       		.uleb128 0x2
 4205 019b 0A       		.uleb128 0xa
 4206 019c 00       		.byte	0
 4207 019d 00       		.byte	0
 4208 019e 1E       		.uleb128 0x1e
 4209 019f 2E       		.uleb128 0x2e
 4210 01a0 01       		.byte	0x1
 4211 01a1 3F       		.uleb128 0x3f
 4212 01a2 0C       		.uleb128 0xc
 4213 01a3 03       		.uleb128 0x3
 4214 01a4 0E       		.uleb128 0xe
 4215 01a5 3A       		.uleb128 0x3a
 4216 01a6 0B       		.uleb128 0xb
 4217 01a7 3B       		.uleb128 0x3b
 4218 01a8 05       		.uleb128 0x5
 4219 01a9 27       		.uleb128 0x27
 4220 01aa 0C       		.uleb128 0xc
 4221 01ab 11       		.uleb128 0x11
 4222 01ac 01       		.uleb128 0x1
 4223 01ad 12       		.uleb128 0x12
 4224 01ae 01       		.uleb128 0x1
ARM GAS  /tmp/cc7m2O8A.s 			page 118


 4225 01af 40       		.uleb128 0x40
 4226 01b0 06       		.uleb128 0x6
 4227 01b1 9642     		.uleb128 0x2116
 4228 01b3 0C       		.uleb128 0xc
 4229 01b4 01       		.uleb128 0x1
 4230 01b5 13       		.uleb128 0x13
 4231 01b6 00       		.byte	0
 4232 01b7 00       		.byte	0
 4233 01b8 1F       		.uleb128 0x1f
 4234 01b9 34       		.uleb128 0x34
 4235 01ba 00       		.byte	0
 4236 01bb 03       		.uleb128 0x3
 4237 01bc 08       		.uleb128 0x8
 4238 01bd 3A       		.uleb128 0x3a
 4239 01be 0B       		.uleb128 0xb
 4240 01bf 3B       		.uleb128 0x3b
 4241 01c0 05       		.uleb128 0x5
 4242 01c1 49       		.uleb128 0x49
 4243 01c2 13       		.uleb128 0x13
 4244 01c3 02       		.uleb128 0x2
 4245 01c4 0A       		.uleb128 0xa
 4246 01c5 00       		.byte	0
 4247 01c6 00       		.byte	0
 4248 01c7 20       		.uleb128 0x20
 4249 01c8 34       		.uleb128 0x34
 4250 01c9 00       		.byte	0
 4251 01ca 03       		.uleb128 0x3
 4252 01cb 0E       		.uleb128 0xe
 4253 01cc 3A       		.uleb128 0x3a
 4254 01cd 0B       		.uleb128 0xb
 4255 01ce 3B       		.uleb128 0x3b
 4256 01cf 05       		.uleb128 0x5
 4257 01d0 49       		.uleb128 0x49
 4258 01d1 13       		.uleb128 0x13
 4259 01d2 02       		.uleb128 0x2
 4260 01d3 0A       		.uleb128 0xa
 4261 01d4 00       		.byte	0
 4262 01d5 00       		.byte	0
 4263 01d6 21       		.uleb128 0x21
 4264 01d7 0F       		.uleb128 0xf
 4265 01d8 00       		.byte	0
 4266 01d9 0B       		.uleb128 0xb
 4267 01da 0B       		.uleb128 0xb
 4268 01db 49       		.uleb128 0x49
 4269 01dc 13       		.uleb128 0x13
 4270 01dd 00       		.byte	0
 4271 01de 00       		.byte	0
 4272 01df 22       		.uleb128 0x22
 4273 01e0 2E       		.uleb128 0x2e
 4274 01e1 00       		.byte	0
 4275 01e2 3F       		.uleb128 0x3f
 4276 01e3 0C       		.uleb128 0xc
 4277 01e4 03       		.uleb128 0x3
 4278 01e5 0E       		.uleb128 0xe
 4279 01e6 3A       		.uleb128 0x3a
 4280 01e7 0B       		.uleb128 0xb
 4281 01e8 3B       		.uleb128 0x3b
ARM GAS  /tmp/cc7m2O8A.s 			page 119


 4282 01e9 05       		.uleb128 0x5
 4283 01ea 27       		.uleb128 0x27
 4284 01eb 0C       		.uleb128 0xc
 4285 01ec 11       		.uleb128 0x11
 4286 01ed 01       		.uleb128 0x1
 4287 01ee 12       		.uleb128 0x12
 4288 01ef 01       		.uleb128 0x1
 4289 01f0 40       		.uleb128 0x40
 4290 01f1 06       		.uleb128 0x6
 4291 01f2 9642     		.uleb128 0x2116
 4292 01f4 0C       		.uleb128 0xc
 4293 01f5 00       		.byte	0
 4294 01f6 00       		.byte	0
 4295 01f7 23       		.uleb128 0x23
 4296 01f8 34       		.uleb128 0x34
 4297 01f9 00       		.byte	0
 4298 01fa 03       		.uleb128 0x3
 4299 01fb 0E       		.uleb128 0xe
 4300 01fc 3A       		.uleb128 0x3a
 4301 01fd 0B       		.uleb128 0xb
 4302 01fe 3B       		.uleb128 0x3b
 4303 01ff 0B       		.uleb128 0xb
 4304 0200 49       		.uleb128 0x49
 4305 0201 13       		.uleb128 0x13
 4306 0202 3F       		.uleb128 0x3f
 4307 0203 0C       		.uleb128 0xc
 4308 0204 02       		.uleb128 0x2
 4309 0205 0A       		.uleb128 0xa
 4310 0206 00       		.byte	0
 4311 0207 00       		.byte	0
 4312 0208 24       		.uleb128 0x24
 4313 0209 34       		.uleb128 0x34
 4314 020a 00       		.byte	0
 4315 020b 03       		.uleb128 0x3
 4316 020c 08       		.uleb128 0x8
 4317 020d 3A       		.uleb128 0x3a
 4318 020e 0B       		.uleb128 0xb
 4319 020f 3B       		.uleb128 0x3b
 4320 0210 0B       		.uleb128 0xb
 4321 0211 49       		.uleb128 0x49
 4322 0212 13       		.uleb128 0x13
 4323 0213 3F       		.uleb128 0x3f
 4324 0214 0C       		.uleb128 0xc
 4325 0215 02       		.uleb128 0x2
 4326 0216 0A       		.uleb128 0xa
 4327 0217 00       		.byte	0
 4328 0218 00       		.byte	0
 4329 0219 25       		.uleb128 0x25
 4330 021a 21       		.uleb128 0x21
 4331 021b 00       		.byte	0
 4332 021c 00       		.byte	0
 4333 021d 00       		.byte	0
 4334 021e 26       		.uleb128 0x26
 4335 021f 34       		.uleb128 0x34
 4336 0220 00       		.byte	0
 4337 0221 03       		.uleb128 0x3
 4338 0222 0E       		.uleb128 0xe
ARM GAS  /tmp/cc7m2O8A.s 			page 120


 4339 0223 3A       		.uleb128 0x3a
 4340 0224 0B       		.uleb128 0xb
 4341 0225 3B       		.uleb128 0x3b
 4342 0226 0B       		.uleb128 0xb
 4343 0227 49       		.uleb128 0x49
 4344 0228 13       		.uleb128 0x13
 4345 0229 3F       		.uleb128 0x3f
 4346 022a 0C       		.uleb128 0xc
 4347 022b 3C       		.uleb128 0x3c
 4348 022c 0C       		.uleb128 0xc
 4349 022d 00       		.byte	0
 4350 022e 00       		.byte	0
 4351 022f 00       		.byte	0
 4352              		.section	.debug_loc,"",%progbits
 4353              	.Ldebug_loc0:
 4354              	.LLST0:
 4355 0000 00000000 		.4byte	.LFB16
 4356 0004 02000000 		.4byte	.LCFI0
 4357 0008 0200     		.2byte	0x2
 4358 000a 7D       		.byte	0x7d
 4359 000b 00       		.sleb128 0
 4360 000c 02000000 		.4byte	.LCFI0
 4361 0010 04000000 		.4byte	.LCFI1
 4362 0014 0200     		.2byte	0x2
 4363 0016 7D       		.byte	0x7d
 4364 0017 0C       		.sleb128 12
 4365 0018 04000000 		.4byte	.LCFI1
 4366 001c EC000000 		.4byte	.LFE16
 4367 0020 0200     		.2byte	0x2
 4368 0022 7D       		.byte	0x7d
 4369 0023 18       		.sleb128 24
 4370 0024 00000000 		.4byte	0
 4371 0028 00000000 		.4byte	0
 4372              	.LLST1:
 4373 002c 00000000 		.4byte	.LFB18
 4374 0030 02000000 		.4byte	.LCFI2
 4375 0034 0200     		.2byte	0x2
 4376 0036 7D       		.byte	0x7d
 4377 0037 00       		.sleb128 0
 4378 0038 02000000 		.4byte	.LCFI2
 4379 003c 04000000 		.4byte	.LCFI3
 4380 0040 0200     		.2byte	0x2
 4381 0042 7D       		.byte	0x7d
 4382 0043 04       		.sleb128 4
 4383 0044 04000000 		.4byte	.LCFI3
 4384 0048 48000000 		.4byte	.LFE18
 4385 004c 0200     		.2byte	0x2
 4386 004e 7D       		.byte	0x7d
 4387 004f 10       		.sleb128 16
 4388 0050 00000000 		.4byte	0
 4389 0054 00000000 		.4byte	0
 4390              	.LLST2:
 4391 0058 00000000 		.4byte	.LFB20
 4392 005c 02000000 		.4byte	.LCFI4
 4393 0060 0200     		.2byte	0x2
 4394 0062 7D       		.byte	0x7d
 4395 0063 00       		.sleb128 0
ARM GAS  /tmp/cc7m2O8A.s 			page 121


 4396 0064 02000000 		.4byte	.LCFI4
 4397 0068 04000000 		.4byte	.LCFI5
 4398 006c 0200     		.2byte	0x2
 4399 006e 7D       		.byte	0x7d
 4400 006f 0C       		.sleb128 12
 4401 0070 04000000 		.4byte	.LCFI5
 4402 0074 28080000 		.4byte	.LFE20
 4403 0078 0300     		.2byte	0x3
 4404 007a 7D       		.byte	0x7d
 4405 007b B001     		.sleb128 176
 4406 007d 00000000 		.4byte	0
 4407 0081 00000000 		.4byte	0
 4408              	.LLST3:
 4409 0085 00000000 		.4byte	.LFB21
 4410 0089 02000000 		.4byte	.LCFI6
 4411 008d 0200     		.2byte	0x2
 4412 008f 7D       		.byte	0x7d
 4413 0090 00       		.sleb128 0
 4414 0091 02000000 		.4byte	.LCFI6
 4415 0095 04000000 		.4byte	.LCFI7
 4416 0099 0200     		.2byte	0x2
 4417 009b 7D       		.byte	0x7d
 4418 009c 04       		.sleb128 4
 4419 009d 04000000 		.4byte	.LCFI7
 4420 00a1 B0000000 		.4byte	.LFE21
 4421 00a5 0300     		.2byte	0x3
 4422 00a7 7D       		.byte	0x7d
 4423 00a8 E000     		.sleb128 96
 4424 00aa 00000000 		.4byte	0
 4425 00ae 00000000 		.4byte	0
 4426              	.LLST4:
 4427 00b2 00000000 		.4byte	.LFB22
 4428 00b6 02000000 		.4byte	.LCFI8
 4429 00ba 0200     		.2byte	0x2
 4430 00bc 7D       		.byte	0x7d
 4431 00bd 00       		.sleb128 0
 4432 00be 02000000 		.4byte	.LCFI8
 4433 00c2 64010000 		.4byte	.LFE22
 4434 00c6 0200     		.2byte	0x2
 4435 00c8 7D       		.byte	0x7d
 4436 00c9 08       		.sleb128 8
 4437 00ca 00000000 		.4byte	0
 4438 00ce 00000000 		.4byte	0
 4439              		.section	.debug_aranges,"",%progbits
 4440 0000 3C000000 		.4byte	0x3c
 4441 0004 0200     		.2byte	0x2
 4442 0006 00000000 		.4byte	.Ldebug_info0
 4443 000a 04       		.byte	0x4
 4444 000b 00       		.byte	0
 4445 000c 0000     		.2byte	0
 4446 000e 0000     		.2byte	0
 4447 0010 00000000 		.4byte	.LFB16
 4448 0014 EC000000 		.4byte	.LFE16-.LFB16
 4449 0018 00000000 		.4byte	.LFB18
 4450 001c 48000000 		.4byte	.LFE18-.LFB18
 4451 0020 00000000 		.4byte	.LFB20
 4452 0024 28080000 		.4byte	.LFE20-.LFB20
ARM GAS  /tmp/cc7m2O8A.s 			page 122


 4453 0028 00000000 		.4byte	.LFB21
 4454 002c B0000000 		.4byte	.LFE21-.LFB21
 4455 0030 00000000 		.4byte	.LFB22
 4456 0034 64010000 		.4byte	.LFE22-.LFB22
 4457 0038 00000000 		.4byte	0
 4458 003c 00000000 		.4byte	0
 4459              		.section	.debug_ranges,"",%progbits
 4460              	.Ldebug_ranges0:
 4461 0000 00000000 		.4byte	.LFB16
 4462 0004 EC000000 		.4byte	.LFE16
 4463 0008 00000000 		.4byte	.LFB18
 4464 000c 48000000 		.4byte	.LFE18
 4465 0010 00000000 		.4byte	.LFB20
 4466 0014 28080000 		.4byte	.LFE20
 4467 0018 00000000 		.4byte	.LFB21
 4468 001c B0000000 		.4byte	.LFE21
 4469 0020 00000000 		.4byte	.LFB22
 4470 0024 64010000 		.4byte	.LFE22
 4471 0028 00000000 		.4byte	0
 4472 002c 00000000 		.4byte	0
 4473              		.section	.debug_line,"",%progbits
 4474              	.Ldebug_line0:
 4475 0000 EC020000 		.section	.debug_str,"MS",%progbits,1
 4475      02003701 
 4475      00000201 
 4475      FB0E0D00 
 4475      01010101 
 4476              	.LASF159:
 4477 0000 735F6C63 		.ascii	"s_lcd\000"
 4477      6400
 4478              	.LASF125:
 4479 0006 67736D5F 		.ascii	"gsm_state_idle\000"
 4479      73746174 
 4479      655F6964 
 4479      6C6500
 4480              	.LASF145:
 4481 0015 7A65726F 		.ascii	"zero_current_loc\000"
 4481      5F637572 
 4481      72656E74 
 4481      5F6C6F63 
 4481      00
 4482              	.LASF189:
 4483 0026 70617261 		.ascii	"param_struct\000"
 4483      6D5F7374 
 4483      72756374 
 4483      00
 4484              	.LASF12:
 4485 0033 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4485      345F3135 
 4485      5F495251 
 4485      6E00
 4486              	.LASF83:
 4487 0041 42535252 		.ascii	"BSRR\000"
 4487      00
 4488              	.LASF11:
 4489 0046 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4489      325F335F 
ARM GAS  /tmp/cc7m2O8A.s 			page 123


 4489      4952516E 
 4489      00
 4490              	.LASF151:
 4491 0053 6D61696E 		.ascii	"main_state\000"
 4491      5F737461 
 4491      746500
 4492              	.LASF99:
 4493 005e 696E6974 		.ascii	"init_airplane0\000"
 4493      5F616972 
 4493      706C616E 
 4493      653000
 4494              	.LASF100:
 4495 006d 696E6974 		.ascii	"init_airplane1\000"
 4495      5F616972 
 4495      706C616E 
 4495      653100
 4496              	.LASF2:
 4497 007c 5356435F 		.ascii	"SVC_IRQn\000"
 4497      4952516E 
 4497      00
 4498              	.LASF161:
 4499 0085 62756666 		.ascii	"buffer\000"
 4499      657200
 4500              	.LASF121:
 4501 008c 67736D5F 		.ascii	"gsm_state_ready\000"
 4501      73746174 
 4501      655F7265 
 4501      61647900 
 4502              	.LASF129:
 4503 009c 67736D5F 		.ascii	"gsm_state_shutdown\000"
 4503      73746174 
 4503      655F7368 
 4503      7574646F 
 4503      776E00
 4504              	.LASF201:
 4505 00af 76706F74 		.ascii	"vpote\000"
 4505      6500
 4506              	.LASF105:
 4507 00b5 6D656173 		.ascii	"meas_go_airplane\000"
 4507      5F676F5F 
 4507      61697270 
 4507      6C616E65 
 4507      00
 4508              	.LASF47:
 4509 00c6 756E7369 		.ascii	"unsigned int\000"
 4509      676E6564 
 4509      20696E74 
 4509      00
 4510              	.LASF71:
 4511 00d3 4C4F4144 		.ascii	"LOAD\000"
 4511      00
 4512              	.LASF25:
 4513 00d8 54494D31 		.ascii	"TIM16_IRQn\000"
 4513      365F4952 
 4513      516E00
 4514              	.LASF194:
 4515 00e3 7463705F 		.ascii	"tcp_kalive_timer\000"
ARM GAS  /tmp/cc7m2O8A.s 			page 124


 4515      6B616C69 
 4515      76655F74 
 4515      696D6572 
 4515      00
 4516              	.LASF41:
 4517 00f4 5F5F696E 		.ascii	"__int32_t\000"
 4517      7433325F 
 4517      7400
 4518              	.LASF167:
 4519 00fe 72783262 		.ascii	"rx2buff\000"
 4519      75666600 
 4520              	.LASF8:
 4521 0106 464C4153 		.ascii	"FLASH_IRQn\000"
 4521      485F4952 
 4521      516E00
 4522              	.LASF169:
 4523 0111 72783162 		.ascii	"rx1buff\000"
 4523      75666600 
 4524              	.LASF72:
 4525 0119 43414C49 		.ascii	"CALIB\000"
 4525      4200
 4526              	.LASF108:
 4527 011f 696D6569 		.ascii	"imei\000"
 4527      00
 4528              	.LASF198:
 4529 0124 6D696E75 		.ascii	"minutes\000"
 4529      74657300 
 4530              	.LASF140:
 4531 012c 77685F69 		.ascii	"wh_int\000"
 4531      6E7400
 4532              	.LASF185:
 4533 0133 75736172 		.ascii	"usart2_pckt_ready\000"
 4533      74325F70 
 4533      636B745F 
 4533      72656164 
 4533      7900
 4534              	.LASF166:
 4535 0145 74783262 		.ascii	"tx2buff\000"
 4535      75666600 
 4536              	.LASF10:
 4537 014d 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4537      305F315F 
 4537      4952516E 
 4537      00
 4538              	.LASF186:
 4539 015a 75736172 		.ascii	"usart2_have_data\000"
 4539      74325F68 
 4539      6176655F 
 4539      64617461 
 4539      00
 4540              	.LASF122:
 4541 016b 67736D5F 		.ascii	"gsm_state_sending_conf\000"
 4541      73746174 
 4541      655F7365 
 4541      6E64696E 
 4541      675F636F 
 4542              	.LASF27:
ARM GAS  /tmp/cc7m2O8A.s 			page 125


 4543 0182 49324331 		.ascii	"I2C1_IRQn\000"
 4543      5F495251 
 4543      6E00
 4544              	.LASF3:
 4545 018c 50656E64 		.ascii	"PendSV_IRQn\000"
 4545      53565F49 
 4545      52516E00 
 4546              	.LASF146:
 4547 0198 6163756D 		.ascii	"acum_secs_index\000"
 4547      5F736563 
 4547      735F696E 
 4547      64657800 
 4548              	.LASF9:
 4549 01a8 5243435F 		.ascii	"RCC_IRQn\000"
 4549      4952516E 
 4549      00
 4550              	.LASF144:
 4551 01b1 6663616C 		.ascii	"fcalc\000"
 4551      6300
 4552              	.LASF104:
 4553 01b7 6D656173 		.ascii	"meas_reporting1\000"
 4553      5F726570 
 4553      6F727469 
 4553      6E673100 
 4554              	.LASF51:
 4555 01c7 75696E74 		.ascii	"uint32_t\000"
 4555      33325F74 
 4555      00
 4556              	.LASF156:
 4557 01d0 6D656173 		.ascii	"meas_end\000"
 4557      5F656E64 
 4557      00
 4558              	.LASF52:
 4559 01d9 49534552 		.ascii	"ISER\000"
 4559      00
 4560              	.LASF160:
 4561 01de 666C6F61 		.ascii	"float\000"
 4561      7400
 4562              	.LASF157:
 4563 01e4 68797374 		.ascii	"hyst\000"
 4563      00
 4564              	.LASF55:
 4565 01e9 52534552 		.ascii	"RSERVED1\000"
 4565      56454431 
 4565      00
 4566              	.LASF29:
 4567 01f2 53504931 		.ascii	"SPI1_IRQn\000"
 4567      5F495251 
 4567      6E00
 4568              	.LASF46:
 4569 01fc 6C6F6E67 		.ascii	"long long unsigned int\000"
 4569      206C6F6E 
 4569      6720756E 
 4569      7369676E 
 4569      65642069 
 4570              	.LASF68:
 4571 0213 44465352 		.ascii	"DFSR\000"
ARM GAS  /tmp/cc7m2O8A.s 			page 126


 4571      00
 4572              	.LASF183:
 4573 0218 75736172 		.ascii	"usart1_pckt_bytes\000"
 4573      74315F70 
 4573      636B745F 
 4573      62797465 
 4573      7300
 4574              	.LASF116:
 4575 022a 67736D5F 		.ascii	"gsm_state_reset\000"
 4575      73746174 
 4575      655F7265 
 4575      73657400 
 4576              	.LASF148:
 4577 023a 6163756D 		.ascii	"acum_hours\000"
 4577      5F686F75 
 4577      727300
 4578              	.LASF39:
 4579 0245 5F5F7569 		.ascii	"__uint16_t\000"
 4579      6E743136 
 4579      5F7400
 4580              	.LASF91:
 4581 0250 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE0\000"
 4581      434F554E 
 4581      54455253 
 4581      5F414E44 
 4581      5F50484F 
 4582              	.LASF92:
 4583 0268 5345545F 		.ascii	"SET_COUNTERS_AND_PHONE1\000"
 4583      434F554E 
 4583      54455253 
 4583      5F414E44 
 4583      5F50484F 
 4584              	.LASF79:
 4585 0280 4D4F4445 		.ascii	"MODER\000"
 4585      5200
 4586              	.LASF77:
 4587 0286 43485345 		.ascii	"CHSELR\000"
 4587      4C5200
 4588              	.LASF181:
 4589 028d 75736172 		.ascii	"usart1_pckt_ready\000"
 4589      74315F70 
 4589      636B745F 
 4589      72656164 
 4589      7900
 4590              	.LASF34:
 4591 029f 4952516E 		.ascii	"IRQn_Type\000"
 4591      5F547970 
 4591      6500
 4592              	.LASF113:
 4593 02a9 74696D65 		.ascii	"timer_reportar\000"
 4593      725F7265 
 4593      706F7274 
 4593      617200
 4594              	.LASF32:
 4595 02b8 55534152 		.ascii	"USART2_IRQn\000"
 4595      54325F49 
 4595      52516E00 
ARM GAS  /tmp/cc7m2O8A.s 			page 127


 4596              	.LASF63:
 4597 02c4 43505549 		.ascii	"CPUID\000"
 4597      4400
 4598              	.LASF173:
 4599 02ca 74745F74 		.ascii	"tt_take_photo_sample\000"
 4599      616B655F 
 4599      70686F74 
 4599      6F5F7361 
 4599      6D706C65 
 4600              	.LASF128:
 4601 02df 67736D5F 		.ascii	"gsm_state_disconnected\000"
 4601      73746174 
 4601      655F6469 
 4601      73636F6E 
 4601      6E656374 
 4602              	.LASF171:
 4603 02f6 74696D65 		.ascii	"timer_rep\000"
 4603      725F7265 
 4603      7000
 4604              	.LASF207:
 4605 0300 53797354 		.ascii	"SysTick_Config\000"
 4605      69636B5F 
 4605      436F6E66 
 4605      696700
 4606              	.LASF76:
 4607 030f 534D5052 		.ascii	"SMPR\000"
 4607      00
 4608              	.LASF90:
 4609 0314 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4609      5A45524F 
 4609      5F435552 
 4609      52454E54 
 4609      00
 4610              	.LASF182:
 4611 0325 75736172 		.ascii	"usart1_have_data\000"
 4611      74315F68 
 4611      6176655F 
 4611      64617461 
 4611      00
 4612              	.LASF82:
 4613 0336 50555044 		.ascii	"PUPDR\000"
 4613      5200
 4614              	.LASF133:
 4615 033c 7469636B 		.ascii	"ticks\000"
 4615      7300
 4616              	.LASF118:
 4617 0342 67736D5F 		.ascii	"gsm_state_verify_fully_func\000"
 4617      73746174 
 4617      655F7665 
 4617      72696679 
 4617      5F66756C 
 4618              	.LASF87:
 4619 035e 63686172 		.ascii	"char\000"
 4619      00
 4620              	.LASF130:
 4621 0363 67736D5F 		.ascii	"gsm_state_stop_wait\000"
 4621      73746174 
ARM GAS  /tmp/cc7m2O8A.s 			page 128


 4621      655F7374 
 4621      6F705F77 
 4621      61697400 
 4622              	.LASF164:
 4623 0377 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4623      45524154 
 4623      5552455F 
 4623      56616C75 
 4623      6500
 4624              	.LASF139:
 4625 0389 706F7765 		.ascii	"power_dec\000"
 4625      725F6465 
 4625      6300
 4626              	.LASF65:
 4627 0393 41495243 		.ascii	"AIRCR\000"
 4627      5200
 4628              	.LASF170:
 4629 0399 74616B65 		.ascii	"take_temp_sample\000"
 4629      5F74656D 
 4629      705F7361 
 4629      6D706C65 
 4629      00
 4630              	.LASF21:
 4631 03aa 54494D33 		.ascii	"TIM3_IRQn\000"
 4631      5F495251 
 4631      6E00
 4632              	.LASF14:
 4633 03b4 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4633      5F436861 
 4633      6E6E656C 
 4633      315F4952 
 4633      516E00
 4634              	.LASF150:
 4635 03c7 73686F77 		.ascii	"show_power\000"
 4635      5F706F77 
 4635      657200
 4636              	.LASF135:
 4637 03d2 62797465 		.ascii	"bytes_read\000"
 4637      735F7265 
 4637      616400
 4638              	.LASF98:
 4639 03dd 6D61696E 		.ascii	"main_state_t\000"
 4639      5F737461 
 4639      74655F74 
 4639      00
 4640              	.LASF24:
 4641 03ea 54494D31 		.ascii	"TIM15_IRQn\000"
 4641      355F4952 
 4641      516E00
 4642              	.LASF48:
 4643 03f5 75696E74 		.ascii	"uint8_t\000"
 4643      385F7400 
 4644              	.LASF96:
 4645 03fd 57454C43 		.ascii	"WELCOME_GSM\000"
 4645      4F4D455F 
 4645      47534D00 
 4646              	.LASF184:
ARM GAS  /tmp/cc7m2O8A.s 			page 129


 4647 0409 75736172 		.ascii	"usart2_mini_timeout\000"
 4647      74325F6D 
 4647      696E695F 
 4647      74696D65 
 4647      6F757400 
 4648              	.LASF168:
 4649 041d 74783162 		.ascii	"tx1buff\000"
 4649      75666600 
 4650              	.LASF187:
 4651 0425 75736172 		.ascii	"usart2_pckt_bytes\000"
 4651      74325F70 
 4651      636B745F 
 4651      62797465 
 4651      7300
 4652              	.LASF174:
 4653 0437 74745F72 		.ascii	"tt_relay_on_off\000"
 4653      656C6179 
 4653      5F6F6E5F 
 4653      6F666600 
 4654              	.LASF196:
 4655 0447 73656373 		.ascii	"secs\000"
 4655      00
 4656              	.LASF97:
 4657 044c 4C414D50 		.ascii	"LAMP_ON\000"
 4657      5F4F4E00 
 4658              	.LASF119:
 4659 0454 67736D5F 		.ascii	"gsm_state_wait_reg\000"
 4659      73746174 
 4659      655F7761 
 4659      69745F72 
 4659      656700
 4660              	.LASF78:
 4661 0467 4144435F 		.ascii	"ADC_TypeDef\000"
 4661      54797065 
 4661      44656600 
 4662              	.LASF45:
 4663 0473 6C6F6E67 		.ascii	"long long int\000"
 4663      206C6F6E 
 4663      6720696E 
 4663      7400
 4664              	.LASF5:
 4665 0481 57574447 		.ascii	"WWDG_IRQn\000"
 4665      5F495251 
 4665      6E00
 4666              	.LASF67:
 4667 048b 53484353 		.ascii	"SHCSR\000"
 4667      5200
 4668              	.LASF180:
 4669 0491 75736172 		.ascii	"usart1_mini_timeout\000"
 4669      74315F6D 
 4669      696E695F 
 4669      74696D65 
 4669      6F757400 
 4670              	.LASF94:
 4671 04a5 53544152 		.ascii	"START_GSM\000"
 4671      545F4753 
 4671      4D00
ARM GAS  /tmp/cc7m2O8A.s 			page 130


 4672              	.LASF175:
 4673 04af 73617665 		.ascii	"saved_mode\000"
 4673      645F6D6F 
 4673      646500
 4674              	.LASF195:
 4675 04ba 66696C74 		.ascii	"filter_timer\000"
 4675      65725F74 
 4675      696D6572 
 4675      00
 4676              	.LASF205:
 4677 04c7 70617261 		.ascii	"parameters\000"
 4677      6D657465 
 4677      727300
 4678              	.LASF172:
 4679 04d2 74696D65 		.ascii	"timer_relay\000"
 4679      725F7265 
 4679      6C617900 
 4680              	.LASF141:
 4681 04de 77685F64 		.ascii	"wh_dec\000"
 4681      656300
 4682              	.LASF88:
 4683 04e5 4D41494E 		.ascii	"MAIN_INIT\000"
 4683      5F494E49 
 4683      5400
 4684              	.LASF95:
 4685 04ef 434F4E46 		.ascii	"CONFIG_GSM\000"
 4685      49475F47 
 4685      534D00
 4686              	.LASF143:
 4687 04fa 6C617374 		.ascii	"last_power\000"
 4687      5F706F77 
 4687      657200
 4688              	.LASF149:
 4689 0505 73686F77 		.ascii	"show_power_index\000"
 4689      5F706F77 
 4689      65725F69 
 4689      6E646578 
 4689      00
 4690              	.LASF179:
 4691 0516 7A65726F 		.ascii	"zero_current\000"
 4691      5F637572 
 4691      72656E74 
 4691      00
 4692              	.LASF13:
 4693 0523 54535F49 		.ascii	"TS_IRQn\000"
 4693      52516E00 
 4694              	.LASF18:
 4695 052b 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4695      5F42524B 
 4695      5F55505F 
 4695      5452475F 
 4695      434F4D5F 
 4696              	.LASF162:
 4697 0544 74656D70 		.ascii	"tempbuff\000"
 4697      62756666 
 4697      00
 4698              	.LASF206:
ARM GAS  /tmp/cc7m2O8A.s 			page 131


 4699 054d 4E564943 		.ascii	"NVIC_SetPriority\000"
 4699      5F536574 
 4699      5072696F 
 4699      72697479 
 4699      00
 4700              	.LASF6:
 4701 055e 5056445F 		.ascii	"PVD_IRQn\000"
 4701      4952516E 
 4701      00
 4702              	.LASF74:
 4703 0567 43464752 		.ascii	"CFGR1\000"
 4703      3100
 4704              	.LASF75:
 4705 056d 43464752 		.ascii	"CFGR2\000"
 4705      3200
 4706              	.LASF58:
 4707 0573 49435052 		.ascii	"ICPR\000"
 4707      00
 4708              	.LASF17:
 4709 0578 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4709      5F434F4D 
 4709      505F4952 
 4709      516E00
 4710              	.LASF155:
 4711 0587 636F756E 		.ascii	"counters_mode\000"
 4711      74657273 
 4711      5F6D6F64 
 4711      6500
 4712              	.LASF81:
 4713 0595 4F535045 		.ascii	"OSPEEDR\000"
 4713      45445200 
 4714              	.LASF73:
 4715 059d 53797354 		.ascii	"SysTick_Type\000"
 4715      69636B5F 
 4715      54797065 
 4715      00
 4716              	.LASF86:
 4717 05aa 6C6F6E67 		.ascii	"long double\000"
 4717      20646F75 
 4717      626C6500 
 4718              	.LASF49:
 4719 05b6 75696E74 		.ascii	"uint16_t\000"
 4719      31365F74 
 4719      00
 4720              	.LASF188:
 4721 05bf 62756666 		.ascii	"buffUARTGSMrx2\000"
 4721      55415254 
 4721      47534D72 
 4721      783200
 4722              	.LASF131:
 4723 05ce 4952516E 		.ascii	"IRQn\000"
 4723      00
 4724              	.LASF190:
 4725 05d3 67736D4E 		.ascii	"gsmNUM\000"
 4725      554D00
 4726              	.LASF107:
 4727 05da 6E756D5F 		.ascii	"num_reportar\000"
ARM GAS  /tmp/cc7m2O8A.s 			page 132


 4727      7265706F 
 4727      72746172 
 4727      00
 4728              	.LASF7:
 4729 05e7 5254435F 		.ascii	"RTC_IRQn\000"
 4729      4952516E 
 4729      00
 4730              	.LASF53:
 4731 05f0 52455345 		.ascii	"RESERVED0\000"
 4731      52564544 
 4731      3000
 4732              	.LASF66:
 4733 05fa 52455345 		.ascii	"RESERVED1\000"
 4733      52564544 
 4733      3100
 4734              	.LASF57:
 4735 0604 52455345 		.ascii	"RESERVED2\000"
 4735      52564544 
 4735      3200
 4736              	.LASF59:
 4737 060e 52455345 		.ascii	"RESERVED3\000"
 4737      52564544 
 4737      3300
 4738              	.LASF60:
 4739 0618 52455345 		.ascii	"RESERVED4\000"
 4739      52564544 
 4739      3400
 4740              	.LASF38:
 4741 0622 73686F72 		.ascii	"short int\000"
 4741      7420696E 
 4741      7400
 4742              	.LASF42:
 4743 062c 6C6F6E67 		.ascii	"long int\000"
 4743      20696E74 
 4743      00
 4744              	.LASF31:
 4745 0635 55534152 		.ascii	"USART1_IRQn\000"
 4745      54315F49 
 4745      52516E00 
 4746              	.LASF112:
 4747 0641 706F745F 		.ascii	"pot_instantanea\000"
 4747      696E7374 
 4747      616E7461 
 4747      6E656100 
 4748              	.LASF117:
 4749 0651 67736D5F 		.ascii	"gsm_state_verify_at\000"
 4749      73746174 
 4749      655F7665 
 4749      72696679 
 4749      5F617400 
 4750              	.LASF0:
 4751 0665 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4751      61736B61 
 4751      626C6549 
 4751      6E745F49 
 4751      52516E00 
 4752              	.LASF132:
ARM GAS  /tmp/cc7m2O8A.s 			page 133


 4753 0679 7072696F 		.ascii	"priority\000"
 4753      72697479 
 4753      00
 4754              	.LASF19:
 4755 0682 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4755      5F43435F 
 4755      4952516E 
 4755      00
 4756              	.LASF80:
 4757 068f 4F545950 		.ascii	"OTYPER\000"
 4757      455200
 4758              	.LASF192:
 4759 0696 77616974 		.ascii	"wait_ms_var\000"
 4759      5F6D735F 
 4759      76617200 
 4760              	.LASF103:
 4761 06a2 6D656173 		.ascii	"meas_reporting0\000"
 4761      5F726570 
 4761      6F727469 
 4761      6E673000 
 4762              	.LASF26:
 4763 06b2 54494D31 		.ascii	"TIM17_IRQn\000"
 4763      375F4952 
 4763      516E00
 4764              	.LASF89:
 4765 06bd 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4765      48524F5F 
 4765      41444300 
 4766              	.LASF16:
 4767 06c9 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4767      5F436861 
 4767      6E6E656C 
 4767      345F355F 
 4767      4952516E 
 4768              	.LASF191:
 4769 06de 67736D4D 		.ascii	"gsmMSG\000"
 4769      534700
 4770              	.LASF197:
 4771 06e5 686F7572 		.ascii	"hours\000"
 4771      7300
 4772              	.LASF35:
 4773 06eb 5F5F7569 		.ascii	"__uint8_t\000"
 4773      6E74385F 
 4773      7400
 4774              	.LASF62:
 4775 06f5 4E564943 		.ascii	"NVIC_Type\000"
 4775      5F547970 
 4775      6500
 4776              	.LASF69:
 4777 06ff 5343425F 		.ascii	"SCB_Type\000"
 4777      54797065 
 4777      00
 4778              	.LASF85:
 4779 0708 4750494F 		.ascii	"GPIO_TypeDef\000"
 4779      5F547970 
 4779      65446566 
 4779      00
ARM GAS  /tmp/cc7m2O8A.s 			page 134


 4780              	.LASF101:
 4781 0715 6D656173 		.ascii	"meas_init\000"
 4781      5F696E69 
 4781      7400
 4782              	.LASF153:
 4783 071f 73656E64 		.ascii	"sended\000"
 4783      656400
 4784              	.LASF4:
 4785 0726 53797354 		.ascii	"SysTick_IRQn\000"
 4785      69636B5F 
 4785      4952516E 
 4785      00
 4786              	.LASF33:
 4787 0733 4345435F 		.ascii	"CEC_IRQn\000"
 4787      4952516E 
 4787      00
 4788              	.LASF61:
 4789 073c 73697A65 		.ascii	"sizetype\000"
 4789      74797065 
 4789      00
 4790              	.LASF64:
 4791 0745 49435352 		.ascii	"ICSR\000"
 4791      00
 4792              	.LASF28:
 4793 074a 49324332 		.ascii	"I2C2_IRQn\000"
 4793      5F495251 
 4793      6E00
 4794              	.LASF44:
 4795 0754 6C6F6E67 		.ascii	"long unsigned int\000"
 4795      20756E73 
 4795      69676E65 
 4795      6420696E 
 4795      7400
 4796              	.LASF111:
 4797 0766 6163756D 		.ascii	"acumm_diario\000"
 4797      6D5F6469 
 4797      6172696F 
 4797      00
 4798              	.LASF20:
 4799 0773 54494D32 		.ascii	"TIM2_IRQn\000"
 4799      5F495251 
 4799      6E00
 4800              	.LASF165:
 4801 077d 50524553 		.ascii	"PRESSURE_Value\000"
 4801      53555245 
 4801      5F56616C 
 4801      756500
 4802              	.LASF204:
 4803 078c 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4803      652F6D65 
 4803      642F446F 
 4803      63756D65 
 4803      6E74732F 
 4804 07bf 6100     		.ascii	"a\000"
 4805              	.LASF163:
 4806 07c1 48554D49 		.ascii	"HUMIDITY_Value\000"
 4806      44495459 
ARM GAS  /tmp/cc7m2O8A.s 			page 135


 4806      5F56616C 
 4806      756500
 4807              	.LASF50:
 4808 07d0 696E7433 		.ascii	"int32_t\000"
 4808      325F7400 
 4809              	.LASF199:
 4810 07d8 706F7765 		.ascii	"power_vect\000"
 4810      725F7665 
 4810      637400
 4811              	.LASF177:
 4812 07e3 6164635F 		.ascii	"adc_ch\000"
 4812      636800
 4813              	.LASF23:
 4814 07ea 54494D31 		.ascii	"TIM14_IRQn\000"
 4814      345F4952 
 4814      516E00
 4815              	.LASF15:
 4816 07f5 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4816      5F436861 
 4816      6E6E656C 
 4816      325F335F 
 4816      4952516E 
 4817              	.LASF154:
 4818 080a 6C616D70 		.ascii	"lamp_on_state\000"
 4818      5F6F6E5F 
 4818      73746174 
 4818      6500
 4819              	.LASF22:
 4820 0818 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4820      5F444143 
 4820      5F495251 
 4820      6E00
 4821              	.LASF37:
 4822 0826 756E7369 		.ascii	"unsigned char\000"
 4822      676E6564 
 4822      20636861 
 4822      7200
 4823              	.LASF93:
 4824 0834 4C414D50 		.ascii	"LAMP_OFF\000"
 4824      5F4F4646 
 4824      00
 4825              	.LASF43:
 4826 083d 5F5F7569 		.ascii	"__uint32_t\000"
 4826      6E743332 
 4826      5F7400
 4827              	.LASF106:
 4828 0848 6C616D70 		.ascii	"lamp_on_state_t\000"
 4828      5F6F6E5F 
 4828      73746174 
 4828      655F7400 
 4829              	.LASF127:
 4830 0858 67736D5F 		.ascii	"gsm_state_connected\000"
 4830      73746174 
 4830      655F636F 
 4830      6E6E6563 
 4830      74656400 
 4831              	.LASF136:
ARM GAS  /tmp/cc7m2O8A.s 			page 136


 4832 086c 6E656564 		.ascii	"need_ack\000"
 4832      5F61636B 
 4832      00
 4833              	.LASF120:
 4834 0875 67736D5F 		.ascii	"gsm_state_verify_reg\000"
 4834      73746174 
 4834      655F7665 
 4834      72696679 
 4834      5F726567 
 4835              	.LASF126:
 4836 088a 67736D5F 		.ascii	"gsm_state_connecting\000"
 4836      73746174 
 4836      655F636F 
 4836      6E6E6563 
 4836      74696E67 
 4837              	.LASF110:
 4838 089f 6163756D 		.ascii	"acumm_historico\000"
 4838      6D5F6869 
 4838      73746F72 
 4838      69636F00 
 4839              	.LASF176:
 4840 08af 7361635F 		.ascii	"sac_aux\000"
 4840      61757800 
 4841              	.LASF210:
 4842 08b7 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4842      6E674465 
 4842      6C61795F 
 4842      44656372 
 4842      656D656E 
 4843              	.LASF54:
 4844 08cd 49434552 		.ascii	"ICER\000"
 4844      00
 4845              	.LASF158:
 4846 08d2 6F6E655F 		.ascii	"one_to_ten\000"
 4846      746F5F74 
 4846      656E00
 4847              	.LASF30:
 4848 08dd 53504932 		.ascii	"SPI2_IRQn\000"
 4848      5F495251 
 4848      6E00
 4849              	.LASF123:
 4850 08e7 67736D5F 		.ascii	"gsm_state_sending_sms\000"
 4850      73746174 
 4850      655F7365 
 4850      6E64696E 
 4850      675F736D 
 4851              	.LASF209:
 4852 08fd 70726570 		.ascii	"prepare_json_pkt\000"
 4852      6172655F 
 4852      6A736F6E 
 4852      5F706B74 
 4852      00
 4853              	.LASF142:
 4854 090e 706F7765 		.ascii	"power\000"
 4854      7200
 4855              	.LASF124:
 4856 0914 67736D5F 		.ascii	"gsm_state_command_answer\000"
ARM GAS  /tmp/cc7m2O8A.s 			page 137


 4856      73746174 
 4856      655F636F 
 4856      6D6D616E 
 4856      645F616E 
 4857              	.LASF115:
 4858 092d 70617261 		.ascii	"parameters_typedef\000"
 4858      6D657465 
 4858      72735F74 
 4858      79706564 
 4858      656600
 4859              	.LASF36:
 4860 0940 7369676E 		.ascii	"signed char\000"
 4860      65642063 
 4860      68617200 
 4861              	.LASF203:
 4862 094c 7372632F 		.ascii	"src/main.c\000"
 4862      6D61696E 
 4862      2E6300
 4863              	.LASF138:
 4864 0957 706F7765 		.ascii	"power_int\000"
 4864      725F696E 
 4864      7400
 4865              	.LASF40:
 4866 0961 73686F72 		.ascii	"short unsigned int\000"
 4866      7420756E 
 4866      7369676E 
 4866      65642069 
 4866      6E7400
 4867              	.LASF202:
 4868 0974 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4868      43313120 
 4868      352E322E 
 4868      31203230 
 4868      31353132 
 4869 09a7 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4869      20726576 
 4869      6973696F 
 4869      6E203233 
 4869      31383438 
 4870 09da 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4870      662D3220 
 4870      2D4F3020 
 4870      2D666F6D 
 4870      69742D66 
 4871 0a0d 66756E63 		.ascii	"function-sections\000"
 4871      74696F6E 
 4871      2D736563 
 4871      74696F6E 
 4871      7300
 4872              	.LASF208:
 4873 0a1f 6D61696E 		.ascii	"main\000"
 4873      00
 4874              	.LASF1:
 4875 0a24 48617264 		.ascii	"HardFault_IRQn\000"
 4875      4661756C 
 4875      745F4952 
 4875      516E00
ARM GAS  /tmp/cc7m2O8A.s 			page 138


 4876              	.LASF147:
 4877 0a33 6163756D 		.ascii	"acum_secs\000"
 4877      5F736563 
 4877      7300
 4878              	.LASF56:
 4879 0a3d 49535052 		.ascii	"ISPR\000"
 4879      00
 4880              	.LASF137:
 4881 0a42 72657370 		.ascii	"resp\000"
 4881      00
 4882              	.LASF109:
 4883 0a47 6E756D5F 		.ascii	"num_propio\000"
 4883      70726F70 
 4883      696F00
 4884              	.LASF178:
 4885 0a52 7365715F 		.ascii	"seq_ready\000"
 4885      72656164 
 4885      7900
 4886              	.LASF200:
 4887 0a5c 7674656D 		.ascii	"vtemp\000"
 4887      7000
 4888              	.LASF114:
 4889 0a62 73656E64 		.ascii	"send_energy_flag\000"
 4889      5F656E65 
 4889      7267795F 
 4889      666C6167 
 4889      00
 4890              	.LASF102:
 4891 0a73 6D656173 		.ascii	"meas_meas\000"
 4891      5F6D6561 
 4891      7300
 4892              	.LASF193:
 4893 0a7d 74696D65 		.ascii	"timer_standby\000"
 4893      725F7374 
 4893      616E6462 
 4893      7900
 4894              	.LASF134:
 4895 0a8b 62797465 		.ascii	"bytes_remain\000"
 4895      735F7265 
 4895      6D61696E 
 4895      00
 4896              	.LASF84:
 4897 0a98 4C434B52 		.ascii	"LCKR\000"
 4897      00
 4898              	.LASF70:
 4899 0a9d 4354524C 		.ascii	"CTRL\000"
 4899      00
 4900              	.LASF152:
 4901 0aa2 7265706F 		.ascii	"reportar_SMS\000"
 4901      72746172 
 4901      5F534D53 
 4901      00
 4902              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/cc7m2O8A.s 			page 139


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc7m2O8A.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/cc7m2O8A.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/cc7m2O8A.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/cc7m2O8A.s:206    .text.SysTick_Config:00000000 $t
     /tmp/cc7m2O8A.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/cc7m2O8A.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/cc7m2O8A.s:277    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/cc7m2O8A.s:274    .bss.take_temp_sample:00000000 $d
     /tmp/cc7m2O8A.s:284    .bss.timer_rep:00000000 timer_rep
     /tmp/cc7m2O8A.s:281    .bss.timer_rep:00000000 $d
     /tmp/cc7m2O8A.s:291    .bss.timer_relay:00000000 timer_relay
     /tmp/cc7m2O8A.s:288    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000006 adc_ch
     /tmp/cc7m2O8A.s:305    .bss.seq_ready:00000000 seq_ready
     /tmp/cc7m2O8A.s:306    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:00000054 param_struct
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/cc7m2O8A.s:324    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/cc7m2O8A.s:321    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/cc7m2O8A.s:334    .bss.secs:00000000 secs
     /tmp/cc7m2O8A.s:331    .bss.secs:00000000 $d
     /tmp/cc7m2O8A.s:340    .bss.hours:00000000 hours
     /tmp/cc7m2O8A.s:341    .bss.hours:00000000 $d
     /tmp/cc7m2O8A.s:346    .bss.minutes:00000000 minutes
     /tmp/cc7m2O8A.s:347    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/cc7m2O8A.s:352    .rodata:00000000 $d
     /tmp/cc7m2O8A.s:416    .text.main:00000000 $t
     /tmp/cc7m2O8A.s:421    .text.main:00000000 main
ARM GAS  /tmp/cc7m2O8A.s 			page 140


     /tmp/cc7m2O8A.s:745    .rodata.main:00000000 $d
     /tmp/cc7m2O8A.s:1020   .text.main:000003a8 $d
     /tmp/cc7m2O8A.s:1046   .text.main:00000408 $t
     /tmp/cc7m2O8A.s:1584   .text.main:000007a0 $d
     /tmp/cc7m2O8A.s:1604   .text.main:000007e8 $t
     /tmp/cc7m2O8A.s:1652   .text.main:00000824 $d
     /tmp/cc7m2O8A.s:1673   .text.prepare_json_pkt:00000000 $t
     /tmp/cc7m2O8A.s:1678   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/cc7m2O8A.s:1770   .text.prepare_json_pkt:0000009c $d
     /tmp/cc7m2O8A.s:1779   .text.TimingDelay_Decrement:00000000 $t
     /tmp/cc7m2O8A.s:1784   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/cc7m2O8A.s:1985   .text.TimingDelay_Decrement:00000130 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2uiz
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_uidiv
__aeabi_ui2d
GPIO_Config
strncpy
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
FuncsGSMStateAsk
FuncsGSMCommandAnswer
strlen
strcat
memcpy
FuncsGSMSendSMS
GetPhoto
RelayOn
GetHysteresis
RelayOff
GetNew1to10
sprintf
GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
UpdateVGrid
UpdateIGrid
UpdateRelay
ARM GAS  /tmp/cc7m2O8A.s 			page 141


UpdatePhotoTransistor
FuncsGSM
GSMTimeoutCounters
