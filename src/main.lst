ARM GAS  /tmp/ccnmAMP4.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/main.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_SetPriority,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccnmAMP4.s 			page 2


  58              		.type	NVIC_SetPriority, %function
  59              	NVIC_SetPriority:
  60              	.LFB16:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccnmAMP4.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccnmAMP4.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccnmAMP4.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccnmAMP4.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccnmAMP4.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccnmAMP4.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccnmAMP4.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccnmAMP4.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccnmAMP4.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccnmAMP4.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccnmAMP4.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccnmAMP4.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccnmAMP4.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccnmAMP4.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccnmAMP4.s 			page 17


 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 893 0
  63              		.cfi_startproc
  64 0000 30B5     		push	{r4, r5, lr}	@
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 83B0     		sub	sp, sp, #12	@,,
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 24
  73 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  74 0006 0091     		str	r1, [sp]	@ priority, priority
  75 0008 6B46     		mov	r3, sp	@ tmp199,
  76 000a 0733     		adds	r3, r3, #7	@ tmp163,
ARM GAS  /tmp/ccnmAMP4.s 			page 18


  77 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  78              		.loc 1 894 0
  79 000e 6B46     		mov	r3, sp	@ tmp200,
  80 0010 0733     		adds	r3, r3, #7	@ tmp165,
  81 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  82 0014 7F2B     		cmp	r3, #127	@ tmp166,
  83 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  84              		.loc 1 895 0
  85 0018 324C     		ldr	r4, .L5	@ D.7138,
  86 001a 6B46     		mov	r3, sp	@ tmp201,
  87 001c 0733     		adds	r3, r3, #7	@ tmp167,
  88 001e 1B78     		ldrb	r3, [r3]	@ D.7139, IRQn
  89 0020 1A00     		movs	r2, r3	@ D.7140, D.7139
  90 0022 0F23     		movs	r3, #15	@ tmp168,
  91 0024 1340     		ands	r3, r2	@ D.7140, D.7140
  92 0026 083B     		subs	r3, r3, #8	@ D.7140,
  93 0028 9908     		lsrs	r1, r3, #2	@ D.7140, D.7140,
  94 002a 2E4A     		ldr	r2, .L5	@ D.7138,
  95 002c 6B46     		mov	r3, sp	@ tmp202,
  96 002e 0733     		adds	r3, r3, #7	@ tmp169,
  97 0030 1B78     		ldrb	r3, [r3]	@ D.7139, IRQn
  98 0032 1800     		movs	r0, r3	@ D.7140, D.7139
  99 0034 0F23     		movs	r3, #15	@ tmp170,
 100 0036 0340     		ands	r3, r0	@ D.7140, D.7140
 101 0038 083B     		subs	r3, r3, #8	@ D.7140,
 102 003a 9B08     		lsrs	r3, r3, #2	@ D.7140, D.7140,
 103 003c 0633     		adds	r3, r3, #6	@ tmp171,
 104 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 105 0040 D318     		adds	r3, r2, r3	@ tmp173, D.7138, tmp172
 106 0042 0433     		adds	r3, r3, #4	@ tmp174,
 107 0044 1B68     		ldr	r3, [r3]	@ D.7140, _9->SHP
 108 0046 6A46     		mov	r2, sp	@ tmp203,
 109 0048 0732     		adds	r2, r2, #7	@ tmp175,
 110 004a 1278     		ldrb	r2, [r2]	@ D.7139, IRQn
 111 004c 1000     		movs	r0, r2	@ D.7140, D.7139
 112 004e 0322     		movs	r2, #3	@ tmp176,
 113 0050 0240     		ands	r2, r0	@ D.7140, D.7140
 114 0052 D200     		lsls	r2, r2, #3	@ D.7140, D.7140,
 115 0054 FF20     		movs	r0, #255	@ tmp177,
 116 0056 9040     		lsls	r0, r0, r2	@ D.7141, D.7141, D.7140
 117 0058 0200     		movs	r2, r0	@ D.7141, D.7141
 118 005a D243     		mvns	r2, r2	@ D.7141, D.7141
 119 005c 1A40     		ands	r2, r3	@ D.7140, D.7140
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 120              		.loc 1 896 0
 121 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 122 0060 9B01     		lsls	r3, r3, #6	@ D.7140, tmp178,
 123 0062 FF20     		movs	r0, #255	@ tmp179,
 124 0064 1840     		ands	r0, r3	@ D.7140, D.7140
 125 0066 6B46     		mov	r3, sp	@ tmp205,
 126 0068 0733     		adds	r3, r3, #7	@ tmp180,
 127 006a 1B78     		ldrb	r3, [r3]	@ D.7139, IRQn
 128 006c 1D00     		movs	r5, r3	@ D.7140, D.7139
 129 006e 0323     		movs	r3, #3	@ tmp181,
 130 0070 2B40     		ands	r3, r5	@ D.7140, D.7140
ARM GAS  /tmp/ccnmAMP4.s 			page 19


 131 0072 DB00     		lsls	r3, r3, #3	@ D.7140, D.7140,
 132 0074 9840     		lsls	r0, r0, r3	@ D.7140, D.7140, D.7140
 133 0076 0300     		movs	r3, r0	@ D.7140, D.7140
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 134              		.loc 1 895 0
 135 0078 1A43     		orrs	r2, r3	@ D.7140, D.7140
 136 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.7140,
 137 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 138 007e E318     		adds	r3, r4, r3	@ tmp184, D.7138, tmp183
 139 0080 0433     		adds	r3, r3, #4	@ tmp185,
 140 0082 1A60     		str	r2, [r3]	@ D.7140, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 141              		.loc 1 900 0
 142 0084 2BE0     		b	.L4	@
 143              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 144              		.loc 1 898 0
 145 0086 184C     		ldr	r4, .L5+4	@ D.7142,
 146 0088 6B46     		mov	r3, sp	@ tmp207,
 147 008a 0733     		adds	r3, r3, #7	@ tmp186,
 148 008c 1B78     		ldrb	r3, [r3]	@ D.7140, IRQn
 149 008e 5BB2     		sxtb	r3, r3	@ D.7140, D.7140
 150 0090 9B08     		lsrs	r3, r3, #2	@ D.7140, D.7140,
 151 0092 1549     		ldr	r1, .L5+4	@ D.7142,
 152 0094 6A46     		mov	r2, sp	@ tmp208,
 153 0096 0732     		adds	r2, r2, #7	@ tmp187,
 154 0098 1278     		ldrb	r2, [r2]	@ D.7140, IRQn
 155 009a 52B2     		sxtb	r2, r2	@ D.7140, D.7140
 156 009c 9208     		lsrs	r2, r2, #2	@ D.7140, D.7140,
 157 009e C032     		adds	r2, r2, #192	@ tmp188,
 158 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 159 00a2 5258     		ldr	r2, [r2, r1]	@ D.7140, _38->IP
 160 00a4 6946     		mov	r1, sp	@ tmp209,
 161 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 162 00a8 0978     		ldrb	r1, [r1]	@ D.7139, IRQn
 163 00aa 0800     		movs	r0, r1	@ D.7140, D.7139
 164 00ac 0321     		movs	r1, #3	@ tmp191,
 165 00ae 0140     		ands	r1, r0	@ D.7140, D.7140
 166 00b0 C900     		lsls	r1, r1, #3	@ D.7140, D.7140,
 167 00b2 FF20     		movs	r0, #255	@ tmp192,
 168 00b4 8840     		lsls	r0, r0, r1	@ D.7141, D.7141, D.7140
 169 00b6 0100     		movs	r1, r0	@ D.7141, D.7141
 170 00b8 C943     		mvns	r1, r1	@ D.7141, D.7141
 171 00ba 1140     		ands	r1, r2	@ D.7140, D.7140
 899:./cmsis_core/core_cm0.h **** }
 172              		.loc 1 899 0
 173 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 174 00be 9201     		lsls	r2, r2, #6	@ D.7140, tmp193,
 175 00c0 FF20     		movs	r0, #255	@ tmp194,
 176 00c2 1040     		ands	r0, r2	@ D.7140, D.7140
 177 00c4 6A46     		mov	r2, sp	@ tmp211,
 178 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 179 00c8 1278     		ldrb	r2, [r2]	@ D.7139, IRQn
 180 00ca 1500     		movs	r5, r2	@ D.7140, D.7139
ARM GAS  /tmp/ccnmAMP4.s 			page 20


 181 00cc 0322     		movs	r2, #3	@ tmp196,
 182 00ce 2A40     		ands	r2, r5	@ D.7140, D.7140
 183 00d0 D200     		lsls	r2, r2, #3	@ D.7140, D.7140,
 184 00d2 9040     		lsls	r0, r0, r2	@ D.7140, D.7140, D.7140
 185 00d4 0200     		movs	r2, r0	@ D.7140, D.7140
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 186              		.loc 1 898 0
 187 00d6 0A43     		orrs	r2, r1	@ D.7140, D.7140
 188 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 189 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 190 00dc 1A51     		str	r2, [r3, r4]	@ D.7140, _35->IP
 191              	.L4:
 192              		.loc 1 900 0
 193 00de C046     		nop
 194 00e0 03B0     		add	sp, sp, #12	@,,
 195              		@ sp needed	@
 196 00e2 30BD     		pop	{r4, r5, pc}
 197              	.L6:
 198              		.align	2
 199              	.L5:
 200 00e4 00ED00E0 		.word	-536810240
 201 00e8 00E100E0 		.word	-536813312
 202              		.cfi_endproc
 203              	.LFE16:
 204              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 205              		.section	.text.SysTick_Config,"ax",%progbits
 206              		.align	2
 207              		.code	16
 208              		.thumb_func
 209              		.type	SysTick_Config, %function
 210              	SysTick_Config:
 211              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccnmAMP4.s 			page 21


 926:./cmsis_core/core_cm0.h **** 
 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 212              		.loc 1 953 0
 213              		.cfi_startproc
 214 0000 00B5     		push	{lr}	@
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 14, -4
 218 0002 83B0     		sub	sp, sp, #12	@,,
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 222              		.loc 1 954 0
 223 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 224 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 225 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 226 000c 01D9     		bls	.L8	@,
 227              		.loc 1 954 0 is_stmt 0 discriminator 1
 228 000e 0123     		movs	r3, #1	@ D.7143,
 229 0010 12E0     		b	.L9	@
 230              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 231              		.loc 1 956 0 is_stmt 1
 232 0012 0C4B     		ldr	r3, .L10+4	@ D.7144,
 233 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 234 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 235 0018 120A     		lsrs	r2, r2, #8	@ D.7145, tmp120,
 236 001a 013A     		subs	r2, r2, #1	@ D.7145,
 237 001c 5A60     		str	r2, [r3, #4]	@ D.7145, _6->LOAD
ARM GAS  /tmp/ccnmAMP4.s 			page 22


 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 238              		.loc 1 957 0
 239 001e 0123     		movs	r3, #1	@ tmp125,
 240 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 241 0022 0321     		movs	r1, #3	@,
 242 0024 1800     		movs	r0, r3	@, tmp121
 243 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 244              		.loc 1 958 0
 245 002a 064B     		ldr	r3, .L10+4	@ D.7144,
 246 002c 0022     		movs	r2, #0	@ tmp122,
 247 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 248              		.loc 1 959 0
 249 0030 044B     		ldr	r3, .L10+4	@ D.7144,
 250 0032 0722     		movs	r2, #7	@ tmp123,
 251 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 252              		.loc 1 962 0
 253 0036 0023     		movs	r3, #0	@ D.7143,
 254              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 255              		.loc 1 963 0
 256 0038 1800     		movs	r0, r3	@, <retval>
 257 003a 03B0     		add	sp, sp, #12	@,,
 258              		@ sp needed	@
 259 003c 00BD     		pop	{pc}
 260              	.L11:
 261 003e C046     		.align	2
 262              	.L10:
 263 0040 FFFFFF00 		.word	16777215
 264 0044 10E000E0 		.word	-536813552
 265              		.cfi_endproc
 266              	.LFE18:
 267              		.size	SysTick_Config, .-SysTick_Config
 268              		.comm	tx2buff,256,4
 269              		.comm	rx2buff,256,4
 270              		.comm	tx1buff,256,4
 271              		.comm	rx1buff,256,4
 272              		.global	show_select_timer
 273              		.section	.bss.show_select_timer,"aw",%nobits
 274              		.align	1
 275              		.type	show_select_timer, %object
 276              		.size	show_select_timer, 2
 277              	show_select_timer:
 278 0000 0000     		.space	2
 279              		.global	switches_timer
 280              		.section	.bss.switches_timer,"aw",%nobits
 281              		.type	switches_timer, %object
 282              		.size	switches_timer, 1
 283              	switches_timer:
 284 0000 00       		.space	1
 285              		.global	acswitch_timer
 286              		.section	.bss.acswitch_timer,"aw",%nobits
 287              		.type	acswitch_timer, %object
ARM GAS  /tmp/ccnmAMP4.s 			page 23


 288              		.size	acswitch_timer, 1
 289              	acswitch_timer:
 290 0000 00       		.space	1
 291              		.global	scroll1_timer
 292              		.section	.bss.scroll1_timer,"aw",%nobits
 293              		.align	1
 294              		.type	scroll1_timer, %object
 295              		.size	scroll1_timer, 2
 296              	scroll1_timer:
 297 0000 0000     		.space	2
 298              		.global	scroll2_timer
 299              		.section	.bss.scroll2_timer,"aw",%nobits
 300              		.align	1
 301              		.type	scroll2_timer, %object
 302              		.size	scroll2_timer, 2
 303              	scroll2_timer:
 304 0000 0000     		.space	2
 305              		.comm	standalone_timer,2,2
 306              		.comm	standalone_enable_menu_timer,2,2
 307              		.comm	grouped_master_timeout_timer,1,1
 308              		.global	take_temp_sample
 309              		.section	.bss.take_temp_sample,"aw",%nobits
 310              		.align	1
 311              		.type	take_temp_sample, %object
 312              		.size	take_temp_sample, 2
 313              	take_temp_sample:
 314 0000 0000     		.space	2
 315              		.global	timer_wifi_bright
 316              		.section	.bss.timer_wifi_bright,"aw",%nobits
 317              		.type	timer_wifi_bright, %object
 318              		.size	timer_wifi_bright, 1
 319              	timer_wifi_bright:
 320 0000 00       		.space	1
 321              		.global	timer_relay
 322              		.section	.bss.timer_relay,"aw",%nobits
 323              		.align	1
 324              		.type	timer_relay, %object
 325              		.size	timer_relay, 2
 326              	timer_relay:
 327 0000 0000     		.space	2
 328              		.comm	tt_take_photo_sample,2,2
 329              		.comm	tt_relay_on_off,2,2
 330              		.comm	saved_mode,1,1
 331              		.comm	s1,2,2
 332              		.comm	s2,2,2
 333              		.comm	sac,2,2
 334              		.comm	sac_aux,1,1
 335              		.comm	adc_ch,6,4
 336              		.global	seq_ready
 337              		.section	.bss.seq_ready,"aw",%nobits
 338              		.type	seq_ready, %object
 339              		.size	seq_ready, 1
 340              	seq_ready:
 341 0000 00       		.space	1
 342              		.comm	zero_current,2,2
 343              		.comm	usart1_mini_timeout,1,1
 344              		.comm	usart1_pckt_ready,1,1
ARM GAS  /tmp/ccnmAMP4.s 			page 24


 345              		.comm	usart1_have_data,1,1
 346              		.comm	usart1_pckt_bytes,1,1
 347              		.comm	usart2_mini_timeout,1,1
 348              		.comm	usart2_pckt_ready,1,1
 349              		.comm	usart2_have_data,1,1
 350              		.comm	usart2_pckt_bytes,1,1
 351              		.comm	param_struct,12,4
 352              		.global	power_2secs_acum
 353              		.section	.bss.power_2secs_acum,"aw",%nobits
 354              		.align	2
 355              		.type	power_2secs_acum, %object
 356              		.size	power_2secs_acum, 4
 357              	power_2secs_acum:
 358 0000 00000000 		.space	4
 359              		.global	power_2secs_index
 360              		.section	.bss.power_2secs_index,"aw",%nobits
 361              		.type	power_2secs_index, %object
 362              		.size	power_2secs_index, 1
 363              	power_2secs_index:
 364 0000 00       		.space	1
 365              		.global	power_minutes
 366              		.section	.bss.power_minutes,"aw",%nobits
 367              		.align	1
 368              		.type	power_minutes, %object
 369              		.size	power_minutes, 2
 370              	power_minutes:
 371 0000 0000     		.space	2
 372              		.global	power_minutes_index
 373              		.section	.bss.power_minutes_index,"aw",%nobits
 374              		.type	power_minutes_index, %object
 375              		.size	power_minutes_index, 1
 376              	power_minutes_index:
 377 0000 00       		.space	1
 378              		.global	power_hours
 379              		.section	.bss.power_hours,"aw",%nobits
 380              		.align	1
 381              		.type	power_hours, %object
 382              		.size	power_hours, 2
 383              	power_hours:
 384 0000 0000     		.space	2
 385              		.comm	gsmNUM,20,4
 386              		.comm	gsmMSG,180,4
 387              		.global	wait_ms_var
 388              		.section	.bss.wait_ms_var,"aw",%nobits
 389              		.align	1
 390              		.type	wait_ms_var, %object
 391              		.size	wait_ms_var, 2
 392              	wait_ms_var:
 393 0000 0000     		.space	2
 394              		.comm	timer_standby,2,2
 395              		.comm	tcp_kalive_timer,2,2
 396              		.comm	filter_timer,1,1
 397              		.global	secs
 398              		.section	.bss.secs,"aw",%nobits
 399              		.align	1
 400              		.type	secs, %object
 401              		.size	secs, 2
ARM GAS  /tmp/ccnmAMP4.s 			page 25


 402              	secs:
 403 0000 0000     		.space	2
 404              		.global	hours
 405              		.section	.bss.hours,"aw",%nobits
 406              		.type	hours, %object
 407              		.size	hours, 1
 408              	hours:
 409 0000 00       		.space	1
 410              		.global	minutes
 411              		.section	.bss.minutes,"aw",%nobits
 412              		.type	minutes, %object
 413              		.size	minutes, 1
 414              	minutes:
 415 0000 00       		.space	1
 416              		.comm	power_vect,20,4
 417              		.comm	vtemp,34,4
 418              		.comm	vpote,34,4
 419              		.section	.rodata
 420              		.align	2
 421              	.LC0:
 422 0000 0D0A4B69 		.ascii	"\015\012Kirno Placa Redonda - Basic V1.0\015\012\000"
 422      726E6F20 
 422      506C6163 
 422      61205265 
 422      646F6E64 
 423 0025 000000   		.align	2
 424              	.LC2:
 425 0028 20204665 		.ascii	"  Features:\015\012\000"
 425      61747572 
 425      65733A0D 
 425      0A00
 426 0036 0000     		.align	2
 427              	.LC4:
 428 0038 20204469 		.ascii	"  Dimmer 1 to 10V\015\012\000"
 428      6D6D6572 
 428      20312074 
 428      6F203130 
 428      560D0A00 
 429              		.align	2
 430              	.LC6:
 431 004c 20204E69 		.ascii	"  Night Hysteresis\015\012\000"
 431      67687420 
 431      48797374 
 431      65726573 
 431      69730D0A 
 432 0061 000000   		.align	2
 433              	.LC8:
 434 0064 20205379 		.ascii	"  Sync by ADC\015\012\000"
 434      6E632062 
 434      79204144 
 434      430D0A00 
 435              		.align	2
 436              	.LC10:
 437 0074 20205573 		.ascii	"  Uses GSM for SMS data\015\012\000"
 437      65732047 
 437      534D2066 
 437      6F722053 
ARM GAS  /tmp/ccnmAMP4.s 			page 26


 437      4D532064 
 438 008e 0000     		.align	2
 439              	.LC15:
 440 0090 47657474 		.ascii	"Getted\015\012\000"
 440      65640D0A 
 440      00
 441 0099 000000   		.align	2
 442              	.LC17:
 443 009c 57616974 		.ascii	"Waiting GSM Startup and zero current\015\012\000"
 443      696E6720 
 443      47534D20 
 443      53746172 
 443      74757020 
 444              		.global	__aeabi_ui2f
 445              		.global	__aeabi_i2d
 446              		.global	__aeabi_dmul
 447              		.global	__aeabi_d2f
 448              		.global	__aeabi_f2uiz
 449              		.global	__aeabi_i2f
 450              		.global	__aeabi_fsub
 451              		.global	__aeabi_fmul
 452 00c3 00       		.align	2
 453              	.LC24:
 454 00c4 703A2025 		.ascii	"p: %3d.%02d d: %d\015\012\000"
 454      33642E25 
 454      30326420 
 454      643A2025 
 454      640D0A00 
 455              		.align	2
 456              	.LC29:
 457 00d8 47534D20 		.ascii	"GSM Listo!\015\012\000"
 457      4C697374 
 457      6F210D0A 
 457      00
 458 00e5 000000   		.align	2
 459              	.LC31:
 460 00e8 31313435 		.ascii	"1145376762\000"
 460      33373637 
 460      363200
 461 00f3 00       		.align	2
 462              	.LC33:
 463 00f4 486F6C61 		.ascii	"Hola\000"
 463      00
 464              		.section	.text.main,"ax",%progbits
 465              		.align	2
 466              		.global	main
 467              		.code	16
 468              		.thumb_func
 469              		.type	main, %function
 470              	main:
 471              	.LFB20:
 472              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Template_2/main.c
   4:src/main.c    ****   * @author  Nahuel
   5:src/main.c    ****   * @version V1.0
ARM GAS  /tmp/ccnmAMP4.s 			page 27


   6:src/main.c    ****   * @date    22-August-2014
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * Use this template for new projects with stm32f0xx family.
  12:src/main.c    ****   *
  13:src/main.c    ****   ******************************************************************************
  14:src/main.c    ****   */
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  18:src/main.c    **** #include "stm32f0xx.h"
  19:src/main.c    **** 
  20:src/main.c    **** #include <stdio.h>
  21:src/main.c    **** #include <string.h>
  22:src/main.c    **** #include <stdlib.h>
  23:src/main.c    **** 
  24:src/main.c    **** #include "gpio.h"
  25:src/main.c    **** #include "tim.h"
  26:src/main.c    **** #include "uart.h"
  27:src/main.c    **** #include "hard.h"
  28:src/main.c    **** 
  29:src/main.c    **** #include "core_cm0.h"
  30:src/main.c    **** #include "adc.h"
  31:src/main.c    **** #include "flash_program.h"
  32:src/main.c    **** #include "main_menu.h"
  33:src/main.c    **** #include "synchro.h"
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** #include "tcp_transceiver.h"
  37:src/main.c    **** 
  38:src/main.c    **** //Para MQTT
  39:src/main.c    **** #ifdef USE_GPS
  40:src/main.c    **** #include "MQTTPacket.h"
  41:src/main.c    **** #include "MQTTConnect.h"
  42:src/main.c    **** #endif
  43:src/main.c    **** 
  44:src/main.c    **** //Para Hardware de GPS
  45:src/main.c    **** #ifdef USE_GPS
  46:src/main.c    **** #include "gps_vktel.h"
  47:src/main.c    **** #endif
  48:src/main.c    **** 
  49:src/main.c    **** //Para Hardware de GSM
  50:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
  51:src/main.c    **** #include "sim900_800.h"
  52:src/main.c    **** #include "funcs_gsm.h"
  53:src/main.c    **** #endif
  54:src/main.c    **** 
  55:src/main.c    **** //--- VARIABLES EXTERNAS ---//
  56:src/main.c    **** 
  57:src/main.c    **** 
  58:src/main.c    **** // ------- Externals del Puerto serie  -------
  59:src/main.c    **** volatile unsigned char tx2buff[SIZEOF_DATA];
  60:src/main.c    **** volatile unsigned char rx2buff[SIZEOF_DATA];
  61:src/main.c    **** 
  62:src/main.c    **** volatile unsigned char tx1buff[SIZEOF_DATA];
ARM GAS  /tmp/ccnmAMP4.s 			page 28


  63:src/main.c    **** volatile unsigned char rx1buff[SIZEOF_DATA];
  64:src/main.c    **** 
  65:src/main.c    **** //
  66:src/main.c    **** //volatile unsigned char data1[SIZEOF_DATA1];
  67:src/main.c    **** ////static unsigned char data_back[10];
  68:src/main.c    **** //volatile unsigned char data[SIZEOF_DATA];
  69:src/main.c    **** 
  70:src/main.c    **** // ------- Externals de los timers -------
  71:src/main.c    **** //volatile unsigned short prog_timer = 0;
  72:src/main.c    **** //volatile unsigned short mainmenu_timer = 0;
  73:src/main.c    **** volatile unsigned short show_select_timer = 0;
  74:src/main.c    **** volatile unsigned char switches_timer = 0;
  75:src/main.c    **** volatile unsigned char acswitch_timer = 0;
  76:src/main.c    **** 
  77:src/main.c    **** volatile unsigned short scroll1_timer = 0;
  78:src/main.c    **** volatile unsigned short scroll2_timer = 0;
  79:src/main.c    **** 
  80:src/main.c    **** volatile unsigned short standalone_timer;
  81:src/main.c    **** volatile unsigned short standalone_enable_menu_timer;
  82:src/main.c    **** //volatile unsigned short standalone_menu_timer;
  83:src/main.c    **** volatile unsigned char grouped_master_timeout_timer;
  84:src/main.c    **** volatile unsigned short take_temp_sample = 0;
  85:src/main.c    **** volatile unsigned char timer_wifi_bright = 0;
  86:src/main.c    **** 
  87:src/main.c    **** #ifdef USE_REDONDA_BASIC
  88:src/main.c    **** volatile unsigned short timer_relay = 0;			//para relay default (si no hay synchro)
  89:src/main.c    **** 
  90:src/main.c    **** volatile unsigned short tt_take_photo_sample;
  91:src/main.c    **** volatile unsigned short tt_relay_on_off;
  92:src/main.c    **** #endif
  93:src/main.c    **** 
  94:src/main.c    **** 
  95:src/main.c    **** unsigned char saved_mode;
  96:src/main.c    **** 
  97:src/main.c    **** 
  98:src/main.c    **** // ------- Externals de los switches -------
  99:src/main.c    **** unsigned short s1;
 100:src/main.c    **** unsigned short s2;
 101:src/main.c    **** unsigned short sac;
 102:src/main.c    **** unsigned char sac_aux;
 103:src/main.c    **** 
 104:src/main.c    **** // ------- Externals de los switches -------
 105:src/main.c    **** #ifdef ADC_WITH_INT
 106:src/main.c    **** volatile unsigned short adc_ch[3];
 107:src/main.c    **** volatile unsigned char seq_ready = 0;
 108:src/main.c    **** unsigned short zero_current;
 109:src/main.c    **** #endif
 110:src/main.c    **** 
 111:src/main.c    **** // ------- Externals del GPS & GSM -------
 112:src/main.c    **** volatile unsigned char usart1_mini_timeout;
 113:src/main.c    **** volatile unsigned char usart1_pckt_ready;
 114:src/main.c    **** volatile unsigned char usart1_have_data;
 115:src/main.c    **** unsigned char usart1_pckt_bytes;
 116:src/main.c    **** 
 117:src/main.c    **** #define gps_mini_timeout	usart1_mini_timeout
 118:src/main.c    **** #define gps_pckt_ready		usart1_pckt_ready
 119:src/main.c    **** #define gps_have_data		usart1_have_data
ARM GAS  /tmp/ccnmAMP4.s 			page 29


 120:src/main.c    **** #define gps_pckt_bytes		usart1_pckt_bytes
 121:src/main.c    **** 
 122:src/main.c    **** #ifdef USE_GPS
 123:src/main.c    **** unsigned char gps_buff [SIZEOF_GPSBUFF];
 124:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 125:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 126:src/main.c    **** volatile unsigned char usart2_have_data;
 127:src/main.c    **** unsigned char usart2_pckt_bytes;
 128:src/main.c    **** 
 129:src/main.c    **** #endif
 130:src/main.c    **** 
 131:src/main.c    **** // ------- Externals del GSM -------
 132:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
 133:src/main.c    **** #define gsm_mini_timeout	usart1_mini_timeout
 134:src/main.c    **** #define gsm_pckt_ready		usart1_pckt_ready
 135:src/main.c    **** #define gsm_have_data		usart1_have_data
 136:src/main.c    **** #define gsm_pckt_bytes		usart1_pckt_bytes
 137:src/main.c    **** 
 138:src/main.c    **** volatile unsigned char usart2_mini_timeout;
 139:src/main.c    **** volatile unsigned char usart2_pckt_ready;
 140:src/main.c    **** volatile unsigned char usart2_have_data;
 141:src/main.c    **** unsigned char usart2_pckt_bytes;
 142:src/main.c    **** 
 143:src/main.c    **** //unsigned char AlertasReportar[5] = {0,0,0,0,0};
 144:src/main.c    **** //unsigned char ActDact = 0;
 145:src/main.c    **** //unsigned char claveAct[5] = {0,0,0,0,0};
 146:src/main.c    **** //volatile char USERCODE[8] = "123456";
 147:src/main.c    **** extern volatile char buffUARTGSMrx2[];
 148:src/main.c    **** #endif
 149:src/main.c    **** 
 150:src/main.c    **** //--- VARIABLES GLOBALES ---//
 151:src/main.c    **** parameters_typedef param_struct;
 152:src/main.c    **** 
 153:src/main.c    **** //para las mediciones
 154:src/main.c    **** unsigned int power_2secs_acum = 0;
 155:src/main.c    **** unsigned char power_2secs_index = 0;
 156:src/main.c    **** unsigned short power_minutes = 0;
 157:src/main.c    **** unsigned char power_minutes_index = 0;
 158:src/main.c    **** unsigned short power_hours = 0;
 159:src/main.c    **** 
 160:src/main.c    **** //para los msjs GSM
 161:src/main.c    **** char gsmNUM [20];
 162:src/main.c    **** char gsmMSG [180];
 163:src/main.c    **** 
 164:src/main.c    **** 
 165:src/main.c    **** 
 166:src/main.c    **** 
 167:src/main.c    **** 
 168:src/main.c    **** 
 169:src/main.c    **** // ------- de los timers -------
 170:src/main.c    **** volatile unsigned short wait_ms_var = 0;
 171:src/main.c    **** volatile unsigned short timer_standby;
 172:src/main.c    **** volatile unsigned short tcp_kalive_timer;
 173:src/main.c    **** //volatile unsigned char display_timer;
 174:src/main.c    **** volatile unsigned char filter_timer;
 175:src/main.c    **** 
 176:src/main.c    **** //volatile unsigned char door_filter;
ARM GAS  /tmp/ccnmAMP4.s 			page 30


 177:src/main.c    **** //volatile unsigned char take_sample;
 178:src/main.c    **** //volatile unsigned char move_relay;
 179:src/main.c    **** volatile unsigned short secs = 0;
 180:src/main.c    **** volatile unsigned char hours = 0;
 181:src/main.c    **** volatile unsigned char minutes = 0;
 182:src/main.c    **** 
 183:src/main.c    **** #define SIZEOF_POWER_VECT		10
 184:src/main.c    **** 
 185:src/main.c    **** unsigned short power_vect [SIZEOF_POWER_VECT];
 186:src/main.c    **** 
 187:src/main.c    **** //--- FUNCIONES DEL MODULO ---//
 188:src/main.c    **** void TimingDelay_Decrement(void);
 189:src/main.c    **** 
 190:src/main.c    **** // ------- del DMX -------
 191:src/main.c    **** extern void EXTI4_15_IRQHandler(void);
 192:src/main.c    **** #define DMX_TIMEOUT	20
 193:src/main.c    **** 
 194:src/main.c    **** //--- FILTROS DE SENSORES ---//
 195:src/main.c    **** #define LARGO_FILTRO 16
 196:src/main.c    **** #define DIVISOR      4   //2 elevado al divisor = largo filtro
 197:src/main.c    **** //#define LARGO_FILTRO 32
 198:src/main.c    **** //#define DIVISOR      5   //2 elevado al divisor = largo filtro
 199:src/main.c    **** unsigned short vtemp [LARGO_FILTRO + 1];
 200:src/main.c    **** unsigned short vpote [LARGO_FILTRO + 1];
 201:src/main.c    **** 
 202:src/main.c    **** //--- FIN DEFINICIONES DE FILTRO ---//
 203:src/main.c    **** 
 204:src/main.c    **** // #define KW			0.009721
 205:src/main.c    **** // #define KW			0.00945
 206:src/main.c    **** // #define KW			0.00959
 207:src/main.c    **** #define KW			0.01013
 208:src/main.c    **** 
 209:src/main.c    **** 
 210:src/main.c    **** //-------------------------------------------//
 211:src/main.c    **** // @brief  Main program.
 212:src/main.c    **** // @param  None
 213:src/main.c    **** // @retval None
 214:src/main.c    **** //------------------------------------------//
 215:src/main.c    **** int main(void)
 216:src/main.c    **** {
 473              		.loc 2 216 0
 474              		.cfi_startproc
 475 0000 30B5     		push	{r4, r5, lr}	@
 476              	.LCFI4:
 477              		.cfi_def_cfa_offset 12
 478              		.cfi_offset 4, -12
 479              		.cfi_offset 5, -8
 480              		.cfi_offset 14, -4
 481 0002 91B0     		sub	sp, sp, #68	@,,
 482              	.LCFI5:
 483              		.cfi_def_cfa_offset 80
 217:src/main.c    **** 	unsigned char i, ii;
 218:src/main.c    **** 	unsigned char bytes_remain, bytes_read, need_ack = 0;
 484              		.loc 2 218 0
 485 0004 3523     		movs	r3, #53	@ tmp172,
 486 0006 6B44     		add	r3, r3, sp	@ tmp172,
 487 0008 0022     		movs	r2, #0	@ tmp173,
ARM GAS  /tmp/ccnmAMP4.s 			page 31


 488 000a 1A70     		strb	r2, [r3]	@ tmp174, need_ack
 219:src/main.c    **** 	unsigned char resp = RESP_CONTINUE;
 489              		.loc 2 219 0
 490 000c 0DAB     		add	r3, sp, #52	@ tmp175,,
 491 000e 0022     		movs	r2, #0	@ tmp176,
 492 0010 1A70     		strb	r2, [r3]	@ tmp177, resp
 220:src/main.c    **** 	unsigned short power_int, power_dec;
 221:src/main.c    **** 	unsigned short power;
 222:src/main.c    **** 	float fcalc = 1.0;
 493              		.loc 2 222 0
 494 0012 FE23     		movs	r3, #254	@ tmp178,
 495 0014 9B05     		lsls	r3, r3, #22	@ tmp178, tmp178,
 496 0016 0C93     		str	r3, [sp, #48]	@ tmp178, fcalc
 223:src/main.c    **** 	unsigned int zero_current_loc = 0;
 497              		.loc 2 223 0
 498 0018 0023     		movs	r3, #0	@ tmp179,
 499 001a 0E93     		str	r3, [sp, #56]	@ tmp179, zero_current_loc
 224:src/main.c    **** 
 225:src/main.c    **** #ifdef USE_REDONDA_BASIC
 226:src/main.c    **** 	main_state_t main_state = MAIN_INIT;
 500              		.loc 2 226 0
 501 001c 3723     		movs	r3, #55	@ tmp180,
 502 001e 6B44     		add	r3, r3, sp	@ tmp180,
 503 0020 0022     		movs	r2, #0	@ tmp181,
 504 0022 1A70     		strb	r2, [r3]	@ tmp182, main_state
 227:src/main.c    **** 	unsigned char sended = 0;
 505              		.loc 2 227 0
 506 0024 3623     		movs	r3, #54	@ tmp183,
 507 0026 6B44     		add	r3, r3, sp	@ tmp183,
 508 0028 0022     		movs	r2, #0	@ tmp184,
 509 002a 1A70     		strb	r2, [r3]	@ tmp185, sended
 228:src/main.c    **** #ifdef WITH_HYST
 229:src/main.c    **** 	unsigned short hyst;
 230:src/main.c    **** #endif
 231:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 232:src/main.c    **** 	unsigned char one_to_ten;
 233:src/main.c    **** #endif
 234:src/main.c    **** 
 235:src/main.c    **** #else		//USE_REDONDA_BASIC
 236:src/main.c    **** 	unsigned char main_state = 0;
 237:src/main.c    **** #endif
 238:src/main.c    **** 	char s_lcd [20];
 239:src/main.c    **** 	enum TcpMessages tcp_msg = NONE_MSG;
 510              		.loc 2 239 0
 511 002c 2F23     		movs	r3, #47	@ tmp186,
 512 002e 6B44     		add	r3, r3, sp	@ tmp186,
 513 0030 0022     		movs	r2, #0	@ tmp187,
 514 0032 1A70     		strb	r2, [r3]	@ tmp188, tcp_msg
 240:src/main.c    **** 	unsigned char new_room = 0;
 515              		.loc 2 240 0
 516 0034 2E23     		movs	r3, #46	@ tmp189,
 517 0036 6B44     		add	r3, r3, sp	@ tmp189,
 518 0038 0022     		movs	r2, #0	@ tmp190,
 519 003a 1A70     		strb	r2, [r3]	@ tmp191, new_room
 241:src/main.c    **** 	unsigned char new_lamp = 0;
 520              		.loc 2 241 0
 521 003c 2D23     		movs	r3, #45	@ tmp192,
ARM GAS  /tmp/ccnmAMP4.s 			page 32


 522 003e 6B44     		add	r3, r3, sp	@ tmp192,
 523 0040 0022     		movs	r2, #0	@ tmp193,
 524 0042 1A70     		strb	r2, [r3]	@ tmp194, new_lamp
 242:src/main.c    **** 	unsigned char last_bright = 0;
 525              		.loc 2 242 0
 526 0044 0BAB     		add	r3, sp, #44	@ tmp195,,
 527 0046 0022     		movs	r2, #0	@ tmp196,
 528 0048 1A70     		strb	r2, [r3]	@ tmp197, last_bright
 243:src/main.c    **** 	unsigned char show_ldr = 0;
 529              		.loc 2 243 0
 530 004a 2B23     		movs	r3, #43	@ tmp198,
 531 004c 6B44     		add	r3, r3, sp	@ tmp198,
 532 004e 0022     		movs	r2, #0	@ tmp199,
 533 0050 1A70     		strb	r2, [r3]	@ tmp200, show_ldr
 244:src/main.c    **** 	int dummy_resp = 0;
 534              		.loc 2 244 0
 535 0052 0023     		movs	r3, #0	@ tmp201,
 536 0054 0993     		str	r3, [sp, #36]	@ tmp201, dummy_resp
 245:src/main.c    **** 	unsigned char pps_one = 0;
 537              		.loc 2 245 0
 538 0056 2323     		movs	r3, #35	@ tmp202,
 539 0058 6B44     		add	r3, r3, sp	@ tmp202,
 540 005a 0022     		movs	r2, #0	@ tmp203,
 541 005c 1A70     		strb	r2, [r3]	@ tmp204, pps_one
 246:src/main.c    **** 
 247:src/main.c    **** #ifdef USE_PROD_PROGRAM
 248:src/main.c    **** 	unsigned char jump_the_menu = 0;
 249:src/main.c    **** #endif
 250:src/main.c    **** 	parameters_typedef * p_mem_init;
 251:src/main.c    **** 	//!< At this stage the microcontroller clock setting is already configured,
 252:src/main.c    ****     //   this is done through SystemInit() function which is called from startup
 253:src/main.c    ****     //   file (startup_stm32f0xx.s) before to branch to application main.
 254:src/main.c    ****     //   To reconfigure the default setting of SystemInit() function, refer to
 255:src/main.c    ****     //   system_stm32f0xx.c file
 256:src/main.c    **** 
 257:src/main.c    **** 	//GPIO Configuration.
 258:src/main.c    **** 	GPIO_Config();
 542              		.loc 2 258 0
 543 005e FFF7FEFF 		bl	GPIO_Config	@
 259:src/main.c    **** 
 260:src/main.c    **** 
 261:src/main.c    **** 	//ACTIVAR SYSTICK TIMER
 262:src/main.c    **** 	if (SysTick_Config(48000))
 544              		.loc 2 262 0
 545 0062 974B     		ldr	r3, .L45	@ tmp205,
 546 0064 1800     		movs	r0, r3	@, tmp205
 547 0066 FFF7FEFF 		bl	SysTick_Config	@
 548 006a 031E     		subs	r3, r0, #0	@ D.7146,,
 549 006c 28D0     		beq	.L13	@,
 550              	.L18:
 263:src/main.c    **** 	{
 264:src/main.c    **** 		while (1)	/* Capture error */
 265:src/main.c    **** 		{
 266:src/main.c    **** 			if (LED)
 551              		.loc 2 266 0
 552 006e 9023     		movs	r3, #144	@ tmp425,
 553 0070 DB05     		lsls	r3, r3, #23	@ D.7147, tmp425,
ARM GAS  /tmp/ccnmAMP4.s 			page 33


 554 0072 9B8A     		ldrh	r3, [r3, #20]	@ tmp207,
 555 0074 9BB2     		uxth	r3, r3	@ D.7148, tmp207
 556 0076 1A00     		movs	r2, r3	@ D.7149, D.7148
 557 0078 8023     		movs	r3, #128	@ tmp426,
 558 007a 5B01     		lsls	r3, r3, #5	@ tmp208, tmp426,
 559 007c 1340     		ands	r3, r2	@ D.7149, D.7149
 560 007e 05D0     		beq	.L14	@,
 267:src/main.c    **** 				LED_OFF;
 561              		.loc 2 267 0
 562 0080 9023     		movs	r3, #144	@ tmp423,
 563 0082 DB05     		lsls	r3, r3, #23	@ D.7147, tmp423,
 564 0084 8022     		movs	r2, #128	@ tmp424,
 565 0086 5205     		lsls	r2, r2, #21	@ tmp209, tmp424,
 566 0088 9A61     		str	r2, [r3, #24]	@ tmp209, _56->BSRR
 567 008a 04E0     		b	.L15	@
 568              	.L14:
 268:src/main.c    **** 			else
 269:src/main.c    **** 				LED_ON;
 569              		.loc 2 269 0
 570 008c 9023     		movs	r3, #144	@ tmp421,
 571 008e DB05     		lsls	r3, r3, #23	@ D.7147, tmp421,
 572 0090 8022     		movs	r2, #128	@ tmp422,
 573 0092 5201     		lsls	r2, r2, #5	@ tmp210, tmp422,
 574 0094 9A61     		str	r2, [r3, #24]	@ tmp210, _58->BSRR
 575              	.L15:
 270:src/main.c    **** 
 271:src/main.c    **** 			for (i = 0; i < 255; i++)
 576              		.loc 2 271 0
 577 0096 3F23     		movs	r3, #63	@ tmp211,
 578 0098 6B44     		add	r3, r3, sp	@ tmp211,
 579 009a 0022     		movs	r2, #0	@ tmp212,
 580 009c 1A70     		strb	r2, [r3]	@ tmp213, i
 581 009e 09E0     		b	.L16	@
 582              	.L17:
 272:src/main.c    **** 			{
 273:src/main.c    **** 				asm (	"nop \n\t"
 583              		.loc 2 273 0 discriminator 3
 584              		.syntax divided
 585              	@ 273 "src/main.c" 1
 586 00a0 C046     		nop 
 587 00a2 C046     		nop 
 588 00a4 C046     		nop 
 589              		
 590              	@ 0 "" 2
 271:src/main.c    **** 			{
 591              		.loc 2 271 0 discriminator 3
 592              		.thumb
 593              		.syntax unified
 594 00a6 3F23     		movs	r3, #63	@ tmp214,
 595 00a8 6B44     		add	r3, r3, sp	@ tmp214,
 596 00aa 1A78     		ldrb	r2, [r3]	@ D.7150, i
 597 00ac 3F23     		movs	r3, #63	@ tmp215,
 598 00ae 6B44     		add	r3, r3, sp	@ tmp215,
 599 00b0 0132     		adds	r2, r2, #1	@ tmp216,
 600 00b2 1A70     		strb	r2, [r3]	@ tmp217, i
 601              	.L16:
 271:src/main.c    **** 			{
ARM GAS  /tmp/ccnmAMP4.s 			page 34


 602              		.loc 2 271 0 is_stmt 0 discriminator 1
 603 00b4 3F23     		movs	r3, #63	@ tmp218,
 604 00b6 6B44     		add	r3, r3, sp	@ tmp218,
 605 00b8 1B78     		ldrb	r3, [r3]	@ tmp219, i
 606 00ba FF2B     		cmp	r3, #255	@ tmp219,
 607 00bc F0D1     		bne	.L17	@,
 274:src/main.c    **** 						"nop \n\t"
 275:src/main.c    **** 						"nop \n\t" );
 276:src/main.c    **** 			}
 277:src/main.c    **** 		}
 608              		.loc 2 277 0 is_stmt 1
 609 00be D6E7     		b	.L18	@
 610              	.L13:
 278:src/main.c    **** 	}
 279:src/main.c    **** 
 280:src/main.c    **** 
 281:src/main.c    **** 	//ADC Configuration
 282:src/main.c    **** //	AdcConfig();
 283:src/main.c    **** 
 284:src/main.c    **** 	//TIM Configuration.
 285:src/main.c    **** 	// TIM_3_Init();
 286:src/main.c    **** //	TIM_14_Init();
 287:src/main.c    **** //	TIM_16_Init();		//para OneShoot() cuando funciona en modo master
 288:src/main.c    **** //	TIM_17_Init();		//lo uso para el ADC de Igrid
 289:src/main.c    **** 
 290:src/main.c    **** //	EXTIOff ();
 291:src/main.c    **** 
 292:src/main.c    **** 	// while (1)
 293:src/main.c    **** 	// {
 294:src/main.c    **** 	// 	// if (SYNCP)
 295:src/main.c    **** 	// 	// {
 296:src/main.c    **** 	// 	// 	SYNCP_OFF;
 297:src/main.c    **** 	// 	// 	LED_OFF;
 298:src/main.c    **** 	// 	// }
 299:src/main.c    **** 	// 	// else
 300:src/main.c    **** 	// 	// {
 301:src/main.c    **** 	// 	// 	SYNCP_ON;
 302:src/main.c    **** 	// 	// 	LED_ON;
 303:src/main.c    **** 	// 	// }
 304:src/main.c    **** 	// 	// Wait_ms(10);
 305:src/main.c    **** 	//
 306:src/main.c    **** 	// 	// for (i = 0; i < 255; i++)
 307:src/main.c    **** 	// 	// {
 308:src/main.c    **** 	// 	// 	Update_TIM3_CH1 (i);
 309:src/main.c    **** 	// 	// 	Wait_ms (10);
 310:src/main.c    **** 	// 	// }
 311:src/main.c    **** 	// }
 312:src/main.c    **** 
 313:src/main.c    **** //		while (1)
 314:src/main.c    **** //		{
 315:src/main.c    **** //			PIN3_OFF;
 316:src/main.c    **** //			Wait_ms (10);
 317:src/main.c    **** //			PIN3_ON;
 318:src/main.c    **** //			Wait_ms (10);
 319:src/main.c    **** //		}
 320:src/main.c    **** 
 321:src/main.c    **** 	//--- Welcome code ---//
ARM GAS  /tmp/ccnmAMP4.s 			page 35


 322:src/main.c    **** 	LED_OFF;
 611              		.loc 2 322 0
 612 00c0 9023     		movs	r3, #144	@ tmp415,
 613 00c2 DB05     		lsls	r3, r3, #23	@ D.7147, tmp415,
 614 00c4 8022     		movs	r2, #128	@ tmp416,
 615 00c6 5205     		lsls	r2, r2, #21	@ tmp220, tmp416,
 616 00c8 9A61     		str	r2, [r3, #24]	@ tmp220, _63->BSRR
 323:src/main.c    **** //	EN_GPS_OFF;
 324:src/main.c    **** 	EN_GPS_ON;
 617              		.loc 2 324 0
 618 00ca 9023     		movs	r3, #144	@ tmp417,
 619 00cc DB05     		lsls	r3, r3, #23	@ D.7147, tmp417,
 620 00ce 8022     		movs	r2, #128	@ tmp418,
 621 00d0 1202     		lsls	r2, r2, #8	@ tmp221, tmp418,
 622 00d2 9A61     		str	r2, [r3, #24]	@ tmp221, _65->BSRR
 325:src/main.c    **** 	//RELAY_ON;
 326:src/main.c    **** 	RELAY_OFF;
 623              		.loc 2 326 0
 624 00d4 9023     		movs	r3, #144	@ tmp419,
 625 00d6 DB05     		lsls	r3, r3, #23	@ D.7147, tmp419,
 626 00d8 8022     		movs	r2, #128	@ tmp420,
 627 00da 1205     		lsls	r2, r2, #20	@ tmp222, tmp420,
 628 00dc 9A61     		str	r2, [r3, #24]	@ tmp222, _67->BSRR
 327:src/main.c    **** 
 328:src/main.c    **** 	USART1Config();
 629              		.loc 2 328 0
 630 00de FFF7FEFF 		bl	USART1Config	@
 329:src/main.c    **** 	USART2Config();
 631              		.loc 2 329 0
 632 00e2 FFF7FEFF 		bl	USART2Config	@
 330:src/main.c    **** 
 331:src/main.c    **** 	EXTIOff();
 633              		.loc 2 331 0
 634 00e6 FFF7FEFF 		bl	EXTIOff	@
 332:src/main.c    **** 
 333:src/main.c    **** 
 334:src/main.c    **** #ifdef USE_REDONDA_BASIC
 335:src/main.c    **** //---------- Inicio Programa de Produccion Redonda Basic --------//
 336:src/main.c    **** 	// USART1Config();
 337:src/main.c    **** 	AdcConfig();		//recordar habilitar sensor en adc.h
 635              		.loc 2 337 0
 636 00ea FFF7FEFF 		bl	AdcConfig	@
 338:src/main.c    **** 
 339:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 340:src/main.c    **** 	TIM_3_Init ();					//lo tuilizo para 1 a 10V y para synchro ADC
 637              		.loc 2 340 0
 638 00ee FFF7FEFF 		bl	TIM_3_Init	@
 341:src/main.c    **** #endif
 342:src/main.c    **** 
 343:src/main.c    **** 	TIM_16_Init();					//o tuilizo para synchro de relay
 639              		.loc 2 343 0
 640 00f2 FFF7FEFF 		bl	TIM_16_Init	@
 344:src/main.c    **** 	TIM16Enable();
 641              		.loc 2 344 0
 642 00f6 FFF7FEFF 		bl	TIM16Enable	@
 345:src/main.c    **** 
 346:src/main.c    **** 	Usart2Send((char *) (const char *) "\r\nKirno Placa Redonda - Basic V1.0\r\n");
ARM GAS  /tmp/ccnmAMP4.s 			page 36


 643              		.loc 2 346 0
 644 00fa 724B     		ldr	r3, .L45+4	@ tmp223,
 645 00fc 1800     		movs	r0, r3	@, tmp223
 646 00fe FFF7FEFF 		bl	Usart2Send	@
 347:src/main.c    **** 	Usart2Send((char *) (const char *) "  Features:\r\n");
 647              		.loc 2 347 0
 648 0102 714B     		ldr	r3, .L45+8	@ tmp224,
 649 0104 1800     		movs	r0, r3	@, tmp224
 650 0106 FFF7FEFF 		bl	Usart2Send	@
 348:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 349:src/main.c    **** 	Usart2Send((char *) (const char *) "  Dimmer 1 to 10V\r\n");
 651              		.loc 2 349 0
 652 010a 704B     		ldr	r3, .L45+12	@ tmp225,
 653 010c 1800     		movs	r0, r3	@, tmp225
 654 010e FFF7FEFF 		bl	Usart2Send	@
 350:src/main.c    **** 	#endif
 351:src/main.c    **** 	#ifdef WITH_HYST
 352:src/main.c    **** 	Usart2Send((char *) (const char *) "  Night Hysteresis\r\n");
 655              		.loc 2 352 0
 656 0112 6F4B     		ldr	r3, .L45+16	@ tmp226,
 657 0114 1800     		movs	r0, r3	@, tmp226
 658 0116 FFF7FEFF 		bl	Usart2Send	@
 353:src/main.c    **** 	#endif
 354:src/main.c    **** 	#ifdef WITH_TEMP_CONTROL
 355:src/main.c    **** 	Usart2Send((char *) (const char *) "  Temp Control\r\n");
 356:src/main.c    **** 	#endif
 357:src/main.c    **** 	#ifdef USE_WITH_SYNC
 358:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by Edges\r\n");
 359:src/main.c    **** 	#else
 360:src/main.c    **** 	Usart2Send((char *) (const char *) "  Sync by ADC\r\n");
 659              		.loc 2 360 0
 660 011a 6E4B     		ldr	r3, .L45+20	@ tmp227,
 661 011c 1800     		movs	r0, r3	@, tmp227
 662 011e FFF7FEFF 		bl	Usart2Send	@
 361:src/main.c    **** 	#endif
 362:src/main.c    **** 	#ifdef USE_GSM
 363:src/main.c    **** 	Usart2Send((char *) (const char *) "  Uses GSM for SMS data\r\n");
 663              		.loc 2 363 0
 664 0122 6D4B     		ldr	r3, .L45+24	@ tmp228,
 665 0124 1800     		movs	r0, r3	@, tmp228
 666 0126 FFF7FEFF 		bl	Usart2Send	@
 364:src/main.c    **** 	#endif
 365:src/main.c    **** 
 366:src/main.c    **** 
 367:src/main.c    **** 
 368:src/main.c    **** 	for (i = 0; i < 8; i++)
 667              		.loc 2 368 0
 668 012a 3F23     		movs	r3, #63	@ tmp229,
 669 012c 6B44     		add	r3, r3, sp	@ tmp229,
 670 012e 0022     		movs	r2, #0	@ tmp230,
 671 0130 1A70     		strb	r2, [r3]	@ tmp231, i
 672 0132 1DE0     		b	.L19	@
 673              	.L22:
 369:src/main.c    **** 	{
 370:src/main.c    **** 		if (LED)
 674              		.loc 2 370 0
 675 0134 9023     		movs	r3, #144	@ tmp413,
ARM GAS  /tmp/ccnmAMP4.s 			page 37


 676 0136 DB05     		lsls	r3, r3, #23	@ D.7147, tmp413,
 677 0138 9B8A     		ldrh	r3, [r3, #20]	@ tmp233,
 678 013a 9BB2     		uxth	r3, r3	@ D.7148, tmp233
 679 013c 1A00     		movs	r2, r3	@ D.7149, D.7148
 680 013e 8023     		movs	r3, #128	@ tmp414,
 681 0140 5B01     		lsls	r3, r3, #5	@ tmp234, tmp414,
 682 0142 1340     		ands	r3, r2	@ D.7149, D.7149
 683 0144 05D0     		beq	.L20	@,
 371:src/main.c    **** 			LED_OFF;
 684              		.loc 2 371 0
 685 0146 9023     		movs	r3, #144	@ tmp411,
 686 0148 DB05     		lsls	r3, r3, #23	@ D.7147, tmp411,
 687 014a 8022     		movs	r2, #128	@ tmp412,
 688 014c 5205     		lsls	r2, r2, #21	@ tmp235, tmp412,
 689 014e 9A61     		str	r2, [r3, #24]	@ tmp235, _87->BSRR
 690 0150 04E0     		b	.L21	@
 691              	.L20:
 372:src/main.c    **** 		else
 373:src/main.c    **** 			LED_ON;
 692              		.loc 2 373 0
 693 0152 9023     		movs	r3, #144	@ tmp409,
 694 0154 DB05     		lsls	r3, r3, #23	@ D.7147, tmp409,
 695 0156 8022     		movs	r2, #128	@ tmp410,
 696 0158 5201     		lsls	r2, r2, #5	@ tmp236, tmp410,
 697 015a 9A61     		str	r2, [r3, #24]	@ tmp236, _89->BSRR
 698              	.L21:
 374:src/main.c    **** 
 375:src/main.c    **** 		Wait_ms (250);
 699              		.loc 2 375 0 discriminator 2
 700 015c FA20     		movs	r0, #250	@,
 701 015e FFF7FEFF 		bl	Wait_ms	@
 368:src/main.c    **** 	{
 702              		.loc 2 368 0 discriminator 2
 703 0162 3F23     		movs	r3, #63	@ tmp237,
 704 0164 6B44     		add	r3, r3, sp	@ tmp237,
 705 0166 1A78     		ldrb	r2, [r3]	@ D.7150, i
 706 0168 3F23     		movs	r3, #63	@ tmp238,
 707 016a 6B44     		add	r3, r3, sp	@ tmp238,
 708 016c 0132     		adds	r2, r2, #1	@ tmp239,
 709 016e 1A70     		strb	r2, [r3]	@ tmp240, i
 710              	.L19:
 368:src/main.c    **** 	{
 711              		.loc 2 368 0 is_stmt 0 discriminator 1
 712 0170 3F23     		movs	r3, #63	@ tmp241,
 713 0172 6B44     		add	r3, r3, sp	@ tmp241,
 714 0174 1B78     		ldrb	r3, [r3]	@ tmp242, i
 715 0176 072B     		cmp	r3, #7	@ tmp242,
 716 0178 DCD9     		bls	.L22	@,
 376:src/main.c    **** 	}
 377:src/main.c    **** 
 378:src/main.c    **** 	timer_standby = 2000;
 717              		.loc 2 378 0 is_stmt 1
 718 017a 584B     		ldr	r3, .L45+28	@ tmp243,
 719 017c FA22     		movs	r2, #250	@ tmp408,
 720 017e D200     		lsls	r2, r2, #3	@ tmp244, tmp408,
 721 0180 1A80     		strh	r2, [r3]	@ tmp245, timer_standby
 379:src/main.c    **** 	FuncsGSMReset();
ARM GAS  /tmp/ccnmAMP4.s 			page 38


 722              		.loc 2 379 0
 723 0182 FFF7FEFF 		bl	FuncsGSMReset	@
 380:src/main.c    **** 	Usart1Mode(USART_GSM_MODE);
 724              		.loc 2 380 0
 725 0186 0220     		movs	r0, #2	@,
 726 0188 FFF7FEFF 		bl	Usart1Mode	@
 727              	.L40:
 381:src/main.c    **** 
 382:src/main.c    **** //--- Programa de pruebas 1 a 10V -----
 383:src/main.c    **** 	// while (1)
 384:src/main.c    **** 	// {
 385:src/main.c    **** 	// 	for (i = 0; i < 255; i++)
 386:src/main.c    **** 	// 	{
 387:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 388:src/main.c    **** 	// 		Wait_ms(10);
 389:src/main.c    **** 	// 	}
 390:src/main.c    **** 	//
 391:src/main.c    **** 	// 	for (i = 255; i >= 0; i--)
 392:src/main.c    **** 	// 	{
 393:src/main.c    **** 	// 		Update_TIM3_CH1(i);
 394:src/main.c    **** 	// 		Wait_ms(10);
 395:src/main.c    **** 	// 	}
 396:src/main.c    **** 	// }
 397:src/main.c    **** //--- FIN Programa de pruebas 1 a 10V -----
 398:src/main.c    **** 
 399:src/main.c    **** //--- Programa de pruebas synchro de Relay -----
 400:src/main.c    **** 	// i = 0;
 401:src/main.c    **** 	// while (1)
 402:src/main.c    **** 	// {
 403:src/main.c    **** 	// 	switch (i)
 404:src/main.c    **** 	// 	{
 405:src/main.c    **** 	// 		case 0:
 406:src/main.c    **** 	// 			RelayOn();
 407:src/main.c    **** 	// 			timer_standby = 50;
 408:src/main.c    **** 	// 			LED_ON;
 409:src/main.c    **** 	// 			i++;
 410:src/main.c    **** 	// 			break;
 411:src/main.c    **** 	//
 412:src/main.c    **** 	// 		case 1:
 413:src/main.c    **** 	// 			if (!timer_standby)
 414:src/main.c    **** 	// 			{
 415:src/main.c    **** 	// 				RelayOff();
 416:src/main.c    **** 	// 				LED_OFF;
 417:src/main.c    **** 	// 				i++;
 418:src/main.c    **** 	// 				timer_standby = 10000;
 419:src/main.c    **** 	// 			}
 420:src/main.c    **** 	// 			break;
 421:src/main.c    **** 	//
 422:src/main.c    **** 	// 		case 2:
 423:src/main.c    **** 	// 			if (!timer_standby)
 424:src/main.c    **** 	// 			{
 425:src/main.c    **** 	// 				i = 0;
 426:src/main.c    **** 	// 			}
 427:src/main.c    **** 	// 			break;
 428:src/main.c    **** 	// 	}
 429:src/main.c    **** 	//
 430:src/main.c    **** 	// 	UpdateRelay ();
ARM GAS  /tmp/ccnmAMP4.s 			page 39


 431:src/main.c    **** 	// }
 432:src/main.c    **** //--- FIN Programa de pruebas synchro de Relay -----
 433:src/main.c    **** 
 434:src/main.c    **** 
 435:src/main.c    **** //--- Programa de pruebas I meas -----
 436:src/main.c    **** 	while (1)
 437:src/main.c    **** 	{
 438:src/main.c    **** 		switch (main_state)
 728              		.loc 2 438 0
 729 018c 3723     		movs	r3, #55	@ tmp246,
 730 018e 6B44     		add	r3, r3, sp	@ tmp246,
 731 0190 1B78     		ldrb	r3, [r3]	@ D.7149, main_state
 732 0192 072B     		cmp	r3, #7	@ D.7149,
 733 0194 00D9     		bls	.LCB424	@
 734 0196 53E1     		b	.L23	@long jump	@
 735              	.LCB424:
 736 0198 9A00     		lsls	r2, r3, #2	@ tmp247, D.7149,
 737 019a 514B     		ldr	r3, .L45+32	@ tmp249,
 738 019c D318     		adds	r3, r2, r3	@ tmp248, tmp247, tmp249
 739 019e 1B68     		ldr	r3, [r3]	@ tmp250,
 740 01a0 9F46     		mov	pc, r3	@ tmp250
 741              		.section	.rodata.main,"a",%progbits
 742              		.align	2
 743              	.L25:
 744 0000 A2010000 		.word	.L24
 745 0004 C4010000 		.word	.L26
 746 0008 FC010000 		.word	.L27
 747 000c 4A040000 		.word	.L41
 748 0010 40040000 		.word	.L23
 749 0014 40040000 		.word	.L23
 750 0018 40040000 		.word	.L23
 751 001c 72020000 		.word	.L29
 752              		.section	.text.main
 753              	.L24:
 439:src/main.c    **** 		{
 440:src/main.c    **** 			case MAIN_INIT:
 441:src/main.c    **** 				Update_TIM3_CH1 (10);		//lo uso para ver diff entre synchro adc con led
 754              		.loc 2 441 0
 755 01a2 0A20     		movs	r0, #10	@,
 756 01a4 FFF7FEFF 		bl	Update_TIM3_CH1	@
 442:src/main.c    **** 				main_state = SYNCHRO_ADC;
 757              		.loc 2 442 0
 758 01a8 3723     		movs	r3, #55	@ tmp251,
 759 01aa 6B44     		add	r3, r3, sp	@ tmp251,
 760 01ac 0122     		movs	r2, #1	@ tmp252,
 761 01ae 1A70     		strb	r2, [r3]	@ tmp253, main_state
 443:src/main.c    **** 				ADC1->CR |= ADC_CR_ADSTART;
 762              		.loc 2 443 0
 763 01b0 4C4B     		ldr	r3, .L45+36	@ D.7151,
 764 01b2 4C4A     		ldr	r2, .L45+36	@ D.7151,
 765 01b4 9268     		ldr	r2, [r2, #8]	@ D.7146, _101->CR
 766 01b6 0421     		movs	r1, #4	@ tmp254,
 767 01b8 0A43     		orrs	r2, r1	@ D.7146, tmp254
 768 01ba 9A60     		str	r2, [r3, #8]	@ D.7146, _100->CR
 444:src/main.c    **** 				seq_ready = 0;
 769              		.loc 2 444 0
 770 01bc 4A4B     		ldr	r3, .L45+40	@ tmp255,
ARM GAS  /tmp/ccnmAMP4.s 			page 40


 771 01be 0022     		movs	r2, #0	@ tmp256,
 772 01c0 1A70     		strb	r2, [r3]	@ tmp257, seq_ready
 445:src/main.c    **** 				break;
 773              		.loc 2 445 0
 774 01c2 49E1     		b	.L30	@
 775              	.L26:
 446:src/main.c    **** 
 447:src/main.c    **** 			case SYNCHRO_ADC:
 448:src/main.c    **** 				if (seq_ready)					//TODO ojo aca seq_ready se usa fuera del main switch
 776              		.loc 2 448 0
 777 01c4 484B     		ldr	r3, .L45+40	@ tmp258,
 778 01c6 1B78     		ldrb	r3, [r3]	@ tmp259, seq_ready
 779 01c8 DBB2     		uxtb	r3, r3	@ D.7150, tmp259
 780 01ca 002B     		cmp	r3, #0	@ D.7150,
 781 01cc 00D1     		bne	.LCB459	@
 782 01ce 3EE1     		b	.L42	@long jump	@
 783              	.LCB459:
 449:src/main.c    **** 				{
 450:src/main.c    **** 					Usart2Send((char *) (const char *) "Getted\r\n");
 784              		.loc 2 450 0
 785 01d0 464B     		ldr	r3, .L45+44	@ tmp260,
 786 01d2 1800     		movs	r0, r3	@, tmp260
 787 01d4 FFF7FEFF 		bl	Usart2Send	@
 451:src/main.c    **** 					Usart2Send((char *) (const char *) "Waiting GSM Startup and zero current\r\n");
 788              		.loc 2 451 0
 789 01d8 454B     		ldr	r3, .L45+48	@ tmp261,
 790 01da 1800     		movs	r0, r3	@, tmp261
 791 01dc FFF7FEFF 		bl	Usart2Send	@
 452:src/main.c    **** #ifdef USE_GSM
 453:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 792              		.loc 2 453 0
 793 01e0 3723     		movs	r3, #55	@ tmp262,
 794 01e2 6B44     		add	r3, r3, sp	@ tmp262,
 795 01e4 0222     		movs	r2, #2	@ tmp263,
 796 01e6 1A70     		strb	r2, [r3]	@ tmp264, main_state
 454:src/main.c    **** 					timer_standby = 0;
 797              		.loc 2 454 0
 798 01e8 3C4B     		ldr	r3, .L45+28	@ tmp265,
 799 01ea 0022     		movs	r2, #0	@ tmp266,
 800 01ec 1A80     		strh	r2, [r3]	@ tmp267, timer_standby
 455:src/main.c    **** 					zero_current_loc = 0;
 801              		.loc 2 455 0
 802 01ee 0023     		movs	r3, #0	@ tmp268,
 803 01f0 0E93     		str	r3, [sp, #56]	@ tmp268, zero_current_loc
 456:src/main.c    **** 					i = 0;
 804              		.loc 2 456 0
 805 01f2 3F23     		movs	r3, #63	@ tmp269,
 806 01f4 6B44     		add	r3, r3, sp	@ tmp269,
 807 01f6 0022     		movs	r2, #0	@ tmp270,
 808 01f8 1A70     		strb	r2, [r3]	@ tmp271, i
 457:src/main.c    **** #else
 458:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 459:src/main.c    **** 					timer_standby = 60000;
 460:src/main.c    **** 					zero_current_loc = 0;
 461:src/main.c    **** 					i = 0;
 462:src/main.c    **** #endif
 463:src/main.c    **** 				}
ARM GAS  /tmp/ccnmAMP4.s 			page 41


 464:src/main.c    **** 				break;
 809              		.loc 2 464 0
 810 01fa 28E1     		b	.L42	@
 811              	.L27:
 465:src/main.c    **** 
 466:src/main.c    **** 			case SET_ZERO_CURRENT:
 467:src/main.c    **** 				if (!timer_standby)
 812              		.loc 2 467 0
 813 01fc 374B     		ldr	r3, .L45+28	@ tmp272,
 814 01fe 1B88     		ldrh	r3, [r3]	@ tmp273, timer_standby
 815 0200 9BB2     		uxth	r3, r3	@ D.7148, tmp273
 816 0202 002B     		cmp	r3, #0	@ D.7148,
 817 0204 00D0     		beq	.LCB487	@
 818 0206 24E1     		b	.L43	@long jump	@
 819              	.LCB487:
 468:src/main.c    **** 				{
 469:src/main.c    **** 					if (i < 32)
 820              		.loc 2 469 0
 821 0208 3F23     		movs	r3, #63	@ tmp274,
 822 020a 6B44     		add	r3, r3, sp	@ tmp274,
 823 020c 1B78     		ldrb	r3, [r3]	@ tmp275, i
 824 020e 1F2B     		cmp	r3, #31	@ tmp275,
 825 0210 1AD8     		bhi	.L33	@,
 470:src/main.c    **** 					// if (i < 4)
 471:src/main.c    **** 					{
 472:src/main.c    **** 						if (seq_ready)		//TODO ojo aca seq_ready se usa fuera del main switch
 826              		.loc 2 472 0
 827 0212 354B     		ldr	r3, .L45+40	@ tmp276,
 828 0214 1B78     		ldrb	r3, [r3]	@ tmp277, seq_ready
 829 0216 DBB2     		uxtb	r3, r3	@ D.7150, tmp277
 830 0218 002B     		cmp	r3, #0	@ D.7150,
 831 021a 00D1     		bne	.LCB497	@
 832 021c 19E1     		b	.L43	@long jump	@
 833              	.LCB497:
 473:src/main.c    **** 						{
 474:src/main.c    **** 							seq_ready = 0;
 834              		.loc 2 474 0
 835 021e 324B     		ldr	r3, .L45+40	@ tmp278,
 836 0220 0022     		movs	r2, #0	@ tmp279,
 837 0222 1A70     		strb	r2, [r3]	@ tmp280, seq_ready
 475:src/main.c    **** 							zero_current_loc += I_Sense;
 838              		.loc 2 475 0
 839 0224 334B     		ldr	r3, .L45+52	@ tmp281,
 840 0226 9B88     		ldrh	r3, [r3, #4]	@ tmp283,
 841 0228 9BB2     		uxth	r3, r3	@ D.7148, tmp283
 842 022a 1A00     		movs	r2, r3	@ D.7152, D.7148
 843 022c 0E9B     		ldr	r3, [sp, #56]	@ tmp285, zero_current_loc
 844 022e 9B18     		adds	r3, r3, r2	@ tmp284, tmp285, D.7152
 845 0230 0E93     		str	r3, [sp, #56]	@ tmp284, zero_current_loc
 476:src/main.c    **** 							i++;
 846              		.loc 2 476 0
 847 0232 3F23     		movs	r3, #63	@ tmp286,
 848 0234 6B44     		add	r3, r3, sp	@ tmp286,
 849 0236 1A78     		ldrb	r2, [r3]	@ D.7150, i
 850 0238 3F23     		movs	r3, #63	@ tmp287,
 851 023a 6B44     		add	r3, r3, sp	@ tmp287,
 852 023c 0132     		adds	r2, r2, #1	@ tmp288,
ARM GAS  /tmp/ccnmAMP4.s 			page 42


 853 023e 1A70     		strb	r2, [r3]	@ tmp289, i
 477:src/main.c    **** 							timer_standby = 2;	//cargo valor zero_current en 64ms
 854              		.loc 2 477 0
 855 0240 264B     		ldr	r3, .L45+28	@ tmp290,
 856 0242 0222     		movs	r2, #2	@ tmp291,
 857 0244 1A80     		strh	r2, [r3]	@ tmp292, timer_standby
 478:src/main.c    **** 						}
 479:src/main.c    **** 					}
 480:src/main.c    **** 					else
 481:src/main.c    **** 					{
 482:src/main.c    **** 						zero_current_loc >>= 5;
 483:src/main.c    **** 						// zero_current_loc >>= 2;
 484:src/main.c    **** 						zero_current = zero_current_loc;
 485:src/main.c    **** 						main_state = LAMP_ON;
 486:src/main.c    **** 						RELAY_ON;
 487:src/main.c    **** 						i = 0;
 488:src/main.c    **** 					}
 489:src/main.c    **** 				}
 490:src/main.c    **** 				break;
 858              		.loc 2 490 0
 859 0246 04E1     		b	.L43	@
 860              	.L33:
 482:src/main.c    **** 						// zero_current_loc >>= 2;
 861              		.loc 2 482 0
 862 0248 0E9B     		ldr	r3, [sp, #56]	@ tmp294, zero_current_loc
 863 024a 5B09     		lsrs	r3, r3, #5	@ tmp293, tmp294,
 864 024c 0E93     		str	r3, [sp, #56]	@ tmp293, zero_current_loc
 484:src/main.c    **** 						main_state = LAMP_ON;
 865              		.loc 2 484 0
 866 024e 0E9B     		ldr	r3, [sp, #56]	@ tmp296, zero_current_loc
 867 0250 9AB2     		uxth	r2, r3	@ D.7148, tmp295
 868 0252 294B     		ldr	r3, .L45+56	@ tmp297,
 869 0254 1A80     		strh	r2, [r3]	@ tmp298, zero_current
 485:src/main.c    **** 						RELAY_ON;
 870              		.loc 2 485 0
 871 0256 3723     		movs	r3, #55	@ tmp299,
 872 0258 6B44     		add	r3, r3, sp	@ tmp299,
 873 025a 0722     		movs	r2, #7	@ tmp300,
 874 025c 1A70     		strb	r2, [r3]	@ tmp301, main_state
 486:src/main.c    **** 						i = 0;
 875              		.loc 2 486 0
 876 025e 9023     		movs	r3, #144	@ tmp406,
 877 0260 DB05     		lsls	r3, r3, #23	@ D.7147, tmp406,
 878 0262 8022     		movs	r2, #128	@ tmp407,
 879 0264 1201     		lsls	r2, r2, #4	@ tmp302, tmp407,
 880 0266 9A61     		str	r2, [r3, #24]	@ tmp302, _126->BSRR
 487:src/main.c    **** 					}
 881              		.loc 2 487 0
 882 0268 3F23     		movs	r3, #63	@ tmp303,
 883 026a 6B44     		add	r3, r3, sp	@ tmp303,
 884 026c 0022     		movs	r2, #0	@ tmp304,
 885 026e 1A70     		strb	r2, [r3]	@ tmp305, i
 886              		.loc 2 490 0
 887 0270 EFE0     		b	.L43	@
 888              	.L29:
 491:src/main.c    **** 
 492:src/main.c    **** 			case LAMP_OFF:
ARM GAS  /tmp/ccnmAMP4.s 			page 43


 493:src/main.c    **** 				break;
 494:src/main.c    **** 
 495:src/main.c    **** 			case LAMP_ON:
 496:src/main.c    **** 				if (!timer_standby)
 889              		.loc 2 496 0
 890 0272 1A4B     		ldr	r3, .L45+28	@ tmp306,
 891 0274 1B88     		ldrh	r3, [r3]	@ tmp307, timer_standby
 892 0276 9BB2     		uxth	r3, r3	@ D.7148, tmp307
 893 0278 002B     		cmp	r3, #0	@ D.7148,
 894 027a 00D0     		beq	.LCB550	@
 895 027c EBE0     		b	.L44	@long jump	@
 896              	.LCB550:
 497:src/main.c    **** 				{
 498:src/main.c    **** 					if (i < SIZEOF_POWER_VECT)
 897              		.loc 2 498 0
 898 027e 3F23     		movs	r3, #63	@ tmp308,
 899 0280 6B44     		add	r3, r3, sp	@ tmp308,
 900 0282 1B78     		ldrb	r3, [r3]	@ tmp309, i
 901 0284 092B     		cmp	r3, #9	@ tmp309,
 902 0286 3BD8     		bhi	.L36	@,
 499:src/main.c    **** 					{
 500:src/main.c    **** 						power_vect[i] = PowerCalc (GetVGrid(), GetIGrid());
 903              		.loc 2 500 0
 904 0288 3F23     		movs	r3, #63	@ tmp310,
 905 028a 6B44     		add	r3, r3, sp	@ tmp310,
 906 028c 1C78     		ldrb	r4, [r3]	@ D.7149, i
 907 028e FFF7FEFF 		bl	GetVGrid	@
 908 0292 0300     		movs	r3, r0	@ tmp311,
 909 0294 1D00     		movs	r5, r3	@ D.7148, tmp312
 910 0296 FFF7FEFF 		bl	GetIGrid	@
 911 029a 0300     		movs	r3, r0	@ tmp313,
 912 029c 1900     		movs	r1, r3	@, D.7148
 913 029e 2800     		movs	r0, r5	@, D.7148
 914 02a0 FFF7FEFF 		bl	PowerCalc	@
 915 02a4 0300     		movs	r3, r0	@ tmp315,
 916 02a6 1900     		movs	r1, r3	@ D.7148, tmp316
 917 02a8 144B     		ldr	r3, .L45+60	@ tmp317,
 918 02aa 6200     		lsls	r2, r4, #1	@ tmp318, D.7149,
 919 02ac D152     		strh	r1, [r2, r3]	@ tmp319, power_vect
 501:src/main.c    **** 						i++;
 920              		.loc 2 501 0
 921 02ae 3F23     		movs	r3, #63	@ tmp320,
 922 02b0 6B44     		add	r3, r3, sp	@ tmp320,
 923 02b2 1A78     		ldrb	r2, [r3]	@ D.7150, i
 924 02b4 3F23     		movs	r3, #63	@ tmp321,
 925 02b6 6B44     		add	r3, r3, sp	@ tmp321,
 926 02b8 0132     		adds	r2, r2, #1	@ tmp322,
 927 02ba 1A70     		strb	r2, [r3]	@ tmp323, i
 928 02bc A4E0     		b	.L37	@
 929              	.L46:
 930 02be C046     		.align	2
 931              	.L45:
 932 02c0 80BB0000 		.word	48000
 933 02c4 00000000 		.word	.LC0
 934 02c8 28000000 		.word	.LC2
 935 02cc 38000000 		.word	.LC4
 936 02d0 4C000000 		.word	.LC6
ARM GAS  /tmp/ccnmAMP4.s 			page 44


 937 02d4 64000000 		.word	.LC8
 938 02d8 74000000 		.word	.LC10
 939 02dc 00000000 		.word	timer_standby
 940 02e0 00000000 		.word	.L25
 941 02e4 00240140 		.word	1073816576
 942 02e8 00000000 		.word	seq_ready
 943 02ec 90000000 		.word	.LC15
 944 02f0 9C000000 		.word	.LC17
 945 02f4 00000000 		.word	adc_ch
 946 02f8 00000000 		.word	zero_current
 947 02fc 00000000 		.word	power_vect
 948              	.L36:
 502:src/main.c    **** 					}
 503:src/main.c    **** 					else
 504:src/main.c    **** 					{
 505:src/main.c    **** 						//termine de cargar el vector, muestro info
 506:src/main.c    **** 						power = PowerCalcMean8(power_vect);
 949              		.loc 2 506 0
 950 0300 08AC     		add	r4, sp, #32	@ tmp324,,
 951 0302 5E4B     		ldr	r3, .L47	@ tmp325,
 952 0304 1800     		movs	r0, r3	@, tmp325
 953 0306 FFF7FEFF 		bl	PowerCalcMean8	@
 954 030a 0300     		movs	r3, r0	@ tmp326,
 955 030c 2380     		strh	r3, [r4]	@ tmp328, power
 507:src/main.c    **** 						power_2secs_acum += power;
 956              		.loc 2 507 0
 957 030e 08AB     		add	r3, sp, #32	@ tmp329,,
 958 0310 1A88     		ldrh	r2, [r3]	@ D.7152, power
 959 0312 5B4B     		ldr	r3, .L47+4	@ tmp330,
 960 0314 1B68     		ldr	r3, [r3]	@ D.7152, power_2secs_acum
 961 0316 D218     		adds	r2, r2, r3	@ D.7152, D.7152, D.7152
 962 0318 594B     		ldr	r3, .L47+4	@ tmp331,
 963 031a 1A60     		str	r2, [r3]	@ D.7152, power_2secs_acum
 508:src/main.c    **** 						power_2secs_index++;
 964              		.loc 2 508 0
 965 031c 594B     		ldr	r3, .L47+8	@ tmp332,
 966 031e 1B78     		ldrb	r3, [r3]	@ D.7150, power_2secs_index
 967 0320 0133     		adds	r3, r3, #1	@ tmp333,
 968 0322 DAB2     		uxtb	r2, r3	@ D.7150, tmp333
 969 0324 574B     		ldr	r3, .L47+8	@ tmp334,
 970 0326 1A70     		strb	r2, [r3]	@ tmp335, power_2secs_index
 509:src/main.c    **** 						fcalc = power;
 971              		.loc 2 509 0
 972 0328 08AB     		add	r3, sp, #32	@ tmp336,,
 973 032a 1B88     		ldrh	r3, [r3]	@ tmp337, power
 974 032c 1800     		movs	r0, r3	@, tmp337
 975 032e FFF7FEFF 		bl	__aeabi_ui2f	@
 976 0332 031C     		adds	r3, r0, #0	@ tmp338,
 977 0334 0C93     		str	r3, [sp, #48]	@ tmp338, fcalc
 510:src/main.c    **** 						fcalc = power * KW;
 978              		.loc 2 510 0
 979 0336 08AB     		add	r3, sp, #32	@ tmp339,,
 980 0338 1B88     		ldrh	r3, [r3]	@ D.7149, power
 981 033a 1800     		movs	r0, r3	@, D.7149
 982 033c FFF7FEFF 		bl	__aeabi_i2d	@
 983 0340 514A     		ldr	r2, .L47+12	@,
 984 0342 524B     		ldr	r3, .L47+16	@,
ARM GAS  /tmp/ccnmAMP4.s 			page 45


 985 0344 FFF7FEFF 		bl	__aeabi_dmul	@
 986 0348 0300     		movs	r3, r0	@ tmp340,
 987 034a 0C00     		movs	r4, r1	@,
 988 034c 1800     		movs	r0, r3	@, D.7153
 989 034e 2100     		movs	r1, r4	@, D.7153
 990 0350 FFF7FEFF 		bl	__aeabi_d2f	@
 991 0354 031C     		adds	r3, r0, #0	@ tmp341,
 992 0356 0C93     		str	r3, [sp, #48]	@ tmp341, fcalc
 511:src/main.c    **** 						power_int = (unsigned short) fcalc;
 993              		.loc 2 511 0
 994 0358 1E24     		movs	r4, #30	@ tmp342,
 995 035a 6C44     		add	r4, r4, sp	@ tmp342,
 996 035c 0C98     		ldr	r0, [sp, #48]	@, fcalc
 997 035e FFF7FEFF 		bl	__aeabi_f2uiz	@
 998 0362 0300     		movs	r3, r0	@ tmp343,
 999 0364 2380     		strh	r3, [r4]	@ tmp344, power_int
 512:src/main.c    **** 						fcalc = fcalc - power_int;
 1000              		.loc 2 512 0
 1001 0366 1E23     		movs	r3, #30	@ tmp345,
 1002 0368 6B44     		add	r3, r3, sp	@ tmp345,
 1003 036a 1B88     		ldrh	r3, [r3]	@ D.7149, power_int
 1004 036c 1800     		movs	r0, r3	@, D.7149
 1005 036e FFF7FEFF 		bl	__aeabi_i2f	@
 1006 0372 031C     		adds	r3, r0, #0	@ D.7154,
 1007 0374 191C     		adds	r1, r3, #0	@, D.7154
 1008 0376 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1009 0378 FFF7FEFF 		bl	__aeabi_fsub	@
 1010 037c 031C     		adds	r3, r0, #0	@ tmp346,
 1011 037e 0C93     		str	r3, [sp, #48]	@ tmp346, fcalc
 513:src/main.c    **** 						fcalc = fcalc * 100;
 1012              		.loc 2 513 0
 1013 0380 4349     		ldr	r1, .L47+20	@,
 1014 0382 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1015 0384 FFF7FEFF 		bl	__aeabi_fmul	@
 1016 0388 031C     		adds	r3, r0, #0	@ tmp347,
 1017 038a 0C93     		str	r3, [sp, #48]	@ tmp347, fcalc
 514:src/main.c    **** 						power_dec = (unsigned short) fcalc;
 1018              		.loc 2 514 0
 1019 038c 07AC     		add	r4, sp, #28	@ tmp348,,
 1020 038e 0C98     		ldr	r0, [sp, #48]	@, fcalc
 1021 0390 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1022 0394 0300     		movs	r3, r0	@ tmp349,
 1023 0396 2380     		strh	r3, [r4]	@ tmp350, power_dec
 515:src/main.c    **** 						sprintf(s_lcd, "p: %3d.%02d d: %d\r\n", power_int, power_dec, power);
 1024              		.loc 2 515 0
 1025 0398 1E23     		movs	r3, #30	@ tmp351,
 1026 039a 6B44     		add	r3, r3, sp	@ tmp351,
 1027 039c 1A88     		ldrh	r2, [r3]	@ D.7149, power_int
 1028 039e 07AB     		add	r3, sp, #28	@ tmp352,,
 1029 03a0 1C88     		ldrh	r4, [r3]	@ D.7149, power_dec
 1030 03a2 08AB     		add	r3, sp, #32	@ tmp353,,
 1031 03a4 1B88     		ldrh	r3, [r3]	@ D.7149, power
 1032 03a6 3B49     		ldr	r1, .L47+24	@ tmp354,
 1033 03a8 02A8     		add	r0, sp, #8	@ tmp355,,
 1034 03aa 0093     		str	r3, [sp]	@ D.7149,
 1035 03ac 2300     		movs	r3, r4	@, D.7149
 1036 03ae FFF7FEFF 		bl	sprintf	@
ARM GAS  /tmp/ccnmAMP4.s 			page 46


 516:src/main.c    **** 
 517:src/main.c    **** 						// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, V_Sense, I_Sense);
 518:src/main.c    **** 						// sprintf(s_lcd, "z: %d, v: %d, i: %d\r\n", zero_current, GetVGrid(), GetIGrid());
 519:src/main.c    **** 						//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 520:src/main.c    **** 						//TODO: para debug no envio datos
 521:src/main.c    **** 						// Usart2Send(s_lcd);
 522:src/main.c    **** 						i = 0;
 1037              		.loc 2 522 0
 1038 03b2 3F23     		movs	r3, #63	@ tmp356,
 1039 03b4 6B44     		add	r3, r3, sp	@ tmp356,
 1040 03b6 0022     		movs	r2, #0	@ tmp357,
 1041 03b8 1A70     		strb	r2, [r3]	@ tmp358, i
 523:src/main.c    **** 
 524:src/main.c    **** 						if (power_2secs_index >= 30)	//1 a 30 es el contador
 1042              		.loc 2 524 0
 1043 03ba 324B     		ldr	r3, .L47+8	@ tmp359,
 1044 03bc 1B78     		ldrb	r3, [r3]	@ D.7150, power_2secs_index
 1045 03be 1D2B     		cmp	r3, #29	@ D.7150,
 1046 03c0 10D9     		bls	.L38	@,
 525:src/main.c    **** 						{
 526:src/main.c    **** 							power_2secs_index = 0;
 1047              		.loc 2 526 0
 1048 03c2 304B     		ldr	r3, .L47+8	@ tmp360,
 1049 03c4 0022     		movs	r2, #0	@ tmp361,
 1050 03c6 1A70     		strb	r2, [r3]	@ tmp362, power_2secs_index
 527:src/main.c    **** 							power_minutes += power;		//TODO: supongo todo el minuto el mismo consumo ver power_2secs_acu
 1051              		.loc 2 527 0
 1052 03c8 334B     		ldr	r3, .L47+28	@ tmp363,
 1053 03ca 1A88     		ldrh	r2, [r3]	@ D.7148, power_minutes
 1054 03cc 08AB     		add	r3, sp, #32	@ tmp364,,
 1055 03ce 1B88     		ldrh	r3, [r3]	@ tmp365, power
 1056 03d0 D318     		adds	r3, r2, r3	@ tmp366, D.7148, tmp365
 1057 03d2 9AB2     		uxth	r2, r3	@ D.7148, tmp366
 1058 03d4 304B     		ldr	r3, .L47+28	@ tmp367,
 1059 03d6 1A80     		strh	r2, [r3]	@ tmp368, power_minutes
 528:src/main.c    **** 							power_minutes_index++;
 1060              		.loc 2 528 0
 1061 03d8 304B     		ldr	r3, .L47+32	@ tmp369,
 1062 03da 1B78     		ldrb	r3, [r3]	@ D.7150, power_minutes_index
 1063 03dc 0133     		adds	r3, r3, #1	@ tmp370,
 1064 03de DAB2     		uxtb	r2, r3	@ D.7150, tmp370
 1065 03e0 2E4B     		ldr	r3, .L47+32	@ tmp371,
 1066 03e2 1A70     		strb	r2, [r3]	@ tmp372, power_minutes_index
 1067              	.L38:
 529:src/main.c    **** 						}
 530:src/main.c    **** 
 531:src/main.c    **** 						if (power_minutes_index >= 60)	//1 a 60 es el contador
 1068              		.loc 2 531 0
 1069 03e4 2D4B     		ldr	r3, .L47+32	@ tmp373,
 1070 03e6 1B78     		ldrb	r3, [r3]	@ D.7150, power_minutes_index
 1071 03e8 3B2B     		cmp	r3, #59	@ D.7150,
 1072 03ea 0DD9     		bls	.L37	@,
 532:src/main.c    **** 						{
 533:src/main.c    **** 							power_minutes_index = 0;
 1073              		.loc 2 533 0
 1074 03ec 2B4B     		ldr	r3, .L47+32	@ tmp374,
 1075 03ee 0022     		movs	r2, #0	@ tmp375,
ARM GAS  /tmp/ccnmAMP4.s 			page 47


 1076 03f0 1A70     		strb	r2, [r3]	@ tmp376, power_minutes_index
 534:src/main.c    **** 							power_hours += power_minutes;		//TODO: OJO se supuso todo el minuto el mismo consumo
 1077              		.loc 2 534 0
 1078 03f2 2B4B     		ldr	r3, .L47+36	@ tmp377,
 1079 03f4 1A88     		ldrh	r2, [r3]	@ D.7148, power_hours
 1080 03f6 284B     		ldr	r3, .L47+28	@ tmp378,
 1081 03f8 1B88     		ldrh	r3, [r3]	@ D.7148, power_minutes
 1082 03fa D318     		adds	r3, r2, r3	@ tmp379, D.7148, D.7148
 1083 03fc 9AB2     		uxth	r2, r3	@ D.7148, tmp379
 1084 03fe 284B     		ldr	r3, .L47+36	@ tmp380,
 1085 0400 1A80     		strh	r2, [r3]	@ tmp381, power_hours
 535:src/main.c    **** 							power_minutes = 0;
 1086              		.loc 2 535 0
 1087 0402 254B     		ldr	r3, .L47+28	@ tmp382,
 1088 0404 0022     		movs	r2, #0	@ tmp383,
 1089 0406 1A80     		strh	r2, [r3]	@ tmp384, power_minutes
 1090              	.L37:
 536:src/main.c    **** 						}
 537:src/main.c    **** 
 538:src/main.c    **** 
 539:src/main.c    **** 					}
 540:src/main.c    **** 					timer_standby = 200;		//10 veces 200ms
 1091              		.loc 2 540 0
 1092 0408 264B     		ldr	r3, .L47+40	@ tmp385,
 1093 040a C822     		movs	r2, #200	@ tmp386,
 1094 040c 1A80     		strh	r2, [r3]	@ tmp387, timer_standby
 541:src/main.c    **** 
 542:src/main.c    **** 					if ((FuncsGSMReady() == resp_gsm_ok) && (!sended))
 1095              		.loc 2 542 0
 1096 040e FFF7FEFF 		bl	FuncsGSMReady	@
 1097 0412 031E     		subs	r3, r0, #0	@ tmp388,,
 1098 0414 012B     		cmp	r3, #1	@ tmp388,
 1099 0416 1ED1     		bne	.L44	@,
 1100              		.loc 2 542 0 is_stmt 0 discriminator 1
 1101 0418 3623     		movs	r3, #54	@ tmp390,
 1102 041a 6B44     		add	r3, r3, sp	@ tmp390,
 1103 041c 1B78     		ldrb	r3, [r3]	@ tmp391, sended
 1104 041e 002B     		cmp	r3, #0	@ tmp391,
 1105 0420 19D1     		bne	.L44	@,
 543:src/main.c    **** 					{
 544:src/main.c    **** 						Usart2Send((char *) (const char *) "GSM Listo!\r\n");
 1106              		.loc 2 544 0 is_stmt 1
 1107 0422 214B     		ldr	r3, .L47+44	@ tmp392,
 1108 0424 1800     		movs	r0, r3	@, tmp392
 1109 0426 FFF7FEFF 		bl	Usart2Send	@
 545:src/main.c    **** 						FuncsGSMSendSMS("Hola", "1145376762");
 1110              		.loc 2 545 0
 1111 042a 204A     		ldr	r2, .L47+48	@ tmp393,
 1112 042c 204B     		ldr	r3, .L47+52	@ tmp394,
 1113 042e 1100     		movs	r1, r2	@, tmp393
 1114 0430 1800     		movs	r0, r3	@, tmp394
 1115 0432 FFF7FEFF 		bl	FuncsGSMSendSMS	@
 546:src/main.c    **** 						sended = 1;
 1116              		.loc 2 546 0
 1117 0436 3623     		movs	r3, #54	@ tmp395,
 1118 0438 6B44     		add	r3, r3, sp	@ tmp395,
 1119 043a 0122     		movs	r2, #1	@ tmp396,
ARM GAS  /tmp/ccnmAMP4.s 			page 48


 1120 043c 1A70     		strb	r2, [r3]	@ tmp397, sended
 547:src/main.c    **** 					}
 548:src/main.c    **** 
 549:src/main.c    **** 					// fcalc = voltage;
 550:src/main.c    **** 					// fcalc = fcalc * KV;
 551:src/main.c    **** 					// volt_int = (short) fcalc;
 552:src/main.c    **** 					// fcalc = fcalc - volt_int;
 553:src/main.c    **** 					// fcalc = fcalc * 100;
 554:src/main.c    **** 					// volt_dec = (short) fcalc;
 555:src/main.c    **** 					//
 556:src/main.c    **** 					// sprintf(str, "%2d.%02d", volt_int, volt_dec);
 557:src/main.c    **** 					//
 558:src/main.c    **** 					// //sprintf(str, "%4d        ", voltage);
 559:src/main.c    **** 					// LCDTransmitStr(str);
 560:src/main.c    **** 
 561:src/main.c    **** 				}
 562:src/main.c    **** 
 563:src/main.c    **** 				break;
 1121              		.loc 2 563 0
 1122 043e 0AE0     		b	.L44	@
 1123              	.L23:
 564:src/main.c    **** 
 565:src/main.c    **** 			default:
 566:src/main.c    **** 				main_state = MAIN_INIT;
 1124              		.loc 2 566 0
 1125 0440 3723     		movs	r3, #55	@ tmp398,
 1126 0442 6B44     		add	r3, r3, sp	@ tmp398,
 1127 0444 0022     		movs	r2, #0	@ tmp399,
 1128 0446 1A70     		strb	r2, [r3]	@ tmp400, main_state
 567:src/main.c    **** 				break;
 1129              		.loc 2 567 0
 1130 0448 06E0     		b	.L30	@
 1131              	.L41:
 493:src/main.c    **** 
 1132              		.loc 2 493 0
 1133 044a C046     		nop
 1134 044c 04E0     		b	.L30	@
 1135              	.L42:
 464:src/main.c    **** 
 1136              		.loc 2 464 0
 1137 044e C046     		nop
 1138 0450 02E0     		b	.L30	@
 1139              	.L43:
 490:src/main.c    **** 
 1140              		.loc 2 490 0
 1141 0452 C046     		nop
 1142 0454 00E0     		b	.L30	@
 1143              	.L44:
 563:src/main.c    **** 
 1144              		.loc 2 563 0
 1145 0456 C046     		nop
 1146              	.L30:
 568:src/main.c    **** 		}
 569:src/main.c    **** 
 570:src/main.c    **** 		//Cosas que dependen de las muestras
 571:src/main.c    **** 		if (seq_ready)
 1147              		.loc 2 571 0
ARM GAS  /tmp/ccnmAMP4.s 			page 49


 1148 0458 164B     		ldr	r3, .L47+56	@ tmp401,
 1149 045a 1B78     		ldrb	r3, [r3]	@ tmp402, seq_ready
 1150 045c DBB2     		uxtb	r3, r3	@ D.7150, tmp402
 1151 045e 002B     		cmp	r3, #0	@ D.7150,
 1152 0460 06D0     		beq	.L39	@,
 572:src/main.c    **** 		{
 573:src/main.c    **** 			seq_ready = 0;
 1153              		.loc 2 573 0
 1154 0462 144B     		ldr	r3, .L47+56	@ tmp403,
 1155 0464 0022     		movs	r2, #0	@ tmp404,
 1156 0466 1A70     		strb	r2, [r3]	@ tmp405, seq_ready
 574:src/main.c    **** 			UpdateVGrid ();
 1157              		.loc 2 574 0
 1158 0468 FFF7FEFF 		bl	UpdateVGrid	@
 575:src/main.c    **** 			UpdateIGrid ();
 1159              		.loc 2 575 0
 1160 046c FFF7FEFF 		bl	UpdateIGrid	@
 1161              	.L39:
 576:src/main.c    **** 		}
 577:src/main.c    **** 
 578:src/main.c    **** 		//Cosas que no dependen del estado del programa
 579:src/main.c    **** 		UpdateRelay ();
 1162              		.loc 2 579 0
 1163 0470 FFF7FEFF 		bl	UpdateRelay	@
 580:src/main.c    **** 		// UpdatePhotoTransistor();
 581:src/main.c    **** #ifdef USE_GSM
 582:src/main.c    **** 		FuncsGSM();
 1164              		.loc 2 582 0
 1165 0474 FFF7FEFF 		bl	FuncsGSM	@
 583:src/main.c    **** #endif
 584:src/main.c    **** 	}	//end while 1
 1166              		.loc 2 584 0
 1167 0478 88E6     		b	.L40	@
 1168              	.L48:
 1169 047a C046     		.align	2
 1170              	.L47:
 1171 047c 00000000 		.word	power_vect
 1172 0480 00000000 		.word	power_2secs_acum
 1173 0484 00000000 		.word	power_2secs_index
 1174 0488 90F7AA95 		.word	-1783957616
 1175 048c 09BF843F 		.word	1065664265
 1176 0490 0000C842 		.word	1120403456
 1177 0494 C4000000 		.word	.LC24
 1178 0498 00000000 		.word	power_minutes
 1179 049c 00000000 		.word	power_minutes_index
 1180 04a0 00000000 		.word	power_hours
 1181 04a4 00000000 		.word	timer_standby
 1182 04a8 D8000000 		.word	.LC29
 1183 04ac E8000000 		.word	.LC31
 1184 04b0 F4000000 		.word	.LC33
 1185 04b4 00000000 		.word	seq_ready
 1186              		.cfi_endproc
 1187              	.LFE20:
 1188              		.size	main, .-main
 1189              		.section	.rodata
 1190 00f9 000000   		.align	2
 1191              	.LC35:
ARM GAS  /tmp/ccnmAMP4.s 			page 50


 1192 00fc 7B226422 		.ascii	"{\"d\":{\"myName\":\"Nucleo\"\000"
 1192      3A7B226D 
 1192      794E616D 
 1192      65223A22 
 1192      4E75636C 
 1193              		.align	2
 1194              	.LC37:
 1195 0114 2C22415F 		.ascii	",\"A_Temperature\":%lu.%lu\000"
 1195      54656D70 
 1195      65726174 
 1195      75726522 
 1195      3A256C75 
 1196 012d 000000   		.align	2
 1197              	.LC39:
 1198 0130 2C22415F 		.ascii	",\"A_Humidity\":%lu.%lu\000"
 1198      48756D69 
 1198      64697479 
 1198      223A256C 
 1198      752E256C 
 1199 0146 0000     		.align	2
 1200              	.LC41:
 1201 0148 2C22415F 		.ascii	",\"A_Pressure\":%lu.%lu\000"
 1201      50726573 
 1201      73757265 
 1201      223A256C 
 1201      752E256C 
 1202 015e 0000     		.align	2
 1203              	.LC43:
 1204 0160 7D7D00   		.ascii	"}}\000"
 1205              		.section	.text.prepare_json_pkt,"ax",%progbits
 1206              		.align	2
 1207              		.global	prepare_json_pkt
 1208              		.code	16
 1209              		.thumb_func
 1210              		.type	prepare_json_pkt, %function
 1211              	prepare_json_pkt:
 1212              	.LFB21:
 585:src/main.c    **** 
 586:src/main.c    **** //--- FIN Programa de pruebas I meas -----
 587:src/main.c    **** 
 588:src/main.c    **** 	while (1)
 589:src/main.c    **** 	{
 590:src/main.c    **** 		switch (main_state)
 591:src/main.c    **** 		{
 592:src/main.c    **** 			case MAIN_INIT:
 593:src/main.c    **** 				RelayOff();
 594:src/main.c    **** 				LED_OFF;
 595:src/main.c    **** 				FillPhotoBuffer();
 596:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 597:src/main.c    **** 				FillTempBuffer();
 598:src/main.c    **** #endif
 599:src/main.c    **** #ifdef WITH_1_TO_10_VOLTS
 600:src/main.c    **** 				Update_TIM3_CH1 (0);
 601:src/main.c    **** #endif
 602:src/main.c    **** 				main_state = SYNCHRO_ADC;
 603:src/main.c    **** #ifdef ADC_WITH_INT
 604:src/main.c    **** 				seq_ready = 0;
ARM GAS  /tmp/ccnmAMP4.s 			page 51


 605:src/main.c    **** #endif
 606:src/main.c    **** 				break;
 607:src/main.c    **** 
 608:src/main.c    **** 			case SYNCHRO_ADC:
 609:src/main.c    **** #ifdef ADC_WITH_INT
 610:src/main.c    **** 				if (seq_ready)
 611:src/main.c    **** #endif
 612:src/main.c    **** 				{
 613:src/main.c    **** 					main_state = SET_ZERO_CURRENT;
 614:src/main.c    **** 				}
 615:src/main.c    **** 				break;
 616:src/main.c    **** 
 617:src/main.c    **** 			case SET_ZERO_CURRENT:
 618:src/main.c    **** 				main_state = LAMP_OFF;
 619:src/main.c    **** 				break;
 620:src/main.c    **** 
 621:src/main.c    **** 			case LAMP_OFF:
 622:src/main.c    **** 				if (!tt_relay_on_off)
 623:src/main.c    **** 				{
 624:src/main.c    **** 					if (GetPhoto() > VOLTAGE_PHOTO_ON)
 625:src/main.c    **** 					{
 626:src/main.c    **** 						main_state = LAMP_ON;
 627:src/main.c    **** 						tt_relay_on_off = 10000;
 628:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 629:src/main.c    **** 						Update_TIM3_CH1 (PWM_MIN);
 630:src/main.c    **** 	#endif
 631:src/main.c    **** 
 632:src/main.c    **** 						RelayOn();
 633:src/main.c    **** 						LED_ON;
 634:src/main.c    **** 	#ifdef WITH_HYST
 635:src/main.c    **** 						hours = 0;
 636:src/main.c    **** 	#endif
 637:src/main.c    **** 					}
 638:src/main.c    **** 				}
 639:src/main.c    **** 				break;
 640:src/main.c    **** 
 641:src/main.c    **** 			case LAMP_ON:
 642:src/main.c    **** 				if (!tt_relay_on_off)
 643:src/main.c    **** 				{
 644:src/main.c    **** 	#ifdef WITH_HYST		//con Hysteresis apaga casi en el mismo punto en el que prende
 645:src/main.c    **** 					hyst = GetHysteresis (hours);
 646:src/main.c    **** 					if (GetPhoto() < (VOLTAGE_PHOTO_ON - hyst))
 647:src/main.c    **** 	#else
 648:src/main.c    **** 					if (GetPhoto() < VOLTAGE_PHOTO_OFF)
 649:src/main.c    **** 	#endif
 650:src/main.c    **** 					{
 651:src/main.c    **** 						main_state = LAMP_OFF;
 652:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
 653:src/main.c    **** 						Update_TIM3_CH1 (0);
 654:src/main.c    **** 	#endif
 655:src/main.c    **** 						tt_relay_on_off = 10000;
 656:src/main.c    **** 						RelayOff();
 657:src/main.c    **** 						LED_OFF;
 658:src/main.c    **** 					}
 659:src/main.c    **** 				}
 660:src/main.c    **** 
 661:src/main.c    **** 	#ifdef WITH_1_TO_10_VOLTS
ARM GAS  /tmp/ccnmAMP4.s 			page 52


 662:src/main.c    **** 				if (main_state == LAMP_ON)
 663:src/main.c    **** 				{
 664:src/main.c    **** 					one_to_ten = GetNew1to10 (GetPhoto());
 665:src/main.c    **** 					Update_TIM3_CH1 (one_to_ten);
 666:src/main.c    **** 				}
 667:src/main.c    **** 	#endif
 668:src/main.c    **** 				break;
 669:src/main.c    **** 
 670:src/main.c    **** 			default:
 671:src/main.c    **** 				main_state = MAIN_INIT;
 672:src/main.c    **** 				break;
 673:src/main.c    **** 		}
 674:src/main.c    **** 
 675:src/main.c    **** 		if (!timer_standby)
 676:src/main.c    **** 		{
 677:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 678:src/main.c    **** 			sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), GetPhoto());
 679:src/main.c    **** #else
 680:src/main.c    **** 			sprintf(s_lcd, "photo: %d\r\n", GetPhoto());
 681:src/main.c    **** #endif
 682:src/main.c    **** 			//sprintf(s_lcd, "temp: %d, photo: %d\r\n", GetTemp(), ReadADC1_SameSampleTime (ADC_CH1));
 683:src/main.c    **** 			Usart2Send(s_lcd);
 684:src/main.c    **** 			timer_standby = 2000;
 685:src/main.c    **** 		}
 686:src/main.c    **** 
 687:src/main.c    **** 		//Cosas que no dependen del estado del programa
 688:src/main.c    **** 		UpdateRelay ();
 689:src/main.c    **** #ifdef WITH_TEMP_CONTROL
 690:src/main.c    **** 		UpdateTemp();
 691:src/main.c    **** #endif
 692:src/main.c    **** 		UpdatePhotoTransistor();
 693:src/main.c    **** 	}	//end while 1
 694:src/main.c    **** //---------- Fin Programa de Procduccion Redonda Basic--------//
 695:src/main.c    **** #endif	//USE_REDONDA_BASIC
 696:src/main.c    **** 
 697:src/main.c    **** 
 698:src/main.c    **** #ifdef USE_MQTT_LIB
 699:src/main.c    **** 	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 700:src/main.c    **** 	int rc = 0;
 701:src/main.c    **** 	char buf[200];
 702:src/main.c    **** 	MQTTString topicString = MQTTString_initializer;
 703:src/main.c    **** 	char* payload = "mypayload";
 704:src/main.c    **** 	int payloadlen = strlen(payload);int buflen = sizeof(buf);
 705:src/main.c    **** 	int len = 0;
 706:src/main.c    **** 
 707:src/main.c    **** 	data.clientID.cstring = "me";
 708:src/main.c    **** 	data.keepAliveInterval = 20;
 709:src/main.c    **** 	data.cleansession = 1;
 710:src/main.c    **** 	len = MQTTSerialize_connect(buf, buflen, &data); /* 1 */
 711:src/main.c    **** 
 712:src/main.c    **** 	topicString.cstring = "mytopic";
 713:src/main.c    **** 	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen
 714:src/main.c    **** 
 715:src/main.c    **** 	len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
 716:src/main.c    **** 	//falta abrir puerto
 717:src/main.c    **** 	//falta enviar al socket
 718:src/main.c    **** 	//falta cerrar socket
ARM GAS  /tmp/ccnmAMP4.s 			page 53


 719:src/main.c    **** #endif
 720:src/main.c    **** 
 721:src/main.c    **** //	//---------- Prueba USART2 --------//
 722:src/main.c    **** //
 723:src/main.c    **** //    while( 1 )
 724:src/main.c    **** //    {
 725:src/main.c    **** //    	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 726:src/main.c    **** //        Wait_ms(3000);
 727:src/main.c    **** //    }
 728:src/main.c    **** //
 729:src/main.c    **** //    //---------- Fin Prueba USART2 --------//
 730:src/main.c    **** 
 731:src/main.c    **** 	//---------- Prueba con GPS --------//
 732:src/main.c    **** #ifdef USE_GPS
 733:src/main.c    **** 	Usart2SendSingle('M');
 734:src/main.c    **** 	Usart2Send((char *) (const char *) "Kirno debug placa redonda\r\n");
 735:src/main.c    **** 	Wait_ms(1000);
 736:src/main.c    **** 
 737:src/main.c    **** 	Usart1Mode (USART_GPS_MODE);
 738:src/main.c    **** 
 739:src/main.c    **** 	//mando reset al gps
 740:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset de GPS\r\n");
 741:src/main.c    **** 	GPSStartResetSM ();
 742:src/main.c    **** 	while (GPSStart() != RESP_OK);
 743:src/main.c    **** 
 744:src/main.c    **** 	//mando conf al gps
 745:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GPS\r\n");
 746:src/main.c    **** 	GPSConfigResetSM ();
 747:src/main.c    **** 	while (GPSConfig() != RESP_OK);
 748:src/main.c    **** 
 749:src/main.c    **** //	//mando reset factory al gps
 750:src/main.c    **** //	Usart2Send((char *) (const char *) "GPS a Factory Default\r\n");
 751:src/main.c    **** //	GPSResetFactoryResetSM ();
 752:src/main.c    **** //	while (GPSResetFactory() != RESP_OK);
 753:src/main.c    **** 
 754:src/main.c    **** 	Usart2Send((char *) (const char *) "Espero datos de posicion\r\n");
 755:src/main.c    **** //	timer_standby = 60000;
 756:src/main.c    **** //	while( timer_standby )
 757:src/main.c    **** 	while( 1 )
 758:src/main.c    **** 	{
 759:src/main.c    **** 		if (gps_pckt_ready)
 760:src/main.c    **** 		{
 761:src/main.c    **** 			gps_pckt_ready = 0;
 762:src/main.c    **** 			//Usart2SendSingle('P');
 763:src/main.c    **** 			Usart2Send("\r\nP:\r\n");
 764:src/main.c    **** 			Usart2SendUnsigned(gps_buff, gps_pckt_bytes);
 765:src/main.c    **** 		}
 766:src/main.c    **** 
 767:src/main.c    **** 		GPSProcess();
 768:src/main.c    **** 	}
 769:src/main.c    **** #endif
 770:src/main.c    **** 	//---------- Fin Prueba con GPS --------//
 771:src/main.c    **** 
 772:src/main.c    **** 	//---------- Prueba con GSM --------//
 773:src/main.c    **** #ifdef USE_GSM
 774:src/main.c    **** 	Usart2Send((char *) (const char *) "Cambio a GSM\r\n");
 775:src/main.c    **** 
ARM GAS  /tmp/ccnmAMP4.s 			page 54


 776:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 777:src/main.c    **** 
 778:src/main.c    **** 
 779:src/main.c    **** 	//Pruebo USART1
 780:src/main.c    **** //	while (1)
 781:src/main.c    **** //	{
 782:src/main.c    **** //			Usart1SendUnsigned((unsigned char *) (const char *) "Test OK\r\n", sizeof("Test OK\r\n"));
 783:src/main.c    **** //			Wait_ms(50);
 784:src/main.c    **** //	}
 785:src/main.c    **** 
 786:src/main.c    **** 
 787:src/main.c    **** 	//mando start al gsm
 788:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 789:src/main.c    **** 	//GPSStartResetSM ();
 790:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 791:src/main.c    **** 	while (timer_standby)
 792:src/main.c    **** 	{
 793:src/main.c    **** 		i = GSM_Start();
 794:src/main.c    **** 		if (i == 2)
 795:src/main.c    **** 		{
 796:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 797:src/main.c    **** 			timer_standby = 0;
 798:src/main.c    **** 		}
 799:src/main.c    **** 
 800:src/main.c    **** 		if (i == 4)
 801:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 802:src/main.c    **** 	}
 803:src/main.c    **** 
 804:src/main.c    **** 	//mando conf al gsm
 805:src/main.c    **** 	Usart2Send((char *) (const char *) "Config al GSM\r\n");
 806:src/main.c    **** 	//GPSConfigResetSM ();
 807:src/main.c    **** 
 808:src/main.c    **** 	i = 0;
 809:src/main.c    **** 	while (i == 0)
 810:src/main.c    **** 	{
 811:src/main.c    **** 		ii = GSM_Config(1000);
 812:src/main.c    **** 
 813:src/main.c    **** 		if (ii == 2)
 814:src/main.c    **** 			i = 0;
 815:src/main.c    **** 		else if (ii > 2)
 816:src/main.c    **** 		{
 817:src/main.c    **** 			Usart2Send((const char*) "Error en configuracion\r\n");
 818:src/main.c    **** 			while (1);
 819:src/main.c    **** 		}
 820:src/main.c    **** 
 821:src/main.c    **** 		GSMProcess();
 822:src/main.c    **** 		GSMReceive ();
 823:src/main.c    **** 
 824:src/main.c    **** 		if (gsm_pckt_ready)
 825:src/main.c    **** 		{
 826:src/main.c    **** 			gsm_pckt_ready = 0;
 827:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 828:src/main.c    **** 		}
 829:src/main.c    **** 
 830:src/main.c    **** 		if (LIGHT)
 831:src/main.c    **** 			LED_ON;
 832:src/main.c    **** 		else
ARM GAS  /tmp/ccnmAMP4.s 			page 55


 833:src/main.c    **** 			LED_OFF;
 834:src/main.c    **** 	}
 835:src/main.c    **** 
 836:src/main.c    **** 
 837:src/main.c    **** 	while( 1 )
 838:src/main.c    **** 	{
 839:src/main.c    **** 		if (gsm_pckt_ready)
 840:src/main.c    **** 		{
 841:src/main.c    **** 			gsm_pckt_ready = 0;
 842:src/main.c    **** 			Usart2SendUnsigned(buffUARTGSMrx2, gsm_pckt_bytes);
 843:src/main.c    **** 		}
 844:src/main.c    **** 
 845:src/main.c    **** 		GSMProcess();
 846:src/main.c    **** 
 847:src/main.c    **** 		if (LIGHT)
 848:src/main.c    **** 			LED_ON;
 849:src/main.c    **** 
 850:src/main.c    **** 	}
 851:src/main.c    **** #endif
 852:src/main.c    **** 
 853:src/main.c    **** 	//---------- Pruebas con GSM GATEWAY --------//
 854:src/main.c    **** #ifdef USE_GSM_GATEWAY
 855:src/main.c    **** 	LED_OFF;
 856:src/main.c    **** 	for (i = 0; i < 6; i++)
 857:src/main.c    **** 	{
 858:src/main.c    **** 		if (LED)
 859:src/main.c    **** 			LED_OFF;
 860:src/main.c    **** 		else
 861:src/main.c    **** 			LED_ON;
 862:src/main.c    **** 
 863:src/main.c    **** 		Wait_ms (300);
 864:src/main.c    **** 	}
 865:src/main.c    **** 	Wait_ms (3000);
 866:src/main.c    **** 
 867:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY.. Cambio a GSM\r\n");
 868:src/main.c    **** 
 869:src/main.c    **** 	Usart1Mode (USART_GSM_MODE);
 870:src/main.c    **** 
 871:src/main.c    **** 
 872:src/main.c    **** 	//mando start al gsm
 873:src/main.c    **** 	Usart2Send((char *) (const char *) "Reset y Start GSM\r\n");
 874:src/main.c    **** 	//GPSStartResetSM ();
 875:src/main.c    **** 	timer_standby = 60000;		//doy 1 minuto para prender modulo
 876:src/main.c    **** 	while (timer_standby)
 877:src/main.c    **** 	{
 878:src/main.c    **** 		i = GSM_Start();
 879:src/main.c    **** 		if (i == 2)
 880:src/main.c    **** 		{
 881:src/main.c    **** 			Usart2Send((char *) (const char *) "Start OK\r\n");
 882:src/main.c    **** 			timer_standby = 0;
 883:src/main.c    **** 		}
 884:src/main.c    **** 		else
 885:src/main.c    **** 
 886:src/main.c    **** 		if (i == 4)
 887:src/main.c    **** 			Usart2Send((char *) (const char *) "Start NOK\r\n");
 888:src/main.c    **** 	}
 889:src/main.c    **** 
ARM GAS  /tmp/ccnmAMP4.s 			page 56


 890:src/main.c    **** 	Usart2Send((char *) (const char *) "GSM GATEWAY Listo para empezar\r\n");
 891:src/main.c    **** 
 892:src/main.c    **** 	while (1)
 893:src/main.c    **** 	{
 894:src/main.c    **** 		GSMProcess();
 895:src/main.c    **** 
 896:src/main.c    **** 		if (usart2_pckt_ready)	//deja paquete en buffUARTGSMrx2
 897:src/main.c    **** 		{
 898:src/main.c    **** 			usart2_pckt_ready = 0;
 899:src/main.c    **** 			Usart1SendUnsigned((unsigned char *) buffUARTGSMrx2, usart2_pckt_bytes);
 900:src/main.c    **** 		}
 901:src/main.c    **** 
 902:src/main.c    **** 		if (gsm_pckt_ready)		//deja paquete en buffUARTGSMrx2
 903:src/main.c    **** 		{
 904:src/main.c    **** 			gsm_pckt_ready = 0;
 905:src/main.c    **** 			Usart2SendUnsigned((unsigned char *) buffUARTGSMrx2, gsm_pckt_bytes);
 906:src/main.c    **** 		}
 907:src/main.c    **** 
 908:src/main.c    **** 		if (LIGHT)
 909:src/main.c    **** 			LED_ON;
 910:src/main.c    **** 		else
 911:src/main.c    **** 			LED_OFF;
 912:src/main.c    **** 	}
 913:src/main.c    **** #endif
 914:src/main.c    **** 
 915:src/main.c    **** 	//---------- Fin Prueba con GSM GATEWAY --------//
 916:src/main.c    **** 
 917:src/main.c    **** 
 918:src/main.c    **** 
 919:src/main.c    **** 	//---------- Prueba temp --------//
 920:src/main.c    **** 	/*
 921:src/main.c    **** 	while (1)
 922:src/main.c    **** 	{
 923:src/main.c    **** 		local_meas = GetTemp();
 924:src/main.c    **** 		if (local_meas != local_meas_last)
 925:src/main.c    **** 		{
 926:src/main.c    **** 			LED_ON;
 927:src/main.c    **** 			local_meas_last = local_meas;
 928:src/main.c    **** 			LCD_2DO_RENGLON;
 929:src/main.c    **** 			LCDTransmitStr((const char *) "Brd Temp:       ");
 930:src/main.c    **** 			local_meas = ConvertTemp(local_meas);
 931:src/main.c    **** 			sprintf(s_lcd, "%d", local_meas);
 932:src/main.c    **** 			Lcd_SetDDRAM(0x40 + 10);
 933:src/main.c    **** 			LCDTransmitStr(s_lcd);
 934:src/main.c    **** 			LED_OFF;
 935:src/main.c    **** 		}
 936:src/main.c    **** 
 937:src/main.c    **** 		UpdateTemp();
 938:src/main.c    **** 	}
 939:src/main.c    **** 	*/
 940:src/main.c    **** 	//---------- Fin prueba temp --------//
 941:src/main.c    **** 
 942:src/main.c    **** 	//---------- Prueba 1 to 10V --------//
 943:src/main.c    **** 	/*
 944:src/main.c    **** 	local_meas = 0;
 945:src/main.c    **** 	while (1)
 946:src/main.c    **** 	{
ARM GAS  /tmp/ccnmAMP4.s 			page 57


 947:src/main.c    **** 		LCD_2DO_RENGLON;
 948:src/main.c    **** 		LCDTransmitStr((const char *) "1 to 10V:       ");
 949:src/main.c    **** 		fcalc = local_meas;
 950:src/main.c    **** 		fcalc = fcalc * K_1TO10;
 951:src/main.c    **** 		one_int = (short) fcalc;
 952:src/main.c    **** 		fcalc = fcalc - one_int;
 953:src/main.c    **** 		fcalc = fcalc * 10;
 954:src/main.c    **** 		one_dec = (short) fcalc;
 955:src/main.c    **** 
 956:src/main.c    **** 		sprintf(s_lcd, "%02d.%01d V", one_int, one_dec);
 957:src/main.c    **** 		Lcd_SetDDRAM(0x40 + 10);
 958:src/main.c    **** 		LCDTransmitStr(s_lcd);
 959:src/main.c    **** 
 960:src/main.c    **** 		Wait_ms (1000);
 961:src/main.c    **** 		if (local_meas <= 255)
 962:src/main.c    **** 			local_meas = 0;
 963:src/main.c    **** 		else
 964:src/main.c    **** 			local_meas++;
 965:src/main.c    **** 	}
 966:src/main.c    **** 	*/
 967:src/main.c    **** 	//---------- Fin prueba 1 to 10V --------//
 968:src/main.c    **** 
 969:src/main.c    **** 
 970:src/main.c    **** 	//---------- Fin Programa de Procduccion --------//
 971:src/main.c    **** 
 972:src/main.c    **** 	return 0;
 973:src/main.c    **** }
 974:src/main.c    **** 
 975:src/main.c    **** //--- End of Main ---//
 976:src/main.c    **** 
 977:src/main.c    **** 
 978:src/main.c    **** 
 979:src/main.c    **** 
 980:src/main.c    **** void prepare_json_pkt (uint8_t * buffer)
 981:src/main.c    **** {
 1213              		.loc 2 981 0
 1214              		.cfi_startproc
 1215 0000 00B5     		push	{lr}	@
 1216              	.LCFI6:
 1217              		.cfi_def_cfa_offset 4
 1218              		.cfi_offset 14, -4
 1219 0002 97B0     		sub	sp, sp, #92	@,,
 1220              	.LCFI7:
 1221              		.cfi_def_cfa_offset 96
 1222 0004 0190     		str	r0, [sp, #4]	@ buffer, buffer
 982:src/main.c    ****       int32_t d1 = 1, d2 = 2, d3 = 3, d4 = 4, d5 = 5, d6 = 6;
 1223              		.loc 2 982 0
 1224 0006 0123     		movs	r3, #1	@ tmp112,
 1225 0008 1593     		str	r3, [sp, #84]	@ tmp112, d1
 1226 000a 0223     		movs	r3, #2	@ tmp113,
 1227 000c 1493     		str	r3, [sp, #80]	@ tmp113, d2
 1228 000e 0323     		movs	r3, #3	@ tmp114,
 1229 0010 1393     		str	r3, [sp, #76]	@ tmp114, d3
 1230 0012 0423     		movs	r3, #4	@ tmp115,
 1231 0014 1293     		str	r3, [sp, #72]	@ tmp115, d4
 1232 0016 0523     		movs	r3, #5	@ tmp116,
 1233 0018 1193     		str	r3, [sp, #68]	@ tmp116, d5
ARM GAS  /tmp/ccnmAMP4.s 			page 58


 1234 001a 0623     		movs	r3, #6	@ tmp117,
 1235 001c 1093     		str	r3, [sp, #64]	@ tmp117, d6
 983:src/main.c    ****       char tempbuff[40];
 984:src/main.c    ****       volatile float HUMIDITY_Value;
 985:src/main.c    ****       volatile float TEMPERATURE_Value;
 986:src/main.c    ****       volatile float PRESSURE_Value;
 987:src/main.c    **** 
 988:src/main.c    **** 
 989:src/main.c    **** 
 990:src/main.c    ****       strcpy((char *)buffer,"{\"d\":{\"myName\":\"Nucleo\"");
 1236              		.loc 2 990 0
 1237 001e 019A     		ldr	r2, [sp, #4]	@ tmp118, buffer
 1238 0020 1E4B     		ldr	r3, .L51	@ tmp119,
 1239 0022 1000     		movs	r0, r2	@ tmp120, tmp118
 1240 0024 1900     		movs	r1, r3	@ tmp121, tmp119
 1241 0026 1823     		movs	r3, #24	@ tmp122,
 1242 0028 1A00     		movs	r2, r3	@, tmp122
 1243 002a FFF7FEFF 		bl	memcpy	@
 991:src/main.c    **** //      BSP_HUM_TEMP_GetTemperature((float *)&TEMPERATURE_Value);
 992:src/main.c    **** //      floatToInt(TEMPERATURE_Value, &d1, &d2, 2);
 993:src/main.c    ****       sprintf(tempbuff, ",\"A_Temperature\":%lu.%lu",d1, d2);
 1244              		.loc 2 993 0
 1245 002e 149B     		ldr	r3, [sp, #80]	@ tmp125, d2
 1246 0030 159A     		ldr	r2, [sp, #84]	@ tmp126, d1
 1247 0032 1B49     		ldr	r1, .L51+4	@ tmp127,
 1248 0034 06A8     		add	r0, sp, #24	@ tmp128,,
 1249 0036 FFF7FEFF 		bl	sprintf	@
 994:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1250              		.loc 2 994 0
 1251 003a 06AA     		add	r2, sp, #24	@ tmp129,,
 1252 003c 019B     		ldr	r3, [sp, #4]	@ tmp130, buffer
 1253 003e 1100     		movs	r1, r2	@, tmp129
 1254 0040 1800     		movs	r0, r3	@, tmp130
 1255 0042 FFF7FEFF 		bl	strcat	@
 995:src/main.c    **** 
 996:src/main.c    **** //      BSP_HUM_TEMP_GetHumidity((float *)&HUMIDITY_Value);
 997:src/main.c    **** //      floatToInt(HUMIDITY_Value, &d3, &d4, 2);
 998:src/main.c    ****       sprintf(tempbuff, ",\"A_Humidity\":%lu.%lu",d3,d4 );
 1256              		.loc 2 998 0
 1257 0046 129B     		ldr	r3, [sp, #72]	@ tmp131, d4
 1258 0048 139A     		ldr	r2, [sp, #76]	@ tmp132, d3
 1259 004a 1649     		ldr	r1, .L51+8	@ tmp133,
 1260 004c 06A8     		add	r0, sp, #24	@ tmp134,,
 1261 004e FFF7FEFF 		bl	sprintf	@
 999:src/main.c    ****       strcat(  (char *)buffer,tempbuff);
 1262              		.loc 2 999 0
 1263 0052 06AA     		add	r2, sp, #24	@ tmp135,,
 1264 0054 019B     		ldr	r3, [sp, #4]	@ tmp136, buffer
 1265 0056 1100     		movs	r1, r2	@, tmp135
 1266 0058 1800     		movs	r0, r3	@, tmp136
 1267 005a FFF7FEFF 		bl	strcat	@
1000:src/main.c    **** 
1001:src/main.c    **** //      BSP_PRESSURE_GetPressure((float *)&PRESSURE_Value);
1002:src/main.c    **** //      floatToInt(PRESSURE_Value, &d5, &d6, 2);
1003:src/main.c    ****       sprintf(tempbuff, ",\"A_Pressure\":%lu.%lu",d5,d6 );
 1268              		.loc 2 1003 0
 1269 005e 109B     		ldr	r3, [sp, #64]	@ tmp137, d6
ARM GAS  /tmp/ccnmAMP4.s 			page 59


 1270 0060 119A     		ldr	r2, [sp, #68]	@ tmp138, d5
 1271 0062 1149     		ldr	r1, .L51+12	@ tmp139,
 1272 0064 06A8     		add	r0, sp, #24	@ tmp140,,
 1273 0066 FFF7FEFF 		bl	sprintf	@
1004:src/main.c    ****       strcat((char *)buffer,tempbuff);
 1274              		.loc 2 1004 0
 1275 006a 06AA     		add	r2, sp, #24	@ tmp141,,
 1276 006c 019B     		ldr	r3, [sp, #4]	@ tmp142, buffer
 1277 006e 1100     		movs	r1, r2	@, tmp141
 1278 0070 1800     		movs	r0, r3	@, tmp142
 1279 0072 FFF7FEFF 		bl	strcat	@
1005:src/main.c    **** 
1006:src/main.c    **** 
1007:src/main.c    ****       strcat((char *)buffer,"}}");
 1280              		.loc 2 1007 0
 1281 0076 019B     		ldr	r3, [sp, #4]	@ tmp143, buffer
 1282 0078 1800     		movs	r0, r3	@, tmp143
 1283 007a FFF7FEFF 		bl	strlen	@
 1284 007e 0300     		movs	r3, r0	@ tmp144,
 1285 0080 1A00     		movs	r2, r3	@ D.7168, tmp145
 1286 0082 019B     		ldr	r3, [sp, #4]	@ tmp146, buffer
 1287 0084 9A18     		adds	r2, r3, r2	@ D.7169, tmp146, D.7168
 1288 0086 094B     		ldr	r3, .L51+16	@ tmp147,
 1289 0088 1000     		movs	r0, r2	@ tmp148, D.7169
 1290 008a 1900     		movs	r1, r3	@ tmp149, tmp147
 1291 008c 0323     		movs	r3, #3	@ tmp150,
 1292 008e 1A00     		movs	r2, r3	@, tmp150
 1293 0090 FFF7FEFF 		bl	memcpy	@
1008:src/main.c    **** 
1009:src/main.c    ****       return;
 1294              		.loc 2 1009 0
 1295 0094 C046     		nop
1010:src/main.c    **** }
 1296              		.loc 2 1010 0
 1297 0096 17B0     		add	sp, sp, #92	@,,
 1298              		@ sp needed	@
 1299 0098 00BD     		pop	{pc}
 1300              	.L52:
 1301 009a C046     		.align	2
 1302              	.L51:
 1303 009c FC000000 		.word	.LC35
 1304 00a0 14010000 		.word	.LC37
 1305 00a4 30010000 		.word	.LC39
 1306 00a8 48010000 		.word	.LC41
 1307 00ac 60010000 		.word	.LC43
 1308              		.cfi_endproc
 1309              	.LFE21:
 1310              		.size	prepare_json_pkt, .-prepare_json_pkt
 1311              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 1312              		.align	2
 1313              		.global	TimingDelay_Decrement
 1314              		.code	16
 1315              		.thumb_func
 1316              		.type	TimingDelay_Decrement, %function
 1317              	TimingDelay_Decrement:
 1318              	.LFB22:
1011:src/main.c    **** 
ARM GAS  /tmp/ccnmAMP4.s 			page 60


1012:src/main.c    **** //void EXTI4_15_IRQHandler(void)
1013:src/main.c    **** //{
1014:src/main.c    **** //	unsigned short aux;
1015:src/main.c    **** //
1016:src/main.c    **** ////--- SOLO PRUEBA DE INTERRUPCIONES ---//
1017:src/main.c    **** ////	if (DMX_INPUT)
1018:src/main.c    **** ////		LED_ON;
1019:src/main.c    **** ////	else
1020:src/main.c    **** ////		LED_OFF;
1021:src/main.c    **** ////
1022:src/main.c    **** ////	EXTI->PR |= 0x0100;
1023:src/main.c    **** //
1024:src/main.c    **** //	if(EXTI->PR & 0x0100)	//Line8
1025:src/main.c    **** //	{
1026:src/main.c    **** //
1027:src/main.c    **** //		//si no esta con el USART detecta el flanco	PONER TIMEOUT ACA?????
1028:src/main.c    **** //		if ((dmx_receive_flag == 0) || (dmx_timeout_timer == 0))
1029:src/main.c    **** //		//if (dmx_receive_flag == 0)
1030:src/main.c    **** //		{
1031:src/main.c    **** //			switch (signal_state)
1032:src/main.c    **** //			{
1033:src/main.c    **** //				case IDLE:
1034:src/main.c    **** //					if (!(DMX_INPUT))
1035:src/main.c    **** //					{
1036:src/main.c    **** //						//Activo timer en Falling.
1037:src/main.c    **** //						TIM14->CNT = 0;
1038:src/main.c    **** //						TIM14->CR1 |= 0x0001;
1039:src/main.c    **** //						signal_state++;
1040:src/main.c    **** //					}
1041:src/main.c    **** //					break;
1042:src/main.c    **** //
1043:src/main.c    **** //				case LOOK_FOR_BREAK:
1044:src/main.c    **** //					if (DMX_INPUT)
1045:src/main.c    **** //					{
1046:src/main.c    **** //						//Desactivo timer en Rising.
1047:src/main.c    **** //						aux = TIM14->CNT;
1048:src/main.c    **** //
1049:src/main.c    **** //						//reviso BREAK
1050:src/main.c    **** //						//if (((tim_counter_65ms) || (aux > 88)) && (tim_counter_65ms <= 20))
1051:src/main.c    **** //						if ((aux > 87) && (aux < 210))	//Consola STARLET 6
1052:src/main.c    **** //						//if ((aux > 87) && (aux < 2000))		//Consola marca CODE tiene break 1.88ms
1053:src/main.c    **** //						{
1054:src/main.c    **** //							LED_ON;
1055:src/main.c    **** //							//Activo timer para ver MARK.
1056:src/main.c    **** //							//TIM2->CNT = 0;
1057:src/main.c    **** //							//TIM2->CR1 |= 0x0001;
1058:src/main.c    **** //
1059:src/main.c    **** //							signal_state++;
1060:src/main.c    **** //							//tengo el break, activo el puerto serie
1061:src/main.c    **** //							DMX_channel_received = 0;
1062:src/main.c    **** //							//dmx_receive_flag = 1;
1063:src/main.c    **** //
1064:src/main.c    **** //							dmx_timeout_timer = DMX_TIMEOUT;		//activo el timer cuando prendo el puerto serie
1065:src/main.c    **** //							//USARTx_RX_ENA;
1066:src/main.c    **** //						}
1067:src/main.c    **** //						else	//falso disparo
1068:src/main.c    **** //							signal_state = IDLE;
ARM GAS  /tmp/ccnmAMP4.s 			page 61


1069:src/main.c    **** //					}
1070:src/main.c    **** //					else	//falso disparo
1071:src/main.c    **** //						signal_state = IDLE;
1072:src/main.c    **** //
1073:src/main.c    **** //					TIM14->CR1 &= 0xFFFE;
1074:src/main.c    **** //					break;
1075:src/main.c    **** //
1076:src/main.c    **** //				case LOOK_FOR_MARK:
1077:src/main.c    **** //					if ((!(DMX_INPUT)) && (dmx_timeout_timer))	//termino Mark after break
1078:src/main.c    **** //					{
1079:src/main.c    **** //						//ya tenia el serie habilitado
1080:src/main.c    **** //						//if ((aux > 7) && (aux < 12))
1081:src/main.c    **** //						dmx_receive_flag = 1;
1082:src/main.c    **** //					}
1083:src/main.c    **** //					else	//falso disparo
1084:src/main.c    **** //					{
1085:src/main.c    **** //						//termine por timeout
1086:src/main.c    **** //						dmx_receive_flag = 0;
1087:src/main.c    **** //						//USARTx_RX_DISA;
1088:src/main.c    **** //					}
1089:src/main.c    **** //					signal_state = IDLE;
1090:src/main.c    **** //					LED_OFF;
1091:src/main.c    **** //					break;
1092:src/main.c    **** //
1093:src/main.c    **** //				default:
1094:src/main.c    **** //					signal_state = IDLE;
1095:src/main.c    **** //					break;
1096:src/main.c    **** //			}
1097:src/main.c    **** //		}
1098:src/main.c    **** //
1099:src/main.c    **** //		EXTI->PR |= 0x0100;
1100:src/main.c    **** //	}
1101:src/main.c    **** //}
1102:src/main.c    **** 
1103:src/main.c    **** void TimingDelay_Decrement(void)
1104:src/main.c    **** {
 1319              		.loc 2 1104 0
 1320              		.cfi_startproc
 1321 0000 10B5     		push	{r4, lr}	@
 1322              	.LCFI8:
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 4, -8
 1325              		.cfi_offset 14, -4
1105:src/main.c    **** 	if (wait_ms_var)
 1326              		.loc 2 1105 0
 1327 0002 4B4B     		ldr	r3, .L66	@ tmp145,
 1328 0004 1B88     		ldrh	r3, [r3]	@ tmp146, wait_ms_var
 1329 0006 9BB2     		uxth	r3, r3	@ D.7182, tmp146
 1330 0008 002B     		cmp	r3, #0	@ D.7182,
 1331 000a 06D0     		beq	.L54	@,
1106:src/main.c    **** 		wait_ms_var--;
 1332              		.loc 2 1106 0
 1333 000c 484B     		ldr	r3, .L66	@ tmp147,
 1334 000e 1B88     		ldrh	r3, [r3]	@ tmp148, wait_ms_var
 1335 0010 9BB2     		uxth	r3, r3	@ D.7182, tmp148
 1336 0012 013B     		subs	r3, r3, #1	@ tmp149,
 1337 0014 9AB2     		uxth	r2, r3	@ D.7182, tmp149
ARM GAS  /tmp/ccnmAMP4.s 			page 62


 1338 0016 464B     		ldr	r3, .L66	@ tmp150,
 1339 0018 1A80     		strh	r2, [r3]	@ tmp151, wait_ms_var
 1340              	.L54:
1107:src/main.c    **** 
1108:src/main.c    **** //	if (display_timer)
1109:src/main.c    **** //		display_timer--;
1110:src/main.c    **** 
1111:src/main.c    **** 	if (timer_standby)
 1341              		.loc 2 1111 0
 1342 001a 464B     		ldr	r3, .L66+4	@ tmp152,
 1343 001c 1B88     		ldrh	r3, [r3]	@ tmp153, timer_standby
 1344 001e 9BB2     		uxth	r3, r3	@ D.7182, tmp153
 1345 0020 002B     		cmp	r3, #0	@ D.7182,
 1346 0022 06D0     		beq	.L55	@,
1112:src/main.c    **** 		timer_standby--;
 1347              		.loc 2 1112 0
 1348 0024 434B     		ldr	r3, .L66+4	@ tmp154,
 1349 0026 1B88     		ldrh	r3, [r3]	@ tmp155, timer_standby
 1350 0028 9BB2     		uxth	r3, r3	@ D.7182, tmp155
 1351 002a 013B     		subs	r3, r3, #1	@ tmp156,
 1352 002c 9AB2     		uxth	r2, r3	@ D.7182, tmp156
 1353 002e 414B     		ldr	r3, .L66+4	@ tmp157,
 1354 0030 1A80     		strh	r2, [r3]	@ tmp158, timer_standby
 1355              	.L55:
1113:src/main.c    **** 
1114:src/main.c    **** 	if (acswitch_timer)
 1356              		.loc 2 1114 0
 1357 0032 414B     		ldr	r3, .L66+8	@ tmp159,
 1358 0034 1B78     		ldrb	r3, [r3]	@ tmp160, acswitch_timer
 1359 0036 DBB2     		uxtb	r3, r3	@ D.7183, tmp160
 1360 0038 002B     		cmp	r3, #0	@ D.7183,
 1361 003a 06D0     		beq	.L56	@,
1115:src/main.c    **** 		acswitch_timer--;
 1362              		.loc 2 1115 0
 1363 003c 3E4B     		ldr	r3, .L66+8	@ tmp161,
 1364 003e 1B78     		ldrb	r3, [r3]	@ tmp162, acswitch_timer
 1365 0040 DBB2     		uxtb	r3, r3	@ D.7183, tmp162
 1366 0042 013B     		subs	r3, r3, #1	@ tmp163,
 1367 0044 DAB2     		uxtb	r2, r3	@ D.7183, tmp163
 1368 0046 3C4B     		ldr	r3, .L66+8	@ tmp164,
 1369 0048 1A70     		strb	r2, [r3]	@ tmp165, acswitch_timer
 1370              	.L56:
1116:src/main.c    **** 
1117:src/main.c    **** #ifdef USE_REDONDA_BASIC
1118:src/main.c    **** 	if (tt_take_photo_sample)
 1371              		.loc 2 1118 0
 1372 004a 3C4B     		ldr	r3, .L66+12	@ tmp166,
 1373 004c 1B88     		ldrh	r3, [r3]	@ tmp167, tt_take_photo_sample
 1374 004e 9BB2     		uxth	r3, r3	@ D.7182, tmp167
 1375 0050 002B     		cmp	r3, #0	@ D.7182,
 1376 0052 06D0     		beq	.L57	@,
1119:src/main.c    **** 		tt_take_photo_sample--;
 1377              		.loc 2 1119 0
 1378 0054 394B     		ldr	r3, .L66+12	@ tmp168,
 1379 0056 1B88     		ldrh	r3, [r3]	@ tmp169, tt_take_photo_sample
 1380 0058 9BB2     		uxth	r3, r3	@ D.7182, tmp169
 1381 005a 013B     		subs	r3, r3, #1	@ tmp170,
ARM GAS  /tmp/ccnmAMP4.s 			page 63


 1382 005c 9AB2     		uxth	r2, r3	@ D.7182, tmp170
 1383 005e 374B     		ldr	r3, .L66+12	@ tmp171,
 1384 0060 1A80     		strh	r2, [r3]	@ tmp172, tt_take_photo_sample
 1385              	.L57:
1120:src/main.c    **** 
1121:src/main.c    **** 	if (tt_relay_on_off)
 1386              		.loc 2 1121 0
 1387 0062 374B     		ldr	r3, .L66+16	@ tmp173,
 1388 0064 1B88     		ldrh	r3, [r3]	@ tmp174, tt_relay_on_off
 1389 0066 9BB2     		uxth	r3, r3	@ D.7182, tmp174
 1390 0068 002B     		cmp	r3, #0	@ D.7182,
 1391 006a 06D0     		beq	.L58	@,
1122:src/main.c    **** 		tt_relay_on_off--;
 1392              		.loc 2 1122 0
 1393 006c 344B     		ldr	r3, .L66+16	@ tmp175,
 1394 006e 1B88     		ldrh	r3, [r3]	@ tmp176, tt_relay_on_off
 1395 0070 9BB2     		uxth	r3, r3	@ D.7182, tmp176
 1396 0072 013B     		subs	r3, r3, #1	@ tmp177,
 1397 0074 9AB2     		uxth	r2, r3	@ D.7182, tmp177
 1398 0076 324B     		ldr	r3, .L66+16	@ tmp178,
 1399 0078 1A80     		strh	r2, [r3]	@ tmp179, tt_relay_on_off
 1400              	.L58:
1123:src/main.c    **** #endif
1124:src/main.c    **** 
1125:src/main.c    **** #ifdef ADC_WITH_TEMP_SENSE
1126:src/main.c    **** 	if (tt_take_temp_sample)
1127:src/main.c    **** 		tt_take_temp_sample--;
1128:src/main.c    **** #endif
1129:src/main.c    **** 
1130:src/main.c    **** 	if (take_temp_sample)
 1401              		.loc 2 1130 0
 1402 007a 324B     		ldr	r3, .L66+20	@ tmp180,
 1403 007c 1B88     		ldrh	r3, [r3]	@ tmp181, take_temp_sample
 1404 007e 9BB2     		uxth	r3, r3	@ D.7182, tmp181
 1405 0080 002B     		cmp	r3, #0	@ D.7182,
 1406 0082 06D0     		beq	.L59	@,
1131:src/main.c    **** 		take_temp_sample--;
 1407              		.loc 2 1131 0
 1408 0084 2F4B     		ldr	r3, .L66+20	@ tmp182,
 1409 0086 1B88     		ldrh	r3, [r3]	@ tmp183, take_temp_sample
 1410 0088 9BB2     		uxth	r3, r3	@ D.7182, tmp183
 1411 008a 013B     		subs	r3, r3, #1	@ tmp184,
 1412 008c 9AB2     		uxth	r2, r3	@ D.7182, tmp184
 1413 008e 2D4B     		ldr	r3, .L66+20	@ tmp185,
 1414 0090 1A80     		strh	r2, [r3]	@ tmp186, take_temp_sample
 1415              	.L59:
1132:src/main.c    **** 
1133:src/main.c    **** 	if (filter_timer)
 1416              		.loc 2 1133 0
 1417 0092 2D4B     		ldr	r3, .L66+24	@ tmp187,
 1418 0094 1B78     		ldrb	r3, [r3]	@ tmp188, filter_timer
 1419 0096 DBB2     		uxtb	r3, r3	@ D.7183, tmp188
 1420 0098 002B     		cmp	r3, #0	@ D.7183,
 1421 009a 06D0     		beq	.L60	@,
1134:src/main.c    **** 		filter_timer--;
 1422              		.loc 2 1134 0
 1423 009c 2A4B     		ldr	r3, .L66+24	@ tmp189,
ARM GAS  /tmp/ccnmAMP4.s 			page 64


 1424 009e 1B78     		ldrb	r3, [r3]	@ tmp190, filter_timer
 1425 00a0 DBB2     		uxtb	r3, r3	@ D.7183, tmp190
 1426 00a2 013B     		subs	r3, r3, #1	@ tmp191,
 1427 00a4 DAB2     		uxtb	r2, r3	@ D.7183, tmp191
 1428 00a6 284B     		ldr	r3, .L66+24	@ tmp192,
 1429 00a8 1A70     		strb	r2, [r3]	@ tmp193, filter_timer
 1430              	.L60:
1135:src/main.c    **** 
1136:src/main.c    **** 	//cuenta de a 1 minuto
1137:src/main.c    **** 	if (secs > 59999)	//pasaron 1 min
 1431              		.loc 2 1137 0
 1432 00aa 284B     		ldr	r3, .L66+28	@ tmp194,
 1433 00ac 1B88     		ldrh	r3, [r3]	@ tmp195, secs
 1434 00ae 9BB2     		uxth	r3, r3	@ D.7182, tmp195
 1435 00b0 274A     		ldr	r2, .L66+32	@ tmp196,
 1436 00b2 9342     		cmp	r3, r2	@ D.7182, tmp196
 1437 00b4 0AD9     		bls	.L61	@,
1138:src/main.c    **** 	{
1139:src/main.c    **** 		minutes++;
 1438              		.loc 2 1139 0
 1439 00b6 274B     		ldr	r3, .L66+36	@ tmp197,
 1440 00b8 1B78     		ldrb	r3, [r3]	@ tmp198, minutes
 1441 00ba DBB2     		uxtb	r3, r3	@ D.7183, tmp198
 1442 00bc 0133     		adds	r3, r3, #1	@ tmp199,
 1443 00be DAB2     		uxtb	r2, r3	@ D.7183, tmp199
 1444 00c0 244B     		ldr	r3, .L66+36	@ tmp200,
 1445 00c2 1A70     		strb	r2, [r3]	@ tmp201, minutes
1140:src/main.c    **** 		secs = 0;
 1446              		.loc 2 1140 0
 1447 00c4 214B     		ldr	r3, .L66+28	@ tmp202,
 1448 00c6 0022     		movs	r2, #0	@ tmp203,
 1449 00c8 1A80     		strh	r2, [r3]	@ tmp204, secs
 1450 00ca 06E0     		b	.L62	@
 1451              	.L61:
1141:src/main.c    **** 	}
1142:src/main.c    **** 	else
1143:src/main.c    **** 		secs++;
 1452              		.loc 2 1143 0
 1453 00cc 1F4B     		ldr	r3, .L66+28	@ tmp205,
 1454 00ce 1B88     		ldrh	r3, [r3]	@ tmp206, secs
 1455 00d0 9BB2     		uxth	r3, r3	@ D.7182, tmp206
 1456 00d2 0133     		adds	r3, r3, #1	@ tmp207,
 1457 00d4 9AB2     		uxth	r2, r3	@ D.7182, tmp207
 1458 00d6 1D4B     		ldr	r3, .L66+28	@ tmp208,
 1459 00d8 1A80     		strh	r2, [r3]	@ tmp209, secs
 1460              	.L62:
1144:src/main.c    **** 
1145:src/main.c    **** 	if (minutes > 60)
 1461              		.loc 2 1145 0
 1462 00da 1E4B     		ldr	r3, .L66+36	@ tmp210,
 1463 00dc 1B78     		ldrb	r3, [r3]	@ tmp211, minutes
 1464 00de DBB2     		uxtb	r3, r3	@ D.7183, tmp211
 1465 00e0 3C2B     		cmp	r3, #60	@ D.7183,
 1466 00e2 09D9     		bls	.L63	@,
1146:src/main.c    **** 	{
1147:src/main.c    **** 		hours++;
 1467              		.loc 2 1147 0
ARM GAS  /tmp/ccnmAMP4.s 			page 65


 1468 00e4 1C4B     		ldr	r3, .L66+40	@ tmp212,
 1469 00e6 1B78     		ldrb	r3, [r3]	@ tmp213, hours
 1470 00e8 DBB2     		uxtb	r3, r3	@ D.7183, tmp213
 1471 00ea 0133     		adds	r3, r3, #1	@ tmp214,
 1472 00ec DAB2     		uxtb	r2, r3	@ D.7183, tmp214
 1473 00ee 1A4B     		ldr	r3, .L66+40	@ tmp215,
 1474 00f0 1A70     		strb	r2, [r3]	@ tmp216, hours
1148:src/main.c    **** 		minutes = 0;
 1475              		.loc 2 1148 0
 1476 00f2 184B     		ldr	r3, .L66+36	@ tmp217,
 1477 00f4 0022     		movs	r2, #0	@ tmp218,
 1478 00f6 1A70     		strb	r2, [r3]	@ tmp219, minutes
 1479              	.L63:
1149:src/main.c    **** 	}
1150:src/main.c    **** 
1151:src/main.c    **** 
1152:src/main.c    **** #ifdef USE_MQTT_LIB
1153:src/main.c    **** 	//timer del MQTT
1154:src/main.c    **** 	SysTickIntHandler();
1155:src/main.c    **** #endif
1156:src/main.c    **** 
1157:src/main.c    **** #if (defined USE_GPS) || (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1158:src/main.c    **** 	if (usart1_mini_timeout)
 1480              		.loc 2 1158 0
 1481 00f8 184B     		ldr	r3, .L66+44	@ tmp220,
 1482 00fa 1B78     		ldrb	r3, [r3]	@ tmp221, usart1_mini_timeout
 1483 00fc DBB2     		uxtb	r3, r3	@ D.7183, tmp221
 1484 00fe 002B     		cmp	r3, #0	@ D.7183,
 1485 0100 06D0     		beq	.L64	@,
1159:src/main.c    **** 		usart1_mini_timeout--;
 1486              		.loc 2 1159 0
 1487 0102 164B     		ldr	r3, .L66+44	@ tmp222,
 1488 0104 1B78     		ldrb	r3, [r3]	@ tmp223, usart1_mini_timeout
 1489 0106 DBB2     		uxtb	r3, r3	@ D.7183, tmp223
 1490 0108 013B     		subs	r3, r3, #1	@ tmp224,
 1491 010a DAB2     		uxtb	r2, r3	@ D.7183, tmp224
 1492 010c 134B     		ldr	r3, .L66+44	@ tmp225,
 1493 010e 1A70     		strb	r2, [r3]	@ tmp226, usart1_mini_timeout
 1494              	.L64:
1160:src/main.c    **** 	if (usart2_mini_timeout)
 1495              		.loc 2 1160 0
 1496 0110 134B     		ldr	r3, .L66+48	@ tmp227,
 1497 0112 1B78     		ldrb	r3, [r3]	@ tmp228, usart2_mini_timeout
 1498 0114 DBB2     		uxtb	r3, r3	@ D.7183, tmp228
 1499 0116 002B     		cmp	r3, #0	@ D.7183,
 1500 0118 06D0     		beq	.L65	@,
1161:src/main.c    **** 		usart2_mini_timeout--;
 1501              		.loc 2 1161 0
 1502 011a 114B     		ldr	r3, .L66+48	@ tmp229,
 1503 011c 1B78     		ldrb	r3, [r3]	@ tmp230, usart2_mini_timeout
 1504 011e DBB2     		uxtb	r3, r3	@ D.7183, tmp230
 1505 0120 013B     		subs	r3, r3, #1	@ tmp231,
 1506 0122 DAB2     		uxtb	r2, r3	@ D.7183, tmp231
 1507 0124 0E4B     		ldr	r3, .L66+48	@ tmp232,
 1508 0126 1A70     		strb	r2, [r3]	@ tmp233, usart2_mini_timeout
 1509              	.L65:
1162:src/main.c    **** #endif
ARM GAS  /tmp/ccnmAMP4.s 			page 66


1163:src/main.c    **** #ifdef USE_GPS
1164:src/main.c    **** 	GPSTimeoutCounters ();
1165:src/main.c    **** #endif
1166:src/main.c    **** 
1167:src/main.c    **** #if (defined USE_GSM) || (defined USE_GSM_GATEWAY)
1168:src/main.c    **** 	GSMTimeoutCounters ();
 1510              		.loc 2 1168 0
 1511 0128 FFF7FEFF 		bl	GSMTimeoutCounters	@
1169:src/main.c    **** #endif
1170:src/main.c    **** }
 1512              		.loc 2 1170 0
 1513 012c C046     		nop
 1514              		@ sp needed	@
 1515 012e 10BD     		pop	{r4, pc}
 1516              	.L67:
 1517              		.align	2
 1518              	.L66:
 1519 0130 00000000 		.word	wait_ms_var
 1520 0134 00000000 		.word	timer_standby
 1521 0138 00000000 		.word	acswitch_timer
 1522 013c 00000000 		.word	tt_take_photo_sample
 1523 0140 00000000 		.word	tt_relay_on_off
 1524 0144 00000000 		.word	take_temp_sample
 1525 0148 00000000 		.word	filter_timer
 1526 014c 00000000 		.word	secs
 1527 0150 5FEA0000 		.word	59999
 1528 0154 00000000 		.word	minutes
 1529 0158 00000000 		.word	hours
 1530 015c 00000000 		.word	usart1_mini_timeout
 1531 0160 00000000 		.word	usart2_mini_timeout
 1532              		.cfi_endproc
 1533              	.LFE22:
 1534              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 1535              		.text
 1536              	.Letext0:
 1537              		.file 3 "./cmsis_boot/stm32f0xx.h"
 1538              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1539              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1540              		.file 6 "src/hard.h"
 1541              		.file 7 "src/flash_program.h"
 1542              		.file 8 "src/tcp_transceiver.h"
 1543              		.file 9 "src/funcs_gsm.h"
 1544              		.section	.debug_info,"",%progbits
 1545              	.Ldebug_info0:
 1546 0000 060E0000 		.4byte	0xe06
 1547 0004 0200     		.2byte	0x2
 1548 0006 00000000 		.4byte	.Ldebug_abbrev0
 1549 000a 04       		.byte	0x4
 1550 000b 01       		.uleb128 0x1
 1551 000c 17090000 		.4byte	.LASF201
 1552 0010 0C       		.byte	0xc
 1553 0011 E4080000 		.4byte	.LASF202
 1554 0015 4B070000 		.4byte	.LASF203
 1555 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1556 001d 00000000 		.4byte	0
 1557 0021 00000000 		.4byte	0
 1558 0025 00000000 		.4byte	.Ldebug_line0
ARM GAS  /tmp/ccnmAMP4.s 			page 67


 1559 0029 02       		.uleb128 0x2
 1560 002a AC050000 		.4byte	.LASF109
 1561 002e 01       		.byte	0x1
 1562 002f 06010000 		.4byte	0x106
 1563 0033 03       		.byte	0x3
 1564 0034 C7       		.byte	0xc7
 1565 0035 06010000 		.4byte	0x106
 1566 0039 03       		.uleb128 0x3
 1567 003a 36060000 		.4byte	.LASF0
 1568 003e 72       		.sleb128 -14
 1569 003f 03       		.uleb128 0x3
 1570 0040 D8090000 		.4byte	.LASF1
 1571 0044 73       		.sleb128 -13
 1572 0045 03       		.uleb128 0x3
 1573 0046 D3000000 		.4byte	.LASF2
 1574 004a 7B       		.sleb128 -5
 1575 004b 03       		.uleb128 0x3
 1576 004c B2010000 		.4byte	.LASF3
 1577 0050 7E       		.sleb128 -2
 1578 0051 03       		.uleb128 0x3
 1579 0052 F2060000 		.4byte	.LASF4
 1580 0056 7F       		.sleb128 -1
 1581 0057 04       		.uleb128 0x4
 1582 0058 48040000 		.4byte	.LASF5
 1583 005c 00       		.byte	0
 1584 005d 04       		.uleb128 0x4
 1585 005e 17050000 		.4byte	.LASF6
 1586 0062 01       		.byte	0x1
 1587 0063 04       		.uleb128 0x4
 1588 0064 DC050000 		.4byte	.LASF7
 1589 0068 02       		.byte	0x2
 1590 0069 04       		.uleb128 0x4
 1591 006a 3A010000 		.4byte	.LASF8
 1592 006e 03       		.byte	0x3
 1593 006f 04       		.uleb128 0x4
 1594 0070 CF010000 		.4byte	.LASF9
 1595 0074 04       		.byte	0x4
 1596 0075 04       		.uleb128 0x4
 1597 0076 7E010000 		.4byte	.LASF10
 1598 007a 05       		.byte	0x5
 1599 007b 04       		.uleb128 0x4
 1600 007c B0000000 		.4byte	.LASF11
 1601 0080 06       		.byte	0x6
 1602 0081 04       		.uleb128 0x4
 1603 0082 86000000 		.4byte	.LASF12
 1604 0086 07       		.byte	0x7
 1605 0087 04       		.uleb128 0x4
 1606 0088 E2040000 		.4byte	.LASF13
 1607 008c 08       		.byte	0x8
 1608 008d 04       		.uleb128 0x4
 1609 008e 7C030000 		.4byte	.LASF14
 1610 0092 09       		.byte	0x9
 1611 0093 04       		.uleb128 0x4
 1612 0094 C6070000 		.4byte	.LASF15
 1613 0098 0A       		.byte	0xa
 1614 0099 04       		.uleb128 0x4
 1615 009a 93060000 		.4byte	.LASF16
ARM GAS  /tmp/ccnmAMP4.s 			page 68


 1616 009e 0B       		.byte	0xb
 1617 009f 04       		.uleb128 0x4
 1618 00a0 3B050000 		.4byte	.LASF17
 1619 00a4 0C       		.byte	0xc
 1620 00a5 04       		.uleb128 0x4
 1621 00a6 F5040000 		.4byte	.LASF18
 1622 00aa 0D       		.byte	0xd
 1623 00ab 04       		.uleb128 0x4
 1624 00ac 53060000 		.4byte	.LASF19
 1625 00b0 0E       		.byte	0xe
 1626 00b1 04       		.uleb128 0x4
 1627 00b2 32070000 		.4byte	.LASF20
 1628 00b6 0F       		.byte	0xf
 1629 00b7 04       		.uleb128 0x4
 1630 00b8 72030000 		.4byte	.LASF21
 1631 00bc 10       		.byte	0x10
 1632 00bd 04       		.uleb128 0x4
 1633 00be E3070000 		.4byte	.LASF22
 1634 00c2 11       		.byte	0x11
 1635 00c3 04       		.uleb128 0x4
 1636 00c4 BB070000 		.4byte	.LASF23
 1637 00c8 13       		.byte	0x13
 1638 00c9 04       		.uleb128 0x4
 1639 00ca A7030000 		.4byte	.LASF24
 1640 00ce 14       		.byte	0x14
 1641 00cf 04       		.uleb128 0x4
 1642 00d0 0C010000 		.4byte	.LASF25
 1643 00d4 15       		.byte	0x15
 1644 00d5 04       		.uleb128 0x4
 1645 00d6 7C060000 		.4byte	.LASF26
 1646 00da 16       		.byte	0x16
 1647 00db 04       		.uleb128 0x4
 1648 00dc A8010000 		.4byte	.LASF27
 1649 00e0 17       		.byte	0x17
 1650 00e1 04       		.uleb128 0x4
 1651 00e2 16070000 		.4byte	.LASF28
 1652 00e6 18       		.byte	0x18
 1653 00e7 04       		.uleb128 0x4
 1654 00e8 1A020000 		.4byte	.LASF29
 1655 00ec 19       		.byte	0x19
 1656 00ed 04       		.uleb128 0x4
 1657 00ee 87080000 		.4byte	.LASF30
 1658 00f2 1A       		.byte	0x1a
 1659 00f3 04       		.uleb128 0x4
 1660 00f4 2A060000 		.4byte	.LASF31
 1661 00f8 1B       		.byte	0x1b
 1662 00f9 04       		.uleb128 0x4
 1663 00fa 9A020000 		.4byte	.LASF32
 1664 00fe 1C       		.byte	0x1c
 1665 00ff 04       		.uleb128 0x4
 1666 0100 FF060000 		.4byte	.LASF33
 1667 0104 1E       		.byte	0x1e
 1668 0105 00       		.byte	0
 1669 0106 05       		.uleb128 0x5
 1670 0107 01       		.byte	0x1
 1671 0108 06       		.byte	0x6
 1672 0109 D8080000 		.4byte	.LASF36
ARM GAS  /tmp/ccnmAMP4.s 			page 69


 1673 010d 06       		.uleb128 0x6
 1674 010e 84020000 		.4byte	.LASF34
 1675 0112 03       		.byte	0x3
 1676 0113 5F01     		.2byte	0x15f
 1677 0115 29000000 		.4byte	0x29
 1678 0119 07       		.uleb128 0x7
 1679 011a B5060000 		.4byte	.LASF35
 1680 011e 04       		.byte	0x4
 1681 011f 1D       		.byte	0x1d
 1682 0120 24010000 		.4byte	0x124
 1683 0124 05       		.uleb128 0x5
 1684 0125 01       		.byte	0x1
 1685 0126 08       		.byte	0x8
 1686 0127 F1070000 		.4byte	.LASF37
 1687 012b 05       		.uleb128 0x5
 1688 012c 02       		.byte	0x2
 1689 012d 05       		.byte	0x5
 1690 012e 17060000 		.4byte	.LASF38
 1691 0132 07       		.uleb128 0x7
 1692 0133 52020000 		.4byte	.LASF39
 1693 0137 04       		.byte	0x4
 1694 0138 2B       		.byte	0x2b
 1695 0139 3D010000 		.4byte	0x13d
 1696 013d 05       		.uleb128 0x5
 1697 013e 02       		.byte	0x2
 1698 013f 07       		.byte	0x7
 1699 0140 04090000 		.4byte	.LASF40
 1700 0144 07       		.uleb128 0x7
 1701 0145 28010000 		.4byte	.LASF41
 1702 0149 04       		.byte	0x4
 1703 014a 3F       		.byte	0x3f
 1704 014b 4F010000 		.4byte	0x14f
 1705 014f 05       		.uleb128 0x5
 1706 0150 04       		.byte	0x4
 1707 0151 05       		.byte	0x5
 1708 0152 21060000 		.4byte	.LASF42
 1709 0156 07       		.uleb128 0x7
 1710 0157 08080000 		.4byte	.LASF43
 1711 015b 04       		.byte	0x4
 1712 015c 41       		.byte	0x41
 1713 015d 61010000 		.4byte	0x161
 1714 0161 05       		.uleb128 0x5
 1715 0162 04       		.byte	0x4
 1716 0163 07       		.byte	0x7
 1717 0164 20070000 		.4byte	.LASF44
 1718 0168 05       		.uleb128 0x5
 1719 0169 08       		.byte	0x8
 1720 016a 05       		.byte	0x5
 1721 016b 3A040000 		.4byte	.LASF45
 1722 016f 05       		.uleb128 0x5
 1723 0170 08       		.byte	0x8
 1724 0171 07       		.byte	0x7
 1725 0172 24020000 		.4byte	.LASF46
 1726 0176 08       		.uleb128 0x8
 1727 0177 04       		.byte	0x4
 1728 0178 05       		.byte	0x5
 1729 0179 696E7400 		.ascii	"int\000"
ARM GAS  /tmp/ccnmAMP4.s 			page 70


 1730 017d 05       		.uleb128 0x5
 1731 017e 04       		.byte	0x4
 1732 017f 07       		.byte	0x7
 1733 0180 FA000000 		.4byte	.LASF47
 1734 0184 07       		.uleb128 0x7
 1735 0185 B2030000 		.4byte	.LASF48
 1736 0189 05       		.byte	0x5
 1737 018a 14       		.byte	0x14
 1738 018b 19010000 		.4byte	0x119
 1739 018f 07       		.uleb128 0x7
 1740 0190 94050000 		.4byte	.LASF49
 1741 0194 05       		.byte	0x5
 1742 0195 1A       		.byte	0x1a
 1743 0196 32010000 		.4byte	0x132
 1744 019a 07       		.uleb128 0x7
 1745 019b 8F070000 		.4byte	.LASF50
 1746 019f 05       		.byte	0x5
 1747 01a0 1F       		.byte	0x1f
 1748 01a1 44010000 		.4byte	0x144
 1749 01a5 07       		.uleb128 0x7
 1750 01a6 E7010000 		.4byte	.LASF51
 1751 01aa 05       		.byte	0x5
 1752 01ab 20       		.byte	0x20
 1753 01ac 56010000 		.4byte	0x156
 1754 01b0 09       		.uleb128 0x9
 1755 01b1 2003     		.2byte	0x320
 1756 01b3 01       		.byte	0x1
 1757 01b4 71       		.byte	0x71
 1758 01b5 4D020000 		.4byte	0x24d
 1759 01b9 0A       		.uleb128 0xa
 1760 01ba F0010000 		.4byte	.LASF52
 1761 01be 01       		.byte	0x1
 1762 01bf 73       		.byte	0x73
 1763 01c0 64020000 		.4byte	0x264
 1764 01c4 02       		.byte	0x2
 1765 01c5 23       		.byte	0x23
 1766 01c6 00       		.uleb128 0
 1767 01c7 0A       		.uleb128 0xa
 1768 01c8 E5050000 		.4byte	.LASF53
 1769 01cc 01       		.byte	0x1
 1770 01cd 74       		.byte	0x74
 1771 01ce 69020000 		.4byte	0x269
 1772 01d2 02       		.byte	0x2
 1773 01d3 23       		.byte	0x23
 1774 01d4 04       		.uleb128 0x4
 1775 01d5 0A       		.uleb128 0xa
 1776 01d6 77080000 		.4byte	.LASF54
 1777 01da 01       		.byte	0x1
 1778 01db 75       		.byte	0x75
 1779 01dc 79020000 		.4byte	0x279
 1780 01e0 03       		.byte	0x3
 1781 01e1 23       		.byte	0x23
 1782 01e2 8001     		.uleb128 0x80
 1783 01e4 0A       		.uleb128 0xa
 1784 01e5 11020000 		.4byte	.LASF55
 1785 01e9 01       		.byte	0x1
 1786 01ea 76       		.byte	0x76
ARM GAS  /tmp/ccnmAMP4.s 			page 71


 1787 01eb 69020000 		.4byte	0x269
 1788 01ef 03       		.byte	0x3
 1789 01f0 23       		.byte	0x23
 1790 01f1 8401     		.uleb128 0x84
 1791 01f3 0A       		.uleb128 0xa
 1792 01f4 070A0000 		.4byte	.LASF56
 1793 01f8 01       		.byte	0x1
 1794 01f9 77       		.byte	0x77
 1795 01fa 7E020000 		.4byte	0x27e
 1796 01fe 03       		.byte	0x3
 1797 01ff 23       		.byte	0x23
 1798 0200 8002     		.uleb128 0x100
 1799 0202 0A       		.uleb128 0xa
 1800 0203 F9050000 		.4byte	.LASF57
 1801 0207 01       		.byte	0x1
 1802 0208 78       		.byte	0x78
 1803 0209 69020000 		.4byte	0x269
 1804 020d 03       		.byte	0x3
 1805 020e 23       		.byte	0x23
 1806 020f 8402     		.uleb128 0x104
 1807 0211 0A       		.uleb128 0xa
 1808 0212 36050000 		.4byte	.LASF58
 1809 0216 01       		.byte	0x1
 1810 0217 79       		.byte	0x79
 1811 0218 83020000 		.4byte	0x283
 1812 021c 03       		.byte	0x3
 1813 021d 23       		.byte	0x23
 1814 021e 8003     		.uleb128 0x180
 1815 0220 0A       		.uleb128 0xa
 1816 0221 03060000 		.4byte	.LASF59
 1817 0225 01       		.byte	0x1
 1818 0226 7A       		.byte	0x7a
 1819 0227 69020000 		.4byte	0x269
 1820 022b 03       		.byte	0x3
 1821 022c 23       		.byte	0x23
 1822 022d 8403     		.uleb128 0x184
 1823 022f 0A       		.uleb128 0xa
 1824 0230 0D060000 		.4byte	.LASF60
 1825 0234 01       		.byte	0x1
 1826 0235 7B       		.byte	0x7b
 1827 0236 88020000 		.4byte	0x288
 1828 023a 03       		.byte	0x3
 1829 023b 23       		.byte	0x23
 1830 023c 8004     		.uleb128 0x200
 1831 023e 0B       		.uleb128 0xb
 1832 023f 495000   		.ascii	"IP\000"
 1833 0242 01       		.byte	0x1
 1834 0243 7C       		.byte	0x7c
 1835 0244 A8020000 		.4byte	0x2a8
 1836 0248 03       		.byte	0x3
 1837 0249 23       		.byte	0x23
 1838 024a 8006     		.uleb128 0x300
 1839 024c 00       		.byte	0
 1840 024d 0C       		.uleb128 0xc
 1841 024e A5010000 		.4byte	0x1a5
 1842 0252 5D020000 		.4byte	0x25d
 1843 0256 0D       		.uleb128 0xd
ARM GAS  /tmp/ccnmAMP4.s 			page 72


 1844 0257 5D020000 		.4byte	0x25d
 1845 025b 00       		.byte	0
 1846 025c 00       		.byte	0
 1847 025d 05       		.uleb128 0x5
 1848 025e 04       		.byte	0x4
 1849 025f 07       		.byte	0x7
 1850 0260 08070000 		.4byte	.LASF61
 1851 0264 0E       		.uleb128 0xe
 1852 0265 4D020000 		.4byte	0x24d
 1853 0269 0C       		.uleb128 0xc
 1854 026a A5010000 		.4byte	0x1a5
 1855 026e 79020000 		.4byte	0x279
 1856 0272 0D       		.uleb128 0xd
 1857 0273 5D020000 		.4byte	0x25d
 1858 0277 1E       		.byte	0x1e
 1859 0278 00       		.byte	0
 1860 0279 0E       		.uleb128 0xe
 1861 027a 4D020000 		.4byte	0x24d
 1862 027e 0E       		.uleb128 0xe
 1863 027f 4D020000 		.4byte	0x24d
 1864 0283 0E       		.uleb128 0xe
 1865 0284 4D020000 		.4byte	0x24d
 1866 0288 0C       		.uleb128 0xc
 1867 0289 A5010000 		.4byte	0x1a5
 1868 028d 98020000 		.4byte	0x298
 1869 0291 0D       		.uleb128 0xd
 1870 0292 5D020000 		.4byte	0x25d
 1871 0296 3F       		.byte	0x3f
 1872 0297 00       		.byte	0
 1873 0298 0C       		.uleb128 0xc
 1874 0299 A5010000 		.4byte	0x1a5
 1875 029d A8020000 		.4byte	0x2a8
 1876 02a1 0D       		.uleb128 0xd
 1877 02a2 5D020000 		.4byte	0x25d
 1878 02a6 07       		.byte	0x7
 1879 02a7 00       		.byte	0
 1880 02a8 0E       		.uleb128 0xe
 1881 02a9 98020000 		.4byte	0x298
 1882 02ad 07       		.uleb128 0x7
 1883 02ae CB060000 		.4byte	.LASF62
 1884 02b2 01       		.byte	0x1
 1885 02b3 7D       		.byte	0x7d
 1886 02b4 B0010000 		.4byte	0x1b0
 1887 02b8 0F       		.uleb128 0xf
 1888 02b9 34       		.byte	0x34
 1889 02ba 01       		.byte	0x1
 1890 02bb 86       		.byte	0x86
 1891 02bc 5B030000 		.4byte	0x35b
 1892 02c0 0A       		.uleb128 0xa
 1893 02c1 A6020000 		.4byte	.LASF63
 1894 02c5 01       		.byte	0x1
 1895 02c6 88       		.byte	0x88
 1896 02c7 60030000 		.4byte	0x360
 1897 02cb 02       		.byte	0x2
 1898 02cc 23       		.byte	0x23
 1899 02cd 00       		.uleb128 0
 1900 02ce 0A       		.uleb128 0xa
ARM GAS  /tmp/ccnmAMP4.s 			page 73


 1901 02cf 11070000 		.4byte	.LASF64
 1902 02d3 01       		.byte	0x1
 1903 02d4 89       		.byte	0x89
 1904 02d5 5B030000 		.4byte	0x35b
 1905 02d9 02       		.byte	0x2
 1906 02da 23       		.byte	0x23
 1907 02db 04       		.uleb128 0x4
 1908 02dc 0A       		.uleb128 0xa
 1909 02dd E5050000 		.4byte	.LASF53
 1910 02e1 01       		.byte	0x1
 1911 02e2 8A       		.byte	0x8a
 1912 02e3 A5010000 		.4byte	0x1a5
 1913 02e7 02       		.byte	0x2
 1914 02e8 23       		.byte	0x23
 1915 02e9 08       		.uleb128 0x8
 1916 02ea 0A       		.uleb128 0xa
 1917 02eb 5B030000 		.4byte	.LASF65
 1918 02ef 01       		.byte	0x1
 1919 02f0 8B       		.byte	0x8b
 1920 02f1 5B030000 		.4byte	0x35b
 1921 02f5 02       		.byte	0x2
 1922 02f6 23       		.byte	0x23
 1923 02f7 0C       		.uleb128 0xc
 1924 02f8 0B       		.uleb128 0xb
 1925 02f9 53435200 		.ascii	"SCR\000"
 1926 02fd 01       		.byte	0x1
 1927 02fe 8C       		.byte	0x8c
 1928 02ff 5B030000 		.4byte	0x35b
 1929 0303 02       		.byte	0x2
 1930 0304 23       		.byte	0x23
 1931 0305 10       		.uleb128 0x10
 1932 0306 0B       		.uleb128 0xb
 1933 0307 43435200 		.ascii	"CCR\000"
 1934 030b 01       		.byte	0x1
 1935 030c 8D       		.byte	0x8d
 1936 030d 5B030000 		.4byte	0x35b
 1937 0311 02       		.byte	0x2
 1938 0312 23       		.byte	0x23
 1939 0313 14       		.uleb128 0x14
 1940 0314 0A       		.uleb128 0xa
 1941 0315 EF050000 		.4byte	.LASF66
 1942 0319 01       		.byte	0x1
 1943 031a 8E       		.byte	0x8e
 1944 031b A5010000 		.4byte	0x1a5
 1945 031f 02       		.byte	0x2
 1946 0320 23       		.byte	0x23
 1947 0321 18       		.uleb128 0x18
 1948 0322 0B       		.uleb128 0xb
 1949 0323 53485000 		.ascii	"SHP\000"
 1950 0327 01       		.byte	0x1
 1951 0328 8F       		.byte	0x8f
 1952 0329 75030000 		.4byte	0x375
 1953 032d 02       		.byte	0x2
 1954 032e 23       		.byte	0x23
 1955 032f 1C       		.uleb128 0x1c
 1956 0330 0A       		.uleb128 0xa
 1957 0331 52040000 		.4byte	.LASF67
ARM GAS  /tmp/ccnmAMP4.s 			page 74


 1958 0335 01       		.byte	0x1
 1959 0336 90       		.byte	0x90
 1960 0337 5B030000 		.4byte	0x35b
 1961 033b 02       		.byte	0x2
 1962 033c 23       		.byte	0x23
 1963 033d 24       		.uleb128 0x24
 1964 033e 0A       		.uleb128 0xa
 1965 033f F9050000 		.4byte	.LASF57
 1966 0343 01       		.byte	0x1
 1967 0344 91       		.byte	0x91
 1968 0345 65030000 		.4byte	0x365
 1969 0349 02       		.byte	0x2
 1970 034a 23       		.byte	0x23
 1971 034b 28       		.uleb128 0x28
 1972 034c 0A       		.uleb128 0xa
 1973 034d 3B020000 		.4byte	.LASF68
 1974 0351 01       		.byte	0x1
 1975 0352 92       		.byte	0x92
 1976 0353 5B030000 		.4byte	0x35b
 1977 0357 02       		.byte	0x2
 1978 0358 23       		.byte	0x23
 1979 0359 30       		.uleb128 0x30
 1980 035a 00       		.byte	0
 1981 035b 0E       		.uleb128 0xe
 1982 035c A5010000 		.4byte	0x1a5
 1983 0360 10       		.uleb128 0x10
 1984 0361 5B030000 		.4byte	0x35b
 1985 0365 0C       		.uleb128 0xc
 1986 0366 A5010000 		.4byte	0x1a5
 1987 036a 75030000 		.4byte	0x375
 1988 036e 0D       		.uleb128 0xd
 1989 036f 5D020000 		.4byte	0x25d
 1990 0373 01       		.byte	0x1
 1991 0374 00       		.byte	0
 1992 0375 0E       		.uleb128 0xe
 1993 0376 65030000 		.4byte	0x365
 1994 037a 07       		.uleb128 0x7
 1995 037b D5060000 		.4byte	.LASF69
 1996 037f 01       		.byte	0x1
 1997 0380 93       		.byte	0x93
 1998 0381 B8020000 		.4byte	0x2b8
 1999 0385 0F       		.uleb128 0xf
 2000 0386 10       		.byte	0x10
 2001 0387 01       		.byte	0x1
 2002 0388 FC       		.byte	0xfc
 2003 0389 C8030000 		.4byte	0x3c8
 2004 038d 0A       		.uleb128 0xa
 2005 038e 4F0A0000 		.4byte	.LASF70
 2006 0392 01       		.byte	0x1
 2007 0393 FE       		.byte	0xfe
 2008 0394 5B030000 		.4byte	0x35b
 2009 0398 02       		.byte	0x2
 2010 0399 23       		.byte	0x23
 2011 039a 00       		.uleb128 0
 2012 039b 0A       		.uleb128 0xa
 2013 039c 07010000 		.4byte	.LASF71
 2014 03a0 01       		.byte	0x1
ARM GAS  /tmp/ccnmAMP4.s 			page 75


 2015 03a1 FF       		.byte	0xff
 2016 03a2 5B030000 		.4byte	0x35b
 2017 03a6 02       		.byte	0x2
 2018 03a7 23       		.byte	0x23
 2019 03a8 04       		.uleb128 0x4
 2020 03a9 11       		.uleb128 0x11
 2021 03aa 56414C00 		.ascii	"VAL\000"
 2022 03ae 01       		.byte	0x1
 2023 03af 0001     		.2byte	0x100
 2024 03b1 5B030000 		.4byte	0x35b
 2025 03b5 02       		.byte	0x2
 2026 03b6 23       		.byte	0x23
 2027 03b7 08       		.uleb128 0x8
 2028 03b8 12       		.uleb128 0x12
 2029 03b9 5E010000 		.4byte	.LASF72
 2030 03bd 01       		.byte	0x1
 2031 03be 0101     		.2byte	0x101
 2032 03c0 60030000 		.4byte	0x360
 2033 03c4 02       		.byte	0x2
 2034 03c5 23       		.byte	0x23
 2035 03c6 0C       		.uleb128 0xc
 2036 03c7 00       		.byte	0
 2037 03c8 06       		.uleb128 0x6
 2038 03c9 7B050000 		.4byte	.LASF73
 2039 03cd 01       		.byte	0x1
 2040 03ce 0201     		.2byte	0x102
 2041 03d0 85030000 		.4byte	0x385
 2042 03d4 13       		.uleb128 0x13
 2043 03d5 44       		.byte	0x44
 2044 03d6 03       		.byte	0x3
 2045 03d7 7C01     		.2byte	0x17c
 2046 03d9 9E040000 		.4byte	0x49e
 2047 03dd 11       		.uleb128 0x11
 2048 03de 49535200 		.ascii	"ISR\000"
 2049 03e2 03       		.byte	0x3
 2050 03e3 7E01     		.2byte	0x17e
 2051 03e5 5B030000 		.4byte	0x35b
 2052 03e9 02       		.byte	0x2
 2053 03ea 23       		.byte	0x23
 2054 03eb 00       		.uleb128 0
 2055 03ec 11       		.uleb128 0x11
 2056 03ed 49455200 		.ascii	"IER\000"
 2057 03f1 03       		.byte	0x3
 2058 03f2 7F01     		.2byte	0x17f
 2059 03f4 5B030000 		.4byte	0x35b
 2060 03f8 02       		.byte	0x2
 2061 03f9 23       		.byte	0x23
 2062 03fa 04       		.uleb128 0x4
 2063 03fb 11       		.uleb128 0x11
 2064 03fc 435200   		.ascii	"CR\000"
 2065 03ff 03       		.byte	0x3
 2066 0400 8001     		.2byte	0x180
 2067 0402 5B030000 		.4byte	0x35b
 2068 0406 02       		.byte	0x2
 2069 0407 23       		.byte	0x23
 2070 0408 08       		.uleb128 0x8
 2071 0409 12       		.uleb128 0x12
ARM GAS  /tmp/ccnmAMP4.s 			page 76


 2072 040a 20050000 		.4byte	.LASF74
 2073 040e 03       		.byte	0x3
 2074 040f 8101     		.2byte	0x181
 2075 0411 5B030000 		.4byte	0x35b
 2076 0415 02       		.byte	0x2
 2077 0416 23       		.byte	0x23
 2078 0417 0C       		.uleb128 0xc
 2079 0418 12       		.uleb128 0x12
 2080 0419 26050000 		.4byte	.LASF75
 2081 041d 03       		.byte	0x3
 2082 041e 8201     		.2byte	0x182
 2083 0420 5B030000 		.4byte	0x35b
 2084 0424 02       		.byte	0x2
 2085 0425 23       		.byte	0x23
 2086 0426 10       		.uleb128 0x10
 2087 0427 12       		.uleb128 0x12
 2088 0428 D0020000 		.4byte	.LASF76
 2089 042c 03       		.byte	0x3
 2090 042d 8301     		.2byte	0x183
 2091 042f 5B030000 		.4byte	0x35b
 2092 0433 02       		.byte	0x2
 2093 0434 23       		.byte	0x23
 2094 0435 14       		.uleb128 0x14
 2095 0436 12       		.uleb128 0x12
 2096 0437 EF050000 		.4byte	.LASF66
 2097 043b 03       		.byte	0x3
 2098 043c 8401     		.2byte	0x184
 2099 043e A5010000 		.4byte	0x1a5
 2100 0442 02       		.byte	0x2
 2101 0443 23       		.byte	0x23
 2102 0444 18       		.uleb128 0x18
 2103 0445 12       		.uleb128 0x12
 2104 0446 F9050000 		.4byte	.LASF57
 2105 044a 03       		.byte	0x3
 2106 044b 8501     		.2byte	0x185
 2107 044d A5010000 		.4byte	0x1a5
 2108 0451 02       		.byte	0x2
 2109 0452 23       		.byte	0x23
 2110 0453 1C       		.uleb128 0x1c
 2111 0454 11       		.uleb128 0x11
 2112 0455 545200   		.ascii	"TR\000"
 2113 0458 03       		.byte	0x3
 2114 0459 8601     		.2byte	0x186
 2115 045b 5B030000 		.4byte	0x35b
 2116 045f 02       		.byte	0x2
 2117 0460 23       		.byte	0x23
 2118 0461 20       		.uleb128 0x20
 2119 0462 12       		.uleb128 0x12
 2120 0463 03060000 		.4byte	.LASF59
 2121 0467 03       		.byte	0x3
 2122 0468 8701     		.2byte	0x187
 2123 046a A5010000 		.4byte	0x1a5
 2124 046e 02       		.byte	0x2
 2125 046f 23       		.byte	0x23
 2126 0470 24       		.uleb128 0x24
 2127 0471 12       		.uleb128 0x12
 2128 0472 6B020000 		.4byte	.LASF77
ARM GAS  /tmp/ccnmAMP4.s 			page 77


 2129 0476 03       		.byte	0x3
 2130 0477 8801     		.2byte	0x188
 2131 0479 5B030000 		.4byte	0x35b
 2132 047d 02       		.byte	0x2
 2133 047e 23       		.byte	0x23
 2134 047f 28       		.uleb128 0x28
 2135 0480 12       		.uleb128 0x12
 2136 0481 0D060000 		.4byte	.LASF60
 2137 0485 03       		.byte	0x3
 2138 0486 8901     		.2byte	0x189
 2139 0488 9E040000 		.4byte	0x49e
 2140 048c 02       		.byte	0x2
 2141 048d 23       		.byte	0x23
 2142 048e 2C       		.uleb128 0x2c
 2143 048f 11       		.uleb128 0x11
 2144 0490 445200   		.ascii	"DR\000"
 2145 0493 03       		.byte	0x3
 2146 0494 8A01     		.2byte	0x18a
 2147 0496 5B030000 		.4byte	0x35b
 2148 049a 02       		.byte	0x2
 2149 049b 23       		.byte	0x23
 2150 049c 40       		.uleb128 0x40
 2151 049d 00       		.byte	0
 2152 049e 0C       		.uleb128 0xc
 2153 049f A5010000 		.4byte	0x1a5
 2154 04a3 AE040000 		.4byte	0x4ae
 2155 04a7 0D       		.uleb128 0xd
 2156 04a8 5D020000 		.4byte	0x25d
 2157 04ac 04       		.byte	0x4
 2158 04ad 00       		.byte	0
 2159 04ae 06       		.uleb128 0x6
 2160 04af 2E040000 		.4byte	.LASF78
 2161 04b3 03       		.byte	0x3
 2162 04b4 8B01     		.2byte	0x18b
 2163 04b6 D4030000 		.4byte	0x3d4
 2164 04ba 0E       		.uleb128 0xe
 2165 04bb 8F010000 		.4byte	0x18f
 2166 04bf 13       		.uleb128 0x13
 2167 04c0 2C       		.byte	0x2c
 2168 04c1 03       		.byte	0x3
 2169 04c2 6902     		.2byte	0x269
 2170 04c4 9B050000 		.4byte	0x59b
 2171 04c8 12       		.uleb128 0x12
 2172 04c9 65020000 		.4byte	.LASF79
 2173 04cd 03       		.byte	0x3
 2174 04ce 6B02     		.2byte	0x26b
 2175 04d0 5B030000 		.4byte	0x35b
 2176 04d4 02       		.byte	0x2
 2177 04d5 23       		.byte	0x23
 2178 04d6 00       		.uleb128 0
 2179 04d7 12       		.uleb128 0x12
 2180 04d8 60060000 		.4byte	.LASF80
 2181 04dc 03       		.byte	0x3
 2182 04dd 6C02     		.2byte	0x26c
 2183 04df BA040000 		.4byte	0x4ba
 2184 04e3 02       		.byte	0x2
 2185 04e4 23       		.byte	0x23
ARM GAS  /tmp/ccnmAMP4.s 			page 78


 2186 04e5 04       		.uleb128 0x4
 2187 04e6 12       		.uleb128 0x12
 2188 04e7 E5050000 		.4byte	.LASF53
 2189 04eb 03       		.byte	0x3
 2190 04ec 6D02     		.2byte	0x26d
 2191 04ee 8F010000 		.4byte	0x18f
 2192 04f2 02       		.byte	0x2
 2193 04f3 23       		.byte	0x23
 2194 04f4 06       		.uleb128 0x6
 2195 04f5 12       		.uleb128 0x12
 2196 04f6 73050000 		.4byte	.LASF81
 2197 04fa 03       		.byte	0x3
 2198 04fb 6E02     		.2byte	0x26e
 2199 04fd 5B030000 		.4byte	0x35b
 2200 0501 02       		.byte	0x2
 2201 0502 23       		.byte	0x23
 2202 0503 08       		.uleb128 0x8
 2203 0504 12       		.uleb128 0x12
 2204 0505 0E030000 		.4byte	.LASF82
 2205 0509 03       		.byte	0x3
 2206 050a 6F02     		.2byte	0x26f
 2207 050c 5B030000 		.4byte	0x35b
 2208 0510 02       		.byte	0x2
 2209 0511 23       		.byte	0x23
 2210 0512 0C       		.uleb128 0xc
 2211 0513 11       		.uleb128 0x11
 2212 0514 49445200 		.ascii	"IDR\000"
 2213 0518 03       		.byte	0x3
 2214 0519 7002     		.2byte	0x270
 2215 051b BA040000 		.4byte	0x4ba
 2216 051f 02       		.byte	0x2
 2217 0520 23       		.byte	0x23
 2218 0521 10       		.uleb128 0x10
 2219 0522 12       		.uleb128 0x12
 2220 0523 EF050000 		.4byte	.LASF66
 2221 0527 03       		.byte	0x3
 2222 0528 7102     		.2byte	0x271
 2223 052a 8F010000 		.4byte	0x18f
 2224 052e 02       		.byte	0x2
 2225 052f 23       		.byte	0x23
 2226 0530 12       		.uleb128 0x12
 2227 0531 11       		.uleb128 0x11
 2228 0532 4F445200 		.ascii	"ODR\000"
 2229 0536 03       		.byte	0x3
 2230 0537 7202     		.2byte	0x272
 2231 0539 BA040000 		.4byte	0x4ba
 2232 053d 02       		.byte	0x2
 2233 053e 23       		.byte	0x23
 2234 053f 14       		.uleb128 0x14
 2235 0540 12       		.uleb128 0x12
 2236 0541 F9050000 		.4byte	.LASF57
 2237 0545 03       		.byte	0x3
 2238 0546 7302     		.2byte	0x273
 2239 0548 8F010000 		.4byte	0x18f
 2240 054c 02       		.byte	0x2
 2241 054d 23       		.byte	0x23
 2242 054e 16       		.uleb128 0x16
ARM GAS  /tmp/ccnmAMP4.s 			page 79


 2243 054f 12       		.uleb128 0x12
 2244 0550 94000000 		.4byte	.LASF83
 2245 0554 03       		.byte	0x3
 2246 0555 7402     		.2byte	0x274
 2247 0557 5B030000 		.4byte	0x35b
 2248 055b 02       		.byte	0x2
 2249 055c 23       		.byte	0x23
 2250 055d 18       		.uleb128 0x18
 2251 055e 12       		.uleb128 0x12
 2252 055f 4A0A0000 		.4byte	.LASF84
 2253 0563 03       		.byte	0x3
 2254 0564 7502     		.2byte	0x275
 2255 0566 5B030000 		.4byte	0x35b
 2256 056a 02       		.byte	0x2
 2257 056b 23       		.byte	0x23
 2258 056c 1C       		.uleb128 0x1c
 2259 056d 11       		.uleb128 0x11
 2260 056e 41465200 		.ascii	"AFR\000"
 2261 0572 03       		.byte	0x3
 2262 0573 7602     		.2byte	0x276
 2263 0575 9B050000 		.4byte	0x59b
 2264 0579 02       		.byte	0x2
 2265 057a 23       		.byte	0x23
 2266 057b 20       		.uleb128 0x20
 2267 057c 11       		.uleb128 0x11
 2268 057d 42525200 		.ascii	"BRR\000"
 2269 0581 03       		.byte	0x3
 2270 0582 7702     		.2byte	0x277
 2271 0584 BA040000 		.4byte	0x4ba
 2272 0588 02       		.byte	0x2
 2273 0589 23       		.byte	0x23
 2274 058a 28       		.uleb128 0x28
 2275 058b 12       		.uleb128 0x12
 2276 058c 03060000 		.4byte	.LASF59
 2277 0590 03       		.byte	0x3
 2278 0591 7802     		.2byte	0x278
 2279 0593 8F010000 		.4byte	0x18f
 2280 0597 02       		.byte	0x2
 2281 0598 23       		.byte	0x23
 2282 0599 2A       		.uleb128 0x2a
 2283 059a 00       		.byte	0
 2284 059b 0E       		.uleb128 0xe
 2285 059c 65030000 		.4byte	0x365
 2286 05a0 06       		.uleb128 0x6
 2287 05a1 DE060000 		.4byte	.LASF85
 2288 05a5 03       		.byte	0x3
 2289 05a6 7902     		.2byte	0x279
 2290 05a8 BF040000 		.4byte	0x4bf
 2291 05ac 05       		.uleb128 0x5
 2292 05ad 08       		.byte	0x8
 2293 05ae 04       		.byte	0x4
 2294 05af 88050000 		.4byte	.LASF86
 2295 05b3 05       		.uleb128 0x5
 2296 05b4 01       		.byte	0x1
 2297 05b5 08       		.byte	0x8
 2298 05b6 3A030000 		.4byte	.LASF87
 2299 05ba 0C       		.uleb128 0xc
ARM GAS  /tmp/ccnmAMP4.s 			page 80


 2300 05bb 3D010000 		.4byte	0x13d
 2301 05bf CA050000 		.4byte	0x5ca
 2302 05c3 0D       		.uleb128 0xd
 2303 05c4 5D020000 		.4byte	0x25d
 2304 05c8 02       		.byte	0x2
 2305 05c9 00       		.byte	0
 2306 05ca 14       		.uleb128 0x14
 2307 05cb 01       		.byte	0x1
 2308 05cc 24010000 		.4byte	0x124
 2309 05d0 06       		.byte	0x6
 2310 05d1 B9       		.byte	0xb9
 2311 05d2 07060000 		.4byte	0x607
 2312 05d6 04       		.uleb128 0x4
 2313 05d7 A5040000 		.4byte	.LASF88
 2314 05db 00       		.byte	0
 2315 05dc 04       		.uleb128 0x4
 2316 05dd 87060000 		.4byte	.LASF89
 2317 05e1 01       		.byte	0x1
 2318 05e2 04       		.uleb128 0x4
 2319 05e3 EC020000 		.4byte	.LASF90
 2320 05e7 02       		.byte	0x2
 2321 05e8 04       		.uleb128 0x4
 2322 05e9 FF070000 		.4byte	.LASF91
 2323 05ed 03       		.byte	0x3
 2324 05ee 04       		.uleb128 0x4
 2325 05ef 6C040000 		.4byte	.LASF92
 2326 05f3 04       		.byte	0x4
 2327 05f4 04       		.uleb128 0x4
 2328 05f5 BE040000 		.4byte	.LASF93
 2329 05f9 05       		.byte	0x5
 2330 05fa 04       		.uleb128 0x4
 2331 05fb BA030000 		.4byte	.LASF94
 2332 05ff 06       		.byte	0x6
 2333 0600 04       		.uleb128 0x4
 2334 0601 26040000 		.4byte	.LASF95
 2335 0605 07       		.byte	0x7
 2336 0606 00       		.byte	0
 2337 0607 07       		.uleb128 0x7
 2338 0608 9A030000 		.4byte	.LASF96
 2339 060c 06       		.byte	0x6
 2340 060d C5       		.byte	0xc5
 2341 060e CA050000 		.4byte	0x5ca
 2342 0612 15       		.uleb128 0x15
 2343 0613 8E040000 		.4byte	.LASF204
 2344 0617 0C       		.byte	0xc
 2345 0618 07       		.byte	0x7
 2346 0619 34       		.byte	0x34
 2347 061a B9060000 		.4byte	0x6b9
 2348 061e 0A       		.uleb128 0xa
 2349 061f 99000000 		.4byte	.LASF97
 2350 0623 07       		.byte	0x7
 2351 0624 36       		.byte	0x36
 2352 0625 24010000 		.4byte	0x124
 2353 0629 02       		.byte	0x2
 2354 062a 23       		.byte	0x23
 2355 062b 00       		.uleb128 0
 2356 062c 0A       		.uleb128 0xa
ARM GAS  /tmp/ccnmAMP4.s 			page 81


 2357 062d 28080000 		.4byte	.LASF98
 2358 0631 07       		.byte	0x7
 2359 0632 38       		.byte	0x38
 2360 0633 24010000 		.4byte	0x124
 2361 0637 02       		.byte	0x2
 2362 0638 23       		.byte	0x23
 2363 0639 01       		.uleb128 0x1
 2364 063a 0A       		.uleb128 0xa
 2365 063b 6B000000 		.4byte	.LASF99
 2366 063f 07       		.byte	0x7
 2367 0640 39       		.byte	0x39
 2368 0641 24010000 		.4byte	0x124
 2369 0645 02       		.byte	0x2
 2370 0646 23       		.byte	0x23
 2371 0647 02       		.uleb128 0x2
 2372 0648 0A       		.uleb128 0xa
 2373 0649 58010000 		.4byte	.LASF100
 2374 064d 07       		.byte	0x7
 2375 064e 3A       		.byte	0x3a
 2376 064f 24010000 		.4byte	0x124
 2377 0653 02       		.byte	0x2
 2378 0654 23       		.byte	0x23
 2379 0655 03       		.uleb128 0x3
 2380 0656 0A       		.uleb128 0xa
 2381 0657 B1050000 		.4byte	.LASF101
 2382 065b 07       		.byte	0x7
 2383 065c 3C       		.byte	0x3c
 2384 065d 3D010000 		.4byte	0x13d
 2385 0661 02       		.byte	0x2
 2386 0662 23       		.byte	0x23
 2387 0663 04       		.uleb128 0x4
 2388 0664 0A       		.uleb128 0xa
 2389 0665 2C030000 		.4byte	.LASF102
 2390 0669 07       		.byte	0x7
 2391 066a 3D       		.byte	0x3d
 2392 066b 24010000 		.4byte	0x124
 2393 066f 02       		.byte	0x2
 2394 0670 23       		.byte	0x23
 2395 0671 06       		.uleb128 0x6
 2396 0672 0A       		.uleb128 0xa
 2397 0673 33030000 		.4byte	.LASF103
 2398 0677 07       		.byte	0x7
 2399 0678 3E       		.byte	0x3e
 2400 0679 24010000 		.4byte	0x124
 2401 067d 02       		.byte	0x2
 2402 067e 23       		.byte	0x23
 2403 067f 07       		.uleb128 0x7
 2404 0680 0A       		.uleb128 0xa
 2405 0681 06000000 		.4byte	.LASF104
 2406 0685 07       		.byte	0x7
 2407 0686 41       		.byte	0x41
 2408 0687 24010000 		.4byte	0x124
 2409 068b 02       		.byte	0x2
 2410 068c 23       		.byte	0x23
 2411 068d 08       		.uleb128 0x8
 2412 068e 0A       		.uleb128 0xa
 2413 068f 14000000 		.4byte	.LASF105
ARM GAS  /tmp/ccnmAMP4.s 			page 82


 2414 0693 07       		.byte	0x7
 2415 0694 42       		.byte	0x42
 2416 0695 24010000 		.4byte	0x124
 2417 0699 02       		.byte	0x2
 2418 069a 23       		.byte	0x23
 2419 069b 09       		.uleb128 0x9
 2420 069c 0A       		.uleb128 0xa
 2421 069d 22000000 		.4byte	.LASF106
 2422 06a1 07       		.byte	0x7
 2423 06a2 43       		.byte	0x43
 2424 06a3 24010000 		.4byte	0x124
 2425 06a7 02       		.byte	0x2
 2426 06a8 23       		.byte	0x23
 2427 06a9 0A       		.uleb128 0xa
 2428 06aa 0A       		.uleb128 0xa
 2429 06ab 30000000 		.4byte	.LASF107
 2430 06af 07       		.byte	0x7
 2431 06b0 44       		.byte	0x44
 2432 06b1 24010000 		.4byte	0x124
 2433 06b5 02       		.byte	0x2
 2434 06b6 23       		.byte	0x23
 2435 06b7 0B       		.uleb128 0xb
 2436 06b8 00       		.byte	0
 2437 06b9 07       		.uleb128 0x7
 2438 06ba C5080000 		.4byte	.LASF108
 2439 06be 07       		.byte	0x7
 2440 06bf 46       		.byte	0x46
 2441 06c0 12060000 		.4byte	0x612
 2442 06c4 02       		.uleb128 0x2
 2443 06c5 8E020000 		.4byte	.LASF110
 2444 06c9 01       		.byte	0x1
 2445 06ca 24010000 		.4byte	0x124
 2446 06ce 08       		.byte	0x8
 2447 06cf 0D       		.byte	0xd
 2448 06d0 FF060000 		.4byte	0x6ff
 2449 06d4 04       		.uleb128 0x4
 2450 06d5 E3020000 		.4byte	.LASF111
 2451 06d9 00       		.byte	0
 2452 06da 04       		.uleb128 0x4
 2453 06db B4080000 		.4byte	.LASF112
 2454 06df 01       		.byte	0x1
 2455 06e0 04       		.uleb128 0x4
 2456 06e1 C9040000 		.4byte	.LASF113
 2457 06e5 02       		.byte	0x2
 2458 06e6 04       		.uleb128 0x4
 2459 06e7 BF060000 		.4byte	.LASF114
 2460 06eb 03       		.byte	0x3
 2461 06ec 04       		.uleb128 0x4
 2462 06ed 540A0000 		.4byte	.LASF115
 2463 06f1 04       		.byte	0x4
 2464 06f2 04       		.uleb128 0x4
 2465 06f3 F9080000 		.4byte	.LASF116
 2466 06f7 05       		.byte	0x5
 2467 06f8 04       		.uleb128 0x4
 2468 06f9 2C050000 		.4byte	.LASF117
 2469 06fd 06       		.byte	0x6
 2470 06fe 00       		.byte	0
ARM GAS  /tmp/ccnmAMP4.s 			page 83


 2471 06ff 14       		.uleb128 0x14
 2472 0700 01       		.byte	0x1
 2473 0701 24010000 		.4byte	0x124
 2474 0705 09       		.byte	0x9
 2475 0706 1B       		.byte	0x1b
 2476 0707 24070000 		.4byte	0x724
 2477 070b 04       		.uleb128 0x4
 2478 070c 91080000 		.4byte	.LASF118
 2479 0710 00       		.byte	0
 2480 0711 04       		.uleb128 0x4
 2481 0712 E7090000 		.4byte	.LASF119
 2482 0716 01       		.byte	0x1
 2483 0717 04       		.uleb128 0x4
 2484 0718 AF040000 		.4byte	.LASF120
 2485 071c 02       		.byte	0x2
 2486 071d 04       		.uleb128 0x4
 2487 071e E6030000 		.4byte	.LASF121
 2488 0722 03       		.byte	0x3
 2489 0723 00       		.byte	0
 2490 0724 16       		.uleb128 0x16
 2491 0725 E9000000 		.4byte	.LASF205
 2492 0729 01       		.byte	0x1
 2493 072a 7C03     		.2byte	0x37c
 2494 072c 01       		.byte	0x1
 2495 072d 00000000 		.4byte	.LFB16
 2496 0731 EC000000 		.4byte	.LFE16
 2497 0735 00000000 		.4byte	.LLST0
 2498 0739 01       		.byte	0x1
 2499 073a 5D070000 		.4byte	0x75d
 2500 073e 17       		.uleb128 0x17
 2501 073f AC050000 		.4byte	.LASF109
 2502 0743 01       		.byte	0x1
 2503 0744 7C03     		.2byte	0x37c
 2504 0746 0D010000 		.4byte	0x10d
 2505 074a 02       		.byte	0x2
 2506 074b 91       		.byte	0x91
 2507 074c 6F       		.sleb128 -17
 2508 074d 17       		.uleb128 0x17
 2509 074e 4A060000 		.4byte	.LASF122
 2510 0752 01       		.byte	0x1
 2511 0753 7C03     		.2byte	0x37c
 2512 0755 A5010000 		.4byte	0x1a5
 2513 0759 02       		.byte	0x2
 2514 075a 91       		.byte	0x91
 2515 075b 68       		.sleb128 -24
 2516 075c 00       		.byte	0
 2517 075d 18       		.uleb128 0x18
 2518 075e C1020000 		.4byte	.LASF206
 2519 0762 01       		.byte	0x1
 2520 0763 B803     		.2byte	0x3b8
 2521 0765 01       		.byte	0x1
 2522 0766 A5010000 		.4byte	0x1a5
 2523 076a 00000000 		.4byte	.LFB18
 2524 076e 48000000 		.4byte	.LFE18
 2525 0772 2C000000 		.4byte	.LLST1
 2526 0776 01       		.byte	0x1
 2527 0777 8B070000 		.4byte	0x78b
ARM GAS  /tmp/ccnmAMP4.s 			page 84


 2528 077b 17       		.uleb128 0x17
 2529 077c 14030000 		.4byte	.LASF123
 2530 0780 01       		.byte	0x1
 2531 0781 B803     		.2byte	0x3b8
 2532 0783 A5010000 		.4byte	0x1a5
 2533 0787 02       		.byte	0x2
 2534 0788 91       		.byte	0x91
 2535 0789 74       		.sleb128 -12
 2536 078a 00       		.byte	0
 2537 078b 19       		.uleb128 0x19
 2538 078c 01       		.byte	0x1
 2539 078d D3090000 		.4byte	.LASF207
 2540 0791 02       		.byte	0x2
 2541 0792 D7       		.byte	0xd7
 2542 0793 01       		.byte	0x1
 2543 0794 76010000 		.4byte	0x176
 2544 0798 00000000 		.4byte	.LFB20
 2545 079c B8040000 		.4byte	.LFE20
 2546 07a0 58000000 		.4byte	.LLST2
 2547 07a4 01       		.byte	0x1
 2548 07a5 E6080000 		.4byte	0x8e6
 2549 07a9 1A       		.uleb128 0x1a
 2550 07aa 6900     		.ascii	"i\000"
 2551 07ac 02       		.byte	0x2
 2552 07ad D9       		.byte	0xd9
 2553 07ae 24010000 		.4byte	0x124
 2554 07b2 02       		.byte	0x2
 2555 07b3 91       		.byte	0x91
 2556 07b4 6F       		.sleb128 -17
 2557 07b5 1B       		.uleb128 0x1b
 2558 07b6 696900   		.ascii	"ii\000"
 2559 07b9 02       		.byte	0x2
 2560 07ba D9       		.byte	0xd9
 2561 07bb 24010000 		.4byte	0x124
 2562 07bf 1C       		.uleb128 0x1c
 2563 07c0 3D0A0000 		.4byte	.LASF124
 2564 07c4 02       		.byte	0x2
 2565 07c5 DA       		.byte	0xda
 2566 07c6 24010000 		.4byte	0x124
 2567 07ca 1C       		.uleb128 0x1c
 2568 07cb 8F030000 		.4byte	.LASF125
 2569 07cf 02       		.byte	0x2
 2570 07d0 DA       		.byte	0xda
 2571 07d1 24010000 		.4byte	0x124
 2572 07d5 1D       		.uleb128 0x1d
 2573 07d6 1F080000 		.4byte	.LASF126
 2574 07da 02       		.byte	0x2
 2575 07db DA       		.byte	0xda
 2576 07dc 24010000 		.4byte	0x124
 2577 07e0 02       		.byte	0x2
 2578 07e1 91       		.byte	0x91
 2579 07e2 65       		.sleb128 -27
 2580 07e3 1D       		.uleb128 0x1d
 2581 07e4 0C0A0000 		.4byte	.LASF127
 2582 07e8 02       		.byte	0x2
 2583 07e9 DB       		.byte	0xdb
 2584 07ea 24010000 		.4byte	0x124
ARM GAS  /tmp/ccnmAMP4.s 			page 85


 2585 07ee 02       		.byte	0x2
 2586 07ef 91       		.byte	0x91
 2587 07f0 64       		.sleb128 -28
 2588 07f1 1D       		.uleb128 0x1d
 2589 07f2 EF080000 		.4byte	.LASF128
 2590 07f6 02       		.byte	0x2
 2591 07f7 DC       		.byte	0xdc
 2592 07f8 3D010000 		.4byte	0x13d
 2593 07fc 02       		.byte	0x2
 2594 07fd 91       		.byte	0x91
 2595 07fe 4E       		.sleb128 -50
 2596 07ff 1D       		.uleb128 0x1d
 2597 0800 51030000 		.4byte	.LASF129
 2598 0804 02       		.byte	0x2
 2599 0805 DC       		.byte	0xdc
 2600 0806 3D010000 		.4byte	0x13d
 2601 080a 02       		.byte	0x2
 2602 080b 91       		.byte	0x91
 2603 080c 4C       		.sleb128 -52
 2604 080d 1D       		.uleb128 0x1d
 2605 080e BF080000 		.4byte	.LASF130
 2606 0812 02       		.byte	0x2
 2607 0813 DD       		.byte	0xdd
 2608 0814 3D010000 		.4byte	0x13d
 2609 0818 02       		.byte	0x2
 2610 0819 91       		.byte	0x91
 2611 081a 50       		.sleb128 -48
 2612 081b 1D       		.uleb128 0x1d
 2613 081c D8010000 		.4byte	.LASF131
 2614 0820 02       		.byte	0x2
 2615 0821 DE       		.byte	0xde
 2616 0822 E6080000 		.4byte	0x8e6
 2617 0826 02       		.byte	0x2
 2618 0827 91       		.byte	0x91
 2619 0828 60       		.sleb128 -32
 2620 0829 1D       		.uleb128 0x1d
 2621 082a 3E000000 		.4byte	.LASF132
 2622 082e 02       		.byte	0x2
 2623 082f DF       		.byte	0xdf
 2624 0830 7D010000 		.4byte	0x17d
 2625 0834 02       		.byte	0x2
 2626 0835 91       		.byte	0x91
 2627 0836 68       		.sleb128 -24
 2628 0837 1D       		.uleb128 0x1d
 2629 0838 BD000000 		.4byte	.LASF133
 2630 083c 02       		.byte	0x2
 2631 083d E2       		.byte	0xe2
 2632 083e 07060000 		.4byte	0x607
 2633 0842 02       		.byte	0x2
 2634 0843 91       		.byte	0x91
 2635 0844 67       		.sleb128 -25
 2636 0845 1D       		.uleb128 0x1d
 2637 0846 EB060000 		.4byte	.LASF134
 2638 084a 02       		.byte	0x2
 2639 084b E3       		.byte	0xe3
 2640 084c 24010000 		.4byte	0x124
 2641 0850 02       		.byte	0x2
ARM GAS  /tmp/ccnmAMP4.s 			page 86


 2642 0851 91       		.byte	0x91
 2643 0852 66       		.sleb128 -26
 2644 0853 1C       		.uleb128 0x1c
 2645 0854 0C020000 		.4byte	.LASF135
 2646 0858 02       		.byte	0x2
 2647 0859 E5       		.byte	0xe5
 2648 085a 3D010000 		.4byte	0x13d
 2649 085e 1C       		.uleb128 0x1c
 2650 085f 7C080000 		.4byte	.LASF136
 2651 0863 02       		.byte	0x2
 2652 0864 E8       		.byte	0xe8
 2653 0865 24010000 		.4byte	0x124
 2654 0869 1D       		.uleb128 0x1d
 2655 086a 00000000 		.4byte	.LASF137
 2656 086e 02       		.byte	0x2
 2657 086f EE       		.byte	0xee
 2658 0870 ED080000 		.4byte	0x8ed
 2659 0874 03       		.byte	0x3
 2660 0875 91       		.byte	0x91
 2661 0876 B87F     		.sleb128 -72
 2662 0878 1D       		.uleb128 0x1d
 2663 0879 6B050000 		.4byte	.LASF138
 2664 087d 02       		.byte	0x2
 2665 087e EF       		.byte	0xef
 2666 087f C4060000 		.4byte	0x6c4
 2667 0883 02       		.byte	0x2
 2668 0884 91       		.byte	0x91
 2669 0885 5F       		.sleb128 -33
 2670 0886 1D       		.uleb128 0x1d
 2671 0887 46080000 		.4byte	.LASF139
 2672 088b 02       		.byte	0x2
 2673 088c F0       		.byte	0xf0
 2674 088d 24010000 		.4byte	0x124
 2675 0891 02       		.byte	0x2
 2676 0892 91       		.byte	0x91
 2677 0893 5E       		.sleb128 -34
 2678 0894 1D       		.uleb128 0x1d
 2679 0895 67060000 		.4byte	.LASF140
 2680 0899 02       		.byte	0x2
 2681 089a F1       		.byte	0xf1
 2682 089b 24010000 		.4byte	0x124
 2683 089f 02       		.byte	0x2
 2684 08a0 91       		.byte	0x91
 2685 08a1 5D       		.sleb128 -35
 2686 08a2 1D       		.uleb128 0x1d
 2687 08a3 13080000 		.4byte	.LASF141
 2688 08a7 02       		.byte	0x2
 2689 08a8 F2       		.byte	0xf2
 2690 08a9 24010000 		.4byte	0x124
 2691 08ad 02       		.byte	0x2
 2692 08ae 91       		.byte	0x91
 2693 08af 5C       		.sleb128 -36
 2694 08b0 1D       		.uleb128 0x1d
 2695 08b1 DE010000 		.4byte	.LASF142
 2696 08b5 02       		.byte	0x2
 2697 08b6 F3       		.byte	0xf3
 2698 08b7 24010000 		.4byte	0x124
ARM GAS  /tmp/ccnmAMP4.s 			page 87


 2699 08bb 02       		.byte	0x2
 2700 08bc 91       		.byte	0x91
 2701 08bd 5B       		.sleb128 -37
 2702 08be 1D       		.uleb128 0x1d
 2703 08bf EA040000 		.4byte	.LASF143
 2704 08c3 02       		.byte	0x2
 2705 08c4 F4       		.byte	0xf4
 2706 08c5 76010000 		.4byte	0x176
 2707 08c9 02       		.byte	0x2
 2708 08ca 91       		.byte	0x91
 2709 08cb 54       		.sleb128 -44
 2710 08cc 1D       		.uleb128 0x1d
 2711 08cd DB070000 		.4byte	.LASF144
 2712 08d1 02       		.byte	0x2
 2713 08d2 F5       		.byte	0xf5
 2714 08d3 24010000 		.4byte	0x124
 2715 08d7 02       		.byte	0x2
 2716 08d8 91       		.byte	0x91
 2717 08d9 53       		.sleb128 -45
 2718 08da 1C       		.uleb128 0x1c
 2719 08db C8000000 		.4byte	.LASF145
 2720 08df 02       		.byte	0x2
 2721 08e0 FA       		.byte	0xfa
 2722 08e1 FD080000 		.4byte	0x8fd
 2723 08e5 00       		.byte	0
 2724 08e6 05       		.uleb128 0x5
 2725 08e7 04       		.byte	0x4
 2726 08e8 04       		.byte	0x4
 2727 08e9 06020000 		.4byte	.LASF146
 2728 08ed 0C       		.uleb128 0xc
 2729 08ee B3050000 		.4byte	0x5b3
 2730 08f2 FD080000 		.4byte	0x8fd
 2731 08f6 0D       		.uleb128 0xd
 2732 08f7 5D020000 		.4byte	0x25d
 2733 08fb 13       		.byte	0x13
 2734 08fc 00       		.byte	0
 2735 08fd 1E       		.uleb128 0x1e
 2736 08fe 04       		.byte	0x4
 2737 08ff B9060000 		.4byte	0x6b9
 2738 0903 1F       		.uleb128 0x1f
 2739 0904 01       		.byte	0x1
 2740 0905 A3080000 		.4byte	.LASF208
 2741 0909 02       		.byte	0x2
 2742 090a D403     		.2byte	0x3d4
 2743 090c 01       		.byte	0x1
 2744 090d 00000000 		.4byte	.LFB21
 2745 0911 B0000000 		.4byte	.LFE21
 2746 0915 85000000 		.4byte	.LLST3
 2747 0919 01       		.byte	0x1
 2748 091a C3090000 		.4byte	0x9c3
 2749 091e 17       		.uleb128 0x17
 2750 091f DC000000 		.4byte	.LASF147
 2751 0923 02       		.byte	0x2
 2752 0924 D403     		.2byte	0x3d4
 2753 0926 C3090000 		.4byte	0x9c3
 2754 092a 03       		.byte	0x3
 2755 092b 91       		.byte	0x91
ARM GAS  /tmp/ccnmAMP4.s 			page 88


 2756 092c A47F     		.sleb128 -92
 2757 092e 20       		.uleb128 0x20
 2758 092f 643100   		.ascii	"d1\000"
 2759 0932 02       		.byte	0x2
 2760 0933 D603     		.2byte	0x3d6
 2761 0935 9A010000 		.4byte	0x19a
 2762 0939 02       		.byte	0x2
 2763 093a 91       		.byte	0x91
 2764 093b 74       		.sleb128 -12
 2765 093c 20       		.uleb128 0x20
 2766 093d 643200   		.ascii	"d2\000"
 2767 0940 02       		.byte	0x2
 2768 0941 D603     		.2byte	0x3d6
 2769 0943 9A010000 		.4byte	0x19a
 2770 0947 02       		.byte	0x2
 2771 0948 91       		.byte	0x91
 2772 0949 70       		.sleb128 -16
 2773 094a 20       		.uleb128 0x20
 2774 094b 643300   		.ascii	"d3\000"
 2775 094e 02       		.byte	0x2
 2776 094f D603     		.2byte	0x3d6
 2777 0951 9A010000 		.4byte	0x19a
 2778 0955 02       		.byte	0x2
 2779 0956 91       		.byte	0x91
 2780 0957 6C       		.sleb128 -20
 2781 0958 20       		.uleb128 0x20
 2782 0959 643400   		.ascii	"d4\000"
 2783 095c 02       		.byte	0x2
 2784 095d D603     		.2byte	0x3d6
 2785 095f 9A010000 		.4byte	0x19a
 2786 0963 02       		.byte	0x2
 2787 0964 91       		.byte	0x91
 2788 0965 68       		.sleb128 -24
 2789 0966 20       		.uleb128 0x20
 2790 0967 643500   		.ascii	"d5\000"
 2791 096a 02       		.byte	0x2
 2792 096b D603     		.2byte	0x3d6
 2793 096d 9A010000 		.4byte	0x19a
 2794 0971 02       		.byte	0x2
 2795 0972 91       		.byte	0x91
 2796 0973 64       		.sleb128 -28
 2797 0974 20       		.uleb128 0x20
 2798 0975 643600   		.ascii	"d6\000"
 2799 0978 02       		.byte	0x2
 2800 0979 D603     		.2byte	0x3d6
 2801 097b 9A010000 		.4byte	0x19a
 2802 097f 02       		.byte	0x2
 2803 0980 91       		.byte	0x91
 2804 0981 60       		.sleb128 -32
 2805 0982 21       		.uleb128 0x21
 2806 0983 0E050000 		.4byte	.LASF148
 2807 0987 02       		.byte	0x2
 2808 0988 D703     		.2byte	0x3d7
 2809 098a C9090000 		.4byte	0x9c9
 2810 098e 03       		.byte	0x3
 2811 098f 91       		.byte	0x91
 2812 0990 B87F     		.sleb128 -72
ARM GAS  /tmp/ccnmAMP4.s 			page 89


 2813 0992 21       		.uleb128 0x21
 2814 0993 80070000 		.4byte	.LASF149
 2815 0997 02       		.byte	0x2
 2816 0998 D803     		.2byte	0x3d8
 2817 099a D9090000 		.4byte	0x9d9
 2818 099e 03       		.byte	0x3
 2819 099f 91       		.byte	0x91
 2820 09a0 B47F     		.sleb128 -76
 2821 09a2 21       		.uleb128 0x21
 2822 09a3 3F030000 		.4byte	.LASF150
 2823 09a7 02       		.byte	0x2
 2824 09a8 D903     		.2byte	0x3d9
 2825 09aa D9090000 		.4byte	0x9d9
 2826 09ae 03       		.byte	0x3
 2827 09af 91       		.byte	0x91
 2828 09b0 B07F     		.sleb128 -80
 2829 09b2 21       		.uleb128 0x21
 2830 09b3 3C070000 		.4byte	.LASF151
 2831 09b7 02       		.byte	0x2
 2832 09b8 DA03     		.2byte	0x3da
 2833 09ba D9090000 		.4byte	0x9d9
 2834 09be 03       		.byte	0x3
 2835 09bf 91       		.byte	0x91
 2836 09c0 AC7F     		.sleb128 -84
 2837 09c2 00       		.byte	0
 2838 09c3 1E       		.uleb128 0x1e
 2839 09c4 04       		.byte	0x4
 2840 09c5 84010000 		.4byte	0x184
 2841 09c9 0C       		.uleb128 0xc
 2842 09ca B3050000 		.4byte	0x5b3
 2843 09ce D9090000 		.4byte	0x9d9
 2844 09d2 0D       		.uleb128 0xd
 2845 09d3 5D020000 		.4byte	0x25d
 2846 09d7 27       		.byte	0x27
 2847 09d8 00       		.byte	0
 2848 09d9 0E       		.uleb128 0xe
 2849 09da E6080000 		.4byte	0x8e6
 2850 09de 22       		.uleb128 0x22
 2851 09df 01       		.byte	0x1
 2852 09e0 4F080000 		.4byte	.LASF209
 2853 09e4 02       		.byte	0x2
 2854 09e5 4F04     		.2byte	0x44f
 2855 09e7 01       		.byte	0x1
 2856 09e8 00000000 		.4byte	.LFB22
 2857 09ec 64010000 		.4byte	.LFE22
 2858 09f0 B2000000 		.4byte	.LLST4
 2859 09f4 01       		.byte	0x1
 2860 09f5 0C       		.uleb128 0xc
 2861 09f6 24010000 		.4byte	0x124
 2862 09fa 050A0000 		.4byte	0xa05
 2863 09fe 0D       		.uleb128 0xd
 2864 09ff 5D020000 		.4byte	0x25d
 2865 0a03 FF       		.byte	0xff
 2866 0a04 00       		.byte	0
 2867 0a05 23       		.uleb128 0x23
 2868 0a06 76010000 		.4byte	.LASF152
 2869 0a0a 02       		.byte	0x2
ARM GAS  /tmp/ccnmAMP4.s 			page 90


 2870 0a0b 3B       		.byte	0x3b
 2871 0a0c 170A0000 		.4byte	0xa17
 2872 0a10 01       		.byte	0x1
 2873 0a11 05       		.byte	0x5
 2874 0a12 03       		.byte	0x3
 2875 0a13 00000000 		.4byte	tx2buff
 2876 0a17 0E       		.uleb128 0xe
 2877 0a18 F5090000 		.4byte	0x9f5
 2878 0a1c 23       		.uleb128 0x23
 2879 0a1d 32010000 		.4byte	.LASF153
 2880 0a21 02       		.byte	0x2
 2881 0a22 3C       		.byte	0x3c
 2882 0a23 2E0A0000 		.4byte	0xa2e
 2883 0a27 01       		.byte	0x1
 2884 0a28 05       		.byte	0x5
 2885 0a29 03       		.byte	0x3
 2886 0a2a 00000000 		.4byte	rx2buff
 2887 0a2e 0E       		.uleb128 0xe
 2888 0a2f F5090000 		.4byte	0x9f5
 2889 0a33 23       		.uleb128 0x23
 2890 0a34 F7030000 		.4byte	.LASF154
 2891 0a38 02       		.byte	0x2
 2892 0a39 3E       		.byte	0x3e
 2893 0a3a 450A0000 		.4byte	0xa45
 2894 0a3e 01       		.byte	0x1
 2895 0a3f 05       		.byte	0x5
 2896 0a40 03       		.byte	0x3
 2897 0a41 00000000 		.4byte	tx1buff
 2898 0a45 0E       		.uleb128 0xe
 2899 0a46 F5090000 		.4byte	0x9f5
 2900 0a4a 23       		.uleb128 0x23
 2901 0a4b 45010000 		.4byte	.LASF155
 2902 0a4f 02       		.byte	0x2
 2903 0a50 3F       		.byte	0x3f
 2904 0a51 5C0A0000 		.4byte	0xa5c
 2905 0a55 01       		.byte	0x1
 2906 0a56 05       		.byte	0x5
 2907 0a57 03       		.byte	0x3
 2908 0a58 00000000 		.4byte	rx1buff
 2909 0a5c 0E       		.uleb128 0xe
 2910 0a5d F5090000 		.4byte	0x9f5
 2911 0a61 23       		.uleb128 0x23
 2912 0a62 1A030000 		.4byte	.LASF156
 2913 0a66 02       		.byte	0x2
 2914 0a67 49       		.byte	0x49
 2915 0a68 730A0000 		.4byte	0xa73
 2916 0a6c 01       		.byte	0x1
 2917 0a6d 05       		.byte	0x5
 2918 0a6e 03       		.byte	0x3
 2919 0a6f 00000000 		.4byte	show_select_timer
 2920 0a73 0E       		.uleb128 0xe
 2921 0a74 3D010000 		.4byte	0x13d
 2922 0a78 23       		.uleb128 0x23
 2923 0a79 5C050000 		.4byte	.LASF157
 2924 0a7d 02       		.byte	0x2
 2925 0a7e 4A       		.byte	0x4a
 2926 0a7f 8A0A0000 		.4byte	0xa8a
ARM GAS  /tmp/ccnmAMP4.s 			page 91


 2927 0a83 01       		.byte	0x1
 2928 0a84 05       		.byte	0x5
 2929 0a85 03       		.byte	0x3
 2930 0a86 00000000 		.4byte	switches_timer
 2931 0a8a 0E       		.uleb128 0xe
 2932 0a8b 24010000 		.4byte	0x124
 2933 0a8f 23       		.uleb128 0x23
 2934 0a90 4F000000 		.4byte	.LASF158
 2935 0a94 02       		.byte	0x2
 2936 0a95 4B       		.byte	0x4b
 2937 0a96 8A0A0000 		.4byte	0xa8a
 2938 0a9a 01       		.byte	0x1
 2939 0a9b 05       		.byte	0x5
 2940 0a9c 03       		.byte	0x3
 2941 0a9d 00000000 		.4byte	acswitch_timer
 2942 0aa1 23       		.uleb128 0x23
 2943 0aa2 CE050000 		.4byte	.LASF159
 2944 0aa6 02       		.byte	0x2
 2945 0aa7 4D       		.byte	0x4d
 2946 0aa8 730A0000 		.4byte	0xa73
 2947 0aac 01       		.byte	0x1
 2948 0aad 05       		.byte	0x5
 2949 0aae 03       		.byte	0x3
 2950 0aaf 00000000 		.4byte	scroll1_timer
 2951 0ab3 23       		.uleb128 0x23
 2952 0ab4 210A0000 		.4byte	.LASF160
 2953 0ab8 02       		.byte	0x2
 2954 0ab9 4E       		.byte	0x4e
 2955 0aba 730A0000 		.4byte	0xa73
 2956 0abe 01       		.byte	0x1
 2957 0abf 05       		.byte	0x5
 2958 0ac0 03       		.byte	0x3
 2959 0ac1 00000000 		.4byte	scroll2_timer
 2960 0ac5 23       		.uleb128 0x23
 2961 0ac6 C2090000 		.4byte	.LASF161
 2962 0aca 02       		.byte	0x2
 2963 0acb 50       		.byte	0x50
 2964 0acc 730A0000 		.4byte	0xa73
 2965 0ad0 01       		.byte	0x1
 2966 0ad1 05       		.byte	0x5
 2967 0ad2 03       		.byte	0x3
 2968 0ad3 00000000 		.4byte	standalone_timer
 2969 0ad7 23       		.uleb128 0x23
 2970 0ad8 97070000 		.4byte	.LASF162
 2971 0adc 02       		.byte	0x2
 2972 0add 51       		.byte	0x51
 2973 0ade 730A0000 		.4byte	0xa73
 2974 0ae2 01       		.byte	0x1
 2975 0ae3 05       		.byte	0x5
 2976 0ae4 03       		.byte	0x3
 2977 0ae5 00000000 		.4byte	standalone_enable_menu_timer
 2978 0ae9 23       		.uleb128 0x23
 2979 0aea 8B010000 		.4byte	.LASF163
 2980 0aee 02       		.byte	0x2
 2981 0aef 53       		.byte	0x53
 2982 0af0 8A0A0000 		.4byte	0xa8a
 2983 0af4 01       		.byte	0x1
ARM GAS  /tmp/ccnmAMP4.s 			page 92


 2984 0af5 05       		.byte	0x5
 2985 0af6 03       		.byte	0x3
 2986 0af7 00000000 		.4byte	grouped_master_timeout_timer
 2987 0afb 23       		.uleb128 0x23
 2988 0afc 61030000 		.4byte	.LASF164
 2989 0b00 02       		.byte	0x2
 2990 0b01 54       		.byte	0x54
 2991 0b02 730A0000 		.4byte	0xa73
 2992 0b06 01       		.byte	0x1
 2993 0b07 05       		.byte	0x5
 2994 0b08 03       		.byte	0x3
 2995 0b09 00000000 		.4byte	take_temp_sample
 2996 0b0d 23       		.uleb128 0x23
 2997 0b0e 65080000 		.4byte	.LASF165
 2998 0b12 02       		.byte	0x2
 2999 0b13 55       		.byte	0x55
 3000 0b14 8A0A0000 		.4byte	0xa8a
 3001 0b18 01       		.byte	0x1
 3002 0b19 05       		.byte	0x5
 3003 0b1a 03       		.byte	0x3
 3004 0b1b 00000000 		.4byte	timer_wifi_bright
 3005 0b1f 23       		.uleb128 0x23
 3006 0b20 99040000 		.4byte	.LASF166
 3007 0b24 02       		.byte	0x2
 3008 0b25 58       		.byte	0x58
 3009 0b26 730A0000 		.4byte	0xa73
 3010 0b2a 01       		.byte	0x1
 3011 0b2b 05       		.byte	0x5
 3012 0b2c 03       		.byte	0x3
 3013 0b2d 00000000 		.4byte	timer_relay
 3014 0b31 23       		.uleb128 0x23
 3015 0b32 AC020000 		.4byte	.LASF167
 3016 0b36 02       		.byte	0x2
 3017 0b37 5A       		.byte	0x5a
 3018 0b38 730A0000 		.4byte	0xa73
 3019 0b3c 01       		.byte	0x1
 3020 0b3d 05       		.byte	0x5
 3021 0b3e 03       		.byte	0x3
 3022 0b3f 00000000 		.4byte	tt_take_photo_sample
 3023 0b43 23       		.uleb128 0x23
 3024 0b44 11040000 		.4byte	.LASF168
 3025 0b48 02       		.byte	0x2
 3026 0b49 5B       		.byte	0x5b
 3027 0b4a 730A0000 		.4byte	0xa73
 3028 0b4e 01       		.byte	0x1
 3029 0b4f 05       		.byte	0x5
 3030 0b50 03       		.byte	0x3
 3031 0b51 00000000 		.4byte	tt_relay_on_off
 3032 0b55 23       		.uleb128 0x23
 3033 0b56 76040000 		.4byte	.LASF169
 3034 0b5a 02       		.byte	0x2
 3035 0b5b 5F       		.byte	0x5f
 3036 0b5c 24010000 		.4byte	0x124
 3037 0b60 01       		.byte	0x1
 3038 0b61 05       		.byte	0x5
 3039 0b62 03       		.byte	0x3
 3040 0b63 00000000 		.4byte	saved_mode
ARM GAS  /tmp/ccnmAMP4.s 			page 93


 3041 0b67 24       		.uleb128 0x24
 3042 0b68 733100   		.ascii	"s1\000"
 3043 0b6b 02       		.byte	0x2
 3044 0b6c 63       		.byte	0x63
 3045 0b6d 3D010000 		.4byte	0x13d
 3046 0b71 01       		.byte	0x1
 3047 0b72 05       		.byte	0x5
 3048 0b73 03       		.byte	0x3
 3049 0b74 00000000 		.4byte	s1
 3050 0b78 24       		.uleb128 0x24
 3051 0b79 733200   		.ascii	"s2\000"
 3052 0b7c 02       		.byte	0x2
 3053 0b7d 64       		.byte	0x64
 3054 0b7e 3D010000 		.4byte	0x13d
 3055 0b82 01       		.byte	0x1
 3056 0b83 05       		.byte	0x5
 3057 0b84 03       		.byte	0x3
 3058 0b85 00000000 		.4byte	s2
 3059 0b89 24       		.uleb128 0x24
 3060 0b8a 73616300 		.ascii	"sac\000"
 3061 0b8e 02       		.byte	0x2
 3062 0b8f 65       		.byte	0x65
 3063 0b90 3D010000 		.4byte	0x13d
 3064 0b94 01       		.byte	0x1
 3065 0b95 05       		.byte	0x5
 3066 0b96 03       		.byte	0x3
 3067 0b97 00000000 		.4byte	sac
 3068 0b9b 23       		.uleb128 0x23
 3069 0b9c 3E080000 		.4byte	.LASF170
 3070 0ba0 02       		.byte	0x2
 3071 0ba1 66       		.byte	0x66
 3072 0ba2 24010000 		.4byte	0x124
 3073 0ba6 01       		.byte	0x1
 3074 0ba7 05       		.byte	0x5
 3075 0ba8 03       		.byte	0x3
 3076 0ba9 00000000 		.4byte	sac_aux
 3077 0bad 23       		.uleb128 0x23
 3078 0bae B4070000 		.4byte	.LASF171
 3079 0bb2 02       		.byte	0x2
 3080 0bb3 6A       		.byte	0x6a
 3081 0bb4 BF0B0000 		.4byte	0xbbf
 3082 0bb8 01       		.byte	0x1
 3083 0bb9 05       		.byte	0x5
 3084 0bba 03       		.byte	0x3
 3085 0bbb 00000000 		.4byte	adc_ch
 3086 0bbf 0E       		.uleb128 0xe
 3087 0bc0 BA050000 		.4byte	0x5ba
 3088 0bc4 23       		.uleb128 0x23
 3089 0bc5 110A0000 		.4byte	.LASF172
 3090 0bc9 02       		.byte	0x2
 3091 0bca 6B       		.byte	0x6b
 3092 0bcb 8A0A0000 		.4byte	0xa8a
 3093 0bcf 01       		.byte	0x1
 3094 0bd0 05       		.byte	0x5
 3095 0bd1 03       		.byte	0x3
 3096 0bd2 00000000 		.4byte	seq_ready
 3097 0bd6 23       		.uleb128 0x23
ARM GAS  /tmp/ccnmAMP4.s 			page 94


 3098 0bd7 D5040000 		.4byte	.LASF173
 3099 0bdb 02       		.byte	0x2
 3100 0bdc 6C       		.byte	0x6c
 3101 0bdd 3D010000 		.4byte	0x13d
 3102 0be1 01       		.byte	0x1
 3103 0be2 05       		.byte	0x5
 3104 0be3 03       		.byte	0x3
 3105 0be4 00000000 		.4byte	zero_current
 3106 0be8 23       		.uleb128 0x23
 3107 0be9 58040000 		.4byte	.LASF174
 3108 0bed 02       		.byte	0x2
 3109 0bee 70       		.byte	0x70
 3110 0bef 8A0A0000 		.4byte	0xa8a
 3111 0bf3 01       		.byte	0x1
 3112 0bf4 05       		.byte	0x5
 3113 0bf5 03       		.byte	0x3
 3114 0bf6 00000000 		.4byte	usart1_mini_timeout
 3115 0bfa 23       		.uleb128 0x23
 3116 0bfb 72020000 		.4byte	.LASF175
 3117 0bff 02       		.byte	0x2
 3118 0c00 71       		.byte	0x71
 3119 0c01 8A0A0000 		.4byte	0xa8a
 3120 0c05 01       		.byte	0x1
 3121 0c06 05       		.byte	0x5
 3122 0c07 03       		.byte	0x3
 3123 0c08 00000000 		.4byte	usart1_pckt_ready
 3124 0c0c 23       		.uleb128 0x23
 3125 0c0d FD020000 		.4byte	.LASF176
 3126 0c11 02       		.byte	0x2
 3127 0c12 72       		.byte	0x72
 3128 0c13 8A0A0000 		.4byte	0xa8a
 3129 0c17 01       		.byte	0x1
 3130 0c18 05       		.byte	0x5
 3131 0c19 03       		.byte	0x3
 3132 0c1a 00000000 		.4byte	usart1_have_data
 3133 0c1e 23       		.uleb128 0x23
 3134 0c1f 40020000 		.4byte	.LASF177
 3135 0c23 02       		.byte	0x2
 3136 0c24 73       		.byte	0x73
 3137 0c25 24010000 		.4byte	0x124
 3138 0c29 01       		.byte	0x1
 3139 0c2a 05       		.byte	0x5
 3140 0c2b 03       		.byte	0x3
 3141 0c2c 00000000 		.4byte	usart1_pckt_bytes
 3142 0c30 23       		.uleb128 0x23
 3143 0c31 C6030000 		.4byte	.LASF178
 3144 0c35 02       		.byte	0x2
 3145 0c36 8A       		.byte	0x8a
 3146 0c37 8A0A0000 		.4byte	0xa8a
 3147 0c3b 01       		.byte	0x1
 3148 0c3c 05       		.byte	0x5
 3149 0c3d 03       		.byte	0x3
 3150 0c3e 00000000 		.4byte	usart2_mini_timeout
 3151 0c42 23       		.uleb128 0x23
 3152 0c43 64010000 		.4byte	.LASF179
 3153 0c47 02       		.byte	0x2
 3154 0c48 8B       		.byte	0x8b
ARM GAS  /tmp/ccnmAMP4.s 			page 95


 3155 0c49 8A0A0000 		.4byte	0xa8a
 3156 0c4d 01       		.byte	0x1
 3157 0c4e 05       		.byte	0x5
 3158 0c4f 03       		.byte	0x3
 3159 0c50 00000000 		.4byte	usart2_pckt_ready
 3160 0c54 23       		.uleb128 0x23
 3161 0c55 BE010000 		.4byte	.LASF180
 3162 0c59 02       		.byte	0x2
 3163 0c5a 8C       		.byte	0x8c
 3164 0c5b 8A0A0000 		.4byte	0xa8a
 3165 0c5f 01       		.byte	0x1
 3166 0c60 05       		.byte	0x5
 3167 0c61 03       		.byte	0x3
 3168 0c62 00000000 		.4byte	usart2_have_data
 3169 0c66 23       		.uleb128 0x23
 3170 0c67 FF030000 		.4byte	.LASF181
 3171 0c6b 02       		.byte	0x2
 3172 0c6c 8D       		.byte	0x8d
 3173 0c6d 24010000 		.4byte	0x124
 3174 0c71 01       		.byte	0x1
 3175 0c72 05       		.byte	0x5
 3176 0c73 03       		.byte	0x3
 3177 0c74 00000000 		.4byte	usart2_pckt_bytes
 3178 0c78 0C       		.uleb128 0xc
 3179 0c79 B3050000 		.4byte	0x5b3
 3180 0c7d 830C0000 		.4byte	0xc83
 3181 0c81 25       		.uleb128 0x25
 3182 0c82 00       		.byte	0
 3183 0c83 26       		.uleb128 0x26
 3184 0c84 9D050000 		.4byte	.LASF182
 3185 0c88 02       		.byte	0x2
 3186 0c89 93       		.byte	0x93
 3187 0c8a 900C0000 		.4byte	0xc90
 3188 0c8e 01       		.byte	0x1
 3189 0c8f 01       		.byte	0x1
 3190 0c90 0E       		.uleb128 0xe
 3191 0c91 780C0000 		.4byte	0xc78
 3192 0c95 23       		.uleb128 0x23
 3193 0c96 5E000000 		.4byte	.LASF183
 3194 0c9a 02       		.byte	0x2
 3195 0c9b 97       		.byte	0x97
 3196 0c9c B9060000 		.4byte	0x6b9
 3197 0ca0 01       		.byte	0x1
 3198 0ca1 05       		.byte	0x5
 3199 0ca2 03       		.byte	0x3
 3200 0ca3 00000000 		.4byte	param_struct
 3201 0ca7 23       		.uleb128 0x23
 3202 0ca8 F5010000 		.4byte	.LASF184
 3203 0cac 02       		.byte	0x2
 3204 0cad 9A       		.byte	0x9a
 3205 0cae 7D010000 		.4byte	0x17d
 3206 0cb2 01       		.byte	0x1
 3207 0cb3 05       		.byte	0x5
 3208 0cb4 03       		.byte	0x3
 3209 0cb5 00000000 		.4byte	power_2secs_acum
 3210 0cb9 23       		.uleb128 0x23
 3211 0cba 4A050000 		.4byte	.LASF185
ARM GAS  /tmp/ccnmAMP4.s 			page 96


 3212 0cbe 02       		.byte	0x2
 3213 0cbf 9B       		.byte	0x9b
 3214 0cc0 24010000 		.4byte	0x124
 3215 0cc4 01       		.byte	0x1
 3216 0cc5 05       		.byte	0x5
 3217 0cc6 03       		.byte	0x3
 3218 0cc7 00000000 		.4byte	power_2secs_index
 3219 0ccb 23       		.uleb128 0x23
 3220 0ccc D5020000 		.4byte	.LASF186
 3221 0cd0 02       		.byte	0x2
 3222 0cd1 9C       		.byte	0x9c
 3223 0cd2 3D010000 		.4byte	0x13d
 3224 0cd6 01       		.byte	0x1
 3225 0cd7 05       		.byte	0x5
 3226 0cd8 03       		.byte	0x3
 3227 0cd9 00000000 		.4byte	power_minutes
 3228 0cdd 23       		.uleb128 0x23
 3229 0cde F3090000 		.4byte	.LASF187
 3230 0ce2 02       		.byte	0x2
 3231 0ce3 9D       		.byte	0x9d
 3232 0ce4 24010000 		.4byte	0x124
 3233 0ce8 01       		.byte	0x1
 3234 0ce9 05       		.byte	0x5
 3235 0cea 03       		.byte	0x3
 3236 0ceb 00000000 		.4byte	power_minutes_index
 3237 0cef 23       		.uleb128 0x23
 3238 0cf0 DA030000 		.4byte	.LASF188
 3239 0cf4 02       		.byte	0x2
 3240 0cf5 9E       		.byte	0x9e
 3241 0cf6 3D010000 		.4byte	0x13d
 3242 0cfa 01       		.byte	0x1
 3243 0cfb 05       		.byte	0x5
 3244 0cfc 03       		.byte	0x3
 3245 0cfd 00000000 		.4byte	power_hours
 3246 0d01 23       		.uleb128 0x23
 3247 0d02 C7050000 		.4byte	.LASF189
 3248 0d06 02       		.byte	0x2
 3249 0d07 A1       		.byte	0xa1
 3250 0d08 ED080000 		.4byte	0x8ed
 3251 0d0c 01       		.byte	0x1
 3252 0d0d 05       		.byte	0x5
 3253 0d0e 03       		.byte	0x3
 3254 0d0f 00000000 		.4byte	gsmNUM
 3255 0d13 0C       		.uleb128 0xc
 3256 0d14 B3050000 		.4byte	0x5b3
 3257 0d18 230D0000 		.4byte	0xd23
 3258 0d1c 0D       		.uleb128 0xd
 3259 0d1d 5D020000 		.4byte	0x25d
 3260 0d21 B3       		.byte	0xb3
 3261 0d22 00       		.byte	0
 3262 0d23 23       		.uleb128 0x23
 3263 0d24 A8060000 		.4byte	.LASF190
 3264 0d28 02       		.byte	0x2
 3265 0d29 A2       		.byte	0xa2
 3266 0d2a 130D0000 		.4byte	0xd13
 3267 0d2e 01       		.byte	0x1
 3268 0d2f 05       		.byte	0x5
ARM GAS  /tmp/ccnmAMP4.s 			page 97


 3269 0d30 03       		.byte	0x3
 3270 0d31 00000000 		.4byte	gsmMSG
 3271 0d35 23       		.uleb128 0x23
 3272 0d36 70060000 		.4byte	.LASF191
 3273 0d3a 02       		.byte	0x2
 3274 0d3b AA       		.byte	0xaa
 3275 0d3c 730A0000 		.4byte	0xa73
 3276 0d40 01       		.byte	0x1
 3277 0d41 05       		.byte	0x5
 3278 0d42 03       		.byte	0x3
 3279 0d43 00000000 		.4byte	wait_ms_var
 3280 0d47 23       		.uleb128 0x23
 3281 0d48 2F0A0000 		.4byte	.LASF192
 3282 0d4c 02       		.byte	0x2
 3283 0d4d AB       		.byte	0xab
 3284 0d4e 730A0000 		.4byte	0xa73
 3285 0d52 01       		.byte	0x1
 3286 0d53 05       		.byte	0x5
 3287 0d54 03       		.byte	0x3
 3288 0d55 00000000 		.4byte	timer_standby
 3289 0d59 23       		.uleb128 0x23
 3290 0d5a 17010000 		.4byte	.LASF193
 3291 0d5e 02       		.byte	0x2
 3292 0d5f AC       		.byte	0xac
 3293 0d60 730A0000 		.4byte	0xa73
 3294 0d64 01       		.byte	0x1
 3295 0d65 05       		.byte	0x5
 3296 0d66 03       		.byte	0x3
 3297 0d67 00000000 		.4byte	tcp_kalive_timer
 3298 0d6b 23       		.uleb128 0x23
 3299 0d6c 81040000 		.4byte	.LASF194
 3300 0d70 02       		.byte	0x2
 3301 0d71 AE       		.byte	0xae
 3302 0d72 8A0A0000 		.4byte	0xa8a
 3303 0d76 01       		.byte	0x1
 3304 0d77 05       		.byte	0x5
 3305 0d78 03       		.byte	0x3
 3306 0d79 00000000 		.4byte	filter_timer
 3307 0d7d 23       		.uleb128 0x23
 3308 0d7e 21040000 		.4byte	.LASF195
 3309 0d82 02       		.byte	0x2
 3310 0d83 B3       		.byte	0xb3
 3311 0d84 730A0000 		.4byte	0xa73
 3312 0d88 01       		.byte	0x1
 3313 0d89 05       		.byte	0x5
 3314 0d8a 03       		.byte	0x3
 3315 0d8b 00000000 		.4byte	secs
 3316 0d8f 23       		.uleb128 0x23
 3317 0d90 AF060000 		.4byte	.LASF196
 3318 0d94 02       		.byte	0x2
 3319 0d95 B4       		.byte	0xb4
 3320 0d96 8A0A0000 		.4byte	0xa8a
 3321 0d9a 01       		.byte	0x1
 3322 0d9b 05       		.byte	0x5
 3323 0d9c 03       		.byte	0x3
 3324 0d9d 00000000 		.4byte	hours
 3325 0da1 23       		.uleb128 0x23
ARM GAS  /tmp/ccnmAMP4.s 			page 98


 3326 0da2 5D020000 		.4byte	.LASF197
 3327 0da6 02       		.byte	0x2
 3328 0da7 B5       		.byte	0xb5
 3329 0da8 8A0A0000 		.4byte	0xa8a
 3330 0dac 01       		.byte	0x1
 3331 0dad 05       		.byte	0x5
 3332 0dae 03       		.byte	0x3
 3333 0daf 00000000 		.4byte	minutes
 3334 0db3 0C       		.uleb128 0xc
 3335 0db4 3D010000 		.4byte	0x13d
 3336 0db8 C30D0000 		.4byte	0xdc3
 3337 0dbc 0D       		.uleb128 0xd
 3338 0dbd 5D020000 		.4byte	0x25d
 3339 0dc1 09       		.byte	0x9
 3340 0dc2 00       		.byte	0
 3341 0dc3 23       		.uleb128 0x23
 3342 0dc4 4D010000 		.4byte	.LASF198
 3343 0dc8 02       		.byte	0x2
 3344 0dc9 B9       		.byte	0xb9
 3345 0dca B30D0000 		.4byte	0xdb3
 3346 0dce 01       		.byte	0x1
 3347 0dcf 05       		.byte	0x5
 3348 0dd0 03       		.byte	0x3
 3349 0dd1 00000000 		.4byte	power_vect
 3350 0dd5 0C       		.uleb128 0xc
 3351 0dd6 3D010000 		.4byte	0x13d
 3352 0dda E50D0000 		.4byte	0xde5
 3353 0dde 0D       		.uleb128 0xd
 3354 0ddf 5D020000 		.4byte	0x25d
 3355 0de3 10       		.byte	0x10
 3356 0de4 00       		.byte	0
 3357 0de5 23       		.uleb128 0x23
 3358 0de6 1B0A0000 		.4byte	.LASF199
 3359 0dea 02       		.byte	0x2
 3360 0deb C7       		.byte	0xc7
 3361 0dec D50D0000 		.4byte	0xdd5
 3362 0df0 01       		.byte	0x1
 3363 0df1 05       		.byte	0x5
 3364 0df2 03       		.byte	0x3
 3365 0df3 00000000 		.4byte	vtemp
 3366 0df7 23       		.uleb128 0x23
 3367 0df8 E3000000 		.4byte	.LASF200
 3368 0dfc 02       		.byte	0x2
 3369 0dfd C8       		.byte	0xc8
 3370 0dfe D50D0000 		.4byte	0xdd5
 3371 0e02 01       		.byte	0x1
 3372 0e03 05       		.byte	0x5
 3373 0e04 03       		.byte	0x3
 3374 0e05 00000000 		.4byte	vpote
 3375 0e09 00       		.byte	0
 3376              		.section	.debug_abbrev,"",%progbits
 3377              	.Ldebug_abbrev0:
 3378 0000 01       		.uleb128 0x1
 3379 0001 11       		.uleb128 0x11
 3380 0002 01       		.byte	0x1
 3381 0003 25       		.uleb128 0x25
 3382 0004 0E       		.uleb128 0xe
ARM GAS  /tmp/ccnmAMP4.s 			page 99


 3383 0005 13       		.uleb128 0x13
 3384 0006 0B       		.uleb128 0xb
 3385 0007 03       		.uleb128 0x3
 3386 0008 0E       		.uleb128 0xe
 3387 0009 1B       		.uleb128 0x1b
 3388 000a 0E       		.uleb128 0xe
 3389 000b 55       		.uleb128 0x55
 3390 000c 06       		.uleb128 0x6
 3391 000d 11       		.uleb128 0x11
 3392 000e 01       		.uleb128 0x1
 3393 000f 52       		.uleb128 0x52
 3394 0010 01       		.uleb128 0x1
 3395 0011 10       		.uleb128 0x10
 3396 0012 06       		.uleb128 0x6
 3397 0013 00       		.byte	0
 3398 0014 00       		.byte	0
 3399 0015 02       		.uleb128 0x2
 3400 0016 04       		.uleb128 0x4
 3401 0017 01       		.byte	0x1
 3402 0018 03       		.uleb128 0x3
 3403 0019 0E       		.uleb128 0xe
 3404 001a 0B       		.uleb128 0xb
 3405 001b 0B       		.uleb128 0xb
 3406 001c 49       		.uleb128 0x49
 3407 001d 13       		.uleb128 0x13
 3408 001e 3A       		.uleb128 0x3a
 3409 001f 0B       		.uleb128 0xb
 3410 0020 3B       		.uleb128 0x3b
 3411 0021 0B       		.uleb128 0xb
 3412 0022 01       		.uleb128 0x1
 3413 0023 13       		.uleb128 0x13
 3414 0024 00       		.byte	0
 3415 0025 00       		.byte	0
 3416 0026 03       		.uleb128 0x3
 3417 0027 28       		.uleb128 0x28
 3418 0028 00       		.byte	0
 3419 0029 03       		.uleb128 0x3
 3420 002a 0E       		.uleb128 0xe
 3421 002b 1C       		.uleb128 0x1c
 3422 002c 0D       		.uleb128 0xd
 3423 002d 00       		.byte	0
 3424 002e 00       		.byte	0
 3425 002f 04       		.uleb128 0x4
 3426 0030 28       		.uleb128 0x28
 3427 0031 00       		.byte	0
 3428 0032 03       		.uleb128 0x3
 3429 0033 0E       		.uleb128 0xe
 3430 0034 1C       		.uleb128 0x1c
 3431 0035 0B       		.uleb128 0xb
 3432 0036 00       		.byte	0
 3433 0037 00       		.byte	0
 3434 0038 05       		.uleb128 0x5
 3435 0039 24       		.uleb128 0x24
 3436 003a 00       		.byte	0
 3437 003b 0B       		.uleb128 0xb
 3438 003c 0B       		.uleb128 0xb
 3439 003d 3E       		.uleb128 0x3e
ARM GAS  /tmp/ccnmAMP4.s 			page 100


 3440 003e 0B       		.uleb128 0xb
 3441 003f 03       		.uleb128 0x3
 3442 0040 0E       		.uleb128 0xe
 3443 0041 00       		.byte	0
 3444 0042 00       		.byte	0
 3445 0043 06       		.uleb128 0x6
 3446 0044 16       		.uleb128 0x16
 3447 0045 00       		.byte	0
 3448 0046 03       		.uleb128 0x3
 3449 0047 0E       		.uleb128 0xe
 3450 0048 3A       		.uleb128 0x3a
 3451 0049 0B       		.uleb128 0xb
 3452 004a 3B       		.uleb128 0x3b
 3453 004b 05       		.uleb128 0x5
 3454 004c 49       		.uleb128 0x49
 3455 004d 13       		.uleb128 0x13
 3456 004e 00       		.byte	0
 3457 004f 00       		.byte	0
 3458 0050 07       		.uleb128 0x7
 3459 0051 16       		.uleb128 0x16
 3460 0052 00       		.byte	0
 3461 0053 03       		.uleb128 0x3
 3462 0054 0E       		.uleb128 0xe
 3463 0055 3A       		.uleb128 0x3a
 3464 0056 0B       		.uleb128 0xb
 3465 0057 3B       		.uleb128 0x3b
 3466 0058 0B       		.uleb128 0xb
 3467 0059 49       		.uleb128 0x49
 3468 005a 13       		.uleb128 0x13
 3469 005b 00       		.byte	0
 3470 005c 00       		.byte	0
 3471 005d 08       		.uleb128 0x8
 3472 005e 24       		.uleb128 0x24
 3473 005f 00       		.byte	0
 3474 0060 0B       		.uleb128 0xb
 3475 0061 0B       		.uleb128 0xb
 3476 0062 3E       		.uleb128 0x3e
 3477 0063 0B       		.uleb128 0xb
 3478 0064 03       		.uleb128 0x3
 3479 0065 08       		.uleb128 0x8
 3480 0066 00       		.byte	0
 3481 0067 00       		.byte	0
 3482 0068 09       		.uleb128 0x9
 3483 0069 13       		.uleb128 0x13
 3484 006a 01       		.byte	0x1
 3485 006b 0B       		.uleb128 0xb
 3486 006c 05       		.uleb128 0x5
 3487 006d 3A       		.uleb128 0x3a
 3488 006e 0B       		.uleb128 0xb
 3489 006f 3B       		.uleb128 0x3b
 3490 0070 0B       		.uleb128 0xb
 3491 0071 01       		.uleb128 0x1
 3492 0072 13       		.uleb128 0x13
 3493 0073 00       		.byte	0
 3494 0074 00       		.byte	0
 3495 0075 0A       		.uleb128 0xa
 3496 0076 0D       		.uleb128 0xd
ARM GAS  /tmp/ccnmAMP4.s 			page 101


 3497 0077 00       		.byte	0
 3498 0078 03       		.uleb128 0x3
 3499 0079 0E       		.uleb128 0xe
 3500 007a 3A       		.uleb128 0x3a
 3501 007b 0B       		.uleb128 0xb
 3502 007c 3B       		.uleb128 0x3b
 3503 007d 0B       		.uleb128 0xb
 3504 007e 49       		.uleb128 0x49
 3505 007f 13       		.uleb128 0x13
 3506 0080 38       		.uleb128 0x38
 3507 0081 0A       		.uleb128 0xa
 3508 0082 00       		.byte	0
 3509 0083 00       		.byte	0
 3510 0084 0B       		.uleb128 0xb
 3511 0085 0D       		.uleb128 0xd
 3512 0086 00       		.byte	0
 3513 0087 03       		.uleb128 0x3
 3514 0088 08       		.uleb128 0x8
 3515 0089 3A       		.uleb128 0x3a
 3516 008a 0B       		.uleb128 0xb
 3517 008b 3B       		.uleb128 0x3b
 3518 008c 0B       		.uleb128 0xb
 3519 008d 49       		.uleb128 0x49
 3520 008e 13       		.uleb128 0x13
 3521 008f 38       		.uleb128 0x38
 3522 0090 0A       		.uleb128 0xa
 3523 0091 00       		.byte	0
 3524 0092 00       		.byte	0
 3525 0093 0C       		.uleb128 0xc
 3526 0094 01       		.uleb128 0x1
 3527 0095 01       		.byte	0x1
 3528 0096 49       		.uleb128 0x49
 3529 0097 13       		.uleb128 0x13
 3530 0098 01       		.uleb128 0x1
 3531 0099 13       		.uleb128 0x13
 3532 009a 00       		.byte	0
 3533 009b 00       		.byte	0
 3534 009c 0D       		.uleb128 0xd
 3535 009d 21       		.uleb128 0x21
 3536 009e 00       		.byte	0
 3537 009f 49       		.uleb128 0x49
 3538 00a0 13       		.uleb128 0x13
 3539 00a1 2F       		.uleb128 0x2f
 3540 00a2 0B       		.uleb128 0xb
 3541 00a3 00       		.byte	0
 3542 00a4 00       		.byte	0
 3543 00a5 0E       		.uleb128 0xe
 3544 00a6 35       		.uleb128 0x35
 3545 00a7 00       		.byte	0
 3546 00a8 49       		.uleb128 0x49
 3547 00a9 13       		.uleb128 0x13
 3548 00aa 00       		.byte	0
 3549 00ab 00       		.byte	0
 3550 00ac 0F       		.uleb128 0xf
 3551 00ad 13       		.uleb128 0x13
 3552 00ae 01       		.byte	0x1
 3553 00af 0B       		.uleb128 0xb
ARM GAS  /tmp/ccnmAMP4.s 			page 102


 3554 00b0 0B       		.uleb128 0xb
 3555 00b1 3A       		.uleb128 0x3a
 3556 00b2 0B       		.uleb128 0xb
 3557 00b3 3B       		.uleb128 0x3b
 3558 00b4 0B       		.uleb128 0xb
 3559 00b5 01       		.uleb128 0x1
 3560 00b6 13       		.uleb128 0x13
 3561 00b7 00       		.byte	0
 3562 00b8 00       		.byte	0
 3563 00b9 10       		.uleb128 0x10
 3564 00ba 26       		.uleb128 0x26
 3565 00bb 00       		.byte	0
 3566 00bc 49       		.uleb128 0x49
 3567 00bd 13       		.uleb128 0x13
 3568 00be 00       		.byte	0
 3569 00bf 00       		.byte	0
 3570 00c0 11       		.uleb128 0x11
 3571 00c1 0D       		.uleb128 0xd
 3572 00c2 00       		.byte	0
 3573 00c3 03       		.uleb128 0x3
 3574 00c4 08       		.uleb128 0x8
 3575 00c5 3A       		.uleb128 0x3a
 3576 00c6 0B       		.uleb128 0xb
 3577 00c7 3B       		.uleb128 0x3b
 3578 00c8 05       		.uleb128 0x5
 3579 00c9 49       		.uleb128 0x49
 3580 00ca 13       		.uleb128 0x13
 3581 00cb 38       		.uleb128 0x38
 3582 00cc 0A       		.uleb128 0xa
 3583 00cd 00       		.byte	0
 3584 00ce 00       		.byte	0
 3585 00cf 12       		.uleb128 0x12
 3586 00d0 0D       		.uleb128 0xd
 3587 00d1 00       		.byte	0
 3588 00d2 03       		.uleb128 0x3
 3589 00d3 0E       		.uleb128 0xe
 3590 00d4 3A       		.uleb128 0x3a
 3591 00d5 0B       		.uleb128 0xb
 3592 00d6 3B       		.uleb128 0x3b
 3593 00d7 05       		.uleb128 0x5
 3594 00d8 49       		.uleb128 0x49
 3595 00d9 13       		.uleb128 0x13
 3596 00da 38       		.uleb128 0x38
 3597 00db 0A       		.uleb128 0xa
 3598 00dc 00       		.byte	0
 3599 00dd 00       		.byte	0
 3600 00de 13       		.uleb128 0x13
 3601 00df 13       		.uleb128 0x13
 3602 00e0 01       		.byte	0x1
 3603 00e1 0B       		.uleb128 0xb
 3604 00e2 0B       		.uleb128 0xb
 3605 00e3 3A       		.uleb128 0x3a
 3606 00e4 0B       		.uleb128 0xb
 3607 00e5 3B       		.uleb128 0x3b
 3608 00e6 05       		.uleb128 0x5
 3609 00e7 01       		.uleb128 0x1
 3610 00e8 13       		.uleb128 0x13
ARM GAS  /tmp/ccnmAMP4.s 			page 103


 3611 00e9 00       		.byte	0
 3612 00ea 00       		.byte	0
 3613 00eb 14       		.uleb128 0x14
 3614 00ec 04       		.uleb128 0x4
 3615 00ed 01       		.byte	0x1
 3616 00ee 0B       		.uleb128 0xb
 3617 00ef 0B       		.uleb128 0xb
 3618 00f0 49       		.uleb128 0x49
 3619 00f1 13       		.uleb128 0x13
 3620 00f2 3A       		.uleb128 0x3a
 3621 00f3 0B       		.uleb128 0xb
 3622 00f4 3B       		.uleb128 0x3b
 3623 00f5 0B       		.uleb128 0xb
 3624 00f6 01       		.uleb128 0x1
 3625 00f7 13       		.uleb128 0x13
 3626 00f8 00       		.byte	0
 3627 00f9 00       		.byte	0
 3628 00fa 15       		.uleb128 0x15
 3629 00fb 13       		.uleb128 0x13
 3630 00fc 01       		.byte	0x1
 3631 00fd 03       		.uleb128 0x3
 3632 00fe 0E       		.uleb128 0xe
 3633 00ff 0B       		.uleb128 0xb
 3634 0100 0B       		.uleb128 0xb
 3635 0101 3A       		.uleb128 0x3a
 3636 0102 0B       		.uleb128 0xb
 3637 0103 3B       		.uleb128 0x3b
 3638 0104 0B       		.uleb128 0xb
 3639 0105 01       		.uleb128 0x1
 3640 0106 13       		.uleb128 0x13
 3641 0107 00       		.byte	0
 3642 0108 00       		.byte	0
 3643 0109 16       		.uleb128 0x16
 3644 010a 2E       		.uleb128 0x2e
 3645 010b 01       		.byte	0x1
 3646 010c 03       		.uleb128 0x3
 3647 010d 0E       		.uleb128 0xe
 3648 010e 3A       		.uleb128 0x3a
 3649 010f 0B       		.uleb128 0xb
 3650 0110 3B       		.uleb128 0x3b
 3651 0111 05       		.uleb128 0x5
 3652 0112 27       		.uleb128 0x27
 3653 0113 0C       		.uleb128 0xc
 3654 0114 11       		.uleb128 0x11
 3655 0115 01       		.uleb128 0x1
 3656 0116 12       		.uleb128 0x12
 3657 0117 01       		.uleb128 0x1
 3658 0118 40       		.uleb128 0x40
 3659 0119 06       		.uleb128 0x6
 3660 011a 9742     		.uleb128 0x2117
 3661 011c 0C       		.uleb128 0xc
 3662 011d 01       		.uleb128 0x1
 3663 011e 13       		.uleb128 0x13
 3664 011f 00       		.byte	0
 3665 0120 00       		.byte	0
 3666 0121 17       		.uleb128 0x17
 3667 0122 05       		.uleb128 0x5
ARM GAS  /tmp/ccnmAMP4.s 			page 104


 3668 0123 00       		.byte	0
 3669 0124 03       		.uleb128 0x3
 3670 0125 0E       		.uleb128 0xe
 3671 0126 3A       		.uleb128 0x3a
 3672 0127 0B       		.uleb128 0xb
 3673 0128 3B       		.uleb128 0x3b
 3674 0129 05       		.uleb128 0x5
 3675 012a 49       		.uleb128 0x49
 3676 012b 13       		.uleb128 0x13
 3677 012c 02       		.uleb128 0x2
 3678 012d 0A       		.uleb128 0xa
 3679 012e 00       		.byte	0
 3680 012f 00       		.byte	0
 3681 0130 18       		.uleb128 0x18
 3682 0131 2E       		.uleb128 0x2e
 3683 0132 01       		.byte	0x1
 3684 0133 03       		.uleb128 0x3
 3685 0134 0E       		.uleb128 0xe
 3686 0135 3A       		.uleb128 0x3a
 3687 0136 0B       		.uleb128 0xb
 3688 0137 3B       		.uleb128 0x3b
 3689 0138 05       		.uleb128 0x5
 3690 0139 27       		.uleb128 0x27
 3691 013a 0C       		.uleb128 0xc
 3692 013b 49       		.uleb128 0x49
 3693 013c 13       		.uleb128 0x13
 3694 013d 11       		.uleb128 0x11
 3695 013e 01       		.uleb128 0x1
 3696 013f 12       		.uleb128 0x12
 3697 0140 01       		.uleb128 0x1
 3698 0141 40       		.uleb128 0x40
 3699 0142 06       		.uleb128 0x6
 3700 0143 9642     		.uleb128 0x2116
 3701 0145 0C       		.uleb128 0xc
 3702 0146 01       		.uleb128 0x1
 3703 0147 13       		.uleb128 0x13
 3704 0148 00       		.byte	0
 3705 0149 00       		.byte	0
 3706 014a 19       		.uleb128 0x19
 3707 014b 2E       		.uleb128 0x2e
 3708 014c 01       		.byte	0x1
 3709 014d 3F       		.uleb128 0x3f
 3710 014e 0C       		.uleb128 0xc
 3711 014f 03       		.uleb128 0x3
 3712 0150 0E       		.uleb128 0xe
 3713 0151 3A       		.uleb128 0x3a
 3714 0152 0B       		.uleb128 0xb
 3715 0153 3B       		.uleb128 0x3b
 3716 0154 0B       		.uleb128 0xb
 3717 0155 27       		.uleb128 0x27
 3718 0156 0C       		.uleb128 0xc
 3719 0157 49       		.uleb128 0x49
 3720 0158 13       		.uleb128 0x13
 3721 0159 11       		.uleb128 0x11
 3722 015a 01       		.uleb128 0x1
 3723 015b 12       		.uleb128 0x12
 3724 015c 01       		.uleb128 0x1
ARM GAS  /tmp/ccnmAMP4.s 			page 105


 3725 015d 40       		.uleb128 0x40
 3726 015e 06       		.uleb128 0x6
 3727 015f 9642     		.uleb128 0x2116
 3728 0161 0C       		.uleb128 0xc
 3729 0162 01       		.uleb128 0x1
 3730 0163 13       		.uleb128 0x13
 3731 0164 00       		.byte	0
 3732 0165 00       		.byte	0
 3733 0166 1A       		.uleb128 0x1a
 3734 0167 34       		.uleb128 0x34
 3735 0168 00       		.byte	0
 3736 0169 03       		.uleb128 0x3
 3737 016a 08       		.uleb128 0x8
 3738 016b 3A       		.uleb128 0x3a
 3739 016c 0B       		.uleb128 0xb
 3740 016d 3B       		.uleb128 0x3b
 3741 016e 0B       		.uleb128 0xb
 3742 016f 49       		.uleb128 0x49
 3743 0170 13       		.uleb128 0x13
 3744 0171 02       		.uleb128 0x2
 3745 0172 0A       		.uleb128 0xa
 3746 0173 00       		.byte	0
 3747 0174 00       		.byte	0
 3748 0175 1B       		.uleb128 0x1b
 3749 0176 34       		.uleb128 0x34
 3750 0177 00       		.byte	0
 3751 0178 03       		.uleb128 0x3
 3752 0179 08       		.uleb128 0x8
 3753 017a 3A       		.uleb128 0x3a
 3754 017b 0B       		.uleb128 0xb
 3755 017c 3B       		.uleb128 0x3b
 3756 017d 0B       		.uleb128 0xb
 3757 017e 49       		.uleb128 0x49
 3758 017f 13       		.uleb128 0x13
 3759 0180 00       		.byte	0
 3760 0181 00       		.byte	0
 3761 0182 1C       		.uleb128 0x1c
 3762 0183 34       		.uleb128 0x34
 3763 0184 00       		.byte	0
 3764 0185 03       		.uleb128 0x3
 3765 0186 0E       		.uleb128 0xe
 3766 0187 3A       		.uleb128 0x3a
 3767 0188 0B       		.uleb128 0xb
 3768 0189 3B       		.uleb128 0x3b
 3769 018a 0B       		.uleb128 0xb
 3770 018b 49       		.uleb128 0x49
 3771 018c 13       		.uleb128 0x13
 3772 018d 00       		.byte	0
 3773 018e 00       		.byte	0
 3774 018f 1D       		.uleb128 0x1d
 3775 0190 34       		.uleb128 0x34
 3776 0191 00       		.byte	0
 3777 0192 03       		.uleb128 0x3
 3778 0193 0E       		.uleb128 0xe
 3779 0194 3A       		.uleb128 0x3a
 3780 0195 0B       		.uleb128 0xb
 3781 0196 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccnmAMP4.s 			page 106


 3782 0197 0B       		.uleb128 0xb
 3783 0198 49       		.uleb128 0x49
 3784 0199 13       		.uleb128 0x13
 3785 019a 02       		.uleb128 0x2
 3786 019b 0A       		.uleb128 0xa
 3787 019c 00       		.byte	0
 3788 019d 00       		.byte	0
 3789 019e 1E       		.uleb128 0x1e
 3790 019f 0F       		.uleb128 0xf
 3791 01a0 00       		.byte	0
 3792 01a1 0B       		.uleb128 0xb
 3793 01a2 0B       		.uleb128 0xb
 3794 01a3 49       		.uleb128 0x49
 3795 01a4 13       		.uleb128 0x13
 3796 01a5 00       		.byte	0
 3797 01a6 00       		.byte	0
 3798 01a7 1F       		.uleb128 0x1f
 3799 01a8 2E       		.uleb128 0x2e
 3800 01a9 01       		.byte	0x1
 3801 01aa 3F       		.uleb128 0x3f
 3802 01ab 0C       		.uleb128 0xc
 3803 01ac 03       		.uleb128 0x3
 3804 01ad 0E       		.uleb128 0xe
 3805 01ae 3A       		.uleb128 0x3a
 3806 01af 0B       		.uleb128 0xb
 3807 01b0 3B       		.uleb128 0x3b
 3808 01b1 05       		.uleb128 0x5
 3809 01b2 27       		.uleb128 0x27
 3810 01b3 0C       		.uleb128 0xc
 3811 01b4 11       		.uleb128 0x11
 3812 01b5 01       		.uleb128 0x1
 3813 01b6 12       		.uleb128 0x12
 3814 01b7 01       		.uleb128 0x1
 3815 01b8 40       		.uleb128 0x40
 3816 01b9 06       		.uleb128 0x6
 3817 01ba 9642     		.uleb128 0x2116
 3818 01bc 0C       		.uleb128 0xc
 3819 01bd 01       		.uleb128 0x1
 3820 01be 13       		.uleb128 0x13
 3821 01bf 00       		.byte	0
 3822 01c0 00       		.byte	0
 3823 01c1 20       		.uleb128 0x20
 3824 01c2 34       		.uleb128 0x34
 3825 01c3 00       		.byte	0
 3826 01c4 03       		.uleb128 0x3
 3827 01c5 08       		.uleb128 0x8
 3828 01c6 3A       		.uleb128 0x3a
 3829 01c7 0B       		.uleb128 0xb
 3830 01c8 3B       		.uleb128 0x3b
 3831 01c9 05       		.uleb128 0x5
 3832 01ca 49       		.uleb128 0x49
 3833 01cb 13       		.uleb128 0x13
 3834 01cc 02       		.uleb128 0x2
 3835 01cd 0A       		.uleb128 0xa
 3836 01ce 00       		.byte	0
 3837 01cf 00       		.byte	0
 3838 01d0 21       		.uleb128 0x21
ARM GAS  /tmp/ccnmAMP4.s 			page 107


 3839 01d1 34       		.uleb128 0x34
 3840 01d2 00       		.byte	0
 3841 01d3 03       		.uleb128 0x3
 3842 01d4 0E       		.uleb128 0xe
 3843 01d5 3A       		.uleb128 0x3a
 3844 01d6 0B       		.uleb128 0xb
 3845 01d7 3B       		.uleb128 0x3b
 3846 01d8 05       		.uleb128 0x5
 3847 01d9 49       		.uleb128 0x49
 3848 01da 13       		.uleb128 0x13
 3849 01db 02       		.uleb128 0x2
 3850 01dc 0A       		.uleb128 0xa
 3851 01dd 00       		.byte	0
 3852 01de 00       		.byte	0
 3853 01df 22       		.uleb128 0x22
 3854 01e0 2E       		.uleb128 0x2e
 3855 01e1 00       		.byte	0
 3856 01e2 3F       		.uleb128 0x3f
 3857 01e3 0C       		.uleb128 0xc
 3858 01e4 03       		.uleb128 0x3
 3859 01e5 0E       		.uleb128 0xe
 3860 01e6 3A       		.uleb128 0x3a
 3861 01e7 0B       		.uleb128 0xb
 3862 01e8 3B       		.uleb128 0x3b
 3863 01e9 05       		.uleb128 0x5
 3864 01ea 27       		.uleb128 0x27
 3865 01eb 0C       		.uleb128 0xc
 3866 01ec 11       		.uleb128 0x11
 3867 01ed 01       		.uleb128 0x1
 3868 01ee 12       		.uleb128 0x12
 3869 01ef 01       		.uleb128 0x1
 3870 01f0 40       		.uleb128 0x40
 3871 01f1 06       		.uleb128 0x6
 3872 01f2 9642     		.uleb128 0x2116
 3873 01f4 0C       		.uleb128 0xc
 3874 01f5 00       		.byte	0
 3875 01f6 00       		.byte	0
 3876 01f7 23       		.uleb128 0x23
 3877 01f8 34       		.uleb128 0x34
 3878 01f9 00       		.byte	0
 3879 01fa 03       		.uleb128 0x3
 3880 01fb 0E       		.uleb128 0xe
 3881 01fc 3A       		.uleb128 0x3a
 3882 01fd 0B       		.uleb128 0xb
 3883 01fe 3B       		.uleb128 0x3b
 3884 01ff 0B       		.uleb128 0xb
 3885 0200 49       		.uleb128 0x49
 3886 0201 13       		.uleb128 0x13
 3887 0202 3F       		.uleb128 0x3f
 3888 0203 0C       		.uleb128 0xc
 3889 0204 02       		.uleb128 0x2
 3890 0205 0A       		.uleb128 0xa
 3891 0206 00       		.byte	0
 3892 0207 00       		.byte	0
 3893 0208 24       		.uleb128 0x24
 3894 0209 34       		.uleb128 0x34
 3895 020a 00       		.byte	0
ARM GAS  /tmp/ccnmAMP4.s 			page 108


 3896 020b 03       		.uleb128 0x3
 3897 020c 08       		.uleb128 0x8
 3898 020d 3A       		.uleb128 0x3a
 3899 020e 0B       		.uleb128 0xb
 3900 020f 3B       		.uleb128 0x3b
 3901 0210 0B       		.uleb128 0xb
 3902 0211 49       		.uleb128 0x49
 3903 0212 13       		.uleb128 0x13
 3904 0213 3F       		.uleb128 0x3f
 3905 0214 0C       		.uleb128 0xc
 3906 0215 02       		.uleb128 0x2
 3907 0216 0A       		.uleb128 0xa
 3908 0217 00       		.byte	0
 3909 0218 00       		.byte	0
 3910 0219 25       		.uleb128 0x25
 3911 021a 21       		.uleb128 0x21
 3912 021b 00       		.byte	0
 3913 021c 00       		.byte	0
 3914 021d 00       		.byte	0
 3915 021e 26       		.uleb128 0x26
 3916 021f 34       		.uleb128 0x34
 3917 0220 00       		.byte	0
 3918 0221 03       		.uleb128 0x3
 3919 0222 0E       		.uleb128 0xe
 3920 0223 3A       		.uleb128 0x3a
 3921 0224 0B       		.uleb128 0xb
 3922 0225 3B       		.uleb128 0x3b
 3923 0226 0B       		.uleb128 0xb
 3924 0227 49       		.uleb128 0x49
 3925 0228 13       		.uleb128 0x13
 3926 0229 3F       		.uleb128 0x3f
 3927 022a 0C       		.uleb128 0xc
 3928 022b 3C       		.uleb128 0x3c
 3929 022c 0C       		.uleb128 0xc
 3930 022d 00       		.byte	0
 3931 022e 00       		.byte	0
 3932 022f 00       		.byte	0
 3933              		.section	.debug_loc,"",%progbits
 3934              	.Ldebug_loc0:
 3935              	.LLST0:
 3936 0000 00000000 		.4byte	.LFB16
 3937 0004 02000000 		.4byte	.LCFI0
 3938 0008 0200     		.2byte	0x2
 3939 000a 7D       		.byte	0x7d
 3940 000b 00       		.sleb128 0
 3941 000c 02000000 		.4byte	.LCFI0
 3942 0010 04000000 		.4byte	.LCFI1
 3943 0014 0200     		.2byte	0x2
 3944 0016 7D       		.byte	0x7d
 3945 0017 0C       		.sleb128 12
 3946 0018 04000000 		.4byte	.LCFI1
 3947 001c EC000000 		.4byte	.LFE16
 3948 0020 0200     		.2byte	0x2
 3949 0022 7D       		.byte	0x7d
 3950 0023 18       		.sleb128 24
 3951 0024 00000000 		.4byte	0
 3952 0028 00000000 		.4byte	0
ARM GAS  /tmp/ccnmAMP4.s 			page 109


 3953              	.LLST1:
 3954 002c 00000000 		.4byte	.LFB18
 3955 0030 02000000 		.4byte	.LCFI2
 3956 0034 0200     		.2byte	0x2
 3957 0036 7D       		.byte	0x7d
 3958 0037 00       		.sleb128 0
 3959 0038 02000000 		.4byte	.LCFI2
 3960 003c 04000000 		.4byte	.LCFI3
 3961 0040 0200     		.2byte	0x2
 3962 0042 7D       		.byte	0x7d
 3963 0043 04       		.sleb128 4
 3964 0044 04000000 		.4byte	.LCFI3
 3965 0048 48000000 		.4byte	.LFE18
 3966 004c 0200     		.2byte	0x2
 3967 004e 7D       		.byte	0x7d
 3968 004f 10       		.sleb128 16
 3969 0050 00000000 		.4byte	0
 3970 0054 00000000 		.4byte	0
 3971              	.LLST2:
 3972 0058 00000000 		.4byte	.LFB20
 3973 005c 02000000 		.4byte	.LCFI4
 3974 0060 0200     		.2byte	0x2
 3975 0062 7D       		.byte	0x7d
 3976 0063 00       		.sleb128 0
 3977 0064 02000000 		.4byte	.LCFI4
 3978 0068 04000000 		.4byte	.LCFI5
 3979 006c 0200     		.2byte	0x2
 3980 006e 7D       		.byte	0x7d
 3981 006f 0C       		.sleb128 12
 3982 0070 04000000 		.4byte	.LCFI5
 3983 0074 B8040000 		.4byte	.LFE20
 3984 0078 0300     		.2byte	0x3
 3985 007a 7D       		.byte	0x7d
 3986 007b D000     		.sleb128 80
 3987 007d 00000000 		.4byte	0
 3988 0081 00000000 		.4byte	0
 3989              	.LLST3:
 3990 0085 00000000 		.4byte	.LFB21
 3991 0089 02000000 		.4byte	.LCFI6
 3992 008d 0200     		.2byte	0x2
 3993 008f 7D       		.byte	0x7d
 3994 0090 00       		.sleb128 0
 3995 0091 02000000 		.4byte	.LCFI6
 3996 0095 04000000 		.4byte	.LCFI7
 3997 0099 0200     		.2byte	0x2
 3998 009b 7D       		.byte	0x7d
 3999 009c 04       		.sleb128 4
 4000 009d 04000000 		.4byte	.LCFI7
 4001 00a1 B0000000 		.4byte	.LFE21
 4002 00a5 0300     		.2byte	0x3
 4003 00a7 7D       		.byte	0x7d
 4004 00a8 E000     		.sleb128 96
 4005 00aa 00000000 		.4byte	0
 4006 00ae 00000000 		.4byte	0
 4007              	.LLST4:
 4008 00b2 00000000 		.4byte	.LFB22
 4009 00b6 02000000 		.4byte	.LCFI8
ARM GAS  /tmp/ccnmAMP4.s 			page 110


 4010 00ba 0200     		.2byte	0x2
 4011 00bc 7D       		.byte	0x7d
 4012 00bd 00       		.sleb128 0
 4013 00be 02000000 		.4byte	.LCFI8
 4014 00c2 64010000 		.4byte	.LFE22
 4015 00c6 0200     		.2byte	0x2
 4016 00c8 7D       		.byte	0x7d
 4017 00c9 08       		.sleb128 8
 4018 00ca 00000000 		.4byte	0
 4019 00ce 00000000 		.4byte	0
 4020              		.section	.debug_aranges,"",%progbits
 4021 0000 3C000000 		.4byte	0x3c
 4022 0004 0200     		.2byte	0x2
 4023 0006 00000000 		.4byte	.Ldebug_info0
 4024 000a 04       		.byte	0x4
 4025 000b 00       		.byte	0
 4026 000c 0000     		.2byte	0
 4027 000e 0000     		.2byte	0
 4028 0010 00000000 		.4byte	.LFB16
 4029 0014 EC000000 		.4byte	.LFE16-.LFB16
 4030 0018 00000000 		.4byte	.LFB18
 4031 001c 48000000 		.4byte	.LFE18-.LFB18
 4032 0020 00000000 		.4byte	.LFB20
 4033 0024 B8040000 		.4byte	.LFE20-.LFB20
 4034 0028 00000000 		.4byte	.LFB21
 4035 002c B0000000 		.4byte	.LFE21-.LFB21
 4036 0030 00000000 		.4byte	.LFB22
 4037 0034 64010000 		.4byte	.LFE22-.LFB22
 4038 0038 00000000 		.4byte	0
 4039 003c 00000000 		.4byte	0
 4040              		.section	.debug_ranges,"",%progbits
 4041              	.Ldebug_ranges0:
 4042 0000 00000000 		.4byte	.LFB16
 4043 0004 EC000000 		.4byte	.LFE16
 4044 0008 00000000 		.4byte	.LFB18
 4045 000c 48000000 		.4byte	.LFE18
 4046 0010 00000000 		.4byte	.LFB20
 4047 0014 B8040000 		.4byte	.LFE20
 4048 0018 00000000 		.4byte	.LFB21
 4049 001c B0000000 		.4byte	.LFE21
 4050 0020 00000000 		.4byte	.LFB22
 4051 0024 64010000 		.4byte	.LFE22
 4052 0028 00000000 		.4byte	0
 4053 002c 00000000 		.4byte	0
 4054              		.section	.debug_line,"",%progbits
 4055              	.Ldebug_line0:
 4056 0000 A4020000 		.section	.debug_str,"MS",%progbits,1
 4056      02004C01 
 4056      00000201 
 4056      FB0E0D00 
 4056      01010101 
 4057              	.LASF137:
 4058 0000 735F6C63 		.ascii	"s_lcd\000"
 4058      6400
 4059              	.LASF104:
 4060 0006 70776D5F 		.ascii	"pwm_channel_1\000"
 4060      6368616E 
ARM GAS  /tmp/ccnmAMP4.s 			page 111


 4060      6E656C5F 
 4060      3100
 4061              	.LASF105:
 4062 0014 70776D5F 		.ascii	"pwm_channel_2\000"
 4062      6368616E 
 4062      6E656C5F 
 4062      3200
 4063              	.LASF106:
 4064 0022 70776D5F 		.ascii	"pwm_channel_3\000"
 4064      6368616E 
 4064      6E656C5F 
 4064      3300
 4065              	.LASF107:
 4066 0030 70776D5F 		.ascii	"pwm_channel_4\000"
 4066      6368616E 
 4066      6E656C5F 
 4066      3400
 4067              	.LASF132:
 4068 003e 7A65726F 		.ascii	"zero_current_loc\000"
 4068      5F637572 
 4068      72656E74 
 4068      5F6C6F63 
 4068      00
 4069              	.LASF158:
 4070 004f 61637377 		.ascii	"acswitch_timer\000"
 4070      69746368 
 4070      5F74696D 
 4070      657200
 4071              	.LASF183:
 4072 005e 70617261 		.ascii	"param_struct\000"
 4072      6D5F7374 
 4072      72756374 
 4072      00
 4073              	.LASF99:
 4074 006b 6C617374 		.ascii	"last_program_deep_in_flash\000"
 4074      5F70726F 
 4074      6772616D 
 4074      5F646565 
 4074      705F696E 
 4075              	.LASF12:
 4076 0086 45585449 		.ascii	"EXTI4_15_IRQn\000"
 4076      345F3135 
 4076      5F495251 
 4076      6E00
 4077              	.LASF83:
 4078 0094 42535252 		.ascii	"BSRR\000"
 4078      00
 4079              	.LASF97:
 4080 0099 6C617374 		.ascii	"last_function_in_flash\000"
 4080      5F66756E 
 4080      6374696F 
 4080      6E5F696E 
 4080      5F666C61 
 4081              	.LASF11:
 4082 00b0 45585449 		.ascii	"EXTI2_3_IRQn\000"
 4082      325F335F 
 4082      4952516E 
ARM GAS  /tmp/ccnmAMP4.s 			page 112


 4082      00
 4083              	.LASF133:
 4084 00bd 6D61696E 		.ascii	"main_state\000"
 4084      5F737461 
 4084      746500
 4085              	.LASF145:
 4086 00c8 705F6D65 		.ascii	"p_mem_init\000"
 4086      6D5F696E 
 4086      697400
 4087              	.LASF2:
 4088 00d3 5356435F 		.ascii	"SVC_IRQn\000"
 4088      4952516E 
 4088      00
 4089              	.LASF147:
 4090 00dc 62756666 		.ascii	"buffer\000"
 4090      657200
 4091              	.LASF200:
 4092 00e3 76706F74 		.ascii	"vpote\000"
 4092      6500
 4093              	.LASF205:
 4094 00e9 4E564943 		.ascii	"NVIC_SetPriority\000"
 4094      5F536574 
 4094      5072696F 
 4094      72697479 
 4094      00
 4095              	.LASF47:
 4096 00fa 756E7369 		.ascii	"unsigned int\000"
 4096      676E6564 
 4096      20696E74 
 4096      00
 4097              	.LASF71:
 4098 0107 4C4F4144 		.ascii	"LOAD\000"
 4098      00
 4099              	.LASF25:
 4100 010c 54494D31 		.ascii	"TIM16_IRQn\000"
 4100      365F4952 
 4100      516E00
 4101              	.LASF193:
 4102 0117 7463705F 		.ascii	"tcp_kalive_timer\000"
 4102      6B616C69 
 4102      76655F74 
 4102      696D6572 
 4102      00
 4103              	.LASF41:
 4104 0128 5F5F696E 		.ascii	"__int32_t\000"
 4104      7433325F 
 4104      7400
 4105              	.LASF153:
 4106 0132 72783262 		.ascii	"rx2buff\000"
 4106      75666600 
 4107              	.LASF8:
 4108 013a 464C4153 		.ascii	"FLASH_IRQn\000"
 4108      485F4952 
 4108      516E00
 4109              	.LASF155:
 4110 0145 72783162 		.ascii	"rx1buff\000"
 4110      75666600 
ARM GAS  /tmp/ccnmAMP4.s 			page 113


 4111              	.LASF198:
 4112 014d 706F7765 		.ascii	"power_vect\000"
 4112      725F7665 
 4112      637400
 4113              	.LASF100:
 4114 0158 64756D6D 		.ascii	"dummy\000"
 4114      7900
 4115              	.LASF72:
 4116 015e 43414C49 		.ascii	"CALIB\000"
 4116      4200
 4117              	.LASF179:
 4118 0164 75736172 		.ascii	"usart2_pckt_ready\000"
 4118      74325F70 
 4118      636B745F 
 4118      72656164 
 4118      7900
 4119              	.LASF152:
 4120 0176 74783262 		.ascii	"tx2buff\000"
 4120      75666600 
 4121              	.LASF10:
 4122 017e 45585449 		.ascii	"EXTI0_1_IRQn\000"
 4122      305F315F 
 4122      4952516E 
 4122      00
 4123              	.LASF163:
 4124 018b 67726F75 		.ascii	"grouped_master_timeout_timer\000"
 4124      7065645F 
 4124      6D617374 
 4124      65725F74 
 4124      696D656F 
 4125              	.LASF27:
 4126 01a8 49324331 		.ascii	"I2C1_IRQn\000"
 4126      5F495251 
 4126      6E00
 4127              	.LASF3:
 4128 01b2 50656E64 		.ascii	"PendSV_IRQn\000"
 4128      53565F49 
 4128      52516E00 
 4129              	.LASF180:
 4130 01be 75736172 		.ascii	"usart2_have_data\000"
 4130      74325F68 
 4130      6176655F 
 4130      64617461 
 4130      00
 4131              	.LASF9:
 4132 01cf 5243435F 		.ascii	"RCC_IRQn\000"
 4132      4952516E 
 4132      00
 4133              	.LASF131:
 4134 01d8 6663616C 		.ascii	"fcalc\000"
 4134      6300
 4135              	.LASF142:
 4136 01de 73686F77 		.ascii	"show_ldr\000"
 4136      5F6C6472 
 4136      00
 4137              	.LASF51:
 4138 01e7 75696E74 		.ascii	"uint32_t\000"
ARM GAS  /tmp/ccnmAMP4.s 			page 114


 4138      33325F74 
 4138      00
 4139              	.LASF52:
 4140 01f0 49534552 		.ascii	"ISER\000"
 4140      00
 4141              	.LASF184:
 4142 01f5 706F7765 		.ascii	"power_2secs_acum\000"
 4142      725F3273 
 4142      6563735F 
 4142      6163756D 
 4142      00
 4143              	.LASF146:
 4144 0206 666C6F61 		.ascii	"float\000"
 4144      7400
 4145              	.LASF135:
 4146 020c 68797374 		.ascii	"hyst\000"
 4146      00
 4147              	.LASF55:
 4148 0211 52534552 		.ascii	"RSERVED1\000"
 4148      56454431 
 4148      00
 4149              	.LASF29:
 4150 021a 53504931 		.ascii	"SPI1_IRQn\000"
 4150      5F495251 
 4150      6E00
 4151              	.LASF46:
 4152 0224 6C6F6E67 		.ascii	"long long unsigned int\000"
 4152      206C6F6E 
 4152      6720756E 
 4152      7369676E 
 4152      65642069 
 4153              	.LASF68:
 4154 023b 44465352 		.ascii	"DFSR\000"
 4154      00
 4155              	.LASF177:
 4156 0240 75736172 		.ascii	"usart1_pckt_bytes\000"
 4156      74315F70 
 4156      636B745F 
 4156      62797465 
 4156      7300
 4157              	.LASF39:
 4158 0252 5F5F7569 		.ascii	"__uint16_t\000"
 4158      6E743136 
 4158      5F7400
 4159              	.LASF197:
 4160 025d 6D696E75 		.ascii	"minutes\000"
 4160      74657300 
 4161              	.LASF79:
 4162 0265 4D4F4445 		.ascii	"MODER\000"
 4162      5200
 4163              	.LASF77:
 4164 026b 43485345 		.ascii	"CHSELR\000"
 4164      4C5200
 4165              	.LASF175:
 4166 0272 75736172 		.ascii	"usart1_pckt_ready\000"
 4166      74315F70 
 4166      636B745F 
ARM GAS  /tmp/ccnmAMP4.s 			page 115


 4166      72656164 
 4166      7900
 4167              	.LASF34:
 4168 0284 4952516E 		.ascii	"IRQn_Type\000"
 4168      5F547970 
 4168      6500
 4169              	.LASF110:
 4170 028e 5463704D 		.ascii	"TcpMessages\000"
 4170      65737361 
 4170      67657300 
 4171              	.LASF32:
 4172 029a 55534152 		.ascii	"USART2_IRQn\000"
 4172      54325F49 
 4172      52516E00 
 4173              	.LASF63:
 4174 02a6 43505549 		.ascii	"CPUID\000"
 4174      4400
 4175              	.LASF167:
 4176 02ac 74745F74 		.ascii	"tt_take_photo_sample\000"
 4176      616B655F 
 4176      70686F74 
 4176      6F5F7361 
 4176      6D706C65 
 4177              	.LASF206:
 4178 02c1 53797354 		.ascii	"SysTick_Config\000"
 4178      69636B5F 
 4178      436F6E66 
 4178      696700
 4179              	.LASF76:
 4180 02d0 534D5052 		.ascii	"SMPR\000"
 4180      00
 4181              	.LASF186:
 4182 02d5 706F7765 		.ascii	"power_minutes\000"
 4182      725F6D69 
 4182      6E757465 
 4182      7300
 4183              	.LASF111:
 4184 02e3 4E4F4E45 		.ascii	"NONE_MSG\000"
 4184      5F4D5347 
 4184      00
 4185              	.LASF90:
 4186 02ec 5345545F 		.ascii	"SET_ZERO_CURRENT\000"
 4186      5A45524F 
 4186      5F435552 
 4186      52454E54 
 4186      00
 4187              	.LASF176:
 4188 02fd 75736172 		.ascii	"usart1_have_data\000"
 4188      74315F68 
 4188      6176655F 
 4188      64617461 
 4188      00
 4189              	.LASF82:
 4190 030e 50555044 		.ascii	"PUPDR\000"
 4190      5200
 4191              	.LASF123:
 4192 0314 7469636B 		.ascii	"ticks\000"
ARM GAS  /tmp/ccnmAMP4.s 			page 116


 4192      7300
 4193              	.LASF156:
 4194 031a 73686F77 		.ascii	"show_select_timer\000"
 4194      5F73656C 
 4194      6563745F 
 4194      74696D65 
 4194      7200
 4195              	.LASF102:
 4196 032c 64756D6D 		.ascii	"dummy1\000"
 4196      793100
 4197              	.LASF103:
 4198 0333 64756D6D 		.ascii	"dummy2\000"
 4198      793200
 4199              	.LASF87:
 4200 033a 63686172 		.ascii	"char\000"
 4200      00
 4201              	.LASF150:
 4202 033f 54454D50 		.ascii	"TEMPERATURE_Value\000"
 4202      45524154 
 4202      5552455F 
 4202      56616C75 
 4202      6500
 4203              	.LASF129:
 4204 0351 706F7765 		.ascii	"power_dec\000"
 4204      725F6465 
 4204      6300
 4205              	.LASF65:
 4206 035b 41495243 		.ascii	"AIRCR\000"
 4206      5200
 4207              	.LASF164:
 4208 0361 74616B65 		.ascii	"take_temp_sample\000"
 4208      5F74656D 
 4208      705F7361 
 4208      6D706C65 
 4208      00
 4209              	.LASF21:
 4210 0372 54494D33 		.ascii	"TIM3_IRQn\000"
 4210      5F495251 
 4210      6E00
 4211              	.LASF14:
 4212 037c 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4212      5F436861 
 4212      6E6E656C 
 4212      315F4952 
 4212      516E00
 4213              	.LASF125:
 4214 038f 62797465 		.ascii	"bytes_read\000"
 4214      735F7265 
 4214      616400
 4215              	.LASF96:
 4216 039a 6D61696E 		.ascii	"main_state_t\000"
 4216      5F737461 
 4216      74655F74 
 4216      00
 4217              	.LASF24:
 4218 03a7 54494D31 		.ascii	"TIM15_IRQn\000"
 4218      355F4952 
ARM GAS  /tmp/ccnmAMP4.s 			page 117


 4218      516E00
 4219              	.LASF48:
 4220 03b2 75696E74 		.ascii	"uint8_t\000"
 4220      385F7400 
 4221              	.LASF94:
 4222 03ba 57454C43 		.ascii	"WELCOME_GSM\000"
 4222      4F4D455F 
 4222      47534D00 
 4223              	.LASF178:
 4224 03c6 75736172 		.ascii	"usart2_mini_timeout\000"
 4224      74325F6D 
 4224      696E695F 
 4224      74696D65 
 4224      6F757400 
 4225              	.LASF188:
 4226 03da 706F7765 		.ascii	"power_hours\000"
 4226      725F686F 
 4226      75727300 
 4227              	.LASF121:
 4228 03e6 72657370 		.ascii	"resp_gsm_timeout\000"
 4228      5F67736D 
 4228      5F74696D 
 4228      656F7574 
 4228      00
 4229              	.LASF154:
 4230 03f7 74783162 		.ascii	"tx1buff\000"
 4230      75666600 
 4231              	.LASF181:
 4232 03ff 75736172 		.ascii	"usart2_pckt_bytes\000"
 4232      74325F70 
 4232      636B745F 
 4232      62797465 
 4232      7300
 4233              	.LASF168:
 4234 0411 74745F72 		.ascii	"tt_relay_on_off\000"
 4234      656C6179 
 4234      5F6F6E5F 
 4234      6F666600 
 4235              	.LASF195:
 4236 0421 73656373 		.ascii	"secs\000"
 4236      00
 4237              	.LASF95:
 4238 0426 4C414D50 		.ascii	"LAMP_ON\000"
 4238      5F4F4E00 
 4239              	.LASF78:
 4240 042e 4144435F 		.ascii	"ADC_TypeDef\000"
 4240      54797065 
 4240      44656600 
 4241              	.LASF45:
 4242 043a 6C6F6E67 		.ascii	"long long int\000"
 4242      206C6F6E 
 4242      6720696E 
 4242      7400
 4243              	.LASF5:
 4244 0448 57574447 		.ascii	"WWDG_IRQn\000"
 4244      5F495251 
 4244      6E00
ARM GAS  /tmp/ccnmAMP4.s 			page 118


 4245              	.LASF67:
 4246 0452 53484353 		.ascii	"SHCSR\000"
 4246      5200
 4247              	.LASF174:
 4248 0458 75736172 		.ascii	"usart1_mini_timeout\000"
 4248      74315F6D 
 4248      696E695F 
 4248      74696D65 
 4248      6F757400 
 4249              	.LASF92:
 4250 046c 53544152 		.ascii	"START_GSM\000"
 4250      545F4753 
 4250      4D00
 4251              	.LASF169:
 4252 0476 73617665 		.ascii	"saved_mode\000"
 4252      645F6D6F 
 4252      646500
 4253              	.LASF194:
 4254 0481 66696C74 		.ascii	"filter_timer\000"
 4254      65725F74 
 4254      696D6572 
 4254      00
 4255              	.LASF204:
 4256 048e 70617261 		.ascii	"parameters\000"
 4256      6D657465 
 4256      727300
 4257              	.LASF166:
 4258 0499 74696D65 		.ascii	"timer_relay\000"
 4258      725F7265 
 4258      6C617900 
 4259              	.LASF88:
 4260 04a5 4D41494E 		.ascii	"MAIN_INIT\000"
 4260      5F494E49 
 4260      5400
 4261              	.LASF120:
 4262 04af 72657370 		.ascii	"resp_gsm_error\000"
 4262      5F67736D 
 4262      5F657272 
 4262      6F7200
 4263              	.LASF93:
 4264 04be 434F4E46 		.ascii	"CONFIG_GSM\000"
 4264      49475F47 
 4264      534D00
 4265              	.LASF113:
 4266 04c9 524F4F4D 		.ascii	"ROOM_BRIGHT\000"
 4266      5F425249 
 4266      47485400 
 4267              	.LASF173:
 4268 04d5 7A65726F 		.ascii	"zero_current\000"
 4268      5F637572 
 4268      72656E74 
 4268      00
 4269              	.LASF13:
 4270 04e2 54535F49 		.ascii	"TS_IRQn\000"
 4270      52516E00 
 4271              	.LASF143:
 4272 04ea 64756D6D 		.ascii	"dummy_resp\000"
ARM GAS  /tmp/ccnmAMP4.s 			page 119


 4272      795F7265 
 4272      737000
 4273              	.LASF18:
 4274 04f5 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 4274      5F42524B 
 4274      5F55505F 
 4274      5452475F 
 4274      434F4D5F 
 4275              	.LASF148:
 4276 050e 74656D70 		.ascii	"tempbuff\000"
 4276      62756666 
 4276      00
 4277              	.LASF6:
 4278 0517 5056445F 		.ascii	"PVD_IRQn\000"
 4278      4952516E 
 4278      00
 4279              	.LASF74:
 4280 0520 43464752 		.ascii	"CFGR1\000"
 4280      3100
 4281              	.LASF75:
 4282 0526 43464752 		.ascii	"CFGR2\000"
 4282      3200
 4283              	.LASF117:
 4284 052c 4C494748 		.ascii	"LIGHTS_ON\000"
 4284      54535F4F 
 4284      4E00
 4285              	.LASF58:
 4286 0536 49435052 		.ascii	"ICPR\000"
 4286      00
 4287              	.LASF17:
 4288 053b 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 4288      5F434F4D 
 4288      505F4952 
 4288      516E00
 4289              	.LASF185:
 4290 054a 706F7765 		.ascii	"power_2secs_index\000"
 4290      725F3273 
 4290      6563735F 
 4290      696E6465 
 4290      7800
 4291              	.LASF157:
 4292 055c 73776974 		.ascii	"switches_timer\000"
 4292      63686573 
 4292      5F74696D 
 4292      657200
 4293              	.LASF138:
 4294 056b 7463705F 		.ascii	"tcp_msg\000"
 4294      6D736700 
 4295              	.LASF81:
 4296 0573 4F535045 		.ascii	"OSPEEDR\000"
 4296      45445200 
 4297              	.LASF73:
 4298 057b 53797354 		.ascii	"SysTick_Type\000"
 4298      69636B5F 
 4298      54797065 
 4298      00
 4299              	.LASF86:
ARM GAS  /tmp/ccnmAMP4.s 			page 120


 4300 0588 6C6F6E67 		.ascii	"long double\000"
 4300      20646F75 
 4300      626C6500 
 4301              	.LASF49:
 4302 0594 75696E74 		.ascii	"uint16_t\000"
 4302      31365F74 
 4302      00
 4303              	.LASF182:
 4304 059d 62756666 		.ascii	"buffUARTGSMrx2\000"
 4304      55415254 
 4304      47534D72 
 4304      783200
 4305              	.LASF109:
 4306 05ac 4952516E 		.ascii	"IRQn\000"
 4306      00
 4307              	.LASF101:
 4308 05b1 6C617374 		.ascii	"last_channel_in_flash\000"
 4308      5F636861 
 4308      6E6E656C 
 4308      5F696E5F 
 4308      666C6173 
 4309              	.LASF189:
 4310 05c7 67736D4E 		.ascii	"gsmNUM\000"
 4310      554D00
 4311              	.LASF159:
 4312 05ce 7363726F 		.ascii	"scroll1_timer\000"
 4312      6C6C315F 
 4312      74696D65 
 4312      7200
 4313              	.LASF7:
 4314 05dc 5254435F 		.ascii	"RTC_IRQn\000"
 4314      4952516E 
 4314      00
 4315              	.LASF53:
 4316 05e5 52455345 		.ascii	"RESERVED0\000"
 4316      52564544 
 4316      3000
 4317              	.LASF66:
 4318 05ef 52455345 		.ascii	"RESERVED1\000"
 4318      52564544 
 4318      3100
 4319              	.LASF57:
 4320 05f9 52455345 		.ascii	"RESERVED2\000"
 4320      52564544 
 4320      3200
 4321              	.LASF59:
 4322 0603 52455345 		.ascii	"RESERVED3\000"
 4322      52564544 
 4322      3300
 4323              	.LASF60:
 4324 060d 52455345 		.ascii	"RESERVED4\000"
 4324      52564544 
 4324      3400
 4325              	.LASF38:
 4326 0617 73686F72 		.ascii	"short int\000"
 4326      7420696E 
 4326      7400
ARM GAS  /tmp/ccnmAMP4.s 			page 121


 4327              	.LASF42:
 4328 0621 6C6F6E67 		.ascii	"long int\000"
 4328      20696E74 
 4328      00
 4329              	.LASF31:
 4330 062a 55534152 		.ascii	"USART1_IRQn\000"
 4330      54315F49 
 4330      52516E00 
 4331              	.LASF0:
 4332 0636 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4332      61736B61 
 4332      626C6549 
 4332      6E745F49 
 4332      52516E00 
 4333              	.LASF122:
 4334 064a 7072696F 		.ascii	"priority\000"
 4334      72697479 
 4334      00
 4335              	.LASF19:
 4336 0653 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 4336      5F43435F 
 4336      4952516E 
 4336      00
 4337              	.LASF80:
 4338 0660 4F545950 		.ascii	"OTYPER\000"
 4338      455200
 4339              	.LASF140:
 4340 0667 6E65775F 		.ascii	"new_lamp\000"
 4340      6C616D70 
 4340      00
 4341              	.LASF191:
 4342 0670 77616974 		.ascii	"wait_ms_var\000"
 4342      5F6D735F 
 4342      76617200 
 4343              	.LASF26:
 4344 067c 54494D31 		.ascii	"TIM17_IRQn\000"
 4344      375F4952 
 4344      516E00
 4345              	.LASF89:
 4346 0687 53594E43 		.ascii	"SYNCHRO_ADC\000"
 4346      48524F5F 
 4346      41444300 
 4347              	.LASF16:
 4348 0693 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 4348      5F436861 
 4348      6E6E656C 
 4348      345F355F 
 4348      4952516E 
 4349              	.LASF190:
 4350 06a8 67736D4D 		.ascii	"gsmMSG\000"
 4350      534700
 4351              	.LASF196:
 4352 06af 686F7572 		.ascii	"hours\000"
 4352      7300
 4353              	.LASF35:
 4354 06b5 5F5F7569 		.ascii	"__uint8_t\000"
 4354      6E74385F 
ARM GAS  /tmp/ccnmAMP4.s 			page 122


 4354      7400
 4355              	.LASF114:
 4356 06bf 4C414D50 		.ascii	"LAMP_BRIGHT\000"
 4356      5F425249 
 4356      47485400 
 4357              	.LASF62:
 4358 06cb 4E564943 		.ascii	"NVIC_Type\000"
 4358      5F547970 
 4358      6500
 4359              	.LASF69:
 4360 06d5 5343425F 		.ascii	"SCB_Type\000"
 4360      54797065 
 4360      00
 4361              	.LASF85:
 4362 06de 4750494F 		.ascii	"GPIO_TypeDef\000"
 4362      5F547970 
 4362      65446566 
 4362      00
 4363              	.LASF134:
 4364 06eb 73656E64 		.ascii	"sended\000"
 4364      656400
 4365              	.LASF4:
 4366 06f2 53797354 		.ascii	"SysTick_IRQn\000"
 4366      69636B5F 
 4366      4952516E 
 4366      00
 4367              	.LASF33:
 4368 06ff 4345435F 		.ascii	"CEC_IRQn\000"
 4368      4952516E 
 4368      00
 4369              	.LASF61:
 4370 0708 73697A65 		.ascii	"sizetype\000"
 4370      74797065 
 4370      00
 4371              	.LASF64:
 4372 0711 49435352 		.ascii	"ICSR\000"
 4372      00
 4373              	.LASF28:
 4374 0716 49324332 		.ascii	"I2C2_IRQn\000"
 4374      5F495251 
 4374      6E00
 4375              	.LASF44:
 4376 0720 6C6F6E67 		.ascii	"long unsigned int\000"
 4376      20756E73 
 4376      69676E65 
 4376      6420696E 
 4376      7400
 4377              	.LASF20:
 4378 0732 54494D32 		.ascii	"TIM2_IRQn\000"
 4378      5F495251 
 4378      6E00
 4379              	.LASF151:
 4380 073c 50524553 		.ascii	"PRESSURE_Value\000"
 4380      53555245 
 4380      5F56616C 
 4380      756500
 4381              	.LASF203:
ARM GAS  /tmp/ccnmAMP4.s 			page 123


 4382 074b 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 4382      652F6D65 
 4382      642F446F 
 4382      63756D65 
 4382      6E74732F 
 4383 077e 6100     		.ascii	"a\000"
 4384              	.LASF149:
 4385 0780 48554D49 		.ascii	"HUMIDITY_Value\000"
 4385      44495459 
 4385      5F56616C 
 4385      756500
 4386              	.LASF50:
 4387 078f 696E7433 		.ascii	"int32_t\000"
 4387      325F7400 
 4388              	.LASF162:
 4389 0797 7374616E 		.ascii	"standalone_enable_menu_timer\000"
 4389      64616C6F 
 4389      6E655F65 
 4389      6E61626C 
 4389      655F6D65 
 4390              	.LASF171:
 4391 07b4 6164635F 		.ascii	"adc_ch\000"
 4391      636800
 4392              	.LASF23:
 4393 07bb 54494D31 		.ascii	"TIM14_IRQn\000"
 4393      345F4952 
 4393      516E00
 4394              	.LASF15:
 4395 07c6 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 4395      5F436861 
 4395      6E6E656C 
 4395      325F335F 
 4395      4952516E 
 4396              	.LASF144:
 4397 07db 7070735F 		.ascii	"pps_one\000"
 4397      6F6E6500 
 4398              	.LASF22:
 4399 07e3 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 4399      5F444143 
 4399      5F495251 
 4399      6E00
 4400              	.LASF37:
 4401 07f1 756E7369 		.ascii	"unsigned char\000"
 4401      676E6564 
 4401      20636861 
 4401      7200
 4402              	.LASF91:
 4403 07ff 4C414D50 		.ascii	"LAMP_OFF\000"
 4403      5F4F4646 
 4403      00
 4404              	.LASF43:
 4405 0808 5F5F7569 		.ascii	"__uint32_t\000"
 4405      6E743332 
 4405      5F7400
 4406              	.LASF141:
 4407 0813 6C617374 		.ascii	"last_bright\000"
 4407      5F627269 
ARM GAS  /tmp/ccnmAMP4.s 			page 124


 4407      67687400 
 4408              	.LASF126:
 4409 081f 6E656564 		.ascii	"need_ack\000"
 4409      5F61636B 
 4409      00
 4410              	.LASF98:
 4411 0828 6C617374 		.ascii	"last_program_in_flash\000"
 4411      5F70726F 
 4411      6772616D 
 4411      5F696E5F 
 4411      666C6173 
 4412              	.LASF170:
 4413 083e 7361635F 		.ascii	"sac_aux\000"
 4413      61757800 
 4414              	.LASF139:
 4415 0846 6E65775F 		.ascii	"new_room\000"
 4415      726F6F6D 
 4415      00
 4416              	.LASF209:
 4417 084f 54696D69 		.ascii	"TimingDelay_Decrement\000"
 4417      6E674465 
 4417      6C61795F 
 4417      44656372 
 4417      656D656E 
 4418              	.LASF165:
 4419 0865 74696D65 		.ascii	"timer_wifi_bright\000"
 4419      725F7769 
 4419      66695F62 
 4419      72696768 
 4419      7400
 4420              	.LASF54:
 4421 0877 49434552 		.ascii	"ICER\000"
 4421      00
 4422              	.LASF136:
 4423 087c 6F6E655F 		.ascii	"one_to_ten\000"
 4423      746F5F74 
 4423      656E00
 4424              	.LASF30:
 4425 0887 53504932 		.ascii	"SPI2_IRQn\000"
 4425      5F495251 
 4425      6E00
 4426              	.LASF118:
 4427 0891 72657370 		.ascii	"resp_gsm_continue\000"
 4427      5F67736D 
 4427      5F636F6E 
 4427      74696E75 
 4427      6500
 4428              	.LASF208:
 4429 08a3 70726570 		.ascii	"prepare_json_pkt\000"
 4429      6172655F 
 4429      6A736F6E 
 4429      5F706B74 
 4429      00
 4430              	.LASF112:
 4431 08b4 4B454550 		.ascii	"KEEP_ALIVE\000"
 4431      5F414C49 
 4431      564500
ARM GAS  /tmp/ccnmAMP4.s 			page 125


 4432              	.LASF130:
 4433 08bf 706F7765 		.ascii	"power\000"
 4433      7200
 4434              	.LASF108:
 4435 08c5 70617261 		.ascii	"parameters_typedef\000"
 4435      6D657465 
 4435      72735F74 
 4435      79706564 
 4435      656600
 4436              	.LASF36:
 4437 08d8 7369676E 		.ascii	"signed char\000"
 4437      65642063 
 4437      68617200 
 4438              	.LASF202:
 4439 08e4 7372632F 		.ascii	"src/main.c\000"
 4439      6D61696E 
 4439      2E6300
 4440              	.LASF128:
 4441 08ef 706F7765 		.ascii	"power_int\000"
 4441      725F696E 
 4441      7400
 4442              	.LASF116:
 4443 08f9 4C494748 		.ascii	"LIGHTS_OFF\000"
 4443      54535F4F 
 4443      464600
 4444              	.LASF40:
 4445 0904 73686F72 		.ascii	"short unsigned int\000"
 4445      7420756E 
 4445      7369676E 
 4445      65642069 
 4445      6E7400
 4446              	.LASF201:
 4447 0917 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 4447      43313120 
 4447      352E322E 
 4447      31203230 
 4447      31353132 
 4448 094a 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 4448      20726576 
 4448      6973696F 
 4448      6E203233 
 4448      31383438 
 4449 097d 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 4449      662D3220 
 4449      2D4F3020 
 4449      2D666F6D 
 4449      69742D66 
 4450 09b0 66756E63 		.ascii	"function-sections\000"
 4450      74696F6E 
 4450      2D736563 
 4450      74696F6E 
 4450      7300
 4451              	.LASF161:
 4452 09c2 7374616E 		.ascii	"standalone_timer\000"
 4452      64616C6F 
 4452      6E655F74 
 4452      696D6572 
ARM GAS  /tmp/ccnmAMP4.s 			page 126


 4452      00
 4453              	.LASF207:
 4454 09d3 6D61696E 		.ascii	"main\000"
 4454      00
 4455              	.LASF1:
 4456 09d8 48617264 		.ascii	"HardFault_IRQn\000"
 4456      4661756C 
 4456      745F4952 
 4456      516E00
 4457              	.LASF119:
 4458 09e7 72657370 		.ascii	"resp_gsm_ok\000"
 4458      5F67736D 
 4458      5F6F6B00 
 4459              	.LASF187:
 4460 09f3 706F7765 		.ascii	"power_minutes_index\000"
 4460      725F6D69 
 4460      6E757465 
 4460      735F696E 
 4460      64657800 
 4461              	.LASF56:
 4462 0a07 49535052 		.ascii	"ISPR\000"
 4462      00
 4463              	.LASF127:
 4464 0a0c 72657370 		.ascii	"resp\000"
 4464      00
 4465              	.LASF172:
 4466 0a11 7365715F 		.ascii	"seq_ready\000"
 4466      72656164 
 4466      7900
 4467              	.LASF199:
 4468 0a1b 7674656D 		.ascii	"vtemp\000"
 4468      7000
 4469              	.LASF160:
 4470 0a21 7363726F 		.ascii	"scroll2_timer\000"
 4470      6C6C325F 
 4470      74696D65 
 4470      7200
 4471              	.LASF192:
 4472 0a2f 74696D65 		.ascii	"timer_standby\000"
 4472      725F7374 
 4472      616E6462 
 4472      7900
 4473              	.LASF124:
 4474 0a3d 62797465 		.ascii	"bytes_remain\000"
 4474      735F7265 
 4474      6D61696E 
 4474      00
 4475              	.LASF84:
 4476 0a4a 4C434B52 		.ascii	"LCKR\000"
 4476      00
 4477              	.LASF70:
 4478 0a4f 4354524C 		.ascii	"CTRL\000"
 4478      00
 4479              	.LASF115:
 4480 0a54 4745545F 		.ascii	"GET_A\000"
 4480      4100
 4481              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccnmAMP4.s 			page 127


ARM GAS  /tmp/ccnmAMP4.s 			page 128


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccnmAMP4.s:55     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccnmAMP4.s:59     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccnmAMP4.s:200    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccnmAMP4.s:206    .text.SysTick_Config:00000000 $t
     /tmp/ccnmAMP4.s:210    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccnmAMP4.s:263    .text.SysTick_Config:00000040 $d
                            *COM*:00000100 tx2buff
                            *COM*:00000100 rx2buff
                            *COM*:00000100 tx1buff
                            *COM*:00000100 rx1buff
     /tmp/ccnmAMP4.s:277    .bss.show_select_timer:00000000 show_select_timer
     /tmp/ccnmAMP4.s:274    .bss.show_select_timer:00000000 $d
     /tmp/ccnmAMP4.s:283    .bss.switches_timer:00000000 switches_timer
     /tmp/ccnmAMP4.s:284    .bss.switches_timer:00000000 $d
     /tmp/ccnmAMP4.s:289    .bss.acswitch_timer:00000000 acswitch_timer
     /tmp/ccnmAMP4.s:290    .bss.acswitch_timer:00000000 $d
     /tmp/ccnmAMP4.s:296    .bss.scroll1_timer:00000000 scroll1_timer
     /tmp/ccnmAMP4.s:293    .bss.scroll1_timer:00000000 $d
     /tmp/ccnmAMP4.s:303    .bss.scroll2_timer:00000000 scroll2_timer
     /tmp/ccnmAMP4.s:300    .bss.scroll2_timer:00000000 $d
                            *COM*:00000002 standalone_timer
                            *COM*:00000002 standalone_enable_menu_timer
                            *COM*:00000001 grouped_master_timeout_timer
     /tmp/ccnmAMP4.s:313    .bss.take_temp_sample:00000000 take_temp_sample
     /tmp/ccnmAMP4.s:310    .bss.take_temp_sample:00000000 $d
     /tmp/ccnmAMP4.s:319    .bss.timer_wifi_bright:00000000 timer_wifi_bright
     /tmp/ccnmAMP4.s:320    .bss.timer_wifi_bright:00000000 $d
     /tmp/ccnmAMP4.s:326    .bss.timer_relay:00000000 timer_relay
     /tmp/ccnmAMP4.s:323    .bss.timer_relay:00000000 $d
                            *COM*:00000002 tt_take_photo_sample
                            *COM*:00000002 tt_relay_on_off
                            *COM*:00000001 saved_mode
                            *COM*:00000002 s1
                            *COM*:00000002 s2
                            *COM*:00000002 sac
                            *COM*:00000001 sac_aux
                            *COM*:00000006 adc_ch
     /tmp/ccnmAMP4.s:340    .bss.seq_ready:00000000 seq_ready
     /tmp/ccnmAMP4.s:341    .bss.seq_ready:00000000 $d
                            *COM*:00000002 zero_current
                            *COM*:00000001 usart1_mini_timeout
                            *COM*:00000001 usart1_pckt_ready
                            *COM*:00000001 usart1_have_data
                            *COM*:00000001 usart1_pckt_bytes
                            *COM*:00000001 usart2_mini_timeout
                            *COM*:00000001 usart2_pckt_ready
                            *COM*:00000001 usart2_have_data
                            *COM*:00000001 usart2_pckt_bytes
                            *COM*:0000000c param_struct
     /tmp/ccnmAMP4.s:357    .bss.power_2secs_acum:00000000 power_2secs_acum
     /tmp/ccnmAMP4.s:354    .bss.power_2secs_acum:00000000 $d
     /tmp/ccnmAMP4.s:363    .bss.power_2secs_index:00000000 power_2secs_index
     /tmp/ccnmAMP4.s:364    .bss.power_2secs_index:00000000 $d
     /tmp/ccnmAMP4.s:370    .bss.power_minutes:00000000 power_minutes
     /tmp/ccnmAMP4.s:367    .bss.power_minutes:00000000 $d
ARM GAS  /tmp/ccnmAMP4.s 			page 129


     /tmp/ccnmAMP4.s:376    .bss.power_minutes_index:00000000 power_minutes_index
     /tmp/ccnmAMP4.s:377    .bss.power_minutes_index:00000000 $d
     /tmp/ccnmAMP4.s:383    .bss.power_hours:00000000 power_hours
     /tmp/ccnmAMP4.s:380    .bss.power_hours:00000000 $d
                            *COM*:00000014 gsmNUM
                            *COM*:000000b4 gsmMSG
     /tmp/ccnmAMP4.s:392    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccnmAMP4.s:389    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
                            *COM*:00000002 tcp_kalive_timer
                            *COM*:00000001 filter_timer
     /tmp/ccnmAMP4.s:402    .bss.secs:00000000 secs
     /tmp/ccnmAMP4.s:399    .bss.secs:00000000 $d
     /tmp/ccnmAMP4.s:408    .bss.hours:00000000 hours
     /tmp/ccnmAMP4.s:409    .bss.hours:00000000 $d
     /tmp/ccnmAMP4.s:414    .bss.minutes:00000000 minutes
     /tmp/ccnmAMP4.s:415    .bss.minutes:00000000 $d
                            *COM*:00000014 power_vect
                            *COM*:00000022 vtemp
                            *COM*:00000022 vpote
     /tmp/ccnmAMP4.s:420    .rodata:00000000 $d
     /tmp/ccnmAMP4.s:465    .text.main:00000000 $t
     /tmp/ccnmAMP4.s:470    .text.main:00000000 main
     /tmp/ccnmAMP4.s:742    .rodata.main:00000000 $d
     /tmp/ccnmAMP4.s:932    .text.main:000002c0 $d
     /tmp/ccnmAMP4.s:950    .text.main:00000300 $t
     /tmp/ccnmAMP4.s:1171   .text.main:0000047c $d
     /tmp/ccnmAMP4.s:1206   .text.prepare_json_pkt:00000000 $t
     /tmp/ccnmAMP4.s:1211   .text.prepare_json_pkt:00000000 prepare_json_pkt
     /tmp/ccnmAMP4.s:1303   .text.prepare_json_pkt:0000009c $d
     /tmp/ccnmAMP4.s:1312   .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccnmAMP4.s:1317   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccnmAMP4.s:1519   .text.TimingDelay_Decrement:00000130 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_ui2f
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2uiz
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
GPIO_Config
USART1Config
USART2Config
EXTIOff
AdcConfig
TIM_3_Init
TIM_16_Init
TIM16Enable
Usart2Send
Wait_ms
FuncsGSMReset
Usart1Mode
Update_TIM3_CH1
ARM GAS  /tmp/ccnmAMP4.s 			page 130


GetVGrid
GetIGrid
PowerCalc
PowerCalcMean8
sprintf
FuncsGSMReady
FuncsGSMSendSMS
UpdateVGrid
UpdateIGrid
UpdateRelay
FuncsGSM
memcpy
strcat
strlen
GSMTimeoutCounters
