ARM GAS  /tmp/ccVX56sy.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"adc.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/adc.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/adc.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.comm	VoltagePhoto,64,4
  55              		.global	photo_index
  56              		.section	.bss.photo_index,"aw",%nobits
  57              		.type	photo_index, %object
ARM GAS  /tmp/ccVX56sy.s 			page 2


  58              		.size	photo_index, 1
  59              	photo_index:
  60 0000 00       		.space	1
  61              		.global	last_photo
  62              		.section	.bss.last_photo,"aw",%nobits
  63              		.align	1
  64              		.type	last_photo, %object
  65              		.size	last_photo, 2
  66              	last_photo:
  67 0000 0000     		.space	2
  68              		.global	new_photo_sample
  69              		.section	.bss.new_photo_sample,"aw",%nobits
  70              		.type	new_photo_sample, %object
  71              		.size	new_photo_sample, 1
  72              	new_photo_sample:
  73 0000 00       		.space	1
  74              		.section	.text.AdcConfig,"ax",%progbits
  75              		.align	2
  76              		.global	AdcConfig
  77              		.code	16
  78              		.thumb_func
  79              		.type	AdcConfig, %function
  80              	AdcConfig:
  81              	.LFB20:
  82              		.file 1 "src/adc.c"
   1:src/adc.c     **** /*
   2:src/adc.c     ****  * adc.c
   3:src/adc.c     ****  *
   4:src/adc.c     ****  *  Created on: 04/05/2015
   5:src/adc.c     ****  *      Author: Mariano
   6:src/adc.c     ****  */
   7:src/adc.c     **** #include "adc.h"
   8:src/adc.c     **** #include "stm32f0xx.h"
   9:src/adc.c     **** #include "hard.h"
  10:src/adc.c     **** // #include "dsp.h"
  11:src/adc.c     **** 
  12:src/adc.c     **** 
  13:src/adc.c     **** //--- VARIABLES EXTERNAS ---//
  14:src/adc.c     **** extern volatile unsigned short adc_ch [];
  15:src/adc.c     **** extern volatile unsigned short tt_take_photo_sample;
  16:src/adc.c     **** 
  17:src/adc.c     **** #ifdef ADC_WITH_INT
  18:src/adc.c     **** extern volatile unsigned char seq_ready;
  19:src/adc.c     **** #endif
  20:src/adc.c     **** 
  21:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
  22:src/adc.c     **** extern volatile unsigned short tt_take_temp_sample;
  23:src/adc.c     **** #endif
  24:src/adc.c     **** 
  25:src/adc.c     **** //--- VARIABLES GLOBALES ---//
  26:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
  27:src/adc.c     **** // ------- del sensor de Temperatura -------
  28:src/adc.c     **** unsigned short board_temp [SIZEOF_BOARD_TEMP];
  29:src/adc.c     **** unsigned short last_temp = 0;
  30:src/adc.c     **** unsigned char board_temp_index = 0;
  31:src/adc.c     **** unsigned char new_temp_sample = 0;
  32:src/adc.c     **** #endif
ARM GAS  /tmp/ccVX56sy.s 			page 3


  33:src/adc.c     **** 
  34:src/adc.c     **** // ------- del PhotoTransistor -------
  35:src/adc.c     **** #define SIZEOF_PHOTO_TRANS		32
  36:src/adc.c     **** #define DIVISOR_PHOTO			5
  37:src/adc.c     **** unsigned short VoltagePhoto [SIZEOF_PHOTO_TRANS];
  38:src/adc.c     **** unsigned char photo_index = 0;
  39:src/adc.c     **** unsigned short last_photo = 0;
  40:src/adc.c     **** unsigned char new_photo_sample = 0;
  41:src/adc.c     **** 
  42:src/adc.c     **** 
  43:src/adc.c     **** 
  44:src/adc.c     **** //Single conversion mode (CONT=0)
  45:src/adc.c     **** //In Single conversion mode, the ADC performs a single sequence of conversions,
  46:src/adc.c     **** //converting all the channels once.
  47:src/adc.c     **** 
  48:src/adc.c     **** //Continuous conversion mode (CONT=1)
  49:src/adc.c     **** //In continuous conversion mode, when a software or hardware trigger event occurs,
  50:src/adc.c     **** //the ADC performs a sequence of conversions, converting all the channels once and then
  51:src/adc.c     **** //automatically re-starts and continuously performs the same sequence of conversions
  52:src/adc.c     **** 
  53:src/adc.c     **** //Discontinuous mode (DISCEN)
  54:src/adc.c     **** //In this mode (DISCEN=1), a hardware or software trigger event is required to start
  55:src/adc.c     **** //each conversion defined in the sequence. Only with (CONT=0)
  56:src/adc.c     **** 
  57:src/adc.c     **** void AdcConfig (void)
  58:src/adc.c     **** {
  83              		.loc 1 58 0
  84              		.cfi_startproc
  85 0000 10B5     		push	{r4, lr}	@
  86              	.LCFI0:
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 4, -8
  89              		.cfi_offset 14, -4
  59:src/adc.c     **** #ifdef ADC_WITH_INT
  60:src/adc.c     **** 	NVIC_InitTypeDef    NVIC_InitStructure;
  61:src/adc.c     **** #endif
  62:src/adc.c     **** 
  63:src/adc.c     **** 	if (!RCC_ADC_CLK)
  90              		.loc 1 63 0
  91 0002 1D4B     		ldr	r3, .L3	@ D.4947,
  92 0004 9A69     		ldr	r2, [r3, #24]	@ D.4948, _2->APB2ENR
  93 0006 8023     		movs	r3, #128	@ tmp150,
  94 0008 9B00     		lsls	r3, r3, #2	@ tmp136, tmp150,
  95 000a 1340     		ands	r3, r2	@ D.4948, D.4948
  96 000c 06D1     		bne	.L2	@,
  64:src/adc.c     **** 		RCC_ADC_CLK_ON;
  97              		.loc 1 64 0
  98 000e 1A4B     		ldr	r3, .L3	@ D.4947,
  99 0010 194A     		ldr	r2, .L3	@ D.4947,
 100 0012 9269     		ldr	r2, [r2, #24]	@ D.4948, _7->APB2ENR
 101 0014 8021     		movs	r1, #128	@ tmp149,
 102 0016 8900     		lsls	r1, r1, #2	@ tmp137, tmp149,
 103 0018 0A43     		orrs	r2, r1	@ D.4948, tmp137
 104 001a 9A61     		str	r2, [r3, #24]	@ D.4948, _6->APB2ENR
 105              	.L2:
  65:src/adc.c     **** 
  66:src/adc.c     **** 	// preseteo los registros a default, la mayoria necesita tener ADC apagado
ARM GAS  /tmp/ccVX56sy.s 			page 4


  67:src/adc.c     **** 	ADC1->CR = 0x00000000;
 106              		.loc 1 67 0
 107 001c 174B     		ldr	r3, .L3+4	@ D.4949,
 108 001e 0022     		movs	r2, #0	@ tmp138,
 109 0020 9A60     		str	r2, [r3, #8]	@ tmp138, _11->CR
  68:src/adc.c     **** 	ADC1->IER = 0x00000000;
 110              		.loc 1 68 0
 111 0022 164B     		ldr	r3, .L3+4	@ D.4949,
 112 0024 0022     		movs	r2, #0	@ tmp139,
 113 0026 5A60     		str	r2, [r3, #4]	@ tmp139, _13->IER
  69:src/adc.c     **** 	ADC1->CFGR1 = 0x00000000;
 114              		.loc 1 69 0
 115 0028 144B     		ldr	r3, .L3+4	@ D.4949,
 116 002a 0022     		movs	r2, #0	@ tmp140,
 117 002c DA60     		str	r2, [r3, #12]	@ tmp140, _15->CFGR1
  70:src/adc.c     **** 	ADC1->CFGR2 = 0x00000000;
 118              		.loc 1 70 0
 119 002e 134B     		ldr	r3, .L3+4	@ D.4949,
 120 0030 0022     		movs	r2, #0	@ tmp141,
 121 0032 1A61     		str	r2, [r3, #16]	@ tmp141, _17->CFGR2
  71:src/adc.c     **** 	ADC1->SMPR = 0x00000000;
 122              		.loc 1 71 0
 123 0034 114B     		ldr	r3, .L3+4	@ D.4949,
 124 0036 0022     		movs	r2, #0	@ tmp142,
 125 0038 5A61     		str	r2, [r3, #20]	@ tmp142, _19->SMPR
  72:src/adc.c     **** 	ADC1->TR = 0x0FFF0000;
 126              		.loc 1 72 0
 127 003a 104B     		ldr	r3, .L3+4	@ D.4949,
 128 003c 104A     		ldr	r2, .L3+8	@ tmp143,
 129 003e 1A62     		str	r2, [r3, #32]	@ tmp143, _21->TR
  73:src/adc.c     **** 	ADC1->CHSELR = 0x00000000;
 130              		.loc 1 73 0
 131 0040 0E4B     		ldr	r3, .L3+4	@ D.4949,
 132 0042 0022     		movs	r2, #0	@ tmp144,
 133 0044 9A62     		str	r2, [r3, #40]	@ tmp144, _23->CHSELR
  74:src/adc.c     **** 
  75:src/adc.c     **** 	//set clock
  76:src/adc.c     **** 	ADC1->CFGR2 = ADC_ClockMode_SynClkDiv4;
 134              		.loc 1 76 0
 135 0046 0D4B     		ldr	r3, .L3+4	@ D.4949,
 136 0048 8022     		movs	r2, #128	@ tmp148,
 137 004a 1206     		lsls	r2, r2, #24	@ tmp145, tmp148,
 138 004c 1A61     		str	r2, [r3, #16]	@ tmp145, _25->CFGR2
  77:src/adc.c     **** 
  78:src/adc.c     **** 	//set resolution, trigger & Continuos or Discontinuous
  79:src/adc.c     **** 	//ADC1->CFGR1 |= ADC_Resolution_10b | ADC_ExternalTrigConvEdge_Rising | ADC_ExternalTrigConv_T3_TR
  80:src/adc.c     **** 	//ADC1->CFGR1 |= ADC_Resolution_12b | ADC_ExternalTrigConvEdge_Rising | ADC_ExternalTrigConv_T1_TR
  81:src/adc.c     **** 	//ADC1->CFGR1 |= ADC_Resolution_12b | ADC_CFGR1_DISCEN;
  82:src/adc.c     **** 	ADC1->CFGR1 |= ADC_Resolution_12b;
 139              		.loc 1 82 0
 140 004e 0B4B     		ldr	r3, .L3+4	@ D.4949,
 141 0050 0A4A     		ldr	r2, .L3+4	@ D.4949,
 142 0052 D268     		ldr	r2, [r2, #12]	@ D.4948, _28->CFGR1
 143 0054 DA60     		str	r2, [r3, #12]	@ D.4948, _27->CFGR1
  83:src/adc.c     **** 
  84:src/adc.c     **** 	//DMA Config
  85:src/adc.c     **** 	//ADC1->CFGR1 |= ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG;
ARM GAS  /tmp/ccVX56sy.s 			page 5


  86:src/adc.c     **** 
  87:src/adc.c     **** 	//set sampling time
  88:src/adc.c     **** 	//ADC1->SMPR |= ADC_SampleTime_41_5Cycles;		//17.39 son SP 420
  89:src/adc.c     **** 	ADC1->SMPR |= ADC_SampleTime_28_5Cycles;		//17.39 son SP 420
 144              		.loc 1 89 0
 145 0056 094B     		ldr	r3, .L3+4	@ D.4949,
 146 0058 084A     		ldr	r2, .L3+4	@ D.4949,
 147 005a 5269     		ldr	r2, [r2, #20]	@ D.4948, _32->SMPR
 148 005c 0321     		movs	r1, #3	@ tmp146,
 149 005e 0A43     		orrs	r2, r1	@ D.4948, tmp146
 150 0060 5A61     		str	r2, [r3, #20]	@ D.4948, _31->SMPR
  90:src/adc.c     **** 	//ADC1->SMPR |= ADC_SampleTime_7_5Cycles;		//17.36 de salida son SP 420 pero a veces pega
  91:src/adc.c     **** 													//las dos int (usar DMA?) y pierde el valor intermedio
  92:src/adc.c     **** 	//ADC1->SMPR |= ADC_SampleTime_1_5Cycles;			//20.7 de salida son SP 420 (regula mal)
  93:src/adc.c     **** 
  94:src/adc.c     **** 	//set channel selection
  95:src/adc.c     **** 	//ADC1->CHSELR |= ADC_Channel_0 | ADC_Channel_1 | ADC_Channel_2 | ADC_Channel_3 | ADC_Channel_4;
  96:src/adc.c     **** 	//ADC1->CHSELR |= ADC_Channel_0 | ADC_Channel_1 | ADC_Channel_2;
  97:src/adc.c     **** 	//ADC1->CHSELR |= ADC_Channel_0 | ADC_Channel_1;
  98:src/adc.c     **** 	//ADC1->CHSELR |= ADC_Channel_2;	//individuales andan todos
  99:src/adc.c     **** 
 100:src/adc.c     **** #ifdef ADC_WITH_INT
 101:src/adc.c     **** 	//set interrupts
 102:src/adc.c     **** 	ADC1->IER |= ADC_IT_EOC;
 103:src/adc.c     **** 
 104:src/adc.c     **** 	/* Configure and enable ADC1 interrupt */
 105:src/adc.c     **** 	NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
 106:src/adc.c     **** 	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 107:src/adc.c     **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 108:src/adc.c     **** 	NVIC_Init(&NVIC_InitStructure);
 109:src/adc.c     **** #endif
 110:src/adc.c     **** 
 111:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
 112:src/adc.c     **** 	ADC->CCR |= ADC_CCR_TSEN;
 113:src/adc.c     **** #endif
 114:src/adc.c     **** 
 115:src/adc.c     **** 	//calibrar ADC
 116:src/adc.c     **** 	ADCGetCalibrationFactor();
 151              		.loc 1 116 0
 152 0062 FFF7FEFF 		bl	ADCGetCalibrationFactor	@
 117:src/adc.c     **** 
 118:src/adc.c     **** 	// Enable ADC1
 119:src/adc.c     **** 	ADC1->CR |= ADC_CR_ADEN;
 153              		.loc 1 119 0
 154 0066 054B     		ldr	r3, .L3+4	@ D.4949,
 155 0068 044A     		ldr	r2, .L3+4	@ D.4949,
 156 006a 9268     		ldr	r2, [r2, #8]	@ D.4948, _38->CR
 157 006c 0121     		movs	r1, #1	@ tmp147,
 158 006e 0A43     		orrs	r2, r1	@ D.4948, tmp147
 159 0070 9A60     		str	r2, [r3, #8]	@ D.4948, _37->CR
 120:src/adc.c     **** }
 160              		.loc 1 120 0
 161 0072 C046     		nop
 162              		@ sp needed	@
 163 0074 10BD     		pop	{r4, pc}
 164              	.L4:
 165 0076 C046     		.align	2
ARM GAS  /tmp/ccVX56sy.s 			page 6


 166              	.L3:
 167 0078 00100240 		.word	1073876992
 168 007c 00240140 		.word	1073816576
 169 0080 0000FF0F 		.word	268369920
 170              		.cfi_endproc
 171              	.LFE20:
 172              		.size	AdcConfig, .-AdcConfig
 173              		.section	.text.SetADC1_SampleTime,"ax",%progbits
 174              		.align	2
 175              		.global	SetADC1_SampleTime
 176              		.code	16
 177              		.thumb_func
 178              		.type	SetADC1_SampleTime, %function
 179              	SetADC1_SampleTime:
 180              	.LFB21:
 121:src/adc.c     **** 
 122:src/adc.c     **** #ifdef ADC_WITH_INT
 123:src/adc.c     **** void ADC1_COMP_IRQHandler (void)
 124:src/adc.c     **** {
 125:src/adc.c     **** 	/*
 126:src/adc.c     **** 	if (ADC1->ISR & ADC_IT_EOC)
 127:src/adc.c     **** 	{
 128:src/adc.c     **** 		LED_ON;
 129:src/adc.c     **** 		//clear pending
 130:src/adc.c     **** 		ADC1->ISR |= ADC_IT_EOC | ADC_IT_EOSEQ;
 131:src/adc.c     **** 		LED_OFF;
 132:src/adc.c     **** 	}
 133:src/adc.c     **** 	*/
 134:src/adc.c     **** 
 135:src/adc.c     **** 
 136:src/adc.c     **** 	if (ADC1->ISR & ADC_IT_EOC)
 137:src/adc.c     **** 	{
 138:src/adc.c     **** 		//LED_ON;
 139:src/adc.c     **** 		if (ADC1->ISR & ADC_IT_EOSEQ)	//seguro que es channel2
 140:src/adc.c     **** 		{
 141:src/adc.c     **** 			adc_ch2 = ADC1->DR;
 142:src/adc.c     **** 			seq_ready = 1;
 143:src/adc.c     **** 		}
 144:src/adc.c     **** 		else
 145:src/adc.c     **** 		{
 146:src/adc.c     **** //			LED_ON;
 147:src/adc.c     **** 			adc_ch1 = ADC1->DR;
 148:src/adc.c     **** 		}
 149:src/adc.c     **** 
 150:src/adc.c     **** 		//clear pending
 151:src/adc.c     **** 		ADC1->ISR |= ADC_IT_EOC | ADC_IT_EOSEQ;
 152:src/adc.c     **** 
 153:src/adc.c     **** 		//LED_OFF;
 154:src/adc.c     **** 	}
 155:src/adc.c     **** }
 156:src/adc.c     **** #endif
 157:src/adc.c     **** 
 158:src/adc.c     **** /*
 159:src/adc.c     **** 
 160:src/adc.c     **** //USA STD LIB DE ST
 161:src/adc.c     **** unsigned short ReadADC1 (unsigned int channel)
 162:src/adc.c     **** {
ARM GAS  /tmp/ccVX56sy.s 			page 7


 163:src/adc.c     **** 	uint32_t tmpreg = 0;
 164:src/adc.c     **** 	//GPIOA_PIN4_ON;
 165:src/adc.c     **** 	// Set channel and sample time
 166:src/adc.c     **** 	//ADC_ChannelConfig(ADC1, channel, ADC_SampleTime_7_5Cycles);	//pifia la medicion 2800 o 3400 en v
 167:src/adc.c     **** 	//ADC_ChannelConfig(ADC1, channel, ADC_SampleTime_239_5Cycles);
 168:src/adc.c     **** 	//ADC_ChannelConfig(ADC1, ADC_Channel_0, ADC_SampleTime_239_5Cycles);
 169:src/adc.c     **** 
 170:src/adc.c     **** 	//ADC_ChannelConfig INTERNALS
 171:src/adc.c     **** 	// Configure the ADC Channel
 172:src/adc.c     **** 	ADC1->CHSELR = channel;
 173:src/adc.c     **** 
 174:src/adc.c     **** 	// Clear the Sampling time Selection bits
 175:src/adc.c     **** 	tmpreg &= ~ADC_SMPR1_SMPR;
 176:src/adc.c     **** 
 177:src/adc.c     **** 	// Set the ADC Sampling Time register
 178:src/adc.c     **** 	tmpreg |= (uint32_t)ADC_SampleTime_239_5Cycles;
 179:src/adc.c     **** 
 180:src/adc.c     **** 	// Configure the ADC Sample time register
 181:src/adc.c     **** 	ADC1->SMPR = tmpreg ;
 182:src/adc.c     **** 
 183:src/adc.c     **** 
 184:src/adc.c     **** 	// Start the conversion
 185:src/adc.c     **** 	ADC_StartOfConversion(ADC1);
 186:src/adc.c     **** 	// Wait until conversion completion
 187:src/adc.c     **** 	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
 188:src/adc.c     **** 	// Get the conversion value
 189:src/adc.c     **** 	//GPIOA_PIN4_OFF;	//tarda 20us en convertir
 190:src/adc.c     **** 	return ADC_GetConversionValue(ADC1);
 191:src/adc.c     **** }
 192:src/adc.c     **** */
 193:src/adc.c     **** 
 194:src/adc.c     **** //Setea el sample time en el ADC
 195:src/adc.c     **** void SetADC1_SampleTime (void)
 196:src/adc.c     **** {
 181              		.loc 1 196 0
 182              		.cfi_startproc
 183 0000 82B0     		sub	sp, sp, #8	@,,
 184              	.LCFI1:
 185              		.cfi_def_cfa_offset 8
 197:src/adc.c     **** 	uint32_t tmpreg = 0;
 186              		.loc 1 197 0
 187 0002 0023     		movs	r3, #0	@ tmp111,
 188 0004 0193     		str	r3, [sp, #4]	@ tmp111, tmpreg
 198:src/adc.c     **** 
 199:src/adc.c     **** 	/* Clear the Sampling time Selection bits */
 200:src/adc.c     **** 	tmpreg &= ~ADC_SMPR1_SMPR;
 189              		.loc 1 200 0
 190 0006 019B     		ldr	r3, [sp, #4]	@ tmp113, tmpreg
 191 0008 0722     		movs	r2, #7	@ tmp114,
 192 000a 9343     		bics	r3, r2	@ tmp112, tmp114
 193 000c 0193     		str	r3, [sp, #4]	@ tmp112, tmpreg
 201:src/adc.c     **** 
 202:src/adc.c     **** 	/* Set the ADC Sampling Time register */
 203:src/adc.c     **** 	tmpreg |= (uint32_t)ADC_SampleTime_239_5Cycles;
 194              		.loc 1 203 0
 195 000e 019B     		ldr	r3, [sp, #4]	@ tmp116, tmpreg
 196 0010 0722     		movs	r2, #7	@ tmp117,
ARM GAS  /tmp/ccVX56sy.s 			page 8


 197 0012 1343     		orrs	r3, r2	@ tmp115, tmp117
 198 0014 0193     		str	r3, [sp, #4]	@ tmp115, tmpreg
 204:src/adc.c     **** 
 205:src/adc.c     **** 	/* Configure the ADC Sample time register */
 206:src/adc.c     **** 	ADC1->SMPR = tmpreg ;
 199              		.loc 1 206 0
 200 0016 034B     		ldr	r3, .L6	@ D.4950,
 201 0018 019A     		ldr	r2, [sp, #4]	@ tmp118, tmpreg
 202 001a 5A61     		str	r2, [r3, #20]	@ tmp118, _4->SMPR
 207:src/adc.c     **** }
 203              		.loc 1 207 0
 204 001c C046     		nop
 205 001e 02B0     		add	sp, sp, #8	@,,
 206              		@ sp needed	@
 207 0020 7047     		bx	lr
 208              	.L7:
 209 0022 C046     		.align	2
 210              	.L6:
 211 0024 00240140 		.word	1073816576
 212              		.cfi_endproc
 213              	.LFE21:
 214              		.size	SetADC1_SampleTime, .-SetADC1_SampleTime
 215              		.section	.text.ReadADC1_SameSampleTime,"ax",%progbits
 216              		.align	2
 217              		.global	ReadADC1_SameSampleTime
 218              		.code	16
 219              		.thumb_func
 220              		.type	ReadADC1_SameSampleTime, %function
 221              	ReadADC1_SameSampleTime:
 222              	.LFB22:
 208:src/adc.c     **** 
 209:src/adc.c     **** 
 210:src/adc.c     **** //lee el ADC sin cambiar el sample time anterior
 211:src/adc.c     **** unsigned short ReadADC1_SameSampleTime (unsigned int channel)
 212:src/adc.c     **** {
 223              		.loc 1 212 0
 224              		.cfi_startproc
 225 0000 82B0     		sub	sp, sp, #8	@,,
 226              	.LCFI2:
 227              		.cfi_def_cfa_offset 8
 228 0002 0190     		str	r0, [sp, #4]	@ channel, channel
 213:src/adc.c     **** 	// Configure the ADC Channel
 214:src/adc.c     **** 	ADC1->CHSELR = channel;
 229              		.loc 1 214 0
 230 0004 0A4B     		ldr	r3, .L11	@ D.4951,
 231 0006 019A     		ldr	r2, [sp, #4]	@ tmp122, channel
 232 0008 9A62     		str	r2, [r3, #40]	@ tmp122, _1->CHSELR
 215:src/adc.c     **** 
 216:src/adc.c     **** 	// Start the conversion
 217:src/adc.c     **** 	ADC1->CR |= (uint32_t)ADC_CR_ADSTART;
 233              		.loc 1 217 0
 234 000a 094B     		ldr	r3, .L11	@ D.4951,
 235 000c 084A     		ldr	r2, .L11	@ D.4951,
 236 000e 9268     		ldr	r2, [r2, #8]	@ D.4952, _6->CR
 237 0010 0421     		movs	r1, #4	@ tmp123,
 238 0012 0A43     		orrs	r2, r1	@ D.4952, tmp123
 239 0014 9A60     		str	r2, [r3, #8]	@ D.4952, _5->CR
ARM GAS  /tmp/ccVX56sy.s 			page 9


 218:src/adc.c     **** 
 219:src/adc.c     **** 	// Wait until conversion completion
 220:src/adc.c     **** 	while((ADC1->ISR & ADC_ISR_EOC) == 0);
 240              		.loc 1 220 0
 241 0016 C046     		nop
 242              	.L9:
 243              		.loc 1 220 0 is_stmt 0 discriminator 1
 244 0018 054B     		ldr	r3, .L11	@ D.4951,
 245 001a 1B68     		ldr	r3, [r3]	@ D.4952, _10->ISR
 246 001c 0422     		movs	r2, #4	@ tmp124,
 247 001e 1340     		ands	r3, r2	@ D.4952, tmp124
 248 0020 FAD0     		beq	.L9	@,
 221:src/adc.c     **** 
 222:src/adc.c     **** 	// Get the conversion value
 223:src/adc.c     **** 	return (uint16_t) ADC1->DR;
 249              		.loc 1 223 0 is_stmt 1
 250 0022 034B     		ldr	r3, .L11	@ D.4951,
 251 0024 1B6C     		ldr	r3, [r3, #64]	@ D.4952, _13->DR
 252 0026 9BB2     		uxth	r3, r3	@ D.4953, D.4952
 224:src/adc.c     **** }
 253              		.loc 1 224 0
 254 0028 1800     		movs	r0, r3	@, <retval>
 255 002a 02B0     		add	sp, sp, #8	@,,
 256              		@ sp needed	@
 257 002c 7047     		bx	lr
 258              	.L12:
 259 002e C046     		.align	2
 260              	.L11:
 261 0030 00240140 		.word	1073816576
 262              		.cfi_endproc
 263              	.LFE22:
 264              		.size	ReadADC1_SameSampleTime, .-ReadADC1_SameSampleTime
 265              		.section	.text.ReadADC1Check,"ax",%progbits
 266              		.align	2
 267              		.global	ReadADC1Check
 268              		.code	16
 269              		.thumb_func
 270              		.type	ReadADC1Check, %function
 271              	ReadADC1Check:
 272              	.LFB23:
 225:src/adc.c     **** 
 226:src/adc.c     **** unsigned short ReadADC1Check (unsigned char channel)
 227:src/adc.c     **** {
 273              		.loc 1 227 0
 274              		.cfi_startproc
 275 0000 82B0     		sub	sp, sp, #8	@,,
 276              	.LCFI3:
 277              		.cfi_def_cfa_offset 8
 278 0002 0200     		movs	r2, r0	@ tmp137, channel
 279 0004 6B46     		mov	r3, sp	@ tmp153,
 280 0006 0733     		adds	r3, r3, #7	@ tmp138,
 281 0008 1A70     		strb	r2, [r3]	@ tmp139, channel
 228:src/adc.c     **** 	if (ADC1->CR & 0x01)			//reviso ADEN
 282              		.loc 1 228 0
 283 000a 204B     		ldr	r3, .L25	@ D.4955,
 284 000c 9B68     		ldr	r3, [r3, #8]	@ D.4956, _3->CR
 285 000e 0122     		movs	r2, #1	@ tmp140,
ARM GAS  /tmp/ccVX56sy.s 			page 10


 286 0010 1340     		ands	r3, r2	@ D.4956, tmp140
 287 0012 01D0     		beq	.L23	@,
 229:src/adc.c     **** 		return 0xFFFF;
 288              		.loc 1 229 0
 289 0014 1E4B     		ldr	r3, .L25+4	@ D.4954,
 290 0016 35E0     		b	.L15	@
 291              	.L23:
 230:src/adc.c     **** 
 231:src/adc.c     **** 	//espero que este listo para convertir
 232:src/adc.c     **** 	while ((ADC1->ISR & 0x01) == 0);	//espero ARDY = 1
 292              		.loc 1 232 0
 293 0018 C046     		nop
 294              	.L16:
 295              		.loc 1 232 0 is_stmt 0 discriminator 1
 296 001a 1C4B     		ldr	r3, .L25	@ D.4955,
 297 001c 1B68     		ldr	r3, [r3]	@ D.4956, _8->ISR
 298 001e 0122     		movs	r2, #1	@ tmp141,
 299 0020 1340     		ands	r3, r2	@ D.4956, tmp141
 300 0022 FAD0     		beq	.L16	@,
 233:src/adc.c     **** 
 234:src/adc.c     **** 	if ((ADC1->CFGR1 & 0x00010000) == 0)			//reviso DISCONTINUOS = 1
 301              		.loc 1 234 0 is_stmt 1
 302 0024 194B     		ldr	r3, .L25	@ D.4955,
 303 0026 DA68     		ldr	r2, [r3, #12]	@ D.4956, _11->CFGR1
 304 0028 8023     		movs	r3, #128	@ tmp152,
 305 002a 5B02     		lsls	r3, r3, #9	@ tmp142, tmp152,
 306 002c 1340     		ands	r3, r2	@ D.4956, D.4956
 307 002e 01D1     		bne	.L17	@,
 235:src/adc.c     **** 		return 0xFFFF;
 308              		.loc 1 235 0
 309 0030 174B     		ldr	r3, .L25+4	@ D.4954,
 310 0032 27E0     		b	.L15	@
 311              	.L17:
 236:src/adc.c     **** 
 237:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00002000)					//reviso CONT = 0
 312              		.loc 1 237 0
 313 0034 154B     		ldr	r3, .L25	@ D.4955,
 314 0036 DA68     		ldr	r2, [r3, #12]	@ D.4956, _15->CFGR1
 315 0038 8023     		movs	r3, #128	@ tmp151,
 316 003a 9B01     		lsls	r3, r3, #6	@ tmp143, tmp151,
 317 003c 1340     		ands	r3, r2	@ D.4956, D.4956
 318 003e 01D0     		beq	.L18	@,
 238:src/adc.c     **** 		return 0xFFFF;
 319              		.loc 1 238 0
 320 0040 134B     		ldr	r3, .L25+4	@ D.4954,
 321 0042 1FE0     		b	.L15	@
 322              	.L18:
 239:src/adc.c     **** 
 240:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00000C00)					//reviso TRIGGER = 00
 323              		.loc 1 240 0
 324 0044 114B     		ldr	r3, .L25	@ D.4955,
 325 0046 DA68     		ldr	r2, [r3, #12]	@ D.4956, _19->CFGR1
 326 0048 C023     		movs	r3, #192	@ tmp150,
 327 004a 1B01     		lsls	r3, r3, #4	@ tmp144, tmp150,
 328 004c 1340     		ands	r3, r2	@ D.4956, D.4956
 329 004e 01D0     		beq	.L19	@,
 241:src/adc.c     **** 		return 0xFFFF;
ARM GAS  /tmp/ccVX56sy.s 			page 11


 330              		.loc 1 241 0
 331 0050 0F4B     		ldr	r3, .L25+4	@ D.4954,
 332 0052 17E0     		b	.L15	@
 333              	.L19:
 242:src/adc.c     **** 
 243:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00000020)					//reviso ALIGN = 0
 334              		.loc 1 243 0
 335 0054 0D4B     		ldr	r3, .L25	@ D.4955,
 336 0056 DB68     		ldr	r3, [r3, #12]	@ D.4956, _23->CFGR1
 337 0058 2022     		movs	r2, #32	@ tmp145,
 338 005a 1340     		ands	r3, r2	@ D.4956, tmp145
 339 005c 01D0     		beq	.L20	@,
 244:src/adc.c     **** 		return 0xFFFF;
 340              		.loc 1 244 0
 341 005e 0C4B     		ldr	r3, .L25+4	@ D.4954,
 342 0060 10E0     		b	.L15	@
 343              	.L20:
 245:src/adc.c     **** 
 246:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00000018)					//reviso RES = 00
 344              		.loc 1 246 0
 345 0062 0A4B     		ldr	r3, .L25	@ D.4955,
 346 0064 DB68     		ldr	r3, [r3, #12]	@ D.4956, _27->CFGR1
 347 0066 1822     		movs	r2, #24	@ tmp146,
 348 0068 1340     		ands	r3, r2	@ D.4956, tmp146
 349 006a 01D0     		beq	.L24	@,
 247:src/adc.c     **** 		return 0xFFFF;
 350              		.loc 1 247 0
 351 006c 084B     		ldr	r3, .L25+4	@ D.4954,
 352 006e 09E0     		b	.L15	@
 353              	.L24:
 248:src/adc.c     **** 
 249:src/adc.c     **** 	//espero que no se este convirtiendo ADCSTART = 0
 250:src/adc.c     **** 	while ((ADC1->CR & 0x02) != 0);	//espero ADCSTART = 0
 354              		.loc 1 250 0
 355 0070 C046     		nop
 356              	.L22:
 357              		.loc 1 250 0 is_stmt 0 discriminator 1
 358 0072 064B     		ldr	r3, .L25	@ D.4955,
 359 0074 9B68     		ldr	r3, [r3, #8]	@ D.4956, _31->CR
 360 0076 0222     		movs	r2, #2	@ tmp147,
 361 0078 1340     		ands	r3, r2	@ D.4956, tmp147
 362 007a FAD1     		bne	.L22	@,
 251:src/adc.c     **** 
 252:src/adc.c     **** 	ADC1->CHSELR = 0x00000001;	//solo convierto CH0
 363              		.loc 1 252 0 is_stmt 1
 364 007c 034B     		ldr	r3, .L25	@ D.4955,
 365 007e 0122     		movs	r2, #1	@ tmp148,
 366 0080 9A62     		str	r2, [r3, #40]	@ tmp148, _34->CHSELR
 253:src/adc.c     **** 
 254:src/adc.c     **** 	return 1;
 367              		.loc 1 254 0
 368 0082 0123     		movs	r3, #1	@ D.4954,
 369              	.L15:
 255:src/adc.c     **** }
 370              		.loc 1 255 0
 371 0084 1800     		movs	r0, r3	@, <retval>
 372 0086 02B0     		add	sp, sp, #8	@,,
ARM GAS  /tmp/ccVX56sy.s 			page 12


 373              		@ sp needed	@
 374 0088 7047     		bx	lr
 375              	.L26:
 376 008a C046     		.align	2
 377              	.L25:
 378 008c 00240140 		.word	1073816576
 379 0090 FFFF0000 		.word	65535
 380              		.cfi_endproc
 381              	.LFE23:
 382              		.size	ReadADC1Check, .-ReadADC1Check
 383              		.section	.text.ADCGetCalibrationFactor,"ax",%progbits
 384              		.align	2
 385              		.global	ADCGetCalibrationFactor
 386              		.code	16
 387              		.thumb_func
 388              		.type	ADCGetCalibrationFactor, %function
 389              	ADCGetCalibrationFactor:
 390              	.LFB24:
 256:src/adc.c     **** 
 257:src/adc.c     **** unsigned int ADCGetCalibrationFactor (void)
 258:src/adc.c     **** {
 391              		.loc 1 258 0
 392              		.cfi_startproc
 393 0000 84B0     		sub	sp, sp, #16	@,,
 394              	.LCFI4:
 395              		.cfi_def_cfa_offset 16
 259:src/adc.c     ****   uint32_t tmpreg = 0, calibrationcounter = 0, calibrationstatus = 0;
 396              		.loc 1 259 0
 397 0002 0023     		movs	r3, #0	@ tmp122,
 398 0004 0393     		str	r3, [sp, #12]	@ tmp122, tmpreg
 399 0006 0023     		movs	r3, #0	@ tmp123,
 400 0008 0293     		str	r3, [sp, #8]	@ tmp123, calibrationcounter
 401 000a 0023     		movs	r3, #0	@ tmp124,
 402 000c 0193     		str	r3, [sp, #4]	@ tmp124, calibrationstatus
 260:src/adc.c     **** 
 261:src/adc.c     ****   /* Set the ADC calibartion */
 262:src/adc.c     ****   ADC1->CR |= (uint32_t)ADC_CR_ADCAL;
 403              		.loc 1 262 0
 404 000e 124B     		ldr	r3, .L33	@ D.4957,
 405 0010 114A     		ldr	r2, .L33	@ D.4957,
 406 0012 9268     		ldr	r2, [r2, #8]	@ D.4958, _7->CR
 407 0014 8021     		movs	r1, #128	@ tmp137,
 408 0016 0906     		lsls	r1, r1, #24	@ tmp125, tmp137,
 409 0018 0A43     		orrs	r2, r1	@ D.4958, tmp125
 410 001a 9A60     		str	r2, [r3, #8]	@ D.4958, _6->CR
 411              	.L29:
 263:src/adc.c     **** 
 264:src/adc.c     ****   /* Wait until no ADC calibration is completed */
 265:src/adc.c     ****   do
 266:src/adc.c     ****   {
 267:src/adc.c     ****     calibrationstatus = ADC1->CR & ADC_CR_ADCAL;
 412              		.loc 1 267 0 discriminator 2
 413 001c 0E4B     		ldr	r3, .L33	@ D.4957,
 414 001e 9B68     		ldr	r3, [r3, #8]	@ D.4958, _12->CR
 415 0020 DB0F     		lsrs	r3, r3, #31	@ tmp127, D.4958,
 416 0022 DB07     		lsls	r3, r3, #31	@ tmp126, tmp127,
 417 0024 0193     		str	r3, [sp, #4]	@ tmp126, calibrationstatus
ARM GAS  /tmp/ccVX56sy.s 			page 13


 268:src/adc.c     ****     calibrationcounter++;
 418              		.loc 1 268 0 discriminator 2
 419 0026 029B     		ldr	r3, [sp, #8]	@ tmp129, calibrationcounter
 420 0028 0133     		adds	r3, r3, #1	@ tmp128,
 421 002a 0293     		str	r3, [sp, #8]	@ tmp128, calibrationcounter
 269:src/adc.c     ****   } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 422              		.loc 1 269 0 discriminator 2
 423 002c 029A     		ldr	r2, [sp, #8]	@ tmp130, calibrationcounter
 424 002e F023     		movs	r3, #240	@ tmp136,
 425 0030 1B02     		lsls	r3, r3, #8	@ tmp131, tmp136,
 426 0032 9A42     		cmp	r2, r3	@ tmp130, tmp131
 427 0034 02D0     		beq	.L28	@,
 428              		.loc 1 269 0 is_stmt 0 discriminator 1
 429 0036 019B     		ldr	r3, [sp, #4]	@ tmp132, calibrationstatus
 430 0038 002B     		cmp	r3, #0	@ tmp132,
 431 003a EFD1     		bne	.L29	@,
 432              	.L28:
 270:src/adc.c     **** 
 271:src/adc.c     ****   if((uint32_t)(ADC1->CR & ADC_CR_ADCAL) == RESET)
 433              		.loc 1 271 0 is_stmt 1
 434 003c 064B     		ldr	r3, .L33	@ D.4957,
 435 003e 9B68     		ldr	r3, [r3, #8]	@ D.4958, _16->CR
 436 0040 002B     		cmp	r3, #0	@ D.4959,
 437 0042 03DB     		blt	.L30	@,
 272:src/adc.c     ****   {
 273:src/adc.c     ****     /*Get the calibration factor from the ADC data register */
 274:src/adc.c     ****     tmpreg = ADC1->DR;
 438              		.loc 1 274 0
 439 0044 044B     		ldr	r3, .L33	@ D.4957,
 440 0046 1B6C     		ldr	r3, [r3, #64]	@ tmp133, _19->DR
 441 0048 0393     		str	r3, [sp, #12]	@ tmp133, tmpreg
 442 004a 01E0     		b	.L31	@
 443              	.L30:
 275:src/adc.c     ****   }
 276:src/adc.c     ****   else
 277:src/adc.c     ****   {
 278:src/adc.c     ****     /* Error factor */
 279:src/adc.c     ****     tmpreg = 0x00000000;
 444              		.loc 1 279 0
 445 004c 0023     		movs	r3, #0	@ tmp134,
 446 004e 0393     		str	r3, [sp, #12]	@ tmp134, tmpreg
 447              	.L31:
 280:src/adc.c     ****   }
 281:src/adc.c     ****   return tmpreg;
 448              		.loc 1 281 0
 449 0050 039B     		ldr	r3, [sp, #12]	@ D.4960, tmpreg
 282:src/adc.c     **** }
 450              		.loc 1 282 0
 451 0052 1800     		movs	r0, r3	@, <retval>
 452 0054 04B0     		add	sp, sp, #16	@,,
 453              		@ sp needed	@
 454 0056 7047     		bx	lr
 455              	.L34:
 456              		.align	2
 457              	.L33:
 458 0058 00240140 		.word	1073816576
 459              		.cfi_endproc
ARM GAS  /tmp/ccVX56sy.s 			page 14


 460              	.LFE24:
 461              		.size	ADCGetCalibrationFactor, .-ADCGetCalibrationFactor
 462              		.section	.text.UpdatePhotoTransistor,"ax",%progbits
 463              		.align	2
 464              		.global	UpdatePhotoTransistor
 465              		.code	16
 466              		.thumb_func
 467              		.type	UpdatePhotoTransistor, %function
 468              	UpdatePhotoTransistor:
 469              	.LFB25:
 283:src/adc.c     **** 
 284:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
 285:src/adc.c     **** void UpdateTemp(void)
 286:src/adc.c     **** {
 287:src/adc.c     **** 	//hago update cada 1 seg
 288:src/adc.c     **** 	if (!tt_take_temp_sample)
 289:src/adc.c     **** 	{
 290:src/adc.c     **** 		tt_take_temp_sample = 1000;
 291:src/adc.c     **** 
 292:src/adc.c     **** 		board_temp [board_temp_index] = ReadADC1_SameSampleTime(ADC_CH16);
 293:src/adc.c     **** 		//board_temp [0] = ReadADC1_SameSampleTime(ADC_CH16);
 294:src/adc.c     **** 
 295:src/adc.c     **** 		if (board_temp_index < (SIZEOF_BOARD_TEMP - 1))
 296:src/adc.c     **** 			board_temp_index++;
 297:src/adc.c     **** 		else
 298:src/adc.c     **** 			board_temp_index = 0;
 299:src/adc.c     **** 
 300:src/adc.c     **** 		new_temp_sample = 1;
 301:src/adc.c     **** 	}
 302:src/adc.c     **** }
 303:src/adc.c     **** 
 304:src/adc.c     **** //devuelve el valor promedio de la temperatura
 305:src/adc.c     **** //si existen nuevas muestras hace la cuenta, sino contesta el ultimo valor calculado
 306:src/adc.c     **** unsigned short GetTemp (void)
 307:src/adc.c     **** {
 308:src/adc.c     ****     unsigned char i;
 309:src/adc.c     ****     unsigned int t = 0;
 310:src/adc.c     **** 
 311:src/adc.c     ****     if (new_temp_sample)
 312:src/adc.c     ****     {
 313:src/adc.c     ****         for (i = 0; i < SIZEOF_BOARD_TEMP; i++)
 314:src/adc.c     ****             t += board_temp[i];
 315:src/adc.c     **** 
 316:src/adc.c     ****         last_temp = t >> 3;
 317:src/adc.c     ****         new_temp_sample = 0;
 318:src/adc.c     ****     }
 319:src/adc.c     **** 
 320:src/adc.c     ****     return ConvertTemp(last_temp);
 321:src/adc.c     **** }
 322:src/adc.c     **** 
 323:src/adc.c     **** void FillTempBuffer (void)
 324:src/adc.c     **** {
 325:src/adc.c     **** 	unsigned char i;
 326:src/adc.c     **** 	unsigned short dummy;
 327:src/adc.c     **** 
 328:src/adc.c     **** 	dummy = ReadADC1_SameSampleTime(ADC_CH16);
 329:src/adc.c     **** 
ARM GAS  /tmp/ccVX56sy.s 			page 15


 330:src/adc.c     **** 	for (i = 0; i < SIZEOF_BOARD_TEMP; i++)
 331:src/adc.c     **** 		 board_temp[i] = dummy;
 332:src/adc.c     **** 
 333:src/adc.c     **** }
 334:src/adc.c     **** 
 335:src/adc.c     **** short ConvertTemp (unsigned short adc_temp)
 336:src/adc.c     **** {
 337:src/adc.c     **** 	int32_t temperature; /* will contain the temperature in degree Celsius */
 338:src/adc.c     **** 	//temperature = (((int32_t) ADC1->DR * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR );
 339:src/adc.c     **** 	temperature = (int32_t) *TEMP30_CAL_ADDR - adc_temp;
 340:src/adc.c     **** 	temperature *= 1000;
 341:src/adc.c     **** 	temperature = temperature / 5336;	//4.3mV / °C
 342:src/adc.c     **** 	temperature = temperature + 30;
 343:src/adc.c     **** 
 344:src/adc.c     **** 	return (short) temperature;
 345:src/adc.c     **** }
 346:src/adc.c     **** #endif //ADC_WITH_TEMP_SENSE
 347:src/adc.c     **** 
 348:src/adc.c     **** void UpdatePhotoTransistor(void)
 349:src/adc.c     **** {
 470              		.loc 1 349 0
 471              		.cfi_startproc
 472 0000 10B5     		push	{r4, lr}	@
 473              	.LCFI5:
 474              		.cfi_def_cfa_offset 8
 475              		.cfi_offset 4, -8
 476              		.cfi_offset 14, -4
 350:src/adc.c     **** 	//hago update cada 1 seg
 351:src/adc.c     **** 	if (!tt_take_photo_sample)
 477              		.loc 1 351 0
 478 0002 134B     		ldr	r3, .L40	@ tmp117,
 479 0004 1B88     		ldrh	r3, [r3]	@ tmp118, tt_take_photo_sample
 480 0006 9BB2     		uxth	r3, r3	@ D.4961, tmp118
 481 0008 002B     		cmp	r3, #0	@ D.4961,
 482 000a 1FD1     		bne	.L39	@,
 352:src/adc.c     **** 	{
 353:src/adc.c     **** 		tt_take_photo_sample = 1000;
 483              		.loc 1 353 0
 484 000c 104B     		ldr	r3, .L40	@ tmp119,
 485 000e FA22     		movs	r2, #250	@ tmp139,
 486 0010 9200     		lsls	r2, r2, #2	@ tmp120, tmp139,
 487 0012 1A80     		strh	r2, [r3]	@ tmp121, tt_take_photo_sample
 354:src/adc.c     **** 
 355:src/adc.c     **** 		VoltagePhoto [photo_index] = ReadADC1_SameSampleTime(ADC_CH1);
 488              		.loc 1 355 0
 489 0014 0F4B     		ldr	r3, .L40+4	@ tmp122,
 490 0016 1B78     		ldrb	r3, [r3]	@ D.4962, photo_index
 491 0018 1C00     		movs	r4, r3	@ D.4963, D.4962
 492 001a 0220     		movs	r0, #2	@,
 493 001c FFF7FEFF 		bl	ReadADC1_SameSampleTime	@
 494 0020 0300     		movs	r3, r0	@ tmp123,
 495 0022 1900     		movs	r1, r3	@ D.4961, tmp124
 496 0024 0C4B     		ldr	r3, .L40+8	@ tmp125,
 497 0026 6200     		lsls	r2, r4, #1	@ tmp126, D.4963,
 498 0028 D152     		strh	r1, [r2, r3]	@ tmp127, VoltagePhoto
 356:src/adc.c     **** 
 357:src/adc.c     **** 		if (photo_index < (SIZEOF_PHOTO_TRANS - 1))
ARM GAS  /tmp/ccVX56sy.s 			page 16


 499              		.loc 1 357 0
 500 002a 0A4B     		ldr	r3, .L40+4	@ tmp128,
 501 002c 1B78     		ldrb	r3, [r3]	@ D.4962, photo_index
 502 002e 1E2B     		cmp	r3, #30	@ D.4962,
 503 0030 06D8     		bhi	.L37	@,
 358:src/adc.c     **** 			photo_index++;
 504              		.loc 1 358 0
 505 0032 084B     		ldr	r3, .L40+4	@ tmp129,
 506 0034 1B78     		ldrb	r3, [r3]	@ D.4962, photo_index
 507 0036 0133     		adds	r3, r3, #1	@ tmp130,
 508 0038 DAB2     		uxtb	r2, r3	@ D.4962, tmp130
 509 003a 064B     		ldr	r3, .L40+4	@ tmp131,
 510 003c 1A70     		strb	r2, [r3]	@ tmp132, photo_index
 511 003e 02E0     		b	.L38	@
 512              	.L37:
 359:src/adc.c     **** 		else
 360:src/adc.c     **** 			photo_index = 0;
 513              		.loc 1 360 0
 514 0040 044B     		ldr	r3, .L40+4	@ tmp133,
 515 0042 0022     		movs	r2, #0	@ tmp134,
 516 0044 1A70     		strb	r2, [r3]	@ tmp135, photo_index
 517              	.L38:
 361:src/adc.c     **** 
 362:src/adc.c     **** 		new_photo_sample = 1;
 518              		.loc 1 362 0
 519 0046 054B     		ldr	r3, .L40+12	@ tmp136,
 520 0048 0122     		movs	r2, #1	@ tmp137,
 521 004a 1A70     		strb	r2, [r3]	@ tmp138, new_photo_sample
 522              	.L39:
 363:src/adc.c     **** 	}
 364:src/adc.c     **** }
 523              		.loc 1 364 0
 524 004c C046     		nop
 525              		@ sp needed	@
 526 004e 10BD     		pop	{r4, pc}
 527              	.L41:
 528              		.align	2
 529              	.L40:
 530 0050 00000000 		.word	tt_take_photo_sample
 531 0054 00000000 		.word	photo_index
 532 0058 00000000 		.word	VoltagePhoto
 533 005c 00000000 		.word	new_photo_sample
 534              		.cfi_endproc
 535              	.LFE25:
 536              		.size	UpdatePhotoTransistor, .-UpdatePhotoTransistor
 537              		.section	.text.FillPhotoBuffer,"ax",%progbits
 538              		.align	2
 539              		.global	FillPhotoBuffer
 540              		.code	16
 541              		.thumb_func
 542              		.type	FillPhotoBuffer, %function
 543              	FillPhotoBuffer:
 544              	.LFB26:
 365:src/adc.c     **** 
 366:src/adc.c     **** void FillPhotoBuffer (void)
 367:src/adc.c     **** {
 545              		.loc 1 367 0
ARM GAS  /tmp/ccVX56sy.s 			page 17


 546              		.cfi_startproc
 547 0000 10B5     		push	{r4, lr}	@
 548              	.LCFI6:
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 4, -8
 551              		.cfi_offset 14, -4
 552 0002 82B0     		sub	sp, sp, #8	@,,
 553              	.LCFI7:
 554              		.cfi_def_cfa_offset 16
 368:src/adc.c     **** 	unsigned char i;
 369:src/adc.c     **** 	unsigned short dummy;
 370:src/adc.c     **** 
 371:src/adc.c     **** 	dummy = ReadADC1_SameSampleTime(ADC_CH1);
 555              		.loc 1 371 0
 556 0004 01AC     		add	r4, sp, #4	@ tmp112,,
 557 0006 0220     		movs	r0, #2	@,
 558 0008 FFF7FEFF 		bl	ReadADC1_SameSampleTime	@
 559 000c 0300     		movs	r3, r0	@ tmp113,
 560 000e 2380     		strh	r3, [r4]	@ tmp115, dummy
 372:src/adc.c     **** 
 373:src/adc.c     **** 	for (i = 0; i < SIZEOF_PHOTO_TRANS; i++)
 561              		.loc 1 373 0
 562 0010 6B46     		mov	r3, sp	@ tmp130,
 563 0012 0733     		adds	r3, r3, #7	@ tmp116,
 564 0014 0022     		movs	r2, #0	@ tmp117,
 565 0016 1A70     		strb	r2, [r3]	@ tmp118, i
 566 0018 0EE0     		b	.L43	@
 567              	.L44:
 374:src/adc.c     **** 		 VoltagePhoto[i] = dummy;
 568              		.loc 1 374 0 discriminator 3
 569 001a 6B46     		mov	r3, sp	@ tmp131,
 570 001c 0733     		adds	r3, r3, #7	@ tmp119,
 571 001e 1A78     		ldrb	r2, [r3]	@ D.4964, i
 572 0020 094B     		ldr	r3, .L45	@ tmp120,
 573 0022 5200     		lsls	r2, r2, #1	@ tmp121, D.4964,
 574 0024 01A9     		add	r1, sp, #4	@ tmp122,,
 575 0026 0988     		ldrh	r1, [r1]	@ tmp123, dummy
 576 0028 D152     		strh	r1, [r2, r3]	@ tmp123, VoltagePhoto
 373:src/adc.c     **** 		 VoltagePhoto[i] = dummy;
 577              		.loc 1 373 0 discriminator 3
 578 002a 6B46     		mov	r3, sp	@ tmp132,
 579 002c 0733     		adds	r3, r3, #7	@ tmp124,
 580 002e 1A78     		ldrb	r2, [r3]	@ D.4965, i
 581 0030 6B46     		mov	r3, sp	@ tmp133,
 582 0032 0733     		adds	r3, r3, #7	@ tmp125,
 583 0034 0132     		adds	r2, r2, #1	@ tmp126,
 584 0036 1A70     		strb	r2, [r3]	@ tmp127, i
 585              	.L43:
 373:src/adc.c     **** 		 VoltagePhoto[i] = dummy;
 586              		.loc 1 373 0 is_stmt 0 discriminator 1
 587 0038 6B46     		mov	r3, sp	@ tmp134,
 588 003a 0733     		adds	r3, r3, #7	@ tmp128,
 589 003c 1B78     		ldrb	r3, [r3]	@ tmp129, i
 590 003e 1F2B     		cmp	r3, #31	@ tmp129,
 591 0040 EBD9     		bls	.L44	@,
 375:src/adc.c     **** 
 376:src/adc.c     **** }
ARM GAS  /tmp/ccVX56sy.s 			page 18


 592              		.loc 1 376 0 is_stmt 1
 593 0042 C046     		nop
 594 0044 02B0     		add	sp, sp, #8	@,,
 595              		@ sp needed	@
 596 0046 10BD     		pop	{r4, pc}
 597              	.L46:
 598              		.align	2
 599              	.L45:
 600 0048 00000000 		.word	VoltagePhoto
 601              		.cfi_endproc
 602              	.LFE26:
 603              		.size	FillPhotoBuffer, .-FillPhotoBuffer
 604              		.section	.text.GetPhoto,"ax",%progbits
 605              		.align	2
 606              		.global	GetPhoto
 607              		.code	16
 608              		.thumb_func
 609              		.type	GetPhoto, %function
 610              	GetPhoto:
 611              	.LFB27:
 377:src/adc.c     **** 
 378:src/adc.c     **** //devuelve el valor promedio del PhotoTransistor
 379:src/adc.c     **** //si existen nuevas muestras hace la cuenta, sino contesta el ultimo valor calculado
 380:src/adc.c     **** unsigned short GetPhoto (void)
 381:src/adc.c     **** {
 612              		.loc 1 381 0
 613              		.cfi_startproc
 614 0000 82B0     		sub	sp, sp, #8	@,,
 615              	.LCFI8:
 616              		.cfi_def_cfa_offset 8
 382:src/adc.c     ****     unsigned char i;
 383:src/adc.c     ****     unsigned int t = 0;
 617              		.loc 1 383 0
 618 0002 0023     		movs	r3, #0	@ tmp119,
 619 0004 0093     		str	r3, [sp]	@ tmp119, t
 384:src/adc.c     **** 
 385:src/adc.c     ****     if (new_photo_sample)
 620              		.loc 1 385 0
 621 0006 164B     		ldr	r3, .L52	@ tmp120,
 622 0008 1B78     		ldrb	r3, [r3]	@ D.4966, new_photo_sample
 623 000a 002B     		cmp	r3, #0	@ D.4966,
 624 000c 22D0     		beq	.L48	@,
 386:src/adc.c     ****     {
 387:src/adc.c     ****         for (i = 0; i < SIZEOF_PHOTO_TRANS; i++)
 625              		.loc 1 387 0
 626 000e 6B46     		mov	r3, sp	@ tmp143,
 627 0010 0733     		adds	r3, r3, #7	@ tmp121,
 628 0012 0022     		movs	r2, #0	@ tmp122,
 629 0014 1A70     		strb	r2, [r3]	@ tmp123, i
 630 0016 10E0     		b	.L49	@
 631              	.L50:
 388:src/adc.c     ****         {
 389:src/adc.c     ****             t += VoltagePhoto[i];
 632              		.loc 1 389 0 discriminator 3
 633 0018 6B46     		mov	r3, sp	@ tmp144,
 634 001a 0733     		adds	r3, r3, #7	@ tmp124,
 635 001c 1A78     		ldrb	r2, [r3]	@ D.4967, i
ARM GAS  /tmp/ccVX56sy.s 			page 19


 636 001e 114B     		ldr	r3, .L52+4	@ tmp125,
 637 0020 5200     		lsls	r2, r2, #1	@ tmp126, D.4967,
 638 0022 D35A     		ldrh	r3, [r2, r3]	@ D.4968, VoltagePhoto
 639 0024 1A00     		movs	r2, r3	@ D.4969, D.4968
 640 0026 009B     		ldr	r3, [sp]	@ tmp128, t
 641 0028 9B18     		adds	r3, r3, r2	@ tmp127, tmp128, D.4969
 642 002a 0093     		str	r3, [sp]	@ tmp127, t
 387:src/adc.c     ****         {
 643              		.loc 1 387 0 discriminator 3
 644 002c 6B46     		mov	r3, sp	@ tmp145,
 645 002e 0733     		adds	r3, r3, #7	@ tmp129,
 646 0030 1A78     		ldrb	r2, [r3]	@ D.4966, i
 647 0032 6B46     		mov	r3, sp	@ tmp146,
 648 0034 0733     		adds	r3, r3, #7	@ tmp130,
 649 0036 0132     		adds	r2, r2, #1	@ tmp131,
 650 0038 1A70     		strb	r2, [r3]	@ tmp132, i
 651              	.L49:
 387:src/adc.c     ****         {
 652              		.loc 1 387 0 is_stmt 0 discriminator 1
 653 003a 6B46     		mov	r3, sp	@ tmp147,
 654 003c 0733     		adds	r3, r3, #7	@ tmp133,
 655 003e 1B78     		ldrb	r3, [r3]	@ tmp134, i
 656 0040 1F2B     		cmp	r3, #31	@ tmp134,
 657 0042 E9D9     		bls	.L50	@,
 390:src/adc.c     ****         }
 391:src/adc.c     **** 
 392:src/adc.c     ****         last_photo = t >> DIVISOR_PHOTO;
 658              		.loc 1 392 0 is_stmt 1
 659 0044 009B     		ldr	r3, [sp]	@ tmp135, t
 660 0046 5B09     		lsrs	r3, r3, #5	@ D.4969, tmp135,
 661 0048 9AB2     		uxth	r2, r3	@ D.4968, D.4969
 662 004a 074B     		ldr	r3, .L52+8	@ tmp136,
 663 004c 1A80     		strh	r2, [r3]	@ tmp137, last_photo
 393:src/adc.c     ****         new_photo_sample = 0;
 664              		.loc 1 393 0
 665 004e 044B     		ldr	r3, .L52	@ tmp138,
 666 0050 0022     		movs	r2, #0	@ tmp139,
 667 0052 1A70     		strb	r2, [r3]	@ tmp140, new_photo_sample
 668              	.L48:
 394:src/adc.c     ****     }
 395:src/adc.c     **** 
 396:src/adc.c     ****     return last_photo;
 669              		.loc 1 396 0
 670 0054 044B     		ldr	r3, .L52+8	@ tmp141,
 671 0056 1B88     		ldrh	r3, [r3]	@ D.4968, last_photo
 397:src/adc.c     **** }
 672              		.loc 1 397 0
 673 0058 1800     		movs	r0, r3	@, <retval>
 674 005a 02B0     		add	sp, sp, #8	@,,
 675              		@ sp needed	@
 676 005c 7047     		bx	lr
 677              	.L53:
 678 005e C046     		.align	2
 679              	.L52:
 680 0060 00000000 		.word	new_photo_sample
 681 0064 00000000 		.word	VoltagePhoto
 682 0068 00000000 		.word	last_photo
ARM GAS  /tmp/ccVX56sy.s 			page 20


 683              		.cfi_endproc
 684              	.LFE27:
 685              		.size	GetPhoto, .-GetPhoto
 686              		.text
 687              	.Letext0:
 688              		.file 2 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 689              		.file 3 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 690              		.file 4 "./cmsis_boot/stm32f0xx.h"
 691              		.section	.debug_info,"",%progbits
 692              	.Ldebug_info0:
 693 0000 64040000 		.4byte	0x464
 694 0004 0200     		.2byte	0x2
 695 0006 00000000 		.4byte	.Ldebug_abbrev0
 696 000a 04       		.byte	0x4
 697 000b 01       		.uleb128 0x1
 698 000c 9A020000 		.4byte	.LASF52
 699 0010 0C       		.byte	0xc
 700 0011 36000000 		.4byte	.LASF53
 701 0015 5F010000 		.4byte	.LASF54
 702 0019 00000000 		.4byte	.Ldebug_ranges0+0
 703 001d 00000000 		.4byte	0
 704 0021 00000000 		.4byte	0
 705 0025 00000000 		.4byte	.Ldebug_line0
 706 0029 02       		.uleb128 0x2
 707 002a 01       		.byte	0x1
 708 002b 08       		.byte	0x8
 709 002c C2010000 		.4byte	.LASF0
 710 0030 02       		.uleb128 0x2
 711 0031 01       		.byte	0x1
 712 0032 06       		.byte	0x6
 713 0033 2A000000 		.4byte	.LASF1
 714 0037 02       		.uleb128 0x2
 715 0038 02       		.byte	0x2
 716 0039 05       		.byte	0x5
 717 003a E8010000 		.4byte	.LASF2
 718 003e 03       		.uleb128 0x3
 719 003f 3E020000 		.4byte	.LASF5
 720 0043 02       		.byte	0x2
 721 0044 2B       		.byte	0x2b
 722 0045 49000000 		.4byte	0x49
 723 0049 02       		.uleb128 0x2
 724 004a 02       		.byte	0x2
 725 004b 07       		.byte	0x7
 726 004c EF000000 		.4byte	.LASF3
 727 0050 02       		.uleb128 0x2
 728 0051 04       		.byte	0x4
 729 0052 05       		.byte	0x5
 730 0053 47000000 		.4byte	.LASF4
 731 0057 03       		.uleb128 0x3
 732 0058 6E000000 		.4byte	.LASF6
 733 005c 02       		.byte	0x2
 734 005d 41       		.byte	0x41
 735 005e 62000000 		.4byte	0x62
 736 0062 02       		.uleb128 0x2
 737 0063 04       		.byte	0x4
 738 0064 07       		.byte	0x7
 739 0065 BC000000 		.4byte	.LASF7
ARM GAS  /tmp/ccVX56sy.s 			page 21


 740 0069 02       		.uleb128 0x2
 741 006a 08       		.byte	0x8
 742 006b 05       		.byte	0x5
 743 006c 1C000000 		.4byte	.LASF8
 744 0070 02       		.uleb128 0x2
 745 0071 08       		.byte	0x8
 746 0072 07       		.byte	0x7
 747 0073 00000000 		.4byte	.LASF9
 748 0077 04       		.uleb128 0x4
 749 0078 04       		.byte	0x4
 750 0079 05       		.byte	0x5
 751 007a 696E7400 		.ascii	"int\000"
 752 007e 02       		.uleb128 0x2
 753 007f 04       		.byte	0x4
 754 0080 07       		.byte	0x7
 755 0081 AF000000 		.4byte	.LASF10
 756 0085 03       		.uleb128 0x3
 757 0086 59000000 		.4byte	.LASF11
 758 008a 03       		.byte	0x3
 759 008b 1A       		.byte	0x1a
 760 008c 3E000000 		.4byte	0x3e
 761 0090 03       		.uleb128 0x3
 762 0091 25020000 		.4byte	.LASF12
 763 0095 03       		.byte	0x3
 764 0096 20       		.byte	0x20
 765 0097 57000000 		.4byte	0x57
 766 009b 02       		.uleb128 0x2
 767 009c 04       		.byte	0x4
 768 009d 07       		.byte	0x7
 769 009e 1C010000 		.4byte	.LASF13
 770 00a2 05       		.uleb128 0x5
 771 00a3 90000000 		.4byte	0x90
 772 00a7 06       		.uleb128 0x6
 773 00a8 01       		.byte	0x1
 774 00a9 29000000 		.4byte	0x29
 775 00ad 04       		.byte	0x4
 776 00ae 6D01     		.2byte	0x16d
 777 00b0 C1000000 		.4byte	0xc1
 778 00b4 07       		.uleb128 0x7
 779 00b5 BC010000 		.4byte	.LASF14
 780 00b9 00       		.byte	0
 781 00ba 08       		.uleb128 0x8
 782 00bb 53455400 		.ascii	"SET\000"
 783 00bf 01       		.byte	0x1
 784 00c0 00       		.byte	0
 785 00c1 09       		.uleb128 0x9
 786 00c2 44       		.byte	0x44
 787 00c3 04       		.byte	0x4
 788 00c4 7C01     		.2byte	0x17c
 789 00c6 8B010000 		.4byte	0x18b
 790 00ca 0A       		.uleb128 0xa
 791 00cb 49535200 		.ascii	"ISR\000"
 792 00cf 04       		.byte	0x4
 793 00d0 7E01     		.2byte	0x17e
 794 00d2 A2000000 		.4byte	0xa2
 795 00d6 02       		.byte	0x2
 796 00d7 23       		.byte	0x23
ARM GAS  /tmp/ccVX56sy.s 			page 22


 797 00d8 00       		.uleb128 0
 798 00d9 0A       		.uleb128 0xa
 799 00da 49455200 		.ascii	"IER\000"
 800 00de 04       		.byte	0x4
 801 00df 7F01     		.2byte	0x17f
 802 00e1 A2000000 		.4byte	0xa2
 803 00e5 02       		.byte	0x2
 804 00e6 23       		.byte	0x23
 805 00e7 04       		.uleb128 0x4
 806 00e8 0A       		.uleb128 0xa
 807 00e9 435200   		.ascii	"CR\000"
 808 00ec 04       		.byte	0x4
 809 00ed 8001     		.2byte	0x180
 810 00ef A2000000 		.4byte	0xa2
 811 00f3 02       		.byte	0x2
 812 00f4 23       		.byte	0x23
 813 00f5 08       		.uleb128 0x8
 814 00f6 0B       		.uleb128 0xb
 815 00f7 78020000 		.4byte	.LASF15
 816 00fb 04       		.byte	0x4
 817 00fc 8101     		.2byte	0x181
 818 00fe A2000000 		.4byte	0xa2
 819 0102 02       		.byte	0x2
 820 0103 23       		.byte	0x23
 821 0104 0C       		.uleb128 0xc
 822 0105 0B       		.uleb128 0xb
 823 0106 7E020000 		.4byte	.LASF16
 824 010a 04       		.byte	0x4
 825 010b 8201     		.2byte	0x182
 826 010d A2000000 		.4byte	0xa2
 827 0111 02       		.byte	0x2
 828 0112 23       		.byte	0x23
 829 0113 10       		.uleb128 0x10
 830 0114 0B       		.uleb128 0xb
 831 0115 17000000 		.4byte	.LASF17
 832 0119 04       		.byte	0x4
 833 011a 8301     		.2byte	0x183
 834 011c A2000000 		.4byte	0xa2
 835 0120 02       		.byte	0x2
 836 0121 23       		.byte	0x23
 837 0122 14       		.uleb128 0x14
 838 0123 0B       		.uleb128 0xb
 839 0124 94010000 		.4byte	.LASF18
 840 0128 04       		.byte	0x4
 841 0129 8401     		.2byte	0x184
 842 012b 90000000 		.4byte	0x90
 843 012f 02       		.byte	0x2
 844 0130 23       		.byte	0x23
 845 0131 18       		.uleb128 0x18
 846 0132 0B       		.uleb128 0xb
 847 0133 9E010000 		.4byte	.LASF19
 848 0137 04       		.byte	0x4
 849 0138 8501     		.2byte	0x185
 850 013a 90000000 		.4byte	0x90
 851 013e 02       		.byte	0x2
 852 013f 23       		.byte	0x23
 853 0140 1C       		.uleb128 0x1c
ARM GAS  /tmp/ccVX56sy.s 			page 23


 854 0141 0A       		.uleb128 0xa
 855 0142 545200   		.ascii	"TR\000"
 856 0145 04       		.byte	0x4
 857 0146 8601     		.2byte	0x186
 858 0148 A2000000 		.4byte	0xa2
 859 014c 02       		.byte	0x2
 860 014d 23       		.byte	0x23
 861 014e 20       		.uleb128 0x20
 862 014f 0B       		.uleb128 0xb
 863 0150 A8010000 		.4byte	.LASF20
 864 0154 04       		.byte	0x4
 865 0155 8701     		.2byte	0x187
 866 0157 90000000 		.4byte	0x90
 867 015b 02       		.byte	0x2
 868 015c 23       		.byte	0x23
 869 015d 24       		.uleb128 0x24
 870 015e 0B       		.uleb128 0xb
 871 015f 02010000 		.4byte	.LASF21
 872 0163 04       		.byte	0x4
 873 0164 8801     		.2byte	0x188
 874 0166 A2000000 		.4byte	0xa2
 875 016a 02       		.byte	0x2
 876 016b 23       		.byte	0x23
 877 016c 28       		.uleb128 0x28
 878 016d 0B       		.uleb128 0xb
 879 016e B2010000 		.4byte	.LASF22
 880 0172 04       		.byte	0x4
 881 0173 8901     		.2byte	0x189
 882 0175 8B010000 		.4byte	0x18b
 883 0179 02       		.byte	0x2
 884 017a 23       		.byte	0x23
 885 017b 2C       		.uleb128 0x2c
 886 017c 0A       		.uleb128 0xa
 887 017d 445200   		.ascii	"DR\000"
 888 0180 04       		.byte	0x4
 889 0181 8A01     		.2byte	0x18a
 890 0183 A2000000 		.4byte	0xa2
 891 0187 02       		.byte	0x2
 892 0188 23       		.byte	0x23
 893 0189 40       		.uleb128 0x40
 894 018a 00       		.byte	0
 895 018b 0C       		.uleb128 0xc
 896 018c 90000000 		.4byte	0x90
 897 0190 9B010000 		.4byte	0x19b
 898 0194 0D       		.uleb128 0xd
 899 0195 9B000000 		.4byte	0x9b
 900 0199 04       		.byte	0x4
 901 019a 00       		.byte	0
 902 019b 0E       		.uleb128 0xe
 903 019c 62000000 		.4byte	.LASF23
 904 01a0 04       		.byte	0x4
 905 01a1 8B01     		.2byte	0x18b
 906 01a3 C1000000 		.4byte	0xc1
 907 01a7 09       		.uleb128 0x9
 908 01a8 38       		.byte	0x38
 909 01a9 04       		.byte	0x4
 910 01aa B502     		.2byte	0x2b5
ARM GAS  /tmp/ccVX56sy.s 			page 24


 911 01ac 82020000 		.4byte	0x282
 912 01b0 0A       		.uleb128 0xa
 913 01b1 435200   		.ascii	"CR\000"
 914 01b4 04       		.byte	0x4
 915 01b5 B702     		.2byte	0x2b7
 916 01b7 A2000000 		.4byte	0xa2
 917 01bb 02       		.byte	0x2
 918 01bc 23       		.byte	0x23
 919 01bd 00       		.uleb128 0
 920 01be 0B       		.uleb128 0xb
 921 01bf 95020000 		.4byte	.LASF24
 922 01c3 04       		.byte	0x4
 923 01c4 B802     		.2byte	0x2b8
 924 01c6 A2000000 		.4byte	0xa2
 925 01ca 02       		.byte	0x2
 926 01cb 23       		.byte	0x23
 927 01cc 04       		.uleb128 0x4
 928 01cd 0A       		.uleb128 0xa
 929 01ce 43495200 		.ascii	"CIR\000"
 930 01d2 04       		.byte	0x4
 931 01d3 B902     		.2byte	0x2b9
 932 01d5 A2000000 		.4byte	0xa2
 933 01d9 02       		.byte	0x2
 934 01da 23       		.byte	0x23
 935 01db 08       		.uleb128 0x8
 936 01dc 0B       		.uleb128 0xb
 937 01dd 50000000 		.4byte	.LASF25
 938 01e1 04       		.byte	0x4
 939 01e2 BA02     		.2byte	0x2ba
 940 01e4 A2000000 		.4byte	0xa2
 941 01e8 02       		.byte	0x2
 942 01e9 23       		.byte	0x23
 943 01ea 0C       		.uleb128 0xc
 944 01eb 0B       		.uleb128 0xb
 945 01ec 56010000 		.4byte	.LASF26
 946 01f0 04       		.byte	0x4
 947 01f1 BB02     		.2byte	0x2bb
 948 01f3 A2000000 		.4byte	0xa2
 949 01f7 02       		.byte	0x2
 950 01f8 23       		.byte	0x23
 951 01f9 10       		.uleb128 0x10
 952 01fa 0B       		.uleb128 0xb
 953 01fb 45030000 		.4byte	.LASF27
 954 01ff 04       		.byte	0x4
 955 0200 BC02     		.2byte	0x2bc
 956 0202 A2000000 		.4byte	0xa2
 957 0206 02       		.byte	0x2
 958 0207 23       		.byte	0x23
 959 0208 14       		.uleb128 0x14
 960 0209 0B       		.uleb128 0xb
 961 020a 15020000 		.4byte	.LASF28
 962 020e 04       		.byte	0x4
 963 020f BD02     		.2byte	0x2bd
 964 0211 A2000000 		.4byte	0xa2
 965 0215 02       		.byte	0x2
 966 0216 23       		.byte	0x23
 967 0217 18       		.uleb128 0x18
ARM GAS  /tmp/ccVX56sy.s 			page 25


 968 0218 0B       		.uleb128 0xb
 969 0219 6B020000 		.4byte	.LASF29
 970 021d 04       		.byte	0x4
 971 021e BE02     		.2byte	0x2be
 972 0220 A2000000 		.4byte	0xa2
 973 0224 02       		.byte	0x2
 974 0225 23       		.byte	0x23
 975 0226 1C       		.uleb128 0x1c
 976 0227 0B       		.uleb128 0xb
 977 0228 73020000 		.4byte	.LASF30
 978 022c 04       		.byte	0x4
 979 022d BF02     		.2byte	0x2bf
 980 022f A2000000 		.4byte	0xa2
 981 0233 02       		.byte	0x2
 982 0234 23       		.byte	0x23
 983 0235 20       		.uleb128 0x20
 984 0236 0A       		.uleb128 0xa
 985 0237 43535200 		.ascii	"CSR\000"
 986 023b 04       		.byte	0x4
 987 023c C002     		.2byte	0x2c0
 988 023e A2000000 		.4byte	0xa2
 989 0242 02       		.byte	0x2
 990 0243 23       		.byte	0x23
 991 0244 24       		.uleb128 0x24
 992 0245 0B       		.uleb128 0xb
 993 0246 38010000 		.4byte	.LASF31
 994 024a 04       		.byte	0x4
 995 024b C102     		.2byte	0x2c1
 996 024d A2000000 		.4byte	0xa2
 997 0251 02       		.byte	0x2
 998 0252 23       		.byte	0x23
 999 0253 28       		.uleb128 0x28
 1000 0254 0B       		.uleb128 0xb
 1001 0255 7E020000 		.4byte	.LASF16
 1002 0259 04       		.byte	0x4
 1003 025a C202     		.2byte	0x2c2
 1004 025c A2000000 		.4byte	0xa2
 1005 0260 02       		.byte	0x2
 1006 0261 23       		.byte	0x23
 1007 0262 2C       		.uleb128 0x2c
 1008 0263 0B       		.uleb128 0xb
 1009 0264 84020000 		.4byte	.LASF32
 1010 0268 04       		.byte	0x4
 1011 0269 C302     		.2byte	0x2c3
 1012 026b A2000000 		.4byte	0xa2
 1013 026f 02       		.byte	0x2
 1014 0270 23       		.byte	0x23
 1015 0271 30       		.uleb128 0x30
 1016 0272 0A       		.uleb128 0xa
 1017 0273 43523200 		.ascii	"CR2\000"
 1018 0277 04       		.byte	0x4
 1019 0278 C402     		.2byte	0x2c4
 1020 027a A2000000 		.4byte	0xa2
 1021 027e 02       		.byte	0x2
 1022 027f 23       		.byte	0x23
 1023 0280 34       		.uleb128 0x34
 1024 0281 00       		.byte	0
ARM GAS  /tmp/ccVX56sy.s 			page 26


 1025 0282 0E       		.uleb128 0xe
 1026 0283 DA000000 		.4byte	.LASF33
 1027 0287 04       		.byte	0x4
 1028 0288 C502     		.2byte	0x2c5
 1029 028a A7010000 		.4byte	0x1a7
 1030 028e 0F       		.uleb128 0xf
 1031 028f 01       		.byte	0x1
 1032 0290 49020000 		.4byte	.LASF41
 1033 0294 01       		.byte	0x1
 1034 0295 39       		.byte	0x39
 1035 0296 01       		.byte	0x1
 1036 0297 00000000 		.4byte	.LFB20
 1037 029b 84000000 		.4byte	.LFE20
 1038 029f 00000000 		.4byte	.LLST0
 1039 02a3 01       		.byte	0x1
 1040 02a4 10       		.uleb128 0x10
 1041 02a5 01       		.byte	0x1
 1042 02a6 25010000 		.4byte	.LASF43
 1043 02aa 01       		.byte	0x1
 1044 02ab C3       		.byte	0xc3
 1045 02ac 01       		.byte	0x1
 1046 02ad 00000000 		.4byte	.LFB21
 1047 02b1 28000000 		.4byte	.LFE21
 1048 02b5 20000000 		.4byte	.LLST1
 1049 02b9 01       		.byte	0x1
 1050 02ba CD020000 		.4byte	0x2cd
 1051 02be 11       		.uleb128 0x11
 1052 02bf 40000000 		.4byte	.LASF38
 1053 02c3 01       		.byte	0x1
 1054 02c4 C5       		.byte	0xc5
 1055 02c5 90000000 		.4byte	0x90
 1056 02c9 02       		.byte	0x2
 1057 02ca 91       		.byte	0x91
 1058 02cb 7C       		.sleb128 -4
 1059 02cc 00       		.byte	0
 1060 02cd 12       		.uleb128 0x12
 1061 02ce 01       		.byte	0x1
 1062 02cf 53020000 		.4byte	.LASF34
 1063 02d3 01       		.byte	0x1
 1064 02d4 D3       		.byte	0xd3
 1065 02d5 01       		.byte	0x1
 1066 02d6 49000000 		.4byte	0x49
 1067 02da 00000000 		.4byte	.LFB22
 1068 02de 34000000 		.4byte	.LFE22
 1069 02e2 40000000 		.4byte	.LLST2
 1070 02e6 01       		.byte	0x1
 1071 02e7 FA020000 		.4byte	0x2fa
 1072 02eb 13       		.uleb128 0x13
 1073 02ec 1D020000 		.4byte	.LASF36
 1074 02f0 01       		.byte	0x1
 1075 02f1 D3       		.byte	0xd3
 1076 02f2 7E000000 		.4byte	0x7e
 1077 02f6 02       		.byte	0x2
 1078 02f7 91       		.byte	0x91
 1079 02f8 7C       		.sleb128 -4
 1080 02f9 00       		.byte	0
 1081 02fa 12       		.uleb128 0x12
ARM GAS  /tmp/ccVX56sy.s 			page 27


 1082 02fb 01       		.byte	0x1
 1083 02fc F2010000 		.4byte	.LASF35
 1084 0300 01       		.byte	0x1
 1085 0301 E2       		.byte	0xe2
 1086 0302 01       		.byte	0x1
 1087 0303 49000000 		.4byte	0x49
 1088 0307 00000000 		.4byte	.LFB23
 1089 030b 94000000 		.4byte	.LFE23
 1090 030f 60000000 		.4byte	.LLST3
 1091 0313 01       		.byte	0x1
 1092 0314 27030000 		.4byte	0x327
 1093 0318 13       		.uleb128 0x13
 1094 0319 1D020000 		.4byte	.LASF36
 1095 031d 01       		.byte	0x1
 1096 031e E2       		.byte	0xe2
 1097 031f 29000000 		.4byte	0x29
 1098 0323 02       		.byte	0x2
 1099 0324 91       		.byte	0x91
 1100 0325 7F       		.sleb128 -1
 1101 0326 00       		.byte	0
 1102 0327 14       		.uleb128 0x14
 1103 0328 01       		.byte	0x1
 1104 0329 D0010000 		.4byte	.LASF37
 1105 032d 01       		.byte	0x1
 1106 032e 0101     		.2byte	0x101
 1107 0330 01       		.byte	0x1
 1108 0331 7E000000 		.4byte	0x7e
 1109 0335 00000000 		.4byte	.LFB24
 1110 0339 5C000000 		.4byte	.LFE24
 1111 033d 80000000 		.4byte	.LLST4
 1112 0341 01       		.byte	0x1
 1113 0342 74030000 		.4byte	0x374
 1114 0346 15       		.uleb128 0x15
 1115 0347 40000000 		.4byte	.LASF38
 1116 034b 01       		.byte	0x1
 1117 034c 0301     		.2byte	0x103
 1118 034e 90000000 		.4byte	0x90
 1119 0352 02       		.byte	0x2
 1120 0353 91       		.byte	0x91
 1121 0354 7C       		.sleb128 -4
 1122 0355 15       		.uleb128 0x15
 1123 0356 09010000 		.4byte	.LASF39
 1124 035a 01       		.byte	0x1
 1125 035b 0301     		.2byte	0x103
 1126 035d 90000000 		.4byte	0x90
 1127 0361 02       		.byte	0x2
 1128 0362 91       		.byte	0x91
 1129 0363 78       		.sleb128 -8
 1130 0364 15       		.uleb128 0x15
 1131 0365 9D000000 		.4byte	.LASF40
 1132 0369 01       		.byte	0x1
 1133 036a 0301     		.2byte	0x103
 1134 036c 90000000 		.4byte	0x90
 1135 0370 02       		.byte	0x2
 1136 0371 91       		.byte	0x91
 1137 0372 74       		.sleb128 -12
 1138 0373 00       		.byte	0
ARM GAS  /tmp/ccVX56sy.s 			page 28


 1139 0374 16       		.uleb128 0x16
 1140 0375 01       		.byte	0x1
 1141 0376 40010000 		.4byte	.LASF42
 1142 037a 01       		.byte	0x1
 1143 037b 5C01     		.2byte	0x15c
 1144 037d 01       		.byte	0x1
 1145 037e 00000000 		.4byte	.LFB25
 1146 0382 60000000 		.4byte	.LFE25
 1147 0386 A0000000 		.4byte	.LLST5
 1148 038a 01       		.byte	0x1
 1149 038b 17       		.uleb128 0x17
 1150 038c 01       		.byte	0x1
 1151 038d 2E020000 		.4byte	.LASF44
 1152 0391 01       		.byte	0x1
 1153 0392 6E01     		.2byte	0x16e
 1154 0394 01       		.byte	0x1
 1155 0395 00000000 		.4byte	.LFB26
 1156 0399 4C000000 		.4byte	.LFE26
 1157 039d C0000000 		.4byte	.LLST6
 1158 03a1 01       		.byte	0x1
 1159 03a2 C3030000 		.4byte	0x3c3
 1160 03a6 18       		.uleb128 0x18
 1161 03a7 6900     		.ascii	"i\000"
 1162 03a9 01       		.byte	0x1
 1163 03aa 7001     		.2byte	0x170
 1164 03ac 29000000 		.4byte	0x29
 1165 03b0 02       		.byte	0x2
 1166 03b1 91       		.byte	0x91
 1167 03b2 77       		.sleb128 -9
 1168 03b3 15       		.uleb128 0x15
 1169 03b4 86000000 		.4byte	.LASF45
 1170 03b8 01       		.byte	0x1
 1171 03b9 7101     		.2byte	0x171
 1172 03bb 49000000 		.4byte	0x49
 1173 03bf 02       		.byte	0x2
 1174 03c0 91       		.byte	0x91
 1175 03c1 74       		.sleb128 -12
 1176 03c2 00       		.byte	0
 1177 03c3 14       		.uleb128 0x14
 1178 03c4 01       		.byte	0x1
 1179 03c5 E6000000 		.4byte	.LASF46
 1180 03c9 01       		.byte	0x1
 1181 03ca 7C01     		.2byte	0x17c
 1182 03cc 01       		.byte	0x1
 1183 03cd 49000000 		.4byte	0x49
 1184 03d1 00000000 		.4byte	.LFB27
 1185 03d5 6C000000 		.4byte	.LFE27
 1186 03d9 EC000000 		.4byte	.LLST7
 1187 03dd 01       		.byte	0x1
 1188 03de FD030000 		.4byte	0x3fd
 1189 03e2 18       		.uleb128 0x18
 1190 03e3 6900     		.ascii	"i\000"
 1191 03e5 01       		.byte	0x1
 1192 03e6 7E01     		.2byte	0x17e
 1193 03e8 29000000 		.4byte	0x29
 1194 03ec 02       		.byte	0x2
 1195 03ed 91       		.byte	0x91
ARM GAS  /tmp/ccVX56sy.s 			page 29


 1196 03ee 7F       		.sleb128 -1
 1197 03ef 18       		.uleb128 0x18
 1198 03f0 7400     		.ascii	"t\000"
 1199 03f2 01       		.byte	0x1
 1200 03f3 7F01     		.2byte	0x17f
 1201 03f5 7E000000 		.4byte	0x7e
 1202 03f9 02       		.byte	0x2
 1203 03fa 91       		.byte	0x91
 1204 03fb 78       		.sleb128 -8
 1205 03fc 00       		.byte	0
 1206 03fd 19       		.uleb128 0x19
 1207 03fe 00020000 		.4byte	.LASF47
 1208 0402 01       		.byte	0x1
 1209 0403 0F       		.byte	0xf
 1210 0404 0A040000 		.4byte	0x40a
 1211 0408 01       		.byte	0x1
 1212 0409 01       		.byte	0x1
 1213 040a 05       		.uleb128 0x5
 1214 040b 49000000 		.4byte	0x49
 1215 040f 0C       		.uleb128 0xc
 1216 0410 49000000 		.4byte	0x49
 1217 0414 1F040000 		.4byte	0x41f
 1218 0418 0D       		.uleb128 0xd
 1219 0419 9B000000 		.4byte	0x9b
 1220 041d 1F       		.byte	0x1f
 1221 041e 00       		.byte	0
 1222 041f 1A       		.uleb128 0x1a
 1223 0420 79000000 		.4byte	.LASF48
 1224 0424 01       		.byte	0x1
 1225 0425 25       		.byte	0x25
 1226 0426 0F040000 		.4byte	0x40f
 1227 042a 01       		.byte	0x1
 1228 042b 05       		.byte	0x5
 1229 042c 03       		.byte	0x3
 1230 042d 00000000 		.4byte	VoltagePhoto
 1231 0431 1A       		.uleb128 0x1a
 1232 0432 CE000000 		.4byte	.LASF49
 1233 0436 01       		.byte	0x1
 1234 0437 26       		.byte	0x26
 1235 0438 29000000 		.4byte	0x29
 1236 043c 01       		.byte	0x1
 1237 043d 05       		.byte	0x5
 1238 043e 03       		.byte	0x3
 1239 043f 00000000 		.4byte	photo_index
 1240 0443 1A       		.uleb128 0x1a
 1241 0444 8A020000 		.4byte	.LASF50
 1242 0448 01       		.byte	0x1
 1243 0449 27       		.byte	0x27
 1244 044a 49000000 		.4byte	0x49
 1245 044e 01       		.byte	0x1
 1246 044f 05       		.byte	0x5
 1247 0450 03       		.byte	0x3
 1248 0451 00000000 		.4byte	last_photo
 1249 0455 1A       		.uleb128 0x1a
 1250 0456 8C000000 		.4byte	.LASF51
 1251 045a 01       		.byte	0x1
 1252 045b 28       		.byte	0x28
ARM GAS  /tmp/ccVX56sy.s 			page 30


 1253 045c 29000000 		.4byte	0x29
 1254 0460 01       		.byte	0x1
 1255 0461 05       		.byte	0x5
 1256 0462 03       		.byte	0x3
 1257 0463 00000000 		.4byte	new_photo_sample
 1258 0467 00       		.byte	0
 1259              		.section	.debug_abbrev,"",%progbits
 1260              	.Ldebug_abbrev0:
 1261 0000 01       		.uleb128 0x1
 1262 0001 11       		.uleb128 0x11
 1263 0002 01       		.byte	0x1
 1264 0003 25       		.uleb128 0x25
 1265 0004 0E       		.uleb128 0xe
 1266 0005 13       		.uleb128 0x13
 1267 0006 0B       		.uleb128 0xb
 1268 0007 03       		.uleb128 0x3
 1269 0008 0E       		.uleb128 0xe
 1270 0009 1B       		.uleb128 0x1b
 1271 000a 0E       		.uleb128 0xe
 1272 000b 55       		.uleb128 0x55
 1273 000c 06       		.uleb128 0x6
 1274 000d 11       		.uleb128 0x11
 1275 000e 01       		.uleb128 0x1
 1276 000f 52       		.uleb128 0x52
 1277 0010 01       		.uleb128 0x1
 1278 0011 10       		.uleb128 0x10
 1279 0012 06       		.uleb128 0x6
 1280 0013 00       		.byte	0
 1281 0014 00       		.byte	0
 1282 0015 02       		.uleb128 0x2
 1283 0016 24       		.uleb128 0x24
 1284 0017 00       		.byte	0
 1285 0018 0B       		.uleb128 0xb
 1286 0019 0B       		.uleb128 0xb
 1287 001a 3E       		.uleb128 0x3e
 1288 001b 0B       		.uleb128 0xb
 1289 001c 03       		.uleb128 0x3
 1290 001d 0E       		.uleb128 0xe
 1291 001e 00       		.byte	0
 1292 001f 00       		.byte	0
 1293 0020 03       		.uleb128 0x3
 1294 0021 16       		.uleb128 0x16
 1295 0022 00       		.byte	0
 1296 0023 03       		.uleb128 0x3
 1297 0024 0E       		.uleb128 0xe
 1298 0025 3A       		.uleb128 0x3a
 1299 0026 0B       		.uleb128 0xb
 1300 0027 3B       		.uleb128 0x3b
 1301 0028 0B       		.uleb128 0xb
 1302 0029 49       		.uleb128 0x49
 1303 002a 13       		.uleb128 0x13
 1304 002b 00       		.byte	0
 1305 002c 00       		.byte	0
 1306 002d 04       		.uleb128 0x4
 1307 002e 24       		.uleb128 0x24
 1308 002f 00       		.byte	0
 1309 0030 0B       		.uleb128 0xb
ARM GAS  /tmp/ccVX56sy.s 			page 31


 1310 0031 0B       		.uleb128 0xb
 1311 0032 3E       		.uleb128 0x3e
 1312 0033 0B       		.uleb128 0xb
 1313 0034 03       		.uleb128 0x3
 1314 0035 08       		.uleb128 0x8
 1315 0036 00       		.byte	0
 1316 0037 00       		.byte	0
 1317 0038 05       		.uleb128 0x5
 1318 0039 35       		.uleb128 0x35
 1319 003a 00       		.byte	0
 1320 003b 49       		.uleb128 0x49
 1321 003c 13       		.uleb128 0x13
 1322 003d 00       		.byte	0
 1323 003e 00       		.byte	0
 1324 003f 06       		.uleb128 0x6
 1325 0040 04       		.uleb128 0x4
 1326 0041 01       		.byte	0x1
 1327 0042 0B       		.uleb128 0xb
 1328 0043 0B       		.uleb128 0xb
 1329 0044 49       		.uleb128 0x49
 1330 0045 13       		.uleb128 0x13
 1331 0046 3A       		.uleb128 0x3a
 1332 0047 0B       		.uleb128 0xb
 1333 0048 3B       		.uleb128 0x3b
 1334 0049 05       		.uleb128 0x5
 1335 004a 01       		.uleb128 0x1
 1336 004b 13       		.uleb128 0x13
 1337 004c 00       		.byte	0
 1338 004d 00       		.byte	0
 1339 004e 07       		.uleb128 0x7
 1340 004f 28       		.uleb128 0x28
 1341 0050 00       		.byte	0
 1342 0051 03       		.uleb128 0x3
 1343 0052 0E       		.uleb128 0xe
 1344 0053 1C       		.uleb128 0x1c
 1345 0054 0B       		.uleb128 0xb
 1346 0055 00       		.byte	0
 1347 0056 00       		.byte	0
 1348 0057 08       		.uleb128 0x8
 1349 0058 28       		.uleb128 0x28
 1350 0059 00       		.byte	0
 1351 005a 03       		.uleb128 0x3
 1352 005b 08       		.uleb128 0x8
 1353 005c 1C       		.uleb128 0x1c
 1354 005d 0B       		.uleb128 0xb
 1355 005e 00       		.byte	0
 1356 005f 00       		.byte	0
 1357 0060 09       		.uleb128 0x9
 1358 0061 13       		.uleb128 0x13
 1359 0062 01       		.byte	0x1
 1360 0063 0B       		.uleb128 0xb
 1361 0064 0B       		.uleb128 0xb
 1362 0065 3A       		.uleb128 0x3a
 1363 0066 0B       		.uleb128 0xb
 1364 0067 3B       		.uleb128 0x3b
 1365 0068 05       		.uleb128 0x5
 1366 0069 01       		.uleb128 0x1
ARM GAS  /tmp/ccVX56sy.s 			page 32


 1367 006a 13       		.uleb128 0x13
 1368 006b 00       		.byte	0
 1369 006c 00       		.byte	0
 1370 006d 0A       		.uleb128 0xa
 1371 006e 0D       		.uleb128 0xd
 1372 006f 00       		.byte	0
 1373 0070 03       		.uleb128 0x3
 1374 0071 08       		.uleb128 0x8
 1375 0072 3A       		.uleb128 0x3a
 1376 0073 0B       		.uleb128 0xb
 1377 0074 3B       		.uleb128 0x3b
 1378 0075 05       		.uleb128 0x5
 1379 0076 49       		.uleb128 0x49
 1380 0077 13       		.uleb128 0x13
 1381 0078 38       		.uleb128 0x38
 1382 0079 0A       		.uleb128 0xa
 1383 007a 00       		.byte	0
 1384 007b 00       		.byte	0
 1385 007c 0B       		.uleb128 0xb
 1386 007d 0D       		.uleb128 0xd
 1387 007e 00       		.byte	0
 1388 007f 03       		.uleb128 0x3
 1389 0080 0E       		.uleb128 0xe
 1390 0081 3A       		.uleb128 0x3a
 1391 0082 0B       		.uleb128 0xb
 1392 0083 3B       		.uleb128 0x3b
 1393 0084 05       		.uleb128 0x5
 1394 0085 49       		.uleb128 0x49
 1395 0086 13       		.uleb128 0x13
 1396 0087 38       		.uleb128 0x38
 1397 0088 0A       		.uleb128 0xa
 1398 0089 00       		.byte	0
 1399 008a 00       		.byte	0
 1400 008b 0C       		.uleb128 0xc
 1401 008c 01       		.uleb128 0x1
 1402 008d 01       		.byte	0x1
 1403 008e 49       		.uleb128 0x49
 1404 008f 13       		.uleb128 0x13
 1405 0090 01       		.uleb128 0x1
 1406 0091 13       		.uleb128 0x13
 1407 0092 00       		.byte	0
 1408 0093 00       		.byte	0
 1409 0094 0D       		.uleb128 0xd
 1410 0095 21       		.uleb128 0x21
 1411 0096 00       		.byte	0
 1412 0097 49       		.uleb128 0x49
 1413 0098 13       		.uleb128 0x13
 1414 0099 2F       		.uleb128 0x2f
 1415 009a 0B       		.uleb128 0xb
 1416 009b 00       		.byte	0
 1417 009c 00       		.byte	0
 1418 009d 0E       		.uleb128 0xe
 1419 009e 16       		.uleb128 0x16
 1420 009f 00       		.byte	0
 1421 00a0 03       		.uleb128 0x3
 1422 00a1 0E       		.uleb128 0xe
 1423 00a2 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccVX56sy.s 			page 33


 1424 00a3 0B       		.uleb128 0xb
 1425 00a4 3B       		.uleb128 0x3b
 1426 00a5 05       		.uleb128 0x5
 1427 00a6 49       		.uleb128 0x49
 1428 00a7 13       		.uleb128 0x13
 1429 00a8 00       		.byte	0
 1430 00a9 00       		.byte	0
 1431 00aa 0F       		.uleb128 0xf
 1432 00ab 2E       		.uleb128 0x2e
 1433 00ac 00       		.byte	0
 1434 00ad 3F       		.uleb128 0x3f
 1435 00ae 0C       		.uleb128 0xc
 1436 00af 03       		.uleb128 0x3
 1437 00b0 0E       		.uleb128 0xe
 1438 00b1 3A       		.uleb128 0x3a
 1439 00b2 0B       		.uleb128 0xb
 1440 00b3 3B       		.uleb128 0x3b
 1441 00b4 0B       		.uleb128 0xb
 1442 00b5 27       		.uleb128 0x27
 1443 00b6 0C       		.uleb128 0xc
 1444 00b7 11       		.uleb128 0x11
 1445 00b8 01       		.uleb128 0x1
 1446 00b9 12       		.uleb128 0x12
 1447 00ba 01       		.uleb128 0x1
 1448 00bb 40       		.uleb128 0x40
 1449 00bc 06       		.uleb128 0x6
 1450 00bd 9642     		.uleb128 0x2116
 1451 00bf 0C       		.uleb128 0xc
 1452 00c0 00       		.byte	0
 1453 00c1 00       		.byte	0
 1454 00c2 10       		.uleb128 0x10
 1455 00c3 2E       		.uleb128 0x2e
 1456 00c4 01       		.byte	0x1
 1457 00c5 3F       		.uleb128 0x3f
 1458 00c6 0C       		.uleb128 0xc
 1459 00c7 03       		.uleb128 0x3
 1460 00c8 0E       		.uleb128 0xe
 1461 00c9 3A       		.uleb128 0x3a
 1462 00ca 0B       		.uleb128 0xb
 1463 00cb 3B       		.uleb128 0x3b
 1464 00cc 0B       		.uleb128 0xb
 1465 00cd 27       		.uleb128 0x27
 1466 00ce 0C       		.uleb128 0xc
 1467 00cf 11       		.uleb128 0x11
 1468 00d0 01       		.uleb128 0x1
 1469 00d1 12       		.uleb128 0x12
 1470 00d2 01       		.uleb128 0x1
 1471 00d3 40       		.uleb128 0x40
 1472 00d4 06       		.uleb128 0x6
 1473 00d5 9742     		.uleb128 0x2117
 1474 00d7 0C       		.uleb128 0xc
 1475 00d8 01       		.uleb128 0x1
 1476 00d9 13       		.uleb128 0x13
 1477 00da 00       		.byte	0
 1478 00db 00       		.byte	0
 1479 00dc 11       		.uleb128 0x11
 1480 00dd 34       		.uleb128 0x34
ARM GAS  /tmp/ccVX56sy.s 			page 34


 1481 00de 00       		.byte	0
 1482 00df 03       		.uleb128 0x3
 1483 00e0 0E       		.uleb128 0xe
 1484 00e1 3A       		.uleb128 0x3a
 1485 00e2 0B       		.uleb128 0xb
 1486 00e3 3B       		.uleb128 0x3b
 1487 00e4 0B       		.uleb128 0xb
 1488 00e5 49       		.uleb128 0x49
 1489 00e6 13       		.uleb128 0x13
 1490 00e7 02       		.uleb128 0x2
 1491 00e8 0A       		.uleb128 0xa
 1492 00e9 00       		.byte	0
 1493 00ea 00       		.byte	0
 1494 00eb 12       		.uleb128 0x12
 1495 00ec 2E       		.uleb128 0x2e
 1496 00ed 01       		.byte	0x1
 1497 00ee 3F       		.uleb128 0x3f
 1498 00ef 0C       		.uleb128 0xc
 1499 00f0 03       		.uleb128 0x3
 1500 00f1 0E       		.uleb128 0xe
 1501 00f2 3A       		.uleb128 0x3a
 1502 00f3 0B       		.uleb128 0xb
 1503 00f4 3B       		.uleb128 0x3b
 1504 00f5 0B       		.uleb128 0xb
 1505 00f6 27       		.uleb128 0x27
 1506 00f7 0C       		.uleb128 0xc
 1507 00f8 49       		.uleb128 0x49
 1508 00f9 13       		.uleb128 0x13
 1509 00fa 11       		.uleb128 0x11
 1510 00fb 01       		.uleb128 0x1
 1511 00fc 12       		.uleb128 0x12
 1512 00fd 01       		.uleb128 0x1
 1513 00fe 40       		.uleb128 0x40
 1514 00ff 06       		.uleb128 0x6
 1515 0100 9742     		.uleb128 0x2117
 1516 0102 0C       		.uleb128 0xc
 1517 0103 01       		.uleb128 0x1
 1518 0104 13       		.uleb128 0x13
 1519 0105 00       		.byte	0
 1520 0106 00       		.byte	0
 1521 0107 13       		.uleb128 0x13
 1522 0108 05       		.uleb128 0x5
 1523 0109 00       		.byte	0
 1524 010a 03       		.uleb128 0x3
 1525 010b 0E       		.uleb128 0xe
 1526 010c 3A       		.uleb128 0x3a
 1527 010d 0B       		.uleb128 0xb
 1528 010e 3B       		.uleb128 0x3b
 1529 010f 0B       		.uleb128 0xb
 1530 0110 49       		.uleb128 0x49
 1531 0111 13       		.uleb128 0x13
 1532 0112 02       		.uleb128 0x2
 1533 0113 0A       		.uleb128 0xa
 1534 0114 00       		.byte	0
 1535 0115 00       		.byte	0
 1536 0116 14       		.uleb128 0x14
 1537 0117 2E       		.uleb128 0x2e
ARM GAS  /tmp/ccVX56sy.s 			page 35


 1538 0118 01       		.byte	0x1
 1539 0119 3F       		.uleb128 0x3f
 1540 011a 0C       		.uleb128 0xc
 1541 011b 03       		.uleb128 0x3
 1542 011c 0E       		.uleb128 0xe
 1543 011d 3A       		.uleb128 0x3a
 1544 011e 0B       		.uleb128 0xb
 1545 011f 3B       		.uleb128 0x3b
 1546 0120 05       		.uleb128 0x5
 1547 0121 27       		.uleb128 0x27
 1548 0122 0C       		.uleb128 0xc
 1549 0123 49       		.uleb128 0x49
 1550 0124 13       		.uleb128 0x13
 1551 0125 11       		.uleb128 0x11
 1552 0126 01       		.uleb128 0x1
 1553 0127 12       		.uleb128 0x12
 1554 0128 01       		.uleb128 0x1
 1555 0129 40       		.uleb128 0x40
 1556 012a 06       		.uleb128 0x6
 1557 012b 9742     		.uleb128 0x2117
 1558 012d 0C       		.uleb128 0xc
 1559 012e 01       		.uleb128 0x1
 1560 012f 13       		.uleb128 0x13
 1561 0130 00       		.byte	0
 1562 0131 00       		.byte	0
 1563 0132 15       		.uleb128 0x15
 1564 0133 34       		.uleb128 0x34
 1565 0134 00       		.byte	0
 1566 0135 03       		.uleb128 0x3
 1567 0136 0E       		.uleb128 0xe
 1568 0137 3A       		.uleb128 0x3a
 1569 0138 0B       		.uleb128 0xb
 1570 0139 3B       		.uleb128 0x3b
 1571 013a 05       		.uleb128 0x5
 1572 013b 49       		.uleb128 0x49
 1573 013c 13       		.uleb128 0x13
 1574 013d 02       		.uleb128 0x2
 1575 013e 0A       		.uleb128 0xa
 1576 013f 00       		.byte	0
 1577 0140 00       		.byte	0
 1578 0141 16       		.uleb128 0x16
 1579 0142 2E       		.uleb128 0x2e
 1580 0143 00       		.byte	0
 1581 0144 3F       		.uleb128 0x3f
 1582 0145 0C       		.uleb128 0xc
 1583 0146 03       		.uleb128 0x3
 1584 0147 0E       		.uleb128 0xe
 1585 0148 3A       		.uleb128 0x3a
 1586 0149 0B       		.uleb128 0xb
 1587 014a 3B       		.uleb128 0x3b
 1588 014b 05       		.uleb128 0x5
 1589 014c 27       		.uleb128 0x27
 1590 014d 0C       		.uleb128 0xc
 1591 014e 11       		.uleb128 0x11
 1592 014f 01       		.uleb128 0x1
 1593 0150 12       		.uleb128 0x12
 1594 0151 01       		.uleb128 0x1
ARM GAS  /tmp/ccVX56sy.s 			page 36


 1595 0152 40       		.uleb128 0x40
 1596 0153 06       		.uleb128 0x6
 1597 0154 9642     		.uleb128 0x2116
 1598 0156 0C       		.uleb128 0xc
 1599 0157 00       		.byte	0
 1600 0158 00       		.byte	0
 1601 0159 17       		.uleb128 0x17
 1602 015a 2E       		.uleb128 0x2e
 1603 015b 01       		.byte	0x1
 1604 015c 3F       		.uleb128 0x3f
 1605 015d 0C       		.uleb128 0xc
 1606 015e 03       		.uleb128 0x3
 1607 015f 0E       		.uleb128 0xe
 1608 0160 3A       		.uleb128 0x3a
 1609 0161 0B       		.uleb128 0xb
 1610 0162 3B       		.uleb128 0x3b
 1611 0163 05       		.uleb128 0x5
 1612 0164 27       		.uleb128 0x27
 1613 0165 0C       		.uleb128 0xc
 1614 0166 11       		.uleb128 0x11
 1615 0167 01       		.uleb128 0x1
 1616 0168 12       		.uleb128 0x12
 1617 0169 01       		.uleb128 0x1
 1618 016a 40       		.uleb128 0x40
 1619 016b 06       		.uleb128 0x6
 1620 016c 9642     		.uleb128 0x2116
 1621 016e 0C       		.uleb128 0xc
 1622 016f 01       		.uleb128 0x1
 1623 0170 13       		.uleb128 0x13
 1624 0171 00       		.byte	0
 1625 0172 00       		.byte	0
 1626 0173 18       		.uleb128 0x18
 1627 0174 34       		.uleb128 0x34
 1628 0175 00       		.byte	0
 1629 0176 03       		.uleb128 0x3
 1630 0177 08       		.uleb128 0x8
 1631 0178 3A       		.uleb128 0x3a
 1632 0179 0B       		.uleb128 0xb
 1633 017a 3B       		.uleb128 0x3b
 1634 017b 05       		.uleb128 0x5
 1635 017c 49       		.uleb128 0x49
 1636 017d 13       		.uleb128 0x13
 1637 017e 02       		.uleb128 0x2
 1638 017f 0A       		.uleb128 0xa
 1639 0180 00       		.byte	0
 1640 0181 00       		.byte	0
 1641 0182 19       		.uleb128 0x19
 1642 0183 34       		.uleb128 0x34
 1643 0184 00       		.byte	0
 1644 0185 03       		.uleb128 0x3
 1645 0186 0E       		.uleb128 0xe
 1646 0187 3A       		.uleb128 0x3a
 1647 0188 0B       		.uleb128 0xb
 1648 0189 3B       		.uleb128 0x3b
 1649 018a 0B       		.uleb128 0xb
 1650 018b 49       		.uleb128 0x49
 1651 018c 13       		.uleb128 0x13
ARM GAS  /tmp/ccVX56sy.s 			page 37


 1652 018d 3F       		.uleb128 0x3f
 1653 018e 0C       		.uleb128 0xc
 1654 018f 3C       		.uleb128 0x3c
 1655 0190 0C       		.uleb128 0xc
 1656 0191 00       		.byte	0
 1657 0192 00       		.byte	0
 1658 0193 1A       		.uleb128 0x1a
 1659 0194 34       		.uleb128 0x34
 1660 0195 00       		.byte	0
 1661 0196 03       		.uleb128 0x3
 1662 0197 0E       		.uleb128 0xe
 1663 0198 3A       		.uleb128 0x3a
 1664 0199 0B       		.uleb128 0xb
 1665 019a 3B       		.uleb128 0x3b
 1666 019b 0B       		.uleb128 0xb
 1667 019c 49       		.uleb128 0x49
 1668 019d 13       		.uleb128 0x13
 1669 019e 3F       		.uleb128 0x3f
 1670 019f 0C       		.uleb128 0xc
 1671 01a0 02       		.uleb128 0x2
 1672 01a1 0A       		.uleb128 0xa
 1673 01a2 00       		.byte	0
 1674 01a3 00       		.byte	0
 1675 01a4 00       		.byte	0
 1676              		.section	.debug_loc,"",%progbits
 1677              	.Ldebug_loc0:
 1678              	.LLST0:
 1679 0000 00000000 		.4byte	.LFB20
 1680 0004 02000000 		.4byte	.LCFI0
 1681 0008 0200     		.2byte	0x2
 1682 000a 7D       		.byte	0x7d
 1683 000b 00       		.sleb128 0
 1684 000c 02000000 		.4byte	.LCFI0
 1685 0010 84000000 		.4byte	.LFE20
 1686 0014 0200     		.2byte	0x2
 1687 0016 7D       		.byte	0x7d
 1688 0017 08       		.sleb128 8
 1689 0018 00000000 		.4byte	0
 1690 001c 00000000 		.4byte	0
 1691              	.LLST1:
 1692 0020 00000000 		.4byte	.LFB21
 1693 0024 02000000 		.4byte	.LCFI1
 1694 0028 0200     		.2byte	0x2
 1695 002a 7D       		.byte	0x7d
 1696 002b 00       		.sleb128 0
 1697 002c 02000000 		.4byte	.LCFI1
 1698 0030 28000000 		.4byte	.LFE21
 1699 0034 0200     		.2byte	0x2
 1700 0036 7D       		.byte	0x7d
 1701 0037 08       		.sleb128 8
 1702 0038 00000000 		.4byte	0
 1703 003c 00000000 		.4byte	0
 1704              	.LLST2:
 1705 0040 00000000 		.4byte	.LFB22
 1706 0044 02000000 		.4byte	.LCFI2
 1707 0048 0200     		.2byte	0x2
 1708 004a 7D       		.byte	0x7d
ARM GAS  /tmp/ccVX56sy.s 			page 38


 1709 004b 00       		.sleb128 0
 1710 004c 02000000 		.4byte	.LCFI2
 1711 0050 34000000 		.4byte	.LFE22
 1712 0054 0200     		.2byte	0x2
 1713 0056 7D       		.byte	0x7d
 1714 0057 08       		.sleb128 8
 1715 0058 00000000 		.4byte	0
 1716 005c 00000000 		.4byte	0
 1717              	.LLST3:
 1718 0060 00000000 		.4byte	.LFB23
 1719 0064 02000000 		.4byte	.LCFI3
 1720 0068 0200     		.2byte	0x2
 1721 006a 7D       		.byte	0x7d
 1722 006b 00       		.sleb128 0
 1723 006c 02000000 		.4byte	.LCFI3
 1724 0070 94000000 		.4byte	.LFE23
 1725 0074 0200     		.2byte	0x2
 1726 0076 7D       		.byte	0x7d
 1727 0077 08       		.sleb128 8
 1728 0078 00000000 		.4byte	0
 1729 007c 00000000 		.4byte	0
 1730              	.LLST4:
 1731 0080 00000000 		.4byte	.LFB24
 1732 0084 02000000 		.4byte	.LCFI4
 1733 0088 0200     		.2byte	0x2
 1734 008a 7D       		.byte	0x7d
 1735 008b 00       		.sleb128 0
 1736 008c 02000000 		.4byte	.LCFI4
 1737 0090 5C000000 		.4byte	.LFE24
 1738 0094 0200     		.2byte	0x2
 1739 0096 7D       		.byte	0x7d
 1740 0097 10       		.sleb128 16
 1741 0098 00000000 		.4byte	0
 1742 009c 00000000 		.4byte	0
 1743              	.LLST5:
 1744 00a0 00000000 		.4byte	.LFB25
 1745 00a4 02000000 		.4byte	.LCFI5
 1746 00a8 0200     		.2byte	0x2
 1747 00aa 7D       		.byte	0x7d
 1748 00ab 00       		.sleb128 0
 1749 00ac 02000000 		.4byte	.LCFI5
 1750 00b0 60000000 		.4byte	.LFE25
 1751 00b4 0200     		.2byte	0x2
 1752 00b6 7D       		.byte	0x7d
 1753 00b7 08       		.sleb128 8
 1754 00b8 00000000 		.4byte	0
 1755 00bc 00000000 		.4byte	0
 1756              	.LLST6:
 1757 00c0 00000000 		.4byte	.LFB26
 1758 00c4 02000000 		.4byte	.LCFI6
 1759 00c8 0200     		.2byte	0x2
 1760 00ca 7D       		.byte	0x7d
 1761 00cb 00       		.sleb128 0
 1762 00cc 02000000 		.4byte	.LCFI6
 1763 00d0 04000000 		.4byte	.LCFI7
 1764 00d4 0200     		.2byte	0x2
 1765 00d6 7D       		.byte	0x7d
ARM GAS  /tmp/ccVX56sy.s 			page 39


 1766 00d7 08       		.sleb128 8
 1767 00d8 04000000 		.4byte	.LCFI7
 1768 00dc 4C000000 		.4byte	.LFE26
 1769 00e0 0200     		.2byte	0x2
 1770 00e2 7D       		.byte	0x7d
 1771 00e3 10       		.sleb128 16
 1772 00e4 00000000 		.4byte	0
 1773 00e8 00000000 		.4byte	0
 1774              	.LLST7:
 1775 00ec 00000000 		.4byte	.LFB27
 1776 00f0 02000000 		.4byte	.LCFI8
 1777 00f4 0200     		.2byte	0x2
 1778 00f6 7D       		.byte	0x7d
 1779 00f7 00       		.sleb128 0
 1780 00f8 02000000 		.4byte	.LCFI8
 1781 00fc 6C000000 		.4byte	.LFE27
 1782 0100 0200     		.2byte	0x2
 1783 0102 7D       		.byte	0x7d
 1784 0103 08       		.sleb128 8
 1785 0104 00000000 		.4byte	0
 1786 0108 00000000 		.4byte	0
 1787              		.section	.debug_aranges,"",%progbits
 1788 0000 54000000 		.4byte	0x54
 1789 0004 0200     		.2byte	0x2
 1790 0006 00000000 		.4byte	.Ldebug_info0
 1791 000a 04       		.byte	0x4
 1792 000b 00       		.byte	0
 1793 000c 0000     		.2byte	0
 1794 000e 0000     		.2byte	0
 1795 0010 00000000 		.4byte	.LFB20
 1796 0014 84000000 		.4byte	.LFE20-.LFB20
 1797 0018 00000000 		.4byte	.LFB21
 1798 001c 28000000 		.4byte	.LFE21-.LFB21
 1799 0020 00000000 		.4byte	.LFB22
 1800 0024 34000000 		.4byte	.LFE22-.LFB22
 1801 0028 00000000 		.4byte	.LFB23
 1802 002c 94000000 		.4byte	.LFE23-.LFB23
 1803 0030 00000000 		.4byte	.LFB24
 1804 0034 5C000000 		.4byte	.LFE24-.LFB24
 1805 0038 00000000 		.4byte	.LFB25
 1806 003c 60000000 		.4byte	.LFE25-.LFB25
 1807 0040 00000000 		.4byte	.LFB26
 1808 0044 4C000000 		.4byte	.LFE26-.LFB26
 1809 0048 00000000 		.4byte	.LFB27
 1810 004c 6C000000 		.4byte	.LFE27-.LFB27
 1811 0050 00000000 		.4byte	0
 1812 0054 00000000 		.4byte	0
 1813              		.section	.debug_ranges,"",%progbits
 1814              	.Ldebug_ranges0:
 1815 0000 00000000 		.4byte	.LFB20
 1816 0004 84000000 		.4byte	.LFE20
 1817 0008 00000000 		.4byte	.LFB21
 1818 000c 28000000 		.4byte	.LFE21
 1819 0010 00000000 		.4byte	.LFB22
 1820 0014 34000000 		.4byte	.LFE22
 1821 0018 00000000 		.4byte	.LFB23
 1822 001c 94000000 		.4byte	.LFE23
ARM GAS  /tmp/ccVX56sy.s 			page 40


 1823 0020 00000000 		.4byte	.LFB24
 1824 0024 5C000000 		.4byte	.LFE24
 1825 0028 00000000 		.4byte	.LFB25
 1826 002c 60000000 		.4byte	.LFE25
 1827 0030 00000000 		.4byte	.LFB26
 1828 0034 4C000000 		.4byte	.LFE26
 1829 0038 00000000 		.4byte	.LFB27
 1830 003c 6C000000 		.4byte	.LFE27
 1831 0040 00000000 		.4byte	0
 1832 0044 00000000 		.4byte	0
 1833              		.section	.debug_line,"",%progbits
 1834              	.Ldebug_line0:
 1835 0000 06020000 		.section	.debug_str,"MS",%progbits,1
 1835      0200EF00 
 1835      00000201 
 1835      FB0E0D00 
 1835      01010101 
 1836              	.LASF9:
 1837 0000 6C6F6E67 		.ascii	"long long unsigned int\000"
 1837      206C6F6E 
 1837      6720756E 
 1837      7369676E 
 1837      65642069 
 1838              	.LASF17:
 1839 0017 534D5052 		.ascii	"SMPR\000"
 1839      00
 1840              	.LASF8:
 1841 001c 6C6F6E67 		.ascii	"long long int\000"
 1841      206C6F6E 
 1841      6720696E 
 1841      7400
 1842              	.LASF1:
 1843 002a 7369676E 		.ascii	"signed char\000"
 1843      65642063 
 1843      68617200 
 1844              	.LASF53:
 1845 0036 7372632F 		.ascii	"src/adc.c\000"
 1845      6164632E 
 1845      6300
 1846              	.LASF38:
 1847 0040 746D7072 		.ascii	"tmpreg\000"
 1847      656700
 1848              	.LASF4:
 1849 0047 6C6F6E67 		.ascii	"long int\000"
 1849      20696E74 
 1849      00
 1850              	.LASF25:
 1851 0050 41504232 		.ascii	"APB2RSTR\000"
 1851      52535452 
 1851      00
 1852              	.LASF11:
 1853 0059 75696E74 		.ascii	"uint16_t\000"
 1853      31365F74 
 1853      00
 1854              	.LASF23:
 1855 0062 4144435F 		.ascii	"ADC_TypeDef\000"
 1855      54797065 
ARM GAS  /tmp/ccVX56sy.s 			page 41


 1855      44656600 
 1856              	.LASF6:
 1857 006e 5F5F7569 		.ascii	"__uint32_t\000"
 1857      6E743332 
 1857      5F7400
 1858              	.LASF48:
 1859 0079 566F6C74 		.ascii	"VoltagePhoto\000"
 1859      61676550 
 1859      686F746F 
 1859      00
 1860              	.LASF45:
 1861 0086 64756D6D 		.ascii	"dummy\000"
 1861      7900
 1862              	.LASF51:
 1863 008c 6E65775F 		.ascii	"new_photo_sample\000"
 1863      70686F74 
 1863      6F5F7361 
 1863      6D706C65 
 1863      00
 1864              	.LASF40:
 1865 009d 63616C69 		.ascii	"calibrationstatus\000"
 1865      62726174 
 1865      696F6E73 
 1865      74617475 
 1865      7300
 1866              	.LASF10:
 1867 00af 756E7369 		.ascii	"unsigned int\000"
 1867      676E6564 
 1867      20696E74 
 1867      00
 1868              	.LASF7:
 1869 00bc 6C6F6E67 		.ascii	"long unsigned int\000"
 1869      20756E73 
 1869      69676E65 
 1869      6420696E 
 1869      7400
 1870              	.LASF49:
 1871 00ce 70686F74 		.ascii	"photo_index\000"
 1871      6F5F696E 
 1871      64657800 
 1872              	.LASF33:
 1873 00da 5243435F 		.ascii	"RCC_TypeDef\000"
 1873      54797065 
 1873      44656600 
 1874              	.LASF46:
 1875 00e6 47657450 		.ascii	"GetPhoto\000"
 1875      686F746F 
 1875      00
 1876              	.LASF3:
 1877 00ef 73686F72 		.ascii	"short unsigned int\000"
 1877      7420756E 
 1877      7369676E 
 1877      65642069 
 1877      6E7400
 1878              	.LASF21:
 1879 0102 43485345 		.ascii	"CHSELR\000"
 1879      4C5200
ARM GAS  /tmp/ccVX56sy.s 			page 42


 1880              	.LASF39:
 1881 0109 63616C69 		.ascii	"calibrationcounter\000"
 1881      62726174 
 1881      696F6E63 
 1881      6F756E74 
 1881      657200
 1882              	.LASF13:
 1883 011c 73697A65 		.ascii	"sizetype\000"
 1883      74797065 
 1883      00
 1884              	.LASF43:
 1885 0125 53657441 		.ascii	"SetADC1_SampleTime\000"
 1885      4443315F 
 1885      53616D70 
 1885      6C655469 
 1885      6D6500
 1886              	.LASF31:
 1887 0138 41484252 		.ascii	"AHBRSTR\000"
 1887      53545200 
 1888              	.LASF42:
 1889 0140 55706461 		.ascii	"UpdatePhotoTransistor\000"
 1889      74655068 
 1889      6F746F54 
 1889      72616E73 
 1889      6973746F 
 1890              	.LASF26:
 1891 0156 41504231 		.ascii	"APB1RSTR\000"
 1891      52535452 
 1891      00
 1892              	.LASF54:
 1893 015f 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 1893      652F6D65 
 1893      642F446F 
 1893      63756D65 
 1893      6E74732F 
 1894 0192 6100     		.ascii	"a\000"
 1895              	.LASF18:
 1896 0194 52455345 		.ascii	"RESERVED1\000"
 1896      52564544 
 1896      3100
 1897              	.LASF19:
 1898 019e 52455345 		.ascii	"RESERVED2\000"
 1898      52564544 
 1898      3200
 1899              	.LASF20:
 1900 01a8 52455345 		.ascii	"RESERVED3\000"
 1900      52564544 
 1900      3300
 1901              	.LASF22:
 1902 01b2 52455345 		.ascii	"RESERVED4\000"
 1902      52564544 
 1902      3400
 1903              	.LASF14:
 1904 01bc 52455345 		.ascii	"RESET\000"
 1904      5400
 1905              	.LASF0:
 1906 01c2 756E7369 		.ascii	"unsigned char\000"
ARM GAS  /tmp/ccVX56sy.s 			page 43


 1906      676E6564 
 1906      20636861 
 1906      7200
 1907              	.LASF37:
 1908 01d0 41444347 		.ascii	"ADCGetCalibrationFactor\000"
 1908      65744361 
 1908      6C696272 
 1908      6174696F 
 1908      6E466163 
 1909              	.LASF2:
 1910 01e8 73686F72 		.ascii	"short int\000"
 1910      7420696E 
 1910      7400
 1911              	.LASF35:
 1912 01f2 52656164 		.ascii	"ReadADC1Check\000"
 1912      41444331 
 1912      43686563 
 1912      6B00
 1913              	.LASF47:
 1914 0200 74745F74 		.ascii	"tt_take_photo_sample\000"
 1914      616B655F 
 1914      70686F74 
 1914      6F5F7361 
 1914      6D706C65 
 1915              	.LASF28:
 1916 0215 41504232 		.ascii	"APB2ENR\000"
 1916      454E5200 
 1917              	.LASF36:
 1918 021d 6368616E 		.ascii	"channel\000"
 1918      6E656C00 
 1919              	.LASF12:
 1920 0225 75696E74 		.ascii	"uint32_t\000"
 1920      33325F74 
 1920      00
 1921              	.LASF44:
 1922 022e 46696C6C 		.ascii	"FillPhotoBuffer\000"
 1922      50686F74 
 1922      6F427566 
 1922      66657200 
 1923              	.LASF5:
 1924 023e 5F5F7569 		.ascii	"__uint16_t\000"
 1924      6E743136 
 1924      5F7400
 1925              	.LASF41:
 1926 0249 41646343 		.ascii	"AdcConfig\000"
 1926      6F6E6669 
 1926      6700
 1927              	.LASF34:
 1928 0253 52656164 		.ascii	"ReadADC1_SameSampleTime\000"
 1928      41444331 
 1928      5F53616D 
 1928      6553616D 
 1928      706C6554 
 1929              	.LASF29:
 1930 026b 41504231 		.ascii	"APB1ENR\000"
 1930      454E5200 
 1931              	.LASF30:
ARM GAS  /tmp/ccVX56sy.s 			page 44


 1932 0273 42444352 		.ascii	"BDCR\000"
 1932      00
 1933              	.LASF15:
 1934 0278 43464752 		.ascii	"CFGR1\000"
 1934      3100
 1935              	.LASF16:
 1936 027e 43464752 		.ascii	"CFGR2\000"
 1936      3200
 1937              	.LASF32:
 1938 0284 43464752 		.ascii	"CFGR3\000"
 1938      3300
 1939              	.LASF50:
 1940 028a 6C617374 		.ascii	"last_photo\000"
 1940      5F70686F 
 1940      746F00
 1941              	.LASF24:
 1942 0295 43464752 		.ascii	"CFGR\000"
 1942      00
 1943              	.LASF52:
 1944 029a 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 1944      43313120 
 1944      352E322E 
 1944      31203230 
 1944      31353132 
 1945 02cd 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 1945      20726576 
 1945      6973696F 
 1945      6E203233 
 1945      31383438 
 1946 0300 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 1946      662D3220 
 1946      2D4F3020 
 1946      2D666F6D 
 1946      69742D66 
 1947 0333 66756E63 		.ascii	"function-sections\000"
 1947      74696F6E 
 1947      2D736563 
 1947      74696F6E 
 1947      7300
 1948              	.LASF27:
 1949 0345 41484245 		.ascii	"AHBENR\000"
 1949      4E5200
 1950              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccVX56sy.s 			page 45


DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
                            *COM*:00000040 VoltagePhoto
     /tmp/ccVX56sy.s:59     .bss.photo_index:00000000 photo_index
     /tmp/ccVX56sy.s:60     .bss.photo_index:00000000 $d
     /tmp/ccVX56sy.s:66     .bss.last_photo:00000000 last_photo
     /tmp/ccVX56sy.s:63     .bss.last_photo:00000000 $d
     /tmp/ccVX56sy.s:72     .bss.new_photo_sample:00000000 new_photo_sample
     /tmp/ccVX56sy.s:73     .bss.new_photo_sample:00000000 $d
     /tmp/ccVX56sy.s:75     .text.AdcConfig:00000000 $t
     /tmp/ccVX56sy.s:80     .text.AdcConfig:00000000 AdcConfig
     /tmp/ccVX56sy.s:389    .text.ADCGetCalibrationFactor:00000000 ADCGetCalibrationFactor
     /tmp/ccVX56sy.s:167    .text.AdcConfig:00000078 $d
     /tmp/ccVX56sy.s:174    .text.SetADC1_SampleTime:00000000 $t
     /tmp/ccVX56sy.s:179    .text.SetADC1_SampleTime:00000000 SetADC1_SampleTime
     /tmp/ccVX56sy.s:211    .text.SetADC1_SampleTime:00000024 $d
     /tmp/ccVX56sy.s:216    .text.ReadADC1_SameSampleTime:00000000 $t
     /tmp/ccVX56sy.s:221    .text.ReadADC1_SameSampleTime:00000000 ReadADC1_SameSampleTime
     /tmp/ccVX56sy.s:261    .text.ReadADC1_SameSampleTime:00000030 $d
     /tmp/ccVX56sy.s:266    .text.ReadADC1Check:00000000 $t
     /tmp/ccVX56sy.s:271    .text.ReadADC1Check:00000000 ReadADC1Check
     /tmp/ccVX56sy.s:378    .text.ReadADC1Check:0000008c $d
     /tmp/ccVX56sy.s:384    .text.ADCGetCalibrationFactor:00000000 $t
     /tmp/ccVX56sy.s:458    .text.ADCGetCalibrationFactor:00000058 $d
     /tmp/ccVX56sy.s:463    .text.UpdatePhotoTransistor:00000000 $t
     /tmp/ccVX56sy.s:468    .text.UpdatePhotoTransistor:00000000 UpdatePhotoTransistor
     /tmp/ccVX56sy.s:530    .text.UpdatePhotoTransistor:00000050 $d
     /tmp/ccVX56sy.s:538    .text.FillPhotoBuffer:00000000 $t
     /tmp/ccVX56sy.s:543    .text.FillPhotoBuffer:00000000 FillPhotoBuffer
     /tmp/ccVX56sy.s:600    .text.FillPhotoBuffer:00000048 $d
     /tmp/ccVX56sy.s:605    .text.GetPhoto:00000000 $t
     /tmp/ccVX56sy.s:610    .text.GetPhoto:00000000 GetPhoto
     /tmp/ccVX56sy.s:680    .text.GetPhoto:00000060 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
tt_take_photo_sample
