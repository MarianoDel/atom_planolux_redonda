ARM GAS  /tmp/ccyHaRvc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"adc.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/adc.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/adc.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccyHaRvc.s 			page 2


  58              		.type	NVIC_EnableIRQ, %function
  59              	NVIC_EnableIRQ:
  60              	.LFB11:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccyHaRvc.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccyHaRvc.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccyHaRvc.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccyHaRvc.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccyHaRvc.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccyHaRvc.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccyHaRvc.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccyHaRvc.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccyHaRvc.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccyHaRvc.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccyHaRvc.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccyHaRvc.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccyHaRvc.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccyHaRvc.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 812 0
  63              		.cfi_startproc
  64 0000 82B0     		sub	sp, sp, #8	@,,
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 8
  67 0002 0200     		movs	r2, r0	@ tmp116, IRQn
  68 0004 6B46     		mov	r3, sp	@ tmp122,
  69 0006 0733     		adds	r3, r3, #7	@ tmp117,
  70 0008 1A70     		strb	r2, [r3]	@ tmp118, IRQn
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  71              		.loc 1 813 0
  72 000a 074B     		ldr	r3, .L2	@ D.5091,
  73 000c 6A46     		mov	r2, sp	@ tmp123,
  74 000e 0732     		adds	r2, r2, #7	@ tmp119,
  75 0010 1278     		ldrb	r2, [r2]	@ D.5092, IRQn
  76 0012 1100     		movs	r1, r2	@ D.5093, D.5092
  77 0014 1F22     		movs	r2, #31	@ tmp120,
  78 0016 0A40     		ands	r2, r1	@ D.5093, D.5093
  79 0018 0121     		movs	r1, #1	@ tmp121,
  80 001a 9140     		lsls	r1, r1, r2	@ D.5094, D.5094, D.5093
  81 001c 0A00     		movs	r2, r1	@ D.5094, D.5094
  82 001e 1A60     		str	r2, [r3]	@ D.5093, _1->ISER
 814:./cmsis_core/core_cm0.h **** }
  83              		.loc 1 814 0
  84 0020 C046     		nop
  85 0022 02B0     		add	sp, sp, #8	@,,
  86              		@ sp needed	@
  87 0024 7047     		bx	lr
  88              	.L3:
  89 0026 C046     		.align	2
  90              	.L2:
  91 0028 00E100E0 		.word	-536813312
  92              		.cfi_endproc
  93              	.LFE11:
  94              		.size	NVIC_EnableIRQ, .-NVIC_EnableIRQ
  95              		.section	.text.NVIC_SetPriority,"ax",%progbits
  96              		.align	2
  97              		.code	16
  98              		.thumb_func
ARM GAS  /tmp/ccyHaRvc.s 			page 17


  99              		.type	NVIC_SetPriority, %function
 100              	NVIC_SetPriority:
 101              	.LFB16:
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccyHaRvc.s 			page 18


 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
 102              		.loc 1 893 0
 103              		.cfi_startproc
 104 0000 30B5     		push	{r4, r5, lr}	@
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 12
 107              		.cfi_offset 4, -12
 108              		.cfi_offset 5, -8
 109              		.cfi_offset 14, -4
 110 0002 83B0     		sub	sp, sp, #12	@,,
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 24
 113 0004 0200     		movs	r2, r0	@ tmp162, IRQn
 114 0006 0091     		str	r1, [sp]	@ priority, priority
 115 0008 6B46     		mov	r3, sp	@ tmp199,
 116 000a 0733     		adds	r3, r3, #7	@ tmp163,
 117 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 118              		.loc 1 894 0
 119 000e 6B46     		mov	r3, sp	@ tmp200,
 120 0010 0733     		adds	r3, r3, #7	@ tmp165,
 121 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
 122 0014 7F2B     		cmp	r3, #127	@ tmp166,
 123 0016 36D9     		bls	.L5	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 124              		.loc 1 895 0
 125 0018 324C     		ldr	r4, .L8	@ D.5095,
 126 001a 6B46     		mov	r3, sp	@ tmp201,
 127 001c 0733     		adds	r3, r3, #7	@ tmp167,
 128 001e 1B78     		ldrb	r3, [r3]	@ D.5096, IRQn
 129 0020 1A00     		movs	r2, r3	@ D.5097, D.5096
 130 0022 0F23     		movs	r3, #15	@ tmp168,
 131 0024 1340     		ands	r3, r2	@ D.5097, D.5097
ARM GAS  /tmp/ccyHaRvc.s 			page 19


 132 0026 083B     		subs	r3, r3, #8	@ D.5097,
 133 0028 9908     		lsrs	r1, r3, #2	@ D.5097, D.5097,
 134 002a 2E4A     		ldr	r2, .L8	@ D.5095,
 135 002c 6B46     		mov	r3, sp	@ tmp202,
 136 002e 0733     		adds	r3, r3, #7	@ tmp169,
 137 0030 1B78     		ldrb	r3, [r3]	@ D.5096, IRQn
 138 0032 1800     		movs	r0, r3	@ D.5097, D.5096
 139 0034 0F23     		movs	r3, #15	@ tmp170,
 140 0036 0340     		ands	r3, r0	@ D.5097, D.5097
 141 0038 083B     		subs	r3, r3, #8	@ D.5097,
 142 003a 9B08     		lsrs	r3, r3, #2	@ D.5097, D.5097,
 143 003c 0633     		adds	r3, r3, #6	@ tmp171,
 144 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 145 0040 D318     		adds	r3, r2, r3	@ tmp173, D.5095, tmp172
 146 0042 0433     		adds	r3, r3, #4	@ tmp174,
 147 0044 1B68     		ldr	r3, [r3]	@ D.5097, _9->SHP
 148 0046 6A46     		mov	r2, sp	@ tmp203,
 149 0048 0732     		adds	r2, r2, #7	@ tmp175,
 150 004a 1278     		ldrb	r2, [r2]	@ D.5096, IRQn
 151 004c 1000     		movs	r0, r2	@ D.5097, D.5096
 152 004e 0322     		movs	r2, #3	@ tmp176,
 153 0050 0240     		ands	r2, r0	@ D.5097, D.5097
 154 0052 D200     		lsls	r2, r2, #3	@ D.5097, D.5097,
 155 0054 FF20     		movs	r0, #255	@ tmp177,
 156 0056 9040     		lsls	r0, r0, r2	@ D.5098, D.5098, D.5097
 157 0058 0200     		movs	r2, r0	@ D.5098, D.5098
 158 005a D243     		mvns	r2, r2	@ D.5098, D.5098
 159 005c 1A40     		ands	r2, r3	@ D.5097, D.5097
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 160              		.loc 1 896 0
 161 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 162 0060 9B01     		lsls	r3, r3, #6	@ D.5097, tmp178,
 163 0062 FF20     		movs	r0, #255	@ tmp179,
 164 0064 1840     		ands	r0, r3	@ D.5097, D.5097
 165 0066 6B46     		mov	r3, sp	@ tmp205,
 166 0068 0733     		adds	r3, r3, #7	@ tmp180,
 167 006a 1B78     		ldrb	r3, [r3]	@ D.5096, IRQn
 168 006c 1D00     		movs	r5, r3	@ D.5097, D.5096
 169 006e 0323     		movs	r3, #3	@ tmp181,
 170 0070 2B40     		ands	r3, r5	@ D.5097, D.5097
 171 0072 DB00     		lsls	r3, r3, #3	@ D.5097, D.5097,
 172 0074 9840     		lsls	r0, r0, r3	@ D.5097, D.5097, D.5097
 173 0076 0300     		movs	r3, r0	@ D.5097, D.5097
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 174              		.loc 1 895 0
 175 0078 1A43     		orrs	r2, r3	@ D.5097, D.5097
 176 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.5097,
 177 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 178 007e E318     		adds	r3, r4, r3	@ tmp184, D.5095, tmp183
 179 0080 0433     		adds	r3, r3, #4	@ tmp185,
 180 0082 1A60     		str	r2, [r3]	@ D.5097, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 181              		.loc 1 900 0
 182 0084 2BE0     		b	.L7	@
ARM GAS  /tmp/ccyHaRvc.s 			page 20


 183              	.L5:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 184              		.loc 1 898 0
 185 0086 184C     		ldr	r4, .L8+4	@ D.5099,
 186 0088 6B46     		mov	r3, sp	@ tmp207,
 187 008a 0733     		adds	r3, r3, #7	@ tmp186,
 188 008c 1B78     		ldrb	r3, [r3]	@ D.5097, IRQn
 189 008e 5BB2     		sxtb	r3, r3	@ D.5097, D.5097
 190 0090 9B08     		lsrs	r3, r3, #2	@ D.5097, D.5097,
 191 0092 1549     		ldr	r1, .L8+4	@ D.5099,
 192 0094 6A46     		mov	r2, sp	@ tmp208,
 193 0096 0732     		adds	r2, r2, #7	@ tmp187,
 194 0098 1278     		ldrb	r2, [r2]	@ D.5097, IRQn
 195 009a 52B2     		sxtb	r2, r2	@ D.5097, D.5097
 196 009c 9208     		lsrs	r2, r2, #2	@ D.5097, D.5097,
 197 009e C032     		adds	r2, r2, #192	@ tmp188,
 198 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 199 00a2 5258     		ldr	r2, [r2, r1]	@ D.5097, _38->IP
 200 00a4 6946     		mov	r1, sp	@ tmp209,
 201 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 202 00a8 0978     		ldrb	r1, [r1]	@ D.5096, IRQn
 203 00aa 0800     		movs	r0, r1	@ D.5097, D.5096
 204 00ac 0321     		movs	r1, #3	@ tmp191,
 205 00ae 0140     		ands	r1, r0	@ D.5097, D.5097
 206 00b0 C900     		lsls	r1, r1, #3	@ D.5097, D.5097,
 207 00b2 FF20     		movs	r0, #255	@ tmp192,
 208 00b4 8840     		lsls	r0, r0, r1	@ D.5098, D.5098, D.5097
 209 00b6 0100     		movs	r1, r0	@ D.5098, D.5098
 210 00b8 C943     		mvns	r1, r1	@ D.5098, D.5098
 211 00ba 1140     		ands	r1, r2	@ D.5097, D.5097
 899:./cmsis_core/core_cm0.h **** }
 212              		.loc 1 899 0
 213 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 214 00be 9201     		lsls	r2, r2, #6	@ D.5097, tmp193,
 215 00c0 FF20     		movs	r0, #255	@ tmp194,
 216 00c2 1040     		ands	r0, r2	@ D.5097, D.5097
 217 00c4 6A46     		mov	r2, sp	@ tmp211,
 218 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 219 00c8 1278     		ldrb	r2, [r2]	@ D.5096, IRQn
 220 00ca 1500     		movs	r5, r2	@ D.5097, D.5096
 221 00cc 0322     		movs	r2, #3	@ tmp196,
 222 00ce 2A40     		ands	r2, r5	@ D.5097, D.5097
 223 00d0 D200     		lsls	r2, r2, #3	@ D.5097, D.5097,
 224 00d2 9040     		lsls	r0, r0, r2	@ D.5097, D.5097, D.5097
 225 00d4 0200     		movs	r2, r0	@ D.5097, D.5097
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 226              		.loc 1 898 0
 227 00d6 0A43     		orrs	r2, r1	@ D.5097, D.5097
 228 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 229 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 230 00dc 1A51     		str	r2, [r3, r4]	@ D.5097, _35->IP
 231              	.L7:
 232              		.loc 1 900 0
 233 00de C046     		nop
 234 00e0 03B0     		add	sp, sp, #12	@,,
 235              		@ sp needed	@
 236 00e2 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccyHaRvc.s 			page 21


 237              	.L9:
 238              		.align	2
 239              	.L8:
 240 00e4 00ED00E0 		.word	-536810240
 241 00e8 00E100E0 		.word	-536813312
 242              		.cfi_endproc
 243              	.LFE16:
 244              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 245              		.comm	p_channel,4,4
 246              		.comm	VoltagePhoto,64,4
 247              		.global	photo_index
 248              		.section	.bss.photo_index,"aw",%nobits
 249              		.type	photo_index, %object
 250              		.size	photo_index, 1
 251              	photo_index:
 252 0000 00       		.space	1
 253              		.global	last_photo
 254              		.section	.bss.last_photo,"aw",%nobits
 255              		.align	1
 256              		.type	last_photo, %object
 257              		.size	last_photo, 2
 258              	last_photo:
 259 0000 0000     		.space	2
 260              		.global	new_photo_sample
 261              		.section	.bss.new_photo_sample,"aw",%nobits
 262              		.type	new_photo_sample, %object
 263              		.size	new_photo_sample, 1
 264              	new_photo_sample:
 265 0000 00       		.space	1
 266              		.section	.text.AdcConfig,"ax",%progbits
 267              		.align	2
 268              		.global	AdcConfig
 269              		.code	16
 270              		.thumb_func
 271              		.type	AdcConfig, %function
 272              	AdcConfig:
 273              	.LFB20:
 274              		.file 2 "src/adc.c"
   1:src/adc.c     **** /*
   2:src/adc.c     ****  * adc.c
   3:src/adc.c     ****  *
   4:src/adc.c     ****  *  Created on: 04/05/2015
   5:src/adc.c     ****  *      Author: Mariano
   6:src/adc.c     ****  */
   7:src/adc.c     **** #include "adc.h"
   8:src/adc.c     **** #include "stm32f0xx.h"
   9:src/adc.c     **** #include "hard.h"
  10:src/adc.c     **** // #include "dsp.h"
  11:src/adc.c     **** 
  12:src/adc.c     **** 
  13:src/adc.c     **** //--- VARIABLES EXTERNAS ---//
  14:src/adc.c     **** extern volatile unsigned short adc_ch [];
  15:src/adc.c     **** extern volatile unsigned short tt_take_photo_sample;
  16:src/adc.c     **** 
  17:src/adc.c     **** #ifdef ADC_WITH_INT
  18:src/adc.c     **** extern volatile unsigned char seq_ready;
  19:src/adc.c     **** #endif
ARM GAS  /tmp/ccyHaRvc.s 			page 22


  20:src/adc.c     **** 
  21:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
  22:src/adc.c     **** extern volatile unsigned short tt_take_temp_sample;
  23:src/adc.c     **** #endif
  24:src/adc.c     **** 
  25:src/adc.c     **** //--- VARIABLES GLOBALES ---//
  26:src/adc.c     **** #ifdef ADC_WITH_INT
  27:src/adc.c     **** volatile unsigned short * p_channel;
  28:src/adc.c     **** #endif
  29:src/adc.c     **** 
  30:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
  31:src/adc.c     **** // ------- del sensor de Temperatura -------
  32:src/adc.c     **** unsigned short board_temp [SIZEOF_BOARD_TEMP];
  33:src/adc.c     **** unsigned short last_temp = 0;
  34:src/adc.c     **** unsigned char board_temp_index = 0;
  35:src/adc.c     **** unsigned char new_temp_sample = 0;
  36:src/adc.c     **** #endif
  37:src/adc.c     **** 
  38:src/adc.c     **** // ------- del PhotoTransistor -------
  39:src/adc.c     **** #define SIZEOF_PHOTO_TRANS		32
  40:src/adc.c     **** #define DIVISOR_PHOTO			5
  41:src/adc.c     **** unsigned short VoltagePhoto [SIZEOF_PHOTO_TRANS];
  42:src/adc.c     **** unsigned char photo_index = 0;
  43:src/adc.c     **** unsigned short last_photo = 0;
  44:src/adc.c     **** unsigned char new_photo_sample = 0;
  45:src/adc.c     **** 
  46:src/adc.c     **** 
  47:src/adc.c     **** 
  48:src/adc.c     **** //Single conversion mode (CONT=0)
  49:src/adc.c     **** //In Single conversion mode, the ADC performs a single sequence of conversions,
  50:src/adc.c     **** //converting all the channels once.
  51:src/adc.c     **** 
  52:src/adc.c     **** //Continuous conversion mode (CONT=1)
  53:src/adc.c     **** //In continuous conversion mode, when a software or hardware trigger event occurs,
  54:src/adc.c     **** //the ADC performs a sequence of conversions, converting all the channels once and then
  55:src/adc.c     **** //automatically re-starts and continuously performs the same sequence of conversions
  56:src/adc.c     **** 
  57:src/adc.c     **** //Discontinuous mode (DISCEN)
  58:src/adc.c     **** //In this mode (DISCEN=1), a hardware or software trigger event is required to start
  59:src/adc.c     **** //each conversion defined in the sequence. Only with (CONT=0)
  60:src/adc.c     **** 
  61:src/adc.c     **** void AdcConfig (void)
  62:src/adc.c     **** {
 275              		.loc 2 62 0
 276              		.cfi_startproc
 277 0000 10B5     		push	{r4, lr}	@
 278              	.LCFI3:
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 4, -8
 281              		.cfi_offset 14, -4
  63:src/adc.c     **** 	if (!RCC_ADC_CLK)
 282              		.loc 2 63 0
 283 0002 2A4B     		ldr	r3, .L12	@ D.5100,
 284 0004 9A69     		ldr	r2, [r3, #24]	@ D.5101, _2->APB2ENR
 285 0006 8023     		movs	r3, #128	@ tmp166,
 286 0008 9B00     		lsls	r3, r3, #2	@ tmp145, tmp166,
 287 000a 1340     		ands	r3, r2	@ D.5101, D.5101
ARM GAS  /tmp/ccyHaRvc.s 			page 23


 288 000c 06D1     		bne	.L11	@,
  64:src/adc.c     **** 		RCC_ADC_CLK_ON;
 289              		.loc 2 64 0
 290 000e 274B     		ldr	r3, .L12	@ D.5100,
 291 0010 264A     		ldr	r2, .L12	@ D.5100,
 292 0012 9269     		ldr	r2, [r2, #24]	@ D.5101, _7->APB2ENR
 293 0014 8021     		movs	r1, #128	@ tmp165,
 294 0016 8900     		lsls	r1, r1, #2	@ tmp146, tmp165,
 295 0018 0A43     		orrs	r2, r1	@ D.5101, tmp146
 296 001a 9A61     		str	r2, [r3, #24]	@ D.5101, _6->APB2ENR
 297              	.L11:
  65:src/adc.c     **** 
  66:src/adc.c     **** 	// preseteo los registros a default, la mayoria necesita tener ADC apagado
  67:src/adc.c     **** 	ADC1->CR = 0x00000000;
 298              		.loc 2 67 0
 299 001c 244B     		ldr	r3, .L12+4	@ D.5102,
 300 001e 0022     		movs	r2, #0	@ tmp147,
 301 0020 9A60     		str	r2, [r3, #8]	@ tmp147, _11->CR
  68:src/adc.c     **** 	ADC1->IER = 0x00000000;
 302              		.loc 2 68 0
 303 0022 234B     		ldr	r3, .L12+4	@ D.5102,
 304 0024 0022     		movs	r2, #0	@ tmp148,
 305 0026 5A60     		str	r2, [r3, #4]	@ tmp148, _13->IER
  69:src/adc.c     **** 	ADC1->CFGR1 = 0x00000000;
 306              		.loc 2 69 0
 307 0028 214B     		ldr	r3, .L12+4	@ D.5102,
 308 002a 0022     		movs	r2, #0	@ tmp149,
 309 002c DA60     		str	r2, [r3, #12]	@ tmp149, _15->CFGR1
  70:src/adc.c     **** 	ADC1->CFGR2 = 0x00000000;
 310              		.loc 2 70 0
 311 002e 204B     		ldr	r3, .L12+4	@ D.5102,
 312 0030 0022     		movs	r2, #0	@ tmp150,
 313 0032 1A61     		str	r2, [r3, #16]	@ tmp150, _17->CFGR2
  71:src/adc.c     **** 	ADC1->SMPR = 0x00000000;
 314              		.loc 2 71 0
 315 0034 1E4B     		ldr	r3, .L12+4	@ D.5102,
 316 0036 0022     		movs	r2, #0	@ tmp151,
 317 0038 5A61     		str	r2, [r3, #20]	@ tmp151, _19->SMPR
  72:src/adc.c     **** 	ADC1->TR = 0x0FFF0000;
 318              		.loc 2 72 0
 319 003a 1D4B     		ldr	r3, .L12+4	@ D.5102,
 320 003c 1D4A     		ldr	r2, .L12+8	@ tmp152,
 321 003e 1A62     		str	r2, [r3, #32]	@ tmp152, _21->TR
  73:src/adc.c     **** 	ADC1->CHSELR = 0x00000000;
 322              		.loc 2 73 0
 323 0040 1B4B     		ldr	r3, .L12+4	@ D.5102,
 324 0042 0022     		movs	r2, #0	@ tmp153,
 325 0044 9A62     		str	r2, [r3, #40]	@ tmp153, _23->CHSELR
  74:src/adc.c     **** 
  75:src/adc.c     **** 	//set clock
  76:src/adc.c     **** 	ADC1->CFGR2 = ADC_ClockMode_SynClkDiv4;
 326              		.loc 2 76 0
 327 0046 1A4B     		ldr	r3, .L12+4	@ D.5102,
 328 0048 8022     		movs	r2, #128	@ tmp162,
 329 004a 1206     		lsls	r2, r2, #24	@ tmp154, tmp162,
 330 004c 1A61     		str	r2, [r3, #16]	@ tmp154, _25->CFGR2
  77:src/adc.c     **** 
ARM GAS  /tmp/ccyHaRvc.s 			page 24


  78:src/adc.c     **** 	//set resolution, trigger & Continuos or Discontinuous
  79:src/adc.c     **** 	ADC1->CFGR1 |= ADC_Resolution_12b | ADC_ExternalTrigConvEdge_Rising | ADC_ExternalTrigConv_T3_TRGO
 331              		.loc 2 79 0
 332 004e 184B     		ldr	r3, .L12+4	@ D.5102,
 333 0050 174A     		ldr	r2, .L12+4	@ D.5102,
 334 0052 D268     		ldr	r2, [r2, #12]	@ D.5101, _28->CFGR1
 335 0054 9821     		movs	r1, #152	@ tmp163,
 336 0056 C900     		lsls	r1, r1, #3	@ tmp155, tmp163,
 337 0058 0A43     		orrs	r2, r1	@ D.5101, tmp155
 338 005a DA60     		str	r2, [r3, #12]	@ D.5101, _27->CFGR1
  80:src/adc.c     **** 	//ADC1->CFGR1 |= ADC_Resolution_12b | ADC_ExternalTrigConvEdge_Rising | ADC_ExternalTrigConv_T1_TR
  81:src/adc.c     **** 	//ADC1->CFGR1 |= ADC_Resolution_12b | ADC_CFGR1_DISCEN;
  82:src/adc.c     **** 	// ADC1->CFGR1 |= ADC_Resolution_12b;
  83:src/adc.c     **** 
  84:src/adc.c     **** 	//DMA Config
  85:src/adc.c     **** 	//ADC1->CFGR1 |= ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG;
  86:src/adc.c     **** 
  87:src/adc.c     **** 	//set sampling time
  88:src/adc.c     **** 	ADC1->SMPR |= ADC_SampleTime_41_5Cycles;		//17.39 son SP 420
 339              		.loc 2 88 0
 340 005c 144B     		ldr	r3, .L12+4	@ D.5102,
 341 005e 144A     		ldr	r2, .L12+4	@ D.5102,
 342 0060 5269     		ldr	r2, [r2, #20]	@ D.5101, _33->SMPR
 343 0062 0421     		movs	r1, #4	@ tmp156,
 344 0064 0A43     		orrs	r2, r1	@ D.5101, tmp156
 345 0066 5A61     		str	r2, [r3, #20]	@ D.5101, _32->SMPR
  89:src/adc.c     **** 	// ADC1->SMPR |= ADC_SampleTime_28_5Cycles;		//17.39 son SP 420
  90:src/adc.c     **** 	//ADC1->SMPR |= ADC_SampleTime_7_5Cycles;		//17.36 de salida son SP 420 pero a veces pega
  91:src/adc.c     **** 													//las dos int (usar DMA?) y pierde el valor intermedio
  92:src/adc.c     **** 	//ADC1->SMPR |= ADC_SampleTime_1_5Cycles;			//20.7 de salida son SP 420 (regula mal)
  93:src/adc.c     **** 
  94:src/adc.c     **** #ifdef ADC_WITH_INT
  95:src/adc.c     **** 	//set channel selection
  96:src/adc.c     **** 	ADC1->CHSELR |= ADC_Channel_0 | ADC_Channel_1 | ADC_Channel_8;
 346              		.loc 2 96 0
 347 0068 114B     		ldr	r3, .L12+4	@ D.5102,
 348 006a 114A     		ldr	r2, .L12+4	@ D.5102,
 349 006c 926A     		ldr	r2, [r2, #40]	@ D.5101, _38->CHSELR
 350 006e 0421     		movs	r1, #4	@ tmp164,
 351 0070 FF31     		adds	r1, r1, #255	@ tmp157,
 352 0072 0A43     		orrs	r2, r1	@ D.5101, tmp157
 353 0074 9A62     		str	r2, [r3, #40]	@ D.5101, _37->CHSELR
  97:src/adc.c     **** 
  98:src/adc.c     **** 	//set interrupts
  99:src/adc.c     **** 	ADC1->IER |= ADC_IT_EOC;
 354              		.loc 2 99 0
 355 0076 0E4B     		ldr	r3, .L12+4	@ D.5102,
 356 0078 0D4A     		ldr	r2, .L12+4	@ D.5102,
 357 007a 5268     		ldr	r2, [r2, #4]	@ D.5101, _43->IER
 358 007c 0421     		movs	r1, #4	@ tmp158,
 359 007e 0A43     		orrs	r2, r1	@ D.5101, tmp158
 360 0080 5A60     		str	r2, [r3, #4]	@ D.5101, _42->IER
 100:src/adc.c     **** 
 101:src/adc.c     **** 	//set pointer
 102:src/adc.c     **** 	p_channel = &adc_ch[0];
 361              		.loc 2 102 0
 362 0082 0D4B     		ldr	r3, .L12+12	@ tmp159,
ARM GAS  /tmp/ccyHaRvc.s 			page 25


 363 0084 0D4A     		ldr	r2, .L12+16	@ tmp160,
 364 0086 1A60     		str	r2, [r3]	@ tmp160, p_channel
 103:src/adc.c     **** 
 104:src/adc.c     **** 	NVIC_EnableIRQ(ADC1_COMP_IRQn);
 365              		.loc 2 104 0
 366 0088 0C20     		movs	r0, #12	@,
 367 008a FFF7FEFF 		bl	NVIC_EnableIRQ	@
 105:src/adc.c     **** 	NVIC_SetPriority(ADC1_COMP_IRQn, 3);
 368              		.loc 2 105 0
 369 008e 0321     		movs	r1, #3	@,
 370 0090 0C20     		movs	r0, #12	@,
 371 0092 FFF7FEFF 		bl	NVIC_SetPriority	@
 106:src/adc.c     **** #endif
 107:src/adc.c     **** 
 108:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
 109:src/adc.c     **** 	ADC->CCR |= ADC_CCR_TSEN;
 110:src/adc.c     **** #endif
 111:src/adc.c     **** 
 112:src/adc.c     **** 	//calibrar ADC
 113:src/adc.c     **** 	ADCGetCalibrationFactor();
 372              		.loc 2 113 0
 373 0096 FFF7FEFF 		bl	ADCGetCalibrationFactor	@
 114:src/adc.c     **** 
 115:src/adc.c     **** 	// Enable ADC1
 116:src/adc.c     **** 	ADC1->CR |= ADC_CR_ADEN;
 374              		.loc 2 116 0
 375 009a 054B     		ldr	r3, .L12+4	@ D.5102,
 376 009c 044A     		ldr	r2, .L12+4	@ D.5102,
 377 009e 9268     		ldr	r2, [r2, #8]	@ D.5101, _52->CR
 378 00a0 0121     		movs	r1, #1	@ tmp161,
 379 00a2 0A43     		orrs	r2, r1	@ D.5101, tmp161
 380 00a4 9A60     		str	r2, [r3, #8]	@ D.5101, _51->CR
 117:src/adc.c     **** }
 381              		.loc 2 117 0
 382 00a6 C046     		nop
 383              		@ sp needed	@
 384 00a8 10BD     		pop	{r4, pc}
 385              	.L13:
 386 00aa C046     		.align	2
 387              	.L12:
 388 00ac 00100240 		.word	1073876992
 389 00b0 00240140 		.word	1073816576
 390 00b4 0000FF0F 		.word	268369920
 391 00b8 00000000 		.word	p_channel
 392 00bc 00000000 		.word	adc_ch
 393              		.cfi_endproc
 394              	.LFE20:
 395              		.size	AdcConfig, .-AdcConfig
 396              		.section	.text.ADC1_COMP_IRQHandler,"ax",%progbits
 397              		.align	2
 398              		.global	ADC1_COMP_IRQHandler
 399              		.code	16
 400              		.thumb_func
 401              		.type	ADC1_COMP_IRQHandler, %function
 402              	ADC1_COMP_IRQHandler:
 403              	.LFB21:
 118:src/adc.c     **** 
ARM GAS  /tmp/ccyHaRvc.s 			page 26


 119:src/adc.c     **** #ifdef ADC_WITH_INT
 120:src/adc.c     **** void ADC1_COMP_IRQHandler (void)
 121:src/adc.c     **** {
 404              		.loc 2 121 0
 405              		.cfi_startproc
 122:src/adc.c     **** 	if (ADC1->ISR & ADC_IT_EOC)
 406              		.loc 2 122 0
 407 0000 184B     		ldr	r3, .L19	@ D.5103,
 408 0002 1B68     		ldr	r3, [r3]	@ D.5104, _3->ISR
 409 0004 0422     		movs	r2, #4	@ tmp131,
 410 0006 1340     		ands	r3, r2	@ D.5104, tmp131
 411 0008 2AD0     		beq	.L18	@,
 123:src/adc.c     **** 	{
 124:src/adc.c     **** 		if (ADC1->ISR & ADC_IT_EOSEQ)	//seguro que es channel8 en posicion 3
 412              		.loc 2 124 0
 413 000a 164B     		ldr	r3, .L19	@ D.5103,
 414 000c 1B68     		ldr	r3, [r3]	@ D.5104, _7->ISR
 415 000e 0822     		movs	r2, #8	@ tmp132,
 416 0010 1340     		ands	r3, r2	@ D.5104, tmp132
 417 0012 0FD0     		beq	.L16	@,
 125:src/adc.c     **** 		{
 126:src/adc.c     **** 			p_channel = &adc_ch[2];
 418              		.loc 2 126 0
 419 0014 144B     		ldr	r3, .L19+4	@ tmp133,
 420 0016 154A     		ldr	r2, .L19+8	@ tmp134,
 421 0018 1A60     		str	r2, [r3]	@ tmp134, p_channel
 127:src/adc.c     **** 			*p_channel = ADC1->DR;
 422              		.loc 2 127 0
 423 001a 134B     		ldr	r3, .L19+4	@ tmp135,
 424 001c 1A68     		ldr	r2, [r3]	@ D.5105, p_channel
 425 001e 114B     		ldr	r3, .L19	@ D.5103,
 426 0020 1B6C     		ldr	r3, [r3, #64]	@ D.5104, _12->DR
 427 0022 9BB2     		uxth	r3, r3	@ D.5106, D.5104
 428 0024 1380     		strh	r3, [r2]	@ tmp136, *_11
 128:src/adc.c     **** 			p_channel = &adc_ch[0];
 429              		.loc 2 128 0
 430 0026 104B     		ldr	r3, .L19+4	@ tmp137,
 431 0028 114A     		ldr	r2, .L19+12	@ tmp138,
 432 002a 1A60     		str	r2, [r3]	@ tmp138, p_channel
 129:src/adc.c     **** 			seq_ready = 1;
 433              		.loc 2 129 0
 434 002c 114B     		ldr	r3, .L19+16	@ tmp139,
 435 002e 0122     		movs	r2, #1	@ tmp140,
 436 0030 1A70     		strb	r2, [r3]	@ tmp141, seq_ready
 437 0032 0FE0     		b	.L17	@
 438              	.L16:
 130:src/adc.c     **** 		}
 131:src/adc.c     **** 		else
 132:src/adc.c     **** 		{
 133:src/adc.c     **** 			*p_channel = ADC1->DR;		//
 439              		.loc 2 133 0
 440 0034 0C4B     		ldr	r3, .L19+4	@ tmp142,
 441 0036 1A68     		ldr	r2, [r3]	@ D.5105, p_channel
 442 0038 0A4B     		ldr	r3, .L19	@ D.5103,
 443 003a 1B6C     		ldr	r3, [r3, #64]	@ D.5104, _19->DR
 444 003c 9BB2     		uxth	r3, r3	@ D.5106, D.5104
 445 003e 1380     		strh	r3, [r2]	@ tmp143, *_18
ARM GAS  /tmp/ccyHaRvc.s 			page 27


 134:src/adc.c     **** 			if (p_channel < &adc_ch[2])
 446              		.loc 2 134 0
 447 0040 094B     		ldr	r3, .L19+4	@ tmp144,
 448 0042 1A68     		ldr	r2, [r3]	@ D.5105, p_channel
 449 0044 094B     		ldr	r3, .L19+8	@ tmp145,
 450 0046 9A42     		cmp	r2, r3	@ D.5105, tmp145
 451 0048 04D2     		bcs	.L17	@,
 135:src/adc.c     **** 				p_channel++;
 452              		.loc 2 135 0
 453 004a 074B     		ldr	r3, .L19+4	@ tmp146,
 454 004c 1B68     		ldr	r3, [r3]	@ D.5105, p_channel
 455 004e 9A1C     		adds	r2, r3, #2	@ D.5105, D.5105,
 456 0050 054B     		ldr	r3, .L19+4	@ tmp147,
 457 0052 1A60     		str	r2, [r3]	@ D.5105, p_channel
 458              	.L17:
 136:src/adc.c     **** 		}
 137:src/adc.c     **** 
 138:src/adc.c     **** 		//clear pending
 139:src/adc.c     **** 		ADC1->ISR |= ADC_IT_EOC | ADC_IT_EOSEQ;
 459              		.loc 2 139 0
 460 0054 034B     		ldr	r3, .L19	@ D.5103,
 461 0056 034A     		ldr	r2, .L19	@ D.5103,
 462 0058 1268     		ldr	r2, [r2]	@ D.5104, _28->ISR
 463 005a 0C21     		movs	r1, #12	@ tmp148,
 464 005c 0A43     		orrs	r2, r1	@ D.5104, tmp148
 465 005e 1A60     		str	r2, [r3]	@ D.5104, _27->ISR
 466              	.L18:
 140:src/adc.c     **** 	}
 141:src/adc.c     **** }
 467              		.loc 2 141 0
 468 0060 C046     		nop
 469              		@ sp needed	@
 470 0062 7047     		bx	lr
 471              	.L20:
 472              		.align	2
 473              	.L19:
 474 0064 00240140 		.word	1073816576
 475 0068 00000000 		.word	p_channel
 476 006c 04000000 		.word	adc_ch+4
 477 0070 00000000 		.word	adc_ch
 478 0074 00000000 		.word	seq_ready
 479              		.cfi_endproc
 480              	.LFE21:
 481              		.size	ADC1_COMP_IRQHandler, .-ADC1_COMP_IRQHandler
 482              		.section	.text.SetADC1_SampleTime,"ax",%progbits
 483              		.align	2
 484              		.global	SetADC1_SampleTime
 485              		.code	16
 486              		.thumb_func
 487              		.type	SetADC1_SampleTime, %function
 488              	SetADC1_SampleTime:
 489              	.LFB22:
 142:src/adc.c     **** #endif
 143:src/adc.c     **** 
 144:src/adc.c     **** 
 145:src/adc.c     **** //Setea el sample time en el ADC
 146:src/adc.c     **** void SetADC1_SampleTime (void)
ARM GAS  /tmp/ccyHaRvc.s 			page 28


 147:src/adc.c     **** {
 490              		.loc 2 147 0
 491              		.cfi_startproc
 492 0000 82B0     		sub	sp, sp, #8	@,,
 493              	.LCFI4:
 494              		.cfi_def_cfa_offset 8
 148:src/adc.c     **** 	uint32_t tmpreg = 0;
 495              		.loc 2 148 0
 496 0002 0023     		movs	r3, #0	@ tmp111,
 497 0004 0193     		str	r3, [sp, #4]	@ tmp111, tmpreg
 149:src/adc.c     **** 
 150:src/adc.c     **** 	/* Clear the Sampling time Selection bits */
 151:src/adc.c     **** 	tmpreg &= ~ADC_SMPR1_SMPR;
 498              		.loc 2 151 0
 499 0006 019B     		ldr	r3, [sp, #4]	@ tmp113, tmpreg
 500 0008 0722     		movs	r2, #7	@ tmp114,
 501 000a 9343     		bics	r3, r2	@ tmp112, tmp114
 502 000c 0193     		str	r3, [sp, #4]	@ tmp112, tmpreg
 152:src/adc.c     **** 
 153:src/adc.c     **** 	/* Set the ADC Sampling Time register */
 154:src/adc.c     **** 	tmpreg |= (uint32_t)ADC_SampleTime_239_5Cycles;
 503              		.loc 2 154 0
 504 000e 019B     		ldr	r3, [sp, #4]	@ tmp116, tmpreg
 505 0010 0722     		movs	r2, #7	@ tmp117,
 506 0012 1343     		orrs	r3, r2	@ tmp115, tmp117
 507 0014 0193     		str	r3, [sp, #4]	@ tmp115, tmpreg
 155:src/adc.c     **** 
 156:src/adc.c     **** 	/* Configure the ADC Sample time register */
 157:src/adc.c     **** 	ADC1->SMPR = tmpreg ;
 508              		.loc 2 157 0
 509 0016 034B     		ldr	r3, .L22	@ D.5107,
 510 0018 019A     		ldr	r2, [sp, #4]	@ tmp118, tmpreg
 511 001a 5A61     		str	r2, [r3, #20]	@ tmp118, _4->SMPR
 158:src/adc.c     **** }
 512              		.loc 2 158 0
 513 001c C046     		nop
 514 001e 02B0     		add	sp, sp, #8	@,,
 515              		@ sp needed	@
 516 0020 7047     		bx	lr
 517              	.L23:
 518 0022 C046     		.align	2
 519              	.L22:
 520 0024 00240140 		.word	1073816576
 521              		.cfi_endproc
 522              	.LFE22:
 523              		.size	SetADC1_SampleTime, .-SetADC1_SampleTime
 524              		.section	.text.ReadADC1_SameSampleTime,"ax",%progbits
 525              		.align	2
 526              		.global	ReadADC1_SameSampleTime
 527              		.code	16
 528              		.thumb_func
 529              		.type	ReadADC1_SameSampleTime, %function
 530              	ReadADC1_SameSampleTime:
 531              	.LFB23:
 159:src/adc.c     **** 
 160:src/adc.c     **** 
 161:src/adc.c     **** //lee el ADC sin cambiar el sample time anterior
ARM GAS  /tmp/ccyHaRvc.s 			page 29


 162:src/adc.c     **** unsigned short ReadADC1_SameSampleTime (unsigned int channel)
 163:src/adc.c     **** {
 532              		.loc 2 163 0
 533              		.cfi_startproc
 534 0000 82B0     		sub	sp, sp, #8	@,,
 535              	.LCFI5:
 536              		.cfi_def_cfa_offset 8
 537 0002 0190     		str	r0, [sp, #4]	@ channel, channel
 164:src/adc.c     **** 	// Configure the ADC Channel
 165:src/adc.c     **** 	ADC1->CHSELR = channel;
 538              		.loc 2 165 0
 539 0004 0A4B     		ldr	r3, .L27	@ D.5108,
 540 0006 019A     		ldr	r2, [sp, #4]	@ tmp122, channel
 541 0008 9A62     		str	r2, [r3, #40]	@ tmp122, _1->CHSELR
 166:src/adc.c     **** 
 167:src/adc.c     **** 	// Start the conversion
 168:src/adc.c     **** 	ADC1->CR |= (uint32_t)ADC_CR_ADSTART;
 542              		.loc 2 168 0
 543 000a 094B     		ldr	r3, .L27	@ D.5108,
 544 000c 084A     		ldr	r2, .L27	@ D.5108,
 545 000e 9268     		ldr	r2, [r2, #8]	@ D.5109, _6->CR
 546 0010 0421     		movs	r1, #4	@ tmp123,
 547 0012 0A43     		orrs	r2, r1	@ D.5109, tmp123
 548 0014 9A60     		str	r2, [r3, #8]	@ D.5109, _5->CR
 169:src/adc.c     **** 
 170:src/adc.c     **** 	// Wait until conversion completion
 171:src/adc.c     **** 	while((ADC1->ISR & ADC_ISR_EOC) == 0);
 549              		.loc 2 171 0
 550 0016 C046     		nop
 551              	.L25:
 552              		.loc 2 171 0 is_stmt 0 discriminator 1
 553 0018 054B     		ldr	r3, .L27	@ D.5108,
 554 001a 1B68     		ldr	r3, [r3]	@ D.5109, _10->ISR
 555 001c 0422     		movs	r2, #4	@ tmp124,
 556 001e 1340     		ands	r3, r2	@ D.5109, tmp124
 557 0020 FAD0     		beq	.L25	@,
 172:src/adc.c     **** 
 173:src/adc.c     **** 	// Get the conversion value
 174:src/adc.c     **** 	return (uint16_t) ADC1->DR;
 558              		.loc 2 174 0 is_stmt 1
 559 0022 034B     		ldr	r3, .L27	@ D.5108,
 560 0024 1B6C     		ldr	r3, [r3, #64]	@ D.5109, _13->DR
 561 0026 9BB2     		uxth	r3, r3	@ D.5110, D.5109
 175:src/adc.c     **** }
 562              		.loc 2 175 0
 563 0028 1800     		movs	r0, r3	@, <retval>
 564 002a 02B0     		add	sp, sp, #8	@,,
 565              		@ sp needed	@
 566 002c 7047     		bx	lr
 567              	.L28:
 568 002e C046     		.align	2
 569              	.L27:
 570 0030 00240140 		.word	1073816576
 571              		.cfi_endproc
 572              	.LFE23:
 573              		.size	ReadADC1_SameSampleTime, .-ReadADC1_SameSampleTime
 574              		.section	.text.ReadADC1Check,"ax",%progbits
ARM GAS  /tmp/ccyHaRvc.s 			page 30


 575              		.align	2
 576              		.global	ReadADC1Check
 577              		.code	16
 578              		.thumb_func
 579              		.type	ReadADC1Check, %function
 580              	ReadADC1Check:
 581              	.LFB24:
 176:src/adc.c     **** 
 177:src/adc.c     **** unsigned short ReadADC1Check (unsigned char channel)
 178:src/adc.c     **** {
 582              		.loc 2 178 0
 583              		.cfi_startproc
 584 0000 82B0     		sub	sp, sp, #8	@,,
 585              	.LCFI6:
 586              		.cfi_def_cfa_offset 8
 587 0002 0200     		movs	r2, r0	@ tmp137, channel
 588 0004 6B46     		mov	r3, sp	@ tmp153,
 589 0006 0733     		adds	r3, r3, #7	@ tmp138,
 590 0008 1A70     		strb	r2, [r3]	@ tmp139, channel
 179:src/adc.c     **** 	if (ADC1->CR & 0x01)			//reviso ADEN
 591              		.loc 2 179 0
 592 000a 204B     		ldr	r3, .L41	@ D.5112,
 593 000c 9B68     		ldr	r3, [r3, #8]	@ D.5113, _3->CR
 594 000e 0122     		movs	r2, #1	@ tmp140,
 595 0010 1340     		ands	r3, r2	@ D.5113, tmp140
 596 0012 01D0     		beq	.L39	@,
 180:src/adc.c     **** 		return 0xFFFF;
 597              		.loc 2 180 0
 598 0014 1E4B     		ldr	r3, .L41+4	@ D.5111,
 599 0016 35E0     		b	.L31	@
 600              	.L39:
 181:src/adc.c     **** 
 182:src/adc.c     **** 	//espero que este listo para convertir
 183:src/adc.c     **** 	while ((ADC1->ISR & 0x01) == 0);	//espero ARDY = 1
 601              		.loc 2 183 0
 602 0018 C046     		nop
 603              	.L32:
 604              		.loc 2 183 0 is_stmt 0 discriminator 1
 605 001a 1C4B     		ldr	r3, .L41	@ D.5112,
 606 001c 1B68     		ldr	r3, [r3]	@ D.5113, _8->ISR
 607 001e 0122     		movs	r2, #1	@ tmp141,
 608 0020 1340     		ands	r3, r2	@ D.5113, tmp141
 609 0022 FAD0     		beq	.L32	@,
 184:src/adc.c     **** 
 185:src/adc.c     **** 	if ((ADC1->CFGR1 & 0x00010000) == 0)			//reviso DISCONTINUOS = 1
 610              		.loc 2 185 0 is_stmt 1
 611 0024 194B     		ldr	r3, .L41	@ D.5112,
 612 0026 DA68     		ldr	r2, [r3, #12]	@ D.5113, _11->CFGR1
 613 0028 8023     		movs	r3, #128	@ tmp152,
 614 002a 5B02     		lsls	r3, r3, #9	@ tmp142, tmp152,
 615 002c 1340     		ands	r3, r2	@ D.5113, D.5113
 616 002e 01D1     		bne	.L33	@,
 186:src/adc.c     **** 		return 0xFFFF;
 617              		.loc 2 186 0
 618 0030 174B     		ldr	r3, .L41+4	@ D.5111,
 619 0032 27E0     		b	.L31	@
 620              	.L33:
ARM GAS  /tmp/ccyHaRvc.s 			page 31


 187:src/adc.c     **** 
 188:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00002000)					//reviso CONT = 0
 621              		.loc 2 188 0
 622 0034 154B     		ldr	r3, .L41	@ D.5112,
 623 0036 DA68     		ldr	r2, [r3, #12]	@ D.5113, _15->CFGR1
 624 0038 8023     		movs	r3, #128	@ tmp151,
 625 003a 9B01     		lsls	r3, r3, #6	@ tmp143, tmp151,
 626 003c 1340     		ands	r3, r2	@ D.5113, D.5113
 627 003e 01D0     		beq	.L34	@,
 189:src/adc.c     **** 		return 0xFFFF;
 628              		.loc 2 189 0
 629 0040 134B     		ldr	r3, .L41+4	@ D.5111,
 630 0042 1FE0     		b	.L31	@
 631              	.L34:
 190:src/adc.c     **** 
 191:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00000C00)					//reviso TRIGGER = 00
 632              		.loc 2 191 0
 633 0044 114B     		ldr	r3, .L41	@ D.5112,
 634 0046 DA68     		ldr	r2, [r3, #12]	@ D.5113, _19->CFGR1
 635 0048 C023     		movs	r3, #192	@ tmp150,
 636 004a 1B01     		lsls	r3, r3, #4	@ tmp144, tmp150,
 637 004c 1340     		ands	r3, r2	@ D.5113, D.5113
 638 004e 01D0     		beq	.L35	@,
 192:src/adc.c     **** 		return 0xFFFF;
 639              		.loc 2 192 0
 640 0050 0F4B     		ldr	r3, .L41+4	@ D.5111,
 641 0052 17E0     		b	.L31	@
 642              	.L35:
 193:src/adc.c     **** 
 194:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00000020)					//reviso ALIGN = 0
 643              		.loc 2 194 0
 644 0054 0D4B     		ldr	r3, .L41	@ D.5112,
 645 0056 DB68     		ldr	r3, [r3, #12]	@ D.5113, _23->CFGR1
 646 0058 2022     		movs	r2, #32	@ tmp145,
 647 005a 1340     		ands	r3, r2	@ D.5113, tmp145
 648 005c 01D0     		beq	.L36	@,
 195:src/adc.c     **** 		return 0xFFFF;
 649              		.loc 2 195 0
 650 005e 0C4B     		ldr	r3, .L41+4	@ D.5111,
 651 0060 10E0     		b	.L31	@
 652              	.L36:
 196:src/adc.c     **** 
 197:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00000018)					//reviso RES = 00
 653              		.loc 2 197 0
 654 0062 0A4B     		ldr	r3, .L41	@ D.5112,
 655 0064 DB68     		ldr	r3, [r3, #12]	@ D.5113, _27->CFGR1
 656 0066 1822     		movs	r2, #24	@ tmp146,
 657 0068 1340     		ands	r3, r2	@ D.5113, tmp146
 658 006a 01D0     		beq	.L40	@,
 198:src/adc.c     **** 		return 0xFFFF;
 659              		.loc 2 198 0
 660 006c 084B     		ldr	r3, .L41+4	@ D.5111,
 661 006e 09E0     		b	.L31	@
 662              	.L40:
 199:src/adc.c     **** 
 200:src/adc.c     **** 	//espero que no se este convirtiendo ADCSTART = 0
 201:src/adc.c     **** 	while ((ADC1->CR & 0x02) != 0);	//espero ADCSTART = 0
ARM GAS  /tmp/ccyHaRvc.s 			page 32


 663              		.loc 2 201 0
 664 0070 C046     		nop
 665              	.L38:
 666              		.loc 2 201 0 is_stmt 0 discriminator 1
 667 0072 064B     		ldr	r3, .L41	@ D.5112,
 668 0074 9B68     		ldr	r3, [r3, #8]	@ D.5113, _31->CR
 669 0076 0222     		movs	r2, #2	@ tmp147,
 670 0078 1340     		ands	r3, r2	@ D.5113, tmp147
 671 007a FAD1     		bne	.L38	@,
 202:src/adc.c     **** 
 203:src/adc.c     **** 	ADC1->CHSELR = 0x00000001;	//solo convierto CH0
 672              		.loc 2 203 0 is_stmt 1
 673 007c 034B     		ldr	r3, .L41	@ D.5112,
 674 007e 0122     		movs	r2, #1	@ tmp148,
 675 0080 9A62     		str	r2, [r3, #40]	@ tmp148, _34->CHSELR
 204:src/adc.c     **** 
 205:src/adc.c     **** 	return 1;
 676              		.loc 2 205 0
 677 0082 0123     		movs	r3, #1	@ D.5111,
 678              	.L31:
 206:src/adc.c     **** }
 679              		.loc 2 206 0
 680 0084 1800     		movs	r0, r3	@, <retval>
 681 0086 02B0     		add	sp, sp, #8	@,,
 682              		@ sp needed	@
 683 0088 7047     		bx	lr
 684              	.L42:
 685 008a C046     		.align	2
 686              	.L41:
 687 008c 00240140 		.word	1073816576
 688 0090 FFFF0000 		.word	65535
 689              		.cfi_endproc
 690              	.LFE24:
 691              		.size	ReadADC1Check, .-ReadADC1Check
 692              		.section	.text.ADCGetCalibrationFactor,"ax",%progbits
 693              		.align	2
 694              		.global	ADCGetCalibrationFactor
 695              		.code	16
 696              		.thumb_func
 697              		.type	ADCGetCalibrationFactor, %function
 698              	ADCGetCalibrationFactor:
 699              	.LFB25:
 207:src/adc.c     **** 
 208:src/adc.c     **** unsigned int ADCGetCalibrationFactor (void)
 209:src/adc.c     **** {
 700              		.loc 2 209 0
 701              		.cfi_startproc
 702 0000 84B0     		sub	sp, sp, #16	@,,
 703              	.LCFI7:
 704              		.cfi_def_cfa_offset 16
 210:src/adc.c     ****   uint32_t tmpreg = 0, calibrationcounter = 0, calibrationstatus = 0;
 705              		.loc 2 210 0
 706 0002 0023     		movs	r3, #0	@ tmp122,
 707 0004 0393     		str	r3, [sp, #12]	@ tmp122, tmpreg
 708 0006 0023     		movs	r3, #0	@ tmp123,
 709 0008 0293     		str	r3, [sp, #8]	@ tmp123, calibrationcounter
 710 000a 0023     		movs	r3, #0	@ tmp124,
ARM GAS  /tmp/ccyHaRvc.s 			page 33


 711 000c 0193     		str	r3, [sp, #4]	@ tmp124, calibrationstatus
 211:src/adc.c     **** 
 212:src/adc.c     ****   /* Set the ADC calibartion */
 213:src/adc.c     ****   ADC1->CR |= (uint32_t)ADC_CR_ADCAL;
 712              		.loc 2 213 0
 713 000e 124B     		ldr	r3, .L49	@ D.5114,
 714 0010 114A     		ldr	r2, .L49	@ D.5114,
 715 0012 9268     		ldr	r2, [r2, #8]	@ D.5115, _7->CR
 716 0014 8021     		movs	r1, #128	@ tmp137,
 717 0016 0906     		lsls	r1, r1, #24	@ tmp125, tmp137,
 718 0018 0A43     		orrs	r2, r1	@ D.5115, tmp125
 719 001a 9A60     		str	r2, [r3, #8]	@ D.5115, _6->CR
 720              	.L45:
 214:src/adc.c     **** 
 215:src/adc.c     ****   /* Wait until no ADC calibration is completed */
 216:src/adc.c     ****   do
 217:src/adc.c     ****   {
 218:src/adc.c     ****     calibrationstatus = ADC1->CR & ADC_CR_ADCAL;
 721              		.loc 2 218 0 discriminator 2
 722 001c 0E4B     		ldr	r3, .L49	@ D.5114,
 723 001e 9B68     		ldr	r3, [r3, #8]	@ D.5115, _12->CR
 724 0020 DB0F     		lsrs	r3, r3, #31	@ tmp127, D.5115,
 725 0022 DB07     		lsls	r3, r3, #31	@ tmp126, tmp127,
 726 0024 0193     		str	r3, [sp, #4]	@ tmp126, calibrationstatus
 219:src/adc.c     ****     calibrationcounter++;
 727              		.loc 2 219 0 discriminator 2
 728 0026 029B     		ldr	r3, [sp, #8]	@ tmp129, calibrationcounter
 729 0028 0133     		adds	r3, r3, #1	@ tmp128,
 730 002a 0293     		str	r3, [sp, #8]	@ tmp128, calibrationcounter
 220:src/adc.c     ****   } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 731              		.loc 2 220 0 discriminator 2
 732 002c 029A     		ldr	r2, [sp, #8]	@ tmp130, calibrationcounter
 733 002e F023     		movs	r3, #240	@ tmp136,
 734 0030 1B02     		lsls	r3, r3, #8	@ tmp131, tmp136,
 735 0032 9A42     		cmp	r2, r3	@ tmp130, tmp131
 736 0034 02D0     		beq	.L44	@,
 737              		.loc 2 220 0 is_stmt 0 discriminator 1
 738 0036 019B     		ldr	r3, [sp, #4]	@ tmp132, calibrationstatus
 739 0038 002B     		cmp	r3, #0	@ tmp132,
 740 003a EFD1     		bne	.L45	@,
 741              	.L44:
 221:src/adc.c     **** 
 222:src/adc.c     ****   if((uint32_t)(ADC1->CR & ADC_CR_ADCAL) == RESET)
 742              		.loc 2 222 0 is_stmt 1
 743 003c 064B     		ldr	r3, .L49	@ D.5114,
 744 003e 9B68     		ldr	r3, [r3, #8]	@ D.5115, _16->CR
 745 0040 002B     		cmp	r3, #0	@ D.5116,
 746 0042 03DB     		blt	.L46	@,
 223:src/adc.c     ****   {
 224:src/adc.c     ****     /*Get the calibration factor from the ADC data register */
 225:src/adc.c     ****     tmpreg = ADC1->DR;
 747              		.loc 2 225 0
 748 0044 044B     		ldr	r3, .L49	@ D.5114,
 749 0046 1B6C     		ldr	r3, [r3, #64]	@ tmp133, _19->DR
 750 0048 0393     		str	r3, [sp, #12]	@ tmp133, tmpreg
 751 004a 01E0     		b	.L47	@
 752              	.L46:
ARM GAS  /tmp/ccyHaRvc.s 			page 34


 226:src/adc.c     ****   }
 227:src/adc.c     ****   else
 228:src/adc.c     ****   {
 229:src/adc.c     ****     /* Error factor */
 230:src/adc.c     ****     tmpreg = 0x00000000;
 753              		.loc 2 230 0
 754 004c 0023     		movs	r3, #0	@ tmp134,
 755 004e 0393     		str	r3, [sp, #12]	@ tmp134, tmpreg
 756              	.L47:
 231:src/adc.c     ****   }
 232:src/adc.c     ****   return tmpreg;
 757              		.loc 2 232 0
 758 0050 039B     		ldr	r3, [sp, #12]	@ D.5117, tmpreg
 233:src/adc.c     **** }
 759              		.loc 2 233 0
 760 0052 1800     		movs	r0, r3	@, <retval>
 761 0054 04B0     		add	sp, sp, #16	@,,
 762              		@ sp needed	@
 763 0056 7047     		bx	lr
 764              	.L50:
 765              		.align	2
 766              	.L49:
 767 0058 00240140 		.word	1073816576
 768              		.cfi_endproc
 769              	.LFE25:
 770              		.size	ADCGetCalibrationFactor, .-ADCGetCalibrationFactor
 771              		.section	.text.UpdatePhotoTransistor,"ax",%progbits
 772              		.align	2
 773              		.global	UpdatePhotoTransistor
 774              		.code	16
 775              		.thumb_func
 776              		.type	UpdatePhotoTransistor, %function
 777              	UpdatePhotoTransistor:
 778              	.LFB26:
 234:src/adc.c     **** 
 235:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
 236:src/adc.c     **** void UpdateTemp(void)
 237:src/adc.c     **** {
 238:src/adc.c     **** 	//hago update cada 1 seg
 239:src/adc.c     **** 	if (!tt_take_temp_sample)
 240:src/adc.c     **** 	{
 241:src/adc.c     **** 		tt_take_temp_sample = 1000;
 242:src/adc.c     **** 
 243:src/adc.c     **** 		board_temp [board_temp_index] = ReadADC1_SameSampleTime(ADC_CH16);
 244:src/adc.c     **** 		//board_temp [0] = ReadADC1_SameSampleTime(ADC_CH16);
 245:src/adc.c     **** 
 246:src/adc.c     **** 		if (board_temp_index < (SIZEOF_BOARD_TEMP - 1))
 247:src/adc.c     **** 			board_temp_index++;
 248:src/adc.c     **** 		else
 249:src/adc.c     **** 			board_temp_index = 0;
 250:src/adc.c     **** 
 251:src/adc.c     **** 		new_temp_sample = 1;
 252:src/adc.c     **** 	}
 253:src/adc.c     **** }
 254:src/adc.c     **** 
 255:src/adc.c     **** //devuelve el valor promedio de la temperatura
 256:src/adc.c     **** //si existen nuevas muestras hace la cuenta, sino contesta el ultimo valor calculado
ARM GAS  /tmp/ccyHaRvc.s 			page 35


 257:src/adc.c     **** unsigned short GetTemp (void)
 258:src/adc.c     **** {
 259:src/adc.c     ****     unsigned char i;
 260:src/adc.c     ****     unsigned int t = 0;
 261:src/adc.c     **** 
 262:src/adc.c     ****     if (new_temp_sample)
 263:src/adc.c     ****     {
 264:src/adc.c     ****         for (i = 0; i < SIZEOF_BOARD_TEMP; i++)
 265:src/adc.c     ****             t += board_temp[i];
 266:src/adc.c     **** 
 267:src/adc.c     ****         last_temp = t >> 3;
 268:src/adc.c     ****         new_temp_sample = 0;
 269:src/adc.c     ****     }
 270:src/adc.c     **** 
 271:src/adc.c     ****     return ConvertTemp(last_temp);
 272:src/adc.c     **** }
 273:src/adc.c     **** 
 274:src/adc.c     **** void FillTempBuffer (void)
 275:src/adc.c     **** {
 276:src/adc.c     **** 	unsigned char i;
 277:src/adc.c     **** 	unsigned short dummy;
 278:src/adc.c     **** 
 279:src/adc.c     **** 	dummy = ReadADC1_SameSampleTime(ADC_CH16);
 280:src/adc.c     **** 
 281:src/adc.c     **** 	for (i = 0; i < SIZEOF_BOARD_TEMP; i++)
 282:src/adc.c     **** 		 board_temp[i] = dummy;
 283:src/adc.c     **** 
 284:src/adc.c     **** }
 285:src/adc.c     **** 
 286:src/adc.c     **** short ConvertTemp (unsigned short adc_temp)
 287:src/adc.c     **** {
 288:src/adc.c     **** 	int32_t temperature; /* will contain the temperature in degree Celsius */
 289:src/adc.c     **** 	//temperature = (((int32_t) ADC1->DR * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR );
 290:src/adc.c     **** 	temperature = (int32_t) *TEMP30_CAL_ADDR - adc_temp;
 291:src/adc.c     **** 	temperature *= 1000;
 292:src/adc.c     **** 	temperature = temperature / 5336;	//4.3mV / °C
 293:src/adc.c     **** 	temperature = temperature + 30;
 294:src/adc.c     **** 
 295:src/adc.c     **** 	return (short) temperature;
 296:src/adc.c     **** }
 297:src/adc.c     **** #endif //ADC_WITH_TEMP_SENSE
 298:src/adc.c     **** 
 299:src/adc.c     **** void UpdatePhotoTransistor(void)
 300:src/adc.c     **** {
 779              		.loc 2 300 0
 780              		.cfi_startproc
 301:src/adc.c     **** 	//hago update cada 1 seg
 302:src/adc.c     **** 	if (!tt_take_photo_sample)
 781              		.loc 2 302 0
 782 0000 124B     		ldr	r3, .L56	@ tmp117,
 783 0002 1B88     		ldrh	r3, [r3]	@ tmp118, tt_take_photo_sample
 784 0004 9BB2     		uxth	r3, r3	@ D.5118, tmp118
 785 0006 002B     		cmp	r3, #0	@ D.5118,
 786 0008 1DD1     		bne	.L55	@,
 303:src/adc.c     **** 	{
 304:src/adc.c     **** 		tt_take_photo_sample = 1000;
 787              		.loc 2 304 0
ARM GAS  /tmp/ccyHaRvc.s 			page 36


 788 000a 104B     		ldr	r3, .L56	@ tmp119,
 789 000c FA22     		movs	r2, #250	@ tmp140,
 790 000e 9200     		lsls	r2, r2, #2	@ tmp120, tmp140,
 791 0010 1A80     		strh	r2, [r3]	@ tmp121, tt_take_photo_sample
 305:src/adc.c     **** 
 306:src/adc.c     **** 		// VoltagePhoto [photo_index] = ReadADC1_SameSampleTime(ADC_CH1);
 307:src/adc.c     **** 		VoltagePhoto [photo_index] = Light_Sense;
 792              		.loc 2 307 0
 793 0012 0F4B     		ldr	r3, .L56+4	@ tmp122,
 794 0014 1B78     		ldrb	r3, [r3]	@ D.5119, photo_index
 795 0016 1A00     		movs	r2, r3	@ D.5120, D.5119
 796 0018 0E4B     		ldr	r3, .L56+8	@ tmp123,
 797 001a 5B88     		ldrh	r3, [r3, #2]	@ tmp125,
 798 001c 99B2     		uxth	r1, r3	@ D.5118, tmp125
 799 001e 0E4B     		ldr	r3, .L56+12	@ tmp126,
 800 0020 5200     		lsls	r2, r2, #1	@ tmp127, D.5120,
 801 0022 D152     		strh	r1, [r2, r3]	@ tmp128, VoltagePhoto
 308:src/adc.c     **** 
 309:src/adc.c     **** 		if (photo_index < (SIZEOF_PHOTO_TRANS - 1))
 802              		.loc 2 309 0
 803 0024 0A4B     		ldr	r3, .L56+4	@ tmp129,
 804 0026 1B78     		ldrb	r3, [r3]	@ D.5119, photo_index
 805 0028 1E2B     		cmp	r3, #30	@ D.5119,
 806 002a 06D8     		bhi	.L53	@,
 310:src/adc.c     **** 			photo_index++;
 807              		.loc 2 310 0
 808 002c 084B     		ldr	r3, .L56+4	@ tmp130,
 809 002e 1B78     		ldrb	r3, [r3]	@ D.5119, photo_index
 810 0030 0133     		adds	r3, r3, #1	@ tmp131,
 811 0032 DAB2     		uxtb	r2, r3	@ D.5119, tmp131
 812 0034 064B     		ldr	r3, .L56+4	@ tmp132,
 813 0036 1A70     		strb	r2, [r3]	@ tmp133, photo_index
 814 0038 02E0     		b	.L54	@
 815              	.L53:
 311:src/adc.c     **** 		else
 312:src/adc.c     **** 			photo_index = 0;
 816              		.loc 2 312 0
 817 003a 054B     		ldr	r3, .L56+4	@ tmp134,
 818 003c 0022     		movs	r2, #0	@ tmp135,
 819 003e 1A70     		strb	r2, [r3]	@ tmp136, photo_index
 820              	.L54:
 313:src/adc.c     **** 
 314:src/adc.c     **** 		new_photo_sample = 1;
 821              		.loc 2 314 0
 822 0040 064B     		ldr	r3, .L56+16	@ tmp137,
 823 0042 0122     		movs	r2, #1	@ tmp138,
 824 0044 1A70     		strb	r2, [r3]	@ tmp139, new_photo_sample
 825              	.L55:
 315:src/adc.c     **** 	}
 316:src/adc.c     **** }
 826              		.loc 2 316 0
 827 0046 C046     		nop
 828              		@ sp needed	@
 829 0048 7047     		bx	lr
 830              	.L57:
 831 004a C046     		.align	2
 832              	.L56:
ARM GAS  /tmp/ccyHaRvc.s 			page 37


 833 004c 00000000 		.word	tt_take_photo_sample
 834 0050 00000000 		.word	photo_index
 835 0054 00000000 		.word	adc_ch
 836 0058 00000000 		.word	VoltagePhoto
 837 005c 00000000 		.word	new_photo_sample
 838              		.cfi_endproc
 839              	.LFE26:
 840              		.size	UpdatePhotoTransistor, .-UpdatePhotoTransistor
 841              		.section	.text.FillPhotoBuffer,"ax",%progbits
 842              		.align	2
 843              		.global	FillPhotoBuffer
 844              		.code	16
 845              		.thumb_func
 846              		.type	FillPhotoBuffer, %function
 847              	FillPhotoBuffer:
 848              	.LFB27:
 317:src/adc.c     **** 
 318:src/adc.c     **** void FillPhotoBuffer (void)
 319:src/adc.c     **** {
 849              		.loc 2 319 0
 850              		.cfi_startproc
 851 0000 82B0     		sub	sp, sp, #8	@,,
 852              	.LCFI8:
 853              		.cfi_def_cfa_offset 8
 320:src/adc.c     **** 	unsigned char i;
 321:src/adc.c     **** 	unsigned short dummy;
 322:src/adc.c     **** 
 323:src/adc.c     **** 	// dummy = ReadADC1_SameSampleTime(ADC_CH1);
 324:src/adc.c     **** 	dummy = Light_Sense;
 854              		.loc 2 324 0
 855 0002 01AB     		add	r3, sp, #4	@ tmp112,,
 856 0004 0F4A     		ldr	r2, .L61	@ tmp113,
 857 0006 5288     		ldrh	r2, [r2, #2]	@ tmp114,
 858 0008 1A80     		strh	r2, [r3]	@ tmp114, dummy
 325:src/adc.c     **** 
 326:src/adc.c     **** 	for (i = 0; i < SIZEOF_PHOTO_TRANS; i++)
 859              		.loc 2 326 0
 860 000a 6B46     		mov	r3, sp	@ tmp129,
 861 000c 0733     		adds	r3, r3, #7	@ tmp115,
 862 000e 0022     		movs	r2, #0	@ tmp116,
 863 0010 1A70     		strb	r2, [r3]	@ tmp117, i
 864 0012 0EE0     		b	.L59	@
 865              	.L60:
 327:src/adc.c     **** 		 VoltagePhoto[i] = dummy;
 866              		.loc 2 327 0 discriminator 3
 867 0014 6B46     		mov	r3, sp	@ tmp130,
 868 0016 0733     		adds	r3, r3, #7	@ tmp118,
 869 0018 1A78     		ldrb	r2, [r3]	@ D.5121, i
 870 001a 0B4B     		ldr	r3, .L61+4	@ tmp119,
 871 001c 5200     		lsls	r2, r2, #1	@ tmp120, D.5121,
 872 001e 01A9     		add	r1, sp, #4	@ tmp121,,
 873 0020 0988     		ldrh	r1, [r1]	@ tmp122, dummy
 874 0022 D152     		strh	r1, [r2, r3]	@ tmp122, VoltagePhoto
 326:src/adc.c     **** 		 VoltagePhoto[i] = dummy;
 875              		.loc 2 326 0 discriminator 3
 876 0024 6B46     		mov	r3, sp	@ tmp131,
 877 0026 0733     		adds	r3, r3, #7	@ tmp123,
ARM GAS  /tmp/ccyHaRvc.s 			page 38


 878 0028 1A78     		ldrb	r2, [r3]	@ D.5122, i
 879 002a 6B46     		mov	r3, sp	@ tmp132,
 880 002c 0733     		adds	r3, r3, #7	@ tmp124,
 881 002e 0132     		adds	r2, r2, #1	@ tmp125,
 882 0030 1A70     		strb	r2, [r3]	@ tmp126, i
 883              	.L59:
 326:src/adc.c     **** 		 VoltagePhoto[i] = dummy;
 884              		.loc 2 326 0 is_stmt 0 discriminator 1
 885 0032 6B46     		mov	r3, sp	@ tmp133,
 886 0034 0733     		adds	r3, r3, #7	@ tmp127,
 887 0036 1B78     		ldrb	r3, [r3]	@ tmp128, i
 888 0038 1F2B     		cmp	r3, #31	@ tmp128,
 889 003a EBD9     		bls	.L60	@,
 328:src/adc.c     **** 
 329:src/adc.c     **** }
 890              		.loc 2 329 0 is_stmt 1
 891 003c C046     		nop
 892 003e 02B0     		add	sp, sp, #8	@,,
 893              		@ sp needed	@
 894 0040 7047     		bx	lr
 895              	.L62:
 896 0042 C046     		.align	2
 897              	.L61:
 898 0044 00000000 		.word	adc_ch
 899 0048 00000000 		.word	VoltagePhoto
 900              		.cfi_endproc
 901              	.LFE27:
 902              		.size	FillPhotoBuffer, .-FillPhotoBuffer
 903              		.section	.text.GetPhoto,"ax",%progbits
 904              		.align	2
 905              		.global	GetPhoto
 906              		.code	16
 907              		.thumb_func
 908              		.type	GetPhoto, %function
 909              	GetPhoto:
 910              	.LFB28:
 330:src/adc.c     **** 
 331:src/adc.c     **** //devuelve el valor promedio del PhotoTransistor
 332:src/adc.c     **** //si existen nuevas muestras hace la cuenta, sino contesta el ultimo valor calculado
 333:src/adc.c     **** unsigned short GetPhoto (void)
 334:src/adc.c     **** {
 911              		.loc 2 334 0
 912              		.cfi_startproc
 913 0000 82B0     		sub	sp, sp, #8	@,,
 914              	.LCFI9:
 915              		.cfi_def_cfa_offset 8
 335:src/adc.c     ****     unsigned char i;
 336:src/adc.c     ****     unsigned int t = 0;
 916              		.loc 2 336 0
 917 0002 0023     		movs	r3, #0	@ tmp119,
 918 0004 0093     		str	r3, [sp]	@ tmp119, t
 337:src/adc.c     **** 
 338:src/adc.c     ****     if (new_photo_sample)
 919              		.loc 2 338 0
 920 0006 164B     		ldr	r3, .L68	@ tmp120,
 921 0008 1B78     		ldrb	r3, [r3]	@ D.5123, new_photo_sample
 922 000a 002B     		cmp	r3, #0	@ D.5123,
ARM GAS  /tmp/ccyHaRvc.s 			page 39


 923 000c 22D0     		beq	.L64	@,
 339:src/adc.c     ****     {
 340:src/adc.c     ****         for (i = 0; i < SIZEOF_PHOTO_TRANS; i++)
 924              		.loc 2 340 0
 925 000e 6B46     		mov	r3, sp	@ tmp143,
 926 0010 0733     		adds	r3, r3, #7	@ tmp121,
 927 0012 0022     		movs	r2, #0	@ tmp122,
 928 0014 1A70     		strb	r2, [r3]	@ tmp123, i
 929 0016 10E0     		b	.L65	@
 930              	.L66:
 341:src/adc.c     ****         {
 342:src/adc.c     ****             t += VoltagePhoto[i];
 931              		.loc 2 342 0 discriminator 3
 932 0018 6B46     		mov	r3, sp	@ tmp144,
 933 001a 0733     		adds	r3, r3, #7	@ tmp124,
 934 001c 1A78     		ldrb	r2, [r3]	@ D.5124, i
 935 001e 114B     		ldr	r3, .L68+4	@ tmp125,
 936 0020 5200     		lsls	r2, r2, #1	@ tmp126, D.5124,
 937 0022 D35A     		ldrh	r3, [r2, r3]	@ D.5125, VoltagePhoto
 938 0024 1A00     		movs	r2, r3	@ D.5126, D.5125
 939 0026 009B     		ldr	r3, [sp]	@ tmp128, t
 940 0028 9B18     		adds	r3, r3, r2	@ tmp127, tmp128, D.5126
 941 002a 0093     		str	r3, [sp]	@ tmp127, t
 340:src/adc.c     ****         {
 942              		.loc 2 340 0 discriminator 3
 943 002c 6B46     		mov	r3, sp	@ tmp145,
 944 002e 0733     		adds	r3, r3, #7	@ tmp129,
 945 0030 1A78     		ldrb	r2, [r3]	@ D.5123, i
 946 0032 6B46     		mov	r3, sp	@ tmp146,
 947 0034 0733     		adds	r3, r3, #7	@ tmp130,
 948 0036 0132     		adds	r2, r2, #1	@ tmp131,
 949 0038 1A70     		strb	r2, [r3]	@ tmp132, i
 950              	.L65:
 340:src/adc.c     ****         {
 951              		.loc 2 340 0 is_stmt 0 discriminator 1
 952 003a 6B46     		mov	r3, sp	@ tmp147,
 953 003c 0733     		adds	r3, r3, #7	@ tmp133,
 954 003e 1B78     		ldrb	r3, [r3]	@ tmp134, i
 955 0040 1F2B     		cmp	r3, #31	@ tmp134,
 956 0042 E9D9     		bls	.L66	@,
 343:src/adc.c     ****         }
 344:src/adc.c     **** 
 345:src/adc.c     ****         last_photo = t >> DIVISOR_PHOTO;
 957              		.loc 2 345 0 is_stmt 1
 958 0044 009B     		ldr	r3, [sp]	@ tmp135, t
 959 0046 5B09     		lsrs	r3, r3, #5	@ D.5126, tmp135,
 960 0048 9AB2     		uxth	r2, r3	@ D.5125, D.5126
 961 004a 074B     		ldr	r3, .L68+8	@ tmp136,
 962 004c 1A80     		strh	r2, [r3]	@ tmp137, last_photo
 346:src/adc.c     ****         new_photo_sample = 0;
 963              		.loc 2 346 0
 964 004e 044B     		ldr	r3, .L68	@ tmp138,
 965 0050 0022     		movs	r2, #0	@ tmp139,
 966 0052 1A70     		strb	r2, [r3]	@ tmp140, new_photo_sample
 967              	.L64:
 347:src/adc.c     ****     }
 348:src/adc.c     **** 
ARM GAS  /tmp/ccyHaRvc.s 			page 40


 349:src/adc.c     ****     return last_photo;
 968              		.loc 2 349 0
 969 0054 044B     		ldr	r3, .L68+8	@ tmp141,
 970 0056 1B88     		ldrh	r3, [r3]	@ D.5125, last_photo
 350:src/adc.c     **** }
 971              		.loc 2 350 0
 972 0058 1800     		movs	r0, r3	@, <retval>
 973 005a 02B0     		add	sp, sp, #8	@,,
 974              		@ sp needed	@
 975 005c 7047     		bx	lr
 976              	.L69:
 977 005e C046     		.align	2
 978              	.L68:
 979 0060 00000000 		.word	new_photo_sample
 980 0064 00000000 		.word	VoltagePhoto
 981 0068 00000000 		.word	last_photo
 982              		.cfi_endproc
 983              	.LFE28:
 984              		.size	GetPhoto, .-GetPhoto
 985              		.text
 986              	.Letext0:
 987              		.file 3 "./cmsis_boot/stm32f0xx.h"
 988              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 989              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 990              		.section	.debug_info,"",%progbits
 991              	.Ldebug_info0:
 992 0000 D0070000 		.4byte	0x7d0
 993 0004 0200     		.2byte	0x2
 994 0006 00000000 		.4byte	.Ldebug_abbrev0
 995 000a 04       		.byte	0x4
 996 000b 01       		.uleb128 0x1
 997 000c D2040000 		.4byte	.LASF108
 998 0010 0C       		.byte	0xc
 999 0011 74000000 		.4byte	.LASF109
 1000 0015 6E020000 		.4byte	.LASF110
 1001 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1002 001d 00000000 		.4byte	0
 1003 0021 00000000 		.4byte	0
 1004 0025 00000000 		.4byte	.Ldebug_line0
 1005 0029 02       		.uleb128 0x2
 1006 002a 01       		.byte	0x1
 1007 002b 08       		.byte	0x8
 1008 002c EE020000 		.4byte	.LASF34
 1009 0030 03       		.uleb128 0x3
 1010 0031 17020000 		.4byte	.LASF84
 1011 0035 01       		.byte	0x1
 1012 0036 0D010000 		.4byte	0x10d
 1013 003a 03       		.byte	0x3
 1014 003b C7       		.byte	0xc7
 1015 003c 0D010000 		.4byte	0x10d
 1016 0040 04       		.uleb128 0x4
 1017 0041 0D040000 		.4byte	.LASF0
 1018 0045 72       		.sleb128 -14
 1019 0046 04       		.uleb128 0x4
 1020 0047 CB000000 		.4byte	.LASF1
 1021 004b 73       		.sleb128 -13
 1022 004c 04       		.uleb128 0x4
ARM GAS  /tmp/ccyHaRvc.s 			page 41


 1023 004d 97050000 		.4byte	.LASF2
 1024 0051 7B       		.sleb128 -5
 1025 0052 04       		.uleb128 0x4
 1026 0053 C4030000 		.4byte	.LASF3
 1027 0057 7E       		.sleb128 -2
 1028 0058 04       		.uleb128 0x4
 1029 0059 FD010000 		.4byte	.LASF4
 1030 005d 7F       		.sleb128 -1
 1031 005e 05       		.uleb128 0x5
 1032 005f 4B000000 		.4byte	.LASF5
 1033 0063 00       		.byte	0
 1034 0064 05       		.uleb128 0x5
 1035 0065 16000000 		.4byte	.LASF6
 1036 0069 01       		.byte	0x1
 1037 006a 05       		.uleb128 0x5
 1038 006b 7D050000 		.4byte	.LASF7
 1039 006f 02       		.byte	0x2
 1040 0070 05       		.uleb128 0x5
 1041 0071 9C030000 		.4byte	.LASF8
 1042 0075 03       		.byte	0x3
 1043 0076 05       		.uleb128 0x5
 1044 0077 B9040000 		.4byte	.LASF9
 1045 007b 04       		.byte	0x4
 1046 007c 05       		.uleb128 0x5
 1047 007d 55040000 		.4byte	.LASF10
 1048 0081 05       		.byte	0x5
 1049 0082 05       		.uleb128 0x5
 1050 0083 00040000 		.4byte	.LASF11
 1051 0087 06       		.byte	0x6
 1052 0088 05       		.uleb128 0x5
 1053 0089 3F030000 		.4byte	.LASF12
 1054 008d 07       		.byte	0x7
 1055 008e 05       		.uleb128 0x5
 1056 008f C3000000 		.4byte	.LASF13
 1057 0093 08       		.byte	0x8
 1058 0094 05       		.uleb128 0x5
 1059 0095 A3020000 		.4byte	.LASF14
 1060 0099 09       		.byte	0x9
 1061 009a 05       		.uleb128 0x5
 1062 009b E0030000 		.4byte	.LASF15
 1063 009f 0A       		.byte	0xa
 1064 00a0 05       		.uleb128 0x5
 1065 00a1 62040000 		.4byte	.LASF16
 1066 00a5 0B       		.byte	0xb
 1067 00a6 05       		.uleb128 0x5
 1068 00a7 48010000 		.4byte	.LASF17
 1069 00ab 0C       		.byte	0xc
 1070 00ac 05       		.uleb128 0x5
 1071 00ad F0000000 		.4byte	.LASF18
 1072 00b1 0D       		.byte	0xd
 1073 00b2 05       		.uleb128 0x5
 1074 00b3 0A020000 		.4byte	.LASF19
 1075 00b7 0E       		.byte	0xe
 1076 00b8 05       		.uleb128 0x5
 1077 00b9 8C040000 		.4byte	.LASF20
 1078 00bd 0F       		.byte	0xf
 1079 00be 05       		.uleb128 0x5
ARM GAS  /tmp/ccyHaRvc.s 			page 42


 1080 00bf 86050000 		.4byte	.LASF21
 1081 00c3 10       		.byte	0x10
 1082 00c4 05       		.uleb128 0x5
 1083 00c5 B5000000 		.4byte	.LASF22
 1084 00c9 11       		.byte	0x11
 1085 00ca 05       		.uleb128 0x5
 1086 00cb 6D010000 		.4byte	.LASF23
 1087 00cf 13       		.byte	0x13
 1088 00d0 05       		.uleb128 0x5
 1089 00d1 F2010000 		.4byte	.LASF24
 1090 00d5 14       		.byte	0x14
 1091 00d6 05       		.uleb128 0x5
 1092 00d7 DA000000 		.4byte	.LASF25
 1093 00db 15       		.byte	0x15
 1094 00dc 05       		.uleb128 0x5
 1095 00dd 7F030000 		.4byte	.LASF26
 1096 00e1 16       		.byte	0x16
 1097 00e2 05       		.uleb128 0x5
 1098 00e3 8A030000 		.4byte	.LASF27
 1099 00e7 17       		.byte	0x17
 1100 00e8 05       		.uleb128 0x5
 1101 00e9 4B040000 		.4byte	.LASF28
 1102 00ed 18       		.byte	0x18
 1103 00ee 05       		.uleb128 0x5
 1104 00ef D5010000 		.4byte	.LASF29
 1105 00f3 19       		.byte	0x19
 1106 00f4 05       		.uleb128 0x5
 1107 00f5 E8010000 		.4byte	.LASF30
 1108 00f9 1A       		.byte	0x1a
 1109 00fa 05       		.uleb128 0x5
 1110 00fb 96040000 		.4byte	.LASF31
 1111 00ff 1B       		.byte	0x1b
 1112 0100 05       		.uleb128 0x5
 1113 0101 14030000 		.4byte	.LASF32
 1114 0105 1C       		.byte	0x1c
 1115 0106 05       		.uleb128 0x5
 1116 0107 7E000000 		.4byte	.LASF33
 1117 010b 1E       		.byte	0x1e
 1118 010c 00       		.byte	0
 1119 010d 02       		.uleb128 0x2
 1120 010e 01       		.byte	0x1
 1121 010f 06       		.byte	0x6
 1122 0110 68000000 		.4byte	.LASF35
 1123 0114 06       		.uleb128 0x6
 1124 0115 B1030000 		.4byte	.LASF37
 1125 0119 03       		.byte	0x3
 1126 011a 5F01     		.2byte	0x15f
 1127 011c 30000000 		.4byte	0x30
 1128 0120 02       		.uleb128 0x2
 1129 0121 02       		.byte	0x2
 1130 0122 05       		.byte	0x5
 1131 0123 26030000 		.4byte	.LASF36
 1132 0127 07       		.uleb128 0x7
 1133 0128 F5030000 		.4byte	.LASF38
 1134 012c 04       		.byte	0x4
 1135 012d 2B       		.byte	0x2b
 1136 012e 32010000 		.4byte	0x132
ARM GAS  /tmp/ccyHaRvc.s 			page 43


 1137 0132 02       		.uleb128 0x2
 1138 0133 02       		.byte	0x2
 1139 0134 07       		.byte	0x7
 1140 0135 AB010000 		.4byte	.LASF39
 1141 0139 02       		.uleb128 0x2
 1142 013a 04       		.byte	0x4
 1143 013b 05       		.byte	0x5
 1144 013c 8E000000 		.4byte	.LASF40
 1145 0140 07       		.uleb128 0x7
 1146 0141 E5000000 		.4byte	.LASF41
 1147 0145 04       		.byte	0x4
 1148 0146 41       		.byte	0x41
 1149 0147 4B010000 		.4byte	0x14b
 1150 014b 02       		.uleb128 0x2
 1151 014c 04       		.byte	0x4
 1152 014d 07       		.byte	0x7
 1153 014e 78010000 		.4byte	.LASF42
 1154 0152 02       		.uleb128 0x2
 1155 0153 08       		.byte	0x8
 1156 0154 05       		.byte	0x5
 1157 0155 5A000000 		.4byte	.LASF43
 1158 0159 02       		.uleb128 0x2
 1159 015a 08       		.byte	0x8
 1160 015b 07       		.byte	0x7
 1161 015c 29000000 		.4byte	.LASF44
 1162 0160 08       		.uleb128 0x8
 1163 0161 04       		.byte	0x4
 1164 0162 05       		.byte	0x5
 1165 0163 696E7400 		.ascii	"int\000"
 1166 0167 02       		.uleb128 0x2
 1167 0168 04       		.byte	0x4
 1168 0169 07       		.byte	0x7
 1169 016a 57010000 		.4byte	.LASF45
 1170 016e 07       		.uleb128 0x7
 1171 016f A0000000 		.4byte	.LASF46
 1172 0173 05       		.byte	0x5
 1173 0174 1A       		.byte	0x1a
 1174 0175 27010000 		.4byte	0x127
 1175 0179 07       		.uleb128 0x7
 1176 017a BB030000 		.4byte	.LASF47
 1177 017e 05       		.byte	0x5
 1178 017f 20       		.byte	0x20
 1179 0180 40010000 		.4byte	0x140
 1180 0184 09       		.uleb128 0x9
 1181 0185 2003     		.2byte	0x320
 1182 0187 01       		.byte	0x1
 1183 0188 71       		.byte	0x71
 1184 0189 21020000 		.4byte	0x221
 1185 018d 0A       		.uleb128 0xa
 1186 018e 30030000 		.4byte	.LASF48
 1187 0192 01       		.byte	0x1
 1188 0193 73       		.byte	0x73
 1189 0194 38020000 		.4byte	0x238
 1190 0198 02       		.byte	0x2
 1191 0199 23       		.byte	0x23
 1192 019a 00       		.uleb128 0
 1193 019b 0A       		.uleb128 0xa
ARM GAS  /tmp/ccyHaRvc.s 			page 44


 1194 019c B6020000 		.4byte	.LASF49
 1195 01a0 01       		.byte	0x1
 1196 01a1 74       		.byte	0x74
 1197 01a2 3D020000 		.4byte	0x23d
 1198 01a6 02       		.byte	0x2
 1199 01a7 23       		.byte	0x23
 1200 01a8 04       		.uleb128 0x4
 1201 01a9 0A       		.uleb128 0xa
 1202 01aa 42020000 		.4byte	.LASF50
 1203 01ae 01       		.byte	0x1
 1204 01af 75       		.byte	0x75
 1205 01b0 4D020000 		.4byte	0x24d
 1206 01b4 03       		.byte	0x3
 1207 01b5 23       		.byte	0x23
 1208 01b6 8001     		.uleb128 0x80
 1209 01b8 0A       		.uleb128 0xa
 1210 01b9 05000000 		.4byte	.LASF51
 1211 01bd 01       		.byte	0x1
 1212 01be 76       		.byte	0x76
 1213 01bf 3D020000 		.4byte	0x23d
 1214 01c3 03       		.byte	0x3
 1215 01c4 23       		.byte	0x23
 1216 01c5 8401     		.uleb128 0x84
 1217 01c7 0A       		.uleb128 0xa
 1218 01c8 55000000 		.4byte	.LASF52
 1219 01cc 01       		.byte	0x1
 1220 01cd 77       		.byte	0x77
 1221 01ce 52020000 		.4byte	0x252
 1222 01d2 03       		.byte	0x3
 1223 01d3 23       		.byte	0x23
 1224 01d4 8002     		.uleb128 0x100
 1225 01d6 0A       		.uleb128 0xa
 1226 01d7 CA020000 		.4byte	.LASF53
 1227 01db 01       		.byte	0x1
 1228 01dc 78       		.byte	0x78
 1229 01dd 3D020000 		.4byte	0x23d
 1230 01e1 03       		.byte	0x3
 1231 01e2 23       		.byte	0x23
 1232 01e3 8402     		.uleb128 0x104
 1233 01e5 0A       		.uleb128 0xa
 1234 01e6 00000000 		.4byte	.LASF54
 1235 01ea 01       		.byte	0x1
 1236 01eb 79       		.byte	0x79
 1237 01ec 57020000 		.4byte	0x257
 1238 01f0 03       		.byte	0x3
 1239 01f1 23       		.byte	0x23
 1240 01f2 8003     		.uleb128 0x180
 1241 01f4 0A       		.uleb128 0xa
 1242 01f5 D4020000 		.4byte	.LASF55
 1243 01f9 01       		.byte	0x1
 1244 01fa 7A       		.byte	0x7a
 1245 01fb 3D020000 		.4byte	0x23d
 1246 01ff 03       		.byte	0x3
 1247 0200 23       		.byte	0x23
 1248 0201 8403     		.uleb128 0x184
 1249 0203 0A       		.uleb128 0xa
 1250 0204 DE020000 		.4byte	.LASF56
ARM GAS  /tmp/ccyHaRvc.s 			page 45


 1251 0208 01       		.byte	0x1
 1252 0209 7B       		.byte	0x7b
 1253 020a 5C020000 		.4byte	0x25c
 1254 020e 03       		.byte	0x3
 1255 020f 23       		.byte	0x23
 1256 0210 8004     		.uleb128 0x200
 1257 0212 0B       		.uleb128 0xb
 1258 0213 495000   		.ascii	"IP\000"
 1259 0216 01       		.byte	0x1
 1260 0217 7C       		.byte	0x7c
 1261 0218 7C020000 		.4byte	0x27c
 1262 021c 03       		.byte	0x3
 1263 021d 23       		.byte	0x23
 1264 021e 8006     		.uleb128 0x300
 1265 0220 00       		.byte	0
 1266 0221 0C       		.uleb128 0xc
 1267 0222 79010000 		.4byte	0x179
 1268 0226 31020000 		.4byte	0x231
 1269 022a 0D       		.uleb128 0xd
 1270 022b 31020000 		.4byte	0x231
 1271 022f 00       		.byte	0
 1272 0230 00       		.byte	0
 1273 0231 02       		.uleb128 0x2
 1274 0232 04       		.byte	0x4
 1275 0233 07       		.byte	0x7
 1276 0234 64010000 		.4byte	.LASF57
 1277 0238 0E       		.uleb128 0xe
 1278 0239 21020000 		.4byte	0x221
 1279 023d 0C       		.uleb128 0xc
 1280 023e 79010000 		.4byte	0x179
 1281 0242 4D020000 		.4byte	0x24d
 1282 0246 0D       		.uleb128 0xd
 1283 0247 31020000 		.4byte	0x231
 1284 024b 1E       		.byte	0x1e
 1285 024c 00       		.byte	0
 1286 024d 0E       		.uleb128 0xe
 1287 024e 21020000 		.4byte	0x221
 1288 0252 0E       		.uleb128 0xe
 1289 0253 21020000 		.4byte	0x221
 1290 0257 0E       		.uleb128 0xe
 1291 0258 21020000 		.4byte	0x221
 1292 025c 0C       		.uleb128 0xc
 1293 025d 79010000 		.4byte	0x179
 1294 0261 6C020000 		.4byte	0x26c
 1295 0265 0D       		.uleb128 0xd
 1296 0266 31020000 		.4byte	0x231
 1297 026a 3F       		.byte	0x3f
 1298 026b 00       		.byte	0
 1299 026c 0C       		.uleb128 0xc
 1300 026d 79010000 		.4byte	0x179
 1301 0271 7C020000 		.4byte	0x27c
 1302 0275 0D       		.uleb128 0xd
 1303 0276 31020000 		.4byte	0x231
 1304 027a 07       		.byte	0x7
 1305 027b 00       		.byte	0
 1306 027c 0E       		.uleb128 0xe
 1307 027d 6C020000 		.4byte	0x26c
ARM GAS  /tmp/ccyHaRvc.s 			page 46


 1308 0281 07       		.uleb128 0x7
 1309 0282 35030000 		.4byte	.LASF58
 1310 0286 01       		.byte	0x1
 1311 0287 7D       		.byte	0x7d
 1312 0288 84010000 		.4byte	0x184
 1313 028c 0F       		.uleb128 0xf
 1314 028d 34       		.byte	0x34
 1315 028e 01       		.byte	0x1
 1316 028f 86       		.byte	0x86
 1317 0290 2F030000 		.4byte	0x32f
 1318 0294 0A       		.uleb128 0xa
 1319 0295 45000000 		.4byte	.LASF59
 1320 0299 01       		.byte	0x1
 1321 029a 88       		.byte	0x88
 1322 029b 34030000 		.4byte	0x334
 1323 029f 02       		.byte	0x2
 1324 02a0 23       		.byte	0x23
 1325 02a1 00       		.uleb128 0
 1326 02a2 0A       		.uleb128 0xa
 1327 02a3 BE010000 		.4byte	.LASF60
 1328 02a7 01       		.byte	0x1
 1329 02a8 89       		.byte	0x89
 1330 02a9 2F030000 		.4byte	0x32f
 1331 02ad 02       		.byte	0x2
 1332 02ae 23       		.byte	0x23
 1333 02af 04       		.uleb128 0x4
 1334 02b0 0A       		.uleb128 0xa
 1335 02b1 B6020000 		.4byte	.LASF49
 1336 02b5 01       		.byte	0x1
 1337 02b6 8A       		.byte	0x8a
 1338 02b7 79010000 		.4byte	0x179
 1339 02bb 02       		.byte	0x2
 1340 02bc 23       		.byte	0x23
 1341 02bd 08       		.uleb128 0x8
 1342 02be 0A       		.uleb128 0xa
 1343 02bf CA010000 		.4byte	.LASF61
 1344 02c3 01       		.byte	0x1
 1345 02c4 8B       		.byte	0x8b
 1346 02c5 2F030000 		.4byte	0x32f
 1347 02c9 02       		.byte	0x2
 1348 02ca 23       		.byte	0x23
 1349 02cb 0C       		.uleb128 0xc
 1350 02cc 0B       		.uleb128 0xb
 1351 02cd 53435200 		.ascii	"SCR\000"
 1352 02d1 01       		.byte	0x1
 1353 02d2 8C       		.byte	0x8c
 1354 02d3 2F030000 		.4byte	0x32f
 1355 02d7 02       		.byte	0x2
 1356 02d8 23       		.byte	0x23
 1357 02d9 10       		.uleb128 0x10
 1358 02da 0B       		.uleb128 0xb
 1359 02db 43435200 		.ascii	"CCR\000"
 1360 02df 01       		.byte	0x1
 1361 02e0 8D       		.byte	0x8d
 1362 02e1 2F030000 		.4byte	0x32f
 1363 02e5 02       		.byte	0x2
 1364 02e6 23       		.byte	0x23
ARM GAS  /tmp/ccyHaRvc.s 			page 47


 1365 02e7 14       		.uleb128 0x14
 1366 02e8 0A       		.uleb128 0xa
 1367 02e9 C0020000 		.4byte	.LASF62
 1368 02ed 01       		.byte	0x1
 1369 02ee 8E       		.byte	0x8e
 1370 02ef 79010000 		.4byte	0x179
 1371 02f3 02       		.byte	0x2
 1372 02f4 23       		.byte	0x23
 1373 02f5 18       		.uleb128 0x18
 1374 02f6 0B       		.uleb128 0xb
 1375 02f7 53485000 		.ascii	"SHP\000"
 1376 02fb 01       		.byte	0x1
 1377 02fc 8F       		.byte	0x8f
 1378 02fd 49030000 		.4byte	0x349
 1379 0301 02       		.byte	0x2
 1380 0302 23       		.byte	0x23
 1381 0303 1C       		.uleb128 0x1c
 1382 0304 0A       		.uleb128 0xa
 1383 0305 20030000 		.4byte	.LASF63
 1384 0309 01       		.byte	0x1
 1385 030a 90       		.byte	0x90
 1386 030b 2F030000 		.4byte	0x32f
 1387 030f 02       		.byte	0x2
 1388 0310 23       		.byte	0x23
 1389 0311 24       		.uleb128 0x24
 1390 0312 0A       		.uleb128 0xa
 1391 0313 CA020000 		.4byte	.LASF53
 1392 0317 01       		.byte	0x1
 1393 0318 91       		.byte	0x91
 1394 0319 39030000 		.4byte	0x339
 1395 031d 02       		.byte	0x2
 1396 031e 23       		.byte	0x23
 1397 031f 28       		.uleb128 0x28
 1398 0320 0A       		.uleb128 0xa
 1399 0321 D0010000 		.4byte	.LASF64
 1400 0325 01       		.byte	0x1
 1401 0326 92       		.byte	0x92
 1402 0327 2F030000 		.4byte	0x32f
 1403 032b 02       		.byte	0x2
 1404 032c 23       		.byte	0x23
 1405 032d 30       		.uleb128 0x30
 1406 032e 00       		.byte	0
 1407 032f 0E       		.uleb128 0xe
 1408 0330 79010000 		.4byte	0x179
 1409 0334 10       		.uleb128 0x10
 1410 0335 2F030000 		.4byte	0x32f
 1411 0339 0C       		.uleb128 0xc
 1412 033a 79010000 		.4byte	0x179
 1413 033e 49030000 		.4byte	0x349
 1414 0342 0D       		.uleb128 0xd
 1415 0343 31020000 		.4byte	0x231
 1416 0347 01       		.byte	0x1
 1417 0348 00       		.byte	0
 1418 0349 0E       		.uleb128 0xe
 1419 034a 39030000 		.4byte	0x339
 1420 034e 07       		.uleb128 0x7
 1421 034f 16010000 		.4byte	.LASF65
ARM GAS  /tmp/ccyHaRvc.s 			page 48


 1422 0353 01       		.byte	0x1
 1423 0354 93       		.byte	0x93
 1424 0355 8C020000 		.4byte	0x28c
 1425 0359 11       		.uleb128 0x11
 1426 035a 01       		.byte	0x1
 1427 035b 29000000 		.4byte	0x29
 1428 035f 03       		.byte	0x3
 1429 0360 6D01     		.2byte	0x16d
 1430 0362 73030000 		.4byte	0x373
 1431 0366 05       		.uleb128 0x5
 1432 0367 E8020000 		.4byte	.LASF66
 1433 036b 00       		.byte	0
 1434 036c 12       		.uleb128 0x12
 1435 036d 53455400 		.ascii	"SET\000"
 1436 0371 01       		.byte	0x1
 1437 0372 00       		.byte	0
 1438 0373 13       		.uleb128 0x13
 1439 0374 44       		.byte	0x44
 1440 0375 03       		.byte	0x3
 1441 0376 7C01     		.2byte	0x17c
 1442 0378 3D040000 		.4byte	0x43d
 1443 037c 14       		.uleb128 0x14
 1444 037d 49535200 		.ascii	"ISR\000"
 1445 0381 03       		.byte	0x3
 1446 0382 7E01     		.2byte	0x17e
 1447 0384 2F030000 		.4byte	0x32f
 1448 0388 02       		.byte	0x2
 1449 0389 23       		.byte	0x23
 1450 038a 00       		.uleb128 0
 1451 038b 14       		.uleb128 0x14
 1452 038c 49455200 		.ascii	"IER\000"
 1453 0390 03       		.byte	0x3
 1454 0391 7F01     		.2byte	0x17f
 1455 0393 2F030000 		.4byte	0x32f
 1456 0397 02       		.byte	0x2
 1457 0398 23       		.byte	0x23
 1458 0399 04       		.uleb128 0x4
 1459 039a 14       		.uleb128 0x14
 1460 039b 435200   		.ascii	"CR\000"
 1461 039e 03       		.byte	0x3
 1462 039f 8001     		.2byte	0x180
 1463 03a1 2F030000 		.4byte	0x32f
 1464 03a5 02       		.byte	0x2
 1465 03a6 23       		.byte	0x23
 1466 03a7 08       		.uleb128 0x8
 1467 03a8 15       		.uleb128 0x15
 1468 03a9 A7040000 		.4byte	.LASF67
 1469 03ad 03       		.byte	0x3
 1470 03ae 8101     		.2byte	0x181
 1471 03b0 2F030000 		.4byte	0x32f
 1472 03b4 02       		.byte	0x2
 1473 03b5 23       		.byte	0x23
 1474 03b6 0C       		.uleb128 0xc
 1475 03b7 15       		.uleb128 0x15
 1476 03b8 AD040000 		.4byte	.LASF68
 1477 03bc 03       		.byte	0x3
 1478 03bd 8201     		.2byte	0x182
ARM GAS  /tmp/ccyHaRvc.s 			page 49


 1479 03bf 2F030000 		.4byte	0x32f
 1480 03c3 02       		.byte	0x2
 1481 03c4 23       		.byte	0x23
 1482 03c5 10       		.uleb128 0x10
 1483 03c6 15       		.uleb128 0x15
 1484 03c7 40000000 		.4byte	.LASF69
 1485 03cb 03       		.byte	0x3
 1486 03cc 8301     		.2byte	0x183
 1487 03ce 2F030000 		.4byte	0x32f
 1488 03d2 02       		.byte	0x2
 1489 03d3 23       		.byte	0x23
 1490 03d4 14       		.uleb128 0x14
 1491 03d5 15       		.uleb128 0x15
 1492 03d6 C0020000 		.4byte	.LASF62
 1493 03da 03       		.byte	0x3
 1494 03db 8401     		.2byte	0x184
 1495 03dd 79010000 		.4byte	0x179
 1496 03e1 02       		.byte	0x2
 1497 03e2 23       		.byte	0x23
 1498 03e3 18       		.uleb128 0x18
 1499 03e4 15       		.uleb128 0x15
 1500 03e5 CA020000 		.4byte	.LASF53
 1501 03e9 03       		.byte	0x3
 1502 03ea 8501     		.2byte	0x185
 1503 03ec 79010000 		.4byte	0x179
 1504 03f0 02       		.byte	0x2
 1505 03f1 23       		.byte	0x23
 1506 03f2 1C       		.uleb128 0x1c
 1507 03f3 14       		.uleb128 0x14
 1508 03f4 545200   		.ascii	"TR\000"
 1509 03f7 03       		.byte	0x3
 1510 03f8 8601     		.2byte	0x186
 1511 03fa 2F030000 		.4byte	0x32f
 1512 03fe 02       		.byte	0x2
 1513 03ff 23       		.byte	0x23
 1514 0400 20       		.uleb128 0x20
 1515 0401 15       		.uleb128 0x15
 1516 0402 D4020000 		.4byte	.LASF55
 1517 0406 03       		.byte	0x3
 1518 0407 8701     		.2byte	0x187
 1519 0409 79010000 		.4byte	0x179
 1520 040d 02       		.byte	0x2
 1521 040e 23       		.byte	0x23
 1522 040f 24       		.uleb128 0x24
 1523 0410 15       		.uleb128 0x15
 1524 0411 C3010000 		.4byte	.LASF70
 1525 0415 03       		.byte	0x3
 1526 0416 8801     		.2byte	0x188
 1527 0418 2F030000 		.4byte	0x32f
 1528 041c 02       		.byte	0x2
 1529 041d 23       		.byte	0x23
 1530 041e 28       		.uleb128 0x28
 1531 041f 15       		.uleb128 0x15
 1532 0420 DE020000 		.4byte	.LASF56
 1533 0424 03       		.byte	0x3
 1534 0425 8901     		.2byte	0x189
 1535 0427 3D040000 		.4byte	0x43d
ARM GAS  /tmp/ccyHaRvc.s 			page 50


 1536 042b 02       		.byte	0x2
 1537 042c 23       		.byte	0x23
 1538 042d 2C       		.uleb128 0x2c
 1539 042e 14       		.uleb128 0x14
 1540 042f 445200   		.ascii	"DR\000"
 1541 0432 03       		.byte	0x3
 1542 0433 8A01     		.2byte	0x18a
 1543 0435 2F030000 		.4byte	0x32f
 1544 0439 02       		.byte	0x2
 1545 043a 23       		.byte	0x23
 1546 043b 40       		.uleb128 0x40
 1547 043c 00       		.byte	0
 1548 043d 0C       		.uleb128 0xc
 1549 043e 79010000 		.4byte	0x179
 1550 0442 4D040000 		.4byte	0x44d
 1551 0446 0D       		.uleb128 0xd
 1552 0447 31020000 		.4byte	0x231
 1553 044b 04       		.byte	0x4
 1554 044c 00       		.byte	0
 1555 044d 06       		.uleb128 0x6
 1556 044e A9000000 		.4byte	.LASF71
 1557 0452 03       		.byte	0x3
 1558 0453 8B01     		.2byte	0x18b
 1559 0455 73030000 		.4byte	0x373
 1560 0459 13       		.uleb128 0x13
 1561 045a 38       		.byte	0x38
 1562 045b 03       		.byte	0x3
 1563 045c B502     		.2byte	0x2b5
 1564 045e 34050000 		.4byte	0x534
 1565 0462 14       		.uleb128 0x14
 1566 0463 435200   		.ascii	"CR\000"
 1567 0466 03       		.byte	0x3
 1568 0467 B702     		.2byte	0x2b7
 1569 0469 2F030000 		.4byte	0x32f
 1570 046d 02       		.byte	0x2
 1571 046e 23       		.byte	0x23
 1572 046f 00       		.uleb128 0
 1573 0470 15       		.uleb128 0x15
 1574 0471 CD040000 		.4byte	.LASF72
 1575 0475 03       		.byte	0x3
 1576 0476 B802     		.2byte	0x2b8
 1577 0478 2F030000 		.4byte	0x32f
 1578 047c 02       		.byte	0x2
 1579 047d 23       		.byte	0x23
 1580 047e 04       		.uleb128 0x4
 1581 047f 14       		.uleb128 0x14
 1582 0480 43495200 		.ascii	"CIR\000"
 1583 0484 03       		.byte	0x3
 1584 0485 B902     		.2byte	0x2b9
 1585 0487 2F030000 		.4byte	0x32f
 1586 048b 02       		.byte	0x2
 1587 048c 23       		.byte	0x23
 1588 048d 08       		.uleb128 0x8
 1589 048e 15       		.uleb128 0x15
 1590 048f 97000000 		.4byte	.LASF73
 1591 0493 03       		.byte	0x3
 1592 0494 BA02     		.2byte	0x2ba
ARM GAS  /tmp/ccyHaRvc.s 			page 51


 1593 0496 2F030000 		.4byte	0x32f
 1594 049a 02       		.byte	0x2
 1595 049b 23       		.byte	0x23
 1596 049c 0C       		.uleb128 0xc
 1597 049d 15       		.uleb128 0x15
 1598 049e 65020000 		.4byte	.LASF74
 1599 04a2 03       		.byte	0x3
 1600 04a3 BB02     		.2byte	0x2bb
 1601 04a5 2F030000 		.4byte	0x32f
 1602 04a9 02       		.byte	0x2
 1603 04aa 23       		.byte	0x23
 1604 04ab 10       		.uleb128 0x10
 1605 04ac 15       		.uleb128 0x15
 1606 04ad 90050000 		.4byte	.LASF75
 1607 04b1 03       		.byte	0x3
 1608 04b2 BC02     		.2byte	0x2bc
 1609 04b4 2F030000 		.4byte	0x32f
 1610 04b8 02       		.byte	0x2
 1611 04b9 23       		.byte	0x23
 1612 04ba 14       		.uleb128 0x14
 1613 04bb 15       		.uleb128 0x15
 1614 04bc 0E000000 		.4byte	.LASF76
 1615 04c0 03       		.byte	0x3
 1616 04c1 BD02     		.2byte	0x2bd
 1617 04c3 2F030000 		.4byte	0x32f
 1618 04c7 02       		.byte	0x2
 1619 04c8 23       		.byte	0x23
 1620 04c9 18       		.uleb128 0x18
 1621 04ca 15       		.uleb128 0x15
 1622 04cb 43040000 		.4byte	.LASF77
 1623 04cf 03       		.byte	0x3
 1624 04d0 BE02     		.2byte	0x2be
 1625 04d2 2F030000 		.4byte	0x32f
 1626 04d6 02       		.byte	0x2
 1627 04d7 23       		.byte	0x23
 1628 04d8 1C       		.uleb128 0x1c
 1629 04d9 15       		.uleb128 0x15
 1630 04da A2040000 		.4byte	.LASF78
 1631 04de 03       		.byte	0x3
 1632 04df BF02     		.2byte	0x2bf
 1633 04e1 2F030000 		.4byte	0x32f
 1634 04e5 02       		.byte	0x2
 1635 04e6 23       		.byte	0x23
 1636 04e7 20       		.uleb128 0x20
 1637 04e8 14       		.uleb128 0x14
 1638 04e9 43535200 		.ascii	"CSR\000"
 1639 04ed 03       		.byte	0x3
 1640 04ee C002     		.2byte	0x2c0
 1641 04f0 2F030000 		.4byte	0x32f
 1642 04f4 02       		.byte	0x2
 1643 04f5 23       		.byte	0x23
 1644 04f6 24       		.uleb128 0x24
 1645 04f7 15       		.uleb128 0x15
 1646 04f8 47020000 		.4byte	.LASF79
 1647 04fc 03       		.byte	0x3
 1648 04fd C102     		.2byte	0x2c1
 1649 04ff 2F030000 		.4byte	0x32f
ARM GAS  /tmp/ccyHaRvc.s 			page 52


 1650 0503 02       		.byte	0x2
 1651 0504 23       		.byte	0x23
 1652 0505 28       		.uleb128 0x28
 1653 0506 15       		.uleb128 0x15
 1654 0507 AD040000 		.4byte	.LASF68
 1655 050b 03       		.byte	0x3
 1656 050c C202     		.2byte	0x2c2
 1657 050e 2F030000 		.4byte	0x32f
 1658 0512 02       		.byte	0x2
 1659 0513 23       		.byte	0x23
 1660 0514 2C       		.uleb128 0x2c
 1661 0515 15       		.uleb128 0x15
 1662 0516 B3040000 		.4byte	.LASF80
 1663 051a 03       		.byte	0x3
 1664 051b C302     		.2byte	0x2c3
 1665 051d 2F030000 		.4byte	0x32f
 1666 0521 02       		.byte	0x2
 1667 0522 23       		.byte	0x23
 1668 0523 30       		.uleb128 0x30
 1669 0524 14       		.uleb128 0x14
 1670 0525 43523200 		.ascii	"CR2\000"
 1671 0529 03       		.byte	0x3
 1672 052a C402     		.2byte	0x2c4
 1673 052c 2F030000 		.4byte	0x32f
 1674 0530 02       		.byte	0x2
 1675 0531 23       		.byte	0x23
 1676 0532 34       		.uleb128 0x34
 1677 0533 00       		.byte	0
 1678 0534 06       		.uleb128 0x6
 1679 0535 96010000 		.4byte	.LASF81
 1680 0539 03       		.byte	0x3
 1681 053a C502     		.2byte	0x2c5
 1682 053c 59040000 		.4byte	0x459
 1683 0540 16       		.uleb128 0x16
 1684 0541 5B030000 		.4byte	.LASF82
 1685 0545 01       		.byte	0x1
 1686 0546 2B03     		.2byte	0x32b
 1687 0548 01       		.byte	0x1
 1688 0549 00000000 		.4byte	.LFB11
 1689 054d 2C000000 		.4byte	.LFE11
 1690 0551 00000000 		.4byte	.LLST0
 1691 0555 01       		.byte	0x1
 1692 0556 6A050000 		.4byte	0x56a
 1693 055a 17       		.uleb128 0x17
 1694 055b 17020000 		.4byte	.LASF84
 1695 055f 01       		.byte	0x1
 1696 0560 2B03     		.2byte	0x32b
 1697 0562 14010000 		.4byte	0x114
 1698 0566 02       		.byte	0x2
 1699 0567 91       		.byte	0x91
 1700 0568 7F       		.sleb128 -1
 1701 0569 00       		.byte	0
 1702 056a 16       		.uleb128 0x16
 1703 056b A7050000 		.4byte	.LASF83
 1704 056f 01       		.byte	0x1
 1705 0570 7C03     		.2byte	0x37c
 1706 0572 01       		.byte	0x1
ARM GAS  /tmp/ccyHaRvc.s 			page 53


 1707 0573 00000000 		.4byte	.LFB16
 1708 0577 EC000000 		.4byte	.LFE16
 1709 057b 20000000 		.4byte	.LLST1
 1710 057f 01       		.byte	0x1
 1711 0580 A3050000 		.4byte	0x5a3
 1712 0584 17       		.uleb128 0x17
 1713 0585 17020000 		.4byte	.LASF84
 1714 0589 01       		.byte	0x1
 1715 058a 7C03     		.2byte	0x37c
 1716 058c 14010000 		.4byte	0x114
 1717 0590 02       		.byte	0x2
 1718 0591 91       		.byte	0x91
 1719 0592 6F       		.sleb128 -17
 1720 0593 17       		.uleb128 0x17
 1721 0594 DF010000 		.4byte	.LASF85
 1722 0598 01       		.byte	0x1
 1723 0599 7C03     		.2byte	0x37c
 1724 059b 79010000 		.4byte	0x179
 1725 059f 02       		.byte	0x2
 1726 05a0 91       		.byte	0x91
 1727 05a1 68       		.sleb128 -24
 1728 05a2 00       		.byte	0
 1729 05a3 18       		.uleb128 0x18
 1730 05a4 01       		.byte	0x1
 1731 05a5 21040000 		.4byte	.LASF86
 1732 05a9 02       		.byte	0x2
 1733 05aa 3D       		.byte	0x3d
 1734 05ab 01       		.byte	0x1
 1735 05ac 00000000 		.4byte	.LFB20
 1736 05b0 C0000000 		.4byte	.LFE20
 1737 05b4 4C000000 		.4byte	.LLST2
 1738 05b8 01       		.byte	0x1
 1739 05b9 19       		.uleb128 0x19
 1740 05ba 01       		.byte	0x1
 1741 05bb 77040000 		.4byte	.LASF87
 1742 05bf 02       		.byte	0x2
 1743 05c0 78       		.byte	0x78
 1744 05c1 01       		.byte	0x1
 1745 05c2 00000000 		.4byte	.LFB21
 1746 05c6 78000000 		.4byte	.LFE21
 1747 05ca 02       		.byte	0x2
 1748 05cb 7D       		.byte	0x7d
 1749 05cc 00       		.sleb128 0
 1750 05cd 01       		.byte	0x1
 1751 05ce 1A       		.uleb128 0x1a
 1752 05cf 01       		.byte	0x1
 1753 05d0 2F020000 		.4byte	.LASF96
 1754 05d4 02       		.byte	0x2
 1755 05d5 92       		.byte	0x92
 1756 05d6 01       		.byte	0x1
 1757 05d7 00000000 		.4byte	.LFB22
 1758 05db 28000000 		.4byte	.LFE22
 1759 05df 6C000000 		.4byte	.LLST3
 1760 05e3 01       		.byte	0x1
 1761 05e4 F7050000 		.4byte	0x5f7
 1762 05e8 1B       		.uleb128 0x1b
 1763 05e9 87000000 		.4byte	.LASF92
ARM GAS  /tmp/ccyHaRvc.s 			page 54


 1764 05ed 02       		.byte	0x2
 1765 05ee 94       		.byte	0x94
 1766 05ef 79010000 		.4byte	0x179
 1767 05f3 02       		.byte	0x2
 1768 05f4 91       		.byte	0x91
 1769 05f5 7C       		.sleb128 -4
 1770 05f6 00       		.byte	0
 1771 05f7 1C       		.uleb128 0x1c
 1772 05f8 01       		.byte	0x1
 1773 05f9 2B040000 		.4byte	.LASF89
 1774 05fd 02       		.byte	0x2
 1775 05fe A2       		.byte	0xa2
 1776 05ff 01       		.byte	0x1
 1777 0600 32010000 		.4byte	0x132
 1778 0604 00000000 		.4byte	.LFB23
 1779 0608 34000000 		.4byte	.LFE23
 1780 060c 8C000000 		.4byte	.LLST4
 1781 0610 01       		.byte	0x1
 1782 0611 24060000 		.4byte	0x624
 1783 0615 1D       		.uleb128 0x1d
 1784 0616 94030000 		.4byte	.LASF88
 1785 061a 02       		.byte	0x2
 1786 061b A2       		.byte	0xa2
 1787 061c 67010000 		.4byte	0x167
 1788 0620 02       		.byte	0x2
 1789 0621 91       		.byte	0x91
 1790 0622 7C       		.sleb128 -4
 1791 0623 00       		.byte	0
 1792 0624 1C       		.uleb128 0x1c
 1793 0625 01       		.byte	0x1
 1794 0626 4D030000 		.4byte	.LASF90
 1795 062a 02       		.byte	0x2
 1796 062b B1       		.byte	0xb1
 1797 062c 01       		.byte	0x1
 1798 062d 32010000 		.4byte	0x132
 1799 0631 00000000 		.4byte	.LFB24
 1800 0635 94000000 		.4byte	.LFE24
 1801 0639 AC000000 		.4byte	.LLST5
 1802 063d 01       		.byte	0x1
 1803 063e 51060000 		.4byte	0x651
 1804 0642 1D       		.uleb128 0x1d
 1805 0643 94030000 		.4byte	.LASF88
 1806 0647 02       		.byte	0x2
 1807 0648 B1       		.byte	0xb1
 1808 0649 29000000 		.4byte	0x29
 1809 064d 02       		.byte	0x2
 1810 064e 91       		.byte	0x91
 1811 064f 7F       		.sleb128 -1
 1812 0650 00       		.byte	0
 1813 0651 1C       		.uleb128 0x1c
 1814 0652 01       		.byte	0x1
 1815 0653 FC020000 		.4byte	.LASF91
 1816 0657 02       		.byte	0x2
 1817 0658 D0       		.byte	0xd0
 1818 0659 01       		.byte	0x1
 1819 065a 67010000 		.4byte	0x167
 1820 065e 00000000 		.4byte	.LFB25
ARM GAS  /tmp/ccyHaRvc.s 			page 55


 1821 0662 5C000000 		.4byte	.LFE25
 1822 0666 CC000000 		.4byte	.LLST6
 1823 066a 01       		.byte	0x1
 1824 066b 9A060000 		.4byte	0x69a
 1825 066f 1B       		.uleb128 0x1b
 1826 0670 87000000 		.4byte	.LASF92
 1827 0674 02       		.byte	0x2
 1828 0675 D2       		.byte	0xd2
 1829 0676 79010000 		.4byte	0x179
 1830 067a 02       		.byte	0x2
 1831 067b 91       		.byte	0x91
 1832 067c 7C       		.sleb128 -4
 1833 067d 1B       		.uleb128 0x1b
 1834 067e 1C020000 		.4byte	.LASF93
 1835 0682 02       		.byte	0x2
 1836 0683 D2       		.byte	0xd2
 1837 0684 79010000 		.4byte	0x179
 1838 0688 02       		.byte	0x2
 1839 0689 91       		.byte	0x91
 1840 068a 78       		.sleb128 -8
 1841 068b 1B       		.uleb128 0x1b
 1842 068c 36010000 		.4byte	.LASF94
 1843 0690 02       		.byte	0x2
 1844 0691 D2       		.byte	0xd2
 1845 0692 79010000 		.4byte	0x179
 1846 0696 02       		.byte	0x2
 1847 0697 91       		.byte	0x91
 1848 0698 74       		.sleb128 -12
 1849 0699 00       		.byte	0
 1850 069a 1E       		.uleb128 0x1e
 1851 069b 01       		.byte	0x1
 1852 069c 4F020000 		.4byte	.LASF95
 1853 06a0 02       		.byte	0x2
 1854 06a1 2B01     		.2byte	0x12b
 1855 06a3 01       		.byte	0x1
 1856 06a4 00000000 		.4byte	.LFB26
 1857 06a8 60000000 		.4byte	.LFE26
 1858 06ac 02       		.byte	0x2
 1859 06ad 7D       		.byte	0x7d
 1860 06ae 00       		.sleb128 0
 1861 06af 01       		.byte	0x1
 1862 06b0 1F       		.uleb128 0x1f
 1863 06b1 01       		.byte	0x1
 1864 06b2 D0030000 		.4byte	.LASF97
 1865 06b6 02       		.byte	0x2
 1866 06b7 3E01     		.2byte	0x13e
 1867 06b9 01       		.byte	0x1
 1868 06ba 00000000 		.4byte	.LFB27
 1869 06be 4C000000 		.4byte	.LFE27
 1870 06c2 EC000000 		.4byte	.LLST7
 1871 06c6 01       		.byte	0x1
 1872 06c7 E8060000 		.4byte	0x6e8
 1873 06cb 20       		.uleb128 0x20
 1874 06cc 6900     		.ascii	"i\000"
 1875 06ce 02       		.byte	0x2
 1876 06cf 4001     		.2byte	0x140
 1877 06d1 29000000 		.4byte	0x29
ARM GAS  /tmp/ccyHaRvc.s 			page 56


 1878 06d5 02       		.byte	0x2
 1879 06d6 91       		.byte	0x91
 1880 06d7 7F       		.sleb128 -1
 1881 06d8 21       		.uleb128 0x21
 1882 06d9 1F010000 		.4byte	.LASF98
 1883 06dd 02       		.byte	0x2
 1884 06de 4101     		.2byte	0x141
 1885 06e0 32010000 		.4byte	0x132
 1886 06e4 02       		.byte	0x2
 1887 06e5 91       		.byte	0x91
 1888 06e6 7C       		.sleb128 -4
 1889 06e7 00       		.byte	0
 1890 06e8 22       		.uleb128 0x22
 1891 06e9 01       		.byte	0x1
 1892 06ea A2010000 		.4byte	.LASF99
 1893 06ee 02       		.byte	0x2
 1894 06ef 4D01     		.2byte	0x14d
 1895 06f1 01       		.byte	0x1
 1896 06f2 32010000 		.4byte	0x132
 1897 06f6 00000000 		.4byte	.LFB28
 1898 06fa 6C000000 		.4byte	.LFE28
 1899 06fe 0C010000 		.4byte	.LLST8
 1900 0702 01       		.byte	0x1
 1901 0703 22070000 		.4byte	0x722
 1902 0707 20       		.uleb128 0x20
 1903 0708 6900     		.ascii	"i\000"
 1904 070a 02       		.byte	0x2
 1905 070b 4F01     		.2byte	0x14f
 1906 070d 29000000 		.4byte	0x29
 1907 0711 02       		.byte	0x2
 1908 0712 91       		.byte	0x91
 1909 0713 7F       		.sleb128 -1
 1910 0714 20       		.uleb128 0x20
 1911 0715 7400     		.ascii	"t\000"
 1912 0717 02       		.byte	0x2
 1913 0718 5001     		.2byte	0x150
 1914 071a 67010000 		.4byte	0x167
 1915 071e 02       		.byte	0x2
 1916 071f 91       		.byte	0x91
 1917 0720 78       		.sleb128 -8
 1918 0721 00       		.byte	0
 1919 0722 0C       		.uleb128 0xc
 1920 0723 32010000 		.4byte	0x132
 1921 0727 2D070000 		.4byte	0x72d
 1922 072b 23       		.uleb128 0x23
 1923 072c 00       		.byte	0
 1924 072d 24       		.uleb128 0x24
 1925 072e A0050000 		.4byte	.LASF100
 1926 0732 02       		.byte	0x2
 1927 0733 0E       		.byte	0xe
 1928 0734 3A070000 		.4byte	0x73a
 1929 0738 01       		.byte	0x1
 1930 0739 01       		.byte	0x1
 1931 073a 0E       		.uleb128 0xe
 1932 073b 22070000 		.4byte	0x722
 1933 073f 24       		.uleb128 0x24
 1934 0740 6A030000 		.4byte	.LASF101
ARM GAS  /tmp/ccyHaRvc.s 			page 57


 1935 0744 02       		.byte	0x2
 1936 0745 0F       		.byte	0xf
 1937 0746 4C070000 		.4byte	0x74c
 1938 074a 01       		.byte	0x1
 1939 074b 01       		.byte	0x1
 1940 074c 0E       		.uleb128 0xe
 1941 074d 32010000 		.4byte	0x132
 1942 0751 24       		.uleb128 0x24
 1943 0752 1F000000 		.4byte	.LASF102
 1944 0756 02       		.byte	0x2
 1945 0757 12       		.byte	0x12
 1946 0758 5E070000 		.4byte	0x75e
 1947 075c 01       		.byte	0x1
 1948 075d 01       		.byte	0x1
 1949 075e 0E       		.uleb128 0xe
 1950 075f 29000000 		.4byte	0x29
 1951 0763 25       		.uleb128 0x25
 1952 0764 A7030000 		.4byte	.LASF103
 1953 0768 02       		.byte	0x2
 1954 0769 1B       		.byte	0x1b
 1955 076a 75070000 		.4byte	0x775
 1956 076e 01       		.byte	0x1
 1957 076f 05       		.byte	0x5
 1958 0770 03       		.byte	0x3
 1959 0771 00000000 		.4byte	p_channel
 1960 0775 26       		.uleb128 0x26
 1961 0776 04       		.byte	0x4
 1962 0777 4C070000 		.4byte	0x74c
 1963 077b 0C       		.uleb128 0xc
 1964 077c 32010000 		.4byte	0x132
 1965 0780 8B070000 		.4byte	0x78b
 1966 0784 0D       		.uleb128 0xd
 1967 0785 31020000 		.4byte	0x231
 1968 0789 1F       		.byte	0x1f
 1969 078a 00       		.byte	0
 1970 078b 25       		.uleb128 0x25
 1971 078c 09010000 		.4byte	.LASF104
 1972 0790 02       		.byte	0x2
 1973 0791 29       		.byte	0x29
 1974 0792 7B070000 		.4byte	0x77b
 1975 0796 01       		.byte	0x1
 1976 0797 05       		.byte	0x5
 1977 0798 03       		.byte	0x3
 1978 0799 00000000 		.4byte	VoltagePhoto
 1979 079d 25       		.uleb128 0x25
 1980 079e 8A010000 		.4byte	.LASF105
 1981 07a2 02       		.byte	0x2
 1982 07a3 2A       		.byte	0x2a
 1983 07a4 29000000 		.4byte	0x29
 1984 07a8 01       		.byte	0x1
 1985 07a9 05       		.byte	0x5
 1986 07aa 03       		.byte	0x3
 1987 07ab 00000000 		.4byte	photo_index
 1988 07af 25       		.uleb128 0x25
 1989 07b0 C2040000 		.4byte	.LASF106
 1990 07b4 02       		.byte	0x2
 1991 07b5 2B       		.byte	0x2b
ARM GAS  /tmp/ccyHaRvc.s 			page 58


 1992 07b6 32010000 		.4byte	0x132
 1993 07ba 01       		.byte	0x1
 1994 07bb 05       		.byte	0x5
 1995 07bc 03       		.byte	0x3
 1996 07bd 00000000 		.4byte	last_photo
 1997 07c1 25       		.uleb128 0x25
 1998 07c2 25010000 		.4byte	.LASF107
 1999 07c6 02       		.byte	0x2
 2000 07c7 2C       		.byte	0x2c
 2001 07c8 29000000 		.4byte	0x29
 2002 07cc 01       		.byte	0x1
 2003 07cd 05       		.byte	0x5
 2004 07ce 03       		.byte	0x3
 2005 07cf 00000000 		.4byte	new_photo_sample
 2006 07d3 00       		.byte	0
 2007              		.section	.debug_abbrev,"",%progbits
 2008              	.Ldebug_abbrev0:
 2009 0000 01       		.uleb128 0x1
 2010 0001 11       		.uleb128 0x11
 2011 0002 01       		.byte	0x1
 2012 0003 25       		.uleb128 0x25
 2013 0004 0E       		.uleb128 0xe
 2014 0005 13       		.uleb128 0x13
 2015 0006 0B       		.uleb128 0xb
 2016 0007 03       		.uleb128 0x3
 2017 0008 0E       		.uleb128 0xe
 2018 0009 1B       		.uleb128 0x1b
 2019 000a 0E       		.uleb128 0xe
 2020 000b 55       		.uleb128 0x55
 2021 000c 06       		.uleb128 0x6
 2022 000d 11       		.uleb128 0x11
 2023 000e 01       		.uleb128 0x1
 2024 000f 52       		.uleb128 0x52
 2025 0010 01       		.uleb128 0x1
 2026 0011 10       		.uleb128 0x10
 2027 0012 06       		.uleb128 0x6
 2028 0013 00       		.byte	0
 2029 0014 00       		.byte	0
 2030 0015 02       		.uleb128 0x2
 2031 0016 24       		.uleb128 0x24
 2032 0017 00       		.byte	0
 2033 0018 0B       		.uleb128 0xb
 2034 0019 0B       		.uleb128 0xb
 2035 001a 3E       		.uleb128 0x3e
 2036 001b 0B       		.uleb128 0xb
 2037 001c 03       		.uleb128 0x3
 2038 001d 0E       		.uleb128 0xe
 2039 001e 00       		.byte	0
 2040 001f 00       		.byte	0
 2041 0020 03       		.uleb128 0x3
 2042 0021 04       		.uleb128 0x4
 2043 0022 01       		.byte	0x1
 2044 0023 03       		.uleb128 0x3
 2045 0024 0E       		.uleb128 0xe
 2046 0025 0B       		.uleb128 0xb
 2047 0026 0B       		.uleb128 0xb
 2048 0027 49       		.uleb128 0x49
ARM GAS  /tmp/ccyHaRvc.s 			page 59


 2049 0028 13       		.uleb128 0x13
 2050 0029 3A       		.uleb128 0x3a
 2051 002a 0B       		.uleb128 0xb
 2052 002b 3B       		.uleb128 0x3b
 2053 002c 0B       		.uleb128 0xb
 2054 002d 01       		.uleb128 0x1
 2055 002e 13       		.uleb128 0x13
 2056 002f 00       		.byte	0
 2057 0030 00       		.byte	0
 2058 0031 04       		.uleb128 0x4
 2059 0032 28       		.uleb128 0x28
 2060 0033 00       		.byte	0
 2061 0034 03       		.uleb128 0x3
 2062 0035 0E       		.uleb128 0xe
 2063 0036 1C       		.uleb128 0x1c
 2064 0037 0D       		.uleb128 0xd
 2065 0038 00       		.byte	0
 2066 0039 00       		.byte	0
 2067 003a 05       		.uleb128 0x5
 2068 003b 28       		.uleb128 0x28
 2069 003c 00       		.byte	0
 2070 003d 03       		.uleb128 0x3
 2071 003e 0E       		.uleb128 0xe
 2072 003f 1C       		.uleb128 0x1c
 2073 0040 0B       		.uleb128 0xb
 2074 0041 00       		.byte	0
 2075 0042 00       		.byte	0
 2076 0043 06       		.uleb128 0x6
 2077 0044 16       		.uleb128 0x16
 2078 0045 00       		.byte	0
 2079 0046 03       		.uleb128 0x3
 2080 0047 0E       		.uleb128 0xe
 2081 0048 3A       		.uleb128 0x3a
 2082 0049 0B       		.uleb128 0xb
 2083 004a 3B       		.uleb128 0x3b
 2084 004b 05       		.uleb128 0x5
 2085 004c 49       		.uleb128 0x49
 2086 004d 13       		.uleb128 0x13
 2087 004e 00       		.byte	0
 2088 004f 00       		.byte	0
 2089 0050 07       		.uleb128 0x7
 2090 0051 16       		.uleb128 0x16
 2091 0052 00       		.byte	0
 2092 0053 03       		.uleb128 0x3
 2093 0054 0E       		.uleb128 0xe
 2094 0055 3A       		.uleb128 0x3a
 2095 0056 0B       		.uleb128 0xb
 2096 0057 3B       		.uleb128 0x3b
 2097 0058 0B       		.uleb128 0xb
 2098 0059 49       		.uleb128 0x49
 2099 005a 13       		.uleb128 0x13
 2100 005b 00       		.byte	0
 2101 005c 00       		.byte	0
 2102 005d 08       		.uleb128 0x8
 2103 005e 24       		.uleb128 0x24
 2104 005f 00       		.byte	0
 2105 0060 0B       		.uleb128 0xb
ARM GAS  /tmp/ccyHaRvc.s 			page 60


 2106 0061 0B       		.uleb128 0xb
 2107 0062 3E       		.uleb128 0x3e
 2108 0063 0B       		.uleb128 0xb
 2109 0064 03       		.uleb128 0x3
 2110 0065 08       		.uleb128 0x8
 2111 0066 00       		.byte	0
 2112 0067 00       		.byte	0
 2113 0068 09       		.uleb128 0x9
 2114 0069 13       		.uleb128 0x13
 2115 006a 01       		.byte	0x1
 2116 006b 0B       		.uleb128 0xb
 2117 006c 05       		.uleb128 0x5
 2118 006d 3A       		.uleb128 0x3a
 2119 006e 0B       		.uleb128 0xb
 2120 006f 3B       		.uleb128 0x3b
 2121 0070 0B       		.uleb128 0xb
 2122 0071 01       		.uleb128 0x1
 2123 0072 13       		.uleb128 0x13
 2124 0073 00       		.byte	0
 2125 0074 00       		.byte	0
 2126 0075 0A       		.uleb128 0xa
 2127 0076 0D       		.uleb128 0xd
 2128 0077 00       		.byte	0
 2129 0078 03       		.uleb128 0x3
 2130 0079 0E       		.uleb128 0xe
 2131 007a 3A       		.uleb128 0x3a
 2132 007b 0B       		.uleb128 0xb
 2133 007c 3B       		.uleb128 0x3b
 2134 007d 0B       		.uleb128 0xb
 2135 007e 49       		.uleb128 0x49
 2136 007f 13       		.uleb128 0x13
 2137 0080 38       		.uleb128 0x38
 2138 0081 0A       		.uleb128 0xa
 2139 0082 00       		.byte	0
 2140 0083 00       		.byte	0
 2141 0084 0B       		.uleb128 0xb
 2142 0085 0D       		.uleb128 0xd
 2143 0086 00       		.byte	0
 2144 0087 03       		.uleb128 0x3
 2145 0088 08       		.uleb128 0x8
 2146 0089 3A       		.uleb128 0x3a
 2147 008a 0B       		.uleb128 0xb
 2148 008b 3B       		.uleb128 0x3b
 2149 008c 0B       		.uleb128 0xb
 2150 008d 49       		.uleb128 0x49
 2151 008e 13       		.uleb128 0x13
 2152 008f 38       		.uleb128 0x38
 2153 0090 0A       		.uleb128 0xa
 2154 0091 00       		.byte	0
 2155 0092 00       		.byte	0
 2156 0093 0C       		.uleb128 0xc
 2157 0094 01       		.uleb128 0x1
 2158 0095 01       		.byte	0x1
 2159 0096 49       		.uleb128 0x49
 2160 0097 13       		.uleb128 0x13
 2161 0098 01       		.uleb128 0x1
 2162 0099 13       		.uleb128 0x13
ARM GAS  /tmp/ccyHaRvc.s 			page 61


 2163 009a 00       		.byte	0
 2164 009b 00       		.byte	0
 2165 009c 0D       		.uleb128 0xd
 2166 009d 21       		.uleb128 0x21
 2167 009e 00       		.byte	0
 2168 009f 49       		.uleb128 0x49
 2169 00a0 13       		.uleb128 0x13
 2170 00a1 2F       		.uleb128 0x2f
 2171 00a2 0B       		.uleb128 0xb
 2172 00a3 00       		.byte	0
 2173 00a4 00       		.byte	0
 2174 00a5 0E       		.uleb128 0xe
 2175 00a6 35       		.uleb128 0x35
 2176 00a7 00       		.byte	0
 2177 00a8 49       		.uleb128 0x49
 2178 00a9 13       		.uleb128 0x13
 2179 00aa 00       		.byte	0
 2180 00ab 00       		.byte	0
 2181 00ac 0F       		.uleb128 0xf
 2182 00ad 13       		.uleb128 0x13
 2183 00ae 01       		.byte	0x1
 2184 00af 0B       		.uleb128 0xb
 2185 00b0 0B       		.uleb128 0xb
 2186 00b1 3A       		.uleb128 0x3a
 2187 00b2 0B       		.uleb128 0xb
 2188 00b3 3B       		.uleb128 0x3b
 2189 00b4 0B       		.uleb128 0xb
 2190 00b5 01       		.uleb128 0x1
 2191 00b6 13       		.uleb128 0x13
 2192 00b7 00       		.byte	0
 2193 00b8 00       		.byte	0
 2194 00b9 10       		.uleb128 0x10
 2195 00ba 26       		.uleb128 0x26
 2196 00bb 00       		.byte	0
 2197 00bc 49       		.uleb128 0x49
 2198 00bd 13       		.uleb128 0x13
 2199 00be 00       		.byte	0
 2200 00bf 00       		.byte	0
 2201 00c0 11       		.uleb128 0x11
 2202 00c1 04       		.uleb128 0x4
 2203 00c2 01       		.byte	0x1
 2204 00c3 0B       		.uleb128 0xb
 2205 00c4 0B       		.uleb128 0xb
 2206 00c5 49       		.uleb128 0x49
 2207 00c6 13       		.uleb128 0x13
 2208 00c7 3A       		.uleb128 0x3a
 2209 00c8 0B       		.uleb128 0xb
 2210 00c9 3B       		.uleb128 0x3b
 2211 00ca 05       		.uleb128 0x5
 2212 00cb 01       		.uleb128 0x1
 2213 00cc 13       		.uleb128 0x13
 2214 00cd 00       		.byte	0
 2215 00ce 00       		.byte	0
 2216 00cf 12       		.uleb128 0x12
 2217 00d0 28       		.uleb128 0x28
 2218 00d1 00       		.byte	0
 2219 00d2 03       		.uleb128 0x3
ARM GAS  /tmp/ccyHaRvc.s 			page 62


 2220 00d3 08       		.uleb128 0x8
 2221 00d4 1C       		.uleb128 0x1c
 2222 00d5 0B       		.uleb128 0xb
 2223 00d6 00       		.byte	0
 2224 00d7 00       		.byte	0
 2225 00d8 13       		.uleb128 0x13
 2226 00d9 13       		.uleb128 0x13
 2227 00da 01       		.byte	0x1
 2228 00db 0B       		.uleb128 0xb
 2229 00dc 0B       		.uleb128 0xb
 2230 00dd 3A       		.uleb128 0x3a
 2231 00de 0B       		.uleb128 0xb
 2232 00df 3B       		.uleb128 0x3b
 2233 00e0 05       		.uleb128 0x5
 2234 00e1 01       		.uleb128 0x1
 2235 00e2 13       		.uleb128 0x13
 2236 00e3 00       		.byte	0
 2237 00e4 00       		.byte	0
 2238 00e5 14       		.uleb128 0x14
 2239 00e6 0D       		.uleb128 0xd
 2240 00e7 00       		.byte	0
 2241 00e8 03       		.uleb128 0x3
 2242 00e9 08       		.uleb128 0x8
 2243 00ea 3A       		.uleb128 0x3a
 2244 00eb 0B       		.uleb128 0xb
 2245 00ec 3B       		.uleb128 0x3b
 2246 00ed 05       		.uleb128 0x5
 2247 00ee 49       		.uleb128 0x49
 2248 00ef 13       		.uleb128 0x13
 2249 00f0 38       		.uleb128 0x38
 2250 00f1 0A       		.uleb128 0xa
 2251 00f2 00       		.byte	0
 2252 00f3 00       		.byte	0
 2253 00f4 15       		.uleb128 0x15
 2254 00f5 0D       		.uleb128 0xd
 2255 00f6 00       		.byte	0
 2256 00f7 03       		.uleb128 0x3
 2257 00f8 0E       		.uleb128 0xe
 2258 00f9 3A       		.uleb128 0x3a
 2259 00fa 0B       		.uleb128 0xb
 2260 00fb 3B       		.uleb128 0x3b
 2261 00fc 05       		.uleb128 0x5
 2262 00fd 49       		.uleb128 0x49
 2263 00fe 13       		.uleb128 0x13
 2264 00ff 38       		.uleb128 0x38
 2265 0100 0A       		.uleb128 0xa
 2266 0101 00       		.byte	0
 2267 0102 00       		.byte	0
 2268 0103 16       		.uleb128 0x16
 2269 0104 2E       		.uleb128 0x2e
 2270 0105 01       		.byte	0x1
 2271 0106 03       		.uleb128 0x3
 2272 0107 0E       		.uleb128 0xe
 2273 0108 3A       		.uleb128 0x3a
 2274 0109 0B       		.uleb128 0xb
 2275 010a 3B       		.uleb128 0x3b
 2276 010b 05       		.uleb128 0x5
ARM GAS  /tmp/ccyHaRvc.s 			page 63


 2277 010c 27       		.uleb128 0x27
 2278 010d 0C       		.uleb128 0xc
 2279 010e 11       		.uleb128 0x11
 2280 010f 01       		.uleb128 0x1
 2281 0110 12       		.uleb128 0x12
 2282 0111 01       		.uleb128 0x1
 2283 0112 40       		.uleb128 0x40
 2284 0113 06       		.uleb128 0x6
 2285 0114 9742     		.uleb128 0x2117
 2286 0116 0C       		.uleb128 0xc
 2287 0117 01       		.uleb128 0x1
 2288 0118 13       		.uleb128 0x13
 2289 0119 00       		.byte	0
 2290 011a 00       		.byte	0
 2291 011b 17       		.uleb128 0x17
 2292 011c 05       		.uleb128 0x5
 2293 011d 00       		.byte	0
 2294 011e 03       		.uleb128 0x3
 2295 011f 0E       		.uleb128 0xe
 2296 0120 3A       		.uleb128 0x3a
 2297 0121 0B       		.uleb128 0xb
 2298 0122 3B       		.uleb128 0x3b
 2299 0123 05       		.uleb128 0x5
 2300 0124 49       		.uleb128 0x49
 2301 0125 13       		.uleb128 0x13
 2302 0126 02       		.uleb128 0x2
 2303 0127 0A       		.uleb128 0xa
 2304 0128 00       		.byte	0
 2305 0129 00       		.byte	0
 2306 012a 18       		.uleb128 0x18
 2307 012b 2E       		.uleb128 0x2e
 2308 012c 00       		.byte	0
 2309 012d 3F       		.uleb128 0x3f
 2310 012e 0C       		.uleb128 0xc
 2311 012f 03       		.uleb128 0x3
 2312 0130 0E       		.uleb128 0xe
 2313 0131 3A       		.uleb128 0x3a
 2314 0132 0B       		.uleb128 0xb
 2315 0133 3B       		.uleb128 0x3b
 2316 0134 0B       		.uleb128 0xb
 2317 0135 27       		.uleb128 0x27
 2318 0136 0C       		.uleb128 0xc
 2319 0137 11       		.uleb128 0x11
 2320 0138 01       		.uleb128 0x1
 2321 0139 12       		.uleb128 0x12
 2322 013a 01       		.uleb128 0x1
 2323 013b 40       		.uleb128 0x40
 2324 013c 06       		.uleb128 0x6
 2325 013d 9642     		.uleb128 0x2116
 2326 013f 0C       		.uleb128 0xc
 2327 0140 00       		.byte	0
 2328 0141 00       		.byte	0
 2329 0142 19       		.uleb128 0x19
 2330 0143 2E       		.uleb128 0x2e
 2331 0144 00       		.byte	0
 2332 0145 3F       		.uleb128 0x3f
 2333 0146 0C       		.uleb128 0xc
ARM GAS  /tmp/ccyHaRvc.s 			page 64


 2334 0147 03       		.uleb128 0x3
 2335 0148 0E       		.uleb128 0xe
 2336 0149 3A       		.uleb128 0x3a
 2337 014a 0B       		.uleb128 0xb
 2338 014b 3B       		.uleb128 0x3b
 2339 014c 0B       		.uleb128 0xb
 2340 014d 27       		.uleb128 0x27
 2341 014e 0C       		.uleb128 0xc
 2342 014f 11       		.uleb128 0x11
 2343 0150 01       		.uleb128 0x1
 2344 0151 12       		.uleb128 0x12
 2345 0152 01       		.uleb128 0x1
 2346 0153 40       		.uleb128 0x40
 2347 0154 0A       		.uleb128 0xa
 2348 0155 9742     		.uleb128 0x2117
 2349 0157 0C       		.uleb128 0xc
 2350 0158 00       		.byte	0
 2351 0159 00       		.byte	0
 2352 015a 1A       		.uleb128 0x1a
 2353 015b 2E       		.uleb128 0x2e
 2354 015c 01       		.byte	0x1
 2355 015d 3F       		.uleb128 0x3f
 2356 015e 0C       		.uleb128 0xc
 2357 015f 03       		.uleb128 0x3
 2358 0160 0E       		.uleb128 0xe
 2359 0161 3A       		.uleb128 0x3a
 2360 0162 0B       		.uleb128 0xb
 2361 0163 3B       		.uleb128 0x3b
 2362 0164 0B       		.uleb128 0xb
 2363 0165 27       		.uleb128 0x27
 2364 0166 0C       		.uleb128 0xc
 2365 0167 11       		.uleb128 0x11
 2366 0168 01       		.uleb128 0x1
 2367 0169 12       		.uleb128 0x12
 2368 016a 01       		.uleb128 0x1
 2369 016b 40       		.uleb128 0x40
 2370 016c 06       		.uleb128 0x6
 2371 016d 9742     		.uleb128 0x2117
 2372 016f 0C       		.uleb128 0xc
 2373 0170 01       		.uleb128 0x1
 2374 0171 13       		.uleb128 0x13
 2375 0172 00       		.byte	0
 2376 0173 00       		.byte	0
 2377 0174 1B       		.uleb128 0x1b
 2378 0175 34       		.uleb128 0x34
 2379 0176 00       		.byte	0
 2380 0177 03       		.uleb128 0x3
 2381 0178 0E       		.uleb128 0xe
 2382 0179 3A       		.uleb128 0x3a
 2383 017a 0B       		.uleb128 0xb
 2384 017b 3B       		.uleb128 0x3b
 2385 017c 0B       		.uleb128 0xb
 2386 017d 49       		.uleb128 0x49
 2387 017e 13       		.uleb128 0x13
 2388 017f 02       		.uleb128 0x2
 2389 0180 0A       		.uleb128 0xa
 2390 0181 00       		.byte	0
ARM GAS  /tmp/ccyHaRvc.s 			page 65


 2391 0182 00       		.byte	0
 2392 0183 1C       		.uleb128 0x1c
 2393 0184 2E       		.uleb128 0x2e
 2394 0185 01       		.byte	0x1
 2395 0186 3F       		.uleb128 0x3f
 2396 0187 0C       		.uleb128 0xc
 2397 0188 03       		.uleb128 0x3
 2398 0189 0E       		.uleb128 0xe
 2399 018a 3A       		.uleb128 0x3a
 2400 018b 0B       		.uleb128 0xb
 2401 018c 3B       		.uleb128 0x3b
 2402 018d 0B       		.uleb128 0xb
 2403 018e 27       		.uleb128 0x27
 2404 018f 0C       		.uleb128 0xc
 2405 0190 49       		.uleb128 0x49
 2406 0191 13       		.uleb128 0x13
 2407 0192 11       		.uleb128 0x11
 2408 0193 01       		.uleb128 0x1
 2409 0194 12       		.uleb128 0x12
 2410 0195 01       		.uleb128 0x1
 2411 0196 40       		.uleb128 0x40
 2412 0197 06       		.uleb128 0x6
 2413 0198 9742     		.uleb128 0x2117
 2414 019a 0C       		.uleb128 0xc
 2415 019b 01       		.uleb128 0x1
 2416 019c 13       		.uleb128 0x13
 2417 019d 00       		.byte	0
 2418 019e 00       		.byte	0
 2419 019f 1D       		.uleb128 0x1d
 2420 01a0 05       		.uleb128 0x5
 2421 01a1 00       		.byte	0
 2422 01a2 03       		.uleb128 0x3
 2423 01a3 0E       		.uleb128 0xe
 2424 01a4 3A       		.uleb128 0x3a
 2425 01a5 0B       		.uleb128 0xb
 2426 01a6 3B       		.uleb128 0x3b
 2427 01a7 0B       		.uleb128 0xb
 2428 01a8 49       		.uleb128 0x49
 2429 01a9 13       		.uleb128 0x13
 2430 01aa 02       		.uleb128 0x2
 2431 01ab 0A       		.uleb128 0xa
 2432 01ac 00       		.byte	0
 2433 01ad 00       		.byte	0
 2434 01ae 1E       		.uleb128 0x1e
 2435 01af 2E       		.uleb128 0x2e
 2436 01b0 00       		.byte	0
 2437 01b1 3F       		.uleb128 0x3f
 2438 01b2 0C       		.uleb128 0xc
 2439 01b3 03       		.uleb128 0x3
 2440 01b4 0E       		.uleb128 0xe
 2441 01b5 3A       		.uleb128 0x3a
 2442 01b6 0B       		.uleb128 0xb
 2443 01b7 3B       		.uleb128 0x3b
 2444 01b8 05       		.uleb128 0x5
 2445 01b9 27       		.uleb128 0x27
 2446 01ba 0C       		.uleb128 0xc
 2447 01bb 11       		.uleb128 0x11
ARM GAS  /tmp/ccyHaRvc.s 			page 66


 2448 01bc 01       		.uleb128 0x1
 2449 01bd 12       		.uleb128 0x12
 2450 01be 01       		.uleb128 0x1
 2451 01bf 40       		.uleb128 0x40
 2452 01c0 0A       		.uleb128 0xa
 2453 01c1 9742     		.uleb128 0x2117
 2454 01c3 0C       		.uleb128 0xc
 2455 01c4 00       		.byte	0
 2456 01c5 00       		.byte	0
 2457 01c6 1F       		.uleb128 0x1f
 2458 01c7 2E       		.uleb128 0x2e
 2459 01c8 01       		.byte	0x1
 2460 01c9 3F       		.uleb128 0x3f
 2461 01ca 0C       		.uleb128 0xc
 2462 01cb 03       		.uleb128 0x3
 2463 01cc 0E       		.uleb128 0xe
 2464 01cd 3A       		.uleb128 0x3a
 2465 01ce 0B       		.uleb128 0xb
 2466 01cf 3B       		.uleb128 0x3b
 2467 01d0 05       		.uleb128 0x5
 2468 01d1 27       		.uleb128 0x27
 2469 01d2 0C       		.uleb128 0xc
 2470 01d3 11       		.uleb128 0x11
 2471 01d4 01       		.uleb128 0x1
 2472 01d5 12       		.uleb128 0x12
 2473 01d6 01       		.uleb128 0x1
 2474 01d7 40       		.uleb128 0x40
 2475 01d8 06       		.uleb128 0x6
 2476 01d9 9742     		.uleb128 0x2117
 2477 01db 0C       		.uleb128 0xc
 2478 01dc 01       		.uleb128 0x1
 2479 01dd 13       		.uleb128 0x13
 2480 01de 00       		.byte	0
 2481 01df 00       		.byte	0
 2482 01e0 20       		.uleb128 0x20
 2483 01e1 34       		.uleb128 0x34
 2484 01e2 00       		.byte	0
 2485 01e3 03       		.uleb128 0x3
 2486 01e4 08       		.uleb128 0x8
 2487 01e5 3A       		.uleb128 0x3a
 2488 01e6 0B       		.uleb128 0xb
 2489 01e7 3B       		.uleb128 0x3b
 2490 01e8 05       		.uleb128 0x5
 2491 01e9 49       		.uleb128 0x49
 2492 01ea 13       		.uleb128 0x13
 2493 01eb 02       		.uleb128 0x2
 2494 01ec 0A       		.uleb128 0xa
 2495 01ed 00       		.byte	0
 2496 01ee 00       		.byte	0
 2497 01ef 21       		.uleb128 0x21
 2498 01f0 34       		.uleb128 0x34
 2499 01f1 00       		.byte	0
 2500 01f2 03       		.uleb128 0x3
 2501 01f3 0E       		.uleb128 0xe
 2502 01f4 3A       		.uleb128 0x3a
 2503 01f5 0B       		.uleb128 0xb
 2504 01f6 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccyHaRvc.s 			page 67


 2505 01f7 05       		.uleb128 0x5
 2506 01f8 49       		.uleb128 0x49
 2507 01f9 13       		.uleb128 0x13
 2508 01fa 02       		.uleb128 0x2
 2509 01fb 0A       		.uleb128 0xa
 2510 01fc 00       		.byte	0
 2511 01fd 00       		.byte	0
 2512 01fe 22       		.uleb128 0x22
 2513 01ff 2E       		.uleb128 0x2e
 2514 0200 01       		.byte	0x1
 2515 0201 3F       		.uleb128 0x3f
 2516 0202 0C       		.uleb128 0xc
 2517 0203 03       		.uleb128 0x3
 2518 0204 0E       		.uleb128 0xe
 2519 0205 3A       		.uleb128 0x3a
 2520 0206 0B       		.uleb128 0xb
 2521 0207 3B       		.uleb128 0x3b
 2522 0208 05       		.uleb128 0x5
 2523 0209 27       		.uleb128 0x27
 2524 020a 0C       		.uleb128 0xc
 2525 020b 49       		.uleb128 0x49
 2526 020c 13       		.uleb128 0x13
 2527 020d 11       		.uleb128 0x11
 2528 020e 01       		.uleb128 0x1
 2529 020f 12       		.uleb128 0x12
 2530 0210 01       		.uleb128 0x1
 2531 0211 40       		.uleb128 0x40
 2532 0212 06       		.uleb128 0x6
 2533 0213 9742     		.uleb128 0x2117
 2534 0215 0C       		.uleb128 0xc
 2535 0216 01       		.uleb128 0x1
 2536 0217 13       		.uleb128 0x13
 2537 0218 00       		.byte	0
 2538 0219 00       		.byte	0
 2539 021a 23       		.uleb128 0x23
 2540 021b 21       		.uleb128 0x21
 2541 021c 00       		.byte	0
 2542 021d 00       		.byte	0
 2543 021e 00       		.byte	0
 2544 021f 24       		.uleb128 0x24
 2545 0220 34       		.uleb128 0x34
 2546 0221 00       		.byte	0
 2547 0222 03       		.uleb128 0x3
 2548 0223 0E       		.uleb128 0xe
 2549 0224 3A       		.uleb128 0x3a
 2550 0225 0B       		.uleb128 0xb
 2551 0226 3B       		.uleb128 0x3b
 2552 0227 0B       		.uleb128 0xb
 2553 0228 49       		.uleb128 0x49
 2554 0229 13       		.uleb128 0x13
 2555 022a 3F       		.uleb128 0x3f
 2556 022b 0C       		.uleb128 0xc
 2557 022c 3C       		.uleb128 0x3c
 2558 022d 0C       		.uleb128 0xc
 2559 022e 00       		.byte	0
 2560 022f 00       		.byte	0
 2561 0230 25       		.uleb128 0x25
ARM GAS  /tmp/ccyHaRvc.s 			page 68


 2562 0231 34       		.uleb128 0x34
 2563 0232 00       		.byte	0
 2564 0233 03       		.uleb128 0x3
 2565 0234 0E       		.uleb128 0xe
 2566 0235 3A       		.uleb128 0x3a
 2567 0236 0B       		.uleb128 0xb
 2568 0237 3B       		.uleb128 0x3b
 2569 0238 0B       		.uleb128 0xb
 2570 0239 49       		.uleb128 0x49
 2571 023a 13       		.uleb128 0x13
 2572 023b 3F       		.uleb128 0x3f
 2573 023c 0C       		.uleb128 0xc
 2574 023d 02       		.uleb128 0x2
 2575 023e 0A       		.uleb128 0xa
 2576 023f 00       		.byte	0
 2577 0240 00       		.byte	0
 2578 0241 26       		.uleb128 0x26
 2579 0242 0F       		.uleb128 0xf
 2580 0243 00       		.byte	0
 2581 0244 0B       		.uleb128 0xb
 2582 0245 0B       		.uleb128 0xb
 2583 0246 49       		.uleb128 0x49
 2584 0247 13       		.uleb128 0x13
 2585 0248 00       		.byte	0
 2586 0249 00       		.byte	0
 2587 024a 00       		.byte	0
 2588              		.section	.debug_loc,"",%progbits
 2589              	.Ldebug_loc0:
 2590              	.LLST0:
 2591 0000 00000000 		.4byte	.LFB11
 2592 0004 02000000 		.4byte	.LCFI0
 2593 0008 0200     		.2byte	0x2
 2594 000a 7D       		.byte	0x7d
 2595 000b 00       		.sleb128 0
 2596 000c 02000000 		.4byte	.LCFI0
 2597 0010 2C000000 		.4byte	.LFE11
 2598 0014 0200     		.2byte	0x2
 2599 0016 7D       		.byte	0x7d
 2600 0017 08       		.sleb128 8
 2601 0018 00000000 		.4byte	0
 2602 001c 00000000 		.4byte	0
 2603              	.LLST1:
 2604 0020 00000000 		.4byte	.LFB16
 2605 0024 02000000 		.4byte	.LCFI1
 2606 0028 0200     		.2byte	0x2
 2607 002a 7D       		.byte	0x7d
 2608 002b 00       		.sleb128 0
 2609 002c 02000000 		.4byte	.LCFI1
 2610 0030 04000000 		.4byte	.LCFI2
 2611 0034 0200     		.2byte	0x2
 2612 0036 7D       		.byte	0x7d
 2613 0037 0C       		.sleb128 12
 2614 0038 04000000 		.4byte	.LCFI2
 2615 003c EC000000 		.4byte	.LFE16
 2616 0040 0200     		.2byte	0x2
 2617 0042 7D       		.byte	0x7d
 2618 0043 18       		.sleb128 24
ARM GAS  /tmp/ccyHaRvc.s 			page 69


 2619 0044 00000000 		.4byte	0
 2620 0048 00000000 		.4byte	0
 2621              	.LLST2:
 2622 004c 00000000 		.4byte	.LFB20
 2623 0050 02000000 		.4byte	.LCFI3
 2624 0054 0200     		.2byte	0x2
 2625 0056 7D       		.byte	0x7d
 2626 0057 00       		.sleb128 0
 2627 0058 02000000 		.4byte	.LCFI3
 2628 005c C0000000 		.4byte	.LFE20
 2629 0060 0200     		.2byte	0x2
 2630 0062 7D       		.byte	0x7d
 2631 0063 08       		.sleb128 8
 2632 0064 00000000 		.4byte	0
 2633 0068 00000000 		.4byte	0
 2634              	.LLST3:
 2635 006c 00000000 		.4byte	.LFB22
 2636 0070 02000000 		.4byte	.LCFI4
 2637 0074 0200     		.2byte	0x2
 2638 0076 7D       		.byte	0x7d
 2639 0077 00       		.sleb128 0
 2640 0078 02000000 		.4byte	.LCFI4
 2641 007c 28000000 		.4byte	.LFE22
 2642 0080 0200     		.2byte	0x2
 2643 0082 7D       		.byte	0x7d
 2644 0083 08       		.sleb128 8
 2645 0084 00000000 		.4byte	0
 2646 0088 00000000 		.4byte	0
 2647              	.LLST4:
 2648 008c 00000000 		.4byte	.LFB23
 2649 0090 02000000 		.4byte	.LCFI5
 2650 0094 0200     		.2byte	0x2
 2651 0096 7D       		.byte	0x7d
 2652 0097 00       		.sleb128 0
 2653 0098 02000000 		.4byte	.LCFI5
 2654 009c 34000000 		.4byte	.LFE23
 2655 00a0 0200     		.2byte	0x2
 2656 00a2 7D       		.byte	0x7d
 2657 00a3 08       		.sleb128 8
 2658 00a4 00000000 		.4byte	0
 2659 00a8 00000000 		.4byte	0
 2660              	.LLST5:
 2661 00ac 00000000 		.4byte	.LFB24
 2662 00b0 02000000 		.4byte	.LCFI6
 2663 00b4 0200     		.2byte	0x2
 2664 00b6 7D       		.byte	0x7d
 2665 00b7 00       		.sleb128 0
 2666 00b8 02000000 		.4byte	.LCFI6
 2667 00bc 94000000 		.4byte	.LFE24
 2668 00c0 0200     		.2byte	0x2
 2669 00c2 7D       		.byte	0x7d
 2670 00c3 08       		.sleb128 8
 2671 00c4 00000000 		.4byte	0
 2672 00c8 00000000 		.4byte	0
 2673              	.LLST6:
 2674 00cc 00000000 		.4byte	.LFB25
 2675 00d0 02000000 		.4byte	.LCFI7
ARM GAS  /tmp/ccyHaRvc.s 			page 70


 2676 00d4 0200     		.2byte	0x2
 2677 00d6 7D       		.byte	0x7d
 2678 00d7 00       		.sleb128 0
 2679 00d8 02000000 		.4byte	.LCFI7
 2680 00dc 5C000000 		.4byte	.LFE25
 2681 00e0 0200     		.2byte	0x2
 2682 00e2 7D       		.byte	0x7d
 2683 00e3 10       		.sleb128 16
 2684 00e4 00000000 		.4byte	0
 2685 00e8 00000000 		.4byte	0
 2686              	.LLST7:
 2687 00ec 00000000 		.4byte	.LFB27
 2688 00f0 02000000 		.4byte	.LCFI8
 2689 00f4 0200     		.2byte	0x2
 2690 00f6 7D       		.byte	0x7d
 2691 00f7 00       		.sleb128 0
 2692 00f8 02000000 		.4byte	.LCFI8
 2693 00fc 4C000000 		.4byte	.LFE27
 2694 0100 0200     		.2byte	0x2
 2695 0102 7D       		.byte	0x7d
 2696 0103 08       		.sleb128 8
 2697 0104 00000000 		.4byte	0
 2698 0108 00000000 		.4byte	0
 2699              	.LLST8:
 2700 010c 00000000 		.4byte	.LFB28
 2701 0110 02000000 		.4byte	.LCFI9
 2702 0114 0200     		.2byte	0x2
 2703 0116 7D       		.byte	0x7d
 2704 0117 00       		.sleb128 0
 2705 0118 02000000 		.4byte	.LCFI9
 2706 011c 6C000000 		.4byte	.LFE28
 2707 0120 0200     		.2byte	0x2
 2708 0122 7D       		.byte	0x7d
 2709 0123 08       		.sleb128 8
 2710 0124 00000000 		.4byte	0
 2711 0128 00000000 		.4byte	0
 2712              		.section	.debug_aranges,"",%progbits
 2713 0000 6C000000 		.4byte	0x6c
 2714 0004 0200     		.2byte	0x2
 2715 0006 00000000 		.4byte	.Ldebug_info0
 2716 000a 04       		.byte	0x4
 2717 000b 00       		.byte	0
 2718 000c 0000     		.2byte	0
 2719 000e 0000     		.2byte	0
 2720 0010 00000000 		.4byte	.LFB11
 2721 0014 2C000000 		.4byte	.LFE11-.LFB11
 2722 0018 00000000 		.4byte	.LFB16
 2723 001c EC000000 		.4byte	.LFE16-.LFB16
 2724 0020 00000000 		.4byte	.LFB20
 2725 0024 C0000000 		.4byte	.LFE20-.LFB20
 2726 0028 00000000 		.4byte	.LFB21
 2727 002c 78000000 		.4byte	.LFE21-.LFB21
 2728 0030 00000000 		.4byte	.LFB22
 2729 0034 28000000 		.4byte	.LFE22-.LFB22
 2730 0038 00000000 		.4byte	.LFB23
 2731 003c 34000000 		.4byte	.LFE23-.LFB23
 2732 0040 00000000 		.4byte	.LFB24
ARM GAS  /tmp/ccyHaRvc.s 			page 71


 2733 0044 94000000 		.4byte	.LFE24-.LFB24
 2734 0048 00000000 		.4byte	.LFB25
 2735 004c 5C000000 		.4byte	.LFE25-.LFB25
 2736 0050 00000000 		.4byte	.LFB26
 2737 0054 60000000 		.4byte	.LFE26-.LFB26
 2738 0058 00000000 		.4byte	.LFB27
 2739 005c 4C000000 		.4byte	.LFE27-.LFB27
 2740 0060 00000000 		.4byte	.LFB28
 2741 0064 6C000000 		.4byte	.LFE28-.LFB28
 2742 0068 00000000 		.4byte	0
 2743 006c 00000000 		.4byte	0
 2744              		.section	.debug_ranges,"",%progbits
 2745              	.Ldebug_ranges0:
 2746 0000 00000000 		.4byte	.LFB11
 2747 0004 2C000000 		.4byte	.LFE11
 2748 0008 00000000 		.4byte	.LFB16
 2749 000c EC000000 		.4byte	.LFE16
 2750 0010 00000000 		.4byte	.LFB20
 2751 0014 C0000000 		.4byte	.LFE20
 2752 0018 00000000 		.4byte	.LFB21
 2753 001c 78000000 		.4byte	.LFE21
 2754 0020 00000000 		.4byte	.LFB22
 2755 0024 28000000 		.4byte	.LFE22
 2756 0028 00000000 		.4byte	.LFB23
 2757 002c 34000000 		.4byte	.LFE23
 2758 0030 00000000 		.4byte	.LFB24
 2759 0034 94000000 		.4byte	.LFE24
 2760 0038 00000000 		.4byte	.LFB25
 2761 003c 5C000000 		.4byte	.LFE25
 2762 0040 00000000 		.4byte	.LFB26
 2763 0044 60000000 		.4byte	.LFE26
 2764 0048 00000000 		.4byte	.LFB27
 2765 004c 4C000000 		.4byte	.LFE27
 2766 0050 00000000 		.4byte	.LFB28
 2767 0054 6C000000 		.4byte	.LFE28
 2768 0058 00000000 		.4byte	0
 2769 005c 00000000 		.4byte	0
 2770              		.section	.debug_line,"",%progbits
 2771              	.Ldebug_line0:
 2772 0000 81020000 		.section	.debug_str,"MS",%progbits,1
 2772      02000A01 
 2772      00000201 
 2772      FB0E0D00 
 2772      01010101 
 2773              	.LASF54:
 2774 0000 49435052 		.ascii	"ICPR\000"
 2774      00
 2775              	.LASF51:
 2776 0005 52534552 		.ascii	"RSERVED1\000"
 2776      56454431 
 2776      00
 2777              	.LASF76:
 2778 000e 41504232 		.ascii	"APB2ENR\000"
 2778      454E5200 
 2779              	.LASF6:
 2780 0016 5056445F 		.ascii	"PVD_IRQn\000"
 2780      4952516E 
ARM GAS  /tmp/ccyHaRvc.s 			page 72


 2780      00
 2781              	.LASF102:
 2782 001f 7365715F 		.ascii	"seq_ready\000"
 2782      72656164 
 2782      7900
 2783              	.LASF44:
 2784 0029 6C6F6E67 		.ascii	"long long unsigned int\000"
 2784      206C6F6E 
 2784      6720756E 
 2784      7369676E 
 2784      65642069 
 2785              	.LASF69:
 2786 0040 534D5052 		.ascii	"SMPR\000"
 2786      00
 2787              	.LASF59:
 2788 0045 43505549 		.ascii	"CPUID\000"
 2788      4400
 2789              	.LASF5:
 2790 004b 57574447 		.ascii	"WWDG_IRQn\000"
 2790      5F495251 
 2790      6E00
 2791              	.LASF52:
 2792 0055 49535052 		.ascii	"ISPR\000"
 2792      00
 2793              	.LASF43:
 2794 005a 6C6F6E67 		.ascii	"long long int\000"
 2794      206C6F6E 
 2794      6720696E 
 2794      7400
 2795              	.LASF35:
 2796 0068 7369676E 		.ascii	"signed char\000"
 2796      65642063 
 2796      68617200 
 2797              	.LASF109:
 2798 0074 7372632F 		.ascii	"src/adc.c\000"
 2798      6164632E 
 2798      6300
 2799              	.LASF33:
 2800 007e 4345435F 		.ascii	"CEC_IRQn\000"
 2800      4952516E 
 2800      00
 2801              	.LASF92:
 2802 0087 746D7072 		.ascii	"tmpreg\000"
 2802      656700
 2803              	.LASF40:
 2804 008e 6C6F6E67 		.ascii	"long int\000"
 2804      20696E74 
 2804      00
 2805              	.LASF73:
 2806 0097 41504232 		.ascii	"APB2RSTR\000"
 2806      52535452 
 2806      00
 2807              	.LASF46:
 2808 00a0 75696E74 		.ascii	"uint16_t\000"
 2808      31365F74 
 2808      00
 2809              	.LASF71:
ARM GAS  /tmp/ccyHaRvc.s 			page 73


 2810 00a9 4144435F 		.ascii	"ADC_TypeDef\000"
 2810      54797065 
 2810      44656600 
 2811              	.LASF22:
 2812 00b5 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 2812      5F444143 
 2812      5F495251 
 2812      6E00
 2813              	.LASF13:
 2814 00c3 54535F49 		.ascii	"TS_IRQn\000"
 2814      52516E00 
 2815              	.LASF1:
 2816 00cb 48617264 		.ascii	"HardFault_IRQn\000"
 2816      4661756C 
 2816      745F4952 
 2816      516E00
 2817              	.LASF25:
 2818 00da 54494D31 		.ascii	"TIM16_IRQn\000"
 2818      365F4952 
 2818      516E00
 2819              	.LASF41:
 2820 00e5 5F5F7569 		.ascii	"__uint32_t\000"
 2820      6E743332 
 2820      5F7400
 2821              	.LASF18:
 2822 00f0 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 2822      5F42524B 
 2822      5F55505F 
 2822      5452475F 
 2822      434F4D5F 
 2823              	.LASF104:
 2824 0109 566F6C74 		.ascii	"VoltagePhoto\000"
 2824      61676550 
 2824      686F746F 
 2824      00
 2825              	.LASF65:
 2826 0116 5343425F 		.ascii	"SCB_Type\000"
 2826      54797065 
 2826      00
 2827              	.LASF98:
 2828 011f 64756D6D 		.ascii	"dummy\000"
 2828      7900
 2829              	.LASF107:
 2830 0125 6E65775F 		.ascii	"new_photo_sample\000"
 2830      70686F74 
 2830      6F5F7361 
 2830      6D706C65 
 2830      00
 2831              	.LASF94:
 2832 0136 63616C69 		.ascii	"calibrationstatus\000"
 2832      62726174 
 2832      696F6E73 
 2832      74617475 
 2832      7300
 2833              	.LASF17:
 2834 0148 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 2834      5F434F4D 
ARM GAS  /tmp/ccyHaRvc.s 			page 74


 2834      505F4952 
 2834      516E00
 2835              	.LASF45:
 2836 0157 756E7369 		.ascii	"unsigned int\000"
 2836      676E6564 
 2836      20696E74 
 2836      00
 2837              	.LASF57:
 2838 0164 73697A65 		.ascii	"sizetype\000"
 2838      74797065 
 2838      00
 2839              	.LASF23:
 2840 016d 54494D31 		.ascii	"TIM14_IRQn\000"
 2840      345F4952 
 2840      516E00
 2841              	.LASF42:
 2842 0178 6C6F6E67 		.ascii	"long unsigned int\000"
 2842      20756E73 
 2842      69676E65 
 2842      6420696E 
 2842      7400
 2843              	.LASF105:
 2844 018a 70686F74 		.ascii	"photo_index\000"
 2844      6F5F696E 
 2844      64657800 
 2845              	.LASF81:
 2846 0196 5243435F 		.ascii	"RCC_TypeDef\000"
 2846      54797065 
 2846      44656600 
 2847              	.LASF99:
 2848 01a2 47657450 		.ascii	"GetPhoto\000"
 2848      686F746F 
 2848      00
 2849              	.LASF39:
 2850 01ab 73686F72 		.ascii	"short unsigned int\000"
 2850      7420756E 
 2850      7369676E 
 2850      65642069 
 2850      6E7400
 2851              	.LASF60:
 2852 01be 49435352 		.ascii	"ICSR\000"
 2852      00
 2853              	.LASF70:
 2854 01c3 43485345 		.ascii	"CHSELR\000"
 2854      4C5200
 2855              	.LASF61:
 2856 01ca 41495243 		.ascii	"AIRCR\000"
 2856      5200
 2857              	.LASF64:
 2858 01d0 44465352 		.ascii	"DFSR\000"
 2858      00
 2859              	.LASF29:
 2860 01d5 53504931 		.ascii	"SPI1_IRQn\000"
 2860      5F495251 
 2860      6E00
 2861              	.LASF85:
 2862 01df 7072696F 		.ascii	"priority\000"
ARM GAS  /tmp/ccyHaRvc.s 			page 75


 2862      72697479 
 2862      00
 2863              	.LASF30:
 2864 01e8 53504932 		.ascii	"SPI2_IRQn\000"
 2864      5F495251 
 2864      6E00
 2865              	.LASF24:
 2866 01f2 54494D31 		.ascii	"TIM15_IRQn\000"
 2866      355F4952 
 2866      516E00
 2867              	.LASF4:
 2868 01fd 53797354 		.ascii	"SysTick_IRQn\000"
 2868      69636B5F 
 2868      4952516E 
 2868      00
 2869              	.LASF19:
 2870 020a 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 2870      5F43435F 
 2870      4952516E 
 2870      00
 2871              	.LASF84:
 2872 0217 4952516E 		.ascii	"IRQn\000"
 2872      00
 2873              	.LASF93:
 2874 021c 63616C69 		.ascii	"calibrationcounter\000"
 2874      62726174 
 2874      696F6E63 
 2874      6F756E74 
 2874      657200
 2875              	.LASF96:
 2876 022f 53657441 		.ascii	"SetADC1_SampleTime\000"
 2876      4443315F 
 2876      53616D70 
 2876      6C655469 
 2876      6D6500
 2877              	.LASF50:
 2878 0242 49434552 		.ascii	"ICER\000"
 2878      00
 2879              	.LASF79:
 2880 0247 41484252 		.ascii	"AHBRSTR\000"
 2880      53545200 
 2881              	.LASF95:
 2882 024f 55706461 		.ascii	"UpdatePhotoTransistor\000"
 2882      74655068 
 2882      6F746F54 
 2882      72616E73 
 2882      6973746F 
 2883              	.LASF74:
 2884 0265 41504231 		.ascii	"APB1RSTR\000"
 2884      52535452 
 2884      00
 2885              	.LASF110:
 2886 026e 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 2886      652F6D65 
 2886      642F446F 
 2886      63756D65 
 2886      6E74732F 
ARM GAS  /tmp/ccyHaRvc.s 			page 76


 2887 02a1 6100     		.ascii	"a\000"
 2888              	.LASF14:
 2889 02a3 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 2889      5F436861 
 2889      6E6E656C 
 2889      315F4952 
 2889      516E00
 2890              	.LASF49:
 2891 02b6 52455345 		.ascii	"RESERVED0\000"
 2891      52564544 
 2891      3000
 2892              	.LASF62:
 2893 02c0 52455345 		.ascii	"RESERVED1\000"
 2893      52564544 
 2893      3100
 2894              	.LASF53:
 2895 02ca 52455345 		.ascii	"RESERVED2\000"
 2895      52564544 
 2895      3200
 2896              	.LASF55:
 2897 02d4 52455345 		.ascii	"RESERVED3\000"
 2897      52564544 
 2897      3300
 2898              	.LASF56:
 2899 02de 52455345 		.ascii	"RESERVED4\000"
 2899      52564544 
 2899      3400
 2900              	.LASF66:
 2901 02e8 52455345 		.ascii	"RESET\000"
 2901      5400
 2902              	.LASF34:
 2903 02ee 756E7369 		.ascii	"unsigned char\000"
 2903      676E6564 
 2903      20636861 
 2903      7200
 2904              	.LASF91:
 2905 02fc 41444347 		.ascii	"ADCGetCalibrationFactor\000"
 2905      65744361 
 2905      6C696272 
 2905      6174696F 
 2905      6E466163 
 2906              	.LASF32:
 2907 0314 55534152 		.ascii	"USART2_IRQn\000"
 2907      54325F49 
 2907      52516E00 
 2908              	.LASF63:
 2909 0320 53484353 		.ascii	"SHCSR\000"
 2909      5200
 2910              	.LASF36:
 2911 0326 73686F72 		.ascii	"short int\000"
 2911      7420696E 
 2911      7400
 2912              	.LASF48:
 2913 0330 49534552 		.ascii	"ISER\000"
 2913      00
 2914              	.LASF58:
 2915 0335 4E564943 		.ascii	"NVIC_Type\000"
ARM GAS  /tmp/ccyHaRvc.s 			page 77


 2915      5F547970 
 2915      6500
 2916              	.LASF12:
 2917 033f 45585449 		.ascii	"EXTI4_15_IRQn\000"
 2917      345F3135 
 2917      5F495251 
 2917      6E00
 2918              	.LASF90:
 2919 034d 52656164 		.ascii	"ReadADC1Check\000"
 2919      41444331 
 2919      43686563 
 2919      6B00
 2920              	.LASF82:
 2921 035b 4E564943 		.ascii	"NVIC_EnableIRQ\000"
 2921      5F456E61 
 2921      626C6549 
 2921      525100
 2922              	.LASF101:
 2923 036a 74745F74 		.ascii	"tt_take_photo_sample\000"
 2923      616B655F 
 2923      70686F74 
 2923      6F5F7361 
 2923      6D706C65 
 2924              	.LASF26:
 2925 037f 54494D31 		.ascii	"TIM17_IRQn\000"
 2925      375F4952 
 2925      516E00
 2926              	.LASF27:
 2927 038a 49324331 		.ascii	"I2C1_IRQn\000"
 2927      5F495251 
 2927      6E00
 2928              	.LASF88:
 2929 0394 6368616E 		.ascii	"channel\000"
 2929      6E656C00 
 2930              	.LASF8:
 2931 039c 464C4153 		.ascii	"FLASH_IRQn\000"
 2931      485F4952 
 2931      516E00
 2932              	.LASF103:
 2933 03a7 705F6368 		.ascii	"p_channel\000"
 2933      616E6E65 
 2933      6C00
 2934              	.LASF37:
 2935 03b1 4952516E 		.ascii	"IRQn_Type\000"
 2935      5F547970 
 2935      6500
 2936              	.LASF47:
 2937 03bb 75696E74 		.ascii	"uint32_t\000"
 2937      33325F74 
 2937      00
 2938              	.LASF3:
 2939 03c4 50656E64 		.ascii	"PendSV_IRQn\000"
 2939      53565F49 
 2939      52516E00 
 2940              	.LASF97:
 2941 03d0 46696C6C 		.ascii	"FillPhotoBuffer\000"
 2941      50686F74 
ARM GAS  /tmp/ccyHaRvc.s 			page 78


 2941      6F427566 
 2941      66657200 
 2942              	.LASF15:
 2943 03e0 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 2943      5F436861 
 2943      6E6E656C 
 2943      325F335F 
 2943      4952516E 
 2944              	.LASF38:
 2945 03f5 5F5F7569 		.ascii	"__uint16_t\000"
 2945      6E743136 
 2945      5F7400
 2946              	.LASF11:
 2947 0400 45585449 		.ascii	"EXTI2_3_IRQn\000"
 2947      325F335F 
 2947      4952516E 
 2947      00
 2948              	.LASF0:
 2949 040d 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 2949      61736B61 
 2949      626C6549 
 2949      6E745F49 
 2949      52516E00 
 2950              	.LASF86:
 2951 0421 41646343 		.ascii	"AdcConfig\000"
 2951      6F6E6669 
 2951      6700
 2952              	.LASF89:
 2953 042b 52656164 		.ascii	"ReadADC1_SameSampleTime\000"
 2953      41444331 
 2953      5F53616D 
 2953      6553616D 
 2953      706C6554 
 2954              	.LASF77:
 2955 0443 41504231 		.ascii	"APB1ENR\000"
 2955      454E5200 
 2956              	.LASF28:
 2957 044b 49324332 		.ascii	"I2C2_IRQn\000"
 2957      5F495251 
 2957      6E00
 2958              	.LASF10:
 2959 0455 45585449 		.ascii	"EXTI0_1_IRQn\000"
 2959      305F315F 
 2959      4952516E 
 2959      00
 2960              	.LASF16:
 2961 0462 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 2961      5F436861 
 2961      6E6E656C 
 2961      345F355F 
 2961      4952516E 
 2962              	.LASF87:
 2963 0477 41444331 		.ascii	"ADC1_COMP_IRQHandler\000"
 2963      5F434F4D 
 2963      505F4952 
 2963      5148616E 
 2963      646C6572 
ARM GAS  /tmp/ccyHaRvc.s 			page 79


 2964              	.LASF20:
 2965 048c 54494D32 		.ascii	"TIM2_IRQn\000"
 2965      5F495251 
 2965      6E00
 2966              	.LASF31:
 2967 0496 55534152 		.ascii	"USART1_IRQn\000"
 2967      54315F49 
 2967      52516E00 
 2968              	.LASF78:
 2969 04a2 42444352 		.ascii	"BDCR\000"
 2969      00
 2970              	.LASF67:
 2971 04a7 43464752 		.ascii	"CFGR1\000"
 2971      3100
 2972              	.LASF68:
 2973 04ad 43464752 		.ascii	"CFGR2\000"
 2973      3200
 2974              	.LASF80:
 2975 04b3 43464752 		.ascii	"CFGR3\000"
 2975      3300
 2976              	.LASF9:
 2977 04b9 5243435F 		.ascii	"RCC_IRQn\000"
 2977      4952516E 
 2977      00
 2978              	.LASF106:
 2979 04c2 6C617374 		.ascii	"last_photo\000"
 2979      5F70686F 
 2979      746F00
 2980              	.LASF72:
 2981 04cd 43464752 		.ascii	"CFGR\000"
 2981      00
 2982              	.LASF108:
 2983 04d2 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 2983      43313120 
 2983      352E322E 
 2983      31203230 
 2983      31353132 
 2984 0505 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 2984      20726576 
 2984      6973696F 
 2984      6E203233 
 2984      31383438 
 2985 0538 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 2985      662D3220 
 2985      2D4F3020 
 2985      2D666F6D 
 2985      69742D66 
 2986 056b 66756E63 		.ascii	"function-sections\000"
 2986      74696F6E 
 2986      2D736563 
 2986      74696F6E 
 2986      7300
 2987              	.LASF7:
 2988 057d 5254435F 		.ascii	"RTC_IRQn\000"
 2988      4952516E 
 2988      00
 2989              	.LASF21:
ARM GAS  /tmp/ccyHaRvc.s 			page 80


 2990 0586 54494D33 		.ascii	"TIM3_IRQn\000"
 2990      5F495251 
 2990      6E00
 2991              	.LASF75:
 2992 0590 41484245 		.ascii	"AHBENR\000"
 2992      4E5200
 2993              	.LASF2:
 2994 0597 5356435F 		.ascii	"SVC_IRQn\000"
 2994      4952516E 
 2994      00
 2995              	.LASF100:
 2996 05a0 6164635F 		.ascii	"adc_ch\000"
 2996      636800
 2997              	.LASF83:
 2998 05a7 4E564943 		.ascii	"NVIC_SetPriority\000"
 2998      5F536574 
 2998      5072696F 
 2998      72697479 
 2998      00
 2999              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccyHaRvc.s 			page 81


DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
     /tmp/ccyHaRvc.s:55     .text.NVIC_EnableIRQ:00000000 $t
     /tmp/ccyHaRvc.s:59     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
     /tmp/ccyHaRvc.s:91     .text.NVIC_EnableIRQ:00000028 $d
     /tmp/ccyHaRvc.s:96     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccyHaRvc.s:100    .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccyHaRvc.s:240    .text.NVIC_SetPriority:000000e4 $d
                            *COM*:00000004 p_channel
                            *COM*:00000040 VoltagePhoto
     /tmp/ccyHaRvc.s:251    .bss.photo_index:00000000 photo_index
     /tmp/ccyHaRvc.s:252    .bss.photo_index:00000000 $d
     /tmp/ccyHaRvc.s:258    .bss.last_photo:00000000 last_photo
     /tmp/ccyHaRvc.s:255    .bss.last_photo:00000000 $d
     /tmp/ccyHaRvc.s:264    .bss.new_photo_sample:00000000 new_photo_sample
     /tmp/ccyHaRvc.s:265    .bss.new_photo_sample:00000000 $d
     /tmp/ccyHaRvc.s:267    .text.AdcConfig:00000000 $t
     /tmp/ccyHaRvc.s:272    .text.AdcConfig:00000000 AdcConfig
     /tmp/ccyHaRvc.s:698    .text.ADCGetCalibrationFactor:00000000 ADCGetCalibrationFactor
     /tmp/ccyHaRvc.s:388    .text.AdcConfig:000000ac $d
     /tmp/ccyHaRvc.s:397    .text.ADC1_COMP_IRQHandler:00000000 $t
     /tmp/ccyHaRvc.s:402    .text.ADC1_COMP_IRQHandler:00000000 ADC1_COMP_IRQHandler
     /tmp/ccyHaRvc.s:474    .text.ADC1_COMP_IRQHandler:00000064 $d
     /tmp/ccyHaRvc.s:483    .text.SetADC1_SampleTime:00000000 $t
     /tmp/ccyHaRvc.s:488    .text.SetADC1_SampleTime:00000000 SetADC1_SampleTime
     /tmp/ccyHaRvc.s:520    .text.SetADC1_SampleTime:00000024 $d
     /tmp/ccyHaRvc.s:525    .text.ReadADC1_SameSampleTime:00000000 $t
     /tmp/ccyHaRvc.s:530    .text.ReadADC1_SameSampleTime:00000000 ReadADC1_SameSampleTime
     /tmp/ccyHaRvc.s:570    .text.ReadADC1_SameSampleTime:00000030 $d
     /tmp/ccyHaRvc.s:575    .text.ReadADC1Check:00000000 $t
     /tmp/ccyHaRvc.s:580    .text.ReadADC1Check:00000000 ReadADC1Check
     /tmp/ccyHaRvc.s:687    .text.ReadADC1Check:0000008c $d
     /tmp/ccyHaRvc.s:693    .text.ADCGetCalibrationFactor:00000000 $t
     /tmp/ccyHaRvc.s:767    .text.ADCGetCalibrationFactor:00000058 $d
     /tmp/ccyHaRvc.s:772    .text.UpdatePhotoTransistor:00000000 $t
     /tmp/ccyHaRvc.s:777    .text.UpdatePhotoTransistor:00000000 UpdatePhotoTransistor
     /tmp/ccyHaRvc.s:833    .text.UpdatePhotoTransistor:0000004c $d
     /tmp/ccyHaRvc.s:842    .text.FillPhotoBuffer:00000000 $t
     /tmp/ccyHaRvc.s:847    .text.FillPhotoBuffer:00000000 FillPhotoBuffer
     /tmp/ccyHaRvc.s:898    .text.FillPhotoBuffer:00000044 $d
     /tmp/ccyHaRvc.s:904    .text.GetPhoto:00000000 $t
     /tmp/ccyHaRvc.s:909    .text.GetPhoto:00000000 GetPhoto
     /tmp/ccyHaRvc.s:979    .text.GetPhoto:00000060 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
adc_ch
seq_ready
tt_take_photo_sample
