ARM GAS  /tmp/ccSHmGTg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"adc.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/adc.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/adc.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  24              	@ -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  55              		.align	2
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccSHmGTg.s 			page 2


  58              		.type	NVIC_EnableIRQ, %function
  59              	NVIC_EnableIRQ:
  60              	.LFB11:
  61              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
ARM GAS  /tmp/ccSHmGTg.s 			page 3


  54:./cmsis_core/core_cm0.h **** 
  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccSHmGTg.s 			page 4


 111:./cmsis_core/core_cm0.h **** */
 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccSHmGTg.s 			page 5


 168:./cmsis_core/core_cm0.h **** 
 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccSHmGTg.s 			page 6


 225:./cmsis_core/core_cm0.h **** 
 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/ccSHmGTg.s 			page 7


 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccSHmGTg.s 			page 8


 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccSHmGTg.s 			page 9


 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
ARM GAS  /tmp/ccSHmGTg.s 			page 10


 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccSHmGTg.s 			page 11


 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccSHmGTg.s 			page 12


 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccSHmGTg.s 			page 13


 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
ARM GAS  /tmp/ccSHmGTg.s 			page 14


 681:./cmsis_core/core_cm0.h ****  *
 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccSHmGTg.s 			page 15


 738:./cmsis_core/core_cm0.h ****  *
 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /tmp/ccSHmGTg.s 			page 16


 795:./cmsis_core/core_cm0.h **** 
 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
  62              		.loc 1 812 0
  63              		.cfi_startproc
  64 0000 82B0     		sub	sp, sp, #8	@,,
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 8
  67 0002 0200     		movs	r2, r0	@ tmp116, IRQn
  68 0004 6B46     		mov	r3, sp	@ tmp122,
  69 0006 0733     		adds	r3, r3, #7	@ tmp117,
  70 0008 1A70     		strb	r2, [r3]	@ tmp118, IRQn
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  71              		.loc 1 813 0
  72 000a 074B     		ldr	r3, .L2	@ D.5071,
  73 000c 6A46     		mov	r2, sp	@ tmp123,
  74 000e 0732     		adds	r2, r2, #7	@ tmp119,
  75 0010 1278     		ldrb	r2, [r2]	@ D.5072, IRQn
  76 0012 1100     		movs	r1, r2	@ D.5073, D.5072
  77 0014 1F22     		movs	r2, #31	@ tmp120,
  78 0016 0A40     		ands	r2, r1	@ D.5073, D.5073
  79 0018 0121     		movs	r1, #1	@ tmp121,
  80 001a 9140     		lsls	r1, r1, r2	@ D.5074, D.5074, D.5073
  81 001c 0A00     		movs	r2, r1	@ D.5074, D.5074
  82 001e 1A60     		str	r2, [r3]	@ D.5073, _1->ISER
 814:./cmsis_core/core_cm0.h **** }
  83              		.loc 1 814 0
  84 0020 C046     		nop
  85 0022 02B0     		add	sp, sp, #8	@,,
  86              		@ sp needed	@
  87 0024 7047     		bx	lr
  88              	.L3:
  89 0026 C046     		.align	2
  90              	.L2:
  91 0028 00E100E0 		.word	-536813312
  92              		.cfi_endproc
  93              	.LFE11:
  94              		.size	NVIC_EnableIRQ, .-NVIC_EnableIRQ
  95              		.section	.text.NVIC_SetPriority,"ax",%progbits
  96              		.align	2
  97              		.code	16
  98              		.thumb_func
ARM GAS  /tmp/ccSHmGTg.s 			page 17


  99              		.type	NVIC_SetPriority, %function
 100              	NVIC_SetPriority:
 101              	.LFB16:
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 852:./cmsis_core/core_cm0.h **** {
 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccSHmGTg.s 			page 18


 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
 102              		.loc 1 893 0
 103              		.cfi_startproc
 104 0000 30B5     		push	{r4, r5, lr}	@
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 12
 107              		.cfi_offset 4, -12
 108              		.cfi_offset 5, -8
 109              		.cfi_offset 14, -4
 110 0002 83B0     		sub	sp, sp, #12	@,,
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 24
 113 0004 0200     		movs	r2, r0	@ tmp162, IRQn
 114 0006 0091     		str	r1, [sp]	@ priority, priority
 115 0008 6B46     		mov	r3, sp	@ tmp199,
 116 000a 0733     		adds	r3, r3, #7	@ tmp163,
 117 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 118              		.loc 1 894 0
 119 000e 6B46     		mov	r3, sp	@ tmp200,
 120 0010 0733     		adds	r3, r3, #7	@ tmp165,
 121 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
 122 0014 7F2B     		cmp	r3, #127	@ tmp166,
 123 0016 36D9     		bls	.L5	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 124              		.loc 1 895 0
 125 0018 324C     		ldr	r4, .L8	@ D.5075,
 126 001a 6B46     		mov	r3, sp	@ tmp201,
 127 001c 0733     		adds	r3, r3, #7	@ tmp167,
 128 001e 1B78     		ldrb	r3, [r3]	@ D.5076, IRQn
 129 0020 1A00     		movs	r2, r3	@ D.5077, D.5076
 130 0022 0F23     		movs	r3, #15	@ tmp168,
 131 0024 1340     		ands	r3, r2	@ D.5077, D.5077
ARM GAS  /tmp/ccSHmGTg.s 			page 19


 132 0026 083B     		subs	r3, r3, #8	@ D.5077,
 133 0028 9908     		lsrs	r1, r3, #2	@ D.5077, D.5077,
 134 002a 2E4A     		ldr	r2, .L8	@ D.5075,
 135 002c 6B46     		mov	r3, sp	@ tmp202,
 136 002e 0733     		adds	r3, r3, #7	@ tmp169,
 137 0030 1B78     		ldrb	r3, [r3]	@ D.5076, IRQn
 138 0032 1800     		movs	r0, r3	@ D.5077, D.5076
 139 0034 0F23     		movs	r3, #15	@ tmp170,
 140 0036 0340     		ands	r3, r0	@ D.5077, D.5077
 141 0038 083B     		subs	r3, r3, #8	@ D.5077,
 142 003a 9B08     		lsrs	r3, r3, #2	@ D.5077, D.5077,
 143 003c 0633     		adds	r3, r3, #6	@ tmp171,
 144 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 145 0040 D318     		adds	r3, r2, r3	@ tmp173, D.5075, tmp172
 146 0042 0433     		adds	r3, r3, #4	@ tmp174,
 147 0044 1B68     		ldr	r3, [r3]	@ D.5077, _9->SHP
 148 0046 6A46     		mov	r2, sp	@ tmp203,
 149 0048 0732     		adds	r2, r2, #7	@ tmp175,
 150 004a 1278     		ldrb	r2, [r2]	@ D.5076, IRQn
 151 004c 1000     		movs	r0, r2	@ D.5077, D.5076
 152 004e 0322     		movs	r2, #3	@ tmp176,
 153 0050 0240     		ands	r2, r0	@ D.5077, D.5077
 154 0052 D200     		lsls	r2, r2, #3	@ D.5077, D.5077,
 155 0054 FF20     		movs	r0, #255	@ tmp177,
 156 0056 9040     		lsls	r0, r0, r2	@ D.5078, D.5078, D.5077
 157 0058 0200     		movs	r2, r0	@ D.5078, D.5078
 158 005a D243     		mvns	r2, r2	@ D.5078, D.5078
 159 005c 1A40     		ands	r2, r3	@ D.5077, D.5077
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 160              		.loc 1 896 0
 161 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 162 0060 9B01     		lsls	r3, r3, #6	@ D.5077, tmp178,
 163 0062 FF20     		movs	r0, #255	@ tmp179,
 164 0064 1840     		ands	r0, r3	@ D.5077, D.5077
 165 0066 6B46     		mov	r3, sp	@ tmp205,
 166 0068 0733     		adds	r3, r3, #7	@ tmp180,
 167 006a 1B78     		ldrb	r3, [r3]	@ D.5076, IRQn
 168 006c 1D00     		movs	r5, r3	@ D.5077, D.5076
 169 006e 0323     		movs	r3, #3	@ tmp181,
 170 0070 2B40     		ands	r3, r5	@ D.5077, D.5077
 171 0072 DB00     		lsls	r3, r3, #3	@ D.5077, D.5077,
 172 0074 9840     		lsls	r0, r0, r3	@ D.5077, D.5077, D.5077
 173 0076 0300     		movs	r3, r0	@ D.5077, D.5077
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 174              		.loc 1 895 0
 175 0078 1A43     		orrs	r2, r3	@ D.5077, D.5077
 176 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.5077,
 177 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 178 007e E318     		adds	r3, r4, r3	@ tmp184, D.5075, tmp183
 179 0080 0433     		adds	r3, r3, #4	@ tmp185,
 180 0082 1A60     		str	r2, [r3]	@ D.5077, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 181              		.loc 1 900 0
 182 0084 2BE0     		b	.L7	@
ARM GAS  /tmp/ccSHmGTg.s 			page 20


 183              	.L5:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 184              		.loc 1 898 0
 185 0086 184C     		ldr	r4, .L8+4	@ D.5079,
 186 0088 6B46     		mov	r3, sp	@ tmp207,
 187 008a 0733     		adds	r3, r3, #7	@ tmp186,
 188 008c 1B78     		ldrb	r3, [r3]	@ D.5077, IRQn
 189 008e 5BB2     		sxtb	r3, r3	@ D.5077, D.5077
 190 0090 9B08     		lsrs	r3, r3, #2	@ D.5077, D.5077,
 191 0092 1549     		ldr	r1, .L8+4	@ D.5079,
 192 0094 6A46     		mov	r2, sp	@ tmp208,
 193 0096 0732     		adds	r2, r2, #7	@ tmp187,
 194 0098 1278     		ldrb	r2, [r2]	@ D.5077, IRQn
 195 009a 52B2     		sxtb	r2, r2	@ D.5077, D.5077
 196 009c 9208     		lsrs	r2, r2, #2	@ D.5077, D.5077,
 197 009e C032     		adds	r2, r2, #192	@ tmp188,
 198 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 199 00a2 5258     		ldr	r2, [r2, r1]	@ D.5077, _38->IP
 200 00a4 6946     		mov	r1, sp	@ tmp209,
 201 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 202 00a8 0978     		ldrb	r1, [r1]	@ D.5076, IRQn
 203 00aa 0800     		movs	r0, r1	@ D.5077, D.5076
 204 00ac 0321     		movs	r1, #3	@ tmp191,
 205 00ae 0140     		ands	r1, r0	@ D.5077, D.5077
 206 00b0 C900     		lsls	r1, r1, #3	@ D.5077, D.5077,
 207 00b2 FF20     		movs	r0, #255	@ tmp192,
 208 00b4 8840     		lsls	r0, r0, r1	@ D.5078, D.5078, D.5077
 209 00b6 0100     		movs	r1, r0	@ D.5078, D.5078
 210 00b8 C943     		mvns	r1, r1	@ D.5078, D.5078
 211 00ba 1140     		ands	r1, r2	@ D.5077, D.5077
 899:./cmsis_core/core_cm0.h **** }
 212              		.loc 1 899 0
 213 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 214 00be 9201     		lsls	r2, r2, #6	@ D.5077, tmp193,
 215 00c0 FF20     		movs	r0, #255	@ tmp194,
 216 00c2 1040     		ands	r0, r2	@ D.5077, D.5077
 217 00c4 6A46     		mov	r2, sp	@ tmp211,
 218 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 219 00c8 1278     		ldrb	r2, [r2]	@ D.5076, IRQn
 220 00ca 1500     		movs	r5, r2	@ D.5077, D.5076
 221 00cc 0322     		movs	r2, #3	@ tmp196,
 222 00ce 2A40     		ands	r2, r5	@ D.5077, D.5077
 223 00d0 D200     		lsls	r2, r2, #3	@ D.5077, D.5077,
 224 00d2 9040     		lsls	r0, r0, r2	@ D.5077, D.5077, D.5077
 225 00d4 0200     		movs	r2, r0	@ D.5077, D.5077
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 226              		.loc 1 898 0
 227 00d6 0A43     		orrs	r2, r1	@ D.5077, D.5077
 228 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 229 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 230 00dc 1A51     		str	r2, [r3, r4]	@ D.5077, _35->IP
 231              	.L7:
 232              		.loc 1 900 0
 233 00de C046     		nop
 234 00e0 03B0     		add	sp, sp, #12	@,,
 235              		@ sp needed	@
 236 00e2 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccSHmGTg.s 			page 21


 237              	.L9:
 238              		.align	2
 239              	.L8:
 240 00e4 00ED00E0 		.word	-536810240
 241 00e8 00E100E0 		.word	-536813312
 242              		.cfi_endproc
 243              	.LFE16:
 244              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 245              		.comm	p_channel,4,4
 246              		.comm	VoltagePhoto,64,4
 247              		.global	photo_index
 248              		.section	.bss.photo_index,"aw",%nobits
 249              		.type	photo_index, %object
 250              		.size	photo_index, 1
 251              	photo_index:
 252 0000 00       		.space	1
 253              		.global	last_photo
 254              		.section	.bss.last_photo,"aw",%nobits
 255              		.align	1
 256              		.type	last_photo, %object
 257              		.size	last_photo, 2
 258              	last_photo:
 259 0000 0000     		.space	2
 260              		.global	new_photo_sample
 261              		.section	.bss.new_photo_sample,"aw",%nobits
 262              		.type	new_photo_sample, %object
 263              		.size	new_photo_sample, 1
 264              	new_photo_sample:
 265 0000 00       		.space	1
 266              		.section	.text.AdcConfig,"ax",%progbits
 267              		.align	2
 268              		.global	AdcConfig
 269              		.code	16
 270              		.thumb_func
 271              		.type	AdcConfig, %function
 272              	AdcConfig:
 273              	.LFB20:
 274              		.file 2 "src/adc.c"
   1:src/adc.c     **** /*
   2:src/adc.c     ****  * adc.c
   3:src/adc.c     ****  *
   4:src/adc.c     ****  *  Created on: 04/05/2015
   5:src/adc.c     ****  *      Author: Mariano
   6:src/adc.c     ****  */
   7:src/adc.c     **** #include "adc.h"
   8:src/adc.c     **** #include "stm32f0xx.h"
   9:src/adc.c     **** #include "hard.h"
  10:src/adc.c     **** // #include "dsp.h"
  11:src/adc.c     **** 
  12:src/adc.c     **** 
  13:src/adc.c     **** //--- VARIABLES EXTERNAS ---//
  14:src/adc.c     **** extern volatile unsigned short adc_ch [];
  15:src/adc.c     **** extern volatile unsigned short tt_take_photo_sample;
  16:src/adc.c     **** 
  17:src/adc.c     **** #ifdef ADC_WITH_INT
  18:src/adc.c     **** extern volatile unsigned char seq_ready;
  19:src/adc.c     **** #endif
ARM GAS  /tmp/ccSHmGTg.s 			page 22


  20:src/adc.c     **** 
  21:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
  22:src/adc.c     **** extern volatile unsigned short tt_take_temp_sample;
  23:src/adc.c     **** #endif
  24:src/adc.c     **** 
  25:src/adc.c     **** //--- VARIABLES GLOBALES ---//
  26:src/adc.c     **** #ifdef ADC_WITH_INT
  27:src/adc.c     **** volatile unsigned short * p_channel;
  28:src/adc.c     **** #endif
  29:src/adc.c     **** 
  30:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
  31:src/adc.c     **** // ------- del sensor de Temperatura -------
  32:src/adc.c     **** unsigned short board_temp [SIZEOF_BOARD_TEMP];
  33:src/adc.c     **** unsigned short last_temp = 0;
  34:src/adc.c     **** unsigned char board_temp_index = 0;
  35:src/adc.c     **** unsigned char new_temp_sample = 0;
  36:src/adc.c     **** #endif
  37:src/adc.c     **** 
  38:src/adc.c     **** // ------- del PhotoTransistor -------
  39:src/adc.c     **** #define SIZEOF_PHOTO_TRANS		32
  40:src/adc.c     **** #define DIVISOR_PHOTO			5
  41:src/adc.c     **** unsigned short VoltagePhoto [SIZEOF_PHOTO_TRANS];
  42:src/adc.c     **** unsigned char photo_index = 0;
  43:src/adc.c     **** unsigned short last_photo = 0;
  44:src/adc.c     **** unsigned char new_photo_sample = 0;
  45:src/adc.c     **** 
  46:src/adc.c     **** 
  47:src/adc.c     **** 
  48:src/adc.c     **** //Single conversion mode (CONT=0)
  49:src/adc.c     **** //In Single conversion mode, the ADC performs a single sequence of conversions,
  50:src/adc.c     **** //converting all the channels once.
  51:src/adc.c     **** 
  52:src/adc.c     **** //Continuous conversion mode (CONT=1)
  53:src/adc.c     **** //In continuous conversion mode, when a software or hardware trigger event occurs,
  54:src/adc.c     **** //the ADC performs a sequence of conversions, converting all the channels once and then
  55:src/adc.c     **** //automatically re-starts and continuously performs the same sequence of conversions
  56:src/adc.c     **** 
  57:src/adc.c     **** //Discontinuous mode (DISCEN)
  58:src/adc.c     **** //In this mode (DISCEN=1), a hardware or software trigger event is required to start
  59:src/adc.c     **** //each conversion defined in the sequence. Only with (CONT=0)
  60:src/adc.c     **** 
  61:src/adc.c     **** void AdcConfig (void)
  62:src/adc.c     **** {
 275              		.loc 2 62 0
 276              		.cfi_startproc
 277 0000 10B5     		push	{r4, lr}	@
 278              	.LCFI3:
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 4, -8
 281              		.cfi_offset 14, -4
  63:src/adc.c     **** 	if (!RCC_ADC_CLK)
 282              		.loc 2 63 0
 283 0002 2A4B     		ldr	r3, .L12	@ D.5080,
 284 0004 9A69     		ldr	r2, [r3, #24]	@ D.5081, _2->APB2ENR
 285 0006 8023     		movs	r3, #128	@ tmp166,
 286 0008 9B00     		lsls	r3, r3, #2	@ tmp145, tmp166,
 287 000a 1340     		ands	r3, r2	@ D.5081, D.5081
ARM GAS  /tmp/ccSHmGTg.s 			page 23


 288 000c 06D1     		bne	.L11	@,
  64:src/adc.c     **** 		RCC_ADC_CLK_ON;
 289              		.loc 2 64 0
 290 000e 274B     		ldr	r3, .L12	@ D.5080,
 291 0010 264A     		ldr	r2, .L12	@ D.5080,
 292 0012 9269     		ldr	r2, [r2, #24]	@ D.5081, _7->APB2ENR
 293 0014 8021     		movs	r1, #128	@ tmp165,
 294 0016 8900     		lsls	r1, r1, #2	@ tmp146, tmp165,
 295 0018 0A43     		orrs	r2, r1	@ D.5081, tmp146
 296 001a 9A61     		str	r2, [r3, #24]	@ D.5081, _6->APB2ENR
 297              	.L11:
  65:src/adc.c     **** 
  66:src/adc.c     **** 	// preseteo los registros a default, la mayoria necesita tener ADC apagado
  67:src/adc.c     **** 	ADC1->CR = 0x00000000;
 298              		.loc 2 67 0
 299 001c 244B     		ldr	r3, .L12+4	@ D.5082,
 300 001e 0022     		movs	r2, #0	@ tmp147,
 301 0020 9A60     		str	r2, [r3, #8]	@ tmp147, _11->CR
  68:src/adc.c     **** 	ADC1->IER = 0x00000000;
 302              		.loc 2 68 0
 303 0022 234B     		ldr	r3, .L12+4	@ D.5082,
 304 0024 0022     		movs	r2, #0	@ tmp148,
 305 0026 5A60     		str	r2, [r3, #4]	@ tmp148, _13->IER
  69:src/adc.c     **** 	ADC1->CFGR1 = 0x00000000;
 306              		.loc 2 69 0
 307 0028 214B     		ldr	r3, .L12+4	@ D.5082,
 308 002a 0022     		movs	r2, #0	@ tmp149,
 309 002c DA60     		str	r2, [r3, #12]	@ tmp149, _15->CFGR1
  70:src/adc.c     **** 	ADC1->CFGR2 = 0x00000000;
 310              		.loc 2 70 0
 311 002e 204B     		ldr	r3, .L12+4	@ D.5082,
 312 0030 0022     		movs	r2, #0	@ tmp150,
 313 0032 1A61     		str	r2, [r3, #16]	@ tmp150, _17->CFGR2
  71:src/adc.c     **** 	ADC1->SMPR = 0x00000000;
 314              		.loc 2 71 0
 315 0034 1E4B     		ldr	r3, .L12+4	@ D.5082,
 316 0036 0022     		movs	r2, #0	@ tmp151,
 317 0038 5A61     		str	r2, [r3, #20]	@ tmp151, _19->SMPR
  72:src/adc.c     **** 	ADC1->TR = 0x0FFF0000;
 318              		.loc 2 72 0
 319 003a 1D4B     		ldr	r3, .L12+4	@ D.5082,
 320 003c 1D4A     		ldr	r2, .L12+8	@ tmp152,
 321 003e 1A62     		str	r2, [r3, #32]	@ tmp152, _21->TR
  73:src/adc.c     **** 	ADC1->CHSELR = 0x00000000;
 322              		.loc 2 73 0
 323 0040 1B4B     		ldr	r3, .L12+4	@ D.5082,
 324 0042 0022     		movs	r2, #0	@ tmp153,
 325 0044 9A62     		str	r2, [r3, #40]	@ tmp153, _23->CHSELR
  74:src/adc.c     **** 
  75:src/adc.c     **** 	//set clock
  76:src/adc.c     **** 	ADC1->CFGR2 = ADC_ClockMode_SynClkDiv4;
 326              		.loc 2 76 0
 327 0046 1A4B     		ldr	r3, .L12+4	@ D.5082,
 328 0048 8022     		movs	r2, #128	@ tmp162,
 329 004a 1206     		lsls	r2, r2, #24	@ tmp154, tmp162,
 330 004c 1A61     		str	r2, [r3, #16]	@ tmp154, _25->CFGR2
  77:src/adc.c     **** 
ARM GAS  /tmp/ccSHmGTg.s 			page 24


  78:src/adc.c     **** 	//set resolution, trigger & Continuos or Discontinuous
  79:src/adc.c     **** 	ADC1->CFGR1 |= ADC_Resolution_12b | ADC_ExternalTrigConvEdge_Rising | ADC_ExternalTrigConv_T3_TRGO
 331              		.loc 2 79 0
 332 004e 184B     		ldr	r3, .L12+4	@ D.5082,
 333 0050 174A     		ldr	r2, .L12+4	@ D.5082,
 334 0052 D268     		ldr	r2, [r2, #12]	@ D.5081, _28->CFGR1
 335 0054 9821     		movs	r1, #152	@ tmp163,
 336 0056 C900     		lsls	r1, r1, #3	@ tmp155, tmp163,
 337 0058 0A43     		orrs	r2, r1	@ D.5081, tmp155
 338 005a DA60     		str	r2, [r3, #12]	@ D.5081, _27->CFGR1
  80:src/adc.c     **** 	//ADC1->CFGR1 |= ADC_Resolution_12b | ADC_ExternalTrigConvEdge_Rising | ADC_ExternalTrigConv_T1_TR
  81:src/adc.c     **** 	//ADC1->CFGR1 |= ADC_Resolution_12b | ADC_CFGR1_DISCEN;
  82:src/adc.c     **** 	// ADC1->CFGR1 |= ADC_Resolution_12b;
  83:src/adc.c     **** 
  84:src/adc.c     **** 	//DMA Config
  85:src/adc.c     **** 	//ADC1->CFGR1 |= ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG;
  86:src/adc.c     **** 
  87:src/adc.c     **** 	//set sampling time
  88:src/adc.c     **** 	ADC1->SMPR |= ADC_SampleTime_41_5Cycles;		//17.39 son SP 420
 339              		.loc 2 88 0
 340 005c 144B     		ldr	r3, .L12+4	@ D.5082,
 341 005e 144A     		ldr	r2, .L12+4	@ D.5082,
 342 0060 5269     		ldr	r2, [r2, #20]	@ D.5081, _33->SMPR
 343 0062 0421     		movs	r1, #4	@ tmp156,
 344 0064 0A43     		orrs	r2, r1	@ D.5081, tmp156
 345 0066 5A61     		str	r2, [r3, #20]	@ D.5081, _32->SMPR
  89:src/adc.c     **** 	// ADC1->SMPR |= ADC_SampleTime_28_5Cycles;		//17.39 son SP 420
  90:src/adc.c     **** 	//ADC1->SMPR |= ADC_SampleTime_7_5Cycles;		//17.36 de salida son SP 420 pero a veces pega
  91:src/adc.c     **** 													//las dos int (usar DMA?) y pierde el valor intermedio
  92:src/adc.c     **** 	//ADC1->SMPR |= ADC_SampleTime_1_5Cycles;			//20.7 de salida son SP 420 (regula mal)
  93:src/adc.c     **** 
  94:src/adc.c     **** #ifdef ADC_WITH_INT
  95:src/adc.c     **** 	//set channel selection
  96:src/adc.c     **** 	ADC1->CHSELR |= ADC_Channel_0 | ADC_Channel_1 | ADC_Channel_8;
 346              		.loc 2 96 0
 347 0068 114B     		ldr	r3, .L12+4	@ D.5082,
 348 006a 114A     		ldr	r2, .L12+4	@ D.5082,
 349 006c 926A     		ldr	r2, [r2, #40]	@ D.5081, _38->CHSELR
 350 006e 0421     		movs	r1, #4	@ tmp164,
 351 0070 FF31     		adds	r1, r1, #255	@ tmp157,
 352 0072 0A43     		orrs	r2, r1	@ D.5081, tmp157
 353 0074 9A62     		str	r2, [r3, #40]	@ D.5081, _37->CHSELR
  97:src/adc.c     **** 
  98:src/adc.c     **** 	//set interrupts
  99:src/adc.c     **** 	ADC1->IER |= ADC_IT_EOC;
 354              		.loc 2 99 0
 355 0076 0E4B     		ldr	r3, .L12+4	@ D.5082,
 356 0078 0D4A     		ldr	r2, .L12+4	@ D.5082,
 357 007a 5268     		ldr	r2, [r2, #4]	@ D.5081, _43->IER
 358 007c 0421     		movs	r1, #4	@ tmp158,
 359 007e 0A43     		orrs	r2, r1	@ D.5081, tmp158
 360 0080 5A60     		str	r2, [r3, #4]	@ D.5081, _42->IER
 100:src/adc.c     **** 
 101:src/adc.c     **** 	//set pointer
 102:src/adc.c     **** 	p_channel = &adc_ch[0];
 361              		.loc 2 102 0
 362 0082 0D4B     		ldr	r3, .L12+12	@ tmp159,
ARM GAS  /tmp/ccSHmGTg.s 			page 25


 363 0084 0D4A     		ldr	r2, .L12+16	@ tmp160,
 364 0086 1A60     		str	r2, [r3]	@ tmp160, p_channel
 103:src/adc.c     **** 
 104:src/adc.c     **** 	NVIC_EnableIRQ(ADC1_COMP_IRQn);
 365              		.loc 2 104 0
 366 0088 0C20     		movs	r0, #12	@,
 367 008a FFF7FEFF 		bl	NVIC_EnableIRQ	@
 105:src/adc.c     **** 	NVIC_SetPriority(ADC1_COMP_IRQn, 3);
 368              		.loc 2 105 0
 369 008e 0321     		movs	r1, #3	@,
 370 0090 0C20     		movs	r0, #12	@,
 371 0092 FFF7FEFF 		bl	NVIC_SetPriority	@
 106:src/adc.c     **** #endif
 107:src/adc.c     **** 
 108:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
 109:src/adc.c     **** 	ADC->CCR |= ADC_CCR_TSEN;
 110:src/adc.c     **** #endif
 111:src/adc.c     **** 
 112:src/adc.c     **** 	//calibrar ADC
 113:src/adc.c     **** 	ADCGetCalibrationFactor();
 372              		.loc 2 113 0
 373 0096 FFF7FEFF 		bl	ADCGetCalibrationFactor	@
 114:src/adc.c     **** 
 115:src/adc.c     **** 	// Enable ADC1
 116:src/adc.c     **** 	ADC1->CR |= ADC_CR_ADEN;
 374              		.loc 2 116 0
 375 009a 054B     		ldr	r3, .L12+4	@ D.5082,
 376 009c 044A     		ldr	r2, .L12+4	@ D.5082,
 377 009e 9268     		ldr	r2, [r2, #8]	@ D.5081, _52->CR
 378 00a0 0121     		movs	r1, #1	@ tmp161,
 379 00a2 0A43     		orrs	r2, r1	@ D.5081, tmp161
 380 00a4 9A60     		str	r2, [r3, #8]	@ D.5081, _51->CR
 117:src/adc.c     **** }
 381              		.loc 2 117 0
 382 00a6 C046     		nop
 383              		@ sp needed	@
 384 00a8 10BD     		pop	{r4, pc}
 385              	.L13:
 386 00aa C046     		.align	2
 387              	.L12:
 388 00ac 00100240 		.word	1073876992
 389 00b0 00240140 		.word	1073816576
 390 00b4 0000FF0F 		.word	268369920
 391 00b8 00000000 		.word	p_channel
 392 00bc 00000000 		.word	adc_ch
 393              		.cfi_endproc
 394              	.LFE20:
 395              		.size	AdcConfig, .-AdcConfig
 396              		.section	.text.ADC1_COMP_IRQHandler,"ax",%progbits
 397              		.align	2
 398              		.global	ADC1_COMP_IRQHandler
 399              		.code	16
 400              		.thumb_func
 401              		.type	ADC1_COMP_IRQHandler, %function
 402              	ADC1_COMP_IRQHandler:
 403              	.LFB21:
 118:src/adc.c     **** 
ARM GAS  /tmp/ccSHmGTg.s 			page 26


 119:src/adc.c     **** #ifdef ADC_WITH_INT
 120:src/adc.c     **** void ADC1_COMP_IRQHandler (void)
 121:src/adc.c     **** {
 404              		.loc 2 121 0
 405              		.cfi_startproc
 122:src/adc.c     **** 	if (ADC1->ISR & ADC_IT_EOC)
 406              		.loc 2 122 0
 407 0000 184B     		ldr	r3, .L19	@ D.5083,
 408 0002 1B68     		ldr	r3, [r3]	@ D.5084, _3->ISR
 409 0004 0422     		movs	r2, #4	@ tmp131,
 410 0006 1340     		ands	r3, r2	@ D.5084, tmp131
 411 0008 2AD0     		beq	.L18	@,
 123:src/adc.c     **** 	{
 124:src/adc.c     **** 		if (ADC1->ISR & ADC_IT_EOSEQ)	//seguro que es channel8 en posicion 3
 412              		.loc 2 124 0
 413 000a 164B     		ldr	r3, .L19	@ D.5083,
 414 000c 1B68     		ldr	r3, [r3]	@ D.5084, _7->ISR
 415 000e 0822     		movs	r2, #8	@ tmp132,
 416 0010 1340     		ands	r3, r2	@ D.5084, tmp132
 417 0012 0FD0     		beq	.L16	@,
 125:src/adc.c     **** 		{
 126:src/adc.c     **** 			p_channel = &adc_ch[2];
 418              		.loc 2 126 0
 419 0014 144B     		ldr	r3, .L19+4	@ tmp133,
 420 0016 154A     		ldr	r2, .L19+8	@ tmp134,
 421 0018 1A60     		str	r2, [r3]	@ tmp134, p_channel
 127:src/adc.c     **** 			*p_channel = ADC1->DR;
 422              		.loc 2 127 0
 423 001a 134B     		ldr	r3, .L19+4	@ tmp135,
 424 001c 1A68     		ldr	r2, [r3]	@ D.5085, p_channel
 425 001e 114B     		ldr	r3, .L19	@ D.5083,
 426 0020 1B6C     		ldr	r3, [r3, #64]	@ D.5084, _12->DR
 427 0022 9BB2     		uxth	r3, r3	@ D.5086, D.5084
 428 0024 1380     		strh	r3, [r2]	@ tmp136, *_11
 128:src/adc.c     **** 			p_channel = &adc_ch[0];
 429              		.loc 2 128 0
 430 0026 104B     		ldr	r3, .L19+4	@ tmp137,
 431 0028 114A     		ldr	r2, .L19+12	@ tmp138,
 432 002a 1A60     		str	r2, [r3]	@ tmp138, p_channel
 129:src/adc.c     **** 			seq_ready = 1;
 433              		.loc 2 129 0
 434 002c 114B     		ldr	r3, .L19+16	@ tmp139,
 435 002e 0122     		movs	r2, #1	@ tmp140,
 436 0030 1A70     		strb	r2, [r3]	@ tmp141, seq_ready
 437 0032 0FE0     		b	.L17	@
 438              	.L16:
 130:src/adc.c     **** 		}
 131:src/adc.c     **** 		else
 132:src/adc.c     **** 		{
 133:src/adc.c     **** 			*p_channel = ADC1->DR;		//
 439              		.loc 2 133 0
 440 0034 0C4B     		ldr	r3, .L19+4	@ tmp142,
 441 0036 1A68     		ldr	r2, [r3]	@ D.5085, p_channel
 442 0038 0A4B     		ldr	r3, .L19	@ D.5083,
 443 003a 1B6C     		ldr	r3, [r3, #64]	@ D.5084, _19->DR
 444 003c 9BB2     		uxth	r3, r3	@ D.5086, D.5084
 445 003e 1380     		strh	r3, [r2]	@ tmp143, *_18
ARM GAS  /tmp/ccSHmGTg.s 			page 27


 134:src/adc.c     **** 			if (p_channel < &adc_ch[2])
 446              		.loc 2 134 0
 447 0040 094B     		ldr	r3, .L19+4	@ tmp144,
 448 0042 1A68     		ldr	r2, [r3]	@ D.5085, p_channel
 449 0044 094B     		ldr	r3, .L19+8	@ tmp145,
 450 0046 9A42     		cmp	r2, r3	@ D.5085, tmp145
 451 0048 04D2     		bcs	.L17	@,
 135:src/adc.c     **** 				p_channel++;
 452              		.loc 2 135 0
 453 004a 074B     		ldr	r3, .L19+4	@ tmp146,
 454 004c 1B68     		ldr	r3, [r3]	@ D.5085, p_channel
 455 004e 9A1C     		adds	r2, r3, #2	@ D.5085, D.5085,
 456 0050 054B     		ldr	r3, .L19+4	@ tmp147,
 457 0052 1A60     		str	r2, [r3]	@ D.5085, p_channel
 458              	.L17:
 136:src/adc.c     **** 		}
 137:src/adc.c     **** 
 138:src/adc.c     **** 		//clear pending
 139:src/adc.c     **** 		ADC1->ISR |= ADC_IT_EOC | ADC_IT_EOSEQ;
 459              		.loc 2 139 0
 460 0054 034B     		ldr	r3, .L19	@ D.5083,
 461 0056 034A     		ldr	r2, .L19	@ D.5083,
 462 0058 1268     		ldr	r2, [r2]	@ D.5084, _28->ISR
 463 005a 0C21     		movs	r1, #12	@ tmp148,
 464 005c 0A43     		orrs	r2, r1	@ D.5084, tmp148
 465 005e 1A60     		str	r2, [r3]	@ D.5084, _27->ISR
 466              	.L18:
 140:src/adc.c     **** 	}
 141:src/adc.c     **** }
 467              		.loc 2 141 0
 468 0060 C046     		nop
 469              		@ sp needed	@
 470 0062 7047     		bx	lr
 471              	.L20:
 472              		.align	2
 473              	.L19:
 474 0064 00240140 		.word	1073816576
 475 0068 00000000 		.word	p_channel
 476 006c 04000000 		.word	adc_ch+4
 477 0070 00000000 		.word	adc_ch
 478 0074 00000000 		.word	seq_ready
 479              		.cfi_endproc
 480              	.LFE21:
 481              		.size	ADC1_COMP_IRQHandler, .-ADC1_COMP_IRQHandler
 482              		.section	.text.SetADC1_SampleTime,"ax",%progbits
 483              		.align	2
 484              		.global	SetADC1_SampleTime
 485              		.code	16
 486              		.thumb_func
 487              		.type	SetADC1_SampleTime, %function
 488              	SetADC1_SampleTime:
 489              	.LFB22:
 142:src/adc.c     **** #endif
 143:src/adc.c     **** 
 144:src/adc.c     **** 
 145:src/adc.c     **** //Setea el sample time en el ADC
 146:src/adc.c     **** void SetADC1_SampleTime (void)
ARM GAS  /tmp/ccSHmGTg.s 			page 28


 147:src/adc.c     **** {
 490              		.loc 2 147 0
 491              		.cfi_startproc
 492 0000 82B0     		sub	sp, sp, #8	@,,
 493              	.LCFI4:
 494              		.cfi_def_cfa_offset 8
 148:src/adc.c     **** 	uint32_t tmpreg = 0;
 495              		.loc 2 148 0
 496 0002 0023     		movs	r3, #0	@ tmp111,
 497 0004 0193     		str	r3, [sp, #4]	@ tmp111, tmpreg
 149:src/adc.c     **** 
 150:src/adc.c     **** 	/* Clear the Sampling time Selection bits */
 151:src/adc.c     **** 	tmpreg &= ~ADC_SMPR1_SMPR;
 498              		.loc 2 151 0
 499 0006 019B     		ldr	r3, [sp, #4]	@ tmp113, tmpreg
 500 0008 0722     		movs	r2, #7	@ tmp114,
 501 000a 9343     		bics	r3, r2	@ tmp112, tmp114
 502 000c 0193     		str	r3, [sp, #4]	@ tmp112, tmpreg
 152:src/adc.c     **** 
 153:src/adc.c     **** 	/* Set the ADC Sampling Time register */
 154:src/adc.c     **** 	tmpreg |= (uint32_t)ADC_SampleTime_239_5Cycles;
 503              		.loc 2 154 0
 504 000e 019B     		ldr	r3, [sp, #4]	@ tmp116, tmpreg
 505 0010 0722     		movs	r2, #7	@ tmp117,
 506 0012 1343     		orrs	r3, r2	@ tmp115, tmp117
 507 0014 0193     		str	r3, [sp, #4]	@ tmp115, tmpreg
 155:src/adc.c     **** 
 156:src/adc.c     **** 	/* Configure the ADC Sample time register */
 157:src/adc.c     **** 	ADC1->SMPR = tmpreg ;
 508              		.loc 2 157 0
 509 0016 034B     		ldr	r3, .L22	@ D.5087,
 510 0018 019A     		ldr	r2, [sp, #4]	@ tmp118, tmpreg
 511 001a 5A61     		str	r2, [r3, #20]	@ tmp118, _4->SMPR
 158:src/adc.c     **** }
 512              		.loc 2 158 0
 513 001c C046     		nop
 514 001e 02B0     		add	sp, sp, #8	@,,
 515              		@ sp needed	@
 516 0020 7047     		bx	lr
 517              	.L23:
 518 0022 C046     		.align	2
 519              	.L22:
 520 0024 00240140 		.word	1073816576
 521              		.cfi_endproc
 522              	.LFE22:
 523              		.size	SetADC1_SampleTime, .-SetADC1_SampleTime
 524              		.section	.text.ReadADC1_SameSampleTime,"ax",%progbits
 525              		.align	2
 526              		.global	ReadADC1_SameSampleTime
 527              		.code	16
 528              		.thumb_func
 529              		.type	ReadADC1_SameSampleTime, %function
 530              	ReadADC1_SameSampleTime:
 531              	.LFB23:
 159:src/adc.c     **** 
 160:src/adc.c     **** 
 161:src/adc.c     **** //lee el ADC sin cambiar el sample time anterior
ARM GAS  /tmp/ccSHmGTg.s 			page 29


 162:src/adc.c     **** unsigned short ReadADC1_SameSampleTime (unsigned int channel)
 163:src/adc.c     **** {
 532              		.loc 2 163 0
 533              		.cfi_startproc
 534 0000 82B0     		sub	sp, sp, #8	@,,
 535              	.LCFI5:
 536              		.cfi_def_cfa_offset 8
 537 0002 0190     		str	r0, [sp, #4]	@ channel, channel
 164:src/adc.c     **** 	// Configure the ADC Channel
 165:src/adc.c     **** 	ADC1->CHSELR = channel;
 538              		.loc 2 165 0
 539 0004 0A4B     		ldr	r3, .L27	@ D.5088,
 540 0006 019A     		ldr	r2, [sp, #4]	@ tmp122, channel
 541 0008 9A62     		str	r2, [r3, #40]	@ tmp122, _1->CHSELR
 166:src/adc.c     **** 
 167:src/adc.c     **** 	// Start the conversion
 168:src/adc.c     **** 	ADC1->CR |= (uint32_t)ADC_CR_ADSTART;
 542              		.loc 2 168 0
 543 000a 094B     		ldr	r3, .L27	@ D.5088,
 544 000c 084A     		ldr	r2, .L27	@ D.5088,
 545 000e 9268     		ldr	r2, [r2, #8]	@ D.5089, _6->CR
 546 0010 0421     		movs	r1, #4	@ tmp123,
 547 0012 0A43     		orrs	r2, r1	@ D.5089, tmp123
 548 0014 9A60     		str	r2, [r3, #8]	@ D.5089, _5->CR
 169:src/adc.c     **** 
 170:src/adc.c     **** 	// Wait until conversion completion
 171:src/adc.c     **** 	while((ADC1->ISR & ADC_ISR_EOC) == 0);
 549              		.loc 2 171 0
 550 0016 C046     		nop
 551              	.L25:
 552              		.loc 2 171 0 is_stmt 0 discriminator 1
 553 0018 054B     		ldr	r3, .L27	@ D.5088,
 554 001a 1B68     		ldr	r3, [r3]	@ D.5089, _10->ISR
 555 001c 0422     		movs	r2, #4	@ tmp124,
 556 001e 1340     		ands	r3, r2	@ D.5089, tmp124
 557 0020 FAD0     		beq	.L25	@,
 172:src/adc.c     **** 
 173:src/adc.c     **** 	// Get the conversion value
 174:src/adc.c     **** 	return (uint16_t) ADC1->DR;
 558              		.loc 2 174 0 is_stmt 1
 559 0022 034B     		ldr	r3, .L27	@ D.5088,
 560 0024 1B6C     		ldr	r3, [r3, #64]	@ D.5089, _13->DR
 561 0026 9BB2     		uxth	r3, r3	@ D.5090, D.5089
 175:src/adc.c     **** }
 562              		.loc 2 175 0
 563 0028 1800     		movs	r0, r3	@, <retval>
 564 002a 02B0     		add	sp, sp, #8	@,,
 565              		@ sp needed	@
 566 002c 7047     		bx	lr
 567              	.L28:
 568 002e C046     		.align	2
 569              	.L27:
 570 0030 00240140 		.word	1073816576
 571              		.cfi_endproc
 572              	.LFE23:
 573              		.size	ReadADC1_SameSampleTime, .-ReadADC1_SameSampleTime
 574              		.section	.text.ReadADC1Check,"ax",%progbits
ARM GAS  /tmp/ccSHmGTg.s 			page 30


 575              		.align	2
 576              		.global	ReadADC1Check
 577              		.code	16
 578              		.thumb_func
 579              		.type	ReadADC1Check, %function
 580              	ReadADC1Check:
 581              	.LFB24:
 176:src/adc.c     **** 
 177:src/adc.c     **** unsigned short ReadADC1Check (unsigned char channel)
 178:src/adc.c     **** {
 582              		.loc 2 178 0
 583              		.cfi_startproc
 584 0000 82B0     		sub	sp, sp, #8	@,,
 585              	.LCFI6:
 586              		.cfi_def_cfa_offset 8
 587 0002 0200     		movs	r2, r0	@ tmp137, channel
 588 0004 6B46     		mov	r3, sp	@ tmp153,
 589 0006 0733     		adds	r3, r3, #7	@ tmp138,
 590 0008 1A70     		strb	r2, [r3]	@ tmp139, channel
 179:src/adc.c     **** 	if (ADC1->CR & 0x01)			//reviso ADEN
 591              		.loc 2 179 0
 592 000a 204B     		ldr	r3, .L41	@ D.5092,
 593 000c 9B68     		ldr	r3, [r3, #8]	@ D.5093, _3->CR
 594 000e 0122     		movs	r2, #1	@ tmp140,
 595 0010 1340     		ands	r3, r2	@ D.5093, tmp140
 596 0012 01D0     		beq	.L39	@,
 180:src/adc.c     **** 		return 0xFFFF;
 597              		.loc 2 180 0
 598 0014 1E4B     		ldr	r3, .L41+4	@ D.5091,
 599 0016 35E0     		b	.L31	@
 600              	.L39:
 181:src/adc.c     **** 
 182:src/adc.c     **** 	//espero que este listo para convertir
 183:src/adc.c     **** 	while ((ADC1->ISR & 0x01) == 0);	//espero ARDY = 1
 601              		.loc 2 183 0
 602 0018 C046     		nop
 603              	.L32:
 604              		.loc 2 183 0 is_stmt 0 discriminator 1
 605 001a 1C4B     		ldr	r3, .L41	@ D.5092,
 606 001c 1B68     		ldr	r3, [r3]	@ D.5093, _8->ISR
 607 001e 0122     		movs	r2, #1	@ tmp141,
 608 0020 1340     		ands	r3, r2	@ D.5093, tmp141
 609 0022 FAD0     		beq	.L32	@,
 184:src/adc.c     **** 
 185:src/adc.c     **** 	if ((ADC1->CFGR1 & 0x00010000) == 0)			//reviso DISCONTINUOS = 1
 610              		.loc 2 185 0 is_stmt 1
 611 0024 194B     		ldr	r3, .L41	@ D.5092,
 612 0026 DA68     		ldr	r2, [r3, #12]	@ D.5093, _11->CFGR1
 613 0028 8023     		movs	r3, #128	@ tmp152,
 614 002a 5B02     		lsls	r3, r3, #9	@ tmp142, tmp152,
 615 002c 1340     		ands	r3, r2	@ D.5093, D.5093
 616 002e 01D1     		bne	.L33	@,
 186:src/adc.c     **** 		return 0xFFFF;
 617              		.loc 2 186 0
 618 0030 174B     		ldr	r3, .L41+4	@ D.5091,
 619 0032 27E0     		b	.L31	@
 620              	.L33:
ARM GAS  /tmp/ccSHmGTg.s 			page 31


 187:src/adc.c     **** 
 188:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00002000)					//reviso CONT = 0
 621              		.loc 2 188 0
 622 0034 154B     		ldr	r3, .L41	@ D.5092,
 623 0036 DA68     		ldr	r2, [r3, #12]	@ D.5093, _15->CFGR1
 624 0038 8023     		movs	r3, #128	@ tmp151,
 625 003a 9B01     		lsls	r3, r3, #6	@ tmp143, tmp151,
 626 003c 1340     		ands	r3, r2	@ D.5093, D.5093
 627 003e 01D0     		beq	.L34	@,
 189:src/adc.c     **** 		return 0xFFFF;
 628              		.loc 2 189 0
 629 0040 134B     		ldr	r3, .L41+4	@ D.5091,
 630 0042 1FE0     		b	.L31	@
 631              	.L34:
 190:src/adc.c     **** 
 191:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00000C00)					//reviso TRIGGER = 00
 632              		.loc 2 191 0
 633 0044 114B     		ldr	r3, .L41	@ D.5092,
 634 0046 DA68     		ldr	r2, [r3, #12]	@ D.5093, _19->CFGR1
 635 0048 C023     		movs	r3, #192	@ tmp150,
 636 004a 1B01     		lsls	r3, r3, #4	@ tmp144, tmp150,
 637 004c 1340     		ands	r3, r2	@ D.5093, D.5093
 638 004e 01D0     		beq	.L35	@,
 192:src/adc.c     **** 		return 0xFFFF;
 639              		.loc 2 192 0
 640 0050 0F4B     		ldr	r3, .L41+4	@ D.5091,
 641 0052 17E0     		b	.L31	@
 642              	.L35:
 193:src/adc.c     **** 
 194:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00000020)					//reviso ALIGN = 0
 643              		.loc 2 194 0
 644 0054 0D4B     		ldr	r3, .L41	@ D.5092,
 645 0056 DB68     		ldr	r3, [r3, #12]	@ D.5093, _23->CFGR1
 646 0058 2022     		movs	r2, #32	@ tmp145,
 647 005a 1340     		ands	r3, r2	@ D.5093, tmp145
 648 005c 01D0     		beq	.L36	@,
 195:src/adc.c     **** 		return 0xFFFF;
 649              		.loc 2 195 0
 650 005e 0C4B     		ldr	r3, .L41+4	@ D.5091,
 651 0060 10E0     		b	.L31	@
 652              	.L36:
 196:src/adc.c     **** 
 197:src/adc.c     **** 	if (ADC1->CFGR1 & 0x00000018)					//reviso RES = 00
 653              		.loc 2 197 0
 654 0062 0A4B     		ldr	r3, .L41	@ D.5092,
 655 0064 DB68     		ldr	r3, [r3, #12]	@ D.5093, _27->CFGR1
 656 0066 1822     		movs	r2, #24	@ tmp146,
 657 0068 1340     		ands	r3, r2	@ D.5093, tmp146
 658 006a 01D0     		beq	.L40	@,
 198:src/adc.c     **** 		return 0xFFFF;
 659              		.loc 2 198 0
 660 006c 084B     		ldr	r3, .L41+4	@ D.5091,
 661 006e 09E0     		b	.L31	@
 662              	.L40:
 199:src/adc.c     **** 
 200:src/adc.c     **** 	//espero que no se este convirtiendo ADCSTART = 0
 201:src/adc.c     **** 	while ((ADC1->CR & 0x02) != 0);	//espero ADCSTART = 0
ARM GAS  /tmp/ccSHmGTg.s 			page 32


 663              		.loc 2 201 0
 664 0070 C046     		nop
 665              	.L38:
 666              		.loc 2 201 0 is_stmt 0 discriminator 1
 667 0072 064B     		ldr	r3, .L41	@ D.5092,
 668 0074 9B68     		ldr	r3, [r3, #8]	@ D.5093, _31->CR
 669 0076 0222     		movs	r2, #2	@ tmp147,
 670 0078 1340     		ands	r3, r2	@ D.5093, tmp147
 671 007a FAD1     		bne	.L38	@,
 202:src/adc.c     **** 
 203:src/adc.c     **** 	ADC1->CHSELR = 0x00000001;	//solo convierto CH0
 672              		.loc 2 203 0 is_stmt 1
 673 007c 034B     		ldr	r3, .L41	@ D.5092,
 674 007e 0122     		movs	r2, #1	@ tmp148,
 675 0080 9A62     		str	r2, [r3, #40]	@ tmp148, _34->CHSELR
 204:src/adc.c     **** 
 205:src/adc.c     **** 	return 1;
 676              		.loc 2 205 0
 677 0082 0123     		movs	r3, #1	@ D.5091,
 678              	.L31:
 206:src/adc.c     **** }
 679              		.loc 2 206 0
 680 0084 1800     		movs	r0, r3	@, <retval>
 681 0086 02B0     		add	sp, sp, #8	@,,
 682              		@ sp needed	@
 683 0088 7047     		bx	lr
 684              	.L42:
 685 008a C046     		.align	2
 686              	.L41:
 687 008c 00240140 		.word	1073816576
 688 0090 FFFF0000 		.word	65535
 689              		.cfi_endproc
 690              	.LFE24:
 691              		.size	ReadADC1Check, .-ReadADC1Check
 692              		.section	.text.ADCGetCalibrationFactor,"ax",%progbits
 693              		.align	2
 694              		.global	ADCGetCalibrationFactor
 695              		.code	16
 696              		.thumb_func
 697              		.type	ADCGetCalibrationFactor, %function
 698              	ADCGetCalibrationFactor:
 699              	.LFB25:
 207:src/adc.c     **** 
 208:src/adc.c     **** unsigned int ADCGetCalibrationFactor (void)
 209:src/adc.c     **** {
 700              		.loc 2 209 0
 701              		.cfi_startproc
 702 0000 84B0     		sub	sp, sp, #16	@,,
 703              	.LCFI7:
 704              		.cfi_def_cfa_offset 16
 210:src/adc.c     ****   uint32_t tmpreg = 0, calibrationcounter = 0, calibrationstatus = 0;
 705              		.loc 2 210 0
 706 0002 0023     		movs	r3, #0	@ tmp122,
 707 0004 0393     		str	r3, [sp, #12]	@ tmp122, tmpreg
 708 0006 0023     		movs	r3, #0	@ tmp123,
 709 0008 0293     		str	r3, [sp, #8]	@ tmp123, calibrationcounter
 710 000a 0023     		movs	r3, #0	@ tmp124,
ARM GAS  /tmp/ccSHmGTg.s 			page 33


 711 000c 0193     		str	r3, [sp, #4]	@ tmp124, calibrationstatus
 211:src/adc.c     **** 
 212:src/adc.c     ****   /* Set the ADC calibartion */
 213:src/adc.c     ****   ADC1->CR |= (uint32_t)ADC_CR_ADCAL;
 712              		.loc 2 213 0
 713 000e 124B     		ldr	r3, .L49	@ D.5094,
 714 0010 114A     		ldr	r2, .L49	@ D.5094,
 715 0012 9268     		ldr	r2, [r2, #8]	@ D.5095, _7->CR
 716 0014 8021     		movs	r1, #128	@ tmp137,
 717 0016 0906     		lsls	r1, r1, #24	@ tmp125, tmp137,
 718 0018 0A43     		orrs	r2, r1	@ D.5095, tmp125
 719 001a 9A60     		str	r2, [r3, #8]	@ D.5095, _6->CR
 720              	.L45:
 214:src/adc.c     **** 
 215:src/adc.c     ****   /* Wait until no ADC calibration is completed */
 216:src/adc.c     ****   do
 217:src/adc.c     ****   {
 218:src/adc.c     ****     calibrationstatus = ADC1->CR & ADC_CR_ADCAL;
 721              		.loc 2 218 0 discriminator 2
 722 001c 0E4B     		ldr	r3, .L49	@ D.5094,
 723 001e 9B68     		ldr	r3, [r3, #8]	@ D.5095, _12->CR
 724 0020 DB0F     		lsrs	r3, r3, #31	@ tmp127, D.5095,
 725 0022 DB07     		lsls	r3, r3, #31	@ tmp126, tmp127,
 726 0024 0193     		str	r3, [sp, #4]	@ tmp126, calibrationstatus
 219:src/adc.c     ****     calibrationcounter++;
 727              		.loc 2 219 0 discriminator 2
 728 0026 029B     		ldr	r3, [sp, #8]	@ tmp129, calibrationcounter
 729 0028 0133     		adds	r3, r3, #1	@ tmp128,
 730 002a 0293     		str	r3, [sp, #8]	@ tmp128, calibrationcounter
 220:src/adc.c     ****   } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 731              		.loc 2 220 0 discriminator 2
 732 002c 029A     		ldr	r2, [sp, #8]	@ tmp130, calibrationcounter
 733 002e F023     		movs	r3, #240	@ tmp136,
 734 0030 1B02     		lsls	r3, r3, #8	@ tmp131, tmp136,
 735 0032 9A42     		cmp	r2, r3	@ tmp130, tmp131
 736 0034 02D0     		beq	.L44	@,
 737              		.loc 2 220 0 is_stmt 0 discriminator 1
 738 0036 019B     		ldr	r3, [sp, #4]	@ tmp132, calibrationstatus
 739 0038 002B     		cmp	r3, #0	@ tmp132,
 740 003a EFD1     		bne	.L45	@,
 741              	.L44:
 221:src/adc.c     **** 
 222:src/adc.c     ****   if((uint32_t)(ADC1->CR & ADC_CR_ADCAL) == RESET)
 742              		.loc 2 222 0 is_stmt 1
 743 003c 064B     		ldr	r3, .L49	@ D.5094,
 744 003e 9B68     		ldr	r3, [r3, #8]	@ D.5095, _16->CR
 745 0040 002B     		cmp	r3, #0	@ D.5096,
 746 0042 03DB     		blt	.L46	@,
 223:src/adc.c     ****   {
 224:src/adc.c     ****     /*Get the calibration factor from the ADC data register */
 225:src/adc.c     ****     tmpreg = ADC1->DR;
 747              		.loc 2 225 0
 748 0044 044B     		ldr	r3, .L49	@ D.5094,
 749 0046 1B6C     		ldr	r3, [r3, #64]	@ tmp133, _19->DR
 750 0048 0393     		str	r3, [sp, #12]	@ tmp133, tmpreg
 751 004a 01E0     		b	.L47	@
 752              	.L46:
ARM GAS  /tmp/ccSHmGTg.s 			page 34


 226:src/adc.c     ****   }
 227:src/adc.c     ****   else
 228:src/adc.c     ****   {
 229:src/adc.c     ****     /* Error factor */
 230:src/adc.c     ****     tmpreg = 0x00000000;
 753              		.loc 2 230 0
 754 004c 0023     		movs	r3, #0	@ tmp134,
 755 004e 0393     		str	r3, [sp, #12]	@ tmp134, tmpreg
 756              	.L47:
 231:src/adc.c     ****   }
 232:src/adc.c     ****   return tmpreg;
 757              		.loc 2 232 0
 758 0050 039B     		ldr	r3, [sp, #12]	@ D.5097, tmpreg
 233:src/adc.c     **** }
 759              		.loc 2 233 0
 760 0052 1800     		movs	r0, r3	@, <retval>
 761 0054 04B0     		add	sp, sp, #16	@,,
 762              		@ sp needed	@
 763 0056 7047     		bx	lr
 764              	.L50:
 765              		.align	2
 766              	.L49:
 767 0058 00240140 		.word	1073816576
 768              		.cfi_endproc
 769              	.LFE25:
 770              		.size	ADCGetCalibrationFactor, .-ADCGetCalibrationFactor
 771              		.section	.text.UpdatePhotoTransistor,"ax",%progbits
 772              		.align	2
 773              		.global	UpdatePhotoTransistor
 774              		.code	16
 775              		.thumb_func
 776              		.type	UpdatePhotoTransistor, %function
 777              	UpdatePhotoTransistor:
 778              	.LFB26:
 234:src/adc.c     **** 
 235:src/adc.c     **** #ifdef ADC_WITH_TEMP_SENSE
 236:src/adc.c     **** void UpdateTemp(void)
 237:src/adc.c     **** {
 238:src/adc.c     **** 	//hago update cada 1 seg
 239:src/adc.c     **** 	if (!tt_take_temp_sample)
 240:src/adc.c     **** 	{
 241:src/adc.c     **** 		tt_take_temp_sample = 1000;
 242:src/adc.c     **** 
 243:src/adc.c     **** 		board_temp [board_temp_index] = ReadADC1_SameSampleTime(ADC_CH16);
 244:src/adc.c     **** 		//board_temp [0] = ReadADC1_SameSampleTime(ADC_CH16);
 245:src/adc.c     **** 
 246:src/adc.c     **** 		if (board_temp_index < (SIZEOF_BOARD_TEMP - 1))
 247:src/adc.c     **** 			board_temp_index++;
 248:src/adc.c     **** 		else
 249:src/adc.c     **** 			board_temp_index = 0;
 250:src/adc.c     **** 
 251:src/adc.c     **** 		new_temp_sample = 1;
 252:src/adc.c     **** 	}
 253:src/adc.c     **** }
 254:src/adc.c     **** 
 255:src/adc.c     **** //devuelve el valor promedio de la temperatura
 256:src/adc.c     **** //si existen nuevas muestras hace la cuenta, sino contesta el ultimo valor calculado
ARM GAS  /tmp/ccSHmGTg.s 			page 35


 257:src/adc.c     **** unsigned short GetTemp (void)
 258:src/adc.c     **** {
 259:src/adc.c     ****     unsigned char i;
 260:src/adc.c     ****     unsigned int t = 0;
 261:src/adc.c     **** 
 262:src/adc.c     ****     if (new_temp_sample)
 263:src/adc.c     ****     {
 264:src/adc.c     ****         for (i = 0; i < SIZEOF_BOARD_TEMP; i++)
 265:src/adc.c     ****             t += board_temp[i];
 266:src/adc.c     **** 
 267:src/adc.c     ****         last_temp = t >> 3;
 268:src/adc.c     ****         new_temp_sample = 0;
 269:src/adc.c     ****     }
 270:src/adc.c     **** 
 271:src/adc.c     ****     return ConvertTemp(last_temp);
 272:src/adc.c     **** }
 273:src/adc.c     **** 
 274:src/adc.c     **** void FillTempBuffer (void)
 275:src/adc.c     **** {
 276:src/adc.c     **** 	unsigned char i;
 277:src/adc.c     **** 	unsigned short dummy;
 278:src/adc.c     **** 
 279:src/adc.c     **** 	dummy = ReadADC1_SameSampleTime(ADC_CH16);
 280:src/adc.c     **** 
 281:src/adc.c     **** 	for (i = 0; i < SIZEOF_BOARD_TEMP; i++)
 282:src/adc.c     **** 		 board_temp[i] = dummy;
 283:src/adc.c     **** 
 284:src/adc.c     **** }
 285:src/adc.c     **** 
 286:src/adc.c     **** short ConvertTemp (unsigned short adc_temp)
 287:src/adc.c     **** {
 288:src/adc.c     **** 	int32_t temperature; /* will contain the temperature in degree Celsius */
 289:src/adc.c     **** 	//temperature = (((int32_t) ADC1->DR * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR );
 290:src/adc.c     **** 	temperature = (int32_t) *TEMP30_CAL_ADDR - adc_temp;
 291:src/adc.c     **** 	temperature *= 1000;
 292:src/adc.c     **** 	temperature = temperature / 5336;	//4.3mV / °C
 293:src/adc.c     **** 	temperature = temperature + 30;
 294:src/adc.c     **** 
 295:src/adc.c     **** 	return (short) temperature;
 296:src/adc.c     **** }
 297:src/adc.c     **** #endif //ADC_WITH_TEMP_SENSE
 298:src/adc.c     **** 
 299:src/adc.c     **** void UpdatePhotoTransistor(void)
 300:src/adc.c     **** {
 779              		.loc 2 300 0
 780              		.cfi_startproc
 781 0000 10B5     		push	{r4, lr}	@
 782              	.LCFI8:
 783              		.cfi_def_cfa_offset 8
 784              		.cfi_offset 4, -8
 785              		.cfi_offset 14, -4
 301:src/adc.c     **** 	//hago update cada 1 seg
 302:src/adc.c     **** 	if (!tt_take_photo_sample)
 786              		.loc 2 302 0
 787 0002 134B     		ldr	r3, .L56	@ tmp117,
 788 0004 1B88     		ldrh	r3, [r3]	@ tmp118, tt_take_photo_sample
 789 0006 9BB2     		uxth	r3, r3	@ D.5098, tmp118
ARM GAS  /tmp/ccSHmGTg.s 			page 36


 790 0008 002B     		cmp	r3, #0	@ D.5098,
 791 000a 1FD1     		bne	.L55	@,
 303:src/adc.c     **** 	{
 304:src/adc.c     **** 		tt_take_photo_sample = 1000;
 792              		.loc 2 304 0
 793 000c 104B     		ldr	r3, .L56	@ tmp119,
 794 000e FA22     		movs	r2, #250	@ tmp139,
 795 0010 9200     		lsls	r2, r2, #2	@ tmp120, tmp139,
 796 0012 1A80     		strh	r2, [r3]	@ tmp121, tt_take_photo_sample
 305:src/adc.c     **** 
 306:src/adc.c     **** 		VoltagePhoto [photo_index] = ReadADC1_SameSampleTime(ADC_CH1);
 797              		.loc 2 306 0
 798 0014 0F4B     		ldr	r3, .L56+4	@ tmp122,
 799 0016 1B78     		ldrb	r3, [r3]	@ D.5099, photo_index
 800 0018 1C00     		movs	r4, r3	@ D.5100, D.5099
 801 001a 0220     		movs	r0, #2	@,
 802 001c FFF7FEFF 		bl	ReadADC1_SameSampleTime	@
 803 0020 0300     		movs	r3, r0	@ tmp123,
 804 0022 1900     		movs	r1, r3	@ D.5098, tmp124
 805 0024 0C4B     		ldr	r3, .L56+8	@ tmp125,
 806 0026 6200     		lsls	r2, r4, #1	@ tmp126, D.5100,
 807 0028 D152     		strh	r1, [r2, r3]	@ tmp127, VoltagePhoto
 307:src/adc.c     **** 
 308:src/adc.c     **** 		if (photo_index < (SIZEOF_PHOTO_TRANS - 1))
 808              		.loc 2 308 0
 809 002a 0A4B     		ldr	r3, .L56+4	@ tmp128,
 810 002c 1B78     		ldrb	r3, [r3]	@ D.5099, photo_index
 811 002e 1E2B     		cmp	r3, #30	@ D.5099,
 812 0030 06D8     		bhi	.L53	@,
 309:src/adc.c     **** 			photo_index++;
 813              		.loc 2 309 0
 814 0032 084B     		ldr	r3, .L56+4	@ tmp129,
 815 0034 1B78     		ldrb	r3, [r3]	@ D.5099, photo_index
 816 0036 0133     		adds	r3, r3, #1	@ tmp130,
 817 0038 DAB2     		uxtb	r2, r3	@ D.5099, tmp130
 818 003a 064B     		ldr	r3, .L56+4	@ tmp131,
 819 003c 1A70     		strb	r2, [r3]	@ tmp132, photo_index
 820 003e 02E0     		b	.L54	@
 821              	.L53:
 310:src/adc.c     **** 		else
 311:src/adc.c     **** 			photo_index = 0;
 822              		.loc 2 311 0
 823 0040 044B     		ldr	r3, .L56+4	@ tmp133,
 824 0042 0022     		movs	r2, #0	@ tmp134,
 825 0044 1A70     		strb	r2, [r3]	@ tmp135, photo_index
 826              	.L54:
 312:src/adc.c     **** 
 313:src/adc.c     **** 		new_photo_sample = 1;
 827              		.loc 2 313 0
 828 0046 054B     		ldr	r3, .L56+12	@ tmp136,
 829 0048 0122     		movs	r2, #1	@ tmp137,
 830 004a 1A70     		strb	r2, [r3]	@ tmp138, new_photo_sample
 831              	.L55:
 314:src/adc.c     **** 	}
 315:src/adc.c     **** }
 832              		.loc 2 315 0
 833 004c C046     		nop
ARM GAS  /tmp/ccSHmGTg.s 			page 37


 834              		@ sp needed	@
 835 004e 10BD     		pop	{r4, pc}
 836              	.L57:
 837              		.align	2
 838              	.L56:
 839 0050 00000000 		.word	tt_take_photo_sample
 840 0054 00000000 		.word	photo_index
 841 0058 00000000 		.word	VoltagePhoto
 842 005c 00000000 		.word	new_photo_sample
 843              		.cfi_endproc
 844              	.LFE26:
 845              		.size	UpdatePhotoTransistor, .-UpdatePhotoTransistor
 846              		.section	.text.FillPhotoBuffer,"ax",%progbits
 847              		.align	2
 848              		.global	FillPhotoBuffer
 849              		.code	16
 850              		.thumb_func
 851              		.type	FillPhotoBuffer, %function
 852              	FillPhotoBuffer:
 853              	.LFB27:
 316:src/adc.c     **** 
 317:src/adc.c     **** void FillPhotoBuffer (void)
 318:src/adc.c     **** {
 854              		.loc 2 318 0
 855              		.cfi_startproc
 856 0000 10B5     		push	{r4, lr}	@
 857              	.LCFI9:
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 4, -8
 860              		.cfi_offset 14, -4
 861 0002 82B0     		sub	sp, sp, #8	@,,
 862              	.LCFI10:
 863              		.cfi_def_cfa_offset 16
 319:src/adc.c     **** 	unsigned char i;
 320:src/adc.c     **** 	unsigned short dummy;
 321:src/adc.c     **** 
 322:src/adc.c     **** 	dummy = ReadADC1_SameSampleTime(ADC_CH1);
 864              		.loc 2 322 0
 865 0004 01AC     		add	r4, sp, #4	@ tmp112,,
 866 0006 0220     		movs	r0, #2	@,
 867 0008 FFF7FEFF 		bl	ReadADC1_SameSampleTime	@
 868 000c 0300     		movs	r3, r0	@ tmp113,
 869 000e 2380     		strh	r3, [r4]	@ tmp115, dummy
 323:src/adc.c     **** 
 324:src/adc.c     **** 	for (i = 0; i < SIZEOF_PHOTO_TRANS; i++)
 870              		.loc 2 324 0
 871 0010 6B46     		mov	r3, sp	@ tmp130,
 872 0012 0733     		adds	r3, r3, #7	@ tmp116,
 873 0014 0022     		movs	r2, #0	@ tmp117,
 874 0016 1A70     		strb	r2, [r3]	@ tmp118, i
 875 0018 0EE0     		b	.L59	@
 876              	.L60:
 325:src/adc.c     **** 		 VoltagePhoto[i] = dummy;
 877              		.loc 2 325 0 discriminator 3
 878 001a 6B46     		mov	r3, sp	@ tmp131,
 879 001c 0733     		adds	r3, r3, #7	@ tmp119,
 880 001e 1A78     		ldrb	r2, [r3]	@ D.5101, i
ARM GAS  /tmp/ccSHmGTg.s 			page 38


 881 0020 094B     		ldr	r3, .L61	@ tmp120,
 882 0022 5200     		lsls	r2, r2, #1	@ tmp121, D.5101,
 883 0024 01A9     		add	r1, sp, #4	@ tmp122,,
 884 0026 0988     		ldrh	r1, [r1]	@ tmp123, dummy
 885 0028 D152     		strh	r1, [r2, r3]	@ tmp123, VoltagePhoto
 324:src/adc.c     **** 		 VoltagePhoto[i] = dummy;
 886              		.loc 2 324 0 discriminator 3
 887 002a 6B46     		mov	r3, sp	@ tmp132,
 888 002c 0733     		adds	r3, r3, #7	@ tmp124,
 889 002e 1A78     		ldrb	r2, [r3]	@ D.5102, i
 890 0030 6B46     		mov	r3, sp	@ tmp133,
 891 0032 0733     		adds	r3, r3, #7	@ tmp125,
 892 0034 0132     		adds	r2, r2, #1	@ tmp126,
 893 0036 1A70     		strb	r2, [r3]	@ tmp127, i
 894              	.L59:
 324:src/adc.c     **** 		 VoltagePhoto[i] = dummy;
 895              		.loc 2 324 0 is_stmt 0 discriminator 1
 896 0038 6B46     		mov	r3, sp	@ tmp134,
 897 003a 0733     		adds	r3, r3, #7	@ tmp128,
 898 003c 1B78     		ldrb	r3, [r3]	@ tmp129, i
 899 003e 1F2B     		cmp	r3, #31	@ tmp129,
 900 0040 EBD9     		bls	.L60	@,
 326:src/adc.c     **** 
 327:src/adc.c     **** }
 901              		.loc 2 327 0 is_stmt 1
 902 0042 C046     		nop
 903 0044 02B0     		add	sp, sp, #8	@,,
 904              		@ sp needed	@
 905 0046 10BD     		pop	{r4, pc}
 906              	.L62:
 907              		.align	2
 908              	.L61:
 909 0048 00000000 		.word	VoltagePhoto
 910              		.cfi_endproc
 911              	.LFE27:
 912              		.size	FillPhotoBuffer, .-FillPhotoBuffer
 913              		.section	.text.GetPhoto,"ax",%progbits
 914              		.align	2
 915              		.global	GetPhoto
 916              		.code	16
 917              		.thumb_func
 918              		.type	GetPhoto, %function
 919              	GetPhoto:
 920              	.LFB28:
 328:src/adc.c     **** 
 329:src/adc.c     **** //devuelve el valor promedio del PhotoTransistor
 330:src/adc.c     **** //si existen nuevas muestras hace la cuenta, sino contesta el ultimo valor calculado
 331:src/adc.c     **** unsigned short GetPhoto (void)
 332:src/adc.c     **** {
 921              		.loc 2 332 0
 922              		.cfi_startproc
 923 0000 82B0     		sub	sp, sp, #8	@,,
 924              	.LCFI11:
 925              		.cfi_def_cfa_offset 8
 333:src/adc.c     ****     unsigned char i;
 334:src/adc.c     ****     unsigned int t = 0;
 926              		.loc 2 334 0
ARM GAS  /tmp/ccSHmGTg.s 			page 39


 927 0002 0023     		movs	r3, #0	@ tmp119,
 928 0004 0093     		str	r3, [sp]	@ tmp119, t
 335:src/adc.c     **** 
 336:src/adc.c     ****     if (new_photo_sample)
 929              		.loc 2 336 0
 930 0006 164B     		ldr	r3, .L68	@ tmp120,
 931 0008 1B78     		ldrb	r3, [r3]	@ D.5103, new_photo_sample
 932 000a 002B     		cmp	r3, #0	@ D.5103,
 933 000c 22D0     		beq	.L64	@,
 337:src/adc.c     ****     {
 338:src/adc.c     ****         for (i = 0; i < SIZEOF_PHOTO_TRANS; i++)
 934              		.loc 2 338 0
 935 000e 6B46     		mov	r3, sp	@ tmp143,
 936 0010 0733     		adds	r3, r3, #7	@ tmp121,
 937 0012 0022     		movs	r2, #0	@ tmp122,
 938 0014 1A70     		strb	r2, [r3]	@ tmp123, i
 939 0016 10E0     		b	.L65	@
 940              	.L66:
 339:src/adc.c     ****         {
 340:src/adc.c     ****             t += VoltagePhoto[i];
 941              		.loc 2 340 0 discriminator 3
 942 0018 6B46     		mov	r3, sp	@ tmp144,
 943 001a 0733     		adds	r3, r3, #7	@ tmp124,
 944 001c 1A78     		ldrb	r2, [r3]	@ D.5104, i
 945 001e 114B     		ldr	r3, .L68+4	@ tmp125,
 946 0020 5200     		lsls	r2, r2, #1	@ tmp126, D.5104,
 947 0022 D35A     		ldrh	r3, [r2, r3]	@ D.5105, VoltagePhoto
 948 0024 1A00     		movs	r2, r3	@ D.5106, D.5105
 949 0026 009B     		ldr	r3, [sp]	@ tmp128, t
 950 0028 9B18     		adds	r3, r3, r2	@ tmp127, tmp128, D.5106
 951 002a 0093     		str	r3, [sp]	@ tmp127, t
 338:src/adc.c     ****         {
 952              		.loc 2 338 0 discriminator 3
 953 002c 6B46     		mov	r3, sp	@ tmp145,
 954 002e 0733     		adds	r3, r3, #7	@ tmp129,
 955 0030 1A78     		ldrb	r2, [r3]	@ D.5103, i
 956 0032 6B46     		mov	r3, sp	@ tmp146,
 957 0034 0733     		adds	r3, r3, #7	@ tmp130,
 958 0036 0132     		adds	r2, r2, #1	@ tmp131,
 959 0038 1A70     		strb	r2, [r3]	@ tmp132, i
 960              	.L65:
 338:src/adc.c     ****         {
 961              		.loc 2 338 0 is_stmt 0 discriminator 1
 962 003a 6B46     		mov	r3, sp	@ tmp147,
 963 003c 0733     		adds	r3, r3, #7	@ tmp133,
 964 003e 1B78     		ldrb	r3, [r3]	@ tmp134, i
 965 0040 1F2B     		cmp	r3, #31	@ tmp134,
 966 0042 E9D9     		bls	.L66	@,
 341:src/adc.c     ****         }
 342:src/adc.c     **** 
 343:src/adc.c     ****         last_photo = t >> DIVISOR_PHOTO;
 967              		.loc 2 343 0 is_stmt 1
 968 0044 009B     		ldr	r3, [sp]	@ tmp135, t
 969 0046 5B09     		lsrs	r3, r3, #5	@ D.5106, tmp135,
 970 0048 9AB2     		uxth	r2, r3	@ D.5105, D.5106
 971 004a 074B     		ldr	r3, .L68+8	@ tmp136,
 972 004c 1A80     		strh	r2, [r3]	@ tmp137, last_photo
ARM GAS  /tmp/ccSHmGTg.s 			page 40


 344:src/adc.c     ****         new_photo_sample = 0;
 973              		.loc 2 344 0
 974 004e 044B     		ldr	r3, .L68	@ tmp138,
 975 0050 0022     		movs	r2, #0	@ tmp139,
 976 0052 1A70     		strb	r2, [r3]	@ tmp140, new_photo_sample
 977              	.L64:
 345:src/adc.c     ****     }
 346:src/adc.c     **** 
 347:src/adc.c     ****     return last_photo;
 978              		.loc 2 347 0
 979 0054 044B     		ldr	r3, .L68+8	@ tmp141,
 980 0056 1B88     		ldrh	r3, [r3]	@ D.5105, last_photo
 348:src/adc.c     **** }
 981              		.loc 2 348 0
 982 0058 1800     		movs	r0, r3	@, <retval>
 983 005a 02B0     		add	sp, sp, #8	@,,
 984              		@ sp needed	@
 985 005c 7047     		bx	lr
 986              	.L69:
 987 005e C046     		.align	2
 988              	.L68:
 989 0060 00000000 		.word	new_photo_sample
 990 0064 00000000 		.word	VoltagePhoto
 991 0068 00000000 		.word	last_photo
 992              		.cfi_endproc
 993              	.LFE28:
 994              		.size	GetPhoto, .-GetPhoto
 995              		.text
 996              	.Letext0:
 997              		.file 3 "./cmsis_boot/stm32f0xx.h"
 998              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 999              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1000              		.section	.debug_info,"",%progbits
 1001              	.Ldebug_info0:
 1002 0000 D1070000 		.4byte	0x7d1
 1003 0004 0200     		.2byte	0x2
 1004 0006 00000000 		.4byte	.Ldebug_abbrev0
 1005 000a 04       		.byte	0x4
 1006 000b 01       		.uleb128 0x1
 1007 000c D2040000 		.4byte	.LASF108
 1008 0010 0C       		.byte	0xc
 1009 0011 74000000 		.4byte	.LASF109
 1010 0015 6E020000 		.4byte	.LASF110
 1011 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1012 001d 00000000 		.4byte	0
 1013 0021 00000000 		.4byte	0
 1014 0025 00000000 		.4byte	.Ldebug_line0
 1015 0029 02       		.uleb128 0x2
 1016 002a 01       		.byte	0x1
 1017 002b 08       		.byte	0x8
 1018 002c EE020000 		.4byte	.LASF34
 1019 0030 03       		.uleb128 0x3
 1020 0031 17020000 		.4byte	.LASF84
 1021 0035 01       		.byte	0x1
 1022 0036 0D010000 		.4byte	0x10d
 1023 003a 03       		.byte	0x3
 1024 003b C7       		.byte	0xc7
ARM GAS  /tmp/ccSHmGTg.s 			page 41


 1025 003c 0D010000 		.4byte	0x10d
 1026 0040 04       		.uleb128 0x4
 1027 0041 0D040000 		.4byte	.LASF0
 1028 0045 72       		.sleb128 -14
 1029 0046 04       		.uleb128 0x4
 1030 0047 CB000000 		.4byte	.LASF1
 1031 004b 73       		.sleb128 -13
 1032 004c 04       		.uleb128 0x4
 1033 004d 97050000 		.4byte	.LASF2
 1034 0051 7B       		.sleb128 -5
 1035 0052 04       		.uleb128 0x4
 1036 0053 C4030000 		.4byte	.LASF3
 1037 0057 7E       		.sleb128 -2
 1038 0058 04       		.uleb128 0x4
 1039 0059 FD010000 		.4byte	.LASF4
 1040 005d 7F       		.sleb128 -1
 1041 005e 05       		.uleb128 0x5
 1042 005f 4B000000 		.4byte	.LASF5
 1043 0063 00       		.byte	0
 1044 0064 05       		.uleb128 0x5
 1045 0065 16000000 		.4byte	.LASF6
 1046 0069 01       		.byte	0x1
 1047 006a 05       		.uleb128 0x5
 1048 006b 7D050000 		.4byte	.LASF7
 1049 006f 02       		.byte	0x2
 1050 0070 05       		.uleb128 0x5
 1051 0071 9C030000 		.4byte	.LASF8
 1052 0075 03       		.byte	0x3
 1053 0076 05       		.uleb128 0x5
 1054 0077 B9040000 		.4byte	.LASF9
 1055 007b 04       		.byte	0x4
 1056 007c 05       		.uleb128 0x5
 1057 007d 55040000 		.4byte	.LASF10
 1058 0081 05       		.byte	0x5
 1059 0082 05       		.uleb128 0x5
 1060 0083 00040000 		.4byte	.LASF11
 1061 0087 06       		.byte	0x6
 1062 0088 05       		.uleb128 0x5
 1063 0089 3F030000 		.4byte	.LASF12
 1064 008d 07       		.byte	0x7
 1065 008e 05       		.uleb128 0x5
 1066 008f C3000000 		.4byte	.LASF13
 1067 0093 08       		.byte	0x8
 1068 0094 05       		.uleb128 0x5
 1069 0095 A3020000 		.4byte	.LASF14
 1070 0099 09       		.byte	0x9
 1071 009a 05       		.uleb128 0x5
 1072 009b E0030000 		.4byte	.LASF15
 1073 009f 0A       		.byte	0xa
 1074 00a0 05       		.uleb128 0x5
 1075 00a1 62040000 		.4byte	.LASF16
 1076 00a5 0B       		.byte	0xb
 1077 00a6 05       		.uleb128 0x5
 1078 00a7 48010000 		.4byte	.LASF17
 1079 00ab 0C       		.byte	0xc
 1080 00ac 05       		.uleb128 0x5
 1081 00ad F0000000 		.4byte	.LASF18
ARM GAS  /tmp/ccSHmGTg.s 			page 42


 1082 00b1 0D       		.byte	0xd
 1083 00b2 05       		.uleb128 0x5
 1084 00b3 0A020000 		.4byte	.LASF19
 1085 00b7 0E       		.byte	0xe
 1086 00b8 05       		.uleb128 0x5
 1087 00b9 8C040000 		.4byte	.LASF20
 1088 00bd 0F       		.byte	0xf
 1089 00be 05       		.uleb128 0x5
 1090 00bf 86050000 		.4byte	.LASF21
 1091 00c3 10       		.byte	0x10
 1092 00c4 05       		.uleb128 0x5
 1093 00c5 B5000000 		.4byte	.LASF22
 1094 00c9 11       		.byte	0x11
 1095 00ca 05       		.uleb128 0x5
 1096 00cb 6D010000 		.4byte	.LASF23
 1097 00cf 13       		.byte	0x13
 1098 00d0 05       		.uleb128 0x5
 1099 00d1 F2010000 		.4byte	.LASF24
 1100 00d5 14       		.byte	0x14
 1101 00d6 05       		.uleb128 0x5
 1102 00d7 DA000000 		.4byte	.LASF25
 1103 00db 15       		.byte	0x15
 1104 00dc 05       		.uleb128 0x5
 1105 00dd 7F030000 		.4byte	.LASF26
 1106 00e1 16       		.byte	0x16
 1107 00e2 05       		.uleb128 0x5
 1108 00e3 8A030000 		.4byte	.LASF27
 1109 00e7 17       		.byte	0x17
 1110 00e8 05       		.uleb128 0x5
 1111 00e9 4B040000 		.4byte	.LASF28
 1112 00ed 18       		.byte	0x18
 1113 00ee 05       		.uleb128 0x5
 1114 00ef D5010000 		.4byte	.LASF29
 1115 00f3 19       		.byte	0x19
 1116 00f4 05       		.uleb128 0x5
 1117 00f5 E8010000 		.4byte	.LASF30
 1118 00f9 1A       		.byte	0x1a
 1119 00fa 05       		.uleb128 0x5
 1120 00fb 96040000 		.4byte	.LASF31
 1121 00ff 1B       		.byte	0x1b
 1122 0100 05       		.uleb128 0x5
 1123 0101 14030000 		.4byte	.LASF32
 1124 0105 1C       		.byte	0x1c
 1125 0106 05       		.uleb128 0x5
 1126 0107 7E000000 		.4byte	.LASF33
 1127 010b 1E       		.byte	0x1e
 1128 010c 00       		.byte	0
 1129 010d 02       		.uleb128 0x2
 1130 010e 01       		.byte	0x1
 1131 010f 06       		.byte	0x6
 1132 0110 68000000 		.4byte	.LASF35
 1133 0114 06       		.uleb128 0x6
 1134 0115 B1030000 		.4byte	.LASF37
 1135 0119 03       		.byte	0x3
 1136 011a 5F01     		.2byte	0x15f
 1137 011c 30000000 		.4byte	0x30
 1138 0120 02       		.uleb128 0x2
ARM GAS  /tmp/ccSHmGTg.s 			page 43


 1139 0121 02       		.byte	0x2
 1140 0122 05       		.byte	0x5
 1141 0123 26030000 		.4byte	.LASF36
 1142 0127 07       		.uleb128 0x7
 1143 0128 F5030000 		.4byte	.LASF38
 1144 012c 04       		.byte	0x4
 1145 012d 2B       		.byte	0x2b
 1146 012e 32010000 		.4byte	0x132
 1147 0132 02       		.uleb128 0x2
 1148 0133 02       		.byte	0x2
 1149 0134 07       		.byte	0x7
 1150 0135 AB010000 		.4byte	.LASF39
 1151 0139 02       		.uleb128 0x2
 1152 013a 04       		.byte	0x4
 1153 013b 05       		.byte	0x5
 1154 013c 8E000000 		.4byte	.LASF40
 1155 0140 07       		.uleb128 0x7
 1156 0141 E5000000 		.4byte	.LASF41
 1157 0145 04       		.byte	0x4
 1158 0146 41       		.byte	0x41
 1159 0147 4B010000 		.4byte	0x14b
 1160 014b 02       		.uleb128 0x2
 1161 014c 04       		.byte	0x4
 1162 014d 07       		.byte	0x7
 1163 014e 78010000 		.4byte	.LASF42
 1164 0152 02       		.uleb128 0x2
 1165 0153 08       		.byte	0x8
 1166 0154 05       		.byte	0x5
 1167 0155 5A000000 		.4byte	.LASF43
 1168 0159 02       		.uleb128 0x2
 1169 015a 08       		.byte	0x8
 1170 015b 07       		.byte	0x7
 1171 015c 29000000 		.4byte	.LASF44
 1172 0160 08       		.uleb128 0x8
 1173 0161 04       		.byte	0x4
 1174 0162 05       		.byte	0x5
 1175 0163 696E7400 		.ascii	"int\000"
 1176 0167 02       		.uleb128 0x2
 1177 0168 04       		.byte	0x4
 1178 0169 07       		.byte	0x7
 1179 016a 57010000 		.4byte	.LASF45
 1180 016e 07       		.uleb128 0x7
 1181 016f A0000000 		.4byte	.LASF46
 1182 0173 05       		.byte	0x5
 1183 0174 1A       		.byte	0x1a
 1184 0175 27010000 		.4byte	0x127
 1185 0179 07       		.uleb128 0x7
 1186 017a BB030000 		.4byte	.LASF47
 1187 017e 05       		.byte	0x5
 1188 017f 20       		.byte	0x20
 1189 0180 40010000 		.4byte	0x140
 1190 0184 09       		.uleb128 0x9
 1191 0185 2003     		.2byte	0x320
 1192 0187 01       		.byte	0x1
 1193 0188 71       		.byte	0x71
 1194 0189 21020000 		.4byte	0x221
 1195 018d 0A       		.uleb128 0xa
ARM GAS  /tmp/ccSHmGTg.s 			page 44


 1196 018e 30030000 		.4byte	.LASF48
 1197 0192 01       		.byte	0x1
 1198 0193 73       		.byte	0x73
 1199 0194 38020000 		.4byte	0x238
 1200 0198 02       		.byte	0x2
 1201 0199 23       		.byte	0x23
 1202 019a 00       		.uleb128 0
 1203 019b 0A       		.uleb128 0xa
 1204 019c B6020000 		.4byte	.LASF49
 1205 01a0 01       		.byte	0x1
 1206 01a1 74       		.byte	0x74
 1207 01a2 3D020000 		.4byte	0x23d
 1208 01a6 02       		.byte	0x2
 1209 01a7 23       		.byte	0x23
 1210 01a8 04       		.uleb128 0x4
 1211 01a9 0A       		.uleb128 0xa
 1212 01aa 42020000 		.4byte	.LASF50
 1213 01ae 01       		.byte	0x1
 1214 01af 75       		.byte	0x75
 1215 01b0 4D020000 		.4byte	0x24d
 1216 01b4 03       		.byte	0x3
 1217 01b5 23       		.byte	0x23
 1218 01b6 8001     		.uleb128 0x80
 1219 01b8 0A       		.uleb128 0xa
 1220 01b9 05000000 		.4byte	.LASF51
 1221 01bd 01       		.byte	0x1
 1222 01be 76       		.byte	0x76
 1223 01bf 3D020000 		.4byte	0x23d
 1224 01c3 03       		.byte	0x3
 1225 01c4 23       		.byte	0x23
 1226 01c5 8401     		.uleb128 0x84
 1227 01c7 0A       		.uleb128 0xa
 1228 01c8 55000000 		.4byte	.LASF52
 1229 01cc 01       		.byte	0x1
 1230 01cd 77       		.byte	0x77
 1231 01ce 52020000 		.4byte	0x252
 1232 01d2 03       		.byte	0x3
 1233 01d3 23       		.byte	0x23
 1234 01d4 8002     		.uleb128 0x100
 1235 01d6 0A       		.uleb128 0xa
 1236 01d7 CA020000 		.4byte	.LASF53
 1237 01db 01       		.byte	0x1
 1238 01dc 78       		.byte	0x78
 1239 01dd 3D020000 		.4byte	0x23d
 1240 01e1 03       		.byte	0x3
 1241 01e2 23       		.byte	0x23
 1242 01e3 8402     		.uleb128 0x104
 1243 01e5 0A       		.uleb128 0xa
 1244 01e6 00000000 		.4byte	.LASF54
 1245 01ea 01       		.byte	0x1
 1246 01eb 79       		.byte	0x79
 1247 01ec 57020000 		.4byte	0x257
 1248 01f0 03       		.byte	0x3
 1249 01f1 23       		.byte	0x23
 1250 01f2 8003     		.uleb128 0x180
 1251 01f4 0A       		.uleb128 0xa
 1252 01f5 D4020000 		.4byte	.LASF55
ARM GAS  /tmp/ccSHmGTg.s 			page 45


 1253 01f9 01       		.byte	0x1
 1254 01fa 7A       		.byte	0x7a
 1255 01fb 3D020000 		.4byte	0x23d
 1256 01ff 03       		.byte	0x3
 1257 0200 23       		.byte	0x23
 1258 0201 8403     		.uleb128 0x184
 1259 0203 0A       		.uleb128 0xa
 1260 0204 DE020000 		.4byte	.LASF56
 1261 0208 01       		.byte	0x1
 1262 0209 7B       		.byte	0x7b
 1263 020a 5C020000 		.4byte	0x25c
 1264 020e 03       		.byte	0x3
 1265 020f 23       		.byte	0x23
 1266 0210 8004     		.uleb128 0x200
 1267 0212 0B       		.uleb128 0xb
 1268 0213 495000   		.ascii	"IP\000"
 1269 0216 01       		.byte	0x1
 1270 0217 7C       		.byte	0x7c
 1271 0218 7C020000 		.4byte	0x27c
 1272 021c 03       		.byte	0x3
 1273 021d 23       		.byte	0x23
 1274 021e 8006     		.uleb128 0x300
 1275 0220 00       		.byte	0
 1276 0221 0C       		.uleb128 0xc
 1277 0222 79010000 		.4byte	0x179
 1278 0226 31020000 		.4byte	0x231
 1279 022a 0D       		.uleb128 0xd
 1280 022b 31020000 		.4byte	0x231
 1281 022f 00       		.byte	0
 1282 0230 00       		.byte	0
 1283 0231 02       		.uleb128 0x2
 1284 0232 04       		.byte	0x4
 1285 0233 07       		.byte	0x7
 1286 0234 64010000 		.4byte	.LASF57
 1287 0238 0E       		.uleb128 0xe
 1288 0239 21020000 		.4byte	0x221
 1289 023d 0C       		.uleb128 0xc
 1290 023e 79010000 		.4byte	0x179
 1291 0242 4D020000 		.4byte	0x24d
 1292 0246 0D       		.uleb128 0xd
 1293 0247 31020000 		.4byte	0x231
 1294 024b 1E       		.byte	0x1e
 1295 024c 00       		.byte	0
 1296 024d 0E       		.uleb128 0xe
 1297 024e 21020000 		.4byte	0x221
 1298 0252 0E       		.uleb128 0xe
 1299 0253 21020000 		.4byte	0x221
 1300 0257 0E       		.uleb128 0xe
 1301 0258 21020000 		.4byte	0x221
 1302 025c 0C       		.uleb128 0xc
 1303 025d 79010000 		.4byte	0x179
 1304 0261 6C020000 		.4byte	0x26c
 1305 0265 0D       		.uleb128 0xd
 1306 0266 31020000 		.4byte	0x231
 1307 026a 3F       		.byte	0x3f
 1308 026b 00       		.byte	0
 1309 026c 0C       		.uleb128 0xc
ARM GAS  /tmp/ccSHmGTg.s 			page 46


 1310 026d 79010000 		.4byte	0x179
 1311 0271 7C020000 		.4byte	0x27c
 1312 0275 0D       		.uleb128 0xd
 1313 0276 31020000 		.4byte	0x231
 1314 027a 07       		.byte	0x7
 1315 027b 00       		.byte	0
 1316 027c 0E       		.uleb128 0xe
 1317 027d 6C020000 		.4byte	0x26c
 1318 0281 07       		.uleb128 0x7
 1319 0282 35030000 		.4byte	.LASF58
 1320 0286 01       		.byte	0x1
 1321 0287 7D       		.byte	0x7d
 1322 0288 84010000 		.4byte	0x184
 1323 028c 0F       		.uleb128 0xf
 1324 028d 34       		.byte	0x34
 1325 028e 01       		.byte	0x1
 1326 028f 86       		.byte	0x86
 1327 0290 2F030000 		.4byte	0x32f
 1328 0294 0A       		.uleb128 0xa
 1329 0295 45000000 		.4byte	.LASF59
 1330 0299 01       		.byte	0x1
 1331 029a 88       		.byte	0x88
 1332 029b 34030000 		.4byte	0x334
 1333 029f 02       		.byte	0x2
 1334 02a0 23       		.byte	0x23
 1335 02a1 00       		.uleb128 0
 1336 02a2 0A       		.uleb128 0xa
 1337 02a3 BE010000 		.4byte	.LASF60
 1338 02a7 01       		.byte	0x1
 1339 02a8 89       		.byte	0x89
 1340 02a9 2F030000 		.4byte	0x32f
 1341 02ad 02       		.byte	0x2
 1342 02ae 23       		.byte	0x23
 1343 02af 04       		.uleb128 0x4
 1344 02b0 0A       		.uleb128 0xa
 1345 02b1 B6020000 		.4byte	.LASF49
 1346 02b5 01       		.byte	0x1
 1347 02b6 8A       		.byte	0x8a
 1348 02b7 79010000 		.4byte	0x179
 1349 02bb 02       		.byte	0x2
 1350 02bc 23       		.byte	0x23
 1351 02bd 08       		.uleb128 0x8
 1352 02be 0A       		.uleb128 0xa
 1353 02bf CA010000 		.4byte	.LASF61
 1354 02c3 01       		.byte	0x1
 1355 02c4 8B       		.byte	0x8b
 1356 02c5 2F030000 		.4byte	0x32f
 1357 02c9 02       		.byte	0x2
 1358 02ca 23       		.byte	0x23
 1359 02cb 0C       		.uleb128 0xc
 1360 02cc 0B       		.uleb128 0xb
 1361 02cd 53435200 		.ascii	"SCR\000"
 1362 02d1 01       		.byte	0x1
 1363 02d2 8C       		.byte	0x8c
 1364 02d3 2F030000 		.4byte	0x32f
 1365 02d7 02       		.byte	0x2
 1366 02d8 23       		.byte	0x23
ARM GAS  /tmp/ccSHmGTg.s 			page 47


 1367 02d9 10       		.uleb128 0x10
 1368 02da 0B       		.uleb128 0xb
 1369 02db 43435200 		.ascii	"CCR\000"
 1370 02df 01       		.byte	0x1
 1371 02e0 8D       		.byte	0x8d
 1372 02e1 2F030000 		.4byte	0x32f
 1373 02e5 02       		.byte	0x2
 1374 02e6 23       		.byte	0x23
 1375 02e7 14       		.uleb128 0x14
 1376 02e8 0A       		.uleb128 0xa
 1377 02e9 C0020000 		.4byte	.LASF62
 1378 02ed 01       		.byte	0x1
 1379 02ee 8E       		.byte	0x8e
 1380 02ef 79010000 		.4byte	0x179
 1381 02f3 02       		.byte	0x2
 1382 02f4 23       		.byte	0x23
 1383 02f5 18       		.uleb128 0x18
 1384 02f6 0B       		.uleb128 0xb
 1385 02f7 53485000 		.ascii	"SHP\000"
 1386 02fb 01       		.byte	0x1
 1387 02fc 8F       		.byte	0x8f
 1388 02fd 49030000 		.4byte	0x349
 1389 0301 02       		.byte	0x2
 1390 0302 23       		.byte	0x23
 1391 0303 1C       		.uleb128 0x1c
 1392 0304 0A       		.uleb128 0xa
 1393 0305 20030000 		.4byte	.LASF63
 1394 0309 01       		.byte	0x1
 1395 030a 90       		.byte	0x90
 1396 030b 2F030000 		.4byte	0x32f
 1397 030f 02       		.byte	0x2
 1398 0310 23       		.byte	0x23
 1399 0311 24       		.uleb128 0x24
 1400 0312 0A       		.uleb128 0xa
 1401 0313 CA020000 		.4byte	.LASF53
 1402 0317 01       		.byte	0x1
 1403 0318 91       		.byte	0x91
 1404 0319 39030000 		.4byte	0x339
 1405 031d 02       		.byte	0x2
 1406 031e 23       		.byte	0x23
 1407 031f 28       		.uleb128 0x28
 1408 0320 0A       		.uleb128 0xa
 1409 0321 D0010000 		.4byte	.LASF64
 1410 0325 01       		.byte	0x1
 1411 0326 92       		.byte	0x92
 1412 0327 2F030000 		.4byte	0x32f
 1413 032b 02       		.byte	0x2
 1414 032c 23       		.byte	0x23
 1415 032d 30       		.uleb128 0x30
 1416 032e 00       		.byte	0
 1417 032f 0E       		.uleb128 0xe
 1418 0330 79010000 		.4byte	0x179
 1419 0334 10       		.uleb128 0x10
 1420 0335 2F030000 		.4byte	0x32f
 1421 0339 0C       		.uleb128 0xc
 1422 033a 79010000 		.4byte	0x179
 1423 033e 49030000 		.4byte	0x349
ARM GAS  /tmp/ccSHmGTg.s 			page 48


 1424 0342 0D       		.uleb128 0xd
 1425 0343 31020000 		.4byte	0x231
 1426 0347 01       		.byte	0x1
 1427 0348 00       		.byte	0
 1428 0349 0E       		.uleb128 0xe
 1429 034a 39030000 		.4byte	0x339
 1430 034e 07       		.uleb128 0x7
 1431 034f 16010000 		.4byte	.LASF65
 1432 0353 01       		.byte	0x1
 1433 0354 93       		.byte	0x93
 1434 0355 8C020000 		.4byte	0x28c
 1435 0359 11       		.uleb128 0x11
 1436 035a 01       		.byte	0x1
 1437 035b 29000000 		.4byte	0x29
 1438 035f 03       		.byte	0x3
 1439 0360 6D01     		.2byte	0x16d
 1440 0362 73030000 		.4byte	0x373
 1441 0366 05       		.uleb128 0x5
 1442 0367 E8020000 		.4byte	.LASF66
 1443 036b 00       		.byte	0
 1444 036c 12       		.uleb128 0x12
 1445 036d 53455400 		.ascii	"SET\000"
 1446 0371 01       		.byte	0x1
 1447 0372 00       		.byte	0
 1448 0373 13       		.uleb128 0x13
 1449 0374 44       		.byte	0x44
 1450 0375 03       		.byte	0x3
 1451 0376 7C01     		.2byte	0x17c
 1452 0378 3D040000 		.4byte	0x43d
 1453 037c 14       		.uleb128 0x14
 1454 037d 49535200 		.ascii	"ISR\000"
 1455 0381 03       		.byte	0x3
 1456 0382 7E01     		.2byte	0x17e
 1457 0384 2F030000 		.4byte	0x32f
 1458 0388 02       		.byte	0x2
 1459 0389 23       		.byte	0x23
 1460 038a 00       		.uleb128 0
 1461 038b 14       		.uleb128 0x14
 1462 038c 49455200 		.ascii	"IER\000"
 1463 0390 03       		.byte	0x3
 1464 0391 7F01     		.2byte	0x17f
 1465 0393 2F030000 		.4byte	0x32f
 1466 0397 02       		.byte	0x2
 1467 0398 23       		.byte	0x23
 1468 0399 04       		.uleb128 0x4
 1469 039a 14       		.uleb128 0x14
 1470 039b 435200   		.ascii	"CR\000"
 1471 039e 03       		.byte	0x3
 1472 039f 8001     		.2byte	0x180
 1473 03a1 2F030000 		.4byte	0x32f
 1474 03a5 02       		.byte	0x2
 1475 03a6 23       		.byte	0x23
 1476 03a7 08       		.uleb128 0x8
 1477 03a8 15       		.uleb128 0x15
 1478 03a9 A7040000 		.4byte	.LASF67
 1479 03ad 03       		.byte	0x3
 1480 03ae 8101     		.2byte	0x181
ARM GAS  /tmp/ccSHmGTg.s 			page 49


 1481 03b0 2F030000 		.4byte	0x32f
 1482 03b4 02       		.byte	0x2
 1483 03b5 23       		.byte	0x23
 1484 03b6 0C       		.uleb128 0xc
 1485 03b7 15       		.uleb128 0x15
 1486 03b8 AD040000 		.4byte	.LASF68
 1487 03bc 03       		.byte	0x3
 1488 03bd 8201     		.2byte	0x182
 1489 03bf 2F030000 		.4byte	0x32f
 1490 03c3 02       		.byte	0x2
 1491 03c4 23       		.byte	0x23
 1492 03c5 10       		.uleb128 0x10
 1493 03c6 15       		.uleb128 0x15
 1494 03c7 40000000 		.4byte	.LASF69
 1495 03cb 03       		.byte	0x3
 1496 03cc 8301     		.2byte	0x183
 1497 03ce 2F030000 		.4byte	0x32f
 1498 03d2 02       		.byte	0x2
 1499 03d3 23       		.byte	0x23
 1500 03d4 14       		.uleb128 0x14
 1501 03d5 15       		.uleb128 0x15
 1502 03d6 C0020000 		.4byte	.LASF62
 1503 03da 03       		.byte	0x3
 1504 03db 8401     		.2byte	0x184
 1505 03dd 79010000 		.4byte	0x179
 1506 03e1 02       		.byte	0x2
 1507 03e2 23       		.byte	0x23
 1508 03e3 18       		.uleb128 0x18
 1509 03e4 15       		.uleb128 0x15
 1510 03e5 CA020000 		.4byte	.LASF53
 1511 03e9 03       		.byte	0x3
 1512 03ea 8501     		.2byte	0x185
 1513 03ec 79010000 		.4byte	0x179
 1514 03f0 02       		.byte	0x2
 1515 03f1 23       		.byte	0x23
 1516 03f2 1C       		.uleb128 0x1c
 1517 03f3 14       		.uleb128 0x14
 1518 03f4 545200   		.ascii	"TR\000"
 1519 03f7 03       		.byte	0x3
 1520 03f8 8601     		.2byte	0x186
 1521 03fa 2F030000 		.4byte	0x32f
 1522 03fe 02       		.byte	0x2
 1523 03ff 23       		.byte	0x23
 1524 0400 20       		.uleb128 0x20
 1525 0401 15       		.uleb128 0x15
 1526 0402 D4020000 		.4byte	.LASF55
 1527 0406 03       		.byte	0x3
 1528 0407 8701     		.2byte	0x187
 1529 0409 79010000 		.4byte	0x179
 1530 040d 02       		.byte	0x2
 1531 040e 23       		.byte	0x23
 1532 040f 24       		.uleb128 0x24
 1533 0410 15       		.uleb128 0x15
 1534 0411 C3010000 		.4byte	.LASF70
 1535 0415 03       		.byte	0x3
 1536 0416 8801     		.2byte	0x188
 1537 0418 2F030000 		.4byte	0x32f
ARM GAS  /tmp/ccSHmGTg.s 			page 50


 1538 041c 02       		.byte	0x2
 1539 041d 23       		.byte	0x23
 1540 041e 28       		.uleb128 0x28
 1541 041f 15       		.uleb128 0x15
 1542 0420 DE020000 		.4byte	.LASF56
 1543 0424 03       		.byte	0x3
 1544 0425 8901     		.2byte	0x189
 1545 0427 3D040000 		.4byte	0x43d
 1546 042b 02       		.byte	0x2
 1547 042c 23       		.byte	0x23
 1548 042d 2C       		.uleb128 0x2c
 1549 042e 14       		.uleb128 0x14
 1550 042f 445200   		.ascii	"DR\000"
 1551 0432 03       		.byte	0x3
 1552 0433 8A01     		.2byte	0x18a
 1553 0435 2F030000 		.4byte	0x32f
 1554 0439 02       		.byte	0x2
 1555 043a 23       		.byte	0x23
 1556 043b 40       		.uleb128 0x40
 1557 043c 00       		.byte	0
 1558 043d 0C       		.uleb128 0xc
 1559 043e 79010000 		.4byte	0x179
 1560 0442 4D040000 		.4byte	0x44d
 1561 0446 0D       		.uleb128 0xd
 1562 0447 31020000 		.4byte	0x231
 1563 044b 04       		.byte	0x4
 1564 044c 00       		.byte	0
 1565 044d 06       		.uleb128 0x6
 1566 044e A9000000 		.4byte	.LASF71
 1567 0452 03       		.byte	0x3
 1568 0453 8B01     		.2byte	0x18b
 1569 0455 73030000 		.4byte	0x373
 1570 0459 13       		.uleb128 0x13
 1571 045a 38       		.byte	0x38
 1572 045b 03       		.byte	0x3
 1573 045c B502     		.2byte	0x2b5
 1574 045e 34050000 		.4byte	0x534
 1575 0462 14       		.uleb128 0x14
 1576 0463 435200   		.ascii	"CR\000"
 1577 0466 03       		.byte	0x3
 1578 0467 B702     		.2byte	0x2b7
 1579 0469 2F030000 		.4byte	0x32f
 1580 046d 02       		.byte	0x2
 1581 046e 23       		.byte	0x23
 1582 046f 00       		.uleb128 0
 1583 0470 15       		.uleb128 0x15
 1584 0471 CD040000 		.4byte	.LASF72
 1585 0475 03       		.byte	0x3
 1586 0476 B802     		.2byte	0x2b8
 1587 0478 2F030000 		.4byte	0x32f
 1588 047c 02       		.byte	0x2
 1589 047d 23       		.byte	0x23
 1590 047e 04       		.uleb128 0x4
 1591 047f 14       		.uleb128 0x14
 1592 0480 43495200 		.ascii	"CIR\000"
 1593 0484 03       		.byte	0x3
 1594 0485 B902     		.2byte	0x2b9
ARM GAS  /tmp/ccSHmGTg.s 			page 51


 1595 0487 2F030000 		.4byte	0x32f
 1596 048b 02       		.byte	0x2
 1597 048c 23       		.byte	0x23
 1598 048d 08       		.uleb128 0x8
 1599 048e 15       		.uleb128 0x15
 1600 048f 97000000 		.4byte	.LASF73
 1601 0493 03       		.byte	0x3
 1602 0494 BA02     		.2byte	0x2ba
 1603 0496 2F030000 		.4byte	0x32f
 1604 049a 02       		.byte	0x2
 1605 049b 23       		.byte	0x23
 1606 049c 0C       		.uleb128 0xc
 1607 049d 15       		.uleb128 0x15
 1608 049e 65020000 		.4byte	.LASF74
 1609 04a2 03       		.byte	0x3
 1610 04a3 BB02     		.2byte	0x2bb
 1611 04a5 2F030000 		.4byte	0x32f
 1612 04a9 02       		.byte	0x2
 1613 04aa 23       		.byte	0x23
 1614 04ab 10       		.uleb128 0x10
 1615 04ac 15       		.uleb128 0x15
 1616 04ad 90050000 		.4byte	.LASF75
 1617 04b1 03       		.byte	0x3
 1618 04b2 BC02     		.2byte	0x2bc
 1619 04b4 2F030000 		.4byte	0x32f
 1620 04b8 02       		.byte	0x2
 1621 04b9 23       		.byte	0x23
 1622 04ba 14       		.uleb128 0x14
 1623 04bb 15       		.uleb128 0x15
 1624 04bc 0E000000 		.4byte	.LASF76
 1625 04c0 03       		.byte	0x3
 1626 04c1 BD02     		.2byte	0x2bd
 1627 04c3 2F030000 		.4byte	0x32f
 1628 04c7 02       		.byte	0x2
 1629 04c8 23       		.byte	0x23
 1630 04c9 18       		.uleb128 0x18
 1631 04ca 15       		.uleb128 0x15
 1632 04cb 43040000 		.4byte	.LASF77
 1633 04cf 03       		.byte	0x3
 1634 04d0 BE02     		.2byte	0x2be
 1635 04d2 2F030000 		.4byte	0x32f
 1636 04d6 02       		.byte	0x2
 1637 04d7 23       		.byte	0x23
 1638 04d8 1C       		.uleb128 0x1c
 1639 04d9 15       		.uleb128 0x15
 1640 04da A2040000 		.4byte	.LASF78
 1641 04de 03       		.byte	0x3
 1642 04df BF02     		.2byte	0x2bf
 1643 04e1 2F030000 		.4byte	0x32f
 1644 04e5 02       		.byte	0x2
 1645 04e6 23       		.byte	0x23
 1646 04e7 20       		.uleb128 0x20
 1647 04e8 14       		.uleb128 0x14
 1648 04e9 43535200 		.ascii	"CSR\000"
 1649 04ed 03       		.byte	0x3
 1650 04ee C002     		.2byte	0x2c0
 1651 04f0 2F030000 		.4byte	0x32f
ARM GAS  /tmp/ccSHmGTg.s 			page 52


 1652 04f4 02       		.byte	0x2
 1653 04f5 23       		.byte	0x23
 1654 04f6 24       		.uleb128 0x24
 1655 04f7 15       		.uleb128 0x15
 1656 04f8 47020000 		.4byte	.LASF79
 1657 04fc 03       		.byte	0x3
 1658 04fd C102     		.2byte	0x2c1
 1659 04ff 2F030000 		.4byte	0x32f
 1660 0503 02       		.byte	0x2
 1661 0504 23       		.byte	0x23
 1662 0505 28       		.uleb128 0x28
 1663 0506 15       		.uleb128 0x15
 1664 0507 AD040000 		.4byte	.LASF68
 1665 050b 03       		.byte	0x3
 1666 050c C202     		.2byte	0x2c2
 1667 050e 2F030000 		.4byte	0x32f
 1668 0512 02       		.byte	0x2
 1669 0513 23       		.byte	0x23
 1670 0514 2C       		.uleb128 0x2c
 1671 0515 15       		.uleb128 0x15
 1672 0516 B3040000 		.4byte	.LASF80
 1673 051a 03       		.byte	0x3
 1674 051b C302     		.2byte	0x2c3
 1675 051d 2F030000 		.4byte	0x32f
 1676 0521 02       		.byte	0x2
 1677 0522 23       		.byte	0x23
 1678 0523 30       		.uleb128 0x30
 1679 0524 14       		.uleb128 0x14
 1680 0525 43523200 		.ascii	"CR2\000"
 1681 0529 03       		.byte	0x3
 1682 052a C402     		.2byte	0x2c4
 1683 052c 2F030000 		.4byte	0x32f
 1684 0530 02       		.byte	0x2
 1685 0531 23       		.byte	0x23
 1686 0532 34       		.uleb128 0x34
 1687 0533 00       		.byte	0
 1688 0534 06       		.uleb128 0x6
 1689 0535 96010000 		.4byte	.LASF81
 1690 0539 03       		.byte	0x3
 1691 053a C502     		.2byte	0x2c5
 1692 053c 59040000 		.4byte	0x459
 1693 0540 16       		.uleb128 0x16
 1694 0541 5B030000 		.4byte	.LASF82
 1695 0545 01       		.byte	0x1
 1696 0546 2B03     		.2byte	0x32b
 1697 0548 01       		.byte	0x1
 1698 0549 00000000 		.4byte	.LFB11
 1699 054d 2C000000 		.4byte	.LFE11
 1700 0551 00000000 		.4byte	.LLST0
 1701 0555 01       		.byte	0x1
 1702 0556 6A050000 		.4byte	0x56a
 1703 055a 17       		.uleb128 0x17
 1704 055b 17020000 		.4byte	.LASF84
 1705 055f 01       		.byte	0x1
 1706 0560 2B03     		.2byte	0x32b
 1707 0562 14010000 		.4byte	0x114
 1708 0566 02       		.byte	0x2
ARM GAS  /tmp/ccSHmGTg.s 			page 53


 1709 0567 91       		.byte	0x91
 1710 0568 7F       		.sleb128 -1
 1711 0569 00       		.byte	0
 1712 056a 16       		.uleb128 0x16
 1713 056b A7050000 		.4byte	.LASF83
 1714 056f 01       		.byte	0x1
 1715 0570 7C03     		.2byte	0x37c
 1716 0572 01       		.byte	0x1
 1717 0573 00000000 		.4byte	.LFB16
 1718 0577 EC000000 		.4byte	.LFE16
 1719 057b 20000000 		.4byte	.LLST1
 1720 057f 01       		.byte	0x1
 1721 0580 A3050000 		.4byte	0x5a3
 1722 0584 17       		.uleb128 0x17
 1723 0585 17020000 		.4byte	.LASF84
 1724 0589 01       		.byte	0x1
 1725 058a 7C03     		.2byte	0x37c
 1726 058c 14010000 		.4byte	0x114
 1727 0590 02       		.byte	0x2
 1728 0591 91       		.byte	0x91
 1729 0592 6F       		.sleb128 -17
 1730 0593 17       		.uleb128 0x17
 1731 0594 DF010000 		.4byte	.LASF85
 1732 0598 01       		.byte	0x1
 1733 0599 7C03     		.2byte	0x37c
 1734 059b 79010000 		.4byte	0x179
 1735 059f 02       		.byte	0x2
 1736 05a0 91       		.byte	0x91
 1737 05a1 68       		.sleb128 -24
 1738 05a2 00       		.byte	0
 1739 05a3 18       		.uleb128 0x18
 1740 05a4 01       		.byte	0x1
 1741 05a5 21040000 		.4byte	.LASF86
 1742 05a9 02       		.byte	0x2
 1743 05aa 3D       		.byte	0x3d
 1744 05ab 01       		.byte	0x1
 1745 05ac 00000000 		.4byte	.LFB20
 1746 05b0 C0000000 		.4byte	.LFE20
 1747 05b4 4C000000 		.4byte	.LLST2
 1748 05b8 01       		.byte	0x1
 1749 05b9 19       		.uleb128 0x19
 1750 05ba 01       		.byte	0x1
 1751 05bb 77040000 		.4byte	.LASF87
 1752 05bf 02       		.byte	0x2
 1753 05c0 78       		.byte	0x78
 1754 05c1 01       		.byte	0x1
 1755 05c2 00000000 		.4byte	.LFB21
 1756 05c6 78000000 		.4byte	.LFE21
 1757 05ca 02       		.byte	0x2
 1758 05cb 7D       		.byte	0x7d
 1759 05cc 00       		.sleb128 0
 1760 05cd 01       		.byte	0x1
 1761 05ce 1A       		.uleb128 0x1a
 1762 05cf 01       		.byte	0x1
 1763 05d0 2F020000 		.4byte	.LASF96
 1764 05d4 02       		.byte	0x2
 1765 05d5 92       		.byte	0x92
ARM GAS  /tmp/ccSHmGTg.s 			page 54


 1766 05d6 01       		.byte	0x1
 1767 05d7 00000000 		.4byte	.LFB22
 1768 05db 28000000 		.4byte	.LFE22
 1769 05df 6C000000 		.4byte	.LLST3
 1770 05e3 01       		.byte	0x1
 1771 05e4 F7050000 		.4byte	0x5f7
 1772 05e8 1B       		.uleb128 0x1b
 1773 05e9 87000000 		.4byte	.LASF92
 1774 05ed 02       		.byte	0x2
 1775 05ee 94       		.byte	0x94
 1776 05ef 79010000 		.4byte	0x179
 1777 05f3 02       		.byte	0x2
 1778 05f4 91       		.byte	0x91
 1779 05f5 7C       		.sleb128 -4
 1780 05f6 00       		.byte	0
 1781 05f7 1C       		.uleb128 0x1c
 1782 05f8 01       		.byte	0x1
 1783 05f9 2B040000 		.4byte	.LASF89
 1784 05fd 02       		.byte	0x2
 1785 05fe A2       		.byte	0xa2
 1786 05ff 01       		.byte	0x1
 1787 0600 32010000 		.4byte	0x132
 1788 0604 00000000 		.4byte	.LFB23
 1789 0608 34000000 		.4byte	.LFE23
 1790 060c 8C000000 		.4byte	.LLST4
 1791 0610 01       		.byte	0x1
 1792 0611 24060000 		.4byte	0x624
 1793 0615 1D       		.uleb128 0x1d
 1794 0616 94030000 		.4byte	.LASF88
 1795 061a 02       		.byte	0x2
 1796 061b A2       		.byte	0xa2
 1797 061c 67010000 		.4byte	0x167
 1798 0620 02       		.byte	0x2
 1799 0621 91       		.byte	0x91
 1800 0622 7C       		.sleb128 -4
 1801 0623 00       		.byte	0
 1802 0624 1C       		.uleb128 0x1c
 1803 0625 01       		.byte	0x1
 1804 0626 4D030000 		.4byte	.LASF90
 1805 062a 02       		.byte	0x2
 1806 062b B1       		.byte	0xb1
 1807 062c 01       		.byte	0x1
 1808 062d 32010000 		.4byte	0x132
 1809 0631 00000000 		.4byte	.LFB24
 1810 0635 94000000 		.4byte	.LFE24
 1811 0639 AC000000 		.4byte	.LLST5
 1812 063d 01       		.byte	0x1
 1813 063e 51060000 		.4byte	0x651
 1814 0642 1D       		.uleb128 0x1d
 1815 0643 94030000 		.4byte	.LASF88
 1816 0647 02       		.byte	0x2
 1817 0648 B1       		.byte	0xb1
 1818 0649 29000000 		.4byte	0x29
 1819 064d 02       		.byte	0x2
 1820 064e 91       		.byte	0x91
 1821 064f 7F       		.sleb128 -1
 1822 0650 00       		.byte	0
ARM GAS  /tmp/ccSHmGTg.s 			page 55


 1823 0651 1C       		.uleb128 0x1c
 1824 0652 01       		.byte	0x1
 1825 0653 FC020000 		.4byte	.LASF91
 1826 0657 02       		.byte	0x2
 1827 0658 D0       		.byte	0xd0
 1828 0659 01       		.byte	0x1
 1829 065a 67010000 		.4byte	0x167
 1830 065e 00000000 		.4byte	.LFB25
 1831 0662 5C000000 		.4byte	.LFE25
 1832 0666 CC000000 		.4byte	.LLST6
 1833 066a 01       		.byte	0x1
 1834 066b 9A060000 		.4byte	0x69a
 1835 066f 1B       		.uleb128 0x1b
 1836 0670 87000000 		.4byte	.LASF92
 1837 0674 02       		.byte	0x2
 1838 0675 D2       		.byte	0xd2
 1839 0676 79010000 		.4byte	0x179
 1840 067a 02       		.byte	0x2
 1841 067b 91       		.byte	0x91
 1842 067c 7C       		.sleb128 -4
 1843 067d 1B       		.uleb128 0x1b
 1844 067e 1C020000 		.4byte	.LASF93
 1845 0682 02       		.byte	0x2
 1846 0683 D2       		.byte	0xd2
 1847 0684 79010000 		.4byte	0x179
 1848 0688 02       		.byte	0x2
 1849 0689 91       		.byte	0x91
 1850 068a 78       		.sleb128 -8
 1851 068b 1B       		.uleb128 0x1b
 1852 068c 36010000 		.4byte	.LASF94
 1853 0690 02       		.byte	0x2
 1854 0691 D2       		.byte	0xd2
 1855 0692 79010000 		.4byte	0x179
 1856 0696 02       		.byte	0x2
 1857 0697 91       		.byte	0x91
 1858 0698 74       		.sleb128 -12
 1859 0699 00       		.byte	0
 1860 069a 1E       		.uleb128 0x1e
 1861 069b 01       		.byte	0x1
 1862 069c 4F020000 		.4byte	.LASF95
 1863 06a0 02       		.byte	0x2
 1864 06a1 2B01     		.2byte	0x12b
 1865 06a3 01       		.byte	0x1
 1866 06a4 00000000 		.4byte	.LFB26
 1867 06a8 60000000 		.4byte	.LFE26
 1868 06ac EC000000 		.4byte	.LLST7
 1869 06b0 01       		.byte	0x1
 1870 06b1 1F       		.uleb128 0x1f
 1871 06b2 01       		.byte	0x1
 1872 06b3 D0030000 		.4byte	.LASF97
 1873 06b7 02       		.byte	0x2
 1874 06b8 3D01     		.2byte	0x13d
 1875 06ba 01       		.byte	0x1
 1876 06bb 00000000 		.4byte	.LFB27
 1877 06bf 4C000000 		.4byte	.LFE27
 1878 06c3 0C010000 		.4byte	.LLST8
 1879 06c7 01       		.byte	0x1
ARM GAS  /tmp/ccSHmGTg.s 			page 56


 1880 06c8 E9060000 		.4byte	0x6e9
 1881 06cc 20       		.uleb128 0x20
 1882 06cd 6900     		.ascii	"i\000"
 1883 06cf 02       		.byte	0x2
 1884 06d0 3F01     		.2byte	0x13f
 1885 06d2 29000000 		.4byte	0x29
 1886 06d6 02       		.byte	0x2
 1887 06d7 91       		.byte	0x91
 1888 06d8 77       		.sleb128 -9
 1889 06d9 21       		.uleb128 0x21
 1890 06da 1F010000 		.4byte	.LASF98
 1891 06de 02       		.byte	0x2
 1892 06df 4001     		.2byte	0x140
 1893 06e1 32010000 		.4byte	0x132
 1894 06e5 02       		.byte	0x2
 1895 06e6 91       		.byte	0x91
 1896 06e7 74       		.sleb128 -12
 1897 06e8 00       		.byte	0
 1898 06e9 22       		.uleb128 0x22
 1899 06ea 01       		.byte	0x1
 1900 06eb A2010000 		.4byte	.LASF99
 1901 06ef 02       		.byte	0x2
 1902 06f0 4B01     		.2byte	0x14b
 1903 06f2 01       		.byte	0x1
 1904 06f3 32010000 		.4byte	0x132
 1905 06f7 00000000 		.4byte	.LFB28
 1906 06fb 6C000000 		.4byte	.LFE28
 1907 06ff 38010000 		.4byte	.LLST9
 1908 0703 01       		.byte	0x1
 1909 0704 23070000 		.4byte	0x723
 1910 0708 20       		.uleb128 0x20
 1911 0709 6900     		.ascii	"i\000"
 1912 070b 02       		.byte	0x2
 1913 070c 4D01     		.2byte	0x14d
 1914 070e 29000000 		.4byte	0x29
 1915 0712 02       		.byte	0x2
 1916 0713 91       		.byte	0x91
 1917 0714 7F       		.sleb128 -1
 1918 0715 20       		.uleb128 0x20
 1919 0716 7400     		.ascii	"t\000"
 1920 0718 02       		.byte	0x2
 1921 0719 4E01     		.2byte	0x14e
 1922 071b 67010000 		.4byte	0x167
 1923 071f 02       		.byte	0x2
 1924 0720 91       		.byte	0x91
 1925 0721 78       		.sleb128 -8
 1926 0722 00       		.byte	0
 1927 0723 0C       		.uleb128 0xc
 1928 0724 32010000 		.4byte	0x132
 1929 0728 2E070000 		.4byte	0x72e
 1930 072c 23       		.uleb128 0x23
 1931 072d 00       		.byte	0
 1932 072e 24       		.uleb128 0x24
 1933 072f A0050000 		.4byte	.LASF100
 1934 0733 02       		.byte	0x2
 1935 0734 0E       		.byte	0xe
 1936 0735 3B070000 		.4byte	0x73b
ARM GAS  /tmp/ccSHmGTg.s 			page 57


 1937 0739 01       		.byte	0x1
 1938 073a 01       		.byte	0x1
 1939 073b 0E       		.uleb128 0xe
 1940 073c 23070000 		.4byte	0x723
 1941 0740 24       		.uleb128 0x24
 1942 0741 6A030000 		.4byte	.LASF101
 1943 0745 02       		.byte	0x2
 1944 0746 0F       		.byte	0xf
 1945 0747 4D070000 		.4byte	0x74d
 1946 074b 01       		.byte	0x1
 1947 074c 01       		.byte	0x1
 1948 074d 0E       		.uleb128 0xe
 1949 074e 32010000 		.4byte	0x132
 1950 0752 24       		.uleb128 0x24
 1951 0753 1F000000 		.4byte	.LASF102
 1952 0757 02       		.byte	0x2
 1953 0758 12       		.byte	0x12
 1954 0759 5F070000 		.4byte	0x75f
 1955 075d 01       		.byte	0x1
 1956 075e 01       		.byte	0x1
 1957 075f 0E       		.uleb128 0xe
 1958 0760 29000000 		.4byte	0x29
 1959 0764 25       		.uleb128 0x25
 1960 0765 A7030000 		.4byte	.LASF103
 1961 0769 02       		.byte	0x2
 1962 076a 1B       		.byte	0x1b
 1963 076b 76070000 		.4byte	0x776
 1964 076f 01       		.byte	0x1
 1965 0770 05       		.byte	0x5
 1966 0771 03       		.byte	0x3
 1967 0772 00000000 		.4byte	p_channel
 1968 0776 26       		.uleb128 0x26
 1969 0777 04       		.byte	0x4
 1970 0778 4D070000 		.4byte	0x74d
 1971 077c 0C       		.uleb128 0xc
 1972 077d 32010000 		.4byte	0x132
 1973 0781 8C070000 		.4byte	0x78c
 1974 0785 0D       		.uleb128 0xd
 1975 0786 31020000 		.4byte	0x231
 1976 078a 1F       		.byte	0x1f
 1977 078b 00       		.byte	0
 1978 078c 25       		.uleb128 0x25
 1979 078d 09010000 		.4byte	.LASF104
 1980 0791 02       		.byte	0x2
 1981 0792 29       		.byte	0x29
 1982 0793 7C070000 		.4byte	0x77c
 1983 0797 01       		.byte	0x1
 1984 0798 05       		.byte	0x5
 1985 0799 03       		.byte	0x3
 1986 079a 00000000 		.4byte	VoltagePhoto
 1987 079e 25       		.uleb128 0x25
 1988 079f 8A010000 		.4byte	.LASF105
 1989 07a3 02       		.byte	0x2
 1990 07a4 2A       		.byte	0x2a
 1991 07a5 29000000 		.4byte	0x29
 1992 07a9 01       		.byte	0x1
 1993 07aa 05       		.byte	0x5
ARM GAS  /tmp/ccSHmGTg.s 			page 58


 1994 07ab 03       		.byte	0x3
 1995 07ac 00000000 		.4byte	photo_index
 1996 07b0 25       		.uleb128 0x25
 1997 07b1 C2040000 		.4byte	.LASF106
 1998 07b5 02       		.byte	0x2
 1999 07b6 2B       		.byte	0x2b
 2000 07b7 32010000 		.4byte	0x132
 2001 07bb 01       		.byte	0x1
 2002 07bc 05       		.byte	0x5
 2003 07bd 03       		.byte	0x3
 2004 07be 00000000 		.4byte	last_photo
 2005 07c2 25       		.uleb128 0x25
 2006 07c3 25010000 		.4byte	.LASF107
 2007 07c7 02       		.byte	0x2
 2008 07c8 2C       		.byte	0x2c
 2009 07c9 29000000 		.4byte	0x29
 2010 07cd 01       		.byte	0x1
 2011 07ce 05       		.byte	0x5
 2012 07cf 03       		.byte	0x3
 2013 07d0 00000000 		.4byte	new_photo_sample
 2014 07d4 00       		.byte	0
 2015              		.section	.debug_abbrev,"",%progbits
 2016              	.Ldebug_abbrev0:
 2017 0000 01       		.uleb128 0x1
 2018 0001 11       		.uleb128 0x11
 2019 0002 01       		.byte	0x1
 2020 0003 25       		.uleb128 0x25
 2021 0004 0E       		.uleb128 0xe
 2022 0005 13       		.uleb128 0x13
 2023 0006 0B       		.uleb128 0xb
 2024 0007 03       		.uleb128 0x3
 2025 0008 0E       		.uleb128 0xe
 2026 0009 1B       		.uleb128 0x1b
 2027 000a 0E       		.uleb128 0xe
 2028 000b 55       		.uleb128 0x55
 2029 000c 06       		.uleb128 0x6
 2030 000d 11       		.uleb128 0x11
 2031 000e 01       		.uleb128 0x1
 2032 000f 52       		.uleb128 0x52
 2033 0010 01       		.uleb128 0x1
 2034 0011 10       		.uleb128 0x10
 2035 0012 06       		.uleb128 0x6
 2036 0013 00       		.byte	0
 2037 0014 00       		.byte	0
 2038 0015 02       		.uleb128 0x2
 2039 0016 24       		.uleb128 0x24
 2040 0017 00       		.byte	0
 2041 0018 0B       		.uleb128 0xb
 2042 0019 0B       		.uleb128 0xb
 2043 001a 3E       		.uleb128 0x3e
 2044 001b 0B       		.uleb128 0xb
 2045 001c 03       		.uleb128 0x3
 2046 001d 0E       		.uleb128 0xe
 2047 001e 00       		.byte	0
 2048 001f 00       		.byte	0
 2049 0020 03       		.uleb128 0x3
 2050 0021 04       		.uleb128 0x4
ARM GAS  /tmp/ccSHmGTg.s 			page 59


 2051 0022 01       		.byte	0x1
 2052 0023 03       		.uleb128 0x3
 2053 0024 0E       		.uleb128 0xe
 2054 0025 0B       		.uleb128 0xb
 2055 0026 0B       		.uleb128 0xb
 2056 0027 49       		.uleb128 0x49
 2057 0028 13       		.uleb128 0x13
 2058 0029 3A       		.uleb128 0x3a
 2059 002a 0B       		.uleb128 0xb
 2060 002b 3B       		.uleb128 0x3b
 2061 002c 0B       		.uleb128 0xb
 2062 002d 01       		.uleb128 0x1
 2063 002e 13       		.uleb128 0x13
 2064 002f 00       		.byte	0
 2065 0030 00       		.byte	0
 2066 0031 04       		.uleb128 0x4
 2067 0032 28       		.uleb128 0x28
 2068 0033 00       		.byte	0
 2069 0034 03       		.uleb128 0x3
 2070 0035 0E       		.uleb128 0xe
 2071 0036 1C       		.uleb128 0x1c
 2072 0037 0D       		.uleb128 0xd
 2073 0038 00       		.byte	0
 2074 0039 00       		.byte	0
 2075 003a 05       		.uleb128 0x5
 2076 003b 28       		.uleb128 0x28
 2077 003c 00       		.byte	0
 2078 003d 03       		.uleb128 0x3
 2079 003e 0E       		.uleb128 0xe
 2080 003f 1C       		.uleb128 0x1c
 2081 0040 0B       		.uleb128 0xb
 2082 0041 00       		.byte	0
 2083 0042 00       		.byte	0
 2084 0043 06       		.uleb128 0x6
 2085 0044 16       		.uleb128 0x16
 2086 0045 00       		.byte	0
 2087 0046 03       		.uleb128 0x3
 2088 0047 0E       		.uleb128 0xe
 2089 0048 3A       		.uleb128 0x3a
 2090 0049 0B       		.uleb128 0xb
 2091 004a 3B       		.uleb128 0x3b
 2092 004b 05       		.uleb128 0x5
 2093 004c 49       		.uleb128 0x49
 2094 004d 13       		.uleb128 0x13
 2095 004e 00       		.byte	0
 2096 004f 00       		.byte	0
 2097 0050 07       		.uleb128 0x7
 2098 0051 16       		.uleb128 0x16
 2099 0052 00       		.byte	0
 2100 0053 03       		.uleb128 0x3
 2101 0054 0E       		.uleb128 0xe
 2102 0055 3A       		.uleb128 0x3a
 2103 0056 0B       		.uleb128 0xb
 2104 0057 3B       		.uleb128 0x3b
 2105 0058 0B       		.uleb128 0xb
 2106 0059 49       		.uleb128 0x49
 2107 005a 13       		.uleb128 0x13
ARM GAS  /tmp/ccSHmGTg.s 			page 60


 2108 005b 00       		.byte	0
 2109 005c 00       		.byte	0
 2110 005d 08       		.uleb128 0x8
 2111 005e 24       		.uleb128 0x24
 2112 005f 00       		.byte	0
 2113 0060 0B       		.uleb128 0xb
 2114 0061 0B       		.uleb128 0xb
 2115 0062 3E       		.uleb128 0x3e
 2116 0063 0B       		.uleb128 0xb
 2117 0064 03       		.uleb128 0x3
 2118 0065 08       		.uleb128 0x8
 2119 0066 00       		.byte	0
 2120 0067 00       		.byte	0
 2121 0068 09       		.uleb128 0x9
 2122 0069 13       		.uleb128 0x13
 2123 006a 01       		.byte	0x1
 2124 006b 0B       		.uleb128 0xb
 2125 006c 05       		.uleb128 0x5
 2126 006d 3A       		.uleb128 0x3a
 2127 006e 0B       		.uleb128 0xb
 2128 006f 3B       		.uleb128 0x3b
 2129 0070 0B       		.uleb128 0xb
 2130 0071 01       		.uleb128 0x1
 2131 0072 13       		.uleb128 0x13
 2132 0073 00       		.byte	0
 2133 0074 00       		.byte	0
 2134 0075 0A       		.uleb128 0xa
 2135 0076 0D       		.uleb128 0xd
 2136 0077 00       		.byte	0
 2137 0078 03       		.uleb128 0x3
 2138 0079 0E       		.uleb128 0xe
 2139 007a 3A       		.uleb128 0x3a
 2140 007b 0B       		.uleb128 0xb
 2141 007c 3B       		.uleb128 0x3b
 2142 007d 0B       		.uleb128 0xb
 2143 007e 49       		.uleb128 0x49
 2144 007f 13       		.uleb128 0x13
 2145 0080 38       		.uleb128 0x38
 2146 0081 0A       		.uleb128 0xa
 2147 0082 00       		.byte	0
 2148 0083 00       		.byte	0
 2149 0084 0B       		.uleb128 0xb
 2150 0085 0D       		.uleb128 0xd
 2151 0086 00       		.byte	0
 2152 0087 03       		.uleb128 0x3
 2153 0088 08       		.uleb128 0x8
 2154 0089 3A       		.uleb128 0x3a
 2155 008a 0B       		.uleb128 0xb
 2156 008b 3B       		.uleb128 0x3b
 2157 008c 0B       		.uleb128 0xb
 2158 008d 49       		.uleb128 0x49
 2159 008e 13       		.uleb128 0x13
 2160 008f 38       		.uleb128 0x38
 2161 0090 0A       		.uleb128 0xa
 2162 0091 00       		.byte	0
 2163 0092 00       		.byte	0
 2164 0093 0C       		.uleb128 0xc
ARM GAS  /tmp/ccSHmGTg.s 			page 61


 2165 0094 01       		.uleb128 0x1
 2166 0095 01       		.byte	0x1
 2167 0096 49       		.uleb128 0x49
 2168 0097 13       		.uleb128 0x13
 2169 0098 01       		.uleb128 0x1
 2170 0099 13       		.uleb128 0x13
 2171 009a 00       		.byte	0
 2172 009b 00       		.byte	0
 2173 009c 0D       		.uleb128 0xd
 2174 009d 21       		.uleb128 0x21
 2175 009e 00       		.byte	0
 2176 009f 49       		.uleb128 0x49
 2177 00a0 13       		.uleb128 0x13
 2178 00a1 2F       		.uleb128 0x2f
 2179 00a2 0B       		.uleb128 0xb
 2180 00a3 00       		.byte	0
 2181 00a4 00       		.byte	0
 2182 00a5 0E       		.uleb128 0xe
 2183 00a6 35       		.uleb128 0x35
 2184 00a7 00       		.byte	0
 2185 00a8 49       		.uleb128 0x49
 2186 00a9 13       		.uleb128 0x13
 2187 00aa 00       		.byte	0
 2188 00ab 00       		.byte	0
 2189 00ac 0F       		.uleb128 0xf
 2190 00ad 13       		.uleb128 0x13
 2191 00ae 01       		.byte	0x1
 2192 00af 0B       		.uleb128 0xb
 2193 00b0 0B       		.uleb128 0xb
 2194 00b1 3A       		.uleb128 0x3a
 2195 00b2 0B       		.uleb128 0xb
 2196 00b3 3B       		.uleb128 0x3b
 2197 00b4 0B       		.uleb128 0xb
 2198 00b5 01       		.uleb128 0x1
 2199 00b6 13       		.uleb128 0x13
 2200 00b7 00       		.byte	0
 2201 00b8 00       		.byte	0
 2202 00b9 10       		.uleb128 0x10
 2203 00ba 26       		.uleb128 0x26
 2204 00bb 00       		.byte	0
 2205 00bc 49       		.uleb128 0x49
 2206 00bd 13       		.uleb128 0x13
 2207 00be 00       		.byte	0
 2208 00bf 00       		.byte	0
 2209 00c0 11       		.uleb128 0x11
 2210 00c1 04       		.uleb128 0x4
 2211 00c2 01       		.byte	0x1
 2212 00c3 0B       		.uleb128 0xb
 2213 00c4 0B       		.uleb128 0xb
 2214 00c5 49       		.uleb128 0x49
 2215 00c6 13       		.uleb128 0x13
 2216 00c7 3A       		.uleb128 0x3a
 2217 00c8 0B       		.uleb128 0xb
 2218 00c9 3B       		.uleb128 0x3b
 2219 00ca 05       		.uleb128 0x5
 2220 00cb 01       		.uleb128 0x1
 2221 00cc 13       		.uleb128 0x13
ARM GAS  /tmp/ccSHmGTg.s 			page 62


 2222 00cd 00       		.byte	0
 2223 00ce 00       		.byte	0
 2224 00cf 12       		.uleb128 0x12
 2225 00d0 28       		.uleb128 0x28
 2226 00d1 00       		.byte	0
 2227 00d2 03       		.uleb128 0x3
 2228 00d3 08       		.uleb128 0x8
 2229 00d4 1C       		.uleb128 0x1c
 2230 00d5 0B       		.uleb128 0xb
 2231 00d6 00       		.byte	0
 2232 00d7 00       		.byte	0
 2233 00d8 13       		.uleb128 0x13
 2234 00d9 13       		.uleb128 0x13
 2235 00da 01       		.byte	0x1
 2236 00db 0B       		.uleb128 0xb
 2237 00dc 0B       		.uleb128 0xb
 2238 00dd 3A       		.uleb128 0x3a
 2239 00de 0B       		.uleb128 0xb
 2240 00df 3B       		.uleb128 0x3b
 2241 00e0 05       		.uleb128 0x5
 2242 00e1 01       		.uleb128 0x1
 2243 00e2 13       		.uleb128 0x13
 2244 00e3 00       		.byte	0
 2245 00e4 00       		.byte	0
 2246 00e5 14       		.uleb128 0x14
 2247 00e6 0D       		.uleb128 0xd
 2248 00e7 00       		.byte	0
 2249 00e8 03       		.uleb128 0x3
 2250 00e9 08       		.uleb128 0x8
 2251 00ea 3A       		.uleb128 0x3a
 2252 00eb 0B       		.uleb128 0xb
 2253 00ec 3B       		.uleb128 0x3b
 2254 00ed 05       		.uleb128 0x5
 2255 00ee 49       		.uleb128 0x49
 2256 00ef 13       		.uleb128 0x13
 2257 00f0 38       		.uleb128 0x38
 2258 00f1 0A       		.uleb128 0xa
 2259 00f2 00       		.byte	0
 2260 00f3 00       		.byte	0
 2261 00f4 15       		.uleb128 0x15
 2262 00f5 0D       		.uleb128 0xd
 2263 00f6 00       		.byte	0
 2264 00f7 03       		.uleb128 0x3
 2265 00f8 0E       		.uleb128 0xe
 2266 00f9 3A       		.uleb128 0x3a
 2267 00fa 0B       		.uleb128 0xb
 2268 00fb 3B       		.uleb128 0x3b
 2269 00fc 05       		.uleb128 0x5
 2270 00fd 49       		.uleb128 0x49
 2271 00fe 13       		.uleb128 0x13
 2272 00ff 38       		.uleb128 0x38
 2273 0100 0A       		.uleb128 0xa
 2274 0101 00       		.byte	0
 2275 0102 00       		.byte	0
 2276 0103 16       		.uleb128 0x16
 2277 0104 2E       		.uleb128 0x2e
 2278 0105 01       		.byte	0x1
ARM GAS  /tmp/ccSHmGTg.s 			page 63


 2279 0106 03       		.uleb128 0x3
 2280 0107 0E       		.uleb128 0xe
 2281 0108 3A       		.uleb128 0x3a
 2282 0109 0B       		.uleb128 0xb
 2283 010a 3B       		.uleb128 0x3b
 2284 010b 05       		.uleb128 0x5
 2285 010c 27       		.uleb128 0x27
 2286 010d 0C       		.uleb128 0xc
 2287 010e 11       		.uleb128 0x11
 2288 010f 01       		.uleb128 0x1
 2289 0110 12       		.uleb128 0x12
 2290 0111 01       		.uleb128 0x1
 2291 0112 40       		.uleb128 0x40
 2292 0113 06       		.uleb128 0x6
 2293 0114 9742     		.uleb128 0x2117
 2294 0116 0C       		.uleb128 0xc
 2295 0117 01       		.uleb128 0x1
 2296 0118 13       		.uleb128 0x13
 2297 0119 00       		.byte	0
 2298 011a 00       		.byte	0
 2299 011b 17       		.uleb128 0x17
 2300 011c 05       		.uleb128 0x5
 2301 011d 00       		.byte	0
 2302 011e 03       		.uleb128 0x3
 2303 011f 0E       		.uleb128 0xe
 2304 0120 3A       		.uleb128 0x3a
 2305 0121 0B       		.uleb128 0xb
 2306 0122 3B       		.uleb128 0x3b
 2307 0123 05       		.uleb128 0x5
 2308 0124 49       		.uleb128 0x49
 2309 0125 13       		.uleb128 0x13
 2310 0126 02       		.uleb128 0x2
 2311 0127 0A       		.uleb128 0xa
 2312 0128 00       		.byte	0
 2313 0129 00       		.byte	0
 2314 012a 18       		.uleb128 0x18
 2315 012b 2E       		.uleb128 0x2e
 2316 012c 00       		.byte	0
 2317 012d 3F       		.uleb128 0x3f
 2318 012e 0C       		.uleb128 0xc
 2319 012f 03       		.uleb128 0x3
 2320 0130 0E       		.uleb128 0xe
 2321 0131 3A       		.uleb128 0x3a
 2322 0132 0B       		.uleb128 0xb
 2323 0133 3B       		.uleb128 0x3b
 2324 0134 0B       		.uleb128 0xb
 2325 0135 27       		.uleb128 0x27
 2326 0136 0C       		.uleb128 0xc
 2327 0137 11       		.uleb128 0x11
 2328 0138 01       		.uleb128 0x1
 2329 0139 12       		.uleb128 0x12
 2330 013a 01       		.uleb128 0x1
 2331 013b 40       		.uleb128 0x40
 2332 013c 06       		.uleb128 0x6
 2333 013d 9642     		.uleb128 0x2116
 2334 013f 0C       		.uleb128 0xc
 2335 0140 00       		.byte	0
ARM GAS  /tmp/ccSHmGTg.s 			page 64


 2336 0141 00       		.byte	0
 2337 0142 19       		.uleb128 0x19
 2338 0143 2E       		.uleb128 0x2e
 2339 0144 00       		.byte	0
 2340 0145 3F       		.uleb128 0x3f
 2341 0146 0C       		.uleb128 0xc
 2342 0147 03       		.uleb128 0x3
 2343 0148 0E       		.uleb128 0xe
 2344 0149 3A       		.uleb128 0x3a
 2345 014a 0B       		.uleb128 0xb
 2346 014b 3B       		.uleb128 0x3b
 2347 014c 0B       		.uleb128 0xb
 2348 014d 27       		.uleb128 0x27
 2349 014e 0C       		.uleb128 0xc
 2350 014f 11       		.uleb128 0x11
 2351 0150 01       		.uleb128 0x1
 2352 0151 12       		.uleb128 0x12
 2353 0152 01       		.uleb128 0x1
 2354 0153 40       		.uleb128 0x40
 2355 0154 0A       		.uleb128 0xa
 2356 0155 9742     		.uleb128 0x2117
 2357 0157 0C       		.uleb128 0xc
 2358 0158 00       		.byte	0
 2359 0159 00       		.byte	0
 2360 015a 1A       		.uleb128 0x1a
 2361 015b 2E       		.uleb128 0x2e
 2362 015c 01       		.byte	0x1
 2363 015d 3F       		.uleb128 0x3f
 2364 015e 0C       		.uleb128 0xc
 2365 015f 03       		.uleb128 0x3
 2366 0160 0E       		.uleb128 0xe
 2367 0161 3A       		.uleb128 0x3a
 2368 0162 0B       		.uleb128 0xb
 2369 0163 3B       		.uleb128 0x3b
 2370 0164 0B       		.uleb128 0xb
 2371 0165 27       		.uleb128 0x27
 2372 0166 0C       		.uleb128 0xc
 2373 0167 11       		.uleb128 0x11
 2374 0168 01       		.uleb128 0x1
 2375 0169 12       		.uleb128 0x12
 2376 016a 01       		.uleb128 0x1
 2377 016b 40       		.uleb128 0x40
 2378 016c 06       		.uleb128 0x6
 2379 016d 9742     		.uleb128 0x2117
 2380 016f 0C       		.uleb128 0xc
 2381 0170 01       		.uleb128 0x1
 2382 0171 13       		.uleb128 0x13
 2383 0172 00       		.byte	0
 2384 0173 00       		.byte	0
 2385 0174 1B       		.uleb128 0x1b
 2386 0175 34       		.uleb128 0x34
 2387 0176 00       		.byte	0
 2388 0177 03       		.uleb128 0x3
 2389 0178 0E       		.uleb128 0xe
 2390 0179 3A       		.uleb128 0x3a
 2391 017a 0B       		.uleb128 0xb
 2392 017b 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccSHmGTg.s 			page 65


 2393 017c 0B       		.uleb128 0xb
 2394 017d 49       		.uleb128 0x49
 2395 017e 13       		.uleb128 0x13
 2396 017f 02       		.uleb128 0x2
 2397 0180 0A       		.uleb128 0xa
 2398 0181 00       		.byte	0
 2399 0182 00       		.byte	0
 2400 0183 1C       		.uleb128 0x1c
 2401 0184 2E       		.uleb128 0x2e
 2402 0185 01       		.byte	0x1
 2403 0186 3F       		.uleb128 0x3f
 2404 0187 0C       		.uleb128 0xc
 2405 0188 03       		.uleb128 0x3
 2406 0189 0E       		.uleb128 0xe
 2407 018a 3A       		.uleb128 0x3a
 2408 018b 0B       		.uleb128 0xb
 2409 018c 3B       		.uleb128 0x3b
 2410 018d 0B       		.uleb128 0xb
 2411 018e 27       		.uleb128 0x27
 2412 018f 0C       		.uleb128 0xc
 2413 0190 49       		.uleb128 0x49
 2414 0191 13       		.uleb128 0x13
 2415 0192 11       		.uleb128 0x11
 2416 0193 01       		.uleb128 0x1
 2417 0194 12       		.uleb128 0x12
 2418 0195 01       		.uleb128 0x1
 2419 0196 40       		.uleb128 0x40
 2420 0197 06       		.uleb128 0x6
 2421 0198 9742     		.uleb128 0x2117
 2422 019a 0C       		.uleb128 0xc
 2423 019b 01       		.uleb128 0x1
 2424 019c 13       		.uleb128 0x13
 2425 019d 00       		.byte	0
 2426 019e 00       		.byte	0
 2427 019f 1D       		.uleb128 0x1d
 2428 01a0 05       		.uleb128 0x5
 2429 01a1 00       		.byte	0
 2430 01a2 03       		.uleb128 0x3
 2431 01a3 0E       		.uleb128 0xe
 2432 01a4 3A       		.uleb128 0x3a
 2433 01a5 0B       		.uleb128 0xb
 2434 01a6 3B       		.uleb128 0x3b
 2435 01a7 0B       		.uleb128 0xb
 2436 01a8 49       		.uleb128 0x49
 2437 01a9 13       		.uleb128 0x13
 2438 01aa 02       		.uleb128 0x2
 2439 01ab 0A       		.uleb128 0xa
 2440 01ac 00       		.byte	0
 2441 01ad 00       		.byte	0
 2442 01ae 1E       		.uleb128 0x1e
 2443 01af 2E       		.uleb128 0x2e
 2444 01b0 00       		.byte	0
 2445 01b1 3F       		.uleb128 0x3f
 2446 01b2 0C       		.uleb128 0xc
 2447 01b3 03       		.uleb128 0x3
 2448 01b4 0E       		.uleb128 0xe
 2449 01b5 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccSHmGTg.s 			page 66


 2450 01b6 0B       		.uleb128 0xb
 2451 01b7 3B       		.uleb128 0x3b
 2452 01b8 05       		.uleb128 0x5
 2453 01b9 27       		.uleb128 0x27
 2454 01ba 0C       		.uleb128 0xc
 2455 01bb 11       		.uleb128 0x11
 2456 01bc 01       		.uleb128 0x1
 2457 01bd 12       		.uleb128 0x12
 2458 01be 01       		.uleb128 0x1
 2459 01bf 40       		.uleb128 0x40
 2460 01c0 06       		.uleb128 0x6
 2461 01c1 9642     		.uleb128 0x2116
 2462 01c3 0C       		.uleb128 0xc
 2463 01c4 00       		.byte	0
 2464 01c5 00       		.byte	0
 2465 01c6 1F       		.uleb128 0x1f
 2466 01c7 2E       		.uleb128 0x2e
 2467 01c8 01       		.byte	0x1
 2468 01c9 3F       		.uleb128 0x3f
 2469 01ca 0C       		.uleb128 0xc
 2470 01cb 03       		.uleb128 0x3
 2471 01cc 0E       		.uleb128 0xe
 2472 01cd 3A       		.uleb128 0x3a
 2473 01ce 0B       		.uleb128 0xb
 2474 01cf 3B       		.uleb128 0x3b
 2475 01d0 05       		.uleb128 0x5
 2476 01d1 27       		.uleb128 0x27
 2477 01d2 0C       		.uleb128 0xc
 2478 01d3 11       		.uleb128 0x11
 2479 01d4 01       		.uleb128 0x1
 2480 01d5 12       		.uleb128 0x12
 2481 01d6 01       		.uleb128 0x1
 2482 01d7 40       		.uleb128 0x40
 2483 01d8 06       		.uleb128 0x6
 2484 01d9 9642     		.uleb128 0x2116
 2485 01db 0C       		.uleb128 0xc
 2486 01dc 01       		.uleb128 0x1
 2487 01dd 13       		.uleb128 0x13
 2488 01de 00       		.byte	0
 2489 01df 00       		.byte	0
 2490 01e0 20       		.uleb128 0x20
 2491 01e1 34       		.uleb128 0x34
 2492 01e2 00       		.byte	0
 2493 01e3 03       		.uleb128 0x3
 2494 01e4 08       		.uleb128 0x8
 2495 01e5 3A       		.uleb128 0x3a
 2496 01e6 0B       		.uleb128 0xb
 2497 01e7 3B       		.uleb128 0x3b
 2498 01e8 05       		.uleb128 0x5
 2499 01e9 49       		.uleb128 0x49
 2500 01ea 13       		.uleb128 0x13
 2501 01eb 02       		.uleb128 0x2
 2502 01ec 0A       		.uleb128 0xa
 2503 01ed 00       		.byte	0
 2504 01ee 00       		.byte	0
 2505 01ef 21       		.uleb128 0x21
 2506 01f0 34       		.uleb128 0x34
ARM GAS  /tmp/ccSHmGTg.s 			page 67


 2507 01f1 00       		.byte	0
 2508 01f2 03       		.uleb128 0x3
 2509 01f3 0E       		.uleb128 0xe
 2510 01f4 3A       		.uleb128 0x3a
 2511 01f5 0B       		.uleb128 0xb
 2512 01f6 3B       		.uleb128 0x3b
 2513 01f7 05       		.uleb128 0x5
 2514 01f8 49       		.uleb128 0x49
 2515 01f9 13       		.uleb128 0x13
 2516 01fa 02       		.uleb128 0x2
 2517 01fb 0A       		.uleb128 0xa
 2518 01fc 00       		.byte	0
 2519 01fd 00       		.byte	0
 2520 01fe 22       		.uleb128 0x22
 2521 01ff 2E       		.uleb128 0x2e
 2522 0200 01       		.byte	0x1
 2523 0201 3F       		.uleb128 0x3f
 2524 0202 0C       		.uleb128 0xc
 2525 0203 03       		.uleb128 0x3
 2526 0204 0E       		.uleb128 0xe
 2527 0205 3A       		.uleb128 0x3a
 2528 0206 0B       		.uleb128 0xb
 2529 0207 3B       		.uleb128 0x3b
 2530 0208 05       		.uleb128 0x5
 2531 0209 27       		.uleb128 0x27
 2532 020a 0C       		.uleb128 0xc
 2533 020b 49       		.uleb128 0x49
 2534 020c 13       		.uleb128 0x13
 2535 020d 11       		.uleb128 0x11
 2536 020e 01       		.uleb128 0x1
 2537 020f 12       		.uleb128 0x12
 2538 0210 01       		.uleb128 0x1
 2539 0211 40       		.uleb128 0x40
 2540 0212 06       		.uleb128 0x6
 2541 0213 9742     		.uleb128 0x2117
 2542 0215 0C       		.uleb128 0xc
 2543 0216 01       		.uleb128 0x1
 2544 0217 13       		.uleb128 0x13
 2545 0218 00       		.byte	0
 2546 0219 00       		.byte	0
 2547 021a 23       		.uleb128 0x23
 2548 021b 21       		.uleb128 0x21
 2549 021c 00       		.byte	0
 2550 021d 00       		.byte	0
 2551 021e 00       		.byte	0
 2552 021f 24       		.uleb128 0x24
 2553 0220 34       		.uleb128 0x34
 2554 0221 00       		.byte	0
 2555 0222 03       		.uleb128 0x3
 2556 0223 0E       		.uleb128 0xe
 2557 0224 3A       		.uleb128 0x3a
 2558 0225 0B       		.uleb128 0xb
 2559 0226 3B       		.uleb128 0x3b
 2560 0227 0B       		.uleb128 0xb
 2561 0228 49       		.uleb128 0x49
 2562 0229 13       		.uleb128 0x13
 2563 022a 3F       		.uleb128 0x3f
ARM GAS  /tmp/ccSHmGTg.s 			page 68


 2564 022b 0C       		.uleb128 0xc
 2565 022c 3C       		.uleb128 0x3c
 2566 022d 0C       		.uleb128 0xc
 2567 022e 00       		.byte	0
 2568 022f 00       		.byte	0
 2569 0230 25       		.uleb128 0x25
 2570 0231 34       		.uleb128 0x34
 2571 0232 00       		.byte	0
 2572 0233 03       		.uleb128 0x3
 2573 0234 0E       		.uleb128 0xe
 2574 0235 3A       		.uleb128 0x3a
 2575 0236 0B       		.uleb128 0xb
 2576 0237 3B       		.uleb128 0x3b
 2577 0238 0B       		.uleb128 0xb
 2578 0239 49       		.uleb128 0x49
 2579 023a 13       		.uleb128 0x13
 2580 023b 3F       		.uleb128 0x3f
 2581 023c 0C       		.uleb128 0xc
 2582 023d 02       		.uleb128 0x2
 2583 023e 0A       		.uleb128 0xa
 2584 023f 00       		.byte	0
 2585 0240 00       		.byte	0
 2586 0241 26       		.uleb128 0x26
 2587 0242 0F       		.uleb128 0xf
 2588 0243 00       		.byte	0
 2589 0244 0B       		.uleb128 0xb
 2590 0245 0B       		.uleb128 0xb
 2591 0246 49       		.uleb128 0x49
 2592 0247 13       		.uleb128 0x13
 2593 0248 00       		.byte	0
 2594 0249 00       		.byte	0
 2595 024a 00       		.byte	0
 2596              		.section	.debug_loc,"",%progbits
 2597              	.Ldebug_loc0:
 2598              	.LLST0:
 2599 0000 00000000 		.4byte	.LFB11
 2600 0004 02000000 		.4byte	.LCFI0
 2601 0008 0200     		.2byte	0x2
 2602 000a 7D       		.byte	0x7d
 2603 000b 00       		.sleb128 0
 2604 000c 02000000 		.4byte	.LCFI0
 2605 0010 2C000000 		.4byte	.LFE11
 2606 0014 0200     		.2byte	0x2
 2607 0016 7D       		.byte	0x7d
 2608 0017 08       		.sleb128 8
 2609 0018 00000000 		.4byte	0
 2610 001c 00000000 		.4byte	0
 2611              	.LLST1:
 2612 0020 00000000 		.4byte	.LFB16
 2613 0024 02000000 		.4byte	.LCFI1
 2614 0028 0200     		.2byte	0x2
 2615 002a 7D       		.byte	0x7d
 2616 002b 00       		.sleb128 0
 2617 002c 02000000 		.4byte	.LCFI1
 2618 0030 04000000 		.4byte	.LCFI2
 2619 0034 0200     		.2byte	0x2
 2620 0036 7D       		.byte	0x7d
ARM GAS  /tmp/ccSHmGTg.s 			page 69


 2621 0037 0C       		.sleb128 12
 2622 0038 04000000 		.4byte	.LCFI2
 2623 003c EC000000 		.4byte	.LFE16
 2624 0040 0200     		.2byte	0x2
 2625 0042 7D       		.byte	0x7d
 2626 0043 18       		.sleb128 24
 2627 0044 00000000 		.4byte	0
 2628 0048 00000000 		.4byte	0
 2629              	.LLST2:
 2630 004c 00000000 		.4byte	.LFB20
 2631 0050 02000000 		.4byte	.LCFI3
 2632 0054 0200     		.2byte	0x2
 2633 0056 7D       		.byte	0x7d
 2634 0057 00       		.sleb128 0
 2635 0058 02000000 		.4byte	.LCFI3
 2636 005c C0000000 		.4byte	.LFE20
 2637 0060 0200     		.2byte	0x2
 2638 0062 7D       		.byte	0x7d
 2639 0063 08       		.sleb128 8
 2640 0064 00000000 		.4byte	0
 2641 0068 00000000 		.4byte	0
 2642              	.LLST3:
 2643 006c 00000000 		.4byte	.LFB22
 2644 0070 02000000 		.4byte	.LCFI4
 2645 0074 0200     		.2byte	0x2
 2646 0076 7D       		.byte	0x7d
 2647 0077 00       		.sleb128 0
 2648 0078 02000000 		.4byte	.LCFI4
 2649 007c 28000000 		.4byte	.LFE22
 2650 0080 0200     		.2byte	0x2
 2651 0082 7D       		.byte	0x7d
 2652 0083 08       		.sleb128 8
 2653 0084 00000000 		.4byte	0
 2654 0088 00000000 		.4byte	0
 2655              	.LLST4:
 2656 008c 00000000 		.4byte	.LFB23
 2657 0090 02000000 		.4byte	.LCFI5
 2658 0094 0200     		.2byte	0x2
 2659 0096 7D       		.byte	0x7d
 2660 0097 00       		.sleb128 0
 2661 0098 02000000 		.4byte	.LCFI5
 2662 009c 34000000 		.4byte	.LFE23
 2663 00a0 0200     		.2byte	0x2
 2664 00a2 7D       		.byte	0x7d
 2665 00a3 08       		.sleb128 8
 2666 00a4 00000000 		.4byte	0
 2667 00a8 00000000 		.4byte	0
 2668              	.LLST5:
 2669 00ac 00000000 		.4byte	.LFB24
 2670 00b0 02000000 		.4byte	.LCFI6
 2671 00b4 0200     		.2byte	0x2
 2672 00b6 7D       		.byte	0x7d
 2673 00b7 00       		.sleb128 0
 2674 00b8 02000000 		.4byte	.LCFI6
 2675 00bc 94000000 		.4byte	.LFE24
 2676 00c0 0200     		.2byte	0x2
 2677 00c2 7D       		.byte	0x7d
ARM GAS  /tmp/ccSHmGTg.s 			page 70


 2678 00c3 08       		.sleb128 8
 2679 00c4 00000000 		.4byte	0
 2680 00c8 00000000 		.4byte	0
 2681              	.LLST6:
 2682 00cc 00000000 		.4byte	.LFB25
 2683 00d0 02000000 		.4byte	.LCFI7
 2684 00d4 0200     		.2byte	0x2
 2685 00d6 7D       		.byte	0x7d
 2686 00d7 00       		.sleb128 0
 2687 00d8 02000000 		.4byte	.LCFI7
 2688 00dc 5C000000 		.4byte	.LFE25
 2689 00e0 0200     		.2byte	0x2
 2690 00e2 7D       		.byte	0x7d
 2691 00e3 10       		.sleb128 16
 2692 00e4 00000000 		.4byte	0
 2693 00e8 00000000 		.4byte	0
 2694              	.LLST7:
 2695 00ec 00000000 		.4byte	.LFB26
 2696 00f0 02000000 		.4byte	.LCFI8
 2697 00f4 0200     		.2byte	0x2
 2698 00f6 7D       		.byte	0x7d
 2699 00f7 00       		.sleb128 0
 2700 00f8 02000000 		.4byte	.LCFI8
 2701 00fc 60000000 		.4byte	.LFE26
 2702 0100 0200     		.2byte	0x2
 2703 0102 7D       		.byte	0x7d
 2704 0103 08       		.sleb128 8
 2705 0104 00000000 		.4byte	0
 2706 0108 00000000 		.4byte	0
 2707              	.LLST8:
 2708 010c 00000000 		.4byte	.LFB27
 2709 0110 02000000 		.4byte	.LCFI9
 2710 0114 0200     		.2byte	0x2
 2711 0116 7D       		.byte	0x7d
 2712 0117 00       		.sleb128 0
 2713 0118 02000000 		.4byte	.LCFI9
 2714 011c 04000000 		.4byte	.LCFI10
 2715 0120 0200     		.2byte	0x2
 2716 0122 7D       		.byte	0x7d
 2717 0123 08       		.sleb128 8
 2718 0124 04000000 		.4byte	.LCFI10
 2719 0128 4C000000 		.4byte	.LFE27
 2720 012c 0200     		.2byte	0x2
 2721 012e 7D       		.byte	0x7d
 2722 012f 10       		.sleb128 16
 2723 0130 00000000 		.4byte	0
 2724 0134 00000000 		.4byte	0
 2725              	.LLST9:
 2726 0138 00000000 		.4byte	.LFB28
 2727 013c 02000000 		.4byte	.LCFI11
 2728 0140 0200     		.2byte	0x2
 2729 0142 7D       		.byte	0x7d
 2730 0143 00       		.sleb128 0
 2731 0144 02000000 		.4byte	.LCFI11
 2732 0148 6C000000 		.4byte	.LFE28
 2733 014c 0200     		.2byte	0x2
 2734 014e 7D       		.byte	0x7d
ARM GAS  /tmp/ccSHmGTg.s 			page 71


 2735 014f 08       		.sleb128 8
 2736 0150 00000000 		.4byte	0
 2737 0154 00000000 		.4byte	0
 2738              		.section	.debug_aranges,"",%progbits
 2739 0000 6C000000 		.4byte	0x6c
 2740 0004 0200     		.2byte	0x2
 2741 0006 00000000 		.4byte	.Ldebug_info0
 2742 000a 04       		.byte	0x4
 2743 000b 00       		.byte	0
 2744 000c 0000     		.2byte	0
 2745 000e 0000     		.2byte	0
 2746 0010 00000000 		.4byte	.LFB11
 2747 0014 2C000000 		.4byte	.LFE11-.LFB11
 2748 0018 00000000 		.4byte	.LFB16
 2749 001c EC000000 		.4byte	.LFE16-.LFB16
 2750 0020 00000000 		.4byte	.LFB20
 2751 0024 C0000000 		.4byte	.LFE20-.LFB20
 2752 0028 00000000 		.4byte	.LFB21
 2753 002c 78000000 		.4byte	.LFE21-.LFB21
 2754 0030 00000000 		.4byte	.LFB22
 2755 0034 28000000 		.4byte	.LFE22-.LFB22
 2756 0038 00000000 		.4byte	.LFB23
 2757 003c 34000000 		.4byte	.LFE23-.LFB23
 2758 0040 00000000 		.4byte	.LFB24
 2759 0044 94000000 		.4byte	.LFE24-.LFB24
 2760 0048 00000000 		.4byte	.LFB25
 2761 004c 5C000000 		.4byte	.LFE25-.LFB25
 2762 0050 00000000 		.4byte	.LFB26
 2763 0054 60000000 		.4byte	.LFE26-.LFB26
 2764 0058 00000000 		.4byte	.LFB27
 2765 005c 4C000000 		.4byte	.LFE27-.LFB27
 2766 0060 00000000 		.4byte	.LFB28
 2767 0064 6C000000 		.4byte	.LFE28-.LFB28
 2768 0068 00000000 		.4byte	0
 2769 006c 00000000 		.4byte	0
 2770              		.section	.debug_ranges,"",%progbits
 2771              	.Ldebug_ranges0:
 2772 0000 00000000 		.4byte	.LFB11
 2773 0004 2C000000 		.4byte	.LFE11
 2774 0008 00000000 		.4byte	.LFB16
 2775 000c EC000000 		.4byte	.LFE16
 2776 0010 00000000 		.4byte	.LFB20
 2777 0014 C0000000 		.4byte	.LFE20
 2778 0018 00000000 		.4byte	.LFB21
 2779 001c 78000000 		.4byte	.LFE21
 2780 0020 00000000 		.4byte	.LFB22
 2781 0024 28000000 		.4byte	.LFE22
 2782 0028 00000000 		.4byte	.LFB23
 2783 002c 34000000 		.4byte	.LFE23
 2784 0030 00000000 		.4byte	.LFB24
 2785 0034 94000000 		.4byte	.LFE24
 2786 0038 00000000 		.4byte	.LFB25
 2787 003c 5C000000 		.4byte	.LFE25
 2788 0040 00000000 		.4byte	.LFB26
 2789 0044 60000000 		.4byte	.LFE26
 2790 0048 00000000 		.4byte	.LFB27
 2791 004c 4C000000 		.4byte	.LFE27
ARM GAS  /tmp/ccSHmGTg.s 			page 72


 2792 0050 00000000 		.4byte	.LFB28
 2793 0054 6C000000 		.4byte	.LFE28
 2794 0058 00000000 		.4byte	0
 2795 005c 00000000 		.4byte	0
 2796              		.section	.debug_line,"",%progbits
 2797              	.Ldebug_line0:
 2798 0000 81020000 		.section	.debug_str,"MS",%progbits,1
 2798      02000A01 
 2798      00000201 
 2798      FB0E0D00 
 2798      01010101 
 2799              	.LASF54:
 2800 0000 49435052 		.ascii	"ICPR\000"
 2800      00
 2801              	.LASF51:
 2802 0005 52534552 		.ascii	"RSERVED1\000"
 2802      56454431 
 2802      00
 2803              	.LASF76:
 2804 000e 41504232 		.ascii	"APB2ENR\000"
 2804      454E5200 
 2805              	.LASF6:
 2806 0016 5056445F 		.ascii	"PVD_IRQn\000"
 2806      4952516E 
 2806      00
 2807              	.LASF102:
 2808 001f 7365715F 		.ascii	"seq_ready\000"
 2808      72656164 
 2808      7900
 2809              	.LASF44:
 2810 0029 6C6F6E67 		.ascii	"long long unsigned int\000"
 2810      206C6F6E 
 2810      6720756E 
 2810      7369676E 
 2810      65642069 
 2811              	.LASF69:
 2812 0040 534D5052 		.ascii	"SMPR\000"
 2812      00
 2813              	.LASF59:
 2814 0045 43505549 		.ascii	"CPUID\000"
 2814      4400
 2815              	.LASF5:
 2816 004b 57574447 		.ascii	"WWDG_IRQn\000"
 2816      5F495251 
 2816      6E00
 2817              	.LASF52:
 2818 0055 49535052 		.ascii	"ISPR\000"
 2818      00
 2819              	.LASF43:
 2820 005a 6C6F6E67 		.ascii	"long long int\000"
 2820      206C6F6E 
 2820      6720696E 
 2820      7400
 2821              	.LASF35:
 2822 0068 7369676E 		.ascii	"signed char\000"
 2822      65642063 
 2822      68617200 
ARM GAS  /tmp/ccSHmGTg.s 			page 73


 2823              	.LASF109:
 2824 0074 7372632F 		.ascii	"src/adc.c\000"
 2824      6164632E 
 2824      6300
 2825              	.LASF33:
 2826 007e 4345435F 		.ascii	"CEC_IRQn\000"
 2826      4952516E 
 2826      00
 2827              	.LASF92:
 2828 0087 746D7072 		.ascii	"tmpreg\000"
 2828      656700
 2829              	.LASF40:
 2830 008e 6C6F6E67 		.ascii	"long int\000"
 2830      20696E74 
 2830      00
 2831              	.LASF73:
 2832 0097 41504232 		.ascii	"APB2RSTR\000"
 2832      52535452 
 2832      00
 2833              	.LASF46:
 2834 00a0 75696E74 		.ascii	"uint16_t\000"
 2834      31365F74 
 2834      00
 2835              	.LASF71:
 2836 00a9 4144435F 		.ascii	"ADC_TypeDef\000"
 2836      54797065 
 2836      44656600 
 2837              	.LASF22:
 2838 00b5 54494D36 		.ascii	"TIM6_DAC_IRQn\000"
 2838      5F444143 
 2838      5F495251 
 2838      6E00
 2839              	.LASF13:
 2840 00c3 54535F49 		.ascii	"TS_IRQn\000"
 2840      52516E00 
 2841              	.LASF1:
 2842 00cb 48617264 		.ascii	"HardFault_IRQn\000"
 2842      4661756C 
 2842      745F4952 
 2842      516E00
 2843              	.LASF25:
 2844 00da 54494D31 		.ascii	"TIM16_IRQn\000"
 2844      365F4952 
 2844      516E00
 2845              	.LASF41:
 2846 00e5 5F5F7569 		.ascii	"__uint32_t\000"
 2846      6E743332 
 2846      5F7400
 2847              	.LASF18:
 2848 00f0 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 2848      5F42524B 
 2848      5F55505F 
 2848      5452475F 
 2848      434F4D5F 
 2849              	.LASF104:
 2850 0109 566F6C74 		.ascii	"VoltagePhoto\000"
 2850      61676550 
ARM GAS  /tmp/ccSHmGTg.s 			page 74


 2850      686F746F 
 2850      00
 2851              	.LASF65:
 2852 0116 5343425F 		.ascii	"SCB_Type\000"
 2852      54797065 
 2852      00
 2853              	.LASF98:
 2854 011f 64756D6D 		.ascii	"dummy\000"
 2854      7900
 2855              	.LASF107:
 2856 0125 6E65775F 		.ascii	"new_photo_sample\000"
 2856      70686F74 
 2856      6F5F7361 
 2856      6D706C65 
 2856      00
 2857              	.LASF94:
 2858 0136 63616C69 		.ascii	"calibrationstatus\000"
 2858      62726174 
 2858      696F6E73 
 2858      74617475 
 2858      7300
 2859              	.LASF17:
 2860 0148 41444331 		.ascii	"ADC1_COMP_IRQn\000"
 2860      5F434F4D 
 2860      505F4952 
 2860      516E00
 2861              	.LASF45:
 2862 0157 756E7369 		.ascii	"unsigned int\000"
 2862      676E6564 
 2862      20696E74 
 2862      00
 2863              	.LASF57:
 2864 0164 73697A65 		.ascii	"sizetype\000"
 2864      74797065 
 2864      00
 2865              	.LASF23:
 2866 016d 54494D31 		.ascii	"TIM14_IRQn\000"
 2866      345F4952 
 2866      516E00
 2867              	.LASF42:
 2868 0178 6C6F6E67 		.ascii	"long unsigned int\000"
 2868      20756E73 
 2868      69676E65 
 2868      6420696E 
 2868      7400
 2869              	.LASF105:
 2870 018a 70686F74 		.ascii	"photo_index\000"
 2870      6F5F696E 
 2870      64657800 
 2871              	.LASF81:
 2872 0196 5243435F 		.ascii	"RCC_TypeDef\000"
 2872      54797065 
 2872      44656600 
 2873              	.LASF99:
 2874 01a2 47657450 		.ascii	"GetPhoto\000"
 2874      686F746F 
 2874      00
ARM GAS  /tmp/ccSHmGTg.s 			page 75


 2875              	.LASF39:
 2876 01ab 73686F72 		.ascii	"short unsigned int\000"
 2876      7420756E 
 2876      7369676E 
 2876      65642069 
 2876      6E7400
 2877              	.LASF60:
 2878 01be 49435352 		.ascii	"ICSR\000"
 2878      00
 2879              	.LASF70:
 2880 01c3 43485345 		.ascii	"CHSELR\000"
 2880      4C5200
 2881              	.LASF61:
 2882 01ca 41495243 		.ascii	"AIRCR\000"
 2882      5200
 2883              	.LASF64:
 2884 01d0 44465352 		.ascii	"DFSR\000"
 2884      00
 2885              	.LASF29:
 2886 01d5 53504931 		.ascii	"SPI1_IRQn\000"
 2886      5F495251 
 2886      6E00
 2887              	.LASF85:
 2888 01df 7072696F 		.ascii	"priority\000"
 2888      72697479 
 2888      00
 2889              	.LASF30:
 2890 01e8 53504932 		.ascii	"SPI2_IRQn\000"
 2890      5F495251 
 2890      6E00
 2891              	.LASF24:
 2892 01f2 54494D31 		.ascii	"TIM15_IRQn\000"
 2892      355F4952 
 2892      516E00
 2893              	.LASF4:
 2894 01fd 53797354 		.ascii	"SysTick_IRQn\000"
 2894      69636B5F 
 2894      4952516E 
 2894      00
 2895              	.LASF19:
 2896 020a 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 2896      5F43435F 
 2896      4952516E 
 2896      00
 2897              	.LASF84:
 2898 0217 4952516E 		.ascii	"IRQn\000"
 2898      00
 2899              	.LASF93:
 2900 021c 63616C69 		.ascii	"calibrationcounter\000"
 2900      62726174 
 2900      696F6E63 
 2900      6F756E74 
 2900      657200
 2901              	.LASF96:
 2902 022f 53657441 		.ascii	"SetADC1_SampleTime\000"
 2902      4443315F 
 2902      53616D70 
ARM GAS  /tmp/ccSHmGTg.s 			page 76


 2902      6C655469 
 2902      6D6500
 2903              	.LASF50:
 2904 0242 49434552 		.ascii	"ICER\000"
 2904      00
 2905              	.LASF79:
 2906 0247 41484252 		.ascii	"AHBRSTR\000"
 2906      53545200 
 2907              	.LASF95:
 2908 024f 55706461 		.ascii	"UpdatePhotoTransistor\000"
 2908      74655068 
 2908      6F746F54 
 2908      72616E73 
 2908      6973746F 
 2909              	.LASF74:
 2910 0265 41504231 		.ascii	"APB1RSTR\000"
 2910      52535452 
 2910      00
 2911              	.LASF110:
 2912 026e 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 2912      652F6D65 
 2912      642F446F 
 2912      63756D65 
 2912      6E74732F 
 2913 02a1 6100     		.ascii	"a\000"
 2914              	.LASF14:
 2915 02a3 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 2915      5F436861 
 2915      6E6E656C 
 2915      315F4952 
 2915      516E00
 2916              	.LASF49:
 2917 02b6 52455345 		.ascii	"RESERVED0\000"
 2917      52564544 
 2917      3000
 2918              	.LASF62:
 2919 02c0 52455345 		.ascii	"RESERVED1\000"
 2919      52564544 
 2919      3100
 2920              	.LASF53:
 2921 02ca 52455345 		.ascii	"RESERVED2\000"
 2921      52564544 
 2921      3200
 2922              	.LASF55:
 2923 02d4 52455345 		.ascii	"RESERVED3\000"
 2923      52564544 
 2923      3300
 2924              	.LASF56:
 2925 02de 52455345 		.ascii	"RESERVED4\000"
 2925      52564544 
 2925      3400
 2926              	.LASF66:
 2927 02e8 52455345 		.ascii	"RESET\000"
 2927      5400
 2928              	.LASF34:
 2929 02ee 756E7369 		.ascii	"unsigned char\000"
 2929      676E6564 
ARM GAS  /tmp/ccSHmGTg.s 			page 77


 2929      20636861 
 2929      7200
 2930              	.LASF91:
 2931 02fc 41444347 		.ascii	"ADCGetCalibrationFactor\000"
 2931      65744361 
 2931      6C696272 
 2931      6174696F 
 2931      6E466163 
 2932              	.LASF32:
 2933 0314 55534152 		.ascii	"USART2_IRQn\000"
 2933      54325F49 
 2933      52516E00 
 2934              	.LASF63:
 2935 0320 53484353 		.ascii	"SHCSR\000"
 2935      5200
 2936              	.LASF36:
 2937 0326 73686F72 		.ascii	"short int\000"
 2937      7420696E 
 2937      7400
 2938              	.LASF48:
 2939 0330 49534552 		.ascii	"ISER\000"
 2939      00
 2940              	.LASF58:
 2941 0335 4E564943 		.ascii	"NVIC_Type\000"
 2941      5F547970 
 2941      6500
 2942              	.LASF12:
 2943 033f 45585449 		.ascii	"EXTI4_15_IRQn\000"
 2943      345F3135 
 2943      5F495251 
 2943      6E00
 2944              	.LASF90:
 2945 034d 52656164 		.ascii	"ReadADC1Check\000"
 2945      41444331 
 2945      43686563 
 2945      6B00
 2946              	.LASF82:
 2947 035b 4E564943 		.ascii	"NVIC_EnableIRQ\000"
 2947      5F456E61 
 2947      626C6549 
 2947      525100
 2948              	.LASF101:
 2949 036a 74745F74 		.ascii	"tt_take_photo_sample\000"
 2949      616B655F 
 2949      70686F74 
 2949      6F5F7361 
 2949      6D706C65 
 2950              	.LASF26:
 2951 037f 54494D31 		.ascii	"TIM17_IRQn\000"
 2951      375F4952 
 2951      516E00
 2952              	.LASF27:
 2953 038a 49324331 		.ascii	"I2C1_IRQn\000"
 2953      5F495251 
 2953      6E00
 2954              	.LASF88:
 2955 0394 6368616E 		.ascii	"channel\000"
ARM GAS  /tmp/ccSHmGTg.s 			page 78


 2955      6E656C00 
 2956              	.LASF8:
 2957 039c 464C4153 		.ascii	"FLASH_IRQn\000"
 2957      485F4952 
 2957      516E00
 2958              	.LASF103:
 2959 03a7 705F6368 		.ascii	"p_channel\000"
 2959      616E6E65 
 2959      6C00
 2960              	.LASF37:
 2961 03b1 4952516E 		.ascii	"IRQn_Type\000"
 2961      5F547970 
 2961      6500
 2962              	.LASF47:
 2963 03bb 75696E74 		.ascii	"uint32_t\000"
 2963      33325F74 
 2963      00
 2964              	.LASF3:
 2965 03c4 50656E64 		.ascii	"PendSV_IRQn\000"
 2965      53565F49 
 2965      52516E00 
 2966              	.LASF97:
 2967 03d0 46696C6C 		.ascii	"FillPhotoBuffer\000"
 2967      50686F74 
 2967      6F427566 
 2967      66657200 
 2968              	.LASF15:
 2969 03e0 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 2969      5F436861 
 2969      6E6E656C 
 2969      325F335F 
 2969      4952516E 
 2970              	.LASF38:
 2971 03f5 5F5F7569 		.ascii	"__uint16_t\000"
 2971      6E743136 
 2971      5F7400
 2972              	.LASF11:
 2973 0400 45585449 		.ascii	"EXTI2_3_IRQn\000"
 2973      325F335F 
 2973      4952516E 
 2973      00
 2974              	.LASF0:
 2975 040d 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 2975      61736B61 
 2975      626C6549 
 2975      6E745F49 
 2975      52516E00 
 2976              	.LASF86:
 2977 0421 41646343 		.ascii	"AdcConfig\000"
 2977      6F6E6669 
 2977      6700
 2978              	.LASF89:
 2979 042b 52656164 		.ascii	"ReadADC1_SameSampleTime\000"
 2979      41444331 
 2979      5F53616D 
 2979      6553616D 
 2979      706C6554 
ARM GAS  /tmp/ccSHmGTg.s 			page 79


 2980              	.LASF77:
 2981 0443 41504231 		.ascii	"APB1ENR\000"
 2981      454E5200 
 2982              	.LASF28:
 2983 044b 49324332 		.ascii	"I2C2_IRQn\000"
 2983      5F495251 
 2983      6E00
 2984              	.LASF10:
 2985 0455 45585449 		.ascii	"EXTI0_1_IRQn\000"
 2985      305F315F 
 2985      4952516E 
 2985      00
 2986              	.LASF16:
 2987 0462 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
 2987      5F436861 
 2987      6E6E656C 
 2987      345F355F 
 2987      4952516E 
 2988              	.LASF87:
 2989 0477 41444331 		.ascii	"ADC1_COMP_IRQHandler\000"
 2989      5F434F4D 
 2989      505F4952 
 2989      5148616E 
 2989      646C6572 
 2990              	.LASF20:
 2991 048c 54494D32 		.ascii	"TIM2_IRQn\000"
 2991      5F495251 
 2991      6E00
 2992              	.LASF31:
 2993 0496 55534152 		.ascii	"USART1_IRQn\000"
 2993      54315F49 
 2993      52516E00 
 2994              	.LASF78:
 2995 04a2 42444352 		.ascii	"BDCR\000"
 2995      00
 2996              	.LASF67:
 2997 04a7 43464752 		.ascii	"CFGR1\000"
 2997      3100
 2998              	.LASF68:
 2999 04ad 43464752 		.ascii	"CFGR2\000"
 2999      3200
 3000              	.LASF80:
 3001 04b3 43464752 		.ascii	"CFGR3\000"
 3001      3300
 3002              	.LASF9:
 3003 04b9 5243435F 		.ascii	"RCC_IRQn\000"
 3003      4952516E 
 3003      00
 3004              	.LASF106:
 3005 04c2 6C617374 		.ascii	"last_photo\000"
 3005      5F70686F 
 3005      746F00
 3006              	.LASF72:
 3007 04cd 43464752 		.ascii	"CFGR\000"
 3007      00
 3008              	.LASF108:
 3009 04d2 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
ARM GAS  /tmp/ccSHmGTg.s 			page 80


 3009      43313120 
 3009      352E322E 
 3009      31203230 
 3009      31353132 
 3010 0505 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 3010      20726576 
 3010      6973696F 
 3010      6E203233 
 3010      31383438 
 3011 0538 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 3011      662D3220 
 3011      2D4F3020 
 3011      2D666F6D 
 3011      69742D66 
 3012 056b 66756E63 		.ascii	"function-sections\000"
 3012      74696F6E 
 3012      2D736563 
 3012      74696F6E 
 3012      7300
 3013              	.LASF7:
 3014 057d 5254435F 		.ascii	"RTC_IRQn\000"
 3014      4952516E 
 3014      00
 3015              	.LASF21:
 3016 0586 54494D33 		.ascii	"TIM3_IRQn\000"
 3016      5F495251 
 3016      6E00
 3017              	.LASF75:
 3018 0590 41484245 		.ascii	"AHBENR\000"
 3018      4E5200
 3019              	.LASF2:
 3020 0597 5356435F 		.ascii	"SVC_IRQn\000"
 3020      4952516E 
 3020      00
 3021              	.LASF100:
 3022 05a0 6164635F 		.ascii	"adc_ch\000"
 3022      636800
 3023              	.LASF83:
 3024 05a7 4E564943 		.ascii	"NVIC_SetPriority\000"
 3024      5F536574 
 3024      5072696F 
 3024      72697479 
 3024      00
 3025              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccSHmGTg.s 			page 81


DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
     /tmp/ccSHmGTg.s:55     .text.NVIC_EnableIRQ:00000000 $t
     /tmp/ccSHmGTg.s:59     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
     /tmp/ccSHmGTg.s:91     .text.NVIC_EnableIRQ:00000028 $d
     /tmp/ccSHmGTg.s:96     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccSHmGTg.s:100    .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccSHmGTg.s:240    .text.NVIC_SetPriority:000000e4 $d
                            *COM*:00000004 p_channel
                            *COM*:00000040 VoltagePhoto
     /tmp/ccSHmGTg.s:251    .bss.photo_index:00000000 photo_index
     /tmp/ccSHmGTg.s:252    .bss.photo_index:00000000 $d
     /tmp/ccSHmGTg.s:258    .bss.last_photo:00000000 last_photo
     /tmp/ccSHmGTg.s:255    .bss.last_photo:00000000 $d
     /tmp/ccSHmGTg.s:264    .bss.new_photo_sample:00000000 new_photo_sample
     /tmp/ccSHmGTg.s:265    .bss.new_photo_sample:00000000 $d
     /tmp/ccSHmGTg.s:267    .text.AdcConfig:00000000 $t
     /tmp/ccSHmGTg.s:272    .text.AdcConfig:00000000 AdcConfig
     /tmp/ccSHmGTg.s:698    .text.ADCGetCalibrationFactor:00000000 ADCGetCalibrationFactor
     /tmp/ccSHmGTg.s:388    .text.AdcConfig:000000ac $d
     /tmp/ccSHmGTg.s:397    .text.ADC1_COMP_IRQHandler:00000000 $t
     /tmp/ccSHmGTg.s:402    .text.ADC1_COMP_IRQHandler:00000000 ADC1_COMP_IRQHandler
     /tmp/ccSHmGTg.s:474    .text.ADC1_COMP_IRQHandler:00000064 $d
     /tmp/ccSHmGTg.s:483    .text.SetADC1_SampleTime:00000000 $t
     /tmp/ccSHmGTg.s:488    .text.SetADC1_SampleTime:00000000 SetADC1_SampleTime
     /tmp/ccSHmGTg.s:520    .text.SetADC1_SampleTime:00000024 $d
     /tmp/ccSHmGTg.s:525    .text.ReadADC1_SameSampleTime:00000000 $t
     /tmp/ccSHmGTg.s:530    .text.ReadADC1_SameSampleTime:00000000 ReadADC1_SameSampleTime
     /tmp/ccSHmGTg.s:570    .text.ReadADC1_SameSampleTime:00000030 $d
     /tmp/ccSHmGTg.s:575    .text.ReadADC1Check:00000000 $t
     /tmp/ccSHmGTg.s:580    .text.ReadADC1Check:00000000 ReadADC1Check
     /tmp/ccSHmGTg.s:687    .text.ReadADC1Check:0000008c $d
     /tmp/ccSHmGTg.s:693    .text.ADCGetCalibrationFactor:00000000 $t
     /tmp/ccSHmGTg.s:767    .text.ADCGetCalibrationFactor:00000058 $d
     /tmp/ccSHmGTg.s:772    .text.UpdatePhotoTransistor:00000000 $t
     /tmp/ccSHmGTg.s:777    .text.UpdatePhotoTransistor:00000000 UpdatePhotoTransistor
     /tmp/ccSHmGTg.s:839    .text.UpdatePhotoTransistor:00000050 $d
     /tmp/ccSHmGTg.s:847    .text.FillPhotoBuffer:00000000 $t
     /tmp/ccSHmGTg.s:852    .text.FillPhotoBuffer:00000000 FillPhotoBuffer
     /tmp/ccSHmGTg.s:909    .text.FillPhotoBuffer:00000048 $d
     /tmp/ccSHmGTg.s:914    .text.GetPhoto:00000000 $t
     /tmp/ccSHmGTg.s:919    .text.GetPhoto:00000000 GetPhoto
     /tmp/ccSHmGTg.s:989    .text.GetPhoto:00000060 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
adc_ch
seq_ready
tt_take_photo_sample
