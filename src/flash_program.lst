ARM GAS  /tmp/ccfi8svf.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"flash_program.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/flash_program.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/flash_program.o -g -gdwarf-2 -O0 -Wall
  24              	@ -fomit-frame-pointer -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.EraseAllMemory_FLASH,"ax",%progbits
  55              		.align	2
  56              		.global	EraseAllMemory_FLASH
  57              		.code	16
ARM GAS  /tmp/ccfi8svf.s 			page 2


  58              		.thumb_func
  59              		.type	EraseAllMemory_FLASH, %function
  60              	EraseAllMemory_FLASH:
  61              	.LFB20:
  62              		.file 1 "src/flash_program.c"
   1:src/flash_program.c **** /**
   2:src/flash_program.c ****   *****************************************************************************
   3:src/flash_program.c ****   * @title   FLASH_Program.c
   4:src/flash_program.c ****   * @author  CooCox
   5:src/flash_program.c ****   * @date    31 Oct 2012
   6:src/flash_program.c ****   * @brief   This example provides a description of how to program the STM32F
   7:src/flash_program.c ****   *          10x FLASH.
   8:src/flash_program.c ****   *          the result of the programming operation is stored in
   9:src/flash_program.c ****   *          to the MemoryProgramStatus variable.
  10:src/flash_program.c ****   *          Four LEDs are toggled if t
  11:src/flash_program.c ****   *          he flash program has been down.
  12:src/flash_program.c ****   *          This example has been tested on
  13:src/flash_program.c ****   *           KEIL MCBSTM32 board, STM32F103RBT6 device.
  14:src/flash_program.c ****   *******************************************************************************
  15:src/flash_program.c ****   */
  16:src/flash_program.c **** ////// The above comment is automatically generated by CoIDE ///////////////////
  17:src/flash_program.c **** 
  18:src/flash_program.c **** #include "flash_program.h"
  19:src/flash_program.c **** #include "stm32f0xx.h"
  20:src/flash_program.c **** 
  21:src/flash_program.c **** 
  22:src/flash_program.c **** 
  23:src/flash_program.c **** /* Externals variables ---------------------------------------------------------*/
  24:src/flash_program.c **** extern parameters_typedef param_struct;
  25:src/flash_program.c **** //extern mem_bkp_typedef memory_backup;
  26:src/flash_program.c **** //extern filesystem_typedef files;
  27:src/flash_program.c **** //extern unsigned int v_bkp [];
  28:src/flash_program.c **** 
  29:src/flash_program.c **** 
  30:src/flash_program.c **** /* Private typedef -----------------------------------------------------------*/
  31:src/flash_program.c **** 
  32:src/flash_program.c **** 
  33:src/flash_program.c **** /* Private define ------------------------------------------------------------*/
  34:src/flash_program.c **** 
  35:src/flash_program.c **** 
  36:src/flash_program.c **** 
  37:src/flash_program.c **** /* Private macro -------------------------------------------------------------*/
  38:src/flash_program.c **** /* Private variables ---------------------------------------------------------*/
  39:src/flash_program.c **** //unsigned int * pmem = (unsigned int *)0x08007000;	//Sector 7 Page 28
  40:src/flash_program.c **** 
  41:src/flash_program.c **** 
  42:src/flash_program.c **** /* Private function prototypes -----------------------------------------------*/
  43:src/flash_program.c **** /* Private functions ---------------------------------------------------------*/
  44:src/flash_program.c **** //unsigned char ReadMem (void)
  45:src/flash_program.c **** //{
  46:src/flash_program.c **** //	if (*pmem == 0xffffffff)
  47:src/flash_program.c **** //		return 1;
  48:src/flash_program.c **** //	else
  49:src/flash_program.c **** //		return 0;
  50:src/flash_program.c **** //}
  51:src/flash_program.c **** 
  52:src/flash_program.c **** unsigned char EraseAllMemory_FLASH(void)
ARM GAS  /tmp/ccfi8svf.s 			page 3


  53:src/flash_program.c **** {
  63              		.loc 1 53 0
  64              		.cfi_startproc
  65 0000 00B5     		push	{lr}	@
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 4
  68              		.cfi_offset 14, -4
  69 0002 83B0     		sub	sp, sp, #12	@,,
  70              	.LCFI1:
  71              		.cfi_def_cfa_offset 16
  54:src/flash_program.c **** 	unsigned char resp = 0;
  72              		.loc 1 54 0
  73 0004 6B46     		mov	r3, sp	@ tmp127,
  74 0006 0733     		adds	r3, r3, #7	@ tmp115,
  75 0008 0022     		movs	r2, #0	@ tmp116,
  76 000a 1A70     		strb	r2, [r3]	@ tmp117, resp
  55:src/flash_program.c **** 
  56:src/flash_program.c **** 	ErasePage(PAGE31,1);
  77              		.loc 1 56 0
  78 000c 0D4B     		ldr	r3, .L5	@ tmp118,
  79 000e 0121     		movs	r1, #1	@,
  80 0010 1800     		movs	r0, r3	@, tmp118
  81 0012 FFF7FEFF 		bl	ErasePage	@
  57:src/flash_program.c **** 	//reviso si borre
  58:src/flash_program.c **** 
  59:src/flash_program.c **** 	if (*(unsigned int *) PAGE31 == 0xFFFFFFFF)
  82              		.loc 1 59 0
  83 0016 0B4B     		ldr	r3, .L5	@ D.5007,
  84 0018 1B68     		ldr	r3, [r3]	@ D.5008, *_6
  85 001a 0133     		adds	r3, r3, #1	@ tmp126, D.5008,
  86 001c 06D1     		bne	.L2	@,
  60:src/flash_program.c **** 		resp++;
  87              		.loc 1 60 0
  88 001e 6B46     		mov	r3, sp	@ tmp128,
  89 0020 0733     		adds	r3, r3, #7	@ tmp119,
  90 0022 1A78     		ldrb	r2, [r3]	@ D.5006, resp
  91 0024 6B46     		mov	r3, sp	@ tmp129,
  92 0026 0733     		adds	r3, r3, #7	@ tmp120,
  93 0028 0132     		adds	r2, r2, #1	@ tmp121,
  94 002a 1A70     		strb	r2, [r3]	@ tmp122, resp
  95              	.L2:
  61:src/flash_program.c **** 
  62:src/flash_program.c **** 	if (resp)
  96              		.loc 1 62 0
  97 002c 6B46     		mov	r3, sp	@ tmp130,
  98 002e 0733     		adds	r3, r3, #7	@ tmp123,
  99 0030 1B78     		ldrb	r3, [r3]	@ tmp124, resp
 100 0032 002B     		cmp	r3, #0	@ tmp124,
 101 0034 01D0     		beq	.L3	@,
  63:src/flash_program.c **** 		return PASSED;
 102              		.loc 1 63 0
 103 0036 0123     		movs	r3, #1	@ D.5006,
 104 0038 00E0     		b	.L4	@
 105              	.L3:
  64:src/flash_program.c **** 	else
  65:src/flash_program.c **** 		return FAILED;
 106              		.loc 1 65 0
ARM GAS  /tmp/ccfi8svf.s 			page 4


 107 003a 0023     		movs	r3, #0	@ D.5006,
 108              	.L4:
  66:src/flash_program.c **** }
 109              		.loc 1 66 0
 110 003c 1800     		movs	r0, r3	@, <retval>
 111 003e 03B0     		add	sp, sp, #12	@,,
 112              		@ sp needed	@
 113 0040 00BD     		pop	{pc}
 114              	.L6:
 115 0042 C046     		.align	2
 116              	.L5:
 117 0044 007C0008 		.word	134249472
 118              		.cfi_endproc
 119              	.LFE20:
 120              		.size	EraseAllMemory_FLASH, .-EraseAllMemory_FLASH
 121              		.section	.text.BackupPage,"ax",%progbits
 122              		.align	2
 123              		.global	BackupPage
 124              		.code	16
 125              		.thumb_func
 126              		.type	BackupPage, %function
 127              	BackupPage:
 128              	.LFB21:
  67:src/flash_program.c **** 
  68:src/flash_program.c **** /**
  69:src/flash_program.c ****   * @brief    After Reset, the Flash memory Program/Erase Controller is locked.
  70:src/flash_program.c ****   * To unlock it, the FLASH_Unlock function is used. Before programming the
  71:src/flash_program.c ****   * desired addresses, an erase operation is performed using the flash erase
  72:src/flash_program.c ****   * page feature. The erase procedure starts with the calculation of the number
  73:src/flash_program.c ****   * of pages to be used. Then all these pages will be erased one by one by
  74:src/flash_program.c ****   * calling FLASH_ErasePage function.
  75:src/flash_program.c ****   * Once this operation is finished, the programming operation will be performed by
  76:src/flash_program.c ****   * using the FLASH_ProgramWord function. The written data is then checked and the
  77:src/flash_program.c ****   * result of the programming operation is stored into the MemoryProgramStatus variable.
  78:src/flash_program.c ****   * @param  None
  79:src/flash_program.c ****   * @retval None
  80:src/flash_program.c ****   */
  81:src/flash_program.c **** 
  82:src/flash_program.c **** void BackupPage(unsigned int * p, unsigned int * page_addr)
  83:src/flash_program.c **** {
 129              		.loc 1 83 0
 130              		.cfi_startproc
 131 0000 84B0     		sub	sp, sp, #16	@,,
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 16
 134 0002 0190     		str	r0, [sp, #4]	@ p, p
 135 0004 0091     		str	r1, [sp]	@ page_addr, page_addr
  84:src/flash_program.c **** 	unsigned short i;
  85:src/flash_program.c **** 
  86:src/flash_program.c **** 	for (i = 0; i < 255; i++)
 136              		.loc 1 86 0
 137 0006 0E23     		movs	r3, #14	@ tmp118,
 138 0008 6B44     		add	r3, r3, sp	@ tmp118,
 139 000a 0022     		movs	r2, #0	@ tmp119,
 140 000c 1A80     		strh	r2, [r3]	@ tmp120, i
 141 000e 14E0     		b	.L8	@
 142              	.L9:
ARM GAS  /tmp/ccfi8svf.s 			page 5


  87:src/flash_program.c **** 	{
  88:src/flash_program.c **** 		*(p + i) = *(page_addr + i);
 143              		.loc 1 88 0 discriminator 3
 144 0010 0E23     		movs	r3, #14	@ tmp121,
 145 0012 6B44     		add	r3, r3, sp	@ tmp121,
 146 0014 1B88     		ldrh	r3, [r3]	@ D.5009, i
 147 0016 9B00     		lsls	r3, r3, #2	@ D.5009, D.5009,
 148 0018 019A     		ldr	r2, [sp, #4]	@ tmp122, p
 149 001a D318     		adds	r3, r2, r3	@ D.5010, tmp122, D.5009
 150 001c 0E22     		movs	r2, #14	@ tmp123,
 151 001e 6A44     		add	r2, r2, sp	@ tmp123,
 152 0020 1288     		ldrh	r2, [r2]	@ D.5009, i
 153 0022 9200     		lsls	r2, r2, #2	@ D.5009, D.5009,
 154 0024 0099     		ldr	r1, [sp]	@ tmp124, page_addr
 155 0026 8A18     		adds	r2, r1, r2	@ D.5010, tmp124, D.5009
 156 0028 1268     		ldr	r2, [r2]	@ D.5009, *_12
 157 002a 1A60     		str	r2, [r3]	@ D.5009, *_8
  86:src/flash_program.c **** 	{
 158              		.loc 1 86 0 discriminator 3
 159 002c 0E23     		movs	r3, #14	@ tmp125,
 160 002e 6B44     		add	r3, r3, sp	@ tmp125,
 161 0030 1A88     		ldrh	r2, [r3]	@ D.5011, i
 162 0032 0E23     		movs	r3, #14	@ tmp126,
 163 0034 6B44     		add	r3, r3, sp	@ tmp126,
 164 0036 0132     		adds	r2, r2, #1	@ tmp127,
 165 0038 1A80     		strh	r2, [r3]	@ tmp128, i
 166              	.L8:
  86:src/flash_program.c **** 	{
 167              		.loc 1 86 0 is_stmt 0 discriminator 1
 168 003a 0E23     		movs	r3, #14	@ tmp129,
 169 003c 6B44     		add	r3, r3, sp	@ tmp129,
 170 003e 1B88     		ldrh	r3, [r3]	@ tmp130, i
 171 0040 FE2B     		cmp	r3, #254	@ tmp130,
 172 0042 E5D9     		bls	.L9	@,
  89:src/flash_program.c **** 	}
  90:src/flash_program.c **** }
 173              		.loc 1 90 0 is_stmt 1
 174 0044 C046     		nop
 175 0046 04B0     		add	sp, sp, #16	@,,
 176              		@ sp needed	@
 177 0048 7047     		bx	lr
 178              		.cfi_endproc
 179              	.LFE21:
 180              		.size	BackupPage, .-BackupPage
 181 004a C046     		.section	.text.ErasePage,"ax",%progbits
 182              		.align	2
 183              		.global	ErasePage
 184              		.code	16
 185              		.thumb_func
 186              		.type	ErasePage, %function
 187              	ErasePage:
 188              	.LFB22:
  91:src/flash_program.c **** 
  92:src/flash_program.c **** void ErasePage(uint32_t p_addr, unsigned char with_lock)
  93:src/flash_program.c **** {
 189              		.loc 1 93 0
 190              		.cfi_startproc
ARM GAS  /tmp/ccfi8svf.s 			page 6


 191 0000 00B5     		push	{lr}	@
 192              	.LCFI3:
 193              		.cfi_def_cfa_offset 4
 194              		.cfi_offset 14, -4
 195 0002 83B0     		sub	sp, sp, #12	@,,
 196              	.LCFI4:
 197              		.cfi_def_cfa_offset 16
 198 0004 0190     		str	r0, [sp, #4]	@ p_addr, p_addr
 199 0006 0A00     		movs	r2, r1	@ tmp110, with_lock
 200 0008 6B46     		mov	r3, sp	@ tmp116,
 201 000a 0333     		adds	r3, r3, #3	@ tmp111,
 202 000c 1A70     		strb	r2, [r3]	@ tmp112, with_lock
  94:src/flash_program.c **** 	FLASH_Unlock();
 203              		.loc 1 94 0
 204 000e FFF7FEFF 		bl	FLASH_Unlock	@
  95:src/flash_program.c **** 	FLASH_ErasePage(p_addr);
 205              		.loc 1 95 0
 206 0012 019B     		ldr	r3, [sp, #4]	@ tmp113, p_addr
 207 0014 1800     		movs	r0, r3	@, tmp113
 208 0016 FFF7FEFF 		bl	FLASH_ErasePage	@
  96:src/flash_program.c **** 	if (with_lock)
 209              		.loc 1 96 0
 210 001a 6B46     		mov	r3, sp	@ tmp117,
 211 001c 0333     		adds	r3, r3, #3	@ tmp114,
 212 001e 1B78     		ldrb	r3, [r3]	@ tmp115, with_lock
 213 0020 002B     		cmp	r3, #0	@ tmp115,
 214 0022 01D0     		beq	.L12	@,
  97:src/flash_program.c **** 		FLASH_Lock();
 215              		.loc 1 97 0
 216 0024 FFF7FEFF 		bl	FLASH_Lock	@
 217              	.L12:
  98:src/flash_program.c **** }
 218              		.loc 1 98 0
 219 0028 C046     		nop
 220 002a 03B0     		add	sp, sp, #12	@,,
 221              		@ sp needed	@
 222 002c 00BD     		pop	{pc}
 223              		.cfi_endproc
 224              	.LFE22:
 225              		.size	ErasePage, .-ErasePage
 226 002e C046     		.section	.text.FLASH_Unlock,"ax",%progbits
 227              		.align	2
 228              		.global	FLASH_Unlock
 229              		.code	16
 230              		.thumb_func
 231              		.type	FLASH_Unlock, %function
 232              	FLASH_Unlock:
 233              	.LFB23:
  99:src/flash_program.c **** 
 100:src/flash_program.c **** /**
 101:src/flash_program.c ****   * @brief  Unlocks the FLASH control register and program memory access.
 102:src/flash_program.c ****   * @param  None
 103:src/flash_program.c ****   * @retval None
 104:src/flash_program.c ****   */
 105:src/flash_program.c **** void FLASH_Unlock(void)
 106:src/flash_program.c **** {
 234              		.loc 1 106 0
ARM GAS  /tmp/ccfi8svf.s 			page 7


 235              		.cfi_startproc
 107:src/flash_program.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 236              		.loc 1 107 0
 237 0000 064B     		ldr	r3, .L16	@ D.5012,
 238 0002 1B69     		ldr	r3, [r3, #16]	@ D.5013, _2->CR
 239 0004 8022     		movs	r2, #128	@ tmp115,
 240 0006 1340     		ands	r3, r2	@ D.5013, tmp115
 241 0008 05D0     		beq	.L15	@,
 108:src/flash_program.c ****   {
 109:src/flash_program.c ****     /* Unlocking the program memory access */
 110:src/flash_program.c ****     FLASH->KEYR = FLASH_FKEY1;
 242              		.loc 1 110 0
 243 000a 044B     		ldr	r3, .L16	@ D.5012,
 244 000c 044A     		ldr	r2, .L16+4	@ tmp116,
 245 000e 5A60     		str	r2, [r3, #4]	@ tmp116, _6->KEYR
 111:src/flash_program.c ****     FLASH->KEYR = FLASH_FKEY2;
 246              		.loc 1 111 0
 247 0010 024B     		ldr	r3, .L16	@ D.5012,
 248 0012 044A     		ldr	r2, .L16+8	@ tmp117,
 249 0014 5A60     		str	r2, [r3, #4]	@ tmp117, _8->KEYR
 250              	.L15:
 112:src/flash_program.c ****   }
 113:src/flash_program.c **** }
 251              		.loc 1 113 0
 252 0016 C046     		nop
 253              		@ sp needed	@
 254 0018 7047     		bx	lr
 255              	.L17:
 256 001a C046     		.align	2
 257              	.L16:
 258 001c 00200240 		.word	1073881088
 259 0020 23016745 		.word	1164378403
 260 0024 AB89EFCD 		.word	-839939669
 261              		.cfi_endproc
 262              	.LFE23:
 263              		.size	FLASH_Unlock, .-FLASH_Unlock
 264              		.section	.text.FLASH_ErasePage,"ax",%progbits
 265              		.align	2
 266              		.global	FLASH_ErasePage
 267              		.code	16
 268              		.thumb_func
 269              		.type	FLASH_ErasePage, %function
 270              	FLASH_ErasePage:
 271              	.LFB24:
 114:src/flash_program.c **** 
 115:src/flash_program.c **** /**
 116:src/flash_program.c ****   * @brief  Erases a specified page in program memory.
 117:src/flash_program.c ****   * @note   To correctly run this function, the FLASH_Unlock() function must be called before.
 118:src/flash_program.c ****   * @note   Call the FLASH_Lock() to disable the flash memory access (recommended
 119:src/flash_program.c ****   *         to protect the FLASH memory against possible unwanted operation)
 120:src/flash_program.c ****   * @param  Page_Address: The page address in program memory to be erased.
 121:src/flash_program.c ****   * @note   A Page is erased in the Program memory only if the address to load
 122:src/flash_program.c ****   *         is the start address of a page (multiple of 1024 bytes).
 123:src/flash_program.c ****   * @retval FLASH Status: The returned value can be:
 124:src/flash_program.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 125:src/flash_program.c ****   */
 126:src/flash_program.c **** FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
ARM GAS  /tmp/ccfi8svf.s 			page 8


 127:src/flash_program.c **** {
 272              		.loc 1 127 0
 273              		.cfi_startproc
 274 0000 10B5     		push	{r4, lr}	@
 275              	.LCFI5:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 4, -8
 278              		.cfi_offset 14, -4
 279 0002 84B0     		sub	sp, sp, #16	@,,
 280              	.LCFI6:
 281              		.cfi_def_cfa_offset 24
 282 0004 0190     		str	r0, [sp, #4]	@ Page_Address, Page_Address
 128:src/flash_program.c ****   FLASH_Status status = FLASH_COMPLETE;
 283              		.loc 1 128 0
 284 0006 0F23     		movs	r3, #15	@ tmp125,
 285 0008 6B44     		add	r3, r3, sp	@ tmp125,
 286 000a 0422     		movs	r2, #4	@ tmp126,
 287 000c 1A70     		strb	r2, [r3]	@ tmp127, status
 129:src/flash_program.c **** 
 130:src/flash_program.c ****   /* Wait for last operation to be completed */
 131:src/flash_program.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 288              		.loc 1 131 0
 289 000e 0F24     		movs	r4, #15	@ tmp128,
 290 0010 6C44     		add	r4, r4, sp	@ tmp128,
 291 0012 B023     		movs	r3, #176	@ tmp147,
 292 0014 1B03     		lsls	r3, r3, #12	@ tmp129, tmp147,
 293 0016 1800     		movs	r0, r3	@, tmp129
 294 0018 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 295 001c 0300     		movs	r3, r0	@ tmp130,
 296 001e 2370     		strb	r3, [r4]	@ tmp132, status
 132:src/flash_program.c **** 
 133:src/flash_program.c ****   if(status == FLASH_COMPLETE)
 297              		.loc 1 133 0
 298 0020 0F23     		movs	r3, #15	@ tmp133,
 299 0022 6B44     		add	r3, r3, sp	@ tmp133,
 300 0024 1B78     		ldrb	r3, [r3]	@ tmp134, status
 301 0026 042B     		cmp	r3, #4	@ tmp134,
 302 0028 1DD1     		bne	.L19	@,
 134:src/flash_program.c ****   {
 135:src/flash_program.c ****     /* If the previous operation is completed, proceed to erase the page */
 136:src/flash_program.c ****     FLASH->CR |= FLASH_CR_PER;
 303              		.loc 1 136 0
 304 002a 124B     		ldr	r3, .L21	@ D.5014,
 305 002c 114A     		ldr	r2, .L21	@ D.5014,
 306 002e 1269     		ldr	r2, [r2, #16]	@ D.5015, _8->CR
 307 0030 0221     		movs	r1, #2	@ tmp135,
 308 0032 0A43     		orrs	r2, r1	@ D.5015, tmp135
 309 0034 1A61     		str	r2, [r3, #16]	@ D.5015, _7->CR
 137:src/flash_program.c ****     FLASH->AR  = Page_Address;
 310              		.loc 1 137 0
 311 0036 0F4B     		ldr	r3, .L21	@ D.5014,
 312 0038 019A     		ldr	r2, [sp, #4]	@ tmp136, Page_Address
 313 003a 5A61     		str	r2, [r3, #20]	@ tmp136, _12->AR
 138:src/flash_program.c ****     FLASH->CR |= FLASH_CR_STRT;
 314              		.loc 1 138 0
 315 003c 0D4B     		ldr	r3, .L21	@ D.5014,
 316 003e 0D4A     		ldr	r2, .L21	@ D.5014,
ARM GAS  /tmp/ccfi8svf.s 			page 9


 317 0040 1269     		ldr	r2, [r2, #16]	@ D.5015, _16->CR
 318 0042 4021     		movs	r1, #64	@ tmp137,
 319 0044 0A43     		orrs	r2, r1	@ D.5015, tmp137
 320 0046 1A61     		str	r2, [r3, #16]	@ D.5015, _15->CR
 139:src/flash_program.c **** 
 140:src/flash_program.c ****     /* Wait for last operation to be completed */
 141:src/flash_program.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 321              		.loc 1 141 0
 322 0048 0F24     		movs	r4, #15	@ tmp138,
 323 004a 6C44     		add	r4, r4, sp	@ tmp138,
 324 004c B023     		movs	r3, #176	@ tmp146,
 325 004e 1B03     		lsls	r3, r3, #12	@ tmp139, tmp146,
 326 0050 1800     		movs	r0, r3	@, tmp139
 327 0052 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 328 0056 0300     		movs	r3, r0	@ tmp140,
 329 0058 2370     		strb	r3, [r4]	@ tmp142, status
 142:src/flash_program.c **** 
 143:src/flash_program.c ****     /* Disable the PER Bit */
 144:src/flash_program.c ****     FLASH->CR &= ~FLASH_CR_PER;
 330              		.loc 1 144 0
 331 005a 064B     		ldr	r3, .L21	@ D.5014,
 332 005c 054A     		ldr	r2, .L21	@ D.5014,
 333 005e 1269     		ldr	r2, [r2, #16]	@ D.5015, _23->CR
 334 0060 0221     		movs	r1, #2	@ tmp143,
 335 0062 8A43     		bics	r2, r1	@ D.5015, tmp143
 336 0064 1A61     		str	r2, [r3, #16]	@ D.5015, _22->CR
 337              	.L19:
 145:src/flash_program.c ****   }
 146:src/flash_program.c **** 
 147:src/flash_program.c ****   /* Return the Erase Status */
 148:src/flash_program.c ****   return status;
 338              		.loc 1 148 0
 339 0066 0F23     		movs	r3, #15	@ tmp144,
 340 0068 6B44     		add	r3, r3, sp	@ tmp144,
 341 006a 1B78     		ldrb	r3, [r3]	@ D.5016, status
 149:src/flash_program.c **** }
 342              		.loc 1 149 0
 343 006c 1800     		movs	r0, r3	@, <retval>
 344 006e 04B0     		add	sp, sp, #16	@,,
 345              		@ sp needed	@
 346 0070 10BD     		pop	{r4, pc}
 347              	.L22:
 348 0072 C046     		.align	2
 349              	.L21:
 350 0074 00200240 		.word	1073881088
 351              		.cfi_endproc
 352              	.LFE24:
 353              		.size	FLASH_ErasePage, .-FLASH_ErasePage
 354              		.section	.text.FLASH_Lock,"ax",%progbits
 355              		.align	2
 356              		.global	FLASH_Lock
 357              		.code	16
 358              		.thumb_func
 359              		.type	FLASH_Lock, %function
 360              	FLASH_Lock:
 361              	.LFB25:
 150:src/flash_program.c **** 
ARM GAS  /tmp/ccfi8svf.s 			page 10


 151:src/flash_program.c **** /**
 152:src/flash_program.c ****   * @brief  Locks the Program memory access.
 153:src/flash_program.c ****   * @param  None
 154:src/flash_program.c ****   * @retval None
 155:src/flash_program.c ****   */
 156:src/flash_program.c **** void FLASH_Lock(void)
 157:src/flash_program.c **** {
 362              		.loc 1 157 0
 363              		.cfi_startproc
 158:src/flash_program.c ****   /* Set the LOCK Bit to lock the FLASH control register and program memory access */
 159:src/flash_program.c ****   FLASH->CR |= FLASH_CR_LOCK;
 364              		.loc 1 159 0
 365 0000 034B     		ldr	r3, .L24	@ D.5017,
 366 0002 034A     		ldr	r2, .L24	@ D.5017,
 367 0004 1269     		ldr	r2, [r2, #16]	@ D.5018, _2->CR
 368 0006 8021     		movs	r1, #128	@ tmp114,
 369 0008 0A43     		orrs	r2, r1	@ D.5018, tmp114
 370 000a 1A61     		str	r2, [r3, #16]	@ D.5018, _1->CR
 160:src/flash_program.c **** }
 371              		.loc 1 160 0
 372 000c C046     		nop
 373              		@ sp needed	@
 374 000e 7047     		bx	lr
 375              	.L25:
 376              		.align	2
 377              	.L24:
 378 0010 00200240 		.word	1073881088
 379              		.cfi_endproc
 380              	.LFE25:
 381              		.size	FLASH_Lock, .-FLASH_Lock
 382              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 383              		.align	2
 384              		.global	FLASH_ProgramWord
 385              		.code	16
 386              		.thumb_func
 387              		.type	FLASH_ProgramWord, %function
 388              	FLASH_ProgramWord:
 389              	.LFB26:
 161:src/flash_program.c **** 
 162:src/flash_program.c **** /**
 163:src/flash_program.c ****   * @brief  Programs a word at a specified address.
 164:src/flash_program.c ****   * @note   To correctly run this function, the FLASH_Unlock() function must be called before.
 165:src/flash_program.c ****   * @note   Call the FLASH_Lock() to disable the flash memory access (recommended
 166:src/flash_program.c ****   *         to protect the FLASH memory against possible unwanted operation)
 167:src/flash_program.c ****   * @param  Address: specifies the address to be programmed.
 168:src/flash_program.c ****   * @param  Data: specifies the data to be programmed.
 169:src/flash_program.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 170:src/flash_program.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 171:src/flash_program.c ****   */
 172:src/flash_program.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 173:src/flash_program.c **** {
 390              		.loc 1 173 0
 391              		.cfi_startproc
 392 0000 10B5     		push	{r4, lr}	@
 393              	.LCFI7:
 394              		.cfi_def_cfa_offset 8
 395              		.cfi_offset 4, -8
ARM GAS  /tmp/ccfi8svf.s 			page 11


 396              		.cfi_offset 14, -4
 397 0002 84B0     		sub	sp, sp, #16	@,,
 398              	.LCFI8:
 399              		.cfi_def_cfa_offset 24
 400 0004 0190     		str	r0, [sp, #4]	@ Address, Address
 401 0006 0091     		str	r1, [sp]	@ Data, Data
 174:src/flash_program.c ****   FLASH_Status status = FLASH_COMPLETE;
 402              		.loc 1 174 0
 403 0008 0F23     		movs	r3, #15	@ tmp131,
 404 000a 6B44     		add	r3, r3, sp	@ tmp131,
 405 000c 0422     		movs	r2, #4	@ tmp132,
 406 000e 1A70     		strb	r2, [r3]	@ tmp133, status
 175:src/flash_program.c ****   __IO uint32_t tmp = 0;
 407              		.loc 1 175 0
 408 0010 0023     		movs	r3, #0	@ tmp134,
 409 0012 0293     		str	r3, [sp, #8]	@ tmp134, tmp
 176:src/flash_program.c **** 
 177:src/flash_program.c ****     /* Wait for last operation to be completed */
 178:src/flash_program.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 410              		.loc 1 178 0
 411 0014 0F24     		movs	r4, #15	@ tmp135,
 412 0016 6C44     		add	r4, r4, sp	@ tmp135,
 413 0018 B023     		movs	r3, #176	@ tmp167,
 414 001a 1B03     		lsls	r3, r3, #12	@ tmp136, tmp167,
 415 001c 1800     		movs	r0, r3	@, tmp136
 416 001e FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 417 0022 0300     		movs	r3, r0	@ tmp137,
 418 0024 2370     		strb	r3, [r4]	@ tmp139, status
 179:src/flash_program.c **** 
 180:src/flash_program.c ****   if(status == FLASH_COMPLETE)
 419              		.loc 1 180 0
 420 0026 0F23     		movs	r3, #15	@ tmp140,
 421 0028 6B44     		add	r3, r3, sp	@ tmp140,
 422 002a 1B78     		ldrb	r3, [r3]	@ tmp141, status
 423 002c 042B     		cmp	r3, #4	@ tmp141,
 424 002e 36D1     		bne	.L27	@,
 181:src/flash_program.c ****   {
 182:src/flash_program.c ****     /* If the previous operation is completed, proceed to program the new first
 183:src/flash_program.c ****     half word */
 184:src/flash_program.c ****     FLASH->CR |= FLASH_CR_PG;
 425              		.loc 1 184 0
 426 0030 1E4B     		ldr	r3, .L30	@ D.5019,
 427 0032 1E4A     		ldr	r2, .L30	@ D.5019,
 428 0034 1269     		ldr	r2, [r2, #16]	@ D.5020, _9->CR
 429 0036 0121     		movs	r1, #1	@ tmp142,
 430 0038 0A43     		orrs	r2, r1	@ D.5020, tmp142
 431 003a 1A61     		str	r2, [r3, #16]	@ D.5020, _8->CR
 185:src/flash_program.c **** 
 186:src/flash_program.c ****     *(__IO uint16_t*)Address = (uint16_t)Data;
 432              		.loc 1 186 0
 433 003c 019B     		ldr	r3, [sp, #4]	@ D.5021, Address
 434 003e 009A     		ldr	r2, [sp]	@ tmp144, Data
 435 0040 92B2     		uxth	r2, r2	@ D.5022, tmp143
 436 0042 1A80     		strh	r2, [r3]	@ tmp145, *_14
 187:src/flash_program.c **** 
 188:src/flash_program.c ****     /* Wait for last operation to be completed */
 189:src/flash_program.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
ARM GAS  /tmp/ccfi8svf.s 			page 12


 437              		.loc 1 189 0
 438 0044 0F24     		movs	r4, #15	@ tmp146,
 439 0046 6C44     		add	r4, r4, sp	@ tmp146,
 440 0048 B023     		movs	r3, #176	@ tmp166,
 441 004a 1B03     		lsls	r3, r3, #12	@ tmp147, tmp166,
 442 004c 1800     		movs	r0, r3	@, tmp147
 443 004e FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 444 0052 0300     		movs	r3, r0	@ tmp148,
 445 0054 2370     		strb	r3, [r4]	@ tmp150, status
 190:src/flash_program.c **** 
 191:src/flash_program.c ****     if(status == FLASH_COMPLETE)
 446              		.loc 1 191 0
 447 0056 0F23     		movs	r3, #15	@ tmp151,
 448 0058 6B44     		add	r3, r3, sp	@ tmp151,
 449 005a 1B78     		ldrb	r3, [r3]	@ tmp152, status
 450 005c 042B     		cmp	r3, #4	@ tmp152,
 451 005e 18D1     		bne	.L28	@,
 192:src/flash_program.c ****     {
 193:src/flash_program.c ****       /* If the previous operation is completed, proceed to program the new second
 194:src/flash_program.c ****       half word */
 195:src/flash_program.c ****       tmp = Address + 2;
 452              		.loc 1 195 0
 453 0060 019B     		ldr	r3, [sp, #4]	@ tmp153, Address
 454 0062 0233     		adds	r3, r3, #2	@ D.5020,
 455 0064 0293     		str	r3, [sp, #8]	@ D.5020, tmp
 196:src/flash_program.c **** 
 197:src/flash_program.c ****       *(__IO uint16_t*) tmp = Data >> 16;
 456              		.loc 1 197 0
 457 0066 029B     		ldr	r3, [sp, #8]	@ D.5020, tmp
 458 0068 1A00     		movs	r2, r3	@ D.5021, D.5020
 459 006a 009B     		ldr	r3, [sp]	@ tmp154, Data
 460 006c 1B0C     		lsrs	r3, r3, #16	@ D.5020, tmp154,
 461 006e 9BB2     		uxth	r3, r3	@ D.5022, D.5020
 462 0070 1380     		strh	r3, [r2]	@ tmp155, *_23
 198:src/flash_program.c **** 
 199:src/flash_program.c ****       /* Wait for last operation to be completed */
 200:src/flash_program.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 463              		.loc 1 200 0
 464 0072 0F24     		movs	r4, #15	@ tmp156,
 465 0074 6C44     		add	r4, r4, sp	@ tmp156,
 466 0076 B023     		movs	r3, #176	@ tmp165,
 467 0078 1B03     		lsls	r3, r3, #12	@ tmp157, tmp165,
 468 007a 1800     		movs	r0, r3	@, tmp157
 469 007c FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 470 0080 0300     		movs	r3, r0	@ tmp158,
 471 0082 2370     		strb	r3, [r4]	@ tmp160, status
 201:src/flash_program.c **** 
 202:src/flash_program.c ****       /* Disable the PG Bit */
 203:src/flash_program.c ****       FLASH->CR &= ~FLASH_CR_PG;
 472              		.loc 1 203 0
 473 0084 094B     		ldr	r3, .L30	@ D.5019,
 474 0086 094A     		ldr	r2, .L30	@ D.5019,
 475 0088 1269     		ldr	r2, [r2, #16]	@ D.5020, _30->CR
 476 008a 0121     		movs	r1, #1	@ tmp161,
 477 008c 8A43     		bics	r2, r1	@ D.5020, tmp161
 478 008e 1A61     		str	r2, [r3, #16]	@ D.5020, _29->CR
 479 0090 05E0     		b	.L27	@
ARM GAS  /tmp/ccfi8svf.s 			page 13


 480              	.L28:
 204:src/flash_program.c ****     }
 205:src/flash_program.c ****     else
 206:src/flash_program.c ****     {
 207:src/flash_program.c ****       /* Disable the PG Bit */
 208:src/flash_program.c ****       FLASH->CR &= ~FLASH_CR_PG;
 481              		.loc 1 208 0
 482 0092 064B     		ldr	r3, .L30	@ D.5019,
 483 0094 054A     		ldr	r2, .L30	@ D.5019,
 484 0096 1269     		ldr	r2, [r2, #16]	@ D.5020, _35->CR
 485 0098 0121     		movs	r1, #1	@ tmp162,
 486 009a 8A43     		bics	r2, r1	@ D.5020, tmp162
 487 009c 1A61     		str	r2, [r3, #16]	@ D.5020, _34->CR
 488              	.L27:
 209:src/flash_program.c ****     }
 210:src/flash_program.c ****   }
 211:src/flash_program.c **** 
 212:src/flash_program.c ****   /* Return the Program Status */
 213:src/flash_program.c ****   return status;
 489              		.loc 1 213 0
 490 009e 0F23     		movs	r3, #15	@ tmp163,
 491 00a0 6B44     		add	r3, r3, sp	@ tmp163,
 492 00a2 1B78     		ldrb	r3, [r3]	@ D.5023, status
 214:src/flash_program.c **** }
 493              		.loc 1 214 0
 494 00a4 1800     		movs	r0, r3	@, <retval>
 495 00a6 04B0     		add	sp, sp, #16	@,,
 496              		@ sp needed	@
 497 00a8 10BD     		pop	{r4, pc}
 498              	.L31:
 499 00aa C046     		.align	2
 500              	.L30:
 501 00ac 00200240 		.word	1073881088
 502              		.cfi_endproc
 503              	.LFE26:
 504              		.size	FLASH_ProgramWord, .-FLASH_ProgramWord
 505              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 506              		.align	2
 507              		.global	FLASH_WaitForLastOperation
 508              		.code	16
 509              		.thumb_func
 510              		.type	FLASH_WaitForLastOperation, %function
 511              	FLASH_WaitForLastOperation:
 512              	.LFB27:
 215:src/flash_program.c **** 
 216:src/flash_program.c **** /**
 217:src/flash_program.c ****   * @brief  Waits for a FLASH operation to complete or a TIMEOUT to occur.
 218:src/flash_program.c ****   * @param  Timeout: FLASH programming Timeout
 219:src/flash_program.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY,
 220:src/flash_program.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 221:src/flash_program.c ****   */
 222:src/flash_program.c **** FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
 223:src/flash_program.c **** {
 513              		.loc 1 223 0
 514              		.cfi_startproc
 515 0000 10B5     		push	{r4, lr}	@
 516              	.LCFI9:
ARM GAS  /tmp/ccfi8svf.s 			page 14


 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 4, -8
 519              		.cfi_offset 14, -4
 520 0002 84B0     		sub	sp, sp, #16	@,,
 521              	.LCFI10:
 522              		.cfi_def_cfa_offset 24
 523 0004 0190     		str	r0, [sp, #4]	@ Timeout, Timeout
 224:src/flash_program.c ****   FLASH_Status status = FLASH_COMPLETE;
 524              		.loc 1 224 0
 525 0006 0F23     		movs	r3, #15	@ tmp112,
 526 0008 6B44     		add	r3, r3, sp	@ tmp112,
 527 000a 0422     		movs	r2, #4	@ tmp113,
 528 000c 1A70     		strb	r2, [r3]	@ tmp114, status
 225:src/flash_program.c **** 
 226:src/flash_program.c ****   /* Check for the FLASH Status */
 227:src/flash_program.c ****   status = FLASH_GetStatus();
 529              		.loc 1 227 0
 530 000e 0F24     		movs	r4, #15	@ tmp115,
 531 0010 6C44     		add	r4, r4, sp	@ tmp115,
 532 0012 FFF7FEFF 		bl	FLASH_GetStatus	@
 533 0016 0300     		movs	r3, r0	@ tmp116,
 534 0018 2370     		strb	r3, [r4]	@ tmp118, status
 228:src/flash_program.c **** 
 229:src/flash_program.c ****   /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
 230:src/flash_program.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 535              		.loc 1 230 0
 536 001a 08E0     		b	.L33	@
 537              	.L35:
 231:src/flash_program.c ****   {
 232:src/flash_program.c ****     status = FLASH_GetStatus();
 538              		.loc 1 232 0
 539 001c 0F24     		movs	r4, #15	@ tmp119,
 540 001e 6C44     		add	r4, r4, sp	@ tmp119,
 541 0020 FFF7FEFF 		bl	FLASH_GetStatus	@
 542 0024 0300     		movs	r3, r0	@ tmp120,
 543 0026 2370     		strb	r3, [r4]	@ tmp122, status
 233:src/flash_program.c ****     Timeout--;
 544              		.loc 1 233 0
 545 0028 019B     		ldr	r3, [sp, #4]	@ tmp124, Timeout
 546 002a 013B     		subs	r3, r3, #1	@ tmp123,
 547 002c 0193     		str	r3, [sp, #4]	@ tmp123, Timeout
 548              	.L33:
 230:src/flash_program.c ****   {
 549              		.loc 1 230 0
 550 002e 0F23     		movs	r3, #15	@ tmp125,
 551 0030 6B44     		add	r3, r3, sp	@ tmp125,
 552 0032 1B78     		ldrb	r3, [r3]	@ tmp126, status
 553 0034 012B     		cmp	r3, #1	@ tmp126,
 554 0036 02D1     		bne	.L34	@,
 230:src/flash_program.c ****   {
 555              		.loc 1 230 0 is_stmt 0 discriminator 1
 556 0038 019B     		ldr	r3, [sp, #4]	@ tmp127, Timeout
 557 003a 002B     		cmp	r3, #0	@ tmp127,
 558 003c EED1     		bne	.L35	@,
 559              	.L34:
 234:src/flash_program.c ****   }
 235:src/flash_program.c **** 
ARM GAS  /tmp/ccfi8svf.s 			page 15


 236:src/flash_program.c ****   if(Timeout == 0x00 )
 560              		.loc 1 236 0 is_stmt 1
 561 003e 019B     		ldr	r3, [sp, #4]	@ tmp128, Timeout
 562 0040 002B     		cmp	r3, #0	@ tmp128,
 563 0042 03D1     		bne	.L36	@,
 237:src/flash_program.c ****   {
 238:src/flash_program.c ****     status = FLASH_TIMEOUT;
 564              		.loc 1 238 0
 565 0044 0F23     		movs	r3, #15	@ tmp129,
 566 0046 6B44     		add	r3, r3, sp	@ tmp129,
 567 0048 0522     		movs	r2, #5	@ tmp130,
 568 004a 1A70     		strb	r2, [r3]	@ tmp131, status
 569              	.L36:
 239:src/flash_program.c ****   }
 240:src/flash_program.c ****   /* Return the operation status */
 241:src/flash_program.c ****   return status;
 570              		.loc 1 241 0
 571 004c 0F23     		movs	r3, #15	@ tmp132,
 572 004e 6B44     		add	r3, r3, sp	@ tmp132,
 573 0050 1B78     		ldrb	r3, [r3]	@ D.5024, status
 242:src/flash_program.c **** }
 574              		.loc 1 242 0
 575 0052 1800     		movs	r0, r3	@, <retval>
 576 0054 04B0     		add	sp, sp, #16	@,,
 577              		@ sp needed	@
 578 0056 10BD     		pop	{r4, pc}
 579              		.cfi_endproc
 580              	.LFE27:
 581              		.size	FLASH_WaitForLastOperation, .-FLASH_WaitForLastOperation
 582              		.section	.text.FLASH_GetStatus,"ax",%progbits
 583              		.align	2
 584              		.global	FLASH_GetStatus
 585              		.code	16
 586              		.thumb_func
 587              		.type	FLASH_GetStatus, %function
 588              	FLASH_GetStatus:
 589              	.LFB28:
 243:src/flash_program.c **** 
 244:src/flash_program.c **** /**
 245:src/flash_program.c ****   * @brief  Returns the FLASH Status.
 246:src/flash_program.c ****   * @param  None
 247:src/flash_program.c ****   * @retval FLASH Status: The returned value can be:
 248:src/flash_program.c ****   *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
 249:src/flash_program.c ****   */
 250:src/flash_program.c **** FLASH_Status FLASH_GetStatus(void)
 251:src/flash_program.c **** {
 590              		.loc 1 251 0
 591              		.cfi_startproc
 592 0000 82B0     		sub	sp, sp, #8	@,,
 593              	.LCFI11:
 594              		.cfi_def_cfa_offset 8
 252:src/flash_program.c ****   FLASH_Status FLASHstatus = FLASH_COMPLETE;
 595              		.loc 1 252 0
 596 0002 6B46     		mov	r3, sp	@ tmp141,
 597 0004 0733     		adds	r3, r3, #7	@ tmp121,
 598 0006 0422     		movs	r2, #4	@ tmp122,
 599 0008 1A70     		strb	r2, [r3]	@ tmp123, FLASHstatus
ARM GAS  /tmp/ccfi8svf.s 			page 16


 253:src/flash_program.c **** 
 254:src/flash_program.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY)
 600              		.loc 1 254 0
 601 000a 144B     		ldr	r3, .L44	@ D.5025,
 602 000c DB68     		ldr	r3, [r3, #12]	@ D.5026, _3->SR
 603 000e 0122     		movs	r2, #1	@ tmp124,
 604 0010 1340     		ands	r3, r2	@ D.5026, tmp124
 605 0012 04D0     		beq	.L39	@,
 255:src/flash_program.c ****   {
 256:src/flash_program.c ****     FLASHstatus = FLASH_BUSY;
 606              		.loc 1 256 0
 607 0014 6B46     		mov	r3, sp	@ tmp142,
 608 0016 0733     		adds	r3, r3, #7	@ tmp125,
 609 0018 0122     		movs	r2, #1	@ tmp126,
 610 001a 1A70     		strb	r2, [r3]	@ tmp127, FLASHstatus
 611 001c 17E0     		b	.L40	@
 612              	.L39:
 257:src/flash_program.c ****   }
 258:src/flash_program.c ****   else
 259:src/flash_program.c ****   {
 260:src/flash_program.c ****     if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 613              		.loc 1 260 0
 614 001e 0F4B     		ldr	r3, .L44	@ D.5025,
 615 0020 DB68     		ldr	r3, [r3, #12]	@ D.5026, _8->SR
 616 0022 1022     		movs	r2, #16	@ tmp128,
 617 0024 1340     		ands	r3, r2	@ D.5026, tmp128
 618 0026 04D0     		beq	.L41	@,
 261:src/flash_program.c ****     {
 262:src/flash_program.c ****       FLASHstatus = FLASH_ERROR_WRP;
 619              		.loc 1 262 0
 620 0028 6B46     		mov	r3, sp	@ tmp143,
 621 002a 0733     		adds	r3, r3, #7	@ tmp129,
 622 002c 0222     		movs	r2, #2	@ tmp130,
 623 002e 1A70     		strb	r2, [r3]	@ tmp131, FLASHstatus
 624 0030 0DE0     		b	.L40	@
 625              	.L41:
 263:src/flash_program.c ****     }
 264:src/flash_program.c ****     else
 265:src/flash_program.c ****     {
 266:src/flash_program.c ****       if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 626              		.loc 1 266 0
 627 0032 0A4B     		ldr	r3, .L44	@ D.5025,
 628 0034 DB68     		ldr	r3, [r3, #12]	@ D.5026, _12->SR
 629 0036 0422     		movs	r2, #4	@ tmp132,
 630 0038 1340     		ands	r3, r2	@ D.5026, tmp132
 631 003a 04D0     		beq	.L42	@,
 267:src/flash_program.c ****       {
 268:src/flash_program.c ****         FLASHstatus = FLASH_ERROR_PROGRAM;
 632              		.loc 1 268 0
 633 003c 6B46     		mov	r3, sp	@ tmp144,
 634 003e 0733     		adds	r3, r3, #7	@ tmp133,
 635 0040 0322     		movs	r2, #3	@ tmp134,
 636 0042 1A70     		strb	r2, [r3]	@ tmp135, FLASHstatus
 637 0044 03E0     		b	.L40	@
 638              	.L42:
 269:src/flash_program.c ****       }
 270:src/flash_program.c ****       else
ARM GAS  /tmp/ccfi8svf.s 			page 17


 271:src/flash_program.c ****       {
 272:src/flash_program.c ****         FLASHstatus = FLASH_COMPLETE;
 639              		.loc 1 272 0
 640 0046 6B46     		mov	r3, sp	@ tmp145,
 641 0048 0733     		adds	r3, r3, #7	@ tmp136,
 642 004a 0422     		movs	r2, #4	@ tmp137,
 643 004c 1A70     		strb	r2, [r3]	@ tmp138, FLASHstatus
 644              	.L40:
 273:src/flash_program.c ****       }
 274:src/flash_program.c ****     }
 275:src/flash_program.c ****   }
 276:src/flash_program.c ****   /* Return the FLASH Status */
 277:src/flash_program.c ****   return FLASHstatus;
 645              		.loc 1 277 0
 646 004e 6B46     		mov	r3, sp	@ tmp146,
 647 0050 0733     		adds	r3, r3, #7	@ tmp139,
 648 0052 1B78     		ldrb	r3, [r3]	@ D.5027, FLASHstatus
 278:src/flash_program.c **** }
 649              		.loc 1 278 0
 650 0054 1800     		movs	r0, r3	@, <retval>
 651 0056 02B0     		add	sp, sp, #8	@,,
 652              		@ sp needed	@
 653 0058 7047     		bx	lr
 654              	.L45:
 655 005a C046     		.align	2
 656              	.L44:
 657 005c 00200240 		.word	1073881088
 658              		.cfi_endproc
 659              	.LFE28:
 660              		.size	FLASH_GetStatus, .-FLASH_GetStatus
 661              		.section	.text.WritePage,"ax",%progbits
 662              		.align	2
 663              		.global	WritePage
 664              		.code	16
 665              		.thumb_func
 666              		.type	WritePage, %function
 667              	WritePage:
 668              	.LFB29:
 279:src/flash_program.c **** 
 280:src/flash_program.c **** unsigned char WritePage(unsigned int * p, uint32_t p_addr, unsigned char with_lock)
 281:src/flash_program.c **** {
 669              		.loc 1 281 0
 670              		.cfi_startproc
 671 0000 00B5     		push	{lr}	@
 672              	.LCFI12:
 673              		.cfi_def_cfa_offset 4
 674              		.cfi_offset 14, -4
 675 0002 87B0     		sub	sp, sp, #28	@,,
 676              	.LCFI13:
 677              		.cfi_def_cfa_offset 32
 678 0004 0390     		str	r0, [sp, #12]	@ p, p
 679 0006 0291     		str	r1, [sp, #8]	@ p_addr, p_addr
 680 0008 6B46     		mov	r3, sp	@ tmp160,
 681 000a 0733     		adds	r3, r3, #7	@ tmp127,
 682 000c 1A70     		strb	r2, [r3]	@ tmp128, with_lock
 282:src/flash_program.c **** 	unsigned short i;
 283:src/flash_program.c **** 	unsigned int * p_verif;
ARM GAS  /tmp/ccfi8svf.s 			page 18


 284:src/flash_program.c **** 
 285:src/flash_program.c **** 	p_verif = (unsigned int *) p_addr;
 683              		.loc 1 285 0
 684 000e 029B     		ldr	r3, [sp, #8]	@ tmp129, p_addr
 685 0010 0493     		str	r3, [sp, #16]	@ tmp129, p_verif
 286:src/flash_program.c **** 
 287:src/flash_program.c **** 	for (i = 0; i < 255; i++)
 686              		.loc 1 287 0
 687 0012 1623     		movs	r3, #22	@ tmp130,
 688 0014 6B44     		add	r3, r3, sp	@ tmp130,
 689 0016 0022     		movs	r2, #0	@ tmp131,
 690 0018 1A80     		strh	r2, [r3]	@ tmp132, i
 691 001a 15E0     		b	.L47	@
 692              	.L48:
 288:src/flash_program.c **** 	{
 289:src/flash_program.c **** 		FLASH_ProgramWord(p_addr, *(p + i));
 693              		.loc 1 289 0 discriminator 3
 694 001c 1623     		movs	r3, #22	@ tmp133,
 695 001e 6B44     		add	r3, r3, sp	@ tmp133,
 696 0020 1B88     		ldrh	r3, [r3]	@ D.5029, i
 697 0022 9B00     		lsls	r3, r3, #2	@ D.5029, D.5029,
 698 0024 039A     		ldr	r2, [sp, #12]	@ tmp134, p
 699 0026 D318     		adds	r3, r2, r3	@ D.5030, tmp134, D.5029
 700 0028 1A68     		ldr	r2, [r3]	@ D.5029, *_14
 701 002a 029B     		ldr	r3, [sp, #8]	@ tmp135, p_addr
 702 002c 1100     		movs	r1, r2	@, D.5029
 703 002e 1800     		movs	r0, r3	@, tmp135
 704 0030 FFF7FEFF 		bl	FLASH_ProgramWord	@
 290:src/flash_program.c **** 		p_addr += 4;
 705              		.loc 1 290 0 discriminator 3
 706 0034 029B     		ldr	r3, [sp, #8]	@ tmp137, p_addr
 707 0036 0433     		adds	r3, r3, #4	@ tmp136,
 708 0038 0293     		str	r3, [sp, #8]	@ tmp136, p_addr
 287:src/flash_program.c **** 	{
 709              		.loc 1 287 0 discriminator 3
 710 003a 1623     		movs	r3, #22	@ tmp138,
 711 003c 6B44     		add	r3, r3, sp	@ tmp138,
 712 003e 1A88     		ldrh	r2, [r3]	@ D.5031, i
 713 0040 1623     		movs	r3, #22	@ tmp139,
 714 0042 6B44     		add	r3, r3, sp	@ tmp139,
 715 0044 0132     		adds	r2, r2, #1	@ tmp140,
 716 0046 1A80     		strh	r2, [r3]	@ tmp141, i
 717              	.L47:
 287:src/flash_program.c **** 	{
 718              		.loc 1 287 0 is_stmt 0 discriminator 1
 719 0048 1623     		movs	r3, #22	@ tmp142,
 720 004a 6B44     		add	r3, r3, sp	@ tmp142,
 721 004c 1B88     		ldrh	r3, [r3]	@ tmp143, i
 722 004e FE2B     		cmp	r3, #254	@ tmp143,
 723 0050 E4D9     		bls	.L48	@,
 291:src/flash_program.c **** 	}
 292:src/flash_program.c **** 
 293:src/flash_program.c **** 	if (with_lock)
 724              		.loc 1 293 0 is_stmt 1
 725 0052 6B46     		mov	r3, sp	@ tmp166,
 726 0054 0733     		adds	r3, r3, #7	@ tmp144,
 727 0056 1B78     		ldrb	r3, [r3]	@ tmp145, with_lock
ARM GAS  /tmp/ccfi8svf.s 			page 19


 728 0058 002B     		cmp	r3, #0	@ tmp145,
 729 005a 01D0     		beq	.L49	@,
 294:src/flash_program.c **** 		FLASH_Lock();
 730              		.loc 1 294 0
 731 005c FFF7FEFF 		bl	FLASH_Lock	@
 732              	.L49:
 295:src/flash_program.c **** 
 296:src/flash_program.c **** 	//verifico memoria
 297:src/flash_program.c **** 	for (i = 0; i < 255; i++)
 733              		.loc 1 297 0
 734 0060 1623     		movs	r3, #22	@ tmp146,
 735 0062 6B44     		add	r3, r3, sp	@ tmp146,
 736 0064 0022     		movs	r2, #0	@ tmp147,
 737 0066 1A80     		strh	r2, [r3]	@ tmp148, i
 738 0068 18E0     		b	.L50	@
 739              	.L53:
 298:src/flash_program.c **** 	{
 299:src/flash_program.c **** 		if (*(p_verif + i) != *(p + i))
 740              		.loc 1 299 0
 741 006a 1623     		movs	r3, #22	@ tmp149,
 742 006c 6B44     		add	r3, r3, sp	@ tmp149,
 743 006e 1B88     		ldrh	r3, [r3]	@ D.5029, i
 744 0070 9B00     		lsls	r3, r3, #2	@ D.5029, D.5029,
 745 0072 049A     		ldr	r2, [sp, #16]	@ tmp150, p_verif
 746 0074 D318     		adds	r3, r2, r3	@ D.5030, tmp150, D.5029
 747 0076 1A68     		ldr	r2, [r3]	@ D.5029, *_25
 748 0078 1623     		movs	r3, #22	@ tmp151,
 749 007a 6B44     		add	r3, r3, sp	@ tmp151,
 750 007c 1B88     		ldrh	r3, [r3]	@ D.5029, i
 751 007e 9B00     		lsls	r3, r3, #2	@ D.5029, D.5029,
 752 0080 0399     		ldr	r1, [sp, #12]	@ tmp152, p
 753 0082 CB18     		adds	r3, r1, r3	@ D.5030, tmp152, D.5029
 754 0084 1B68     		ldr	r3, [r3]	@ D.5029, *_29
 755 0086 9A42     		cmp	r2, r3	@ D.5029, D.5029
 756 0088 01D0     		beq	.L51	@,
 300:src/flash_program.c **** 			return FAILED;
 757              		.loc 1 300 0
 758 008a 0023     		movs	r3, #0	@ D.5028,
 759 008c 0CE0     		b	.L52	@
 760              	.L51:
 297:src/flash_program.c **** 	{
 761              		.loc 1 297 0 discriminator 2
 762 008e 1623     		movs	r3, #22	@ tmp153,
 763 0090 6B44     		add	r3, r3, sp	@ tmp153,
 764 0092 1A88     		ldrh	r2, [r3]	@ D.5031, i
 765 0094 1623     		movs	r3, #22	@ tmp154,
 766 0096 6B44     		add	r3, r3, sp	@ tmp154,
 767 0098 0132     		adds	r2, r2, #1	@ tmp155,
 768 009a 1A80     		strh	r2, [r3]	@ tmp156, i
 769              	.L50:
 297:src/flash_program.c **** 	{
 770              		.loc 1 297 0 is_stmt 0 discriminator 1
 771 009c 1623     		movs	r3, #22	@ tmp157,
 772 009e 6B44     		add	r3, r3, sp	@ tmp157,
 773 00a0 1B88     		ldrh	r3, [r3]	@ tmp158, i
 774 00a2 FE2B     		cmp	r3, #254	@ tmp158,
 775 00a4 E1D9     		bls	.L53	@,
ARM GAS  /tmp/ccfi8svf.s 			page 20


 301:src/flash_program.c **** 	}
 302:src/flash_program.c **** 	return PASSED;
 776              		.loc 1 302 0 is_stmt 1
 777 00a6 0123     		movs	r3, #1	@ D.5028,
 778              	.L52:
 303:src/flash_program.c **** }
 779              		.loc 1 303 0
 780 00a8 1800     		movs	r0, r3	@, <retval>
 781 00aa 07B0     		add	sp, sp, #28	@,,
 782              		@ sp needed	@
 783 00ac 00BD     		pop	{pc}
 784              		.cfi_endproc
 785              	.LFE29:
 786              		.size	WritePage, .-WritePage
 787 00ae C046     		.section	.text.WriteConfigurations,"ax",%progbits
 788              		.align	2
 789              		.global	WriteConfigurations
 790              		.code	16
 791              		.thumb_func
 792              		.type	WriteConfigurations, %function
 793              	WriteConfigurations:
 794              	.LFB30:
 304:src/flash_program.c **** 
 305:src/flash_program.c **** 
 306:src/flash_program.c **** unsigned char WriteConfigurations (parameters_typedef * p_param)
 307:src/flash_program.c **** {
 795              		.loc 1 307 0
 796              		.cfi_startproc
 797 0000 00B5     		push	{lr}	@
 798              	.LCFI14:
 799              		.cfi_def_cfa_offset 4
 800              		.cfi_offset 14, -4
 801 0002 83B0     		sub	sp, sp, #12	@,,
 802              	.LCFI15:
 803              		.cfi_def_cfa_offset 16
 804 0004 0190     		str	r0, [sp, #4]	@ p_param, p_param
 308:src/flash_program.c **** 	ErasePage(PAGE63,0);
 805              		.loc 1 308 0
 806 0006 094B     		ldr	r3, .L57	@ tmp113,
 807 0008 0021     		movs	r1, #0	@,
 808 000a 1800     		movs	r0, r3	@, tmp113
 809 000c FFF7FEFF 		bl	ErasePage	@
 309:src/flash_program.c **** 
 310:src/flash_program.c **** 	//update en memoria
 311:src/flash_program.c **** 	//p_param = &param_struct;
 312:src/flash_program.c **** 
 313:src/flash_program.c **** 	if (WriteFlash((unsigned int *) p_param, PAGE63, 1, (sizeof(parameters_typedef) >> 2)) == FAILED)
 810              		.loc 1 313 0
 811 0010 0649     		ldr	r1, .L57	@ tmp114,
 812 0012 0198     		ldr	r0, [sp, #4]	@ tmp115, p_param
 813 0014 1523     		movs	r3, #21	@,
 814 0016 0122     		movs	r2, #1	@,
 815 0018 FFF7FEFF 		bl	WriteFlash	@
 816 001c 031E     		subs	r3, r0, #0	@ tmp116,,
 817 001e 01D1     		bne	.L55	@,
 314:src/flash_program.c **** 		return FAILED;
 818              		.loc 1 314 0
ARM GAS  /tmp/ccfi8svf.s 			page 21


 819 0020 0023     		movs	r3, #0	@ D.5032,
 820 0022 00E0     		b	.L56	@
 821              	.L55:
 315:src/flash_program.c **** 
 316:src/flash_program.c **** 	return PASSED;
 822              		.loc 1 316 0
 823 0024 0123     		movs	r3, #1	@ D.5032,
 824              	.L56:
 317:src/flash_program.c **** }
 825              		.loc 1 317 0
 826 0026 1800     		movs	r0, r3	@, <retval>
 827 0028 03B0     		add	sp, sp, #12	@,,
 828              		@ sp needed	@
 829 002a 00BD     		pop	{pc}
 830              	.L58:
 831              		.align	2
 832              	.L57:
 833 002c 00FC0008 		.word	134282240
 834              		.cfi_endproc
 835              	.LFE30:
 836              		.size	WriteConfigurations, .-WriteConfigurations
 837              		.section	.text.WriteFlash,"ax",%progbits
 838              		.align	2
 839              		.global	WriteFlash
 840              		.code	16
 841              		.thumb_func
 842              		.type	WriteFlash, %function
 843              	WriteFlash:
 844              	.LFB31:
 318:src/flash_program.c **** 
 319:src/flash_program.c **** unsigned char WriteFlash(unsigned int * p, uint32_t p_addr, unsigned char with_lock, unsigned char 
 320:src/flash_program.c **** {
 845              		.loc 1 320 0
 846              		.cfi_startproc
 847 0000 00B5     		push	{lr}	@
 848              	.LCFI16:
 849              		.cfi_def_cfa_offset 4
 850              		.cfi_offset 14, -4
 851 0002 87B0     		sub	sp, sp, #28	@,,
 852              	.LCFI17:
 853              		.cfi_def_cfa_offset 32
 854 0004 0390     		str	r0, [sp, #12]	@ p, p
 855 0006 0291     		str	r1, [sp, #8]	@ p_addr, p_addr
 856 0008 1900     		movs	r1, r3	@ tmp131, len_in_4
 857 000a 6B46     		mov	r3, sp	@ tmp171,
 858 000c 0733     		adds	r3, r3, #7	@ tmp129,
 859 000e 1A70     		strb	r2, [r3]	@ tmp130, with_lock
 860 0010 6B46     		mov	r3, sp	@ tmp172,
 861 0012 0633     		adds	r3, r3, #6	@ tmp132,
 862 0014 0A1C     		adds	r2, r1, #0	@ tmp133, tmp131
 863 0016 1A70     		strb	r2, [r3]	@ tmp133, len_in_4
 321:src/flash_program.c **** 	unsigned short i;
 322:src/flash_program.c **** 	unsigned int * p_verif;
 323:src/flash_program.c **** 
 324:src/flash_program.c **** 	p_verif = (unsigned int *) p_addr;
 864              		.loc 1 324 0
 865 0018 029B     		ldr	r3, [sp, #8]	@ tmp134, p_addr
ARM GAS  /tmp/ccfi8svf.s 			page 22


 866 001a 0493     		str	r3, [sp, #16]	@ tmp134, p_verif
 325:src/flash_program.c **** 
 326:src/flash_program.c **** 	for (i = 0; i < len_in_4; i++)
 867              		.loc 1 326 0
 868 001c 1623     		movs	r3, #22	@ tmp135,
 869 001e 6B44     		add	r3, r3, sp	@ tmp135,
 870 0020 0022     		movs	r2, #0	@ tmp136,
 871 0022 1A80     		strh	r2, [r3]	@ tmp137, i
 872 0024 15E0     		b	.L60	@
 873              	.L61:
 327:src/flash_program.c **** 	{
 328:src/flash_program.c **** 		FLASH_ProgramWord(p_addr, *(p + i));
 874              		.loc 1 328 0 discriminator 3
 875 0026 1623     		movs	r3, #22	@ tmp138,
 876 0028 6B44     		add	r3, r3, sp	@ tmp138,
 877 002a 1B88     		ldrh	r3, [r3]	@ D.5035, i
 878 002c 9B00     		lsls	r3, r3, #2	@ D.5035, D.5035,
 879 002e 039A     		ldr	r2, [sp, #12]	@ tmp139, p
 880 0030 D318     		adds	r3, r2, r3	@ D.5036, tmp139, D.5035
 881 0032 1A68     		ldr	r2, [r3]	@ D.5035, *_16
 882 0034 029B     		ldr	r3, [sp, #8]	@ tmp140, p_addr
 883 0036 1100     		movs	r1, r2	@, D.5035
 884 0038 1800     		movs	r0, r3	@, tmp140
 885 003a FFF7FEFF 		bl	FLASH_ProgramWord	@
 329:src/flash_program.c **** 		p_addr += 4;
 886              		.loc 1 329 0 discriminator 3
 887 003e 029B     		ldr	r3, [sp, #8]	@ tmp142, p_addr
 888 0040 0433     		adds	r3, r3, #4	@ tmp141,
 889 0042 0293     		str	r3, [sp, #8]	@ tmp141, p_addr
 326:src/flash_program.c **** 	{
 890              		.loc 1 326 0 discriminator 3
 891 0044 1623     		movs	r3, #22	@ tmp143,
 892 0046 6B44     		add	r3, r3, sp	@ tmp143,
 893 0048 1A88     		ldrh	r2, [r3]	@ D.5034, i
 894 004a 1623     		movs	r3, #22	@ tmp144,
 895 004c 6B44     		add	r3, r3, sp	@ tmp144,
 896 004e 0132     		adds	r2, r2, #1	@ tmp145,
 897 0050 1A80     		strh	r2, [r3]	@ tmp146, i
 898              	.L60:
 326:src/flash_program.c **** 	{
 899              		.loc 1 326 0 is_stmt 0 discriminator 1
 900 0052 6B46     		mov	r3, sp	@ tmp177,
 901 0054 0633     		adds	r3, r3, #6	@ tmp147,
 902 0056 1B78     		ldrb	r3, [r3]	@ tmp149, len_in_4
 903 0058 9BB2     		uxth	r3, r3	@ D.5034, tmp148
 904 005a 1622     		movs	r2, #22	@ tmp150,
 905 005c 6A44     		add	r2, r2, sp	@ tmp150,
 906 005e 1288     		ldrh	r2, [r2]	@ tmp151, i
 907 0060 9A42     		cmp	r2, r3	@ tmp151, D.5034
 908 0062 E0D3     		bcc	.L61	@,
 330:src/flash_program.c **** 	}
 331:src/flash_program.c **** 
 332:src/flash_program.c **** 	if (with_lock)
 909              		.loc 1 332 0 is_stmt 1
 910 0064 6B46     		mov	r3, sp	@ tmp179,
 911 0066 0733     		adds	r3, r3, #7	@ tmp152,
 912 0068 1B78     		ldrb	r3, [r3]	@ tmp153, with_lock
ARM GAS  /tmp/ccfi8svf.s 			page 23


 913 006a 002B     		cmp	r3, #0	@ tmp153,
 914 006c 01D0     		beq	.L62	@,
 333:src/flash_program.c **** 		FLASH_Lock();
 915              		.loc 1 333 0
 916 006e FFF7FEFF 		bl	FLASH_Lock	@
 917              	.L62:
 334:src/flash_program.c **** 
 335:src/flash_program.c **** 	//verifico memoria
 336:src/flash_program.c **** 	for (i = 0; i < len_in_4; i++)
 918              		.loc 1 336 0
 919 0072 1623     		movs	r3, #22	@ tmp154,
 920 0074 6B44     		add	r3, r3, sp	@ tmp154,
 921 0076 0022     		movs	r2, #0	@ tmp155,
 922 0078 1A80     		strh	r2, [r3]	@ tmp156, i
 923 007a 18E0     		b	.L63	@
 924              	.L66:
 337:src/flash_program.c **** 	{
 338:src/flash_program.c **** 		if (*(p_verif + i) != *(p + i))
 925              		.loc 1 338 0
 926 007c 1623     		movs	r3, #22	@ tmp157,
 927 007e 6B44     		add	r3, r3, sp	@ tmp157,
 928 0080 1B88     		ldrh	r3, [r3]	@ D.5035, i
 929 0082 9B00     		lsls	r3, r3, #2	@ D.5035, D.5035,
 930 0084 049A     		ldr	r2, [sp, #16]	@ tmp158, p_verif
 931 0086 D318     		adds	r3, r2, r3	@ D.5036, tmp158, D.5035
 932 0088 1A68     		ldr	r2, [r3]	@ D.5035, *_28
 933 008a 1623     		movs	r3, #22	@ tmp159,
 934 008c 6B44     		add	r3, r3, sp	@ tmp159,
 935 008e 1B88     		ldrh	r3, [r3]	@ D.5035, i
 936 0090 9B00     		lsls	r3, r3, #2	@ D.5035, D.5035,
 937 0092 0399     		ldr	r1, [sp, #12]	@ tmp160, p
 938 0094 CB18     		adds	r3, r1, r3	@ D.5036, tmp160, D.5035
 939 0096 1B68     		ldr	r3, [r3]	@ D.5035, *_32
 940 0098 9A42     		cmp	r2, r3	@ D.5035, D.5035
 941 009a 01D0     		beq	.L64	@,
 339:src/flash_program.c **** 			return FAILED;
 942              		.loc 1 339 0
 943 009c 0023     		movs	r3, #0	@ D.5033,
 944 009e 10E0     		b	.L65	@
 945              	.L64:
 336:src/flash_program.c **** 	{
 946              		.loc 1 336 0 discriminator 2
 947 00a0 1623     		movs	r3, #22	@ tmp161,
 948 00a2 6B44     		add	r3, r3, sp	@ tmp161,
 949 00a4 1A88     		ldrh	r2, [r3]	@ D.5034, i
 950 00a6 1623     		movs	r3, #22	@ tmp162,
 951 00a8 6B44     		add	r3, r3, sp	@ tmp162,
 952 00aa 0132     		adds	r2, r2, #1	@ tmp163,
 953 00ac 1A80     		strh	r2, [r3]	@ tmp164, i
 954              	.L63:
 336:src/flash_program.c **** 	{
 955              		.loc 1 336 0 is_stmt 0 discriminator 1
 956 00ae 6B46     		mov	r3, sp	@ tmp185,
 957 00b0 0633     		adds	r3, r3, #6	@ tmp165,
 958 00b2 1B78     		ldrb	r3, [r3]	@ tmp167, len_in_4
 959 00b4 9BB2     		uxth	r3, r3	@ D.5034, tmp166
 960 00b6 1622     		movs	r2, #22	@ tmp168,
ARM GAS  /tmp/ccfi8svf.s 			page 24


 961 00b8 6A44     		add	r2, r2, sp	@ tmp168,
 962 00ba 1288     		ldrh	r2, [r2]	@ tmp169, i
 963 00bc 9A42     		cmp	r2, r3	@ tmp169, D.5034
 964 00be DDD3     		bcc	.L66	@,
 340:src/flash_program.c **** 	}
 341:src/flash_program.c **** 	return PASSED;
 965              		.loc 1 341 0 is_stmt 1
 966 00c0 0123     		movs	r3, #1	@ D.5033,
 967              	.L65:
 342:src/flash_program.c **** }
 968              		.loc 1 342 0
 969 00c2 1800     		movs	r0, r3	@, <retval>
 970 00c4 07B0     		add	sp, sp, #28	@,,
 971              		@ sp needed	@
 972 00c6 00BD     		pop	{pc}
 973              		.cfi_endproc
 974              	.LFE31:
 975              		.size	WriteFlash, .-WriteFlash
 976              		.section	.text.GetFlashConf,"ax",%progbits
 977              		.align	2
 978              		.global	GetFlashConf
 979              		.code	16
 980              		.thumb_func
 981              		.type	GetFlashConf, %function
 982              	GetFlashConf:
 983              	.LFB32:
 343:src/flash_program.c **** 
 344:src/flash_program.c **** void GetFlashConf (parameters_typedef * p_ram)
 345:src/flash_program.c **** {
 984              		.loc 1 345 0
 985              		.cfi_startproc
 986 0000 00B5     		push	{lr}	@
 987              	.LCFI18:
 988              		.cfi_def_cfa_offset 4
 989              		.cfi_offset 14, -4
 990 0002 83B0     		sub	sp, sp, #12	@,,
 991              	.LCFI19:
 992              		.cfi_def_cfa_offset 16
 993 0004 0190     		str	r0, [sp, #4]	@ p_ram, p_ram
 346:src/flash_program.c **** 	//memoria no vacia
 347:src/flash_program.c **** 	strncpy( p_ram->num_reportar,
 994              		.loc 1 347 0
 995 0006 019B     		ldr	r3, [sp, #4]	@ D.5037, p_ram
 996 0008 0B49     		ldr	r1, .L68	@ tmp117,
 997 000a 1822     		movs	r2, #24	@,
 998 000c 1800     		movs	r0, r3	@, D.5037
 999 000e FFF7FEFF 		bl	strncpy	@
 348:src/flash_program.c **** 				((parameters_typedef *) (char *) PAGE63)->num_reportar,
 349:src/flash_program.c **** 				sizeof(param_struct.num_reportar));
 350:src/flash_program.c **** 
 351:src/flash_program.c **** 	p_ram->acumm_w2s = ((parameters_typedef *) (unsigned int *) PAGE63)->acumm_w2s;
 1000              		.loc 1 351 0
 1001 0012 094B     		ldr	r3, .L68	@ D.5038,
 1002 0014 DA6C     		ldr	r2, [r3, #76]	@ D.5039, _5->acumm_w2s
 1003 0016 019B     		ldr	r3, [sp, #4]	@ tmp118, p_ram
 1004 0018 DA64     		str	r2, [r3, #76]	@ D.5039, p_ram_1(D)->acumm_w2s
 352:src/flash_program.c **** 	p_ram->acumm_w2s_index = ((parameters_typedef *) (unsigned short *) PAGE63)->acumm_w2s_index;
ARM GAS  /tmp/ccfi8svf.s 			page 25


 1005              		.loc 1 352 0
 1006 001a 074A     		ldr	r2, .L68	@ D.5038,
 1007 001c 5023     		movs	r3, #80	@ tmp119,
 1008 001e D15A     		ldrh	r1, [r2, r3]	@ D.5040,
 1009 0020 019B     		ldr	r3, [sp, #4]	@ tmp120, p_ram
 1010 0022 5022     		movs	r2, #80	@ tmp121,
 1011 0024 9952     		strh	r1, [r3, r2]	@ tmp122, p_ram_1(D)->acumm_w2s_index
 353:src/flash_program.c **** 	p_ram->timer_reportar = ((parameters_typedef *) (unsigned char *) PAGE63)->timer_reportar;
 1012              		.loc 1 353 0
 1013 0026 044A     		ldr	r2, .L68	@ D.5038,
 1014 0028 5223     		movs	r3, #82	@ tmp123,
 1015 002a D15C     		ldrb	r1, [r2, r3]	@ D.5041,
 1016 002c 019B     		ldr	r3, [sp, #4]	@ tmp124, p_ram
 1017 002e 5222     		movs	r2, #82	@ tmp125,
 1018 0030 9954     		strb	r1, [r3, r2]	@ tmp126, p_ram_1(D)->timer_reportar
 354:src/flash_program.c **** 
 355:src/flash_program.c **** }
 1019              		.loc 1 355 0
 1020 0032 C046     		nop
 1021 0034 03B0     		add	sp, sp, #12	@,,
 1022              		@ sp needed	@
 1023 0036 00BD     		pop	{pc}
 1024              	.L69:
 1025              		.align	2
 1026              	.L68:
 1027 0038 00FC0008 		.word	134282240
 1028              		.cfi_endproc
 1029              	.LFE32:
 1030              		.size	GetFlashConf, .-GetFlashConf
 1031              		.text
 1032              	.Letext0:
 1033              		.file 2 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1034              		.file 3 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1035              		.file 4 "./cmsis_boot/stm32f0xx.h"
 1036              		.file 5 "src/flash_program.h"
 1037              		.file 6 "<built-in>"
 1038              		.section	.debug_info,"",%progbits
 1039              	.Ldebug_info0:
 1040 0000 8E050000 		.4byte	0x58e
 1041 0004 0200     		.2byte	0x2
 1042 0006 00000000 		.4byte	.Ldebug_abbrev0
 1043 000a 04       		.byte	0x4
 1044 000b 01       		.uleb128 0x1
 1045 000c 6D010000 		.4byte	.LASF65
 1046 0010 0C       		.byte	0xc
 1047 0011 4A010000 		.4byte	.LASF66
 1048 0015 46030000 		.4byte	.LASF67
 1049 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1050 001d 00000000 		.4byte	0
 1051 0021 00000000 		.4byte	0
 1052 0025 00000000 		.4byte	.Ldebug_line0
 1053 0029 02       		.uleb128 0x2
 1054 002a 01       		.byte	0x1
 1055 002b 06       		.byte	0x6
 1056 002c 22020000 		.4byte	.LASF0
 1057 0030 02       		.uleb128 0x2
 1058 0031 01       		.byte	0x1
ARM GAS  /tmp/ccfi8svf.s 			page 26


 1059 0032 08       		.byte	0x8
 1060 0033 2F010000 		.4byte	.LASF1
 1061 0037 02       		.uleb128 0x2
 1062 0038 02       		.byte	0x2
 1063 0039 05       		.byte	0x5
 1064 003a DB000000 		.4byte	.LASF2
 1065 003e 03       		.uleb128 0x3
 1066 003f 7F000000 		.4byte	.LASF5
 1067 0043 02       		.byte	0x2
 1068 0044 2B       		.byte	0x2b
 1069 0045 49000000 		.4byte	0x49
 1070 0049 02       		.uleb128 0x2
 1071 004a 02       		.byte	0x2
 1072 004b 07       		.byte	0x7
 1073 004c 0B030000 		.4byte	.LASF3
 1074 0050 02       		.uleb128 0x2
 1075 0051 04       		.byte	0x4
 1076 0052 05       		.byte	0x5
 1077 0053 08010000 		.4byte	.LASF4
 1078 0057 03       		.uleb128 0x3
 1079 0058 60000000 		.4byte	.LASF6
 1080 005c 02       		.byte	0x2
 1081 005d 41       		.byte	0x41
 1082 005e 62000000 		.4byte	0x62
 1083 0062 02       		.uleb128 0x2
 1084 0063 04       		.byte	0x4
 1085 0064 07       		.byte	0x7
 1086 0065 28030000 		.4byte	.LASF7
 1087 0069 02       		.uleb128 0x2
 1088 006a 08       		.byte	0x8
 1089 006b 05       		.byte	0x5
 1090 006c FA000000 		.4byte	.LASF8
 1091 0070 02       		.uleb128 0x2
 1092 0071 08       		.byte	0x8
 1093 0072 07       		.byte	0x7
 1094 0073 2E020000 		.4byte	.LASF9
 1095 0077 04       		.uleb128 0x4
 1096 0078 04       		.byte	0x4
 1097 0079 05       		.byte	0x5
 1098 007a 696E7400 		.ascii	"int\000"
 1099 007e 02       		.uleb128 0x2
 1100 007f 04       		.byte	0x4
 1101 0080 07       		.byte	0x7
 1102 0081 4E020000 		.4byte	.LASF10
 1103 0085 03       		.uleb128 0x3
 1104 0086 A8020000 		.4byte	.LASF11
 1105 008a 03       		.byte	0x3
 1106 008b 1A       		.byte	0x1a
 1107 008c 3E000000 		.4byte	0x3e
 1108 0090 03       		.uleb128 0x3
 1109 0091 45020000 		.4byte	.LASF12
 1110 0095 03       		.byte	0x3
 1111 0096 20       		.byte	0x20
 1112 0097 57000000 		.4byte	0x57
 1113 009b 02       		.uleb128 0x2
 1114 009c 04       		.byte	0x4
 1115 009d 07       		.byte	0x7
ARM GAS  /tmp/ccfi8svf.s 			page 27


 1116 009e 44000000 		.4byte	.LASF13
 1117 00a2 05       		.uleb128 0x5
 1118 00a3 90000000 		.4byte	0x90
 1119 00a7 06       		.uleb128 0x6
 1120 00a8 01       		.byte	0x1
 1121 00a9 30000000 		.4byte	0x30
 1122 00ad 04       		.byte	0x4
 1123 00ae 6D01     		.2byte	0x16d
 1124 00b0 C1000000 		.4byte	0xc1
 1125 00b4 07       		.uleb128 0x7
 1126 00b5 8F030000 		.4byte	.LASF14
 1127 00b9 00       		.byte	0
 1128 00ba 08       		.uleb128 0x8
 1129 00bb 53455400 		.ascii	"SET\000"
 1130 00bf 01       		.byte	0x1
 1131 00c0 00       		.byte	0
 1132 00c1 09       		.uleb128 0x9
 1133 00c2 24       		.byte	0x24
 1134 00c3 04       		.byte	0x4
 1135 00c4 4702     		.2byte	0x247
 1136 00c6 4F010000 		.4byte	0x14f
 1137 00ca 0A       		.uleb128 0xa
 1138 00cb 41435200 		.ascii	"ACR\000"
 1139 00cf 04       		.byte	0x4
 1140 00d0 4902     		.2byte	0x249
 1141 00d2 A2000000 		.4byte	0xa2
 1142 00d6 02       		.byte	0x2
 1143 00d7 23       		.byte	0x23
 1144 00d8 00       		.uleb128 0
 1145 00d9 0B       		.uleb128 0xb
 1146 00da 9F000000 		.4byte	.LASF15
 1147 00de 04       		.byte	0x4
 1148 00df 4A02     		.2byte	0x24a
 1149 00e1 A2000000 		.4byte	0xa2
 1150 00e5 02       		.byte	0x2
 1151 00e6 23       		.byte	0x23
 1152 00e7 04       		.uleb128 0x4
 1153 00e8 0B       		.uleb128 0xb
 1154 00e9 F2000000 		.4byte	.LASF16
 1155 00ed 04       		.byte	0x4
 1156 00ee 4B02     		.2byte	0x24b
 1157 00f0 A2000000 		.4byte	0xa2
 1158 00f4 02       		.byte	0x2
 1159 00f5 23       		.byte	0x23
 1160 00f6 08       		.uleb128 0x8
 1161 00f7 0A       		.uleb128 0xa
 1162 00f8 535200   		.ascii	"SR\000"
 1163 00fb 04       		.byte	0x4
 1164 00fc 4C02     		.2byte	0x24c
 1165 00fe A2000000 		.4byte	0xa2
 1166 0102 02       		.byte	0x2
 1167 0103 23       		.byte	0x23
 1168 0104 0C       		.uleb128 0xc
 1169 0105 0A       		.uleb128 0xa
 1170 0106 435200   		.ascii	"CR\000"
 1171 0109 04       		.byte	0x4
 1172 010a 4D02     		.2byte	0x24d
ARM GAS  /tmp/ccfi8svf.s 			page 28


 1173 010c A2000000 		.4byte	0xa2
 1174 0110 02       		.byte	0x2
 1175 0111 23       		.byte	0x23
 1176 0112 10       		.uleb128 0x10
 1177 0113 0A       		.uleb128 0xa
 1178 0114 415200   		.ascii	"AR\000"
 1179 0117 04       		.byte	0x4
 1180 0118 4E02     		.2byte	0x24e
 1181 011a A2000000 		.4byte	0xa2
 1182 011e 02       		.byte	0x2
 1183 011f 23       		.byte	0x23
 1184 0120 14       		.uleb128 0x14
 1185 0121 0B       		.uleb128 0xb
 1186 0122 BB030000 		.4byte	.LASF17
 1187 0126 04       		.byte	0x4
 1188 0127 4F02     		.2byte	0x24f
 1189 0129 A2000000 		.4byte	0xa2
 1190 012d 02       		.byte	0x2
 1191 012e 23       		.byte	0x23
 1192 012f 18       		.uleb128 0x18
 1193 0130 0A       		.uleb128 0xa
 1194 0131 4F425200 		.ascii	"OBR\000"
 1195 0135 04       		.byte	0x4
 1196 0136 5002     		.2byte	0x250
 1197 0138 A2000000 		.4byte	0xa2
 1198 013c 02       		.byte	0x2
 1199 013d 23       		.byte	0x23
 1200 013e 1C       		.uleb128 0x1c
 1201 013f 0B       		.uleb128 0xb
 1202 0140 11010000 		.4byte	.LASF18
 1203 0144 04       		.byte	0x4
 1204 0145 5102     		.2byte	0x251
 1205 0147 A2000000 		.4byte	0xa2
 1206 014b 02       		.byte	0x2
 1207 014c 23       		.byte	0x23
 1208 014d 20       		.uleb128 0x20
 1209 014e 00       		.byte	0
 1210 014f 0C       		.uleb128 0xc
 1211 0150 C4030000 		.4byte	.LASF19
 1212 0154 04       		.byte	0x4
 1213 0155 5202     		.2byte	0x252
 1214 0157 C1000000 		.4byte	0xc1
 1215 015b 0D       		.uleb128 0xd
 1216 015c 01       		.byte	0x1
 1217 015d 30000000 		.4byte	0x30
 1218 0161 05       		.byte	0x5
 1219 0162 24       		.byte	0x24
 1220 0163 86010000 		.4byte	0x186
 1221 0167 07       		.uleb128 0x7
 1222 0168 6A020000 		.4byte	.LASF20
 1223 016c 01       		.byte	0x1
 1224 016d 07       		.uleb128 0x7
 1225 016e 29000000 		.4byte	.LASF21
 1226 0172 02       		.byte	0x2
 1227 0173 07       		.uleb128 0x7
 1228 0174 95030000 		.4byte	.LASF22
 1229 0178 03       		.byte	0x3
ARM GAS  /tmp/ccfi8svf.s 			page 29


 1230 0179 07       		.uleb128 0x7
 1231 017a 5B020000 		.4byte	.LASF23
 1232 017e 04       		.byte	0x4
 1233 017f 07       		.uleb128 0x7
 1234 0180 75020000 		.4byte	.LASF24
 1235 0184 05       		.byte	0x5
 1236 0185 00       		.byte	0
 1237 0186 03       		.uleb128 0x3
 1238 0187 BE000000 		.4byte	.LASF25
 1239 018b 05       		.byte	0x5
 1240 018c 2A       		.byte	0x2a
 1241 018d 5B010000 		.4byte	0x15b
 1242 0191 0E       		.uleb128 0xe
 1243 0192 1B010000 		.4byte	.LASF68
 1244 0196 54       		.byte	0x54
 1245 0197 05       		.byte	0x5
 1246 0198 40       		.byte	0x40
 1247 0199 0E020000 		.4byte	0x20e
 1248 019d 0F       		.uleb128 0xf
 1249 019e B1000000 		.4byte	.LASF26
 1250 01a2 05       		.byte	0x5
 1251 01a3 42       		.byte	0x42
 1252 01a4 0E020000 		.4byte	0x20e
 1253 01a8 02       		.byte	0x2
 1254 01a9 23       		.byte	0x23
 1255 01aa 00       		.uleb128 0
 1256 01ab 0F       		.uleb128 0xf
 1257 01ac B1020000 		.4byte	.LASF27
 1258 01b0 05       		.byte	0x5
 1259 01b1 43       		.byte	0x43
 1260 01b2 0E020000 		.4byte	0x20e
 1261 01b6 02       		.byte	0x2
 1262 01b7 23       		.byte	0x23
 1263 01b8 18       		.uleb128 0x18
 1264 01b9 0F       		.uleb128 0xf
 1265 01ba 39000000 		.4byte	.LASF28
 1266 01be 05       		.byte	0x5
 1267 01bf 44       		.byte	0x44
 1268 01c0 0E020000 		.4byte	0x20e
 1269 01c4 02       		.byte	0x2
 1270 01c5 23       		.byte	0x23
 1271 01c6 30       		.uleb128 0x30
 1272 01c7 0F       		.uleb128 0xf
 1273 01c8 26010000 		.4byte	.LASF29
 1274 01cc 05       		.byte	0x5
 1275 01cd 46       		.byte	0x46
 1276 01ce 7E000000 		.4byte	0x7e
 1277 01d2 02       		.byte	0x2
 1278 01d3 23       		.byte	0x23
 1279 01d4 48       		.uleb128 0x48
 1280 01d5 0F       		.uleb128 0xf
 1281 01d6 1E030000 		.4byte	.LASF30
 1282 01da 05       		.byte	0x5
 1283 01db 47       		.byte	0x47
 1284 01dc 7E000000 		.4byte	0x7e
 1285 01e0 02       		.byte	0x2
 1286 01e1 23       		.byte	0x23
ARM GAS  /tmp/ccfi8svf.s 			page 30


 1287 01e2 4C       		.uleb128 0x4c
 1288 01e3 0F       		.uleb128 0xf
 1289 01e4 13000000 		.4byte	.LASF31
 1290 01e8 05       		.byte	0x5
 1291 01e9 48       		.byte	0x48
 1292 01ea 49000000 		.4byte	0x49
 1293 01ee 02       		.byte	0x2
 1294 01ef 23       		.byte	0x23
 1295 01f0 50       		.uleb128 0x50
 1296 01f1 0F       		.uleb128 0xf
 1297 01f2 5E010000 		.4byte	.LASF32
 1298 01f6 05       		.byte	0x5
 1299 01f7 4A       		.byte	0x4a
 1300 01f8 30000000 		.4byte	0x30
 1301 01fc 02       		.byte	0x2
 1302 01fd 23       		.byte	0x23
 1303 01fe 52       		.uleb128 0x52
 1304 01ff 0F       		.uleb128 0xf
 1305 0200 7B030000 		.4byte	.LASF33
 1306 0204 05       		.byte	0x5
 1307 0205 4D       		.byte	0x4d
 1308 0206 30000000 		.4byte	0x30
 1309 020a 02       		.byte	0x2
 1310 020b 23       		.byte	0x23
 1311 020c 53       		.uleb128 0x53
 1312 020d 00       		.byte	0
 1313 020e 10       		.uleb128 0x10
 1314 020f 1E020000 		.4byte	0x21e
 1315 0213 1E020000 		.4byte	0x21e
 1316 0217 11       		.uleb128 0x11
 1317 0218 9B000000 		.4byte	0x9b
 1318 021c 17       		.byte	0x17
 1319 021d 00       		.byte	0
 1320 021e 02       		.uleb128 0x2
 1321 021f 01       		.byte	0x1
 1322 0220 08       		.byte	0x8
 1323 0221 A3020000 		.4byte	.LASF34
 1324 0225 03       		.uleb128 0x3
 1325 0226 4D000000 		.4byte	.LASF35
 1326 022a 05       		.byte	0x5
 1327 022b 51       		.byte	0x51
 1328 022c 91010000 		.4byte	0x191
 1329 0230 0D       		.uleb128 0xd
 1330 0231 01       		.byte	0x1
 1331 0232 30000000 		.4byte	0x30
 1332 0236 05       		.byte	0x5
 1333 0237 54       		.byte	0x54
 1334 0238 49020000 		.4byte	0x249
 1335 023c 07       		.uleb128 0x7
 1336 023d FF030000 		.4byte	.LASF36
 1337 0241 00       		.byte	0
 1338 0242 07       		.uleb128 0x7
 1339 0243 6B000000 		.4byte	.LASF37
 1340 0247 01       		.byte	0x1
 1341 0248 00       		.byte	0
 1342 0249 12       		.uleb128 0x12
 1343 024a 01       		.byte	0x1
ARM GAS  /tmp/ccfi8svf.s 			page 31


 1344 024b C1020000 		.4byte	.LASF44
 1345 024f 01       		.byte	0x1
 1346 0250 34       		.byte	0x34
 1347 0251 01       		.byte	0x1
 1348 0252 30000000 		.4byte	0x30
 1349 0256 00000000 		.4byte	.LFB20
 1350 025a 48000000 		.4byte	.LFE20
 1351 025e 00000000 		.4byte	.LLST0
 1352 0262 01       		.byte	0x1
 1353 0263 76020000 		.4byte	0x276
 1354 0267 13       		.uleb128 0x13
 1355 0268 7A000000 		.4byte	.LASF39
 1356 026c 01       		.byte	0x1
 1357 026d 36       		.byte	0x36
 1358 026e 30000000 		.4byte	0x30
 1359 0272 02       		.byte	0x2
 1360 0273 91       		.byte	0x91
 1361 0274 77       		.sleb128 -9
 1362 0275 00       		.byte	0
 1363 0276 14       		.uleb128 0x14
 1364 0277 01       		.byte	0x1
 1365 0278 8A000000 		.4byte	.LASF40
 1366 027c 01       		.byte	0x1
 1367 027d 52       		.byte	0x52
 1368 027e 01       		.byte	0x1
 1369 027f 00000000 		.4byte	.LFB21
 1370 0283 4A000000 		.4byte	.LFE21
 1371 0287 2C000000 		.4byte	.LLST1
 1372 028b 01       		.byte	0x1
 1373 028c B7020000 		.4byte	0x2b7
 1374 0290 15       		.uleb128 0x15
 1375 0291 7000     		.ascii	"p\000"
 1376 0293 01       		.byte	0x1
 1377 0294 52       		.byte	0x52
 1378 0295 B7020000 		.4byte	0x2b7
 1379 0299 02       		.byte	0x2
 1380 029a 91       		.byte	0x91
 1381 029b 74       		.sleb128 -12
 1382 029c 16       		.uleb128 0x16
 1383 029d 95000000 		.4byte	.LASF38
 1384 02a1 01       		.byte	0x1
 1385 02a2 52       		.byte	0x52
 1386 02a3 B7020000 		.4byte	0x2b7
 1387 02a7 02       		.byte	0x2
 1388 02a8 91       		.byte	0x91
 1389 02a9 70       		.sleb128 -16
 1390 02aa 17       		.uleb128 0x17
 1391 02ab 6900     		.ascii	"i\000"
 1392 02ad 01       		.byte	0x1
 1393 02ae 54       		.byte	0x54
 1394 02af 49000000 		.4byte	0x49
 1395 02b3 02       		.byte	0x2
 1396 02b4 91       		.byte	0x91
 1397 02b5 7E       		.sleb128 -2
 1398 02b6 00       		.byte	0
 1399 02b7 18       		.uleb128 0x18
 1400 02b8 04       		.byte	0x4
ARM GAS  /tmp/ccfi8svf.s 			page 32


 1401 02b9 7E000000 		.4byte	0x7e
 1402 02bd 19       		.uleb128 0x19
 1403 02be 01       		.byte	0x1
 1404 02bf F5030000 		.4byte	.LASF41
 1405 02c3 01       		.byte	0x1
 1406 02c4 5C       		.byte	0x5c
 1407 02c5 01       		.byte	0x1
 1408 02c6 00000000 		.4byte	.LFB22
 1409 02ca 2E000000 		.4byte	.LFE22
 1410 02ce 4C000000 		.4byte	.LLST2
 1411 02d2 01       		.byte	0x1
 1412 02d3 F4020000 		.4byte	0x2f4
 1413 02d7 16       		.uleb128 0x16
 1414 02d8 83020000 		.4byte	.LASF42
 1415 02dc 01       		.byte	0x1
 1416 02dd 5C       		.byte	0x5c
 1417 02de 90000000 		.4byte	0x90
 1418 02e2 02       		.byte	0x2
 1419 02e3 91       		.byte	0x91
 1420 02e4 74       		.sleb128 -12
 1421 02e5 16       		.uleb128 0x16
 1422 02e6 18020000 		.4byte	.LASF43
 1423 02ea 01       		.byte	0x1
 1424 02eb 5C       		.byte	0x5c
 1425 02ec 30000000 		.4byte	0x30
 1426 02f0 02       		.byte	0x2
 1427 02f1 91       		.byte	0x91
 1428 02f2 73       		.sleb128 -13
 1429 02f3 00       		.byte	0
 1430 02f4 1A       		.uleb128 0x1a
 1431 02f5 01       		.byte	0x1
 1432 02f6 A4000000 		.4byte	.LASF48
 1433 02fa 01       		.byte	0x1
 1434 02fb 69       		.byte	0x69
 1435 02fc 01       		.byte	0x1
 1436 02fd 00000000 		.4byte	.LFB23
 1437 0301 28000000 		.4byte	.LFE23
 1438 0305 02       		.byte	0x2
 1439 0306 7D       		.byte	0x7d
 1440 0307 00       		.sleb128 0
 1441 0308 01       		.byte	0x1
 1442 0309 12       		.uleb128 0x12
 1443 030a 01       		.byte	0x1
 1444 030b CB000000 		.4byte	.LASF45
 1445 030f 01       		.byte	0x1
 1446 0310 7E       		.byte	0x7e
 1447 0311 01       		.byte	0x1
 1448 0312 86010000 		.4byte	0x186
 1449 0316 00000000 		.4byte	.LFB24
 1450 031a 78000000 		.4byte	.LFE24
 1451 031e 78000000 		.4byte	.LLST3
 1452 0322 01       		.byte	0x1
 1453 0323 44030000 		.4byte	0x344
 1454 0327 16       		.uleb128 0x16
 1455 0328 3D010000 		.4byte	.LASF46
 1456 032c 01       		.byte	0x1
 1457 032d 7E       		.byte	0x7e
ARM GAS  /tmp/ccfi8svf.s 			page 33


 1458 032e 90000000 		.4byte	0x90
 1459 0332 02       		.byte	0x2
 1460 0333 91       		.byte	0x91
 1461 0334 6C       		.sleb128 -20
 1462 0335 13       		.uleb128 0x13
 1463 0336 8A020000 		.4byte	.LASF47
 1464 033a 01       		.byte	0x1
 1465 033b 80       		.byte	0x80
 1466 033c 86010000 		.4byte	0x186
 1467 0340 02       		.byte	0x2
 1468 0341 91       		.byte	0x91
 1469 0342 77       		.sleb128 -9
 1470 0343 00       		.byte	0
 1471 0344 1A       		.uleb128 0x1a
 1472 0345 01       		.byte	0x1
 1473 0346 B6020000 		.4byte	.LASF49
 1474 034a 01       		.byte	0x1
 1475 034b 9C       		.byte	0x9c
 1476 034c 01       		.byte	0x1
 1477 034d 00000000 		.4byte	.LFB25
 1478 0351 14000000 		.4byte	.LFE25
 1479 0355 02       		.byte	0x2
 1480 0356 7D       		.byte	0x7d
 1481 0357 00       		.sleb128 0
 1482 0358 01       		.byte	0x1
 1483 0359 12       		.uleb128 0x12
 1484 035a 01       		.byte	0x1
 1485 035b A9030000 		.4byte	.LASF50
 1486 035f 01       		.byte	0x1
 1487 0360 AC       		.byte	0xac
 1488 0361 01       		.byte	0x1
 1489 0362 86010000 		.4byte	0x186
 1490 0366 00000000 		.4byte	.LFB26
 1491 036a B0000000 		.4byte	.LFE26
 1492 036e A4000000 		.4byte	.LLST4
 1493 0372 01       		.byte	0x1
 1494 0373 B0030000 		.4byte	0x3b0
 1495 0377 16       		.uleb128 0x16
 1496 0378 72000000 		.4byte	.LASF51
 1497 037c 01       		.byte	0x1
 1498 037d AC       		.byte	0xac
 1499 037e 90000000 		.4byte	0x90
 1500 0382 02       		.byte	0x2
 1501 0383 91       		.byte	0x91
 1502 0384 6C       		.sleb128 -20
 1503 0385 16       		.uleb128 0x16
 1504 0386 16010000 		.4byte	.LASF52
 1505 038a 01       		.byte	0x1
 1506 038b AC       		.byte	0xac
 1507 038c 90000000 		.4byte	0x90
 1508 0390 02       		.byte	0x2
 1509 0391 91       		.byte	0x91
 1510 0392 68       		.sleb128 -24
 1511 0393 13       		.uleb128 0x13
 1512 0394 8A020000 		.4byte	.LASF47
 1513 0398 01       		.byte	0x1
 1514 0399 AE       		.byte	0xae
ARM GAS  /tmp/ccfi8svf.s 			page 34


 1515 039a 86010000 		.4byte	0x186
 1516 039e 02       		.byte	0x2
 1517 039f 91       		.byte	0x91
 1518 03a0 77       		.sleb128 -9
 1519 03a1 17       		.uleb128 0x17
 1520 03a2 746D7000 		.ascii	"tmp\000"
 1521 03a6 01       		.byte	0x1
 1522 03a7 AF       		.byte	0xaf
 1523 03a8 A2000000 		.4byte	0xa2
 1524 03ac 02       		.byte	0x2
 1525 03ad 91       		.byte	0x91
 1526 03ae 70       		.sleb128 -16
 1527 03af 00       		.byte	0
 1528 03b0 12       		.uleb128 0x12
 1529 03b1 01       		.byte	0x1
 1530 03b2 D2030000 		.4byte	.LASF53
 1531 03b6 01       		.byte	0x1
 1532 03b7 DE       		.byte	0xde
 1533 03b8 01       		.byte	0x1
 1534 03b9 86010000 		.4byte	0x186
 1535 03bd 00000000 		.4byte	.LFB27
 1536 03c1 58000000 		.4byte	.LFE27
 1537 03c5 D0000000 		.4byte	.LLST5
 1538 03c9 01       		.byte	0x1
 1539 03ca EB030000 		.4byte	0x3eb
 1540 03ce 16       		.uleb128 0x16
 1541 03cf 9B020000 		.4byte	.LASF54
 1542 03d3 01       		.byte	0x1
 1543 03d4 DE       		.byte	0xde
 1544 03d5 90000000 		.4byte	0x90
 1545 03d9 02       		.byte	0x2
 1546 03da 91       		.byte	0x91
 1547 03db 6C       		.sleb128 -20
 1548 03dc 13       		.uleb128 0x13
 1549 03dd 8A020000 		.4byte	.LASF47
 1550 03e1 01       		.byte	0x1
 1551 03e2 E0       		.byte	0xe0
 1552 03e3 86010000 		.4byte	0x186
 1553 03e7 02       		.byte	0x2
 1554 03e8 91       		.byte	0x91
 1555 03e9 77       		.sleb128 -9
 1556 03ea 00       		.byte	0
 1557 03eb 1B       		.uleb128 0x1b
 1558 03ec 01       		.byte	0x1
 1559 03ed EA020000 		.4byte	.LASF55
 1560 03f1 01       		.byte	0x1
 1561 03f2 FA       		.byte	0xfa
 1562 03f3 01       		.byte	0x1
 1563 03f4 86010000 		.4byte	0x186
 1564 03f8 00000000 		.4byte	.LFB28
 1565 03fc 60000000 		.4byte	.LFE28
 1566 0400 FC000000 		.4byte	.LLST6
 1567 0404 01       		.byte	0x1
 1568 0405 18040000 		.4byte	0x418
 1569 0409 13       		.uleb128 0x13
 1570 040a 3A030000 		.4byte	.LASF56
 1571 040e 01       		.byte	0x1
ARM GAS  /tmp/ccfi8svf.s 			page 35


 1572 040f FC       		.byte	0xfc
 1573 0410 86010000 		.4byte	0x186
 1574 0414 02       		.byte	0x2
 1575 0415 91       		.byte	0x91
 1576 0416 7F       		.sleb128 -1
 1577 0417 00       		.byte	0
 1578 0418 1C       		.uleb128 0x1c
 1579 0419 01       		.byte	0x1
 1580 041a 91020000 		.4byte	.LASF57
 1581 041e 01       		.byte	0x1
 1582 041f 1801     		.2byte	0x118
 1583 0421 01       		.byte	0x1
 1584 0422 30000000 		.4byte	0x30
 1585 0426 00000000 		.4byte	.LFB29
 1586 042a AE000000 		.4byte	.LFE29
 1587 042e 1C010000 		.4byte	.LLST7
 1588 0432 01       		.byte	0x1
 1589 0433 7F040000 		.4byte	0x47f
 1590 0437 1D       		.uleb128 0x1d
 1591 0438 7000     		.ascii	"p\000"
 1592 043a 01       		.byte	0x1
 1593 043b 1801     		.2byte	0x118
 1594 043d B7020000 		.4byte	0x2b7
 1595 0441 02       		.byte	0x2
 1596 0442 91       		.byte	0x91
 1597 0443 6C       		.sleb128 -20
 1598 0444 1E       		.uleb128 0x1e
 1599 0445 83020000 		.4byte	.LASF42
 1600 0449 01       		.byte	0x1
 1601 044a 1801     		.2byte	0x118
 1602 044c 90000000 		.4byte	0x90
 1603 0450 02       		.byte	0x2
 1604 0451 91       		.byte	0x91
 1605 0452 68       		.sleb128 -24
 1606 0453 1E       		.uleb128 0x1e
 1607 0454 18020000 		.4byte	.LASF43
 1608 0458 01       		.byte	0x1
 1609 0459 1801     		.2byte	0x118
 1610 045b 30000000 		.4byte	0x30
 1611 045f 02       		.byte	0x2
 1612 0460 91       		.byte	0x91
 1613 0461 67       		.sleb128 -25
 1614 0462 1F       		.uleb128 0x1f
 1615 0463 6900     		.ascii	"i\000"
 1616 0465 01       		.byte	0x1
 1617 0466 1A01     		.2byte	0x11a
 1618 0468 49000000 		.4byte	0x49
 1619 046c 02       		.byte	0x2
 1620 046d 91       		.byte	0x91
 1621 046e 76       		.sleb128 -10
 1622 046f 20       		.uleb128 0x20
 1623 0470 ED030000 		.4byte	.LASF58
 1624 0474 01       		.byte	0x1
 1625 0475 1B01     		.2byte	0x11b
 1626 0477 B7020000 		.4byte	0x2b7
 1627 047b 02       		.byte	0x2
 1628 047c 91       		.byte	0x91
ARM GAS  /tmp/ccfi8svf.s 			page 36


 1629 047d 70       		.sleb128 -16
 1630 047e 00       		.byte	0
 1631 047f 1C       		.uleb128 0x1c
 1632 0480 01       		.byte	0x1
 1633 0481 D6020000 		.4byte	.LASF59
 1634 0485 01       		.byte	0x1
 1635 0486 3201     		.2byte	0x132
 1636 0488 01       		.byte	0x1
 1637 0489 30000000 		.4byte	0x30
 1638 048d 00000000 		.4byte	.LFB30
 1639 0491 30000000 		.4byte	.LFE30
 1640 0495 48010000 		.4byte	.LLST8
 1641 0499 01       		.byte	0x1
 1642 049a AE040000 		.4byte	0x4ae
 1643 049e 1E       		.uleb128 0x1e
 1644 049f FA020000 		.4byte	.LASF60
 1645 04a3 01       		.byte	0x1
 1646 04a4 3201     		.2byte	0x132
 1647 04a6 AE040000 		.4byte	0x4ae
 1648 04aa 02       		.byte	0x2
 1649 04ab 91       		.byte	0x91
 1650 04ac 74       		.sleb128 -12
 1651 04ad 00       		.byte	0
 1652 04ae 18       		.uleb128 0x18
 1653 04af 04       		.byte	0x4
 1654 04b0 25020000 		.4byte	0x225
 1655 04b4 1C       		.uleb128 0x1c
 1656 04b5 01       		.byte	0x1
 1657 04b6 08000000 		.4byte	.LASF61
 1658 04ba 01       		.byte	0x1
 1659 04bb 3F01     		.2byte	0x13f
 1660 04bd 01       		.byte	0x1
 1661 04be 30000000 		.4byte	0x30
 1662 04c2 00000000 		.4byte	.LFB31
 1663 04c6 C8000000 		.4byte	.LFE31
 1664 04ca 74010000 		.4byte	.LLST9
 1665 04ce 01       		.byte	0x1
 1666 04cf 2A050000 		.4byte	0x52a
 1667 04d3 1D       		.uleb128 0x1d
 1668 04d4 7000     		.ascii	"p\000"
 1669 04d6 01       		.byte	0x1
 1670 04d7 3F01     		.2byte	0x13f
 1671 04d9 B7020000 		.4byte	0x2b7
 1672 04dd 02       		.byte	0x2
 1673 04de 91       		.byte	0x91
 1674 04df 6C       		.sleb128 -20
 1675 04e0 1E       		.uleb128 0x1e
 1676 04e1 83020000 		.4byte	.LASF42
 1677 04e5 01       		.byte	0x1
 1678 04e6 3F01     		.2byte	0x13f
 1679 04e8 90000000 		.4byte	0x90
 1680 04ec 02       		.byte	0x2
 1681 04ed 91       		.byte	0x91
 1682 04ee 68       		.sleb128 -24
 1683 04ef 1E       		.uleb128 0x1e
 1684 04f0 18020000 		.4byte	.LASF43
 1685 04f4 01       		.byte	0x1
ARM GAS  /tmp/ccfi8svf.s 			page 37


 1686 04f5 3F01     		.2byte	0x13f
 1687 04f7 30000000 		.4byte	0x30
 1688 04fb 02       		.byte	0x2
 1689 04fc 91       		.byte	0x91
 1690 04fd 67       		.sleb128 -25
 1691 04fe 1E       		.uleb128 0x1e
 1692 04ff 02030000 		.4byte	.LASF62
 1693 0503 01       		.byte	0x1
 1694 0504 3F01     		.2byte	0x13f
 1695 0506 30000000 		.4byte	0x30
 1696 050a 02       		.byte	0x2
 1697 050b 91       		.byte	0x91
 1698 050c 66       		.sleb128 -26
 1699 050d 1F       		.uleb128 0x1f
 1700 050e 6900     		.ascii	"i\000"
 1701 0510 01       		.byte	0x1
 1702 0511 4101     		.2byte	0x141
 1703 0513 49000000 		.4byte	0x49
 1704 0517 02       		.byte	0x2
 1705 0518 91       		.byte	0x91
 1706 0519 76       		.sleb128 -10
 1707 051a 20       		.uleb128 0x20
 1708 051b ED030000 		.4byte	.LASF58
 1709 051f 01       		.byte	0x1
 1710 0520 4201     		.2byte	0x142
 1711 0522 B7020000 		.4byte	0x2b7
 1712 0526 02       		.byte	0x2
 1713 0527 91       		.byte	0x91
 1714 0528 70       		.sleb128 -16
 1715 0529 00       		.byte	0
 1716 052a 21       		.uleb128 0x21
 1717 052b 01       		.byte	0x1
 1718 052c 82030000 		.4byte	.LASF63
 1719 0530 01       		.byte	0x1
 1720 0531 5801     		.2byte	0x158
 1721 0533 01       		.byte	0x1
 1722 0534 00000000 		.4byte	.LFB32
 1723 0538 3C000000 		.4byte	.LFE32
 1724 053c A0010000 		.4byte	.LLST10
 1725 0540 01       		.byte	0x1
 1726 0541 73050000 		.4byte	0x573
 1727 0545 1E       		.uleb128 0x1e
 1728 0546 23000000 		.4byte	.LASF64
 1729 054a 01       		.byte	0x1
 1730 054b 5801     		.2byte	0x158
 1731 054d AE040000 		.4byte	0x4ae
 1732 0551 02       		.byte	0x2
 1733 0552 91       		.byte	0x91
 1734 0553 74       		.sleb128 -12
 1735 0554 22       		.uleb128 0x22
 1736 0555 01       		.byte	0x1
 1737 0556 00000000 		.4byte	.LASF69
 1738 055a 06       		.byte	0x6
 1739 055b 00       		.byte	0
 1740 055c 01       		.byte	0x1
 1741 055d 73050000 		.4byte	0x573
 1742 0561 01       		.byte	0x1
ARM GAS  /tmp/ccfi8svf.s 			page 38


 1743 0562 23       		.uleb128 0x23
 1744 0563 73050000 		.4byte	0x573
 1745 0567 23       		.uleb128 0x23
 1746 0568 79050000 		.4byte	0x579
 1747 056c 23       		.uleb128 0x23
 1748 056d 7E000000 		.4byte	0x7e
 1749 0571 00       		.byte	0
 1750 0572 00       		.byte	0
 1751 0573 18       		.uleb128 0x18
 1752 0574 04       		.byte	0x4
 1753 0575 1E020000 		.4byte	0x21e
 1754 0579 18       		.uleb128 0x18
 1755 057a 04       		.byte	0x4
 1756 057b 7F050000 		.4byte	0x57f
 1757 057f 24       		.uleb128 0x24
 1758 0580 1E020000 		.4byte	0x21e
 1759 0584 25       		.uleb128 0x25
 1760 0585 E5000000 		.4byte	.LASF70
 1761 0589 01       		.byte	0x1
 1762 058a 18       		.byte	0x18
 1763 058b 25020000 		.4byte	0x225
 1764 058f 01       		.byte	0x1
 1765 0590 01       		.byte	0x1
 1766 0591 00       		.byte	0
 1767              		.section	.debug_abbrev,"",%progbits
 1768              	.Ldebug_abbrev0:
 1769 0000 01       		.uleb128 0x1
 1770 0001 11       		.uleb128 0x11
 1771 0002 01       		.byte	0x1
 1772 0003 25       		.uleb128 0x25
 1773 0004 0E       		.uleb128 0xe
 1774 0005 13       		.uleb128 0x13
 1775 0006 0B       		.uleb128 0xb
 1776 0007 03       		.uleb128 0x3
 1777 0008 0E       		.uleb128 0xe
 1778 0009 1B       		.uleb128 0x1b
 1779 000a 0E       		.uleb128 0xe
 1780 000b 55       		.uleb128 0x55
 1781 000c 06       		.uleb128 0x6
 1782 000d 11       		.uleb128 0x11
 1783 000e 01       		.uleb128 0x1
 1784 000f 52       		.uleb128 0x52
 1785 0010 01       		.uleb128 0x1
 1786 0011 10       		.uleb128 0x10
 1787 0012 06       		.uleb128 0x6
 1788 0013 00       		.byte	0
 1789 0014 00       		.byte	0
 1790 0015 02       		.uleb128 0x2
 1791 0016 24       		.uleb128 0x24
 1792 0017 00       		.byte	0
 1793 0018 0B       		.uleb128 0xb
 1794 0019 0B       		.uleb128 0xb
 1795 001a 3E       		.uleb128 0x3e
 1796 001b 0B       		.uleb128 0xb
 1797 001c 03       		.uleb128 0x3
 1798 001d 0E       		.uleb128 0xe
 1799 001e 00       		.byte	0
ARM GAS  /tmp/ccfi8svf.s 			page 39


 1800 001f 00       		.byte	0
 1801 0020 03       		.uleb128 0x3
 1802 0021 16       		.uleb128 0x16
 1803 0022 00       		.byte	0
 1804 0023 03       		.uleb128 0x3
 1805 0024 0E       		.uleb128 0xe
 1806 0025 3A       		.uleb128 0x3a
 1807 0026 0B       		.uleb128 0xb
 1808 0027 3B       		.uleb128 0x3b
 1809 0028 0B       		.uleb128 0xb
 1810 0029 49       		.uleb128 0x49
 1811 002a 13       		.uleb128 0x13
 1812 002b 00       		.byte	0
 1813 002c 00       		.byte	0
 1814 002d 04       		.uleb128 0x4
 1815 002e 24       		.uleb128 0x24
 1816 002f 00       		.byte	0
 1817 0030 0B       		.uleb128 0xb
 1818 0031 0B       		.uleb128 0xb
 1819 0032 3E       		.uleb128 0x3e
 1820 0033 0B       		.uleb128 0xb
 1821 0034 03       		.uleb128 0x3
 1822 0035 08       		.uleb128 0x8
 1823 0036 00       		.byte	0
 1824 0037 00       		.byte	0
 1825 0038 05       		.uleb128 0x5
 1826 0039 35       		.uleb128 0x35
 1827 003a 00       		.byte	0
 1828 003b 49       		.uleb128 0x49
 1829 003c 13       		.uleb128 0x13
 1830 003d 00       		.byte	0
 1831 003e 00       		.byte	0
 1832 003f 06       		.uleb128 0x6
 1833 0040 04       		.uleb128 0x4
 1834 0041 01       		.byte	0x1
 1835 0042 0B       		.uleb128 0xb
 1836 0043 0B       		.uleb128 0xb
 1837 0044 49       		.uleb128 0x49
 1838 0045 13       		.uleb128 0x13
 1839 0046 3A       		.uleb128 0x3a
 1840 0047 0B       		.uleb128 0xb
 1841 0048 3B       		.uleb128 0x3b
 1842 0049 05       		.uleb128 0x5
 1843 004a 01       		.uleb128 0x1
 1844 004b 13       		.uleb128 0x13
 1845 004c 00       		.byte	0
 1846 004d 00       		.byte	0
 1847 004e 07       		.uleb128 0x7
 1848 004f 28       		.uleb128 0x28
 1849 0050 00       		.byte	0
 1850 0051 03       		.uleb128 0x3
 1851 0052 0E       		.uleb128 0xe
 1852 0053 1C       		.uleb128 0x1c
 1853 0054 0B       		.uleb128 0xb
 1854 0055 00       		.byte	0
 1855 0056 00       		.byte	0
 1856 0057 08       		.uleb128 0x8
ARM GAS  /tmp/ccfi8svf.s 			page 40


 1857 0058 28       		.uleb128 0x28
 1858 0059 00       		.byte	0
 1859 005a 03       		.uleb128 0x3
 1860 005b 08       		.uleb128 0x8
 1861 005c 1C       		.uleb128 0x1c
 1862 005d 0B       		.uleb128 0xb
 1863 005e 00       		.byte	0
 1864 005f 00       		.byte	0
 1865 0060 09       		.uleb128 0x9
 1866 0061 13       		.uleb128 0x13
 1867 0062 01       		.byte	0x1
 1868 0063 0B       		.uleb128 0xb
 1869 0064 0B       		.uleb128 0xb
 1870 0065 3A       		.uleb128 0x3a
 1871 0066 0B       		.uleb128 0xb
 1872 0067 3B       		.uleb128 0x3b
 1873 0068 05       		.uleb128 0x5
 1874 0069 01       		.uleb128 0x1
 1875 006a 13       		.uleb128 0x13
 1876 006b 00       		.byte	0
 1877 006c 00       		.byte	0
 1878 006d 0A       		.uleb128 0xa
 1879 006e 0D       		.uleb128 0xd
 1880 006f 00       		.byte	0
 1881 0070 03       		.uleb128 0x3
 1882 0071 08       		.uleb128 0x8
 1883 0072 3A       		.uleb128 0x3a
 1884 0073 0B       		.uleb128 0xb
 1885 0074 3B       		.uleb128 0x3b
 1886 0075 05       		.uleb128 0x5
 1887 0076 49       		.uleb128 0x49
 1888 0077 13       		.uleb128 0x13
 1889 0078 38       		.uleb128 0x38
 1890 0079 0A       		.uleb128 0xa
 1891 007a 00       		.byte	0
 1892 007b 00       		.byte	0
 1893 007c 0B       		.uleb128 0xb
 1894 007d 0D       		.uleb128 0xd
 1895 007e 00       		.byte	0
 1896 007f 03       		.uleb128 0x3
 1897 0080 0E       		.uleb128 0xe
 1898 0081 3A       		.uleb128 0x3a
 1899 0082 0B       		.uleb128 0xb
 1900 0083 3B       		.uleb128 0x3b
 1901 0084 05       		.uleb128 0x5
 1902 0085 49       		.uleb128 0x49
 1903 0086 13       		.uleb128 0x13
 1904 0087 38       		.uleb128 0x38
 1905 0088 0A       		.uleb128 0xa
 1906 0089 00       		.byte	0
 1907 008a 00       		.byte	0
 1908 008b 0C       		.uleb128 0xc
 1909 008c 16       		.uleb128 0x16
 1910 008d 00       		.byte	0
 1911 008e 03       		.uleb128 0x3
 1912 008f 0E       		.uleb128 0xe
 1913 0090 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccfi8svf.s 			page 41


 1914 0091 0B       		.uleb128 0xb
 1915 0092 3B       		.uleb128 0x3b
 1916 0093 05       		.uleb128 0x5
 1917 0094 49       		.uleb128 0x49
 1918 0095 13       		.uleb128 0x13
 1919 0096 00       		.byte	0
 1920 0097 00       		.byte	0
 1921 0098 0D       		.uleb128 0xd
 1922 0099 04       		.uleb128 0x4
 1923 009a 01       		.byte	0x1
 1924 009b 0B       		.uleb128 0xb
 1925 009c 0B       		.uleb128 0xb
 1926 009d 49       		.uleb128 0x49
 1927 009e 13       		.uleb128 0x13
 1928 009f 3A       		.uleb128 0x3a
 1929 00a0 0B       		.uleb128 0xb
 1930 00a1 3B       		.uleb128 0x3b
 1931 00a2 0B       		.uleb128 0xb
 1932 00a3 01       		.uleb128 0x1
 1933 00a4 13       		.uleb128 0x13
 1934 00a5 00       		.byte	0
 1935 00a6 00       		.byte	0
 1936 00a7 0E       		.uleb128 0xe
 1937 00a8 13       		.uleb128 0x13
 1938 00a9 01       		.byte	0x1
 1939 00aa 03       		.uleb128 0x3
 1940 00ab 0E       		.uleb128 0xe
 1941 00ac 0B       		.uleb128 0xb
 1942 00ad 0B       		.uleb128 0xb
 1943 00ae 3A       		.uleb128 0x3a
 1944 00af 0B       		.uleb128 0xb
 1945 00b0 3B       		.uleb128 0x3b
 1946 00b1 0B       		.uleb128 0xb
 1947 00b2 01       		.uleb128 0x1
 1948 00b3 13       		.uleb128 0x13
 1949 00b4 00       		.byte	0
 1950 00b5 00       		.byte	0
 1951 00b6 0F       		.uleb128 0xf
 1952 00b7 0D       		.uleb128 0xd
 1953 00b8 00       		.byte	0
 1954 00b9 03       		.uleb128 0x3
 1955 00ba 0E       		.uleb128 0xe
 1956 00bb 3A       		.uleb128 0x3a
 1957 00bc 0B       		.uleb128 0xb
 1958 00bd 3B       		.uleb128 0x3b
 1959 00be 0B       		.uleb128 0xb
 1960 00bf 49       		.uleb128 0x49
 1961 00c0 13       		.uleb128 0x13
 1962 00c1 38       		.uleb128 0x38
 1963 00c2 0A       		.uleb128 0xa
 1964 00c3 00       		.byte	0
 1965 00c4 00       		.byte	0
 1966 00c5 10       		.uleb128 0x10
 1967 00c6 01       		.uleb128 0x1
 1968 00c7 01       		.byte	0x1
 1969 00c8 49       		.uleb128 0x49
 1970 00c9 13       		.uleb128 0x13
ARM GAS  /tmp/ccfi8svf.s 			page 42


 1971 00ca 01       		.uleb128 0x1
 1972 00cb 13       		.uleb128 0x13
 1973 00cc 00       		.byte	0
 1974 00cd 00       		.byte	0
 1975 00ce 11       		.uleb128 0x11
 1976 00cf 21       		.uleb128 0x21
 1977 00d0 00       		.byte	0
 1978 00d1 49       		.uleb128 0x49
 1979 00d2 13       		.uleb128 0x13
 1980 00d3 2F       		.uleb128 0x2f
 1981 00d4 0B       		.uleb128 0xb
 1982 00d5 00       		.byte	0
 1983 00d6 00       		.byte	0
 1984 00d7 12       		.uleb128 0x12
 1985 00d8 2E       		.uleb128 0x2e
 1986 00d9 01       		.byte	0x1
 1987 00da 3F       		.uleb128 0x3f
 1988 00db 0C       		.uleb128 0xc
 1989 00dc 03       		.uleb128 0x3
 1990 00dd 0E       		.uleb128 0xe
 1991 00de 3A       		.uleb128 0x3a
 1992 00df 0B       		.uleb128 0xb
 1993 00e0 3B       		.uleb128 0x3b
 1994 00e1 0B       		.uleb128 0xb
 1995 00e2 27       		.uleb128 0x27
 1996 00e3 0C       		.uleb128 0xc
 1997 00e4 49       		.uleb128 0x49
 1998 00e5 13       		.uleb128 0x13
 1999 00e6 11       		.uleb128 0x11
 2000 00e7 01       		.uleb128 0x1
 2001 00e8 12       		.uleb128 0x12
 2002 00e9 01       		.uleb128 0x1
 2003 00ea 40       		.uleb128 0x40
 2004 00eb 06       		.uleb128 0x6
 2005 00ec 9642     		.uleb128 0x2116
 2006 00ee 0C       		.uleb128 0xc
 2007 00ef 01       		.uleb128 0x1
 2008 00f0 13       		.uleb128 0x13
 2009 00f1 00       		.byte	0
 2010 00f2 00       		.byte	0
 2011 00f3 13       		.uleb128 0x13
 2012 00f4 34       		.uleb128 0x34
 2013 00f5 00       		.byte	0
 2014 00f6 03       		.uleb128 0x3
 2015 00f7 0E       		.uleb128 0xe
 2016 00f8 3A       		.uleb128 0x3a
 2017 00f9 0B       		.uleb128 0xb
 2018 00fa 3B       		.uleb128 0x3b
 2019 00fb 0B       		.uleb128 0xb
 2020 00fc 49       		.uleb128 0x49
 2021 00fd 13       		.uleb128 0x13
 2022 00fe 02       		.uleb128 0x2
 2023 00ff 0A       		.uleb128 0xa
 2024 0100 00       		.byte	0
 2025 0101 00       		.byte	0
 2026 0102 14       		.uleb128 0x14
 2027 0103 2E       		.uleb128 0x2e
ARM GAS  /tmp/ccfi8svf.s 			page 43


 2028 0104 01       		.byte	0x1
 2029 0105 3F       		.uleb128 0x3f
 2030 0106 0C       		.uleb128 0xc
 2031 0107 03       		.uleb128 0x3
 2032 0108 0E       		.uleb128 0xe
 2033 0109 3A       		.uleb128 0x3a
 2034 010a 0B       		.uleb128 0xb
 2035 010b 3B       		.uleb128 0x3b
 2036 010c 0B       		.uleb128 0xb
 2037 010d 27       		.uleb128 0x27
 2038 010e 0C       		.uleb128 0xc
 2039 010f 11       		.uleb128 0x11
 2040 0110 01       		.uleb128 0x1
 2041 0111 12       		.uleb128 0x12
 2042 0112 01       		.uleb128 0x1
 2043 0113 40       		.uleb128 0x40
 2044 0114 06       		.uleb128 0x6
 2045 0115 9742     		.uleb128 0x2117
 2046 0117 0C       		.uleb128 0xc
 2047 0118 01       		.uleb128 0x1
 2048 0119 13       		.uleb128 0x13
 2049 011a 00       		.byte	0
 2050 011b 00       		.byte	0
 2051 011c 15       		.uleb128 0x15
 2052 011d 05       		.uleb128 0x5
 2053 011e 00       		.byte	0
 2054 011f 03       		.uleb128 0x3
 2055 0120 08       		.uleb128 0x8
 2056 0121 3A       		.uleb128 0x3a
 2057 0122 0B       		.uleb128 0xb
 2058 0123 3B       		.uleb128 0x3b
 2059 0124 0B       		.uleb128 0xb
 2060 0125 49       		.uleb128 0x49
 2061 0126 13       		.uleb128 0x13
 2062 0127 02       		.uleb128 0x2
 2063 0128 0A       		.uleb128 0xa
 2064 0129 00       		.byte	0
 2065 012a 00       		.byte	0
 2066 012b 16       		.uleb128 0x16
 2067 012c 05       		.uleb128 0x5
 2068 012d 00       		.byte	0
 2069 012e 03       		.uleb128 0x3
 2070 012f 0E       		.uleb128 0xe
 2071 0130 3A       		.uleb128 0x3a
 2072 0131 0B       		.uleb128 0xb
 2073 0132 3B       		.uleb128 0x3b
 2074 0133 0B       		.uleb128 0xb
 2075 0134 49       		.uleb128 0x49
 2076 0135 13       		.uleb128 0x13
 2077 0136 02       		.uleb128 0x2
 2078 0137 0A       		.uleb128 0xa
 2079 0138 00       		.byte	0
 2080 0139 00       		.byte	0
 2081 013a 17       		.uleb128 0x17
 2082 013b 34       		.uleb128 0x34
 2083 013c 00       		.byte	0
 2084 013d 03       		.uleb128 0x3
ARM GAS  /tmp/ccfi8svf.s 			page 44


 2085 013e 08       		.uleb128 0x8
 2086 013f 3A       		.uleb128 0x3a
 2087 0140 0B       		.uleb128 0xb
 2088 0141 3B       		.uleb128 0x3b
 2089 0142 0B       		.uleb128 0xb
 2090 0143 49       		.uleb128 0x49
 2091 0144 13       		.uleb128 0x13
 2092 0145 02       		.uleb128 0x2
 2093 0146 0A       		.uleb128 0xa
 2094 0147 00       		.byte	0
 2095 0148 00       		.byte	0
 2096 0149 18       		.uleb128 0x18
 2097 014a 0F       		.uleb128 0xf
 2098 014b 00       		.byte	0
 2099 014c 0B       		.uleb128 0xb
 2100 014d 0B       		.uleb128 0xb
 2101 014e 49       		.uleb128 0x49
 2102 014f 13       		.uleb128 0x13
 2103 0150 00       		.byte	0
 2104 0151 00       		.byte	0
 2105 0152 19       		.uleb128 0x19
 2106 0153 2E       		.uleb128 0x2e
 2107 0154 01       		.byte	0x1
 2108 0155 3F       		.uleb128 0x3f
 2109 0156 0C       		.uleb128 0xc
 2110 0157 03       		.uleb128 0x3
 2111 0158 0E       		.uleb128 0xe
 2112 0159 3A       		.uleb128 0x3a
 2113 015a 0B       		.uleb128 0xb
 2114 015b 3B       		.uleb128 0x3b
 2115 015c 0B       		.uleb128 0xb
 2116 015d 27       		.uleb128 0x27
 2117 015e 0C       		.uleb128 0xc
 2118 015f 11       		.uleb128 0x11
 2119 0160 01       		.uleb128 0x1
 2120 0161 12       		.uleb128 0x12
 2121 0162 01       		.uleb128 0x1
 2122 0163 40       		.uleb128 0x40
 2123 0164 06       		.uleb128 0x6
 2124 0165 9642     		.uleb128 0x2116
 2125 0167 0C       		.uleb128 0xc
 2126 0168 01       		.uleb128 0x1
 2127 0169 13       		.uleb128 0x13
 2128 016a 00       		.byte	0
 2129 016b 00       		.byte	0
 2130 016c 1A       		.uleb128 0x1a
 2131 016d 2E       		.uleb128 0x2e
 2132 016e 00       		.byte	0
 2133 016f 3F       		.uleb128 0x3f
 2134 0170 0C       		.uleb128 0xc
 2135 0171 03       		.uleb128 0x3
 2136 0172 0E       		.uleb128 0xe
 2137 0173 3A       		.uleb128 0x3a
 2138 0174 0B       		.uleb128 0xb
 2139 0175 3B       		.uleb128 0x3b
 2140 0176 0B       		.uleb128 0xb
 2141 0177 27       		.uleb128 0x27
ARM GAS  /tmp/ccfi8svf.s 			page 45


 2142 0178 0C       		.uleb128 0xc
 2143 0179 11       		.uleb128 0x11
 2144 017a 01       		.uleb128 0x1
 2145 017b 12       		.uleb128 0x12
 2146 017c 01       		.uleb128 0x1
 2147 017d 40       		.uleb128 0x40
 2148 017e 0A       		.uleb128 0xa
 2149 017f 9742     		.uleb128 0x2117
 2150 0181 0C       		.uleb128 0xc
 2151 0182 00       		.byte	0
 2152 0183 00       		.byte	0
 2153 0184 1B       		.uleb128 0x1b
 2154 0185 2E       		.uleb128 0x2e
 2155 0186 01       		.byte	0x1
 2156 0187 3F       		.uleb128 0x3f
 2157 0188 0C       		.uleb128 0xc
 2158 0189 03       		.uleb128 0x3
 2159 018a 0E       		.uleb128 0xe
 2160 018b 3A       		.uleb128 0x3a
 2161 018c 0B       		.uleb128 0xb
 2162 018d 3B       		.uleb128 0x3b
 2163 018e 0B       		.uleb128 0xb
 2164 018f 27       		.uleb128 0x27
 2165 0190 0C       		.uleb128 0xc
 2166 0191 49       		.uleb128 0x49
 2167 0192 13       		.uleb128 0x13
 2168 0193 11       		.uleb128 0x11
 2169 0194 01       		.uleb128 0x1
 2170 0195 12       		.uleb128 0x12
 2171 0196 01       		.uleb128 0x1
 2172 0197 40       		.uleb128 0x40
 2173 0198 06       		.uleb128 0x6
 2174 0199 9742     		.uleb128 0x2117
 2175 019b 0C       		.uleb128 0xc
 2176 019c 01       		.uleb128 0x1
 2177 019d 13       		.uleb128 0x13
 2178 019e 00       		.byte	0
 2179 019f 00       		.byte	0
 2180 01a0 1C       		.uleb128 0x1c
 2181 01a1 2E       		.uleb128 0x2e
 2182 01a2 01       		.byte	0x1
 2183 01a3 3F       		.uleb128 0x3f
 2184 01a4 0C       		.uleb128 0xc
 2185 01a5 03       		.uleb128 0x3
 2186 01a6 0E       		.uleb128 0xe
 2187 01a7 3A       		.uleb128 0x3a
 2188 01a8 0B       		.uleb128 0xb
 2189 01a9 3B       		.uleb128 0x3b
 2190 01aa 05       		.uleb128 0x5
 2191 01ab 27       		.uleb128 0x27
 2192 01ac 0C       		.uleb128 0xc
 2193 01ad 49       		.uleb128 0x49
 2194 01ae 13       		.uleb128 0x13
 2195 01af 11       		.uleb128 0x11
 2196 01b0 01       		.uleb128 0x1
 2197 01b1 12       		.uleb128 0x12
 2198 01b2 01       		.uleb128 0x1
ARM GAS  /tmp/ccfi8svf.s 			page 46


 2199 01b3 40       		.uleb128 0x40
 2200 01b4 06       		.uleb128 0x6
 2201 01b5 9642     		.uleb128 0x2116
 2202 01b7 0C       		.uleb128 0xc
 2203 01b8 01       		.uleb128 0x1
 2204 01b9 13       		.uleb128 0x13
 2205 01ba 00       		.byte	0
 2206 01bb 00       		.byte	0
 2207 01bc 1D       		.uleb128 0x1d
 2208 01bd 05       		.uleb128 0x5
 2209 01be 00       		.byte	0
 2210 01bf 03       		.uleb128 0x3
 2211 01c0 08       		.uleb128 0x8
 2212 01c1 3A       		.uleb128 0x3a
 2213 01c2 0B       		.uleb128 0xb
 2214 01c3 3B       		.uleb128 0x3b
 2215 01c4 05       		.uleb128 0x5
 2216 01c5 49       		.uleb128 0x49
 2217 01c6 13       		.uleb128 0x13
 2218 01c7 02       		.uleb128 0x2
 2219 01c8 0A       		.uleb128 0xa
 2220 01c9 00       		.byte	0
 2221 01ca 00       		.byte	0
 2222 01cb 1E       		.uleb128 0x1e
 2223 01cc 05       		.uleb128 0x5
 2224 01cd 00       		.byte	0
 2225 01ce 03       		.uleb128 0x3
 2226 01cf 0E       		.uleb128 0xe
 2227 01d0 3A       		.uleb128 0x3a
 2228 01d1 0B       		.uleb128 0xb
 2229 01d2 3B       		.uleb128 0x3b
 2230 01d3 05       		.uleb128 0x5
 2231 01d4 49       		.uleb128 0x49
 2232 01d5 13       		.uleb128 0x13
 2233 01d6 02       		.uleb128 0x2
 2234 01d7 0A       		.uleb128 0xa
 2235 01d8 00       		.byte	0
 2236 01d9 00       		.byte	0
 2237 01da 1F       		.uleb128 0x1f
 2238 01db 34       		.uleb128 0x34
 2239 01dc 00       		.byte	0
 2240 01dd 03       		.uleb128 0x3
 2241 01de 08       		.uleb128 0x8
 2242 01df 3A       		.uleb128 0x3a
 2243 01e0 0B       		.uleb128 0xb
 2244 01e1 3B       		.uleb128 0x3b
 2245 01e2 05       		.uleb128 0x5
 2246 01e3 49       		.uleb128 0x49
 2247 01e4 13       		.uleb128 0x13
 2248 01e5 02       		.uleb128 0x2
 2249 01e6 0A       		.uleb128 0xa
 2250 01e7 00       		.byte	0
 2251 01e8 00       		.byte	0
 2252 01e9 20       		.uleb128 0x20
 2253 01ea 34       		.uleb128 0x34
 2254 01eb 00       		.byte	0
 2255 01ec 03       		.uleb128 0x3
ARM GAS  /tmp/ccfi8svf.s 			page 47


 2256 01ed 0E       		.uleb128 0xe
 2257 01ee 3A       		.uleb128 0x3a
 2258 01ef 0B       		.uleb128 0xb
 2259 01f0 3B       		.uleb128 0x3b
 2260 01f1 05       		.uleb128 0x5
 2261 01f2 49       		.uleb128 0x49
 2262 01f3 13       		.uleb128 0x13
 2263 01f4 02       		.uleb128 0x2
 2264 01f5 0A       		.uleb128 0xa
 2265 01f6 00       		.byte	0
 2266 01f7 00       		.byte	0
 2267 01f8 21       		.uleb128 0x21
 2268 01f9 2E       		.uleb128 0x2e
 2269 01fa 01       		.byte	0x1
 2270 01fb 3F       		.uleb128 0x3f
 2271 01fc 0C       		.uleb128 0xc
 2272 01fd 03       		.uleb128 0x3
 2273 01fe 0E       		.uleb128 0xe
 2274 01ff 3A       		.uleb128 0x3a
 2275 0200 0B       		.uleb128 0xb
 2276 0201 3B       		.uleb128 0x3b
 2277 0202 05       		.uleb128 0x5
 2278 0203 27       		.uleb128 0x27
 2279 0204 0C       		.uleb128 0xc
 2280 0205 11       		.uleb128 0x11
 2281 0206 01       		.uleb128 0x1
 2282 0207 12       		.uleb128 0x12
 2283 0208 01       		.uleb128 0x1
 2284 0209 40       		.uleb128 0x40
 2285 020a 06       		.uleb128 0x6
 2286 020b 9642     		.uleb128 0x2116
 2287 020d 0C       		.uleb128 0xc
 2288 020e 01       		.uleb128 0x1
 2289 020f 13       		.uleb128 0x13
 2290 0210 00       		.byte	0
 2291 0211 00       		.byte	0
 2292 0212 22       		.uleb128 0x22
 2293 0213 2E       		.uleb128 0x2e
 2294 0214 01       		.byte	0x1
 2295 0215 3F       		.uleb128 0x3f
 2296 0216 0C       		.uleb128 0xc
 2297 0217 03       		.uleb128 0x3
 2298 0218 0E       		.uleb128 0xe
 2299 0219 3A       		.uleb128 0x3a
 2300 021a 0B       		.uleb128 0xb
 2301 021b 3B       		.uleb128 0x3b
 2302 021c 0B       		.uleb128 0xb
 2303 021d 27       		.uleb128 0x27
 2304 021e 0C       		.uleb128 0xc
 2305 021f 49       		.uleb128 0x49
 2306 0220 13       		.uleb128 0x13
 2307 0221 3C       		.uleb128 0x3c
 2308 0222 0C       		.uleb128 0xc
 2309 0223 00       		.byte	0
 2310 0224 00       		.byte	0
 2311 0225 23       		.uleb128 0x23
 2312 0226 05       		.uleb128 0x5
ARM GAS  /tmp/ccfi8svf.s 			page 48


 2313 0227 00       		.byte	0
 2314 0228 49       		.uleb128 0x49
 2315 0229 13       		.uleb128 0x13
 2316 022a 00       		.byte	0
 2317 022b 00       		.byte	0
 2318 022c 24       		.uleb128 0x24
 2319 022d 26       		.uleb128 0x26
 2320 022e 00       		.byte	0
 2321 022f 49       		.uleb128 0x49
 2322 0230 13       		.uleb128 0x13
 2323 0231 00       		.byte	0
 2324 0232 00       		.byte	0
 2325 0233 25       		.uleb128 0x25
 2326 0234 34       		.uleb128 0x34
 2327 0235 00       		.byte	0
 2328 0236 03       		.uleb128 0x3
 2329 0237 0E       		.uleb128 0xe
 2330 0238 3A       		.uleb128 0x3a
 2331 0239 0B       		.uleb128 0xb
 2332 023a 3B       		.uleb128 0x3b
 2333 023b 0B       		.uleb128 0xb
 2334 023c 49       		.uleb128 0x49
 2335 023d 13       		.uleb128 0x13
 2336 023e 3F       		.uleb128 0x3f
 2337 023f 0C       		.uleb128 0xc
 2338 0240 3C       		.uleb128 0x3c
 2339 0241 0C       		.uleb128 0xc
 2340 0242 00       		.byte	0
 2341 0243 00       		.byte	0
 2342 0244 00       		.byte	0
 2343              		.section	.debug_loc,"",%progbits
 2344              	.Ldebug_loc0:
 2345              	.LLST0:
 2346 0000 00000000 		.4byte	.LFB20
 2347 0004 02000000 		.4byte	.LCFI0
 2348 0008 0200     		.2byte	0x2
 2349 000a 7D       		.byte	0x7d
 2350 000b 00       		.sleb128 0
 2351 000c 02000000 		.4byte	.LCFI0
 2352 0010 04000000 		.4byte	.LCFI1
 2353 0014 0200     		.2byte	0x2
 2354 0016 7D       		.byte	0x7d
 2355 0017 04       		.sleb128 4
 2356 0018 04000000 		.4byte	.LCFI1
 2357 001c 48000000 		.4byte	.LFE20
 2358 0020 0200     		.2byte	0x2
 2359 0022 7D       		.byte	0x7d
 2360 0023 10       		.sleb128 16
 2361 0024 00000000 		.4byte	0
 2362 0028 00000000 		.4byte	0
 2363              	.LLST1:
 2364 002c 00000000 		.4byte	.LFB21
 2365 0030 02000000 		.4byte	.LCFI2
 2366 0034 0200     		.2byte	0x2
 2367 0036 7D       		.byte	0x7d
 2368 0037 00       		.sleb128 0
 2369 0038 02000000 		.4byte	.LCFI2
ARM GAS  /tmp/ccfi8svf.s 			page 49


 2370 003c 4A000000 		.4byte	.LFE21
 2371 0040 0200     		.2byte	0x2
 2372 0042 7D       		.byte	0x7d
 2373 0043 10       		.sleb128 16
 2374 0044 00000000 		.4byte	0
 2375 0048 00000000 		.4byte	0
 2376              	.LLST2:
 2377 004c 00000000 		.4byte	.LFB22
 2378 0050 02000000 		.4byte	.LCFI3
 2379 0054 0200     		.2byte	0x2
 2380 0056 7D       		.byte	0x7d
 2381 0057 00       		.sleb128 0
 2382 0058 02000000 		.4byte	.LCFI3
 2383 005c 04000000 		.4byte	.LCFI4
 2384 0060 0200     		.2byte	0x2
 2385 0062 7D       		.byte	0x7d
 2386 0063 04       		.sleb128 4
 2387 0064 04000000 		.4byte	.LCFI4
 2388 0068 2E000000 		.4byte	.LFE22
 2389 006c 0200     		.2byte	0x2
 2390 006e 7D       		.byte	0x7d
 2391 006f 10       		.sleb128 16
 2392 0070 00000000 		.4byte	0
 2393 0074 00000000 		.4byte	0
 2394              	.LLST3:
 2395 0078 00000000 		.4byte	.LFB24
 2396 007c 02000000 		.4byte	.LCFI5
 2397 0080 0200     		.2byte	0x2
 2398 0082 7D       		.byte	0x7d
 2399 0083 00       		.sleb128 0
 2400 0084 02000000 		.4byte	.LCFI5
 2401 0088 04000000 		.4byte	.LCFI6
 2402 008c 0200     		.2byte	0x2
 2403 008e 7D       		.byte	0x7d
 2404 008f 08       		.sleb128 8
 2405 0090 04000000 		.4byte	.LCFI6
 2406 0094 78000000 		.4byte	.LFE24
 2407 0098 0200     		.2byte	0x2
 2408 009a 7D       		.byte	0x7d
 2409 009b 18       		.sleb128 24
 2410 009c 00000000 		.4byte	0
 2411 00a0 00000000 		.4byte	0
 2412              	.LLST4:
 2413 00a4 00000000 		.4byte	.LFB26
 2414 00a8 02000000 		.4byte	.LCFI7
 2415 00ac 0200     		.2byte	0x2
 2416 00ae 7D       		.byte	0x7d
 2417 00af 00       		.sleb128 0
 2418 00b0 02000000 		.4byte	.LCFI7
 2419 00b4 04000000 		.4byte	.LCFI8
 2420 00b8 0200     		.2byte	0x2
 2421 00ba 7D       		.byte	0x7d
 2422 00bb 08       		.sleb128 8
 2423 00bc 04000000 		.4byte	.LCFI8
 2424 00c0 B0000000 		.4byte	.LFE26
 2425 00c4 0200     		.2byte	0x2
 2426 00c6 7D       		.byte	0x7d
ARM GAS  /tmp/ccfi8svf.s 			page 50


 2427 00c7 18       		.sleb128 24
 2428 00c8 00000000 		.4byte	0
 2429 00cc 00000000 		.4byte	0
 2430              	.LLST5:
 2431 00d0 00000000 		.4byte	.LFB27
 2432 00d4 02000000 		.4byte	.LCFI9
 2433 00d8 0200     		.2byte	0x2
 2434 00da 7D       		.byte	0x7d
 2435 00db 00       		.sleb128 0
 2436 00dc 02000000 		.4byte	.LCFI9
 2437 00e0 04000000 		.4byte	.LCFI10
 2438 00e4 0200     		.2byte	0x2
 2439 00e6 7D       		.byte	0x7d
 2440 00e7 08       		.sleb128 8
 2441 00e8 04000000 		.4byte	.LCFI10
 2442 00ec 58000000 		.4byte	.LFE27
 2443 00f0 0200     		.2byte	0x2
 2444 00f2 7D       		.byte	0x7d
 2445 00f3 18       		.sleb128 24
 2446 00f4 00000000 		.4byte	0
 2447 00f8 00000000 		.4byte	0
 2448              	.LLST6:
 2449 00fc 00000000 		.4byte	.LFB28
 2450 0100 02000000 		.4byte	.LCFI11
 2451 0104 0200     		.2byte	0x2
 2452 0106 7D       		.byte	0x7d
 2453 0107 00       		.sleb128 0
 2454 0108 02000000 		.4byte	.LCFI11
 2455 010c 60000000 		.4byte	.LFE28
 2456 0110 0200     		.2byte	0x2
 2457 0112 7D       		.byte	0x7d
 2458 0113 08       		.sleb128 8
 2459 0114 00000000 		.4byte	0
 2460 0118 00000000 		.4byte	0
 2461              	.LLST7:
 2462 011c 00000000 		.4byte	.LFB29
 2463 0120 02000000 		.4byte	.LCFI12
 2464 0124 0200     		.2byte	0x2
 2465 0126 7D       		.byte	0x7d
 2466 0127 00       		.sleb128 0
 2467 0128 02000000 		.4byte	.LCFI12
 2468 012c 04000000 		.4byte	.LCFI13
 2469 0130 0200     		.2byte	0x2
 2470 0132 7D       		.byte	0x7d
 2471 0133 04       		.sleb128 4
 2472 0134 04000000 		.4byte	.LCFI13
 2473 0138 AE000000 		.4byte	.LFE29
 2474 013c 0200     		.2byte	0x2
 2475 013e 7D       		.byte	0x7d
 2476 013f 20       		.sleb128 32
 2477 0140 00000000 		.4byte	0
 2478 0144 00000000 		.4byte	0
 2479              	.LLST8:
 2480 0148 00000000 		.4byte	.LFB30
 2481 014c 02000000 		.4byte	.LCFI14
 2482 0150 0200     		.2byte	0x2
 2483 0152 7D       		.byte	0x7d
ARM GAS  /tmp/ccfi8svf.s 			page 51


 2484 0153 00       		.sleb128 0
 2485 0154 02000000 		.4byte	.LCFI14
 2486 0158 04000000 		.4byte	.LCFI15
 2487 015c 0200     		.2byte	0x2
 2488 015e 7D       		.byte	0x7d
 2489 015f 04       		.sleb128 4
 2490 0160 04000000 		.4byte	.LCFI15
 2491 0164 30000000 		.4byte	.LFE30
 2492 0168 0200     		.2byte	0x2
 2493 016a 7D       		.byte	0x7d
 2494 016b 10       		.sleb128 16
 2495 016c 00000000 		.4byte	0
 2496 0170 00000000 		.4byte	0
 2497              	.LLST9:
 2498 0174 00000000 		.4byte	.LFB31
 2499 0178 02000000 		.4byte	.LCFI16
 2500 017c 0200     		.2byte	0x2
 2501 017e 7D       		.byte	0x7d
 2502 017f 00       		.sleb128 0
 2503 0180 02000000 		.4byte	.LCFI16
 2504 0184 04000000 		.4byte	.LCFI17
 2505 0188 0200     		.2byte	0x2
 2506 018a 7D       		.byte	0x7d
 2507 018b 04       		.sleb128 4
 2508 018c 04000000 		.4byte	.LCFI17
 2509 0190 C8000000 		.4byte	.LFE31
 2510 0194 0200     		.2byte	0x2
 2511 0196 7D       		.byte	0x7d
 2512 0197 20       		.sleb128 32
 2513 0198 00000000 		.4byte	0
 2514 019c 00000000 		.4byte	0
 2515              	.LLST10:
 2516 01a0 00000000 		.4byte	.LFB32
 2517 01a4 02000000 		.4byte	.LCFI18
 2518 01a8 0200     		.2byte	0x2
 2519 01aa 7D       		.byte	0x7d
 2520 01ab 00       		.sleb128 0
 2521 01ac 02000000 		.4byte	.LCFI18
 2522 01b0 04000000 		.4byte	.LCFI19
 2523 01b4 0200     		.2byte	0x2
 2524 01b6 7D       		.byte	0x7d
 2525 01b7 04       		.sleb128 4
 2526 01b8 04000000 		.4byte	.LCFI19
 2527 01bc 3C000000 		.4byte	.LFE32
 2528 01c0 0200     		.2byte	0x2
 2529 01c2 7D       		.byte	0x7d
 2530 01c3 10       		.sleb128 16
 2531 01c4 00000000 		.4byte	0
 2532 01c8 00000000 		.4byte	0
 2533              		.section	.debug_aranges,"",%progbits
 2534 0000 7C000000 		.4byte	0x7c
 2535 0004 0200     		.2byte	0x2
 2536 0006 00000000 		.4byte	.Ldebug_info0
 2537 000a 04       		.byte	0x4
 2538 000b 00       		.byte	0
 2539 000c 0000     		.2byte	0
 2540 000e 0000     		.2byte	0
ARM GAS  /tmp/ccfi8svf.s 			page 52


 2541 0010 00000000 		.4byte	.LFB20
 2542 0014 48000000 		.4byte	.LFE20-.LFB20
 2543 0018 00000000 		.4byte	.LFB21
 2544 001c 4A000000 		.4byte	.LFE21-.LFB21
 2545 0020 00000000 		.4byte	.LFB22
 2546 0024 2E000000 		.4byte	.LFE22-.LFB22
 2547 0028 00000000 		.4byte	.LFB23
 2548 002c 28000000 		.4byte	.LFE23-.LFB23
 2549 0030 00000000 		.4byte	.LFB24
 2550 0034 78000000 		.4byte	.LFE24-.LFB24
 2551 0038 00000000 		.4byte	.LFB25
 2552 003c 14000000 		.4byte	.LFE25-.LFB25
 2553 0040 00000000 		.4byte	.LFB26
 2554 0044 B0000000 		.4byte	.LFE26-.LFB26
 2555 0048 00000000 		.4byte	.LFB27
 2556 004c 58000000 		.4byte	.LFE27-.LFB27
 2557 0050 00000000 		.4byte	.LFB28
 2558 0054 60000000 		.4byte	.LFE28-.LFB28
 2559 0058 00000000 		.4byte	.LFB29
 2560 005c AE000000 		.4byte	.LFE29-.LFB29
 2561 0060 00000000 		.4byte	.LFB30
 2562 0064 30000000 		.4byte	.LFE30-.LFB30
 2563 0068 00000000 		.4byte	.LFB31
 2564 006c C8000000 		.4byte	.LFE31-.LFB31
 2565 0070 00000000 		.4byte	.LFB32
 2566 0074 3C000000 		.4byte	.LFE32-.LFB32
 2567 0078 00000000 		.4byte	0
 2568 007c 00000000 		.4byte	0
 2569              		.section	.debug_ranges,"",%progbits
 2570              	.Ldebug_ranges0:
 2571 0000 00000000 		.4byte	.LFB20
 2572 0004 48000000 		.4byte	.LFE20
 2573 0008 00000000 		.4byte	.LFB21
 2574 000c 4A000000 		.4byte	.LFE21
 2575 0010 00000000 		.4byte	.LFB22
 2576 0014 2E000000 		.4byte	.LFE22
 2577 0018 00000000 		.4byte	.LFB23
 2578 001c 28000000 		.4byte	.LFE23
 2579 0020 00000000 		.4byte	.LFB24
 2580 0024 78000000 		.4byte	.LFE24
 2581 0028 00000000 		.4byte	.LFB25
 2582 002c 14000000 		.4byte	.LFE25
 2583 0030 00000000 		.4byte	.LFB26
 2584 0034 B0000000 		.4byte	.LFE26
 2585 0038 00000000 		.4byte	.LFB27
 2586 003c 58000000 		.4byte	.LFE27
 2587 0040 00000000 		.4byte	.LFB28
 2588 0044 60000000 		.4byte	.LFE28
 2589 0048 00000000 		.4byte	.LFB29
 2590 004c AE000000 		.4byte	.LFE29
 2591 0050 00000000 		.4byte	.LFB30
 2592 0054 30000000 		.4byte	.LFE30
 2593 0058 00000000 		.4byte	.LFB31
 2594 005c C8000000 		.4byte	.LFE31
 2595 0060 00000000 		.4byte	.LFB32
 2596 0064 3C000000 		.4byte	.LFE32
 2597 0068 00000000 		.4byte	0
ARM GAS  /tmp/ccfi8svf.s 			page 53


 2598 006c 00000000 		.4byte	0
 2599              		.section	.debug_line,"",%progbits
 2600              	.Ldebug_line0:
 2601 0000 A9020000 		.section	.debug_str,"MS",%progbits,1
 2601      02001A01 
 2601      00000201 
 2601      FB0E0D00 
 2601      01010101 
 2602              	.LASF69:
 2603 0000 7374726E 		.ascii	"strncpy\000"
 2603      63707900 
 2604              	.LASF61:
 2605 0008 57726974 		.ascii	"WriteFlash\000"
 2605      65466C61 
 2605      736800
 2606              	.LASF31:
 2607 0013 6163756D 		.ascii	"acumm_w2s_index\000"
 2607      6D5F7732 
 2607      735F696E 
 2607      64657800 
 2608              	.LASF64:
 2609 0023 705F7261 		.ascii	"p_ram\000"
 2609      6D00
 2610              	.LASF21:
 2611 0029 464C4153 		.ascii	"FLASH_ERROR_WRP\000"
 2611      485F4552 
 2611      524F525F 
 2611      57525000 
 2612              	.LASF28:
 2613 0039 6E756D5F 		.ascii	"num_propio\000"
 2613      70726F70 
 2613      696F00
 2614              	.LASF13:
 2615 0044 73697A65 		.ascii	"sizetype\000"
 2615      74797065 
 2615      00
 2616              	.LASF35:
 2617 004d 70617261 		.ascii	"parameters_typedef\000"
 2617      6D657465 
 2617      72735F74 
 2617      79706564 
 2617      656600
 2618              	.LASF6:
 2619 0060 5F5F7569 		.ascii	"__uint32_t\000"
 2619      6E743332 
 2619      5F7400
 2620              	.LASF37:
 2621 006b 50415353 		.ascii	"PASSED\000"
 2621      454400
 2622              	.LASF51:
 2623 0072 41646472 		.ascii	"Address\000"
 2623      65737300 
 2624              	.LASF39:
 2625 007a 72657370 		.ascii	"resp\000"
 2625      00
 2626              	.LASF5:
 2627 007f 5F5F7569 		.ascii	"__uint16_t\000"
ARM GAS  /tmp/ccfi8svf.s 			page 54


 2627      6E743136 
 2627      5F7400
 2628              	.LASF40:
 2629 008a 4261636B 		.ascii	"BackupPage\000"
 2629      75705061 
 2629      676500
 2630              	.LASF38:
 2631 0095 70616765 		.ascii	"page_addr\000"
 2631      5F616464 
 2631      7200
 2632              	.LASF15:
 2633 009f 4B455952 		.ascii	"KEYR\000"
 2633      00
 2634              	.LASF48:
 2635 00a4 464C4153 		.ascii	"FLASH_Unlock\000"
 2635      485F556E 
 2635      6C6F636B 
 2635      00
 2636              	.LASF26:
 2637 00b1 6E756D5F 		.ascii	"num_reportar\000"
 2637      7265706F 
 2637      72746172 
 2637      00
 2638              	.LASF25:
 2639 00be 464C4153 		.ascii	"FLASH_Status\000"
 2639      485F5374 
 2639      61747573 
 2639      00
 2640              	.LASF45:
 2641 00cb 464C4153 		.ascii	"FLASH_ErasePage\000"
 2641      485F4572 
 2641      61736550 
 2641      61676500 
 2642              	.LASF2:
 2643 00db 73686F72 		.ascii	"short int\000"
 2643      7420696E 
 2643      7400
 2644              	.LASF70:
 2645 00e5 70617261 		.ascii	"param_struct\000"
 2645      6D5F7374 
 2645      72756374 
 2645      00
 2646              	.LASF16:
 2647 00f2 4F50544B 		.ascii	"OPTKEYR\000"
 2647      45595200 
 2648              	.LASF8:
 2649 00fa 6C6F6E67 		.ascii	"long long int\000"
 2649      206C6F6E 
 2649      6720696E 
 2649      7400
 2650              	.LASF4:
 2651 0108 6C6F6E67 		.ascii	"long int\000"
 2651      20696E74 
 2651      00
 2652              	.LASF18:
 2653 0111 57525052 		.ascii	"WRPR\000"
 2653      00
ARM GAS  /tmp/ccfi8svf.s 			page 55


 2654              	.LASF52:
 2655 0116 44617461 		.ascii	"Data\000"
 2655      00
 2656              	.LASF68:
 2657 011b 70617261 		.ascii	"parameters\000"
 2657      6D657465 
 2657      727300
 2658              	.LASF29:
 2659 0126 6163756D 		.ascii	"acumm_wh\000"
 2659      6D5F7768 
 2659      00
 2660              	.LASF1:
 2661 012f 756E7369 		.ascii	"unsigned char\000"
 2661      676E6564 
 2661      20636861 
 2661      7200
 2662              	.LASF46:
 2663 013d 50616765 		.ascii	"Page_Address\000"
 2663      5F416464 
 2663      72657373 
 2663      00
 2664              	.LASF66:
 2665 014a 7372632F 		.ascii	"src/flash_program.c\000"
 2665      666C6173 
 2665      685F7072 
 2665      6F677261 
 2665      6D2E6300 
 2666              	.LASF32:
 2667 015e 74696D65 		.ascii	"timer_reportar\000"
 2667      725F7265 
 2667      706F7274 
 2667      617200
 2668              	.LASF65:
 2669 016d 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 2669      43313120 
 2669      352E322E 
 2669      31203230 
 2669      31353132 
 2670 01a0 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 2670      20726576 
 2670      6973696F 
 2670      6E203233 
 2670      31383438 
 2671 01d3 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 2671      662D3220 
 2671      2D4F3020 
 2671      2D666F6D 
 2671      69742D66 
 2672 0206 66756E63 		.ascii	"function-sections\000"
 2672      74696F6E 
 2672      2D736563 
 2672      74696F6E 
 2672      7300
 2673              	.LASF43:
 2674 0218 77697468 		.ascii	"with_lock\000"
 2674      5F6C6F63 
 2674      6B00
ARM GAS  /tmp/ccfi8svf.s 			page 56


 2675              	.LASF0:
 2676 0222 7369676E 		.ascii	"signed char\000"
 2676      65642063 
 2676      68617200 
 2677              	.LASF9:
 2678 022e 6C6F6E67 		.ascii	"long long unsigned int\000"
 2678      206C6F6E 
 2678      6720756E 
 2678      7369676E 
 2678      65642069 
 2679              	.LASF12:
 2680 0245 75696E74 		.ascii	"uint32_t\000"
 2680      33325F74 
 2680      00
 2681              	.LASF10:
 2682 024e 756E7369 		.ascii	"unsigned int\000"
 2682      676E6564 
 2682      20696E74 
 2682      00
 2683              	.LASF23:
 2684 025b 464C4153 		.ascii	"FLASH_COMPLETE\000"
 2684      485F434F 
 2684      4D504C45 
 2684      544500
 2685              	.LASF20:
 2686 026a 464C4153 		.ascii	"FLASH_BUSY\000"
 2686      485F4255 
 2686      535900
 2687              	.LASF24:
 2688 0275 464C4153 		.ascii	"FLASH_TIMEOUT\000"
 2688      485F5449 
 2688      4D454F55 
 2688      5400
 2689              	.LASF42:
 2690 0283 705F6164 		.ascii	"p_addr\000"
 2690      647200
 2691              	.LASF47:
 2692 028a 73746174 		.ascii	"status\000"
 2692      757300
 2693              	.LASF57:
 2694 0291 57726974 		.ascii	"WritePage\000"
 2694      65506167 
 2694      6500
 2695              	.LASF54:
 2696 029b 54696D65 		.ascii	"Timeout\000"
 2696      6F757400 
 2697              	.LASF34:
 2698 02a3 63686172 		.ascii	"char\000"
 2698      00
 2699              	.LASF11:
 2700 02a8 75696E74 		.ascii	"uint16_t\000"
 2700      31365F74 
 2700      00
 2701              	.LASF27:
 2702 02b1 696D6569 		.ascii	"imei\000"
 2702      00
 2703              	.LASF49:
ARM GAS  /tmp/ccfi8svf.s 			page 57


 2704 02b6 464C4153 		.ascii	"FLASH_Lock\000"
 2704      485F4C6F 
 2704      636B00
 2705              	.LASF44:
 2706 02c1 45726173 		.ascii	"EraseAllMemory_FLASH\000"
 2706      65416C6C 
 2706      4D656D6F 
 2706      72795F46 
 2706      4C415348 
 2707              	.LASF59:
 2708 02d6 57726974 		.ascii	"WriteConfigurations\000"
 2708      65436F6E 
 2708      66696775 
 2708      72617469 
 2708      6F6E7300 
 2709              	.LASF55:
 2710 02ea 464C4153 		.ascii	"FLASH_GetStatus\000"
 2710      485F4765 
 2710      74537461 
 2710      74757300 
 2711              	.LASF60:
 2712 02fa 705F7061 		.ascii	"p_param\000"
 2712      72616D00 
 2713              	.LASF62:
 2714 0302 6C656E5F 		.ascii	"len_in_4\000"
 2714      696E5F34 
 2714      00
 2715              	.LASF3:
 2716 030b 73686F72 		.ascii	"short unsigned int\000"
 2716      7420756E 
 2716      7369676E 
 2716      65642069 
 2716      6E7400
 2717              	.LASF30:
 2718 031e 6163756D 		.ascii	"acumm_w2s\000"
 2718      6D5F7732 
 2718      7300
 2719              	.LASF7:
 2720 0328 6C6F6E67 		.ascii	"long unsigned int\000"
 2720      20756E73 
 2720      69676E65 
 2720      6420696E 
 2720      7400
 2721              	.LASF56:
 2722 033a 464C4153 		.ascii	"FLASHstatus\000"
 2722      48737461 
 2722      74757300 
 2723              	.LASF67:
 2724 0346 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 2724      652F6D65 
 2724      642F446F 
 2724      63756D65 
 2724      6E74732F 
 2725 0379 6100     		.ascii	"a\000"
 2726              	.LASF33:
 2727 037b 64756D6D 		.ascii	"dummy1\000"
 2727      793100
ARM GAS  /tmp/ccfi8svf.s 			page 58


 2728              	.LASF63:
 2729 0382 47657446 		.ascii	"GetFlashConf\000"
 2729      6C617368 
 2729      436F6E66 
 2729      00
 2730              	.LASF14:
 2731 038f 52455345 		.ascii	"RESET\000"
 2731      5400
 2732              	.LASF22:
 2733 0395 464C4153 		.ascii	"FLASH_ERROR_PROGRAM\000"
 2733      485F4552 
 2733      524F525F 
 2733      50524F47 
 2733      52414D00 
 2734              	.LASF50:
 2735 03a9 464C4153 		.ascii	"FLASH_ProgramWord\000"
 2735      485F5072 
 2735      6F677261 
 2735      6D576F72 
 2735      6400
 2736              	.LASF17:
 2737 03bb 52455345 		.ascii	"RESERVED\000"
 2737      52564544 
 2737      00
 2738              	.LASF19:
 2739 03c4 464C4153 		.ascii	"FLASH_TypeDef\000"
 2739      485F5479 
 2739      70654465 
 2739      6600
 2740              	.LASF53:
 2741 03d2 464C4153 		.ascii	"FLASH_WaitForLastOperation\000"
 2741      485F5761 
 2741      6974466F 
 2741      724C6173 
 2741      744F7065 
 2742              	.LASF58:
 2743 03ed 705F7665 		.ascii	"p_verif\000"
 2743      72696600 
 2744              	.LASF41:
 2745 03f5 45726173 		.ascii	"ErasePage\000"
 2745      65506167 
 2745      6500
 2746              	.LASF36:
 2747 03ff 4641494C 		.ascii	"FAILED\000"
 2747      454400
 2748              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccfi8svf.s 			page 59


DEFINED SYMBOLS
                            *ABS*:00000000 flash_program.c
     /tmp/ccfi8svf.s:55     .text.EraseAllMemory_FLASH:00000000 $t
     /tmp/ccfi8svf.s:60     .text.EraseAllMemory_FLASH:00000000 EraseAllMemory_FLASH
     /tmp/ccfi8svf.s:187    .text.ErasePage:00000000 ErasePage
     /tmp/ccfi8svf.s:117    .text.EraseAllMemory_FLASH:00000044 $d
     /tmp/ccfi8svf.s:122    .text.BackupPage:00000000 $t
     /tmp/ccfi8svf.s:127    .text.BackupPage:00000000 BackupPage
     /tmp/ccfi8svf.s:182    .text.ErasePage:00000000 $t
     /tmp/ccfi8svf.s:232    .text.FLASH_Unlock:00000000 FLASH_Unlock
     /tmp/ccfi8svf.s:270    .text.FLASH_ErasePage:00000000 FLASH_ErasePage
     /tmp/ccfi8svf.s:360    .text.FLASH_Lock:00000000 FLASH_Lock
     /tmp/ccfi8svf.s:227    .text.FLASH_Unlock:00000000 $t
     /tmp/ccfi8svf.s:258    .text.FLASH_Unlock:0000001c $d
     /tmp/ccfi8svf.s:265    .text.FLASH_ErasePage:00000000 $t
     /tmp/ccfi8svf.s:511    .text.FLASH_WaitForLastOperation:00000000 FLASH_WaitForLastOperation
     /tmp/ccfi8svf.s:350    .text.FLASH_ErasePage:00000074 $d
     /tmp/ccfi8svf.s:355    .text.FLASH_Lock:00000000 $t
     /tmp/ccfi8svf.s:378    .text.FLASH_Lock:00000010 $d
     /tmp/ccfi8svf.s:383    .text.FLASH_ProgramWord:00000000 $t
     /tmp/ccfi8svf.s:388    .text.FLASH_ProgramWord:00000000 FLASH_ProgramWord
     /tmp/ccfi8svf.s:501    .text.FLASH_ProgramWord:000000ac $d
     /tmp/ccfi8svf.s:506    .text.FLASH_WaitForLastOperation:00000000 $t
     /tmp/ccfi8svf.s:588    .text.FLASH_GetStatus:00000000 FLASH_GetStatus
     /tmp/ccfi8svf.s:583    .text.FLASH_GetStatus:00000000 $t
     /tmp/ccfi8svf.s:657    .text.FLASH_GetStatus:0000005c $d
     /tmp/ccfi8svf.s:662    .text.WritePage:00000000 $t
     /tmp/ccfi8svf.s:667    .text.WritePage:00000000 WritePage
     /tmp/ccfi8svf.s:788    .text.WriteConfigurations:00000000 $t
     /tmp/ccfi8svf.s:793    .text.WriteConfigurations:00000000 WriteConfigurations
     /tmp/ccfi8svf.s:843    .text.WriteFlash:00000000 WriteFlash
     /tmp/ccfi8svf.s:833    .text.WriteConfigurations:0000002c $d
     /tmp/ccfi8svf.s:838    .text.WriteFlash:00000000 $t
     /tmp/ccfi8svf.s:977    .text.GetFlashConf:00000000 $t
     /tmp/ccfi8svf.s:982    .text.GetFlashConf:00000000 GetFlashConf
     /tmp/ccfi8svf.s:1027   .text.GetFlashConf:00000038 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
strncpy
