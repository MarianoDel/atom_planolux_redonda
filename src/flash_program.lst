ARM GAS  /tmp/ccut5f2g.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"flash_program.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ src/flash_program.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip src/flash_program.o -g -gdwarf-2 -O0 -Wall
  24              	@ -fomit-frame-pointer -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.EraseAllMemory_FLASH,"ax",%progbits
  55              		.align	2
  56              		.global	EraseAllMemory_FLASH
  57              		.code	16
ARM GAS  /tmp/ccut5f2g.s 			page 2


  58              		.thumb_func
  59              		.type	EraseAllMemory_FLASH, %function
  60              	EraseAllMemory_FLASH:
  61              	.LFB20:
  62              		.file 1 "src/flash_program.c"
   1:src/flash_program.c **** /**
   2:src/flash_program.c ****   *****************************************************************************
   3:src/flash_program.c ****   * @title   FLASH_Program.c
   4:src/flash_program.c ****   * @author  CooCox
   5:src/flash_program.c ****   * @date    31 Oct 2012
   6:src/flash_program.c ****   * @brief   This example provides a description of how to program the STM32F
   7:src/flash_program.c ****   *          10x FLASH.
   8:src/flash_program.c ****   *          the result of the programming operation is stored in
   9:src/flash_program.c ****   *          to the MemoryProgramStatus variable.
  10:src/flash_program.c ****   *          Four LEDs are toggled if t
  11:src/flash_program.c ****   *          he flash program has been down.
  12:src/flash_program.c ****   *          This example has been tested on
  13:src/flash_program.c ****   *           KEIL MCBSTM32 board, STM32F103RBT6 device.
  14:src/flash_program.c ****   *******************************************************************************
  15:src/flash_program.c ****   */
  16:src/flash_program.c **** ////// The above comment is automatically generated by CoIDE ///////////////////
  17:src/flash_program.c **** 
  18:src/flash_program.c **** #include "flash_program.h"
  19:src/flash_program.c **** #include "stm32f0xx.h"
  20:src/flash_program.c **** 
  21:src/flash_program.c **** 
  22:src/flash_program.c **** 
  23:src/flash_program.c **** /* Externals variables ---------------------------------------------------------*/
  24:src/flash_program.c **** extern parameters_typedef param_struct;
  25:src/flash_program.c **** //extern mem_bkp_typedef memory_backup;
  26:src/flash_program.c **** //extern filesystem_typedef files;
  27:src/flash_program.c **** //extern unsigned int v_bkp [];
  28:src/flash_program.c **** 
  29:src/flash_program.c **** 
  30:src/flash_program.c **** /* Private typedef -----------------------------------------------------------*/
  31:src/flash_program.c **** 
  32:src/flash_program.c **** 
  33:src/flash_program.c **** /* Private define ------------------------------------------------------------*/
  34:src/flash_program.c **** 
  35:src/flash_program.c **** 
  36:src/flash_program.c **** 
  37:src/flash_program.c **** /* Private macro -------------------------------------------------------------*/
  38:src/flash_program.c **** /* Private variables ---------------------------------------------------------*/
  39:src/flash_program.c **** //unsigned int * pmem = (unsigned int *)0x08007000;	//Sector 7 Page 28
  40:src/flash_program.c **** 
  41:src/flash_program.c **** 
  42:src/flash_program.c **** /* Private function prototypes -----------------------------------------------*/
  43:src/flash_program.c **** /* Private functions ---------------------------------------------------------*/
  44:src/flash_program.c **** //unsigned char ReadMem (void)
  45:src/flash_program.c **** //{
  46:src/flash_program.c **** //	if (*pmem == 0xffffffff)
  47:src/flash_program.c **** //		return 1;
  48:src/flash_program.c **** //	else
  49:src/flash_program.c **** //		return 0;
  50:src/flash_program.c **** //}
  51:src/flash_program.c **** 
  52:src/flash_program.c **** unsigned char EraseAllMemory_FLASH(void)
ARM GAS  /tmp/ccut5f2g.s 			page 3


  53:src/flash_program.c **** {
  63              		.loc 1 53 0
  64              		.cfi_startproc
  65 0000 00B5     		push	{lr}	@
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 4
  68              		.cfi_offset 14, -4
  69 0002 83B0     		sub	sp, sp, #12	@,,
  70              	.LCFI1:
  71              		.cfi_def_cfa_offset 16
  54:src/flash_program.c **** 	unsigned char resp = 0;
  72              		.loc 1 54 0
  73 0004 6B46     		mov	r3, sp	@ tmp127,
  74 0006 0733     		adds	r3, r3, #7	@ tmp115,
  75 0008 0022     		movs	r2, #0	@ tmp116,
  76 000a 1A70     		strb	r2, [r3]	@ tmp117, resp
  55:src/flash_program.c **** 
  56:src/flash_program.c **** 	ErasePage(PAGE31,1);
  77              		.loc 1 56 0
  78 000c 0D4B     		ldr	r3, .L5	@ tmp118,
  79 000e 0121     		movs	r1, #1	@,
  80 0010 1800     		movs	r0, r3	@, tmp118
  81 0012 FFF7FEFF 		bl	ErasePage	@
  57:src/flash_program.c **** 	//reviso si borre
  58:src/flash_program.c **** 
  59:src/flash_program.c **** 	if (*(unsigned int *) PAGE31 == 0xFFFFFFFF)
  82              		.loc 1 59 0
  83 0016 0B4B     		ldr	r3, .L5	@ D.4994,
  84 0018 1B68     		ldr	r3, [r3]	@ D.4995, *_6
  85 001a 0133     		adds	r3, r3, #1	@ tmp126, D.4995,
  86 001c 06D1     		bne	.L2	@,
  60:src/flash_program.c **** 		resp++;
  87              		.loc 1 60 0
  88 001e 6B46     		mov	r3, sp	@ tmp128,
  89 0020 0733     		adds	r3, r3, #7	@ tmp119,
  90 0022 1A78     		ldrb	r2, [r3]	@ D.4993, resp
  91 0024 6B46     		mov	r3, sp	@ tmp129,
  92 0026 0733     		adds	r3, r3, #7	@ tmp120,
  93 0028 0132     		adds	r2, r2, #1	@ tmp121,
  94 002a 1A70     		strb	r2, [r3]	@ tmp122, resp
  95              	.L2:
  61:src/flash_program.c **** 
  62:src/flash_program.c **** 	if (resp)
  96              		.loc 1 62 0
  97 002c 6B46     		mov	r3, sp	@ tmp130,
  98 002e 0733     		adds	r3, r3, #7	@ tmp123,
  99 0030 1B78     		ldrb	r3, [r3]	@ tmp124, resp
 100 0032 002B     		cmp	r3, #0	@ tmp124,
 101 0034 01D0     		beq	.L3	@,
  63:src/flash_program.c **** 		return PASSED;
 102              		.loc 1 63 0
 103 0036 0123     		movs	r3, #1	@ D.4993,
 104 0038 00E0     		b	.L4	@
 105              	.L3:
  64:src/flash_program.c **** 	else
  65:src/flash_program.c **** 		return FAILED;
 106              		.loc 1 65 0
ARM GAS  /tmp/ccut5f2g.s 			page 4


 107 003a 0023     		movs	r3, #0	@ D.4993,
 108              	.L4:
  66:src/flash_program.c **** }
 109              		.loc 1 66 0
 110 003c 1800     		movs	r0, r3	@, <retval>
 111 003e 03B0     		add	sp, sp, #12	@,,
 112              		@ sp needed	@
 113 0040 00BD     		pop	{pc}
 114              	.L6:
 115 0042 C046     		.align	2
 116              	.L5:
 117 0044 007C0008 		.word	134249472
 118              		.cfi_endproc
 119              	.LFE20:
 120              		.size	EraseAllMemory_FLASH, .-EraseAllMemory_FLASH
 121              		.section	.text.BackupPage,"ax",%progbits
 122              		.align	2
 123              		.global	BackupPage
 124              		.code	16
 125              		.thumb_func
 126              		.type	BackupPage, %function
 127              	BackupPage:
 128              	.LFB21:
  67:src/flash_program.c **** 
  68:src/flash_program.c **** /**
  69:src/flash_program.c ****   * @brief    After Reset, the Flash memory Program/Erase Controller is locked.
  70:src/flash_program.c ****   * To unlock it, the FLASH_Unlock function is used. Before programming the
  71:src/flash_program.c ****   * desired addresses, an erase operation is performed using the flash erase
  72:src/flash_program.c ****   * page feature. The erase procedure starts with the calculation of the number
  73:src/flash_program.c ****   * of pages to be used. Then all these pages will be erased one by one by
  74:src/flash_program.c ****   * calling FLASH_ErasePage function.
  75:src/flash_program.c ****   * Once this operation is finished, the programming operation will be performed by
  76:src/flash_program.c ****   * using the FLASH_ProgramWord function. The written data is then checked and the
  77:src/flash_program.c ****   * result of the programming operation is stored into the MemoryProgramStatus variable.
  78:src/flash_program.c ****   * @param  None
  79:src/flash_program.c ****   * @retval None
  80:src/flash_program.c ****   */
  81:src/flash_program.c **** 
  82:src/flash_program.c **** void BackupPage(unsigned int * p, unsigned int * page_addr)
  83:src/flash_program.c **** {
 129              		.loc 1 83 0
 130              		.cfi_startproc
 131 0000 84B0     		sub	sp, sp, #16	@,,
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 16
 134 0002 0190     		str	r0, [sp, #4]	@ p, p
 135 0004 0091     		str	r1, [sp]	@ page_addr, page_addr
  84:src/flash_program.c **** 	unsigned short i;
  85:src/flash_program.c **** 
  86:src/flash_program.c **** 	for (i = 0; i < 255; i++)
 136              		.loc 1 86 0
 137 0006 0E23     		movs	r3, #14	@ tmp118,
 138 0008 6B44     		add	r3, r3, sp	@ tmp118,
 139 000a 0022     		movs	r2, #0	@ tmp119,
 140 000c 1A80     		strh	r2, [r3]	@ tmp120, i
 141 000e 14E0     		b	.L8	@
 142              	.L9:
ARM GAS  /tmp/ccut5f2g.s 			page 5


  87:src/flash_program.c **** 	{
  88:src/flash_program.c **** 		*(p + i) = *(page_addr + i);
 143              		.loc 1 88 0 discriminator 3
 144 0010 0E23     		movs	r3, #14	@ tmp121,
 145 0012 6B44     		add	r3, r3, sp	@ tmp121,
 146 0014 1B88     		ldrh	r3, [r3]	@ D.4996, i
 147 0016 9B00     		lsls	r3, r3, #2	@ D.4996, D.4996,
 148 0018 019A     		ldr	r2, [sp, #4]	@ tmp122, p
 149 001a D318     		adds	r3, r2, r3	@ D.4997, tmp122, D.4996
 150 001c 0E22     		movs	r2, #14	@ tmp123,
 151 001e 6A44     		add	r2, r2, sp	@ tmp123,
 152 0020 1288     		ldrh	r2, [r2]	@ D.4996, i
 153 0022 9200     		lsls	r2, r2, #2	@ D.4996, D.4996,
 154 0024 0099     		ldr	r1, [sp]	@ tmp124, page_addr
 155 0026 8A18     		adds	r2, r1, r2	@ D.4997, tmp124, D.4996
 156 0028 1268     		ldr	r2, [r2]	@ D.4996, *_12
 157 002a 1A60     		str	r2, [r3]	@ D.4996, *_8
  86:src/flash_program.c **** 	{
 158              		.loc 1 86 0 discriminator 3
 159 002c 0E23     		movs	r3, #14	@ tmp125,
 160 002e 6B44     		add	r3, r3, sp	@ tmp125,
 161 0030 1A88     		ldrh	r2, [r3]	@ D.4998, i
 162 0032 0E23     		movs	r3, #14	@ tmp126,
 163 0034 6B44     		add	r3, r3, sp	@ tmp126,
 164 0036 0132     		adds	r2, r2, #1	@ tmp127,
 165 0038 1A80     		strh	r2, [r3]	@ tmp128, i
 166              	.L8:
  86:src/flash_program.c **** 	{
 167              		.loc 1 86 0 is_stmt 0 discriminator 1
 168 003a 0E23     		movs	r3, #14	@ tmp129,
 169 003c 6B44     		add	r3, r3, sp	@ tmp129,
 170 003e 1B88     		ldrh	r3, [r3]	@ tmp130, i
 171 0040 FE2B     		cmp	r3, #254	@ tmp130,
 172 0042 E5D9     		bls	.L9	@,
  89:src/flash_program.c **** 	}
  90:src/flash_program.c **** }
 173              		.loc 1 90 0 is_stmt 1
 174 0044 C046     		nop
 175 0046 04B0     		add	sp, sp, #16	@,,
 176              		@ sp needed	@
 177 0048 7047     		bx	lr
 178              		.cfi_endproc
 179              	.LFE21:
 180              		.size	BackupPage, .-BackupPage
 181 004a C046     		.section	.text.ErasePage,"ax",%progbits
 182              		.align	2
 183              		.global	ErasePage
 184              		.code	16
 185              		.thumb_func
 186              		.type	ErasePage, %function
 187              	ErasePage:
 188              	.LFB22:
  91:src/flash_program.c **** 
  92:src/flash_program.c **** void ErasePage(uint32_t p_addr, unsigned char with_lock)
  93:src/flash_program.c **** {
 189              		.loc 1 93 0
 190              		.cfi_startproc
ARM GAS  /tmp/ccut5f2g.s 			page 6


 191 0000 00B5     		push	{lr}	@
 192              	.LCFI3:
 193              		.cfi_def_cfa_offset 4
 194              		.cfi_offset 14, -4
 195 0002 83B0     		sub	sp, sp, #12	@,,
 196              	.LCFI4:
 197              		.cfi_def_cfa_offset 16
 198 0004 0190     		str	r0, [sp, #4]	@ p_addr, p_addr
 199 0006 0A00     		movs	r2, r1	@ tmp110, with_lock
 200 0008 6B46     		mov	r3, sp	@ tmp116,
 201 000a 0333     		adds	r3, r3, #3	@ tmp111,
 202 000c 1A70     		strb	r2, [r3]	@ tmp112, with_lock
  94:src/flash_program.c **** 	FLASH_Unlock();
 203              		.loc 1 94 0
 204 000e FFF7FEFF 		bl	FLASH_Unlock	@
  95:src/flash_program.c **** 	FLASH_ErasePage(p_addr);
 205              		.loc 1 95 0
 206 0012 019B     		ldr	r3, [sp, #4]	@ tmp113, p_addr
 207 0014 1800     		movs	r0, r3	@, tmp113
 208 0016 FFF7FEFF 		bl	FLASH_ErasePage	@
  96:src/flash_program.c **** 	if (with_lock)
 209              		.loc 1 96 0
 210 001a 6B46     		mov	r3, sp	@ tmp117,
 211 001c 0333     		adds	r3, r3, #3	@ tmp114,
 212 001e 1B78     		ldrb	r3, [r3]	@ tmp115, with_lock
 213 0020 002B     		cmp	r3, #0	@ tmp115,
 214 0022 01D0     		beq	.L12	@,
  97:src/flash_program.c **** 		FLASH_Lock();
 215              		.loc 1 97 0
 216 0024 FFF7FEFF 		bl	FLASH_Lock	@
 217              	.L12:
  98:src/flash_program.c **** }
 218              		.loc 1 98 0
 219 0028 C046     		nop
 220 002a 03B0     		add	sp, sp, #12	@,,
 221              		@ sp needed	@
 222 002c 00BD     		pop	{pc}
 223              		.cfi_endproc
 224              	.LFE22:
 225              		.size	ErasePage, .-ErasePage
 226 002e C046     		.section	.text.FLASH_Unlock,"ax",%progbits
 227              		.align	2
 228              		.global	FLASH_Unlock
 229              		.code	16
 230              		.thumb_func
 231              		.type	FLASH_Unlock, %function
 232              	FLASH_Unlock:
 233              	.LFB23:
  99:src/flash_program.c **** 
 100:src/flash_program.c **** /**
 101:src/flash_program.c ****   * @brief  Unlocks the FLASH control register and program memory access.
 102:src/flash_program.c ****   * @param  None
 103:src/flash_program.c ****   * @retval None
 104:src/flash_program.c ****   */
 105:src/flash_program.c **** void FLASH_Unlock(void)
 106:src/flash_program.c **** {
 234              		.loc 1 106 0
ARM GAS  /tmp/ccut5f2g.s 			page 7


 235              		.cfi_startproc
 107:src/flash_program.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 236              		.loc 1 107 0
 237 0000 064B     		ldr	r3, .L16	@ D.4999,
 238 0002 1B69     		ldr	r3, [r3, #16]	@ D.5000, _2->CR
 239 0004 8022     		movs	r2, #128	@ tmp115,
 240 0006 1340     		ands	r3, r2	@ D.5000, tmp115
 241 0008 05D0     		beq	.L15	@,
 108:src/flash_program.c ****   {
 109:src/flash_program.c ****     /* Unlocking the program memory access */
 110:src/flash_program.c ****     FLASH->KEYR = FLASH_FKEY1;
 242              		.loc 1 110 0
 243 000a 044B     		ldr	r3, .L16	@ D.4999,
 244 000c 044A     		ldr	r2, .L16+4	@ tmp116,
 245 000e 5A60     		str	r2, [r3, #4]	@ tmp116, _6->KEYR
 111:src/flash_program.c ****     FLASH->KEYR = FLASH_FKEY2;
 246              		.loc 1 111 0
 247 0010 024B     		ldr	r3, .L16	@ D.4999,
 248 0012 044A     		ldr	r2, .L16+8	@ tmp117,
 249 0014 5A60     		str	r2, [r3, #4]	@ tmp117, _8->KEYR
 250              	.L15:
 112:src/flash_program.c ****   }
 113:src/flash_program.c **** }
 251              		.loc 1 113 0
 252 0016 C046     		nop
 253              		@ sp needed	@
 254 0018 7047     		bx	lr
 255              	.L17:
 256 001a C046     		.align	2
 257              	.L16:
 258 001c 00200240 		.word	1073881088
 259 0020 23016745 		.word	1164378403
 260 0024 AB89EFCD 		.word	-839939669
 261              		.cfi_endproc
 262              	.LFE23:
 263              		.size	FLASH_Unlock, .-FLASH_Unlock
 264              		.section	.text.FLASH_ErasePage,"ax",%progbits
 265              		.align	2
 266              		.global	FLASH_ErasePage
 267              		.code	16
 268              		.thumb_func
 269              		.type	FLASH_ErasePage, %function
 270              	FLASH_ErasePage:
 271              	.LFB24:
 114:src/flash_program.c **** 
 115:src/flash_program.c **** /**
 116:src/flash_program.c ****   * @brief  Erases a specified page in program memory.
 117:src/flash_program.c ****   * @note   To correctly run this function, the FLASH_Unlock() function must be called before.
 118:src/flash_program.c ****   * @note   Call the FLASH_Lock() to disable the flash memory access (recommended
 119:src/flash_program.c ****   *         to protect the FLASH memory against possible unwanted operation)
 120:src/flash_program.c ****   * @param  Page_Address: The page address in program memory to be erased.
 121:src/flash_program.c ****   * @note   A Page is erased in the Program memory only if the address to load
 122:src/flash_program.c ****   *         is the start address of a page (multiple of 1024 bytes).
 123:src/flash_program.c ****   * @retval FLASH Status: The returned value can be:
 124:src/flash_program.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 125:src/flash_program.c ****   */
 126:src/flash_program.c **** FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
ARM GAS  /tmp/ccut5f2g.s 			page 8


 127:src/flash_program.c **** {
 272              		.loc 1 127 0
 273              		.cfi_startproc
 274 0000 10B5     		push	{r4, lr}	@
 275              	.LCFI5:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 4, -8
 278              		.cfi_offset 14, -4
 279 0002 84B0     		sub	sp, sp, #16	@,,
 280              	.LCFI6:
 281              		.cfi_def_cfa_offset 24
 282 0004 0190     		str	r0, [sp, #4]	@ Page_Address, Page_Address
 128:src/flash_program.c ****   FLASH_Status status = FLASH_COMPLETE;
 283              		.loc 1 128 0
 284 0006 0F23     		movs	r3, #15	@ tmp125,
 285 0008 6B44     		add	r3, r3, sp	@ tmp125,
 286 000a 0422     		movs	r2, #4	@ tmp126,
 287 000c 1A70     		strb	r2, [r3]	@ tmp127, status
 129:src/flash_program.c **** 
 130:src/flash_program.c ****   /* Wait for last operation to be completed */
 131:src/flash_program.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 288              		.loc 1 131 0
 289 000e 0F24     		movs	r4, #15	@ tmp128,
 290 0010 6C44     		add	r4, r4, sp	@ tmp128,
 291 0012 B023     		movs	r3, #176	@ tmp147,
 292 0014 1B03     		lsls	r3, r3, #12	@ tmp129, tmp147,
 293 0016 1800     		movs	r0, r3	@, tmp129
 294 0018 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 295 001c 0300     		movs	r3, r0	@ tmp130,
 296 001e 2370     		strb	r3, [r4]	@ tmp132, status
 132:src/flash_program.c **** 
 133:src/flash_program.c ****   if(status == FLASH_COMPLETE)
 297              		.loc 1 133 0
 298 0020 0F23     		movs	r3, #15	@ tmp133,
 299 0022 6B44     		add	r3, r3, sp	@ tmp133,
 300 0024 1B78     		ldrb	r3, [r3]	@ tmp134, status
 301 0026 042B     		cmp	r3, #4	@ tmp134,
 302 0028 1DD1     		bne	.L19	@,
 134:src/flash_program.c ****   {
 135:src/flash_program.c ****     /* If the previous operation is completed, proceed to erase the page */
 136:src/flash_program.c ****     FLASH->CR |= FLASH_CR_PER;
 303              		.loc 1 136 0
 304 002a 124B     		ldr	r3, .L21	@ D.5001,
 305 002c 114A     		ldr	r2, .L21	@ D.5001,
 306 002e 1269     		ldr	r2, [r2, #16]	@ D.5002, _8->CR
 307 0030 0221     		movs	r1, #2	@ tmp135,
 308 0032 0A43     		orrs	r2, r1	@ D.5002, tmp135
 309 0034 1A61     		str	r2, [r3, #16]	@ D.5002, _7->CR
 137:src/flash_program.c ****     FLASH->AR  = Page_Address;
 310              		.loc 1 137 0
 311 0036 0F4B     		ldr	r3, .L21	@ D.5001,
 312 0038 019A     		ldr	r2, [sp, #4]	@ tmp136, Page_Address
 313 003a 5A61     		str	r2, [r3, #20]	@ tmp136, _12->AR
 138:src/flash_program.c ****     FLASH->CR |= FLASH_CR_STRT;
 314              		.loc 1 138 0
 315 003c 0D4B     		ldr	r3, .L21	@ D.5001,
 316 003e 0D4A     		ldr	r2, .L21	@ D.5001,
ARM GAS  /tmp/ccut5f2g.s 			page 9


 317 0040 1269     		ldr	r2, [r2, #16]	@ D.5002, _16->CR
 318 0042 4021     		movs	r1, #64	@ tmp137,
 319 0044 0A43     		orrs	r2, r1	@ D.5002, tmp137
 320 0046 1A61     		str	r2, [r3, #16]	@ D.5002, _15->CR
 139:src/flash_program.c **** 
 140:src/flash_program.c ****     /* Wait for last operation to be completed */
 141:src/flash_program.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 321              		.loc 1 141 0
 322 0048 0F24     		movs	r4, #15	@ tmp138,
 323 004a 6C44     		add	r4, r4, sp	@ tmp138,
 324 004c B023     		movs	r3, #176	@ tmp146,
 325 004e 1B03     		lsls	r3, r3, #12	@ tmp139, tmp146,
 326 0050 1800     		movs	r0, r3	@, tmp139
 327 0052 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 328 0056 0300     		movs	r3, r0	@ tmp140,
 329 0058 2370     		strb	r3, [r4]	@ tmp142, status
 142:src/flash_program.c **** 
 143:src/flash_program.c ****     /* Disable the PER Bit */
 144:src/flash_program.c ****     FLASH->CR &= ~FLASH_CR_PER;
 330              		.loc 1 144 0
 331 005a 064B     		ldr	r3, .L21	@ D.5001,
 332 005c 054A     		ldr	r2, .L21	@ D.5001,
 333 005e 1269     		ldr	r2, [r2, #16]	@ D.5002, _23->CR
 334 0060 0221     		movs	r1, #2	@ tmp143,
 335 0062 8A43     		bics	r2, r1	@ D.5002, tmp143
 336 0064 1A61     		str	r2, [r3, #16]	@ D.5002, _22->CR
 337              	.L19:
 145:src/flash_program.c ****   }
 146:src/flash_program.c **** 
 147:src/flash_program.c ****   /* Return the Erase Status */
 148:src/flash_program.c ****   return status;
 338              		.loc 1 148 0
 339 0066 0F23     		movs	r3, #15	@ tmp144,
 340 0068 6B44     		add	r3, r3, sp	@ tmp144,
 341 006a 1B78     		ldrb	r3, [r3]	@ D.5003, status
 149:src/flash_program.c **** }
 342              		.loc 1 149 0
 343 006c 1800     		movs	r0, r3	@, <retval>
 344 006e 04B0     		add	sp, sp, #16	@,,
 345              		@ sp needed	@
 346 0070 10BD     		pop	{r4, pc}
 347              	.L22:
 348 0072 C046     		.align	2
 349              	.L21:
 350 0074 00200240 		.word	1073881088
 351              		.cfi_endproc
 352              	.LFE24:
 353              		.size	FLASH_ErasePage, .-FLASH_ErasePage
 354              		.section	.text.FLASH_Lock,"ax",%progbits
 355              		.align	2
 356              		.global	FLASH_Lock
 357              		.code	16
 358              		.thumb_func
 359              		.type	FLASH_Lock, %function
 360              	FLASH_Lock:
 361              	.LFB25:
 150:src/flash_program.c **** 
ARM GAS  /tmp/ccut5f2g.s 			page 10


 151:src/flash_program.c **** /**
 152:src/flash_program.c ****   * @brief  Locks the Program memory access.
 153:src/flash_program.c ****   * @param  None
 154:src/flash_program.c ****   * @retval None
 155:src/flash_program.c ****   */
 156:src/flash_program.c **** void FLASH_Lock(void)
 157:src/flash_program.c **** {
 362              		.loc 1 157 0
 363              		.cfi_startproc
 158:src/flash_program.c ****   /* Set the LOCK Bit to lock the FLASH control register and program memory access */
 159:src/flash_program.c ****   FLASH->CR |= FLASH_CR_LOCK;
 364              		.loc 1 159 0
 365 0000 034B     		ldr	r3, .L24	@ D.5004,
 366 0002 034A     		ldr	r2, .L24	@ D.5004,
 367 0004 1269     		ldr	r2, [r2, #16]	@ D.5005, _2->CR
 368 0006 8021     		movs	r1, #128	@ tmp114,
 369 0008 0A43     		orrs	r2, r1	@ D.5005, tmp114
 370 000a 1A61     		str	r2, [r3, #16]	@ D.5005, _1->CR
 160:src/flash_program.c **** }
 371              		.loc 1 160 0
 372 000c C046     		nop
 373              		@ sp needed	@
 374 000e 7047     		bx	lr
 375              	.L25:
 376              		.align	2
 377              	.L24:
 378 0010 00200240 		.word	1073881088
 379              		.cfi_endproc
 380              	.LFE25:
 381              		.size	FLASH_Lock, .-FLASH_Lock
 382              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 383              		.align	2
 384              		.global	FLASH_ProgramWord
 385              		.code	16
 386              		.thumb_func
 387              		.type	FLASH_ProgramWord, %function
 388              	FLASH_ProgramWord:
 389              	.LFB26:
 161:src/flash_program.c **** 
 162:src/flash_program.c **** /**
 163:src/flash_program.c ****   * @brief  Programs a word at a specified address.
 164:src/flash_program.c ****   * @note   To correctly run this function, the FLASH_Unlock() function must be called before.
 165:src/flash_program.c ****   * @note   Call the FLASH_Lock() to disable the flash memory access (recommended
 166:src/flash_program.c ****   *         to protect the FLASH memory against possible unwanted operation)
 167:src/flash_program.c ****   * @param  Address: specifies the address to be programmed.
 168:src/flash_program.c ****   * @param  Data: specifies the data to be programmed.
 169:src/flash_program.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 170:src/flash_program.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 171:src/flash_program.c ****   */
 172:src/flash_program.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 173:src/flash_program.c **** {
 390              		.loc 1 173 0
 391              		.cfi_startproc
 392 0000 10B5     		push	{r4, lr}	@
 393              	.LCFI7:
 394              		.cfi_def_cfa_offset 8
 395              		.cfi_offset 4, -8
ARM GAS  /tmp/ccut5f2g.s 			page 11


 396              		.cfi_offset 14, -4
 397 0002 84B0     		sub	sp, sp, #16	@,,
 398              	.LCFI8:
 399              		.cfi_def_cfa_offset 24
 400 0004 0190     		str	r0, [sp, #4]	@ Address, Address
 401 0006 0091     		str	r1, [sp]	@ Data, Data
 174:src/flash_program.c ****   FLASH_Status status = FLASH_COMPLETE;
 402              		.loc 1 174 0
 403 0008 0F23     		movs	r3, #15	@ tmp131,
 404 000a 6B44     		add	r3, r3, sp	@ tmp131,
 405 000c 0422     		movs	r2, #4	@ tmp132,
 406 000e 1A70     		strb	r2, [r3]	@ tmp133, status
 175:src/flash_program.c ****   __IO uint32_t tmp = 0;
 407              		.loc 1 175 0
 408 0010 0023     		movs	r3, #0	@ tmp134,
 409 0012 0293     		str	r3, [sp, #8]	@ tmp134, tmp
 176:src/flash_program.c **** 
 177:src/flash_program.c ****     /* Wait for last operation to be completed */
 178:src/flash_program.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 410              		.loc 1 178 0
 411 0014 0F24     		movs	r4, #15	@ tmp135,
 412 0016 6C44     		add	r4, r4, sp	@ tmp135,
 413 0018 B023     		movs	r3, #176	@ tmp167,
 414 001a 1B03     		lsls	r3, r3, #12	@ tmp136, tmp167,
 415 001c 1800     		movs	r0, r3	@, tmp136
 416 001e FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 417 0022 0300     		movs	r3, r0	@ tmp137,
 418 0024 2370     		strb	r3, [r4]	@ tmp139, status
 179:src/flash_program.c **** 
 180:src/flash_program.c ****   if(status == FLASH_COMPLETE)
 419              		.loc 1 180 0
 420 0026 0F23     		movs	r3, #15	@ tmp140,
 421 0028 6B44     		add	r3, r3, sp	@ tmp140,
 422 002a 1B78     		ldrb	r3, [r3]	@ tmp141, status
 423 002c 042B     		cmp	r3, #4	@ tmp141,
 424 002e 36D1     		bne	.L27	@,
 181:src/flash_program.c ****   {
 182:src/flash_program.c ****     /* If the previous operation is completed, proceed to program the new first
 183:src/flash_program.c ****     half word */
 184:src/flash_program.c ****     FLASH->CR |= FLASH_CR_PG;
 425              		.loc 1 184 0
 426 0030 1E4B     		ldr	r3, .L30	@ D.5006,
 427 0032 1E4A     		ldr	r2, .L30	@ D.5006,
 428 0034 1269     		ldr	r2, [r2, #16]	@ D.5007, _9->CR
 429 0036 0121     		movs	r1, #1	@ tmp142,
 430 0038 0A43     		orrs	r2, r1	@ D.5007, tmp142
 431 003a 1A61     		str	r2, [r3, #16]	@ D.5007, _8->CR
 185:src/flash_program.c **** 
 186:src/flash_program.c ****     *(__IO uint16_t*)Address = (uint16_t)Data;
 432              		.loc 1 186 0
 433 003c 019B     		ldr	r3, [sp, #4]	@ D.5008, Address
 434 003e 009A     		ldr	r2, [sp]	@ tmp144, Data
 435 0040 92B2     		uxth	r2, r2	@ D.5009, tmp143
 436 0042 1A80     		strh	r2, [r3]	@ tmp145, *_14
 187:src/flash_program.c **** 
 188:src/flash_program.c ****     /* Wait for last operation to be completed */
 189:src/flash_program.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
ARM GAS  /tmp/ccut5f2g.s 			page 12


 437              		.loc 1 189 0
 438 0044 0F24     		movs	r4, #15	@ tmp146,
 439 0046 6C44     		add	r4, r4, sp	@ tmp146,
 440 0048 B023     		movs	r3, #176	@ tmp166,
 441 004a 1B03     		lsls	r3, r3, #12	@ tmp147, tmp166,
 442 004c 1800     		movs	r0, r3	@, tmp147
 443 004e FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 444 0052 0300     		movs	r3, r0	@ tmp148,
 445 0054 2370     		strb	r3, [r4]	@ tmp150, status
 190:src/flash_program.c **** 
 191:src/flash_program.c ****     if(status == FLASH_COMPLETE)
 446              		.loc 1 191 0
 447 0056 0F23     		movs	r3, #15	@ tmp151,
 448 0058 6B44     		add	r3, r3, sp	@ tmp151,
 449 005a 1B78     		ldrb	r3, [r3]	@ tmp152, status
 450 005c 042B     		cmp	r3, #4	@ tmp152,
 451 005e 18D1     		bne	.L28	@,
 192:src/flash_program.c ****     {
 193:src/flash_program.c ****       /* If the previous operation is completed, proceed to program the new second
 194:src/flash_program.c ****       half word */
 195:src/flash_program.c ****       tmp = Address + 2;
 452              		.loc 1 195 0
 453 0060 019B     		ldr	r3, [sp, #4]	@ tmp153, Address
 454 0062 0233     		adds	r3, r3, #2	@ D.5007,
 455 0064 0293     		str	r3, [sp, #8]	@ D.5007, tmp
 196:src/flash_program.c **** 
 197:src/flash_program.c ****       *(__IO uint16_t*) tmp = Data >> 16;
 456              		.loc 1 197 0
 457 0066 029B     		ldr	r3, [sp, #8]	@ D.5007, tmp
 458 0068 1A00     		movs	r2, r3	@ D.5008, D.5007
 459 006a 009B     		ldr	r3, [sp]	@ tmp154, Data
 460 006c 1B0C     		lsrs	r3, r3, #16	@ D.5007, tmp154,
 461 006e 9BB2     		uxth	r3, r3	@ D.5009, D.5007
 462 0070 1380     		strh	r3, [r2]	@ tmp155, *_23
 198:src/flash_program.c **** 
 199:src/flash_program.c ****       /* Wait for last operation to be completed */
 200:src/flash_program.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 463              		.loc 1 200 0
 464 0072 0F24     		movs	r4, #15	@ tmp156,
 465 0074 6C44     		add	r4, r4, sp	@ tmp156,
 466 0076 B023     		movs	r3, #176	@ tmp165,
 467 0078 1B03     		lsls	r3, r3, #12	@ tmp157, tmp165,
 468 007a 1800     		movs	r0, r3	@, tmp157
 469 007c FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 470 0080 0300     		movs	r3, r0	@ tmp158,
 471 0082 2370     		strb	r3, [r4]	@ tmp160, status
 201:src/flash_program.c **** 
 202:src/flash_program.c ****       /* Disable the PG Bit */
 203:src/flash_program.c ****       FLASH->CR &= ~FLASH_CR_PG;
 472              		.loc 1 203 0
 473 0084 094B     		ldr	r3, .L30	@ D.5006,
 474 0086 094A     		ldr	r2, .L30	@ D.5006,
 475 0088 1269     		ldr	r2, [r2, #16]	@ D.5007, _30->CR
 476 008a 0121     		movs	r1, #1	@ tmp161,
 477 008c 8A43     		bics	r2, r1	@ D.5007, tmp161
 478 008e 1A61     		str	r2, [r3, #16]	@ D.5007, _29->CR
 479 0090 05E0     		b	.L27	@
ARM GAS  /tmp/ccut5f2g.s 			page 13


 480              	.L28:
 204:src/flash_program.c ****     }
 205:src/flash_program.c ****     else
 206:src/flash_program.c ****     {
 207:src/flash_program.c ****       /* Disable the PG Bit */
 208:src/flash_program.c ****       FLASH->CR &= ~FLASH_CR_PG;
 481              		.loc 1 208 0
 482 0092 064B     		ldr	r3, .L30	@ D.5006,
 483 0094 054A     		ldr	r2, .L30	@ D.5006,
 484 0096 1269     		ldr	r2, [r2, #16]	@ D.5007, _35->CR
 485 0098 0121     		movs	r1, #1	@ tmp162,
 486 009a 8A43     		bics	r2, r1	@ D.5007, tmp162
 487 009c 1A61     		str	r2, [r3, #16]	@ D.5007, _34->CR
 488              	.L27:
 209:src/flash_program.c ****     }
 210:src/flash_program.c ****   }
 211:src/flash_program.c **** 
 212:src/flash_program.c ****   /* Return the Program Status */
 213:src/flash_program.c ****   return status;
 489              		.loc 1 213 0
 490 009e 0F23     		movs	r3, #15	@ tmp163,
 491 00a0 6B44     		add	r3, r3, sp	@ tmp163,
 492 00a2 1B78     		ldrb	r3, [r3]	@ D.5010, status
 214:src/flash_program.c **** }
 493              		.loc 1 214 0
 494 00a4 1800     		movs	r0, r3	@, <retval>
 495 00a6 04B0     		add	sp, sp, #16	@,,
 496              		@ sp needed	@
 497 00a8 10BD     		pop	{r4, pc}
 498              	.L31:
 499 00aa C046     		.align	2
 500              	.L30:
 501 00ac 00200240 		.word	1073881088
 502              		.cfi_endproc
 503              	.LFE26:
 504              		.size	FLASH_ProgramWord, .-FLASH_ProgramWord
 505              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 506              		.align	2
 507              		.global	FLASH_WaitForLastOperation
 508              		.code	16
 509              		.thumb_func
 510              		.type	FLASH_WaitForLastOperation, %function
 511              	FLASH_WaitForLastOperation:
 512              	.LFB27:
 215:src/flash_program.c **** 
 216:src/flash_program.c **** /**
 217:src/flash_program.c ****   * @brief  Waits for a FLASH operation to complete or a TIMEOUT to occur.
 218:src/flash_program.c ****   * @param  Timeout: FLASH programming Timeout
 219:src/flash_program.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY,
 220:src/flash_program.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 221:src/flash_program.c ****   */
 222:src/flash_program.c **** FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
 223:src/flash_program.c **** {
 513              		.loc 1 223 0
 514              		.cfi_startproc
 515 0000 10B5     		push	{r4, lr}	@
 516              	.LCFI9:
ARM GAS  /tmp/ccut5f2g.s 			page 14


 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 4, -8
 519              		.cfi_offset 14, -4
 520 0002 84B0     		sub	sp, sp, #16	@,,
 521              	.LCFI10:
 522              		.cfi_def_cfa_offset 24
 523 0004 0190     		str	r0, [sp, #4]	@ Timeout, Timeout
 224:src/flash_program.c ****   FLASH_Status status = FLASH_COMPLETE;
 524              		.loc 1 224 0
 525 0006 0F23     		movs	r3, #15	@ tmp112,
 526 0008 6B44     		add	r3, r3, sp	@ tmp112,
 527 000a 0422     		movs	r2, #4	@ tmp113,
 528 000c 1A70     		strb	r2, [r3]	@ tmp114, status
 225:src/flash_program.c **** 
 226:src/flash_program.c ****   /* Check for the FLASH Status */
 227:src/flash_program.c ****   status = FLASH_GetStatus();
 529              		.loc 1 227 0
 530 000e 0F24     		movs	r4, #15	@ tmp115,
 531 0010 6C44     		add	r4, r4, sp	@ tmp115,
 532 0012 FFF7FEFF 		bl	FLASH_GetStatus	@
 533 0016 0300     		movs	r3, r0	@ tmp116,
 534 0018 2370     		strb	r3, [r4]	@ tmp118, status
 228:src/flash_program.c **** 
 229:src/flash_program.c ****   /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
 230:src/flash_program.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 535              		.loc 1 230 0
 536 001a 08E0     		b	.L33	@
 537              	.L35:
 231:src/flash_program.c ****   {
 232:src/flash_program.c ****     status = FLASH_GetStatus();
 538              		.loc 1 232 0
 539 001c 0F24     		movs	r4, #15	@ tmp119,
 540 001e 6C44     		add	r4, r4, sp	@ tmp119,
 541 0020 FFF7FEFF 		bl	FLASH_GetStatus	@
 542 0024 0300     		movs	r3, r0	@ tmp120,
 543 0026 2370     		strb	r3, [r4]	@ tmp122, status
 233:src/flash_program.c ****     Timeout--;
 544              		.loc 1 233 0
 545 0028 019B     		ldr	r3, [sp, #4]	@ tmp124, Timeout
 546 002a 013B     		subs	r3, r3, #1	@ tmp123,
 547 002c 0193     		str	r3, [sp, #4]	@ tmp123, Timeout
 548              	.L33:
 230:src/flash_program.c ****   {
 549              		.loc 1 230 0
 550 002e 0F23     		movs	r3, #15	@ tmp125,
 551 0030 6B44     		add	r3, r3, sp	@ tmp125,
 552 0032 1B78     		ldrb	r3, [r3]	@ tmp126, status
 553 0034 012B     		cmp	r3, #1	@ tmp126,
 554 0036 02D1     		bne	.L34	@,
 230:src/flash_program.c ****   {
 555              		.loc 1 230 0 is_stmt 0 discriminator 1
 556 0038 019B     		ldr	r3, [sp, #4]	@ tmp127, Timeout
 557 003a 002B     		cmp	r3, #0	@ tmp127,
 558 003c EED1     		bne	.L35	@,
 559              	.L34:
 234:src/flash_program.c ****   }
 235:src/flash_program.c **** 
ARM GAS  /tmp/ccut5f2g.s 			page 15


 236:src/flash_program.c ****   if(Timeout == 0x00 )
 560              		.loc 1 236 0 is_stmt 1
 561 003e 019B     		ldr	r3, [sp, #4]	@ tmp128, Timeout
 562 0040 002B     		cmp	r3, #0	@ tmp128,
 563 0042 03D1     		bne	.L36	@,
 237:src/flash_program.c ****   {
 238:src/flash_program.c ****     status = FLASH_TIMEOUT;
 564              		.loc 1 238 0
 565 0044 0F23     		movs	r3, #15	@ tmp129,
 566 0046 6B44     		add	r3, r3, sp	@ tmp129,
 567 0048 0522     		movs	r2, #5	@ tmp130,
 568 004a 1A70     		strb	r2, [r3]	@ tmp131, status
 569              	.L36:
 239:src/flash_program.c ****   }
 240:src/flash_program.c ****   /* Return the operation status */
 241:src/flash_program.c ****   return status;
 570              		.loc 1 241 0
 571 004c 0F23     		movs	r3, #15	@ tmp132,
 572 004e 6B44     		add	r3, r3, sp	@ tmp132,
 573 0050 1B78     		ldrb	r3, [r3]	@ D.5011, status
 242:src/flash_program.c **** }
 574              		.loc 1 242 0
 575 0052 1800     		movs	r0, r3	@, <retval>
 576 0054 04B0     		add	sp, sp, #16	@,,
 577              		@ sp needed	@
 578 0056 10BD     		pop	{r4, pc}
 579              		.cfi_endproc
 580              	.LFE27:
 581              		.size	FLASH_WaitForLastOperation, .-FLASH_WaitForLastOperation
 582              		.section	.text.FLASH_GetStatus,"ax",%progbits
 583              		.align	2
 584              		.global	FLASH_GetStatus
 585              		.code	16
 586              		.thumb_func
 587              		.type	FLASH_GetStatus, %function
 588              	FLASH_GetStatus:
 589              	.LFB28:
 243:src/flash_program.c **** 
 244:src/flash_program.c **** /**
 245:src/flash_program.c ****   * @brief  Returns the FLASH Status.
 246:src/flash_program.c ****   * @param  None
 247:src/flash_program.c ****   * @retval FLASH Status: The returned value can be:
 248:src/flash_program.c ****   *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
 249:src/flash_program.c ****   */
 250:src/flash_program.c **** FLASH_Status FLASH_GetStatus(void)
 251:src/flash_program.c **** {
 590              		.loc 1 251 0
 591              		.cfi_startproc
 592 0000 82B0     		sub	sp, sp, #8	@,,
 593              	.LCFI11:
 594              		.cfi_def_cfa_offset 8
 252:src/flash_program.c ****   FLASH_Status FLASHstatus = FLASH_COMPLETE;
 595              		.loc 1 252 0
 596 0002 6B46     		mov	r3, sp	@ tmp141,
 597 0004 0733     		adds	r3, r3, #7	@ tmp121,
 598 0006 0422     		movs	r2, #4	@ tmp122,
 599 0008 1A70     		strb	r2, [r3]	@ tmp123, FLASHstatus
ARM GAS  /tmp/ccut5f2g.s 			page 16


 253:src/flash_program.c **** 
 254:src/flash_program.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY)
 600              		.loc 1 254 0
 601 000a 144B     		ldr	r3, .L44	@ D.5012,
 602 000c DB68     		ldr	r3, [r3, #12]	@ D.5013, _3->SR
 603 000e 0122     		movs	r2, #1	@ tmp124,
 604 0010 1340     		ands	r3, r2	@ D.5013, tmp124
 605 0012 04D0     		beq	.L39	@,
 255:src/flash_program.c ****   {
 256:src/flash_program.c ****     FLASHstatus = FLASH_BUSY;
 606              		.loc 1 256 0
 607 0014 6B46     		mov	r3, sp	@ tmp142,
 608 0016 0733     		adds	r3, r3, #7	@ tmp125,
 609 0018 0122     		movs	r2, #1	@ tmp126,
 610 001a 1A70     		strb	r2, [r3]	@ tmp127, FLASHstatus
 611 001c 17E0     		b	.L40	@
 612              	.L39:
 257:src/flash_program.c ****   }
 258:src/flash_program.c ****   else
 259:src/flash_program.c ****   {
 260:src/flash_program.c ****     if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 613              		.loc 1 260 0
 614 001e 0F4B     		ldr	r3, .L44	@ D.5012,
 615 0020 DB68     		ldr	r3, [r3, #12]	@ D.5013, _8->SR
 616 0022 1022     		movs	r2, #16	@ tmp128,
 617 0024 1340     		ands	r3, r2	@ D.5013, tmp128
 618 0026 04D0     		beq	.L41	@,
 261:src/flash_program.c ****     {
 262:src/flash_program.c ****       FLASHstatus = FLASH_ERROR_WRP;
 619              		.loc 1 262 0
 620 0028 6B46     		mov	r3, sp	@ tmp143,
 621 002a 0733     		adds	r3, r3, #7	@ tmp129,
 622 002c 0222     		movs	r2, #2	@ tmp130,
 623 002e 1A70     		strb	r2, [r3]	@ tmp131, FLASHstatus
 624 0030 0DE0     		b	.L40	@
 625              	.L41:
 263:src/flash_program.c ****     }
 264:src/flash_program.c ****     else
 265:src/flash_program.c ****     {
 266:src/flash_program.c ****       if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 626              		.loc 1 266 0
 627 0032 0A4B     		ldr	r3, .L44	@ D.5012,
 628 0034 DB68     		ldr	r3, [r3, #12]	@ D.5013, _12->SR
 629 0036 0422     		movs	r2, #4	@ tmp132,
 630 0038 1340     		ands	r3, r2	@ D.5013, tmp132
 631 003a 04D0     		beq	.L42	@,
 267:src/flash_program.c ****       {
 268:src/flash_program.c ****         FLASHstatus = FLASH_ERROR_PROGRAM;
 632              		.loc 1 268 0
 633 003c 6B46     		mov	r3, sp	@ tmp144,
 634 003e 0733     		adds	r3, r3, #7	@ tmp133,
 635 0040 0322     		movs	r2, #3	@ tmp134,
 636 0042 1A70     		strb	r2, [r3]	@ tmp135, FLASHstatus
 637 0044 03E0     		b	.L40	@
 638              	.L42:
 269:src/flash_program.c ****       }
 270:src/flash_program.c ****       else
ARM GAS  /tmp/ccut5f2g.s 			page 17


 271:src/flash_program.c ****       {
 272:src/flash_program.c ****         FLASHstatus = FLASH_COMPLETE;
 639              		.loc 1 272 0
 640 0046 6B46     		mov	r3, sp	@ tmp145,
 641 0048 0733     		adds	r3, r3, #7	@ tmp136,
 642 004a 0422     		movs	r2, #4	@ tmp137,
 643 004c 1A70     		strb	r2, [r3]	@ tmp138, FLASHstatus
 644              	.L40:
 273:src/flash_program.c ****       }
 274:src/flash_program.c ****     }
 275:src/flash_program.c ****   }
 276:src/flash_program.c ****   /* Return the FLASH Status */
 277:src/flash_program.c ****   return FLASHstatus;
 645              		.loc 1 277 0
 646 004e 6B46     		mov	r3, sp	@ tmp146,
 647 0050 0733     		adds	r3, r3, #7	@ tmp139,
 648 0052 1B78     		ldrb	r3, [r3]	@ D.5014, FLASHstatus
 278:src/flash_program.c **** }
 649              		.loc 1 278 0
 650 0054 1800     		movs	r0, r3	@, <retval>
 651 0056 02B0     		add	sp, sp, #8	@,,
 652              		@ sp needed	@
 653 0058 7047     		bx	lr
 654              	.L45:
 655 005a C046     		.align	2
 656              	.L44:
 657 005c 00200240 		.word	1073881088
 658              		.cfi_endproc
 659              	.LFE28:
 660              		.size	FLASH_GetStatus, .-FLASH_GetStatus
 661              		.section	.text.WritePage,"ax",%progbits
 662              		.align	2
 663              		.global	WritePage
 664              		.code	16
 665              		.thumb_func
 666              		.type	WritePage, %function
 667              	WritePage:
 668              	.LFB29:
 279:src/flash_program.c **** 
 280:src/flash_program.c **** unsigned char WritePage(unsigned int * p, uint32_t p_addr, unsigned char with_lock)
 281:src/flash_program.c **** {
 669              		.loc 1 281 0
 670              		.cfi_startproc
 671 0000 00B5     		push	{lr}	@
 672              	.LCFI12:
 673              		.cfi_def_cfa_offset 4
 674              		.cfi_offset 14, -4
 675 0002 87B0     		sub	sp, sp, #28	@,,
 676              	.LCFI13:
 677              		.cfi_def_cfa_offset 32
 678 0004 0390     		str	r0, [sp, #12]	@ p, p
 679 0006 0291     		str	r1, [sp, #8]	@ p_addr, p_addr
 680 0008 6B46     		mov	r3, sp	@ tmp160,
 681 000a 0733     		adds	r3, r3, #7	@ tmp127,
 682 000c 1A70     		strb	r2, [r3]	@ tmp128, with_lock
 282:src/flash_program.c **** 	unsigned short i;
 283:src/flash_program.c **** 	unsigned int * p_verif;
ARM GAS  /tmp/ccut5f2g.s 			page 18


 284:src/flash_program.c **** 
 285:src/flash_program.c **** 	p_verif = (unsigned int *) p_addr;
 683              		.loc 1 285 0
 684 000e 029B     		ldr	r3, [sp, #8]	@ tmp129, p_addr
 685 0010 0493     		str	r3, [sp, #16]	@ tmp129, p_verif
 286:src/flash_program.c **** 
 287:src/flash_program.c **** 	for (i = 0; i < 255; i++)
 686              		.loc 1 287 0
 687 0012 1623     		movs	r3, #22	@ tmp130,
 688 0014 6B44     		add	r3, r3, sp	@ tmp130,
 689 0016 0022     		movs	r2, #0	@ tmp131,
 690 0018 1A80     		strh	r2, [r3]	@ tmp132, i
 691 001a 15E0     		b	.L47	@
 692              	.L48:
 288:src/flash_program.c **** 	{
 289:src/flash_program.c **** 		FLASH_ProgramWord(p_addr, *(p + i));
 693              		.loc 1 289 0 discriminator 3
 694 001c 1623     		movs	r3, #22	@ tmp133,
 695 001e 6B44     		add	r3, r3, sp	@ tmp133,
 696 0020 1B88     		ldrh	r3, [r3]	@ D.5016, i
 697 0022 9B00     		lsls	r3, r3, #2	@ D.5016, D.5016,
 698 0024 039A     		ldr	r2, [sp, #12]	@ tmp134, p
 699 0026 D318     		adds	r3, r2, r3	@ D.5017, tmp134, D.5016
 700 0028 1A68     		ldr	r2, [r3]	@ D.5016, *_14
 701 002a 029B     		ldr	r3, [sp, #8]	@ tmp135, p_addr
 702 002c 1100     		movs	r1, r2	@, D.5016
 703 002e 1800     		movs	r0, r3	@, tmp135
 704 0030 FFF7FEFF 		bl	FLASH_ProgramWord	@
 290:src/flash_program.c **** 		p_addr += 4;
 705              		.loc 1 290 0 discriminator 3
 706 0034 029B     		ldr	r3, [sp, #8]	@ tmp137, p_addr
 707 0036 0433     		adds	r3, r3, #4	@ tmp136,
 708 0038 0293     		str	r3, [sp, #8]	@ tmp136, p_addr
 287:src/flash_program.c **** 	{
 709              		.loc 1 287 0 discriminator 3
 710 003a 1623     		movs	r3, #22	@ tmp138,
 711 003c 6B44     		add	r3, r3, sp	@ tmp138,
 712 003e 1A88     		ldrh	r2, [r3]	@ D.5018, i
 713 0040 1623     		movs	r3, #22	@ tmp139,
 714 0042 6B44     		add	r3, r3, sp	@ tmp139,
 715 0044 0132     		adds	r2, r2, #1	@ tmp140,
 716 0046 1A80     		strh	r2, [r3]	@ tmp141, i
 717              	.L47:
 287:src/flash_program.c **** 	{
 718              		.loc 1 287 0 is_stmt 0 discriminator 1
 719 0048 1623     		movs	r3, #22	@ tmp142,
 720 004a 6B44     		add	r3, r3, sp	@ tmp142,
 721 004c 1B88     		ldrh	r3, [r3]	@ tmp143, i
 722 004e FE2B     		cmp	r3, #254	@ tmp143,
 723 0050 E4D9     		bls	.L48	@,
 291:src/flash_program.c **** 	}
 292:src/flash_program.c **** 
 293:src/flash_program.c **** 	if (with_lock)
 724              		.loc 1 293 0 is_stmt 1
 725 0052 6B46     		mov	r3, sp	@ tmp166,
 726 0054 0733     		adds	r3, r3, #7	@ tmp144,
 727 0056 1B78     		ldrb	r3, [r3]	@ tmp145, with_lock
ARM GAS  /tmp/ccut5f2g.s 			page 19


 728 0058 002B     		cmp	r3, #0	@ tmp145,
 729 005a 01D0     		beq	.L49	@,
 294:src/flash_program.c **** 		FLASH_Lock();
 730              		.loc 1 294 0
 731 005c FFF7FEFF 		bl	FLASH_Lock	@
 732              	.L49:
 295:src/flash_program.c **** 
 296:src/flash_program.c **** 	//verifico memoria
 297:src/flash_program.c **** 	for (i = 0; i < 255; i++)
 733              		.loc 1 297 0
 734 0060 1623     		movs	r3, #22	@ tmp146,
 735 0062 6B44     		add	r3, r3, sp	@ tmp146,
 736 0064 0022     		movs	r2, #0	@ tmp147,
 737 0066 1A80     		strh	r2, [r3]	@ tmp148, i
 738 0068 18E0     		b	.L50	@
 739              	.L53:
 298:src/flash_program.c **** 	{
 299:src/flash_program.c **** 		if (*(p_verif + i) != *(p + i))
 740              		.loc 1 299 0
 741 006a 1623     		movs	r3, #22	@ tmp149,
 742 006c 6B44     		add	r3, r3, sp	@ tmp149,
 743 006e 1B88     		ldrh	r3, [r3]	@ D.5016, i
 744 0070 9B00     		lsls	r3, r3, #2	@ D.5016, D.5016,
 745 0072 049A     		ldr	r2, [sp, #16]	@ tmp150, p_verif
 746 0074 D318     		adds	r3, r2, r3	@ D.5017, tmp150, D.5016
 747 0076 1A68     		ldr	r2, [r3]	@ D.5016, *_25
 748 0078 1623     		movs	r3, #22	@ tmp151,
 749 007a 6B44     		add	r3, r3, sp	@ tmp151,
 750 007c 1B88     		ldrh	r3, [r3]	@ D.5016, i
 751 007e 9B00     		lsls	r3, r3, #2	@ D.5016, D.5016,
 752 0080 0399     		ldr	r1, [sp, #12]	@ tmp152, p
 753 0082 CB18     		adds	r3, r1, r3	@ D.5017, tmp152, D.5016
 754 0084 1B68     		ldr	r3, [r3]	@ D.5016, *_29
 755 0086 9A42     		cmp	r2, r3	@ D.5016, D.5016
 756 0088 01D0     		beq	.L51	@,
 300:src/flash_program.c **** 			return FAILED;
 757              		.loc 1 300 0
 758 008a 0023     		movs	r3, #0	@ D.5015,
 759 008c 0CE0     		b	.L52	@
 760              	.L51:
 297:src/flash_program.c **** 	{
 761              		.loc 1 297 0 discriminator 2
 762 008e 1623     		movs	r3, #22	@ tmp153,
 763 0090 6B44     		add	r3, r3, sp	@ tmp153,
 764 0092 1A88     		ldrh	r2, [r3]	@ D.5018, i
 765 0094 1623     		movs	r3, #22	@ tmp154,
 766 0096 6B44     		add	r3, r3, sp	@ tmp154,
 767 0098 0132     		adds	r2, r2, #1	@ tmp155,
 768 009a 1A80     		strh	r2, [r3]	@ tmp156, i
 769              	.L50:
 297:src/flash_program.c **** 	{
 770              		.loc 1 297 0 is_stmt 0 discriminator 1
 771 009c 1623     		movs	r3, #22	@ tmp157,
 772 009e 6B44     		add	r3, r3, sp	@ tmp157,
 773 00a0 1B88     		ldrh	r3, [r3]	@ tmp158, i
 774 00a2 FE2B     		cmp	r3, #254	@ tmp158,
 775 00a4 E1D9     		bls	.L53	@,
ARM GAS  /tmp/ccut5f2g.s 			page 20


 301:src/flash_program.c **** 	}
 302:src/flash_program.c **** 	return PASSED;
 776              		.loc 1 302 0 is_stmt 1
 777 00a6 0123     		movs	r3, #1	@ D.5015,
 778              	.L52:
 303:src/flash_program.c **** }
 779              		.loc 1 303 0
 780 00a8 1800     		movs	r0, r3	@, <retval>
 781 00aa 07B0     		add	sp, sp, #28	@,,
 782              		@ sp needed	@
 783 00ac 00BD     		pop	{pc}
 784              		.cfi_endproc
 785              	.LFE29:
 786              		.size	WritePage, .-WritePage
 787 00ae C046     		.section	.text.WriteConfigurations,"ax",%progbits
 788              		.align	2
 789              		.global	WriteConfigurations
 790              		.code	16
 791              		.thumb_func
 792              		.type	WriteConfigurations, %function
 793              	WriteConfigurations:
 794              	.LFB30:
 304:src/flash_program.c **** 
 305:src/flash_program.c **** 
 306:src/flash_program.c **** unsigned char WriteConfigurations (void)
 307:src/flash_program.c **** {
 795              		.loc 1 307 0
 796              		.cfi_startproc
 797 0000 00B5     		push	{lr}	@
 798              	.LCFI14:
 799              		.cfi_def_cfa_offset 4
 800              		.cfi_offset 14, -4
 801 0002 83B0     		sub	sp, sp, #12	@,,
 802              	.LCFI15:
 803              		.cfi_def_cfa_offset 16
 308:src/flash_program.c **** 	parameters_typedef * p_param;
 309:src/flash_program.c **** 
 310:src/flash_program.c **** 	ErasePage(PAGE31,0);
 804              		.loc 1 310 0
 805 0004 0A4B     		ldr	r3, .L57	@ tmp113,
 806 0006 0021     		movs	r1, #0	@,
 807 0008 1800     		movs	r0, r3	@, tmp113
 808 000a FFF7FEFF 		bl	ErasePage	@
 311:src/flash_program.c **** 
 312:src/flash_program.c **** 	//update en memoria
 313:src/flash_program.c **** 	p_param = &param_struct;
 809              		.loc 1 313 0
 810 000e 094B     		ldr	r3, .L57+4	@ tmp114,
 811 0010 0193     		str	r3, [sp, #4]	@ tmp114, p_param
 314:src/flash_program.c **** 
 315:src/flash_program.c **** 	if (WriteFlash((unsigned int *) p_param, PAGE31, 1, sizeof(parameters_typedef)) == FAILED)
 812              		.loc 1 315 0
 813 0012 0749     		ldr	r1, .L57	@ tmp115,
 814 0014 0198     		ldr	r0, [sp, #4]	@ tmp116, p_param
 815 0016 5423     		movs	r3, #84	@,
 816 0018 0122     		movs	r2, #1	@,
 817 001a FFF7FEFF 		bl	WriteFlash	@
ARM GAS  /tmp/ccut5f2g.s 			page 21


 818 001e 031E     		subs	r3, r0, #0	@ tmp117,,
 819 0020 01D1     		bne	.L55	@,
 316:src/flash_program.c **** 		return FAILED;
 820              		.loc 1 316 0
 821 0022 0023     		movs	r3, #0	@ D.5019,
 822 0024 00E0     		b	.L56	@
 823              	.L55:
 317:src/flash_program.c **** 
 318:src/flash_program.c **** 	return PASSED;
 824              		.loc 1 318 0
 825 0026 0123     		movs	r3, #1	@ D.5019,
 826              	.L56:
 319:src/flash_program.c **** }
 827              		.loc 1 319 0
 828 0028 1800     		movs	r0, r3	@, <retval>
 829 002a 03B0     		add	sp, sp, #12	@,,
 830              		@ sp needed	@
 831 002c 00BD     		pop	{pc}
 832              	.L58:
 833 002e C046     		.align	2
 834              	.L57:
 835 0030 007C0008 		.word	134249472
 836 0034 00000000 		.word	param_struct
 837              		.cfi_endproc
 838              	.LFE30:
 839              		.size	WriteConfigurations, .-WriteConfigurations
 840              		.section	.text.WriteFlash,"ax",%progbits
 841              		.align	2
 842              		.global	WriteFlash
 843              		.code	16
 844              		.thumb_func
 845              		.type	WriteFlash, %function
 846              	WriteFlash:
 847              	.LFB31:
 320:src/flash_program.c **** 
 321:src/flash_program.c **** unsigned char WriteFlash(unsigned int * p, uint32_t p_addr, unsigned char with_lock, unsigned char 
 322:src/flash_program.c **** {
 848              		.loc 1 322 0
 849              		.cfi_startproc
 850 0000 00B5     		push	{lr}	@
 851              	.LCFI16:
 852              		.cfi_def_cfa_offset 4
 853              		.cfi_offset 14, -4
 854 0002 87B0     		sub	sp, sp, #28	@,,
 855              	.LCFI17:
 856              		.cfi_def_cfa_offset 32
 857 0004 0390     		str	r0, [sp, #12]	@ p, p
 858 0006 0291     		str	r1, [sp, #8]	@ p_addr, p_addr
 859 0008 1900     		movs	r1, r3	@ tmp131, len_in_4
 860 000a 6B46     		mov	r3, sp	@ tmp171,
 861 000c 0733     		adds	r3, r3, #7	@ tmp129,
 862 000e 1A70     		strb	r2, [r3]	@ tmp130, with_lock
 863 0010 6B46     		mov	r3, sp	@ tmp172,
 864 0012 0633     		adds	r3, r3, #6	@ tmp132,
 865 0014 0A1C     		adds	r2, r1, #0	@ tmp133, tmp131
 866 0016 1A70     		strb	r2, [r3]	@ tmp133, len_in_4
 323:src/flash_program.c **** 	unsigned short i;
ARM GAS  /tmp/ccut5f2g.s 			page 22


 324:src/flash_program.c **** 	unsigned int * p_verif;
 325:src/flash_program.c **** 
 326:src/flash_program.c **** 	p_verif = (unsigned int *) p_addr;
 867              		.loc 1 326 0
 868 0018 029B     		ldr	r3, [sp, #8]	@ tmp134, p_addr
 869 001a 0493     		str	r3, [sp, #16]	@ tmp134, p_verif
 327:src/flash_program.c **** 
 328:src/flash_program.c **** 	for (i = 0; i < len_in_4; i++)
 870              		.loc 1 328 0
 871 001c 1623     		movs	r3, #22	@ tmp135,
 872 001e 6B44     		add	r3, r3, sp	@ tmp135,
 873 0020 0022     		movs	r2, #0	@ tmp136,
 874 0022 1A80     		strh	r2, [r3]	@ tmp137, i
 875 0024 15E0     		b	.L60	@
 876              	.L61:
 329:src/flash_program.c **** 	{
 330:src/flash_program.c **** 		FLASH_ProgramWord(p_addr, *(p + i));
 877              		.loc 1 330 0 discriminator 3
 878 0026 1623     		movs	r3, #22	@ tmp138,
 879 0028 6B44     		add	r3, r3, sp	@ tmp138,
 880 002a 1B88     		ldrh	r3, [r3]	@ D.5022, i
 881 002c 9B00     		lsls	r3, r3, #2	@ D.5022, D.5022,
 882 002e 039A     		ldr	r2, [sp, #12]	@ tmp139, p
 883 0030 D318     		adds	r3, r2, r3	@ D.5023, tmp139, D.5022
 884 0032 1A68     		ldr	r2, [r3]	@ D.5022, *_16
 885 0034 029B     		ldr	r3, [sp, #8]	@ tmp140, p_addr
 886 0036 1100     		movs	r1, r2	@, D.5022
 887 0038 1800     		movs	r0, r3	@, tmp140
 888 003a FFF7FEFF 		bl	FLASH_ProgramWord	@
 331:src/flash_program.c **** 		p_addr += 4;
 889              		.loc 1 331 0 discriminator 3
 890 003e 029B     		ldr	r3, [sp, #8]	@ tmp142, p_addr
 891 0040 0433     		adds	r3, r3, #4	@ tmp141,
 892 0042 0293     		str	r3, [sp, #8]	@ tmp141, p_addr
 328:src/flash_program.c **** 	{
 893              		.loc 1 328 0 discriminator 3
 894 0044 1623     		movs	r3, #22	@ tmp143,
 895 0046 6B44     		add	r3, r3, sp	@ tmp143,
 896 0048 1A88     		ldrh	r2, [r3]	@ D.5021, i
 897 004a 1623     		movs	r3, #22	@ tmp144,
 898 004c 6B44     		add	r3, r3, sp	@ tmp144,
 899 004e 0132     		adds	r2, r2, #1	@ tmp145,
 900 0050 1A80     		strh	r2, [r3]	@ tmp146, i
 901              	.L60:
 328:src/flash_program.c **** 	{
 902              		.loc 1 328 0 is_stmt 0 discriminator 1
 903 0052 6B46     		mov	r3, sp	@ tmp177,
 904 0054 0633     		adds	r3, r3, #6	@ tmp147,
 905 0056 1B78     		ldrb	r3, [r3]	@ tmp149, len_in_4
 906 0058 9BB2     		uxth	r3, r3	@ D.5021, tmp148
 907 005a 1622     		movs	r2, #22	@ tmp150,
 908 005c 6A44     		add	r2, r2, sp	@ tmp150,
 909 005e 1288     		ldrh	r2, [r2]	@ tmp151, i
 910 0060 9A42     		cmp	r2, r3	@ tmp151, D.5021
 911 0062 E0D3     		bcc	.L61	@,
 332:src/flash_program.c **** 	}
 333:src/flash_program.c **** 
ARM GAS  /tmp/ccut5f2g.s 			page 23


 334:src/flash_program.c **** 	if (with_lock)
 912              		.loc 1 334 0 is_stmt 1
 913 0064 6B46     		mov	r3, sp	@ tmp179,
 914 0066 0733     		adds	r3, r3, #7	@ tmp152,
 915 0068 1B78     		ldrb	r3, [r3]	@ tmp153, with_lock
 916 006a 002B     		cmp	r3, #0	@ tmp153,
 917 006c 01D0     		beq	.L62	@,
 335:src/flash_program.c **** 		FLASH_Lock();
 918              		.loc 1 335 0
 919 006e FFF7FEFF 		bl	FLASH_Lock	@
 920              	.L62:
 336:src/flash_program.c **** 
 337:src/flash_program.c **** 	//verifico memoria
 338:src/flash_program.c **** 	for (i = 0; i < len_in_4; i++)
 921              		.loc 1 338 0
 922 0072 1623     		movs	r3, #22	@ tmp154,
 923 0074 6B44     		add	r3, r3, sp	@ tmp154,
 924 0076 0022     		movs	r2, #0	@ tmp155,
 925 0078 1A80     		strh	r2, [r3]	@ tmp156, i
 926 007a 18E0     		b	.L63	@
 927              	.L66:
 339:src/flash_program.c **** 	{
 340:src/flash_program.c **** 		if (*(p_verif + i) != *(p + i))
 928              		.loc 1 340 0
 929 007c 1623     		movs	r3, #22	@ tmp157,
 930 007e 6B44     		add	r3, r3, sp	@ tmp157,
 931 0080 1B88     		ldrh	r3, [r3]	@ D.5022, i
 932 0082 9B00     		lsls	r3, r3, #2	@ D.5022, D.5022,
 933 0084 049A     		ldr	r2, [sp, #16]	@ tmp158, p_verif
 934 0086 D318     		adds	r3, r2, r3	@ D.5023, tmp158, D.5022
 935 0088 1A68     		ldr	r2, [r3]	@ D.5022, *_28
 936 008a 1623     		movs	r3, #22	@ tmp159,
 937 008c 6B44     		add	r3, r3, sp	@ tmp159,
 938 008e 1B88     		ldrh	r3, [r3]	@ D.5022, i
 939 0090 9B00     		lsls	r3, r3, #2	@ D.5022, D.5022,
 940 0092 0399     		ldr	r1, [sp, #12]	@ tmp160, p
 941 0094 CB18     		adds	r3, r1, r3	@ D.5023, tmp160, D.5022
 942 0096 1B68     		ldr	r3, [r3]	@ D.5022, *_32
 943 0098 9A42     		cmp	r2, r3	@ D.5022, D.5022
 944 009a 01D0     		beq	.L64	@,
 341:src/flash_program.c **** 			return FAILED;
 945              		.loc 1 341 0
 946 009c 0023     		movs	r3, #0	@ D.5020,
 947 009e 10E0     		b	.L65	@
 948              	.L64:
 338:src/flash_program.c **** 	{
 949              		.loc 1 338 0 discriminator 2
 950 00a0 1623     		movs	r3, #22	@ tmp161,
 951 00a2 6B44     		add	r3, r3, sp	@ tmp161,
 952 00a4 1A88     		ldrh	r2, [r3]	@ D.5021, i
 953 00a6 1623     		movs	r3, #22	@ tmp162,
 954 00a8 6B44     		add	r3, r3, sp	@ tmp162,
 955 00aa 0132     		adds	r2, r2, #1	@ tmp163,
 956 00ac 1A80     		strh	r2, [r3]	@ tmp164, i
 957              	.L63:
 338:src/flash_program.c **** 	{
 958              		.loc 1 338 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccut5f2g.s 			page 24


 959 00ae 6B46     		mov	r3, sp	@ tmp185,
 960 00b0 0633     		adds	r3, r3, #6	@ tmp165,
 961 00b2 1B78     		ldrb	r3, [r3]	@ tmp167, len_in_4
 962 00b4 9BB2     		uxth	r3, r3	@ D.5021, tmp166
 963 00b6 1622     		movs	r2, #22	@ tmp168,
 964 00b8 6A44     		add	r2, r2, sp	@ tmp168,
 965 00ba 1288     		ldrh	r2, [r2]	@ tmp169, i
 966 00bc 9A42     		cmp	r2, r3	@ tmp169, D.5021
 967 00be DDD3     		bcc	.L66	@,
 342:src/flash_program.c **** 	}
 343:src/flash_program.c **** 	return PASSED;
 968              		.loc 1 343 0 is_stmt 1
 969 00c0 0123     		movs	r3, #1	@ D.5020,
 970              	.L65:
 344:src/flash_program.c **** }
 971              		.loc 1 344 0
 972 00c2 1800     		movs	r0, r3	@, <retval>
 973 00c4 07B0     		add	sp, sp, #28	@,,
 974              		@ sp needed	@
 975 00c6 00BD     		pop	{pc}
 976              		.cfi_endproc
 977              	.LFE31:
 978              		.size	WriteFlash, .-WriteFlash
 979              		.text
 980              	.Letext0:
 981              		.file 2 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 982              		.file 3 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 983              		.file 4 "./cmsis_boot/stm32f0xx.h"
 984              		.file 5 "src/flash_program.h"
 985              		.section	.debug_info,"",%progbits
 986              	.Ldebug_info0:
 987 0000 34050000 		.4byte	0x534
 988 0004 0200     		.2byte	0x2
 989 0006 00000000 		.4byte	.Ldebug_abbrev0
 990 000a 04       		.byte	0x4
 991 000b 01       		.uleb128 0x1
 992 000c 5F010000 		.4byte	.LASF63
 993 0010 0C       		.byte	0xc
 994 0011 3C010000 		.4byte	.LASF64
 995 0015 38030000 		.4byte	.LASF65
 996 0019 00000000 		.4byte	.Ldebug_ranges0+0
 997 001d 00000000 		.4byte	0
 998 0021 00000000 		.4byte	0
 999 0025 00000000 		.4byte	.Ldebug_line0
 1000 0029 02       		.uleb128 0x2
 1001 002a 01       		.byte	0x1
 1002 002b 06       		.byte	0x6
 1003 002c 14020000 		.4byte	.LASF0
 1004 0030 02       		.uleb128 0x2
 1005 0031 01       		.byte	0x1
 1006 0032 08       		.byte	0x8
 1007 0033 21010000 		.4byte	.LASF1
 1008 0037 02       		.uleb128 0x2
 1009 0038 02       		.byte	0x2
 1010 0039 05       		.byte	0x5
 1011 003a CD000000 		.4byte	.LASF2
 1012 003e 03       		.uleb128 0x3
ARM GAS  /tmp/ccut5f2g.s 			page 25


 1013 003f 71000000 		.4byte	.LASF5
 1014 0043 02       		.byte	0x2
 1015 0044 2B       		.byte	0x2b
 1016 0045 49000000 		.4byte	0x49
 1017 0049 02       		.uleb128 0x2
 1018 004a 02       		.byte	0x2
 1019 004b 07       		.byte	0x7
 1020 004c FD020000 		.4byte	.LASF3
 1021 0050 02       		.uleb128 0x2
 1022 0051 04       		.byte	0x4
 1023 0052 05       		.byte	0x5
 1024 0053 FA000000 		.4byte	.LASF4
 1025 0057 03       		.uleb128 0x3
 1026 0058 52000000 		.4byte	.LASF6
 1027 005c 02       		.byte	0x2
 1028 005d 41       		.byte	0x41
 1029 005e 62000000 		.4byte	0x62
 1030 0062 02       		.uleb128 0x2
 1031 0063 04       		.byte	0x4
 1032 0064 07       		.byte	0x7
 1033 0065 1A030000 		.4byte	.LASF7
 1034 0069 02       		.uleb128 0x2
 1035 006a 08       		.byte	0x8
 1036 006b 05       		.byte	0x5
 1037 006c EC000000 		.4byte	.LASF8
 1038 0070 02       		.uleb128 0x2
 1039 0071 08       		.byte	0x8
 1040 0072 07       		.byte	0x7
 1041 0073 20020000 		.4byte	.LASF9
 1042 0077 04       		.uleb128 0x4
 1043 0078 04       		.byte	0x4
 1044 0079 05       		.byte	0x5
 1045 007a 696E7400 		.ascii	"int\000"
 1046 007e 02       		.uleb128 0x2
 1047 007f 04       		.byte	0x4
 1048 0080 07       		.byte	0x7
 1049 0081 40020000 		.4byte	.LASF10
 1050 0085 03       		.uleb128 0x3
 1051 0086 9A020000 		.4byte	.LASF11
 1052 008a 03       		.byte	0x3
 1053 008b 1A       		.byte	0x1a
 1054 008c 3E000000 		.4byte	0x3e
 1055 0090 03       		.uleb128 0x3
 1056 0091 37020000 		.4byte	.LASF12
 1057 0095 03       		.byte	0x3
 1058 0096 20       		.byte	0x20
 1059 0097 57000000 		.4byte	0x57
 1060 009b 02       		.uleb128 0x2
 1061 009c 04       		.byte	0x4
 1062 009d 07       		.byte	0x7
 1063 009e 36000000 		.4byte	.LASF13
 1064 00a2 05       		.uleb128 0x5
 1065 00a3 90000000 		.4byte	0x90
 1066 00a7 06       		.uleb128 0x6
 1067 00a8 01       		.byte	0x1
 1068 00a9 30000000 		.4byte	0x30
 1069 00ad 04       		.byte	0x4
ARM GAS  /tmp/ccut5f2g.s 			page 26


 1070 00ae 6D01     		.2byte	0x16d
 1071 00b0 C1000000 		.4byte	0xc1
 1072 00b4 07       		.uleb128 0x7
 1073 00b5 74030000 		.4byte	.LASF14
 1074 00b9 00       		.byte	0
 1075 00ba 08       		.uleb128 0x8
 1076 00bb 53455400 		.ascii	"SET\000"
 1077 00bf 01       		.byte	0x1
 1078 00c0 00       		.byte	0
 1079 00c1 09       		.uleb128 0x9
 1080 00c2 24       		.byte	0x24
 1081 00c3 04       		.byte	0x4
 1082 00c4 4702     		.2byte	0x247
 1083 00c6 4F010000 		.4byte	0x14f
 1084 00ca 0A       		.uleb128 0xa
 1085 00cb 41435200 		.ascii	"ACR\000"
 1086 00cf 04       		.byte	0x4
 1087 00d0 4902     		.2byte	0x249
 1088 00d2 A2000000 		.4byte	0xa2
 1089 00d6 02       		.byte	0x2
 1090 00d7 23       		.byte	0x23
 1091 00d8 00       		.uleb128 0
 1092 00d9 0B       		.uleb128 0xb
 1093 00da 91000000 		.4byte	.LASF15
 1094 00de 04       		.byte	0x4
 1095 00df 4A02     		.2byte	0x24a
 1096 00e1 A2000000 		.4byte	0xa2
 1097 00e5 02       		.byte	0x2
 1098 00e6 23       		.byte	0x23
 1099 00e7 04       		.uleb128 0x4
 1100 00e8 0B       		.uleb128 0xb
 1101 00e9 E4000000 		.4byte	.LASF16
 1102 00ed 04       		.byte	0x4
 1103 00ee 4B02     		.2byte	0x24b
 1104 00f0 A2000000 		.4byte	0xa2
 1105 00f4 02       		.byte	0x2
 1106 00f5 23       		.byte	0x23
 1107 00f6 08       		.uleb128 0x8
 1108 00f7 0A       		.uleb128 0xa
 1109 00f8 535200   		.ascii	"SR\000"
 1110 00fb 04       		.byte	0x4
 1111 00fc 4C02     		.2byte	0x24c
 1112 00fe A2000000 		.4byte	0xa2
 1113 0102 02       		.byte	0x2
 1114 0103 23       		.byte	0x23
 1115 0104 0C       		.uleb128 0xc
 1116 0105 0A       		.uleb128 0xa
 1117 0106 435200   		.ascii	"CR\000"
 1118 0109 04       		.byte	0x4
 1119 010a 4D02     		.2byte	0x24d
 1120 010c A2000000 		.4byte	0xa2
 1121 0110 02       		.byte	0x2
 1122 0111 23       		.byte	0x23
 1123 0112 10       		.uleb128 0x10
 1124 0113 0A       		.uleb128 0xa
 1125 0114 415200   		.ascii	"AR\000"
 1126 0117 04       		.byte	0x4
ARM GAS  /tmp/ccut5f2g.s 			page 27


 1127 0118 4E02     		.2byte	0x24e
 1128 011a A2000000 		.4byte	0xa2
 1129 011e 02       		.byte	0x2
 1130 011f 23       		.byte	0x23
 1131 0120 14       		.uleb128 0x14
 1132 0121 0B       		.uleb128 0xb
 1133 0122 A0030000 		.4byte	.LASF17
 1134 0126 04       		.byte	0x4
 1135 0127 4F02     		.2byte	0x24f
 1136 0129 A2000000 		.4byte	0xa2
 1137 012d 02       		.byte	0x2
 1138 012e 23       		.byte	0x23
 1139 012f 18       		.uleb128 0x18
 1140 0130 0A       		.uleb128 0xa
 1141 0131 4F425200 		.ascii	"OBR\000"
 1142 0135 04       		.byte	0x4
 1143 0136 5002     		.2byte	0x250
 1144 0138 A2000000 		.4byte	0xa2
 1145 013c 02       		.byte	0x2
 1146 013d 23       		.byte	0x23
 1147 013e 1C       		.uleb128 0x1c
 1148 013f 0B       		.uleb128 0xb
 1149 0140 03010000 		.4byte	.LASF18
 1150 0144 04       		.byte	0x4
 1151 0145 5102     		.2byte	0x251
 1152 0147 A2000000 		.4byte	0xa2
 1153 014b 02       		.byte	0x2
 1154 014c 23       		.byte	0x23
 1155 014d 20       		.uleb128 0x20
 1156 014e 00       		.byte	0
 1157 014f 0C       		.uleb128 0xc
 1158 0150 A9030000 		.4byte	.LASF19
 1159 0154 04       		.byte	0x4
 1160 0155 5202     		.2byte	0x252
 1161 0157 C1000000 		.4byte	0xc1
 1162 015b 0D       		.uleb128 0xd
 1163 015c 01       		.byte	0x1
 1164 015d 30000000 		.4byte	0x30
 1165 0161 05       		.byte	0x5
 1166 0162 24       		.byte	0x24
 1167 0163 86010000 		.4byte	0x186
 1168 0167 07       		.uleb128 0x7
 1169 0168 5C020000 		.4byte	.LASF20
 1170 016c 01       		.byte	0x1
 1171 016d 07       		.uleb128 0x7
 1172 016e 1B000000 		.4byte	.LASF21
 1173 0172 02       		.byte	0x2
 1174 0173 07       		.uleb128 0x7
 1175 0174 7A030000 		.4byte	.LASF22
 1176 0178 03       		.byte	0x3
 1177 0179 07       		.uleb128 0x7
 1178 017a 4D020000 		.4byte	.LASF23
 1179 017e 04       		.byte	0x4
 1180 017f 07       		.uleb128 0x7
 1181 0180 67020000 		.4byte	.LASF24
 1182 0184 05       		.byte	0x5
 1183 0185 00       		.byte	0
ARM GAS  /tmp/ccut5f2g.s 			page 28


 1184 0186 03       		.uleb128 0x3
 1185 0187 B0000000 		.4byte	.LASF25
 1186 018b 05       		.byte	0x5
 1187 018c 2A       		.byte	0x2a
 1188 018d 5B010000 		.4byte	0x15b
 1189 0191 0E       		.uleb128 0xe
 1190 0192 0D010000 		.4byte	.LASF66
 1191 0196 54       		.byte	0x54
 1192 0197 05       		.byte	0x5
 1193 0198 40       		.byte	0x40
 1194 0199 0E020000 		.4byte	0x20e
 1195 019d 0F       		.uleb128 0xf
 1196 019e A3000000 		.4byte	.LASF26
 1197 01a2 05       		.byte	0x5
 1198 01a3 42       		.byte	0x42
 1199 01a4 0E020000 		.4byte	0x20e
 1200 01a8 02       		.byte	0x2
 1201 01a9 23       		.byte	0x23
 1202 01aa 00       		.uleb128 0
 1203 01ab 0F       		.uleb128 0xf
 1204 01ac A3020000 		.4byte	.LASF27
 1205 01b0 05       		.byte	0x5
 1206 01b1 43       		.byte	0x43
 1207 01b2 0E020000 		.4byte	0x20e
 1208 01b6 02       		.byte	0x2
 1209 01b7 23       		.byte	0x23
 1210 01b8 18       		.uleb128 0x18
 1211 01b9 0F       		.uleb128 0xf
 1212 01ba 2B000000 		.4byte	.LASF28
 1213 01be 05       		.byte	0x5
 1214 01bf 44       		.byte	0x44
 1215 01c0 0E020000 		.4byte	0x20e
 1216 01c4 02       		.byte	0x2
 1217 01c5 23       		.byte	0x23
 1218 01c6 30       		.uleb128 0x30
 1219 01c7 0F       		.uleb128 0xf
 1220 01c8 18010000 		.4byte	.LASF29
 1221 01cc 05       		.byte	0x5
 1222 01cd 46       		.byte	0x46
 1223 01ce 7E000000 		.4byte	0x7e
 1224 01d2 02       		.byte	0x2
 1225 01d3 23       		.byte	0x23
 1226 01d4 48       		.uleb128 0x48
 1227 01d5 0F       		.uleb128 0xf
 1228 01d6 10030000 		.4byte	.LASF30
 1229 01da 05       		.byte	0x5
 1230 01db 47       		.byte	0x47
 1231 01dc 7E000000 		.4byte	0x7e
 1232 01e0 02       		.byte	0x2
 1233 01e1 23       		.byte	0x23
 1234 01e2 4C       		.uleb128 0x4c
 1235 01e3 0F       		.uleb128 0xf
 1236 01e4 0B000000 		.4byte	.LASF31
 1237 01e8 05       		.byte	0x5
 1238 01e9 48       		.byte	0x48
 1239 01ea 49000000 		.4byte	0x49
 1240 01ee 02       		.byte	0x2
ARM GAS  /tmp/ccut5f2g.s 			page 29


 1241 01ef 23       		.byte	0x23
 1242 01f0 50       		.uleb128 0x50
 1243 01f1 0F       		.uleb128 0xf
 1244 01f2 50010000 		.4byte	.LASF32
 1245 01f6 05       		.byte	0x5
 1246 01f7 4A       		.byte	0x4a
 1247 01f8 30000000 		.4byte	0x30
 1248 01fc 02       		.byte	0x2
 1249 01fd 23       		.byte	0x23
 1250 01fe 52       		.uleb128 0x52
 1251 01ff 0F       		.uleb128 0xf
 1252 0200 6D030000 		.4byte	.LASF33
 1253 0204 05       		.byte	0x5
 1254 0205 4D       		.byte	0x4d
 1255 0206 30000000 		.4byte	0x30
 1256 020a 02       		.byte	0x2
 1257 020b 23       		.byte	0x23
 1258 020c 53       		.uleb128 0x53
 1259 020d 00       		.byte	0
 1260 020e 10       		.uleb128 0x10
 1261 020f 1E020000 		.4byte	0x21e
 1262 0213 1E020000 		.4byte	0x21e
 1263 0217 11       		.uleb128 0x11
 1264 0218 9B000000 		.4byte	0x9b
 1265 021c 17       		.byte	0x17
 1266 021d 00       		.byte	0
 1267 021e 02       		.uleb128 0x2
 1268 021f 01       		.byte	0x1
 1269 0220 08       		.byte	0x8
 1270 0221 95020000 		.4byte	.LASF34
 1271 0225 03       		.uleb128 0x3
 1272 0226 3F000000 		.4byte	.LASF35
 1273 022a 05       		.byte	0x5
 1274 022b 51       		.byte	0x51
 1275 022c 91010000 		.4byte	0x191
 1276 0230 0D       		.uleb128 0xd
 1277 0231 01       		.byte	0x1
 1278 0232 30000000 		.4byte	0x30
 1279 0236 05       		.byte	0x5
 1280 0237 54       		.byte	0x54
 1281 0238 49020000 		.4byte	0x249
 1282 023c 07       		.uleb128 0x7
 1283 023d E4030000 		.4byte	.LASF36
 1284 0241 00       		.byte	0
 1285 0242 07       		.uleb128 0x7
 1286 0243 5D000000 		.4byte	.LASF37
 1287 0247 01       		.byte	0x1
 1288 0248 00       		.byte	0
 1289 0249 12       		.uleb128 0x12
 1290 024a 01       		.byte	0x1
 1291 024b B3020000 		.4byte	.LASF44
 1292 024f 01       		.byte	0x1
 1293 0250 34       		.byte	0x34
 1294 0251 01       		.byte	0x1
 1295 0252 30000000 		.4byte	0x30
 1296 0256 00000000 		.4byte	.LFB20
 1297 025a 48000000 		.4byte	.LFE20
ARM GAS  /tmp/ccut5f2g.s 			page 30


 1298 025e 00000000 		.4byte	.LLST0
 1299 0262 01       		.byte	0x1
 1300 0263 76020000 		.4byte	0x276
 1301 0267 13       		.uleb128 0x13
 1302 0268 6C000000 		.4byte	.LASF39
 1303 026c 01       		.byte	0x1
 1304 026d 36       		.byte	0x36
 1305 026e 30000000 		.4byte	0x30
 1306 0272 02       		.byte	0x2
 1307 0273 91       		.byte	0x91
 1308 0274 77       		.sleb128 -9
 1309 0275 00       		.byte	0
 1310 0276 14       		.uleb128 0x14
 1311 0277 01       		.byte	0x1
 1312 0278 7C000000 		.4byte	.LASF40
 1313 027c 01       		.byte	0x1
 1314 027d 52       		.byte	0x52
 1315 027e 01       		.byte	0x1
 1316 027f 00000000 		.4byte	.LFB21
 1317 0283 4A000000 		.4byte	.LFE21
 1318 0287 2C000000 		.4byte	.LLST1
 1319 028b 01       		.byte	0x1
 1320 028c B7020000 		.4byte	0x2b7
 1321 0290 15       		.uleb128 0x15
 1322 0291 7000     		.ascii	"p\000"
 1323 0293 01       		.byte	0x1
 1324 0294 52       		.byte	0x52
 1325 0295 B7020000 		.4byte	0x2b7
 1326 0299 02       		.byte	0x2
 1327 029a 91       		.byte	0x91
 1328 029b 74       		.sleb128 -12
 1329 029c 16       		.uleb128 0x16
 1330 029d 87000000 		.4byte	.LASF38
 1331 02a1 01       		.byte	0x1
 1332 02a2 52       		.byte	0x52
 1333 02a3 B7020000 		.4byte	0x2b7
 1334 02a7 02       		.byte	0x2
 1335 02a8 91       		.byte	0x91
 1336 02a9 70       		.sleb128 -16
 1337 02aa 17       		.uleb128 0x17
 1338 02ab 6900     		.ascii	"i\000"
 1339 02ad 01       		.byte	0x1
 1340 02ae 54       		.byte	0x54
 1341 02af 49000000 		.4byte	0x49
 1342 02b3 02       		.byte	0x2
 1343 02b4 91       		.byte	0x91
 1344 02b5 7E       		.sleb128 -2
 1345 02b6 00       		.byte	0
 1346 02b7 18       		.uleb128 0x18
 1347 02b8 04       		.byte	0x4
 1348 02b9 7E000000 		.4byte	0x7e
 1349 02bd 19       		.uleb128 0x19
 1350 02be 01       		.byte	0x1
 1351 02bf DA030000 		.4byte	.LASF41
 1352 02c3 01       		.byte	0x1
 1353 02c4 5C       		.byte	0x5c
 1354 02c5 01       		.byte	0x1
ARM GAS  /tmp/ccut5f2g.s 			page 31


 1355 02c6 00000000 		.4byte	.LFB22
 1356 02ca 2E000000 		.4byte	.LFE22
 1357 02ce 4C000000 		.4byte	.LLST2
 1358 02d2 01       		.byte	0x1
 1359 02d3 F4020000 		.4byte	0x2f4
 1360 02d7 16       		.uleb128 0x16
 1361 02d8 75020000 		.4byte	.LASF42
 1362 02dc 01       		.byte	0x1
 1363 02dd 5C       		.byte	0x5c
 1364 02de 90000000 		.4byte	0x90
 1365 02e2 02       		.byte	0x2
 1366 02e3 91       		.byte	0x91
 1367 02e4 74       		.sleb128 -12
 1368 02e5 16       		.uleb128 0x16
 1369 02e6 0A020000 		.4byte	.LASF43
 1370 02ea 01       		.byte	0x1
 1371 02eb 5C       		.byte	0x5c
 1372 02ec 30000000 		.4byte	0x30
 1373 02f0 02       		.byte	0x2
 1374 02f1 91       		.byte	0x91
 1375 02f2 73       		.sleb128 -13
 1376 02f3 00       		.byte	0
 1377 02f4 1A       		.uleb128 0x1a
 1378 02f5 01       		.byte	0x1
 1379 02f6 96000000 		.4byte	.LASF48
 1380 02fa 01       		.byte	0x1
 1381 02fb 69       		.byte	0x69
 1382 02fc 01       		.byte	0x1
 1383 02fd 00000000 		.4byte	.LFB23
 1384 0301 28000000 		.4byte	.LFE23
 1385 0305 02       		.byte	0x2
 1386 0306 7D       		.byte	0x7d
 1387 0307 00       		.sleb128 0
 1388 0308 01       		.byte	0x1
 1389 0309 12       		.uleb128 0x12
 1390 030a 01       		.byte	0x1
 1391 030b BD000000 		.4byte	.LASF45
 1392 030f 01       		.byte	0x1
 1393 0310 7E       		.byte	0x7e
 1394 0311 01       		.byte	0x1
 1395 0312 86010000 		.4byte	0x186
 1396 0316 00000000 		.4byte	.LFB24
 1397 031a 78000000 		.4byte	.LFE24
 1398 031e 78000000 		.4byte	.LLST3
 1399 0322 01       		.byte	0x1
 1400 0323 44030000 		.4byte	0x344
 1401 0327 16       		.uleb128 0x16
 1402 0328 2F010000 		.4byte	.LASF46
 1403 032c 01       		.byte	0x1
 1404 032d 7E       		.byte	0x7e
 1405 032e 90000000 		.4byte	0x90
 1406 0332 02       		.byte	0x2
 1407 0333 91       		.byte	0x91
 1408 0334 6C       		.sleb128 -20
 1409 0335 13       		.uleb128 0x13
 1410 0336 7C020000 		.4byte	.LASF47
 1411 033a 01       		.byte	0x1
ARM GAS  /tmp/ccut5f2g.s 			page 32


 1412 033b 80       		.byte	0x80
 1413 033c 86010000 		.4byte	0x186
 1414 0340 02       		.byte	0x2
 1415 0341 91       		.byte	0x91
 1416 0342 77       		.sleb128 -9
 1417 0343 00       		.byte	0
 1418 0344 1A       		.uleb128 0x1a
 1419 0345 01       		.byte	0x1
 1420 0346 A8020000 		.4byte	.LASF49
 1421 034a 01       		.byte	0x1
 1422 034b 9C       		.byte	0x9c
 1423 034c 01       		.byte	0x1
 1424 034d 00000000 		.4byte	.LFB25
 1425 0351 14000000 		.4byte	.LFE25
 1426 0355 02       		.byte	0x2
 1427 0356 7D       		.byte	0x7d
 1428 0357 00       		.sleb128 0
 1429 0358 01       		.byte	0x1
 1430 0359 12       		.uleb128 0x12
 1431 035a 01       		.byte	0x1
 1432 035b 8E030000 		.4byte	.LASF50
 1433 035f 01       		.byte	0x1
 1434 0360 AC       		.byte	0xac
 1435 0361 01       		.byte	0x1
 1436 0362 86010000 		.4byte	0x186
 1437 0366 00000000 		.4byte	.LFB26
 1438 036a B0000000 		.4byte	.LFE26
 1439 036e A4000000 		.4byte	.LLST4
 1440 0372 01       		.byte	0x1
 1441 0373 B0030000 		.4byte	0x3b0
 1442 0377 16       		.uleb128 0x16
 1443 0378 64000000 		.4byte	.LASF51
 1444 037c 01       		.byte	0x1
 1445 037d AC       		.byte	0xac
 1446 037e 90000000 		.4byte	0x90
 1447 0382 02       		.byte	0x2
 1448 0383 91       		.byte	0x91
 1449 0384 6C       		.sleb128 -20
 1450 0385 16       		.uleb128 0x16
 1451 0386 08010000 		.4byte	.LASF52
 1452 038a 01       		.byte	0x1
 1453 038b AC       		.byte	0xac
 1454 038c 90000000 		.4byte	0x90
 1455 0390 02       		.byte	0x2
 1456 0391 91       		.byte	0x91
 1457 0392 68       		.sleb128 -24
 1458 0393 13       		.uleb128 0x13
 1459 0394 7C020000 		.4byte	.LASF47
 1460 0398 01       		.byte	0x1
 1461 0399 AE       		.byte	0xae
 1462 039a 86010000 		.4byte	0x186
 1463 039e 02       		.byte	0x2
 1464 039f 91       		.byte	0x91
 1465 03a0 77       		.sleb128 -9
 1466 03a1 17       		.uleb128 0x17
 1467 03a2 746D7000 		.ascii	"tmp\000"
 1468 03a6 01       		.byte	0x1
ARM GAS  /tmp/ccut5f2g.s 			page 33


 1469 03a7 AF       		.byte	0xaf
 1470 03a8 A2000000 		.4byte	0xa2
 1471 03ac 02       		.byte	0x2
 1472 03ad 91       		.byte	0x91
 1473 03ae 70       		.sleb128 -16
 1474 03af 00       		.byte	0
 1475 03b0 12       		.uleb128 0x12
 1476 03b1 01       		.byte	0x1
 1477 03b2 B7030000 		.4byte	.LASF53
 1478 03b6 01       		.byte	0x1
 1479 03b7 DE       		.byte	0xde
 1480 03b8 01       		.byte	0x1
 1481 03b9 86010000 		.4byte	0x186
 1482 03bd 00000000 		.4byte	.LFB27
 1483 03c1 58000000 		.4byte	.LFE27
 1484 03c5 D0000000 		.4byte	.LLST5
 1485 03c9 01       		.byte	0x1
 1486 03ca EB030000 		.4byte	0x3eb
 1487 03ce 16       		.uleb128 0x16
 1488 03cf 8D020000 		.4byte	.LASF54
 1489 03d3 01       		.byte	0x1
 1490 03d4 DE       		.byte	0xde
 1491 03d5 90000000 		.4byte	0x90
 1492 03d9 02       		.byte	0x2
 1493 03da 91       		.byte	0x91
 1494 03db 6C       		.sleb128 -20
 1495 03dc 13       		.uleb128 0x13
 1496 03dd 7C020000 		.4byte	.LASF47
 1497 03e1 01       		.byte	0x1
 1498 03e2 E0       		.byte	0xe0
 1499 03e3 86010000 		.4byte	0x186
 1500 03e7 02       		.byte	0x2
 1501 03e8 91       		.byte	0x91
 1502 03e9 77       		.sleb128 -9
 1503 03ea 00       		.byte	0
 1504 03eb 1B       		.uleb128 0x1b
 1505 03ec 01       		.byte	0x1
 1506 03ed DC020000 		.4byte	.LASF55
 1507 03f1 01       		.byte	0x1
 1508 03f2 FA       		.byte	0xfa
 1509 03f3 01       		.byte	0x1
 1510 03f4 86010000 		.4byte	0x186
 1511 03f8 00000000 		.4byte	.LFB28
 1512 03fc 60000000 		.4byte	.LFE28
 1513 0400 FC000000 		.4byte	.LLST6
 1514 0404 01       		.byte	0x1
 1515 0405 18040000 		.4byte	0x418
 1516 0409 13       		.uleb128 0x13
 1517 040a 2C030000 		.4byte	.LASF56
 1518 040e 01       		.byte	0x1
 1519 040f FC       		.byte	0xfc
 1520 0410 86010000 		.4byte	0x186
 1521 0414 02       		.byte	0x2
 1522 0415 91       		.byte	0x91
 1523 0416 7F       		.sleb128 -1
 1524 0417 00       		.byte	0
 1525 0418 1C       		.uleb128 0x1c
ARM GAS  /tmp/ccut5f2g.s 			page 34


 1526 0419 01       		.byte	0x1
 1527 041a 83020000 		.4byte	.LASF57
 1528 041e 01       		.byte	0x1
 1529 041f 1801     		.2byte	0x118
 1530 0421 01       		.byte	0x1
 1531 0422 30000000 		.4byte	0x30
 1532 0426 00000000 		.4byte	.LFB29
 1533 042a AE000000 		.4byte	.LFE29
 1534 042e 1C010000 		.4byte	.LLST7
 1535 0432 01       		.byte	0x1
 1536 0433 7F040000 		.4byte	0x47f
 1537 0437 1D       		.uleb128 0x1d
 1538 0438 7000     		.ascii	"p\000"
 1539 043a 01       		.byte	0x1
 1540 043b 1801     		.2byte	0x118
 1541 043d B7020000 		.4byte	0x2b7
 1542 0441 02       		.byte	0x2
 1543 0442 91       		.byte	0x91
 1544 0443 6C       		.sleb128 -20
 1545 0444 1E       		.uleb128 0x1e
 1546 0445 75020000 		.4byte	.LASF42
 1547 0449 01       		.byte	0x1
 1548 044a 1801     		.2byte	0x118
 1549 044c 90000000 		.4byte	0x90
 1550 0450 02       		.byte	0x2
 1551 0451 91       		.byte	0x91
 1552 0452 68       		.sleb128 -24
 1553 0453 1E       		.uleb128 0x1e
 1554 0454 0A020000 		.4byte	.LASF43
 1555 0458 01       		.byte	0x1
 1556 0459 1801     		.2byte	0x118
 1557 045b 30000000 		.4byte	0x30
 1558 045f 02       		.byte	0x2
 1559 0460 91       		.byte	0x91
 1560 0461 67       		.sleb128 -25
 1561 0462 1F       		.uleb128 0x1f
 1562 0463 6900     		.ascii	"i\000"
 1563 0465 01       		.byte	0x1
 1564 0466 1A01     		.2byte	0x11a
 1565 0468 49000000 		.4byte	0x49
 1566 046c 02       		.byte	0x2
 1567 046d 91       		.byte	0x91
 1568 046e 76       		.sleb128 -10
 1569 046f 20       		.uleb128 0x20
 1570 0470 D2030000 		.4byte	.LASF58
 1571 0474 01       		.byte	0x1
 1572 0475 1B01     		.2byte	0x11b
 1573 0477 B7020000 		.4byte	0x2b7
 1574 047b 02       		.byte	0x2
 1575 047c 91       		.byte	0x91
 1576 047d 70       		.sleb128 -16
 1577 047e 00       		.byte	0
 1578 047f 1C       		.uleb128 0x1c
 1579 0480 01       		.byte	0x1
 1580 0481 C8020000 		.4byte	.LASF59
 1581 0485 01       		.byte	0x1
 1582 0486 3201     		.2byte	0x132
ARM GAS  /tmp/ccut5f2g.s 			page 35


 1583 0488 01       		.byte	0x1
 1584 0489 30000000 		.4byte	0x30
 1585 048d 00000000 		.4byte	.LFB30
 1586 0491 38000000 		.4byte	.LFE30
 1587 0495 48010000 		.4byte	.LLST8
 1588 0499 01       		.byte	0x1
 1589 049a AE040000 		.4byte	0x4ae
 1590 049e 20       		.uleb128 0x20
 1591 049f EC020000 		.4byte	.LASF60
 1592 04a3 01       		.byte	0x1
 1593 04a4 3401     		.2byte	0x134
 1594 04a6 AE040000 		.4byte	0x4ae
 1595 04aa 02       		.byte	0x2
 1596 04ab 91       		.byte	0x91
 1597 04ac 74       		.sleb128 -12
 1598 04ad 00       		.byte	0
 1599 04ae 18       		.uleb128 0x18
 1600 04af 04       		.byte	0x4
 1601 04b0 25020000 		.4byte	0x225
 1602 04b4 1C       		.uleb128 0x1c
 1603 04b5 01       		.byte	0x1
 1604 04b6 00000000 		.4byte	.LASF61
 1605 04ba 01       		.byte	0x1
 1606 04bb 4101     		.2byte	0x141
 1607 04bd 01       		.byte	0x1
 1608 04be 30000000 		.4byte	0x30
 1609 04c2 00000000 		.4byte	.LFB31
 1610 04c6 C8000000 		.4byte	.LFE31
 1611 04ca 74010000 		.4byte	.LLST9
 1612 04ce 01       		.byte	0x1
 1613 04cf 2A050000 		.4byte	0x52a
 1614 04d3 1D       		.uleb128 0x1d
 1615 04d4 7000     		.ascii	"p\000"
 1616 04d6 01       		.byte	0x1
 1617 04d7 4101     		.2byte	0x141
 1618 04d9 B7020000 		.4byte	0x2b7
 1619 04dd 02       		.byte	0x2
 1620 04de 91       		.byte	0x91
 1621 04df 6C       		.sleb128 -20
 1622 04e0 1E       		.uleb128 0x1e
 1623 04e1 75020000 		.4byte	.LASF42
 1624 04e5 01       		.byte	0x1
 1625 04e6 4101     		.2byte	0x141
 1626 04e8 90000000 		.4byte	0x90
 1627 04ec 02       		.byte	0x2
 1628 04ed 91       		.byte	0x91
 1629 04ee 68       		.sleb128 -24
 1630 04ef 1E       		.uleb128 0x1e
 1631 04f0 0A020000 		.4byte	.LASF43
 1632 04f4 01       		.byte	0x1
 1633 04f5 4101     		.2byte	0x141
 1634 04f7 30000000 		.4byte	0x30
 1635 04fb 02       		.byte	0x2
 1636 04fc 91       		.byte	0x91
 1637 04fd 67       		.sleb128 -25
 1638 04fe 1E       		.uleb128 0x1e
 1639 04ff F4020000 		.4byte	.LASF62
ARM GAS  /tmp/ccut5f2g.s 			page 36


 1640 0503 01       		.byte	0x1
 1641 0504 4101     		.2byte	0x141
 1642 0506 30000000 		.4byte	0x30
 1643 050a 02       		.byte	0x2
 1644 050b 91       		.byte	0x91
 1645 050c 66       		.sleb128 -26
 1646 050d 1F       		.uleb128 0x1f
 1647 050e 6900     		.ascii	"i\000"
 1648 0510 01       		.byte	0x1
 1649 0511 4301     		.2byte	0x143
 1650 0513 49000000 		.4byte	0x49
 1651 0517 02       		.byte	0x2
 1652 0518 91       		.byte	0x91
 1653 0519 76       		.sleb128 -10
 1654 051a 20       		.uleb128 0x20
 1655 051b D2030000 		.4byte	.LASF58
 1656 051f 01       		.byte	0x1
 1657 0520 4401     		.2byte	0x144
 1658 0522 B7020000 		.4byte	0x2b7
 1659 0526 02       		.byte	0x2
 1660 0527 91       		.byte	0x91
 1661 0528 70       		.sleb128 -16
 1662 0529 00       		.byte	0
 1663 052a 21       		.uleb128 0x21
 1664 052b D7000000 		.4byte	.LASF67
 1665 052f 01       		.byte	0x1
 1666 0530 18       		.byte	0x18
 1667 0531 25020000 		.4byte	0x225
 1668 0535 01       		.byte	0x1
 1669 0536 01       		.byte	0x1
 1670 0537 00       		.byte	0
 1671              		.section	.debug_abbrev,"",%progbits
 1672              	.Ldebug_abbrev0:
 1673 0000 01       		.uleb128 0x1
 1674 0001 11       		.uleb128 0x11
 1675 0002 01       		.byte	0x1
 1676 0003 25       		.uleb128 0x25
 1677 0004 0E       		.uleb128 0xe
 1678 0005 13       		.uleb128 0x13
 1679 0006 0B       		.uleb128 0xb
 1680 0007 03       		.uleb128 0x3
 1681 0008 0E       		.uleb128 0xe
 1682 0009 1B       		.uleb128 0x1b
 1683 000a 0E       		.uleb128 0xe
 1684 000b 55       		.uleb128 0x55
 1685 000c 06       		.uleb128 0x6
 1686 000d 11       		.uleb128 0x11
 1687 000e 01       		.uleb128 0x1
 1688 000f 52       		.uleb128 0x52
 1689 0010 01       		.uleb128 0x1
 1690 0011 10       		.uleb128 0x10
 1691 0012 06       		.uleb128 0x6
 1692 0013 00       		.byte	0
 1693 0014 00       		.byte	0
 1694 0015 02       		.uleb128 0x2
 1695 0016 24       		.uleb128 0x24
 1696 0017 00       		.byte	0
ARM GAS  /tmp/ccut5f2g.s 			page 37


 1697 0018 0B       		.uleb128 0xb
 1698 0019 0B       		.uleb128 0xb
 1699 001a 3E       		.uleb128 0x3e
 1700 001b 0B       		.uleb128 0xb
 1701 001c 03       		.uleb128 0x3
 1702 001d 0E       		.uleb128 0xe
 1703 001e 00       		.byte	0
 1704 001f 00       		.byte	0
 1705 0020 03       		.uleb128 0x3
 1706 0021 16       		.uleb128 0x16
 1707 0022 00       		.byte	0
 1708 0023 03       		.uleb128 0x3
 1709 0024 0E       		.uleb128 0xe
 1710 0025 3A       		.uleb128 0x3a
 1711 0026 0B       		.uleb128 0xb
 1712 0027 3B       		.uleb128 0x3b
 1713 0028 0B       		.uleb128 0xb
 1714 0029 49       		.uleb128 0x49
 1715 002a 13       		.uleb128 0x13
 1716 002b 00       		.byte	0
 1717 002c 00       		.byte	0
 1718 002d 04       		.uleb128 0x4
 1719 002e 24       		.uleb128 0x24
 1720 002f 00       		.byte	0
 1721 0030 0B       		.uleb128 0xb
 1722 0031 0B       		.uleb128 0xb
 1723 0032 3E       		.uleb128 0x3e
 1724 0033 0B       		.uleb128 0xb
 1725 0034 03       		.uleb128 0x3
 1726 0035 08       		.uleb128 0x8
 1727 0036 00       		.byte	0
 1728 0037 00       		.byte	0
 1729 0038 05       		.uleb128 0x5
 1730 0039 35       		.uleb128 0x35
 1731 003a 00       		.byte	0
 1732 003b 49       		.uleb128 0x49
 1733 003c 13       		.uleb128 0x13
 1734 003d 00       		.byte	0
 1735 003e 00       		.byte	0
 1736 003f 06       		.uleb128 0x6
 1737 0040 04       		.uleb128 0x4
 1738 0041 01       		.byte	0x1
 1739 0042 0B       		.uleb128 0xb
 1740 0043 0B       		.uleb128 0xb
 1741 0044 49       		.uleb128 0x49
 1742 0045 13       		.uleb128 0x13
 1743 0046 3A       		.uleb128 0x3a
 1744 0047 0B       		.uleb128 0xb
 1745 0048 3B       		.uleb128 0x3b
 1746 0049 05       		.uleb128 0x5
 1747 004a 01       		.uleb128 0x1
 1748 004b 13       		.uleb128 0x13
 1749 004c 00       		.byte	0
 1750 004d 00       		.byte	0
 1751 004e 07       		.uleb128 0x7
 1752 004f 28       		.uleb128 0x28
 1753 0050 00       		.byte	0
ARM GAS  /tmp/ccut5f2g.s 			page 38


 1754 0051 03       		.uleb128 0x3
 1755 0052 0E       		.uleb128 0xe
 1756 0053 1C       		.uleb128 0x1c
 1757 0054 0B       		.uleb128 0xb
 1758 0055 00       		.byte	0
 1759 0056 00       		.byte	0
 1760 0057 08       		.uleb128 0x8
 1761 0058 28       		.uleb128 0x28
 1762 0059 00       		.byte	0
 1763 005a 03       		.uleb128 0x3
 1764 005b 08       		.uleb128 0x8
 1765 005c 1C       		.uleb128 0x1c
 1766 005d 0B       		.uleb128 0xb
 1767 005e 00       		.byte	0
 1768 005f 00       		.byte	0
 1769 0060 09       		.uleb128 0x9
 1770 0061 13       		.uleb128 0x13
 1771 0062 01       		.byte	0x1
 1772 0063 0B       		.uleb128 0xb
 1773 0064 0B       		.uleb128 0xb
 1774 0065 3A       		.uleb128 0x3a
 1775 0066 0B       		.uleb128 0xb
 1776 0067 3B       		.uleb128 0x3b
 1777 0068 05       		.uleb128 0x5
 1778 0069 01       		.uleb128 0x1
 1779 006a 13       		.uleb128 0x13
 1780 006b 00       		.byte	0
 1781 006c 00       		.byte	0
 1782 006d 0A       		.uleb128 0xa
 1783 006e 0D       		.uleb128 0xd
 1784 006f 00       		.byte	0
 1785 0070 03       		.uleb128 0x3
 1786 0071 08       		.uleb128 0x8
 1787 0072 3A       		.uleb128 0x3a
 1788 0073 0B       		.uleb128 0xb
 1789 0074 3B       		.uleb128 0x3b
 1790 0075 05       		.uleb128 0x5
 1791 0076 49       		.uleb128 0x49
 1792 0077 13       		.uleb128 0x13
 1793 0078 38       		.uleb128 0x38
 1794 0079 0A       		.uleb128 0xa
 1795 007a 00       		.byte	0
 1796 007b 00       		.byte	0
 1797 007c 0B       		.uleb128 0xb
 1798 007d 0D       		.uleb128 0xd
 1799 007e 00       		.byte	0
 1800 007f 03       		.uleb128 0x3
 1801 0080 0E       		.uleb128 0xe
 1802 0081 3A       		.uleb128 0x3a
 1803 0082 0B       		.uleb128 0xb
 1804 0083 3B       		.uleb128 0x3b
 1805 0084 05       		.uleb128 0x5
 1806 0085 49       		.uleb128 0x49
 1807 0086 13       		.uleb128 0x13
 1808 0087 38       		.uleb128 0x38
 1809 0088 0A       		.uleb128 0xa
 1810 0089 00       		.byte	0
ARM GAS  /tmp/ccut5f2g.s 			page 39


 1811 008a 00       		.byte	0
 1812 008b 0C       		.uleb128 0xc
 1813 008c 16       		.uleb128 0x16
 1814 008d 00       		.byte	0
 1815 008e 03       		.uleb128 0x3
 1816 008f 0E       		.uleb128 0xe
 1817 0090 3A       		.uleb128 0x3a
 1818 0091 0B       		.uleb128 0xb
 1819 0092 3B       		.uleb128 0x3b
 1820 0093 05       		.uleb128 0x5
 1821 0094 49       		.uleb128 0x49
 1822 0095 13       		.uleb128 0x13
 1823 0096 00       		.byte	0
 1824 0097 00       		.byte	0
 1825 0098 0D       		.uleb128 0xd
 1826 0099 04       		.uleb128 0x4
 1827 009a 01       		.byte	0x1
 1828 009b 0B       		.uleb128 0xb
 1829 009c 0B       		.uleb128 0xb
 1830 009d 49       		.uleb128 0x49
 1831 009e 13       		.uleb128 0x13
 1832 009f 3A       		.uleb128 0x3a
 1833 00a0 0B       		.uleb128 0xb
 1834 00a1 3B       		.uleb128 0x3b
 1835 00a2 0B       		.uleb128 0xb
 1836 00a3 01       		.uleb128 0x1
 1837 00a4 13       		.uleb128 0x13
 1838 00a5 00       		.byte	0
 1839 00a6 00       		.byte	0
 1840 00a7 0E       		.uleb128 0xe
 1841 00a8 13       		.uleb128 0x13
 1842 00a9 01       		.byte	0x1
 1843 00aa 03       		.uleb128 0x3
 1844 00ab 0E       		.uleb128 0xe
 1845 00ac 0B       		.uleb128 0xb
 1846 00ad 0B       		.uleb128 0xb
 1847 00ae 3A       		.uleb128 0x3a
 1848 00af 0B       		.uleb128 0xb
 1849 00b0 3B       		.uleb128 0x3b
 1850 00b1 0B       		.uleb128 0xb
 1851 00b2 01       		.uleb128 0x1
 1852 00b3 13       		.uleb128 0x13
 1853 00b4 00       		.byte	0
 1854 00b5 00       		.byte	0
 1855 00b6 0F       		.uleb128 0xf
 1856 00b7 0D       		.uleb128 0xd
 1857 00b8 00       		.byte	0
 1858 00b9 03       		.uleb128 0x3
 1859 00ba 0E       		.uleb128 0xe
 1860 00bb 3A       		.uleb128 0x3a
 1861 00bc 0B       		.uleb128 0xb
 1862 00bd 3B       		.uleb128 0x3b
 1863 00be 0B       		.uleb128 0xb
 1864 00bf 49       		.uleb128 0x49
 1865 00c0 13       		.uleb128 0x13
 1866 00c1 38       		.uleb128 0x38
 1867 00c2 0A       		.uleb128 0xa
ARM GAS  /tmp/ccut5f2g.s 			page 40


 1868 00c3 00       		.byte	0
 1869 00c4 00       		.byte	0
 1870 00c5 10       		.uleb128 0x10
 1871 00c6 01       		.uleb128 0x1
 1872 00c7 01       		.byte	0x1
 1873 00c8 49       		.uleb128 0x49
 1874 00c9 13       		.uleb128 0x13
 1875 00ca 01       		.uleb128 0x1
 1876 00cb 13       		.uleb128 0x13
 1877 00cc 00       		.byte	0
 1878 00cd 00       		.byte	0
 1879 00ce 11       		.uleb128 0x11
 1880 00cf 21       		.uleb128 0x21
 1881 00d0 00       		.byte	0
 1882 00d1 49       		.uleb128 0x49
 1883 00d2 13       		.uleb128 0x13
 1884 00d3 2F       		.uleb128 0x2f
 1885 00d4 0B       		.uleb128 0xb
 1886 00d5 00       		.byte	0
 1887 00d6 00       		.byte	0
 1888 00d7 12       		.uleb128 0x12
 1889 00d8 2E       		.uleb128 0x2e
 1890 00d9 01       		.byte	0x1
 1891 00da 3F       		.uleb128 0x3f
 1892 00db 0C       		.uleb128 0xc
 1893 00dc 03       		.uleb128 0x3
 1894 00dd 0E       		.uleb128 0xe
 1895 00de 3A       		.uleb128 0x3a
 1896 00df 0B       		.uleb128 0xb
 1897 00e0 3B       		.uleb128 0x3b
 1898 00e1 0B       		.uleb128 0xb
 1899 00e2 27       		.uleb128 0x27
 1900 00e3 0C       		.uleb128 0xc
 1901 00e4 49       		.uleb128 0x49
 1902 00e5 13       		.uleb128 0x13
 1903 00e6 11       		.uleb128 0x11
 1904 00e7 01       		.uleb128 0x1
 1905 00e8 12       		.uleb128 0x12
 1906 00e9 01       		.uleb128 0x1
 1907 00ea 40       		.uleb128 0x40
 1908 00eb 06       		.uleb128 0x6
 1909 00ec 9642     		.uleb128 0x2116
 1910 00ee 0C       		.uleb128 0xc
 1911 00ef 01       		.uleb128 0x1
 1912 00f0 13       		.uleb128 0x13
 1913 00f1 00       		.byte	0
 1914 00f2 00       		.byte	0
 1915 00f3 13       		.uleb128 0x13
 1916 00f4 34       		.uleb128 0x34
 1917 00f5 00       		.byte	0
 1918 00f6 03       		.uleb128 0x3
 1919 00f7 0E       		.uleb128 0xe
 1920 00f8 3A       		.uleb128 0x3a
 1921 00f9 0B       		.uleb128 0xb
 1922 00fa 3B       		.uleb128 0x3b
 1923 00fb 0B       		.uleb128 0xb
 1924 00fc 49       		.uleb128 0x49
ARM GAS  /tmp/ccut5f2g.s 			page 41


 1925 00fd 13       		.uleb128 0x13
 1926 00fe 02       		.uleb128 0x2
 1927 00ff 0A       		.uleb128 0xa
 1928 0100 00       		.byte	0
 1929 0101 00       		.byte	0
 1930 0102 14       		.uleb128 0x14
 1931 0103 2E       		.uleb128 0x2e
 1932 0104 01       		.byte	0x1
 1933 0105 3F       		.uleb128 0x3f
 1934 0106 0C       		.uleb128 0xc
 1935 0107 03       		.uleb128 0x3
 1936 0108 0E       		.uleb128 0xe
 1937 0109 3A       		.uleb128 0x3a
 1938 010a 0B       		.uleb128 0xb
 1939 010b 3B       		.uleb128 0x3b
 1940 010c 0B       		.uleb128 0xb
 1941 010d 27       		.uleb128 0x27
 1942 010e 0C       		.uleb128 0xc
 1943 010f 11       		.uleb128 0x11
 1944 0110 01       		.uleb128 0x1
 1945 0111 12       		.uleb128 0x12
 1946 0112 01       		.uleb128 0x1
 1947 0113 40       		.uleb128 0x40
 1948 0114 06       		.uleb128 0x6
 1949 0115 9742     		.uleb128 0x2117
 1950 0117 0C       		.uleb128 0xc
 1951 0118 01       		.uleb128 0x1
 1952 0119 13       		.uleb128 0x13
 1953 011a 00       		.byte	0
 1954 011b 00       		.byte	0
 1955 011c 15       		.uleb128 0x15
 1956 011d 05       		.uleb128 0x5
 1957 011e 00       		.byte	0
 1958 011f 03       		.uleb128 0x3
 1959 0120 08       		.uleb128 0x8
 1960 0121 3A       		.uleb128 0x3a
 1961 0122 0B       		.uleb128 0xb
 1962 0123 3B       		.uleb128 0x3b
 1963 0124 0B       		.uleb128 0xb
 1964 0125 49       		.uleb128 0x49
 1965 0126 13       		.uleb128 0x13
 1966 0127 02       		.uleb128 0x2
 1967 0128 0A       		.uleb128 0xa
 1968 0129 00       		.byte	0
 1969 012a 00       		.byte	0
 1970 012b 16       		.uleb128 0x16
 1971 012c 05       		.uleb128 0x5
 1972 012d 00       		.byte	0
 1973 012e 03       		.uleb128 0x3
 1974 012f 0E       		.uleb128 0xe
 1975 0130 3A       		.uleb128 0x3a
 1976 0131 0B       		.uleb128 0xb
 1977 0132 3B       		.uleb128 0x3b
 1978 0133 0B       		.uleb128 0xb
 1979 0134 49       		.uleb128 0x49
 1980 0135 13       		.uleb128 0x13
 1981 0136 02       		.uleb128 0x2
ARM GAS  /tmp/ccut5f2g.s 			page 42


 1982 0137 0A       		.uleb128 0xa
 1983 0138 00       		.byte	0
 1984 0139 00       		.byte	0
 1985 013a 17       		.uleb128 0x17
 1986 013b 34       		.uleb128 0x34
 1987 013c 00       		.byte	0
 1988 013d 03       		.uleb128 0x3
 1989 013e 08       		.uleb128 0x8
 1990 013f 3A       		.uleb128 0x3a
 1991 0140 0B       		.uleb128 0xb
 1992 0141 3B       		.uleb128 0x3b
 1993 0142 0B       		.uleb128 0xb
 1994 0143 49       		.uleb128 0x49
 1995 0144 13       		.uleb128 0x13
 1996 0145 02       		.uleb128 0x2
 1997 0146 0A       		.uleb128 0xa
 1998 0147 00       		.byte	0
 1999 0148 00       		.byte	0
 2000 0149 18       		.uleb128 0x18
 2001 014a 0F       		.uleb128 0xf
 2002 014b 00       		.byte	0
 2003 014c 0B       		.uleb128 0xb
 2004 014d 0B       		.uleb128 0xb
 2005 014e 49       		.uleb128 0x49
 2006 014f 13       		.uleb128 0x13
 2007 0150 00       		.byte	0
 2008 0151 00       		.byte	0
 2009 0152 19       		.uleb128 0x19
 2010 0153 2E       		.uleb128 0x2e
 2011 0154 01       		.byte	0x1
 2012 0155 3F       		.uleb128 0x3f
 2013 0156 0C       		.uleb128 0xc
 2014 0157 03       		.uleb128 0x3
 2015 0158 0E       		.uleb128 0xe
 2016 0159 3A       		.uleb128 0x3a
 2017 015a 0B       		.uleb128 0xb
 2018 015b 3B       		.uleb128 0x3b
 2019 015c 0B       		.uleb128 0xb
 2020 015d 27       		.uleb128 0x27
 2021 015e 0C       		.uleb128 0xc
 2022 015f 11       		.uleb128 0x11
 2023 0160 01       		.uleb128 0x1
 2024 0161 12       		.uleb128 0x12
 2025 0162 01       		.uleb128 0x1
 2026 0163 40       		.uleb128 0x40
 2027 0164 06       		.uleb128 0x6
 2028 0165 9642     		.uleb128 0x2116
 2029 0167 0C       		.uleb128 0xc
 2030 0168 01       		.uleb128 0x1
 2031 0169 13       		.uleb128 0x13
 2032 016a 00       		.byte	0
 2033 016b 00       		.byte	0
 2034 016c 1A       		.uleb128 0x1a
 2035 016d 2E       		.uleb128 0x2e
 2036 016e 00       		.byte	0
 2037 016f 3F       		.uleb128 0x3f
 2038 0170 0C       		.uleb128 0xc
ARM GAS  /tmp/ccut5f2g.s 			page 43


 2039 0171 03       		.uleb128 0x3
 2040 0172 0E       		.uleb128 0xe
 2041 0173 3A       		.uleb128 0x3a
 2042 0174 0B       		.uleb128 0xb
 2043 0175 3B       		.uleb128 0x3b
 2044 0176 0B       		.uleb128 0xb
 2045 0177 27       		.uleb128 0x27
 2046 0178 0C       		.uleb128 0xc
 2047 0179 11       		.uleb128 0x11
 2048 017a 01       		.uleb128 0x1
 2049 017b 12       		.uleb128 0x12
 2050 017c 01       		.uleb128 0x1
 2051 017d 40       		.uleb128 0x40
 2052 017e 0A       		.uleb128 0xa
 2053 017f 9742     		.uleb128 0x2117
 2054 0181 0C       		.uleb128 0xc
 2055 0182 00       		.byte	0
 2056 0183 00       		.byte	0
 2057 0184 1B       		.uleb128 0x1b
 2058 0185 2E       		.uleb128 0x2e
 2059 0186 01       		.byte	0x1
 2060 0187 3F       		.uleb128 0x3f
 2061 0188 0C       		.uleb128 0xc
 2062 0189 03       		.uleb128 0x3
 2063 018a 0E       		.uleb128 0xe
 2064 018b 3A       		.uleb128 0x3a
 2065 018c 0B       		.uleb128 0xb
 2066 018d 3B       		.uleb128 0x3b
 2067 018e 0B       		.uleb128 0xb
 2068 018f 27       		.uleb128 0x27
 2069 0190 0C       		.uleb128 0xc
 2070 0191 49       		.uleb128 0x49
 2071 0192 13       		.uleb128 0x13
 2072 0193 11       		.uleb128 0x11
 2073 0194 01       		.uleb128 0x1
 2074 0195 12       		.uleb128 0x12
 2075 0196 01       		.uleb128 0x1
 2076 0197 40       		.uleb128 0x40
 2077 0198 06       		.uleb128 0x6
 2078 0199 9742     		.uleb128 0x2117
 2079 019b 0C       		.uleb128 0xc
 2080 019c 01       		.uleb128 0x1
 2081 019d 13       		.uleb128 0x13
 2082 019e 00       		.byte	0
 2083 019f 00       		.byte	0
 2084 01a0 1C       		.uleb128 0x1c
 2085 01a1 2E       		.uleb128 0x2e
 2086 01a2 01       		.byte	0x1
 2087 01a3 3F       		.uleb128 0x3f
 2088 01a4 0C       		.uleb128 0xc
 2089 01a5 03       		.uleb128 0x3
 2090 01a6 0E       		.uleb128 0xe
 2091 01a7 3A       		.uleb128 0x3a
 2092 01a8 0B       		.uleb128 0xb
 2093 01a9 3B       		.uleb128 0x3b
 2094 01aa 05       		.uleb128 0x5
 2095 01ab 27       		.uleb128 0x27
ARM GAS  /tmp/ccut5f2g.s 			page 44


 2096 01ac 0C       		.uleb128 0xc
 2097 01ad 49       		.uleb128 0x49
 2098 01ae 13       		.uleb128 0x13
 2099 01af 11       		.uleb128 0x11
 2100 01b0 01       		.uleb128 0x1
 2101 01b1 12       		.uleb128 0x12
 2102 01b2 01       		.uleb128 0x1
 2103 01b3 40       		.uleb128 0x40
 2104 01b4 06       		.uleb128 0x6
 2105 01b5 9642     		.uleb128 0x2116
 2106 01b7 0C       		.uleb128 0xc
 2107 01b8 01       		.uleb128 0x1
 2108 01b9 13       		.uleb128 0x13
 2109 01ba 00       		.byte	0
 2110 01bb 00       		.byte	0
 2111 01bc 1D       		.uleb128 0x1d
 2112 01bd 05       		.uleb128 0x5
 2113 01be 00       		.byte	0
 2114 01bf 03       		.uleb128 0x3
 2115 01c0 08       		.uleb128 0x8
 2116 01c1 3A       		.uleb128 0x3a
 2117 01c2 0B       		.uleb128 0xb
 2118 01c3 3B       		.uleb128 0x3b
 2119 01c4 05       		.uleb128 0x5
 2120 01c5 49       		.uleb128 0x49
 2121 01c6 13       		.uleb128 0x13
 2122 01c7 02       		.uleb128 0x2
 2123 01c8 0A       		.uleb128 0xa
 2124 01c9 00       		.byte	0
 2125 01ca 00       		.byte	0
 2126 01cb 1E       		.uleb128 0x1e
 2127 01cc 05       		.uleb128 0x5
 2128 01cd 00       		.byte	0
 2129 01ce 03       		.uleb128 0x3
 2130 01cf 0E       		.uleb128 0xe
 2131 01d0 3A       		.uleb128 0x3a
 2132 01d1 0B       		.uleb128 0xb
 2133 01d2 3B       		.uleb128 0x3b
 2134 01d3 05       		.uleb128 0x5
 2135 01d4 49       		.uleb128 0x49
 2136 01d5 13       		.uleb128 0x13
 2137 01d6 02       		.uleb128 0x2
 2138 01d7 0A       		.uleb128 0xa
 2139 01d8 00       		.byte	0
 2140 01d9 00       		.byte	0
 2141 01da 1F       		.uleb128 0x1f
 2142 01db 34       		.uleb128 0x34
 2143 01dc 00       		.byte	0
 2144 01dd 03       		.uleb128 0x3
 2145 01de 08       		.uleb128 0x8
 2146 01df 3A       		.uleb128 0x3a
 2147 01e0 0B       		.uleb128 0xb
 2148 01e1 3B       		.uleb128 0x3b
 2149 01e2 05       		.uleb128 0x5
 2150 01e3 49       		.uleb128 0x49
 2151 01e4 13       		.uleb128 0x13
 2152 01e5 02       		.uleb128 0x2
ARM GAS  /tmp/ccut5f2g.s 			page 45


 2153 01e6 0A       		.uleb128 0xa
 2154 01e7 00       		.byte	0
 2155 01e8 00       		.byte	0
 2156 01e9 20       		.uleb128 0x20
 2157 01ea 34       		.uleb128 0x34
 2158 01eb 00       		.byte	0
 2159 01ec 03       		.uleb128 0x3
 2160 01ed 0E       		.uleb128 0xe
 2161 01ee 3A       		.uleb128 0x3a
 2162 01ef 0B       		.uleb128 0xb
 2163 01f0 3B       		.uleb128 0x3b
 2164 01f1 05       		.uleb128 0x5
 2165 01f2 49       		.uleb128 0x49
 2166 01f3 13       		.uleb128 0x13
 2167 01f4 02       		.uleb128 0x2
 2168 01f5 0A       		.uleb128 0xa
 2169 01f6 00       		.byte	0
 2170 01f7 00       		.byte	0
 2171 01f8 21       		.uleb128 0x21
 2172 01f9 34       		.uleb128 0x34
 2173 01fa 00       		.byte	0
 2174 01fb 03       		.uleb128 0x3
 2175 01fc 0E       		.uleb128 0xe
 2176 01fd 3A       		.uleb128 0x3a
 2177 01fe 0B       		.uleb128 0xb
 2178 01ff 3B       		.uleb128 0x3b
 2179 0200 0B       		.uleb128 0xb
 2180 0201 49       		.uleb128 0x49
 2181 0202 13       		.uleb128 0x13
 2182 0203 3F       		.uleb128 0x3f
 2183 0204 0C       		.uleb128 0xc
 2184 0205 3C       		.uleb128 0x3c
 2185 0206 0C       		.uleb128 0xc
 2186 0207 00       		.byte	0
 2187 0208 00       		.byte	0
 2188 0209 00       		.byte	0
 2189              		.section	.debug_loc,"",%progbits
 2190              	.Ldebug_loc0:
 2191              	.LLST0:
 2192 0000 00000000 		.4byte	.LFB20
 2193 0004 02000000 		.4byte	.LCFI0
 2194 0008 0200     		.2byte	0x2
 2195 000a 7D       		.byte	0x7d
 2196 000b 00       		.sleb128 0
 2197 000c 02000000 		.4byte	.LCFI0
 2198 0010 04000000 		.4byte	.LCFI1
 2199 0014 0200     		.2byte	0x2
 2200 0016 7D       		.byte	0x7d
 2201 0017 04       		.sleb128 4
 2202 0018 04000000 		.4byte	.LCFI1
 2203 001c 48000000 		.4byte	.LFE20
 2204 0020 0200     		.2byte	0x2
 2205 0022 7D       		.byte	0x7d
 2206 0023 10       		.sleb128 16
 2207 0024 00000000 		.4byte	0
 2208 0028 00000000 		.4byte	0
 2209              	.LLST1:
ARM GAS  /tmp/ccut5f2g.s 			page 46


 2210 002c 00000000 		.4byte	.LFB21
 2211 0030 02000000 		.4byte	.LCFI2
 2212 0034 0200     		.2byte	0x2
 2213 0036 7D       		.byte	0x7d
 2214 0037 00       		.sleb128 0
 2215 0038 02000000 		.4byte	.LCFI2
 2216 003c 4A000000 		.4byte	.LFE21
 2217 0040 0200     		.2byte	0x2
 2218 0042 7D       		.byte	0x7d
 2219 0043 10       		.sleb128 16
 2220 0044 00000000 		.4byte	0
 2221 0048 00000000 		.4byte	0
 2222              	.LLST2:
 2223 004c 00000000 		.4byte	.LFB22
 2224 0050 02000000 		.4byte	.LCFI3
 2225 0054 0200     		.2byte	0x2
 2226 0056 7D       		.byte	0x7d
 2227 0057 00       		.sleb128 0
 2228 0058 02000000 		.4byte	.LCFI3
 2229 005c 04000000 		.4byte	.LCFI4
 2230 0060 0200     		.2byte	0x2
 2231 0062 7D       		.byte	0x7d
 2232 0063 04       		.sleb128 4
 2233 0064 04000000 		.4byte	.LCFI4
 2234 0068 2E000000 		.4byte	.LFE22
 2235 006c 0200     		.2byte	0x2
 2236 006e 7D       		.byte	0x7d
 2237 006f 10       		.sleb128 16
 2238 0070 00000000 		.4byte	0
 2239 0074 00000000 		.4byte	0
 2240              	.LLST3:
 2241 0078 00000000 		.4byte	.LFB24
 2242 007c 02000000 		.4byte	.LCFI5
 2243 0080 0200     		.2byte	0x2
 2244 0082 7D       		.byte	0x7d
 2245 0083 00       		.sleb128 0
 2246 0084 02000000 		.4byte	.LCFI5
 2247 0088 04000000 		.4byte	.LCFI6
 2248 008c 0200     		.2byte	0x2
 2249 008e 7D       		.byte	0x7d
 2250 008f 08       		.sleb128 8
 2251 0090 04000000 		.4byte	.LCFI6
 2252 0094 78000000 		.4byte	.LFE24
 2253 0098 0200     		.2byte	0x2
 2254 009a 7D       		.byte	0x7d
 2255 009b 18       		.sleb128 24
 2256 009c 00000000 		.4byte	0
 2257 00a0 00000000 		.4byte	0
 2258              	.LLST4:
 2259 00a4 00000000 		.4byte	.LFB26
 2260 00a8 02000000 		.4byte	.LCFI7
 2261 00ac 0200     		.2byte	0x2
 2262 00ae 7D       		.byte	0x7d
 2263 00af 00       		.sleb128 0
 2264 00b0 02000000 		.4byte	.LCFI7
 2265 00b4 04000000 		.4byte	.LCFI8
 2266 00b8 0200     		.2byte	0x2
ARM GAS  /tmp/ccut5f2g.s 			page 47


 2267 00ba 7D       		.byte	0x7d
 2268 00bb 08       		.sleb128 8
 2269 00bc 04000000 		.4byte	.LCFI8
 2270 00c0 B0000000 		.4byte	.LFE26
 2271 00c4 0200     		.2byte	0x2
 2272 00c6 7D       		.byte	0x7d
 2273 00c7 18       		.sleb128 24
 2274 00c8 00000000 		.4byte	0
 2275 00cc 00000000 		.4byte	0
 2276              	.LLST5:
 2277 00d0 00000000 		.4byte	.LFB27
 2278 00d4 02000000 		.4byte	.LCFI9
 2279 00d8 0200     		.2byte	0x2
 2280 00da 7D       		.byte	0x7d
 2281 00db 00       		.sleb128 0
 2282 00dc 02000000 		.4byte	.LCFI9
 2283 00e0 04000000 		.4byte	.LCFI10
 2284 00e4 0200     		.2byte	0x2
 2285 00e6 7D       		.byte	0x7d
 2286 00e7 08       		.sleb128 8
 2287 00e8 04000000 		.4byte	.LCFI10
 2288 00ec 58000000 		.4byte	.LFE27
 2289 00f0 0200     		.2byte	0x2
 2290 00f2 7D       		.byte	0x7d
 2291 00f3 18       		.sleb128 24
 2292 00f4 00000000 		.4byte	0
 2293 00f8 00000000 		.4byte	0
 2294              	.LLST6:
 2295 00fc 00000000 		.4byte	.LFB28
 2296 0100 02000000 		.4byte	.LCFI11
 2297 0104 0200     		.2byte	0x2
 2298 0106 7D       		.byte	0x7d
 2299 0107 00       		.sleb128 0
 2300 0108 02000000 		.4byte	.LCFI11
 2301 010c 60000000 		.4byte	.LFE28
 2302 0110 0200     		.2byte	0x2
 2303 0112 7D       		.byte	0x7d
 2304 0113 08       		.sleb128 8
 2305 0114 00000000 		.4byte	0
 2306 0118 00000000 		.4byte	0
 2307              	.LLST7:
 2308 011c 00000000 		.4byte	.LFB29
 2309 0120 02000000 		.4byte	.LCFI12
 2310 0124 0200     		.2byte	0x2
 2311 0126 7D       		.byte	0x7d
 2312 0127 00       		.sleb128 0
 2313 0128 02000000 		.4byte	.LCFI12
 2314 012c 04000000 		.4byte	.LCFI13
 2315 0130 0200     		.2byte	0x2
 2316 0132 7D       		.byte	0x7d
 2317 0133 04       		.sleb128 4
 2318 0134 04000000 		.4byte	.LCFI13
 2319 0138 AE000000 		.4byte	.LFE29
 2320 013c 0200     		.2byte	0x2
 2321 013e 7D       		.byte	0x7d
 2322 013f 20       		.sleb128 32
 2323 0140 00000000 		.4byte	0
ARM GAS  /tmp/ccut5f2g.s 			page 48


 2324 0144 00000000 		.4byte	0
 2325              	.LLST8:
 2326 0148 00000000 		.4byte	.LFB30
 2327 014c 02000000 		.4byte	.LCFI14
 2328 0150 0200     		.2byte	0x2
 2329 0152 7D       		.byte	0x7d
 2330 0153 00       		.sleb128 0
 2331 0154 02000000 		.4byte	.LCFI14
 2332 0158 04000000 		.4byte	.LCFI15
 2333 015c 0200     		.2byte	0x2
 2334 015e 7D       		.byte	0x7d
 2335 015f 04       		.sleb128 4
 2336 0160 04000000 		.4byte	.LCFI15
 2337 0164 38000000 		.4byte	.LFE30
 2338 0168 0200     		.2byte	0x2
 2339 016a 7D       		.byte	0x7d
 2340 016b 10       		.sleb128 16
 2341 016c 00000000 		.4byte	0
 2342 0170 00000000 		.4byte	0
 2343              	.LLST9:
 2344 0174 00000000 		.4byte	.LFB31
 2345 0178 02000000 		.4byte	.LCFI16
 2346 017c 0200     		.2byte	0x2
 2347 017e 7D       		.byte	0x7d
 2348 017f 00       		.sleb128 0
 2349 0180 02000000 		.4byte	.LCFI16
 2350 0184 04000000 		.4byte	.LCFI17
 2351 0188 0200     		.2byte	0x2
 2352 018a 7D       		.byte	0x7d
 2353 018b 04       		.sleb128 4
 2354 018c 04000000 		.4byte	.LCFI17
 2355 0190 C8000000 		.4byte	.LFE31
 2356 0194 0200     		.2byte	0x2
 2357 0196 7D       		.byte	0x7d
 2358 0197 20       		.sleb128 32
 2359 0198 00000000 		.4byte	0
 2360 019c 00000000 		.4byte	0
 2361              		.section	.debug_aranges,"",%progbits
 2362 0000 74000000 		.4byte	0x74
 2363 0004 0200     		.2byte	0x2
 2364 0006 00000000 		.4byte	.Ldebug_info0
 2365 000a 04       		.byte	0x4
 2366 000b 00       		.byte	0
 2367 000c 0000     		.2byte	0
 2368 000e 0000     		.2byte	0
 2369 0010 00000000 		.4byte	.LFB20
 2370 0014 48000000 		.4byte	.LFE20-.LFB20
 2371 0018 00000000 		.4byte	.LFB21
 2372 001c 4A000000 		.4byte	.LFE21-.LFB21
 2373 0020 00000000 		.4byte	.LFB22
 2374 0024 2E000000 		.4byte	.LFE22-.LFB22
 2375 0028 00000000 		.4byte	.LFB23
 2376 002c 28000000 		.4byte	.LFE23-.LFB23
 2377 0030 00000000 		.4byte	.LFB24
 2378 0034 78000000 		.4byte	.LFE24-.LFB24
 2379 0038 00000000 		.4byte	.LFB25
 2380 003c 14000000 		.4byte	.LFE25-.LFB25
ARM GAS  /tmp/ccut5f2g.s 			page 49


 2381 0040 00000000 		.4byte	.LFB26
 2382 0044 B0000000 		.4byte	.LFE26-.LFB26
 2383 0048 00000000 		.4byte	.LFB27
 2384 004c 58000000 		.4byte	.LFE27-.LFB27
 2385 0050 00000000 		.4byte	.LFB28
 2386 0054 60000000 		.4byte	.LFE28-.LFB28
 2387 0058 00000000 		.4byte	.LFB29
 2388 005c AE000000 		.4byte	.LFE29-.LFB29
 2389 0060 00000000 		.4byte	.LFB30
 2390 0064 38000000 		.4byte	.LFE30-.LFB30
 2391 0068 00000000 		.4byte	.LFB31
 2392 006c C8000000 		.4byte	.LFE31-.LFB31
 2393 0070 00000000 		.4byte	0
 2394 0074 00000000 		.4byte	0
 2395              		.section	.debug_ranges,"",%progbits
 2396              	.Ldebug_ranges0:
 2397 0000 00000000 		.4byte	.LFB20
 2398 0004 48000000 		.4byte	.LFE20
 2399 0008 00000000 		.4byte	.LFB21
 2400 000c 4A000000 		.4byte	.LFE21
 2401 0010 00000000 		.4byte	.LFB22
 2402 0014 2E000000 		.4byte	.LFE22
 2403 0018 00000000 		.4byte	.LFB23
 2404 001c 28000000 		.4byte	.LFE23
 2405 0020 00000000 		.4byte	.LFB24
 2406 0024 78000000 		.4byte	.LFE24
 2407 0028 00000000 		.4byte	.LFB25
 2408 002c 14000000 		.4byte	.LFE25
 2409 0030 00000000 		.4byte	.LFB26
 2410 0034 B0000000 		.4byte	.LFE26
 2411 0038 00000000 		.4byte	.LFB27
 2412 003c 58000000 		.4byte	.LFE27
 2413 0040 00000000 		.4byte	.LFB28
 2414 0044 60000000 		.4byte	.LFE28
 2415 0048 00000000 		.4byte	.LFB29
 2416 004c AE000000 		.4byte	.LFE29
 2417 0050 00000000 		.4byte	.LFB30
 2418 0054 38000000 		.4byte	.LFE30
 2419 0058 00000000 		.4byte	.LFB31
 2420 005c C8000000 		.4byte	.LFE31
 2421 0060 00000000 		.4byte	0
 2422 0064 00000000 		.4byte	0
 2423              		.section	.debug_line,"",%progbits
 2424              	.Ldebug_line0:
 2425 0000 87020000 		.section	.debug_str,"MS",%progbits,1
 2425      02000C01 
 2425      00000201 
 2425      FB0E0D00 
 2425      01010101 
 2426              	.LASF61:
 2427 0000 57726974 		.ascii	"WriteFlash\000"
 2427      65466C61 
 2427      736800
 2428              	.LASF31:
 2429 000b 6163756D 		.ascii	"acumm_w2s_index\000"
 2429      6D5F7732 
 2429      735F696E 
ARM GAS  /tmp/ccut5f2g.s 			page 50


 2429      64657800 
 2430              	.LASF21:
 2431 001b 464C4153 		.ascii	"FLASH_ERROR_WRP\000"
 2431      485F4552 
 2431      524F525F 
 2431      57525000 
 2432              	.LASF28:
 2433 002b 6E756D5F 		.ascii	"num_propio\000"
 2433      70726F70 
 2433      696F00
 2434              	.LASF13:
 2435 0036 73697A65 		.ascii	"sizetype\000"
 2435      74797065 
 2435      00
 2436              	.LASF35:
 2437 003f 70617261 		.ascii	"parameters_typedef\000"
 2437      6D657465 
 2437      72735F74 
 2437      79706564 
 2437      656600
 2438              	.LASF6:
 2439 0052 5F5F7569 		.ascii	"__uint32_t\000"
 2439      6E743332 
 2439      5F7400
 2440              	.LASF37:
 2441 005d 50415353 		.ascii	"PASSED\000"
 2441      454400
 2442              	.LASF51:
 2443 0064 41646472 		.ascii	"Address\000"
 2443      65737300 
 2444              	.LASF39:
 2445 006c 72657370 		.ascii	"resp\000"
 2445      00
 2446              	.LASF5:
 2447 0071 5F5F7569 		.ascii	"__uint16_t\000"
 2447      6E743136 
 2447      5F7400
 2448              	.LASF40:
 2449 007c 4261636B 		.ascii	"BackupPage\000"
 2449      75705061 
 2449      676500
 2450              	.LASF38:
 2451 0087 70616765 		.ascii	"page_addr\000"
 2451      5F616464 
 2451      7200
 2452              	.LASF15:
 2453 0091 4B455952 		.ascii	"KEYR\000"
 2453      00
 2454              	.LASF48:
 2455 0096 464C4153 		.ascii	"FLASH_Unlock\000"
 2455      485F556E 
 2455      6C6F636B 
 2455      00
 2456              	.LASF26:
 2457 00a3 6E756D5F 		.ascii	"num_reportar\000"
 2457      7265706F 
 2457      72746172 
ARM GAS  /tmp/ccut5f2g.s 			page 51


 2457      00
 2458              	.LASF25:
 2459 00b0 464C4153 		.ascii	"FLASH_Status\000"
 2459      485F5374 
 2459      61747573 
 2459      00
 2460              	.LASF45:
 2461 00bd 464C4153 		.ascii	"FLASH_ErasePage\000"
 2461      485F4572 
 2461      61736550 
 2461      61676500 
 2462              	.LASF2:
 2463 00cd 73686F72 		.ascii	"short int\000"
 2463      7420696E 
 2463      7400
 2464              	.LASF67:
 2465 00d7 70617261 		.ascii	"param_struct\000"
 2465      6D5F7374 
 2465      72756374 
 2465      00
 2466              	.LASF16:
 2467 00e4 4F50544B 		.ascii	"OPTKEYR\000"
 2467      45595200 
 2468              	.LASF8:
 2469 00ec 6C6F6E67 		.ascii	"long long int\000"
 2469      206C6F6E 
 2469      6720696E 
 2469      7400
 2470              	.LASF4:
 2471 00fa 6C6F6E67 		.ascii	"long int\000"
 2471      20696E74 
 2471      00
 2472              	.LASF18:
 2473 0103 57525052 		.ascii	"WRPR\000"
 2473      00
 2474              	.LASF52:
 2475 0108 44617461 		.ascii	"Data\000"
 2475      00
 2476              	.LASF66:
 2477 010d 70617261 		.ascii	"parameters\000"
 2477      6D657465 
 2477      727300
 2478              	.LASF29:
 2479 0118 6163756D 		.ascii	"acumm_wh\000"
 2479      6D5F7768 
 2479      00
 2480              	.LASF1:
 2481 0121 756E7369 		.ascii	"unsigned char\000"
 2481      676E6564 
 2481      20636861 
 2481      7200
 2482              	.LASF46:
 2483 012f 50616765 		.ascii	"Page_Address\000"
 2483      5F416464 
 2483      72657373 
 2483      00
 2484              	.LASF64:
ARM GAS  /tmp/ccut5f2g.s 			page 52


 2485 013c 7372632F 		.ascii	"src/flash_program.c\000"
 2485      666C6173 
 2485      685F7072 
 2485      6F677261 
 2485      6D2E6300 
 2486              	.LASF32:
 2487 0150 74696D65 		.ascii	"timer_reportar\000"
 2487      725F7265 
 2487      706F7274 
 2487      617200
 2488              	.LASF63:
 2489 015f 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 2489      43313120 
 2489      352E322E 
 2489      31203230 
 2489      31353132 
 2490 0192 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 2490      20726576 
 2490      6973696F 
 2490      6E203233 
 2490      31383438 
 2491 01c5 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 2491      662D3220 
 2491      2D4F3020 
 2491      2D666F6D 
 2491      69742D66 
 2492 01f8 66756E63 		.ascii	"function-sections\000"
 2492      74696F6E 
 2492      2D736563 
 2492      74696F6E 
 2492      7300
 2493              	.LASF43:
 2494 020a 77697468 		.ascii	"with_lock\000"
 2494      5F6C6F63 
 2494      6B00
 2495              	.LASF0:
 2496 0214 7369676E 		.ascii	"signed char\000"
 2496      65642063 
 2496      68617200 
 2497              	.LASF9:
 2498 0220 6C6F6E67 		.ascii	"long long unsigned int\000"
 2498      206C6F6E 
 2498      6720756E 
 2498      7369676E 
 2498      65642069 
 2499              	.LASF12:
 2500 0237 75696E74 		.ascii	"uint32_t\000"
 2500      33325F74 
 2500      00
 2501              	.LASF10:
 2502 0240 756E7369 		.ascii	"unsigned int\000"
 2502      676E6564 
 2502      20696E74 
 2502      00
 2503              	.LASF23:
 2504 024d 464C4153 		.ascii	"FLASH_COMPLETE\000"
 2504      485F434F 
ARM GAS  /tmp/ccut5f2g.s 			page 53


 2504      4D504C45 
 2504      544500
 2505              	.LASF20:
 2506 025c 464C4153 		.ascii	"FLASH_BUSY\000"
 2506      485F4255 
 2506      535900
 2507              	.LASF24:
 2508 0267 464C4153 		.ascii	"FLASH_TIMEOUT\000"
 2508      485F5449 
 2508      4D454F55 
 2508      5400
 2509              	.LASF42:
 2510 0275 705F6164 		.ascii	"p_addr\000"
 2510      647200
 2511              	.LASF47:
 2512 027c 73746174 		.ascii	"status\000"
 2512      757300
 2513              	.LASF57:
 2514 0283 57726974 		.ascii	"WritePage\000"
 2514      65506167 
 2514      6500
 2515              	.LASF54:
 2516 028d 54696D65 		.ascii	"Timeout\000"
 2516      6F757400 
 2517              	.LASF34:
 2518 0295 63686172 		.ascii	"char\000"
 2518      00
 2519              	.LASF11:
 2520 029a 75696E74 		.ascii	"uint16_t\000"
 2520      31365F74 
 2520      00
 2521              	.LASF27:
 2522 02a3 696D6569 		.ascii	"imei\000"
 2522      00
 2523              	.LASF49:
 2524 02a8 464C4153 		.ascii	"FLASH_Lock\000"
 2524      485F4C6F 
 2524      636B00
 2525              	.LASF44:
 2526 02b3 45726173 		.ascii	"EraseAllMemory_FLASH\000"
 2526      65416C6C 
 2526      4D656D6F 
 2526      72795F46 
 2526      4C415348 
 2527              	.LASF59:
 2528 02c8 57726974 		.ascii	"WriteConfigurations\000"
 2528      65436F6E 
 2528      66696775 
 2528      72617469 
 2528      6F6E7300 
 2529              	.LASF55:
 2530 02dc 464C4153 		.ascii	"FLASH_GetStatus\000"
 2530      485F4765 
 2530      74537461 
 2530      74757300 
 2531              	.LASF60:
 2532 02ec 705F7061 		.ascii	"p_param\000"
ARM GAS  /tmp/ccut5f2g.s 			page 54


 2532      72616D00 
 2533              	.LASF62:
 2534 02f4 6C656E5F 		.ascii	"len_in_4\000"
 2534      696E5F34 
 2534      00
 2535              	.LASF3:
 2536 02fd 73686F72 		.ascii	"short unsigned int\000"
 2536      7420756E 
 2536      7369676E 
 2536      65642069 
 2536      6E7400
 2537              	.LASF30:
 2538 0310 6163756D 		.ascii	"acumm_w2s\000"
 2538      6D5F7732 
 2538      7300
 2539              	.LASF7:
 2540 031a 6C6F6E67 		.ascii	"long unsigned int\000"
 2540      20756E73 
 2540      69676E65 
 2540      6420696E 
 2540      7400
 2541              	.LASF56:
 2542 032c 464C4153 		.ascii	"FLASHstatus\000"
 2542      48737461 
 2542      74757300 
 2543              	.LASF65:
 2544 0338 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 2544      652F6D65 
 2544      642F446F 
 2544      63756D65 
 2544      6E74732F 
 2545 036b 6100     		.ascii	"a\000"
 2546              	.LASF33:
 2547 036d 64756D6D 		.ascii	"dummy1\000"
 2547      793100
 2548              	.LASF14:
 2549 0374 52455345 		.ascii	"RESET\000"
 2549      5400
 2550              	.LASF22:
 2551 037a 464C4153 		.ascii	"FLASH_ERROR_PROGRAM\000"
 2551      485F4552 
 2551      524F525F 
 2551      50524F47 
 2551      52414D00 
 2552              	.LASF50:
 2553 038e 464C4153 		.ascii	"FLASH_ProgramWord\000"
 2553      485F5072 
 2553      6F677261 
 2553      6D576F72 
 2553      6400
 2554              	.LASF17:
 2555 03a0 52455345 		.ascii	"RESERVED\000"
 2555      52564544 
 2555      00
 2556              	.LASF19:
 2557 03a9 464C4153 		.ascii	"FLASH_TypeDef\000"
 2557      485F5479 
ARM GAS  /tmp/ccut5f2g.s 			page 55


 2557      70654465 
 2557      6600
 2558              	.LASF53:
 2559 03b7 464C4153 		.ascii	"FLASH_WaitForLastOperation\000"
 2559      485F5761 
 2559      6974466F 
 2559      724C6173 
 2559      744F7065 
 2560              	.LASF58:
 2561 03d2 705F7665 		.ascii	"p_verif\000"
 2561      72696600 
 2562              	.LASF41:
 2563 03da 45726173 		.ascii	"ErasePage\000"
 2563      65506167 
 2563      6500
 2564              	.LASF36:
 2565 03e4 4641494C 		.ascii	"FAILED\000"
 2565      454400
 2566              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccut5f2g.s 			page 56


DEFINED SYMBOLS
                            *ABS*:00000000 flash_program.c
     /tmp/ccut5f2g.s:55     .text.EraseAllMemory_FLASH:00000000 $t
     /tmp/ccut5f2g.s:60     .text.EraseAllMemory_FLASH:00000000 EraseAllMemory_FLASH
     /tmp/ccut5f2g.s:187    .text.ErasePage:00000000 ErasePage
     /tmp/ccut5f2g.s:117    .text.EraseAllMemory_FLASH:00000044 $d
     /tmp/ccut5f2g.s:122    .text.BackupPage:00000000 $t
     /tmp/ccut5f2g.s:127    .text.BackupPage:00000000 BackupPage
     /tmp/ccut5f2g.s:182    .text.ErasePage:00000000 $t
     /tmp/ccut5f2g.s:232    .text.FLASH_Unlock:00000000 FLASH_Unlock
     /tmp/ccut5f2g.s:270    .text.FLASH_ErasePage:00000000 FLASH_ErasePage
     /tmp/ccut5f2g.s:360    .text.FLASH_Lock:00000000 FLASH_Lock
     /tmp/ccut5f2g.s:227    .text.FLASH_Unlock:00000000 $t
     /tmp/ccut5f2g.s:258    .text.FLASH_Unlock:0000001c $d
     /tmp/ccut5f2g.s:265    .text.FLASH_ErasePage:00000000 $t
     /tmp/ccut5f2g.s:511    .text.FLASH_WaitForLastOperation:00000000 FLASH_WaitForLastOperation
     /tmp/ccut5f2g.s:350    .text.FLASH_ErasePage:00000074 $d
     /tmp/ccut5f2g.s:355    .text.FLASH_Lock:00000000 $t
     /tmp/ccut5f2g.s:378    .text.FLASH_Lock:00000010 $d
     /tmp/ccut5f2g.s:383    .text.FLASH_ProgramWord:00000000 $t
     /tmp/ccut5f2g.s:388    .text.FLASH_ProgramWord:00000000 FLASH_ProgramWord
     /tmp/ccut5f2g.s:501    .text.FLASH_ProgramWord:000000ac $d
     /tmp/ccut5f2g.s:506    .text.FLASH_WaitForLastOperation:00000000 $t
     /tmp/ccut5f2g.s:588    .text.FLASH_GetStatus:00000000 FLASH_GetStatus
     /tmp/ccut5f2g.s:583    .text.FLASH_GetStatus:00000000 $t
     /tmp/ccut5f2g.s:657    .text.FLASH_GetStatus:0000005c $d
     /tmp/ccut5f2g.s:662    .text.WritePage:00000000 $t
     /tmp/ccut5f2g.s:667    .text.WritePage:00000000 WritePage
     /tmp/ccut5f2g.s:788    .text.WriteConfigurations:00000000 $t
     /tmp/ccut5f2g.s:793    .text.WriteConfigurations:00000000 WriteConfigurations
     /tmp/ccut5f2g.s:846    .text.WriteFlash:00000000 WriteFlash
     /tmp/ccut5f2g.s:835    .text.WriteConfigurations:00000030 $d
     /tmp/ccut5f2g.s:841    .text.WriteFlash:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
param_struct
