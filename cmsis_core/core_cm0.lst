ARM GAS  /tmp/ccGXyuRM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"core_cm0.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -I ../STM32F0xx_StdPeriph_Lib_V1.3.1/Libraries/STM32F0xx_StdPeriph_Driver/inc
  19              	@ -I ./inc -I ./cmsis_boot -imultilib armv6-m
  20              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  21              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  22              	@ -D__USES_INITFINI__ cmsis_core/core_cm0.c -mcpu=cortex-m0 -mthumb
  23              	@ -auxbase-strip cmsis_core/core_cm0.o -g -gdwarf-2 -O0 -Wall
  24              	@ -fomit-frame-pointer -fdata-sections -ffunction-sections -fverbose-asm
  25              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  26              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  27              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  28              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  29              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  36              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  37              	@ -fprefetch-loop-arrays -freg-struct-return
  38              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  39              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  40              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  41              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  42              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  43              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  44              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  45              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  46              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  47              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  48              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  49              	@ -mvectorize-with-neon-quad
  50              	
  51              		.text
  52              	.Ltext0:
  53              		.cfi_sections	.debug_frame
  54              		.section	.text.__get_PSP,"ax",%progbits
  55              		.align	2
  56              		.global	__get_PSP
  57              		.code	16
ARM GAS  /tmp/ccGXyuRM.s 			page 2


  58              		.thumb_func
  59              		.type	__get_PSP, %function
  60              	__get_PSP:
  61              	.LFB0:
  62              		.file 1 "cmsis_core/core_cm0.c"
   1:cmsis_core/core_cm0.c **** /**************************************************************************//**
   2:cmsis_core/core_cm0.c ****  * @file     core_cm0.c
   3:cmsis_core/core_cm0.c ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Source File
   4:cmsis_core/core_cm0.c ****  * @version  V1.30
   5:cmsis_core/core_cm0.c ****  * @date     30. October 2009
   6:cmsis_core/core_cm0.c ****  *
   7:cmsis_core/core_cm0.c ****  * @note
   8:cmsis_core/core_cm0.c ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:cmsis_core/core_cm0.c ****  *
  10:cmsis_core/core_cm0.c ****  * @par
  11:cmsis_core/core_cm0.c ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:cmsis_core/core_cm0.c ****  * processor based microcontrollers.  This file can be freely distributed 
  13:cmsis_core/core_cm0.c ****  * within development tools that are supporting such ARM based processors. 
  14:cmsis_core/core_cm0.c ****  *
  15:cmsis_core/core_cm0.c ****  * @par
  16:cmsis_core/core_cm0.c ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:cmsis_core/core_cm0.c ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:cmsis_core/core_cm0.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:cmsis_core/core_cm0.c ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:cmsis_core/core_cm0.c ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:cmsis_core/core_cm0.c ****  *
  22:cmsis_core/core_cm0.c ****  ******************************************************************************/
  23:cmsis_core/core_cm0.c **** 
  24:cmsis_core/core_cm0.c **** #include <stdint.h>
  25:cmsis_core/core_cm0.c **** 
  26:cmsis_core/core_cm0.c **** /* define compiler specific symbols */
  27:cmsis_core/core_cm0.c **** #if defined ( __CC_ARM   )
  28:cmsis_core/core_cm0.c ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  29:cmsis_core/core_cm0.c ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  30:cmsis_core/core_cm0.c **** 
  31:cmsis_core/core_cm0.c **** #elif defined ( __ICCARM__ )
  32:cmsis_core/core_cm0.c ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  33:cmsis_core/core_cm0.c ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  34:cmsis_core/core_cm0.c **** 
  35:cmsis_core/core_cm0.c **** #elif defined   (  __GNUC__  )
  36:cmsis_core/core_cm0.c ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  37:cmsis_core/core_cm0.c ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  38:cmsis_core/core_cm0.c **** 
  39:cmsis_core/core_cm0.c **** #elif defined   (  __TASKING__  )
  40:cmsis_core/core_cm0.c ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  41:cmsis_core/core_cm0.c ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  42:cmsis_core/core_cm0.c **** 
  43:cmsis_core/core_cm0.c **** #endif
  44:cmsis_core/core_cm0.c **** 
  45:cmsis_core/core_cm0.c **** 
  46:cmsis_core/core_cm0.c **** /* ###################  Compiler specific Intrinsics  ########################### */
  47:cmsis_core/core_cm0.c **** 
  48:cmsis_core/core_cm0.c **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
  49:cmsis_core/core_cm0.c **** /* ARM armcc specific functions */
  50:cmsis_core/core_cm0.c **** 
  51:cmsis_core/core_cm0.c **** /**
  52:cmsis_core/core_cm0.c ****  * @brief  Return the Process Stack Pointer
ARM GAS  /tmp/ccGXyuRM.s 			page 3


  53:cmsis_core/core_cm0.c ****  *
  54:cmsis_core/core_cm0.c ****  * @return ProcessStackPointer
  55:cmsis_core/core_cm0.c ****  *
  56:cmsis_core/core_cm0.c ****  * Return the actual process stack pointer
  57:cmsis_core/core_cm0.c ****  */
  58:cmsis_core/core_cm0.c **** __ASM uint32_t __get_PSP(void)
  59:cmsis_core/core_cm0.c **** {
  60:cmsis_core/core_cm0.c ****   mrs r0, psp
  61:cmsis_core/core_cm0.c ****   bx lr
  62:cmsis_core/core_cm0.c **** }
  63:cmsis_core/core_cm0.c **** 
  64:cmsis_core/core_cm0.c **** /**
  65:cmsis_core/core_cm0.c ****  * @brief  Set the Process Stack Pointer
  66:cmsis_core/core_cm0.c ****  *
  67:cmsis_core/core_cm0.c ****  * @param  topOfProcStack  Process Stack Pointer
  68:cmsis_core/core_cm0.c ****  *
  69:cmsis_core/core_cm0.c ****  * Assign the value ProcessStackPointer to the MSP 
  70:cmsis_core/core_cm0.c ****  * (process stack pointer) Cortex processor register
  71:cmsis_core/core_cm0.c ****  */
  72:cmsis_core/core_cm0.c **** __ASM void __set_PSP(uint32_t topOfProcStack)
  73:cmsis_core/core_cm0.c **** {
  74:cmsis_core/core_cm0.c ****   msr psp, r0
  75:cmsis_core/core_cm0.c ****   bx lr
  76:cmsis_core/core_cm0.c **** }
  77:cmsis_core/core_cm0.c **** 
  78:cmsis_core/core_cm0.c **** /**
  79:cmsis_core/core_cm0.c ****  * @brief  Return the Main Stack Pointer
  80:cmsis_core/core_cm0.c ****  *
  81:cmsis_core/core_cm0.c ****  * @return Main Stack Pointer
  82:cmsis_core/core_cm0.c ****  *
  83:cmsis_core/core_cm0.c ****  * Return the current value of the MSP (main stack pointer)
  84:cmsis_core/core_cm0.c ****  * Cortex processor register
  85:cmsis_core/core_cm0.c ****  */
  86:cmsis_core/core_cm0.c **** __ASM uint32_t __get_MSP(void)
  87:cmsis_core/core_cm0.c **** {
  88:cmsis_core/core_cm0.c ****   mrs r0, msp
  89:cmsis_core/core_cm0.c ****   bx lr
  90:cmsis_core/core_cm0.c **** }
  91:cmsis_core/core_cm0.c **** 
  92:cmsis_core/core_cm0.c **** /**
  93:cmsis_core/core_cm0.c ****  * @brief  Set the Main Stack Pointer
  94:cmsis_core/core_cm0.c ****  *
  95:cmsis_core/core_cm0.c ****  * @param  topOfMainStack  Main Stack Pointer
  96:cmsis_core/core_cm0.c ****  *
  97:cmsis_core/core_cm0.c ****  * Assign the value mainStackPointer to the MSP 
  98:cmsis_core/core_cm0.c ****  * (main stack pointer) Cortex processor register
  99:cmsis_core/core_cm0.c ****  */
 100:cmsis_core/core_cm0.c **** __ASM void __set_MSP(uint32_t mainStackPointer)
 101:cmsis_core/core_cm0.c **** {
 102:cmsis_core/core_cm0.c ****   msr msp, r0
 103:cmsis_core/core_cm0.c ****   bx lr
 104:cmsis_core/core_cm0.c **** }
 105:cmsis_core/core_cm0.c **** 
 106:cmsis_core/core_cm0.c **** /**
 107:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in unsigned short value
 108:cmsis_core/core_cm0.c ****  *
 109:cmsis_core/core_cm0.c ****  * @param   value  value to reverse
ARM GAS  /tmp/ccGXyuRM.s 			page 4


 110:cmsis_core/core_cm0.c ****  * @return         reversed value
 111:cmsis_core/core_cm0.c ****  *
 112:cmsis_core/core_cm0.c ****  * Reverse byte order in unsigned short value
 113:cmsis_core/core_cm0.c ****  */
 114:cmsis_core/core_cm0.c **** __ASM uint32_t __REV16(uint16_t value)
 115:cmsis_core/core_cm0.c **** {
 116:cmsis_core/core_cm0.c ****   rev16 r0, r0
 117:cmsis_core/core_cm0.c ****   bx lr
 118:cmsis_core/core_cm0.c **** }
 119:cmsis_core/core_cm0.c **** 
 120:cmsis_core/core_cm0.c **** /**
 121:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 122:cmsis_core/core_cm0.c ****  *
 123:cmsis_core/core_cm0.c ****  * @param   value  value to reverse
 124:cmsis_core/core_cm0.c ****  * @return         reversed value
 125:cmsis_core/core_cm0.c ****  *
 126:cmsis_core/core_cm0.c ****  * Reverse byte order in signed short value with sign extension to integer
 127:cmsis_core/core_cm0.c ****  */
 128:cmsis_core/core_cm0.c **** __ASM int32_t __REVSH(int16_t value)
 129:cmsis_core/core_cm0.c **** {
 130:cmsis_core/core_cm0.c ****   revsh r0, r0
 131:cmsis_core/core_cm0.c ****   bx lr
 132:cmsis_core/core_cm0.c **** }
 133:cmsis_core/core_cm0.c **** 
 134:cmsis_core/core_cm0.c **** 
 135:cmsis_core/core_cm0.c **** #if (__ARMCC_VERSION < 400000)
 136:cmsis_core/core_cm0.c **** 
 137:cmsis_core/core_cm0.c **** 
 138:cmsis_core/core_cm0.c **** /**
 139:cmsis_core/core_cm0.c ****  * @brief  Return the Priority Mask value
 140:cmsis_core/core_cm0.c ****  *
 141:cmsis_core/core_cm0.c ****  * @return PriMask
 142:cmsis_core/core_cm0.c ****  *
 143:cmsis_core/core_cm0.c ****  * Return state of the priority mask bit from the priority mask register
 144:cmsis_core/core_cm0.c ****  */
 145:cmsis_core/core_cm0.c **** __ASM uint32_t __get_PRIMASK(void)
 146:cmsis_core/core_cm0.c **** {
 147:cmsis_core/core_cm0.c ****   mrs r0, primask
 148:cmsis_core/core_cm0.c ****   bx lr
 149:cmsis_core/core_cm0.c **** }
 150:cmsis_core/core_cm0.c **** 
 151:cmsis_core/core_cm0.c **** /**
 152:cmsis_core/core_cm0.c ****  * @brief  Set the Priority Mask value
 153:cmsis_core/core_cm0.c ****  *
 154:cmsis_core/core_cm0.c ****  * @param  priMask  PriMask
 155:cmsis_core/core_cm0.c ****  *
 156:cmsis_core/core_cm0.c ****  * Set the priority mask bit in the priority mask register
 157:cmsis_core/core_cm0.c ****  */
 158:cmsis_core/core_cm0.c **** __ASM void __set_PRIMASK(uint32_t priMask)
 159:cmsis_core/core_cm0.c **** {
 160:cmsis_core/core_cm0.c ****   msr primask, r0
 161:cmsis_core/core_cm0.c ****   bx lr
 162:cmsis_core/core_cm0.c **** }
 163:cmsis_core/core_cm0.c **** 
 164:cmsis_core/core_cm0.c **** /**
 165:cmsis_core/core_cm0.c ****  * @brief  Return the Control Register value
 166:cmsis_core/core_cm0.c ****  * 
ARM GAS  /tmp/ccGXyuRM.s 			page 5


 167:cmsis_core/core_cm0.c ****  * @return Control value
 168:cmsis_core/core_cm0.c ****  *
 169:cmsis_core/core_cm0.c ****  * Return the content of the control register
 170:cmsis_core/core_cm0.c ****  */
 171:cmsis_core/core_cm0.c **** __ASM uint32_t __get_CONTROL(void)
 172:cmsis_core/core_cm0.c **** {
 173:cmsis_core/core_cm0.c ****   mrs r0, control
 174:cmsis_core/core_cm0.c ****   bx lr
 175:cmsis_core/core_cm0.c **** }
 176:cmsis_core/core_cm0.c **** 
 177:cmsis_core/core_cm0.c **** /**
 178:cmsis_core/core_cm0.c ****  * @brief  Set the Control Register value
 179:cmsis_core/core_cm0.c ****  *
 180:cmsis_core/core_cm0.c ****  * @param  control  Control value
 181:cmsis_core/core_cm0.c ****  *
 182:cmsis_core/core_cm0.c ****  * Set the control register
 183:cmsis_core/core_cm0.c ****  */
 184:cmsis_core/core_cm0.c **** __ASM void __set_CONTROL(uint32_t control)
 185:cmsis_core/core_cm0.c **** {
 186:cmsis_core/core_cm0.c ****   msr control, r0
 187:cmsis_core/core_cm0.c ****   bx lr
 188:cmsis_core/core_cm0.c **** }
 189:cmsis_core/core_cm0.c **** 
 190:cmsis_core/core_cm0.c **** #endif /* __ARMCC_VERSION  */ 
 191:cmsis_core/core_cm0.c **** 
 192:cmsis_core/core_cm0.c **** 
 193:cmsis_core/core_cm0.c **** 
 194:cmsis_core/core_cm0.c **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 195:cmsis_core/core_cm0.c **** /* IAR iccarm specific functions */
 196:cmsis_core/core_cm0.c **** #pragma diag_suppress=Pe940
 197:cmsis_core/core_cm0.c **** 
 198:cmsis_core/core_cm0.c **** /**
 199:cmsis_core/core_cm0.c ****  * @brief  Return the Process Stack Pointer
 200:cmsis_core/core_cm0.c ****  *
 201:cmsis_core/core_cm0.c ****  * @return ProcessStackPointer
 202:cmsis_core/core_cm0.c ****  *
 203:cmsis_core/core_cm0.c ****  * Return the actual process stack pointer
 204:cmsis_core/core_cm0.c ****  */
 205:cmsis_core/core_cm0.c **** uint32_t __get_PSP(void)
 206:cmsis_core/core_cm0.c **** {
 207:cmsis_core/core_cm0.c ****   __ASM("mrs r0, psp");
 208:cmsis_core/core_cm0.c ****   __ASM("bx lr");
 209:cmsis_core/core_cm0.c **** }
 210:cmsis_core/core_cm0.c **** 
 211:cmsis_core/core_cm0.c **** /**
 212:cmsis_core/core_cm0.c ****  * @brief  Set the Process Stack Pointer
 213:cmsis_core/core_cm0.c ****  *
 214:cmsis_core/core_cm0.c ****  * @param  topOfProcStack  Process Stack Pointer
 215:cmsis_core/core_cm0.c ****  *
 216:cmsis_core/core_cm0.c ****  * Assign the value ProcessStackPointer to the MSP 
 217:cmsis_core/core_cm0.c ****  * (process stack pointer) Cortex processor register
 218:cmsis_core/core_cm0.c ****  */
 219:cmsis_core/core_cm0.c **** void __set_PSP(uint32_t topOfProcStack)
 220:cmsis_core/core_cm0.c **** {
 221:cmsis_core/core_cm0.c ****   __ASM("msr psp, r0");
 222:cmsis_core/core_cm0.c ****   __ASM("bx lr");
 223:cmsis_core/core_cm0.c **** }
ARM GAS  /tmp/ccGXyuRM.s 			page 6


 224:cmsis_core/core_cm0.c **** 
 225:cmsis_core/core_cm0.c **** /**
 226:cmsis_core/core_cm0.c ****  * @brief  Return the Main Stack Pointer
 227:cmsis_core/core_cm0.c ****  *
 228:cmsis_core/core_cm0.c ****  * @return Main Stack Pointer
 229:cmsis_core/core_cm0.c ****  *
 230:cmsis_core/core_cm0.c ****  * Return the current value of the MSP (main stack pointer)
 231:cmsis_core/core_cm0.c ****  * Cortex processor register
 232:cmsis_core/core_cm0.c ****  */
 233:cmsis_core/core_cm0.c **** uint32_t __get_MSP(void)
 234:cmsis_core/core_cm0.c **** {
 235:cmsis_core/core_cm0.c ****   __ASM("mrs r0, msp");
 236:cmsis_core/core_cm0.c ****   __ASM("bx lr");
 237:cmsis_core/core_cm0.c **** }
 238:cmsis_core/core_cm0.c **** 
 239:cmsis_core/core_cm0.c **** /**
 240:cmsis_core/core_cm0.c ****  * @brief  Set the Main Stack Pointer
 241:cmsis_core/core_cm0.c ****  *
 242:cmsis_core/core_cm0.c ****  * @param  topOfMainStack  Main Stack Pointer
 243:cmsis_core/core_cm0.c ****  *
 244:cmsis_core/core_cm0.c ****  * Assign the value mainStackPointer to the MSP 
 245:cmsis_core/core_cm0.c ****  * (main stack pointer) Cortex processor register
 246:cmsis_core/core_cm0.c ****  */
 247:cmsis_core/core_cm0.c **** void __set_MSP(uint32_t topOfMainStack)
 248:cmsis_core/core_cm0.c **** {
 249:cmsis_core/core_cm0.c ****   __ASM("msr msp, r0");
 250:cmsis_core/core_cm0.c ****   __ASM("bx lr");
 251:cmsis_core/core_cm0.c **** }
 252:cmsis_core/core_cm0.c **** 
 253:cmsis_core/core_cm0.c **** /**
 254:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in unsigned short value
 255:cmsis_core/core_cm0.c ****  *
 256:cmsis_core/core_cm0.c ****  * @param  value  value to reverse
 257:cmsis_core/core_cm0.c ****  * @return        reversed value
 258:cmsis_core/core_cm0.c ****  *
 259:cmsis_core/core_cm0.c ****  * Reverse byte order in unsigned short value
 260:cmsis_core/core_cm0.c ****  */
 261:cmsis_core/core_cm0.c **** uint32_t __REV16(uint16_t value)
 262:cmsis_core/core_cm0.c **** {
 263:cmsis_core/core_cm0.c ****   __ASM("rev16 r0, r0");
 264:cmsis_core/core_cm0.c ****   __ASM("bx lr");
 265:cmsis_core/core_cm0.c **** }
 266:cmsis_core/core_cm0.c **** 
 267:cmsis_core/core_cm0.c **** 
 268:cmsis_core/core_cm0.c **** #pragma diag_default=Pe940
 269:cmsis_core/core_cm0.c **** 
 270:cmsis_core/core_cm0.c **** 
 271:cmsis_core/core_cm0.c **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 272:cmsis_core/core_cm0.c **** /* GNU gcc specific functions */
 273:cmsis_core/core_cm0.c **** 
 274:cmsis_core/core_cm0.c **** /**
 275:cmsis_core/core_cm0.c ****  * @brief  Return the Process Stack Pointer
 276:cmsis_core/core_cm0.c ****  *
 277:cmsis_core/core_cm0.c ****  * @return ProcessStackPointer
 278:cmsis_core/core_cm0.c ****  *
 279:cmsis_core/core_cm0.c ****  * Return the actual process stack pointer
 280:cmsis_core/core_cm0.c ****  */
ARM GAS  /tmp/ccGXyuRM.s 			page 7


 281:cmsis_core/core_cm0.c **** uint32_t __get_PSP(void) __attribute__( ( naked ) );
 282:cmsis_core/core_cm0.c **** uint32_t __get_PSP(void)
 283:cmsis_core/core_cm0.c **** {
  63              		.loc 1 283 0
  64              		.cfi_startproc
 284:cmsis_core/core_cm0.c ****   uint32_t result=0;
 285:cmsis_core/core_cm0.c **** 
 286:cmsis_core/core_cm0.c ****   __ASM volatile ("MRS %0, psp\n\t" 
  65              		.loc 1 286 0
  66              		.syntax divided
  67              	@ 286 "cmsis_core/core_cm0.c" 1
  68 0000 EFF30983 		MRS r3, psp	@ result
  69 0004 181C     		MOV r0, r3 	@ result
  70 0006 7047     		BX  lr     
  71              		
  72              	@ 0 "" 2
  73              		.thumb
  74              		.syntax unified
  75 0008 1C00     		movs	r4, r3	@ result, result
 287:cmsis_core/core_cm0.c ****                   "MOV r0, %0 \n\t"
 288:cmsis_core/core_cm0.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 289:cmsis_core/core_cm0.c ****   return(result);
  76              		.loc 1 289 0
  77 000a 2300     		movs	r3, r4	@ D.4285, result
 290:cmsis_core/core_cm0.c **** }
  78              		.loc 1 290 0
  79 000c 1800     		movs	r0, r3	@, <retval>
  80              		.cfi_endproc
  81              	.LFE0:
  82              		.size	__get_PSP, .-__get_PSP
  83 000e C046     		.section	.text.__set_PSP,"ax",%progbits
  84              		.align	2
  85              		.global	__set_PSP
  86              		.code	16
  87              		.thumb_func
  88              		.type	__set_PSP, %function
  89              	__set_PSP:
  90              	.LFB1:
 291:cmsis_core/core_cm0.c **** 
 292:cmsis_core/core_cm0.c **** /**
 293:cmsis_core/core_cm0.c ****  * @brief  Set the Process Stack Pointer
 294:cmsis_core/core_cm0.c ****  *
 295:cmsis_core/core_cm0.c ****  * @param  topOfProcStack  Process Stack Pointer
 296:cmsis_core/core_cm0.c ****  *
 297:cmsis_core/core_cm0.c ****  * Assign the value ProcessStackPointer to the MSP 
 298:cmsis_core/core_cm0.c ****  * (process stack pointer) Cortex processor register
 299:cmsis_core/core_cm0.c ****  */
 300:cmsis_core/core_cm0.c **** void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
 301:cmsis_core/core_cm0.c **** void __set_PSP(uint32_t topOfProcStack)
 302:cmsis_core/core_cm0.c **** {
  91              		.loc 1 302 0
  92              		.cfi_startproc
  93 0000 0300     		movs	r3, r0	@ topOfProcStack, topOfProcStack
 303:cmsis_core/core_cm0.c ****   __ASM volatile ("MSR psp, %0\n\t"
  94              		.loc 1 303 0
  95              		.syntax divided
  96              	@ 303 "cmsis_core/core_cm0.c" 1
ARM GAS  /tmp/ccGXyuRM.s 			page 8


  97 0002 83F30988 		MSR psp, r3	@ topOfProcStack
  98 0006 7047     		BX  lr     
  99              		
 100              	@ 0 "" 2
 304:cmsis_core/core_cm0.c ****                   "BX  lr     \n\t" : : "r" (topOfProcStack) );
 305:cmsis_core/core_cm0.c **** }
 101              		.loc 1 305 0
 102              		.thumb
 103              		.syntax unified
 104 0008 C046     		nop
 105              		.cfi_endproc
 106              	.LFE1:
 107              		.size	__set_PSP, .-__set_PSP
 108              		.section	.text.__get_MSP,"ax",%progbits
 109              		.align	2
 110              		.global	__get_MSP
 111              		.code	16
 112              		.thumb_func
 113              		.type	__get_MSP, %function
 114              	__get_MSP:
 115              	.LFB2:
 306:cmsis_core/core_cm0.c **** 
 307:cmsis_core/core_cm0.c **** /**
 308:cmsis_core/core_cm0.c ****  * @brief  Return the Main Stack Pointer
 309:cmsis_core/core_cm0.c ****  *
 310:cmsis_core/core_cm0.c ****  * @return Main Stack Pointer
 311:cmsis_core/core_cm0.c ****  *
 312:cmsis_core/core_cm0.c ****  * Return the current value of the MSP (main stack pointer)
 313:cmsis_core/core_cm0.c ****  * Cortex processor register
 314:cmsis_core/core_cm0.c ****  */
 315:cmsis_core/core_cm0.c **** uint32_t __get_MSP(void) __attribute__( ( naked ) );
 316:cmsis_core/core_cm0.c **** uint32_t __get_MSP(void)
 317:cmsis_core/core_cm0.c **** {
 116              		.loc 1 317 0
 117              		.cfi_startproc
 318:cmsis_core/core_cm0.c ****   uint32_t result=0;
 319:cmsis_core/core_cm0.c **** 
 320:cmsis_core/core_cm0.c ****   __ASM volatile ("MRS %0, msp\n\t" 
 118              		.loc 1 320 0
 119              		.syntax divided
 120              	@ 320 "cmsis_core/core_cm0.c" 1
 121 0000 EFF30883 		MRS r3, msp	@ result
 122 0004 181C     		MOV r0, r3 	@ result
 123 0006 7047     		BX  lr     
 124              		
 125              	@ 0 "" 2
 126              		.thumb
 127              		.syntax unified
 128 0008 1C00     		movs	r4, r3	@ result, result
 321:cmsis_core/core_cm0.c ****                   "MOV r0, %0 \n\t"
 322:cmsis_core/core_cm0.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 323:cmsis_core/core_cm0.c ****   return(result);
 129              		.loc 1 323 0
 130 000a 2300     		movs	r3, r4	@ D.4287, result
 324:cmsis_core/core_cm0.c **** }
 131              		.loc 1 324 0
 132 000c 1800     		movs	r0, r3	@, <retval>
ARM GAS  /tmp/ccGXyuRM.s 			page 9


 133              		.cfi_endproc
 134              	.LFE2:
 135              		.size	__get_MSP, .-__get_MSP
 136 000e C046     		.section	.text.__set_MSP,"ax",%progbits
 137              		.align	2
 138              		.global	__set_MSP
 139              		.code	16
 140              		.thumb_func
 141              		.type	__set_MSP, %function
 142              	__set_MSP:
 143              	.LFB3:
 325:cmsis_core/core_cm0.c **** 
 326:cmsis_core/core_cm0.c **** /**
 327:cmsis_core/core_cm0.c ****  * @brief  Set the Main Stack Pointer
 328:cmsis_core/core_cm0.c ****  *
 329:cmsis_core/core_cm0.c ****  * @param  topOfMainStack  Main Stack Pointer
 330:cmsis_core/core_cm0.c ****  *
 331:cmsis_core/core_cm0.c ****  * Assign the value mainStackPointer to the MSP 
 332:cmsis_core/core_cm0.c ****  * (main stack pointer) Cortex processor register
 333:cmsis_core/core_cm0.c ****  */
 334:cmsis_core/core_cm0.c **** void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
 335:cmsis_core/core_cm0.c **** void __set_MSP(uint32_t topOfMainStack)
 336:cmsis_core/core_cm0.c **** {
 144              		.loc 1 336 0
 145              		.cfi_startproc
 146 0000 0300     		movs	r3, r0	@ topOfMainStack, topOfMainStack
 337:cmsis_core/core_cm0.c ****   __ASM volatile ("MSR msp, %0\n\t"
 147              		.loc 1 337 0
 148              		.syntax divided
 149              	@ 337 "cmsis_core/core_cm0.c" 1
 150 0002 83F30888 		MSR msp, r3	@ topOfMainStack
 151 0006 7047     		BX  lr     
 152              		
 153              	@ 0 "" 2
 338:cmsis_core/core_cm0.c ****                   "BX  lr     \n\t" : : "r" (topOfMainStack) );
 339:cmsis_core/core_cm0.c **** }
 154              		.loc 1 339 0
 155              		.thumb
 156              		.syntax unified
 157 0008 C046     		nop
 158              		.cfi_endproc
 159              	.LFE3:
 160              		.size	__set_MSP, .-__set_MSP
 161              		.section	.text.__get_PRIMASK,"ax",%progbits
 162              		.align	2
 163              		.global	__get_PRIMASK
 164              		.code	16
 165              		.thumb_func
 166              		.type	__get_PRIMASK, %function
 167              	__get_PRIMASK:
 168              	.LFB4:
 340:cmsis_core/core_cm0.c **** 
 341:cmsis_core/core_cm0.c **** 
 342:cmsis_core/core_cm0.c **** /**
 343:cmsis_core/core_cm0.c ****  * @brief  Return the Priority Mask value
 344:cmsis_core/core_cm0.c ****  *
 345:cmsis_core/core_cm0.c ****  * @return PriMask
ARM GAS  /tmp/ccGXyuRM.s 			page 10


 346:cmsis_core/core_cm0.c ****  *
 347:cmsis_core/core_cm0.c ****  * Return state of the priority mask bit from the priority mask register
 348:cmsis_core/core_cm0.c ****  */
 349:cmsis_core/core_cm0.c **** uint32_t __get_PRIMASK(void)
 350:cmsis_core/core_cm0.c **** {
 169              		.loc 1 350 0
 170              		.cfi_startproc
 171 0000 82B0     		sub	sp, sp, #8	@,,
 172              	.LCFI0:
 173              		.cfi_def_cfa_offset 8
 351:cmsis_core/core_cm0.c ****   uint32_t result=0;
 174              		.loc 1 351 0
 175 0002 0023     		movs	r3, #0	@ tmp112,
 176 0004 0193     		str	r3, [sp, #4]	@ tmp112, result
 352:cmsis_core/core_cm0.c **** 
 353:cmsis_core/core_cm0.c ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 177              		.loc 1 353 0
 178              		.syntax divided
 179              	@ 353 "cmsis_core/core_cm0.c" 1
 180 0006 EFF31083 		MRS r3, primask	@ result
 181              	@ 0 "" 2
 182              		.thumb
 183              		.syntax unified
 184 000a 0193     		str	r3, [sp, #4]	@ result, result
 354:cmsis_core/core_cm0.c ****   return(result);
 185              		.loc 1 354 0
 186 000c 019B     		ldr	r3, [sp, #4]	@ D.4289, result
 355:cmsis_core/core_cm0.c **** }
 187              		.loc 1 355 0
 188 000e 1800     		movs	r0, r3	@, <retval>
 189 0010 02B0     		add	sp, sp, #8	@,,
 190              		@ sp needed	@
 191 0012 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE4:
 194              		.size	__get_PRIMASK, .-__get_PRIMASK
 195              		.section	.text.__set_PRIMASK,"ax",%progbits
 196              		.align	2
 197              		.global	__set_PRIMASK
 198              		.code	16
 199              		.thumb_func
 200              		.type	__set_PRIMASK, %function
 201              	__set_PRIMASK:
 202              	.LFB5:
 356:cmsis_core/core_cm0.c **** 
 357:cmsis_core/core_cm0.c **** /**
 358:cmsis_core/core_cm0.c ****  * @brief  Set the Priority Mask value
 359:cmsis_core/core_cm0.c ****  *
 360:cmsis_core/core_cm0.c ****  * @param  priMask  PriMask
 361:cmsis_core/core_cm0.c ****  *
 362:cmsis_core/core_cm0.c ****  * Set the priority mask bit in the priority mask register
 363:cmsis_core/core_cm0.c ****  */
 364:cmsis_core/core_cm0.c **** void __set_PRIMASK(uint32_t priMask)
 365:cmsis_core/core_cm0.c **** {
 203              		.loc 1 365 0
 204              		.cfi_startproc
 205 0000 82B0     		sub	sp, sp, #8	@,,
ARM GAS  /tmp/ccGXyuRM.s 			page 11


 206              	.LCFI1:
 207              		.cfi_def_cfa_offset 8
 208 0002 0190     		str	r0, [sp, #4]	@ priMask, priMask
 366:cmsis_core/core_cm0.c ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 209              		.loc 1 366 0
 210 0004 019B     		ldr	r3, [sp, #4]	@ tmp110, priMask
 211              		.syntax divided
 212              	@ 366 "cmsis_core/core_cm0.c" 1
 213 0006 83F31088 		MSR primask, r3	@ tmp110
 214              	@ 0 "" 2
 367:cmsis_core/core_cm0.c **** }
 215              		.loc 1 367 0
 216              		.thumb
 217              		.syntax unified
 218 000a C046     		nop
 219 000c 02B0     		add	sp, sp, #8	@,,
 220              		@ sp needed	@
 221 000e 7047     		bx	lr
 222              		.cfi_endproc
 223              	.LFE5:
 224              		.size	__set_PRIMASK, .-__set_PRIMASK
 225              		.section	.text.__get_CONTROL,"ax",%progbits
 226              		.align	2
 227              		.global	__get_CONTROL
 228              		.code	16
 229              		.thumb_func
 230              		.type	__get_CONTROL, %function
 231              	__get_CONTROL:
 232              	.LFB6:
 368:cmsis_core/core_cm0.c **** 
 369:cmsis_core/core_cm0.c **** /**
 370:cmsis_core/core_cm0.c ****  * @brief  Return the Control Register value
 371:cmsis_core/core_cm0.c **** * 
 372:cmsis_core/core_cm0.c **** *  @return Control value
 373:cmsis_core/core_cm0.c ****  *
 374:cmsis_core/core_cm0.c ****  * Return the content of the control register
 375:cmsis_core/core_cm0.c ****  */
 376:cmsis_core/core_cm0.c **** uint32_t __get_CONTROL(void)
 377:cmsis_core/core_cm0.c **** {
 233              		.loc 1 377 0
 234              		.cfi_startproc
 235 0000 82B0     		sub	sp, sp, #8	@,,
 236              	.LCFI2:
 237              		.cfi_def_cfa_offset 8
 378:cmsis_core/core_cm0.c ****   uint32_t result=0;
 238              		.loc 1 378 0
 239 0002 0023     		movs	r3, #0	@ tmp112,
 240 0004 0193     		str	r3, [sp, #4]	@ tmp112, result
 379:cmsis_core/core_cm0.c **** 
 380:cmsis_core/core_cm0.c ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 241              		.loc 1 380 0
 242              		.syntax divided
 243              	@ 380 "cmsis_core/core_cm0.c" 1
 244 0006 EFF31483 		MRS r3, control	@ result
 245              	@ 0 "" 2
 246              		.thumb
 247              		.syntax unified
ARM GAS  /tmp/ccGXyuRM.s 			page 12


 248 000a 0193     		str	r3, [sp, #4]	@ result, result
 381:cmsis_core/core_cm0.c ****   return(result);
 249              		.loc 1 381 0
 250 000c 019B     		ldr	r3, [sp, #4]	@ D.4291, result
 382:cmsis_core/core_cm0.c **** }
 251              		.loc 1 382 0
 252 000e 1800     		movs	r0, r3	@, <retval>
 253 0010 02B0     		add	sp, sp, #8	@,,
 254              		@ sp needed	@
 255 0012 7047     		bx	lr
 256              		.cfi_endproc
 257              	.LFE6:
 258              		.size	__get_CONTROL, .-__get_CONTROL
 259              		.section	.text.__set_CONTROL,"ax",%progbits
 260              		.align	2
 261              		.global	__set_CONTROL
 262              		.code	16
 263              		.thumb_func
 264              		.type	__set_CONTROL, %function
 265              	__set_CONTROL:
 266              	.LFB7:
 383:cmsis_core/core_cm0.c **** 
 384:cmsis_core/core_cm0.c **** /**
 385:cmsis_core/core_cm0.c ****  * @brief  Set the Control Register value
 386:cmsis_core/core_cm0.c ****  *
 387:cmsis_core/core_cm0.c ****  * @param  control  Control value
 388:cmsis_core/core_cm0.c ****  *
 389:cmsis_core/core_cm0.c ****  * Set the control register
 390:cmsis_core/core_cm0.c ****  */
 391:cmsis_core/core_cm0.c **** void __set_CONTROL(uint32_t control)
 392:cmsis_core/core_cm0.c **** {
 267              		.loc 1 392 0
 268              		.cfi_startproc
 269 0000 82B0     		sub	sp, sp, #8	@,,
 270              	.LCFI3:
 271              		.cfi_def_cfa_offset 8
 272 0002 0190     		str	r0, [sp, #4]	@ control, control
 393:cmsis_core/core_cm0.c ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 273              		.loc 1 393 0
 274 0004 019B     		ldr	r3, [sp, #4]	@ tmp110, control
 275              		.syntax divided
 276              	@ 393 "cmsis_core/core_cm0.c" 1
 277 0006 83F31488 		MSR control, r3	@ tmp110
 278              	@ 0 "" 2
 394:cmsis_core/core_cm0.c **** }
 279              		.loc 1 394 0
 280              		.thumb
 281              		.syntax unified
 282 000a C046     		nop
 283 000c 02B0     		add	sp, sp, #8	@,,
 284              		@ sp needed	@
 285 000e 7047     		bx	lr
 286              		.cfi_endproc
 287              	.LFE7:
 288              		.size	__set_CONTROL, .-__set_CONTROL
 289              		.section	.text.__REV,"ax",%progbits
 290              		.align	2
ARM GAS  /tmp/ccGXyuRM.s 			page 13


 291              		.global	__REV
 292              		.code	16
 293              		.thumb_func
 294              		.type	__REV, %function
 295              	__REV:
 296              	.LFB8:
 395:cmsis_core/core_cm0.c **** 
 396:cmsis_core/core_cm0.c **** 
 397:cmsis_core/core_cm0.c **** /**
 398:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in integer value
 399:cmsis_core/core_cm0.c ****  *
 400:cmsis_core/core_cm0.c ****  * @param  value  value to reverse
 401:cmsis_core/core_cm0.c ****  * @return        reversed value
 402:cmsis_core/core_cm0.c ****  *
 403:cmsis_core/core_cm0.c ****  * Reverse byte order in integer value
 404:cmsis_core/core_cm0.c ****  */
 405:cmsis_core/core_cm0.c **** uint32_t __REV(uint32_t value)
 406:cmsis_core/core_cm0.c **** {
 297              		.loc 1 406 0
 298              		.cfi_startproc
 299 0000 84B0     		sub	sp, sp, #16	@,,
 300              	.LCFI4:
 301              		.cfi_def_cfa_offset 16
 302 0002 0190     		str	r0, [sp, #4]	@ value, value
 407:cmsis_core/core_cm0.c ****   uint32_t result=0;
 303              		.loc 1 407 0
 304 0004 0023     		movs	r3, #0	@ tmp112,
 305 0006 0393     		str	r3, [sp, #12]	@ tmp112, result
 408:cmsis_core/core_cm0.c ****   
 409:cmsis_core/core_cm0.c ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 306              		.loc 1 409 0
 307 0008 019B     		ldr	r3, [sp, #4]	@ tmp114, value
 308              		.syntax divided
 309              	@ 409 "cmsis_core/core_cm0.c" 1
 310 000a 1BBA     		rev r3, r3	@ result, tmp114
 311              	@ 0 "" 2
 312              		.thumb
 313              		.syntax unified
 314 000c 0393     		str	r3, [sp, #12]	@ result, result
 410:cmsis_core/core_cm0.c ****   return(result);
 315              		.loc 1 410 0
 316 000e 039B     		ldr	r3, [sp, #12]	@ D.4293, result
 411:cmsis_core/core_cm0.c **** }
 317              		.loc 1 411 0
 318 0010 1800     		movs	r0, r3	@, <retval>
 319 0012 04B0     		add	sp, sp, #16	@,,
 320              		@ sp needed	@
 321 0014 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE8:
 324              		.size	__REV, .-__REV
 325 0016 C046     		.section	.text.__REV16,"ax",%progbits
 326              		.align	2
 327              		.global	__REV16
 328              		.code	16
 329              		.thumb_func
 330              		.type	__REV16, %function
ARM GAS  /tmp/ccGXyuRM.s 			page 14


 331              	__REV16:
 332              	.LFB9:
 412:cmsis_core/core_cm0.c **** 
 413:cmsis_core/core_cm0.c **** /**
 414:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in unsigned short value
 415:cmsis_core/core_cm0.c ****  *
 416:cmsis_core/core_cm0.c ****  * @param  value  value to reverse
 417:cmsis_core/core_cm0.c ****  * @return        reversed value
 418:cmsis_core/core_cm0.c ****  *
 419:cmsis_core/core_cm0.c ****  * Reverse byte order in unsigned short value
 420:cmsis_core/core_cm0.c ****  */
 421:cmsis_core/core_cm0.c **** uint32_t __REV16(uint16_t value)
 422:cmsis_core/core_cm0.c **** {
 333              		.loc 1 422 0
 334              		.cfi_startproc
 335 0000 84B0     		sub	sp, sp, #16	@,,
 336              	.LCFI5:
 337              		.cfi_def_cfa_offset 16
 338 0002 0200     		movs	r2, r0	@ tmp112, value
 339 0004 6B46     		mov	r3, sp	@ tmp120,
 340 0006 0633     		adds	r3, r3, #6	@ tmp113,
 341 0008 1A80     		strh	r2, [r3]	@ tmp114, value
 423:cmsis_core/core_cm0.c ****   uint32_t result=0;
 342              		.loc 1 423 0
 343 000a 0023     		movs	r3, #0	@ tmp115,
 344 000c 0393     		str	r3, [sp, #12]	@ tmp115, result
 424:cmsis_core/core_cm0.c ****   
 425:cmsis_core/core_cm0.c ****   __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 345              		.loc 1 425 0
 346 000e 6B46     		mov	r3, sp	@ tmp121,
 347 0010 0633     		adds	r3, r3, #6	@ tmp117,
 348 0012 1B88     		ldrh	r3, [r3]	@ tmp118, value
 349              		.syntax divided
 350              	@ 425 "cmsis_core/core_cm0.c" 1
 351 0014 5BBA     		rev16 r3, r3	@ result, tmp118
 352              	@ 0 "" 2
 353              		.thumb
 354              		.syntax unified
 355 0016 0393     		str	r3, [sp, #12]	@ result, result
 426:cmsis_core/core_cm0.c ****   return(result);
 356              		.loc 1 426 0
 357 0018 039B     		ldr	r3, [sp, #12]	@ D.4295, result
 427:cmsis_core/core_cm0.c **** }
 358              		.loc 1 427 0
 359 001a 1800     		movs	r0, r3	@, <retval>
 360 001c 04B0     		add	sp, sp, #16	@,,
 361              		@ sp needed	@
 362 001e 7047     		bx	lr
 363              		.cfi_endproc
 364              	.LFE9:
 365              		.size	__REV16, .-__REV16
 366              		.section	.text.__REVSH,"ax",%progbits
 367              		.align	2
 368              		.global	__REVSH
 369              		.code	16
 370              		.thumb_func
 371              		.type	__REVSH, %function
ARM GAS  /tmp/ccGXyuRM.s 			page 15


 372              	__REVSH:
 373              	.LFB10:
 428:cmsis_core/core_cm0.c **** 
 429:cmsis_core/core_cm0.c **** /**
 430:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 431:cmsis_core/core_cm0.c ****  *
 432:cmsis_core/core_cm0.c ****  * @param  value  value to reverse
 433:cmsis_core/core_cm0.c ****  * @return        reversed value
 434:cmsis_core/core_cm0.c ****  *
 435:cmsis_core/core_cm0.c ****  * Reverse byte order in signed short value with sign extension to integer
 436:cmsis_core/core_cm0.c ****  */
 437:cmsis_core/core_cm0.c **** int32_t __REVSH(int16_t value)
 438:cmsis_core/core_cm0.c **** {
 374              		.loc 1 438 0
 375              		.cfi_startproc
 376 0000 84B0     		sub	sp, sp, #16	@,,
 377              	.LCFI6:
 378              		.cfi_def_cfa_offset 16
 379 0002 0200     		movs	r2, r0	@ tmp112, value
 380 0004 6B46     		mov	r3, sp	@ tmp120,
 381 0006 0633     		adds	r3, r3, #6	@ tmp113,
 382 0008 1A80     		strh	r2, [r3]	@ tmp114, value
 439:cmsis_core/core_cm0.c ****   uint32_t result=0;
 383              		.loc 1 439 0
 384 000a 0023     		movs	r3, #0	@ tmp115,
 385 000c 0393     		str	r3, [sp, #12]	@ tmp115, result
 440:cmsis_core/core_cm0.c ****   
 441:cmsis_core/core_cm0.c ****   __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 386              		.loc 1 441 0
 387 000e 6B46     		mov	r3, sp	@ tmp121,
 388 0010 0633     		adds	r3, r3, #6	@ tmp117,
 389 0012 1B88     		ldrh	r3, [r3]	@ tmp118, value
 390              		.syntax divided
 391              	@ 441 "cmsis_core/core_cm0.c" 1
 392 0014 DBBA     		revsh r3, r3	@ result, tmp118
 393              	@ 0 "" 2
 394              		.thumb
 395              		.syntax unified
 396 0016 0393     		str	r3, [sp, #12]	@ result, result
 442:cmsis_core/core_cm0.c ****   return(result);
 397              		.loc 1 442 0
 398 0018 039B     		ldr	r3, [sp, #12]	@ D.4297, result
 443:cmsis_core/core_cm0.c **** }
 399              		.loc 1 443 0
 400 001a 1800     		movs	r0, r3	@, <retval>
 401 001c 04B0     		add	sp, sp, #16	@,,
 402              		@ sp needed	@
 403 001e 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE10:
 406              		.size	__REVSH, .-__REVSH
 407              		.text
 408              	.Letext0:
 409              		.file 2 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 410              		.file 3 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 411              		.section	.debug_info,"",%progbits
 412              	.Ldebug_info0:
ARM GAS  /tmp/ccGXyuRM.s 			page 16


 413 0000 DA020000 		.4byte	0x2da
 414 0004 0200     		.2byte	0x2
 415 0006 00000000 		.4byte	.Ldebug_abbrev0
 416 000a 04       		.byte	0x4
 417 000b 01       		.uleb128 0x1
 418 000c AE010000 		.4byte	.LASF34
 419 0010 0C       		.byte	0xc
 420 0011 0E000000 		.4byte	.LASF35
 421 0015 E4000000 		.4byte	.LASF36
 422 0019 00000000 		.4byte	.Ldebug_ranges0+0
 423 001d 00000000 		.4byte	0
 424 0021 00000000 		.4byte	0
 425 0025 00000000 		.4byte	.Ldebug_line0
 426 0029 02       		.uleb128 0x2
 427 002a 01       		.byte	0x1
 428 002b 06       		.byte	0x6
 429 002c 6B020000 		.4byte	.LASF0
 430 0030 02       		.uleb128 0x2
 431 0031 01       		.byte	0x1
 432 0032 08       		.byte	0x8
 433 0033 85000000 		.4byte	.LASF1
 434 0037 03       		.uleb128 0x3
 435 0038 24000000 		.4byte	.LASF3
 436 003c 02       		.byte	0x2
 437 003d 29       		.byte	0x29
 438 003e 42000000 		.4byte	0x42
 439 0042 02       		.uleb128 0x2
 440 0043 02       		.byte	0x2
 441 0044 05       		.byte	0x5
 442 0045 9B010000 		.4byte	.LASF2
 443 0049 03       		.uleb128 0x3
 444 004a CE000000 		.4byte	.LASF4
 445 004e 02       		.byte	0x2
 446 004f 2B       		.byte	0x2b
 447 0050 54000000 		.4byte	0x54
 448 0054 02       		.uleb128 0x2
 449 0055 02       		.byte	0x2
 450 0056 07       		.byte	0x7
 451 0057 B3000000 		.4byte	.LASF5
 452 005b 03       		.uleb128 0x3
 453 005c 34000000 		.4byte	.LASF6
 454 0060 02       		.byte	0x2
 455 0061 3F       		.byte	0x3f
 456 0062 66000000 		.4byte	0x66
 457 0066 02       		.uleb128 0x2
 458 0067 04       		.byte	0x4
 459 0068 05       		.byte	0x5
 460 0069 62020000 		.4byte	.LASF7
 461 006d 03       		.uleb128 0x3
 462 006e D9000000 		.4byte	.LASF8
 463 0072 02       		.byte	0x2
 464 0073 41       		.byte	0x41
 465 0074 78000000 		.4byte	0x78
 466 0078 02       		.uleb128 0x2
 467 0079 04       		.byte	0x4
 468 007a 07       		.byte	0x7
 469 007b A1000000 		.4byte	.LASF9
ARM GAS  /tmp/ccGXyuRM.s 			page 17


 470 007f 02       		.uleb128 0x2
 471 0080 08       		.byte	0x8
 472 0081 05       		.byte	0x5
 473 0082 6B010000 		.4byte	.LASF10
 474 0086 02       		.uleb128 0x2
 475 0087 08       		.byte	0x8
 476 0088 07       		.byte	0x7
 477 0089 26010000 		.4byte	.LASF11
 478 008d 04       		.uleb128 0x4
 479 008e 04       		.byte	0x4
 480 008f 05       		.byte	0x5
 481 0090 696E7400 		.ascii	"int\000"
 482 0094 02       		.uleb128 0x2
 483 0095 04       		.byte	0x4
 484 0096 07       		.byte	0x7
 485 0097 19010000 		.4byte	.LASF12
 486 009b 03       		.uleb128 0x3
 487 009c 44010000 		.4byte	.LASF13
 488 00a0 03       		.byte	0x3
 489 00a1 19       		.byte	0x19
 490 00a2 37000000 		.4byte	0x37
 491 00a6 03       		.uleb128 0x3
 492 00a7 A5010000 		.4byte	.LASF14
 493 00ab 03       		.byte	0x3
 494 00ac 1A       		.byte	0x1a
 495 00ad 49000000 		.4byte	0x49
 496 00b1 03       		.uleb128 0x3
 497 00b2 4C010000 		.4byte	.LASF15
 498 00b6 03       		.byte	0x3
 499 00b7 1F       		.byte	0x1f
 500 00b8 5B000000 		.4byte	0x5b
 501 00bc 03       		.uleb128 0x3
 502 00bd 59020000 		.4byte	.LASF16
 503 00c1 03       		.byte	0x3
 504 00c2 20       		.byte	0x20
 505 00c3 6D000000 		.4byte	0x6d
 506 00c7 05       		.uleb128 0x5
 507 00c8 01       		.byte	0x1
 508 00c9 69000000 		.4byte	.LASF17
 509 00cd 01       		.byte	0x1
 510 00ce 1A01     		.2byte	0x11a
 511 00d0 01       		.byte	0x1
 512 00d1 BC000000 		.4byte	0xbc
 513 00d5 00000000 		.4byte	.LFB0
 514 00d9 0E000000 		.4byte	.LFE0
 515 00dd 02       		.byte	0x2
 516 00de 7D       		.byte	0x7d
 517 00df 00       		.sleb128 0
 518 00e0 01       		.byte	0x1
 519 00e1 F4000000 		.4byte	0xf4
 520 00e5 06       		.uleb128 0x6
 521 00e6 3D010000 		.4byte	.LASF19
 522 00ea 01       		.byte	0x1
 523 00eb 1C01     		.2byte	0x11c
 524 00ed BC000000 		.4byte	0xbc
 525 00f1 01       		.byte	0x1
 526 00f2 54       		.byte	0x54
ARM GAS  /tmp/ccGXyuRM.s 			page 18


 527 00f3 00       		.byte	0
 528 00f4 07       		.uleb128 0x7
 529 00f5 01       		.byte	0x1
 530 00f6 73000000 		.4byte	.LASF20
 531 00fa 01       		.byte	0x1
 532 00fb 2D01     		.2byte	0x12d
 533 00fd 01       		.byte	0x1
 534 00fe 00000000 		.4byte	.LFB1
 535 0102 0A000000 		.4byte	.LFE1
 536 0106 02       		.byte	0x2
 537 0107 7D       		.byte	0x7d
 538 0108 00       		.sleb128 0
 539 0109 01       		.byte	0x1
 540 010a 1D010000 		.4byte	0x11d
 541 010e 08       		.uleb128 0x8
 542 010f 46000000 		.4byte	.LASF22
 543 0113 01       		.byte	0x1
 544 0114 2D01     		.2byte	0x12d
 545 0116 BC000000 		.4byte	0xbc
 546 011a 01       		.byte	0x1
 547 011b 53       		.byte	0x53
 548 011c 00       		.byte	0
 549 011d 05       		.uleb128 0x5
 550 011e 01       		.byte	0x1
 551 011f 55000000 		.4byte	.LASF18
 552 0123 01       		.byte	0x1
 553 0124 3C01     		.2byte	0x13c
 554 0126 01       		.byte	0x1
 555 0127 BC000000 		.4byte	0xbc
 556 012b 00000000 		.4byte	.LFB2
 557 012f 0E000000 		.4byte	.LFE2
 558 0133 02       		.byte	0x2
 559 0134 7D       		.byte	0x7d
 560 0135 00       		.sleb128 0
 561 0136 01       		.byte	0x1
 562 0137 4A010000 		.4byte	0x14a
 563 013b 06       		.uleb128 0x6
 564 013c 3D010000 		.4byte	.LASF19
 565 0140 01       		.byte	0x1
 566 0141 3E01     		.2byte	0x13e
 567 0143 BC000000 		.4byte	0xbc
 568 0147 01       		.byte	0x1
 569 0148 54       		.byte	0x54
 570 0149 00       		.byte	0
 571 014a 07       		.uleb128 0x7
 572 014b 01       		.byte	0x1
 573 014c 5F000000 		.4byte	.LASF21
 574 0150 01       		.byte	0x1
 575 0151 4F01     		.2byte	0x14f
 576 0153 01       		.byte	0x1
 577 0154 00000000 		.4byte	.LFB3
 578 0158 0A000000 		.4byte	.LFE3
 579 015c 02       		.byte	0x2
 580 015d 7D       		.byte	0x7d
 581 015e 00       		.sleb128 0
 582 015f 01       		.byte	0x1
 583 0160 73010000 		.4byte	0x173
ARM GAS  /tmp/ccGXyuRM.s 			page 19


 584 0164 08       		.uleb128 0x8
 585 0165 5C010000 		.4byte	.LASF23
 586 0169 01       		.byte	0x1
 587 016a 4F01     		.2byte	0x14f
 588 016c BC000000 		.4byte	0xbc
 589 0170 01       		.byte	0x1
 590 0171 53       		.byte	0x53
 591 0172 00       		.byte	0
 592 0173 09       		.uleb128 0x9
 593 0174 01       		.byte	0x1
 594 0175 93000000 		.4byte	.LASF24
 595 0179 01       		.byte	0x1
 596 017a 5D01     		.2byte	0x15d
 597 017c 01       		.byte	0x1
 598 017d BC000000 		.4byte	0xbc
 599 0181 00000000 		.4byte	.LFB4
 600 0185 14000000 		.4byte	.LFE4
 601 0189 00000000 		.4byte	.LLST0
 602 018d 01       		.byte	0x1
 603 018e A2010000 		.4byte	0x1a2
 604 0192 06       		.uleb128 0x6
 605 0193 3D010000 		.4byte	.LASF19
 606 0197 01       		.byte	0x1
 607 0198 5F01     		.2byte	0x15f
 608 019a BC000000 		.4byte	0xbc
 609 019e 02       		.byte	0x2
 610 019f 91       		.byte	0x91
 611 01a0 7C       		.sleb128 -4
 612 01a1 00       		.byte	0
 613 01a2 0A       		.uleb128 0xa
 614 01a3 01       		.byte	0x1
 615 01a4 79010000 		.4byte	.LASF25
 616 01a8 01       		.byte	0x1
 617 01a9 6C01     		.2byte	0x16c
 618 01ab 01       		.byte	0x1
 619 01ac 00000000 		.4byte	.LFB5
 620 01b0 10000000 		.4byte	.LFE5
 621 01b4 20000000 		.4byte	.LLST1
 622 01b8 01       		.byte	0x1
 623 01b9 CD010000 		.4byte	0x1cd
 624 01bd 08       		.uleb128 0x8
 625 01be 3E000000 		.4byte	.LASF26
 626 01c2 01       		.byte	0x1
 627 01c3 6C01     		.2byte	0x16c
 628 01c5 BC000000 		.4byte	0xbc
 629 01c9 02       		.byte	0x2
 630 01ca 91       		.byte	0x91
 631 01cb 7C       		.sleb128 -4
 632 01cc 00       		.byte	0
 633 01cd 09       		.uleb128 0x9
 634 01ce 01       		.byte	0x1
 635 01cf 8D010000 		.4byte	.LASF27
 636 01d3 01       		.byte	0x1
 637 01d4 7801     		.2byte	0x178
 638 01d6 01       		.byte	0x1
 639 01d7 BC000000 		.4byte	0xbc
 640 01db 00000000 		.4byte	.LFB6
ARM GAS  /tmp/ccGXyuRM.s 			page 20


 641 01df 14000000 		.4byte	.LFE6
 642 01e3 40000000 		.4byte	.LLST2
 643 01e7 01       		.byte	0x1
 644 01e8 FC010000 		.4byte	0x1fc
 645 01ec 06       		.uleb128 0x6
 646 01ed 3D010000 		.4byte	.LASF19
 647 01f1 01       		.byte	0x1
 648 01f2 7A01     		.2byte	0x17a
 649 01f4 BC000000 		.4byte	0xbc
 650 01f8 02       		.byte	0x2
 651 01f9 91       		.byte	0x91
 652 01fa 7C       		.sleb128 -4
 653 01fb 00       		.byte	0
 654 01fc 0A       		.uleb128 0xa
 655 01fd 01       		.byte	0x1
 656 01fe 00000000 		.4byte	.LASF28
 657 0202 01       		.byte	0x1
 658 0203 8701     		.2byte	0x187
 659 0205 01       		.byte	0x1
 660 0206 00000000 		.4byte	.LFB7
 661 020a 10000000 		.4byte	.LFE7
 662 020e 60000000 		.4byte	.LLST3
 663 0212 01       		.byte	0x1
 664 0213 27020000 		.4byte	0x227
 665 0217 08       		.uleb128 0x8
 666 0218 C6000000 		.4byte	.LASF29
 667 021c 01       		.byte	0x1
 668 021d 8701     		.2byte	0x187
 669 021f BC000000 		.4byte	0xbc
 670 0223 02       		.byte	0x2
 671 0224 91       		.byte	0x91
 672 0225 7C       		.sleb128 -4
 673 0226 00       		.byte	0
 674 0227 09       		.uleb128 0x9
 675 0228 01       		.byte	0x1
 676 0229 87010000 		.4byte	.LASF30
 677 022d 01       		.byte	0x1
 678 022e 9501     		.2byte	0x195
 679 0230 01       		.byte	0x1
 680 0231 BC000000 		.4byte	0xbc
 681 0235 00000000 		.4byte	.LFB8
 682 0239 16000000 		.4byte	.LFE8
 683 023d 80000000 		.4byte	.LLST4
 684 0241 01       		.byte	0x1
 685 0242 65020000 		.4byte	0x265
 686 0246 08       		.uleb128 0x8
 687 0247 2E000000 		.4byte	.LASF31
 688 024b 01       		.byte	0x1
 689 024c 9501     		.2byte	0x195
 690 024e BC000000 		.4byte	0xbc
 691 0252 02       		.byte	0x2
 692 0253 91       		.byte	0x91
 693 0254 74       		.sleb128 -12
 694 0255 06       		.uleb128 0x6
 695 0256 3D010000 		.4byte	.LASF19
 696 025a 01       		.byte	0x1
 697 025b 9701     		.2byte	0x197
ARM GAS  /tmp/ccGXyuRM.s 			page 21


 698 025d BC000000 		.4byte	0xbc
 699 0261 02       		.byte	0x2
 700 0262 91       		.byte	0x91
 701 0263 7C       		.sleb128 -4
 702 0264 00       		.byte	0
 703 0265 09       		.uleb128 0x9
 704 0266 01       		.byte	0x1
 705 0267 7D000000 		.4byte	.LASF32
 706 026b 01       		.byte	0x1
 707 026c A501     		.2byte	0x1a5
 708 026e 01       		.byte	0x1
 709 026f BC000000 		.4byte	0xbc
 710 0273 00000000 		.4byte	.LFB9
 711 0277 20000000 		.4byte	.LFE9
 712 027b A0000000 		.4byte	.LLST5
 713 027f 01       		.byte	0x1
 714 0280 A3020000 		.4byte	0x2a3
 715 0284 08       		.uleb128 0x8
 716 0285 2E000000 		.4byte	.LASF31
 717 0289 01       		.byte	0x1
 718 028a A501     		.2byte	0x1a5
 719 028c A6000000 		.4byte	0xa6
 720 0290 02       		.byte	0x2
 721 0291 91       		.byte	0x91
 722 0292 76       		.sleb128 -10
 723 0293 06       		.uleb128 0x6
 724 0294 3D010000 		.4byte	.LASF19
 725 0298 01       		.byte	0x1
 726 0299 A701     		.2byte	0x1a7
 727 029b BC000000 		.4byte	0xbc
 728 029f 02       		.byte	0x2
 729 02a0 91       		.byte	0x91
 730 02a1 7C       		.sleb128 -4
 731 02a2 00       		.byte	0
 732 02a3 0B       		.uleb128 0xb
 733 02a4 01       		.byte	0x1
 734 02a5 54010000 		.4byte	.LASF33
 735 02a9 01       		.byte	0x1
 736 02aa B501     		.2byte	0x1b5
 737 02ac 01       		.byte	0x1
 738 02ad B1000000 		.4byte	0xb1
 739 02b1 00000000 		.4byte	.LFB10
 740 02b5 20000000 		.4byte	.LFE10
 741 02b9 C0000000 		.4byte	.LLST6
 742 02bd 01       		.byte	0x1
 743 02be 08       		.uleb128 0x8
 744 02bf 2E000000 		.4byte	.LASF31
 745 02c3 01       		.byte	0x1
 746 02c4 B501     		.2byte	0x1b5
 747 02c6 9B000000 		.4byte	0x9b
 748 02ca 02       		.byte	0x2
 749 02cb 91       		.byte	0x91
 750 02cc 76       		.sleb128 -10
 751 02cd 06       		.uleb128 0x6
 752 02ce 3D010000 		.4byte	.LASF19
 753 02d2 01       		.byte	0x1
 754 02d3 B701     		.2byte	0x1b7
ARM GAS  /tmp/ccGXyuRM.s 			page 22


 755 02d5 BC000000 		.4byte	0xbc
 756 02d9 02       		.byte	0x2
 757 02da 91       		.byte	0x91
 758 02db 7C       		.sleb128 -4
 759 02dc 00       		.byte	0
 760 02dd 00       		.byte	0
 761              		.section	.debug_abbrev,"",%progbits
 762              	.Ldebug_abbrev0:
 763 0000 01       		.uleb128 0x1
 764 0001 11       		.uleb128 0x11
 765 0002 01       		.byte	0x1
 766 0003 25       		.uleb128 0x25
 767 0004 0E       		.uleb128 0xe
 768 0005 13       		.uleb128 0x13
 769 0006 0B       		.uleb128 0xb
 770 0007 03       		.uleb128 0x3
 771 0008 0E       		.uleb128 0xe
 772 0009 1B       		.uleb128 0x1b
 773 000a 0E       		.uleb128 0xe
 774 000b 55       		.uleb128 0x55
 775 000c 06       		.uleb128 0x6
 776 000d 11       		.uleb128 0x11
 777 000e 01       		.uleb128 0x1
 778 000f 52       		.uleb128 0x52
 779 0010 01       		.uleb128 0x1
 780 0011 10       		.uleb128 0x10
 781 0012 06       		.uleb128 0x6
 782 0013 00       		.byte	0
 783 0014 00       		.byte	0
 784 0015 02       		.uleb128 0x2
 785 0016 24       		.uleb128 0x24
 786 0017 00       		.byte	0
 787 0018 0B       		.uleb128 0xb
 788 0019 0B       		.uleb128 0xb
 789 001a 3E       		.uleb128 0x3e
 790 001b 0B       		.uleb128 0xb
 791 001c 03       		.uleb128 0x3
 792 001d 0E       		.uleb128 0xe
 793 001e 00       		.byte	0
 794 001f 00       		.byte	0
 795 0020 03       		.uleb128 0x3
 796 0021 16       		.uleb128 0x16
 797 0022 00       		.byte	0
 798 0023 03       		.uleb128 0x3
 799 0024 0E       		.uleb128 0xe
 800 0025 3A       		.uleb128 0x3a
 801 0026 0B       		.uleb128 0xb
 802 0027 3B       		.uleb128 0x3b
 803 0028 0B       		.uleb128 0xb
 804 0029 49       		.uleb128 0x49
 805 002a 13       		.uleb128 0x13
 806 002b 00       		.byte	0
 807 002c 00       		.byte	0
 808 002d 04       		.uleb128 0x4
 809 002e 24       		.uleb128 0x24
 810 002f 00       		.byte	0
 811 0030 0B       		.uleb128 0xb
ARM GAS  /tmp/ccGXyuRM.s 			page 23


 812 0031 0B       		.uleb128 0xb
 813 0032 3E       		.uleb128 0x3e
 814 0033 0B       		.uleb128 0xb
 815 0034 03       		.uleb128 0x3
 816 0035 08       		.uleb128 0x8
 817 0036 00       		.byte	0
 818 0037 00       		.byte	0
 819 0038 05       		.uleb128 0x5
 820 0039 2E       		.uleb128 0x2e
 821 003a 01       		.byte	0x1
 822 003b 3F       		.uleb128 0x3f
 823 003c 0C       		.uleb128 0xc
 824 003d 03       		.uleb128 0x3
 825 003e 0E       		.uleb128 0xe
 826 003f 3A       		.uleb128 0x3a
 827 0040 0B       		.uleb128 0xb
 828 0041 3B       		.uleb128 0x3b
 829 0042 05       		.uleb128 0x5
 830 0043 27       		.uleb128 0x27
 831 0044 0C       		.uleb128 0xc
 832 0045 49       		.uleb128 0x49
 833 0046 13       		.uleb128 0x13
 834 0047 11       		.uleb128 0x11
 835 0048 01       		.uleb128 0x1
 836 0049 12       		.uleb128 0x12
 837 004a 01       		.uleb128 0x1
 838 004b 40       		.uleb128 0x40
 839 004c 0A       		.uleb128 0xa
 840 004d 9742     		.uleb128 0x2117
 841 004f 0C       		.uleb128 0xc
 842 0050 01       		.uleb128 0x1
 843 0051 13       		.uleb128 0x13
 844 0052 00       		.byte	0
 845 0053 00       		.byte	0
 846 0054 06       		.uleb128 0x6
 847 0055 34       		.uleb128 0x34
 848 0056 00       		.byte	0
 849 0057 03       		.uleb128 0x3
 850 0058 0E       		.uleb128 0xe
 851 0059 3A       		.uleb128 0x3a
 852 005a 0B       		.uleb128 0xb
 853 005b 3B       		.uleb128 0x3b
 854 005c 05       		.uleb128 0x5
 855 005d 49       		.uleb128 0x49
 856 005e 13       		.uleb128 0x13
 857 005f 02       		.uleb128 0x2
 858 0060 0A       		.uleb128 0xa
 859 0061 00       		.byte	0
 860 0062 00       		.byte	0
 861 0063 07       		.uleb128 0x7
 862 0064 2E       		.uleb128 0x2e
 863 0065 01       		.byte	0x1
 864 0066 3F       		.uleb128 0x3f
 865 0067 0C       		.uleb128 0xc
 866 0068 03       		.uleb128 0x3
 867 0069 0E       		.uleb128 0xe
 868 006a 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccGXyuRM.s 			page 24


 869 006b 0B       		.uleb128 0xb
 870 006c 3B       		.uleb128 0x3b
 871 006d 05       		.uleb128 0x5
 872 006e 27       		.uleb128 0x27
 873 006f 0C       		.uleb128 0xc
 874 0070 11       		.uleb128 0x11
 875 0071 01       		.uleb128 0x1
 876 0072 12       		.uleb128 0x12
 877 0073 01       		.uleb128 0x1
 878 0074 40       		.uleb128 0x40
 879 0075 0A       		.uleb128 0xa
 880 0076 9742     		.uleb128 0x2117
 881 0078 0C       		.uleb128 0xc
 882 0079 01       		.uleb128 0x1
 883 007a 13       		.uleb128 0x13
 884 007b 00       		.byte	0
 885 007c 00       		.byte	0
 886 007d 08       		.uleb128 0x8
 887 007e 05       		.uleb128 0x5
 888 007f 00       		.byte	0
 889 0080 03       		.uleb128 0x3
 890 0081 0E       		.uleb128 0xe
 891 0082 3A       		.uleb128 0x3a
 892 0083 0B       		.uleb128 0xb
 893 0084 3B       		.uleb128 0x3b
 894 0085 05       		.uleb128 0x5
 895 0086 49       		.uleb128 0x49
 896 0087 13       		.uleb128 0x13
 897 0088 02       		.uleb128 0x2
 898 0089 0A       		.uleb128 0xa
 899 008a 00       		.byte	0
 900 008b 00       		.byte	0
 901 008c 09       		.uleb128 0x9
 902 008d 2E       		.uleb128 0x2e
 903 008e 01       		.byte	0x1
 904 008f 3F       		.uleb128 0x3f
 905 0090 0C       		.uleb128 0xc
 906 0091 03       		.uleb128 0x3
 907 0092 0E       		.uleb128 0xe
 908 0093 3A       		.uleb128 0x3a
 909 0094 0B       		.uleb128 0xb
 910 0095 3B       		.uleb128 0x3b
 911 0096 05       		.uleb128 0x5
 912 0097 27       		.uleb128 0x27
 913 0098 0C       		.uleb128 0xc
 914 0099 49       		.uleb128 0x49
 915 009a 13       		.uleb128 0x13
 916 009b 11       		.uleb128 0x11
 917 009c 01       		.uleb128 0x1
 918 009d 12       		.uleb128 0x12
 919 009e 01       		.uleb128 0x1
 920 009f 40       		.uleb128 0x40
 921 00a0 06       		.uleb128 0x6
 922 00a1 9742     		.uleb128 0x2117
 923 00a3 0C       		.uleb128 0xc
 924 00a4 01       		.uleb128 0x1
 925 00a5 13       		.uleb128 0x13
ARM GAS  /tmp/ccGXyuRM.s 			page 25


 926 00a6 00       		.byte	0
 927 00a7 00       		.byte	0
 928 00a8 0A       		.uleb128 0xa
 929 00a9 2E       		.uleb128 0x2e
 930 00aa 01       		.byte	0x1
 931 00ab 3F       		.uleb128 0x3f
 932 00ac 0C       		.uleb128 0xc
 933 00ad 03       		.uleb128 0x3
 934 00ae 0E       		.uleb128 0xe
 935 00af 3A       		.uleb128 0x3a
 936 00b0 0B       		.uleb128 0xb
 937 00b1 3B       		.uleb128 0x3b
 938 00b2 05       		.uleb128 0x5
 939 00b3 27       		.uleb128 0x27
 940 00b4 0C       		.uleb128 0xc
 941 00b5 11       		.uleb128 0x11
 942 00b6 01       		.uleb128 0x1
 943 00b7 12       		.uleb128 0x12
 944 00b8 01       		.uleb128 0x1
 945 00b9 40       		.uleb128 0x40
 946 00ba 06       		.uleb128 0x6
 947 00bb 9742     		.uleb128 0x2117
 948 00bd 0C       		.uleb128 0xc
 949 00be 01       		.uleb128 0x1
 950 00bf 13       		.uleb128 0x13
 951 00c0 00       		.byte	0
 952 00c1 00       		.byte	0
 953 00c2 0B       		.uleb128 0xb
 954 00c3 2E       		.uleb128 0x2e
 955 00c4 01       		.byte	0x1
 956 00c5 3F       		.uleb128 0x3f
 957 00c6 0C       		.uleb128 0xc
 958 00c7 03       		.uleb128 0x3
 959 00c8 0E       		.uleb128 0xe
 960 00c9 3A       		.uleb128 0x3a
 961 00ca 0B       		.uleb128 0xb
 962 00cb 3B       		.uleb128 0x3b
 963 00cc 05       		.uleb128 0x5
 964 00cd 27       		.uleb128 0x27
 965 00ce 0C       		.uleb128 0xc
 966 00cf 49       		.uleb128 0x49
 967 00d0 13       		.uleb128 0x13
 968 00d1 11       		.uleb128 0x11
 969 00d2 01       		.uleb128 0x1
 970 00d3 12       		.uleb128 0x12
 971 00d4 01       		.uleb128 0x1
 972 00d5 40       		.uleb128 0x40
 973 00d6 06       		.uleb128 0x6
 974 00d7 9742     		.uleb128 0x2117
 975 00d9 0C       		.uleb128 0xc
 976 00da 00       		.byte	0
 977 00db 00       		.byte	0
 978 00dc 00       		.byte	0
 979              		.section	.debug_loc,"",%progbits
 980              	.Ldebug_loc0:
 981              	.LLST0:
 982 0000 00000000 		.4byte	.LFB4
ARM GAS  /tmp/ccGXyuRM.s 			page 26


 983 0004 02000000 		.4byte	.LCFI0
 984 0008 0200     		.2byte	0x2
 985 000a 7D       		.byte	0x7d
 986 000b 00       		.sleb128 0
 987 000c 02000000 		.4byte	.LCFI0
 988 0010 14000000 		.4byte	.LFE4
 989 0014 0200     		.2byte	0x2
 990 0016 7D       		.byte	0x7d
 991 0017 08       		.sleb128 8
 992 0018 00000000 		.4byte	0
 993 001c 00000000 		.4byte	0
 994              	.LLST1:
 995 0020 00000000 		.4byte	.LFB5
 996 0024 02000000 		.4byte	.LCFI1
 997 0028 0200     		.2byte	0x2
 998 002a 7D       		.byte	0x7d
 999 002b 00       		.sleb128 0
 1000 002c 02000000 		.4byte	.LCFI1
 1001 0030 10000000 		.4byte	.LFE5
 1002 0034 0200     		.2byte	0x2
 1003 0036 7D       		.byte	0x7d
 1004 0037 08       		.sleb128 8
 1005 0038 00000000 		.4byte	0
 1006 003c 00000000 		.4byte	0
 1007              	.LLST2:
 1008 0040 00000000 		.4byte	.LFB6
 1009 0044 02000000 		.4byte	.LCFI2
 1010 0048 0200     		.2byte	0x2
 1011 004a 7D       		.byte	0x7d
 1012 004b 00       		.sleb128 0
 1013 004c 02000000 		.4byte	.LCFI2
 1014 0050 14000000 		.4byte	.LFE6
 1015 0054 0200     		.2byte	0x2
 1016 0056 7D       		.byte	0x7d
 1017 0057 08       		.sleb128 8
 1018 0058 00000000 		.4byte	0
 1019 005c 00000000 		.4byte	0
 1020              	.LLST3:
 1021 0060 00000000 		.4byte	.LFB7
 1022 0064 02000000 		.4byte	.LCFI3
 1023 0068 0200     		.2byte	0x2
 1024 006a 7D       		.byte	0x7d
 1025 006b 00       		.sleb128 0
 1026 006c 02000000 		.4byte	.LCFI3
 1027 0070 10000000 		.4byte	.LFE7
 1028 0074 0200     		.2byte	0x2
 1029 0076 7D       		.byte	0x7d
 1030 0077 08       		.sleb128 8
 1031 0078 00000000 		.4byte	0
 1032 007c 00000000 		.4byte	0
 1033              	.LLST4:
 1034 0080 00000000 		.4byte	.LFB8
 1035 0084 02000000 		.4byte	.LCFI4
 1036 0088 0200     		.2byte	0x2
 1037 008a 7D       		.byte	0x7d
 1038 008b 00       		.sleb128 0
 1039 008c 02000000 		.4byte	.LCFI4
ARM GAS  /tmp/ccGXyuRM.s 			page 27


 1040 0090 16000000 		.4byte	.LFE8
 1041 0094 0200     		.2byte	0x2
 1042 0096 7D       		.byte	0x7d
 1043 0097 10       		.sleb128 16
 1044 0098 00000000 		.4byte	0
 1045 009c 00000000 		.4byte	0
 1046              	.LLST5:
 1047 00a0 00000000 		.4byte	.LFB9
 1048 00a4 02000000 		.4byte	.LCFI5
 1049 00a8 0200     		.2byte	0x2
 1050 00aa 7D       		.byte	0x7d
 1051 00ab 00       		.sleb128 0
 1052 00ac 02000000 		.4byte	.LCFI5
 1053 00b0 20000000 		.4byte	.LFE9
 1054 00b4 0200     		.2byte	0x2
 1055 00b6 7D       		.byte	0x7d
 1056 00b7 10       		.sleb128 16
 1057 00b8 00000000 		.4byte	0
 1058 00bc 00000000 		.4byte	0
 1059              	.LLST6:
 1060 00c0 00000000 		.4byte	.LFB10
 1061 00c4 02000000 		.4byte	.LCFI6
 1062 00c8 0200     		.2byte	0x2
 1063 00ca 7D       		.byte	0x7d
 1064 00cb 00       		.sleb128 0
 1065 00cc 02000000 		.4byte	.LCFI6
 1066 00d0 20000000 		.4byte	.LFE10
 1067 00d4 0200     		.2byte	0x2
 1068 00d6 7D       		.byte	0x7d
 1069 00d7 10       		.sleb128 16
 1070 00d8 00000000 		.4byte	0
 1071 00dc 00000000 		.4byte	0
 1072              		.section	.debug_aranges,"",%progbits
 1073 0000 6C000000 		.4byte	0x6c
 1074 0004 0200     		.2byte	0x2
 1075 0006 00000000 		.4byte	.Ldebug_info0
 1076 000a 04       		.byte	0x4
 1077 000b 00       		.byte	0
 1078 000c 0000     		.2byte	0
 1079 000e 0000     		.2byte	0
 1080 0010 00000000 		.4byte	.LFB0
 1081 0014 0E000000 		.4byte	.LFE0-.LFB0
 1082 0018 00000000 		.4byte	.LFB1
 1083 001c 0A000000 		.4byte	.LFE1-.LFB1
 1084 0020 00000000 		.4byte	.LFB2
 1085 0024 0E000000 		.4byte	.LFE2-.LFB2
 1086 0028 00000000 		.4byte	.LFB3
 1087 002c 0A000000 		.4byte	.LFE3-.LFB3
 1088 0030 00000000 		.4byte	.LFB4
 1089 0034 14000000 		.4byte	.LFE4-.LFB4
 1090 0038 00000000 		.4byte	.LFB5
 1091 003c 10000000 		.4byte	.LFE5-.LFB5
 1092 0040 00000000 		.4byte	.LFB6
 1093 0044 14000000 		.4byte	.LFE6-.LFB6
 1094 0048 00000000 		.4byte	.LFB7
 1095 004c 10000000 		.4byte	.LFE7-.LFB7
 1096 0050 00000000 		.4byte	.LFB8
ARM GAS  /tmp/ccGXyuRM.s 			page 28


 1097 0054 16000000 		.4byte	.LFE8-.LFB8
 1098 0058 00000000 		.4byte	.LFB9
 1099 005c 20000000 		.4byte	.LFE9-.LFB9
 1100 0060 00000000 		.4byte	.LFB10
 1101 0064 20000000 		.4byte	.LFE10-.LFB10
 1102 0068 00000000 		.4byte	0
 1103 006c 00000000 		.4byte	0
 1104              		.section	.debug_ranges,"",%progbits
 1105              	.Ldebug_ranges0:
 1106 0000 00000000 		.4byte	.LFB0
 1107 0004 0E000000 		.4byte	.LFE0
 1108 0008 00000000 		.4byte	.LFB1
 1109 000c 0A000000 		.4byte	.LFE1
 1110 0010 00000000 		.4byte	.LFB2
 1111 0014 0E000000 		.4byte	.LFE2
 1112 0018 00000000 		.4byte	.LFB3
 1113 001c 0A000000 		.4byte	.LFE3
 1114 0020 00000000 		.4byte	.LFB4
 1115 0024 14000000 		.4byte	.LFE4
 1116 0028 00000000 		.4byte	.LFB5
 1117 002c 10000000 		.4byte	.LFE5
 1118 0030 00000000 		.4byte	.LFB6
 1119 0034 14000000 		.4byte	.LFE6
 1120 0038 00000000 		.4byte	.LFB7
 1121 003c 10000000 		.4byte	.LFE7
 1122 0040 00000000 		.4byte	.LFB8
 1123 0044 16000000 		.4byte	.LFE8
 1124 0048 00000000 		.4byte	.LFB9
 1125 004c 20000000 		.4byte	.LFE9
 1126 0050 00000000 		.4byte	.LFB10
 1127 0054 20000000 		.4byte	.LFE10
 1128 0058 00000000 		.4byte	0
 1129 005c 00000000 		.4byte	0
 1130              		.section	.debug_line,"",%progbits
 1131              	.Ldebug_line0:
 1132 0000 B7010000 		.section	.debug_str,"MS",%progbits,1
 1132      0200DF00 
 1132      00000201 
 1132      FB0E0D00 
 1132      01010101 
 1133              	.LASF28:
 1134 0000 5F5F7365 		.ascii	"__set_CONTROL\000"
 1134      745F434F 
 1134      4E54524F 
 1134      4C00
 1135              	.LASF35:
 1136 000e 636D7369 		.ascii	"cmsis_core/core_cm0.c\000"
 1136      735F636F 
 1136      72652F63 
 1136      6F72655F 
 1136      636D302E 
 1137              	.LASF3:
 1138 0024 5F5F696E 		.ascii	"__int16_t\000"
 1138      7431365F 
 1138      7400
 1139              	.LASF31:
 1140 002e 76616C75 		.ascii	"value\000"
ARM GAS  /tmp/ccGXyuRM.s 			page 29


 1140      6500
 1141              	.LASF6:
 1142 0034 5F5F696E 		.ascii	"__int32_t\000"
 1142      7433325F 
 1142      7400
 1143              	.LASF26:
 1144 003e 7072694D 		.ascii	"priMask\000"
 1144      61736B00 
 1145              	.LASF22:
 1146 0046 746F704F 		.ascii	"topOfProcStack\000"
 1146      6650726F 
 1146      63537461 
 1146      636B00
 1147              	.LASF18:
 1148 0055 5F5F6765 		.ascii	"__get_MSP\000"
 1148      745F4D53 
 1148      5000
 1149              	.LASF21:
 1150 005f 5F5F7365 		.ascii	"__set_MSP\000"
 1150      745F4D53 
 1150      5000
 1151              	.LASF17:
 1152 0069 5F5F6765 		.ascii	"__get_PSP\000"
 1152      745F5053 
 1152      5000
 1153              	.LASF20:
 1154 0073 5F5F7365 		.ascii	"__set_PSP\000"
 1154      745F5053 
 1154      5000
 1155              	.LASF32:
 1156 007d 5F5F5245 		.ascii	"__REV16\000"
 1156      56313600 
 1157              	.LASF1:
 1158 0085 756E7369 		.ascii	"unsigned char\000"
 1158      676E6564 
 1158      20636861 
 1158      7200
 1159              	.LASF24:
 1160 0093 5F5F6765 		.ascii	"__get_PRIMASK\000"
 1160      745F5052 
 1160      494D4153 
 1160      4B00
 1161              	.LASF9:
 1162 00a1 6C6F6E67 		.ascii	"long unsigned int\000"
 1162      20756E73 
 1162      69676E65 
 1162      6420696E 
 1162      7400
 1163              	.LASF5:
 1164 00b3 73686F72 		.ascii	"short unsigned int\000"
 1164      7420756E 
 1164      7369676E 
 1164      65642069 
 1164      6E7400
 1165              	.LASF29:
 1166 00c6 636F6E74 		.ascii	"control\000"
 1166      726F6C00 
ARM GAS  /tmp/ccGXyuRM.s 			page 30


 1167              	.LASF4:
 1168 00ce 5F5F7569 		.ascii	"__uint16_t\000"
 1168      6E743136 
 1168      5F7400
 1169              	.LASF8:
 1170 00d9 5F5F7569 		.ascii	"__uint32_t\000"
 1170      6E743332 
 1170      5F7400
 1171              	.LASF36:
 1172 00e4 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/atom_planolux_redond"
 1172      652F6D65 
 1172      642F446F 
 1172      63756D65 
 1172      6E74732F 
 1173 0117 6100     		.ascii	"a\000"
 1174              	.LASF12:
 1175 0119 756E7369 		.ascii	"unsigned int\000"
 1175      676E6564 
 1175      20696E74 
 1175      00
 1176              	.LASF11:
 1177 0126 6C6F6E67 		.ascii	"long long unsigned int\000"
 1177      206C6F6E 
 1177      6720756E 
 1177      7369676E 
 1177      65642069 
 1178              	.LASF19:
 1179 013d 72657375 		.ascii	"result\000"
 1179      6C7400
 1180              	.LASF13:
 1181 0144 696E7431 		.ascii	"int16_t\000"
 1181      365F7400 
 1182              	.LASF15:
 1183 014c 696E7433 		.ascii	"int32_t\000"
 1183      325F7400 
 1184              	.LASF33:
 1185 0154 5F5F5245 		.ascii	"__REVSH\000"
 1185      56534800 
 1186              	.LASF23:
 1187 015c 746F704F 		.ascii	"topOfMainStack\000"
 1187      664D6169 
 1187      6E537461 
 1187      636B00
 1188              	.LASF10:
 1189 016b 6C6F6E67 		.ascii	"long long int\000"
 1189      206C6F6E 
 1189      6720696E 
 1189      7400
 1190              	.LASF25:
 1191 0179 5F5F7365 		.ascii	"__set_PRIMASK\000"
 1191      745F5052 
 1191      494D4153 
 1191      4B00
 1192              	.LASF30:
 1193 0187 5F5F5245 		.ascii	"__REV\000"
 1193      5600
 1194              	.LASF27:
ARM GAS  /tmp/ccGXyuRM.s 			page 31


 1195 018d 5F5F6765 		.ascii	"__get_CONTROL\000"
 1195      745F434F 
 1195      4E54524F 
 1195      4C00
 1196              	.LASF2:
 1197 019b 73686F72 		.ascii	"short int\000"
 1197      7420696E 
 1197      7400
 1198              	.LASF14:
 1199 01a5 75696E74 		.ascii	"uint16_t\000"
 1199      31365F74 
 1199      00
 1200              	.LASF34:
 1201 01ae 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 1201      43313120 
 1201      352E322E 
 1201      31203230 
 1201      31353132 
 1202 01e1 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 1202      20726576 
 1202      6973696F 
 1202      6E203233 
 1202      31383438 
 1203 0214 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 1203      662D3220 
 1203      2D4F3020 
 1203      2D666F6D 
 1203      69742D66 
 1204 0247 66756E63 		.ascii	"function-sections\000"
 1204      74696F6E 
 1204      2D736563 
 1204      74696F6E 
 1204      7300
 1205              	.LASF16:
 1206 0259 75696E74 		.ascii	"uint32_t\000"
 1206      33325F74 
 1206      00
 1207              	.LASF7:
 1208 0262 6C6F6E67 		.ascii	"long int\000"
 1208      20696E74 
 1208      00
 1209              	.LASF0:
 1210 026b 7369676E 		.ascii	"signed char\000"
 1210      65642063 
 1210      68617200 
 1211              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccGXyuRM.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 core_cm0.c
     /tmp/ccGXyuRM.s:55     .text.__get_PSP:00000000 $t
     /tmp/ccGXyuRM.s:60     .text.__get_PSP:00000000 __get_PSP
     /tmp/ccGXyuRM.s:84     .text.__set_PSP:00000000 $t
     /tmp/ccGXyuRM.s:89     .text.__set_PSP:00000000 __set_PSP
     /tmp/ccGXyuRM.s:109    .text.__get_MSP:00000000 $t
     /tmp/ccGXyuRM.s:114    .text.__get_MSP:00000000 __get_MSP
     /tmp/ccGXyuRM.s:137    .text.__set_MSP:00000000 $t
     /tmp/ccGXyuRM.s:142    .text.__set_MSP:00000000 __set_MSP
     /tmp/ccGXyuRM.s:162    .text.__get_PRIMASK:00000000 $t
     /tmp/ccGXyuRM.s:167    .text.__get_PRIMASK:00000000 __get_PRIMASK
     /tmp/ccGXyuRM.s:196    .text.__set_PRIMASK:00000000 $t
     /tmp/ccGXyuRM.s:201    .text.__set_PRIMASK:00000000 __set_PRIMASK
     /tmp/ccGXyuRM.s:226    .text.__get_CONTROL:00000000 $t
     /tmp/ccGXyuRM.s:231    .text.__get_CONTROL:00000000 __get_CONTROL
     /tmp/ccGXyuRM.s:260    .text.__set_CONTROL:00000000 $t
     /tmp/ccGXyuRM.s:265    .text.__set_CONTROL:00000000 __set_CONTROL
     /tmp/ccGXyuRM.s:290    .text.__REV:00000000 $t
     /tmp/ccGXyuRM.s:295    .text.__REV:00000000 __REV
     /tmp/ccGXyuRM.s:326    .text.__REV16:00000000 $t
     /tmp/ccGXyuRM.s:331    .text.__REV16:00000000 __REV16
     /tmp/ccGXyuRM.s:367    .text.__REVSH:00000000 $t
     /tmp/ccGXyuRM.s:372    .text.__REVSH:00000000 __REVSH
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
